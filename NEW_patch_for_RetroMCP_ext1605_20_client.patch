--- net/minecraft/src/RenderList.java
+++ net/minecraft/src/RenderList.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import java.nio.IntBuffer;
+
 import org.lwjgl.opengl.GL11;
 
 public class RenderList {
@@ -14,23 +15,23 @@
 	private boolean render = false;
 	private boolean isCached = false;
 
-	public void setLocation(int var1, int var2, int var3, double var4, double var6, double var8) {
+	public void setLocation(int integer1, int integer2, int integer3, double double4, double double5, double double6) {
 		this.render = true;
 		this.buffer.clear();
-		this.posX = var1;
-		this.posY = var2;
-		this.posZ = var3;
-		this.playerPosX = (float)var4;
-		this.playerPosY = (float)var6;
-		this.playerPosZ = (float)var8;
-	}
-
-	public boolean isRenderedAt(int var1, int var2, int var3) {
-		return !this.render ? false : var1 == this.posX && var2 == this.posY && var3 == this.posZ;
-	}
-
-	public void render(int var1) {
-		this.buffer.put(var1);
+		this.posX = integer1;
+		this.posY = integer2;
+		this.posZ = integer3;
+		this.playerPosX = (float)double4;
+		this.playerPosY = (float)double5;
+		this.playerPosZ = (float)double6;
+	}
+
+	public boolean isRenderedAt(int integer1, int integer2, int integer3) {
+		return !this.render ? false : integer1 == this.posX && integer2 == this.posY && integer3 == this.posZ;
+	}
+
+	public void render(int integer) {
+		this.buffer.put(integer);
 		if(this.buffer.remaining() == 0) {
 			this.render();
 		}
@@ -50,8 +51,8 @@
 				GL11.glCallLists(this.buffer);
 				GL11.glPopMatrix();
 			}
-
 		}
+
 	}
 
 	public void reset() {
--- /dev/null
+++ net/minecraft/src/BlockMobSpawnerOld.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockMobSpawnerOld extends BlockContainerOld {
+	protected BlockMobSpawnerOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.rock);
+	}
+
+	protected TileEntity getBlockEntity() {
+		return new TileEntityMobSpawner();
+	}
+
+	public int idDropped(int integer, Random random) {
+		return 0;
+	}
+
+	public int quantityDropped(Random random) {
+		return 0;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+}
--- net/minecraft/src/ItemBlock.java
+++ net/minecraft/src/ItemBlock.java
@@ -3,50 +3,52 @@
 public class ItemBlock extends Item {
 	private int blockID;
 
-	public ItemBlock(int var1) {
-		super(var1);
-		this.blockID = var1 + 256;
-		this.setIconIndex(Block.blocksList[var1 + 256].getBlockTextureFromSide(2));
+	public ItemBlock(int itemID) {
+		super(itemID);
+		this.blockID = itemID + 32767;
+		this.setIconIndex(Block.blocksList[itemID + 32767].getBlockTextureFromSide(2));
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var3.getBlockId(var4, var5, var6) == Block.snow.blockID) {
-			var7 = 0;
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(world.getBlockId(x, y, z) == Block.snow.blockID) {
+			side = 0;
 		} else {
-			if(var7 == 0) {
-				--var5;
-			}
-
-			if(var7 == 1) {
-				++var5;
-			}
-
-			if(var7 == 2) {
-				--var6;
-			}
-
-			if(var7 == 3) {
-				++var6;
-			}
-
-			if(var7 == 4) {
-				--var4;
-			}
-
-			if(var7 == 5) {
-				++var4;
+			if(side == 0) {
+				--y;
+			}
+
+			if(side == 1) {
+				++y;
+			}
+
+			if(side == 2) {
+				--z;
+			}
+
+			if(side == 3) {
+				++z;
+			}
+
+			if(side == 4) {
+				--x;
+			}
+
+			if(side == 5) {
+				++x;
 			}
 		}
 
-		if(var1.stackSize == 0) {
+		if(stack.stackSize == 0) {
 			return false;
 		} else {
-			if(var3.canBlockBePlacedAt(this.blockID, var4, var5, var6, false)) {
-				Block var8 = Block.blocksList[this.blockID];
-				if(var3.setBlockWithNotify(var4, var5, var6, this.blockID)) {
-					Block.blocksList[this.blockID].onBlockPlaced(var3, var4, var5, var6, var7);
-					var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var8.stepSound.getStepSound(), (var8.stepSound.getVolume() + 1.0F) / 2.0F, var8.stepSound.getPitch() * 0.8F);
-					--var1.stackSize;
+			if(world.canBlockBePlacedAt(this.blockID, x, y, z, false)) {
+				Block block8 = Block.blocksList[this.blockID];
+				if(world.setBlockWithNotify(x, y, z, this.blockID)) {
+					Block.blocksList[this.blockID].onBlockPlaced(world, x, y, z, side);
+					world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), block8.stepSound.getStepSound(), (block8.stepSound.getVolume() + 1.0F) / 2.0F, block8.stepSound.getPitch() * 0.8F);
+					if(!InputHandler.field_9759_4OT0vPMcJ68s5EU822c0Y9Asw74Su111s3rRCw8OSGMsYM8lx153p73RBtj3) {
+						--stack.stackSize;
+					}
 				}
 			}
 
--- net/minecraft/src/GuiIngameMenu.java
+++ net/minecraft/src/GuiIngameMenu.java
@@ -7,21 +7,22 @@
 	public void initGui() {
 		this.updateCounter2 = 0;
 		this.controlList.clear();
-		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 48, "Save and quit to title"));
+		this.controlList.add(new GuiButton(1, this.width / 16, this.height / 4 + 48, "Save and quit to title"));
 		if(this.mc.isMultiplayerWorld()) {
 			((GuiButton)this.controlList.get(0)).displayString = "Disconnect";
 		}
 
-		this.controlList.add(new GuiButton(4, this.width / 2 - 100, this.height / 4 + 24, "Back to game"));
-		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96, "Options..."));
+		this.controlList.add(new GuiButton(4, this.width / 16, this.height / 4 + 24, "Back to game"));
+		this.controlList.add(new GuiButton(0, this.width / 16, this.height / 4 + 96, "Options..."));
+		this.controlList.add(new GuiButton(2, this.width / 16, this.height / 4 + 72, "Mods"));
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.id == 0) {
+	protected void actionPerformed(GuiButton button) {
+		if(button.id == 0) {
 			this.mc.displayGuiScreen(new GuiOptions(this, this.mc.options));
 		}
 
-		if(var1.id == 1) {
+		if(button.id == 1) {
 			if(this.mc.isMultiplayerWorld()) {
 				this.mc.theWorld.sendQuittingDisconnectingPacket();
 			}
@@ -30,7 +31,11 @@
 			this.mc.displayGuiScreen(new GuiMainMenu());
 		}
 
-		if(var1.id == 4) {
+		if(button.id == 2) {
+			this.mc.displayGuiScreen(new GuiExtensions(this));
+		}
+
+		if(button.id == 4) {
 			this.mc.displayGuiScreen((GuiScreen)null);
 			this.mc.setIngameFocus();
 		}
@@ -42,17 +47,29 @@
 		++this.updateCounter;
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		boolean var4 = !this.mc.theWorld.saveWorld(this.updateCounter2++);
-		if(var4 || this.updateCounter < 20) {
-			float var5 = ((float)(this.updateCounter % 10) + var3) / 10.0F;
-			var5 = MathHelper.sin(var5 * (float)Math.PI * 2.0F) * 0.2F + 0.8F;
-			int var6 = (int)(255.0F * var5);
-			this.drawString(this.fontRenderer, "Saving level..", 8, this.height - 16, var6 << 16 | var6 << 8 | var6);
-		}
-
-		this.drawCenteredString(this.fontRenderer, "Game menu", this.width / 2, 40, 16777215);
-		super.drawScreen(var1, var2, var3);
+		boolean z4 = !this.mc.theWorld.saveWorld(this.updateCounter2++);
+		int i6;
+		if(z4 || this.updateCounter < 20) {
+			float f5 = ((float)(this.updateCounter % 10) + renderPartialTick) / 10.0F;
+			f5 = MathHelper.sin(f5 * (float)Math.PI * 2.0F) * 0.2F + 0.8F;
+			i6 = (int)(255.0F * f5);
+			Gui.drawString(this.fontRenderer, "Saving level..", 8, this.height - 16, i6 << 16 | i6 << 8 | i6);
+		}
+
+		drawString(this.fontRenderer, "Game menu", this.width / 16, 46, 0xFFFFFF);
+		int i10 = Math.max(this.width / 16 + 210, this.width / 6 * 4);
+		i6 = this.height / 4 + 20;
+		Gui.drawString(this.fontRenderer, "Players nearby", i10, i6, 0xFFFFFF);
+
+		for(int i7 = 0; i7 != this.mc.theWorld.playerEntities.size(); ++i7) {
+			i6 += 12;
+			EntityPlayer entityPlayer8 = (EntityPlayer)this.mc.theWorld.playerEntities.get(i7);
+			String string9 = entityPlayer8.username;
+			Gui.drawString(this.fontRenderer, string9, i10, i6, entityPlayer8 == this.mc.thePlayer ? -1610547456 : (entityPlayer8 instanceof EntityOtherPlayerMPUnknownClass ? -1601054209 : -1593835521));
+		}
+
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- net/minecraft/src/ThreadConnectToServer.java
+++ net/minecraft/src/ThreadConnectToServer.java
@@ -2,6 +2,7 @@
 
 import java.net.ConnectException;
 import java.net.UnknownHostException;
+
 import net.minecraft.client.Minecraft;
 
 class ThreadConnectToServer extends Thread {
@@ -10,11 +11,11 @@
 	final int port;
 	final GuiConnecting connectingGui;
 
-	ThreadConnectToServer(GuiConnecting var1, Minecraft var2, String var3, int var4) {
-		this.connectingGui = var1;
-		this.mc = var2;
-		this.ip = var3;
-		this.port = var4;
+	ThreadConnectToServer(GuiConnecting guiConnecting, Minecraft minecraft, String ip, int port) {
+		this.connectingGui = guiConnecting;
+		this.mc = minecraft;
+		this.ip = ip;
+		this.port = port;
 	}
 
 	public void run() {
@@ -24,26 +25,32 @@
 				return;
 			}
 
-			GuiConnecting.getNetClientHandler(this.connectingGui).addToSendQueue(new Packet2Handshake(this.mc.session.username));
-		} catch (UnknownHostException var2) {
+			String string1 = this.mc.session.username;
+			if(GuiMultiplayer.playerMode != 0) {
+				string1 = (char)GuiMultiplayer.playerMode + "" + string1;
+				ExtLogger.i("connecting as " + string1);
+			}
+
+			GuiConnecting.getNetClientHandler(this.connectingGui).addToSendQueue(new Packet2Handshake(string1));
+		} catch (UnknownHostException unknownHostException2) {
 			if(GuiConnecting.isCancelled(this.connectingGui)) {
 				return;
 			}
 
 			this.mc.displayGuiScreen(new GuiConnectFailed("Failed to connect to the server", "Unknown host \'" + this.ip + "\'"));
-		} catch (ConnectException var3) {
-			if(GuiConnecting.isCancelled(this.connectingGui)) {
-				return;
-			}
-
-			this.mc.displayGuiScreen(new GuiConnectFailed("Failed to connect to the server", var3.getMessage()));
-		} catch (Exception var4) {
-			if(GuiConnecting.isCancelled(this.connectingGui)) {
-				return;
-			}
-
-			var4.printStackTrace();
-			this.mc.displayGuiScreen(new GuiConnectFailed("Failed to connect to the server", var4.toString()));
+		} catch (ConnectException connectException3) {
+			if(GuiConnecting.isCancelled(this.connectingGui)) {
+				return;
+			}
+
+			this.mc.displayGuiScreen(new GuiConnectFailed("Failed to connect to the server", connectException3.getMessage()));
+		} catch (Exception exception4) {
+			if(GuiConnecting.isCancelled(this.connectingGui)) {
+				return;
+			}
+
+			exception4.printStackTrace();
+			this.mc.displayGuiScreen(new GuiConnectFailed("Failed to connect to the server", exception4.toString()));
 		}
 
 	}
--- net/minecraft/src/EntityReddustFX.java
+++ net/minecraft/src/EntityReddustFX.java
@@ -3,37 +3,37 @@
 public class EntityReddustFX extends EntityFX {
 	float reddustParticleScale;
 
-	public EntityReddustFX(World var1, double var2, double var4, double var6) {
-		this(var1, var2, var4, var6, 1.0F);
+	public EntityReddustFX(World vg, double double2, double double3, double double4) {
+		this(vg, double2, double3, double4, 1.0F);
 	}
 
-	public EntityReddustFX(World var1, double var2, double var4, double var6, float var8) {
-		super(var1, var2, var4, var6, 0.0D, 0.0D, 0.0D);
+	public EntityReddustFX(World vg, double double2, double double3, double double4, float float5) {
+		super(vg, double2, double3, double4, 0.0D, 0.0D, 0.0D);
 		this.motionX *= (double)0.1F;
 		this.motionY *= (double)0.1F;
 		this.motionZ *= (double)0.1F;
-		this.particleRed = (float)(Math.random() * (double)0.3F) + 0.7F;
-		this.particleGreen = this.particleBlue = (float)(Math.random() * (double)0.1F);
-		this.particleScale *= 12.0F / 16.0F;
-		this.particleScale *= var8;
+		this.particleGreen = (float)(Math.random() * (double)0.3F) + 0.7F;
+		this.particleRed = this.particleBlue = (float)(Math.random() * (double)0.1F);
+		this.particleScale *= 0.75F;
+		this.particleScale *= float5;
 		this.reddustParticleScale = this.particleScale;
 		this.particleMaxAge = (int)(8.0D / (Math.random() * 0.8D + 0.2D));
-		this.particleMaxAge = (int)((float)this.particleMaxAge * var8);
+		this.particleMaxAge = (int)((float)this.particleMaxAge * float5);
 		this.noClip = false;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		float var8 = ((float)this.particleAge + var2) / (float)this.particleMaxAge * 32.0F;
-		if(var8 < 0.0F) {
-			var8 = 0.0F;
-		}
-
-		if(var8 > 1.0F) {
-			var8 = 1.0F;
-		}
-
-		this.particleScale = this.reddustParticleScale * var8;
-		super.renderParticle(var1, var2, var3, var4, var5, var6, var7);
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		float f8 = ((float)this.particleAge + renderPartialTick) / (float)this.particleMaxAge * 32.0F;
+		if(f8 < 0.0F) {
+			f8 = 0.0F;
+		}
+
+		if(f8 > 1.0F) {
+			f8 = 1.0F;
+		}
+
+		this.particleScale = this.reddustParticleScale * f8;
+		super.renderParticle(tessellator, renderPartialTick, xOffset, yOffset, zOffset, xOffset2, zOffset2);
 	}
 
 	public void onUpdate() {
--- /dev/null
+++ net/minecraft/src/InventoryEssenceTransformer.java
@@ -1,0 +1,66 @@
+package net.minecraft.src;
+
+public class InventoryEssenceTransformer implements IInventory {
+	public ItemStack[] stackList;
+	private int gridSize;
+	private EssenceTransformerInventoryCB craftingInventory;
+
+	public InventoryEssenceTransformer(EssenceTransformerInventoryCB au, int integer2, int integer3) {
+		this.gridSize = integer2 * integer3;
+		this.stackList = new ItemStack[this.gridSize];
+		this.craftingInventory = au;
+	}
+
+	public InventoryEssenceTransformer(EssenceTransformerInventoryCB au, ItemStack[] arr) {
+		this.gridSize = arr.length;
+		this.stackList = arr;
+		this.craftingInventory = au;
+	}
+
+	public int getSizeInventory() {
+		return this.gridSize;
+	}
+
+	public ItemStack getStackInSlot(int slot) {
+		return this.stackList[slot];
+	}
+
+	public String getInvName() {
+		return "Crafting";
+	}
+
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.stackList[slot] != null) {
+			ItemStack itemStack3;
+			if(this.stackList[slot].stackSize <= stackSize) {
+				itemStack3 = this.stackList[slot];
+				this.stackList[slot] = null;
+				this.craftingInventory.a(this);
+				return itemStack3;
+			} else {
+				itemStack3 = this.stackList[slot].splitStack(stackSize);
+				if(this.stackList[slot].stackSize == 0) {
+					this.stackList[slot] = null;
+				}
+
+				this.craftingInventory.a(this);
+				return itemStack3;
+			}
+		} else {
+			return null;
+		}
+	}
+
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.stackList[slot] = itemStack;
+		this.craftingInventory.a(this);
+	}
+
+	public int getInventoryStackLimit() {
+		return 1000;
+	}
+
+	public void onInventoryChanged() {
+		this.craftingInventory.a(this);
+	}
+}
--- /dev/null
+++ net/minecraft/src/ScreenDebugMenu.java
@@ -1,0 +1,101 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+public class ScreenDebugMenu extends GuiScreen {
+	private int selection = 0;
+	public static boolean dbg_conf_spawnShadowPlayers = true;
+	public static boolean dbg_conf_enableCheats = false;
+	public static boolean dbg_conf_forceFracWorld = false;
+	public static boolean dbg_conf_nebulaEvt = false;
+	public static boolean dbg_conf_showDebugInfo = false;
+	public static boolean dbg_conf_hideUI = false;
+	public static boolean dbg_conf_fly = false;
+	public static boolean dbg_disable_worldgen = false;
+	public static boolean conf_r4_preview_mode = false;
+	public static boolean field_7956_48H3fYB8k2jE5s5HC81S9Sm600nFD73Lb4N90Pl1F0LSIx70mF1gldgvzgRz = false;
+	public static boolean field_7962_6A22Bnr2u4VLzq02xYfo1fv000h7Yi0jssFs2v9mAXoYWf21povU11i9755K = false;
+	public static boolean field_7960_2AJG81m1pl0O5bhn2XiQ37CD76Uoi3M5l8gTKvm6mx16vAu3Ik5oCR8W6P15 = false;
+	public static boolean field_7955_2x00ovR61G2n6Zj5nN9jd9FAdV8H3Cz32KtPOCpcvM363cbIQ5o5vSMN7x7B = false;
+	public static boolean field_7964_8G80Kimsj2t150ZuEHxk97V3fSV455qzurOOVWgX8oTDDCEH9YV34z9vRAoC = false;
+
+	public ScreenDebugMenu(Minecraft minecraft) {
+		this.mc = minecraft;
+	}
+
+	private void toggleDebugOption(int integer) {
+		switch(integer) {
+		case 0:
+			dbg_conf_spawnShadowPlayers = !dbg_conf_spawnShadowPlayers;
+			break;
+		case 1:
+			dbg_conf_enableCheats = !dbg_conf_enableCheats;
+			break;
+		case 2:
+			dbg_conf_forceFracWorld = !dbg_conf_forceFracWorld;
+			break;
+		case 3:
+			dbg_conf_nebulaEvt = !dbg_conf_nebulaEvt;
+			break;
+		case 4:
+			dbg_conf_showDebugInfo = !dbg_conf_showDebugInfo;
+			break;
+		case 5:
+			dbg_conf_hideUI = !dbg_conf_hideUI;
+			break;
+		case 6:
+			EntitySquib entitySquib2 = new EntitySquib(this.mc.theWorld);
+			entitySquib2.setPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ);
+			this.mc.theWorld.spawnEntityInWorld(entitySquib2);
+			break;
+		case 7:
+			dbg_conf_fly = !dbg_conf_fly;
+			break;
+		case 8:
+			dbg_disable_worldgen = !dbg_disable_worldgen;
+		}
+
+	}
+
+	protected void keyTyped(char character, int key) {
+		switch(key) {
+		case 57:
+		case 203:
+		case 205:
+			this.toggleDebugOption(this.selection);
+			break;
+		case 200:
+			--this.selection;
+			if(this.selection < 0) {
+				this.selection += 9;
+			}
+			break;
+		case 208:
+			++this.selection;
+			this.selection %= 9;
+		}
+
+		super.keyTyped(character, key);
+	}
+
+	public boolean doesGuiPauseGame() {
+		return false;
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		drawRect(0, 0, this.width, this.height, 0xFF000000);
+		this.drawCenteredString(this.fontRenderer, "Debug menu", this.width / 2, 15, 0xFFFFFF);
+		int i4 = this.width / 6;
+		drawString(this.fontRenderer, "Allow recruiter connections: " + dbg_conf_spawnShadowPlayers, i4, 40, 0xFFFFFF);
+		drawString(this.fontRenderer, "Enable cheats: " + dbg_conf_enableCheats, i4, 50, 0xFFFFFF);
+		drawString(this.fontRenderer, "Force fractured world: " + dbg_conf_forceFracWorld, i4, 60, 0xFFFFFF);
+		drawString(this.fontRenderer, "Force nebula event: " + dbg_conf_nebulaEvt, i4, 70, 0xFFFFFF);
+		drawString(this.fontRenderer, "Show debug information: " + dbg_conf_showDebugInfo, i4, 80, 0xFFFFFF);
+		drawString(this.fontRenderer, "Hide UI: " + dbg_conf_hideUI, i4, 90, 0xFFFFFF);
+		drawString(this.fontRenderer, "commit sus", i4, 100, 0xFFFFFF);
+		drawString(this.fontRenderer, "Enable flying: " + dbg_conf_fly, i4, 110, 0xFFFFFF);
+		drawString(this.fontRenderer, "Disable world generation: " + dbg_disable_worldgen, i4, 120, 0xFFFFFF);
+		drawString(this.fontRenderer, ">", i4 - 10, 40 + this.selection * 10, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
+	}
+}
--- /dev/null
+++ net/minecraft/src/EnumHouseSmall.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+enum EnumHouseSmall {
+	NORMAL,
+	WINDOW,
+	DOOR;
+
+    private static final /* synthetic */ EnumHouseSmall[] field_11440_5DU1q74wG2K77T0ZlI5W44FAm2Aqv24mz96pa1X88RzMmFVm14Nd108r12n7;
+
+	public static EnumHouseSmall[] func_11435_4tXyU6RR6cO5Zi9fhjc1I7QG04yEjq6wDM4jfxZmi73mP7096R32YLzn7IGX() {
+		return (EnumHouseSmall[])field_11440_5DU1q74wG2K77T0ZlI5W44FAm2Aqv24mz96pa1X88RzMmFVm14Nd108r12n7.clone();
+	}
+
+	public static EnumHouseSmall func_11436_3bJVQ5UBqfon6Z5wNWq1ljNFCUy7Nd7D5ry055OWEwBqFQL3zv4n846H20r2(String string) {
+		return (EnumHouseSmall)Enum.valueOf(EnumHouseSmall.class, string);
+	}
+
+	private static EnumHouseSmall[] func_11434_3rJo3AK4ECqk7FlHfgl5vc5v87WG6Az39tfJ21SGO8a04eMpmI46iJ91MZm6() {
+		return new EnumHouseSmall[]{NORMAL, WINDOW, DOOR};
+	}
+
+    static {
+        field_11440_5DU1q74wG2K77T0ZlI5W44FAm2Aqv24mz96pa1X88RzMmFVm14Nd108r12n7 = EnumHouseSmall.func_11434_3rJo3AK4ECqk7FlHfgl5vc5v87WG6Az39tfJ21SGO8a04eMpmI46iJ91MZm6();
+    }
+}
--- /dev/null
+++ net/minecraft/src/BaseModUnknownClass.java
@@ -1,0 +1,46 @@
+package net.minecraft.src;
+
+import java.util.List;
+import java.util.Map;
+
+public class BaseModUnknownClass extends BaseMod {
+	public void AddRecipes(CraftingManager lb) {
+		super.AddRecipes(lb);
+	}
+
+	public void RegisterBlocks(List list) {
+		super.RegisterBlocks(list);
+	}
+
+	public void AddRenderer(Map map) {
+		super.AddRenderer(map);
+	}
+
+	public void AddEntityID() {
+		super.AddEntityID();
+	}
+
+	public int AddSmelting(int integer) {
+		return super.AddSmelting(integer);
+	}
+
+	public int AddFuel(int integer) {
+		return super.AddFuel(integer);
+	}
+
+	public int func_9844_54pM8s64ZMnaU952nGEh82Q57WO2N6jhc3lwdq8i55LCTqh9Z6CBI7mTN1xJ(int integer) {
+		return super.func_9844_54pM8s64ZMnaU952nGEh82Q57WO2N6jhc3lwdq8i55LCTqh9Z6CBI7mTN1xJ(integer);
+	}
+
+	public int func_9849_7m6m13dn8LrG10h8c2Og50FZ5BadQ06sFis8fvT5TqNZ2cpOxQ56X340JqVC(int integer) {
+		return super.func_9849_7m6m13dn8LrG10h8c2Og50FZ5BadQ06sFis8fvT5TqNZ2cpOxQ56X340JqVC(integer);
+	}
+
+	public String Version() {
+		return "16.05_20#";
+	}
+
+	public void func_9851_9VTXo56vuK02QP3b768P1531Ie7r9zZnEp8PN8XCM31YP2br8w7rWVX045H2() {
+		super.func_9851_9VTXo56vuK02QP3b768P1531Ie7r9zZnEp8PN8XCM31YP2br8w7rWVX045H2();
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandMcCreatmenu.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandMcCreatmenu extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8602_5HqcTkuO1Dw98c4Mpu57rA62TSi4xb9akM1529J5uYmjM1ifC5eKi3rEQs08;
+    
+    CommandMcCreatmenu(final CommandManager abb) {
+        this.field_8602_5HqcTkuO1Dw98c4Mpu57rA62TSi4xb9akM1529J5uYmjM1ifC5eKi3rEQs08 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.func_9723_0s53bwug7AIh7wok927NkfC491OTVIE9w7Ze8dTW9h9VOaC74c60EkiUo90l();
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/EnumCoordinatesUnknownClass.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+class EnumCoordinatesUnknownClass {
+    static final /* synthetic */ int[] field_12026_7De72qnj4wxRWW58t53xgRd7T4ZV39k51LMGzN4yLo4a8zdVQ9nGL7BQZcvs;
+
+    static {
+        field_12026_7De72qnj4wxRWW58t53xgRd7T4ZV39k51LMGzN4yLo4a8zdVQ9nGL7BQZcvs = new int[Direction.func_11027_56m65k9Ou637f37XQ47WkX21C47228QlJJpaFt35G2542pYC3e5bn29f7FA0().length];
+        try {
+            EnumCoordinatesUnknownClass.field_12026_7De72qnj4wxRWW58t53xgRd7T4ZV39k51LMGzN4yLo4a8zdVQ9nGL7BQZcvs[Direction.XM.ordinal()] = 1;
+        }
+        catch (final NoSuchFieldError noSuchFieldError) {}
+        try {
+            EnumCoordinatesUnknownClass.field_12026_7De72qnj4wxRWW58t53xgRd7T4ZV39k51LMGzN4yLo4a8zdVQ9nGL7BQZcvs[Direction.XP.ordinal()] = 2;
+        }
+        catch (final NoSuchFieldError noSuchFieldError2) {}
+        try {
+            EnumCoordinatesUnknownClass.field_12026_7De72qnj4wxRWW58t53xgRd7T4ZV39k51LMGzN4yLo4a8zdVQ9nGL7BQZcvs[Direction.ZM.ordinal()] = 3;
+        }
+        catch (final NoSuchFieldError noSuchFieldError3) {}
+        try {
+            EnumCoordinatesUnknownClass.field_12026_7De72qnj4wxRWW58t53xgRd7T4ZV39k51LMGzN4yLo4a8zdVQ9nGL7BQZcvs[Direction.ZP.ordinal()] = 4;
+        }
+        catch (final NoSuchFieldError noSuchFieldError4) {}
+    }
+}
--- /dev/null
+++ net/minecraft/src/VisualsNostalgy.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+class VisualsNostalgy extends Visuals {
+    final /* synthetic */ VisualsManager field_10078_6d45507JcQf3ZR28F891juZ3ImdB4YrmQhQguy8P96k67zO3920j5w5Km8a9;
+    
+    VisualsNostalgy(final VisualsManager la) {
+        this.field_10078_6d45507JcQf3ZR28F891juZ3ImdB4YrmQhQguy8P96k67zO3920j5w5Km8a9 = la;
+    }
+    
+    @Override
+    public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+        return "/unl/9abf38f1-4796-4dc9-a73e-f005bb873ef7.xAL";
+    }
+    
+    @Override
+    public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(final Object... arr) {
+        if (arr[0] instanceof WorldZMSpawnWorld2 && arr[1] instanceof EntityOtherPlayerMPUnknownClass2) {
+            this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+            return true;
+        }
+        return false;
+    }
+    
+    @Override
+    public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+        return "unlock--nostalgy";
+    }
+    
+    @Override
+    public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+        return "Nostalgy";
+    }
+    
+    @Override
+    public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+        return "Shoot the Intruder in [ZM]Metsan Talo";
+    }
+}
--- /dev/null
+++ net/minecraft/src/Packet8RespondSkinRequest.java
@@ -1,0 +1,99 @@
+package net.minecraft.src;
+
+import java.awt.image.BufferedImage;
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.IOException;
+import java.util.zip.CRC32;
+import javax.imageio.ImageIO;
+
+public class Packet8RespondSkinRequest extends Packet {
+	public String pname;
+	public byte[] data;
+	public int rqChunk;
+	public boolean packetInvalid;
+
+	public Packet8RespondSkinRequest() {
+		this.rqChunk = -1;
+		this.packetInvalid = false;
+	}
+
+	public Packet8RespondSkinRequest(String string, byte[] arr, int integer) {
+		this(string, arr);
+		this.rqChunk = integer;
+	}
+
+	public Packet8RespondSkinRequest(String string, byte[] arr) {
+		this.rqChunk = -1;
+		this.packetInvalid = false;
+		this.pname = string;
+		this.data = arr;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		int i2 = dataInputStream.readInt();
+		if(i2 > 0) {
+			this.pname = dataInputStream.readUTF();
+			int i3 = dataInputStream.readInt();
+			this.data = new byte[1024];
+			int i4 = dataInputStream.readInt();
+
+			try {
+				Ext1605Utils.readNBytesJ9(dataInputStream, this.data, 0, 1024);
+			} catch (IOException iOException12) {
+				this.packetInvalid = true;
+				return;
+			}
+
+			CRC32 cRC325 = new CRC32();
+			cRC325.update(this.data, 0, 1024);
+			if((int)cRC325.getValue() != i4) {
+				this.packetInvalid = true;
+				return;
+			}
+
+			NetSplitImageDataHandler netSplitImageDataHandler6 = NetSplitImageDataHandler.getHandler(this.pname, i2);
+			netSplitImageDataHandler6.ReceiveChunk(this.data, i3);
+			if(netSplitImageDataHandler6.IsComplete()) {
+				try {
+					ByteArrayInputStream byteArrayInputStream7 = new ByteArrayInputStream(netSplitImageDataHandler6.imageData);
+					BufferedImage bufferedImage8 = ImageIO.read(byteArrayInputStream7);
+					ImageHolder imageHolder9 = new ImageHolder();
+					imageHolder9.image = bufferedImage8;
+					imageHolder9.initialize();
+					if(SkinManager.conf_cacheSkins) {
+						String string10 = System.getProperty(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9794_1Mq8T0QNr27egvw7Ii5njC2U34iHqD9xm0XHd85K26sr2HmLXKQgJ5Uz42hp)) + "/.minecraft/skincache/";
+						if(System.getProperty("os.name").contains("indows")) {
+							string10 = "C:/skincache/";
+						}
+
+						string10 = string10 + this.pname + ".png";
+						ImageIO.write(bufferedImage8, "png", new File(string10));
+					}
+
+					SkinManager.addSkin(this.pname, imageHolder9);
+				} catch (Exception exception11) {
+					ExtLogger.w("Error loading skin for " + this.pname);
+					exception11.printStackTrace();
+				}
+			}
+		}
+
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		if(this.packetInvalid && netHandler instanceof NetClientHandler) {
+			((NetClientHandler)netHandler).addToSendQueue(new Packet7SendSkinRequest(this.pname));
+		}
+
+	}
+
+	public int getPacketSize() {
+		return this.data == null ? 4 : 4 + this.pname.length() + this.data.length;
+	}
+}
--- net/minecraft/src/GuiSlider.java
+++ net/minecraft/src/GuiSlider.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.GL11;
 
 public class GuiSlider extends GuiButton {
@@ -8,20 +9,20 @@
 	public boolean dragging = false;
 	private int idFloat = 0;
 
-	public GuiSlider(int var1, int var2, int var3, int var4, String var5, float var6) {
-		super(var1, var2, var3, 150, 20, var5);
-		this.idFloat = var4;
-		this.sliderValue = var6;
+	public GuiSlider(int integer1, int integer2, int integer3, int integer4, String string, float float6) {
+		super(integer1, integer2, integer3, 150, 20, string);
+		this.idFloat = integer4;
+		this.sliderValue = float6;
 	}
 
-	protected int getHoverState(boolean var1) {
+	protected int getHoverState(boolean mousePointerHovered) {
 		return 0;
 	}
 
-	protected void mouseDragged(Minecraft var1, int var2, int var3) {
+	protected void mouseDragged(Minecraft minecraft, int integer2, int integer3) {
 		if(this.visible) {
 			if(this.dragging) {
-				this.sliderValue = (float)(var2 - (this.xPosition + 4)) / (float)(this.width - 8);
+				this.sliderValue = (float)(integer2 - (this.xPosition + 4)) / (float)(this.width - 8);
 				if(this.sliderValue < 0.0F) {
 					this.sliderValue = 0.0F;
 				}
@@ -30,19 +31,20 @@
 					this.sliderValue = 1.0F;
 				}
 
-				var1.options.setOptionFloatValue(this.idFloat, this.sliderValue);
-				this.displayString = var1.options.getOptionDisplayString(this.idFloat);
+				minecraft.options.setOptionFloatValue(this.idFloat, this.sliderValue);
+				this.displayString = minecraft.options.getOptionDisplayString(this.idFloat);
 			}
 
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 			this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)), this.yPosition, 0, 66, 4, 20);
 			this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)) + 4, this.yPosition, 196, 66, 4, 20);
 		}
+
 	}
 
-	public boolean mousePressed(Minecraft var1, int var2, int var3) {
-		if(super.mousePressed(var1, var2, var3)) {
-			this.sliderValue = (float)(var2 - (this.xPosition + 4)) / (float)(this.width - 8);
+	public boolean mousePressed(Minecraft minecraft, int integer2, int integer3) {
+		if(super.mousePressed(minecraft, integer2, integer3)) {
+			this.sliderValue = (float)(integer2 - (this.xPosition + 4)) / (float)(this.width - 8);
 			if(this.sliderValue < 0.0F) {
 				this.sliderValue = 0.0F;
 			}
@@ -51,8 +53,8 @@
 				this.sliderValue = 1.0F;
 			}
 
-			var1.options.setOptionFloatValue(this.idFloat, this.sliderValue);
-			this.displayString = var1.options.getOptionDisplayString(this.idFloat);
+			minecraft.options.setOptionFloatValue(this.idFloat, this.sliderValue);
+			this.displayString = minecraft.options.getOptionDisplayString(this.idFloat);
 			this.dragging = true;
 			return true;
 		} else {
@@ -60,7 +62,7 @@
 		}
 	}
 
-	public void mouseReleased(int var1, int var2) {
+	public void mouseReleased(int integer1, int integer2) {
 		this.dragging = false;
 	}
 }
--- net/minecraft/src/Packet13PlayerLookMove.java
+++ net/minecraft/src/Packet13PlayerLookMove.java
@@ -10,36 +10,36 @@
 		this.moving = true;
 	}
 
-	public Packet13PlayerLookMove(double var1, double var3, double var5, double var7, float var9, float var10, boolean var11) {
-		this.xPosition = var1;
-		this.yPosition = var3;
-		this.stance = var5;
-		this.zPosition = var7;
-		this.yaw = var9;
-		this.pitch = var10;
-		this.onGround = var11;
+	public Packet13PlayerLookMove(double xPosition, double yPosition, double stance, double zPosition, float yaw, float pitch, boolean onGround) {
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.stance = stance;
+		this.zPosition = zPosition;
+		this.yaw = yaw;
+		this.pitch = pitch;
+		this.onGround = onGround;
 		this.rotating = true;
 		this.moving = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readDouble();
-		this.yPosition = var1.readDouble();
-		this.stance = var1.readDouble();
-		this.zPosition = var1.readDouble();
-		this.yaw = var1.readFloat();
-		this.pitch = var1.readFloat();
-		super.readPacketData(var1);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readDouble();
+		this.yPosition = dataInputStream.readDouble();
+		this.stance = dataInputStream.readDouble();
+		this.zPosition = dataInputStream.readDouble();
+		this.yaw = dataInputStream.readFloat();
+		this.pitch = dataInputStream.readFloat();
+		super.readPacketData(dataInputStream);
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeDouble(this.xPosition);
-		var1.writeDouble(this.yPosition);
-		var1.writeDouble(this.stance);
-		var1.writeDouble(this.zPosition);
-		var1.writeFloat(this.yaw);
-		var1.writeFloat(this.pitch);
-		super.writePacket(var1);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeDouble(this.xPosition);
+		dataOutputStream.writeDouble(this.yPosition);
+		dataOutputStream.writeDouble(this.stance);
+		dataOutputStream.writeDouble(this.zPosition);
+		dataOutputStream.writeFloat(this.yaw);
+		dataOutputStream.writeFloat(this.pitch);
+		super.writePacket(dataOutputStream);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/ThreadRecruitmentClient.java
@@ -1,0 +1,46 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.net.Socket;
+import java.util.ArrayList;
+import java.util.List;
+
+public class ThreadRecruitmentClient extends Thread {
+	private Socket clientSocket;
+	private DataOutputStream out;
+	private DataInputStream in;
+	public String ip;
+	public int port;
+	public boolean run = true;
+	public List sendQueue = new ArrayList();
+
+	public ThreadRecruitmentClient(String string, int integer) {
+		this.ip = string;
+		this.port = integer;
+	}
+
+	public void run() {
+		try {
+			this.clientSocket = new Socket(this.ip, this.port);
+			this.out = new DataOutputStream(this.clientSocket.getOutputStream());
+			this.in = new DataInputStream(this.clientSocket.getInputStream());
+
+			while(this.run) {
+				while(this.sendQueue.size() == 0) {
+				}
+
+				ThreadRecruitmentServer.SendPacket(this.out, new RPacketA0Ping());
+			}
+
+			this.out.close();
+			this.in.close();
+			this.clientSocket.close();
+			ExtLogger.i("client thread finished");
+		} catch (IOException iOException2) {
+			iOException2.printStackTrace();
+		}
+
+	}
+}
--- net/minecraft/src/WorldBlockPositionType.java
+++ net/minecraft/src/WorldBlockPositionType.java
@@ -9,13 +9,13 @@
 	int metadata;
 	final WorldClient worldClient;
 
-	public WorldBlockPositionType(WorldClient var1, int var2, int var3, int var4, int var5, int var6) {
-		this.worldClient = var1;
-		this.posX = var2;
-		this.posY = var3;
-		this.posZ = var4;
+	public WorldBlockPositionType(WorldClient world, int x, int y, int z, int id, int metadata) {
+		this.worldClient = world;
+		this.posX = x;
+		this.posY = y;
+		this.posZ = z;
 		this.acceptCountdown = 80;
-		this.blockID = var5;
-		this.metadata = var6;
+		this.blockID = id;
+		this.metadata = metadata;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockDoorUnknownClass2.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockDoorUnknownClass2 extends BlockDoor {
+	public BlockDoorUnknownClass2(int integer1, int integer2) {
+		super(integer1, Material.iron);
+		this.blockIndexInTexture = integer2;
+	}
+
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : ExtItems.field_11340_7X9VRlMe6NuD9dLwd8nmi4X3IOqglMoWR84do3Evv5zW12VM3A5tXipdrnRF.shiftedIndex;
+	}
+}
--- net/minecraft/src/TextureCompassFX.java
+++ net/minecraft/src/TextureCompassFX.java
@@ -3,6 +3,7 @@
 import java.awt.image.BufferedImage;
 import java.io.IOException;
 import javax.imageio.ImageIO;
+
 import net.minecraft.client.Minecraft;
 
 public class TextureCompassFX extends TextureFX {
@@ -13,128 +14,128 @@
 	private double currentAngle;
 	private double angleDelta;
 
-	public TextureCompassFX(Minecraft var1) {
+	public TextureCompassFX(Minecraft minecraft) {
 		super(Item.compass.getIconIndex((ItemStack)null));
-		this.mc = var1;
+		this.mc = minecraft;
 		this.tileImage = 1;
 
 		try {
-			BufferedImage var2 = ImageIO.read(Minecraft.class.getResource("/gui/items.png"));
-			int var3 = this.iconIndex % 16 * 16;
-			int var4 = this.iconIndex / 16 * 16;
-			var2.getRGB(var3, var4, 16, 16, this.compassIconImageData, 0, 16);
-		} catch (IOException var5) {
-			var5.printStackTrace();
+			BufferedImage bufferedImage2 = ImageIO.read(Ext1605Utils.func_12146_9P3TY758VM8951Z7q70WD5qYdKqLdB22jUqQNi8u6rFBU4uZnFfpCw0XU82v("/gui/items.png"));
+			int i3 = this.iconIndex % 16 * 16;
+			int i4 = this.iconIndex / 16 * 16;
+			bufferedImage2.getRGB(i3, i4, 16, 16, this.compassIconImageData, 0, 16);
+		} catch (IOException iOException5) {
+			iOException5.printStackTrace();
 		}
 
 	}
 
 	public void onTick() {
-		for(int var1 = 0; var1 < 256; ++var1) {
-			int var2 = this.compassIconImageData[var1] >> 24 & 255;
-			int var3 = this.compassIconImageData[var1] >> 16 & 255;
-			int var4 = this.compassIconImageData[var1] >> 8 & 255;
-			int var5 = this.compassIconImageData[var1] >> 0 & 255;
+		for(int i1 = 0; i1 < 256; ++i1) {
+			int i2 = this.compassIconImageData[i1] >> 24 & 255;
+			int i3 = this.compassIconImageData[i1] >> 16 & 255;
+			int i4 = this.compassIconImageData[i1] >> 8 & 255;
+			int i5 = this.compassIconImageData[i1] >> 0 & 255;
 			if(this.anaglyphEnabled) {
-				int var6 = (var3 * 30 + var4 * 59 + var5 * 11) / 100;
-				int var7 = (var3 * 30 + var4 * 70) / 100;
-				int var8 = (var3 * 30 + var5 * 70) / 100;
-				var3 = var6;
-				var4 = var7;
-				var5 = var8;
+				int i6 = (i3 * 30 + i4 * 59 + i5 * 11) / 100;
+				int i7 = (i3 * 30 + i4 * 70) / 100;
+				int i8 = (i3 * 30 + i5 * 70) / 100;
+				i3 = i6;
+				i4 = i7;
+				i5 = i8;
 			}
 
-			this.imageData[var1 * 4 + 0] = (byte)var3;
-			this.imageData[var1 * 4 + 1] = (byte)var4;
-			this.imageData[var1 * 4 + 2] = (byte)var5;
-			this.imageData[var1 * 4 + 3] = (byte)var2;
+			this.imageData[i1 * 4 + 0] = (byte)i3;
+			this.imageData[i1 * 4 + 1] = (byte)i4;
+			this.imageData[i1 * 4 + 2] = (byte)i5;
+			this.imageData[i1 * 4 + 3] = (byte)i2;
 		}
 
-		double var20 = 0.0D;
-		double var21;
-		double var22;
+		double d20 = 0.0D;
+		double d21;
+		double d22;
 		if(this.mc.theWorld != null && this.mc.thePlayer != null) {
-			var21 = (double)this.mc.theWorld.spawnX - this.mc.thePlayer.posX;
-			var22 = (double)this.mc.theWorld.spawnZ - this.mc.thePlayer.posZ;
-			var20 = (double)(this.mc.thePlayer.rotationYaw - 90.0F) * Math.PI / 180.0D - Math.atan2(var22, var21);
-		}
-
-		for(var21 = var20 - this.currentAngle; var21 < -Math.PI; var21 += Math.PI * 2.0D) {
-		}
-
-		while(var21 >= Math.PI) {
-			var21 -= Math.PI * 2.0D;
-		}
-
-		if(var21 < -1.0D) {
-			var21 = -1.0D;
-		}
-
-		if(var21 > 1.0D) {
-			var21 = 1.0D;
-		}
-
-		this.angleDelta += var21 * 0.1D;
+			d21 = (double)this.mc.theWorld.spawnX - this.mc.thePlayer.posX;
+			d22 = (double)this.mc.theWorld.spawnZ - this.mc.thePlayer.posZ;
+			d20 = (double)(this.mc.thePlayer.rotationYaw - 90.0F) * Math.PI / 180.0D - Math.atan2(d22, d21);
+		}
+
+		for(d21 = d20 - this.currentAngle; d21 < -3.141592653589793D; d21 += Math.PI * 2D) {
+		}
+
+		while(d21 >= Math.PI) {
+			d21 -= Math.PI * 2D;
+		}
+
+		if(d21 < -1.0D) {
+			d21 = -1.0D;
+		}
+
+		if(d21 > 1.0D) {
+			d21 = 1.0D;
+		}
+
+		this.angleDelta += d21 * 0.1D;
 		this.angleDelta *= 0.8D;
 		this.currentAngle += this.angleDelta;
-		var22 = Math.sin(this.currentAngle);
-		double var23 = Math.cos(this.currentAngle);
+		d22 = Math.sin(this.currentAngle);
+		double d23 = Math.cos(this.currentAngle);
 
-		int var9;
-		int var10;
-		int var11;
-		int var12;
-		int var13;
-		int var14;
-		int var15;
-		short var16;
-		int var17;
-		int var18;
-		int var19;
-		for(var9 = -4; var9 <= 4; ++var9) {
-			var10 = (int)(8.5D + var23 * (double)var9 * 0.3D);
-			var11 = (int)(7.5D - var22 * (double)var9 * 0.3D * 0.5D);
-			var12 = var11 * 16 + var10;
-			var13 = 100;
-			var14 = 100;
-			var15 = 100;
-			var16 = 255;
+		int i9;
+		int i10;
+		int i11;
+		int i12;
+		int i13;
+		int i14;
+		int i15;
+		short s16;
+		int i17;
+		int i18;
+		int i19;
+		for(i9 = -4; i9 <= 4; ++i9) {
+			i10 = (int)(8.5D + d23 * (double)i9 * 0.3D);
+			i11 = (int)(7.5D - d22 * (double)i9 * 0.3D * 0.5D);
+			i12 = i11 * 16 + i10;
+			i13 = 100;
+			i14 = 100;
+			i15 = 100;
+			s16 = 255;
 			if(this.anaglyphEnabled) {
-				var17 = (var13 * 30 + var14 * 59 + var15 * 11) / 100;
-				var18 = (var13 * 30 + var14 * 70) / 100;
-				var19 = (var13 * 30 + var15 * 70) / 100;
-				var13 = var17;
-				var14 = var18;
-				var15 = var19;
+				i17 = (i13 * 30 + i14 * 59 + i15 * 11) / 100;
+				i18 = (i13 * 30 + i14 * 70) / 100;
+				i19 = (i13 * 30 + i15 * 70) / 100;
+				i13 = i17;
+				i14 = i18;
+				i15 = i19;
 			}
 
-			this.imageData[var12 * 4 + 0] = (byte)var13;
-			this.imageData[var12 * 4 + 1] = (byte)var14;
-			this.imageData[var12 * 4 + 2] = (byte)var15;
-			this.imageData[var12 * 4 + 3] = (byte)var16;
+			this.imageData[i12 * 4 + 0] = (byte)i13;
+			this.imageData[i12 * 4 + 1] = (byte)i14;
+			this.imageData[i12 * 4 + 2] = (byte)i15;
+			this.imageData[i12 * 4 + 3] = (byte)s16;
 		}
 
-		for(var9 = -8; var9 <= 16; ++var9) {
-			var10 = (int)(8.5D + var22 * (double)var9 * 0.3D);
-			var11 = (int)(7.5D + var23 * (double)var9 * 0.3D * 0.5D);
-			var12 = var11 * 16 + var10;
-			var13 = var9 >= 0 ? 255 : 100;
-			var14 = var9 >= 0 ? 20 : 100;
-			var15 = var9 >= 0 ? 20 : 100;
-			var16 = 255;
+		for(i9 = -8; i9 <= 16; ++i9) {
+			i10 = (int)(8.5D + d22 * (double)i9 * 0.3D);
+			i11 = (int)(7.5D + d23 * (double)i9 * 0.3D * 0.5D);
+			i12 = i11 * 16 + i10;
+			i13 = i9 >= 0 ? 255 : 100;
+			i14 = i9 >= 0 ? 20 : 100;
+			i15 = i9 >= 0 ? 20 : 100;
+			s16 = 255;
 			if(this.anaglyphEnabled) {
-				var17 = (var13 * 30 + var14 * 59 + var15 * 11) / 100;
-				var18 = (var13 * 30 + var14 * 70) / 100;
-				var19 = (var13 * 30 + var15 * 70) / 100;
-				var13 = var17;
-				var14 = var18;
-				var15 = var19;
+				i17 = (i13 * 30 + i14 * 59 + i15 * 11) / 100;
+				i18 = (i13 * 30 + i14 * 70) / 100;
+				i19 = (i13 * 30 + i15 * 70) / 100;
+				i13 = i17;
+				i14 = i18;
+				i15 = i19;
 			}
 
-			this.imageData[var12 * 4 + 0] = (byte)var13;
-			this.imageData[var12 * 4 + 1] = (byte)var14;
-			this.imageData[var12 * 4 + 2] = (byte)var15;
-			this.imageData[var12 * 4 + 3] = (byte)var16;
+			this.imageData[i12 * 4 + 0] = (byte)i13;
+			this.imageData[i12 * 4 + 1] = (byte)i14;
+			this.imageData[i12 * 4 + 2] = (byte)i15;
+			this.imageData[i12 * 4 + 3] = (byte)s16;
 		}
 
 	}
--- net/minecraft/src/TerrainTextureManager.java
+++ net/minecraft/src/TerrainTextureManager.java
@@ -5,6 +5,8 @@
 import java.util.Arrays;
 import javax.imageio.ImageIO;
 
+import net.minecraft.client.Minecraft;
+
 public class TerrainTextureManager {
 	private float[] texCols = new float[768];
 	private int[] pixels = new int[5120];
@@ -16,160 +18,157 @@
 
 	public TerrainTextureManager() {
 		try {
-			BufferedImage var1 = ImageIO.read(TerrainTextureManager.class.getResource("/terrain.png"));
-			int[] var2 = new int[65536];
-			var1.getRGB(0, 0, 256, 256, var2, 0, 256);
-
-			for(int var3 = 0; var3 < 256; ++var3) {
-				int var4 = 0;
-				int var5 = 0;
-				int var6 = 0;
-				int var7 = var3 % 16 * 16;
-				int var8 = var3 / 16 * 16;
-				int var9 = 0;
-
-				for(int var10 = 0; var10 < 16; ++var10) {
-					for(int var11 = 0; var11 < 16; ++var11) {
-						int var12 = var2[var11 + var7 + (var10 + var8) * 256];
-						int var13 = var12 >> 24 & 255;
-						if(var13 > 128) {
-							var4 += var12 >> 16 & 255;
-							var5 += var12 >> 8 & 255;
-							var6 += var12 & 255;
-							++var9;
+			BufferedImage bufferedImage1 = ImageIO.read(Ext1605Utils.func_12146_9P3TY758VM8951Z7q70WD5qYdKqLdB22jUqQNi8u6rFBU4uZnFfpCw0XU82v(Minecraft.field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L));
+			int[] i2 = new int[65536];
+			bufferedImage1.getRGB(0, 0, 256, 256, i2, 0, 256);
+
+			for(int i3 = 0; i3 < 512; ++i3) {
+				int i4 = 0;
+				int i5 = 0;
+				int i6 = 0;
+				int i7 = i3 % 16 * 16;
+				int i8 = i3 / 16 * 32;
+				int i9 = 0;
+
+				for(int i10 = 0; i10 < 16; ++i10) {
+					for(int i11 = 0; i11 < 16; ++i11) {
+						int i12 = i2[i11 + i7 + (i10 + i8) * 256];
+						int i13 = i12 >> 24 & 255;
+						if(i13 > 128) {
+							i4 += i12 >> 16 & 255;
+							i5 += i12 >> 8 & 255;
+							i6 += i12 & 255;
+							++i9;
 						}
 					}
 
-					if(var9 == 0) {
-						++var9;
+					if(i9 == 0) {
+						++i9;
 					}
 
-					this.texCols[var3 * 3 + 0] = (float)(var4 / var9);
-					this.texCols[var3 * 3 + 1] = (float)(var5 / var9);
-					this.texCols[var3 * 3 + 2] = (float)(var6 / var9);
+					this.texCols[i3 * 3 + 0] = (float)(i4 / i9);
+					this.texCols[i3 * 3 + 1] = (float)(i5 / i9);
+					this.texCols[i3 * 3 + 2] = (float)(i6 / i9);
 				}
 			}
-		} catch (IOException var14) {
-			var14.printStackTrace();
+		} catch (IOException iOException14) {
+			iOException14.printStackTrace();
 		}
 
-		for(int var15 = 0; var15 < 256; ++var15) {
-			if(Block.blocksList[var15] != null) {
-				this.textures[var15 * 3 + 0] = Block.blocksList[var15].getBlockTextureFromSide(1);
-				this.textures[var15 * 3 + 1] = Block.blocksList[var15].getBlockTextureFromSide(2);
-				this.textures[var15 * 3 + 2] = Block.blocksList[var15].getBlockTextureFromSide(3);
+		for(int i15 = 0; i15 < 256; ++i15) {
+			if(Block.blocksList[i15] != null) {
+				this.textures[i15 * 3 + 0] = Block.blocksList[i15].getBlockTextureFromSide(1);
+				this.textures[i15 * 3 + 1] = Block.blocksList[i15].getBlockTextureFromSide(2);
+				this.textures[i15 * 3 + 2] = Block.blocksList[i15].getBlockTextureFromSide(3);
 			}
 		}
 
 	}
 
-	public void render(IsoImageBuffer var1) {
-		World var2 = var1.level;
-		if(var2 == null) {
-			var1.noContent = true;
-			var1.rendered = true;
-		} else {
-			int var3 = var1.x * 16;
-			int var4 = var1.y * 16;
-			int var5 = var3 + 16;
-			int var6 = var4 + 16;
-			Chunk var7 = var2.getChunkFromChunkCoords(var1.x, var1.y);
-			if(var7.isChunkRendered) {
-				var1.noContent = true;
-				var1.rendered = true;
+	public void render(IsoImageBuffer isoImageBuffer) {
+		World world2 = isoImageBuffer.level;
+		if(world2 != null && world2.chunkProvider.chunkExists(isoImageBuffer.x, isoImageBuffer.y)) {
+			int i3 = isoImageBuffer.x * 16;
+			int i4 = isoImageBuffer.y * 16;
+			int i5 = i3 + 16;
+			int i6 = i4 + 16;
+			Chunk chunk7 = world2.getChunkFromChunkCoords(isoImageBuffer.x, isoImageBuffer.y);
+			if(chunk7.isChunkRendered) {
+				isoImageBuffer.noContent = true;
+				isoImageBuffer.rendered = true;
 			} else {
-				var1.noContent = false;
+				isoImageBuffer.noContent = false;
 				Arrays.fill(this.zBuf, 0);
 				Arrays.fill(this.waterBuf, 0);
 				Arrays.fill(this.yBuf, 160);
 
-				for(int var8 = var6 - 1; var8 >= var4; --var8) {
-					for(int var9 = var5 - 1; var9 >= var3; --var9) {
-						int var10 = var9 - var3;
-						int var11 = var8 - var4;
-						int var12 = var10 + var11;
-						boolean var13 = true;
-
-						for(int var14 = 0; var14 < 128; ++var14) {
-							int var15 = var11 - var10 - var14 + 160 - 16;
-							if(var15 < this.yBuf[var12] || var15 < this.yBuf[var12 + 1]) {
-								Block var16 = Block.blocksList[var2.getBlockId(var9, var14, var8)];
-								if(var16 == null) {
-									var13 = false;
-								} else if(var16.material == Material.water) {
-									int var24 = var2.getBlockId(var9, var14 + 1, var8);
-									if(var24 == 0 || Block.blocksList[var24].material != Material.water) {
-										float var25 = (float)var14 / 127.0F * 0.6F + 0.4F;
-										float var26 = var2.getBrightness(var9, var14 + 1, var8) * var25;
-										if(var15 >= 0 && var15 < 160) {
-											int var27 = var12 + var15 * 32;
-											if(var12 >= 0 && var12 <= 32 && this.waterBuf[var27] <= var14) {
-												this.waterBuf[var27] = var14;
-												this.waterBr[var27] = (int)(var26 * 127.0F);
-											}
-
-											if(var12 >= -1 && var12 <= 31 && this.waterBuf[var27 + 1] <= var14) {
-												this.waterBuf[var27 + 1] = var14;
-												this.waterBr[var27 + 1] = (int)(var26 * 127.0F);
-											}
-
-											var13 = false;
+				for(int i8 = i6 - 1; i8 >= i4; --i8) {
+					for(int i9 = i5 - 1; i9 >= i3; --i9) {
+						int i10 = i9 - i3;
+						int i11 = i8 - i4;
+						int i12 = i10 + i11;
+						boolean z13 = true;
+
+						for(int i14 = 0; i14 < 128; ++i14) {
+							int i15 = i11 - i10 - i14 + 160 - 16;
+							if(i15 < this.yBuf[i12] || i15 < this.yBuf[i12 + 1]) {
+								Block block16 = Block.blocksList[world2.getBlockId(i9, i14, i8)];
+								if(block16 == null) {
+									z13 = false;
+								} else if(block16.material == Material.water) {
+									int i24 = world2.getBlockId(i9, i14 + 1, i8);
+									if(i24 == 0 || Block.blocksList[i24].material != Material.water) {
+										float f25 = (float)i14 / 127.0F * 0.6F + 0.4F;
+										float f26 = world2.getBrightness(i9, i14 + 1, i8) * f25;
+										if(i15 >= 0 && i15 < 160) {
+											int i27 = i12 + i15 * 32;
+											if(i12 >= 0 && i12 <= 32 && this.waterBuf[i27] <= i14) {
+												this.waterBuf[i27] = i14;
+												this.waterBr[i27] = (int)(f26 * 127.0F);
+											}
+
+											if(i12 >= -1 && i12 <= 31 && this.waterBuf[i27 + 1] <= i14) {
+												this.waterBuf[i27 + 1] = i14;
+												this.waterBr[i27 + 1] = (int)(f26 * 127.0F);
+											}
+
+											z13 = false;
 										}
 									}
 								} else {
-									if(var13) {
-										if(var15 < this.yBuf[var12]) {
-											this.yBuf[var12] = var15;
-										}
-
-										if(var15 < this.yBuf[var12 + 1]) {
-											this.yBuf[var12 + 1] = var15;
-										}
-									}
-
-									float var17 = (float)var14 / 127.0F * 0.6F + 0.4F;
-									int var18;
-									int var19;
-									float var20;
-									float var22;
-									if(var15 >= 0 && var15 < 160) {
-										var18 = var12 + var15 * 32;
-										var19 = this.textures[var16.blockID * 3 + 0];
-										var20 = (var2.getBrightness(var9, var14 + 1, var8) * 0.8F + 0.2F) * var17;
-										if(var12 >= 0 && this.zBuf[var18] <= var14) {
-											this.zBuf[var18] = var14;
-											this.pixels[var18] = -16777216 | (int)(this.texCols[var19 * 3 + 0] * var20) << 16 | (int)(this.texCols[var19 * 3 + 1] * var20) << 8 | (int)(this.texCols[var19 * 3 + 2] * var20);
-										}
-
-										if(var12 < 31) {
-											var22 = var20 * 0.9F;
-											if(this.zBuf[var18 + 1] <= var14) {
-												this.zBuf[var18 + 1] = var14;
-												this.pixels[var18 + 1] = -16777216 | (int)(this.texCols[var19 * 3 + 0] * var22) << 16 | (int)(this.texCols[var19 * 3 + 1] * var22) << 8 | (int)(this.texCols[var19 * 3 + 2] * var22);
-											}
-										}
-									}
-
-									if(var15 >= -1 && var15 < 159) {
-										var18 = var12 + (var15 + 1) * 32;
-										var19 = this.textures[var16.blockID * 3 + 1];
-										var20 = var2.getBrightness(var9 - 1, var14, var8) * 0.8F + 0.2F;
-										int var21 = this.textures[var16.blockID * 3 + 2];
-										var22 = var2.getBrightness(var9, var14, var8 + 1) * 0.8F + 0.2F;
-										float var23;
-										if(var12 >= 0) {
-											var23 = var20 * var17 * 0.6F;
-											if(this.zBuf[var18] <= var14 - 1) {
-												this.zBuf[var18] = var14 - 1;
-												this.pixels[var18] = -16777216 | (int)(this.texCols[var19 * 3 + 0] * var23) << 16 | (int)(this.texCols[var19 * 3 + 1] * var23) << 8 | (int)(this.texCols[var19 * 3 + 2] * var23);
-											}
-										}
-
-										if(var12 < 31) {
-											var23 = var22 * 0.9F * var17 * 0.4F;
-											if(this.zBuf[var18 + 1] <= var14 - 1) {
-												this.zBuf[var18 + 1] = var14 - 1;
-												this.pixels[var18 + 1] = -16777216 | (int)(this.texCols[var21 * 3 + 0] * var23) << 16 | (int)(this.texCols[var21 * 3 + 1] * var23) << 8 | (int)(this.texCols[var21 * 3 + 2] * var23);
+									if(z13) {
+										if(i15 < this.yBuf[i12]) {
+											this.yBuf[i12] = i15;
+										}
+
+										if(i15 < this.yBuf[i12 + 1]) {
+											this.yBuf[i12 + 1] = i15;
+										}
+									}
+
+									float f17 = (float)i14 / 127.0F * 0.6F + 0.4F;
+									int i18;
+									int i19;
+									float f20;
+									float f21;
+									if(i15 >= 0 && i15 < 160) {
+										i18 = i12 + i15 * 32;
+										i19 = this.textures[block16.blockID * 3 + 0];
+										f20 = (world2.getBrightness(i9, i14 + 1, i8) * 0.8F + 0.2F) * f17;
+										if(i12 >= 0 && this.zBuf[i18] <= i14) {
+											this.zBuf[i18] = i14;
+											this.pixels[i18] = 0xFF000000 | (int)(this.texCols[i19 * 3 + 0] * f20) << 16 | (int)(this.texCols[i19 * 3 + 1] * f20) << 8 | (int)(this.texCols[i19 * 3 + 2] * f20);
+										}
+
+										if(i12 < 31) {
+											f21 = f20 * 0.9F;
+											if(this.zBuf[i18 + 1] <= i14) {
+												this.zBuf[i18 + 1] = i14;
+												this.pixels[i18 + 1] = 0xFF000000 | (int)(this.texCols[i19 * 3 + 0] * f21) << 16 | (int)(this.texCols[i19 * 3 + 1] * f21) << 8 | (int)(this.texCols[i19 * 3 + 2] * f21);
+											}
+										}
+									}
+
+									if(i15 >= -1 && i15 < 159) {
+										i18 = i12 + (i15 + 1) * 32;
+										i19 = this.textures[block16.blockID * 3 + 1];
+										f20 = world2.getBrightness(i9 - 1, i14, i8) * 0.8F + 0.2F;
+										int i22 = this.textures[block16.blockID * 3 + 2];
+										f21 = world2.getBrightness(i9, i14, i8 + 1) * 0.8F + 0.2F;
+										float f23;
+										if(i12 >= 0) {
+											f23 = f20 * f17 * 0.6F;
+											if(this.zBuf[i18] <= i14 - 1) {
+												this.zBuf[i18] = i14 - 1;
+												this.pixels[i18] = 0xFF000000 | (int)(this.texCols[i19 * 3 + 0] * f23) << 16 | (int)(this.texCols[i19 * 3 + 1] * f23) << 8 | (int)(this.texCols[i19 * 3 + 2] * f23);
+											}
+										}
+
+										if(i12 < 31) {
+											f23 = f21 * 0.9F * f17 * 0.4F;
+											if(this.zBuf[i18 + 1] <= i14 - 1) {
+												this.zBuf[i18 + 1] = i14 - 1;
+												this.pixels[i18 + 1] = 0xFF000000 | (int)(this.texCols[i22 * 3 + 0] * f23) << 16 | (int)(this.texCols[i22 * 3 + 1] * f23) << 8 | (int)(this.texCols[i22 * 3 + 2] * f23);
 											}
 										}
 									}
@@ -180,31 +179,35 @@
 				}
 
 				this.postProcess();
-				if(var1.image == null) {
-					var1.image = new BufferedImage(32, 160, 2);
+				if(isoImageBuffer.image == null) {
+					isoImageBuffer.image = new BufferedImage(32, 160, 2);
 				}
 
-				var1.image.setRGB(0, 0, 32, 160, this.pixels, 0, 32);
-				var1.rendered = true;
+				isoImageBuffer.image.setRGB(0, 0, 32, 160, this.pixels, 0, 32);
+				isoImageBuffer.rendered = true;
 			}
+		} else {
+			isoImageBuffer.noContent = true;
+			isoImageBuffer.rendered = true;
 		}
+
 	}
 
 	private void postProcess() {
-		for(int var1 = 0; var1 < 32; ++var1) {
-			for(int var2 = 0; var2 < 160; ++var2) {
-				int var3 = var1 + var2 * 32;
-				if(this.zBuf[var3] == 0) {
-					this.pixels[var3] = 0;
+		for(int i1 = 0; i1 < 32; ++i1) {
+			for(int i2 = 0; i2 < 160; ++i2) {
+				int i3 = i1 + i2 * 32;
+				if(this.zBuf[i3] == 0) {
+					this.pixels[i3] = 0;
 				}
 
-				if(this.waterBuf[var3] > this.zBuf[var3]) {
-					int var4 = this.pixels[var3] >> 24 & 255;
-					this.pixels[var3] = ((this.pixels[var3] & 16711422) >> 1) + this.waterBr[var3];
-					if(var4 < 128) {
-						this.pixels[var3] = Integer.MIN_VALUE + this.waterBr[var3] * 2;
+				if(this.waterBuf[i3] > this.zBuf[i3]) {
+					int i4 = this.pixels[i3] >> 24 & 255;
+					this.pixels[i3] = ((this.pixels[i3] & 16711422) >> 1) + this.waterBr[i3];
+					if(i4 < 128) {
+						this.pixels[i3] = Integer.MIN_VALUE + this.waterBr[i3] * 2;
 					} else {
-						this.pixels[var3] |= -16777216;
+						this.pixels[i3] |= 0xFF000000;
 					}
 				}
 			}
--- net/minecraft/src/RecipesFood.java
+++ net/minecraft/src/RecipesFood.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
 public class RecipesFood {
-	public void addRecipes(CraftingManager var1) {
-		var1.addRecipe(new ItemStack(Item.bowlSoup), new Object[]{"Y", "X", "#", Character.valueOf('X'), Block.mushroomBrown, Character.valueOf('Y'), Block.mushroomRed, Character.valueOf('#'), Item.bowlEmpty});
-		var1.addRecipe(new ItemStack(Item.bowlSoup), new Object[]{"Y", "X", "#", Character.valueOf('X'), Block.mushroomRed, Character.valueOf('Y'), Block.mushroomBrown, Character.valueOf('#'), Item.bowlEmpty});
+	public void addRecipes(CraftingManager craftingManager) {
+		craftingManager.addRecipe(new ItemStack(Item.bowlSoup), new Object[]{"Y", "X", "#", 'X', Block.mushroomBrown, 'Y', Block.mushroomRed, '#', Item.bowlEmpty});
+		craftingManager.addRecipe(new ItemStack(Item.bowlSoup), new Object[]{"Y", "X", "#", 'X', Block.mushroomRed, 'Y', Block.mushroomBrown, '#', Item.bowlEmpty});
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandMap.java
@@ -1,0 +1,22 @@
+package net.minecraft.src;
+
+class CommandMap extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8564_3nU2mtMiw7HfHf3DIyGwSian4L6I2Qi77Ll3Gf8CRzx43JB9bzi08X6ehWu1;
+    
+    CommandMap(final CommandManager abb) {
+        this.field_8564_3nU2mtMiw7HfHf3DIyGwSian4L6I2Qi77Ll3Gf8CRzx43JB9bzi08X6ehWu1 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.displayGuiScreen(null);
+        InputHandler.mc.playerController = new PlayerControllerSP(InputHandler.mc);
+        InputHandler.mc.startWorld((String)arr[0]);
+        InputHandler.mc.displayGuiScreen(null);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- net/minecraft/src/BlockLeavesBase.java
+++ net/minecraft/src/BlockLeavesBase.java
@@ -3,17 +3,17 @@
 public class BlockLeavesBase extends Block {
 	protected boolean graphicsLevel;
 
-	protected BlockLeavesBase(int var1, int var2, Material var3, boolean var4) {
-		super(var1, var2, var3);
-		this.graphicsLevel = var4;
+	protected BlockLeavesBase(int id, int blockIndex, Material material, boolean graphicsLevel) {
+		super(id, blockIndex, material);
+		this.graphicsLevel = graphicsLevel;
 	}
 
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockId(var2, var3, var4);
-		return !this.graphicsLevel && var6 == this.blockID ? false : super.shouldSideBeRendered(var1, var2, var3, var4, var5);
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		int i6 = blockAccess.getBlockId(x, y, z);
+		return !this.graphicsLevel && i6 == this.blockID ? false : super.shouldSideBeRendered(blockAccess, x, y, z, side);
 	}
 }
--- net/minecraft/src/RenderSnowball.java
+++ net/minecraft/src/RenderSnowball.java
@@ -4,35 +4,35 @@
 import org.lwjgl.opengl.GL12;
 
 public class RenderSnowball extends Render {
-	public void doRenderSnowball(EntitySnowball var1, double var2, double var4, double var6, float var8, float var9) {
+	public void doRenderSnowball(EntitySnowball xj, double double2, double double3, double double4, float float5, float float6) {
 		GL11.glPushMatrix();
-		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
+		GL11.glTranslatef((float)double2, (float)double3, (float)double4);
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 		GL11.glScalef(0.5F, 0.5F, 0.5F);
-		int var10 = Item.snowball.getIconIndex((ItemStack)null);
+		int i10 = Item.snowball.getIconIndex((ItemStack)null);
 		this.loadTexture("/gui/items.png");
-		Tessellator var11 = Tessellator.instance;
-		float var12 = (float)(var10 % 16 * 16 + 0) / 256.0F;
-		float var13 = (float)(var10 % 16 * 16 + 16) / 256.0F;
-		float var14 = (float)(var10 / 16 * 16 + 0) / 256.0F;
-		float var15 = (float)(var10 / 16 * 16 + 16) / 256.0F;
-		float var16 = 1.0F;
-		float var17 = 0.5F;
-		float var18 = 0.25F;
+		Tessellator tessellator11 = Tessellator.instance;
+		float f12 = (float)(i10 % 16 * 16 + 0) / 256.0F;
+		float f13 = (float)(i10 % 16 * 16 + 16) / 256.0F;
+		float f14 = (float)(i10 / 16 * 16 + 0) / 256.0F;
+		float f15 = (float)(i10 / 16 * 16 + 16) / 256.0F;
+		float f16 = 1.0F;
+		float f17 = 0.5F;
+		float f18 = 0.25F;
 		GL11.glRotatef(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
 		GL11.glRotatef(-this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
-		var11.startDrawingQuads();
-		var11.setNormal(0.0F, 1.0F, 0.0F);
-		var11.addVertexWithUV((double)(0.0F - var17), (double)(0.0F - var18), 0.0D, (double)var12, (double)var15);
-		var11.addVertexWithUV((double)(var16 - var17), (double)(0.0F - var18), 0.0D, (double)var13, (double)var15);
-		var11.addVertexWithUV((double)(var16 - var17), (double)(1.0F - var18), 0.0D, (double)var13, (double)var14);
-		var11.addVertexWithUV((double)(0.0F - var17), (double)(1.0F - var18), 0.0D, (double)var12, (double)var14);
-		var11.draw();
+		tessellator11.startDrawingQuads();
+		tessellator11.setNormal(0.0F, 1.0F, 0.0F);
+		tessellator11.addVertexWithUV((double)(0.0F - f17), (double)(0.0F - f18), 0.0D, (double)f12, (double)f15);
+		tessellator11.addVertexWithUV((double)(f16 - f17), (double)(0.0F - f18), 0.0D, (double)f13, (double)f15);
+		tessellator11.addVertexWithUV((double)(f16 - f17), (double)(1.0F - f18), 0.0D, (double)f13, (double)f14);
+		tessellator11.addVertexWithUV((double)(0.0F - f17), (double)(1.0F - f18), 0.0D, (double)f12, (double)f14);
+		tessellator11.draw();
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
 		GL11.glPopMatrix();
 	}
 
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.doRenderSnowball((EntitySnowball)var1, var2, var4, var6, var8, var9);
+	public void doRender(Entity xy, double double2, double double3, double double4, float float5, float float6) {
+		this.doRenderSnowball((EntitySnowball)xy, double2, double3, double4, float5, float6);
 	}
 }
--- net/minecraft/src/RenderBoat.java
+++ net/minecraft/src/RenderBoat.java
@@ -10,31 +10,31 @@
 		this.modelBoat = new ModelBoat();
 	}
 
-	public void renderBoat(EntityBoat var1, double var2, double var4, double var6, float var8, float var9) {
+	public void renderBoat(EntityBoat aar, double double2, double double3, double double4, float float5, float float6) {
 		GL11.glPushMatrix();
-		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
-		GL11.glRotatef(180.0F - var8, 0.0F, 1.0F, 0.0F);
-		float var10 = (float)var1.timeSinceHit - var9;
-		float var11 = (float)var1.damageTaken - var9;
-		if(var11 < 0.0F) {
-			var11 = 0.0F;
-		}
-
-		if(var10 > 0.0F) {
-			GL11.glRotatef(MathHelper.sin(var10) * var10 * var11 / 10.0F * (float)var1.forwardDirection, 1.0F, 0.0F, 0.0F);
-		}
-
-		this.loadTexture("/terrain.png");
-		float var12 = 12.0F / 16.0F;
-		GL11.glScalef(var12, var12, var12);
-		GL11.glScalef(1.0F / var12, 1.0F / var12, 1.0F / var12);
+		GL11.glTranslatef((float)double2, (float)double3, (float)double4);
+		GL11.glRotatef(180.0F - float5, 0.0F, 1.0F, 0.0F);
+		float f10 = (float)aar.timeSinceHit - float6;
+		float f11 = (float)aar.damageTaken - float6;
+		if(f11 < 0.0F) {
+			f11 = 0.0F;
+		}
+
+		if(f10 > 0.0F) {
+			GL11.glRotatef(MathHelper.sin(f10) * f10 * f11 / 10.0F * (float)aar.forwardDirection, 1.0F, 0.0F, 0.0F);
+		}
+
+		this.loadTexture(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9796_62Ccm2XAR6JqSDTgV762x61j971DNgsIrMhaXZxPs0fQnBC7ymR2l1v1V22X));
+		float f12 = 0.75F;
+		GL11.glScalef(f12, f12, f12);
+		GL11.glScalef(1.0F / f12, 1.0F / f12, 1.0F / f12);
 		this.loadTexture("/item/boat.png");
 		GL11.glScalef(-1.0F, -1.0F, 1.0F);
-		this.modelBoat.render(0.0F, 0.0F, -0.1F, 0.0F, 0.0F, 1.0F / 16.0F);
+		this.modelBoat.render(0.0F, 0.0F, -0.1F, 0.0F, 0.0F, 0.0625F);
 		GL11.glPopMatrix();
 	}
 
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderBoat((EntityBoat)var1, var2, var4, var6, var8, var9);
+	public void doRender(Entity xy, double double2, double double3, double double4, float float5, float float6) {
+		this.renderBoat((EntityBoat)xy, double2, double3, double4, float5, float6);
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandMcRedl.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+class CommandMcRedl extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8597_3bxFt87TC8K6X974DX95EaIky5552vQKqI2e0BwcjTVrhU8LvEu1MnQG6I71;
+    
+    CommandMcRedl(final CommandManager abb) {
+        this.field_8597_3bxFt87TC8K6X974DX95EaIky5552vQKqI2e0BwcjTVrhU8LvEu1MnQG6I71 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        try {
+            ThreadDownloadResources.finished = false;
+            (InputHandler.mc.downloadResourcesThread = new ThreadDownloadResources(InputHandler.mc.mcDataDir, InputHandler.mc)).start();
+        }
+        catch (final Exception ex) {}
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/VisualsConfiguration.java
@@ -1,0 +1,62 @@
+package net.minecraft.src;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+
+import net.minecraft.client.Minecraft;
+
+public class VisualsConfiguration {
+	public boolean field_12194_99q16b50kyIAY3WydyIly32wBpFBLxi4p3yRL4x1J0O0Z0CR3wEHi9t1G3x9 = true;
+	public boolean field_12193_0yRCEAwFDV9mBOu59M849721TnV6ElT7DXzAWHz5Qor4Anx7W5pTGD808ZYq = false;
+	public boolean field_12191_1Q9p51ztMeH5L0oO28iX56xn49Eh9t0ZhEW6Gtn003jXgry844hmYr9985XV = false;
+	public int field_12192_9E67d5X2srrjQ8fe493f7ub1P59cMh50f2G1a453y7P5UP6YgaLpUO1EN9yR = 8961023;
+	public int field_12195_4252ptxk91utqUzwxJFw0j8CTrWMs6A4327D4QmrdAsD6mV695v861Puc7f3 = 0;
+
+	public static VisualsConfiguration func_12190_4qG6SCyQHhAB3Z4dLMG6530SnOk4ZY0WE2d12Vzgf77VgolUcGMS3afod9NS(InputStream inputStream) {
+		VisualsConfiguration visualsConfiguration1 = new VisualsConfiguration();
+		BufferedReader bufferedReader2 = new BufferedReader(new InputStreamReader(inputStream));
+
+		try {
+			for(String string3 = bufferedReader2.readLine(); string3 != null; string3 = bufferedReader2.readLine()) {
+				if(string3.startsWith("+ext1605.update-fx-textures=")) {
+					visualsConfiguration1.field_12194_99q16b50kyIAY3WydyIly32wBpFBLxi4p3yRL4x1J0O0Z0CR3wEHi9t1G3x9 = string3.substring(string3.indexOf(61) + 1).equals("1");
+				} else if(string3.startsWith("+ext1605.no-biomes=")) {
+					visualsConfiguration1.field_12193_0yRCEAwFDV9mBOu59M849721TnV6ElT7DXzAWHz5Qor4Anx7W5pTGD808ZYq = string3.substring(string3.indexOf(61) + 1).equals("1");
+				} else if(string3.startsWith("+ext1605.bilinear=")) {
+					visualsConfiguration1.field_12191_1Q9p51ztMeH5L0oO28iX56xn49Eh9t0ZhEW6Gtn003jXgry844hmYr9985XV = string3.substring(string3.indexOf(61) + 1).equals("1");
+				} else if(string3.startsWith("+ext1605.color-sky-day=#")) {
+					try {
+						visualsConfiguration1.field_12192_9E67d5X2srrjQ8fe493f7ub1P59cMh50f2G1a453y7P5UP6YgaLpUO1EN9yR = Integer.parseInt(string3.substring(string3.indexOf(61) + 2), 16);
+					} catch (NumberFormatException numberFormatException6) {
+						ExtLogger.w("[TexPack] \'+ext1605.color-sky-day\' invalid color argument (not #RRGGBB)");
+					}
+				} else if(string3.startsWith("+ext1605.color-sky-night=#")) {
+					try {
+						visualsConfiguration1.field_12195_4252ptxk91utqUzwxJFw0j8CTrWMs6A4327D4QmrdAsD6mV695v861Puc7f3 = Integer.parseInt(string3.substring(string3.indexOf(61) + 2), 16);
+					} catch (NumberFormatException numberFormatException5) {
+						ExtLogger.w("[TexPack] \'+ext1605.color-sky-night\' invalid color argument (not #RRGGBB)");
+					}
+				}
+			}
+
+			bufferedReader2.close();
+		} catch (IOException iOException7) {
+			iOException7.printStackTrace();
+		}
+
+		return visualsConfiguration1;
+	}
+
+	public void func_12189_4e16037zP017Ybyhw4klyCwOs24S8Nh9OzRYIDt7732Nr83dqO5Otm7FIbRq(Minecraft minecraft) {
+		Minecraft.field_7307_8AX67fsnsj54328J9e6FiY9333555Xj726t2182u3TBB948QMZsZX2iz02iv = this.field_12194_99q16b50kyIAY3WydyIly32wBpFBLxi4p3yRL4x1J0O0Z0CR3wEHi9t1G3x9;
+		ScreenDebugMenu.field_7964_8G80Kimsj2t150ZuEHxk97V3fSV455qzurOOVWgX8oTDDCEH9YV34z9vRAoC = this.field_12193_0yRCEAwFDV9mBOu59M849721TnV6ElT7DXzAWHz5Qor4Anx7W5pTGD808ZYq;
+		ScreenDebugMenu.field_7956_48H3fYB8k2jE5s5HC81S9Sm600nFD73Lb4N90Pl1F0LSIx70mF1gldgvzgRz = this.field_12191_1Q9p51ztMeH5L0oO28iX56xn49Eh9t0ZhEW6Gtn003jXgry844hmYr9985XV;
+		if(minecraft.theWorld != null) {
+			minecraft.theWorld.skyColor = (long)this.field_12192_9E67d5X2srrjQ8fe493f7ub1P59cMh50f2G1a453y7P5UP6YgaLpUO1EN9yR;
+			minecraft.theWorld.field_7500_6aGUO2jbVGtoxoGHcgMRUkCmunA4cxQ7hz8a29V2I7fc5UVeqFCM92Z8HJnU = (long)this.field_12195_4252ptxk91utqUzwxJFw0j8CTrWMs6A4327D4QmrdAsD6mV695v861Puc7f3;
+		}
+
+	}
+}
--- net/minecraft/src/NBTTagList.java
+++ net/minecraft/src/NBTTagList.java
@@ -10,31 +10,31 @@
 	private List tagList = new ArrayList();
 	private byte tagType;
 
-	void writeTagContents(DataOutput var1) throws IOException {
+	void writeTagContents(DataOutput dataOutput) throws IOException {
 		if(this.tagList.size() > 0) {
 			this.tagType = ((NBTBase)this.tagList.get(0)).getType();
 		} else {
 			this.tagType = 1;
 		}
 
-		var1.writeByte(this.tagType);
-		var1.writeInt(this.tagList.size());
+		dataOutput.writeByte(this.tagType);
+		dataOutput.writeInt(this.tagList.size());
 
-		for(int var2 = 0; var2 < this.tagList.size(); ++var2) {
-			((NBTBase)this.tagList.get(var2)).writeTagContents(var1);
+		for(int i2 = 0; i2 < this.tagList.size(); ++i2) {
+			((NBTBase)this.tagList.get(i2)).writeTagContents(dataOutput);
 		}
 
 	}
 
-	void readTagContents(DataInput var1) throws IOException {
-		this.tagType = var1.readByte();
-		int var2 = var1.readInt();
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.tagType = dataInput.readByte();
+		int i2 = dataInput.readInt();
 		this.tagList = new ArrayList();
 
-		for(int var3 = 0; var3 < var2; ++var3) {
-			NBTBase var4 = NBTBase.createTagOfType(this.tagType);
-			var4.readTagContents(var1);
-			this.tagList.add(var4);
+		for(int i3 = 0; i3 < i2; ++i3) {
+			NBTBase nBTBase4 = NBTBase.createTagOfType(this.tagType);
+			nBTBase4.readTagContents(dataInput);
+			this.tagList.add(nBTBase4);
 		}
 
 	}
@@ -47,13 +47,13 @@
 		return "" + this.tagList.size() + " entries of type " + NBTBase.getTagName(this.tagType);
 	}
 
-	public void setTag(NBTBase var1) {
-		this.tagType = var1.getType();
-		this.tagList.add(var1);
+	public void setTag(NBTBase tag) {
+		this.tagType = tag.getType();
+		this.tagList.add(tag);
 	}
 
-	public NBTBase tagAt(int var1) {
-		return (NBTBase)this.tagList.get(var1);
+	public NBTBase tagAt(int index) {
+		return (NBTBase)this.tagList.get(index);
 	}
 
 	public int tagCount() {
--- /dev/null
+++ net/minecraft/src/Launcher.java
@@ -1,0 +1,72 @@
+package net.minecraft.src;
+
+import java.awt.Color;
+import java.awt.Component;
+import java.awt.Dimension;
+import java.awt.FlowLayout;
+import java.awt.Font;
+import java.io.IOException;
+import javax.imageio.ImageIO;
+import javax.swing.Box;
+import javax.swing.BoxLayout;
+import javax.swing.ImageIcon;
+import javax.swing.JButton;
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JTextField;
+
+public class Launcher {
+	public static void func_9592_8mrizGWQ0Mh6Pp4tb49FU0IZkwN1499r0Sqo62o9pWcK97N2T9z24ygg2kGb(JPanel jPanel, Component[] arr) {
+		JPanel jPanel2 = new JPanel(new FlowLayout(0));
+		jPanel2.setBackground(new Color(30, 30, 30));
+		Component[] component3 = arr;
+		int i4 = arr.length;
+
+		for(int i5 = 0; i5 < i4; ++i5) {
+			Component component6 = component3[i5];
+			jPanel2.add(component6);
+		}
+
+		jPanel.add(jPanel2);
+	}
+
+	public static void main(String[] arr) {
+		JFrame jFrame1 = new JFrame("\u00e2\u2014\u20201.0.16.05");
+		jFrame1.setSize(330, 210);
+		JPanel jPanel2 = new JPanel();
+		jPanel2.setLayout(new BoxLayout(jPanel2, 1));
+		jPanel2.setAlignmentX(0.0F);
+		jPanel2.setMaximumSize(jPanel2.getPreferredSize());
+		jPanel2.setBackground(new Color(30, 30, 30));
+		jFrame1.add(jPanel2);
+
+		try {
+			JLabel jLabel3 = new JLabel(new ImageIcon(ImageIO.read(Ext1605Utils.func_12146_9P3TY758VM8951Z7q70WD5qYdKqLdB22jUqQNi8u6rFBU4uZnFfpCw0XU82v("/dirt.png")).getScaledInstance(50, 50, 2)));
+			jLabel3.setText("Launcher");
+			jLabel3.setForeground(Color.WHITE);
+			jLabel3.setFont(new Font("Arial", 0, 30));
+			func_9592_8mrizGWQ0Mh6Pp4tb49FU0IZkwN1499r0Sqo62o9pWcK97N2T9z24ygg2kGb(jPanel2, new Component[]{jLabel3});
+		} catch (IOException iOException9) {
+			iOException9.printStackTrace();
+		}
+
+		Box box10 = Box.createHorizontalBox();
+		box10.setSize(new Dimension(300, 3));
+		jPanel2.add(box10);
+		JTextField jTextField4 = new JTextField();
+		jTextField4.setPreferredSize(new Dimension(200, 20));
+		JLabel jLabel5 = new JLabel("Player name");
+		jLabel5.setForeground(Color.WHITE);
+		func_9592_8mrizGWQ0Mh6Pp4tb49FU0IZkwN1499r0Sqo62o9pWcK97N2T9z24ygg2kGb(jPanel2, new Component[]{jLabel5, jTextField4});
+		JTextField jTextField6 = new JTextField();
+		jTextField6.setPreferredSize(new Dimension(200, 20));
+		JLabel jLabel7 = new JLabel("Launch options");
+		jLabel7.setForeground(Color.WHITE);
+		func_9592_8mrizGWQ0Mh6Pp4tb49FU0IZkwN1499r0Sqo62o9pWcK97N2T9z24ygg2kGb(jPanel2, new Component[]{jLabel7, jTextField6});
+		JButton jButton8 = new JButton();
+		jButton8.setText("Start");
+		jPanel2.add(jButton8);
+		jFrame1.setVisible(true);
+	}
+}
--- net/minecraft/src/KeyBinding.java
+++ net/minecraft/src/KeyBinding.java
@@ -4,8 +4,8 @@
 	public String keyDescription;
 	public int keyCode;
 
-	public KeyBinding(String var1, int var2) {
-		this.keyDescription = var1;
-		this.keyCode = var2;
+	public KeyBinding(String name, int key) {
+		this.keyDescription = name;
+		this.keyCode = key;
 	}
 }
--- net/minecraft/src/BlockOre.java
+++ net/minecraft/src/BlockOre.java
@@ -3,15 +3,15 @@
 import java.util.Random;
 
 public class BlockOre extends Block {
-	public BlockOre(int var1, int var2) {
-		super(var1, var2, Material.rock);
-	}
-
-	public int idDropped(int var1, Random var2) {
-		return this.blockID == Block.oreCoal.blockID ? Item.coal.shiftedIndex : (this.blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : this.blockID);
-	}
-
-	public int quantityDropped(Random var1) {
+	public BlockOre(int id, int blockIndex) {
+		super(id, blockIndex, Material.rock);
+	}
+
+	public int idDropped(int count, Random random) {
+		return this.blockID == Block.oreCoal.blockID ? Item.coal.shiftedIndex : (this.blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (this.blockID == ExtBlocks.LowOreCoal.blockID ? Item.coal.shiftedIndex : (this.blockID == ExtBlocks.LowOreDiamond.blockID ? Item.diamond.shiftedIndex : (this.blockID == ExtBlocks.LaceAgateOre.blockID ? ExtItems.LaceAgate.shiftedIndex : (this.blockID == ExtBlocks.ClinohumiteOre.blockID ? ExtItems.Clinohumite.shiftedIndex : (this.blockID == ExtBlocks.MalachiteOre.blockID ? ExtItems.Malachite.shiftedIndex : (this.blockID == ExtBlocks.PyriteOre.blockID ? ExtItems.Pyrite.shiftedIndex : this.blockID)))))));
+	}
+
+	public int quantityDropped(Random random) {
 		return 1;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockMyconDoor.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockMyconDoor extends BlockDoor {
+	public BlockMyconDoor(int integer1, int integer2) {
+		super(integer1, Material.wood);
+		this.blockIndexInTexture = integer2;
+	}
+
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : ExtItems.MyconDoor.shiftedIndex;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockLeavesOld.java
@@ -1,0 +1,116 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockLeavesOld extends BlockLeavesBaseOld {
+	private int leafTexIndex;
+	private int decayCounter = 0;
+
+	protected BlockLeavesOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.leaves, false);
+		this.leafTexIndex = integer2;
+		this.setTickOnLoad(true);
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		this.decayCounter = 0;
+		this.updateCurrentLeaves(vg, integer2, integer3, integer4);
+		super.onNeighborBlockChange(vg, integer2, integer3, integer4, integer5);
+	}
+
+	public void updateConnectedLeaves(World vg, int integer2, int integer3, int integer4, int integer5) {
+		if(vg.getBlockId(integer2, integer3, integer4) == this.blockID) {
+			int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+			if(i6 != 0 && i6 == integer5 - 1) {
+				this.updateCurrentLeaves(vg, integer2, integer3, integer4);
+			}
+		}
+	}
+
+	public void updateCurrentLeaves(World vg, int integer2, int integer3, int integer4) {
+		if(this.decayCounter++ < 100) {
+			int i5 = vg.getBlockMaterial(integer2, integer3 - 1, integer4).isSolid() ? 16 : 0;
+			int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+			if(i6 == 0) {
+				i6 = 1;
+				vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 1);
+			}
+
+			i5 = this.getConnectionStrength(vg, integer2, integer3 - 1, integer4, i5);
+			i5 = this.getConnectionStrength(vg, integer2, integer3, integer4 - 1, i5);
+			i5 = this.getConnectionStrength(vg, integer2, integer3, integer4 + 1, i5);
+			i5 = this.getConnectionStrength(vg, integer2 - 1, integer3, integer4, i5);
+			i5 = this.getConnectionStrength(vg, integer2 + 1, integer3, integer4, i5);
+			int i7 = i5 - 1;
+			if(i7 < 10) {
+				i7 = 1;
+			}
+
+			if(i7 != i6) {
+				vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i7);
+				this.updateConnectedLeaves(vg, integer2, integer3 - 1, integer4, i6);
+				this.updateConnectedLeaves(vg, integer2, integer3 + 1, integer4, i6);
+				this.updateConnectedLeaves(vg, integer2, integer3, integer4 - 1, i6);
+				this.updateConnectedLeaves(vg, integer2, integer3, integer4 + 1, i6);
+				this.updateConnectedLeaves(vg, integer2 - 1, integer3, integer4, i6);
+				this.updateConnectedLeaves(vg, integer2 + 1, integer3, integer4, i6);
+			}
+
+		}
+	}
+
+	private int getConnectionStrength(World vg, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = vg.getBlockId(integer2, integer3, integer4);
+		if(i6 == BlockOld.wood.blockID) {
+			return 16;
+		} else {
+			if(i6 == this.blockID) {
+				int i7 = vg.getBlockMetadata(integer2, integer3, integer4);
+				if(i7 != 0 && i7 > integer5) {
+					return i7;
+				}
+			}
+
+			return integer5;
+		}
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		if(i6 == 0) {
+			this.decayCounter = 0;
+			this.updateCurrentLeaves(vg, integer2, integer3, integer4);
+		} else if(i6 == 1) {
+			this.removeLeaves(vg, integer2, integer3, integer4);
+		} else if(random.nextInt(10) == 0) {
+			this.updateCurrentLeaves(vg, integer2, integer3, integer4);
+		}
+
+	}
+
+	private void removeLeaves(World vg, int integer2, int integer3, int integer4) {
+		this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+		vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+	}
+
+	public int quantityDropped(Random random) {
+		return random.nextInt(20) == 0 ? 1 : 0;
+	}
+
+	public int idDropped(int integer, Random random) {
+		return BlockOld.sapling.blockID;
+	}
+
+	public boolean isOpaqueCube() {
+		return !this.graphicsLevel;
+	}
+
+	public void setGraphicsLevel(boolean boolean1) {
+		this.graphicsLevel = boolean1;
+		this.blockIndexInTexture = this.leafTexIndex + (boolean1 ? 0 : 1);
+	}
+
+	public void onEntityWalking(World vg, int integer2, int integer3, int integer4, Entity xy) {
+		super.onEntityWalking(vg, integer2, integer3, integer4, xy);
+	}
+}
--- net/minecraft/src/GuiInventory.java
+++ net/minecraft/src/GuiInventory.java
@@ -8,76 +8,76 @@
 	private float xSize_lo;
 	private float ySize_lo;
 
-	public GuiInventory(IInventory var1, ItemStack[] var2) {
+	public GuiInventory(IInventory cz, ItemStack[] arr) {
 		this.allowUserInput = true;
-		this.craftingInventory = new CraftingInventoryPlayerCB(var2);
+		this.craftingInventory = new CraftingInventoryPlayerCB(arr);
 		this.inventorySlots.add(new SlotCrafting(this, this.craftingInventory.craftMatrix, this.craftingInventory.craftResult, 0, 144, 36));
 
-		int var3;
-		int var4;
-		for(var3 = 0; var3 < 2; ++var3) {
-			for(var4 = 0; var4 < 2; ++var4) {
-				this.inventorySlots.add(new SlotInventory(this, this.craftingInventory.craftMatrix, var4 + var3 * 2, 88 + var4 * 18, 26 + var3 * 18));
-			}
-		}
-
-		for(var3 = 0; var3 < 4; ++var3) {
-			this.inventorySlots.add(new SlotArmor(this, this, var1, var1.getSizeInventory() - 1 - var3, 8, 8 + var3 * 18, var3));
-		}
-
-		for(var3 = 0; var3 < 3; ++var3) {
-			for(var4 = 0; var4 < 9; ++var4) {
-				this.inventorySlots.add(new SlotInventory(this, var1, var4 + (var3 + 1) * 9, 8 + var4 * 18, 84 + var3 * 18));
-			}
-		}
-
-		for(var3 = 0; var3 < 9; ++var3) {
-			this.inventorySlots.add(new SlotInventory(this, var1, var3, 8 + var3 * 18, 142));
+		int i3;
+		int i4;
+		for(i3 = 0; i3 < 2; ++i3) {
+			for(i4 = 0; i4 < 2; ++i4) {
+				this.inventorySlots.add(new SlotInventory(this, this.craftingInventory.craftMatrix, i4 + i3 * 2, 88 + i4 * 18, 26 + i3 * 18));
+			}
+		}
+
+		for(i3 = 0; i3 < 4; ++i3) {
+			this.inventorySlots.add(new SlotArmor(this, this, cz, cz.getSizeInventory() - 1 - i3, 8, 8 + i3 * 18, i3));
+		}
+
+		for(i3 = 0; i3 < 3; ++i3) {
+			for(i4 = 0; i4 < 9; ++i4) {
+				this.inventorySlots.add(new SlotInventory(this, cz, i4 + (i3 + 1) * 9, 8 + i4 * 18, 84 + i3 * 18));
+			}
+		}
+
+		for(i3 = 0; i3 < 9; ++i3) {
+			this.inventorySlots.add(new SlotInventory(this, cz, i3, 8 + i3 * 18, 142));
 		}
 
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString("Crafting", 86, 16, 4210752);
-	}
-
-	public void drawScreen(int var1, int var2, float var3) {
-		super.drawScreen(var1, var2, var3);
-		this.xSize_lo = (float)var1;
-		this.ySize_lo = (float)var2;
-	}
-
-	protected void drawGuiContainerBackgroundLayer(float var1) {
-		int var2 = this.mc.renderEngine.getTexture("/gui/inventory.png");
+		this.fontRenderer.drawString("Crafting", 86, 16, 0xFFFFFF);
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
+		this.xSize_lo = (float)mouseX;
+		this.ySize_lo = (float)mouseY;
+	}
+
+	protected void drawGuiContainerBackgroundLayer(float renderPartialTick) {
+		int i2 = this.mc.renderEngine.getTexture("/gui/inventory.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.mc.renderEngine.bindTexture(var2);
-		int var3 = (this.width - this.xSize) / 2;
-		int var4 = (this.height - this.ySize) / 2;
-		this.drawTexturedModalRect(var3, var4, 0, 0, this.xSize, this.ySize);
+		this.mc.renderEngine.bindTexture(i2);
+		int i3 = (this.width - this.xSize) / 2;
+		int i4 = (this.height - this.ySize) / 2;
+		this.drawTexturedModalRect(i3, i4, 0, 0, this.xSize, this.ySize);
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 		GL11.glEnable(GL11.GL_COLOR_MATERIAL);
 		GL11.glPushMatrix();
-		GL11.glTranslatef((float)(var3 + 51), (float)(var4 + 75), 50.0F);
-		float var5 = 30.0F;
-		GL11.glScalef(-var5, var5, var5);
+		GL11.glTranslatef((float)(i3 + 51), (float)(i4 + 75), 50.0F);
+		float f5 = 30.0F;
+		GL11.glScalef(-f5, f5, f5);
 		GL11.glRotatef(180.0F, 0.0F, 0.0F, 1.0F);
-		float var6 = this.mc.thePlayer.renderYawOffset;
-		float var7 = this.mc.thePlayer.rotationYaw;
-		float var8 = this.mc.thePlayer.rotationPitch;
-		float var9 = (float)(var3 + 51) - this.xSize_lo;
-		float var10 = (float)(var4 + 75 - 50) - this.ySize_lo;
+		float f6 = this.mc.thePlayer.renderYawOffset;
+		float f7 = this.mc.thePlayer.rotationYaw;
+		float f8 = this.mc.thePlayer.rotationPitch;
+		float f9 = (float)(i3 + 51) - this.xSize_lo;
+		float f10 = (float)(i4 + 75 - 50) - this.ySize_lo;
 		GL11.glRotatef(135.0F, 0.0F, 1.0F, 0.0F);
 		RenderHelper.enableStandardItemLighting();
 		GL11.glRotatef(-135.0F, 0.0F, 1.0F, 0.0F);
-		GL11.glRotatef(-((float)Math.atan((double)(var10 / 40.0F))) * 20.0F, 1.0F, 0.0F, 0.0F);
-		this.mc.thePlayer.renderYawOffset = (float)Math.atan((double)(var9 / 40.0F)) * 20.0F;
-		this.mc.thePlayer.rotationYaw = (float)Math.atan((double)(var9 / 40.0F)) * 40.0F;
-		this.mc.thePlayer.rotationPitch = -((float)Math.atan((double)(var10 / 40.0F))) * 20.0F;
+		GL11.glRotatef(-((float)Math.atan((double)(f10 / 40.0F))) * 20.0F, 1.0F, 0.0F, 0.0F);
+		this.mc.thePlayer.renderYawOffset = (float)Math.atan((double)(f9 / 40.0F)) * 20.0F;
+		this.mc.thePlayer.rotationYaw = (float)Math.atan((double)(f9 / 40.0F)) * 40.0F;
+		this.mc.thePlayer.rotationPitch = -((float)Math.atan((double)(f10 / 40.0F))) * 20.0F;
 		GL11.glTranslatef(0.0F, this.mc.thePlayer.yOffset, 0.0F);
 		RenderManager.instance.renderEntityWithPosYaw(this.mc.thePlayer, 0.0D, 0.0D, 0.0D, 0.0F, 1.0F);
-		this.mc.thePlayer.renderYawOffset = var6;
-		this.mc.thePlayer.rotationYaw = var7;
-		this.mc.thePlayer.rotationPitch = var8;
+		this.mc.thePlayer.renderYawOffset = f6;
+		this.mc.thePlayer.rotationYaw = f7;
+		this.mc.thePlayer.rotationPitch = f8;
 		GL11.glPopMatrix();
 		RenderHelper.disableStandardItemLighting();
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
--- /dev/null
+++ net/minecraft/src/BlockReedOld.java
@@ -1,0 +1,73 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockReedOld extends BlockOld {
+	protected BlockReedOld(int integer1, int integer2) {
+		super(integer1, Material.plants);
+		this.blockIndexInTexture = integer2;
+		float f3 = 0.375F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, 1.0F, 0.5F + f3);
+		this.setTickOnLoad(true);
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(vg.getBlockId(integer2, integer3 + 1, integer4) == 0) {
+			int i6;
+			for(i6 = 1; vg.getBlockId(integer2, integer3 - i6, integer4) == this.blockID; ++i6) {
+			}
+
+			if(i6 < 3) {
+				int i7 = vg.getBlockMetadata(integer2, integer3, integer4);
+				if(i7 == 15) {
+					vg.setBlockWithNotify(integer2, integer3 + 1, integer4, this.blockID);
+					vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 0);
+				} else {
+					vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i7 + 1);
+				}
+			}
+		}
+
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockId(integer2, integer3 - 1, integer4);
+		return i5 == this.blockID ? true : (i5 != BlockOld.grass.blockID && i5 != BlockOld.dirt.blockID ? false : (vg.getBlockMaterial(integer2 - 1, integer3 - 1, integer4) == Material.water ? true : (vg.getBlockMaterial(integer2 + 1, integer3 - 1, integer4) == Material.water ? true : (vg.getBlockMaterial(integer2, integer3 - 1, integer4 - 1) == Material.water ? true : vg.getBlockMaterial(integer2, integer3 - 1, integer4 + 1) == Material.water))));
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		this.checkBlockCoordValid(vg, integer2, integer3, integer4);
+	}
+
+	protected final void checkBlockCoordValid(World vg, int integer2, int integer3, int integer4) {
+		if(!this.canBlockStay(vg, integer2, integer3, integer4)) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+		}
+
+	}
+
+	public boolean canBlockStay(World vg, int integer2, int integer3, int integer4) {
+		return this.canPlaceBlockAt(vg, integer2, integer3, integer4);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return null;
+	}
+
+	public int idDropped(int integer, Random random) {
+		return Item.reed.shiftedIndex;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 1;
+	}
+}
--- net/minecraft/src/WorldGenDungeons.java
+++ net/minecraft/src/WorldGenDungeons.java
@@ -3,114 +3,110 @@
 import java.util.Random;
 
 public class WorldGenDungeons extends WorldGenerator {
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		byte var6 = 3;
-		int var7 = var2.nextInt(2) + 2;
-		int var8 = var2.nextInt(2) + 2;
-		int var9 = 0;
-
-		int var10;
-		int var11;
-		int var12;
-		for(var10 = var3 - var7 - 1; var10 <= var3 + var7 + 1; ++var10) {
-			for(var11 = var4 - 1; var11 <= var4 + var6 + 1; ++var11) {
-				for(var12 = var5 - var8 - 1; var12 <= var5 + var8 + 1; ++var12) {
-					Material var13 = var1.getBlockMaterial(var10, var11, var12);
-					if(var11 == var4 - 1 && !var13.isSolid()) {
-						return false;
-					}
-
-					if(var11 == var4 + var6 + 1 && !var13.isSolid()) {
-						return false;
-					}
-
-					if((var10 == var3 - var7 - 1 || var10 == var3 + var7 + 1 || var12 == var5 - var8 - 1 || var12 == var5 + var8 + 1) && var11 == var4 && var1.getBlockId(var10, var11, var12) == 0 && var1.getBlockId(var10, var11 + 1, var12) == 0) {
-						++var9;
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		byte b6 = 3;
+		int i7 = rand.nextInt(2) + 2;
+		int i8 = rand.nextInt(2) + 2;
+		int i9 = 0;
+
+		int i10;
+		int i11;
+		int i12;
+		for(i10 = x - i7 - 1; i10 <= x + i7 + 1; ++i10) {
+			for(i11 = y - 1; i11 <= y + b6 + 1; ++i11) {
+				for(i12 = z - i8 - 1; i12 <= z + i8 + 1; ++i12) {
+					Material material13 = world.getBlockMaterial(i10, i11, i12);
+					if((i11 == y - 1 || i11 == y + b6 + 1) && !material13.isSolid()) {
+						return false;
+					}
+
+					if((i10 == x - i7 - 1 || i10 == x + i7 + 1 || i12 == z - i8 - 1 || i12 == z + i8 + 1) && i11 == y && world.getBlockId(i10, i11, i12) == 0 && world.getBlockId(i10, i11 + 1, i12) == 0) {
+						++i9;
 					}
 				}
 			}
 		}
 
-		if(var9 >= 1 && var9 <= 5) {
-			for(var10 = var3 - var7 - 1; var10 <= var3 + var7 + 1; ++var10) {
-				for(var11 = var4 + var6; var11 >= var4 - 1; --var11) {
-					for(var12 = var5 - var8 - 1; var12 <= var5 + var8 + 1; ++var12) {
-						if(var10 != var3 - var7 - 1 && var11 != var4 - 1 && var12 != var5 - var8 - 1 && var10 != var3 + var7 + 1 && var11 != var4 + var6 + 1 && var12 != var5 + var8 + 1) {
-							var1.setBlockWithNotify(var10, var11, var12, 0);
-						} else if(var11 >= 0 && !var1.getBlockMaterial(var10, var11 - 1, var12).isSolid()) {
-							var1.setBlockWithNotify(var10, var11, var12, 0);
-						} else if(var1.getBlockMaterial(var10, var11, var12).isSolid()) {
-							if(var11 == var4 - 1 && var2.nextInt(4) != 0) {
-								var1.setBlockWithNotify(var10, var11, var12, Block.cobblestoneMossy.blockID);
+		if(i9 >= 1 && i9 <= 5) {
+			for(i10 = x - i7 - 1; i10 <= x + i7 + 1; ++i10) {
+				for(i11 = y + b6; i11 >= y - 1; --i11) {
+					for(i12 = z - i8 - 1; i12 <= z + i8 + 1; ++i12) {
+						if(i10 != x - i7 - 1 && i11 != y - 1 && i12 != z - i8 - 1 && i10 != x + i7 + 1 && i11 != y + b6 + 1 && i12 != z + i8 + 1) {
+							world.setBlockWithNotify(i10, i11, i12, 0);
+						} else if(i11 >= 0 && !world.getBlockMaterial(i10, i11 - 1, i12).isSolid()) {
+							world.setBlockWithNotify(i10, i11, i12, 0);
+						} else if(world.getBlockMaterial(i10, i11, i12).isSolid()) {
+							if(i11 == y - 1 && rand.nextInt(4) != 0) {
+								world.setBlockWithNotify(i10, i11, i12, Block.cobblestoneMossy.blockID);
 							} else {
-								var1.setBlockWithNotify(var10, var11, var12, Block.cobblestone.blockID);
+								world.setBlockWithNotify(i10, i11, i12, Block.cobblestone.blockID);
 							}
 						}
 					}
 				}
 			}
 
-			label110:
-			for(var10 = 0; var10 < 2; ++var10) {
-				for(var11 = 0; var11 < 3; ++var11) {
-					var12 = var3 + var2.nextInt(var7 * 2 + 1) - var7;
-					int var14 = var5 + var2.nextInt(var8 * 2 + 1) - var8;
-					if(var1.getBlockId(var12, var4, var14) == 0) {
-						int var15 = 0;
-						if(var1.getBlockMaterial(var12 - 1, var4, var14).isSolid()) {
-							++var15;
-						}
-
-						if(var1.getBlockMaterial(var12 + 1, var4, var14).isSolid()) {
-							++var15;
-						}
-
-						if(var1.getBlockMaterial(var12, var4, var14 - 1).isSolid()) {
-							++var15;
-						}
-
-						if(var1.getBlockMaterial(var12, var4, var14 + 1).isSolid()) {
-							++var15;
-						}
-
-						if(var15 == 1) {
-							var1.setBlockWithNotify(var12, var4, var14, Block.chest.blockID);
-							TileEntityChest var16 = (TileEntityChest)var1.getBlockTileEntity(var12, var4, var14);
-							int var17 = 0;
+			label104:
+			for(i10 = 0; i10 < 2; ++i10) {
+				for(i11 = 0; i11 < 3; ++i11) {
+					i12 = x + rand.nextInt(i7 * 2 + 1) - i7;
+					int i18 = z + rand.nextInt(i8 * 2 + 1) - i8;
+					if(world.getBlockId(i12, y, i18) == 0) {
+						int i14 = 0;
+						if(world.getBlockMaterial(i12 - 1, y, i18).isSolid()) {
+							++i14;
+						}
+
+						if(world.getBlockMaterial(i12 + 1, y, i18).isSolid()) {
+							++i14;
+						}
+
+						if(world.getBlockMaterial(i12, y, i18 - 1).isSolid()) {
+							++i14;
+						}
+
+						if(world.getBlockMaterial(i12, y, i18 + 1).isSolid()) {
+							++i14;
+						}
+
+						if(i14 == 1) {
+							world.setBlockWithNotify(i12, y, i18, Block.chest.blockID);
+							TileEntityChest tileEntityChest15 = (TileEntityChest)world.getBlockTileEntity(i12, y, i18);
+							int i16 = 0;
 
 							while(true) {
-								if(var17 >= 8) {
-									continue label110;
-								}
-
-								ItemStack var18 = this.pickCheckLootItem(var2);
-								if(var18 != null) {
-									var16.setInventorySlotContents(var2.nextInt(var16.getSizeInventory()), var18);
-								}
-
-								++var17;
+								if(i16 >= 8) {
+									continue label104;
+								}
+
+								ItemStack itemStack17 = this.pickCheckLootItem(rand);
+								if(itemStack17 != null) {
+									tileEntityChest15.setInventorySlotContents(rand.nextInt(tileEntityChest15.getSizeInventory()), itemStack17);
+								}
+
+								++i16;
 							}
 						}
 					}
 				}
 			}
 
-			var1.setBlockWithNotify(var3, var4, var5, Block.mobSpawner.blockID);
-			TileEntityMobSpawner var19 = (TileEntityMobSpawner)var1.getBlockTileEntity(var3, var4, var5);
-			var19.mobID = this.pickMobSpawner(var2);
+			world.setBlockWithNotify(x, y, z, Block.mobSpawner.blockID);
+			TileEntityMobSpawner tileEntityMobSpawner19 = (TileEntityMobSpawner)world.getBlockTileEntity(x, y, z);
+			tileEntityMobSpawner19.mobID = this.pickMobSpawner(rand);
 			return true;
 		} else {
 			return false;
 		}
 	}
 
-	private ItemStack pickCheckLootItem(Random var1) {
-		int var2 = var1.nextInt(11);
-		return var2 == 0 ? new ItemStack(Item.saddle) : (var2 == 1 ? new ItemStack(Item.ingotIron, var1.nextInt(4) + 1) : (var2 == 2 ? new ItemStack(Item.bread) : (var2 == 3 ? new ItemStack(Item.wheat, var1.nextInt(4) + 1) : (var2 == 4 ? new ItemStack(Item.gunpowder, var1.nextInt(4) + 1) : (var2 == 5 ? new ItemStack(Item.silk, var1.nextInt(4) + 1) : (var2 == 6 ? new ItemStack(Item.bucketEmpty) : (var2 == 7 && var1.nextInt(100) == 0 ? new ItemStack(Item.appleGold) : (var2 == 8 && var1.nextInt(2) == 0 ? new ItemStack(Item.redstone, var1.nextInt(4) + 1) : (var2 == 9 && var1.nextInt(10) == 0 ? new ItemStack(Item.itemsList[Item.record13.shiftedIndex + var1.nextInt(2)]) : null)))))))));
+	private ItemStack pickCheckLootItem(Random random) {
+		int i2 = random.nextInt(11);
+		return i2 == 0 ? new ItemStack(Item.saddle) : (i2 == 1 ? new ItemStack(Item.ingotIron, random.nextInt(4) + 1) : (i2 == 2 ? new ItemStack(Item.bread) : (i2 == 3 ? new ItemStack(Item.wheat, random.nextInt(4) + 1) : (i2 == 4 ? new ItemStack(Item.gunpowder, random.nextInt(4) + 1) : (i2 == 5 ? new ItemStack(Item.silk, random.nextInt(4) + 1) : (i2 == 6 ? new ItemStack(Item.bucketEmpty) : (i2 == 7 && random.nextInt(100) == 0 ? new ItemStack(Item.appleGold) : (i2 == 8 && random.nextInt(2) == 0 ? new ItemStack(Item.redstone, random.nextInt(4) + 1) : (i2 == 9 && random.nextInt(10) == 0 ? new ItemStack(Item.itemsList[Item.record13.shiftedIndex + random.nextInt(2)]) : null)))))))));
 	}
 
-	private String pickMobSpawner(Random var1) {
-		int var2 = var1.nextInt(4);
-		return var2 == 0 ? "Skeleton" : (var2 == 1 ? "Zombie" : (var2 == 2 ? "Zombie" : (var2 == 3 ? "Spider" : "")));
+	private String pickMobSpawner(Random random) {
+		int i2 = random.nextInt(4);
+		return i2 == 0 ? "Skeleton" : (i2 == 1 ? "Zombie" : (i2 == 2 ? "Zombie" : (i2 == 3 ? "Spider" : "")));
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockWifiBlock.java
@@ -1,0 +1,29 @@
+package net.minecraft.src;
+
+public class BlockWifiBlock extends Block {
+	public BlockWifiBlock(int integer) {
+		super(integer, Material.wood);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		entityPlayer.func_9014_8m5ZIeFsLDmTSL7vg0gU2Gb8dJg6fdSuixcwsqYKcnVLS6AUHVRG1qS6my5L();
+		return true;
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return this.getBlockTextureFromSideAndMetadata(side, 0);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		switch(side) {
+		case 0:
+			return 265;
+		case 1:
+			return 281;
+		case 2:
+			return 280;
+		default:
+			return 279;
+		}
+	}
+}
--- net/minecraft/src/GLAllocation.java
+++ net/minecraft/src/GLAllocation.java
@@ -6,57 +6,58 @@
 import java.nio.IntBuffer;
 import java.util.ArrayList;
 import java.util.List;
+
 import org.lwjgl.opengl.GL11;
 
 public class GLAllocation {
 	private static List displayLists = new ArrayList();
 	private static List textureNames = new ArrayList();
 
-	public static synchronized int generateDisplayLists(int var0) {
-		int var1 = GL11.glGenLists(var0);
-		displayLists.add(Integer.valueOf(var1));
-		displayLists.add(Integer.valueOf(var0));
-		return var1;
+	public static synchronized int generateDisplayLists(int integer) {
+		int i1 = GL11.glGenLists(integer);
+		displayLists.add(i1);
+		displayLists.add(integer);
+		return i1;
 	}
 
-	public static synchronized void generateTextureNames(IntBuffer var0) {
-		GL11.glGenTextures(var0);
+	public static synchronized void generateTextureNames(IntBuffer intBuffer) {
+		GL11.glGenTextures(intBuffer);
 
-		for(int var1 = var0.position(); var1 < var0.limit(); ++var1) {
-			textureNames.add(Integer.valueOf(var0.get(var1)));
+		for(int i1 = intBuffer.position(); i1 < intBuffer.limit(); ++i1) {
+			textureNames.add(intBuffer.get(i1));
 		}
 
 	}
 
 	public static synchronized void deleteTexturesAndDisplayLists() {
-		for(int var0 = 0; var0 < displayLists.size(); var0 += 2) {
-			GL11.glDeleteLists(((Integer)displayLists.get(var0)).intValue(), ((Integer)displayLists.get(var0 + 1)).intValue());
-		}
-
-		IntBuffer var2 = createDirectIntBuffer(textureNames.size());
-		var2.flip();
-		GL11.glDeleteTextures(var2);
-
-		for(int var1 = 0; var1 < textureNames.size(); ++var1) {
-			var2.put(((Integer)textureNames.get(var1)).intValue());
-		}
-
-		var2.flip();
-		GL11.glDeleteTextures(var2);
+		for(int i0 = 0; i0 < displayLists.size(); i0 += 2) {
+			GL11.glDeleteLists(((Integer)displayLists.get(i0)).intValue(), ((Integer)displayLists.get(i0 + 1)).intValue());
+		}
+
+		IntBuffer intBuffer2 = createDirectIntBuffer(textureNames.size());
+		intBuffer2.flip();
+		GL11.glDeleteTextures(intBuffer2);
+
+		for(int i1 = 0; i1 < textureNames.size(); ++i1) {
+			intBuffer2.put(((Integer)textureNames.get(i1)).intValue());
+		}
+
+		intBuffer2.flip();
+		GL11.glDeleteTextures(intBuffer2);
 		displayLists.clear();
 		textureNames.clear();
 	}
 
-	public static synchronized ByteBuffer createDirectByteBuffer(int var0) {
-		ByteBuffer var1 = ByteBuffer.allocateDirect(var0).order(ByteOrder.nativeOrder());
-		return var1;
-	}
-
-	public static IntBuffer createDirectIntBuffer(int var0) {
-		return createDirectByteBuffer(var0 << 2).asIntBuffer();
-	}
-
-	public static FloatBuffer createDirectFloatBuffer(int var0) {
-		return createDirectByteBuffer(var0 << 2).asFloatBuffer();
+	public static synchronized ByteBuffer createDirectByteBuffer(int integer) {
+		ByteBuffer byteBuffer1 = ByteBuffer.allocateDirect(integer).order(ByteOrder.nativeOrder());
+		return byteBuffer1;
+	}
+
+	public static IntBuffer createDirectIntBuffer(int integer) {
+		return createDirectByteBuffer(integer << 2).asIntBuffer();
+	}
+
+	public static FloatBuffer createDirectFloatBuffer(int integer) {
+		return createDirectByteBuffer(integer << 2).asFloatBuffer();
 	}
 }
--- net/minecraft/src/GuiMainMenu.java
+++ net/minecraft/src/GuiMainMenu.java
@@ -1,11 +1,19 @@
 package net.minecraft.src;
 
 import java.io.BufferedReader;
+import java.io.File;
+import java.io.IOException;
 import java.io.InputStreamReader;
+import java.nio.charset.Charset;
+import java.nio.file.Files;
+import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.Random;
+
+import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.util.glu.GLU;
 
@@ -13,123 +21,197 @@
 	private static final Random rand = new Random();
 	String[] logoBlockLayers = new String[]{" *   * * *   * *** *** *** *** *** ***", " ** ** * **  * *   *   * * * * *    * ", " * * * * * * * **  *   **  *** **   * ", " *   * * *  ** *   *   * * * * *    * ", " *   * * *   * *** *** * * * * *    * "};
 	private LogoEffectRandomizer[][] logoEffects;
-	private float updateCounter = 0.0F;
 	private String splashString = "missingno";
+	private String qlaunchWorldName = "";
 
 	public GuiMainMenu() {
 		try {
-			ArrayList var1 = new ArrayList();
-			BufferedReader var2 = new BufferedReader(new InputStreamReader(GuiMainMenu.class.getResourceAsStream("/title/splashes.txt")));
-			String var3 = "";
-
-			while(true) {
-				var3 = var2.readLine();
-				if(var3 == null) {
-					this.splashString = (String)var1.get(rand.nextInt(var1.size()));
-					break;
-				}
-
-				var3 = var3.trim();
-				if(var3.length() > 0) {
-					var1.add(var3);
+			ArrayList arrayList1 = new ArrayList();
+			BufferedReader bufferedReader2 = new BufferedReader(new InputStreamReader(Ext1605Utils.func_12150_5v4Cs6sI06e6Hjpg3rSI82gG008x14C2jag2OM7ADaW5U8a3DYSrf570CJm6("/title/splashes.txt")));
+			String string3 = "";
+
+			while((string3 = bufferedReader2.readLine()) != null) {
+				string3 = string3.trim();
+				if(string3.length() > 0) {
+					arrayList1.add(string3);
 				}
 			}
-		} catch (Exception var4) {
+
+			this.splashString = (String)arrayList1.get(rand.nextInt(arrayList1.size()));
+		} catch (Exception exception4) {
 		}
 
 	}
 
 	public void updateScreen() {
-		++this.updateCounter;
 		if(this.logoEffects != null) {
-			for(int var1 = 0; var1 < this.logoEffects.length; ++var1) {
-				for(int var2 = 0; var2 < this.logoEffects[var1].length; ++var2) {
-					this.logoEffects[var1][var2].updateLogoEffects();
+			for(int i1 = 0; i1 < this.logoEffects.length; ++i1) {
+				for(int i2 = 0; i2 < this.logoEffects[i1].length; ++i2) {
+					this.logoEffects[i1][i2].updateLogoEffects();
 				}
 			}
 		}
 
 	}
 
-	protected void keyTyped(char var1, int var2) {
+	private void LoadQLaunch() {
+		try {
+			this.qlaunchWorldName = (String)Files.readAllLines(Paths.get("./qfile", new String[0]), Charset.forName("utf8")).get(0);
+			File file1 = new File(Minecraft.getMinecraftDir(), "saves/" + this.qlaunchWorldName);
+			if(!file1.exists() || !file1.isDirectory()) {
+				throw new IOException();
+			}
+
+			((GuiButton)this.controlList.get(1)).enabled = true;
+			((GuiButton)this.controlList.get(1)).displayString = "Quickload : " + this.qlaunchWorldName;
+			((GuiButton)this.controlList.get(1)).width = 80 + this.qlaunchWorldName.length() * 4;
+		} catch (IOException iOException2) {
+			((GuiButton)this.controlList.get(1)).enabled = false;
+		}
+
+	}
+
+	protected void keyTyped(char character, int key) {
 	}
 
 	public void initGui() {
-		Calendar var1 = Calendar.getInstance();
-		var1.setTime(new Date());
-		if(var1.get(2) + 1 == 11 && var1.get(5) == 9) {
-			this.splashString = "Happy birthday, ez!";
-		} else if(var1.get(2) + 1 == 6 && var1.get(5) == 1) {
-			this.splashString = "Happy birthday, Notch!";
-		} else if(var1.get(2) + 1 == 12 && var1.get(5) == 24) {
-			this.splashString = "Merry X-mas!";
-		} else if(var1.get(2) + 1 == 1 && var1.get(5) == 1) {
-			this.splashString = "Happy new year!";
+		Calendar calendar1 = Calendar.getInstance();
+		calendar1.setTime(new Date());
+		int i2 = calendar1.get(2);
+		if(i2 == 5 && calendar1.get(5) == 5) {
+			this.splashString = "Happy birthday, 8064262!";
+		} else if(i2 == 5 && calendar1.get(5) == 6) {
+			this.splashString = "Happy birthday, my beloved...";
+		} else if(i2 == 7 && calendar1.get(5) == 15) {
+			String[] string3 = new String[]{"\"Screw you, cat!\"", "\"We\'re like a secret organization!\"", "Interval Days", "Interval Daze"};
+			this.splashString = string3[rand.nextInt(string3.length)];
+		} else if(i2 == 7 && calendar1.get(5) == 31) {
+			this.splashString = "39!";
+		} else if(i2 == 2 && calendar1.get(5) == 3) {
+			this.splashString = "Drummin\' along since 2000!";
+		} else if((i2 != 8 || calendar1.get(5) != 18) && (i2 != 5 || calendar1.get(5) != 24)) {
+			if(calendar1.get(10) == 7 && calendar1.get(12) == 27) {
+				if(rand.nextBoolean()) {
+					this.splashString = "How?";
+				} else {
+					this.splashString = "When you see it...";
+				}
+			}
+		} else {
+			this.splashString = "Also try ShovelForge!";
 		}
 
 		this.controlList.clear();
-		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 48, "Singleplayer"));
-		this.controlList.add(new GuiButton(2, this.width / 2 - 100, this.height / 4 + 72, "Multiplayer"));
-		this.controlList.add(new GuiButton(3, this.width / 2 - 100, this.height / 4 + 96, "Play tutorial level"));
-		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120 + 12, "Options..."));
-		((GuiButton)this.controlList.get(2)).enabled = false;
-		if(this.mc.session == null) {
+		this.controlList.add(new ButtonSel(1, this.width / 8, this.height / 4 + 48, 120, 20, "Play", true));
+		this.controlList.add(new ButtonSel(4, this.width / 8 + 200 - 60, this.height / 4 + 48, 60, 20, "Quickload", true));
+		this.controlList.add(new ButtonSel(0, this.width / 8, this.height / 4 + 96 + 12, 100, 20, "Options", true));
+		this.controlList.add(new ButtonSel(5, this.width / 8, this.height / 4 + 120 + 12, 80, 20, "Exit", true));
+		this.controlList.add(new ButtonSel(6, this.width / 8, this.height / 4 + 84, 70, 20, "Visuals", true));
+		this.controlList.add(new ButtonSel(7, this.width / 8 + 75, this.height / 4 + 84, 70, 20, "Extensions", true));
+		this.controlList.add(new ButtonSel(8, this.width / 8 + 90, this.height / 4 + 120 + 12, 80, 20, "Credits", true));
+		this.LoadQLaunch();
+		if(CertUtils.loadedPublicKey == null) {
 			((GuiButton)this.controlList.get(1)).enabled = false;
 		}
 
+		if(SoundManager.sndSystem != null && !SoundManager.sndSystem.playing("BgMusic")) {
+			InputHandler.mc.sndManager.func_12031_514dv3mYU7t95lOh23lLhBI10XBv07D8y61Goe1u7G926JNt2Y1WIoiHj5tm("mainmenu", true);
+		}
+
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.id == 0) {
+	protected void actionPerformed(GuiButton button) {
+		if(button.id == 0) {
 			this.mc.displayGuiScreen(new GuiOptions(this, this.mc.options));
 		}
 
-		if(var1.id == 1) {
-			this.mc.displayGuiScreen(new GuiSelectWorld(this));
-		}
-
-		if(var1.id == 2) {
-			this.mc.displayGuiScreen(new GuiMultiplayer(this));
+		if(button.id == 1) {
+			this.mc.displayGuiScreen(new GuiPlayGame(this));
+		}
+
+		if(button.id == 2) {
+			if(InputHandler.IsKeyDown(54)) {
+				this.mc.displayGuiScreen(new GuiAltMultiplayer(this));
+			} else {
+				this.mc.displayGuiScreen(new GuiMultiplayer(this));
+			}
+		}
+
+		if(button.id == 3) {
+			if(ThreadDownloadResources.finished) {
+				this.mc.displayGuiScreen((GuiScreen)(InputHandler.IsKeyDown(54) ? new GuiZM(this) : new GuiFreerunWorlds(this)));
+			} else {
+				this.mc.displayGuiScreen(new GuiConnectFailed("", "Downloading resources. Try again later."));
+			}
+		}
+
+		if(button.id == 4 && this.qlaunchWorldName != "") {
+			File file2 = new File(Minecraft.getMinecraftDir(), "saves/" + this.qlaunchWorldName);
+			if(file2.exists() && file2.isDirectory()) {
+				this.mc.playerController = new PlayerControllerSP(this.mc);
+				this.mc.startWorld(this.qlaunchWorldName);
+				this.mc.displayGuiScreen((GuiScreen)null);
+			}
+		}
+
+		if(button.id == 5) {
+			this.mc.shutdownMinecraftApplet();
+			System.exit(39);
+		}
+
+		if(button.id == 6) {
+			this.mc.displayGuiScreen(new GuiVisuals(this));
+		}
+
+		if(button.id == 7) {
+			this.mc.displayGuiScreen(new GuiExtensions(this));
+		}
+
+		if(button.id == 8) {
+			this.mc.displayGuiScreen(new GuiCredits(this));
 		}
 
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		Tessellator var4 = Tessellator.instance;
-		this.drawLogo(var3);
+		Gui.drawGradientRect(0, this.height / 4 + 40, this.width, this.height, -536870912, -2146697188);
+		Gui.drawGradientRect(0, 0, this.width, this.height / 4 + 40, 447997183, 11789567);
+		Tessellator tessellator4 = Tessellator.instance;
+		this.drawLogo(renderPartialTick);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/logo.png"));
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		var4.setColorOpaque_I(16777215);
+		tessellator4.setColorOpaque_I(0xFFFFFF);
 		GL11.glPushMatrix();
 		GL11.glTranslatef((float)(this.width / 2 + 90), 70.0F, 0.0F);
 		GL11.glRotatef(-20.0F, 0.0F, 0.0F, 1.0F);
-		float var5 = 1.8F - MathHelper.abs(MathHelper.sin((float)(System.currentTimeMillis() % 1000L) / 1000.0F * (float)Math.PI * 2.0F) * 0.1F);
-		var5 = var5 * 100.0F / (float)(this.fontRenderer.getStringWidth(this.splashString) + 32);
-		GL11.glScalef(var5, var5, var5);
+		float f5 = 1.8F - MathHelper.abs(MathHelper.sin((float)(System.currentTimeMillis() % 1000L) / 1000.0F * (float)Math.PI * 2.0F) * 0.1F);
+		f5 = f5 * 100.0F / (float)(this.fontRenderer.getStringWidth(this.splashString) + 32);
+		GL11.glScalef(f5, f5, f5);
 		this.drawCenteredString(this.fontRenderer, this.splashString, 0, -8, 16776960);
 		GL11.glPopMatrix();
-		String var6 = "Copyright Mojang Specifications. Do not distribute.";
-		this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, this.height - 10, 16777215);
-		long var7 = Runtime.getRuntime().maxMemory();
-		long var9 = Runtime.getRuntime().totalMemory();
-		long var11 = Runtime.getRuntime().freeMemory();
-		long var13 = var7 - var11;
-		var6 = "Free memory: " + var13 * 100L / var7 + "% of " + var7 / 1024L / 1024L + "MB";
-		this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, 2, 8421504);
-		var6 = "Allocated memory: " + var9 * 100L / var7 + "% (" + var9 / 1024L / 1024L + "MB)";
-		this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, 12, 8421504);
-		super.drawScreen(var1, var2, var3);
+		Gui.drawString(this.fontRenderer, "Logged in as " + this.mc.session.username, this.width / 8, this.height / 4 + 30, 1627389951);
+		String string6 = "Copyright Mojang. Distribution strictly prohibited.";
+		Gui.drawString(this.fontRenderer, string6, this.width - this.fontRenderer.getStringWidth(string6) - 2, this.height - 10, 0xFFFFFF);
+		long j7 = Runtime.getRuntime().maxMemory();
+		long j9 = Runtime.getRuntime().totalMemory();
+		long j11 = Runtime.getRuntime().freeMemory();
+		long j13 = j7 - j11;
+		string6 = "Free memory: " + j13 * 100L / j7 + "% of " + j7 / 1024L / 1024L + "MB";
+		Gui.drawString(this.fontRenderer, string6, this.width - this.fontRenderer.getStringWidth(string6) - 2, 2, 8421504);
+		string6 = "Allocated memory: " + j9 * 100L / j7 + "% (" + j9 / 1024L / 1024L + "MB)";
+		Gui.drawString(this.fontRenderer, string6, this.width - this.fontRenderer.getStringWidth(string6) - 2, 12, 8421504);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 
-	private void drawLogo(float var1) {
-		int var3;
+	private void drawLogo(float renderPartialTick) {
+		int i2;
 		if(this.logoEffects == null) {
 			this.logoEffects = new LogoEffectRandomizer[this.logoBlockLayers[0].length()][this.logoBlockLayers.length];
 
-			for(int var2 = 0; var2 < this.logoEffects.length; ++var2) {
-				for(var3 = 0; var3 < this.logoEffects[var2].length; ++var3) {
-					this.logoEffects[var2][var3] = new LogoEffectRandomizer(this, var2, var3);
+			for(int i3 = 0; i3 < this.logoEffects.length; ++i3) {
+				for(i2 = 0; i2 < this.logoEffects[i3].length; ++i2) {
+					this.logoEffects[i3][i2] = new LogoEffectRandomizer(this, i3, i2);
 				}
 			}
 		}
@@ -137,10 +219,10 @@
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glPushMatrix();
 		GL11.glLoadIdentity();
-		ScaledResolution var14 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-		var3 = 120 * var14.scaleFactor;
-		GLU.gluPerspective(70.0F, (float)this.mc.displayWidth / (float)var3, 0.05F, 100.0F);
-		GL11.glViewport(0, this.mc.displayHeight - var3, this.mc.displayWidth, var3);
+		ScaledResolution scaledResolution14 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+		i2 = 120 * scaledResolution14.scaleFactor;
+		GLU.gluPerspective(70.0F, (float)this.mc.displayWidth / (float)i2, 0.05F, 100.0F);
+		GL11.glViewport(0, this.mc.displayHeight - i2, this.mc.displayWidth, i2);
 		GL11.glMatrixMode(GL11.GL_MODELVIEW);
 		GL11.glPushMatrix();
 		GL11.glLoadIdentity();
@@ -148,10 +230,10 @@
 		GL11.glCullFace(GL11.GL_BACK);
 		GL11.glDepthMask(true);
 
-		for(int var4 = 0; var4 < 3; ++var4) {
+		for(int i4 = 0; i4 < 3; ++i4) {
 			GL11.glPushMatrix();
 			GL11.glTranslatef(0.4F, 0.6F, -12.0F);
-			if(var4 == 0) {
+			if(i4 == 0) {
 				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
 				GL11.glTranslatef(0.0F, -0.4F, 0.0F);
 				GL11.glScalef(0.98F, 1.0F, 1.0F);
@@ -159,12 +241,12 @@
 				GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 			}
 
-			if(var4 == 1) {
+			if(i4 == 1) {
 				GL11.glDisable(GL11.GL_BLEND);
 				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
 			}
 
-			if(var4 == 2) {
+			if(i4 == 2) {
 				GL11.glEnable(GL11.GL_BLEND);
 				GL11.glBlendFunc(GL11.GL_SRC_COLOR, GL11.GL_ONE);
 			}
@@ -173,33 +255,33 @@
 			GL11.glRotatef(15.0F, 1.0F, 0.0F, 0.0F);
 			GL11.glScalef(0.89F, 1.0F, 0.4F);
 			GL11.glTranslatef((float)(-this.logoBlockLayers[0].length()) * 0.5F, (float)(-this.logoBlockLayers.length) * 0.5F, 0.0F);
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
-			if(var4 == 0) {
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9796_62Ccm2XAR6JqSDTgV762x61j971DNgsIrMhaXZxPs0fQnBC7ymR2l1v1V22X)));
+			if(i4 == 0) {
 				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/title/black.png"));
 			}
 
-			RenderBlocks var5 = new RenderBlocks();
+			RenderBlocks renderBlocks5 = new RenderBlocks();
 
-			for(int var6 = 0; var6 < this.logoBlockLayers.length; ++var6) {
-				for(int var7 = 0; var7 < this.logoBlockLayers[var6].length(); ++var7) {
-					char var8 = this.logoBlockLayers[var6].charAt(var7);
-					if(var8 != 32) {
+			for(int i6 = 0; i6 < this.logoBlockLayers.length; ++i6) {
+				for(int i7 = 0; i7 < this.logoBlockLayers[i6].length(); ++i7) {
+					char c8 = this.logoBlockLayers[i6].charAt(i7);
+					if(c8 != 32) {
 						GL11.glPushMatrix();
-						LogoEffectRandomizer var9 = this.logoEffects[var7][var6];
-						float var10 = (float)(var9.prevHeight + (var9.height - var9.prevHeight) * (double)var1);
-						float var11 = 1.0F;
-						float var12 = 1.0F;
-						float var13 = 0.0F;
-						if(var4 == 0) {
-							var11 = var10 * 0.04F + 1.0F;
-							var12 = 1.0F / var11;
-							var10 = 0.0F;
+						LogoEffectRandomizer logoEffectRandomizer9 = this.logoEffects[i7][i6];
+						float f10 = (float)(logoEffectRandomizer9.prevHeight + (logoEffectRandomizer9.height - logoEffectRandomizer9.prevHeight) * (double)renderPartialTick);
+						float f11 = 1.0F;
+						float f12 = 1.0F;
+						float f13 = 0.0F;
+						if(i4 == 0) {
+							f11 = f10 * 0.04F + 1.0F;
+							f12 = 1.0F / f11;
+							f10 = 0.0F;
 						}
 
-						GL11.glTranslatef((float)var7, (float)var6, var10);
-						GL11.glScalef(var11, var11, var11);
-						GL11.glRotatef(var13, 0.0F, 1.0F, 0.0F);
-						var5.renderBlockAsItem(Block.stone, var12);
+						GL11.glTranslatef((float)i7, (float)i6, f10);
+						GL11.glScalef(f11, f11, f11);
+						GL11.glRotatef(f13, 0.0F, 1.0F, 0.0F);
+						renderBlocks5.func_10674_47uFsco7k3MB69GCB74UB9R3EkROVQhfTX6e4vfh9tGQb5JpV1NpUJJZFMS4(Block.stone, f12, true);
 						GL11.glPopMatrix();
 					}
 				}
--- /dev/null
+++ net/minecraft/src/BlockLogOld.java
@@ -1,0 +1,22 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockLogOld extends BlockOld {
+	protected BlockLogOld(int integer) {
+		super(integer, Material.wood);
+		this.blockIndexInTexture = 20;
+	}
+
+	public int quantityDropped(Random random) {
+		return 1;
+	}
+
+	public int idDropped(int integer, Random random) {
+		return BlockOld.wood.blockID;
+	}
+
+	public int getBlockTextureFromSide(int integer) {
+		return integer == 1 ? 21 : (integer == 0 ? 21 : 20);
+	}
+}
--- net/minecraft/src/ChunkCache.java
+++ net/minecraft/src/ChunkCache.java
@@ -6,118 +6,144 @@
 	private Chunk[][] chunkArray;
 	private World worldObj;
 
-	public ChunkCache(World var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		this.worldObj = var1;
-		this.chunkX = var2 >> 4;
-		this.chunkZ = var4 >> 4;
-		int var8 = var5 >> 4;
-		int var9 = var7 >> 4;
-		this.chunkArray = new Chunk[var8 - this.chunkX + 1][var9 - this.chunkZ + 1];
+	public ChunkCache(World world, int x, int minY, int z, int maxX, int maxY, int maxZ) {
+		this.worldObj = world;
+		this.chunkX = x >> 4;
+		this.chunkZ = z >> 4;
+		int i8 = maxX >> 4;
+		int i9 = maxZ >> 4;
+		this.chunkArray = new Chunk[i8 - this.chunkX + 1][i9 - this.chunkZ + 1];
 
-		for(int var10 = this.chunkX; var10 <= var8; ++var10) {
-			for(int var11 = this.chunkZ; var11 <= var9; ++var11) {
-				this.chunkArray[var10 - this.chunkX][var11 - this.chunkZ] = var1.getChunkFromChunkCoords(var10, var11);
+		for(int i10 = this.chunkX; i10 <= i8; ++i10) {
+			for(int i11 = this.chunkZ; i11 <= i9; ++i11) {
+				this.chunkArray[i10 - this.chunkX][i11 - this.chunkZ] = world.getChunkFromChunkCoords(i10, i11);
 			}
 		}
 
 	}
 
-	public int getBlockId(int var1, int var2, int var3) {
-		if(var2 < 0) {
+	public int getBlockId(int blockX, int blockY, int blockZ) {
+		if(blockY < 0) {
 			return 0;
-		} else if(var2 >= 128) {
+		} else if(blockY >= 128) {
 			return 0;
 		} else {
-			int var4 = (var1 >> 4) - this.chunkX;
-			int var5 = (var3 >> 4) - this.chunkZ;
-			return this.chunkArray[var4][var5].getBlockID(var1 & 15, var2, var3 & 15);
-		}
-	}
-
-	public TileEntity getBlockTileEntity(int var1, int var2, int var3) {
-		int var4 = (var1 >> 4) - this.chunkX;
-		int var5 = (var3 >> 4) - this.chunkZ;
-		return this.chunkArray[var4][var5].getChunkBlockTileEntity(var1 & 15, var2, var3 & 15);
-	}
-
-	public float getBrightness(int var1, int var2, int var3) {
-		return World.lightBrightnessTable[this.getLightValue(var1, var2, var3)];
-	}
-
-	public int getLightValue(int var1, int var2, int var3) {
-		return this.getLightValueExt(var1, var2, var3, true);
-	}
-
-	public int getLightValueExt(int var1, int var2, int var3, boolean var4) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			int var5;
-			int var6;
-			if(var4) {
-				var5 = this.getBlockId(var1, var2, var3);
-				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID) {
-					var6 = this.getLightValueExt(var1, var2 + 1, var3, false);
-					int var7 = this.getLightValueExt(var1 + 1, var2, var3, false);
-					int var8 = this.getLightValueExt(var1 - 1, var2, var3, false);
-					int var9 = this.getLightValueExt(var1, var2, var3 + 1, false);
-					int var10 = this.getLightValueExt(var1, var2, var3 - 1, false);
-					if(var7 > var6) {
-						var6 = var7;
-					}
-
-					if(var8 > var6) {
-						var6 = var8;
-					}
-
-					if(var9 > var6) {
-						var6 = var9;
-					}
-
-					if(var10 > var6) {
-						var6 = var10;
-					}
-
-					return var6;
-				}
-			}
-
-			if(var2 < 0) {
-				return 0;
-			} else if(var2 >= 128) {
-				var5 = 15 - this.worldObj.skylightSubtracted;
-				if(var5 < 0) {
-					var5 = 0;
-				}
-
-				return var5;
+			int i4 = (blockX >> 4) - this.chunkX;
+			int i5 = (blockZ >> 4) - this.chunkZ;
+
+			try {
+				return this.chunkArray[i4][i5].getBlockID(blockX & 15, blockY, blockZ & 15);
+			} catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException7) {
+				return 0;
+			}
+		}
+	}
+
+	public TileEntity getBlockTileEntity(int x, int y, int z) {
+		int i4 = (x >> 4) - this.chunkX;
+		int i5 = (z >> 4) - this.chunkZ;
+		return this.chunkArray[i4][i5].getChunkBlockTileEntity(x & 15, y, z & 15);
+	}
+
+	public float getRenderSideBrightness(int integer1, int integer2, int integer3) {
+		return ScreenDebugMenu.field_7960_2AJG81m1pl0O5bhn2XiQ37CD76Uoi3M5l8gTKvm6mx16vAu3Ik5oCR8W6P15 ? 1.0F : World.lightBrightnessTable[this.getLightValue(integer1, integer2, integer3, true)];
+	}
+
+	public float getBrightness(int x, int y, int z) {
+		return World.lightBrightnessTable[this.getLightValue(x, y, z)];
+	}
+
+	public int getLightValue(int x, int y, int z) {
+		return this.getLightValue(x, y, z, false);
+	}
+
+	public int getLightValue(int integer1, int integer2, int integer3, boolean boolean4) {
+		return this.getLightValueExt(integer1, integer2, integer3, true, boolean4);
+	}
+
+	public int getLightValueExt(int x, int y, int z, boolean boolean4) {
+		return this.getLightValueExt(x, y, z, boolean4, false);
+	}
+
+	public int getLightValueExt(int integer1, int integer2, int integer3, boolean boolean4, boolean boolean5) {
+		int i6 = this.worldObj.skylightSubtracted;
+		if(boolean5 && InputHandler.mc.options.renderDistance == 5) {
+			i6 = Math.max(12, i6);
+		}
+
+		if(integer1 >= -32000000 && integer3 >= -32000000 && integer1 < 32000000 && integer3 <= 32000000) {
+			int i7;
+			int i8;
+			if(boolean4) {
+				i7 = this.getBlockId(integer1, integer2, integer3);
+				if(i7 == ExtBlocks.woodSingle.blockID || i7 == Block.stairSingle.blockID || i7 == Block.tilledField.blockID) {
+					i8 = this.getLightValueExt(integer1, integer2 + 1, integer3, false);
+					int i9 = this.getLightValueExt(integer1 + 1, integer2, integer3, false);
+					int i10 = this.getLightValueExt(integer1 - 1, integer2, integer3, false);
+					int i11 = this.getLightValueExt(integer1, integer2, integer3 + 1, false);
+					int i12 = this.getLightValueExt(integer1, integer2, integer3 - 1, false);
+					if(i9 > i8) {
+						i8 = i9;
+					}
+
+					if(i10 > i8) {
+						i8 = i10;
+					}
+
+					if(i11 > i8) {
+						i8 = i11;
+					}
+
+					if(i12 > i8) {
+						i8 = i12;
+					}
+
+					return i8;
+				}
+			}
+
+			if(integer2 < 0) {
+				return 0;
+			} else if(integer2 >= 128) {
+				i7 = 15 - i6;
+				if(i7 < 0) {
+					i7 = 0;
+				}
+
+				return i7;
 			} else {
-				var5 = (var1 >> 4) - this.chunkX;
-				var6 = (var3 >> 4) - this.chunkZ;
-				return this.chunkArray[var5][var6].getBlockLightValue(var1 & 15, var2, var3 & 15, this.worldObj.skylightSubtracted);
+				i7 = (integer1 >> 4) - this.chunkX;
+				i8 = (integer3 >> 4) - this.chunkZ;
+				return this.chunkArray[i7][i8].getBlockLightValue(integer1 & 15, integer2, integer3 & 15, i6);
 			}
 		} else {
 			return 15;
 		}
 	}
 
-	public int getBlockMetadata(int var1, int var2, int var3) {
-		if(var2 < 0) {
+	public int getBlockMetadata(int x, int y, int z) {
+		if(y < 0) {
 			return 0;
-		} else if(var2 >= 128) {
+		} else if(y >= 128) {
 			return 0;
 		} else {
-			int var4 = (var1 >> 4) - this.chunkX;
-			int var5 = (var3 >> 4) - this.chunkZ;
-			return this.chunkArray[var4][var5].getBlockMetadata(var1 & 15, var2, var3 & 15);
+			int i4 = (x >> 4) - this.chunkX;
+			int i5 = (z >> 4) - this.chunkZ;
+			return this.chunkArray[i4][i5].getBlockMetadata(x & 15, y, z & 15);
 		}
 	}
 
-	public Material getBlockMaterial(int var1, int var2, int var3) {
-		int var4 = this.getBlockId(var1, var2, var3);
-		return var4 == 0 ? Material.air : Block.blocksList[var4].material;
-	}
-
-	public boolean isBlockNormalCube(int var1, int var2, int var3) {
-		Block var4 = Block.blocksList[this.getBlockId(var1, var2, var3)];
-		return var4 == null ? false : var4.isOpaqueCube();
+	public Material getBlockMaterial(int x, int y, int z) {
+		int i4 = this.getBlockId(x, y, z);
+		return i4 == 0 ? Material.air : Block.blocksList[i4].material;
+	}
+
+	public boolean isBlockNormalCube(int x, int y, int z) {
+		Block block4 = Block.blocksList[this.getBlockId(x, y, z)];
+		return block4 == null ? false : block4.isOpaqueCube();
+	}
+
+	public BiomeInterface func_7342_9805301CWs03An9555qIw883P54dcq9802DkM5DuquNweM1NH26RH6oP02mr() {
+		return this.worldObj.func_7342_9805301CWs03An9555qIw883P54dcq9802DkM5DuquNweM1NH26RH6oP02mr();
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandPlaydemofile.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandPlaydemofile extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8596_0vWfx2d44llkb35hsi6oLwaqD9pBB3XH40yUA9e947Y2p4Y4sEZ0IuNlJcUN;
+    
+    CommandPlaydemofile(final CommandManager abb) {
+        this.field_8596_0vWfx2d44llkb35hsi6oLwaqD9pBB3XH40yUA9e947Y2p4Y4sEZ0IuNlJcUN = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL.func_12205_6ZOj2zwwjPk9f604twAF89u12c3MGns9EqJD4l3jZR2R6cy50aEWBthikzOk((String)arr[0]);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- net/minecraft/src/IWorldAccess.java
+++ net/minecraft/src/IWorldAccess.java
@@ -1,21 +1,21 @@
 package net.minecraft.src;
 
 public interface IWorldAccess {
-	void markBlockAndNeighborsNeedsUpdate(int var1, int var2, int var3);
-
-	void markBlockRangeNeedsUpdate(int var1, int var2, int var3, int var4, int var5, int var6);
-
-	void playSound(String var1, double var2, double var4, double var6, float var8, float var9);
-
-	void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12);
-
-	void obtainEntitySkin(Entity var1);
-
-	void releaseEntitySkin(Entity var1);
+	void markBlockAndNeighborsNeedsUpdate(int i1, int i2, int i3);
+
+	void markBlockRangeNeedsUpdate(int i1, int i2, int i3, int i4, int i5, int i6);
+
+	void playSound(String string1, double d2, double d4, double d6, float f8, float f9);
+
+	void spawnParticle(String string1, double d2, double d4, double d6, double d8, double d10, double d12);
+
+	void obtainEntitySkin(Entity entity1);
+
+	void releaseEntitySkin(Entity entity1);
 
 	void updateAllRenderers();
 
-	void playRecord(String var1, int var2, int var3, int var4);
+	void playRecord(String string1, int i2, int i3, int i4);
 
-	void doNothingWithTileEntity(int var1, int var2, int var3, TileEntity var4);
+	void doNothingWithTileEntity(int i1, int i2, int i3, TileEntity tileEntity4);
 }
--- net/minecraft/src/GuiConnectFailed.java
+++ net/minecraft/src/GuiConnectFailed.java
@@ -4,15 +4,15 @@
 	private String message;
 	private String description;
 
-	public GuiConnectFailed(String var1, String var2) {
-		this.message = var1;
-		this.description = var2;
+	public GuiConnectFailed(String msg, String desc) {
+		this.message = msg;
+		this.description = desc;
 	}
 
 	public void updateScreen() {
 	}
 
-	protected void keyTyped(char var1, int var2) {
+	protected void keyTyped(char character, int key) {
 	}
 
 	public void initGui() {
@@ -20,17 +20,28 @@
 		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120 + 12, "Back to title screen"));
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.id == 0) {
+	protected void actionPerformed(GuiButton button) {
+		if(button.id == 0) {
 			this.mc.displayGuiScreen(new GuiMainMenu());
 		}
 
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.message, this.width / 2, this.height / 2 - 50, 16777215);
-		this.drawCenteredString(this.fontRenderer, this.description, this.width / 2, this.height / 2 - 10, 16777215);
-		super.drawScreen(var1, var2, var3);
+		Gui.drawGradientRect(0, this.height / 4 * 3, this.width, this.height, -2147153098, -2146364641);
+		this.drawCenteredString(this.fontRenderer, this.message, this.width / 2, this.height / 2 - 50, 0xFFFFFF);
+		String[] string4 = this.description.split("\n");
+		int i5 = 0;
+		String[] string6 = string4;
+		int i7 = string4.length;
+
+		for(int i8 = 0; i8 < i7; ++i8) {
+			String string9 = string6[i8];
+			this.drawCenteredString(this.fontRenderer, string9, this.width / 2, this.height / 2 - 10 + i5 * 12, 0xFFFFFF);
+			++i5;
+		}
+
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- /dev/null
+++ net/minecraft/src/TriggerMode.java
@@ -1,0 +1,47 @@
+package net.minecraft.src;
+
+public enum TriggerMode {
+	Normal(0),
+	GameCube(1),
+	VerySoft(2),
+	Soft(3),
+	Hard(4),
+	VeryHard(5),
+	Hardest(6),
+	Rigid(7),
+	VibrateTrigger(8),
+	Choppy(9),
+	Medium(10),
+	VibrateTriggerPulse(11),
+	CustomTriggerValue(12),
+	Resistance(13),
+	Bow(14),
+	Galloping(15),
+	SemiAutomaticGun(16),
+	AutomaticGun(17),
+	Machine(18);
+
+	int index;
+
+    private static final /* synthetic */ TriggerMode[] field_10940_9l3Fnp8j2b2t9xOGujP13uy1O73auXblEI3NL9td7X2Lj1Oxg9m4iS1t6L8I;
+
+	public static TriggerMode[] func_10921_169uPCrkjFqi18gPuN956w5V4C7FWjZXw6O5bZJSt1EN91O8V07S5oS87814() {
+		return (TriggerMode[])field_10940_9l3Fnp8j2b2t9xOGujP13uy1O73auXblEI3NL9td7X2Lj1Oxg9m4iS1t6L8I.clone();
+	}
+
+	public static TriggerMode func_10919_0szvUh08fUrn8T1htP41R9lH1CTIp30Zd0mQ3OYqku5dQnRD2v068oMA4OOn(String string) {
+		return (TriggerMode)Enum.valueOf(TriggerMode.class, string);
+	}
+
+	private TriggerMode(int integer3) {
+		this.index = integer3;
+	}
+
+	private static TriggerMode[] func_10920_0E73t3d7GM820v7ag4sciB27902muSu2EKj9jl92n6e0FW328bROiT28h2Cz() {
+		return new TriggerMode[]{Normal, GameCube, VerySoft, Soft, Hard, VeryHard, Hardest, Rigid, VibrateTrigger, Choppy, Medium, VibrateTriggerPulse, CustomTriggerValue, Resistance, Bow, Galloping, SemiAutomaticGun, AutomaticGun, Machine};
+	}
+
+    static {
+        field_10940_9l3Fnp8j2b2t9xOGujP13uy1O73auXblEI3NL9td7X2Lj1Oxg9m4iS1t6L8I = TriggerMode.func_10920_0E73t3d7GM820v7ag4sciB27902muSu2EKj9jl92n6e0FW328bROiT28h2Cz();
+    }
+}
--- /dev/null
+++ net/minecraft/src/ButtonItemCheat.java
@@ -1,0 +1,48 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.opengl.GL11;
+
+public class ButtonItemCheat extends GuiButton {
+	public int bID;
+	public GuiScreen caller;
+
+	public ButtonItemCheat(int integer1, int integer2, int integer3, String string, int integer5, GuiScreen hr) {
+		super(integer1, integer2, integer3, 25, 20, string);
+		this.bID = integer5;
+		this.caller = hr;
+	}
+
+	public void drawButton(Minecraft minecraft, int mouseX, int mouseY) {
+		if(this.visible) {
+			int i5 = this.xPosition;
+			int i6 = this.yPosition;
+			FontRenderer fontRenderer7 = minecraft.fontRenderer;
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, minecraft.renderEngine.getTexture("/gui/GUICREA.png"));
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			byte b8 = 1;
+			boolean z4 = mouseX >= this.xPosition && mouseY >= this.yPosition && mouseX < this.xPosition + this.width && mouseY < this.yPosition + this.height;
+			if(!this.enabled) {
+				b8 = 0;
+			} else if(z4) {
+				b8 = 2;
+			}
+
+			this.drawTexturedModalRect(i5, i6, 0, 46 + b8 * 20, this.width / 2, this.height);
+			this.drawTexturedModalRect(i5 + this.width / 2, i6, 200 - this.width / 2, 46 + b8 * 20, this.width / 2, this.height);
+			if(!this.enabled) {
+				this.drawCenteredString(fontRenderer7, this.displayString, i5 + this.width / 2, i6 + (this.height - 8) / 2, -6250336);
+			} else if(z4) {
+				this.drawCenteredString(fontRenderer7, this.displayString, i5 + this.width / 2, i6 + (this.height - 8) / 2, 16777120);
+			} else {
+				this.drawCenteredString(fontRenderer7, this.displayString, i5 + this.width / 2, i6 + (this.height - 8) / 2, 14737632);
+			}
+
+		}
+	}
+
+	public boolean func_7873_6nn76xn75jkNpKB9Sh129Q32vm9N0lG68zRy7yDWq13FtymI5qk8UIhvhIPd() {
+		return false;
+	}
+}
--- net/minecraft/src/RenderManager.java
+++ net/minecraft/src/RenderManager.java
@@ -3,6 +3,7 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
+
 import org.lwjgl.opengl.GL11;
 
 public class RenderManager {
@@ -38,77 +39,91 @@
 		this.entityRenderMap.put(EntityLiving.class, new RenderLiving(new ModelBiped(), 0.5F));
 		this.entityRenderMap.put(Entity.class, new RenderEntity());
 		this.entityRenderMap.put(EntityPainting.class, new RenderPainting());
-		this.entityRenderMap.put(EntityArrow.class, new RenderArrow());
+		this.entityRenderMap.put(EntityArrow.class, new RenderArrow(false));
+		this.entityRenderMap.put(EntityEssenceProjectile.class, new RenderArrow(true));
 		this.entityRenderMap.put(EntitySnowball.class, new RenderSnowball());
 		this.entityRenderMap.put(EntityItem.class, new RenderItem());
 		this.entityRenderMap.put(EntityTNTPrimed.class, new RenderTNTPrimed());
 		this.entityRenderMap.put(EntityFallingSand.class, new RenderFallingSand());
 		this.entityRenderMap.put(EntityMinecart.class, new RenderMinecart());
 		this.entityRenderMap.put(EntityBoat.class, new RenderBoat());
-		Iterator var1 = this.entityRenderMap.values().iterator();
-
-		while(var1.hasNext()) {
-			Render var2 = (Render)var1.next();
-			var2.setRenderManager(this);
-		}
-
-	}
-
-	public Render getEntityClassRenderObject(Class var1) {
-		Render var2 = (Render)this.entityRenderMap.get(var1);
-		if(var2 == null && var1 != Entity.class) {
-			var2 = this.getEntityClassRenderObject(var1.getSuperclass());
-			this.entityRenderMap.put(var1, var2);
-		}
-
-		return var2;
-	}
-
-	public Render getEntityRenderObject(Entity var1) {
-		return this.getEntityClassRenderObject(var1.getClass());
-	}
-
-	public void cacheActiveRenderInfo(World var1, RenderEngine var2, FontRenderer var3, EntityPlayer var4, GameSettings var5, float var6) {
-		this.worldObj = var1;
-		this.renderEngine = var2;
-		this.options = var5;
-		this.player = var4;
-		this.fontRenderer = var3;
-		this.playerViewY = var4.prevRotationYaw + (var4.rotationYaw - var4.prevRotationYaw) * var6;
-		this.playerViewX = var4.prevRotationPitch + (var4.rotationPitch - var4.prevRotationPitch) * var6;
-		this.viewerPosX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var6;
-		this.viewerPosY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)var6;
-		this.viewerPosZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)var6;
-	}
-
-	public void renderEntity(Entity var1, float var2) {
-		double var3 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var2;
-		double var5 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var2;
-		double var7 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var2;
-		float var9 = var1.prevRotationYaw + (var1.rotationYaw - var1.prevRotationYaw) * var2;
-		float var10 = var1.getBrightness(var2);
-		GL11.glColor3f(var10, var10, var10);
-		this.renderEntityWithPosYaw(var1, var3 - renderPosX, var5 - renderPosY, var7 - renderPosZ, var9, var2);
-	}
-
-	public void renderEntityWithPosYaw(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		Render var10 = this.getEntityRenderObject(var1);
-		if(var10 != null) {
-			var10.doRender(var1, var2, var4, var6, var8, var9);
-			var10.doRenderShadowAndFire(var1, var2, var4, var6, var8, var9);
-		}
-
-	}
-
-	public void set(World var1) {
-		this.worldObj = var1;
-	}
-
-	public double getDistanceToCamera(double var1, double var3, double var5) {
-		double var7 = var1 - this.viewerPosX;
-		double var9 = var3 - this.viewerPosY;
-		double var11 = var5 - this.viewerPosZ;
-		return var7 * var7 + var9 * var9 + var11 * var11;
+		this.entityRenderMap.put(EntityShadowPlayer.class, new RenderPlayer());
+		this.entityRenderMap.put(EntityGiantBoss.class, new RenderGiantBoss(new ModelZombie(), 0.5F, 6.0F));
+		this.entityRenderMap.put(EntityAmoung.class, new RenderLiving(new ModelAmoung(), 0.5F));
+		this.entityRenderMap.put(EntityObserver.class, new RenderLiving(new ModelBlockBenchImport(observer.createBodyLayer()), 0.5F));
+		this.entityRenderMap.put(EntityCatbomb.class, new RenderLiving(new ModelBlockBenchImport(ModelCatBomb.createBodyLayer()), 0.5F));
+		this.entityRenderMap.put(EntitySquib.class, new RenderLiving(new ModelSquip(), 0.5F));
+		this.entityRenderMap.put(EntityPongormatron.class, new RenderLiving(new ModelBlockBenchImport(pongokilldeathshitmachine.createBodyLayer(), 128, 128), 0.5F));
+		this.entityRenderMap.put(EntitySpear.class, new RenderArrow(false));
+		ModLoader.AddAllRenderers(this.entityRenderMap);
+		Iterator iterator1 = this.entityRenderMap.values().iterator();
+
+		while(iterator1.hasNext()) {
+			Render render2 = (Render)iterator1.next();
+			render2.setRenderManager(this);
+		}
+
+	}
+
+	public Render getEntityClassRenderObject(Class entityClass) {
+		Render render2 = (Render)this.entityRenderMap.get(entityClass);
+		if(render2 == null && entityClass != Entity.class) {
+			render2 = this.getEntityClassRenderObject(entityClass.getSuperclass());
+			this.entityRenderMap.put(entityClass, render2);
+		}
+
+		return render2;
+	}
+
+	public Render getEntityRenderObject(Entity entity) {
+		return this.getEntityClassRenderObject(entity.getClass());
+	}
+
+	public void cacheActiveRenderInfo(World world, RenderEngine renderEngine, FontRenderer fontRenderer, EntityPlayer entityPlayer, GameSettings gameSettings, float renderPartialTick) {
+		this.worldObj = world;
+		this.renderEngine = renderEngine;
+		this.options = gameSettings;
+		this.player = entityPlayer;
+		this.fontRenderer = fontRenderer;
+		this.playerViewY = entityPlayer.prevRotationYaw + (entityPlayer.rotationYaw - entityPlayer.prevRotationYaw) * renderPartialTick;
+		this.playerViewX = entityPlayer.prevRotationPitch + (entityPlayer.rotationPitch - entityPlayer.prevRotationPitch) * renderPartialTick;
+		this.viewerPosX = entityPlayer.lastTickPosX + (entityPlayer.posX - entityPlayer.lastTickPosX) * (double)renderPartialTick;
+		this.viewerPosY = entityPlayer.lastTickPosY + (entityPlayer.posY - entityPlayer.lastTickPosY) * (double)renderPartialTick;
+		this.viewerPosZ = entityPlayer.lastTickPosZ + (entityPlayer.posZ - entityPlayer.lastTickPosZ) * (double)renderPartialTick;
+		if(!ModLoader.texturesOverridden) {
+			ModLoader.RegisterAllTextureOverrides(renderEngine);
+		}
+
+	}
+
+	public void renderEntity(Entity entity, float renderPartialTick) {
+		double d3 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)renderPartialTick;
+		double d5 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)renderPartialTick;
+		double d7 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)renderPartialTick;
+		float f9 = entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * renderPartialTick;
+		float f10 = entity.getBrightness(renderPartialTick);
+		GL11.glColor3f(f10, f10, f10);
+		this.renderEntityWithPosYaw(entity, d3 - renderPosX, d5 - renderPosY, d7 - renderPosZ, f9, renderPartialTick);
+	}
+
+	public void renderEntityWithPosYaw(Entity entity, double x, double y, double z, float yaw, float pitch) {
+		Render render10 = this.getEntityRenderObject(entity);
+		if(render10 != null) {
+			render10.doRender(entity, x, y, z, yaw, pitch);
+			render10.doRenderShadowAndFire(entity, x, y, z, yaw, pitch);
+		}
+
+	}
+
+	public void set(World world) {
+		this.worldObj = world;
+	}
+
+	public double getDistanceToCamera(double x, double y, double z) {
+		double d7 = x - this.viewerPosX;
+		double d9 = y - this.viewerPosY;
+		double d11 = z - this.viewerPosZ;
+		return d7 * d7 + d9 * d9 + d11 * d11;
 	}
 
 	public FontRenderer getFontRenderer() {
--- /dev/null
+++ net/minecraft/src/HubFragment1.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+public class HubFragment1 extends HubWorldUnknownClass2 {
+	public HubFragment1(HubWorld wv, int integer2, int integer3, int integer4) {
+		super(wv, integer2, integer3, integer4);
+	}
+
+	public void func_9822_96pkMbVA643Z1Y78zU1zOHbm0WbR47PCGp9q1ZyTK64G0pr0ViUREK2TCos1() {
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 0, 5, 16, 0, 10, ExtBlocks.dimensionFloorBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 4, 5, 16, 4, 10, ExtBlocks.dimensionFloorBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 1, 5, 16, 3, 10, ExtBlocks.dimensionWallBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 1, 6, 16, 3, 9, 0);
+		this.func_9823_0ir18WW2Er00vPEwk4ysWYEf3jBf0oDxYSVBcO27LQ7O9UiZXGtduk6tgrab(3, 3, 1, (short)Block.torch.blockID);
+		this.func_9823_0ir18WW2Er00vPEwk4ysWYEf3jBf0oDxYSVBcO27LQ7O9UiZXGtduk6tgrab(1, 3, 3, (short)Block.torch.blockID);
+	}
+}
--- net/minecraft/src/ScaledResolution.java
+++ net/minecraft/src/ScaledResolution.java
@@ -5,9 +5,9 @@
 	private int scaledHeight;
 	public int scaleFactor;
 
-	public ScaledResolution(int var1, int var2) {
-		this.scaledWidth = var1;
-		this.scaledHeight = var2;
+	public ScaledResolution(int integer1, int integer2) {
+		this.scaledWidth = integer1;
+		this.scaledHeight = integer2;
 
 		for(this.scaleFactor = 1; this.scaledWidth / (this.scaleFactor + 1) >= 320 && this.scaledHeight / (this.scaleFactor + 1) >= 240; ++this.scaleFactor) {
 		}
--- net/minecraft/src/UnexpectedThrowable.java
+++ net/minecraft/src/UnexpectedThrowable.java
@@ -4,8 +4,8 @@
 	public final String description;
 	public final Throwable exception;
 
-	public UnexpectedThrowable(String var1, Throwable var2) {
-		this.description = var1;
-		this.exception = var2;
+	public UnexpectedThrowable(String desc, Throwable throwable) {
+		this.description = desc;
+		this.exception = throwable;
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandMason.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+class CommandMason extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8569_1n3lPY3k9uS32LFtTbHJ7s8NjTN6034sKm8FXCVEbr9d1a50MvX0Sqlt0s2p;
+    
+    CommandMason(final CommandManager abb) {
+        this.field_8569_1n3lPY3k9uS32LFtTbHJ7s8NjTN6034sKm8FXCVEbr9d1a50MvX0Sqlt0s2p = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        throw new RuntimeException("Unable to find numeric definition.");
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+    
+    @Override
+    public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+        return false;
+    }
+}
--- net/minecraft/src/CanvasIsomPreview.java
+++ net/minecraft/src/CanvasIsomPreview.java
@@ -25,7 +25,7 @@
 	private boolean displayHelpText = true;
 	private World level;
 	private File dataFolder = this.getWorkingDirectory();
-	private boolean running = true;
+	public boolean running = true;
 	private List zonesToRender = Collections.synchronizedList(new LinkedList());
 	private IsoImageBuffer[][] zoneMap = new IsoImageBuffer[64][64];
 	private int translateX;
@@ -35,51 +35,51 @@
 
 	public File getWorkingDirectory() {
 		if(this.dataFolder == null) {
-			this.dataFolder = this.getWorkingDirectory("minecraft");
+			this.dataFolder = this.getWorkingDirectory(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9792_1YNrQ38ivM5fhyTo9PH5S33r6S87fqg85pTp0c4YlXfUniwhAwgeD8hZT3Cd));
 		}
 
 		return this.dataFolder;
 	}
 
-	public File getWorkingDirectory(String var1) {
-		String var2 = System.getProperty("user.home", ".");
-		File var3;
+	public File getWorkingDirectory(String name) {
+		String string2 = System.getProperty(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9794_1Mq8T0QNr27egvw7Ii5njC2U34iHqD9xm0XHd85K26sr2HmLXKQgJ5Uz42hp), ".");
+		File file3;
 		switch(OSMapIsom.osValues[getPlatform().ordinal()]) {
 		case 1:
 		case 2:
-			var3 = new File(var2, '.' + var1 + '/');
+			file3 = new File(string2, '.' + name + '/');
 			break;
 		case 3:
-			String var4 = System.getenv("APPDATA");
-			if(var4 != null) {
-				var3 = new File(var4, "." + var1 + '/');
+			String string4 = System.getenv("APPDATA");
+			if(string4 != null) {
+				file3 = new File(string4, "." + name + '/');
 			} else {
-				var3 = new File(var2, '.' + var1 + '/');
+				file3 = new File(string2, '.' + name + '/');
 			}
 			break;
 		case 4:
-			var3 = new File(var2, "Library/Application Support/" + var1);
+			file3 = new File(string2, "Library/Application Support/" + name);
 			break;
 		default:
-			var3 = new File(var2, var1 + '/');
+			file3 = new File(string2, name + '/');
 		}
 
-		if(!var3.exists() && !var3.mkdirs()) {
-			throw new RuntimeException("The working directory could not be created: " + var3);
+		if(!file3.exists() && !file3.mkdirs()) {
+			throw new RuntimeException("The working directory could not be created: " + file3);
 		} else {
-			return var3;
+			return file3;
 		}
 	}
 
 	private static EnumOSIsom getPlatform() {
-		String var0 = System.getProperty("os.name").toLowerCase();
-		return var0.contains("win") ? EnumOSIsom.windows : (var0.contains("mac") ? EnumOSIsom.macos : (var0.contains("solaris") ? EnumOSIsom.solaris : (var0.contains("sunos") ? EnumOSIsom.solaris : (var0.contains("linux") ? EnumOSIsom.linux : (var0.contains("unix") ? EnumOSIsom.linux : EnumOSIsom.unknown)))));
+		String string0 = System.getProperty("os.name").toLowerCase();
+		return string0.contains("win") ? EnumOSIsom.windows : (string0.contains("mac") ? EnumOSIsom.macos : (string0.contains("solaris") ? EnumOSIsom.solaris : (string0.contains("sunos") ? EnumOSIsom.solaris : (string0.contains("linux") ? EnumOSIsom.linux : (string0.contains("unix") ? EnumOSIsom.linux : EnumOSIsom.unknown)))));
 	}
 
 	public CanvasIsomPreview() {
-		for(int var1 = 0; var1 < 64; ++var1) {
-			for(int var2 = 0; var2 < 64; ++var2) {
-				this.zoneMap[var1][var2] = new IsoImageBuffer((World)null, var1, var2);
+		for(int i1 = 0; i1 < 64; ++i1) {
+			for(int i2 = 0; i2 < 64; ++i2) {
+				this.zoneMap[i1][i2] = new IsoImageBuffer((World)null, i1, i2);
 			}
 		}
 
@@ -91,32 +91,32 @@
 		this.setBackground(Color.red);
 	}
 
-	public void loadLevel(String var1) {
+	public void loadLevel(String levelName) {
 		this.translateX = this.translateY = 0;
-		this.level = new WorldIso(this, new File(this.dataFolder, "saves"), var1);
+		this.level = new WorldIso(this, new File(this.dataFolder, "saves"), levelName);
 		this.level.skylightSubtracted = 0;
-		List var2 = this.zonesToRender;
-		synchronized(var2) {
+		List list2 = this.zonesToRender;
+		synchronized(this.zonesToRender) {
 			this.zonesToRender.clear();
 
-			for(int var3 = 0; var3 < 64; ++var3) {
-				for(int var4 = 0; var4 < 64; ++var4) {
-					this.zoneMap[var3][var4].setLevel(this.level, var3, var4);
+			for(int i3 = 0; i3 < 64; ++i3) {
+				for(int i4 = 0; i4 < 64; ++i4) {
+					this.zoneMap[i3][i4].setLevel(this.level, i3, i4);
 				}
 			}
 
 		}
 	}
 
-	private void setBrightness(int var1) {
-		List var2 = this.zonesToRender;
-		synchronized(var2) {
-			this.level.skylightSubtracted = var1;
+	private void setBrightness(int brightness) {
+		List list2 = this.zonesToRender;
+		synchronized(this.zonesToRender) {
+			this.level.skylightSubtracted = brightness;
 			this.zonesToRender.clear();
 
-			for(int var3 = 0; var3 < 64; ++var3) {
-				for(int var4 = 0; var4 < 64; ++var4) {
-					this.zoneMap[var3][var4].setLevel(this.level, var3, var4);
+			for(int i3 = 0; i3 < 64; ++i3) {
+				for(int i4 = 0; i4 < 64; ++i4) {
+					this.zoneMap[i3][i4].setLevel(this.level, i3, i4);
 				}
 			}
 
@@ -126,7 +126,7 @@
 	public void start() {
 		(new ThreadRunIsoClient(this)).start();
 
-		for(int var1 = 0; var1 < 8; ++var1) {
+		for(int i1 = 0; i1 < 8; ++i1) {
 			(new Thread(this)).start();
 		}
 
@@ -136,243 +136,244 @@
 		this.running = false;
 	}
 
-	private IsoImageBuffer getZone(int var1, int var2) {
-		int var3 = var1 & 63;
-		int var4 = var2 & 63;
-		IsoImageBuffer var5 = this.zoneMap[var3][var4];
-		if(var5.x == var1 && var5.y == var2) {
-			return var5;
+	private IsoImageBuffer getZone(int x, int z) {
+		int i3 = x & 63;
+		int i4 = z & 63;
+		IsoImageBuffer isoImageBuffer5 = this.zoneMap[i3][i4];
+		if(isoImageBuffer5.x == x && isoImageBuffer5.y == z) {
+			return isoImageBuffer5;
 		} else {
-			List var6 = this.zonesToRender;
-			synchronized(var6) {
-				this.zonesToRender.remove(var5);
+			List list6 = this.zonesToRender;
+			synchronized(this.zonesToRender) {
+				this.zonesToRender.remove(isoImageBuffer5);
 			}
 
-			var5.init(var1, var2);
-			return var5;
+			isoImageBuffer5.init(x, z);
+			return isoImageBuffer5;
 		}
 	}
 
 	public void run() {
-		TerrainTextureManager var1 = new TerrainTextureManager();
+		TerrainTextureManager terrainTextureManager1 = new TerrainTextureManager();
 
 		while(this.running) {
-			IsoImageBuffer var2 = null;
-			List var3 = this.zonesToRender;
-			synchronized(var3) {
+			IsoImageBuffer isoImageBuffer2 = null;
+			List list3 = this.zonesToRender;
+			synchronized(this.zonesToRender) {
 				if(this.zonesToRender.size() > 0) {
-					var2 = (IsoImageBuffer)this.zonesToRender.remove(0);
+					isoImageBuffer2 = (IsoImageBuffer)this.zonesToRender.remove(0);
 				}
 			}
 
-			if(var2 != null) {
-				if(this.currentRender - var2.lastVisible < 2) {
-					var1.render(var2);
+			if(isoImageBuffer2 != null) {
+				if(this.currentRender - isoImageBuffer2.lastVisible < 2) {
+					terrainTextureManager1.render(isoImageBuffer2);
 					this.repaint();
 				} else {
-					var2.addedToRenderQueue = false;
+					isoImageBuffer2.addedToRenderQueue = false;
 				}
 			}
 
 			try {
 				Thread.sleep(2L);
-			} catch (InterruptedException var5) {
-				var5.printStackTrace();
+			} catch (InterruptedException interruptedException5) {
+				interruptedException5.printStackTrace();
 			}
 		}
 
 	}
 
-	public void update(Graphics var1) {
+	public void update(Graphics graphics) {
 	}
 
-	public void paint(Graphics var1) {
+	public void paint(Graphics graphics) {
 	}
 
 	public void render() {
-		BufferStrategy var1 = this.getBufferStrategy();
-		if(var1 == null) {
+		BufferStrategy bufferStrategy1 = this.getBufferStrategy();
+		if(bufferStrategy1 == null) {
 			this.createBufferStrategy(2);
 		} else {
-			this.render((Graphics2D)var1.getDrawGraphics());
-			var1.show();
+			this.render((Graphics2D)bufferStrategy1.getDrawGraphics());
+			bufferStrategy1.show();
 		}
+
 	}
 
-	public void render(Graphics2D var1) {
+	public void render(Graphics2D graphics2D) {
 		++this.currentRender;
-		AffineTransform var2 = var1.getTransform();
-		var1.setClip(0, 0, this.getWidth(), this.getHeight());
-		var1.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
-		var1.translate(this.getWidth() / 2, this.getHeight() / 2);
-		var1.scale((double)this.zoomLevel, (double)this.zoomLevel);
-		var1.translate(this.translateX, this.translateY);
+		AffineTransform affineTransform2 = graphics2D.getTransform();
+		graphics2D.setClip(0, 0, this.getWidth(), this.getHeight());
+		graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
+		graphics2D.translate(this.getWidth() / 2, this.getHeight() / 2);
+		graphics2D.scale((double)this.zoomLevel, (double)this.zoomLevel);
+		graphics2D.translate(this.translateX, this.translateY);
 		if(this.level != null) {
-			var1.translate(-(this.level.spawnX + this.level.spawnZ), -(-this.level.spawnX + this.level.spawnZ) + 64);
+			graphics2D.translate(-(this.level.spawnX + this.level.spawnZ), -(-this.level.spawnX + this.level.spawnZ) + 64);
 		}
 
-		Rectangle var3 = var1.getClipBounds();
-		var1.setColor(new Color(-15724512));
-		var1.fillRect(var3.x, var3.y, var3.width, var3.height);
-		byte var4 = 16;
-		byte var5 = 3;
-		int var6 = var3.x / var4 / 2 - 2 - var5;
-		int var7 = (var3.x + var3.width) / var4 / 2 + 1 + var5;
-		int var8 = var3.y / var4 - 1 - var5 * 2;
-		int var9 = (var3.y + var3.height + 16 + 128) / var4 + 1 + var5 * 2;
+		Rectangle rectangle3 = graphics2D.getClipBounds();
+		graphics2D.setColor(new Color(-15724512));
+		graphics2D.fillRect(rectangle3.x, rectangle3.y, rectangle3.width, rectangle3.height);
+		byte b4 = 16;
+		byte b5 = 3;
+		int i6 = rectangle3.x / b4 / 2 - 2 - b5;
+		int i7 = (rectangle3.x + rectangle3.width) / b4 / 2 + 1 + b5;
+		int i8 = rectangle3.y / b4 - 1 - b5 * 2;
+		int i9 = (rectangle3.y + rectangle3.height + 16 + 128) / b4 + 1 + b5 * 2;
 
-		int var10;
-		for(var10 = var8; var10 <= var9; ++var10) {
-			for(int var11 = var6; var11 <= var7; ++var11) {
-				int var12 = var11 - (var10 >> 1);
-				int var13 = var11 + (var10 + 1 >> 1);
-				IsoImageBuffer var14 = this.getZone(var12, var13);
-				var14.lastVisible = this.currentRender;
-				if(!var14.rendered) {
-					if(!var14.addedToRenderQueue) {
-						var14.addedToRenderQueue = true;
-						this.zonesToRender.add(var14);
+		int i10;
+		for(i10 = i8; i10 <= i9; ++i10) {
+			for(int i11 = i6; i11 <= i7; ++i11) {
+				int i12 = i11 - (i10 >> 1);
+				int i13 = i11 + (i10 + 1 >> 1);
+				IsoImageBuffer isoImageBuffer14 = this.getZone(i12, i13);
+				isoImageBuffer14.lastVisible = this.currentRender;
+				if(!isoImageBuffer14.rendered) {
+					if(!isoImageBuffer14.addedToRenderQueue) {
+						isoImageBuffer14.addedToRenderQueue = true;
+						this.zonesToRender.add(isoImageBuffer14);
 					}
 				} else {
-					var14.addedToRenderQueue = false;
-					if(!var14.noContent) {
-						int var15 = var11 * var4 * 2 + (var10 & 1) * var4;
-						int var16 = var10 * var4 - 128 - 16;
-						var1.drawImage(var14.image, var15, var16, (ImageObserver)null);
+					isoImageBuffer14.addedToRenderQueue = false;
+					if(!isoImageBuffer14.noContent) {
+						int i15 = i11 * b4 * 2 + (i10 & 1) * b4;
+						int i16 = i10 * b4 - 128 - 16;
+						graphics2D.drawImage(isoImageBuffer14.image, i15, i16, (ImageObserver)null);
 					}
 				}
 			}
 		}
 
 		if(this.displayHelpText) {
-			var1.setTransform(var2);
-			var10 = this.getHeight() - 32 - 4;
-			var1.setColor(new Color(Integer.MIN_VALUE, true));
-			var1.fillRect(4, this.getHeight() - 32 - 4, this.getWidth() - 8, 32);
-			var1.setColor(Color.WHITE);
-			String var17 = "F1 - F5: load levels   |   0-9: Set time of day   |   Space: return to spawn   |   Double click: zoom   |   Escape: hide this text";
-			var1.drawString(var17, this.getWidth() / 2 - var1.getFontMetrics().stringWidth(var17) / 2, var10 + 20);
+			graphics2D.setTransform(affineTransform2);
+			i10 = this.getHeight() - 32 - 4;
+			graphics2D.setColor(new Color(Integer.MIN_VALUE, true));
+			graphics2D.fillRect(4, this.getHeight() - 32 - 4, this.getWidth() - 8, 32);
+			graphics2D.setColor(Color.WHITE);
+			String string17 = "F1 - F5: load levels   |   0-9: Set time of day   |   Space: return to spawn   |   Double click: zoom   |   Escape: hide this text";
+			graphics2D.drawString(string17, this.getWidth() / 2 - graphics2D.getFontMetrics().stringWidth(string17) / 2, i10 + 20);
 		}
 
-		var1.dispose();
+		graphics2D.dispose();
 	}
 
-	public void mouseDragged(MouseEvent var1) {
-		int var2 = var1.getX() / this.zoomLevel;
-		int var3 = var1.getY() / this.zoomLevel;
-		this.translateX += var2 - this.xPosition;
-		this.translateY += var3 - this.yPosition;
-		this.xPosition = var2;
-		this.yPosition = var3;
+	public void mouseDragged(MouseEvent mouseEvent) {
+		int i2 = mouseEvent.getX() / this.zoomLevel;
+		int i3 = mouseEvent.getY() / this.zoomLevel;
+		this.translateX += i2 - this.xPosition;
+		this.translateY += i3 - this.yPosition;
+		this.xPosition = i2;
+		this.yPosition = i3;
 		this.repaint();
 	}
 
-	public void mouseMoved(MouseEvent var1) {
+	public void mouseMoved(MouseEvent mouseEvent) {
 	}
 
-	public void mouseClicked(MouseEvent var1) {
-		if(var1.getClickCount() == 2) {
+	public void mouseClicked(MouseEvent mouseEvent) {
+		if(mouseEvent.getClickCount() == 2) {
 			this.zoomLevel = 3 - this.zoomLevel;
 			this.repaint();
 		}
 
 	}
 
-	public void mouseEntered(MouseEvent var1) {
-	}
-
-	public void mouseExited(MouseEvent var1) {
-	}
-
-	public void mousePressed(MouseEvent var1) {
-		int var2 = var1.getX() / this.zoomLevel;
-		int var3 = var1.getY() / this.zoomLevel;
-		this.xPosition = var2;
-		this.yPosition = var3;
-	}
-
-	public void mouseReleased(MouseEvent var1) {
-	}
-
-	public void keyPressed(KeyEvent var1) {
-		if(var1.getKeyCode() == 48) {
+	public void mouseEntered(MouseEvent mouseEvent) {
+	}
+
+	public void mouseExited(MouseEvent mouseEvent) {
+	}
+
+	public void mousePressed(MouseEvent mouseEvent) {
+		int i2 = mouseEvent.getX() / this.zoomLevel;
+		int i3 = mouseEvent.getY() / this.zoomLevel;
+		this.xPosition = i2;
+		this.yPosition = i3;
+	}
+
+	public void mouseReleased(MouseEvent mouseEvent) {
+	}
+
+	public void keyPressed(KeyEvent keyEvent) {
+		if(keyEvent.getKeyCode() == 48) {
 			this.setBrightness(11);
 		}
 
-		if(var1.getKeyCode() == 49) {
+		if(keyEvent.getKeyCode() == 49) {
 			this.setBrightness(10);
 		}
 
-		if(var1.getKeyCode() == 50) {
+		if(keyEvent.getKeyCode() == 50) {
 			this.setBrightness(9);
 		}
 
-		if(var1.getKeyCode() == 51) {
+		if(keyEvent.getKeyCode() == 51) {
 			this.setBrightness(7);
 		}
 
-		if(var1.getKeyCode() == 52) {
+		if(keyEvent.getKeyCode() == 52) {
 			this.setBrightness(6);
 		}
 
-		if(var1.getKeyCode() == 53) {
+		if(keyEvent.getKeyCode() == 53) {
 			this.setBrightness(5);
 		}
 
-		if(var1.getKeyCode() == 54) {
+		if(keyEvent.getKeyCode() == 54) {
 			this.setBrightness(3);
 		}
 
-		if(var1.getKeyCode() == 55) {
+		if(keyEvent.getKeyCode() == 55) {
 			this.setBrightness(2);
 		}
 
-		if(var1.getKeyCode() == 56) {
+		if(keyEvent.getKeyCode() == 56) {
 			this.setBrightness(1);
 		}
 
-		if(var1.getKeyCode() == 57) {
+		if(keyEvent.getKeyCode() == 57) {
 			this.setBrightness(0);
 		}
 
-		if(var1.getKeyCode() == 112) {
+		if(keyEvent.getKeyCode() == 112) {
 			this.loadLevel("World1");
 		}
 
-		if(var1.getKeyCode() == 113) {
+		if(keyEvent.getKeyCode() == 113) {
 			this.loadLevel("World2");
 		}
 
-		if(var1.getKeyCode() == 114) {
+		if(keyEvent.getKeyCode() == 114) {
 			this.loadLevel("World3");
 		}
 
-		if(var1.getKeyCode() == 115) {
+		if(keyEvent.getKeyCode() == 115) {
 			this.loadLevel("World4");
 		}
 
-		if(var1.getKeyCode() == 116) {
+		if(keyEvent.getKeyCode() == 116) {
 			this.loadLevel("World5");
 		}
 
-		if(var1.getKeyCode() == 32) {
+		if(keyEvent.getKeyCode() == 32) {
 			this.translateX = this.translateY = 0;
 		}
 
-		if(var1.getKeyCode() == 27) {
+		if(keyEvent.getKeyCode() == 27) {
 			this.displayHelpText = !this.displayHelpText;
 		}
 
 		this.repaint();
 	}
 
-	public void keyReleased(KeyEvent var1) {
-	}
-
-	public void keyTyped(KeyEvent var1) {
-	}
-
-	static boolean isRunning(CanvasIsomPreview var0) {
-		return var0.running;
+	public void keyReleased(KeyEvent keyEvent) {
+	}
+
+	public void keyTyped(KeyEvent keyEvent) {
+	}
+
+	static boolean isRunning(CanvasIsomPreview canvasIsomPreview) {
+		return canvasIsomPreview.running;
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandPerfclass.java
@@ -1,0 +1,26 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+class CommandPerfclass extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8582_784J0u23Raeq18XvA5SN8FN2ZH0JK83Uc8ZiupIVRZeO2Bm4RzP1D1Xgwf6W;
+    
+    CommandPerfclass(final CommandManager abb) {
+        this.field_8582_784J0u23Raeq18XvA5SN8FN2ZH0JK83Uc8ZiupIVRZeO2Bm4RzP1D1Xgwf6W = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        Minecraft.field_7277_2ap75bw7uWpJs9xa2VRa8p40l51ptv8B02tkt5OcOFM8BeYBB08G54gDjTCY = (int)arr[0];
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return Minecraft.field_7277_2ap75bw7uWpJs9xa2VRa8p40l51ptv8B02tkt5OcOFM8BeYBB08G54gDjTCY + "";
+    }
+    
+    @Override
+    public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+        return false;
+    }
+}
--- net/minecraft/src/Packet10Flying.java
+++ net/minecraft/src/Packet10Flying.java
@@ -18,20 +18,20 @@
 	public Packet10Flying() {
 	}
 
-	public Packet10Flying(boolean var1) {
-		this.onGround = var1;
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleFlying(this);
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.onGround = var1.read() != 0;
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.write(this.onGround ? 1 : 0);
+	public Packet10Flying(boolean onGround) {
+		this.onGround = onGround;
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleFlying(this);
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.onGround = dataInputStream.read() != 0;
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.write(this.onGround ? 1 : 0);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/MinecraftImpl.java
+++ net/minecraft/src/MinecraftImpl.java
@@ -3,20 +3,22 @@
 import java.awt.Canvas;
 import java.awt.Component;
 import java.awt.Frame;
+
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.MinecraftApplet;
 
 public final class MinecraftImpl extends Minecraft {
 	final Frame mcFrame;
 
-	public MinecraftImpl(Component var1, Canvas var2, MinecraftApplet var3, int var4, int var5, boolean var6, Frame var7) {
-		super(var1, var2, var3, var4, var5, var6);
-		this.mcFrame = var7;
+	public MinecraftImpl(Component component, Canvas canvas, MinecraftApplet mcApplet, int width, int height, boolean fullscreen, Frame frame) {
+		super(component, canvas, mcApplet, width, height, fullscreen);
+		this.mcFrame = frame;
+		field_7317_5Dn33cKLDp4ugCwpD8dAC0Qb0gK4WT4AEqJf0YUJc3Hq6EO32BfTsK678CKb = this;
 	}
 
-	public void displayUnexpectedThrowable(UnexpectedThrowable var1) {
+	public void displayUnexpectedThrowable(UnexpectedThrowable unexpectedThrowable) {
 		this.mcFrame.removeAll();
-		this.mcFrame.add(new PanelCrashReport(var1), "Center");
+		this.mcFrame.add(new PanelCrashReport(unexpectedThrowable), "Center");
 		this.mcFrame.validate();
 	}
 }
--- net/minecraft/src/BlockTorch.java
+++ net/minecraft/src/BlockTorch.java
@@ -3,12 +3,12 @@
 import java.util.Random;
 
 public class BlockTorch extends Block {
-	protected BlockTorch(int var1, int var2) {
-		super(var1, var2, Material.circuits);
+	protected BlockTorch(int id, int blockIndex) {
+		super(id, blockIndex, Material.circuits);
 		this.setTickOnLoad(true);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -24,142 +24,142 @@
 		return 2;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2 - 1, var3, var4) ? true : (var1.isBlockNormalCube(var2 + 1, var3, var4) ? true : (var1.isBlockNormalCube(var2, var3, var4 - 1) ? true : (var1.isBlockNormalCube(var2, var3, var4 + 1) ? true : var1.isBlockNormalCube(var2, var3 - 1, var4))));
-	}
-
-	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if(var5 == 1 && var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var6 = 5;
-		}
-
-		if(var5 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var6 = 4;
-		}
-
-		if(var5 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var6 = 3;
-		}
-
-		if(var5 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var6 = 2;
-		}
-
-		if(var5 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var6 = 1;
-		}
-
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		super.updateTick(var1, var2, var3, var4, var5);
-		if(var1.getBlockMetadata(var2, var3, var4) == 0) {
-			this.onBlockAdded(var1, var2, var3, var4);
-		}
-
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-		} else if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 2);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 3);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 4);
-		} else if(var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 5);
-		}
-
-		this.checkIfAttachedToBlock(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(this.checkIfAttachedToBlock(var1, var2, var3, var4)) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			boolean var7 = false;
-			if(!var1.isBlockNormalCube(var2 - 1, var3, var4) && var6 == 1) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2 + 1, var3, var4) && var6 == 2) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 - 1) && var6 == 3) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 + 1) && var6 == 4) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && var6 == 5) {
-				var7 = true;
-			}
-
-			if(var7) {
-				this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-				var1.setBlockWithNotify(var2, var3, var4, 0);
-			}
-		}
-
-	}
-
-	private boolean checkIfAttachedToBlock(World var1, int var2, int var3, int var4) {
-		if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x - 1, y, z) ? true : (world.isBlockNormalCube(x + 1, y, z) ? true : (world.isBlockNormalCube(x, y, z - 1) ? true : (world.isBlockNormalCube(x, y, z + 1) ? true : world.isBlockNormalCube(x, y - 1, z))));
+	}
+
+	public void onBlockPlaced(World world, int x, int y, int z, int notifyFlag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if(notifyFlag == 1 && world.isBlockNormalCube(x, y - 1, z)) {
+			i6 = 5;
+		}
+
+		if(notifyFlag == 2 && world.isBlockNormalCube(x, y, z + 1)) {
+			i6 = 4;
+		}
+
+		if(notifyFlag == 3 && world.isBlockNormalCube(x, y, z - 1)) {
+			i6 = 3;
+		}
+
+		if(notifyFlag == 4 && world.isBlockNormalCube(x + 1, y, z)) {
+			i6 = 2;
+		}
+
+		if(notifyFlag == 5 && world.isBlockNormalCube(x - 1, y, z)) {
+			i6 = 1;
+		}
+
+		world.setBlockMetadataWithNotify(x, y, z, i6);
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		super.updateTick(world, x, y, z, random);
+		if(world.getBlockMetadata(x, y, z) == 0) {
+			this.onBlockAdded(world, x, y, z);
+		}
+
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		if(world.isBlockNormalCube(x - 1, y, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 1);
+		} else if(world.isBlockNormalCube(x + 1, y, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 2);
+		} else if(world.isBlockNormalCube(x, y, z - 1)) {
+			world.setBlockMetadataWithNotify(x, y, z, 3);
+		} else if(world.isBlockNormalCube(x, y, z + 1)) {
+			world.setBlockMetadataWithNotify(x, y, z, 4);
+		} else if(world.isBlockNormalCube(x, y - 1, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 5);
+		}
+
+		this.checkIfAttachedToBlock(world, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(this.checkIfAttachedToBlock(world, x, y, z)) {
+			int i6 = world.getBlockMetadata(x, y, z);
+			boolean z7 = false;
+			if(!world.isBlockNormalCube(x - 1, y, z) && i6 == 1) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x + 1, y, z) && i6 == 2) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z - 1) && i6 == 3) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z + 1) && i6 == 4) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y - 1, z) && i6 == 5) {
+				z7 = true;
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+				world.setBlockWithNotify(x, y, z, 0);
+			}
+		}
+
+	}
+
+	private boolean checkIfAttachedToBlock(World world, int x, int y, int z) {
+		if(!this.canPlaceBlockAt(world, x, y, z)) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
 			return false;
 		} else {
 			return true;
 		}
 	}
 
-	public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3D var5, Vec3D var6) {
-		int var7 = var1.getBlockMetadata(var2, var3, var4) & 7;
-		float var8 = 0.15F;
-		if(var7 == 1) {
-			this.setBlockBounds(0.0F, 0.2F, 0.5F - var8, var8 * 2.0F, 0.8F, 0.5F + var8);
-		} else if(var7 == 2) {
-			this.setBlockBounds(1.0F - var8 * 2.0F, 0.2F, 0.5F - var8, 1.0F, 0.8F, 0.5F + var8);
-		} else if(var7 == 3) {
-			this.setBlockBounds(0.5F - var8, 0.2F, 0.0F, 0.5F + var8, 0.8F, var8 * 2.0F);
-		} else if(var7 == 4) {
-			this.setBlockBounds(0.5F - var8, 0.2F, 1.0F - var8 * 2.0F, 0.5F + var8, 0.8F, 1.0F);
+	public MovingObjectPosition collisionRayTrace(World world, int x, int y, int z, Vec3D vector1, Vec3D vector2) {
+		int i7 = world.getBlockMetadata(x, y, z) & 7;
+		float f8 = 0.15F;
+		if(i7 == 1) {
+			this.setBlockBounds(0.0F, 0.2F, 0.5F - f8, f8 * 2.0F, 0.8F, 0.5F + f8);
+		} else if(i7 == 2) {
+			this.setBlockBounds(1.0F - f8 * 2.0F, 0.2F, 0.5F - f8, 1.0F, 0.8F, 0.5F + f8);
+		} else if(i7 == 3) {
+			this.setBlockBounds(0.5F - f8, 0.2F, 0.0F, 0.5F + f8, 0.8F, f8 * 2.0F);
+		} else if(i7 == 4) {
+			this.setBlockBounds(0.5F - f8, 0.2F, 1.0F - f8 * 2.0F, 0.5F + f8, 0.8F, 1.0F);
 		} else {
-			var8 = 0.1F;
-			this.setBlockBounds(0.5F - var8, 0.0F, 0.5F - var8, 0.5F + var8, 0.6F, 0.5F + var8);
+			f8 = 0.1F;
+			this.setBlockBounds(0.5F - f8, 0.0F, 0.5F - f8, 0.5F + f8, 0.6F, 0.5F + f8);
 		}
 
-		return super.collisionRayTrace(var1, var2, var3, var4, var5, var6);
+		return super.collisionRayTrace(world, x, y, z, vector1, vector2);
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		double var7 = (double)((float)var2 + 0.5F);
-		double var9 = (double)((float)var3 + 0.7F);
-		double var11 = (double)((float)var4 + 0.5F);
-		double var13 = (double)0.22F;
-		double var15 = (double)0.27F;
-		if(var6 == 1) {
-			var1.spawnParticle("smoke", var7 - var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
-			var1.spawnParticle("flame", var7 - var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
-		} else if(var6 == 2) {
-			var1.spawnParticle("smoke", var7 + var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
-			var1.spawnParticle("flame", var7 + var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
-		} else if(var6 == 3) {
-			var1.spawnParticle("smoke", var7, var9 + var13, var11 - var15, 0.0D, 0.0D, 0.0D);
-			var1.spawnParticle("flame", var7, var9 + var13, var11 - var15, 0.0D, 0.0D, 0.0D);
-		} else if(var6 == 4) {
-			var1.spawnParticle("smoke", var7, var9 + var13, var11 + var15, 0.0D, 0.0D, 0.0D);
-			var1.spawnParticle("flame", var7, var9 + var13, var11 + var15, 0.0D, 0.0D, 0.0D);
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+		int i6 = worldObj.getBlockMetadata(x, y, z);
+		double d7 = (double)((float)x + 0.5F);
+		double d9 = (double)((float)y + 0.7F);
+		double d11 = (double)((float)z + 0.5F);
+		double d13 = (double)0.22F;
+		double d15 = (double)0.27F;
+		if(i6 == 1) {
+			worldObj.spawnParticle("smoke", d7 - d15, d9 + d13, d11, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("flame", d7 - d15, d9 + d13, d11, 0.0D, 0.0D, 0.0D);
+		} else if(i6 == 2) {
+			worldObj.spawnParticle("smoke", d7 + d15, d9 + d13, d11, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("flame", d7 + d15, d9 + d13, d11, 0.0D, 0.0D, 0.0D);
+		} else if(i6 == 3) {
+			worldObj.spawnParticle("smoke", d7, d9 + d13, d11 - d15, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("flame", d7, d9 + d13, d11 - d15, 0.0D, 0.0D, 0.0D);
+		} else if(i6 == 4) {
+			worldObj.spawnParticle("smoke", d7, d9 + d13, d11 + d15, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("flame", d7, d9 + d13, d11 + d15, 0.0D, 0.0D, 0.0D);
 		} else {
-			var1.spawnParticle("smoke", var7, var9, var11, 0.0D, 0.0D, 0.0D);
-			var1.spawnParticle("flame", var7, var9, var11, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("smoke", d7, d9, d11, 0.0D, 0.0D, 0.0D);
+			worldObj.spawnParticle("flame", d7, d9, d11, 0.0D, 0.0D, 0.0D);
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/HubWorldUnknownClass5.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+public class HubWorldUnknownClass5 {
+	public static final int field_11020_45qw06H7q9aJJI31b7S7OZjhuZ553U7ENP8LDwK4Qn7xiCna5b80uqHgvQ32 = 0;
+	public static final int field_11023_5KxDyM7k4kcJRHEr96bsde80Dt6Hljh4j493A4tbRq5wa6J526beNv172R7h = 1;
+	public static final int field_11019_7428IZS3In0X71oA2783VCAlqVYJD98NPy4PD49DSJ6yfqVid72U4r24LUHh = 2;
+	public static final int field_11021_5qHbm20m5EuZ3025vcTG9wtv0N0kZWK856ApB6t7Xn969sKS66AF0I7c9kXh = 3;
+	public static final int field_11017_28CqyV8MkTL0NILicW3qE3gbG0Xl22h98dvz97F8GxQZ02T1PmB6ztls3c66 = 4;
+	public static final int field_11018_7XhY8ZJrEp0Tbei4VNVX9pJgNEQ7HXW3ujmIA7c8gn63L3uVv6jWBw5dh6SY = 5;
+	public static final int field_11016_41w45cYhbqtpafiK4b46ZlTz11r2AfKxTyv2eqQt458Bal704TQEn0P0hf1W = 16;
+	public static final int field_11022_2Mh05t4gdOuYF815vtJ09QetxMkBBz7C3t1E9647whM7Bo0k9Vx8tfe2p29j = 127;
+
+	public static int func_11015_4dD10Vjg8EXQlPqLn1740KeipDH3q81QpEc7eJ1kIDKnDkDuh78Z6nVgtW23(int integer) {
+		switch(integer) {
+		case 0:
+		case 1:
+			return integer + 2;
+		case 2:
+		case 3:
+			return integer - 2;
+		default:
+			return -1;
+		}
+	}
+}
--- net/minecraft/src/MathHelper.java
+++ net/minecraft/src/MathHelper.java
@@ -3,55 +3,55 @@
 public class MathHelper {
 	private static float[] SIN_TABLE = new float[65536];
 
-	public static final float sin(float var0) {
-		return SIN_TABLE[(int)(var0 * 10430.378F) & '\uffff'];
-	}
-
-	public static final float cos(float var0) {
-		return SIN_TABLE[(int)(var0 * 10430.378F + 16384.0F) & '\uffff'];
-	}
-
-	public static final float sqrt_float(float var0) {
-		return (float)Math.sqrt((double)var0);
-	}
-
-	public static final float sqrt_double(double var0) {
-		return (float)Math.sqrt(var0);
-	}
-
-	public static int floor_float(float var0) {
-		int var1 = (int)var0;
-		return var0 < (float)var1 ? var1 - 1 : var1;
-	}
-
-	public static int floor_double(double var0) {
-		int var2 = (int)var0;
-		return var0 < (double)var2 ? var2 - 1 : var2;
-	}
-
-	public static float abs(float var0) {
-		return var0 >= 0.0F ? var0 : -var0;
-	}
-
-	public static double abs_max(double var0, double var2) {
-		if(var0 < 0.0D) {
-			var0 = -var0;
-		}
-
-		if(var2 < 0.0D) {
-			var2 = -var2;
-		}
-
-		return var0 > var2 ? var0 : var2;
-	}
-
-	public static int bucketInt(int var0, int var1) {
-		return var0 < 0 ? -((-var0 - 1) / var1) - 1 : var0 / var1;
+	public static final float sin(float floatValue) {
+		return SIN_TABLE[(int)(floatValue * 10430.378F) & 65535];
+	}
+
+	public static final float cos(float floatValue) {
+		return SIN_TABLE[(int)(floatValue * 10430.378F + 16384.0F) & 65535];
+	}
+
+	public static final float sqrt_float(float floatValue) {
+		return (float)Math.sqrt((double)floatValue);
+	}
+
+	public static final float sqrt_double(double doubleValue) {
+		return (float)Math.sqrt(doubleValue);
+	}
+
+	public static int floor_float(float floatValue) {
+		int i1 = (int)floatValue;
+		return floatValue < (float)i1 ? i1 - 1 : i1;
+	}
+
+	public static int floor_double(double doubleValue) {
+		int i2 = (int)doubleValue;
+		return doubleValue < (double)i2 ? i2 - 1 : i2;
+	}
+
+	public static float abs(float floatValue) {
+		return floatValue >= 0.0F ? floatValue : -floatValue;
+	}
+
+	public static double abs_max(double doubleValue1, double doubleValue2) {
+		if(doubleValue1 < 0.0D) {
+			doubleValue1 = -doubleValue1;
+		}
+
+		if(doubleValue2 < 0.0D) {
+			doubleValue2 = -doubleValue2;
+		}
+
+		return doubleValue1 > doubleValue2 ? doubleValue1 : doubleValue2;
+	}
+
+	public static int bucketInt(int integer1, int integer2) {
+		return integer1 < 0 ? -((-integer1 - 1) / integer2) - 1 : integer1 / integer2;
 	}
 
 	static {
-		for(int var0 = 0; var0 < 65536; ++var0) {
-			SIN_TABLE[var0] = (float)Math.sin((double)var0 * Math.PI * 2.0D / 65536.0D);
+		for(int i0 = 0; i0 < 65536; ++i0) {
+			SIN_TABLE[i0] = (float)Math.sin((double)i0 * Math.PI * 2.0D / 65536.0D);
 		}
 
 	}
--- net/minecraft/src/ItemPainting.java
+++ net/minecraft/src/ItemPainting.java
@@ -1,34 +1,34 @@
 package net.minecraft.src;
 
 public class ItemPainting extends Item {
-	public ItemPainting(int var1) {
-		super(var1);
+	public ItemPainting(int itemID) {
+		super(itemID);
 		this.maxDamage = 64;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 == 0) {
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(side == 0) {
 			return false;
-		} else if(var7 == 1) {
+		} else if(side == 1) {
 			return false;
 		} else {
-			byte var8 = 0;
-			if(var7 == 4) {
-				var8 = 1;
-			}
-
-			if(var7 == 3) {
-				var8 = 2;
-			}
-
-			if(var7 == 5) {
-				var8 = 3;
-			}
-
-			EntityPainting var9 = new EntityPainting(var3, var4, var5, var6, var8);
-			if(var9.onValidSurface()) {
-				var3.spawnEntityInWorld(var9);
-				--var1.stackSize;
+			byte b8 = 0;
+			if(side == 4) {
+				b8 = 1;
+			}
+
+			if(side == 3) {
+				b8 = 2;
+			}
+
+			if(side == 5) {
+				b8 = 3;
+			}
+
+			EntityPainting entityPainting9 = new EntityPainting(world, x, y, z, b8);
+			if(entityPainting9.onValidSurface()) {
+				world.spawnEntityInWorld(entityPainting9);
+				--stack.stackSize;
 			}
 
 			return true;
--- net/minecraft/src/RenderPlayer.java
+++ net/minecraft/src/RenderPlayer.java
@@ -6,28 +6,29 @@
 	private ModelBiped modelBipedMain = (ModelBiped)this.mainModel;
 	private ModelBiped modelArmorChestplate = new ModelBiped(1.0F);
 	private ModelBiped modelArmor = new ModelBiped(0.5F);
-	private static final String[] armorFilenamePrefix = new String[]{"cloth", "chain", "iron", "diamond", "gold"};
+	private static final String[] armorFilenamePrefix = new String[]{"cloth", "chain", "iron", "diamond", "gold", "obsidian", "fashion", "stylish"};
+	public ImageHolder SPPlayerTexture = null;
 
 	public RenderPlayer() {
 		super(new ModelBiped(0.0F), 0.5F);
 	}
 
-	protected boolean setArmorModel(EntityPlayer var1, int var2) {
-		ItemStack var3 = var1.inventory.armorItemInSlot(3 - var2);
-		if(var3 != null) {
-			Item var4 = var3.getItem();
-			if(var4 instanceof ItemArmor) {
-				ItemArmor var5 = (ItemArmor)var4;
-				this.loadTexture("/armor/" + armorFilenamePrefix[var5.renderIndex] + "_" + (var2 == 2 ? 2 : 1) + ".png");
-				ModelBiped var6 = var2 == 2 ? this.modelArmor : this.modelArmorChestplate;
-				var6.bipedHead.showModel = var2 == 0;
-				var6.bipedHeadwear.showModel = var2 == 0;
-				var6.bipedBody.showModel = var2 == 1 || var2 == 2;
-				var6.bipedRightArm.showModel = var2 == 1;
-				var6.bipedLeftArm.showModel = var2 == 1;
-				var6.bipedRightLeg.showModel = var2 == 2 || var2 == 3;
-				var6.bipedLeftLeg.showModel = var2 == 2 || var2 == 3;
-				this.setRenderPassModel(var6);
+	protected boolean setArmorModel(EntityPlayer gb, int integer) {
+		ItemStack itemStack3 = gb.inventory.armorItemInSlot(3 - integer);
+		if(itemStack3 != null) {
+			Item item4 = itemStack3.getItem();
+			if(item4 instanceof ItemArmor) {
+				ItemArmor itemArmor5 = (ItemArmor)item4;
+				this.loadTexture("/armor/" + armorFilenamePrefix[itemArmor5.renderIndex] + "_" + (integer == 2 ? 2 : 1) + ".png");
+				ModelBiped modelBiped6 = integer == 2 ? this.modelArmor : this.modelArmorChestplate;
+				modelBiped6.bipedHead.showModel = integer == 0;
+				modelBiped6.bipedHeadwear.showModel = integer == 0;
+				modelBiped6.bipedBody.showModel = integer == 1 || integer == 2;
+				modelBiped6.bipedRightArm.showModel = integer == 1;
+				modelBiped6.bipedLeftArm.showModel = integer == 1;
+				modelBiped6.bipedRightLeg.showModel = integer == 2 || integer == 3;
+				modelBiped6.bipedLeftLeg.showModel = integer == 2 || integer == 3;
+				this.setRenderPassModel(modelBiped6);
 				return true;
 			}
 		}
@@ -35,114 +36,169 @@
 		return false;
 	}
 
-	public void renderPlayer(EntityPlayer var1, double var2, double var4, double var6, float var8, float var9) {
-		ItemStack var10 = var1.inventory.getCurrentItem();
-		this.modelArmorChestplate.heldItemRight = this.modelArmor.heldItemRight = this.modelBipedMain.heldItemRight = var10 != null;
-		this.modelArmorChestplate.isSneak = this.modelArmor.isSneak = this.modelBipedMain.isSneak = var1.isSneaking();
-		super.doRenderLiving(var1, var2, var4 - (double)var1.yOffset, var6, var8, var9);
+	public float getLimbSwing(EntityLiving zi, float float2) {
+		float f3 = super.getLimbSwing(zi, float2);
+		if(zi.isInsideOfMaterial(Material.water)) {
+			f3 /= 4.0F;
+		}
+
+		return f3;
+	}
+
+	public float getLimbAnimMaxMovement(EntityLiving zi, float float2) {
+		float f3 = super.getLimbAnimMaxMovement(zi, float2);
+		if(zi.isInsideOfMaterial(Material.water)) {
+			f3 /= 3.0F;
+		}
+
+		return f3;
+	}
+
+	public void renderPlayer(EntityPlayer gb, double double2, double double3, double double4, float float5, float float6) {
+		ItemStack itemStack10 = gb.inventory.getCurrentItem();
+		this.modelArmorChestplate.heldItemRight = this.modelArmor.heldItemRight = this.modelBipedMain.heldItemRight = itemStack10 != null;
+		this.modelArmorChestplate.isSneak = this.modelArmor.isSneak = this.modelBipedMain.isSneak = gb.isSneaking();
+		if(!gb.username.startsWith("\u0001")) {
+			super.doRenderLiving(gb, double2, double3 - (double)gb.yOffset, double4, float5, float6);
+		}
+
 		this.modelArmorChestplate.isSneak = this.modelArmor.isSneak = this.modelBipedMain.isSneak = false;
 		this.modelArmorChestplate.heldItemRight = this.modelArmor.heldItemRight = this.modelBipedMain.heldItemRight = false;
-		FontRenderer var11 = this.getFontRendererFromRenderManager();
-		float var12 = 1.6F;
-		float var13 = (float)(1.0D / 60.0D) * var12;
-		GL11.glPushMatrix();
-		GL11.glTranslatef((float)var2 + 0.0F, (float)var4 + 2.3F, (float)var6);
-		GL11.glNormal3f(0.0F, 1.0F, 0.0F);
-		GL11.glRotatef(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-		GL11.glRotatef(this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
-		float var14 = var1.getDistanceToEntity(this.renderManager.player);
-		var13 = (float)((double)var13 * (Math.sqrt((double)var14) / 2.0D));
-		GL11.glScalef(-var13, -var13, var13);
-		String var15 = var1.username;
-		GL11.glDisable(GL11.GL_LIGHTING);
-		GL11.glDepthMask(false);
-		GL11.glDisable(GL11.GL_DEPTH_TEST);
-		GL11.glEnable(GL11.GL_BLEND);
-		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-		Tessellator var16 = Tessellator.instance;
-		GL11.glDisable(GL11.GL_TEXTURE_2D);
-		var16.startDrawingQuads();
-		int var17 = var11.getStringWidth(var15) / 2;
-		var16.setColorRGBA_F(0.0F, 0.0F, 0.0F, 0.25F);
-		var16.addVertex((double)(-var17 - 1), -1.0D, 0.0D);
-		var16.addVertex((double)(-var17 - 1), 8.0D, 0.0D);
-		var16.addVertex((double)(var17 + 1), 8.0D, 0.0D);
-		var16.addVertex((double)(var17 + 1), -1.0D, 0.0D);
-		var16.draw();
-		GL11.glEnable(GL11.GL_TEXTURE_2D);
-		var11.drawString(var15, -var11.getStringWidth(var15) / 2, 0, 553648127);
-		GL11.glEnable(GL11.GL_DEPTH_TEST);
-		GL11.glDepthMask(true);
-		var11.drawString(var15, -var11.getStringWidth(var15) / 2, 0, -1);
-		GL11.glEnable(GL11.GL_LIGHTING);
-		GL11.glDisable(GL11.GL_BLEND);
-		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		GL11.glPopMatrix();
+		this.modelBipedMain.inWater = this.modelArmor.inWater = this.modelArmorChestplate.inWater = gb.isInsideOfMaterial(Material.water) || gb.lastInWater;
+		if(!gb.username.startsWith("\u0002")) {
+			FontRenderer fontRenderer11 = this.getFontRendererFromRenderManager();
+			float f12 = 1.6F;
+			float f13 = 0.016666668F * f12;
+			GL11.glPushMatrix();
+			GL11.glTranslatef((float)double2 + 0.0F, (float)double3 + 2.3F, (float)double4);
+			GL11.glNormal3f(0.0F, 1.0F, 0.0F);
+			GL11.glRotatef(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
+			GL11.glRotatef(this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
+			float f14 = gb.getDistanceToEntity(this.renderManager.player);
+			f13 = (float)((double)f13 * (Math.sqrt((double)f14) / 2.0D));
+			GL11.glScalef(-f13, -f13, f13);
+			String string15 = gb.username;
+			GL11.glDisable(GL11.GL_LIGHTING);
+			GL11.glDepthMask(false);
+			GL11.glDisable(GL11.GL_DEPTH_TEST);
+			GL11.glEnable(GL11.GL_BLEND);
+			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+			Tessellator tessellator16 = Tessellator.instance;
+			GL11.glDisable(GL11.GL_TEXTURE_2D);
+			tessellator16.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			int i17 = fontRenderer11.getStringWidth(string15) / 2;
+			tessellator16.setColorRGBA_F(0.0F, 0.0F, 0.0F, 0.25F);
+			tessellator16.addVertex((double)(-i17 - 1), -1.0D, 0.0D);
+			tessellator16.addVertex((double)(-i17 - 1), 8.0D, 0.0D);
+			tessellator16.addVertex((double)(i17 + 1), 8.0D, 0.0D);
+			tessellator16.addVertex((double)(i17 + 1), -1.0D, 0.0D);
+			tessellator16.draw();
+			GL11.glEnable(GL11.GL_TEXTURE_2D);
+			fontRenderer11.drawString(string15, -fontRenderer11.getStringWidth(string15) / 2, 0, 553648127);
+			GL11.glEnable(GL11.GL_DEPTH_TEST);
+			GL11.glDepthMask(true);
+			fontRenderer11.drawString(string15, -fontRenderer11.getStringWidth(string15) / 2, 0, -1);
+			GL11.glEnable(GL11.GL_LIGHTING);
+			GL11.glDisable(GL11.GL_BLEND);
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			GL11.glPopMatrix();
+		}
+
 	}
 
-	protected void renderSpecials(EntityPlayer var1, float var2) {
-		ItemStack var3 = var1.inventory.getCurrentItem();
-		if(var3 != null) {
+	protected void renderSpecials(EntityPlayer gb, float float2) {
+		ItemStack itemStack3 = gb.inventory.getCurrentItem();
+		if(itemStack3 != null) {
 			GL11.glPushMatrix();
-			this.modelBipedMain.bipedRightArm.renderWithRotation(1.0F / 16.0F);
-			GL11.glTranslatef(-(1.0F / 16.0F), 7.0F / 16.0F, 1.0F / 16.0F);
-			float var4;
-			if(var3.itemID < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var3.itemID].getRenderType())) {
-				var4 = 0.5F;
-				GL11.glTranslatef(0.0F, 3.0F / 16.0F, -(5.0F / 16.0F));
-				var4 *= 12.0F / 16.0F;
+			this.modelBipedMain.bipedRightArm.renderWithRotation(0.0625F, true);
+			GL11.glTranslatef(this.modelBipedMain.field_9257_0KUtgLX9srVUt26M4Sr4d7tQWC7591F5ufdCW0N24HOCJRBfNMJmqGBkyn5V ? 0.0F : -0.0625F, 0.4375F, 0.0625F);
+			float f4;
+			if(itemStack3.itemID < 32767 && RenderBlocks.renderItemIn3d(Block.blocksList[itemStack3.itemID].getRenderType())) {
+				f4 = 0.5F;
+				GL11.glTranslatef(0.0F, 0.1875F, -0.3125F);
+				f4 *= 0.75F;
 				GL11.glRotatef(20.0F, 1.0F, 0.0F, 0.0F);
 				GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
-				GL11.glScalef(var4, -var4, var4);
-			} else if(Item.itemsList[var3.itemID].isFull3D()) {
-				var4 = 10.0F / 16.0F;
-				GL11.glTranslatef(0.0F, 3.0F / 16.0F, 0.0F);
-				GL11.glScalef(var4, -var4, var4);
+				GL11.glScalef(f4, -f4, f4);
+			} else if(Item.itemsList[itemStack3.itemID].isFull3D()) {
+				f4 = 0.625F;
+				GL11.glTranslatef(0.0F, 0.1875F, 0.0F);
+				GL11.glScalef(f4, -f4, f4);
 				GL11.glRotatef(-100.0F, 1.0F, 0.0F, 0.0F);
 				GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
 			} else {
-				var4 = 6.0F / 16.0F;
-				GL11.glTranslatef(0.25F, 3.0F / 16.0F, -(3.0F / 16.0F));
-				GL11.glScalef(var4, var4, var4);
+				f4 = 0.375F;
+				GL11.glTranslatef(0.25F, 0.1875F, -0.1875F);
+				GL11.glScalef(f4, f4, f4);
 				GL11.glRotatef(60.0F, 0.0F, 0.0F, 1.0F);
 				GL11.glRotatef(-90.0F, 1.0F, 0.0F, 0.0F);
 				GL11.glRotatef(20.0F, 0.0F, 0.0F, 1.0F);
 			}
 
-			this.renderManager.itemRenderer.renderItem(var3);
+			this.renderManager.itemRenderer.renderItem(itemStack3);
 			GL11.glPopMatrix();
 		}
 
 	}
 
-	protected void scalePlayer(EntityPlayer var1, float var2) {
-		float var3 = 15.0F / 16.0F;
-		GL11.glScalef(var3, var3, var3);
+	protected void scalePlayer(EntityPlayer gb, float float2) {
+		float f3 = 0.9375F;
+		GL11.glScalef(f3, f3, f3);
 	}
 
 	public void drawFirstPersonHand() {
+		if(this.SPPlayerTexture != null) {
+			this.modelBipedMain.setSlimModel(this.SPPlayerTexture.slimTypePlayer);
+		}
+
 		this.modelBipedMain.swingProgress = 0.0F;
-		this.modelBipedMain.setRotationAngles(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F / 16.0F);
-		this.modelBipedMain.bipedRightArm.render(1.0F / 16.0F);
-	}
-
-	protected void preRenderCallback(EntityLiving var1, float var2) {
-		this.scalePlayer((EntityPlayer)var1, var2);
-	}
-
-	protected boolean shouldRenderPass(EntityLiving var1, int var2) {
-		return this.setArmorModel((EntityPlayer)var1, var2);
-	}
-
-	protected void renderEquippedItems(EntityLiving var1, float var2) {
-		this.renderSpecials((EntityPlayer)var1, var2);
-	}
-
-	public void doRenderLiving(EntityLiving var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderPlayer((EntityPlayer)var1, var2, var4, var6, var8, var9);
-	}
-
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderPlayer((EntityPlayer)var1, var2, var4, var6, var8, var9);
+		this.modelBipedMain.setRotationAngles(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0625F);
+		this.modelBipedMain.bipedRightArm.render(0.0625F);
+		this.modelBipedMain.bipedRightArmS.render(0.0625F);
+	}
+
+	protected void preRenderCallback(EntityLiving zi, float float2) {
+		this.scalePlayer((EntityPlayer)zi, float2);
+	}
+
+	protected boolean shouldRenderPass(EntityLiving zi, int integer) {
+		return this.setArmorModel((EntityPlayer)zi, integer);
+	}
+
+	protected void renderEquippedItems(EntityLiving zi, float float2) {
+		this.renderSpecials((EntityPlayer)zi, float2);
+	}
+
+	public void ApplyRotations(EntityLiving zi) {
+		if(!(zi instanceof EntityShadowPlayer)) {
+			EntityPlayer entityPlayer2 = (EntityPlayer)zi;
+			if(entityPlayer2.isInsideOfMaterial(Material.water)) {
+				GL11.glRotatef(90.0F, -1.0F, 0.0F, 0.0F);
+				float f3 = 1.0F - Math.abs(zi.rotationPitch) / 90.0F;
+				float f4 = zi.rotationPitch / 90.0F;
+				f3 *= f3 * f3;
+				GL11.glTranslatef(0.0F, -1.7F * f3, 0.5F + f4);
+				if(!zi.onGround) {
+					GL11.glRotatef(zi.rotationPitch, -1.0F, 0.0F, 0.0F);
+				}
+			}
+		}
+
+	}
+
+	public void doRenderLiving(EntityLiving zi, double double2, double double3, double double4, float float5, float float6) {
+		if(((EntityPlayer)zi).playerSkin != null) {
+			this.modelBipedMain.setSlimModel(((EntityPlayer)zi).playerSkin.slimTypePlayer);
+		}
+
+		this.renderPlayer((EntityPlayer)zi, double2, double3, double4, float5, float6);
+	}
+
+	public void doRender(Entity xy, double double2, double double3, double double4, float float5, float float6) {
+		if(((EntityPlayer)xy).playerSkin != null) {
+			this.modelBipedMain.setSlimModel(((EntityPlayer)xy).playerSkin.slimTypePlayer);
+		}
+
+		this.renderPlayer((EntityPlayer)xy, double2, double3, double4, float5, float6);
 	}
 }
--- net/minecraft/src/EntityCow.java
+++ net/minecraft/src/EntityCow.java
@@ -3,18 +3,18 @@
 public class EntityCow extends EntityAnimal {
 	public boolean unusedBool2 = false;
 
-	public EntityCow(World var1) {
-		super(var1);
+	public EntityCow(World world) {
+		super(world);
 		this.texture = "/mob/cow.png";
 		this.setSize(0.9F, 1.3F);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
 	}
 
 	protected String getLivingSound() {
@@ -37,10 +37,10 @@
 		return Item.leather.shiftedIndex;
 	}
 
-	public boolean interact(EntityPlayer var1) {
-		ItemStack var2 = var1.inventory.getCurrentItem();
-		if(var2 != null && var2.itemID == Item.bucketEmpty.shiftedIndex) {
-			var1.inventory.setInventorySlotContents(var1.inventory.currentItem, new ItemStack(Item.bucketMilk));
+	public boolean interact(EntityPlayer entityPlayer) {
+		ItemStack itemStack2 = entityPlayer.inventory.getCurrentItem();
+		if(itemStack2 != null && itemStack2.itemID == Item.bucketEmpty.shiftedIndex) {
+			entityPlayer.inventory.setInventorySlotContents(entityPlayer.inventory.currentItem, new ItemStack(Item.bucketMilk));
 			return true;
 		} else {
 			return false;
--- /dev/null
+++ net/minecraft/src/CommandBind.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandBind extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8581_9gqzkEhAB2dcAf6gdH7u41bV9ONu62H3aRMr5QQg529C9R6Tuob6Q15QUILw;
+    
+    CommandBind(final CommandManager abb) {
+        this.field_8581_9gqzkEhAB2dcAf6gdH7u41bV9ONu62H3aRMr5QQg529C9R6Tuob6Q15QUILw = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        this.field_8581_9gqzkEhAB2dcAf6gdH7u41bV9ONu62H3aRMr5QQg529C9R6Tuob6Q15QUILw.field_12072_57Pslv03tR1GVO6rfR7Myg6SJ9Dfi77KWF699D8Zy703Dh2cM61HfFA0VmYd.put((int)arr[0], arr[1]);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- net/minecraft/src/EntityCreeper.java
+++ net/minecraft/src/EntityCreeper.java
@@ -6,17 +6,17 @@
 	int fuseDuration = 30;
 	int creeperState = -1;
 
-	public EntityCreeper(World var1) {
-		super(var1);
+	public EntityCreeper(World world) {
+		super(world);
 		this.texture = "/mob/creeper.png";
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
 	}
 
 	protected void updateEntityActionState() {
@@ -44,16 +44,16 @@
 		return "mob.creeperdeath";
 	}
 
-	public void onDeath(Entity var1) {
-		super.onDeath(var1);
-		if(var1 instanceof EntitySkeleton) {
+	public void onDeath(Entity entity) {
+		super.onDeath(entity);
+		if(entity instanceof EntitySkeleton) {
 			this.dropItem(Item.record13.shiftedIndex + this.rand.nextInt(2), 1);
 		}
 
 	}
 
-	protected void attackEntity(Entity var1, float var2) {
-		if(this.creeperState <= 0 && var2 < 3.0F || this.creeperState > 0 && var2 < 7.0F) {
+	protected void attackEntity(Entity entity, float damage) {
+		if(this.creeperState <= 0 && damage < 3.0F || this.creeperState > 0 && damage < 7.0F) {
 			if(this.timeSinceIgnited == 0) {
 				this.worldObj.playSoundAtEntity(this, "random.fuse", 1.0F, 0.5F);
 			}
@@ -70,11 +70,15 @@
 
 	}
 
-	public float getCreeperFlashTime(float var1) {
-		return ((float)this.lastActiveTime + (float)(this.timeSinceIgnited - this.lastActiveTime) * var1) / (float)(this.fuseDuration - 2);
+	public float getCreeperFlashTime(float float1) {
+		return ((float)this.lastActiveTime + (float)(this.timeSinceIgnited - this.lastActiveTime) * float1) / (float)(this.fuseDuration - 2);
 	}
 
 	protected int getDropItemId() {
 		return Item.gunpowder.shiftedIndex;
+	}
+
+	public int getEssenceDroppedOnKill() {
+		return 10 + this.rand.nextInt(8);
 	}
 }
--- net/minecraft/src/EntityMob.java
+++ net/minecraft/src/EntityMob.java
@@ -3,14 +3,14 @@
 public class EntityMob extends EntityCreature implements IMobs {
 	protected int attackStrength = 2;
 
-	public EntityMob(World var1) {
-		super(var1);
+	public EntityMob(World world) {
+		super(world);
 		this.health = 20;
 	}
 
 	public void onLivingUpdate() {
-		float var1 = this.getBrightness(1.0F);
-		if(var1 > 0.5F) {
+		float f1 = this.getBrightness(1.0F);
+		if(f1 > 0.5F) {
 			this.entityAge += 2;
 		}
 
@@ -19,22 +19,22 @@
 
 	public void onUpdate() {
 		super.onUpdate();
-		if(this.worldObj.difficultySetting == 0) {
+		if(this.worldObj.difficultySetting == 0 && !(this.worldObj instanceof ZMWorld)) {
 			this.setEntityDead();
 		}
 
 	}
 
 	protected Entity findPlayerToAttack() {
-		EntityPlayer var1 = this.worldObj.getClosestPlayerToEntity(this, 16.0D);
-		return var1 != null && this.canEntityBeSeen(var1) ? var1 : null;
+		EntityPlayer entityPlayer1 = this.worldObj.getClosestPlayerToEntity(this, 16.0D);
+		return entityPlayer1 != null && this.canEntityBeSeen(entityPlayer1) ? entityPlayer1 : null;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
-		if(super.attackEntityFrom(var1, var2)) {
-			if(this.riddenByEntity != var1 && this.ridingEntity != var1) {
-				if(var1 != this) {
-					this.entityToAttack = var1;
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		if(super.attackEntityFrom(entity, damage)) {
+			if(this.riddenByEntity != entity && this.ridingEntity != entity) {
+				if(entity != this) {
+					this.entityToAttack = entity;
 				}
 
 				return true;
@@ -46,35 +46,48 @@
 		}
 	}
 
-	protected void attackEntity(Entity var1, float var2) {
-		if((double)var2 < 2.5D && var1.boundingBox.maxY > this.boundingBox.minY && var1.boundingBox.minY < this.boundingBox.maxY) {
+	protected void attackEntity(Entity entity, float damage) {
+		if((double)damage < 2.5D && entity.boundingBox.maxY > this.boundingBox.minY && entity.boundingBox.minY < this.boundingBox.maxY) {
 			this.attackTime = 20;
-			var1.attackEntityFrom(this, this.attackStrength);
+			entity.attackEntityFrom(this, this.attackStrength);
 		}
 
 	}
 
-	protected float getBlockPathWeight(int var1, int var2, int var3) {
-		return 0.5F - this.worldObj.getBrightness(var1, var2, var3);
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	protected float getBlockPathWeight(int x, int y, int z) {
+		return 0.5F - this.worldObj.getBrightness(x, y, z);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
 	}
 
 	public boolean getCanSpawnHere() {
-		int var1 = MathHelper.floor_double(this.posX);
-		int var2 = MathHelper.floor_double(this.boundingBox.minY);
-		int var3 = MathHelper.floor_double(this.posZ);
-		if(this.worldObj.getSavedLightValue(EnumSkyBlock.Sky, var1, var2, var3) > this.rand.nextInt(32)) {
+		int i1 = MathHelper.floor_double(this.posX);
+		int i2 = MathHelper.floor_double(this.boundingBox.minY);
+		int i3 = MathHelper.floor_double(this.posZ);
+		if(this.worldObj.getSavedLightValue(EnumSkyBlock.Sky, i1, i2, i3) > this.rand.nextInt(32)) {
 			return false;
 		} else {
-			int var4 = this.worldObj.getBlockLightValue(var1, var2, var3);
-			return var4 <= this.rand.nextInt(8) && super.getCanSpawnHere();
-		}
+			int i4 = this.worldObj.getBlockLightValue(i1, i2, i3);
+			return i4 <= this.rand.nextInt(8) && super.getCanSpawnHere();
+		}
+	}
+
+	public void onDeath(Entity entity) {
+		super.onDeath(entity);
+		int i2 = this.getEssenceDroppedOnKill();
+		if(i2 > 0) {
+			this.dropItem(ExtItems.essence.shiftedIndex, i2);
+		}
+
+	}
+
+	public int getEssenceDroppedOnKill() {
+		return 1;
 	}
 }
--- net/minecraft/src/BlockFlower.java
+++ net/minecraft/src/BlockFlower.java
@@ -3,44 +3,44 @@
 import java.util.Random;
 
 public class BlockFlower extends Block {
-	protected BlockFlower(int var1, int var2) {
-		super(var1, Material.plants);
-		this.blockIndexInTexture = var2;
+	public BlockFlower(int id, int blockIndex) {
+		super(id, Material.plants);
+		this.blockIndexInTexture = blockIndex;
 		this.setTickOnLoad(true);
-		float var3 = 0.2F;
-		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var3 * 3.0F, 0.5F + var3);
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
-	}
-
-	protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-		return var1 == Block.grass.blockID || var1 == Block.dirt.blockID || var1 == Block.tilledField.blockID;
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		this.checkFlowerChange(var1, var2, var3, var4);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		this.checkFlowerChange(var1, var2, var3, var4);
-	}
-
-	protected final void checkFlowerChange(World var1, int var2, int var3, int var4) {
-		if(!this.canBlockStay(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+		float f3 = 0.2F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, f3 * 3.0F, 0.5F + f3);
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return this.canThisPlantGrowOnThisBlockID(world.getBlockId(x, y - 1, z));
+	}
+
+	protected boolean canThisPlantGrowOnThisBlockID(int id) {
+		return id == Block.grass.blockID || id == Block.dirt.blockID || id == Block.tilledField.blockID;
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		super.onNeighborBlockChange(world, x, y, z, flag);
+		this.checkFlowerChange(world, x, y, z);
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		this.checkFlowerChange(world, x, y, z);
+	}
+
+	protected final void checkFlowerChange(World worldObj, int x, int y, int z) {
+		if(!this.canBlockStay(worldObj, x, y, z)) {
+			this.dropBlockAsItem(worldObj, x, y, z, worldObj.getBlockMetadata(x, y, z));
+			worldObj.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
 
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-		return (var1.getBlockLightValue(var2, var3, var4) >= 8 || var1.canBlockSeeTheSky(var2, var3, var4)) && this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
+	public boolean canBlockStay(World world, int x, int y, int z) {
+		return (world.getBlockLightValue(x, y, z) >= 8 || world.canBlockSeeTheSky(x, y, z)) && this.canThisPlantGrowOnThisBlockID(world.getBlockId(x, y - 1, z));
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
--- /dev/null
+++ net/minecraft/src/WorldGenHouseBigUnknownClass.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenHouseBigUnknownClass implements IHouseBig {
+	public WorldGenHouseBigUnknownClass(Random random) {
+	}
+
+	public float func_9883_913vTZx6no47397W6wG95Q5uB254nJBZ27osnW242XcA9M93Alb1ry5oPyVe() {
+		return 0.01F;
+	}
+
+	public void func_9884_61qP7q8deV5ospnX8sW5XUMxMcV5ssOU68863452kQ9H403L5ScR3DEa98qO(World vg, int integer2, int integer3, WorldGenHouseBigInterior hp) {
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandRRemodel.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+class CommandRRemodel extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8558_6U4DvXsmr3RKtkV6zbR3uGQ2vxFuGXnd73HBHIz0187Mr6XB5dAYU8SLgC3r;
+    
+    CommandRRemodel(final CommandManager abb) {
+        this.field_8558_6U4DvXsmr3RKtkV6zbR3uGQ2vxFuGXnd73HBHIz0187Mr6XB5dAYU8SLgC3r = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.renderEngine.refreshTextures();
+        Minecraft.field_7326_55yB6jYtSi94r555184CYoXDQ1YhyBnoS1lJaCCAbdj3rDu1RNzU8Gp4C3g5 = true;
+        InputHandler.mc.field_7311_0ef1dw6U62P0w8bU619gHGHeA4m17T8k6bnjfEQQwhJz0UwhJ6Kx9rBRdIvo.func_11380_9r1511Jp0jE144f4MQc4NK82XBZn9UtKQ9T0m3371572UnC4jS4YM9eJUhB9();
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- net/minecraft/src/WorldGenTrees.java
+++ net/minecraft/src/WorldGenTrees.java
@@ -1,68 +1,93 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.Random;
 
+import net.minecraft.client.Minecraft;
+
 public class WorldGenTrees extends WorldGenerator {
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		int var6 = var2.nextInt(3) + 4;
-		boolean var7 = true;
-		if(var4 >= 1 && var4 + var6 + 1 <= 128) {
-			int var8;
-			int var10;
-			int var11;
-			int var12;
-			for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
-				byte var9 = 1;
-				if(var8 == var4) {
-					var9 = 0;
-				}
-
-				if(var8 >= var4 + 1 + var6 - 2) {
-					var9 = 2;
-				}
-
-				for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
-					for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-						if(var8 >= 0 && var8 < 128) {
-							var12 = var1.getBlockId(var10, var8, var11);
-							if(var12 != 0 && var12 != Block.leaves.blockID) {
-								var7 = false;
+	private Boolean generateEpicTrees = null;
+
+	public WorldGenTrees generateHighwoodTrees(boolean boolean1) {
+		this.generateEpicTrees = boolean1;
+		return this;
+	}
+
+	private boolean generateNormalTree(World vg, Random random, int integer3, int integer4, int integer5) {
+		int i6 = Block.wood.blockID;
+		int i7 = Block.leaves.blockID;
+		if(!Minecraft.field_7272_4vZ36FKx2I9PxzXyWH4290I55Q6yd6FI668q2Ylv62ISy2u1yh710qJ4Q0Yo && random.nextInt(100) <= 5) {
+			i6 = ExtBlocks.FireSkyWood.blockID;
+			i7 = ExtBlocks.FireSkyLeaves.blockID;
+		}
+
+		int i8 = random.nextInt(4) + 4;
+		int i9 = random.nextInt(100);
+		if(!Minecraft.field_7272_4vZ36FKx2I9PxzXyWH4290I55Q6yd6FI668q2Ylv62ISy2u1yh710qJ4Q0Yo && i9 >= 6 && i9 <= 14) {
+			i6 = ExtBlocks.TeaWood.blockID;
+			i7 = ExtBlocks.TeaBush.blockID;
+			i8 = random.nextInt(1) + 1;
+		}
+
+		boolean z10 = true;
+		if(integer4 >= 1 && integer4 + i8 + 1 <= 128) {
+			int i11;
+			int i12;
+			int i13;
+			int i14;
+			for(i11 = integer4; i11 <= integer4 + 1 + i8; ++i11) {
+				byte b15 = 1;
+				if(i11 == integer4) {
+					b15 = 0;
+				}
+
+				if(i11 >= integer4 + 1 + i8 - 2) {
+					b15 = 2;
+				}
+
+				for(i12 = integer3 - b15; i12 <= integer3 + b15 && z10; ++i12) {
+					for(i13 = integer5 - b15; i13 <= integer5 + b15 && z10; ++i13) {
+						if(i11 >= 0 && i11 < 128) {
+							i14 = vg.getBlockId(i12, i11, i13);
+							if(i14 != 0 && i14 != i7) {
+								z10 = false;
 							}
 						} else {
-							var7 = false;
+							z10 = false;
 						}
 					}
 				}
 			}
 
-			if(!var7) {
+			if(!z10) {
 				return false;
 			} else {
-				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 128 - var6 - 1) {
-					var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
-
-					int var16;
-					for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
-						var10 = var16 - (var4 + var6);
-						var11 = 1 - var10 / 2;
-
-						for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
-							int var13 = var12 - var3;
-
-							for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
-								int var15 = var14 - var5;
-								if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
-									var1.setBlock(var12, var16, var14, Block.leaves.blockID);
+				i11 = vg.getBlockId(integer3, integer4 - 1, integer5);
+				if((i11 == Block.grass.blockID || i11 == Block.dirt.blockID) && integer4 < 128 - i8 - 1) {
+					vg.setBlock(integer3, integer4 - 1, integer5, Block.dirt.blockID);
+
+					int i19;
+					for(i19 = integer4 - 3 + i8; i19 <= integer4 + i8; ++i19) {
+						i12 = i19 - (integer4 + i8);
+						i13 = 1 - i12 / 2;
+
+						for(i14 = integer3 - i13; i14 <= integer3 + i13; ++i14) {
+							int i16 = i14 - integer3;
+
+							for(int i17 = integer5 - i13; i17 <= integer5 + i13; ++i17) {
+								int i18 = i17 - integer5;
+								if((Math.abs(i16) != i13 || Math.abs(i18) != i13 || random.nextInt(2) != 0 && i12 != 0) && !Block.opaqueCubeLookup[vg.getBlockId(i14, i19, i17)]) {
+									vg.setBlock(i14, i19, i17, i7);
 								}
 							}
 						}
 					}
 
-					for(var16 = 0; var16 < var6; ++var16) {
-						var10 = var1.getBlockId(var3, var4 + var16, var5);
-						if(var10 == 0 || var10 == Block.leaves.blockID) {
-							var1.setBlock(var3, var4 + var16, var5, Block.wood.blockID);
+					for(i19 = 0; i19 < i8; ++i19) {
+						i12 = vg.getBlockId(integer3, integer4 + i19, integer5);
+						if(i12 == 0 || i12 == i7) {
+							vg.setBlock(integer3, integer4 + i19, integer5, i6);
 						}
 					}
 
@@ -74,5 +99,134 @@
 		} else {
 			return false;
 		}
+	}
+
+	private void generateDeEpicTreeFoliage(World vg, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientWood.blockID;
+		int i7 = ExtBlocks.AncientLeaves.blockID;
+		float f8 = 0.0F;
+		float f9 = random.nextFloat() * (float)Math.PI * 2.0F;
+		int i10 = random.nextInt(8) + 7;
+		float f11 = (float)integer4;
+
+		float f13;
+		for(int i12 = 0; i12 < i10; ++i12) {
+			f9 = (float)((double)f9 + ((double)random.nextFloat() - 0.5D) * 0.1D);
+			++f8;
+			f13 = f8 / (float)i10;
+			integer3 = (int)((float)integer3 + MathHelper.cos(f9) * (1.0F - f13));
+			f11 += f13;
+			integer5 = (int)((float)integer5 + MathHelper.sin(f9) * (1.0F - f13));
+			integer4 = Math.round(f11);
+			vg.setBlock(integer3, integer4, integer5, i6);
+		}
+
+		integer4 += random.nextInt(2) + 1;
+		int i15 = random.nextInt(2) + 2;
+
+		for(int i16 = 0; i16 < i15; ++i16) {
+			vg.setBlock(integer3, integer4, integer5, i7);
+
+			for(float f17 = 0.0F; (double)f17 < Math.PI * 2D; f17 = (float)((double)f17 + 0.6283185307179586D)) {
+				int i18 = random.nextInt(i16 + 2) + i16 + 2;
+				float f19 = (float)integer3;
+				f13 = (float)integer5;
+
+				for(int i14 = 0; i14 < i18; ++i14) {
+					f13 += MathHelper.sin(f17);
+					f19 += MathHelper.cos(f17);
+					if(!vg.getBlockMaterial(Math.round(f19), integer4 - i16, Math.round(f13)).getIsSolid()) {
+						vg.setBlock(Math.round(f19), integer4 - i16, Math.round(f13), i7);
+					}
+				}
+			}
+		}
+
+	}
+
+	private void generateDeEpicRoots(World vg, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientRoots.blockID;
+		int i7 = random.nextInt(3);
+
+		for(int i8 = 0; i8 < i7; ++i8) {
+			int i9 = random.nextInt(4) + 2;
+			int i10 = integer3;
+			int i11 = integer4;
+			int i12 = integer5;
+
+			for(int i13 = 0; i13 < i9; ++i13) {
+				i10 += random.nextInt(3) - 1;
+				--i11;
+				i12 += random.nextInt(3) - 1;
+				if(vg.getBlockId(i10, i11, i12) != Block.bedrock.blockID) {
+					vg.setBlock(i10, i11, i12, i6);
+				}
+			}
+		}
+
+	}
+
+	private boolean generateDeEpicTree(World vg, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientWood.blockID;
+		int i7 = ExtBlocks.AncientLeaves.blockID;
+		if(vg.getBlockId(integer3, integer4 - 1, integer5) != Block.grass.blockID && vg.getBlockId(integer3, integer4 - 1, integer5) != Block.dirt.blockID) {
+			return true;
+		} else {
+			Random random8 = new Random(random.nextLong() + (long)integer3 + (long)integer4 + (long)integer5 + vg.randomSeed);
+			ArrayList arrayList9 = new ArrayList();
+			int i10 = 7 + random8.nextInt(10);
+			arrayList9.add(Vec3D.createVector((double)integer3, (double)(integer4 + i10), (double)integer5));
+
+			label71:
+			for(int i11 = 0; arrayList9.size() > 0; ++i11) {
+				Iterator iterator12 = (new ArrayList(arrayList9)).iterator();
+
+				while(true) {
+					while(true) {
+						if(!iterator12.hasNext()) {
+							continue label71;
+						}
+
+						Vec3D vec3D13 = (Vec3D)iterator12.next();
+						int i14 = (int)Math.round(vec3D13.xCoord);
+						int i15 = (int)Math.round(vec3D13.yCoord);
+						int i16 = (int)Math.round(vec3D13.zCoord);
+						if((!vg.getBlockMaterial(i14, i15, i16).getIsSolid() || vg.getBlockId(i14, i15, i16) != i7) && i15 >= 0 && (random8.nextInt(3) != 0 || arrayList9.size() <= 3)) {
+							vg.setBlock(i14, i15, i16, i6);
+							int i17 = 0;
+
+							while(random8.nextInt(arrayList9.size() / 30 + 2) <= 1 && arrayList9.size() <= 10000) {
+								++i17;
+								if(i17 >= 4) {
+									break;
+								}
+
+								Vec3D vec3D18 = vec3D13.addVector((double)(random8.nextInt(3) - 1), -1.0D, (double)(random8.nextInt(3) - 1));
+								arrayList9.add(vec3D18);
+							}
+
+							if(i11 > 2 && random8.nextInt(Math.max(40, 78 - i11)) == 3) {
+								this.generateDeEpicTreeFoliage(vg, random, i14, i15, i16);
+							}
+
+							arrayList9.remove(vec3D13);
+							arrayList9.add(vec3D13.addVector(0.0D, -1.0D, 0.0D));
+						} else {
+							arrayList9.remove(vec3D13);
+							if(vg.getBlockId(i14, i15, i16) == Block.dirt.blockID || vg.getBlockId(i14, i15, i16) == Block.grass.blockID) {
+								this.generateDeEpicRoots(vg, random8, i14, i15, i16);
+							}
+						}
+					}
+				}
+			}
+
+			return true;
+		}
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		Random random6 = new Random(rand.nextLong() + (long)x + (long)y + (long)z + world.randomSeed);
+		return Minecraft.field_7272_4vZ36FKx2I9PxzXyWH4290I55Q6yd6FI668q2Ylv62ISy2u1yh710qJ4Q0Yo || this.generateEpicTrees == null || random6.nextInt(150) != 0 && !this.generateEpicTrees.booleanValue() ? this.generateNormalTree(world, rand, x, y, z) : this.generateDeEpicTree(world, rand, x, y, z);
 	}
 }
--- net/minecraft/src/NBTTagFloat.java
+++ net/minecraft/src/NBTTagFloat.java
@@ -10,16 +10,16 @@
 	public NBTTagFloat() {
 	}
 
-	public NBTTagFloat(float var1) {
-		this.floatValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeFloat(this.floatValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.floatValue = var1.readFloat();
+	public NBTTagFloat(float value) {
+		this.floatValue = value;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeFloat(this.floatValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.floatValue = dataInput.readFloat();
 	}
 
 	public byte getType() {
--- /dev/null
+++ net/minecraft/src/ItemTheOneTrueBook.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+public class ItemTheOneTrueBook extends Item {
+	private int field_9430_0n7196x8m1y97nNMMbMa9sx0c2q2aknEmhr0udy0BRp7AUb0eN1sq72Npp42 = 805;
+
+	public ItemTheOneTrueBook(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		worldObj.playSoundAtEntity(entityPlayer, "ext.notif", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+		GuiInGameUnknownClass2 guiInGameUnknownClass24 = (GuiInGameUnknownClass2)InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.field_11177_7Zksb7i503i87T27QXh6g1K1pS0mrm03cH6J60Ws3B3hciqhuD9PIOw861xp.peek();
+		if(guiInGameUnknownClass24 == null || guiInGameUnknownClass24.field_8627_0ZmECs21Yya5NZUsnBNbB5tPFhkwONMzlzVXHX4jsV5aynDc020B97BLqocx != this.field_9430_0n7196x8m1y97nNMMbMa9sx0c2q2aknEmhr0udy0BRp7AUb0eN1sq72Npp42) {
+			InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11171_604vK63ksNcNlyaekc36K9YTmY8326K6noo7h77989I2TsYQ61KM5M25Nii9("The One True Book \nIn the end, this world was for you, and when you shall turn away\nIt will remember. Its past. Your present.\nAnd both will rest, knowing that they will inspire each other\n carrying pieces further forth.\nSo that all shall be well, and all matter of thing shall be well, in the end.\nAgainst all odds, just you wait. ", 20000, this.field_9430_0n7196x8m1y97nNMMbMa9sx0c2q2aknEmhr0udy0BRp7AUb0eN1sq72Npp42);
+		}
+
+		return itemStack;
+	}
+}
--- net/minecraft/src/Packet14BlockDig.java
+++ net/minecraft/src/Packet14BlockDig.java
@@ -14,32 +14,32 @@
 	public Packet14BlockDig() {
 	}
 
-	public Packet14BlockDig(int var1, int var2, int var3, int var4, int var5) {
-		this.status = var1;
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.zPosition = var4;
-		this.face = var5;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.status = var1.read();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.read();
-		this.zPosition = var1.readInt();
-		this.face = var1.read();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.write(this.status);
-		var1.writeInt(this.xPosition);
-		var1.write(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.write(this.face);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleBlockDig(this);
+	public Packet14BlockDig(int status, int x, int y, int z, int side) {
+		this.status = status;
+		this.xPosition = x;
+		this.yPosition = y;
+		this.zPosition = z;
+		this.face = side;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.status = dataInputStream.read();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.read();
+		this.zPosition = dataInputStream.readInt();
+		this.face = dataInputStream.read();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.write(this.status);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.write(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.write(this.face);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleBlockDig(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/VisualsLettering.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+class VisualsLettering extends Visuals {
+    final /* synthetic */ VisualsManager field_10083_40f1ED9uMxNlE9cpLK62yg10BVCX13juZ6RaN653A5ev5Ct01573O1pb276z;
+    
+    VisualsLettering(final VisualsManager la) {
+        this.field_10083_40f1ED9uMxNlE9cpLK62yg10BVCX13juZ6RaN653A5ev5Ct01573O1pb276z = la;
+    }
+    
+    @Override
+    public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+        return "/unl/375305cc-f415-435b-baec-26a60ccf5eac.xAL";
+    }
+    
+    @Override
+    public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(final Object... arr) {
+        if (arr[0] instanceof WorldZMSpawnWorld1 && (int)arr[1] == 6) {
+            this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+            return true;
+        }
+        return false;
+    }
+    
+    @Override
+    public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+        return "unlock--lettering";
+    }
+    
+    @Override
+    public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+        return "Lettering";
+    }
+    
+    @Override
+    public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+        return "Complete the Easter Egg on [ZM]Ruinen der Untoten";
+    }
+}
--- /dev/null
+++ net/minecraft/src/CommandMcWinterlevel.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandMcWinterlevel extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8592_477TiBuIqF1lcN9xIj9UGYaDT7v0o1qA2ABOc5SK4HYwL25sjHfTd813nwS1;
+    
+    CommandMcWinterlevel(final CommandManager abb) {
+        this.field_8592_477TiBuIqF1lcN9xIj9UGYaDT7v0o1qA2ABOc5SK4HYwL25sjHfTd813nwS1 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.theWorld.snowCovered = ((int)arr[0] == 1);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return InputHandler.mc.theWorld.snowCovered ? "1" : "0";
+    }
+}
--- net/minecraft/src/ItemDoor.java
+++ net/minecraft/src/ItemDoor.java
@@ -2,69 +2,78 @@
 
 public class ItemDoor extends Item {
 	private Material material;
-
-	public ItemDoor(int var1, Material var2) {
-		super(var1);
-		this.material = var2;
+	private BlockDoor target;
+
+	public ItemDoor(int integer, Material sx, BlockDoor eh) {
+		this(integer, sx);
+		this.target = eh;
+	}
+
+	public ItemDoor(int itemID, Material material) {
+		super(itemID);
+		this.target = null;
+		this.material = material;
 		this.maxDamage = 64;
 		this.maxStackSize = 1;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 != 1) {
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(side != 1) {
 			return false;
 		} else {
-			++var5;
-			Block var8;
-			if(this.material == Material.wood) {
-				var8 = Block.doorWood;
-			} else {
-				var8 = Block.doorSteel;
+			++y;
+			Object object8 = this.target;
+			if(object8 == null) {
+				if(this.material == Material.wood) {
+					object8 = Block.doorWood;
+				} else {
+					object8 = Block.doorSteel;
+				}
 			}
 
-			if(!var8.canPlaceBlockAt(var3, var4, var5, var6)) {
+			if(!((Block)object8).canPlaceBlockAt(world, x, y, z)) {
 				return false;
 			} else {
-				int var9 = MathHelper.floor_double((double)((var2.rotationYaw + 180.0F) * 4.0F / 360.0F) - 0.5D) & 3;
-				byte var10 = 0;
-				byte var11 = 0;
-				if(var9 == 0) {
-					var11 = 1;
-				}
-
-				if(var9 == 1) {
-					var10 = -1;
-				}
-
-				if(var9 == 2) {
-					var11 = -1;
-				}
-
-				if(var9 == 3) {
-					var10 = 1;
-				}
-
-				int var12 = (var3.isBlockNormalCube(var4 - var10, var5, var6 - var11) ? 1 : 0) + (var3.isBlockNormalCube(var4 - var10, var5 + 1, var6 - var11) ? 1 : 0);
-				int var13 = (var3.isBlockNormalCube(var4 + var10, var5, var6 + var11) ? 1 : 0) + (var3.isBlockNormalCube(var4 + var10, var5 + 1, var6 + var11) ? 1 : 0);
-				boolean var14 = var3.getBlockId(var4 - var10, var5, var6 - var11) == var8.blockID || var3.getBlockId(var4 - var10, var5 + 1, var6 - var11) == var8.blockID;
-				boolean var15 = var3.getBlockId(var4 + var10, var5, var6 + var11) == var8.blockID || var3.getBlockId(var4 + var10, var5 + 1, var6 + var11) == var8.blockID;
-				boolean var16 = false;
-				if(var14 && !var15) {
-					var16 = true;
-				} else if(var13 > var12) {
-					var16 = true;
-				}
-
-				if(var16) {
-					var9 = var9 - 1 & 3;
-					var9 += 4;
-				}
-
-				var3.setBlockWithNotify(var4, var5, var6, var8.blockID);
-				var3.setBlockMetadataWithNotify(var4, var5, var6, var9);
-				var3.setBlockWithNotify(var4, var5 + 1, var6, var8.blockID);
-				var3.setBlockMetadataWithNotify(var4, var5 + 1, var6, var9 + 8);
-				--var1.stackSize;
+				int i9 = MathHelper.floor_double((double)((entityPlayer.rotationYaw + 180.0F) * 4.0F / 360.0F) - 0.5D) & 3;
+				byte b10 = 0;
+				byte b11 = 0;
+				if(i9 == 0) {
+					b11 = 1;
+				}
+
+				if(i9 == 1) {
+					b10 = -1;
+				}
+
+				if(i9 == 2) {
+					b11 = -1;
+				}
+
+				if(i9 == 3) {
+					b10 = 1;
+				}
+
+				int i12 = (world.isBlockNormalCube(x - b10, y, z - b11) ? 1 : 0) + (world.isBlockNormalCube(x - b10, y + 1, z - b11) ? 1 : 0);
+				int i13 = (world.isBlockNormalCube(x + b10, y, z + b11) ? 1 : 0) + (world.isBlockNormalCube(x + b10, y + 1, z + b11) ? 1 : 0);
+				boolean z14 = world.getBlockId(x - b10, y, z - b11) == ((Block)object8).blockID || world.getBlockId(x - b10, y + 1, z - b11) == ((Block)object8).blockID;
+				boolean z15 = world.getBlockId(x + b10, y, z + b11) == ((Block)object8).blockID || world.getBlockId(x + b10, y + 1, z + b11) == ((Block)object8).blockID;
+				boolean z16 = false;
+				if(z14 && !z15) {
+					z16 = true;
+				} else if(i13 > i12) {
+					z16 = true;
+				}
+
+				if(z16) {
+					i9 = i9 - 1 & 3;
+					i9 += 4;
+				}
+
+				world.setBlockWithNotify(x, y, z, ((Block)object8).blockID);
+				world.setBlockMetadataWithNotify(x, y, z, i9);
+				world.setBlockWithNotify(x, y + 1, z, ((Block)object8).blockID);
+				world.setBlockMetadataWithNotify(x, y + 1, z, i9 + 8);
+				--stack.stackSize;
 				return true;
 			}
 		}
--- net/minecraft/src/RenderMinecart.java
+++ net/minecraft/src/RenderMinecart.java
@@ -10,73 +10,73 @@
 		this.modelMinecart = new ModelMinecart();
 	}
 
-	public void renderMinecart(EntityMinecart var1, double var2, double var4, double var6, float var8, float var9) {
+	public void renderMinecart(EntityMinecart bg, double double2, double double3, double double4, float float5, float float6) {
 		GL11.glPushMatrix();
-		double var10 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var9;
-		double var12 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var9;
-		double var14 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var9;
-		double var16 = (double)0.3F;
-		Vec3D var18 = var1.getPos(var10, var12, var14);
-		float var19 = var1.prevRotationPitch + (var1.rotationPitch - var1.prevRotationPitch) * var9;
-		if(var18 != null) {
-			Vec3D var20 = var1.getPosOffset(var10, var12, var14, var16);
-			Vec3D var21 = var1.getPosOffset(var10, var12, var14, -var16);
-			if(var20 == null) {
-				var20 = var18;
-			}
-
-			if(var21 == null) {
-				var21 = var18;
-			}
-
-			var2 += var18.xCoord - var10;
-			var4 += (var20.yCoord + var21.yCoord) / 2.0D - var12;
-			var6 += var18.zCoord - var14;
-			Vec3D var22 = var21.addVector(-var20.xCoord, -var20.yCoord, -var20.zCoord);
-			if(var22.lengthVector() != 0.0D) {
-				var22 = var22.normalize();
-				var8 = (float)(Math.atan2(var22.zCoord, var22.xCoord) * 180.0D / Math.PI);
-				var19 = (float)(Math.atan(var22.yCoord) * 73.0D);
-			}
-		}
-
-		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
-		GL11.glRotatef(180.0F - var8, 0.0F, 1.0F, 0.0F);
-		GL11.glRotatef(-var19, 0.0F, 0.0F, 1.0F);
-		float var23 = (float)var1.timeSinceHit - var9;
-		float var24 = (float)var1.damageTaken - var9;
-		if(var24 < 0.0F) {
-			var24 = 0.0F;
-		}
-
-		if(var23 > 0.0F) {
-			GL11.glRotatef(MathHelper.sin(var23) * var23 * var24 / 10.0F * (float)var1.forwardDirection, 1.0F, 0.0F, 0.0F);
-		}
-
-		if(var1.minecartType != 0) {
-			this.loadTexture("/terrain.png");
-			float var25 = 12.0F / 16.0F;
-			GL11.glScalef(var25, var25, var25);
-			GL11.glTranslatef(0.0F, 5.0F / 16.0F, 0.0F);
+		double d10 = bg.lastTickPosX + (bg.posX - bg.lastTickPosX) * (double)float6;
+		double d12 = bg.lastTickPosY + (bg.posY - bg.lastTickPosY) * (double)float6;
+		double d14 = bg.lastTickPosZ + (bg.posZ - bg.lastTickPosZ) * (double)float6;
+		double d16 = (double)0.3F;
+		Vec3D vec3D18 = bg.getPos(d10, d12, d14);
+		float f19 = bg.prevRotationPitch + (bg.rotationPitch - bg.prevRotationPitch) * float6;
+		if(vec3D18 != null) {
+			Vec3D vec3D20 = bg.getPosOffset(d10, d12, d14, d16);
+			Vec3D vec3D21 = bg.getPosOffset(d10, d12, d14, -d16);
+			if(vec3D20 == null) {
+				vec3D20 = vec3D18;
+			}
+
+			if(vec3D21 == null) {
+				vec3D21 = vec3D18;
+			}
+
+			double2 += vec3D18.xCoord - d10;
+			double3 += (vec3D20.yCoord + vec3D21.yCoord) / 2.0D - d12;
+			double4 += vec3D18.zCoord - d14;
+			Vec3D vec3D22 = vec3D21.addVector(-vec3D20.xCoord, -vec3D20.yCoord, -vec3D20.zCoord);
+			if(vec3D22.lengthVector() != 0.0D) {
+				vec3D22 = vec3D22.normalize();
+				float5 = (float)(Math.atan2(vec3D22.zCoord, vec3D22.xCoord) * 180.0D / Math.PI);
+				f19 = (float)(Math.atan(vec3D22.yCoord) * 73.0D);
+			}
+		}
+
+		GL11.glTranslatef((float)double2, (float)double3, (float)double4);
+		GL11.glRotatef(180.0F - float5, 0.0F, 1.0F, 0.0F);
+		GL11.glRotatef(-f19, 0.0F, 0.0F, 1.0F);
+		float f23 = (float)bg.timeSinceHit - float6;
+		float f24 = (float)bg.damageTaken - float6;
+		if(f24 < 0.0F) {
+			f24 = 0.0F;
+		}
+
+		if(f23 > 0.0F) {
+			GL11.glRotatef(MathHelper.sin(f23) * f23 * f24 / 10.0F * (float)bg.forwardDirection, 1.0F, 0.0F, 0.0F);
+		}
+
+		if(bg.minecartType != 0) {
+			this.loadTexture(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9796_62Ccm2XAR6JqSDTgV762x61j971DNgsIrMhaXZxPs0fQnBC7ymR2l1v1V22X));
+			float f25 = 0.75F;
+			GL11.glScalef(f25, f25, f25);
+			GL11.glTranslatef(0.0F, 0.3125F, 0.0F);
 			GL11.glRotatef(90.0F, 0.0F, 1.0F, 0.0F);
-			if(var1.minecartType == 1) {
+			if(bg.minecartType == 1) {
 				(new RenderBlocks()).renderBlockOnInventory(Block.chest);
-			} else if(var1.minecartType == 2) {
+			} else if(bg.minecartType == 2) {
 				(new RenderBlocks()).renderBlockOnInventory(Block.stoneOvenIdle);
 			}
 
 			GL11.glRotatef(-90.0F, 0.0F, 1.0F, 0.0F);
-			GL11.glTranslatef(0.0F, -(5.0F / 16.0F), 0.0F);
-			GL11.glScalef(1.0F / var25, 1.0F / var25, 1.0F / var25);
+			GL11.glTranslatef(0.0F, -0.3125F, 0.0F);
+			GL11.glScalef(1.0F / f25, 1.0F / f25, 1.0F / f25);
 		}
 
 		this.loadTexture("/item/cart.png");
 		GL11.glScalef(-1.0F, -1.0F, 1.0F);
-		this.modelMinecart.render(0.0F, 0.0F, -0.1F, 0.0F, 0.0F, 1.0F / 16.0F);
+		this.modelMinecart.render(0.0F, 0.0F, -0.1F, 0.0F, 0.0F, 0.0625F);
 		GL11.glPopMatrix();
 	}
 
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderMinecart((EntityMinecart)var1, var2, var4, var6, var8, var9);
+	public void doRender(Entity xy, double double2, double double3, double double4, float float5, float float6) {
+		this.renderMinecart((EntityMinecart)xy, double2, double3, double4, float5, float6);
 	}
 }
--- net/minecraft/src/NibbleArray.java
+++ net/minecraft/src/NibbleArray.java
@@ -3,29 +3,29 @@
 public class NibbleArray {
 	public final byte[] data;
 
-	public NibbleArray(int var1) {
-		this.data = new byte[var1 >> 1];
-	}
-
-	public NibbleArray(byte[] var1) {
-		this.data = var1;
-	}
-
-	public int get(int var1, int var2, int var3) {
-		int var4 = var1 << 11 | var3 << 7 | var2;
-		int var5 = var4 >> 1;
-		int var6 = var4 & 1;
-		return var6 == 0 ? this.data[var5] & 15 : this.data[var5] >> 4 & 15;
-	}
-
-	public void set(int var1, int var2, int var3, int var4) {
-		int var5 = var1 << 11 | var3 << 7 | var2;
-		int var6 = var5 >> 1;
-		int var7 = var5 & 1;
-		if(var7 == 0) {
-			this.data[var6] = (byte)(this.data[var6] & 240 | var4 & 15);
+	public NibbleArray(int size) {
+		this.data = new byte[size >> 1];
+	}
+
+	public NibbleArray(byte[] data) {
+		this.data = data;
+	}
+
+	public int get(int x, int y, int z) {
+		int i4 = x << 11 | z << 7 | y;
+		int i5 = i4 >> 1;
+		int i6 = i4 & 1;
+		return i6 == 0 ? this.data[i5] & 15 : this.data[i5] >> 4 & 15;
+	}
+
+	public void set(int x, int y, int z, int value) {
+		int i5 = x << 11 | z << 7 | y;
+		int i6 = i5 >> 1;
+		int i7 = i5 & 1;
+		if(i7 == 0) {
+			this.data[i6] = (byte)(this.data[i6] & 240 | value & 15);
 		} else {
-			this.data[var6] = (byte)(this.data[var6] & 15 | (var4 & 15) << 4);
+			this.data[i6] = (byte)(this.data[i6] & 15 | (value & 15) << 4);
 		}
 
 	}
--- net/minecraft/src/BlockDirt.java
+++ net/minecraft/src/BlockDirt.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class BlockDirt extends Block {
-	protected BlockDirt(int var1, int var2) {
-		super(var1, var2, Material.grass);
+	protected BlockDirt(int id, int blockIndex) {
+		super(id, blockIndex, Material.grass);
 	}
 }
--- /dev/null
+++ net/minecraft/src/GenOnWater.java
@@ -1,0 +1,26 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class GenOnWater extends WorldGenerator {
+	private int a;
+
+	public GenOnWater(int integer) {
+		this.a = integer;
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 64; ++i6) {
+			int i7 = z + rand.nextInt(8) - rand.nextInt(8);
+			int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+			int i9 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i10 = world.getBlockId(i9, i8 - 1, i7);
+			boolean z11 = i10 == 9 || i10 == 79;
+			if(world.getBlockId(i9, i8, i7) == 0 && z11) {
+				world.setBlock(i9, i8, i7, this.a);
+			}
+		}
+
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeUnknownClass3.java
@@ -1,0 +1,32 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeUnknownClass3 implements BiomeInterface {
+	private final NoiseGeneratorOctaves[] field_10192_2VoR9snJDCkHbGRi5LT2To3wWU3R7xk8Oe4T0w92ra69S51HZ0RXUsE7098O;
+	private final NoiseGeneratorOctaves[] field_10193_4hx74qcm6424qX4DgsPbi180SpoqO3zJ95I5N9sgysDE2s6N1m674oTeTHM2;
+	private final Random field_10191_4f75GwDL0VFE8Vc129gmDF7ihJY56448qA8rP8quzgMHYB6Ke6amqqxgP54C;
+
+	public BiomeUnknownClass3(Random random) {
+		this.field_10192_2VoR9snJDCkHbGRi5LT2To3wWU3R7xk8Oe4T0w92ra69S51HZ0RXUsE7098O = new NoiseGeneratorOctaves[]{new NoiseGeneratorOctaves(random, 4), new NoiseGeneratorOctaves(random, 4), new NoiseGeneratorOctaves(random, 4)};
+		this.field_10193_4hx74qcm6424qX4DgsPbi180SpoqO3zJ95I5N9sgysDE2s6N1m674oTeTHM2 = new NoiseGeneratorOctaves[]{new NoiseGeneratorOctaves(random, 4), new NoiseGeneratorOctaves(random, 4), new NoiseGeneratorOctaves(random, 4)};
+		this.field_10191_4f75GwDL0VFE8Vc129gmDF7ihJY56448qA8rP8quzgMHYB6Ke6amqqxgP54C = random;
+	}
+
+	public BiomeUnknownClass3 func_10190_9hA9hGtqVhzjB1mqm8q4p5FR00Mv2wW72R61Kce04yYaa19rm57UsiH9mAq0() {
+		WorldGenMyconUnknownClass.func_9979_9JNUbhbk292KcCQ94Cqr7mT8uN1dJGymij9j6488Z69GSfe4353u9Nj2PWn2(this.field_10191_4f75GwDL0VFE8Vc129gmDF7ihJY56448qA8rP8quzgMHYB6Ke6amqqxgP54C);
+		return this;
+	}
+
+	public double func_10184_39mJVmq3bl4dbH51995p9tocRB43bFXruO32GkxVTy54fzIxdy5dt9OeTC2A(int integer1, int integer2, EnumWorldGenerator _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178) {
+		return this.field_10192_2VoR9snJDCkHbGRi5LT2To3wWU3R7xk8Oe4T0w92ra69S51HZ0RXUsE7098O[_7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178.ordinal()].generateNoiseOctaves((double)integer1 / 32.0D, (double)integer2 / 32.0D);
+	}
+
+	public double func_10186_4hoZRS129yUan88AHp1ksCfja1h93mYKfFda82Qtd8pqKm7G4bgpnYsijiMu(int integer1, int integer2, EnumWorldGenerator _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178) {
+		return this.field_10193_4hx74qcm6424qX4DgsPbi180SpoqO3zJ95I5N9sgysDE2s6N1m674oTeTHM2[_7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178.ordinal()].generateNoiseOctaves((double)integer1 / 32.0D, (double)integer2 / 32.0D);
+	}
+
+	public WorldGenMyconUnknownClass func_10185_7j1lR4019pucW00n7wn38afjBd62vEMB6B6SVB9068f4kyPzw4E6wI65ufr8(int integer1, int integer2, EnumWorldGenerator _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178) {
+		return WorldGenMyconUnknownClass.func_9978_2dCM22Pc7rV0IQo46JM3ja84x9AHCGNPeSCDVFoTi3969B8hv2sM7nr6o61r(this.func_10184_39mJVmq3bl4dbH51995p9tocRB43bFXruO32GkxVTy54fzIxdy5dt9OeTC2A(integer1, integer2, _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178), this.func_10186_4hoZRS129yUan88AHp1ksCfja1h93mYKfFda82Qtd8pqKm7G4bgpnYsijiMu(integer1, integer2, _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178), _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockStairsOld.java
@@ -1,0 +1,251 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Random;
+
+public class BlockStairsOld extends BlockOld {
+	private BlockOld modelBlock;
+
+	protected BlockStairsOld(int integer, BlockOld m) {
+		super(integer, m.blockIndexInTexture, m.material);
+		this.modelBlock = m;
+		this.setHardness(m.hardness);
+		this.setResistance(m.resistance / 3.0F);
+		this.setStepSound(m.stepSound);
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 10;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		return super.shouldSideBeRendered(abt, integer2, integer3, integer4, integer5);
+	}
+
+	public void getCollidingBoundingBoxes(World vg, int integer2, int integer3, int integer4, AxisAlignedBB zb, ArrayList arrayList) {
+		int i7 = vg.getBlockMetadata(integer2, integer3, integer4);
+		if(i7 == 0) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
+			super.getCollidingBoundingBoxes(vg, integer2, integer3, integer4, zb, arrayList);
+			this.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+			super.getCollidingBoundingBoxes(vg, integer2, integer3, integer4, zb, arrayList);
+		} else if(i7 == 1) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 1.0F, 1.0F);
+			super.getCollidingBoundingBoxes(vg, integer2, integer3, integer4, zb, arrayList);
+			this.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
+			super.getCollidingBoundingBoxes(vg, integer2, integer3, integer4, zb, arrayList);
+		} else if(i7 == 2) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 0.5F);
+			super.getCollidingBoundingBoxes(vg, integer2, integer3, integer4, zb, arrayList);
+			this.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 1.0F, 1.0F);
+			super.getCollidingBoundingBoxes(vg, integer2, integer3, integer4, zb, arrayList);
+		} else if(i7 == 3) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
+			super.getCollidingBoundingBoxes(vg, integer2, integer3, integer4, zb, arrayList);
+			this.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
+			super.getCollidingBoundingBoxes(vg, integer2, integer3, integer4, zb, arrayList);
+		}
+
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		if(!vg.multiplayerWorld) {
+			if(vg.getBlockMaterial(integer2, integer3 + 1, integer4).isSolid()) {
+				vg.setBlockWithNotify(integer2, integer3, integer4, this.modelBlock.blockID);
+			} else {
+				this.updateState(vg, integer2, integer3, integer4);
+				this.updateState(vg, integer2 + 1, integer3 - 1, integer4);
+				this.updateState(vg, integer2 - 1, integer3 - 1, integer4);
+				this.updateState(vg, integer2, integer3 - 1, integer4 - 1);
+				this.updateState(vg, integer2, integer3 - 1, integer4 + 1);
+				this.updateState(vg, integer2 + 1, integer3 + 1, integer4);
+				this.updateState(vg, integer2 - 1, integer3 + 1, integer4);
+				this.updateState(vg, integer2, integer3 + 1, integer4 - 1);
+				this.updateState(vg, integer2, integer3 + 1, integer4 + 1);
+			}
+
+			this.modelBlock.onNeighborBlockChange(vg, integer2, integer3, integer4, integer5);
+		}
+	}
+
+	private void updateState(World vg, int integer2, int integer3, int integer4) {
+		if(this.isBlockStair(vg, integer2, integer3, integer4)) {
+			byte b5 = -1;
+			if(this.isBlockStair(vg, integer2 + 1, integer3 + 1, integer4)) {
+				b5 = 0;
+			}
+
+			if(this.isBlockStair(vg, integer2 - 1, integer3 + 1, integer4)) {
+				b5 = 1;
+			}
+
+			if(this.isBlockStair(vg, integer2, integer3 + 1, integer4 + 1)) {
+				b5 = 2;
+			}
+
+			if(this.isBlockStair(vg, integer2, integer3 + 1, integer4 - 1)) {
+				b5 = 3;
+			}
+
+			if(b5 < 0) {
+				if(this.isBlockSolid(vg, integer2 + 1, integer3, integer4) && !this.isBlockSolid(vg, integer2 - 1, integer3, integer4)) {
+					b5 = 0;
+				}
+
+				if(this.isBlockSolid(vg, integer2 - 1, integer3, integer4) && !this.isBlockSolid(vg, integer2 + 1, integer3, integer4)) {
+					b5 = 1;
+				}
+
+				if(this.isBlockSolid(vg, integer2, integer3, integer4 + 1) && !this.isBlockSolid(vg, integer2, integer3, integer4 - 1)) {
+					b5 = 2;
+				}
+
+				if(this.isBlockSolid(vg, integer2, integer3, integer4 - 1) && !this.isBlockSolid(vg, integer2, integer3, integer4 + 1)) {
+					b5 = 3;
+				}
+			}
+
+			if(b5 < 0) {
+				if(this.isBlockStair(vg, integer2 - 1, integer3 - 1, integer4)) {
+					b5 = 0;
+				}
+
+				if(this.isBlockStair(vg, integer2 + 1, integer3 - 1, integer4)) {
+					b5 = 1;
+				}
+
+				if(this.isBlockStair(vg, integer2, integer3 - 1, integer4 - 1)) {
+					b5 = 2;
+				}
+
+				if(this.isBlockStair(vg, integer2, integer3 - 1, integer4 + 1)) {
+					b5 = 3;
+				}
+			}
+
+			if(b5 >= 0) {
+				vg.setBlockMetadataWithNotify(integer2, integer3, integer4, b5);
+			}
+
+		}
+	}
+
+	private boolean isBlockSolid(World vg, int integer2, int integer3, int integer4) {
+		return vg.getBlockMaterial(integer2, integer3, integer4).isSolid();
+	}
+
+	private boolean isBlockStair(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockId(integer2, integer3, integer4);
+		return i5 == 0 ? false : BlockOld.blocksList[i5].getRenderType() == 10;
+	}
+
+	public void randomDisplayTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		this.modelBlock.randomDisplayTick(vg, integer2, integer3, integer4, random);
+	}
+
+	public void onBlockClicked(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+		this.modelBlock.onBlockClicked(vg, integer2, integer3, integer4, gb);
+	}
+
+	public void onBlockDestroyedByPlayer(World vg, int integer2, int integer3, int integer4, int integer5) {
+		this.modelBlock.onBlockDestroyedByPlayer(vg, integer2, integer3, integer4, integer5);
+	}
+
+	public float getBlockBrightness(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		return this.modelBlock.getBlockBrightness(abt, integer2, integer3, integer4);
+	}
+
+	public float getExplosionResistance(Entity xy) {
+		return this.modelBlock.getExplosionResistance(xy);
+	}
+
+	public int getRenderBlockPass() {
+		return this.modelBlock.getRenderBlockPass();
+	}
+
+	public int idDropped(int integer, Random random) {
+		return this.modelBlock.idDropped(integer, random);
+	}
+
+	public int quantityDropped(Random random) {
+		return this.modelBlock.quantityDropped(random);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int integer1, int integer2) {
+		return this.modelBlock.getBlockTextureFromSideAndMetadata(integer1, integer2);
+	}
+
+	public int getBlockTextureFromSide(int integer) {
+		return this.modelBlock.getBlockTextureFromSide(integer);
+	}
+
+	public int getBlockTexture(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		return this.modelBlock.getBlockTexture(abt, integer2, integer3, integer4, integer5);
+	}
+
+	public int tickRate() {
+		return this.modelBlock.tickRate();
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return this.modelBlock.getSelectedBoundingBoxFromPool(vg, integer2, integer3, integer4);
+	}
+
+	public void velocityToAddToEntity(World vg, int integer2, int integer3, int integer4, Entity xy, Vec3D adm) {
+		this.modelBlock.velocityToAddToEntity(vg, integer2, integer3, integer4, xy, adm);
+	}
+
+	public boolean isCollidable() {
+		return this.modelBlock.isCollidable();
+	}
+
+	public boolean canCollideCheck(int integer, boolean boolean2) {
+		return this.modelBlock.canCollideCheck(integer, boolean2);
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		return this.modelBlock.canPlaceBlockAt(vg, integer2, integer3, integer4);
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+		this.onNeighborBlockChange(vg, integer2, integer3, integer4, 0);
+		this.modelBlock.onBlockAdded(vg, integer2, integer3, integer4);
+	}
+
+	public void onBlockRemoval(World vg, int integer2, int integer3, int integer4) {
+		this.modelBlock.onBlockRemoval(vg, integer2, integer3, integer4);
+	}
+
+	public void dropBlockAsItemWithChance(World vg, int integer2, int integer3, int integer4, int integer5, float float6) {
+		this.modelBlock.dropBlockAsItemWithChance(vg, integer2, integer3, integer4, integer5, float6);
+	}
+
+	public void dropBlockAsItem(World vg, int integer2, int integer3, int integer4, int integer5) {
+		this.modelBlock.dropBlockAsItem(vg, integer2, integer3, integer4, integer5);
+	}
+
+	public void onEntityWalking(World vg, int integer2, int integer3, int integer4, Entity xy) {
+		this.modelBlock.onEntityWalking(vg, integer2, integer3, integer4, xy);
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		this.modelBlock.updateTick(vg, integer2, integer3, integer4, random);
+	}
+
+	public boolean blockActivated(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+		return this.modelBlock.blockActivated(vg, integer2, integer3, integer4, gb);
+	}
+
+	public void onBlockDestroyedByExplosion(World vg, int integer2, int integer3, int integer4) {
+		this.modelBlock.onBlockDestroyedByExplosion(vg, integer2, integer3, integer4);
+	}
+}
--- net/minecraft/src/GuiDownloadTerrain.java
+++ net/minecraft/src/GuiDownloadTerrain.java
@@ -4,11 +4,11 @@
 	private NetClientHandler netHandler;
 	private int updateCounter = 0;
 
-	public GuiDownloadTerrain(NetClientHandler var1) {
-		this.netHandler = var1;
+	public GuiDownloadTerrain(NetClientHandler netHandler) {
+		this.netHandler = netHandler;
 	}
 
-	protected void keyTyped(char var1, int var2) {
+	protected void keyTyped(char character, int key) {
 	}
 
 	public void initGui() {
@@ -27,12 +27,12 @@
 
 	}
 
-	protected void actionPerformed(GuiButton var1) {
+	protected void actionPerformed(GuiButton button) {
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
-		this.drawBackground(0);
-		this.drawCenteredString(this.fontRenderer, "Downloading terrain", this.width / 2, this.height / 2 - 50, 16777215);
-		super.drawScreen(var1, var2, var3);
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		this.drawBackground(0.0F);
+		this.drawCenteredString(this.fontRenderer, "Downloading terrain", this.width / 2, this.height / 2 - 50, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- net/minecraft/src/TileEntitySignRenderer.java
+++ net/minecraft/src/TileEntitySignRenderer.java
@@ -5,57 +5,57 @@
 public class TileEntitySignRenderer extends TileEntitySpecialRenderer {
 	private SignModel modelSign = new SignModel();
 
-	public void renderTileEntitySignAt(TileEntitySign var1, double var2, double var4, double var6, float var8) {
-		Block var9 = var1.getBlockType();
+	public void renderTileEntitySignAt(TileEntitySign dy, double double2, double double3, double double4, float float5) {
+		Block block9 = dy.getBlockType();
 		GL11.glPushMatrix();
-		float var10 = 2.0F / 3.0F;
-		float var12;
-		if(var9 == Block.signStanding) {
-			GL11.glTranslatef((float)var2 + 0.5F, (float)var4 + 12.0F / 16.0F * var10, (float)var6 + 0.5F);
-			float var11 = (float)(var1.getBlockMetadata() * 360) / 16.0F;
-			GL11.glRotatef(-var11, 0.0F, 1.0F, 0.0F);
+		float f10 = 0.6666667F;
+		float f11;
+		if(block9 == Block.signStanding) {
+			GL11.glTranslatef((float)double2 + 0.5F, (float)double3 + 0.75F * f10, (float)double4 + 0.5F);
+			float f12 = (float)(dy.getBlockMetadata() * 360) / 16.0F;
+			GL11.glRotatef(-f12, 0.0F, 1.0F, 0.0F);
 			this.modelSign.signStick.showModel = true;
 		} else {
-			int var16 = var1.getBlockMetadata();
-			var12 = 0.0F;
-			if(var16 == 2) {
-				var12 = 180.0F;
-			}
-
-			if(var16 == 4) {
-				var12 = 90.0F;
-			}
-
-			if(var16 == 5) {
-				var12 = -90.0F;
-			}
-
-			GL11.glTranslatef((float)var2 + 0.5F, (float)var4 + 12.0F / 16.0F * var10, (float)var6 + 0.5F);
-			GL11.glRotatef(-var12, 0.0F, 1.0F, 0.0F);
-			GL11.glTranslatef(0.0F, -(5.0F / 16.0F), -(7.0F / 16.0F));
+			int i16 = dy.getBlockMetadata();
+			f11 = 0.0F;
+			if(i16 == 2) {
+				f11 = 180.0F;
+			}
+
+			if(i16 == 4) {
+				f11 = 90.0F;
+			}
+
+			if(i16 == 5) {
+				f11 = -90.0F;
+			}
+
+			GL11.glTranslatef((float)double2 + 0.5F, (float)double3 + 0.75F * f10, (float)double4 + 0.5F);
+			GL11.glRotatef(-f11, 0.0F, 1.0F, 0.0F);
+			GL11.glTranslatef(0.0F, -0.3125F, -0.4375F);
 			this.modelSign.signStick.showModel = false;
 		}
 
 		this.bindTextureByName("/item/sign.png");
 		GL11.glPushMatrix();
-		GL11.glScalef(var10, -var10, -var10);
+		GL11.glScalef(f10, -f10, -f10);
 		this.modelSign.renderSign();
 		GL11.glPopMatrix();
-		FontRenderer var17 = this.getFontRenderer();
-		var12 = (float)(1.0D / 60.0D) * var10;
-		GL11.glTranslatef(0.0F, 0.5F * var10, 0.07F * var10);
-		GL11.glScalef(var12, -var12, var12);
-		GL11.glNormal3f(0.0F, 0.0F, -1.0F * var12);
+		FontRenderer fontRenderer17 = this.getFontRenderer();
+		f11 = 0.016666668F * f10;
+		GL11.glTranslatef(0.0F, 0.5F * f10, 0.07F * f10);
+		GL11.glScalef(f11, -f11, f11);
+		GL11.glNormal3f(0.0F, 0.0F, -1.0F * f11);
 		GL11.glDepthMask(false);
-		byte var13 = 0;
+		byte b13 = 0;
 
-		for(int var14 = 0; var14 < var1.signText.length; ++var14) {
-			String var15 = var1.signText[var14];
-			if(var14 == var1.lineBeingEdited) {
-				var15 = "> " + var15 + " <";
-				var17.drawString(var15, -var17.getStringWidth(var15) / 2, var14 * 10 - var1.signText.length * 5, var13);
+		for(int i14 = 0; i14 < dy.signText.length; ++i14) {
+			String string15 = dy.signText[i14];
+			if(i14 == dy.lineBeingEdited) {
+				string15 = "> " + string15 + " <";
+				fontRenderer17.drawString(string15, -fontRenderer17.getStringWidth(string15) / 2, i14 * 10 - dy.signText.length * 5, b13);
 			} else {
-				var17.drawString(var15, -var17.getStringWidth(var15) / 2, var14 * 10 - var1.signText.length * 5, var13);
+				fontRenderer17.drawString(string15, -fontRenderer17.getStringWidth(string15) / 2, i14 * 10 - dy.signText.length * 5, b13);
 			}
 		}
 
@@ -64,7 +64,7 @@
 		GL11.glPopMatrix();
 	}
 
-	public void renderTileEntityAt(TileEntity var1, double var2, double var4, double var6, float var8) {
-		this.renderTileEntitySignAt((TileEntitySign)var1, var2, var4, var6, var8);
+	public void renderTileEntityAt(TileEntity tileEntity, double x, double y, double z, float renderPartialTick) {
+		this.renderTileEntitySignAt((TileEntitySign)tileEntity, x, y, z, renderPartialTick);
 	}
 }
--- net/minecraft/src/RenderCreeper.java
+++ net/minecraft/src/RenderCreeper.java
@@ -7,50 +7,50 @@
 		super(new ModelCreeper(), 0.5F);
 	}
 
-	protected void updateCreeperScale(EntityCreeper var1, float var2) {
-		float var4 = var1.getCreeperFlashTime(var2);
-		float var5 = 1.0F + MathHelper.sin(var4 * 100.0F) * var4 * 0.01F;
-		if(var4 < 0.0F) {
-			var4 = 0.0F;
-		}
-
-		if(var4 > 1.0F) {
-			var4 = 1.0F;
-		}
-
-		var4 *= var4;
-		var4 *= var4;
-		float var6 = (1.0F + var4 * 0.4F) * var5;
-		float var7 = (1.0F + var4 * 0.1F) / var5;
-		GL11.glScalef(var6, var7, var6);
+	protected void updateCreeperScale(EntityCreeper sp, float float2) {
+		float f3 = sp.getCreeperFlashTime(float2);
+		float f4 = 1.0F + MathHelper.sin(f3 * 100.0F) * f3 * 0.01F;
+		if(f3 < 0.0F) {
+			f3 = 0.0F;
+		}
+
+		if(f3 > 1.0F) {
+			f3 = 1.0F;
+		}
+
+		f3 *= f3;
+		f3 *= f3;
+		float f5 = (1.0F + f3 * 0.4F) * f4;
+		float f6 = (1.0F + f3 * 0.1F) / f4;
+		GL11.glScalef(f5, f6, f5);
 	}
 
-	protected int updateCreeperColorMultiplier(EntityCreeper var1, float var2, float var3) {
-		float var5 = var1.getCreeperFlashTime(var3);
-		if((int)(var5 * 10.0F) % 2 == 0) {
+	protected int updateCreeperColorMultiplier(EntityCreeper sp, float float2, float float3) {
+		float f4 = sp.getCreeperFlashTime(float3);
+		if((int)(f4 * 10.0F) % 2 == 0) {
 			return 0;
 		} else {
-			int var6 = (int)(var5 * 0.2F * 255.0F);
-			if(var6 < 0) {
-				var6 = 0;
-			}
-
-			if(var6 > 255) {
-				var6 = 255;
-			}
-
-			short var7 = 255;
-			short var8 = 255;
-			short var9 = 255;
-			return var6 << 24 | var7 << 16 | var8 << 8 | var9;
+			int i5 = (int)(f4 * 0.2F * 255.0F);
+			if(i5 < 0) {
+				i5 = 0;
+			}
+
+			if(i5 > 255) {
+				i5 = 255;
+			}
+
+			short s6 = 255;
+			short s7 = 255;
+			short s8 = 255;
+			return i5 << 24 | s6 << 16 | s7 << 8 | s8;
 		}
 	}
 
-	protected void preRenderCallback(EntityLiving var1, float var2) {
-		this.updateCreeperScale((EntityCreeper)var1, var2);
+	protected void preRenderCallback(EntityLiving zi, float float2) {
+		this.updateCreeperScale((EntityCreeper)zi, float2);
 	}
 
-	protected int getColorMultiplier(EntityLiving var1, float var2, float var3) {
-		return this.updateCreeperColorMultiplier((EntityCreeper)var1, var2, var3);
+	protected int getColorMultiplier(EntityLiving zi, float float2, float float3) {
+		return this.updateCreeperColorMultiplier((EntityCreeper)zi, float2, float3);
 	}
 }
--- net/minecraft/src/TileEntityFurnace.java
+++ net/minecraft/src/TileEntityFurnace.java
@@ -10,92 +10,96 @@
 		return this.furnaceItemStacks.length;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.furnaceItemStacks[var1];
+	public ItemStack getStackInSlot(int slot) {
+		return this.furnaceItemStacks[slot];
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
-		if(this.furnaceItemStacks[var1] != null) {
-			ItemStack var3;
-			if(this.furnaceItemStacks[var1].stackSize <= var2) {
-				var3 = this.furnaceItemStacks[var1];
-				this.furnaceItemStacks[var1] = null;
-				return var3;
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.furnaceItemStacks[slot] != null) {
+			ItemStack itemStack3;
+			if(this.furnaceItemStacks[slot].stackSize <= stackSize) {
+				itemStack3 = this.furnaceItemStacks[slot];
+				this.furnaceItemStacks[slot] = null;
+				return itemStack3;
 			} else {
-				var3 = this.furnaceItemStacks[var1].splitStack(var2);
-				if(this.furnaceItemStacks[var1].stackSize == 0) {
-					this.furnaceItemStacks[var1] = null;
+				itemStack3 = this.furnaceItemStacks[slot].splitStack(stackSize);
+				if(this.furnaceItemStacks[slot].stackSize == 0) {
+					this.furnaceItemStacks[slot] = null;
 				}
 
-				return var3;
+				return itemStack3;
 			}
 		} else {
 			return null;
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.furnaceItemStacks[var1] = var2;
-		if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-			var2.stackSize = this.getInventoryStackLimit();
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.furnaceItemStacks[slot] = itemStack;
+		if(itemStack != null && itemStack.stackSize > this.getInventoryStackLimit()) {
+			itemStack.stackSize = this.getInventoryStackLimit();
 		}
 
+	}
+
+	public void onInventoryChanged() {
+		super.onInventoryChanged();
 	}
 
 	public String getInvName() {
 		return "Chest";
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		super.readFromNBT(var1);
-		NBTTagList var2 = var1.getTagList("Items");
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		super.readFromNBT(nbttagcompound);
+		NBTTagList nBTTagList2 = nbttagcompound.getTagList("Items");
 		this.furnaceItemStacks = new ItemStack[this.getSizeInventory()];
 
-		for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-			NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-			byte var5 = var4.getByte("Slot");
-			if(var5 >= 0 && var5 < this.furnaceItemStacks.length) {
-				this.furnaceItemStacks[var5] = new ItemStack(var4);
+		for(int i3 = 0; i3 < nBTTagList2.tagCount(); ++i3) {
+			NBTTagCompound nBTTagCompound4 = (NBTTagCompound)nBTTagList2.tagAt(i3);
+			byte b5 = nBTTagCompound4.getByte("Slot");
+			if(b5 >= 0 && b5 < this.furnaceItemStacks.length) {
+				this.furnaceItemStacks[b5] = new ItemStack(nBTTagCompound4);
 			}
 		}
 
-		this.furnaceBurnTime = var1.getShort("BurnTime");
-		this.furnaceCookTime = var1.getShort("CookTime");
+		this.furnaceBurnTime = nbttagcompound.getShort("BurnTime");
+		this.furnaceCookTime = nbttagcompound.getShort("CookTime");
 		this.currentItemBurnTime = this.getItemBurnTime(this.furnaceItemStacks[1]);
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		super.writeToNBT(var1);
-		var1.setShort("BurnTime", (short)this.furnaceBurnTime);
-		var1.setShort("CookTime", (short)this.furnaceCookTime);
-		NBTTagList var2 = new NBTTagList();
+	public void writeToNBT(NBTTagCompound nbttagcompound) {
+		super.writeToNBT(nbttagcompound);
+		nbttagcompound.setShort("BurnTime", (short)this.furnaceBurnTime);
+		nbttagcompound.setShort("CookTime", (short)this.furnaceCookTime);
+		NBTTagList nBTTagList2 = new NBTTagList();
 
-		for(int var3 = 0; var3 < this.furnaceItemStacks.length; ++var3) {
-			if(this.furnaceItemStacks[var3] != null) {
-				NBTTagCompound var4 = new NBTTagCompound();
-				var4.setByte("Slot", (byte)var3);
-				this.furnaceItemStacks[var3].writeToNBT(var4);
-				var2.setTag(var4);
+		for(int i3 = 0; i3 < this.furnaceItemStacks.length; ++i3) {
+			if(this.furnaceItemStacks[i3] != null) {
+				NBTTagCompound nBTTagCompound4 = new NBTTagCompound();
+				nBTTagCompound4.setByte("Slot", (byte)i3);
+				this.furnaceItemStacks[i3].writeToNBT(nBTTagCompound4);
+				nBTTagList2.setTag(nBTTagCompound4);
 			}
 		}
 
-		var1.setTag("Items", var2);
+		nbttagcompound.setTag("Items", nBTTagList2);
 	}
 
 	public int getInventoryStackLimit() {
 		return 64;
 	}
 
-	public int getCookProgressScaled(int var1) {
-		return this.furnaceCookTime * var1 / 200;
+	public int getCookProgressScaled(int scale) {
+		return this.furnaceCookTime * scale / 200;
 	}
 
-	public int getBurnTimeRemainingScaled(int var1) {
+	public int getBurnTimeRemainingScaled(int scale) {
 		if(this.currentItemBurnTime == 0) {
 			this.currentItemBurnTime = 200;
 		}
 
-		return this.furnaceBurnTime * var1 / this.currentItemBurnTime;
+		return this.furnaceBurnTime * scale / this.currentItemBurnTime;
 	}
 
 	public boolean isBurning() {
@@ -103,8 +107,8 @@
 	}
 
 	public void updateEntity() {
-		boolean var1 = this.furnaceBurnTime > 0;
-		boolean var2 = false;
+		boolean z1 = this.furnaceBurnTime > 0;
+		boolean z2 = false;
 		if(this.furnaceBurnTime > 0) {
 			--this.furnaceBurnTime;
 		}
@@ -113,7 +117,7 @@
 			if(this.furnaceBurnTime == 0 && this.canSmelt()) {
 				this.currentItemBurnTime = this.furnaceBurnTime = this.getItemBurnTime(this.furnaceItemStacks[1]);
 				if(this.furnaceBurnTime > 0) {
-					var2 = true;
+					z2 = true;
 					if(this.furnaceItemStacks[1] != null) {
 						--this.furnaceItemStacks[1].stackSize;
 						if(this.furnaceItemStacks[1].stackSize == 0) {
@@ -128,19 +132,19 @@
 				if(this.furnaceCookTime == 200) {
 					this.furnaceCookTime = 0;
 					this.smeltItem();
-					var2 = true;
+					z2 = true;
 				}
 			} else {
 				this.furnaceCookTime = 0;
 			}
 
-			if(var1 != this.furnaceBurnTime > 0) {
-				var2 = true;
+			if(z1 != this.furnaceBurnTime > 0) {
+				z2 = true;
 				BlockFurnace.updateFurnaceBlockState(this.furnaceBurnTime > 0, this.worldObj, this.xCoord, this.yCoord, this.zCoord);
 			}
 		}
 
-		if(var2) {
+		if(z2) {
 			this.onInventoryChanged();
 		}
 
@@ -150,17 +154,17 @@
 		if(this.furnaceItemStacks[0] == null) {
 			return false;
 		} else {
-			int var1 = this.getCookedItem(this.furnaceItemStacks[0].getItem().shiftedIndex);
-			return var1 < 0 ? false : (this.furnaceItemStacks[2] == null ? true : (this.furnaceItemStacks[2].itemID != var1 ? false : (this.furnaceItemStacks[2].stackSize < this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize() ? true : this.furnaceItemStacks[2].stackSize < Item.itemsList[var1].getItemStackLimit())));
+			int i1 = this.getCookedItem(this.furnaceItemStacks[0].getItem().shiftedIndex);
+			return i1 < 0 ? false : (this.furnaceItemStacks[2] == null ? true : (this.furnaceItemStacks[2].itemID != i1 ? false : (this.furnaceItemStacks[2].stackSize < this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize() ? true : this.furnaceItemStacks[2].stackSize < Item.itemsList[i1].getItemStackLimit())));
 		}
 	}
 
 	public void smeltItem() {
 		if(this.canSmelt()) {
-			int var1 = this.getCookedItem(this.furnaceItemStacks[0].getItem().shiftedIndex);
+			int i1 = this.getCookedItem(this.furnaceItemStacks[0].getItem().shiftedIndex);
 			if(this.furnaceItemStacks[2] == null) {
-				this.furnaceItemStacks[2] = new ItemStack(var1, 1);
-			} else if(this.furnaceItemStacks[2].itemID == var1) {
+				this.furnaceItemStacks[2] = new ItemStack(i1, 1);
+			} else if(this.furnaceItemStacks[2].itemID == i1) {
 				++this.furnaceItemStacks[2].stackSize;
 			}
 
@@ -168,20 +172,21 @@
 			if(this.furnaceItemStacks[0].stackSize <= 0) {
 				this.furnaceItemStacks[0] = null;
 			}
-
 		}
-	}
-
-	private int getCookedItem(int var1) {
-		return var1 == Block.oreIron.blockID ? Item.ingotIron.shiftedIndex : (var1 == Block.oreGold.blockID ? Item.ingotGold.shiftedIndex : (var1 == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (var1 == Block.sand.blockID ? Block.glass.blockID : (var1 == Item.porkRaw.shiftedIndex ? Item.porkCooked.shiftedIndex : (var1 == Block.cobblestone.blockID ? Block.stone.blockID : (var1 == Item.clay.shiftedIndex ? Item.brick.shiftedIndex : -1))))));
-	}
-
-	private int getItemBurnTime(ItemStack var1) {
-		if(var1 == null) {
+
+	}
+
+	private int getCookedItem(int blockID) {
+		int i2 = ExtCraftingRecipes.GetSmeltingRecipe(blockID);
+		return i2 != -1 ? i2 : (blockID == Block.oreIron.blockID ? Item.ingotIron.shiftedIndex : (blockID == Block.oreGold.blockID ? Item.ingotGold.shiftedIndex : (blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (blockID == Block.sand.blockID ? Block.glass.blockID : (blockID == Item.porkRaw.shiftedIndex ? Item.porkCooked.shiftedIndex : (blockID == Block.cobblestone.blockID ? Block.stone.blockID : (blockID == Item.clay.shiftedIndex ? Item.brick.shiftedIndex : ModLoader.AddAllSmelting(blockID))))))));
+	}
+
+	private int getItemBurnTime(ItemStack itemStack) {
+		if(itemStack == null) {
 			return 0;
 		} else {
-			int var2 = var1.getItem().shiftedIndex;
-			return var2 < 256 && Block.blocksList[var2].material == Material.wood ? 300 : (var2 == Item.stick.shiftedIndex ? 100 : (var2 == Item.coal.shiftedIndex ? 1600 : (var2 == Item.bucketLava.shiftedIndex ? 20000 : 0)));
+			int i2 = itemStack.getItem().shiftedIndex;
+			return i2 < 32767 && Block.blocksList[i2].material == Material.wood ? 300 : (i2 == Item.stick.shiftedIndex ? 100 : (i2 == Item.coal.shiftedIndex ? 1600 : (i2 == Item.bucketLava.shiftedIndex ? 20000 : (i2 == ExtItems.essence.shiftedIndex ? 50 : (i2 == ExtBlocks.EssenceBlock.blockID ? 450 : ModLoader.AddAllFuel(i2))))));
 		}
 	}
 }
--- /dev/null
+++ net/minecraft/src/EntityEssenceProjectileUnknownClass.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+public class EntityEssenceProjectileUnknownClass extends EntityEssenceProjectile {
+	public EntityEssenceProjectileUnknownClass(World vg, EntityLiving zi) {
+		super(vg, zi);
+	}
+
+	public void func_8873_6eY5d2OYeYZHd8IDe8f17E868eUf523yUKL1wb6yC0uPG7astDKYTonP19ir(double double1, double double2, double double3) {
+		(new Explosion()).func_11007_4ZrtJ8eBO5K7ZvbM8Gw126oo9J029QsI1l4qUTABn1j8Wtu9S1EVeBVuFfIl(this.worldObj, this, double1, double2, double3, 3.0F, false, 18);
+	}
+
+	public void func_8874_6Ebe0odbY2EUO3qmpxe10pDrkZf8fG40cvC3Vs9w81CDBi21RFeLS4xtOLXH(Entity xy) {
+		this.worldObj.playSoundAtEntity(this.shootingEntity, "ext.hitmarker", 1.0F, 1.0F / (this.rand.nextFloat() * 0.4F + 0.8F));
+		this.func_8873_6eY5d2OYeYZHd8IDe8f17E868eUf523yUKL1wb6yC0uPG7astDKYTonP19ir(xy.posX, xy.posY, xy.posZ);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockFluidOld.java
@@ -1,0 +1,275 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public abstract class BlockFluidOld extends BlockOld {
+	protected int fluidType = 1;
+
+	protected BlockFluidOld(int integer, Material sx) {
+		super(integer, (sx == Material.lava ? 14 : 12) * 16 + 13, sx);
+		float f3 = 0.0F;
+		float f4 = 0.0F;
+		if(sx == Material.lava) {
+			this.fluidType = 2;
+		}
+
+		this.setBlockBounds(0.0F + f4, 0.0F + f3, 0.0F + f4, 1.0F + f4, 1.0F + f3, 1.0F + f4);
+		this.setTickOnLoad(true);
+	}
+
+	public static float getFluidHeightPercent(int integer) {
+		if(integer >= 8) {
+			integer = 0;
+		}
+
+		float f1 = (float)(integer + 1) / 9.0F;
+		return f1;
+	}
+
+	public int getBlockTextureFromSide(int integer) {
+		return integer != 0 && integer != 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
+	}
+
+	protected int getFlowDecay(World vg, int integer2, int integer3, int integer4) {
+		return vg.getBlockMaterial(integer2, integer3, integer4) != this.material ? -1 : vg.getBlockMetadata(integer2, integer3, integer4);
+	}
+
+	protected int getEffectiveFlowDecay(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		if(abt.getBlockMaterial(integer2, integer3, integer4) != this.material) {
+			return -1;
+		} else {
+			int i5 = abt.getBlockMetadata(integer2, integer3, integer4);
+			if(i5 >= 8) {
+				i5 = 0;
+			}
+
+			return i5;
+		}
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean canCollideCheck(int integer, boolean boolean2) {
+		return boolean2 && integer == 0;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		Material material6 = abt.getBlockMaterial(integer2, integer3, integer4);
+		return material6 == this.material ? false : (material6 == Material.ice ? false : (integer5 == 1 ? true : super.shouldSideBeRendered(abt, integer2, integer3, integer4, integer5)));
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return null;
+	}
+
+	public int getRenderType() {
+		return 4;
+	}
+
+	public int idDropped(int integer, Random random) {
+		return 0;
+	}
+
+	public int quantityDropped(Random random) {
+		return 0;
+	}
+
+	private Vec3D getFlowVector(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		Vec3D vec3D5 = Vec3D.createVector(0.0D, 0.0D, 0.0D);
+		int i6 = this.getEffectiveFlowDecay(abt, integer2, integer3, integer4);
+
+		for(int i7 = 0; i7 < 4; ++i7) {
+			int i8 = integer2;
+			int i10 = integer4;
+			if(i7 == 0) {
+				i8 = integer2 - 1;
+			}
+
+			if(i7 == 1) {
+				i10 = integer4 - 1;
+			}
+
+			if(i7 == 2) {
+				++i8;
+			}
+
+			if(i7 == 3) {
+				++i10;
+			}
+
+			int i11 = this.getEffectiveFlowDecay(abt, i8, integer3, i10);
+			int i12;
+			if(i11 < 0) {
+				if(!abt.getBlockMaterial(i8, integer3, i10).getIsSolid()) {
+					i11 = this.getEffectiveFlowDecay(abt, i8, integer3 - 1, i10);
+					if(i11 >= 0) {
+						i12 = i11 - (i6 - 8);
+						vec3D5 = vec3D5.addVector((double)((i8 - integer2) * i12), (double)((integer3 - integer3) * i12), (double)((i10 - integer4) * i12));
+					}
+				}
+			} else if(i11 >= 0) {
+				i12 = i11 - i6;
+				vec3D5 = vec3D5.addVector((double)((i8 - integer2) * i12), (double)((integer3 - integer3) * i12), (double)((i10 - integer4) * i12));
+			}
+		}
+
+		if(abt.getBlockMetadata(integer2, integer3, integer4) >= 8) {
+			boolean z13 = false;
+			if(z13 || this.shouldSideBeRendered(abt, integer2, integer3, integer4 - 1, 2)) {
+				z13 = true;
+			}
+
+			if(z13 || this.shouldSideBeRendered(abt, integer2, integer3, integer4 + 1, 3)) {
+				z13 = true;
+			}
+
+			if(z13 || this.shouldSideBeRendered(abt, integer2 - 1, integer3, integer4, 4)) {
+				z13 = true;
+			}
+
+			if(z13 || this.shouldSideBeRendered(abt, integer2 + 1, integer3, integer4, 5)) {
+				z13 = true;
+			}
+
+			if(z13 || this.shouldSideBeRendered(abt, integer2, integer3 + 1, integer4 - 1, 2)) {
+				z13 = true;
+			}
+
+			if(z13 || this.shouldSideBeRendered(abt, integer2, integer3 + 1, integer4 + 1, 3)) {
+				z13 = true;
+			}
+
+			if(z13 || this.shouldSideBeRendered(abt, integer2 - 1, integer3 + 1, integer4, 4)) {
+				z13 = true;
+			}
+
+			if(z13 || this.shouldSideBeRendered(abt, integer2 + 1, integer3 + 1, integer4, 5)) {
+				z13 = true;
+			}
+
+			if(z13) {
+				vec3D5 = vec3D5.normalize().addVector(0.0D, -6.0D, 0.0D);
+			}
+		}
+
+		vec3D5 = vec3D5.normalize();
+		return vec3D5;
+	}
+
+	public void velocityToAddToEntity(World vg, int integer2, int integer3, int integer4, Entity xy, Vec3D adm) {
+		Vec3D vec3D7 = this.getFlowVector(vg, integer2, integer3, integer4);
+		adm.xCoord += vec3D7.xCoord;
+		adm.yCoord += vec3D7.yCoord;
+		adm.zCoord += vec3D7.zCoord;
+	}
+
+	public int tickRate() {
+		return this.material == Material.water ? 5 : (this.material == Material.lava ? 30 : 0);
+	}
+
+	public float getBlockBrightness(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		float f5 = abt.getBrightness(integer2, integer3, integer4);
+		float f6 = abt.getBrightness(integer2, integer3 + 1, integer4);
+		return f5 > f6 ? f5 : f6;
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		super.updateTick(vg, integer2, integer3, integer4, random);
+	}
+
+	public int getRenderBlockPass() {
+		return this.material == Material.water ? 1 : 0;
+	}
+
+	public void randomDisplayTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(this.material == Material.water && random.nextInt(64) == 0) {
+			int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+			if(i6 > 0 && i6 < 8) {
+				vg.playSoundEffect((double)((float)integer2 + 0.5F), (double)((float)integer3 + 0.5F), (double)((float)integer4 + 0.5F), "liquid.water", random.nextFloat() * 0.25F + 0.75F, random.nextFloat() * 1.0F + 0.5F);
+			}
+		}
+
+		if(this.material == Material.lava && vg.getBlockMaterial(integer2, integer3 + 1, integer4) == Material.air && !vg.isBlockNormalCube(integer2, integer3 + 1, integer4) && random.nextInt(100) == 0) {
+			double d12 = (double)((float)integer2 + random.nextFloat());
+			double d8 = (double)integer3 + this.maxY;
+			double d10 = (double)((float)integer4 + random.nextFloat());
+			vg.spawnParticle("lava", d12, d8, d10, 0.0D, 0.0D, 0.0D);
+		}
+
+	}
+
+	public static double getFlowDirection(IBlockAccess abt, int integer2, int integer3, int integer4, Material sx) {
+		Vec3D vec3D5 = null;
+		if(sx == Material.water) {
+			vec3D5 = ((BlockFluidOld)BlockOld.waterMoving).getFlowVector(abt, integer2, integer3, integer4);
+		}
+
+		if(sx == Material.lava) {
+			vec3D5 = ((BlockFluidOld)BlockOld.lavaMoving).getFlowVector(abt, integer2, integer3, integer4);
+		}
+
+		return vec3D5.xCoord == 0.0D && vec3D5.zCoord == 0.0D ? -1000.0D : Math.atan2(vec3D5.zCoord, vec3D5.xCoord) - Math.PI / 2D;
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+		this.checkForHarden(vg, integer2, integer3, integer4);
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		this.checkForHarden(vg, integer2, integer3, integer4);
+	}
+
+	private void checkForHarden(World vg, int integer2, int integer3, int integer4) {
+		if(vg.getBlockId(integer2, integer3, integer4) == this.blockID) {
+			if(this.material == Material.lava) {
+				boolean z5 = false;
+				if(z5 || vg.getBlockMaterial(integer2, integer3, integer4 - 1) == Material.water) {
+					z5 = true;
+				}
+
+				if(z5 || vg.getBlockMaterial(integer2, integer3, integer4 + 1) == Material.water) {
+					z5 = true;
+				}
+
+				if(z5 || vg.getBlockMaterial(integer2 - 1, integer3, integer4) == Material.water) {
+					z5 = true;
+				}
+
+				if(z5 || vg.getBlockMaterial(integer2 + 1, integer3, integer4) == Material.water) {
+					z5 = true;
+				}
+
+				if(z5 || vg.getBlockMaterial(integer2, integer3 + 1, integer4) == Material.water) {
+					z5 = true;
+				}
+
+				if(z5) {
+					int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+					if(i6 == 0) {
+						vg.setBlockWithNotify(integer2, integer3, integer4, BlockOld.obsidian.blockID);
+					} else if(i6 <= 4) {
+						vg.setBlockWithNotify(integer2, integer3, integer4, BlockOld.cobblestone.blockID);
+					}
+
+					this.triggerLavaMixEffects(vg, integer2, integer3, integer4);
+				}
+			}
+
+		}
+	}
+
+	protected void triggerLavaMixEffects(World vg, int integer2, int integer3, int integer4) {
+		vg.playSoundEffect((double)((float)integer2 + 0.5F), (double)((float)integer3 + 0.5F), (double)((float)integer4 + 0.5F), "random.fizz", 0.5F, 2.6F + (vg.rand.nextFloat() - vg.rand.nextFloat()) * 0.8F);
+
+		for(int i5 = 0; i5 < 8; ++i5) {
+			vg.spawnParticle("largesmoke", (double)integer2 + Math.random(), (double)integer3 + 1.2D, (double)integer4 + Math.random(), 0.0D, 0.0D, 0.0D);
+		}
+
+	}
+}
--- net/minecraft/src/LogoEffectRandomizer.java
+++ net/minecraft/src/LogoEffectRandomizer.java
@@ -6,9 +6,9 @@
 	public double dropSpeed;
 	final GuiMainMenu mainMenu;
 
-	public LogoEffectRandomizer(GuiMainMenu var1, int var2, int var3) {
-		this.mainMenu = var1;
-		this.height = this.prevHeight = (double)(10 + var3) + GuiMainMenu.getRandom().nextDouble() * 32.0D + (double)var2;
+	public LogoEffectRandomizer(GuiMainMenu mainMenu, int integer2, int integer3) {
+		this.mainMenu = mainMenu;
+		this.height = this.prevHeight = (double)(10 + integer3) + GuiMainMenu.getRandom().nextDouble() * 32.0D + (double)integer2;
 	}
 
 	public void updateLogoEffects() {
--- /dev/null
+++ net/minecraft/src/XYZv.java
@@ -1,0 +1,98 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class XYZv {
+	public long x;
+	public long y;
+	public long z;
+	public Direction v;
+
+	public XYZv(long long1, long long2, long long3, Direction _0JBX68Xy93h6AtcsAQYnKhAH3tqqSdi51xzP2gqn2Dz3vUDEASPh81DDpsPv629t8X95kqU9No93Cbex761Cu7c84meg01txNW98) {
+		this.x = long1;
+		this.y = long2;
+		this.z = long3;
+		this.v = _0JBX68Xy93h6AtcsAQYnKhAH3tqqSdi51xzP2gqn2Dz3vUDEASPh81DDpsPv629t8X95kqU9No93Cbex761Cu7c84meg01txNW98;
+	}
+
+	public XYZv(long long1, long long2, long long3) {
+		this.x = long1;
+		this.y = long2;
+		this.z = long3;
+		this.v = Direction.XM;
+	}
+
+	public String toString() {
+		return "(" + this.x + ", " + this.y + ", " + this.z + ")";
+	}
+
+	public boolean func_11871_4RIxa4425GeFc7bSJ4pOTa6PYnO0fKP5EOCLB0Ntkt78v4xuQKdo35x8q1y5(XYZv ya) {
+		return this.x == ya.x && this.y == ya.y && this.z == ya.z;
+	}
+
+	public XYZv add(long long1, long long2, long long3) {
+		return new XYZv(this.x + long1, this.y + long2, this.z + long3, this.v);
+	}
+
+	public XYZv dir(Direction _0JBX68Xy93h6AtcsAQYnKhAH3tqqSdi51xzP2gqn2Dz3vUDEASPh81DDpsPv629t8X95kqU9No93Cbex761Cu7c84meg01txNW98) {
+		return new XYZv(this.x, this.y, this.z, _0JBX68Xy93h6AtcsAQYnKhAH3tqqSdi51xzP2gqn2Dz3vUDEASPh81DDpsPv629t8X95kqU9No93Cbex761Cu7c84meg01txNW98);
+	}
+
+	public XYZv rotateAroundXP(Direction _0JBX68Xy93h6AtcsAQYnKhAH3tqqSdi51xzP2gqn2Dz3vUDEASPh81DDpsPv629t8X95kqU9No93Cbex761Cu7c84meg01txNW98) {
+		switch(EnumCoordinatesUnknownClass.field_12026_7De72qnj4wxRWW58t53xgRd7T4ZV39k51LMGzN4yLo4a8zdVQ9nGL7BQZcvs[_0JBX68Xy93h6AtcsAQYnKhAH3tqqSdi51xzP2gqn2Dz3vUDEASPh81DDpsPv629t8X95kqU9No93Cbex761Cu7c84meg01txNW98.ordinal()]) {
+		case 1:
+			return new XYZv(-this.x, this.y, -this.z, this.v);
+		case 2:
+			return new XYZv(this.x, this.y, this.z, this.v);
+		case 3:
+			return new XYZv(-this.z, this.y, -this.x, this.v);
+		case 4:
+			return new XYZv(this.z, this.y, this.x, this.v);
+		default:
+			return null;
+		}
+	}
+
+	public XYZv add(XYZv ya) {
+		XYZv xYZv2 = new XYZv(this.x, this.y, this.z, this.v);
+		xYZv2.x += ya.x;
+		xYZv2.y += ya.y;
+		xYZv2.z += ya.z;
+		return xYZv2;
+	}
+
+	public static XYZv func_11874_7D7Ldwzfjq7N2h00fkA2p56PZg3G8WUWHZij3DQ7icA7D4681et2A8u9NXkk(NBTTagCompound id, String string) {
+		return new XYZv(id.getLong(string + "_x"), id.getLong(string + "_y"), id.getLong(string + "_z"));
+	}
+
+	public void func_11870_8PE2rM1Pz0ANK7KSirgdpIuY0x9S23IpHh64xjXM385ympB75xykX9x0C0cz(NBTTagCompound id, String string) {
+		id.setLong(string + "_x", this.x);
+		id.setLong(string + "_y", this.y);
+		id.setLong(string + "_z", this.z);
+	}
+
+	public static XYZv func_11868_10m3QwAtDzN7qIk6oQ7jXh79E780beVWC0FbVnUy640lcC9Qn0J7uJdvVfnw(DataInputStream dataInputStream) {
+		try {
+			return new XYZv((long)dataInputStream.readInt(), (long)dataInputStream.readInt(), (long)dataInputStream.readInt());
+		} catch (IOException iOException2) {
+			return null;
+		}
+	}
+
+	public void func_11869_0FvI7BF1p73olqIovpr2IU9dj1cOi7qQZc81JoYhgeQibNmHY0OuSkDYeuv8(DataOutputStream dataOutputStream) {
+		try {
+			dataOutputStream.writeInt((int)this.x);
+			dataOutputStream.writeInt((int)this.y);
+			dataOutputStream.writeInt((int)this.z);
+		} catch (IOException iOException3) {
+			iOException3.printStackTrace();
+		}
+
+	}
+
+	public HandlerSetCheckpointUnknownClass2 func_11872_2Vm0piSCo4ykAfHelABiK5FXJ9tUuqjpMwL9NT18g5H4bYKrtlp0Sc734m9O() {
+		return new HandlerSetCheckpointUnknownClass2((double)this.x, (double)this.y, (double)this.z);
+	}
+}
--- net/minecraft/src/EntitySorter.java
+++ net/minecraft/src/EntitySorter.java
@@ -5,15 +5,19 @@
 public class EntitySorter implements Comparator {
 	private Entity comparedEntity;
 
-	public EntitySorter(Entity var1) {
-		this.comparedEntity = var1;
-	}
-
-	public int sortByDistanceToEntity(WorldRenderer var1, WorldRenderer var2) {
-		return var1.distanceToEntitySquared(this.comparedEntity) < var2.distanceToEntitySquared(this.comparedEntity) ? -1 : 1;
-	}
-
-	public int compare(Object var1, Object var2) {
-		return this.sortByDistanceToEntity((WorldRenderer)var1, (WorldRenderer)var2);
+	public EntitySorter(Entity xy) {
+		this.comparedEntity = xy;
+	}
+
+	public int sortByDistanceToEntity(WorldRenderer cx1, WorldRenderer cx2) {
+		return cx1.distanceToEntitySquared(this.comparedEntity) < cx2.distanceToEntitySquared(this.comparedEntity) ? -1 : 1;
+	}
+
+	public int compare(WorldRenderer worldRenderer2, WorldRenderer worldRenderer3) {
+		return this.sortByDistanceToEntity(worldRenderer2, worldRenderer3);
+	}
+
+	public int compare(Object worldRenderer2, Object worldRenderer3) {
+		return this.sortByDistanceToEntity((WorldRenderer)worldRenderer2, (WorldRenderer)worldRenderer3);
 	}
 }
--- /dev/null
+++ net/minecraft/src/GuiFrail.java
@@ -1,0 +1,49 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+public class GuiFrail extends GuiScreen {
+	public void initGui() {
+		this.controlList.clear();
+		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 72, "Respawn"));
+		this.controlList.add(new GuiButton(2, this.width / 2 - 100, this.height / 4 + 96, "Title menu"));
+		if(this.mc.session == null) {
+			((GuiButton)this.controlList.get(1)).enabled = false;
+		}
+
+	}
+
+	protected void keyTyped(char character, int key) {
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		if(button.id == 0) {
+			;
+		}
+
+		if(button.id == 1) {
+			this.mc.respawn();
+			this.mc.displayGuiScreen((GuiScreen)null);
+		}
+
+		if(button.id == 2) {
+			this.mc.changeWorld1((World)null);
+			this.mc.displayGuiScreen(new GuiMainMenu());
+		}
+
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		drawGradientRect(0, 0, this.width, this.height, 1615855616, -1602211792);
+		GL11.glPushMatrix();
+		GL11.glScalef(2.0F, 2.0F, 2.0F);
+		this.drawCenteredString(this.fontRenderer, this.mc.options.difficulty == 4 ? "Shattered" : "Game over!", this.width / 2 / 2, 30, 0xFFFFFF);
+		GL11.glPopMatrix();
+		this.drawCenteredString(this.fontRenderer, "Milestone: " + this.mc.theWorld.GetMilestone(), this.width / 2, 100, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
+	}
+
+	public boolean doesGuiPauseGame() {
+		return false;
+	}
+}
--- /dev/null
+++ net/minecraft/src/ThreadHubServerPing.java
@@ -1,0 +1,89 @@
+package net.minecraft.src;
+
+import java.io.IOException;
+import java.net.DatagramPacket;
+import java.net.DatagramSocket;
+import java.net.InetAddress;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.logging.Level;
+import java.util.logging.LogManager;
+import java.util.logging.Logger;
+
+public class ThreadHubServerPing extends Thread {
+	private static final AtomicInteger atomicInteger = new AtomicInteger(0);
+	private static final Logger logger = LogManager.getLogManager().getLogger(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9790_4Mn44antCz29B6GKYv6d2ZW6jUZp3xLB1XTEKn5O2h7Xzs27I617Goaxn8XY));
+	private final String motd;
+	private final DatagramSocket socket;
+	private boolean isStopping = true;
+	private final String address;
+	private static final String __OBFID = "CL_00001137";
+
+	public ThreadHubServerPing(String string1, String string2) throws IOException {
+		super("LanServerPinger #" + atomicInteger.incrementAndGet());
+		this.motd = string1;
+		this.address = string2;
+		this.setDaemon(true);
+		this.socket = new DatagramSocket();
+	}
+
+	public void run() {
+		String string1 = getPingResponse(this.motd, this.address);
+		byte[] b2 = string1.getBytes();
+
+		while(!this.isInterrupted() && this.isStopping) {
+			try {
+				InetAddress inetAddress3 = InetAddress.getByName("224.0.2.60");
+				DatagramPacket datagramPacket4 = new DatagramPacket(b2, b2.length, inetAddress3, 4445);
+				this.socket.send(datagramPacket4);
+			} catch (IOException iOException6) {
+				logger.log(Level.WARNING, "LanServerPinger: " + iOException6.getMessage());
+				break;
+			}
+
+			try {
+				sleep(1500L);
+			} catch (InterruptedException interruptedException5) {
+			}
+		}
+
+	}
+
+	public void interrupt() {
+		super.interrupt();
+		this.isStopping = false;
+	}
+
+	public static String getPingResponse(String string1, String string2) {
+		return "[MOTD]" + string1 + "[/MOTD][AD]" + string2 + "[/AD]";
+	}
+
+	public static String getMotdFromPingResponse(String string) {
+		int i1 = string.indexOf("[MOTD]");
+		if(i1 < 0) {
+			return "missing no";
+		} else {
+			int i2 = string.indexOf("[/MOTD]", i1 + "[MOTD]".length());
+			return i2 < i1 ? "missing no" : string.substring(i1 + "[MOTD]".length(), i2);
+		}
+	}
+
+	public static String getAdFromPingResponse(String string) {
+		int i1 = string.indexOf("[/MOTD]");
+		if(i1 < 0) {
+			return null;
+		} else {
+			int i2 = string.indexOf("[/MOTD]", i1 + "[/MOTD]".length());
+			if(i2 >= 0) {
+				return null;
+			} else {
+				int i3 = string.indexOf("[AD]", i1 + "[/MOTD]".length());
+				if(i3 < 0) {
+					return null;
+				} else {
+					int i4 = string.indexOf("[/AD]", i3 + "[AD]".length());
+					return i4 < i3 ? null : string.substring(i3 + "[AD]".length(), i4);
+				}
+			}
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockWeaponGiver.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+import org.lwjgl.input.Keyboard;
+
+public class BlockWeaponGiver extends BlockMultiSided implements BlockUnknownInterface {
+	public BlockWeaponGiver(int integer1, int integer2, int integer3, Material sx) {
+		super(integer1, integer3, integer2, integer3, sx);
+	}
+
+	public void func_8286_2f84KM1xKjK9eBj4915qo36L405Hm9W3JZ41244r918IGv3BpYiut0G1VBGw(EntityPlayerZombieModeClient wp, XYZv ya) {
+		wp.worldIn.func_7550_1TEi6UNf3SwyaU3NIC3s8C7gZNGcTG9vFQGy5qOc4gI9AwjR87h7g68M37B3(ya, this.func_8288_98t8S89tFW42rGL9ALNhVV7sJ5qB3j8Z10bg69FoU68e30R380Rp4L4Dn5kC());
+		wp.field_9097_867sEKNEsa45Xq4Etlk5s449h7UUOWVcX6nYd2PGjFy373Y2PXcol521PBg2 = null;
+	}
+
+	public String func_8287_3t2cX22yD5J55Zh6G33szTT1PY525wnemKTHp3jQ2r2jhLod41nugOV5rhqI(EntityPlayerZombieModeClient wp, XYZv ya) {
+		String string3 = Keyboard.getKeyName(InputHandler.mc.options.keyBindInventory.keyCode);
+		return "[" + string3 + "] Interact";
+	}
+
+	public int func_8288_98t8S89tFW42rGL9ALNhVV7sJ5qB3j8Z10bg69FoU68e30R380Rp4L4Dn5kC() {
+		return 3939;
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenHouseSmallUnknownClass3.java
@@ -1,0 +1,46 @@
+package net.minecraft.src;
+
+public class WorldGenHouseSmallUnknownClass3 extends WorldGenHouseSmallUnknownClass4 {
+	private final WorldGenHouseSmallUnknownClass2 field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q;
+
+	public WorldGenHouseSmallUnknownClass3(WorldGenHouseSmallUnknownClass2 ns) {
+		this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q = ns;
+	}
+
+	public WorldGenHouseSmallUnknownClass2 func_11469_1XD49rMZ7tPLtP0CWc3LgGLFv6JSjO4Q2B8uBaPHCRWAe6cbTx3935ua6FcY() {
+		return new WorldGenHouseSmallUnknownClass2(1, 1);
+	}
+
+	public WorldGenHouseSmallUnknownClass2 func_11466_770WwnPt75L6J8UguFyXX1ITRtqTVRYMUSrCy1V0cX98wO01Qc5EpwKsvcM9() {
+		return this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q;
+	}
+
+	public boolean func_11468_5FEqwXoAtY7AI1e7tv5jsIS2I33Pxp03S2iKy3TijST5d36Zh4iU6YGR536H(World vg, int integer2, int integer3) {
+		int i4;
+		if(WorldGenHouseSmallUnknownClass.func_10592_030X7YBFIyq838PzbbohW0DU604Ufm6fU5P2pk1l46RcvZNy7l32uebe2559(integer2, integer3, this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM + 1, this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 + 1)) {
+			for(i4 = 128; i4 > 0; --i4) {
+				vg.setBlock(this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM + 1, i4, this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 + 1, Block.cloth.blockID);
+			}
+		}
+
+		if(WorldGenHouseSmallUnknownClass.func_10592_030X7YBFIyq838PzbbohW0DU604Ufm6fU5P2pk1l46RcvZNy7l32uebe2559(integer2, integer3, this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM + 14, this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 + 1)) {
+			for(i4 = 128; i4 > 0; --i4) {
+				vg.setBlock(this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM + 14, i4, this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 + 1, Block.cloth.blockID);
+			}
+		}
+
+		if(WorldGenHouseSmallUnknownClass.func_10592_030X7YBFIyq838PzbbohW0DU604Ufm6fU5P2pk1l46RcvZNy7l32uebe2559(integer2, integer3, this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM + 1, this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 + 14)) {
+			for(i4 = 128; i4 > 0; --i4) {
+				vg.setBlock(this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM + 1, i4, this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 + 14, Block.cloth.blockID);
+			}
+		}
+
+		if(WorldGenHouseSmallUnknownClass.func_10592_030X7YBFIyq838PzbbohW0DU604Ufm6fU5P2pk1l46RcvZNy7l32uebe2559(integer2, integer3, this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM + 14, this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 + 14)) {
+			for(i4 = 128; i4 > 0; --i4) {
+				vg.setBlock(this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM + 14, i4, this.field_11471_029ouVl5B9FoHlU8292hDwB0F27a6gh7I2wEB31Em7V39XOOlWc83Vuym85Q.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 + 14, Block.cloth.blockID);
+			}
+		}
+
+		return false;
+	}
+}
--- net/minecraft/src/EntityFlameFX.java
+++ net/minecraft/src/EntityFlameFX.java
@@ -3,14 +3,11 @@
 public class EntityFlameFX extends EntityFX {
 	private float flameScale;
 
-	public EntityFlameFX(World var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-		super(var1, var2, var4, var6, var8, var10, var12);
-		this.motionX = this.motionX * (double)0.01F + var8;
-		this.motionY = this.motionY * (double)0.01F + var10;
-		this.motionZ = this.motionZ * (double)0.01F + var12;
-		double var10000 = var2 + (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.05F);
-		var10000 = var4 + (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.05F);
-		var10000 = var6 + (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.05F);
+	public EntityFlameFX(World worldObj, double x, double y, double z, double motionX, double motionY, double motionZ) {
+		super(worldObj, x, y, z, motionX, motionY, motionZ);
+		this.motionX = this.motionX * (double)0.01F + motionX;
+		this.motionY = this.motionY * (double)0.01F + motionY;
+		this.motionZ = this.motionZ * (double)0.01F + motionZ;
 		this.flameScale = this.particleScale;
 		this.particleRed = this.particleGreen = this.particleBlue = 1.0F;
 		this.particleMaxAge = (int)(8.0D / (Math.random() * 0.8D + 0.2D)) + 4;
@@ -18,24 +15,24 @@
 		this.particleTextureIndex = 48;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		float var8 = ((float)this.particleAge + var2) / (float)this.particleMaxAge;
-		this.particleScale = this.flameScale * (1.0F - var8 * var8 * 0.5F);
-		super.renderParticle(var1, var2, var3, var4, var5, var6, var7);
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		float f8 = ((float)this.particleAge + renderPartialTick) / (float)this.particleMaxAge;
+		this.particleScale = this.flameScale * (1.0F - f8 * f8 * 0.5F);
+		super.renderParticle(tessellator, renderPartialTick, xOffset, yOffset, zOffset, xOffset2, zOffset2);
 	}
 
-	public float getBrightness(float var1) {
-		float var2 = ((float)this.particleAge + var1) / (float)this.particleMaxAge;
-		if(var2 < 0.0F) {
-			var2 = 0.0F;
-		}
-
-		if(var2 > 1.0F) {
-			var2 = 1.0F;
-		}
-
-		float var3 = super.getBrightness(var1);
-		return var3 * var2 + (1.0F - var2);
+	public float getBrightness(float unused) {
+		float f2 = ((float)this.particleAge + unused) / (float)this.particleMaxAge;
+		if(f2 < 0.0F) {
+			f2 = 0.0F;
+		}
+
+		if(f2 > 1.0F) {
+			f2 = 1.0F;
+		}
+
+		float f3 = super.getBrightness(unused);
+		return f3 * f2 + (1.0F - f2);
 	}
 
 	public void onUpdate() {
--- /dev/null
+++ net/minecraft/src/CommandRNobiome.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandRNobiome extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8561_5jSl3966t7JZK076Y83a6UgGYuNIqO20N3BKq7JfZ6mqr1s0a4l2Q31vQd87;
+    
+    CommandRNobiome(final CommandManager abb) {
+        this.field_8561_5jSl3966t7JZK076Y83a6UgGYuNIqO20N3BKq7JfZ6mqr1s0a4l2Q31vQd87 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        ScreenDebugMenu.field_7964_8G80Kimsj2t150ZuEHxk97V3fSV455qzurOOVWgX8oTDDCEH9YV34z9vRAoC = ((int)arr[0] == 1);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return ScreenDebugMenu.field_7964_8G80Kimsj2t150ZuEHxk97V3fSV455qzurOOVWgX8oTDDCEH9YV34z9vRAoC ? "1" : "0";
+    }
+}
--- /dev/null
+++ net/minecraft/src/Ext1605Utils.java
@@ -1,0 +1,239 @@
+package net.minecraft.src;
+
+import java.io.ByteArrayInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.List;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+
+import net.minecraft.client.Minecraft;
+
+public class Ext1605Utils {
+	public static List skinUrls = Arrays.asList(new String[]{"file://C:/skincache/", "https://raw.githubusercontent.com/exalpha-dev/exalpha-dev.github.io/main/skincache/"});
+
+	public static float func_12145_369AWaIx763AmDMElKtaxw1v8736Hd9436zT4kb46Iz21Y2Nw4rxl2u27Hjk(float float1) {
+		return (float1 - 1.0F) * (float1 - 1.0F) * (float1 - 1.0F) + 1.0F;
+	}
+
+	@Deprecated
+	public static float[] BlendColor(float float1, float float2, float float3, float float4) {
+		float f4 = 0.58431375F;
+		float f5 = 0.0F;
+		float f6 = 1.0F;
+		float[] f7 = new float[]{float1 * f4 + (1.0F - float1) * float2, float1 * f5 + (1.0F - float1) * float3, float1 * f6 + (1.0F - float1) * float4};
+		return f7;
+	}
+
+	public static float[] BlendColorA(float float1, float float2, float float3, float float4, float float5, float float6, float float7) {
+		float[] f7 = new float[]{float1 * float2 + (1.0F - float1) * float5, float1 * float3 + (1.0F - float1) * float6, float1 * float4 + (1.0F - float1) * float7};
+		return f7;
+	}
+
+	public static boolean NotFullBlock(int integer) {
+		return integer == 0 || integer == Block.cactus.blockID || integer == Block.mushroomBrown.blockID || integer == Block.mushroomRed.blockID || integer == Block.snow.blockID || integer == Block.plantRed.blockID || integer == Block.plantYellow.blockID || integer == Block.lavaMoving.blockID || integer == Block.waterMoving.blockID || integer == Block.leaves.blockID;
+	}
+
+	public static double AngleDistance(double double1, double double2) {
+		double d4 = Math.abs(double2 - double1) % 360.0D;
+		double d6 = d4 > 180.0D ? 360.0D - d4 : d4;
+		return d6;
+	}
+
+	public static boolean RayCastBlock(World vg, int integer, double double3, double double4, double double5, double double6, double double7, double double8) {
+		double d14 = Math.sqrt(Math.pow(double6 - double3, 2.0D) + Math.pow(double7 - double4, 2.0D) + Math.pow(double8 - double5, 2.0D));
+		if(d14 > (double)integer) {
+			return false;
+		} else {
+			double d16 = double6 - double3;
+			double d18 = double7 - double4;
+			double d20 = double8 - double5;
+			double d22 = Math.sqrt(d16 * d16 + d18 * d18 + d20 * d20);
+			double d24 = 0.1D;
+
+			for(double d26 = 0.0D; d26 < d22; d26 += d24) {
+				double d28 = double3 + d26 * d16 / d22;
+				double d30 = double4 + d26 * d18 / d22;
+				double d32 = double5 + d26 * d20 / d22;
+				if(vg.getBlockId((int)d28, (int)d30, (int)d32) != 0) {
+					return true;
+				}
+			}
+
+			return false;
+		}
+	}
+
+	public static int readNBytesJ9(InputStream inputStream, byte[] arr, int integer3, int integer4) throws IOException {
+		int i4;
+		int i5;
+		for(i4 = 0; i4 < integer4; i4 += i5) {
+			i5 = inputStream.read(arr, integer3 + i4, integer4 - i4);
+			if(i5 < 0) {
+				break;
+			}
+		}
+
+		return i4;
+	}
+
+	public static void fillBlock(World vg, XYZv ya2, XYZv ya3, int integer) {
+		fillBlock(vg, ya2, ya3, integer, -1);
+	}
+
+	public static void fillBlock(World vg, XYZv ya2, XYZv ya3, int integer4, int integer5) {
+		if(vg.multiplayerWorld) {
+			((PlayerControllerMP)InputHandler.mc.playerController).netClientHandler.addToSendQueue(new Packet211(ya2, ya3, integer4));
+		} else {
+			long j5 = ya2.x > ya3.x ? ya3.x : ya2.x;
+			long j7 = ya2.x > ya3.x ? ya2.x : ya3.x;
+			long j9 = ya2.y > ya3.y ? ya3.y : ya2.y;
+			long j11 = ya2.y > ya3.y ? ya2.y : ya3.y;
+			long j13 = ya2.z > ya3.z ? ya3.z : ya2.z;
+			long j15 = ya2.z > ya3.z ? ya2.z : ya3.z;
+
+			for(long j17 = j5; j17 <= j7; ++j17) {
+				for(long j19 = j9; j19 <= j11; ++j19) {
+					for(long j21 = j13; j21 <= j15; ++j21) {
+						if(integer5 == -1 || (j17 + j21 % 2L) % 2L != 0L && j21 % 2L != 0L) {
+							setBlock(vg, j17, j19, j21, integer4);
+						} else {
+							setBlock(vg, j17, j19, j21, integer5);
+						}
+					}
+				}
+			}
+		}
+
+	}
+
+	public static void setBlock(World vg, long long2, long long3, long long4, int integer) {
+		vg.setBlockWithNotify((int)long2, (int)long3, (int)long4, integer);
+		if(vg.multiplayerWorld && InputHandler.mc != null && InputHandler.mc.playerController instanceof PlayerControllerMP) {
+			((PlayerControllerMP)InputHandler.mc.playerController).netClientHandler.addToSendQueue(new Packet15Place(integer, (int)long2, (int)long3, (int)long4, 10));
+		}
+
+	}
+
+	public static boolean RTForBlocks(World vg, XYZv ya, Direction _0JBX68Xy93h6AtcsAQYnKhAH3tqqSdi51xzP2gqn2Dz3vUDEASPh81DDpsPv629t8X95kqU9No93Cbex761Cu7c84meg01txNW98, int integer) {
+		XYZv xYZv4 = ya;
+
+		for(int i5 = 0; i5 != integer; ++i5) {
+			xYZv4 = xYZv4.add((new XYZv(1L, 0L, 0L)).rotateAroundXP(_0JBX68Xy93h6AtcsAQYnKhAH3tqqSdi51xzP2gqn2Dz3vUDEASPh81DDpsPv629t8X95kqU9No93Cbex761Cu7c84meg01txNW98));
+			if(vg.getBlockId((int)xYZv4.x, (int)xYZv4.y, (int)xYZv4.z) != 0) {
+				return false;
+			}
+		}
+
+		return true;
+	}
+
+	public static void FindOutWhatTheFuckIsMakingThisNotWork() {
+		(new Exception()).printStackTrace();
+	}
+
+	public static int func_12140_8Oq1I57w9nMV4xcg8IUTb31D6Wumtz10kJJWyh9ORMW4uP8Zr0oyd0bFHQ1k(int integer1, int integer2, int integer3) {
+		return integer1 << 11 | integer3 << 7 | integer2;
+	}
+
+	public static URL func_12146_9P3TY758VM8951Z7q70WD5qYdKqLdB22jUqQNi8u6rFBU4uZnFfpCw0XU82v(String string) {
+		if(Minecraft.field_7296_40G9X9sEbrNVWk1I68RpGi9486QjvBn75u9xmmmZ189amc26uqiJAf80zUYu) {
+			try {
+				return new URL("file:///" + Minecraft.field_7269_8WQ9B51cG08Xzvtv4872kc1791FFx6EUAi7dtOrdc533169lB1oGze3Sm1ZJ + "/" + string);
+			} catch (MalformedURLException malformedURLException2) {
+				ExtLogger.i(malformedURLException2.getMessage());
+				System.exit(-1);
+				return null;
+			}
+		} else {
+			return Ext1605Utils.class.getResource(string);
+		}
+	}
+
+	public static InputStream func_12150_5v4Cs6sI06e6Hjpg3rSI82gG008x14C2jag2OM7ADaW5U8a3DYSrf570CJm6(String string) {
+		if(Minecraft.field_7296_40G9X9sEbrNVWk1I68RpGi9486QjvBn75u9xmmmZ189amc26uqiJAf80zUYu) {
+			try {
+				return new FileInputStream(new File(Minecraft.field_7269_8WQ9B51cG08Xzvtv4872kc1791FFx6EUAi7dtOrdc533169lB1oGze3Sm1ZJ + "/" + string));
+			} catch (FileNotFoundException fileNotFoundException7) {
+				try {
+					if(string.startsWith("/")) {
+						string = string.substring(1);
+					}
+
+					ZipFile zipFile2 = new ZipFile(new File(System.getProperty("user.dir") + "/../lib/client/minecraft.jar"));
+					ZipEntry zipEntry3 = zipFile2.getEntry(string);
+					InputStream inputStream4 = zipFile2.getInputStream(zipEntry3);
+					byte[] b5 = new byte[(int)zipEntry3.getSize()];
+					readNBytesJ9(inputStream4, b5, 0, (int)zipEntry3.getSize());
+					zipFile2.close();
+					return new ByteArrayInputStream(b5);
+				} catch (Exception exception6) {
+					exception6.printStackTrace();
+					System.exit(-1);
+					return null;
+				}
+			}
+		} else {
+			return Ext1605Utils.class.getResourceAsStream(string);
+		}
+	}
+
+	public static int func_12147_2H957G8ip82G6rxfiUf3zblru0uP648DzY022SjD3PqVRZ2F11lS24e967i5(int integer1, int integer2, int integer3) {
+		return integer1 > integer3 ? integer3 : (integer1 < integer2 ? integer2 : integer1);
+	}
+
+	public static String func_12148_5D2s54927n4DKgyG72xyN0I2571Gf1lofyGtm297rlY5SYBWi0Gc4NBMKoQD(byte[] arr) {
+		StringBuilder stringBuilder1 = new StringBuilder(2 * arr.length);
+
+		for(int i2 = 0; i2 < arr.length; ++i2) {
+			String string3 = Integer.toHexString(255 & arr[i2]);
+			if(string3.length() == 1) {
+				stringBuilder1.append('0');
+			}
+
+			stringBuilder1.append(string3);
+		}
+
+		return stringBuilder1.toString();
+	}
+
+	public static int func_12155_8Hz7yQrbpttYl62r56lFe782dI9GJEm7d3W4768d4S2Iay7QH2DbzVf66DGe(int integer1, int integer2) {
+		return (int)Math.floor((double)((float)integer1 / (float)integer2));
+	}
+
+	public static String func_12144_454W4NdU03XRu31l9i7WvVfHjt72MsOpNaeZo649Z98rQP9Gm38926v5OA6W(String string) {
+		Class class1 = Refl.func_9786_8Ehd0r9aAHEF32cGHok0smD4vA0B3N9Qx96zs8VmDa6dhPs1YF2JWfDn7x46("java.security.MessageDigest");
+		Object object2 = Refl.invoke(class1, "getInstance", new Class[]{String.class}, "SHA-256");
+		Object object3 = Refl.invoke(object2, "digest", new Class[]{byte[].class}, string.getBytes(StandardCharsets.UTF_8));
+		return (String)Refl.invoke(Ext1605Utils.class, "bytesToHex", new Class[]{byte[].class}, object3);
+	}
+
+	public static void func_12137_4B14YTlTqWTNVpM2G9851Dyfx9DbvQPLa5I81ItD974L7kJ315Qu8EP49Cg9(World vg, XYZv ya2, XYZv ya3, int integer4, int integer5) {
+		if(!vg.multiplayerWorld) {
+			long j5 = ya2.x > ya3.x ? ya3.x : ya2.x;
+			long j7 = ya2.x > ya3.x ? ya2.x : ya3.x;
+			long j9 = ya2.y > ya3.y ? ya3.y : ya2.y;
+			long j11 = ya2.y > ya3.y ? ya2.y : ya3.y;
+			long j13 = ya2.z > ya3.z ? ya3.z : ya2.z;
+			long j15 = ya2.z > ya3.z ? ya2.z : ya3.z;
+
+			for(long j17 = j5; j17 <= j7; ++j17) {
+				for(long j19 = j9; j19 <= j11; ++j19) {
+					for(long j21 = j13; j21 <= j15; ++j21) {
+						if(vg.getBlockId((int)j17, (int)j19, (int)j21) == integer4) {
+							setBlock(vg, j17, j19, j21, integer5);
+						}
+					}
+				}
+			}
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockEssenceCloner.java
@@ -1,0 +1,12 @@
+package net.minecraft.src;
+
+public class BlockEssenceCloner extends BlockMultiSided {
+	public BlockEssenceCloner(int integer1, int integer2, int integer3, int integer4) {
+		super(integer1, integer2, integer3, integer4);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		entityPlayer.displayEssenceClonerGUI();
+		return true;
+	}
+}
--- net/minecraft/src/TextureWaterFX.java
+++ net/minecraft/src/TextureWaterFX.java
@@ -13,73 +13,76 @@
 
 	public void onTick() {
 		++this.tickCounter;
-
-		int var1;
-		int var2;
-		float var3;
-		int var5;
-		int var6;
-		for(var1 = 0; var1 < 16; ++var1) {
-			for(var2 = 0; var2 < 16; ++var2) {
-				var3 = 0.0F;
-
-				for(int var4 = var1 - 1; var4 <= var1 + 1; ++var4) {
-					var5 = var4 & 15;
-					var6 = var2 & 15;
-					var3 += this.red[var5 + var6 * 16];
-				}
-
-				this.green[var1 + var2 * 16] = var3 / 3.3F + this.blue[var1 + var2 * 16] * 0.8F;
-			}
-		}
-
-		for(var1 = 0; var1 < 16; ++var1) {
-			for(var2 = 0; var2 < 16; ++var2) {
-				this.blue[var1 + var2 * 16] += this.alpha[var1 + var2 * 16] * 0.05F;
-				if(this.blue[var1 + var2 * 16] < 0.0F) {
-					this.blue[var1 + var2 * 16] = 0.0F;
-				}
-
-				this.alpha[var1 + var2 * 16] -= 0.1F;
-				if(Math.random() < 0.05D) {
-					this.alpha[var1 + var2 * 16] = 0.5F;
-				}
-			}
-		}
-
-		float[] var12 = this.green;
-		this.green = this.red;
-		this.red = var12;
-
-		for(var2 = 0; var2 < 256; ++var2) {
-			var3 = this.red[var2];
-			if(var3 > 1.0F) {
-				var3 = 1.0F;
-			}
-
-			if(var3 < 0.0F) {
-				var3 = 0.0F;
-			}
-
-			float var13 = var3 * var3;
-			var5 = (int)(32.0F + var13 * 32.0F);
-			var6 = (int)(50.0F + var13 * 64.0F);
-			int var7 = 255;
-			int var8 = (int)(146.0F + var13 * 50.0F);
-			if(this.anaglyphEnabled) {
-				int var9 = (var5 * 30 + var6 * 59 + var7 * 11) / 100;
-				int var10 = (var5 * 30 + var6 * 70) / 100;
-				int var11 = (var5 * 30 + var7 * 70) / 100;
-				var5 = var9;
-				var6 = var10;
-				var7 = var11;
-			}
-
-			this.imageData[var2 * 4 + 0] = (byte)var5;
-			this.imageData[var2 * 4 + 1] = (byte)var6;
-			this.imageData[var2 * 4 + 2] = (byte)var7;
-			this.imageData[var2 * 4 + 3] = (byte)var8;
-		}
-
+		if(InputHandler.mc.options.fancyGraphics != 2 || this.field_10713_88024hG6da4f4kcVfOqR8cTJ36RtCs13wB6V30Rs17vqAj14F4Cqz3neFg20) {
+			this.field_10713_88024hG6da4f4kcVfOqR8cTJ36RtCs13wB6V30Rs17vqAj14F4Cqz3neFg20 = false;
+
+			int i1;
+			int i2;
+			float f3;
+			int i4;
+			int i5;
+			for(i1 = 0; i1 < 16; ++i1) {
+				for(i2 = 0; i2 < 16; ++i2) {
+					f3 = 0.0F;
+
+					for(int i6 = i1 - 1; i6 <= i1 + 1; ++i6) {
+						i4 = i6 & 15;
+						i5 = i2 & 15;
+						f3 += this.red[i4 + i5 * 16];
+					}
+
+					this.green[i1 + i2 * 16] = f3 / 3.3F + this.blue[i1 + i2 * 16] * 0.8F;
+				}
+			}
+
+			for(i1 = 0; i1 < 16; ++i1) {
+				for(i2 = 0; i2 < 16; ++i2) {
+					this.blue[i1 + i2 * 16] += this.alpha[i1 + i2 * 16] * 0.05F;
+					if(this.blue[i1 + i2 * 16] < 0.0F) {
+						this.blue[i1 + i2 * 16] = 0.0F;
+					}
+
+					this.alpha[i1 + i2 * 16] -= 0.1F;
+					if(Math.random() < 0.05D) {
+						this.alpha[i1 + i2 * 16] = 0.5F;
+					}
+				}
+			}
+
+			float[] f13 = this.green;
+			this.green = this.red;
+			this.red = f13;
+
+			for(i2 = 0; i2 < 256; ++i2) {
+				f3 = this.red[i2];
+				if(f3 > 1.0F) {
+					f3 = 1.0F;
+				}
+
+				if(f3 < 0.0F) {
+					f3 = 0.0F;
+				}
+
+				float f7 = f3 * f3;
+				i4 = (int)(32.0F + f7 * 32.0F);
+				i5 = (int)(50.0F + f7 * 64.0F);
+				int i8 = 255;
+				int i9 = (int)(146.0F + f7 * 50.0F);
+				if(this.anaglyphEnabled) {
+					int i10 = (i4 * 30 + i5 * 59 + i8 * 11) / 100;
+					int i11 = (i4 * 30 + i5 * 70) / 100;
+					int i12 = (i4 * 30 + i8 * 70) / 100;
+					i4 = i10;
+					i5 = i11;
+					i8 = i12;
+				}
+
+				this.imageData[i2 * 4 + 0] = (byte)i4;
+				this.imageData[i2 * 4 + 1] = (byte)i5;
+				this.imageData[i2 * 4 + 2] = (byte)i8;
+				this.imageData[i2 * 4 + 3] = (byte)i9;
+			}
+
+		}
 	}
 }
--- net/minecraft/src/NoiseGeneratorPerlin.java
+++ net/minecraft/src/NoiseGeneratorPerlin.java
@@ -12,144 +12,138 @@
 		this(new Random());
 	}
 
-	public NoiseGeneratorPerlin(Random var1) {
+	public NoiseGeneratorPerlin(Random random) {
 		this.permutations = new int[512];
-		this.xCoord = var1.nextDouble() * 256.0D;
-		this.yCoord = var1.nextDouble() * 256.0D;
-		this.zCoord = var1.nextDouble() * 256.0D;
-
-		int var2;
-		for(var2 = 0; var2 < 256; this.permutations[var2] = var2++) {
-		}
-
-		for(var2 = 0; var2 < 256; ++var2) {
-			int var3 = var1.nextInt(256 - var2) + var2;
-			int var4 = this.permutations[var2];
-			this.permutations[var2] = this.permutations[var3];
-			this.permutations[var3] = var4;
-			this.permutations[var2 + 256] = this.permutations[var2];
-		}
-
-	}
-
-	public double generateNoise(double var1, double var3, double var5) {
-		double var7 = var1 + this.xCoord;
-		double var9 = var3 + this.yCoord;
-		double var11 = var5 + this.zCoord;
-		int var13 = (int)var7;
-		int var14 = (int)var9;
-		int var15 = (int)var11;
-		if(var7 < (double)var13) {
-			--var13;
-		}
-
-		if(var9 < (double)var14) {
-			--var14;
-		}
-
-		if(var11 < (double)var15) {
-			--var15;
-		}
-
-		int var16 = var13 & 255;
-		int var17 = var14 & 255;
-		int var18 = var15 & 255;
-		var7 -= (double)var13;
-		var9 -= (double)var14;
-		var11 -= (double)var15;
-		double var19 = var7 * var7 * var7 * (var7 * (var7 * 6.0D - 15.0D) + 10.0D);
-		double var21 = var9 * var9 * var9 * (var9 * (var9 * 6.0D - 15.0D) + 10.0D);
-		double var23 = var11 * var11 * var11 * (var11 * (var11 * 6.0D - 15.0D) + 10.0D);
-		int var25 = this.permutations[var16] + var17;
-		int var26 = this.permutations[var25] + var18;
-		int var27 = this.permutations[var25 + 1] + var18;
-		int var28 = this.permutations[var16 + 1] + var17;
-		int var29 = this.permutations[var28] + var18;
-		int var30 = this.permutations[var28 + 1] + var18;
-		return this.lerp(var23, this.lerp(var21, this.lerp(var19, this.grad(this.permutations[var26], var7, var9, var11), this.grad(this.permutations[var29], var7 - 1.0D, var9, var11)), this.lerp(var19, this.grad(this.permutations[var27], var7, var9 - 1.0D, var11), this.grad(this.permutations[var30], var7 - 1.0D, var9 - 1.0D, var11))), this.lerp(var21, this.lerp(var19, this.grad(this.permutations[var26 + 1], var7, var9, var11 - 1.0D), this.grad(this.permutations[var29 + 1], var7 - 1.0D, var9, var11 - 1.0D)), this.lerp(var19, this.grad(this.permutations[var27 + 1], var7, var9 - 1.0D, var11 - 1.0D), this.grad(this.permutations[var30 + 1], var7 - 1.0D, var9 - 1.0D, var11 - 1.0D))));
-	}
-
-	public double lerp(double var1, double var3, double var5) {
-		return var3 + var1 * (var5 - var3);
-	}
-
-	public double grad(int var1, double var2, double var4, double var6) {
-		int var8 = var1 & 15;
-		double var9 = var8 < 8 ? var2 : var4;
-		double var11 = var8 < 4 ? var4 : (var8 != 12 && var8 != 14 ? var6 : var2);
-		return ((var8 & 1) == 0 ? var9 : -var9) + ((var8 & 2) == 0 ? var11 : -var11);
-	}
-
-	public double generateNoise(double var1, double var3) {
-		return this.generateNoise(var1, var3, 0.0D);
-	}
-
-	public void populateNoiseArray(double[] var1, double var2, double var4, double var6, int var8, int var9, int var10, double var11, double var13, double var15, double var17) {
-		int var19 = 0;
-		double var20 = 1.0D / var17;
-		int var22 = -1;
-		boolean var23 = false;
-		boolean var24 = false;
-		boolean var25 = false;
-		boolean var26 = false;
-		boolean var27 = false;
-		boolean var28 = false;
-		double var29 = 0.0D;
-		double var31 = 0.0D;
-		double var33 = 0.0D;
-		double var35 = 0.0D;
-
-		for(int var37 = 0; var37 < var8; ++var37) {
-			double var38 = (var2 + (double)var37) * var11 + this.xCoord;
-			int var40 = (int)var38;
-			if(var38 < (double)var40) {
-				--var40;
+		this.xCoord = random.nextDouble() * 256.0D;
+		this.yCoord = random.nextDouble() * 256.0D;
+		this.zCoord = random.nextDouble() * 256.0D;
+
+		int i2;
+		for(i2 = 0; i2 < 256; this.permutations[i2] = i2++) {
+		}
+
+		for(i2 = 0; i2 < 256; ++i2) {
+			int i3 = random.nextInt(256 - i2) + i2;
+			int i4 = this.permutations[i2];
+			this.permutations[i2] = this.permutations[i3];
+			this.permutations[i3] = i4;
+			this.permutations[i2 + 256] = this.permutations[i2];
+		}
+
+	}
+
+	public double generateNoise(double x, double y, double z) {
+		double d7 = x + this.xCoord;
+		double d9 = y + this.yCoord;
+		double d11 = z + this.zCoord;
+		int i13 = (int)d7;
+		int i14 = (int)d9;
+		int i15 = (int)d11;
+		if(d7 < (double)i13) {
+			--i13;
+		}
+
+		if(d9 < (double)i14) {
+			--i14;
+		}
+
+		if(d11 < (double)i15) {
+			--i15;
+		}
+
+		int i16 = i13 & 255;
+		int i17 = i14 & 255;
+		int i18 = i15 & 255;
+		d7 -= (double)i13;
+		d9 -= (double)i14;
+		d11 -= (double)i15;
+		double d19 = d7 * d7 * d7 * (d7 * (d7 * 6.0D - 15.0D) + 10.0D);
+		double d21 = d9 * d9 * d9 * (d9 * (d9 * 6.0D - 15.0D) + 10.0D);
+		double d23 = d11 * d11 * d11 * (d11 * (d11 * 6.0D - 15.0D) + 10.0D);
+		int i25 = this.permutations[i16] + i17;
+		int i26 = this.permutations[i25] + i18;
+		int i27 = this.permutations[i25 + 1] + i18;
+		int i28 = this.permutations[i16 + 1] + i17;
+		int i29 = this.permutations[i28] + i18;
+		int i30 = this.permutations[i28 + 1] + i18;
+		return this.lerp(d23, this.lerp(d21, this.lerp(d19, this.grad(this.permutations[i26], d7, d9, d11), this.grad(this.permutations[i29], d7 - 1.0D, d9, d11)), this.lerp(d19, this.grad(this.permutations[i27], d7, d9 - 1.0D, d11), this.grad(this.permutations[i30], d7 - 1.0D, d9 - 1.0D, d11))), this.lerp(d21, this.lerp(d19, this.grad(this.permutations[i26 + 1], d7, d9, d11 - 1.0D), this.grad(this.permutations[i29 + 1], d7 - 1.0D, d9, d11 - 1.0D)), this.lerp(d19, this.grad(this.permutations[i27 + 1], d7, d9 - 1.0D, d11 - 1.0D), this.grad(this.permutations[i30 + 1], d7 - 1.0D, d9 - 1.0D, d11 - 1.0D))));
+	}
+
+	public double lerp(double x, double y, double z) {
+		return y + x * (z - y);
+	}
+
+	public double grad(int integer, double double2, double double3, double double4) {
+		int i8 = integer & 15;
+		double d9 = i8 < 8 ? double2 : double3;
+		double d11 = i8 < 4 ? double3 : (i8 != 12 && i8 != 14 ? double4 : double2);
+		return ((i8 & 1) == 0 ? d9 : -d9) + ((i8 & 2) == 0 ? d11 : -d11);
+	}
+
+	public double generateNoise(double x, double z) {
+		return this.generateNoise(x, z, 0.0D);
+	}
+
+	public void populateNoiseArray(double[] data, double double2, double double3, double double4, int integer5, int integer6, int integer7, double double8, double double9, double double10, double double11) {
+		int i19 = 0;
+		double d20 = 1.0D / double11;
+		int i22 = -1;
+		double d23 = 0.0D;
+		double d25 = 0.0D;
+		double d27 = 0.0D;
+		double d29 = 0.0D;
+
+		for(int i31 = 0; i31 < integer5; ++i31) {
+			double d32 = (double2 + (double)i31) * double8 + this.xCoord;
+			int i34 = (int)d32;
+			if(d32 < (double)i34) {
+				--i34;
 			}
 
-			int var41 = var40 & 255;
-			var38 -= (double)var40;
-			double var42 = var38 * var38 * var38 * (var38 * (var38 * 6.0D - 15.0D) + 10.0D);
+			int i35 = i34 & 255;
+			d32 -= (double)i34;
+			double d36 = d32 * d32 * d32 * (d32 * (d32 * 6.0D - 15.0D) + 10.0D);
 
-			for(int var44 = 0; var44 < var10; ++var44) {
-				double var45 = (var6 + (double)var44) * var15 + this.zCoord;
-				int var47 = (int)var45;
-				if(var45 < (double)var47) {
-					--var47;
+			for(int i38 = 0; i38 < integer7; ++i38) {
+				double d39 = (double4 + (double)i38) * double10 + this.zCoord;
+				int i41 = (int)d39;
+				if(d39 < (double)i41) {
+					--i41;
 				}
 
-				int var48 = var47 & 255;
-				var45 -= (double)var47;
-				double var49 = var45 * var45 * var45 * (var45 * (var45 * 6.0D - 15.0D) + 10.0D);
-
-				for(int var51 = 0; var51 < var9; ++var51) {
-					double var52 = (var4 + (double)var51) * var13 + this.yCoord;
-					int var54 = (int)var52;
-					if(var52 < (double)var54) {
-						--var54;
-					}
-
-					int var55 = var54 & 255;
-					var52 -= (double)var54;
-					double var56 = var52 * var52 * var52 * (var52 * (var52 * 6.0D - 15.0D) + 10.0D);
-					if(var51 == 0 || var55 != var22) {
-						var22 = var55;
-						int var64 = this.permutations[var41] + var55;
-						int var65 = this.permutations[var64] + var48;
-						int var66 = this.permutations[var64 + 1] + var48;
-						int var67 = this.permutations[var41 + 1] + var55;
-						int var68 = this.permutations[var67] + var48;
-						int var69 = this.permutations[var67 + 1] + var48;
-						var29 = this.lerp(var42, this.grad(this.permutations[var65], var38, var52, var45), this.grad(this.permutations[var68], var38 - 1.0D, var52, var45));
-						var31 = this.lerp(var42, this.grad(this.permutations[var66], var38, var52 - 1.0D, var45), this.grad(this.permutations[var69], var38 - 1.0D, var52 - 1.0D, var45));
-						var33 = this.lerp(var42, this.grad(this.permutations[var65 + 1], var38, var52, var45 - 1.0D), this.grad(this.permutations[var68 + 1], var38 - 1.0D, var52, var45 - 1.0D));
-						var35 = this.lerp(var42, this.grad(this.permutations[var66 + 1], var38, var52 - 1.0D, var45 - 1.0D), this.grad(this.permutations[var69 + 1], var38 - 1.0D, var52 - 1.0D, var45 - 1.0D));
-					}
-
-					double var58 = this.lerp(var56, var29, var31);
-					double var60 = this.lerp(var56, var33, var35);
-					double var62 = this.lerp(var49, var58, var60);
-					int var10001 = var19++;
-					var1[var10001] += var62 * var20;
+				int i42 = i41 & 255;
+				d39 -= (double)i41;
+				double d43 = d39 * d39 * d39 * (d39 * (d39 * 6.0D - 15.0D) + 10.0D);
+
+				for(int i45 = 0; i45 < integer6; ++i45) {
+					double d46 = (double3 + (double)i45) * double9 + this.yCoord;
+					int i48 = (int)d46;
+					if(d46 < (double)i48) {
+						--i48;
+					}
+
+					int i49 = i48 & 255;
+					d46 -= (double)i48;
+					double d50 = d46 * d46 * d46 * (d46 * (d46 * 6.0D - 15.0D) + 10.0D);
+					if(i45 == 0 || i49 != i22) {
+						i22 = i49;
+						int i52 = this.permutations[i35] + i49;
+						int i53 = this.permutations[i52] + i42;
+						int i54 = this.permutations[i52 + 1] + i42;
+						int i55 = this.permutations[i35 + 1] + i49;
+						int i56 = this.permutations[i55] + i42;
+						int i57 = this.permutations[i55 + 1] + i42;
+						d23 = this.lerp(d36, this.grad(this.permutations[i53], d32, d46, d39), this.grad(this.permutations[i56], d32 - 1.0D, d46, d39));
+						d25 = this.lerp(d36, this.grad(this.permutations[i54], d32, d46 - 1.0D, d39), this.grad(this.permutations[i57], d32 - 1.0D, d46 - 1.0D, d39));
+						d27 = this.lerp(d36, this.grad(this.permutations[i53 + 1], d32, d46, d39 - 1.0D), this.grad(this.permutations[i56 + 1], d32 - 1.0D, d46, d39 - 1.0D));
+						d29 = this.lerp(d36, this.grad(this.permutations[i54 + 1], d32, d46 - 1.0D, d39 - 1.0D), this.grad(this.permutations[i57 + 1], d32 - 1.0D, d46 - 1.0D, d39 - 1.0D));
+					}
+
+					double d59 = this.lerp(d50, d23, d25);
+					double d60 = this.lerp(d50, d27, d29);
+					double d61 = this.lerp(d43, d59, d60);
+					int i58 = i19++;
+					data[i58] += d61 * d20;
 				}
 			}
 		}
--- /dev/null
+++ net/minecraft/src/WorldZMSpawnWorld2.java
@@ -1,0 +1,59 @@
+package net.minecraft.src;
+
+import java.io.File;
+
+public class WorldZMSpawnWorld2 extends ZMWorld {
+	public boolean field_7573_3HV2pvdyT9Mr2z59d5I8SjaivjrWuWY7TPxPew016Qh6p3milfO55I4Yw9SI = false;
+	public boolean field_7572_2aaOvpTJ4Ls74iNCvaIj3HI4Je3MBj6D9amOilg0kYcJVOtzsixv4NR45714 = true;
+	HandlerPlayDemoUnknownClass field_7570_9AiOZAI78F1DY9Q6w51tMq1SqO0k2opIEcs5Gd44645gv8a5vSr32vLe1NCp = new HandlerPlayDemoUnknownClass((EntityPlayer)null);
+	HandlerPlayDemo field_7571_9lQc72mdV1Pr68IOsrNoT7xX4OC7hksD8DT5A5u5F2EVcG4MgFvxrEasSh0u;
+
+	public XYZv func_7546_09CNVM2pJHfEd8I53GaO82x396qpVix0JSZqlf73zO9Itp6Z0ZM1dFPcr9r6() {
+		return new XYZv(-102L, 73L, -56L);
+	}
+
+	public int func_7551_4HbhCuZ31Qm43141r8d6708jOZ2n3Mc1cYV1vxpZhc5eG8ZMbuvK0a7piUU0() {
+		return 21000;
+	}
+
+	public void func_7549_44O8yX39q3gNk27615OXRQ532BD73gQDG1C0XB575HgYp5YVG7N00ux31ql9(EntityPlayer gb) {
+		if((int)gb.posX == -98 && (int)gb.posY == 76) {
+			int i2 = (int)gb.posZ;
+			if(i2 <= -66 && i2 >= -68 && !this.field_7573_3HV2pvdyT9Mr2z59d5I8SjaivjrWuWY7TPxPew016Qh6p3milfO55I4Yw9SI) {
+				if(this.rand.nextInt(100) <= 5 || this.field_7572_2aaOvpTJ4Ls74iNCvaIj3HI4Je3MBj6D9amOilg0kYcJVOtzsixv4NR45714) {
+					this.spawnEntityInWorld(new EntityOtherPlayerMPUnknownClass2(this, this.field_7571_9lQc72mdV1Pr68IOsrNoT7xX4OC7hksD8DT5A5u5F2EVcG4MgFvxrEasSh0u));
+					this.field_7572_2aaOvpTJ4Ls74iNCvaIj3HI4Je3MBj6D9amOilg0kYcJVOtzsixv4NR45714 = false;
+				}
+
+				this.field_7573_3HV2pvdyT9Mr2z59d5I8SjaivjrWuWY7TPxPew016Qh6p3milfO55I4Yw9SI = true;
+			}
+		} else {
+			this.field_7573_3HV2pvdyT9Mr2z59d5I8SjaivjrWuWY7TPxPew016Qh6p3milfO55I4Yw9SI = false;
+		}
+
+	}
+
+	public WorldZMSpawnWorld2(File worldFile, String levelName) {
+		super(worldFile, levelName);
+		this.enemySpawnLocations.add(new WorldZMSpawn(new NamedLoc(-105, 71, -66, "b1_left"), new XYZv(0L, -1L, 0L)));
+		this.enemySpawnLocations.add(new WorldZMSpawn(new NamedLoc(-103, 71, -70, "b1_center"), new XYZv(0L, -1L, 0L)));
+		this.enemySpawnLocations.add(new WorldZMSpawn(new NamedLoc(-101, 71, -64, "b1_right"), new XYZv(0L, -1L, 0L)));
+		this.func_7544_6zl5Arnowm866sQ3ny372TOkUNmzVF1HF27ODrSt9jyfg491UBi1U4DDt2Yq(new XYZv(-107L, 70L, -74L), new XYZv(-107L, 73L, -74L));
+		this.func_7544_6zl5Arnowm866sQ3ny372TOkUNmzVF1HF27ODrSt9jyfg491UBi1U4DDt2Yq(new XYZv(-101L, 75L, -66L), new XYZv(-106L, 76L, -66L));
+		Ext1605Utils.setBlock(this, -99L, 75L, -66L, ExtBlocks.CrudePillar.blockID);
+		Ext1605Utils.setBlock(this, -99L, 76L, -66L, ExtBlocks.CrudePillar.blockID);
+		Ext1605Utils.setBlock(this, -101L, 78L, -61L, ExtBlocks.WeaponGiverGrayGun.blockID);
+		this.field_7571_9lQc72mdV1Pr68IOsrNoT7xX4OC7hksD8DT5A5u5F2EVcG4MgFvxrEasSh0u = HandlerPlayDemo.func_11428_9k6E1ErM8m8Ekl2tnCyj5PljXv5fpIe33XB87jRlW98HF72SweTYv0JQvjaQ((new File(worldFile, levelName + "/zd1.b")).getPath());
+		this.field_7571_9lQc72mdV1Pr68IOsrNoT7xX4OC7hksD8DT5A5u5F2EVcG4MgFvxrEasSh0u.field_11430_0OdUr2nD4R8uO36Sd51QoP94Lm2202x55uFJQVi7Sy5OO23j6PTNlph9id4f = "\u0002three";
+	}
+
+	public void func_7550_1TEi6UNf3SwyaU3NIC3s8C7gZNGcTG9vFQGy5qOc4gI9AwjR87h7g68M37B3(XYZv ya, int integer) {
+		if(ya.x == -101L && ya.y == 78L && ya.z == -61L) {
+			Ext1605Utils.setBlock(this, -99L, 75L, -66L, 0);
+			Ext1605Utils.setBlock(this, -99L, 76L, -66L, 0);
+			Ext1605Utils.setBlock(this, -101L, 78L, -61L, 0);
+			this.playSoundEffect(-99.0D, 75.0D, -66.0D, "random.glass", 1.0F, 0.0F);
+		}
+
+	}
+}
--- net/minecraft/src/ClippingHelper.java
+++ net/minecraft/src/ClippingHelper.java
@@ -6,9 +6,9 @@
 	public float[] modelviewMatrix = new float[16];
 	public float[] clippingMatrix = new float[16];
 
-	public boolean isBoxInFrustum(double var1, double var3, double var5, double var7, double var9, double var11) {
-		for(int var13 = 0; var13 < 6; ++var13) {
-			if((double)this.frustum[var13][0] * var1 + (double)this.frustum[var13][1] * var3 + (double)this.frustum[var13][2] * var5 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var7 + (double)this.frustum[var13][1] * var3 + (double)this.frustum[var13][2] * var5 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var1 + (double)this.frustum[var13][1] * var9 + (double)this.frustum[var13][2] * var5 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var7 + (double)this.frustum[var13][1] * var9 + (double)this.frustum[var13][2] * var5 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var1 + (double)this.frustum[var13][1] * var3 + (double)this.frustum[var13][2] * var11 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var7 + (double)this.frustum[var13][1] * var3 + (double)this.frustum[var13][2] * var11 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var1 + (double)this.frustum[var13][1] * var9 + (double)this.frustum[var13][2] * var11 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var7 + (double)this.frustum[var13][1] * var9 + (double)this.frustum[var13][2] * var11 + (double)this.frustum[var13][3] <= 0.0D) {
+	public boolean isBoxInFrustum(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
+		for(int i13 = 0; i13 < 6; ++i13) {
+			if((double)this.frustum[i13][0] * minX + (double)this.frustum[i13][1] * minY + (double)this.frustum[i13][2] * minZ + (double)this.frustum[i13][3] <= 0.0D && (double)this.frustum[i13][0] * maxX + (double)this.frustum[i13][1] * minY + (double)this.frustum[i13][2] * minZ + (double)this.frustum[i13][3] <= 0.0D && (double)this.frustum[i13][0] * minX + (double)this.frustum[i13][1] * maxY + (double)this.frustum[i13][2] * minZ + (double)this.frustum[i13][3] <= 0.0D && (double)this.frustum[i13][0] * maxX + (double)this.frustum[i13][1] * maxY + (double)this.frustum[i13][2] * minZ + (double)this.frustum[i13][3] <= 0.0D && (double)this.frustum[i13][0] * minX + (double)this.frustum[i13][1] * minY + (double)this.frustum[i13][2] * maxZ + (double)this.frustum[i13][3] <= 0.0D && (double)this.frustum[i13][0] * maxX + (double)this.frustum[i13][1] * minY + (double)this.frustum[i13][2] * maxZ + (double)this.frustum[i13][3] <= 0.0D && (double)this.frustum[i13][0] * minX + (double)this.frustum[i13][1] * maxY + (double)this.frustum[i13][2] * maxZ + (double)this.frustum[i13][3] <= 0.0D && (double)this.frustum[i13][0] * maxX + (double)this.frustum[i13][1] * maxY + (double)this.frustum[i13][2] * maxZ + (double)this.frustum[i13][3] <= 0.0D) {
 				return false;
 			}
 		}
--- net/minecraft/src/SignModel.java
+++ net/minecraft/src/SignModel.java
@@ -11,7 +11,7 @@
 	}
 
 	public void renderSign() {
-		this.signBoard.render(1.0F / 16.0F);
-		this.signStick.render(1.0F / 16.0F);
+		this.signBoard.render(0.0625F);
+		this.signStick.render(0.0625F);
 	}
 }
--- net/minecraft/src/NBTBase.java
+++ net/minecraft/src/NBTBase.java
@@ -7,9 +7,9 @@
 public abstract class NBTBase {
 	private String key = null;
 
-	abstract void writeTagContents(DataOutput var1) throws IOException;
+	abstract void writeTagContents(DataOutput dataOutput1) throws IOException;
 
-	abstract void readTagContents(DataInput var1) throws IOException;
+	abstract void readTagContents(DataInput dataInput1) throws IOException;
 
 	public abstract byte getType();
 
@@ -17,33 +17,34 @@
 		return this.key == null ? "" : this.key;
 	}
 
-	public NBTBase setKey(String var1) {
-		this.key = var1;
+	public NBTBase setKey(String name) {
+		this.key = name;
 		return this;
 	}
 
-	public static NBTBase readNamedTag(DataInput var0) throws IOException {
-		byte var1 = var0.readByte();
-		if(var1 == 0) {
+	public static NBTBase readNamedTag(DataInput dataInput) throws IOException {
+		byte b1 = dataInput.readByte();
+		if(b1 == 0) {
 			return new NBTTagEnd();
 		} else {
-			NBTBase var2 = createTagOfType(var1);
-			var2.key = var0.readUTF();
-			var2.readTagContents(var0);
-			return var2;
-		}
-	}
-
-	public static void writeNamedTag(NBTBase var0, DataOutput var1) throws IOException {
-		var1.writeByte(var0.getType());
-		if(var0.getType() != 0) {
-			var1.writeUTF(var0.getKey());
-			var0.writeTagContents(var1);
-		}
-	}
-
-	public static NBTBase createTagOfType(byte var0) {
-		switch(var0) {
+			NBTBase nBTBase2 = createTagOfType(b1);
+			nBTBase2.key = dataInput.readUTF();
+			nBTBase2.readTagContents(dataInput);
+			return nBTBase2;
+		}
+	}
+
+	public static void writeNamedTag(NBTBase tag, DataOutput dataOutput) throws IOException {
+		dataOutput.writeByte(tag.getType());
+		if(tag.getType() != 0) {
+			dataOutput.writeUTF(tag.getKey());
+			tag.writeTagContents(dataOutput);
+		}
+
+	}
+
+	public static NBTBase createTagOfType(byte type) {
+		switch(type) {
 		case 0:
 			return new NBTTagEnd();
 		case 1:
@@ -71,8 +72,8 @@
 		}
 	}
 
-	public static String getTagName(byte var0) {
-		switch(var0) {
+	public static String getTagName(byte type) {
+		switch(type) {
 		case 0:
 			return "TAG_End";
 		case 1:
--- /dev/null
+++ net/minecraft/src/Decoder.java
@@ -1,0 +1,196 @@
+package net.minecraft.src;
+
+import java.io.InputStream;
+import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.Objects;
+
+public class Decoder {
+	private final boolean isURL;
+	private final boolean isMIME;
+	private static final int[] fromBase64 = new int[256];
+	private static final int[] fromBase64URL;
+	static final Decoder RFC4648;
+	static final Decoder RFC4648_URLSAFE;
+	static final Decoder RFC2045;
+
+	private Decoder(boolean boolean1, boolean boolean2) {
+		this.isURL = boolean1;
+		this.isMIME = boolean2;
+	}
+
+	public byte[] decode(byte[] arr) {
+		byte[] b2 = new byte[this.outLength(arr, 0, arr.length)];
+		int i3 = this.decode0(arr, 0, arr.length, b2);
+		if(i3 != b2.length) {
+			b2 = Arrays.copyOf(b2, i3);
+		}
+
+		return b2;
+	}
+
+	public byte[] decode(String string) {
+		return this.decode(string.getBytes(StandardCharsets.ISO_8859_1));
+	}
+
+	public int decode(byte[] arr1, byte[] arr2) {
+		int i3 = this.outLength(arr1, 0, arr1.length);
+		if(arr2.length < i3) {
+			throw new IllegalArgumentException("Output byte array is too small for decoding all input bytes");
+		} else {
+			return this.decode0(arr1, 0, arr1.length, arr2);
+		}
+	}
+
+	public ByteBuffer decode(ByteBuffer byteBuffer) {
+		int i2 = byteBuffer.position();
+
+		try {
+			byte[] b3;
+			int i4;
+			int i5;
+			if(byteBuffer.hasArray()) {
+				b3 = byteBuffer.array();
+				i4 = byteBuffer.arrayOffset() + byteBuffer.position();
+				i5 = byteBuffer.arrayOffset() + byteBuffer.limit();
+				byteBuffer.position(byteBuffer.limit());
+			} else {
+				b3 = new byte[byteBuffer.remaining()];
+				byteBuffer.get(b3);
+				i4 = 0;
+				i5 = b3.length;
+			}
+
+			byte[] b6 = new byte[this.outLength(b3, i4, i5)];
+			return ByteBuffer.wrap(b6, 0, this.decode0(b3, i4, i5, b6));
+		} catch (IllegalArgumentException illegalArgumentException7) {
+			byteBuffer.position(i2);
+			throw illegalArgumentException7;
+		}
+	}
+
+	public InputStream wrap(InputStream inputStream) {
+		Objects.requireNonNull(inputStream);
+		return new DecInputStream(inputStream, this.isURL ? fromBase64URL : fromBase64, this.isMIME);
+	}
+
+	private int outLength(byte[] arr, int integer2, int integer3) {
+		int[] i4 = this.isURL ? fromBase64URL : fromBase64;
+		int i5 = 0;
+		int i6 = integer3 - integer2;
+		if(i6 == 0) {
+			return 0;
+		} else if(i6 < 2) {
+			if(this.isMIME && i4[0] == -1) {
+				return 0;
+			} else {
+				throw new IllegalArgumentException("Input byte[] should at least have 2 bytes for base64 bytes");
+			}
+		} else {
+			if(this.isMIME) {
+				int i7 = 0;
+
+				while(integer2 < integer3) {
+					int i8 = arr[integer2++] & 255;
+					if(i8 == 61) {
+						i6 -= integer3 - integer2 + 1;
+						break;
+					}
+
+					if(i4[i8] == -1) {
+						++i7;
+					}
+				}
+
+				i6 -= i7;
+			} else if(arr[integer3 - 1] == 61) {
+				++i5;
+				if(arr[integer3 - 2] == 61) {
+					++i5;
+				}
+			}
+
+			if(i5 == 0 && (i6 & 3) != 0) {
+				i5 = 4 - (i6 & 3);
+			}
+
+			return 3 * ((i6 + 3) / 4) - i5;
+		}
+	}
+
+	private int decode0(byte[] arr1, int integer2, int integer3, byte[] arr4) {
+		int[] i5 = this.isURL ? fromBase64URL : fromBase64;
+		int i6 = 0;
+		int i7 = 0;
+		int i8 = 18;
+
+		while(integer2 < integer3) {
+			int i9 = arr1[integer2++] & 255;
+			if((i9 = i5[i9]) < 0) {
+				if(i9 == -2) {
+					if((i8 != 6 || integer2 != integer3 && arr1[integer2++] == 61) && i8 != 18) {
+						break;
+					}
+
+					throw new IllegalArgumentException("Input byte array has wrong 4-byte ending unit");
+				}
+
+				if(!this.isMIME) {
+					throw new IllegalArgumentException("Illegal base64 character " + Integer.toString(arr1[integer2 - 1], 16));
+				}
+			} else {
+				i7 |= i9 << i8;
+				i8 -= 6;
+				if(i8 < 0) {
+					arr4[i6++] = (byte)(i7 >> 16);
+					arr4[i6++] = (byte)(i7 >> 8);
+					arr4[i6++] = (byte)i7;
+					i8 = 18;
+					i7 = 0;
+				}
+			}
+		}
+
+		if(i8 == 6) {
+			arr4[i6++] = (byte)(i7 >> 16);
+		} else if(i8 == 0) {
+			arr4[i6++] = (byte)(i7 >> 16);
+			arr4[i6++] = (byte)(i7 >> 8);
+		} else if(i8 == 12) {
+			throw new IllegalArgumentException("Last unit does not have enough valid bits");
+		}
+
+		do {
+			if(integer2 >= integer3) {
+				return i6;
+			}
+		} while(this.isMIME && i5[arr1[integer2++] & 255] < 0);
+
+		throw new IllegalArgumentException("Input byte array has incorrect ending byte at " + integer2);
+	}
+
+	static int[] fromBase64() {
+		return fromBase64;
+	}
+
+	static {
+		Arrays.fill(fromBase64, -1);
+
+		int i0;
+		for(i0 = 0; i0 < Encoder.toBase64().length; fromBase64[Encoder.toBase64()[i0]] = i0++) {
+		}
+
+		fromBase64[61] = -2;
+		fromBase64URL = new int[256];
+		Arrays.fill(fromBase64URL, -1);
+
+		for(i0 = 0; i0 < Encoder.toBase64URL().length; fromBase64URL[Encoder.toBase64URL()[i0]] = i0++) {
+		}
+
+		fromBase64URL[61] = -2;
+		RFC4648 = new Decoder(false, false);
+		RFC4648_URLSAFE = new Decoder(true, false);
+		RFC2045 = new Decoder(false, true);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockWeaponUpgrader.java
@@ -1,0 +1,47 @@
+package net.minecraft.src;
+
+import org.lwjgl.input.Keyboard;
+
+public class BlockWeaponUpgrader extends BlockMultiSided implements BlockUnknownInterface {
+	public BlockWeaponUpgrader(int integer1, int integer2, int integer3, Material sx) {
+		super(integer1, integer3, integer2, integer3, sx);
+	}
+
+	public int func_8294_2xDly765WG6MKk6eRIZSx0p4q8jxqxy8x8s0Y5AtF6O6Dig4IJSn039l2965(int integer) {
+		return integer == Item.swordWood.shiftedIndex ? Item.swordStone.shiftedIndex : (integer == Item.swordStone.shiftedIndex ? Item.swordSteel.shiftedIndex : (integer == Item.swordSteel.shiftedIndex ? Item.swordDiamond.shiftedIndex : (integer == Item.swordGold.shiftedIndex ? Item.swordStone.shiftedIndex : (integer == Item.swordDiamond.shiftedIndex ? ExtItems.obsidianSword.shiftedIndex : (integer == ExtItems.essenceGun.shiftedIndex ? ExtItems.GrayGun.shiftedIndex : 0)))));
+	}
+
+	public int func_8293_4Q6kYn4VTyMC3J1VNnN096yJlPTMmC6s8L0Xy53z6p1Xcsq4913kkNJq9zC5(int integer) {
+		return integer == Item.swordWood.shiftedIndex ? 500 : (integer == Item.swordStone.shiftedIndex ? 1000 : (integer == Item.swordSteel.shiftedIndex ? 5000 : (integer == Item.swordGold.shiftedIndex ? 750 : (integer == Item.swordDiamond.shiftedIndex ? 15000 : (integer == ExtItems.essenceGun.shiftedIndex ? 16000 : 0)))));
+	}
+
+	public boolean func_8295_2xrz6zec7v26fXq7fvdKf3DGOU98s7qkgmrq57fwoOnEmUVdiyb9pGf6trCk(int integer) {
+		return integer == Item.swordWood.shiftedIndex || integer == Item.swordStone.shiftedIndex || integer == Item.swordSteel.shiftedIndex || integer == Item.swordGold.shiftedIndex || integer == Item.swordDiamond.shiftedIndex || integer == ExtItems.essenceGun.shiftedIndex;
+	}
+
+	public void func_8286_2f84KM1xKjK9eBj4915qo36L405Hm9W3JZ41244r918IGv3BpYiut0G1VBGw(EntityPlayerZombieModeClient wp, XYZv ya) {
+		ItemStack itemStack3 = wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.getCurrentItem();
+		if(itemStack3 != null && this.func_8295_2xrz6zec7v26fXq7fvdKf3DGOU98s7qkgmrq57fwoOnEmUVdiyb9pGf6trCk(itemStack3.itemID)) {
+			int i4 = this.func_8293_4Q6kYn4VTyMC3J1VNnN096yJlPTMmC6s8L0Xy53z6p1Xcsq4913kkNJq9zC5(itemStack3.itemID);
+			if(wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.func_8686_3fQ4Zvl6ZGZtMHz8BDhx9ci7pQP8EhDqu7Ri4ywsZ3854I2e4ev3W4B3R3iy() >= (long)i4) {
+				wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.func_8688_6DmcXOP1jZRKDasP2440t8904Ry66MRC3K00nwd8iGDlPgYii5d1f50QVICF((long)(-i4));
+				ItemStack itemStack5 = new ItemStack(this.func_8294_2xDly765WG6MKk6eRIZSx0p4q8jxqxy8x8s0Y5AtF6O6Dig4IJSn039l2965(itemStack3.itemID));
+				wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.setInventorySlotContents(wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.currentItem, itemStack5);
+				InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10946_7AR6ItAen3fx05Vncef3s63538b5wb97oi4kfrKpN1xXa92ennAR19lcPgfJ.func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(new Object[]{wp, itemStack5.itemID});
+			} else {
+				InputHandler.mc.ingameGUI.addChatMessage("Not enough points!");
+			}
+		}
+
+	}
+
+	public String func_8287_3t2cX22yD5J55Zh6G33szTT1PY525wnemKTHp3jQ2r2jhLod41nugOV5rhqI(EntityPlayerZombieModeClient wp, XYZv ya) {
+		String string3 = Keyboard.getKeyName(InputHandler.mc.options.keyBindInventory.keyCode);
+		ItemStack itemStack4 = wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.getCurrentItem();
+		return itemStack4 != null && this.func_8295_2xrz6zec7v26fXq7fvdKf3DGOU98s7qkgmrq57fwoOnEmUVdiyb9pGf6trCk(itemStack4.itemID) ? "[" + string3 + "] Upgrade [" + this.func_8293_4Q6kYn4VTyMC3J1VNnN096yJlPTMmC6s8L0Xy53z6p1Xcsq4913kkNJq9zC5(itemStack4.itemID) + " points]" : "Cannot upgrade this.";
+	}
+
+	public int func_8288_98t8S89tFW42rGL9ALNhVV7sJ5qB3j8Z10bg69FoU68e30R380Rp4L4Dn5kC() {
+		return 10;
+	}
+}
--- /dev/null
+++ net/minecraft/src/LocalAuthManager.java
@@ -1,0 +1,4 @@
+package net.minecraft.src;
+
+public class LocalAuthManager {
+}
--- /dev/null
+++ net/minecraft/src/PoseStack.java
@@ -1,0 +1,4 @@
+package net.minecraft.src;
+
+public class PoseStack {
+}
--- /dev/null
+++ net/minecraft/src/FreerunWorld.java
@@ -1,0 +1,22 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.util.List;
+
+public class FreerunWorld extends World {
+	public FreerunWorld(File worldFile, String levelName) {
+		super(worldFile, levelName);
+	}
+
+	public NamedLoc[] getCheckpoints() {
+		return null;
+	}
+
+	public List func_7517_8oADBp42n4G2Ly6U1WLv70n6VyS2bkokzo8dF7ayUqDb1A6ofY86pUJA8mf8() {
+		return null;
+	}
+
+	public int getResetY(long long1, long long2) {
+		return 0;
+	}
+}
--- net/minecraft/src/MovementInput.java
+++ net/minecraft/src/MovementInput.java
@@ -7,12 +7,12 @@
 	public boolean jump = false;
 	public boolean sneak = false;
 
-	public void updatePlayerMoveState(EntityPlayer var1) {
+	public void updatePlayerMoveState(EntityPlayer entityPlayer) {
 	}
 
 	public void resetKeyState() {
 	}
 
-	public void checkKeyForMovementInput(int var1, boolean var2) {
+	public void checkKeyForMovementInput(int key, boolean state) {
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandUnknownClass.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public abstract class CommandUnknownClass {
+	public abstract void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... object1);
+
+	public abstract String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe();
+
+	public String func_8544_2LNc52bM7wODVhzdwN06iupD9ns193TaV9MqyoiLIdr4ljpUGb9jcb39cJB6() {
+		return "--";
+	}
+
+	public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandMcCreat.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandMcCreat extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8578_3iM1F8ZFbdp9M4tIU2Ry2Pqk6CSU5Pka63mw88Fwqa8tqj46Il6lDM7k5dnl;
+    
+    CommandMcCreat(final CommandManager abb) {
+        this.field_8578_3iM1F8ZFbdp9M4tIU2Ry2Pqk6CSU5Pka63mw88Fwqa8tqj46Il6lDM7k5dnl = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.field_9759_4OT0vPMcJ68s5EU822c0Y9Asw74Su111s3rRCw8OSGMsYM8lx153p73RBtj3 = ((int)arr[0] == 1);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "" + InputHandler.field_9759_4OT0vPMcJ68s5EU822c0Y9Asw74Su111s3rRCw8OSGMsYM8lx153p73RBtj3;
+    }
+}
--- /dev/null
+++ net/minecraft/src/BlockWireframeBlock.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockWireframeBlock extends BlockBreakable {
+	public BlockWireframeBlock(int id, int blockIndex, Material material, boolean localFlag) {
+		super(id, blockIndex, material, localFlag);
+	}
+
+	public int quantityDropped(Random random) {
+		return 1;
+	}
+}
--- net/minecraft/src/EntityBoat.java
+++ net/minecraft/src/EntityBoat.java
@@ -7,8 +7,8 @@
 	public int timeSinceHit;
 	public int forwardDirection;
 
-	public EntityBoat(World var1) {
-		super(var1);
+	public EntityBoat(World world) {
+		super(world);
 		this.damageTaken = 0;
 		this.timeSinceHit = 0;
 		this.forwardDirection = 1;
@@ -18,8 +18,8 @@
 		this.canTriggerWalking = false;
 	}
 
-	public AxisAlignedBB getCollisionBox(Entity var1) {
-		return var1.boundingBox;
+	public AxisAlignedBB getCollisionBox(Entity entity) {
+		return entity.boundingBox;
 	}
 
 	public AxisAlignedBB getBoundingBox() {
@@ -30,32 +30,32 @@
 		return true;
 	}
 
-	public EntityBoat(World var1, double var2, double var4, double var6) {
-		this(var1);
-		this.setPosition(var2, var4 + (double)this.yOffset, var6);
+	public EntityBoat(World worldObj, double x, double y, double z) {
+		this(worldObj);
+		this.setPosition(x, y + (double)this.yOffset, z);
 		this.motionX = 0.0D;
 		this.motionY = 0.0D;
 		this.motionZ = 0.0D;
-		this.prevPosX = var2;
-		this.prevPosY = var4;
-		this.prevPosZ = var6;
+		this.prevPosX = x;
+		this.prevPosY = y;
+		this.prevPosZ = z;
 	}
 
 	public double getMountedYOffset() {
 		return (double)this.height * 0.0D - (double)0.3F;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		this.forwardDirection = -this.forwardDirection;
 		this.timeSinceHit = 10;
-		this.damageTaken += var2 * 10;
+		this.damageTaken += damage * 10;
 		if(this.damageTaken > 40) {
-			int var3;
-			for(var3 = 0; var3 < 3; ++var3) {
+			int i3;
+			for(i3 = 0; i3 < 3; ++i3) {
 				this.entityDropItem(Block.planks.blockID, 1, 0.0F);
 			}
 
-			for(var3 = 0; var3 < 2; ++var3) {
+			for(i3 = 0; i3 < 2; ++i3) {
 				this.entityDropItem(Item.stick.shiftedIndex, 1, 0.0F);
 			}
 
@@ -82,40 +82,40 @@
 		this.prevPosX = this.posX;
 		this.prevPosY = this.posY;
 		this.prevPosZ = this.posZ;
-		byte var1 = 5;
-		double var2 = 0.0D;
+		byte b1 = 5;
+		double d2 = 0.0D;
 
-		for(int var4 = 0; var4 < var1; ++var4) {
-			double var5 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var4 + 0) / (double)var1 - 0.125D;
-			double var7 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var4 + 1) / (double)var1 - 0.125D;
-			AxisAlignedBB var9 = AxisAlignedBB.getBoundingBoxFromPool(this.boundingBox.minX, var5, this.boundingBox.minZ, this.boundingBox.maxX, var7, this.boundingBox.maxZ);
-			if(this.worldObj.isAABBInMaterial(var9, Material.water)) {
-				var2 += 1.0D / (double)var1;
+		for(int i4 = 0; i4 < b1; ++i4) {
+			double d5 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(i4 + 0) / (double)b1 - 0.125D;
+			double d7 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(i4 + 1) / (double)b1 - 0.125D;
+			AxisAlignedBB axisAlignedBB9 = AxisAlignedBB.getBoundingBoxFromPool(this.boundingBox.minX, d5, this.boundingBox.minZ, this.boundingBox.maxX, d7, this.boundingBox.maxZ);
+			if(this.worldObj.isAABBInMaterial(axisAlignedBB9, Material.water)) {
+				d2 += 1.0D / (double)b1;
 			}
 		}
 
-		double var23 = var2 * 2.0D - 1.0D;
-		this.motionY += (double)0.04F * var23;
+		double d23 = d2 * 2.0D - 1.0D;
+		this.motionY += (double)0.04F * d23;
 		if(this.riddenByEntity != null) {
 			this.motionX += this.riddenByEntity.motionX * 0.2D;
 			this.motionZ += this.riddenByEntity.motionZ * 0.2D;
 		}
 
-		double var6 = 0.4D;
-		if(this.motionX < -var6) {
-			this.motionX = -var6;
-		}
-
-		if(this.motionX > var6) {
-			this.motionX = var6;
-		}
-
-		if(this.motionZ < -var6) {
-			this.motionZ = -var6;
-		}
-
-		if(this.motionZ > var6) {
-			this.motionZ = var6;
+		double d6 = 0.4D;
+		if(this.motionX < -d6) {
+			this.motionX = -d6;
+		}
+
+		if(this.motionX > d6) {
+			this.motionX = d6;
+		}
+
+		if(this.motionZ < -d6) {
+			this.motionZ = -d6;
+		}
+
+		if(this.motionZ > d6) {
+			this.motionZ = d6;
 		}
 
 		if(this.onGround) {
@@ -125,39 +125,39 @@
 		}
 
 		this.moveEntity(this.motionX, this.motionY, this.motionZ);
-		double var8 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-		double var10;
-		double var12;
-		if(var8 > 0.15D) {
-			var10 = Math.cos((double)this.rotationYaw * Math.PI / 180.0D);
-			var12 = Math.sin((double)this.rotationYaw * Math.PI / 180.0D);
+		double d8 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+		double d10;
+		double d12;
+		int i14;
+		if(d8 > 0.15D) {
+			d10 = Math.cos((double)this.rotationYaw * Math.PI / 180.0D);
+			d12 = Math.sin((double)this.rotationYaw * Math.PI / 180.0D);
 
-			for(int var14 = 0; (double)var14 < 1.0D + var8 * 60.0D; ++var14) {
-				double var15 = (double)(this.rand.nextFloat() * 2.0F - 1.0F);
-				double var17 = (double)(this.rand.nextInt(2) * 2 - 1) * 0.7D;
-				double var19;
-				double var21;
+			for(i14 = 0; (double)i14 < 1.0D + d8 * 60.0D; ++i14) {
+				double d15 = (double)(this.rand.nextFloat() * 2.0F - 1.0F);
+				double d17 = (double)(this.rand.nextInt(2) * 2 - 1) * 0.7D;
+				double d19;
+				double d21;
 				if(this.rand.nextBoolean()) {
-					var19 = this.posX - var10 * var15 * 0.8D + var12 * var17;
-					var21 = this.posZ - var12 * var15 * 0.8D - var10 * var17;
-					this.worldObj.spawnParticle("splash", var19, this.posY - 0.125D, var21, this.motionX, this.motionY, this.motionZ);
+					d19 = this.posX - d10 * d15 * 0.8D + d12 * d17;
+					d21 = this.posZ - d12 * d15 * 0.8D - d10 * d17;
+					this.worldObj.spawnParticle("splash", d19, this.posY - 0.125D, d21, this.motionX, this.motionY, this.motionZ);
 				} else {
-					var19 = this.posX + var10 + var12 * var15 * 0.7D;
-					var21 = this.posZ + var12 - var10 * var15 * 0.7D;
-					this.worldObj.spawnParticle("splash", var19, this.posY - 0.125D, var21, this.motionX, this.motionY, this.motionZ);
+					d19 = this.posX + d10 + d12 * d15 * 0.7D;
+					d21 = this.posZ + d12 - d10 * d15 * 0.7D;
+					this.worldObj.spawnParticle("splash", d19, this.posY - 0.125D, d21, this.motionX, this.motionY, this.motionZ);
 				}
 			}
 		}
 
-		if(this.isCollidedHorizontally && var8 > 0.15D) {
+		if(this.isCollidedHorizontally && d8 > 0.15D) {
 			this.setEntityDead();
 
-			int var24;
-			for(var24 = 0; var24 < 3; ++var24) {
+			for(i14 = 0; i14 < 3; ++i14) {
 				this.entityDropItem(Block.planks.blockID, 1, 0.0F);
 			}
 
-			for(var24 = 0; var24 < 2; ++var24) {
+			for(i14 = 0; i14 < 2; ++i14) {
 				this.entityDropItem(Item.stick.shiftedIndex, 1, 0.0F);
 			}
 		} else {
@@ -167,37 +167,37 @@
 		}
 
 		this.rotationPitch = 0.0F;
-		var10 = (double)this.rotationYaw;
-		var12 = this.prevPosX - this.posX;
-		double var25 = this.prevPosZ - this.posZ;
-		if(var12 * var12 + var25 * var25 > 0.001D) {
-			var10 = (double)((float)(Math.atan2(var25, var12) * 180.0D / Math.PI));
-		}
-
-		double var16;
-		for(var16 = var10 - (double)this.rotationYaw; var16 >= 180.0D; var16 -= 360.0D) {
-		}
-
-		while(var16 < -180.0D) {
-			var16 += 360.0D;
-		}
-
-		if(var16 > 20.0D) {
-			var16 = 20.0D;
-		}
-
-		if(var16 < -20.0D) {
-			var16 = -20.0D;
-		}
-
-		this.rotationYaw = (float)((double)this.rotationYaw + var16);
+		d10 = (double)this.rotationYaw;
+		d12 = this.prevPosX - this.posX;
+		double d24 = this.prevPosZ - this.posZ;
+		if(d12 * d12 + d24 * d24 > 0.001D) {
+			d10 = (double)((float)(Math.atan2(d24, d12) * 180.0D / Math.PI));
+		}
+
+		double d16;
+		for(d16 = d10 - (double)this.rotationYaw; d16 >= 180.0D; d16 -= 360.0D) {
+		}
+
+		while(d16 < -180.0D) {
+			d16 += 360.0D;
+		}
+
+		if(d16 > 20.0D) {
+			d16 = 20.0D;
+		}
+
+		if(d16 < -20.0D) {
+			d16 = -20.0D;
+		}
+
+		this.rotationYaw = (float)((double)this.rotationYaw + d16);
 		this.setRotation(this.rotationYaw, this.rotationPitch);
-		List var18 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
-		if(var18 != null && var18.size() > 0) {
-			for(int var26 = 0; var26 < var18.size(); ++var26) {
-				Entity var20 = (Entity)var18.get(var26);
-				if(var20 != this.riddenByEntity && var20.canBePushed() && var20 instanceof EntityBoat) {
-					var20.applyEntityCollision(this);
+		List list18 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
+		if(list18 != null && list18.size() > 0) {
+			for(int i25 = 0; i25 < list18.size(); ++i25) {
+				Entity entity20 = (Entity)list18.get(i25);
+				if(entity20 != this.riddenByEntity && entity20.canBePushed() && entity20 instanceof EntityBoat) {
+					entity20.applyEntityCollision(this);
 				}
 			}
 		}
@@ -209,23 +209,23 @@
 	}
 
 	protected void updateRiderPosition() {
-		double var1 = Math.cos((double)this.rotationYaw * Math.PI / 180.0D) * 0.4D;
-		double var3 = Math.sin((double)this.rotationYaw * Math.PI / 180.0D) * 0.4D;
-		this.riddenByEntity.setPosition(this.posX + var1, this.posY + this.getMountedYOffset() + this.riddenByEntity.getYOffset(), this.posZ + var3);
-	}
-
-	protected void writeEntityToNBT(NBTTagCompound var1) {
-	}
-
-	protected void readEntityFromNBT(NBTTagCompound var1) {
+		double d1 = Math.cos((double)this.rotationYaw * Math.PI / 180.0D) * 0.4D;
+		double d3 = Math.sin((double)this.rotationYaw * Math.PI / 180.0D) * 0.4D;
+		this.riddenByEntity.setPosition(this.posX + d1, this.posY + this.getMountedYOffset() + this.riddenByEntity.getYOffset(), this.posZ + d3);
+	}
+
+	protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+	}
+
+	protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {
 	}
 
 	public float getShadowSize() {
 		return 0.0F;
 	}
 
-	public boolean interact(EntityPlayer var1) {
-		var1.mountEntity(this);
+	public boolean interact(EntityPlayer entityPlayer) {
+		entityPlayer.mountEntity(this);
 		return true;
 	}
 }
--- net/minecraft/src/ChunkProviderGenerate.java
+++ net/minecraft/src/ChunkProviderGenerate.java
@@ -1,8 +1,13 @@
 package net.minecraft.src;
 
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
 import java.util.Random;
 
+import net.minecraft.client.Minecraft;
+
 public class ChunkProviderGenerate implements IChunkProvider {
+	public final WorldGenHouseBigInterior field_10359_2j6n1yw1R0AeJ7fX8dV7VsS6Llz1NtrigD0q3v7qKM2xRAdg03wtgiSs2FlQ;
 	private Random rand;
 	private NoiseGeneratorOctaves noiseGen1;
 	private NoiseGeneratorOctaves noiseGen2;
@@ -12,6 +17,8 @@
 	public NoiseGeneratorOctaves noiseGen6;
 	public NoiseGeneratorOctaves noiseGen7;
 	public NoiseGeneratorOctaves mobSpawnerNoise;
+	public NoiseGeneratorPerlin field_10358_5bm8pc76m6Uz3gW3M278IMc36j2gmdu6zRqAwyN5FUbCK0s79j3AqES65RO5;
+	public NoiseGeneratorOctaves field_10346_6m7y5BBc690f5k1wN62h1M5Q6MQ39ORFjeaEFLyPLBjJjSJBuGTvT3D2rW0F;
 	private World worldObj;
 	private double[] noiseArray;
 	private double[] sandNoise = new double[256];
@@ -24,10 +31,12 @@
 	double[] noise6;
 	double[] noise7;
 	int[][] unused = new int[32][32];
+	private int time_hr = 0;
+	private long lastUpdate = 0L;
 
-	public ChunkProviderGenerate(World var1, long var2) {
-		this.worldObj = var1;
-		this.rand = new Random(var2);
+	public ChunkProviderGenerate(World vg, long long2) {
+		this.worldObj = vg;
+		this.rand = new Random(long2);
 		this.noiseGen1 = new NoiseGeneratorOctaves(this.rand, 16);
 		this.noiseGen2 = new NoiseGeneratorOctaves(this.rand, 16);
 		this.noiseGen3 = new NoiseGeneratorOctaves(this.rand, 8);
@@ -35,71 +44,85 @@
 		this.noiseGen5 = new NoiseGeneratorOctaves(this.rand, 4);
 		this.noiseGen6 = new NoiseGeneratorOctaves(this.rand, 10);
 		this.noiseGen7 = new NoiseGeneratorOctaves(this.rand, 16);
-		this.mobSpawnerNoise = new NoiseGeneratorOctaves(this.rand, 8);
+		this.mobSpawnerNoise = new NoiseGeneratorOctaves(this.rand, 5);
+		this.field_10346_6m7y5BBc690f5k1wN62h1M5Q6MQ39ORFjeaEFLyPLBjJjSJBuGTvT3D2rW0F = new NoiseGeneratorOctaves(this.rand, 8);
+		this.field_10359_2j6n1yw1R0AeJ7fX8dV7VsS6Llz1NtrigD0q3v7qKM2xRAdg03wtgiSs2FlQ = new WorldGenHouseBigInterior(this.rand);
 	}
 
-	public void generateTerrain(int var1, int var2, byte[] var3) {
-		byte var4 = 4;
-		byte var5 = 64;
-		int var6 = var4 + 1;
-		byte var7 = 17;
-		int var8 = var4 + 1;
-		this.noiseArray = this.initializeNoiseField(this.noiseArray, var1 * var4, 0, var2 * var4, var6, var7, var8);
-
-		for(int var9 = 0; var9 < var4; ++var9) {
-			for(int var10 = 0; var10 < var4; ++var10) {
-				for(int var11 = 0; var11 < 16; ++var11) {
-					double var12 = 0.125D;
-					double var14 = this.noiseArray[((var9 + 0) * var8 + var10 + 0) * var7 + var11 + 0];
-					double var16 = this.noiseArray[((var9 + 0) * var8 + var10 + 1) * var7 + var11 + 0];
-					double var18 = this.noiseArray[((var9 + 1) * var8 + var10 + 0) * var7 + var11 + 0];
-					double var20 = this.noiseArray[((var9 + 1) * var8 + var10 + 1) * var7 + var11 + 0];
-					double var22 = (this.noiseArray[((var9 + 0) * var8 + var10 + 0) * var7 + var11 + 1] - var14) * var12;
-					double var24 = (this.noiseArray[((var9 + 0) * var8 + var10 + 1) * var7 + var11 + 1] - var16) * var12;
-					double var26 = (this.noiseArray[((var9 + 1) * var8 + var10 + 0) * var7 + var11 + 1] - var18) * var12;
-					double var28 = (this.noiseArray[((var9 + 1) * var8 + var10 + 1) * var7 + var11 + 1] - var20) * var12;
-
-					for(int var30 = 0; var30 < 8; ++var30) {
-						double var31 = 0.25D;
-						double var33 = var14;
-						double var35 = var16;
-						double var37 = (var18 - var14) * var31;
-						double var39 = (var20 - var16) * var31;
-
-						for(int var41 = 0; var41 < 4; ++var41) {
-							int var42 = var41 + var9 * 4 << 11 | 0 + var10 * 4 << 7 | var11 * 8 + var30;
-							short var43 = 128;
-							double var44 = 0.25D;
-							double var46 = var33;
-							double var48 = (var35 - var33) * var44;
-
-							for(int var50 = 0; var50 < 4; ++var50) {
-								int var51 = 0;
-								if(var11 * 8 + var30 < var5) {
-									if(this.worldObj.snowCovered && var11 * 8 + var30 >= var5 - 1) {
-										var51 = Block.ice.blockID;
-									} else {
-										var51 = Block.waterStill.blockID;
-									}
-								}
-
-								if(var46 > 0.0D) {
-									var51 = Block.stone.blockID;
-								}
-
-								var3[var42] = (byte)var51;
-								var42 += var43;
-								var46 += var48;
+	public void generateTerrain(int chunkX, int chunkZ, byte[] blocks) {
+		byte b4 = 4;
+		byte b5 = 64;
+		int i6 = b4 + 1;
+		byte b7 = 17;
+		int i8 = b4 + 1;
+		this.noiseArray = this.initializeNoiseField(this.noiseArray, chunkX * b4, 0, chunkZ * b4, i6, b7, i8);
+
+		for(int i9 = 0; i9 < b4; ++i9) {
+			for(int i10 = 0; i10 < b4; ++i10) {
+				for(int i11 = 0; i11 < 16; ++i11) {
+					double d12 = 0.125D;
+					double d14 = this.noiseArray[((i9 + 0) * i8 + i10 + 0) * b7 + i11 + 0];
+					double d16 = this.noiseArray[((i9 + 0) * i8 + i10 + 1) * b7 + i11 + 0];
+					double d18 = this.noiseArray[((i9 + 1) * i8 + i10 + 0) * b7 + i11 + 0];
+					double d20 = this.noiseArray[((i9 + 1) * i8 + i10 + 1) * b7 + i11 + 0];
+					double d22 = (this.noiseArray[((i9 + 0) * i8 + i10 + 0) * b7 + i11 + 1] - d14) * d12;
+					double d24 = (this.noiseArray[((i9 + 0) * i8 + i10 + 1) * b7 + i11 + 1] - d16) * d12;
+					double d26 = (this.noiseArray[((i9 + 1) * i8 + i10 + 0) * b7 + i11 + 1] - d18) * d12;
+					double d28 = (this.noiseArray[((i9 + 1) * i8 + i10 + 1) * b7 + i11 + 1] - d20) * d12;
+
+					for(int i30 = 0; i30 < 8; ++i30) {
+						double d31 = 0.25D;
+						double d33 = d14;
+						double d35 = d16;
+						double d37 = (d18 - d14) * d31;
+						double d39 = (d20 - d16) * d31;
+
+						for(int i41 = 0; i41 < 4; ++i41) {
+							int i42 = i41 + i9 * 4 << 11 | 0 + i10 * 4 << 7 | i11 * 8 + i30;
+							short s43 = 128;
+							double d44 = 0.25D;
+							double d46 = d33;
+							double d48 = (d35 - d33) * d44;
+
+							for(int i50 = 0; i50 < 4; ++i50) {
+								int i51 = 0;
+								if(i11 * 8 + i30 < b5) {
+									if(this.worldObj.snowCovered && i11 * 8 + i30 >= b5 - 1) {
+										i51 = Block.ice.blockID;
+									} else {
+										i51 = Block.waterStill.blockID;
+									}
+
+									if(this.worldObj.snowCovered && i11 * 8 + i30 >= b5 - 1) {
+										i51 = Block.snow.blockID;
+									} else {
+										i51 = Block.sand.blockID;
+									}
+
+									if(this.worldObj.sandCovered && i11 * 8 + i30 >= b5 - 1) {
+										i51 = Block.sand.blockID;
+									} else {
+										i51 = Block.waterStill.blockID;
+									}
+								}
+
+								if(d46 > 0.0D) {
+									i51 = Block.stone.blockID;
+								}
+
+								blocks[i42] = (byte)i51;
+								i42 += s43;
+								d46 += d48;
 							}
 
-							var33 += var37;
-							var35 += var39;
+							d33 += d37;
+							d35 += d39;
 						}
 
-						var14 += var22;
-						var16 += var24;
-						var18 += var26;
-						var20 += var28;
+						d14 += d22;
+						d16 += d24;
+						d18 += d26;
+						d20 += d28;
 					}
 				}
 			}
@@ -107,68 +130,92 @@
 
 	}
 
-	public void replaceSurfaceBlocks(int var1, int var2, byte[] var3) {
-		byte var4 = 64;
-		double var5 = 1.0D / 32.0D;
-		this.sandNoise = this.noiseGen4.generateNoiseOctaves(this.sandNoise, (double)(var1 * 16), (double)(var2 * 16), 0.0D, 16, 16, 1, var5, var5, 1.0D);
-		this.gravelNoise = this.noiseGen4.generateNoiseOctaves(this.gravelNoise, (double)(var2 * 16), 109.0134D, (double)(var1 * 16), 16, 1, 16, var5, 1.0D, var5);
-		this.stoneNoise = this.noiseGen5.generateNoiseOctaves(this.stoneNoise, (double)(var1 * 16), (double)(var2 * 16), 0.0D, 16, 16, 1, var5 * 2.0D, var5 * 2.0D, var5 * 2.0D);
-
-		for(int var7 = 0; var7 < 16; ++var7) {
-			for(int var8 = 0; var8 < 16; ++var8) {
-				boolean var9 = this.sandNoise[var7 + var8 * 16] + this.rand.nextDouble() * 0.2D > 0.0D;
-				boolean var10 = this.gravelNoise[var7 + var8 * 16] + this.rand.nextDouble() * 0.2D > 3.0D;
-				int var11 = (int)(this.stoneNoise[var7 + var8 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
-				int var12 = -1;
-				byte var13 = (byte)Block.grass.blockID;
-				byte var14 = (byte)Block.dirt.blockID;
-
-				for(int var15 = 127; var15 >= 0; --var15) {
-					int var16 = (var7 * 16 + var8) * 128 + var15;
-					if(var15 <= 0 + this.rand.nextInt(6) - 1) {
-						var3[var16] = (byte)Block.bedrock.blockID;
+	public void replaceSurfaceBlocks(int chunkX, int chunkZ, byte[] blocks) {
+		byte b4 = (byte)Block.sand.blockID;
+		byte b5 = (byte)Block.sand.blockID;
+		byte b6 = 64;
+		double d7 = 8.0D / 256D;
+		this.sandNoise = this.noiseGen4.generateNoiseOctaves(this.sandNoise, (double)(chunkX * 16), (double)(chunkZ * 16), 0.0D, 16, 16, 1, d7, d7, 1.0D);
+		this.gravelNoise = this.noiseGen4.generateNoiseOctaves(this.gravelNoise, (double)(chunkZ * 16), 109.0134D, (double)(chunkX * 16), 16, 1, 16, d7, 1.0D, d7);
+		this.stoneNoise = this.noiseGen5.generateNoiseOctaves(this.stoneNoise, (double)(chunkX * 16), (double)(chunkZ * 16), 0.0D, 16, 16, 1, d7 * 2.0D, d7 * 2.0D, d7 * 2.0D);
+
+		for(int i9 = 0; i9 < 16; ++i9) {
+			for(int i10 = 0; i10 < 16; ++i10) {
+				boolean z11 = this.sandNoise[i9 + i10 * 16] + this.rand.nextDouble() * 0.2D > 0.0D;
+				boolean z12 = this.gravelNoise[i9 + i10 * 16] + this.rand.nextDouble() * 0.2D > 3.0D;
+				int i13 = (int)(this.stoneNoise[i9 + i10 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
+				int i14 = -1;
+				byte b15;
+				byte b16;
+				if(this.worldObj.sandCovered) {
+					b15 = b4;
+					b16 = b5;
+				} else {
+					b15 = (byte)Block.grass.blockID;
+					b16 = (byte)Block.dirt.blockID;
+				}
+
+				for(int i17 = 127; i17 >= 0; --i17) {
+					int i18 = (i9 * 16 + i10) * 128 + i17;
+					if(i17 >= 95 + this.rand.nextInt(6) - 1 && blocks[i18] != 0) {
+						blocks[i18] = (byte)Block.blockSnow.blockID;
+
+						for(int i19 = (int)(this.mobSpawnerNoise.generateNoiseOctaves((double)chunkX * 13.2D, (double)chunkZ * 13.2D) / 2.0D); i19 > 0; --i19) {
+							if(i19 + i17 < 128 && i18 + i19 < blocks.length && blocks[i18 + i19] == 0) {
+								blocks[i19 + i18] = (byte)Block.ice.blockID;
+							}
+						}
+					}
+
+					if(i17 <= this.rand.nextInt(6) - 1) {
+						blocks[i18] = (byte)Block.bedrock.blockID;
 					} else {
-						byte var17 = var3[var16];
-						if(var17 == 0) {
-							var12 = -1;
-						} else if(var17 == Block.stone.blockID) {
-							if(var12 == -1) {
-								if(var11 <= 0) {
-									var13 = 0;
-									var14 = (byte)Block.stone.blockID;
-								} else if(var15 >= var4 - 4 && var15 <= var4 + 1) {
-									var13 = (byte)Block.grass.blockID;
-									var14 = (byte)Block.dirt.blockID;
-									if(var10) {
-										var13 = 0;
-									}
-
-									if(var10) {
-										var14 = (byte)Block.gravel.blockID;
-									}
-
-									if(var9) {
-										var13 = (byte)Block.sand.blockID;
-									}
-
-									if(var9) {
-										var14 = (byte)Block.sand.blockID;
-									}
-								}
-
-								if(var15 < var4 && var13 == 0) {
-									var13 = (byte)Block.waterStill.blockID;
-								}
-
-								var12 = var11;
-								if(var15 >= var4 - 1) {
-									var3[var16] = var13;
+						byte b20 = blocks[i18];
+						if(b20 == 0) {
+							i14 = -1;
+						} else if(b20 == Block.stone.blockID) {
+							if(i14 == -1) {
+								if(i13 <= 0) {
+									b15 = 0;
+									b16 = (byte)Block.stone.blockID;
+								} else if(i17 >= b6 - 4 && i17 <= b6 + 1) {
+									b15 = (byte)Block.grass.blockID;
+									b16 = (byte)Block.dirt.blockID;
+									if(this.worldObj.sandCovered) {
+										b15 = b4;
+										b16 = b5;
+									}
+
+									if(z12) {
+										b15 = 0;
+									}
+
+									if(z12) {
+										b16 = (byte)Block.gravel.blockID;
+									}
+
+									if(z11) {
+										b15 = (byte)Block.sand.blockID;
+									}
+
+									if(z11) {
+										b16 = (byte)Block.sand.blockID;
+									}
+								}
+
+								if(i17 < b6 && b15 == 0) {
+									b15 = (byte)Block.waterStill.blockID;
+								}
+
+								i14 = i13;
+								if(i17 >= b6 - 1) {
+									blocks[i18] = b15;
 								} else {
-									var3[var16] = var14;
+									blocks[i18] = b16;
 								}
-							} else if(var12 > 0) {
-								--var12;
-								var3[var16] = var14;
+							} else if(i14 > 0) {
+								--i14;
+								blocks[i18] = b16;
 							}
 						}
 					}
@@ -178,289 +225,450 @@
 
 	}
 
-	public Chunk provideChunk(int var1, int var2) {
-		this.rand.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
-		byte[] var3 = new byte[-Short.MIN_VALUE];
-		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
-		this.generateTerrain(var1, var2, var3);
-		this.replaceSurfaceBlocks(var1, var2, var3);
-		this.caveGenerator.generate(this, this.worldObj, var1, var2, var3);
-		var4.generateSkylightMap();
-		return var4;
+	public Chunk provideChunk(int x, int z) {
+		if(Math.abs(System.currentTimeMillis() - this.lastUpdate) > 5000L) {
+			SimpleDateFormat simpleDateFormat3 = new SimpleDateFormat("HH");
+			this.time_hr = Integer.parseInt(simpleDateFormat3.format(Calendar.getInstance().getTime()));
+			this.lastUpdate = System.currentTimeMillis();
+		}
+
+		boolean z6 = ScreenDebugMenu.dbg_conf_forceFracWorld || this.time_hr > 22 || this.time_hr < 5;
+		this.rand.setSeed((long)x * 341873128712L + (long)z * 132897987541L);
+		byte[] b4 = new byte[32768];
+		Chunk chunk5 = new Chunk(this.worldObj, b4, x, z);
+		x += z6 ? this.rand.nextInt(2000) - this.rand.nextInt(1000) : 0;
+		z += z6 ? this.rand.nextInt(2000) - this.rand.nextInt(1000) : 0;
+		if(!ScreenDebugMenu.dbg_disable_worldgen && !(this.worldObj instanceof FreerunWorld)) {
+			this.generateTerrain(x, z, b4);
+			this.replaceSurfaceBlocks(x, z, b4);
+			this.caveGenerator.generate(this, this.worldObj, x, z, b4);
+			chunk5.generateSkylightMap();
+		}
+
+		return chunk5;
 	}
 
-	private double[] initializeNoiseField(double[] var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		if(var1 == null) {
-			var1 = new double[var5 * var6 * var7];
+	private double[] initializeNoiseField(double[] arr, int integer2, int integer3, int integer4, int integer5, int integer6, int integer7) {
+		if(arr == null) {
+			arr = new double[integer5 * integer6 * integer7];
 		}
 
-		double var8 = 684.412D;
-		double var10 = 684.412D;
-		this.noise6 = this.noiseGen6.generateNoiseOctaves(this.noise6, (double)var2, (double)var3, (double)var4, var5, 1, var7, 1.0D, 0.0D, 1.0D);
-		this.noise7 = this.noiseGen7.generateNoiseOctaves(this.noise7, (double)var2, (double)var3, (double)var4, var5, 1, var7, 100.0D, 0.0D, 100.0D);
-		this.noise3 = this.noiseGen3.generateNoiseOctaves(this.noise3, (double)var2, (double)var3, (double)var4, var5, var6, var7, var8 / 80.0D, var10 / 160.0D, var8 / 80.0D);
-		this.noise1 = this.noiseGen1.generateNoiseOctaves(this.noise1, (double)var2, (double)var3, (double)var4, var5, var6, var7, var8, var10, var8);
-		this.noise2 = this.noiseGen2.generateNoiseOctaves(this.noise2, (double)var2, (double)var3, (double)var4, var5, var6, var7, var8, var10, var8);
-		int var12 = 0;
-		int var13 = 0;
-
-		for(int var14 = 0; var14 < var5; ++var14) {
-			for(int var15 = 0; var15 < var7; ++var15) {
-				double var16 = (this.noise6[var13] + 256.0D) / 512.0D;
-				if(var16 > 1.0D) {
-					var16 = 1.0D;
-				}
-
-				double var18 = 0.0D;
-				double var20 = this.noise7[var13] / 8000.0D;
-				if(var20 < 0.0D) {
-					var20 = -var20;
-				}
-
-				var20 = var20 * 3.0D - 3.0D;
-				if(var20 < 0.0D) {
-					var20 /= 2.0D;
-					if(var20 < -1.0D) {
-						var20 = -1.0D;
+		double d8 = 684.412D;
+		double d10 = 684.412D;
+		this.noise6 = this.noiseGen6.generateNoiseOctaves(this.noise6, (double)integer2, (double)integer3, (double)integer4, integer5, 1, integer7, 1.0D, 0.0D, 1.0D);
+		this.noise7 = this.noiseGen7.generateNoiseOctaves(this.noise7, (double)integer2, (double)integer3, (double)integer4, integer5, 1, integer7, 100.0D, 0.0D, 100.0D);
+		this.noise3 = this.noiseGen3.generateNoiseOctaves(this.noise3, (double)integer2, (double)integer3, (double)integer4, integer5, integer6, integer7, d8 / 80.0D, d10 / 160.0D, d8 / 80.0D);
+		this.noise1 = this.noiseGen1.generateNoiseOctaves(this.noise1, (double)integer2, (double)integer3, (double)integer4, integer5, integer6, integer7, d8, d10, d8);
+		this.noise2 = this.noiseGen2.generateNoiseOctaves(this.noise2, (double)integer2, (double)integer3, (double)integer4, integer5, integer6, integer7, d8, d10, d8);
+		int i12 = 0;
+		int i13 = 0;
+
+		for(int i14 = 0; i14 < integer5; ++i14) {
+			for(int i15 = 0; i15 < integer7; ++i15) {
+				double d16 = (this.noise6[i13] + 256.0D) / 512.0D;
+				if(d16 > 1.0D) {
+					d16 = 1.0D;
+				}
+
+				double d18 = 0.0D;
+				double d20 = this.noise7[i13] / 8000.0D;
+				if(d20 < 0.0D) {
+					d20 = -d20;
+				}
+
+				d20 = d20 * 3.0D - 3.0D;
+				if(d20 < 0.0D) {
+					d20 /= 2.0D;
+					if(d20 < -1.0D) {
+						d20 = -1.0D;
 					}
 
-					var20 /= 1.4D;
-					var20 /= 2.0D;
-					var16 = 0.0D;
+					d20 /= 1.4D;
+					d20 /= 2.0D;
+					d16 = 0.0D;
 				} else {
-					if(var20 > 1.0D) {
-						var20 = 1.0D;
+					if(d20 > 1.0D) {
+						d20 = 1.0D;
 					}
 
-					var20 /= 6.0D;
+					d20 /= 6.0D;
 				}
 
-				var16 += 0.5D;
-				var20 = var20 * (double)var6 / 16.0D;
-				double var22 = (double)var6 / 2.0D + var20 * 4.0D;
-				++var13;
+				d16 += 0.5D;
+				d20 = d20 * (double)integer6 / 16.0D;
+				double d22 = (double)integer6 / 2.0D + d20 * 4.0D;
+				++i13;
 
-				for(int var24 = 0; var24 < var6; ++var24) {
-					double var25 = 0.0D;
-					double var27 = ((double)var24 - var22) * 12.0D / var16;
-					if(var27 < 0.0D) {
-						var27 *= 4.0D;
+				for(int i24 = 0; i24 < integer6; ++i24) {
+					double d25 = 0.0D;
+					double d27 = ((double)i24 - d22) * 12.0D / d16;
+					if(d27 < 0.0D) {
+						d27 *= 4.0D;
 					}
 
-					double var29 = this.noise1[var12] / 512.0D;
-					double var31 = this.noise2[var12] / 512.0D;
-					double var33 = (this.noise3[var12] / 10.0D + 1.0D) / 2.0D;
-					if(var33 < 0.0D) {
-						var25 = var29;
-					} else if(var33 > 1.0D) {
-						var25 = var31;
+					double d29 = this.noise1[i12] / 512.0D;
+					double d31 = this.noise2[i12] / 512.0D;
+					double d33 = (this.noise3[i12] / 10.0D + 1.0D) / 2.0D;
+					if(d33 < 0.0D) {
+						d25 = d29;
+					} else if(d33 > 1.0D) {
+						d25 = d31;
 					} else {
-						var25 = var29 + (var31 - var29) * var33;
-					}
-
-					var25 -= var27;
-					double var35;
-					if(var24 > var6 - 4) {
-						var35 = (double)((float)(var24 - (var6 - 4)) / 3.0F);
-						var25 = var25 * (1.0D - var35) + -10.0D * var35;
-					}
-
-					if((double)var24 < var18) {
-						var35 = (var18 - (double)var24) / 4.0D;
-						if(var35 < 0.0D) {
-							var35 = 0.0D;
-						}
-
-						if(var35 > 1.0D) {
-							var35 = 1.0D;
-						}
-
-						var25 = var25 * (1.0D - var35) + -10.0D * var35;
-					}
-
-					var1[var12] = var25;
-					++var12;
+						d25 = d29 + (d31 - d29) * d33;
+					}
+
+					d25 -= d27;
+					double d35;
+					if(i24 > integer6 - 4) {
+						d35 = (double)((float)(i24 - (integer6 - 4)) / 3.0F);
+						d25 = d25 * (1.0D - d35) + -10.0D * d35;
+					}
+
+					if((double)i24 < d18) {
+						d35 = (d18 - (double)i24) / 4.0D;
+						if(d35 < 0.0D) {
+							d35 = 0.0D;
+						}
+
+						if(d35 > 1.0D) {
+							d35 = 1.0D;
+						}
+
+						d25 = d25 * (1.0D - d35) + -10.0D * d35;
+					}
+
+					arr[i12] = d25;
+					++i12;
 				}
 			}
 		}
 
-		return var1;
+		return arr;
 	}
 
-	public boolean chunkExists(int var1, int var2) {
+	public boolean chunkExists(int x, int z) {
 		return true;
 	}
 
-	public void populate(IChunkProvider var1, int var2, int var3) {
+	public void populate(IChunkProvider chunkProvider, int x, int z) {
+		ThreadChunkPopulator.AddPopulateOperation(new ChunkProviderPopulateOperation(this, chunkProvider, x, z), this);
+	}
+
+	public void actualPopulate(IChunkProvider adg, int integer2, int integer3) {
 		BlockSand.fallInstantly = true;
-		int var4 = var2 * 16;
-		int var5 = var3 * 16;
+		Biome biome7 = Biome.func_11922_2n3qE9TNSbq6jFP0jVF6MZR791V18lhzx1FrS1vTgw66qgr9H9NUnl54vO2R(this.worldObj.func_7342_9805301CWs03An9555qIw883P54dcq9802DkM5DuquNweM1NH26RH6oP02mr());
+		WorldGenMyconUnknownClass worldGenMyconUnknownClass4 = biome7.func_11921_2L2822HFv0Zs3L6g73SmXjqyWS7YT96y6ZshUIa6nFgwp5KcjgV15AJ304yM(integer2, integer3, EnumWorldGenerator.SURFACE);
+		WorldGenMyconUnknownClass worldGenMyconUnknownClass5 = biome7.func_11921_2L2822HFv0Zs3L6g73SmXjqyWS7YT96y6ZshUIa6nFgwp5KcjgV15AJ304yM(integer2, integer3, EnumWorldGenerator.UNDERGROUND);
+		WorldGenMyconUnknownClass worldGenMyconUnknownClass6 = biome7.func_11921_2L2822HFv0Zs3L6g73SmXjqyWS7YT96y6ZshUIa6nFgwp5KcjgV15AJ304yM(integer2, integer3, EnumWorldGenerator.LOW_RIVER);
+		int i26 = integer2 * 16;
+		int i8 = integer3 * 16;
 		this.rand.setSeed(this.worldObj.randomSeed);
-		long var6 = this.rand.nextLong() / 2L * 2L + 1L;
-		long var8 = this.rand.nextLong() / 2L * 2L + 1L;
-		this.rand.setSeed((long)var2 * var6 + (long)var3 * var8 ^ this.worldObj.randomSeed);
-		double var10 = 0.25D;
-
-		int var12;
-		int var13;
-		int var14;
-		int var15;
-		for(var12 = 0; var12 < 8; ++var12) {
-			var13 = var4 + this.rand.nextInt(16) + 8;
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenDungeons()).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 10; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenClay(32)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 20; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.dirt.blockID, 32)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 10; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.gravel.blockID, 32)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 20; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreCoal.blockID, 16)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 20; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(64);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreIron.blockID, 8)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 2; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(32);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreGold.blockID, 8)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 8; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(16);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreRedstone.blockID, 7)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 1; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(16);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreDiamond.blockID, 7)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		var10 = 0.5D;
-		var12 = (int)((this.mobSpawnerNoise.generateNoiseOctaves((double)var4 * var10, (double)var5 * var10) / 8.0D + this.rand.nextDouble() * 4.0D + 4.0D) / 3.0D);
-		if(var12 < 0) {
-			var12 = 0;
-		}
-
-		if(this.rand.nextInt(10) == 0) {
-			++var12;
-		}
-
-		Object var18 = new WorldGenTrees();
-		if(this.rand.nextInt(10) == 0) {
-			var18 = new WorldGenBigTree();
-		}
-
-		int var16;
-		for(var14 = 0; var14 < var12; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			((WorldGenerator)var18).setScale(1.0D, 1.0D, 1.0D);
-			((WorldGenerator)var18).generate(this.worldObj, this.rand, var15, this.worldObj.getHeightValue(var15, var16), var16);
-		}
-
-		int var17;
-		for(var14 = 0; var14 < 2; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(128);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.plantYellow.blockID)).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		if(this.rand.nextInt(2) == 0) {
-			var14 = var4 + this.rand.nextInt(16) + 8;
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.plantRed.blockID)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		if(this.rand.nextInt(4) == 0) {
-			var14 = var4 + this.rand.nextInt(16) + 8;
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.mushroomBrown.blockID)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		if(this.rand.nextInt(8) == 0) {
-			var14 = var4 + this.rand.nextInt(16) + 8;
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.mushroomRed.blockID)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		for(var14 = 0; var14 < 10; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(128);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenReed()).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = 0; var14 < 1; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(128);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenCactus()).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = 0; var14 < 50; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(this.rand.nextInt(120) + 8);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenLiquids(Block.waterMoving.blockID)).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = 0; var14 < 20; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(112) + 8) + 8);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenLiquids(Block.lavaMoving.blockID)).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = var4 + 8 + 0; var14 < var4 + 8 + 16; ++var14) {
-			for(var15 = var5 + 8 + 0; var15 < var5 + 8 + 16; ++var15) {
-				var16 = this.worldObj.getTopSolidOrLiquidBlock(var14, var15);
-				if(this.worldObj.snowCovered && var16 > 0 && var16 < 128 && this.worldObj.getBlockId(var14, var16, var15) == 0 && this.worldObj.getBlockMaterial(var14, var16 - 1, var15).getIsSolid() && this.worldObj.getBlockMaterial(var14, var16 - 1, var15) != Material.ice) {
-					this.worldObj.setBlockWithNotify(var14, var16, var15, Block.snow.blockID);
-				}
+		long j9 = this.rand.nextLong() / 2L * 2L + 1L;
+		long j11 = this.rand.nextLong() / 2L * 2L + 1L;
+		this.rand.setSeed((long)integer2 * j9 + (long)integer3 * j11 ^ this.worldObj.randomSeed);
+		double d13 = 0.25D;
+		byte b15 = 3;
+		if(!(this.worldObj instanceof FreerunWorld) && !(this.worldObj instanceof ZMWorld)) {
+			this.field_10359_2j6n1yw1R0AeJ7fX8dV7VsS6Llz1NtrigD0q3v7qKM2xRAdg03wtgiSs2FlQ.func_10699_62uS4fsEkbtpD61o05YRCJmy361J28B0mv5drK254qUSv35oE02IVr7fe8tU(this.worldObj, integer2, integer3);
+		}
+
+		int i17;
+		int i18;
+		int i21;
+		int i22;
+		int i27;
+		if(worldGenMyconUnknownClass4.func_9982_84EZjwmgfVpn5brk96GnU3Eit81Yc6Xxm4lTPdVKUWyphKxl38Uh4dg8VF3T(this.rand, this.worldObj, integer2, integer3)) {
+			label421:
+			for(i21 = 0; i21 < 16; ++i21) {
+				for(i22 = 0; i22 < 16; ++i22) {
+					for(int i23 = 127; i23 > 97; --i23) {
+						if(this.rand.nextInt(70) == 0 && this.worldObj.getBlockId(integer2 * 16 + i21, i23, integer3 * 16 + i22) == Block.snow.blockID) {
+							i21 += integer2 * 16;
+							i22 += integer3 * 16;
+							++i23;
+							this.worldObj.setBlock(i21, i23, i22, Block.ice.blockID);
+							break label421;
+						}
+					}
+				}
+			}
+
+			boolean z29 = false;
+			if(worldGenMyconUnknownClass4 instanceof WorldGenMyconUnknownClass2) {
+				z29 = ((WorldGenMyconUnknownClass2)worldGenMyconUnknownClass4).field_9993_785AXtdFOhFXlosQ8xZ2sw8bZ29jM2mtdTSsO0C4Xzi6GtMPb6IYjy73g2C9 == 2;
+			}
+
+			Object object30 = z29 && this.rand.nextInt(40) == 0 ? (new WorldGenTrees()).generateHighwoodTrees(z29) : new WorldGenTrees();
+			if(this.rand.nextInt(10) == 0) {
+				object30 = z29 && this.rand.nextInt(50) == 0 ? (new WorldGenBigTree()).generateHighwoodTrees(z29) : new WorldGenBigTree();
+			}
+
+			WorldGenFrigidHighwood worldGenFrigidHighwood31 = new WorldGenFrigidHighwood();
+
+			int i19;
+			for(i17 = 0; i17 < b15; ++i17) {
+				i18 = i26 + this.rand.nextInt(16) + 8;
+				i19 = i8 + this.rand.nextInt(16) + 8;
+				((WorldGenerator)object30).setScale(1.0D, 1.0D, 1.0D);
+				((WorldGenerator)object30).generate(this.worldObj, this.rand, i18, this.worldObj.getHeightValue(i18, i19), i19);
+			}
+
+			for(i17 = 0; i17 < b15; ++i17) {
+				i18 = i26 + this.rand.nextInt(8) + 8;
+				i19 = i8 + this.rand.nextInt(8) + 8;
+				worldGenFrigidHighwood31.setScale(1.0D, 1.0D, 1.0D);
+				worldGenFrigidHighwood31.generate(this.worldObj, this.rand, i18, this.worldObj.getHeightValue(i18, i19), i19);
+			}
+
+			int i20;
+			for(i17 = 0; i17 < 2; ++i17) {
+				i18 = i26 + this.rand.nextInt(16) + 8;
+				i19 = this.rand.nextInt(128);
+				i20 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenFlowers(Block.plantYellow.blockID)).generate(this.worldObj, this.rand, i18, i19, i20);
+			}
+
+			for(int i24 = 0; i24 < 100; ++i24) {
+				i17 = i26 + this.rand.nextInt(16) + 8;
+				i18 = this.rand.nextInt(128);
+				i19 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenGrass()).generate(this.worldObj, this.rand, i17, i18, i19);
+			}
+
+			if(this.rand.nextInt(2) == 0) {
+				i17 = i26 + this.rand.nextInt(16) + 8;
+				i18 = this.rand.nextInt(128);
+				i19 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenFlowers(Block.plantRed.blockID)).generate(this.worldObj, this.rand, i17, i18, i19);
+			}
+
+			if(this.rand.nextInt(2) == 0) {
+				i17 = i26 + this.rand.nextInt(8) + 8;
+				i18 = this.rand.nextInt(128);
+				i19 = i8 + this.rand.nextInt(8) + 8;
+				(new WorldGenFlowers(ExtBlocks.Hydrangea.blockID)).generate(this.worldObj, this.rand, i17, i18, i19);
+			}
+
+			if(this.rand.nextInt(4) == 0) {
+				i17 = i26 + this.rand.nextInt(16) + 8;
+				i18 = this.rand.nextInt(128);
+				i19 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenFlowers(Block.mushroomBrown.blockID)).generate(this.worldObj, this.rand, i17, i18, i19);
+			}
+
+			if(this.rand.nextInt(8) == 0) {
+				i17 = i26 + this.rand.nextInt(16) + 8;
+				i18 = this.rand.nextInt(128);
+				i19 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenFlowers(Block.mushroomRed.blockID)).generate(this.worldObj, this.rand, i17, i18, i19);
+			}
+
+			if(this.rand.nextInt(10) == 0) {
+				i27 = b15 + 1;
+			}
+
+			if(!Minecraft.field_7272_4vZ36FKx2I9PxzXyWH4290I55Q6yd6FI668q2Ylv62ISy2u1yh710qJ4Q0Yo) {
+				int i25;
+				if(GenStonePlatform.isChunkWaterOnly(this.worldObj, i26, i8)) {
+					for(i25 = 0; i25 != 50; ++i25) {
+						if(this.rand.nextInt(8) == 0) {
+							i17 = i26 + this.rand.nextInt(16) + 8;
+							i18 = 50 + this.rand.nextInt(16);
+							i19 = i8 + this.rand.nextInt(16) + 8;
+							(new GenStonePlatform()).generate(this.worldObj, this.rand, i17, i18, i19);
+						}
+					}
+				}
+
+				for(i25 = 0; i25 < 4; ++i25) {
+					(new GenPillar(ExtBlocks.saltBlock.blockID)).generate(this.worldObj, this.rand, i26 + this.rand.nextInt(16) + 8, this.rand.nextInt(128), i8 + this.rand.nextInt(16) + 8);
+				}
+
+				for(i25 = 0; i25 < 5; ++i25) {
+					(new GenOnWater(ExtBlocks.glowingFlower.blockID)).generate(this.worldObj, this.rand, i26 + this.rand.nextInt(16) + 8, this.rand.nextInt(128), i8 + this.rand.nextInt(16) + 8);
+				}
+
+				for(i25 = 0; i25 < 5; ++i25) {
+					(new WorldGenLichen()).generate(this.worldObj, this.rand, i26 + this.rand.nextInt(16) + 8, this.rand.nextInt(10), i8 + this.rand.nextInt(16) + 8);
+				}
+
+				for(i25 = 0; i25 < 16; ++i25) {
+					(new WorldGenBlockGoldBlockSteel()).generate(this.worldObj, this.rand, i26 + this.rand.nextInt(16) + 8, this.rand.nextInt(128), i8 + this.rand.nextInt(16) + 8);
+				}
+
+				for(i25 = 0; i25 < 3; ++i25) {
+					(new GenSky(ExtBlocks.blueFireIdk.blockID)).generate(this.worldObj, this.rand, i26 + this.rand.nextInt(16) + 8, this.rand.nextInt(128), i8 + this.rand.nextInt(16) + 8);
+				}
+			}
+
+			for(i17 = 0; i17 < 10; ++i17) {
+				i18 = i26 + this.rand.nextInt(16) + 8;
+				i19 = this.rand.nextInt(128);
+				i20 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenReed()).generate(this.worldObj, this.rand, i18, i19, i20);
+			}
+
+			for(i17 = 0; i17 < 1; ++i17) {
+				i18 = i26 + this.rand.nextInt(16) + 8;
+				i19 = this.rand.nextInt(128);
+				i20 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenCactus()).generate(this.worldObj, this.rand, i18, i19, i20);
+			}
+
+			for(i17 = 0; i17 < 50; ++i17) {
+				i18 = i26 + this.rand.nextInt(16) + 8;
+				i19 = this.rand.nextInt(this.rand.nextInt(120) + 8);
+				i20 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenLiquids(Block.waterMoving.blockID)).generate(this.worldObj, this.rand, i18, i19, i20);
+			}
+
+			for(i17 = 0; i17 < 20; ++i17) {
+				i18 = i26 + this.rand.nextInt(16) + 8;
+				i19 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(112) + 8) + 8);
+				i20 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenLiquids(Block.lavaMoving.blockID)).generate(this.worldObj, this.rand, i18, i19, i20);
+			}
+
+			for(i17 = i26 + 8; i17 < i26 + 8 + 16; ++i17) {
+				for(i18 = i8 + 8; i18 < i8 + 8 + 16; ++i18) {
+					i19 = this.worldObj.getTopSolidOrLiquidBlock(i17, i18);
+					if(this.worldObj.snowCovered && i19 > 0 && i19 < 128 && this.worldObj.getBlockId(i17, i19, i18) == 0 && this.worldObj.getBlockMaterial(i17, i19 - 1, i18).getIsSolid() && this.worldObj.getBlockMaterial(i17, i19 - 1, i18) != Material.ice) {
+						this.worldObj.setBlockWithNotify(i17, i19, i18, Block.snow.blockID);
+					}
+				}
+			}
+		}
+
+		int i16;
+		if(!Minecraft.field_7272_4vZ36FKx2I9PxzXyWH4290I55Q6yd6FI668q2Ylv62ISy2u1yh710qJ4Q0Yo) {
+			for(i21 = 0; i21 != 8; ++i21) {
+				for(i22 = 0; i22 != 4; ++i22) {
+					i16 = i26 + i21 * 2;
+					i17 = 5 + this.rand.nextInt(2);
+					i18 = i8 + i22 * 4;
+					(new GenLowRiver(2 + this.rand.nextInt(3), i26, i8)).generate(this.worldObj, this.rand, i16, i17, i18);
+					worldGenMyconUnknownClass6.func_9982_84EZjwmgfVpn5brk96GnU3Eit81Yc6Xxm4lTPdVKUWyphKxl38Uh4dg8VF3T(this.rand, this.worldObj, integer2, integer3);
+				}
+			}
+		}
+
+		if(worldGenMyconUnknownClass5.func_9982_84EZjwmgfVpn5brk96GnU3Eit81Yc6Xxm4lTPdVKUWyphKxl38Uh4dg8VF3T(this.rand, this.worldObj, integer2, integer3)) {
+			d13 = 0.5D;
+			i27 = (int)((this.field_10346_6m7y5BBc690f5k1wN62h1M5Q6MQ39ORFjeaEFLyPLBjJjSJBuGTvT3D2rW0F.generateNoiseOctaves((double)i26 * d13, (double)i8 * d13) / 8.0D + this.rand.nextDouble() * 4.0D + 4.0D) / 3.0D);
+			if(i27 < 0) {
+				boolean z28 = false;
+			}
+
+			for(i27 = 0; i27 < 8; ++i27) {
+				i16 = i26 + this.rand.nextInt(16) + 8;
+				i17 = this.rand.nextInt(128);
+				i18 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenDungeons()).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 1; ++i27) {
+				i16 = i26 + this.rand.nextInt(64) + 8;
+				i17 = this.rand.nextInt(5) + 55;
+				i18 = i8 + this.rand.nextInt(64) + 8;
+				(new WorldGenSmoothStone()).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 10; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(128);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenClay(32)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 20; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(128);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(Block.dirt.blockID, 32)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 10; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(128);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(Block.gravel.blockID, 32)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 20; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(128);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(Block.oreCoal.blockID, ExtBlocks.LowOreCoal.blockID, 16)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 20; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(64);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(Block.oreIron.blockID, ExtBlocks.LowOreIron.blockID, 8)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 2; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(32);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(Block.oreGold.blockID, ExtBlocks.LowOreGold.blockID, 8)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 8; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(16);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(Block.oreRedstone.blockID, ExtBlocks.LowOreGreenstone.blockID, 7)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 4; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(16);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(Block.oreDiamond.blockID, ExtBlocks.LowOreDiamond.blockID, 7)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 4; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(10);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(ExtBlocks.LaceAgateOre.blockID, ExtBlocks.LaceAgateOre.blockID, 3)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 4; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(10);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(ExtBlocks.ClinohumiteOre.blockID, ExtBlocks.ClinohumiteOre.blockID, 3)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 4; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(10);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(ExtBlocks.MalachiteOre.blockID, ExtBlocks.MalachiteOre.blockID, 3)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 4; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(10);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(ExtBlocks.PyriteOre.blockID, ExtBlocks.PyriteOre.blockID, 3)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 4; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(16);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(ExtBlocks.BismuthOre.blockID, ExtBlocks.BismuthOre.blockID, 7)).generate(this.worldObj, this.rand, i16, i17, i18);
 			}
 		}
 
 		BlockSand.fallInstantly = false;
 	}
 
-	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+	public boolean saveChunks(boolean z1, IProgressUpdate iProgressUpdate) {
 		return true;
 	}
 
--- net/minecraft/src/NBTTagShort.java
+++ net/minecraft/src/NBTTagShort.java
@@ -10,16 +10,16 @@
 	public NBTTagShort() {
 	}
 
-	public NBTTagShort(short var1) {
-		this.shortValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeShort(this.shortValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.shortValue = var1.readShort();
+	public NBTTagShort(short value) {
+		this.shortValue = value;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeShort(this.shortValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.shortValue = dataInput.readShort();
 	}
 
 	public byte getType() {
--- net/minecraft/src/ItemFlintAndSteel.java
+++ net/minecraft/src/ItemFlintAndSteel.java
@@ -1,44 +1,44 @@
 package net.minecraft.src;
 
 public class ItemFlintAndSteel extends Item {
-	public ItemFlintAndSteel(int var1) {
-		super(var1);
+	public ItemFlintAndSteel(int itemID) {
+		super(itemID);
 		this.maxStackSize = 1;
 		this.maxDamage = 64;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 == 0) {
-			--var5;
-		}
-
-		if(var7 == 1) {
-			++var5;
-		}
-
-		if(var7 == 2) {
-			--var6;
-		}
-
-		if(var7 == 3) {
-			++var6;
-		}
-
-		if(var7 == 4) {
-			--var4;
-		}
-
-		if(var7 == 5) {
-			++var4;
-		}
-
-		int var8 = var3.getBlockId(var4, var5, var6);
-		if(var8 == 0) {
-			var3.playSoundEffect((double)var4 + 0.5D, (double)var5 + 0.5D, (double)var6 + 0.5D, "fire.ignite", 1.0F, rand.nextFloat() * 0.4F + 0.8F);
-			var3.setBlockWithNotify(var4, var5, var6, Block.fire.blockID);
-		}
-
-		var1.damageItem(1);
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(side == 0) {
+			--y;
+		}
+
+		if(side == 1) {
+			++y;
+		}
+
+		if(side == 2) {
+			--z;
+		}
+
+		if(side == 3) {
+			++z;
+		}
+
+		if(side == 4) {
+			--x;
+		}
+
+		if(side == 5) {
+			++x;
+		}
+
+		int i8 = world.getBlockId(x, y, z);
+		if(i8 == 0) {
+			world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "fire.ignite", 1.0F, rand.nextFloat() * 0.4F + 0.8F);
+			world.setBlockWithNotify(x, y, z, Block.fire.blockID);
+		}
+
+		stack.damageItem(1);
 		return true;
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenHouseBigInterior.java
@@ -1,0 +1,87 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenHouseBigInterior {
+	public static double field_10706_0m3239E5PCmx6014r82tcO6x60s54kxSC8Aa2w47u8Ld1cNJD6SWY9tgmfTg = 0.5D;
+	public static int field_10705_2351wTc0tK13gSC0Woq6iY3dsIH1rQIibdC0Si2JL99j3238Chm8t8Nnzv64 = 4;
+	private final IHouseBig[] field_10707_7RO2WV7OFPctlqUTLBB0sLIlTVVC7N310a410Dr8bC4mQqx5QxcZH86WZ6gY;
+	private final float field_10704_3uifkM897I6agg2PH71ON3u35ZJb2Nt5DC6zj959RQX00bm25Wk8MRmw6w8s;
+	final NoiseGeneratorPerlin[] field_10703_5Pc19WlxBXZ8Ihy3qfUuPcx9t085ogH7UoD9SJ89Cg2GrfOoa1Sx48CLN30t = new NoiseGeneratorPerlin[field_10705_2351wTc0tK13gSC0Woq6iY3dsIH1rQIibdC0Si2JL99j3238Chm8t8Nnzv64];
+	final NoiseGeneratorPerlin field_10708_5urBUkyczA4gE8l0r1KvTSmPIdQ3954OpoPgh77QHV0e1DruZsU9W2z8l0bB;
+
+	public WorldGenHouseBigInterior(Random random) {
+		this.field_10708_5urBUkyczA4gE8l0r1KvTSmPIdQ3954OpoPgh77QHV0e1DruZsU9W2z8l0bB = new NoiseGeneratorPerlin(random);
+
+		for(int i2 = 0; i2 < field_10705_2351wTc0tK13gSC0Woq6iY3dsIH1rQIibdC0Si2JL99j3238Chm8t8Nnzv64; ++i2) {
+			this.field_10703_5Pc19WlxBXZ8Ihy3qfUuPcx9t085ogH7UoD9SJ89Cg2GrfOoa1Sx48CLN30t[i2] = new NoiseGeneratorPerlin(random);
+		}
+
+		this.field_10707_7RO2WV7OFPctlqUTLBB0sLIlTVVC7N310a410Dr8bC4mQqx5QxcZH86WZ6gY = new IHouseBig[]{new WorldGenHouseBigUnknownClass(random), new WorldGenHouseBigExterior(random), new WorldGenHouseBig(random)};
+		float f7 = 0.0F;
+		IHouseBig[] iHouseBig3 = this.field_10707_7RO2WV7OFPctlqUTLBB0sLIlTVVC7N310a410Dr8bC4mQqx5QxcZH86WZ6gY;
+		int i4 = iHouseBig3.length;
+
+		for(int i5 = 0; i5 < i4; ++i5) {
+			IHouseBig iHouseBig6 = iHouseBig3[i5];
+			f7 += iHouseBig6.func_9883_913vTZx6no47397W6wG95Q5uB254nJBZ27osnW242XcA9M93Alb1ry5oPyVe();
+		}
+
+		this.field_10704_3uifkM897I6agg2PH71ON3u35ZJb2Nt5DC6zj959RQX00bm25Wk8MRmw6w8s = f7;
+	}
+
+	public IHouseBig func_10700_5gU7Uzvz8nL2B471oF833am7hLzT1BpDmvqeeqHlljsoXgtj9YU1z90SpE7J(Class class1) {
+		IHouseBig[] iHouseBig2 = this.field_10707_7RO2WV7OFPctlqUTLBB0sLIlTVVC7N310a410Dr8bC4mQqx5QxcZH86WZ6gY;
+		int i3 = iHouseBig2.length;
+
+		for(int i4 = 0; i4 < i3; ++i4) {
+			IHouseBig iHouseBig5 = iHouseBig2[i4];
+			if(class1.isInstance(iHouseBig5)) {
+				return (IHouseBig)class1.cast(iHouseBig5);
+			}
+		}
+
+		throw new MinecraftException2();
+	}
+
+	public IHouseBig func_10702_96UC4VBn6u965CnKc5uafY87yvjBZ6tGq8l4AZ6h876hH5k4586FgF30zZVW(int integer1, int integer2) {
+		if(Math.pow((double)Math.min(100, Math.abs(integer1)), 2.0D) + Math.pow((double)Math.min(100, Math.abs(integer2)), 2.0D) < 256.0D) {
+			return this.func_10700_5gU7Uzvz8nL2B471oF833am7hLzT1BpDmvqeeqHlljsoXgtj9YU1z90SpE7J(WorldGenHouseBigUnknownClass.class);
+		} else {
+			NoiseGeneratorPerlin[] noiseGeneratorPerlin3 = this.field_10703_5Pc19WlxBXZ8Ihy3qfUuPcx9t085ogH7UoD9SJ89Cg2GrfOoa1Sx48CLN30t;
+			int i4 = noiseGeneratorPerlin3.length;
+
+			for(int i5 = 0; i5 < i4; ++i5) {
+				NoiseGeneratorPerlin noiseGeneratorPerlin6 = noiseGeneratorPerlin3[i5];
+				if(noiseGeneratorPerlin6.generateNoise((double)integer1 / 16.0D, (double)integer2 / 16.0D) < field_10706_0m3239E5PCmx6014r82tcO6x60s54kxSC8Aa2w47u8Ld1cNJD6SWY9tgmfTg * 2.0D - 1.0D) {
+					return this.func_10700_5gU7Uzvz8nL2B471oF833am7hLzT1BpDmvqeeqHlljsoXgtj9YU1z90SpE7J(WorldGenHouseBigUnknownClass.class);
+				}
+			}
+
+			double d9 = (this.field_10708_5urBUkyczA4gE8l0r1KvTSmPIdQ3954OpoPgh77QHV0e1DruZsU9W2z8l0bB.generateNoise((double)integer1, (double)integer2) / 2.0D + 0.5D) * (double)this.field_10704_3uifkM897I6agg2PH71ON3u35ZJb2Nt5DC6zj959RQX00bm25Wk8MRmw6w8s;
+			IHouseBig[] iHouseBig10 = this.field_10707_7RO2WV7OFPctlqUTLBB0sLIlTVVC7N310a410Dr8bC4mQqx5QxcZH86WZ6gY;
+			int i11 = iHouseBig10.length;
+
+			for(int i7 = 0; i7 < i11; ++i7) {
+				IHouseBig iHouseBig8 = iHouseBig10[i7];
+				if(d9 <= (double)iHouseBig8.func_9883_913vTZx6no47397W6wG95Q5uB254nJBZ27osnW242XcA9M93Alb1ry5oPyVe()) {
+					return iHouseBig8;
+				}
+
+				d9 -= (double)iHouseBig8.func_9883_913vTZx6no47397W6wG95Q5uB254nJBZ27osnW242XcA9M93Alb1ry5oPyVe();
+			}
+
+			return this.func_10700_5gU7Uzvz8nL2B471oF833am7hLzT1BpDmvqeeqHlljsoXgtj9YU1z90SpE7J(WorldGenHouseBigUnknownClass.class);
+		}
+	}
+
+	public boolean func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(Class class1, int integer2, int integer3) {
+		IHouseBig iHouseBig4 = this.func_10702_96UC4VBn6u965CnKc5uafY87yvjBZ6tGq8l4AZ6h876hH5k4586FgF30zZVW(integer2, integer3);
+		return class1.isInstance(iHouseBig4);
+	}
+
+	public void func_10699_62uS4fsEkbtpD61o05YRCJmy361J28B0mv5drK254qUSv35oE02IVr7fe8tU(World vg, int integer2, int integer3) {
+		IHouseBig iHouseBig4 = this.func_10702_96UC4VBn6u965CnKc5uafY87yvjBZ6tGq8l4AZ6h876hH5k4586FgF30zZVW(integer2, integer3);
+		iHouseBig4.func_9884_61qP7q8deV5ospnX8sW5XUMxMcV5ssOU68863452kQ9H403L5ScR3DEa98qO(vg, integer2, integer3, this);
+	}
+}
--- net/minecraft/src/MusInputStream.java
+++ net/minecraft/src/MusInputStream.java
@@ -10,28 +10,28 @@
 	byte[] buffer;
 	final CodecMus codec;
 
-	public MusInputStream(CodecMus var1, URL var2, InputStream var3) {
-		this.codec = var1;
+	public MusInputStream(CodecMus codec, URL url, InputStream inputStream) {
+		this.codec = codec;
 		this.buffer = new byte[1];
-		this.inputStream = var3;
-		String var4 = var2.getPath();
-		var4 = var4.substring(var4.lastIndexOf("/") + 1);
-		this.hash = var4.hashCode();
+		this.inputStream = inputStream;
+		String string4 = url.getPath();
+		string4 = string4.substring(string4.lastIndexOf("/") + 1);
+		this.hash = string4.hashCode();
 	}
 
 	public int read() throws IOException {
-		int var1 = this.read(this.buffer, 0, 1);
-		return var1 < 0 ? var1 : this.buffer[0];
+		int i1 = this.read(this.buffer, 0, 1);
+		return i1 < 0 ? i1 : this.buffer[0];
 	}
 
-	public int read(byte[] var1, int var2, int var3) throws IOException {
-		var3 = this.inputStream.read(var1, var2, var3);
+	public int read(byte[] arr, int integer2, int integer3) throws IOException {
+		integer3 = this.inputStream.read(arr, integer2, integer3);
 
-		for(int var4 = 0; var4 < var3; ++var4) {
-			byte var5 = var1[var2 + var4] = (byte)(var1[var2 + var4] ^ this.hash >> 8);
-			this.hash = this.hash * 498729871 + 85731 * var5;
+		for(int i4 = 0; i4 < integer3; ++i4) {
+			byte b5 = arr[integer2 + i4] = (byte)(arr[integer2 + i4] ^ this.hash >> 8);
+			this.hash = this.hash * 498729871 + 85731 * b5;
 		}
 
-		return var3;
+		return integer3;
 	}
 }
--- net/minecraft/src/EntitySnowball.java
+++ net/minecraft/src/EntitySnowball.java
@@ -13,51 +13,51 @@
 	private int ticksInGround;
 	private int ticksInAir = 0;
 
-	public EntitySnowball(World var1) {
-		super(var1);
-		this.setSize(0.25F, 0.25F);
-	}
-
-	public boolean isInRangeToRenderDist(double var1) {
-		double var3 = this.boundingBox.getAverageEdgeLength() * 4.0D;
-		var3 *= 64.0D;
-		return var1 < var3 * var3;
-	}
-
-	public EntitySnowball(World var1, EntityLiving var2) {
-		super(var1);
-		this.thrower = var2;
-		this.setSize(0.25F, 0.25F);
-		this.setLocationAndAngles(var2.posX, var2.posY, var2.posZ, var2.rotationYaw, var2.rotationPitch);
+	public EntitySnowball(World world) {
+		super(world);
+		this.setSize(0.25F, 0.25F);
+	}
+
+	public boolean isInRangeToRenderDist(double distance) {
+		double d3 = this.boundingBox.getAverageEdgeLength() * 4.0D;
+		d3 *= 64.0D;
+		return distance < d3 * d3;
+	}
+
+	public EntitySnowball(World vg, EntityLiving zi) {
+		super(vg);
+		this.thrower = zi;
+		this.setSize(0.25F, 0.25F);
+		this.setLocationAndAngles(zi.posX, zi.posY, zi.posZ, zi.rotationYaw, zi.rotationPitch);
 		this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
 		this.posY -= (double)0.1F;
 		this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
 		this.setPosition(this.posX, this.posY, this.posZ);
 		this.yOffset = 0.0F;
-		float var3 = 0.4F;
-		this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
-		this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
-		this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
+		float f3 = 0.4F;
+		this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * f3);
+		this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * f3);
+		this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * f3);
 		this.setThrowableHeading(this.motionX, this.motionY, this.motionZ, 1.5F, 1.0F);
 	}
 
-	public void setThrowableHeading(double var1, double var3, double var5, float var7, float var8) {
-		float var9 = MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5);
-		var1 /= (double)var9;
-		var3 /= (double)var9;
-		var5 /= (double)var9;
-		var1 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-		var3 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-		var5 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-		var1 *= (double)var7;
-		var3 *= (double)var7;
-		var5 *= (double)var7;
-		this.motionX = var1;
-		this.motionY = var3;
-		this.motionZ = var5;
-		float var10 = MathHelper.sqrt_double(var1 * var1 + var5 * var5);
-		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(var1, var5) * 180.0D / (double)((float)Math.PI));
-		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(var3, (double)var10) * 180.0D / (double)((float)Math.PI));
+	public void setThrowableHeading(double double1, double double2, double double3, float float4, float float5) {
+		float f9 = MathHelper.sqrt_double(double1 * double1 + double2 * double2 + double3 * double3);
+		double1 /= (double)f9;
+		double2 /= (double)f9;
+		double3 /= (double)f9;
+		double1 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double2 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double3 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double1 *= (double)float4;
+		double2 *= (double)float4;
+		double3 *= (double)float4;
+		this.motionX = double1;
+		this.motionY = double2;
+		this.motionZ = double3;
+		float f10 = MathHelper.sqrt_double(double1 * double1 + double3 * double3);
+		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(double1, double3) * 180.0D / (double)(float)Math.PI);
+		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(double2, (double)f10) * 180.0D / (double)(float)Math.PI);
 		this.ticksInGround = 0;
 	}
 
@@ -68,13 +68,28 @@
 		}
 
 		if(this.inGround) {
-			int var1 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
-			if(var1 == this.inTile) {
+			int i1 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+			if(i1 == this.inTile) {
 				++this.ticksInGround;
 				if(this.ticksInGround == 1200) {
 					this.setEntityDead();
 				}
 
+				if(i1 == ExtBlocks.targetBlock.blockID) {
+					ItemStack itemStack2 = new ItemStack(ExtBlocks.targetBlock, 1);
+					EntityItem entityItem3 = new EntityItem(this.worldObj, (double)this.xTile + 0.5D, (double)this.yTile + 0.5D, (double)this.zTile + 0.5D, itemStack2);
+					entityItem3.motionX = this.rand.nextDouble() - 0.5D;
+					entityItem3.motionY = this.rand.nextDouble() - 0.5D;
+					entityItem3.motionZ = this.rand.nextDouble() - 0.5D;
+					entityItem3.motionX /= 8.0D;
+					entityItem3.motionY /= 8.0D;
+					entityItem3.motionZ /= 8.0D;
+					this.worldObj.spawnParticle("smoke", (double)this.xTile + 0.5D, (double)this.yTile + 0.5D, (double)this.zTile + 0.5D, 0.0D, 0.0D, 0.0D);
+					this.worldObj.spawnEntityInWorld(entityItem3);
+					this.worldObj.setBlockWithNotify(this.xTile, this.yTile, this.zTile, 0);
+					this.worldObj.markBlocksDirty(this.xTile, this.yTile, this.zTile, this.xTile, this.yTile, this.zTile);
+				}
+
 				return;
 			}
 
@@ -88,46 +103,47 @@
 			++this.ticksInAir;
 		}
 
-		Vec3D var15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-		Vec3D var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-		MovingObjectPosition var3 = this.worldObj.rayTraceBlocks(var15, var2);
-		var15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-		var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-		if(var3 != null) {
-			var2 = Vec3D.createVector(var3.hitVec.xCoord, var3.hitVec.yCoord, var3.hitVec.zCoord);
+		Vec3D vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		Vec3D vec3D16 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		MovingObjectPosition movingObjectPosition17 = this.worldObj.rayTraceBlocks(vec3D15, vec3D16);
+		vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		vec3D16 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		if(movingObjectPosition17 != null) {
+			vec3D16 = Vec3D.createVector(movingObjectPosition17.hitVec.xCoord, movingObjectPosition17.hitVec.yCoord, movingObjectPosition17.hitVec.zCoord);
 		}
 
-		Entity var4 = null;
-		List var5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
-		double var6 = 0.0D;
+		Entity entity4 = null;
+		List list5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+		double d6 = 0.0D;
 
-		int var8;
-		float var10;
-		for(var8 = 0; var8 < var5.size(); ++var8) {
-			Entity var9 = (Entity)var5.get(var8);
-			if(var9.canBeCollidedWith() && (var9 != this.thrower || this.ticksInAir >= 5)) {
-				var10 = 0.3F;
-				AxisAlignedBB var11 = var9.boundingBox.expand((double)var10, (double)var10, (double)var10);
-				MovingObjectPosition var12 = var11.calculateIntercept(var15, var2);
-				if(var12 != null) {
-					double var13 = var15.distanceTo(var12.hitVec);
-					if(var13 < var6 || var6 == 0.0D) {
-						var4 = var9;
-						var6 = var13;
+		int i8;
+		float f9;
+		for(i8 = 0; i8 < list5.size(); ++i8) {
+			Entity entity10 = (Entity)list5.get(i8);
+			if(entity10.canBeCollidedWith() && (entity10 != this.thrower || this.ticksInAir >= 5)) {
+				f9 = 0.3F;
+				AxisAlignedBB axisAlignedBB11 = entity10.boundingBox.expand((double)f9, (double)f9, (double)f9);
+				MovingObjectPosition movingObjectPosition12 = axisAlignedBB11.calculateIntercept(vec3D15, vec3D16);
+				if(movingObjectPosition12 != null) {
+					double d13 = vec3D15.distanceTo(movingObjectPosition12.hitVec);
+					if(d13 < d6 || d6 == 0.0D) {
+						entity4 = entity10;
+						d6 = d13;
 					}
 				}
 			}
 		}
 
-		if(var4 != null) {
-			var3 = new MovingObjectPosition(var4);
+		if(entity4 != null) {
+			movingObjectPosition17 = new MovingObjectPosition(entity4);
 		}
 
-		if(var3 != null) {
-			if(var3.entityHit != null && var3.entityHit.attackEntityFrom(this.thrower, 0)) {
+		if(movingObjectPosition17 != null) {
+			if(movingObjectPosition17.entityHit != null && movingObjectPosition17.entityHit.attackEntityFrom(this.thrower, 0)) {
+				;
 			}
 
-			for(var8 = 0; var8 < 8; ++var8) {
+			for(i8 = 0; i8 < 8; ++i8) {
 				this.worldObj.spawnParticle("snowballpoof", this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
 			}
 
@@ -137,10 +153,10 @@
 		this.posX += this.motionX;
 		this.posY += this.motionY;
 		this.posZ += this.motionZ;
-		float var16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)((float)Math.PI));
+		float f18 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)(float)Math.PI);
 
-		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var16) * 180.0D / (double)((float)Math.PI)); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)f18) * 180.0D / (double)(float)Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
 		}
 
 		while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
@@ -157,46 +173,46 @@
 
 		this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
 		this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
-		float var17 = 0.99F;
-		var10 = 0.03F;
+		float f19 = 0.99F;
+		f9 = 0.03F;
 		if(this.handleWaterMovement()) {
-			for(int var18 = 0; var18 < 4; ++var18) {
-				float var19 = 0.25F;
-				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)var19, this.posY - this.motionY * (double)var19, this.posZ - this.motionZ * (double)var19, this.motionX, this.motionY, this.motionZ);
+			for(int i20 = 0; i20 < 4; ++i20) {
+				float f21 = 0.25F;
+				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)f21, this.posY - this.motionY * (double)f21, this.posZ - this.motionZ * (double)f21, this.motionX, this.motionY, this.motionZ);
 			}
 
-			var17 = 0.8F;
+			f19 = 0.8F;
 		}
 
-		this.motionX *= (double)var17;
-		this.motionY *= (double)var17;
-		this.motionZ *= (double)var17;
-		this.motionY -= (double)var10;
+		this.motionX *= (double)f19;
+		this.motionY *= (double)f19;
+		this.motionZ *= (double)f19;
+		this.motionY -= (double)f9;
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setShort("xTile", (short)this.xTile);
-		var1.setShort("yTile", (short)this.yTile);
-		var1.setShort("zTile", (short)this.zTile);
-		var1.setByte("inTile", (byte)this.inTile);
-		var1.setByte("shake", (byte)this.throwableShake);
-		var1.setByte("inGround", (byte)(this.inGround ? 1 : 0));
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.xTile = var1.getShort("xTile");
-		this.yTile = var1.getShort("yTile");
-		this.zTile = var1.getShort("zTile");
-		this.inTile = var1.getByte("inTile") & 255;
-		this.throwableShake = var1.getByte("shake") & 255;
-		this.inGround = var1.getByte("inGround") == 1;
-	}
-
-	public void onCollideWithPlayer(EntityPlayer var1) {
-		if(this.inGround && this.thrower == var1 && this.throwableShake <= 0 && var1.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setShort("xTile", (short)this.xTile);
+		nbttagcompound.setShort("yTile", (short)this.yTile);
+		nbttagcompound.setShort("zTile", (short)this.zTile);
+		nbttagcompound.setByte("inTile", (byte)this.inTile);
+		nbttagcompound.setByte("shake", (byte)this.throwableShake);
+		nbttagcompound.setByte("inGround", (byte)(this.inGround ? 1 : 0));
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.xTile = nbttagcompound.getShort("xTile");
+		this.yTile = nbttagcompound.getShort("yTile");
+		this.zTile = nbttagcompound.getShort("zTile");
+		this.inTile = nbttagcompound.getByte("inTile") & 255;
+		this.throwableShake = nbttagcompound.getByte("shake") & 255;
+		this.inGround = nbttagcompound.getByte("inGround") == 1;
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+		if(this.inGround && this.thrower == entityPlayer && this.throwableShake <= 0 && entityPlayer.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
 			this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-			var1.onItemPickup(this, 1);
+			entityPlayer.onItemPickup(this, 1);
 			this.setEntityDead();
 		}
 
--- /dev/null
+++ net/minecraft/src/BlockHidable.java
@@ -1,0 +1,32 @@
+package net.minecraft.src;
+
+public class BlockHidable extends BlockGlass {
+	public boolean render = true;
+	public int id;
+	public int tRes;
+
+	public BlockHidable(int id, int blockIndex, Material material, boolean localFlag) {
+		super(id, blockIndex, material, localFlag);
+		this.id = id;
+		this.tRes = blockIndex;
+	}
+
+	public int getBlockTexture(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return this.render ? this.tRes : 160;
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		if(!(world instanceof FreerunWorld) && !(world instanceof ZMWorld)) {
+			ItemStack itemStack6 = entityPlayer.inventory.getCurrentItem();
+			if(itemStack6 == null) {
+				this.render = !this.render;
+				world.setBlockWithNotify(x, y, z, this.id);
+				return true;
+			} else {
+				return false;
+			}
+		} else {
+			return false;
+		}
+	}
+}
--- net/minecraft/src/EntityLavaFX.java
+++ net/minecraft/src/EntityLavaFX.java
@@ -3,8 +3,8 @@
 public class EntityLavaFX extends EntityFX {
 	private float lavaParticleScale;
 
-	public EntityLavaFX(World var1, double var2, double var4, double var6) {
-		super(var1, var2, var4, var6, 0.0D, 0.0D, 0.0D);
+	public EntityLavaFX(World worldObj, double x, double y, double z) {
+		super(worldObj, x, y, z, 0.0D, 0.0D, 0.0D);
 		this.motionX *= (double)0.8F;
 		this.motionY *= (double)0.8F;
 		this.motionZ *= (double)0.8F;
@@ -17,14 +17,14 @@
 		this.particleTextureIndex = 49;
 	}
 
-	public float getBrightness(float var1) {
+	public float getBrightness(float unused) {
 		return 1.0F;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		float var8 = ((float)this.particleAge + var2) / (float)this.particleMaxAge;
-		this.particleScale = this.lavaParticleScale * (1.0F - var8 * var8);
-		super.renderParticle(var1, var2, var3, var4, var5, var6, var7);
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		float f8 = ((float)this.particleAge + renderPartialTick) / (float)this.particleMaxAge;
+		this.particleScale = this.lavaParticleScale * (1.0F - f8 * f8);
+		super.renderParticle(tessellator, renderPartialTick, xOffset, yOffset, zOffset, xOffset2, zOffset2);
 	}
 
 	public void onUpdate() {
@@ -35,8 +35,8 @@
 			this.setEntityDead();
 		}
 
-		float var1 = (float)this.particleAge / (float)this.particleMaxAge;
-		if(this.rand.nextFloat() > var1) {
+		float f1 = (float)this.particleAge / (float)this.particleMaxAge;
+		if(this.rand.nextFloat() > f1) {
 			this.worldObj.spawnParticle("smoke", this.posX, this.posY, this.posZ, this.motionX, this.motionY, this.motionZ);
 		}
 
--- /dev/null
+++ net/minecraft/src/GenHubWaterpool.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class GenHubWaterpool extends WorldGenerator {
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		throw new UnsupportedOperationException("Not implemented yet");
+	}
+}
--- net/minecraft/src/ICamera.java
+++ net/minecraft/src/ICamera.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public interface ICamera {
-	boolean isBoundingBoxInFrustum(AxisAlignedBB var1);
+	boolean isBoundingBoxInFrustum(AxisAlignedBB axisAlignedBB1);
 
-	void setPosition(double var1, double var3, double var5);
+	void setPosition(double d1, double d3, double d5);
 }
--- /dev/null
+++ net/minecraft/src/VisualsLucky8.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+class VisualsLucky8 extends Visuals {
+    final /* synthetic */ VisualsManager field_10080_2fs7tKlMTAr47rFtiA6M8P2vTUQ289G4CFZ04ZW5ZUM9AOaWzKn0z5avZUa4;
+    
+    VisualsLucky8(final VisualsManager la) {
+        this.field_10080_2fs7tKlMTAr47rFtiA6M8P2vTUQ289G4CFZ04ZW5ZUM9AOaWzKn0z5avZUa4 = la;
+    }
+    
+    @Override
+    public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+        return "/unl/beb2cee7-d138-4138-9199-d2fa77127b99.xAL";
+    }
+    
+    @Override
+    public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(final Object... arr) {
+        if (arr[0] instanceof GuiEssenceTransformer && (int)arr[1] == 888) {
+            this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+            return true;
+        }
+        return false;
+    }
+    
+    @Override
+    public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+        return "unlock--lucky8";
+    }
+    
+    @Override
+    public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+        return "Lucky8";
+    }
+    
+    @Override
+    public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+        return "Obtain 888 Essence with one use of the Essence Transformer";
+    }
+}
--- /dev/null
+++ net/minecraft/src/WorldZMUnknownClass.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+import java.util.Comparator;
+
+class WorldZMUnknownClass implements Comparator<WorldZMSpawn> {
+    final /* synthetic */ HandlerSetCheckpointUnknownClass2 field_11443_1BJFlv1X4HOQ8lx6X836c0onpN9Co780DVeO1e481I5DeJmGRUvRU73CHrJa;
+    final /* synthetic */ ZMWorld field_11442_9H1iY0fX5894Xwzi8C649oW21hPHgwTFzq7M5kIcP35DG6r1LXtvFroq7aM3;
+    
+    WorldZMUnknownClass(final ZMWorld yv, final HandlerSetCheckpointUnknownClass2 acm) {
+        this.field_11442_9H1iY0fX5894Xwzi8C649oW21hPHgwTFzq7M5kIcP35DG6r1LXtvFroq7aM3 = yv;
+        this.field_11443_1BJFlv1X4HOQ8lx6X836c0onpN9Co780DVeO1e481I5DeJmGRUvRU73CHrJa = acm;
+    }
+    
+    public int compare(final WorldZMSpawn lz1, final WorldZMSpawn lz2) {
+        final HandlerSetCheckpointUnknownClass2 func_12096_2rdzFnI6r437tV8H4g4amO6c0UvbR1Bk63McJ9C8IuxrI5J07L0IocLF91rI = lz1.field_11034_662fuevXMrncHQHqjFB49Bxq6yi97SM7D89qKtblVUcLLaX82L33EYCU1qp7.func_12096_2rdzFnI6r437tV8H4g4amO6c0UvbR1Bk63McJ9C8IuxrI5J07L0IocLF91rI();
+        final HandlerSetCheckpointUnknownClass2 func_12096_2rdzFnI6r437tV8H4g4amO6c0UvbR1Bk63McJ9C8IuxrI5J07L0IocLF91rI2 = lz2.field_11034_662fuevXMrncHQHqjFB49Bxq6yi97SM7D89qKtblVUcLLaX82L33EYCU1qp7.func_12096_2rdzFnI6r437tV8H4g4amO6c0UvbR1Bk63McJ9C8IuxrI5J07L0IocLF91rI();
+        return Double.valueOf(this.field_11443_1BJFlv1X4HOQ8lx6X836c0onpN9Co780DVeO1e481I5DeJmGRUvRU73CHrJa.func_12185_77E7ly6r5p8AgeD7j1MC3wrd4wUdbSPPEtyupBLDu5J7c0z302AEf633qiD9(func_12096_2rdzFnI6r437tV8H4g4amO6c0UvbR1Bk63McJ9C8IuxrI5J07L0IocLF91rI.field_12186_05n216qDAUZ2kE810Fqi64V6niu79vbRckyfaVY9Fqw11STapU0px02uapMx, func_12096_2rdzFnI6r437tV8H4g4amO6c0UvbR1Bk63McJ9C8IuxrI5J07L0IocLF91rI.field_12187_7Kg8S2j0ooT9LE62UmIi8A7J7Y4sM22qj00KYKP97u5583AOirdarRO6WOFv)).compareTo(Double.valueOf(this.field_11443_1BJFlv1X4HOQ8lx6X836c0onpN9Co780DVeO1e481I5DeJmGRUvRU73CHrJa.func_12185_77E7ly6r5p8AgeD7j1MC3wrd4wUdbSPPEtyupBLDu5J7c0z302AEf633qiD9(func_12096_2rdzFnI6r437tV8H4g4amO6c0UvbR1Bk63McJ9C8IuxrI5J07L0IocLF91rI2.field_12186_05n216qDAUZ2kE810Fqi64V6niu79vbRckyfaVY9Fqw11STapU0px02uapMx, func_12096_2rdzFnI6r437tV8H4g4amO6c0UvbR1Bk63McJ9C8IuxrI5J07L0IocLF91rI2.field_12187_7Kg8S2j0ooT9LE62UmIi8A7J7Y4sM22qj00KYKP97u5583AOirdarRO6WOFv)));
+    }
+}
--- /dev/null
+++ net/minecraft/src/CertUtils.java
@@ -1,0 +1,108 @@
+package net.minecraft.src;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.security.KeyFactory;
+import java.security.KeyPair;
+import java.security.KeyPairGenerator;
+import java.security.NoSuchAlgorithmException;
+import java.security.PrivateKey;
+import java.security.PublicKey;
+import java.security.SecureRandom;
+import java.security.Signature;
+import java.security.spec.PKCS8EncodedKeySpec;
+import java.security.spec.X509EncodedKeySpec;
+
+import net.minecraft.client.Minecraft;
+
+public class CertUtils {
+	public static String publicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2Fk6C4qL9xtReaZ8ZOPgOAANgazC7BqNQZDbHWnd6+8y4QyPuwJlbkzO+DpLzLtjQsDnrCKJTmtZ5ZMf1GLyRvm45db+e1G+YjSGUzvXPIpb/x508FZPmPJBsgmdFyOAvJ7wPkRhYJ+Pz4DHzz5X6EUoM9iXVlbHNtjb41L0uKJVghFm/xXhMvRg3IIHi2ypaX0KlQcQ9kxjA2BSbDw0VXrm6OYxf4mvlaHOM/iy7LdEJm9fMJpxXaVkqaXrGU+/wdYaIOlEaibMwv8FGZAvpAhU7tN0LpZNHyP91ZCpLu6o2Hw5sBQe+0N2Gm0VKRpzA2N/2eYtmVnU1Ege1H1eswIDAQAB";
+	public static PublicKey loadedPublicKey = null;
+	public static PrivateKey loadedPrivKey = null;
+
+	public static void MakeKeyPair() {
+		try {
+			KeyPairGenerator keyPairGenerator0 = KeyPairGenerator.getInstance("RSA");
+			keyPairGenerator0.initialize(2048, new SecureRandom());
+			KeyPair keyPair1 = keyPairGenerator0.generateKeyPair();
+			File file2 = new File("keys.txt");
+			FileWriter fileWriter3 = new FileWriter(file2);
+			file2.createNewFile();
+			fileWriter3.write("PrivateKey: " + new String(Base64.getEncoder().encode(keyPair1.getPrivate().getEncoded())) + "\n\n###\n\n");
+			fileWriter3.write("PublicKey: " + new String(Base64.getEncoder().encode(keyPair1.getPublic().getEncoded())));
+			fileWriter3.flush();
+			fileWriter3.close();
+		} catch (NoSuchAlgorithmException noSuchAlgorithmException4) {
+			noSuchAlgorithmException4.printStackTrace();
+		} catch (IOException iOException5) {
+			iOException5.printStackTrace();
+		}
+
+	}
+
+	public static void LoadKeys() {
+		loadedPublicKey = getPublicKey(publicKey);
+		ExtLogger.i("Successfully loaded publicKey");
+		if(Minecraft.loadCerts) {
+			File file0 = new File("certkey");
+			if(file0.exists()) {
+				try {
+					BufferedReader bufferedReader1 = new BufferedReader(new FileReader(file0));
+					loadedPrivKey = getKey(bufferedReader1.readLine());
+					ExtLogger.i("Successfully loaded private certificate");
+					bufferedReader1.close();
+				} catch (FileNotFoundException fileNotFoundException2) {
+					fileNotFoundException2.printStackTrace();
+				} catch (IOException iOException3) {
+					iOException3.printStackTrace();
+				}
+			}
+		}
+
+	}
+
+	public static PrivateKey getKey(String string) {
+		try {
+			byte[] b1 = Base64.getDecoder().decode(string.getBytes());
+			PKCS8EncodedKeySpec pKCS8EncodedKeySpec2 = new PKCS8EncodedKeySpec(b1);
+			KeyFactory keyFactory3 = KeyFactory.getInstance(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9789_9Z0Rf0DDC0E00xcydj7892e71E4s1cG5iX42294z122jeMAG69D8995634eb));
+			return keyFactory3.generatePrivate(pKCS8EncodedKeySpec2);
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
+			return null;
+		}
+	}
+
+	public static PublicKey getPublicKey(String string) {
+		try {
+			byte[] b1 = Base64.getDecoder().decode(string.getBytes());
+			X509EncodedKeySpec x509EncodedKeySpec2 = new X509EncodedKeySpec(b1);
+			KeyFactory keyFactory3 = KeyFactory.getInstance(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9789_9Z0Rf0DDC0E00xcydj7892e71E4s1cG5iX42294z122jeMAG69D8995634eb));
+			return keyFactory3.generatePublic(x509EncodedKeySpec2);
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
+			return null;
+		}
+	}
+
+	public static String sign(String string, PrivateKey privateKey) throws Exception {
+		Signature signature2 = Signature.getInstance(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9793_29dm1e3GNDeOTZqsS1t29B2w34ks2F6TVj4W2QNMh33p0qFqKW79YSp421af));
+		signature2.initSign(privateKey);
+		signature2.update(string.getBytes("UTF-8"));
+		byte[] b3 = signature2.sign();
+		return Base64.getEncoder().encodeToString(b3);
+	}
+
+	public static boolean verify(String string1, String string2) throws Exception {
+		PublicKey publicKey2 = loadedPublicKey;
+		Signature signature3 = Signature.getInstance(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9793_29dm1e3GNDeOTZqsS1t29B2w34ks2F6TVj4W2QNMh33p0qFqKW79YSp421af));
+		signature3.initVerify(publicKey2);
+		signature3.update(string1.getBytes("UTF-8"));
+		byte[] b4 = Base64.getDecoder().decode(string2);
+		return signature3.verify(b4);
+	}
+}
--- net/minecraft/src/EntityList.java
+++ net/minecraft/src/EntityList.java
@@ -9,74 +9,74 @@
 	private static Map IDtoClassMapping = new HashMap();
 	private static Map classToIDMapping = new HashMap();
 
-	private static void addMapping(Class var0, String var1, int var2) {
-		stringToClassMapping.put(var1, var0);
-		classToStringMapping.put(var0, var1);
-		IDtoClassMapping.put(Integer.valueOf(var2), var0);
-		classToIDMapping.put(var0, Integer.valueOf(var2));
-	}
-
-	public static Entity createEntityByName(String var0, World var1) {
-		Entity var2 = null;
-
-		try {
-			Class var3 = (Class)stringToClassMapping.get(var0);
-			if(var3 != null) {
-				var2 = (Entity)var3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
-			}
-		} catch (Exception var4) {
-			var4.printStackTrace();
-		}
-
-		return var2;
-	}
-
-	public static Entity createEntityFromNBT(NBTTagCompound var0, World var1) {
-		Entity var2 = null;
-
-		try {
-			Class var3 = (Class)stringToClassMapping.get(var0.getString("id"));
-			if(var3 != null) {
-				var2 = (Entity)var3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
-			}
-		} catch (Exception var4) {
-			var4.printStackTrace();
-		}
-
-		if(var2 != null) {
-			var2.readFromNBT(var0);
+	private static void addMapping(Class entityClass, String entityName, int entityID) {
+		stringToClassMapping.put(entityName, entityClass);
+		classToStringMapping.put(entityClass, entityName);
+		IDtoClassMapping.put(entityID, entityClass);
+		classToIDMapping.put(entityClass, entityID);
+	}
+
+	public static Entity createEntityByName(String entityName, World world) {
+		Entity entity2 = null;
+
+		try {
+			Class class3 = (Class)stringToClassMapping.get(entityName);
+			if(class3 != null) {
+				entity2 = (Entity)class3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{world});
+			}
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
+		}
+
+		return entity2;
+	}
+
+	public static Entity createEntityFromNBT(NBTTagCompound nbttagcompound, World world) {
+		Entity entity2 = null;
+
+		try {
+			Class class3 = (Class)stringToClassMapping.get(nbttagcompound.getString("id"));
+			if(class3 != null) {
+				entity2 = (Entity)class3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{world});
+			}
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
+		}
+
+		if(entity2 != null) {
+			entity2.readFromNBT(nbttagcompound);
 		} else {
-			System.out.println("Skipping Entity with id " + var0.getString("id"));
+			System.out.println("Skipping Entity with id " + nbttagcompound.getString("id"));
 		}
 
-		return var2;
+		return entity2;
 	}
 
-	public static Entity createEntityByID(int var0, World var1) {
-		Entity var2 = null;
+	public static Entity createEntityByID(int entityID, World worldObj) {
+		Entity entity2 = null;
 
 		try {
-			Class var3 = (Class)IDtoClassMapping.get(Integer.valueOf(var0));
-			if(var3 != null) {
-				var2 = (Entity)var3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
+			Class class3 = (Class)IDtoClassMapping.get(entityID);
+			if(class3 != null) {
+				entity2 = (Entity)class3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{worldObj});
 			}
-		} catch (Exception var4) {
-			var4.printStackTrace();
-		}
-
-		if(var2 == null) {
-			System.out.println("Skipping Entity with id " + var0);
-		}
-
-		return var2;
-	}
-
-	public static int getEntityID(Entity var0) {
-		return ((Integer)classToIDMapping.get(var0.getClass())).intValue();
-	}
-
-	public static String getEntityString(Entity var0) {
-		return (String)classToStringMapping.get(var0.getClass());
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
+		}
+
+		if(entity2 == null) {
+			System.out.println("Skipping Entity with id " + entityID);
+		}
+
+		return entity2;
+	}
+
+	public static int getEntityID(Entity entity) {
+		return ((Integer)classToIDMapping.get(entity.getClass())).intValue();
+	}
+
+	public static String getEntityString(Entity entity) {
+		return (String)classToStringMapping.get(entity.getClass());
 	}
 
 	static {
@@ -100,5 +100,11 @@
 		addMapping(EntityFallingSand.class, "FallingSand", 21);
 		addMapping(EntityMinecart.class, "Minecart", 40);
 		addMapping(EntityBoat.class, "Boat", 41);
+		addMapping(EntityShadowPlayer.class, "recruiter alphaver (real)", 69);
+		addMapping(EntityGiantBoss.class, "Colossus", 70);
+		addMapping(EntityAmoung.class, "amonus", 72);
+		addMapping(EntityEssenceProjectile.class, "EssenceProjectile", 77);
+		addMapping(EntityObserver.class, "Observer", 90);
+		ModLoader.AddAllEntityIDs();
 	}
 }
--- net/minecraft/src/IProgressUpdate.java
+++ net/minecraft/src/IProgressUpdate.java
@@ -1,9 +1,9 @@
 package net.minecraft.src;
 
 public interface IProgressUpdate {
-	void displayProgressMessage(String var1);
-
-	void displayLoadingString(String var1);
-
-	void setLoadingProgress(int var1);
+	void displayProgressMessage(String string1);
+
+	void displayLoadingString(String string1);
+
+	void setLoadingProgress(int i1);
 }
--- /dev/null
+++ net/minecraft/src/BlockContainerOld.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+public abstract class BlockContainerOld extends BlockOld {
+	protected BlockContainerOld(int integer, Material sx) {
+		super(integer, sx);
+		isBlockContainer[integer] = true;
+	}
+
+	protected BlockContainerOld(int integer1, int integer2, Material sx) {
+		super(integer1, integer2, sx);
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+		super.onBlockAdded(vg, integer2, integer3, integer4);
+		vg.setBlockTileEntity(integer2, integer3, integer4, this.getBlockEntity());
+	}
+
+	public void onBlockRemoval(World vg, int integer2, int integer3, int integer4) {
+		super.onBlockRemoval(vg, integer2, integer3, integer4);
+		vg.removeBlockTileEntity(integer2, integer3, integer4);
+	}
+
+	protected abstract TileEntity getBlockEntity();
+}
--- net/minecraft/src/RecipeSorter.java
+++ net/minecraft/src/RecipeSorter.java
@@ -5,15 +5,19 @@
 class RecipeSorter implements Comparator {
 	final CraftingManager craftingManager;
 
-	RecipeSorter(CraftingManager var1) {
-		this.craftingManager = var1;
-	}
-
-	public int compareRecipes(CraftingRecipe var1, CraftingRecipe var2) {
-		return var2.getRecipeSize() < var1.getRecipeSize() ? -1 : (var2.getRecipeSize() > var1.getRecipeSize() ? 1 : 0);
-	}
-
-	public int compare(Object var1, Object var2) {
-		return this.compareRecipes((CraftingRecipe)var1, (CraftingRecipe)var2);
+	RecipeSorter(CraftingManager craftingManager) {
+		this.craftingManager = craftingManager;
+	}
+
+	public int compareRecipes(CraftingRecipe sl1, CraftingRecipe sl2) {
+		return sl2.getRecipeSize() < sl1.getRecipeSize() ? -1 : (sl2.getRecipeSize() > sl1.getRecipeSize() ? 1 : 0);
+	}
+
+	public int compare(CraftingRecipe sl1, CraftingRecipe sl2) {
+		return this.compareRecipes(sl1, sl2);
+	}
+
+	public int compare(Object object1, Object object2) {
+		return this.compareRecipes((CraftingRecipe)object1, (CraftingRecipe)object2);
 	}
 }
--- net/minecraft/src/GuiContainer.java
+++ net/minecraft/src/GuiContainer.java
@@ -2,6 +2,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
@@ -11,39 +12,62 @@
 	protected int ySize = 166;
 	protected List inventorySlots = new ArrayList();
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		int var4 = (this.width - this.xSize) / 2;
-		int var5 = (this.height - this.ySize) / 2;
-		this.drawGuiContainerBackgroundLayer(var3);
+		GL11.glEnable(GL11.GL_BLEND);
+		int i4 = (this.width - this.xSize) / 2;
+		int i5 = (this.height - this.ySize) / 2;
+		this.drawGuiContainerBackgroundLayer(renderPartialTick);
 		GL11.glPushMatrix();
 		GL11.glRotatef(180.0F, 1.0F, 0.0F, 0.0F);
 		RenderHelper.enableStandardItemLighting();
 		GL11.glPopMatrix();
 		GL11.glPushMatrix();
-		GL11.glTranslatef((float)var4, (float)var5, 0.0F);
+		GL11.glTranslatef((float)i4, (float)i5, 0.0F);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
+		boolean z6 = false;
+		String string7 = "";
+		String string8 = "";
+		int i9 = 0;
+		int i10 = 0;
 
-		for(int var6 = 0; var6 < this.inventorySlots.size(); ++var6) {
-			SlotInventory var7 = (SlotInventory)this.inventorySlots.get(var6);
-			this.drawSlotInventory(var7);
-			if(var7.getIsMouseOverSlot(var1, var2)) {
+		for(int i11 = 0; i11 < this.inventorySlots.size(); ++i11) {
+			SlotInventory slotInventory12 = (SlotInventory)this.inventorySlots.get(i11);
+			this.drawSlotInventory(slotInventory12);
+			if(slotInventory12.getIsMouseOverSlot(mouseX, mouseY)) {
 				GL11.glDisable(GL11.GL_LIGHTING);
 				GL11.glDisable(GL11.GL_DEPTH_TEST);
-				int var8 = var7.xDisplayPosition;
-				int var9 = var7.yDisplayPosition;
-				this.drawGradientRect(var8, var9, var8 + 16, var9 + 16, -2130706433, -2130706433);
+				int i13 = slotInventory12.xDisplayPosition;
+				int i14 = slotInventory12.yDisplayPosition;
+				drawGradientRect(i13, i14, i13 + 16, i14 + 16, -2130706433, -2130706433);
+				ItemStack itemStack15 = slotInventory12.getStack();
+				if(itemStack15 != null) {
+					String string16 = "";
+					if(itemStack15.itemID < 32767) {
+						string16 = Block.blocksList[itemStack15.itemID].blockName;
+					} else {
+						string16 = itemStack15.getItem().itemName();
+					}
+
+					if(string16 != "") {
+						z6 = true;
+						string7 = string16;
+						i9 = i13 + 16;
+						i10 = i14;
+					}
+				}
+
 				GL11.glEnable(GL11.GL_LIGHTING);
 				GL11.glEnable(GL11.GL_DEPTH_TEST);
 			}
 		}
 
-		InventoryPlayer var10 = this.mc.thePlayer.inventory;
-		if(var10.draggedItemStack != null) {
+		InventoryPlayer inventoryPlayer17 = this.mc.thePlayer.inventory;
+		if(inventoryPlayer17.draggedItemStack != null) {
 			GL11.glTranslatef(0.0F, 0.0F, 32.0F);
-			itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, var10.draggedItemStack, var1 - var4 - 8, var2 - var5 - 8);
-			itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, var10.draggedItemStack, var1 - var4 - 8, var2 - var5 - 8);
+			itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, inventoryPlayer17.draggedItemStack, mouseX - i4 - 8, mouseY - i5 - 8);
+			itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, inventoryPlayer17.draggedItemStack, mouseX - i4 - 8, mouseY - i5 - 8);
 		}
 
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
@@ -51,146 +75,159 @@
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
 		this.drawGuiContainerForegroundLayer();
+		if(z6) {
+			int i18 = this.mc.fontRenderer.getStringWidth(string7);
+			Gui.drawGradientRect(i9, i10, i9 + i18 + 8, i10 + 16, 0xFF000000, 536870912);
+			Gui.drawGradientRect(i9, i10, i9 + i18 + 8, i10 + 1, -6168065, -3149569);
+			Gui.drawGradientRect(i9, i10, i9 + i18 + 8, i10 + 16, 547480063, 536870912);
+			this.mc.fontRenderer.drawStringWithShadow(string7, i9 + 4, i10 + 3, -1);
+		}
+
+		GL11.glPopMatrix();
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 		GL11.glEnable(GL11.GL_LIGHTING);
 		GL11.glEnable(GL11.GL_DEPTH_TEST);
-		GL11.glPopMatrix();
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
 	}
 
-	protected abstract void drawGuiContainerBackgroundLayer(float var1);
+	protected abstract void drawGuiContainerBackgroundLayer(float f1);
 
-	private void drawSlotInventory(SlotInventory var1) {
-		IInventory var2 = var1.inventory;
-		int var3 = var1.slotIndex;
-		int var4 = var1.xDisplayPosition;
-		int var5 = var1.yDisplayPosition;
-		ItemStack var6 = var2.getStackInSlot(var3);
-		if(var6 == null) {
-			int var7 = var1.getBackgroundIconIndex();
-			if(var7 >= 0) {
+	private void drawSlotInventory(SlotInventory slotInventory) {
+		IInventory iInventory2 = slotInventory.inventory;
+		int i3 = slotInventory.slotIndex;
+		int i4 = slotInventory.xDisplayPosition;
+		int i5 = slotInventory.yDisplayPosition;
+		ItemStack itemStack6 = iInventory2.getStackInSlot(i3);
+		if(itemStack6 == null) {
+			int i7 = slotInventory.getBackgroundIconIndex();
+			if(i7 >= 0) {
 				GL11.glDisable(GL11.GL_LIGHTING);
 				this.mc.renderEngine.bindTexture(this.mc.renderEngine.getTexture("/gui/items.png"));
-				this.drawTexturedModalRect(var4, var5, var7 % 16 * 16, var7 / 16 * 16, 16, 16);
+				this.drawTexturedModalRect(i4, i5, i7 % 16 * 16, i7 / 16 * 16, 16, 16);
 				GL11.glEnable(GL11.GL_LIGHTING);
 				return;
 			}
 		}
 
-		itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, var6, var4, var5);
-		itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, var6, var4, var5);
+		itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, itemStack6, i4, i5);
+		itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, itemStack6, i4, i5);
 	}
 
-	private Slot getSlotAtPosition(int var1, int var2) {
-		for(int var3 = 0; var3 < this.inventorySlots.size(); ++var3) {
-			SlotInventory var4 = (SlotInventory)this.inventorySlots.get(var3);
-			if(var4.getIsMouseOverSlot(var1, var2)) {
-				return var4;
+	private Slot getSlotAtPosition(int integer1, int integer2) {
+		for(int i3 = 0; i3 < this.inventorySlots.size(); ++i3) {
+			SlotInventory slotInventory4 = (SlotInventory)this.inventorySlots.get(i3);
+			if(slotInventory4.getIsMouseOverSlot(integer1, integer2)) {
+				return slotInventory4;
 			}
 		}
 
 		return null;
 	}
 
-	protected void mouseClicked(int var1, int var2, int var3) {
-		if(var3 == 0 || var3 == 1) {
-			Slot var4 = this.getSlotAtPosition(var1, var2);
-			InventoryPlayer var5 = this.mc.thePlayer.inventory;
-			int var7;
-			if(var4 != null) {
-				ItemStack var6 = var4.getStack();
-				if(var6 != null || var5.draggedItemStack != null) {
-					if(var6 != null && var5.draggedItemStack == null) {
-						var7 = var3 == 0 ? var6.stackSize : (var6.stackSize + 1) / 2;
-						var5.draggedItemStack = var4.inventory.decrStackSize(var4.slotIndex, var7);
-						if(var6.stackSize == 0) {
-							var4.putStack((ItemStack)null);
-						}
-
-						var4.onPickupFromSlot();
-					} else if(var6 == null && var5.draggedItemStack != null && var4.isItemValid(var5.draggedItemStack)) {
-						var7 = var3 == 0 ? var5.draggedItemStack.stackSize : 1;
-						if(var7 > var4.inventory.getInventoryStackLimit()) {
-							var7 = var4.inventory.getInventoryStackLimit();
-						}
-
-						var4.putStack(var5.draggedItemStack.splitStack(var7));
-						if(var5.draggedItemStack.stackSize == 0) {
-							var5.draggedItemStack = null;
-						}
-					} else if(var6 != null && var5.draggedItemStack != null) {
-						if(var4.isItemValid(var5.draggedItemStack)) {
-							if(var6.itemID != var5.draggedItemStack.itemID) {
-								if(var5.draggedItemStack.stackSize <= var4.inventory.getInventoryStackLimit()) {
-									var4.putStack(var5.draggedItemStack);
-									var5.draggedItemStack = var6;
+	protected void mouseClicked(int integer1, int integer2, int integer3) {
+		super.mouseClicked(integer1, integer2, integer3);
+		if(integer3 == 0 || integer3 == 1) {
+			Slot slot4 = this.getSlotAtPosition(integer1, integer2);
+			InventoryPlayer inventoryPlayer5 = this.mc.thePlayer.inventory;
+			int i6;
+			if(slot4 != null) {
+				ItemStack itemStack7 = slot4.getStack();
+				if(itemStack7 != null || inventoryPlayer5.draggedItemStack != null) {
+					if(itemStack7 != null && inventoryPlayer5.draggedItemStack == null) {
+						i6 = integer3 == 0 ? itemStack7.stackSize : (itemStack7.stackSize + 1) / 2;
+						inventoryPlayer5.draggedItemStack = slot4.inventory.decrStackSize(slot4.slotIndex, i6);
+						if(itemStack7.stackSize == 0) {
+							slot4.putStack((ItemStack)null);
+						}
+
+						slot4.onPickupFromSlot();
+					} else if(itemStack7 == null && inventoryPlayer5.draggedItemStack != null && slot4.isItemValid(inventoryPlayer5.draggedItemStack)) {
+						i6 = integer3 == 0 ? inventoryPlayer5.draggedItemStack.stackSize : 1;
+						if(i6 > slot4.inventory.getInventoryStackLimit()) {
+							i6 = slot4.inventory.getInventoryStackLimit();
+						}
+
+						slot4.putStack(inventoryPlayer5.draggedItemStack.splitStack(i6));
+						if(inventoryPlayer5.draggedItemStack.stackSize == 0) {
+							inventoryPlayer5.draggedItemStack = null;
+						}
+					} else if(itemStack7 != null && inventoryPlayer5.draggedItemStack != null) {
+						if(slot4.isItemValid(inventoryPlayer5.draggedItemStack)) {
+							if(itemStack7.itemID != inventoryPlayer5.draggedItemStack.itemID) {
+								if(inventoryPlayer5.draggedItemStack.stackSize <= slot4.inventory.getInventoryStackLimit()) {
+									slot4.putStack(inventoryPlayer5.draggedItemStack);
+									inventoryPlayer5.draggedItemStack = itemStack7;
+									slot4.onSlotChanged();
 								}
-							} else if(var6.itemID == var5.draggedItemStack.itemID) {
-								if(var3 == 0) {
-									var7 = var5.draggedItemStack.stackSize;
-									if(var7 > var4.inventory.getInventoryStackLimit() - var6.stackSize) {
-										var7 = var4.inventory.getInventoryStackLimit() - var6.stackSize;
-									}
-
-									if(var7 > var5.draggedItemStack.getMaxStackSize() - var6.stackSize) {
-										var7 = var5.draggedItemStack.getMaxStackSize() - var6.stackSize;
-									}
-
-									var5.draggedItemStack.splitStack(var7);
-									if(var5.draggedItemStack.stackSize == 0) {
-										var5.draggedItemStack = null;
-									}
-
-									var6.stackSize += var7;
-								} else if(var3 == 1) {
-									var7 = 1;
-									if(var7 > var4.inventory.getInventoryStackLimit() - var6.stackSize) {
-										var7 = var4.inventory.getInventoryStackLimit() - var6.stackSize;
-									}
-
-									if(var7 > var5.draggedItemStack.getMaxStackSize() - var6.stackSize) {
-										var7 = var5.draggedItemStack.getMaxStackSize() - var6.stackSize;
-									}
-
-									var5.draggedItemStack.splitStack(var7);
-									if(var5.draggedItemStack.stackSize == 0) {
-										var5.draggedItemStack = null;
-									}
-
-									var6.stackSize += var7;
+							} else if(itemStack7.itemID == inventoryPlayer5.draggedItemStack.itemID) {
+								if(integer3 == 0) {
+									i6 = inventoryPlayer5.draggedItemStack.stackSize;
+									if(i6 > slot4.inventory.getInventoryStackLimit() - itemStack7.stackSize) {
+										i6 = slot4.inventory.getInventoryStackLimit() - itemStack7.stackSize;
+									}
+
+									if(i6 > inventoryPlayer5.draggedItemStack.getMaxStackSize() - itemStack7.stackSize) {
+										i6 = inventoryPlayer5.draggedItemStack.getMaxStackSize() - itemStack7.stackSize;
+									}
+
+									inventoryPlayer5.draggedItemStack.splitStack(i6);
+									if(inventoryPlayer5.draggedItemStack.stackSize == 0) {
+										inventoryPlayer5.draggedItemStack = null;
+									}
+
+									itemStack7.stackSize += i6;
+									slot4.onSlotChanged();
+								} else if(integer3 == 1) {
+									i6 = 1;
+									if(i6 > slot4.inventory.getInventoryStackLimit() - itemStack7.stackSize) {
+										i6 = slot4.inventory.getInventoryStackLimit() - itemStack7.stackSize;
+									}
+
+									if(i6 > inventoryPlayer5.draggedItemStack.getMaxStackSize() - itemStack7.stackSize) {
+										i6 = inventoryPlayer5.draggedItemStack.getMaxStackSize() - itemStack7.stackSize;
+									}
+
+									inventoryPlayer5.draggedItemStack.splitStack(i6);
+									if(inventoryPlayer5.draggedItemStack.stackSize == 0) {
+										inventoryPlayer5.draggedItemStack = null;
+									}
+
+									itemStack7.stackSize += i6;
+									slot4.onSlotChanged();
 								}
 							}
-						} else if(var6.itemID == var5.draggedItemStack.itemID && var5.draggedItemStack.getMaxStackSize() > 1) {
-							var7 = var6.stackSize;
-							if(var7 > 0 && var7 + var5.draggedItemStack.stackSize <= var5.draggedItemStack.getMaxStackSize()) {
-								var5.draggedItemStack.stackSize += var7;
-								var6.splitStack(var7);
-								if(var6.stackSize == 0) {
-									var4.putStack((ItemStack)null);
+						} else if(itemStack7.itemID == inventoryPlayer5.draggedItemStack.itemID && inventoryPlayer5.draggedItemStack.getMaxStackSize() > 1) {
+							i6 = itemStack7.stackSize;
+							if(i6 > 0 && i6 + inventoryPlayer5.draggedItemStack.stackSize <= inventoryPlayer5.draggedItemStack.getMaxStackSize()) {
+								inventoryPlayer5.draggedItemStack.stackSize += i6;
+								itemStack7.splitStack(i6);
+								if(itemStack7.stackSize == 0) {
+									slot4.putStack((ItemStack)null);
 								}
 
-								var4.onPickupFromSlot();
+								slot4.onPickupFromSlot();
 							}
 						}
 					}
 				}
 
-				var4.onSlotChanged();
-			} else if(var5.draggedItemStack != null) {
-				int var9 = (this.width - this.xSize) / 2;
-				var7 = (this.height - this.ySize) / 2;
-				if(var1 < var9 || var2 < var7 || var1 >= var9 + this.xSize || var2 >= var7 + this.xSize) {
-					EntityPlayerSP var8 = this.mc.thePlayer;
-					if(var3 == 0) {
-						var8.dropPlayerItem(var5.draggedItemStack);
-						var5.draggedItemStack = null;
+				slot4.onSlotChanged();
+			} else if(inventoryPlayer5.draggedItemStack != null) {
+				int i9 = (this.width - this.xSize) / 2;
+				i6 = (this.height - this.ySize) / 2;
+				if(integer1 < i9 || integer2 < i6 || integer1 >= i9 + this.xSize || integer2 >= i6 + this.xSize) {
+					EntityPlayerSP entityPlayerSP8 = this.mc.thePlayer;
+					if(integer3 == 0) {
+						entityPlayerSP8.dropPlayerItem(inventoryPlayer5.draggedItemStack);
+						inventoryPlayer5.draggedItemStack = null;
 					}
 
-					if(var3 == 1) {
-						var8.dropPlayerItem(var5.draggedItemStack.splitStack(1));
-						if(var5.draggedItemStack.stackSize == 0) {
-							var5.draggedItemStack = null;
+					if(integer3 == 1) {
+						entityPlayerSP8.dropPlayerItem(inventoryPlayer5.draggedItemStack.splitStack(1));
+						if(inventoryPlayer5.draggedItemStack.stackSize == 0) {
+							inventoryPlayer5.draggedItemStack = null;
 						}
 					}
 				}
@@ -199,24 +236,26 @@
 
 	}
 
-	protected void mouseMovedOrUp(int var1, int var2, int var3) {
-		if(var3 == 0) {
+	protected void mouseMovedOrUp(int integer1, int integer2, int integer3) {
+		super.mouseMovedOrUp(integer1, integer2, integer3);
+		if(integer3 == 0) {
+			;
 		}
 
 	}
 
-	protected void keyTyped(char var1, int var2) {
-		if(var2 == 1 || var2 == this.mc.options.keyBindInventory.keyCode) {
+	protected void keyTyped(char character, int key) {
+		if(key == 1 || key == this.mc.options.keyBindInventory.keyCode) {
 			this.mc.displayGuiScreen((GuiScreen)null);
 		}
 
 	}
 
 	public void onGuiClosed() {
-		InventoryPlayer var1 = this.mc.thePlayer.inventory;
-		if(var1.draggedItemStack != null) {
-			this.mc.thePlayer.dropPlayerItem(var1.draggedItemStack);
-			var1.draggedItemStack = null;
+		InventoryPlayer inventoryPlayer1 = this.mc.thePlayer.inventory;
+		if(inventoryPlayer1.draggedItemStack != null) {
+			this.mc.thePlayer.dropPlayerItem(inventoryPlayer1.draggedItemStack);
+			inventoryPlayer1.draggedItemStack = null;
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/GuiPlayer.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+public class GuiPlayer extends GuiContainer {
+	public void initGui() {
+		this.controlList.clear();
+		this.controlList.add(new GuiSmallButton(0, 0, 0, ""));
+	}
+
+	protected void drawGuiContainerBackgroundLayer(float renderPartialTick) {
+		int i2 = this.mc.renderEngine.getTexture("/gui/guiplayer.png");
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		this.mc.renderEngine.bindTexture(i2);
+		int i3 = (this.width - this.xSize) / 2;
+		int i4 = (this.height - this.ySize) / 2;
+		this.drawTexturedModalRect(i3, i4, 0, 0, this.xSize, this.ySize);
+	}
+}
--- net/minecraft/src/BlockFence.java
+++ net/minecraft/src/BlockFence.java
@@ -3,16 +3,16 @@
 import java.util.ArrayList;
 
 public class BlockFence extends Block {
-	public BlockFence(int var1, int var2) {
-		super(var1, var2, Material.wood);
-	}
-
-	public void getCollidingBoundingBoxes(World var1, int var2, int var3, int var4, AxisAlignedBB var5, ArrayList var6) {
-		var6.add(AxisAlignedBB.getBoundingBoxFromPool((double)var2, (double)var3, (double)var4, (double)(var2 + 1), (double)var3 + 1.5D, (double)(var4 + 1)));
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.getBlockId(var2, var3 - 1, var4) == this.blockID ? false : (!var1.getBlockMaterial(var2, var3 - 1, var4).isSolid() ? false : super.canPlaceBlockAt(var1, var2, var3, var4));
+	public BlockFence(int id, int blockIndex) {
+		super(id, blockIndex, Material.wood);
+	}
+
+	public void getCollidingBoundingBoxes(World world, int x, int y, int z, AxisAlignedBB aabb, ArrayList arrayList, Entity xy) {
+		arrayList.add(AxisAlignedBB.getBoundingBoxFromPool((double)x, (double)y, (double)z, (double)(x + 1), (double)y + 1.5D, (double)(z + 1)));
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.getBlockId(x, y - 1, z) == this.blockID ? false : (!world.getBlockMaterial(x, y - 1, z).isSolid() ? false : super.canPlaceBlockAt(world, x, y, z));
 	}
 
 	public boolean isOpaqueCube() {
--- net/minecraft/src/ThreadSleepForever.java
+++ net/minecraft/src/ThreadSleepForever.java
@@ -5,9 +5,9 @@
 public class ThreadSleepForever extends Thread {
 	final Minecraft mc;
 
-	public ThreadSleepForever(Minecraft var1, String var2) {
-		super(var2);
-		this.mc = var1;
+	public ThreadSleepForever(Minecraft minecraft, String name) {
+		super(name);
+		this.mc = minecraft;
 		this.setDaemon(true);
 		this.start();
 	}
@@ -16,7 +16,7 @@
 		while(this.mc.running) {
 			try {
 				Thread.sleep(2147483647L);
-			} catch (InterruptedException var2) {
+			} catch (InterruptedException interruptedException2) {
 			}
 		}
 
--- net/minecraft/src/Explosion.java
+++ net/minecraft/src/Explosion.java
@@ -3,126 +3,146 @@
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Random;
 
 public class Explosion {
-	public void doExplosion(World var1, Entity var2, double var3, double var5, double var7, float var9) {
-		var1.playSoundEffect(var3, var5, var7, "random.explode", 4.0F, (1.0F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.2F) * 0.7F);
-		HashSet var10 = new HashSet();
-		float var11 = var9;
-		byte var12 = 16;
-
-		int var13;
-		int var14;
-		int var15;
-		double var25;
-		double var27;
-		double var29;
-		for(var13 = 0; var13 < var12; ++var13) {
-			for(var14 = 0; var14 < var12; ++var14) {
-				for(var15 = 0; var15 < var12; ++var15) {
-					if(var13 == 0 || var13 == var12 - 1 || var14 == 0 || var14 == var12 - 1 || var15 == 0 || var15 == var12 - 1) {
-						double var16 = (double)((float)var13 / ((float)var12 - 1.0F) * 2.0F - 1.0F);
-						double var18 = (double)((float)var14 / ((float)var12 - 1.0F) * 2.0F - 1.0F);
-						double var20 = (double)((float)var15 / ((float)var12 - 1.0F) * 2.0F - 1.0F);
-						double var22 = Math.sqrt(var16 * var16 + var18 * var18 + var20 * var20);
-						var16 /= var22;
-						var18 /= var22;
-						var20 /= var22;
-						float var24 = var9 * (0.7F + var1.rand.nextFloat() * 0.6F);
-						var25 = var3;
-						var27 = var5;
-						var29 = var7;
-
-						for(float var31 = 0.3F; var24 > 0.0F; var24 -= var31 * (12.0F / 16.0F)) {
-							int var32 = MathHelper.floor_double(var25);
-							int var33 = MathHelper.floor_double(var27);
-							int var34 = MathHelper.floor_double(var29);
-							int var35 = var1.getBlockId(var32, var33, var34);
-							if(var35 > 0) {
-								var24 -= (Block.blocksList[var35].getExplosionResistance(var2) + 0.3F) * var31;
-							}
-
-							if(var24 > 0.0F) {
-								var10.add(new ChunkPosition(var32, var33, var34));
-							}
-
-							var25 += var16 * (double)var31;
-							var27 += var18 * (double)var31;
-							var29 += var20 * (double)var31;
+	public void doExplosion(World world, Entity entity, double x, double y, double z, float power) {
+		this.func_11007_4ZrtJ8eBO5K7ZvbM8Gw126oo9J029QsI1l4qUTABn1j8Wtu9S1EVeBVuFfIl(world, entity, x, y, z, power, true, -1);
+	}
+
+	public void func_11007_4ZrtJ8eBO5K7ZvbM8Gw126oo9J029QsI1l4qUTABn1j8Wtu9S1EVeBVuFfIl(World vg, Entity xy, double double3, double double4, double double5, float float6, boolean boolean7, int integer) {
+		vg.playSoundEffect(double3, double4, double5, "random.explode", 4.0F, (1.0F + (vg.rand.nextFloat() - vg.rand.nextFloat()) * 0.2F) * 0.7F);
+		HashSet hashSet12 = new HashSet();
+		float f13 = float6;
+		byte b14 = 16;
+		int i15;
+		int i16;
+		int i17;
+		double d18;
+		double d20;
+		double d22;
+		int i25;
+		int i35;
+		int i36;
+		if(boolean7) {
+			for(i15 = 0; i15 < b14; ++i15) {
+				for(i16 = 0; i16 < b14; ++i16) {
+					for(i17 = 0; i17 < b14; ++i17) {
+						if(i15 == 0 || i15 == b14 - 1 || i16 == 0 || i16 == b14 - 1 || i17 == 0 || i17 == b14 - 1) {
+							double d24 = (double)((float)i15 / ((float)b14 - 1.0F) * 2.0F - 1.0F);
+							double d26 = (double)((float)i16 / ((float)b14 - 1.0F) * 2.0F - 1.0F);
+							double d28 = (double)((float)i17 / ((float)b14 - 1.0F) * 2.0F - 1.0F);
+							double d30 = Math.sqrt(d24 * d24 + d26 * d26 + d28 * d28);
+							d24 /= d30;
+							d26 /= d30;
+							d28 /= d30;
+							float f32 = float6 * (0.7F + vg.rand.nextFloat() * 0.6F);
+							d18 = double3;
+							d20 = double4;
+							d22 = double5;
+
+							for(float f33 = 0.3F; f32 > 0.0F; f32 -= f33 * 0.75F) {
+								int i34 = MathHelper.floor_double(d18);
+								i35 = MathHelper.floor_double(d20);
+								i36 = MathHelper.floor_double(d22);
+								int i37 = vg.getBlockId(i34, i35, i36);
+								if(i37 > 0) {
+									f32 -= (Block.blocksList[i37].getExplosionResistance(xy) + 0.3F) * f33;
+								}
+
+								if(f32 > 0.0F) {
+									hashSet12.add(new ChunkPosition(i34, i35, i36));
+								}
+
+								d18 += d24 * (double)f33;
+								d20 += d26 * (double)f33;
+								d22 += d28 * (double)f33;
+							}
 						}
 					}
 				}
 			}
-		}
-
-		var9 *= 2.0F;
-		var13 = MathHelper.floor_double(var3 - (double)var9 - 1.0D);
-		var14 = MathHelper.floor_double(var3 + (double)var9 + 1.0D);
-		var15 = MathHelper.floor_double(var5 - (double)var9 - 1.0D);
-		int var45 = MathHelper.floor_double(var5 + (double)var9 + 1.0D);
-		int var17 = MathHelper.floor_double(var7 - (double)var9 - 1.0D);
-		int var46 = MathHelper.floor_double(var7 + (double)var9 + 1.0D);
-		List var19 = var1.getEntitiesWithinAABBExcludingEntity(var2, AxisAlignedBB.getBoundingBoxFromPool((double)var13, (double)var15, (double)var17, (double)var14, (double)var45, (double)var46));
-		Vec3D var47 = Vec3D.createVector(var3, var5, var7);
-
-		double var55;
-		double var56;
-		double var57;
-		for(int var21 = 0; var21 < var19.size(); ++var21) {
-			Entity var49 = (Entity)var19.get(var21);
-			double var23 = var49.getDistance(var3, var5, var7) / (double)var9;
-			if(var23 <= 1.0D) {
-				var25 = var49.posX - var3;
-				var27 = var49.posY - var5;
-				var29 = var49.posZ - var7;
-				var55 = (double)MathHelper.sqrt_double(var25 * var25 + var27 * var27 + var29 * var29);
-				var25 /= var55;
-				var27 /= var55;
-				var29 /= var55;
-				var56 = (double)var1.getBlockDensity(var47, var49.boundingBox);
-				var57 = (1.0D - var23) * var56;
-				var49.attackEntityFrom(var2, (int)((var57 * var57 + var57) / 2.0D * 8.0D * (double)var9 + 1.0D));
-				var49.motionX += var25 * var57;
-				var49.motionY += var27 * var57;
-				var49.motionZ += var29 * var57;
-			}
-		}
-
-		var9 = var11;
-		ArrayList var48 = new ArrayList();
-		var48.addAll(var10);
-
-		for(int var50 = var48.size() - 1; var50 >= 0; --var50) {
-			ChunkPosition var51 = (ChunkPosition)var48.get(var50);
-			int var52 = var51.x;
-			int var53 = var51.y;
-			int var26 = var51.z;
-			int var54 = var1.getBlockId(var52, var53, var26);
-
-			for(int var28 = 0; var28 < 1; ++var28) {
-				var29 = (double)((float)var52 + var1.rand.nextFloat());
-				var55 = (double)((float)var53 + var1.rand.nextFloat());
-				var56 = (double)((float)var26 + var1.rand.nextFloat());
-				var57 = var29 - var3;
-				double var37 = var55 - var5;
-				double var39 = var56 - var7;
-				double var41 = (double)MathHelper.sqrt_double(var57 * var57 + var37 * var37 + var39 * var39);
-				var57 /= var41;
-				var37 /= var41;
-				var39 /= var41;
-				double var43 = 0.5D / (var41 / (double)var9 + 0.1D);
-				var43 *= (double)(var1.rand.nextFloat() * var1.rand.nextFloat() + 0.3F);
-				var57 *= var43;
-				var37 *= var43;
-				var39 *= var43;
-				var1.spawnParticle("explode", (var29 + var3 * 1.0D) / 2.0D, (var55 + var5 * 1.0D) / 2.0D, (var56 + var7 * 1.0D) / 2.0D, var57, var37, var39);
-				var1.spawnParticle("smoke", var29, var55, var56, var57, var37, var39);
-			}
-
-			if(var54 > 0) {
-				Block.blocksList[var54].dropBlockAsItemWithChance(var1, var52, var53, var26, var1.getBlockMetadata(var52, var53, var26), 0.3F);
-				var1.setBlockWithNotify(var52, var53, var26, 0);
-				Block.blocksList[var54].onBlockDestroyedByExplosion(var1, var52, var53, var26);
+		} else {
+			Random random51 = new Random();
+
+			for(i25 = 0; i25 != 20; ++i25) {
+				vg.spawnParticle("explode", double3 + random51.nextDouble() * 8.0D - 4.0D, double4 + random51.nextDouble() * 2.0D, double5 + random51.nextDouble() * 8.0D - 4.0D, 0.0D, 0.1D, 0.0D);
+				vg.spawnParticle("smoke", double3 + random51.nextDouble() * 8.0D - 4.0D, double4 + random51.nextDouble() * 2.0D, double5 + random51.nextDouble() * 8.0D - 4.0D, 0.0D, 0.1D, 0.0D);
+			}
+		}
+
+		float6 *= 2.0F;
+		i15 = MathHelper.floor_double(double3 - (double)float6 - 1.0D);
+		i16 = MathHelper.floor_double(double3 + (double)float6 + 1.0D);
+		i17 = MathHelper.floor_double(double4 - (double)float6 - 1.0D);
+		int i52 = MathHelper.floor_double(double4 + (double)float6 + 1.0D);
+		i25 = MathHelper.floor_double(double5 - (double)float6 - 1.0D);
+		int i53 = MathHelper.floor_double(double5 + (double)float6 + 1.0D);
+		List list27 = vg.getEntitiesWithinAABBExcludingEntity(xy, AxisAlignedBB.getBoundingBoxFromPool((double)i15, (double)i17, (double)i25, (double)i16, (double)i52, (double)i53));
+		Vec3D vec3D54 = Vec3D.createVector(double3, double4, double5);
+
+		double d29;
+		double d31;
+		double d55;
+		for(i35 = 0; i35 < list27.size(); ++i35) {
+			Entity entity57 = (Entity)list27.get(i35);
+			double d58 = entity57.getDistance(double3, double4, double5) / (double)float6;
+			if(d58 <= 1.0D) {
+				d18 = entity57.posX - double3;
+				d20 = entity57.posY - double4;
+				d22 = entity57.posZ - double5;
+				d29 = (double)MathHelper.sqrt_double(d18 * d18 + d20 * d20 + d22 * d22);
+				d18 /= d29;
+				d20 /= d29;
+				d22 /= d29;
+				d31 = (double)vg.getBlockDensity(vec3D54, entity57.boundingBox);
+				d55 = (1.0D - d58) * d31;
+				if(integer == -1) {
+					entity57.attackEntityFrom(xy, (int)((d55 * d55 + d55) / 2.0D * 8.0D * (double)float6 + 1.0D));
+				} else {
+					entity57.attackEntityFrom(xy, integer);
+				}
+
+				entity57.motionX += d18 * d55;
+				entity57.motionY += d20 * d55;
+				entity57.motionZ += d22 * d55;
+			}
+		}
+
+		float6 = f13;
+		ArrayList arrayList56 = new ArrayList(hashSet12);
+
+		for(i36 = arrayList56.size() - 1; i36 >= 0; --i36) {
+			ChunkPosition chunkPosition59 = (ChunkPosition)arrayList56.get(i36);
+			int i38 = chunkPosition59.x;
+			int i39 = chunkPosition59.y;
+			int i40 = chunkPosition59.z;
+			int i41 = vg.getBlockId(i38, i39, i40);
+
+			for(int i42 = 0; i42 < 1; ++i42) {
+				d22 = (double)((float)i38 + vg.rand.nextFloat());
+				d29 = (double)((float)i39 + vg.rand.nextFloat());
+				d31 = (double)((float)i40 + vg.rand.nextFloat());
+				d55 = d22 - double3;
+				double d43 = d29 - double4;
+				double d45 = d31 - double5;
+				double d47 = (double)MathHelper.sqrt_double(d55 * d55 + d43 * d43 + d45 * d45);
+				d55 /= d47;
+				d43 /= d47;
+				d45 /= d47;
+				double d49 = 0.5D / (d47 / (double)float6 + 0.1D);
+				d49 *= (double)(vg.rand.nextFloat() * vg.rand.nextFloat() + 0.3F);
+				d55 *= d49;
+				d43 *= d49;
+				d45 *= d49;
+				vg.spawnParticle("explode", (d22 + double3 * 1.0D) / 2.0D, (d29 + double4 * 1.0D) / 2.0D, (d31 + double5 * 1.0D) / 2.0D, d55, d43, d45);
+				vg.spawnParticle("smoke", d22, d29, d31, d55, d43, d45);
+			}
+
+			if(i41 > 0) {
+				Block.blocksList[i41].dropBlockAsItemWithChance(vg, i38, i39, i40, vg.getBlockMetadata(i38, i39, i40), 0.3F);
+				vg.setBlockWithNotify(i38, i39, i40, 0);
+				Block.blocksList[i41].onBlockDestroyedByExplosion(vg, i38, i39, i40);
 			}
 		}
 
--- net/minecraft/src/NoiseGeneratorOctaves.java
+++ net/minecraft/src/NoiseGeneratorOctaves.java
@@ -4,46 +4,46 @@
 
 public class NoiseGeneratorOctaves extends NoiseGenerator {
 	private NoiseGeneratorPerlin[] generatorCollection;
-	private int octaves;
-
-	public NoiseGeneratorOctaves(Random var1, int var2) {
-		this.octaves = var2;
-		this.generatorCollection = new NoiseGeneratorPerlin[var2];
-
-		for(int var3 = 0; var3 < var2; ++var3) {
-			this.generatorCollection[var3] = new NoiseGeneratorPerlin(var1);
-		}
-
-	}
-
-	public double generateNoiseOctaves(double var1, double var3) {
-		double var5 = 0.0D;
-		double var7 = 1.0D;
-
-		for(int var9 = 0; var9 < this.octaves; ++var9) {
-			var5 += this.generatorCollection[var9].generateNoise(var1 * var7, var3 * var7) / var7;
-			var7 /= 2.0D;
-		}
-
-		return var5;
-	}
-
-	public double[] generateNoiseOctaves(double[] var1, double var2, double var4, double var6, int var8, int var9, int var10, double var11, double var13, double var15) {
-		if(var1 == null) {
-			var1 = new double[var8 * var9 * var10];
+	private final int octaves;
+
+	public NoiseGeneratorOctaves(Random random, int octaves) {
+		this.octaves = octaves;
+		this.generatorCollection = new NoiseGeneratorPerlin[octaves];
+
+		for(int i3 = 0; i3 < octaves; ++i3) {
+			this.generatorCollection[i3] = new NoiseGeneratorPerlin(random);
+		}
+
+	}
+
+	public double generateNoiseOctaves(double x, double z) {
+		double d5 = 0.0D;
+		double d7 = 1.0D;
+
+		for(int i9 = 0; i9 < this.octaves; ++i9) {
+			d5 += this.generatorCollection[i9].generateNoise(x * d7, z * d7) / d7;
+			d7 /= 2.0D;
+		}
+
+		return d5;
+	}
+
+	public double[] generateNoiseOctaves(double[] data, double double2, double double3, double double4, int x, int y, int z, double double8, double double9, double double10) {
+		if(data == null) {
+			data = new double[x * y * z];
 		} else {
-			for(int var17 = 0; var17 < var1.length; ++var17) {
-				var1[var17] = 0.0D;
+			for(int i17 = 0; i17 < data.length; ++i17) {
+				data[i17] = 0.0D;
 			}
 		}
 
-		double var20 = 1.0D;
+		double d20 = 1.0D;
 
-		for(int var19 = 0; var19 < this.octaves; ++var19) {
-			this.generatorCollection[var19].populateNoiseArray(var1, var2, var4, var6, var8, var9, var10, var11 * var20, var13 * var20, var15 * var20, var20);
-			var20 /= 2.0D;
+		for(int i19 = 0; i19 < this.octaves; ++i19) {
+			this.generatorCollection[i19].populateNoiseArray(data, double2, double3, double4, x, y, z, double8 * d20, double9 * d20, double10 * d20, d20);
+			d20 /= 2.0D;
 		}
 
-		return var1;
+		return data;
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandStopdemo.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+class CommandStopdemo extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8559_91sofwz6wkc60aZu9JnnxWL2Vk0hQo6z0q0gbJb82Zb2S34ygaC4LxL05C5H;
+    
+    CommandStopdemo(final CommandManager abb) {
+        this.field_8559_91sofwz6wkc60aZu9JnnxWL2Vk0hQo6z0q0gbJb82Zb2S34ygaC4LxL05C5H = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL.func_12204_8r9RTHlpJjIj8rv8a68Pq9g6006yw2MZ4W4u9N9p23i9532c8WU7ByApxh50();
+        System.out.println("Demo record finished, " + InputHandler.field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL.field_12210_1g5X6A25jcG50Z3d47g1ufx5qZuFNya14hd6OpQ6a42pd2RKbHZAqAO16G5P.size() + " frames");
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/BlockGrassOld.java
@@ -1,0 +1,44 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockGrassOld extends BlockOld {
+	protected BlockGrassOld(int integer) {
+		super(integer, Material.grass);
+		this.blockIndexInTexture = 3;
+		this.setTickOnLoad(true);
+	}
+
+	public int getBlockTexture(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		if(integer5 == 1) {
+			return 0;
+		} else if(integer5 == 0) {
+			return 2;
+		} else {
+			Material material6 = abt.getBlockMaterial(integer2, integer3 + 1, integer4);
+			return material6 != Material.snow && material6 != Material.craftedSnow ? 3 : 68;
+		}
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(vg.getBlockLightValue(integer2, integer3 + 1, integer4) < 4 && vg.getBlockMaterial(integer2, integer3 + 1, integer4).getCanBlockGrass()) {
+			if(random.nextInt(4) != 0) {
+				return;
+			}
+
+			vg.setBlockWithNotify(integer2, integer3, integer4, BlockOld.dirt.blockID);
+		} else if(vg.getBlockLightValue(integer2, integer3 + 1, integer4) >= 9) {
+			int i6 = integer2 + random.nextInt(3) - 1;
+			int i7 = integer3 + random.nextInt(5) - 3;
+			int i8 = integer4 + random.nextInt(3) - 1;
+			if(vg.getBlockId(i6, i7, i8) == BlockOld.dirt.blockID && vg.getBlockLightValue(i6, i7 + 1, i8) >= 4 && !vg.getBlockMaterial(i6, i7 + 1, i8).getCanBlockGrass()) {
+				vg.setBlockWithNotify(i6, i7, i8, BlockOld.grass.blockID);
+			}
+		}
+
+	}
+
+	public int idDropped(int integer, Random random) {
+		return BlockOld.dirt.idDropped(0, random);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockGrassTall.java
@@ -1,0 +1,33 @@
+package net.minecraft.src;
+
+public class BlockGrassTall extends BlockFlower {
+	int field_8361_9xg75975dD6A4d9T5oI8tGF0oWpQ42zz2ef0y7RQs41s83hqjse1ISW95Na6;
+
+	public BlockGrassTall(int integer1, int integer2, int integer3) {
+		super(integer1, integer2);
+		this.field_8361_9xg75975dD6A4d9T5oI8tGF0oWpQ42zz2ef0y7RQs41s83hqjse1ISW95Na6 = integer3;
+	}
+
+	public int func_8086_562a2lhwZKvA2q1SYRkk6a3ib277RkRI785Nc3EOo7NAF01ZLdp6C8534NoH(IBlockAccess abt, int integer2, int integer3, double double4, double double5, double double6) {
+		if(!ScreenDebugMenu.field_7964_8G80Kimsj2t150ZuEHxk97V3fSV455qzurOOVWgX8oTDDCEH9YV34z9vRAoC) {
+			if(abt == null) {
+				return this.blockIndexInTexture;
+			} else {
+				WorldGenMyconUnknownClass worldGenMyconUnknownClass10 = abt.func_7342_9805301CWs03An9555qIw883P54dcq9802DkM5DuquNweM1NH26RH6oP02mr().func_10185_7j1lR4019pucW00n7wn38afjBd62vEMB6B6SVB9068f4kyPzw4E6wI65ufr8((int)double4, (int)double6, EnumWorldGenerator.SURFACE);
+				if(worldGenMyconUnknownClass10 != null) {
+					switch(worldGenMyconUnknownClass10.func_9983_8WfOXonA2bRS7hUpHd7sbe7k20yqj7N6OH13GX3XXy71V13Eva115wQwe47C()) {
+					case 1:
+					case 2:
+						return this.field_8361_9xg75975dD6A4d9T5oI8tGF0oWpQ42zz2ef0y7RQs41s83hqjse1ISW95Na6;
+					default:
+						return this.blockIndexInTexture;
+					}
+				} else {
+					return this.blockIndexInTexture;
+				}
+			}
+		} else {
+			return this.blockIndexInTexture;
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/EssenceTransformResult.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+public class EssenceTransformResult implements IInventory {
+	public ItemStack[] stackResult = new ItemStack[2];
+
+	public int getSizeInventory() {
+		return 1;
+	}
+
+	public ItemStack getStackInSlot(int slot) {
+		return this.stackResult[slot];
+	}
+
+	public String getInvName() {
+		return "Result";
+	}
+
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.stackResult[slot] != null) {
+			ItemStack itemStack3 = this.stackResult[slot];
+			this.stackResult[slot] = null;
+			return itemStack3;
+		} else {
+			return null;
+		}
+	}
+
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.stackResult[slot] = itemStack;
+	}
+
+	public int getInventoryStackLimit() {
+		return 64;
+	}
+
+	public void onInventoryChanged() {
+	}
+}
--- net/minecraft/src/Packet18ArmAnimation.java
+++ net/minecraft/src/Packet18ArmAnimation.java
@@ -11,23 +11,23 @@
 	public Packet18ArmAnimation() {
 	}
 
-	public Packet18ArmAnimation(Entity var1, int var2) {
-		this.entityId = var1.entityID;
-		this.animate = var2;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.animate = var1.readByte();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeByte(this.animate);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleArmAnimation(this);
+	public Packet18ArmAnimation(Entity entity, int animate) {
+		this.entityId = entity.entityID;
+		this.animate = animate;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.animate = dataInputStream.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeByte(this.animate);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleArmAnimation(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/EntityFX.java
+++ net/minecraft/src/EntityFX.java
@@ -15,20 +15,20 @@
 	public static double interpPosY;
 	public static double interpPosZ;
 
-	public EntityFX(World var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-		super(var1);
+	public EntityFX(World worldObj, double x, double y, double z, double motionX, double motionY, double motionZ) {
+		super(worldObj);
 		this.setSize(0.2F, 0.2F);
 		this.yOffset = this.height / 2.0F;
-		this.setPosition(var2, var4, var6);
+		this.setPosition(x, y, z);
 		this.particleRed = this.particleGreen = this.particleBlue = 1.0F;
-		this.motionX = var8 + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.4F);
-		this.motionY = var10 + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.4F);
-		this.motionZ = var12 + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.4F);
-		float var14 = (float)(Math.random() + Math.random() + 1.0D) * 0.15F;
-		float var15 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
-		this.motionX = this.motionX / (double)var15 * (double)var14 * (double)0.4F;
-		this.motionY = this.motionY / (double)var15 * (double)var14 * (double)0.4F + (double)0.1F;
-		this.motionZ = this.motionZ / (double)var15 * (double)var14 * (double)0.4F;
+		this.motionX = motionX + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.4F);
+		this.motionY = motionY + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.4F);
+		this.motionZ = motionZ + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.4F);
+		float f14 = (float)(Math.random() + Math.random() + 1.0D) * 0.15F;
+		float f15 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
+		this.motionX = this.motionX / (double)f15 * (double)f14 * (double)0.4F;
+		this.motionY = this.motionY / (double)f15 * (double)f14 * (double)0.4F + (double)0.1F;
+		this.motionZ = this.motionZ / (double)f15 * (double)f14 * (double)0.4F;
 		this.particleTextureJitterX = this.rand.nextFloat() * 3.0F;
 		this.particleTextureJitterY = this.rand.nextFloat() * 3.0F;
 		this.particleScale = (this.rand.nextFloat() * 0.5F + 0.5F) * 2.0F;
@@ -37,16 +37,16 @@
 		this.canTriggerWalking = false;
 	}
 
-	public EntityFX multiplyVelocity(float var1) {
-		this.motionX *= (double)var1;
-		this.motionY = (this.motionY - (double)0.1F) * (double)var1 + (double)0.1F;
-		this.motionZ *= (double)var1;
+	public EntityFX multiplyVelocity(float velocityMultiplier) {
+		this.motionX *= (double)velocityMultiplier;
+		this.motionY = (this.motionY - (double)0.1F) * (double)velocityMultiplier + (double)0.1F;
+		this.motionZ *= (double)velocityMultiplier;
 		return this;
 	}
 
-	public EntityFX multipleParticleScaleBy(float var1) {
-		this.setSize(0.2F * var1, 0.2F * var1);
-		this.particleScale *= var1;
+	public EntityFX multipleParticleScaleBy(float particleScaleMultiplier) {
+		this.setSize(0.2F * particleScaleMultiplier, 0.2F * particleScaleMultiplier);
+		this.particleScale *= particleScaleMultiplier;
 		return this;
 	}
 
@@ -70,30 +70,30 @@
 
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		float var8 = (float)(this.particleTextureIndex % 16) / 16.0F;
-		float var9 = var8 + 0.999F / 16.0F;
-		float var10 = (float)(this.particleTextureIndex / 16) / 16.0F;
-		float var11 = var10 + 0.999F / 16.0F;
-		float var12 = 0.1F * this.particleScale;
-		float var13 = (float)(this.prevPosX + (this.posX - this.prevPosX) * (double)var2 - interpPosX);
-		float var14 = (float)(this.prevPosY + (this.posY - this.prevPosY) * (double)var2 - interpPosY);
-		float var15 = (float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)var2 - interpPosZ);
-		float var16 = this.getBrightness(var2);
-		var1.setColorOpaque_F(this.particleRed * var16, this.particleGreen * var16, this.particleBlue * var16);
-		var1.addVertexWithUV((double)(var13 - var3 * var12 - var6 * var12), (double)(var14 - var4 * var12), (double)(var15 - var5 * var12 - var7 * var12), (double)var8, (double)var11);
-		var1.addVertexWithUV((double)(var13 - var3 * var12 + var6 * var12), (double)(var14 + var4 * var12), (double)(var15 - var5 * var12 + var7 * var12), (double)var8, (double)var10);
-		var1.addVertexWithUV((double)(var13 + var3 * var12 + var6 * var12), (double)(var14 + var4 * var12), (double)(var15 + var5 * var12 + var7 * var12), (double)var9, (double)var10);
-		var1.addVertexWithUV((double)(var13 + var3 * var12 - var6 * var12), (double)(var14 - var4 * var12), (double)(var15 + var5 * var12 - var7 * var12), (double)var9, (double)var11);
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		float f8 = (float)(this.particleTextureIndex % 16) / 16.0F;
+		float f9 = f8 + 0.0624375F;
+		float f10 = (float)(this.particleTextureIndex / 16) / 16.0F;
+		float f11 = f10 + 0.0624375F;
+		float f12 = 0.1F * this.particleScale;
+		float f13 = (float)(this.prevPosX + (this.posX - this.prevPosX) * (double)renderPartialTick - interpPosX);
+		float f14 = (float)(this.prevPosY + (this.posY - this.prevPosY) * (double)renderPartialTick - interpPosY);
+		float f15 = (float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)renderPartialTick - interpPosZ);
+		float f16 = this.getBrightness(renderPartialTick);
+		tessellator.setColorOpaque_F(this.particleRed * f16, this.particleGreen * f16, this.particleBlue * f16);
+		tessellator.addVertexWithUV((double)(f13 - xOffset * f12 - xOffset2 * f12), (double)(f14 - yOffset * f12), (double)(f15 - zOffset * f12 - zOffset2 * f12), (double)f8, (double)f11);
+		tessellator.addVertexWithUV((double)(f13 - xOffset * f12 + xOffset2 * f12), (double)(f14 + yOffset * f12), (double)(f15 - zOffset * f12 + zOffset2 * f12), (double)f8, (double)f10);
+		tessellator.addVertexWithUV((double)(f13 + xOffset * f12 + xOffset2 * f12), (double)(f14 + yOffset * f12), (double)(f15 + zOffset * f12 + zOffset2 * f12), (double)f9, (double)f10);
+		tessellator.addVertexWithUV((double)(f13 + xOffset * f12 - xOffset2 * f12), (double)(f14 - yOffset * f12), (double)(f15 + zOffset * f12 - zOffset2 * f12), (double)f9, (double)f11);
 	}
 
 	public int getFXLayer() {
 		return 0;
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
 	}
 }
--- net/minecraft/src/BlockBreakable.java
+++ net/minecraft/src/BlockBreakable.java
@@ -3,17 +3,17 @@
 public class BlockBreakable extends Block {
 	private boolean localFlag;
 
-	protected BlockBreakable(int var1, int var2, Material var3, boolean var4) {
-		super(var1, var2, var3);
-		this.localFlag = var4;
+	protected BlockBreakable(int id, int blockIndex, Material material, boolean localFlag) {
+		super(id, blockIndex, material);
+		this.localFlag = localFlag;
 	}
 
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockId(var2, var3, var4);
-		return !this.localFlag && var6 == this.blockID ? false : super.shouldSideBeRendered(var1, var2, var3, var4, var5);
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		int i6 = blockAccess.getBlockId(x, y, z);
+		return !this.localFlag && i6 == this.blockID ? false : super.shouldSideBeRendered(blockAccess, x, y, z, side);
 	}
 }
--- /dev/null
+++ net/minecraft/src/EntityGiantBoss.java
@@ -1,0 +1,88 @@
+package net.minecraft.src;
+
+public class EntityGiantBoss extends EntityMob {
+	public int maxHP = -1;
+
+	public EntityGiantBoss(World world) {
+		super(world);
+		this.texture = "/mob/collosal_a.png";
+		this.moveSpeed = 0.5F;
+		this.attackStrength = 50;
+		this.yOffset *= 6.0F;
+		this.setSize(this.width * 6.0F, this.height * 6.0F);
+		ExtEvents.bossfightInProgress = true;
+		ExtEvents.bossRef = this;
+		ExtEvents.bossname = "Dormant Giant";
+	}
+
+	public EntityGiantBoss(World vg, int integer) {
+		super(vg);
+		if(integer <= 0) {
+			integer = 1;
+		}
+
+		this.texture = "/mob/collosal_a.png";
+		this.moveSpeed = 0.5F;
+		this.attackStrength = 50;
+		this.health *= Math.min(4 * integer, 800);
+		this.maxHP = this.health;
+		this.yOffset *= 6.0F;
+		this.setSize(this.width * 6.0F, this.height * 6.0F);
+	}
+
+	protected float getBlockPathWeight(int x, int y, int z) {
+		return this.worldObj.getBrightness(x, y, z) - 0.5F;
+	}
+
+	protected void fall(float distance) {
+	}
+
+	protected String getLivingSound() {
+		return "ext.giantambient";
+	}
+
+	protected String getHurtSound() {
+		return "ext.gianthurt";
+	}
+
+	protected String getDeathSound() {
+		return "ext.giantdead";
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setString("BossName", ExtEvents.bossname);
+		nbttagcompound.setInteger("BossMaxHP", this.maxHP);
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		ExtEvents.bossname = nbttagcompound.getString("BossName");
+		this.maxHP = nbttagcompound.getInteger("BossMaxHP");
+		super.readEntityFromNBT(nbttagcompound);
+	}
+
+	public void onDeath(Entity entity) {
+		ExtEvents.GiantBossKilled(this);
+		super.onDeath(entity);
+		if(this.rand.nextInt(50) > 10) {
+			this.dropItem(ExtItems.flameberge.shiftedIndex, 1);
+		}
+
+	}
+
+	public void onLivingUpdate() {
+		super.onLivingUpdate();
+		if(this.maxHP == -1) {
+			this.maxHP = this.health;
+		}
+
+	}
+
+	public void setEntityDead() {
+		super.setEntityDead();
+	}
+
+	public int getEssenceDroppedOnKill() {
+		return 36 + this.rand.nextInt(12);
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandRTexfx.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+class CommandRTexfx extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8594_6C5Y0Xsr1Y4sJ2Hn6O2sb6Rgh4UTk4H5WQR40NtsM52j9819141C8ZTs5hv0;
+    
+    CommandRTexfx(final CommandManager abb) {
+        this.field_8594_6C5Y0Xsr1Y4sJ2Hn6O2sb6Rgh4UTk4H5WQR40NtsM52j9819141C8ZTs5hv0 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        Minecraft.field_7307_8AX67fsnsj54328J9e6FiY9333555Xj726t2182u3TBB948QMZsZX2iz02iv = ((int)arr[0] == 1);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return Minecraft.field_7307_8AX67fsnsj54328J9e6FiY9333555Xj726t2182u3TBB948QMZsZX2iz02iv ? "1" : "0";
+    }
+}
--- /dev/null
+++ net/minecraft/src/Packet202SecureChatEcho.java
@@ -1,0 +1,55 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet202SecureChatEcho extends Packet3Chat {
+	public boolean verified = false;
+	public int secID = -1;
+	public int offset = 0;
+	String signature = "";
+
+	public Packet202SecureChatEcho() {
+	}
+
+	public Packet202SecureChatEcho(String string1, int integer2, int integer3, String string4) {
+		this.secID = integer2;
+		this.message = string1;
+		this.offset = integer3;
+		this.signature = string4;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.secID = dataInputStream.readInt();
+		this.offset = dataInputStream.readInt();
+		this.message = dataInputStream.readUTF();
+		this.signature = dataInputStream.readUTF();
+
+		try {
+			this.verified = CertUtils.verify(this.secID + "" + this.message.substring(this.offset), this.signature);
+		} catch (Exception exception3) {
+			exception3.printStackTrace();
+		}
+
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.secID);
+		dataOutputStream.writeInt(this.offset);
+		dataOutputStream.writeUTF(this.message);
+		dataOutputStream.writeUTF(this.signature);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		if(!this.verified) {
+			ExtLogger.i("[SecureChatEcho] INVALID SIGNATURE.");
+		}
+
+		netHandler.handleChat(this);
+	}
+
+	public int getPacketSize() {
+		return this.message.length() + this.signature.length() + 4 + 4;
+	}
+}
--- /dev/null
+++ net/minecraft/src/Packet201SecureChat.java
@@ -1,0 +1,59 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet201SecureChat extends Packet3Chat {
+	public boolean verified = false;
+	public int secID = -1;
+	public String signature = "";
+
+	public Packet201SecureChat() {
+	}
+
+	public Packet201SecureChat(String string, int integer) {
+		this.secID = integer;
+		this.message = string;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.secID = dataInputStream.readInt();
+		this.message = dataInputStream.readUTF();
+		this.signature = dataInputStream.readUTF();
+
+		try {
+			this.verified = CertUtils.verify(this.secID + "" + this.message, this.signature);
+		} catch (Exception exception3) {
+			exception3.printStackTrace();
+		}
+
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.secID);
+		dataOutputStream.writeUTF(this.message);
+
+		try {
+			this.signature = CertUtils.sign(this.secID + "" + this.message, CertUtils.loadedPrivKey);
+			dataOutputStream.writeUTF(this.signature);
+		} catch (Exception exception3) {
+			exception3.printStackTrace();
+		}
+
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		if(this.verified) {
+			ExtLogger.i("[SecureChat] valid");
+			netHandler.handleChat(this);
+		} else {
+			ExtLogger.i("[SecureChat] RESPONSE");
+		}
+
+	}
+
+	public int getPacketSize() {
+		return this.message.length() + this.signature.length() + 4;
+	}
+}
--- net/minecraft/src/ItemSoup.java
+++ net/minecraft/src/ItemSoup.java
@@ -1,12 +1,12 @@
 package net.minecraft.src;
 
 public class ItemSoup extends ItemFood {
-	public ItemSoup(int var1, int var2) {
-		super(var1, var2);
+	public ItemSoup(int itemID, int healAmount) {
+		super(itemID, healAmount);
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		super.onItemRightClick(var1, var2, var3);
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		super.onItemRightClick(itemStack, worldObj, entityPlayer);
 		return new ItemStack(Item.bowlEmpty);
 	}
 }
--- net/minecraft/src/RenderLiving.java
+++ net/minecraft/src/RenderLiving.java
@@ -7,98 +7,126 @@
 	protected ModelBase mainModel;
 	protected ModelBase renderPassModel;
 
-	public RenderLiving(ModelBase var1, float var2) {
-		this.mainModel = var1;
-		this.shadowSize = var2;
-	}
-
-	public void setRenderPassModel(ModelBase var1) {
-		this.renderPassModel = var1;
-	}
-
-	public void doRenderLiving(EntityLiving var1, double var2, double var4, double var6, float var8, float var9) {
+	public RenderLiving(ModelBase yi, float float2) {
+		this.mainModel = yi;
+		this.shadowSize = float2;
+	}
+
+	public void setRenderPassModel(ModelBase yi) {
+		this.renderPassModel = yi;
+	}
+
+	public void ApplyRotations(EntityLiving zi) {
+	}
+
+	public float GetRotationRad(float float1) {
+		float f2 = float1 * 1.6F;
+		f2 = MathHelper.sqrt_float(f2);
+		if(f2 > 1.0F) {
+			f2 = 1.0F;
+		}
+
+		return f2;
+	}
+
+	public float getLimbSwing(EntityLiving zi, float float2) {
+		return zi.limbSwing - zi.limbYaw * (1.0F - float2);
+	}
+
+	public void doRenderLiving(EntityLiving zi, double double2, double double3, double double4, float float5, float float6) {
 		GL11.glPushMatrix();
 		GL11.glDisable(GL11.GL_CULL_FACE);
-		this.mainModel.swingProgress = this.renderSwingProgress(var1, var9);
-		this.mainModel.isRiding = var1.ridingEntity != null;
+		this.mainModel.swingProgress = this.renderSwingProgress(zi, float6);
+		this.mainModel.isRiding = zi.ridingEntity != null;
 		if(this.renderPassModel != null) {
 			this.renderPassModel.isRiding = this.mainModel.isRiding;
 		}
 
 		try {
-			float var10 = var1.prevRenderYawOffset + (var1.renderYawOffset - var1.prevRenderYawOffset) * var9;
-			float var11 = var1.prevRotationYaw + (var1.rotationYaw - var1.prevRotationYaw) * var9;
-			float var12 = var1.prevRotationPitch + (var1.rotationPitch - var1.prevRotationPitch) * var9;
-			GL11.glTranslatef((float)var2, (float)var4, (float)var6);
-			float var13 = this.handleRotationFloat(var1, var9);
-			GL11.glRotatef(180.0F - var10, 0.0F, 1.0F, 0.0F);
-			float var14;
-			if(var1.deathTime > 0) {
-				var14 = ((float)var1.deathTime + var9 - 1.0F) / 20.0F * 1.6F;
-				var14 = MathHelper.sqrt_float(var14);
-				if(var14 > 1.0F) {
-					var14 = 1.0F;
+			float f10 = zi.prevRenderYawOffset + (zi.renderYawOffset - zi.prevRenderYawOffset) * float6;
+			float f11 = zi.prevRotationYaw + (zi.rotationYaw - zi.prevRotationYaw) * float6;
+			float f12 = zi.prevRotationPitch + (zi.rotationPitch - zi.prevRotationPitch) * float6;
+			GL11.glTranslatef((float)double2, (float)double3, (float)double4);
+			float f13 = this.handleRotationFloat(zi, float6);
+			GL11.glRotatef(180.0F - f10, 0.0F, 1.0F, 0.0F);
+			this.ApplyRotations(zi);
+			float f14;
+			if(zi.deathTime > 0) {
+				f14 = ((float)zi.deathTime + float6 - 1.0F) / 20.0F * 1.6F;
+				f14 = MathHelper.sqrt_float(f14);
+				if(f14 > 1.0F) {
+					f14 = 1.0F;
 				}
 
-				GL11.glRotatef(var14 * this.getDeathMaxRotation(var1), 0.0F, 0.0F, 1.0F);
+				GL11.glRotatef(f14 * this.getDeathMaxRotation(zi), 0.0F, 0.0F, 1.0F);
 			}
 
-			var14 = 1.0F / 16.0F;
+			f14 = 0.0625F;
 			GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 			GL11.glScalef(-1.0F, -1.0F, 1.0F);
-			this.preRenderCallback(var1, var9);
-			GL11.glTranslatef(0.0F, -24.0F * var14 - 0.0078125F, 0.0F);
-			float var15 = var1.prevLimbYaw + (var1.limbYaw - var1.prevLimbYaw) * var9;
-			float var16 = var1.limbSwing - var1.limbYaw * (1.0F - var9);
-			if(var15 > 1.0F) {
-				var15 = 1.0F;
-			}
-
-			this.loadDownloadableImageTexture(var1.skinUrl, var1.getTexture());
+			this.preRenderCallback(zi, float6);
+			GL11.glTranslatef(0.0F, -24.0F * f14 - 0.0078125F, 0.0F);
+			float f15 = this.getLimbAnimMaxMovement(zi, float6);
+			float f16 = this.getLimbSwing(zi, float6);
+			if(f15 > 1.0F) {
+				f15 = 1.0F;
+			}
+
+			ImageHolder imageHolder17 = this.loadDownloadableImageTexture(zi.skinUrl, zi.getTexture());
+			if(zi instanceof EntityPlayer) {
+				((EntityPlayer)zi).playerSkin = imageHolder17;
+			}
+
 			GL11.glEnable(GL11.GL_ALPHA_TEST);
-			this.mainModel.render(var16, var15, var13, var11 - var10, var12, var14);
-
-			for(int var17 = 0; var17 < 4; ++var17) {
-				if(this.shouldRenderPass(var1, var17)) {
-					this.renderPassModel.render(var16, var15, var13, var11 - var10, var12, var14);
+			if(zi instanceof EntityOtherPlayerMPUnknownClass && zi.worldObj instanceof FreerunWorld) {
+				GL11.glEnable(GL11.GL_BLEND);
+				GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+				GL11.glColor4f(1.0F, 1.0F, 1.0F, 0.4F);
+			}
+
+			this.mainModel.render(f16, f15, f13, f11 - f10, f12, f14);
+
+			for(int i18 = 0; i18 < 4; ++i18) {
+				if(this.shouldRenderPass(zi, i18)) {
+					this.renderPassModel.render(f16, f15, f13, f11 - f10, f12, f14);
 					GL11.glDisable(GL11.GL_BLEND);
 					GL11.glEnable(GL11.GL_ALPHA_TEST);
 				}
 			}
 
-			this.renderEquippedItems(var1, var9);
-			float var25 = var1.getBrightness(var9);
-			int var18 = this.getColorMultiplier(var1, var25, var9);
-			if((var18 >> 24 & 255) > 0 || var1.hurtTime > 0 || var1.deathTime > 0) {
+			this.renderEquippedItems(zi, float6);
+			float f26 = zi.getBrightness(float6);
+			int i19 = this.getColorMultiplier(zi, f26, float6);
+			if((i19 >> 24 & 255) > 0 || zi.hurtTime > 0 || zi.deathTime > 0) {
 				GL11.glDisable(GL11.GL_TEXTURE_2D);
 				GL11.glDisable(GL11.GL_ALPHA_TEST);
 				GL11.glEnable(GL11.GL_BLEND);
 				GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 				GL11.glDepthFunc(GL11.GL_EQUAL);
-				if(var1.hurtTime > 0 || var1.deathTime > 0) {
-					GL11.glColor4f(var25, 0.0F, 0.0F, 0.4F);
-					this.mainModel.render(var16, var15, var13, var11 - var10, var12, var14);
+				if(zi.hurtTime > 0 || zi.deathTime > 0) {
+					GL11.glColor4f(f26, 0.0F, 0.0F, 0.4F);
+					this.mainModel.render(f16, f15, f13, f11 - f10, f12, f14);
 
-					for(int var19 = 0; var19 < 4; ++var19) {
-						if(this.shouldRenderPass(var1, var19)) {
-							GL11.glColor4f(var25, 0.0F, 0.0F, 0.4F);
-							this.renderPassModel.render(var16, var15, var13, var11 - var10, var12, var14);
+					for(int i20 = 0; i20 < 4; ++i20) {
+						if(this.shouldRenderPass(zi, i20)) {
+							GL11.glColor4f(f26, 0.0F, 0.0F, 0.4F);
+							this.renderPassModel.render(f16, f15, f13, f11 - f10, f12, f14);
 						}
 					}
 				}
 
-				if((var18 >> 24 & 255) > 0) {
-					float var26 = (float)(var18 >> 16 & 255) / 255.0F;
-					float var20 = (float)(var18 >> 8 & 255) / 255.0F;
-					float var21 = (float)(var18 & 255) / 255.0F;
-					float var22 = (float)(var18 >> 24 & 255) / 255.0F;
-					GL11.glColor4f(var26, var20, var21, var22);
-					this.mainModel.render(var16, var15, var13, var11 - var10, var12, var14);
+				if((i19 >> 24 & 255) > 0) {
+					float f27 = (float)(i19 >> 16 & 255) / 255.0F;
+					float f21 = (float)(i19 >> 8 & 255) / 255.0F;
+					float f22 = (float)(i19 & 255) / 255.0F;
+					float f23 = (float)(i19 >> 24 & 255) / 255.0F;
+					GL11.glColor4f(f27, f21, f22, f23);
+					this.mainModel.render(f16, f15, f13, f11 - f10, f12, f14);
 
-					for(int var23 = 0; var23 < 4; ++var23) {
-						if(this.shouldRenderPass(var1, var23)) {
-							GL11.glColor4f(var26, var20, var21, var22);
-							this.renderPassModel.render(var16, var15, var13, var11 - var10, var12, var14);
+					for(int i24 = 0; i24 < 4; ++i24) {
+						if(this.shouldRenderPass(zi, i24)) {
+							GL11.glColor4f(f27, f21, f22, f23);
+							this.renderPassModel.render(f16, f15, f13, f11 - f10, f12, f14);
 						}
 					}
 				}
@@ -110,41 +138,45 @@
 			}
 
 			GL11.glDisable(GL12.GL_RESCALE_NORMAL);
-		} catch (Exception var24) {
-			var24.printStackTrace();
+		} catch (Exception exception25) {
+			exception25.printStackTrace();
 		}
 
 		GL11.glEnable(GL11.GL_CULL_FACE);
 		GL11.glPopMatrix();
 	}
 
-	protected float renderSwingProgress(EntityLiving var1, float var2) {
-		return var1.getSwingProgress(var2);
-	}
-
-	protected float handleRotationFloat(EntityLiving var1, float var2) {
-		return (float)var1.ticksExisted + var2;
-	}
-
-	protected void renderEquippedItems(EntityLiving var1, float var2) {
-	}
-
-	protected boolean shouldRenderPass(EntityLiving var1, int var2) {
+	public float getLimbAnimMaxMovement(EntityLiving zi, float float2) {
+		return zi.prevLimbYaw + (zi.limbYaw - zi.prevLimbYaw) * float2;
+	}
+
+	protected float renderSwingProgress(EntityLiving zi, float float2) {
+		return zi.getSwingProgress(float2);
+	}
+
+	protected float handleRotationFloat(EntityLiving zi, float float2) {
+		return (float)zi.ticksExisted + float2;
+	}
+
+	protected void renderEquippedItems(EntityLiving zi, float float2) {
+	}
+
+	protected boolean shouldRenderPass(EntityLiving zi, int integer) {
 		return false;
 	}
 
-	protected float getDeathMaxRotation(EntityLiving var1) {
+	protected float getDeathMaxRotation(EntityLiving zi) {
 		return 90.0F;
 	}
 
-	protected int getColorMultiplier(EntityLiving var1, float var2, float var3) {
+	protected int getColorMultiplier(EntityLiving zi, float float2, float float3) {
 		return 0;
 	}
 
-	protected void preRenderCallback(EntityLiving var1, float var2) {
+	protected void preRenderCallback(EntityLiving zi, float float2) {
 	}
 
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.doRenderLiving((EntityLiving)var1, var2, var4, var6, var8, var9);
+	public void doRender(Entity xy, double double2, double double3, double double4, float float5, float float6) {
+		this.doRenderLiving((EntityLiving)xy, double2, double3, double4, float5, float6);
 	}
 }
--- net/minecraft/src/WorldClient.java
+++ net/minecraft/src/WorldClient.java
@@ -1,8 +1,10 @@
 package net.minecraft.src;
 
 import java.io.File;
+import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.LinkedList;
+import java.util.List;
 import java.util.Set;
 
 public class WorldClient extends World {
@@ -13,10 +15,16 @@
 	private MCHashTable entityHashTable = new MCHashTable();
 	private Set entityList = new HashSet();
 	private Set entitySpawnQueue = new HashSet();
-
-	public WorldClient(NetClientHandler var1) {
+	public List remoteEntities = new ArrayList();
+
+	public BiomeUnknownClass func_7532_7eiXFy1EXe3J3c9CLBV7WYa2QRCpBXy4EHYd0LJAppn7e7M6U51c10aE6X4w() {
+		return (BiomeUnknownClass)this.field_7486_19Zq3usHE49nqTf42NA4437074mbHq57gg27445jru16ailF0t00O91Q8HO3;
+	}
+
+	public WorldClient(NetClientHandler netClientHandler) {
 		super("MpServer");
-		this.sendQueue = var1;
+		this.field_7486_19Zq3usHE49nqTf42NA4437074mbHq57gg27445jru16ailF0t00O91Q8HO3 = new BiomeUnknownClass();
+		this.sendQueue = netClientHandler;
 		this.spawnX = 8;
 		this.spawnY = 64;
 		this.spawnZ = 8;
@@ -24,45 +32,51 @@
 
 	public void tick() {
 		++this.worldTime;
-		int var1 = this.calculateSkylightSubtracted(1.0F);
-		int var2;
-		if(var1 != this.skylightSubtracted) {
-			this.skylightSubtracted = var1;
+		int i1 = this.calculateSkylightSubtracted(1.0F);
+		int i2;
+		if(i1 != this.skylightSubtracted) {
+			this.skylightSubtracted = i1;
 
-			for(var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-				((IWorldAccess)this.worldAccesses.get(var2)).updateAllRenderers();
+			for(i2 = 0; i2 < this.worldAccesses.size(); ++i2) {
+				((IWorldAccess)this.worldAccesses.get(i2)).updateAllRenderers();
 			}
 		}
 
-		for(var2 = 0; var2 < 10 && !this.entitySpawnQueue.isEmpty(); ++var2) {
-			Entity var3 = (Entity)this.entitySpawnQueue.iterator().next();
-			this.spawnEntityInWorld(var3);
+		this.func_7430_2WpX24v1vz12pVlm4Rc1b7y4nk1dDNM5jBcH0X8hn3Jw39FwYG2gi9mM940l();
+		InputHandler.field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL.func_12196_7s9IfTKre2uJtyoPjdLc93WmidSQs9AM2aDgi63837RD3989LlCE6V4C08ci();
+
+		for(i2 = 0; i2 < 10 && !this.entitySpawnQueue.isEmpty(); ++i2) {
+			Entity entity3 = (Entity)this.entitySpawnQueue.iterator().next();
+			this.spawnEntityInWorld(entity3);
 		}
 
 		this.sendQueue.processReadPackets();
 
-		for(var2 = 0; var2 < this.blocksToReceive.size(); ++var2) {
-			WorldBlockPositionType var4 = (WorldBlockPositionType)this.blocksToReceive.get(var2);
-			if(--var4.acceptCountdown == 0) {
-				super.setBlockAndMetadata(var4.posX, var4.posY, var4.posZ, var4.blockID, var4.metadata);
-				super.markBlockNeedsUpdate(var4.posX, var4.posY, var4.posZ);
-				this.blocksToReceive.remove(var2--);
-			}
-		}
-
-	}
-
-	public void invalidateBlockReceiveRegion(int var1, int var2, int var3, int var4, int var5, int var6) {
-		for(int var7 = 0; var7 < this.blocksToReceive.size(); ++var7) {
-			WorldBlockPositionType var8 = (WorldBlockPositionType)this.blocksToReceive.get(var7);
-			if(var8.posX >= var1 && var8.posY >= var2 && var8.posZ >= var3 && var8.posX <= var4 && var8.posY <= var5 && var8.posZ <= var6) {
-				this.blocksToReceive.remove(var7--);
-			}
-		}
-
-	}
-
-	protected IChunkProvider getChunkProvider(File var1) {
+		for(i2 = 0; i2 < this.blocksToReceive.size(); ++i2) {
+			WorldBlockPositionType worldBlockPositionType4 = (WorldBlockPositionType)this.blocksToReceive.get(i2);
+			if(--worldBlockPositionType4.acceptCountdown == 0) {
+				super.setBlockAndMetadata(worldBlockPositionType4.posX, worldBlockPositionType4.posY, worldBlockPositionType4.posZ, worldBlockPositionType4.blockID, worldBlockPositionType4.metadata);
+				super.markBlockNeedsUpdate(worldBlockPositionType4.posX, worldBlockPositionType4.posY, worldBlockPositionType4.posZ);
+				this.blocksToReceive.remove(i2--);
+			}
+		}
+
+	}
+
+	public void updateRemoteEntityState(RemoteEntityData kx) {
+	}
+
+	public void invalidateBlockReceiveRegion(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		for(int i7 = 0; i7 < this.blocksToReceive.size(); ++i7) {
+			WorldBlockPositionType worldBlockPositionType8 = (WorldBlockPositionType)this.blocksToReceive.get(i7);
+			if(worldBlockPositionType8.posX >= minX && worldBlockPositionType8.posY >= minY && worldBlockPositionType8.posZ >= minZ && worldBlockPositionType8.posX <= maxX && worldBlockPositionType8.posY <= maxY && worldBlockPositionType8.posZ <= maxZ) {
+				this.blocksToReceive.remove(i7--);
+			}
+		}
+
+	}
+
+	protected IChunkProvider getChunkProvider(File saveDir) {
 		this.clientChunkProvider = new ChunkProviderClient(this);
 		return this.clientChunkProvider;
 	}
@@ -76,129 +90,132 @@
 	protected void updateBlocksAndPlayCaveSounds() {
 	}
 
-	public void scheduleBlockUpdate(int var1, int var2, int var3, int var4) {
+	public void scheduleBlockUpdate(int x, int y, int z, int id) {
 	}
 
-	public boolean tickUpdates(boolean var1) {
+	public boolean tickUpdates(boolean boolean1) {
 		return false;
 	}
 
-	public void doPreChunk(int var1, int var2, boolean var3) {
-		if(var3) {
-			this.clientChunkProvider.loadChunk(var1, var2);
-		} else {
-			this.clientChunkProvider.unloadChunk(var1, var2);
-		}
-
-		if(!var3) {
-			this.markBlocksDirty(var1 * 16, 0, var2 * 16, var1 * 16 + 15, 128, var2 * 16 + 15);
-		}
-
-	}
-
-	public boolean spawnEntityInWorld(Entity var1) {
-		boolean var2 = super.spawnEntityInWorld(var1);
-		if(var1 instanceof EntityPlayerSP) {
-			this.entityList.add(var1);
-		}
-
-		return var2;
-	}
-
-	public void setEntityDead(Entity var1) {
-		super.setEntityDead(var1);
-		if(var1 instanceof EntityPlayerSP) {
-			this.entityList.remove(var1);
-		}
-
-	}
-
-	protected void obtainEntitySkin(Entity var1) {
-		super.obtainEntitySkin(var1);
-		if(this.entitySpawnQueue.contains(var1)) {
-			this.entitySpawnQueue.remove(var1);
-		}
-
-	}
-
-	protected void releaseEntitySkin(Entity var1) {
-		super.releaseEntitySkin(var1);
-		if(this.entityList.contains(var1)) {
-			this.entitySpawnQueue.add(var1);
-		}
-
-	}
-
-	public void addEntityToWorld(int var1, Entity var2) {
-		this.entityList.add(var2);
-		if(!this.spawnEntityInWorld(var2)) {
-			this.entitySpawnQueue.add(var2);
-		}
-
-		this.entityHashTable.addKey(var1, var2);
-	}
-
-	public Entity getEntityByID(int var1) {
-		return (Entity)this.entityHashTable.lookup(var1);
-	}
-
-	public Entity removeEntityFromWorld(int var1) {
-		Entity var2 = (Entity)this.entityHashTable.removeObject(var1);
-		if(var2 != null) {
-			this.entityList.remove(var2);
-			this.setEntityDead(var2);
-		}
-
-		return var2;
-	}
-
-	public boolean setBlockMetadata(int var1, int var2, int var3, int var4) {
-		int var5 = this.getBlockId(var1, var2, var3);
-		int var6 = this.getBlockMetadata(var1, var2, var3);
-		if(super.setBlockMetadata(var1, var2, var3, var4)) {
-			this.blocksToReceive.add(new WorldBlockPositionType(this, var1, var2, var3, var5, var6));
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public boolean setBlockAndMetadata(int var1, int var2, int var3, int var4, int var5) {
-		int var6 = this.getBlockId(var1, var2, var3);
-		int var7 = this.getBlockMetadata(var1, var2, var3);
-		if(super.setBlockAndMetadata(var1, var2, var3, var4, var5)) {
-			this.blocksToReceive.add(new WorldBlockPositionType(this, var1, var2, var3, var6, var7));
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public boolean setBlock(int var1, int var2, int var3, int var4) {
-		int var5 = this.getBlockId(var1, var2, var3);
-		int var6 = this.getBlockMetadata(var1, var2, var3);
-		if(super.setBlock(var1, var2, var3, var4)) {
-			this.blocksToReceive.add(new WorldBlockPositionType(this, var1, var2, var3, var5, var6));
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public boolean handleBlockChange(int var1, int var2, int var3, int var4, int var5) {
-		this.invalidateBlockReceiveRegion(var1, var2, var3, var1, var2, var3);
-		if(super.setBlockAndMetadata(var1, var2, var3, var4, var5)) {
-			this.notifyBlockChange(var1, var2, var3, var4);
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public void updateTileEntityChunkAndDoNothing(int var1, int var2, int var3, TileEntity var4) {
+	public void doPreChunk(int x, int z, boolean mode, float[] arr) {
+		if(mode) {
+			this.clientChunkProvider.loadChunk(x, z);
+			this.func_7532_7eiXFy1EXe3J3c9CLBV7WYa2QRCpBXy4EHYd0LJAppn7e7M6U51c10aE6X4w().func_10188_7w1lB4c92lMJbh1WTsqK8RWVdY460iP4FuXe5pstl82DxM6koOm8O527VIZ9(new WorldGenHouseSmallUnknownClass2(x, z), arr);
+		} else {
+			this.clientChunkProvider.unloadChunk(x, z);
+			this.func_7532_7eiXFy1EXe3J3c9CLBV7WYa2QRCpBXy4EHYd0LJAppn7e7M6U51c10aE6X4w().func_10187_3AndXWge0Me8Q040iwfs6eu0O3Y09uh0xQI51Sv3WSs5ZG8n7t4xbP8BL96U(new WorldGenHouseSmallUnknownClass2(x, z));
+		}
+
+		if(!mode) {
+			this.markBlocksDirty(x * 16, 0, z * 16, x * 16 + 15, 128, z * 16 + 15);
+		}
+
+	}
+
+	public boolean spawnEntityInWorld(Entity entity) {
+		boolean z2 = super.spawnEntityInWorld(entity);
+		if(entity instanceof EntityPlayerSP) {
+			this.entityList.add(entity);
+		}
+
+		return z2;
+	}
+
+	public void setEntityDead(Entity entity) {
+		super.setEntityDead(entity);
+		if(entity instanceof EntityPlayerSP) {
+			this.entityList.remove(entity);
+		}
+
+	}
+
+	protected void obtainEntitySkin(Entity entity) {
+		super.obtainEntitySkin(entity);
+		if(this.entitySpawnQueue.contains(entity)) {
+			this.entitySpawnQueue.remove(entity);
+		}
+
+	}
+
+	protected void releaseEntitySkin(Entity entity) {
+		super.releaseEntitySkin(entity);
+		if(this.entityList.contains(entity)) {
+			this.entitySpawnQueue.add(entity);
+		}
+
+	}
+
+	public void addEntityToWorld(int id, Entity entity) {
+		this.entityList.add(entity);
+		if(!this.spawnEntityInWorld(entity)) {
+			this.entitySpawnQueue.add(entity);
+		}
+
+		this.entityHashTable.addKey(id, entity);
+	}
+
+	public Entity getEntityByID(int id) {
+		return (Entity)this.entityHashTable.lookup(id);
+	}
+
+	public Entity removeEntityFromWorld(int id) {
+		Entity entity2 = (Entity)this.entityHashTable.removeObject(id);
+		if(entity2 != null) {
+			this.entityList.remove(entity2);
+			this.setEntityDead(entity2);
+		}
+
+		return entity2;
+	}
+
+	public boolean setBlockMetadata(int x, int y, int z, int metadata) {
+		int i5 = this.getBlockId(x, y, z);
+		int i6 = this.getBlockMetadata(x, y, z);
+		if(super.setBlockMetadata(x, y, z, metadata)) {
+			this.blocksToReceive.add(new WorldBlockPositionType(this, x, y, z, i5, i6));
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public boolean setBlockAndMetadata(int x, int y, int z, int id, int metadata) {
+		int i6 = this.getBlockId(x, y, z);
+		int i7 = this.getBlockMetadata(x, y, z);
+		if(super.setBlockAndMetadata(x, y, z, id, metadata)) {
+			this.blocksToReceive.add(new WorldBlockPositionType(this, x, y, z, i6, i7));
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public boolean setBlock(int x, int y, int z, int id) {
+		int i5 = this.getBlockId(x, y, z);
+		int i6 = this.getBlockMetadata(x, y, z);
+		if(super.setBlock(x, y, z, id)) {
+			this.blocksToReceive.add(new WorldBlockPositionType(this, x, y, z, i5, i6));
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public boolean handleBlockChange(int x, int y, int z, int id, int metadata) {
+		this.invalidateBlockReceiveRegion(x, y, z, x, y, z);
+		if(super.setBlockAndMetadata(x, y, z, id, metadata)) {
+			this.notifyBlockChange(x, y, z, id);
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public void updateTileEntityChunkAndDoNothing(int x, int y, int z, TileEntity tileEntity) {
 		if(!this.noTileEntityUpdates) {
-			this.sendQueue.addToSendQueue(new Packet59ComplexEntity(var1, var2, var3, var4));
+			this.sendQueue.addToSendQueue(new Packet59ComplexEntity(x, y, z, tileEntity));
 		}
+
 	}
 
 	public void sendQuittingDisconnectingPacket() {
--- /dev/null
+++ net/minecraft/src/CommandWorldeditSetpos2.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandWorldeditSetpos2 extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8560_63Hb9M9oB3b0Y1LaFg3JqU70aofgcHuUHix95mx0hq5qU8iQ0Iq0107OovS2;
+    
+    CommandWorldeditSetpos2(final CommandManager abb) {
+        this.field_8560_63Hb9M9oB3b0Y1LaFg3JqU70aofgcHuUHix95mx0hq5qU8iQ0Iq0107OovS2 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.ingameGUI.weditOverlay.func_11901_4GX3NWZYNNxs7759a7f8764Sjs8mN8d0w06o2vq3vJdsHhi1084359oRzOm3();
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/ServerAuthManager.java
@@ -1,0 +1,4 @@
+package net.minecraft.src;
+
+public class ServerAuthManager {
+}
--- net/minecraft/src/EntityOtherPlayerMP.java
+++ net/minecraft/src/EntityOtherPlayerMP.java
@@ -9,13 +9,13 @@
 	private double otherPlayerMPPitch;
 	float unusedFloat = 0.0F;
 
-	public EntityOtherPlayerMP(World var1, String var2) {
-		super(var1);
-		this.username = var2;
+	public EntityOtherPlayerMP(World worldObj, String username) {
+		super(worldObj);
+		this.username = username;
 		this.yOffset = 0.0F;
 		this.stepHeight = 0.0F;
-		if(var2 != null && var2.length() > 0) {
-			this.skinUrl = "http://www.minecraft.net/skin/" + var2 + ".png";
+		if(username != null && username.length() > 0) {
+			this.skinUrl = username;
 			System.out.println("Loading texture " + this.skinUrl);
 		}
 
@@ -23,31 +23,31 @@
 		this.renderDistanceWeight = 10.0D;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		return true;
 	}
 
-	public void setPositionAndRotation(double var1, double var3, double var5, float var7, float var8, int var9) {
+	public void setPositionAndRotation(double x, double y, double z, float rotationYaw, float rotationPitch, int newPosRotationIncrements) {
 		this.yOffset = 0.0F;
-		this.otherPlayerMPX = var1;
-		this.otherPlayerMPY = var3;
-		this.otherPlayerMPZ = var5;
-		this.otherPlayerMPYaw = (double)var7;
-		this.otherPlayerMPPitch = (double)var8;
-		this.otherPlayerMPPosRotationIncrements = var9;
+		this.otherPlayerMPX = x;
+		this.otherPlayerMPY = y;
+		this.otherPlayerMPZ = z;
+		this.otherPlayerMPYaw = (double)rotationYaw;
+		this.otherPlayerMPPitch = (double)rotationPitch;
+		this.otherPlayerMPPosRotationIncrements = newPosRotationIncrements;
 	}
 
 	public void onUpdate() {
 		super.onUpdate();
 		this.prevLimbYaw = this.limbYaw;
-		double var1 = this.posX - this.prevPosX;
-		double var3 = this.posZ - this.prevPosZ;
-		float var5 = MathHelper.sqrt_double(var1 * var1 + var3 * var3) * 4.0F;
-		if(var5 > 1.0F) {
-			var5 = 1.0F;
+		double d1 = this.posX - this.prevPosX;
+		double d3 = this.posZ - this.prevPosZ;
+		float f5 = MathHelper.sqrt_double(d1 * d1 + d3 * d3) * 4.0F;
+		if(f5 > 1.0F) {
+			f5 = 1.0F;
 		}
 
-		this.limbYaw += (var5 - this.limbYaw) * 0.4F;
+		this.limbYaw += (f5 - this.limbYaw) * 0.4F;
 		this.limbSwing += this.limbYaw;
 	}
 
@@ -58,41 +58,41 @@
 	public void onLivingUpdate() {
 		super.updateEntityActionState();
 		if(this.otherPlayerMPPosRotationIncrements > 0) {
-			double var1 = this.posX + (this.otherPlayerMPX - this.posX) / (double)this.otherPlayerMPPosRotationIncrements;
-			double var3 = this.posY + (this.otherPlayerMPY - this.posY) / (double)this.otherPlayerMPPosRotationIncrements;
-			double var5 = this.posZ + (this.otherPlayerMPZ - this.posZ) / (double)this.otherPlayerMPPosRotationIncrements;
-
-			double var7;
-			for(var7 = this.otherPlayerMPYaw - (double)this.rotationYaw; var7 < -180.0D; var7 += 360.0D) {
-			}
-
-			while(var7 >= 180.0D) {
-				var7 -= 360.0D;
-			}
-
-			this.rotationYaw = (float)((double)this.rotationYaw + var7 / (double)this.otherPlayerMPPosRotationIncrements);
+			double d1 = this.posX + (this.otherPlayerMPX - this.posX) / (double)this.otherPlayerMPPosRotationIncrements;
+			double d3 = this.posY + (this.otherPlayerMPY - this.posY) / (double)this.otherPlayerMPPosRotationIncrements;
+			double d5 = this.posZ + (this.otherPlayerMPZ - this.posZ) / (double)this.otherPlayerMPPosRotationIncrements;
+
+			double d7;
+			for(d7 = this.otherPlayerMPYaw - (double)this.rotationYaw; d7 < -180.0D; d7 += 360.0D) {
+			}
+
+			while(d7 >= 180.0D) {
+				d7 -= 360.0D;
+			}
+
+			this.rotationYaw = (float)((double)this.rotationYaw + d7 / (double)this.otherPlayerMPPosRotationIncrements);
 			this.rotationPitch = (float)((double)this.rotationPitch + (this.otherPlayerMPPitch - (double)this.rotationPitch) / (double)this.otherPlayerMPPosRotationIncrements);
 			--this.otherPlayerMPPosRotationIncrements;
-			this.setPosition(var1, var3, var5);
+			this.setPosition(d1, d3, d5);
 			this.setRotation(this.rotationYaw, this.rotationPitch);
 		}
 
 		this.prevCameraYaw = this.cameraYaw;
-		float var9 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-		float var2 = (float)Math.atan(-this.motionY * (double)0.2F) * 15.0F;
-		if(var9 > 0.1F) {
-			var9 = 0.1F;
+		float f9 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+		float f2 = (float)Math.atan(-this.motionY * (double)0.2F) * 15.0F;
+		if(f9 > 0.1F) {
+			f9 = 0.1F;
 		}
 
 		if(!this.onGround || this.health <= 0) {
-			var9 = 0.0F;
+			f9 = 0.0F;
 		}
 
 		if(this.onGround || this.health <= 0) {
-			var2 = 0.0F;
+			f2 = 0.0F;
 		}
 
-		this.cameraYaw += (var9 - this.cameraYaw) * 0.4F;
-		this.cameraPitch += (var2 - this.cameraPitch) * 0.8F;
+		this.cameraYaw += (f9 - this.cameraYaw) * 0.4F;
+		this.cameraPitch += (f2 - this.cameraPitch) * 0.8F;
 	}
 }
--- /dev/null
+++ net/minecraft/src/GuiBannedMenu.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+public class GuiBannedMenu extends GuiIngameMenu {
+	public void initGui() {
+		this.controlList.clear();
+		this.controlList.add(new GuiButton(4, this.width / 2 - 100, this.height / 4 + 24, "Back to game"));
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96, "Options..."));
+	}
+}
--- /dev/null
+++ net/minecraft/src/FreerunMap5.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.util.List;
+
+public class FreerunMap5 extends FreerunWorld {
+	private NamedLoc[] field_7523_30Cj944ou67Mfe9UjAqSP5ckPho5H485d3Gt9gom3H99mQbuONAstNHz897d = new NamedLoc[]{new NamedLoc(104, 97, -136, "spawn"), new NamedLoc(102, 96, -142, 105, 98, -141, "spawn_start"), new NamedLoc(116, 88, -284, 123, 92, -277, "end")};
+
+	public FreerunMap5(File worldFile, String levelName) {
+		super(worldFile, levelName);
+		this.worldTime = 20000L;
+	}
+
+	public NamedLoc[] getCheckpoints() {
+		return this.field_7523_30Cj944ou67Mfe9UjAqSP5ckPho5H485d3Gt9gom3H99mQbuONAstNHz897d;
+	}
+
+	public int getResetY(long long1, long long2) {
+		return 76;
+	}
+
+	public List func_7517_8oADBp42n4G2Ly6U1WLv70n6VyS2bkokzo8dF7ayUqDb1A6ofY86pUJA8mf8() {
+		return this.field_7498_65957fU9nGL5PA2e96ZOK3ePBveSt2ceA9Glj10PC2Jo5s0wI21ix69flng2;
+	}
+}
--- net/minecraft/src/PlayerControllerSP.java
+++ net/minecraft/src/PlayerControllerSP.java
@@ -13,43 +13,43 @@
 	private SpawnerAnimals monsterSpawner = new SpawnerClient(this, 200, IMobs.class, new Class[]{EntityZombie.class, EntitySkeleton.class, EntityCreeper.class, EntitySpider.class, EntitySlime.class});
 	private SpawnerAnimals animalSpawner = new SpawnerAnimals(15, EntityAnimal.class, new Class[]{EntitySheep.class, EntityPig.class, EntityCow.class, EntityChicken.class});
 
-	public PlayerControllerSP(Minecraft var1) {
-		super(var1);
-	}
-
-	public void flipPlayer(EntityPlayer var1) {
-		var1.rotationYaw = -180.0F;
-	}
-
-	public boolean sendBlockRemoved(int var1, int var2, int var3, int var4) {
-		int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
-		int var6 = this.mc.theWorld.getBlockMetadata(var1, var2, var3);
-		boolean var7 = super.sendBlockRemoved(var1, var2, var3, var4);
-		ItemStack var8 = this.mc.thePlayer.getCurrentEquippedItem();
-		boolean var9 = this.mc.thePlayer.canHarvestBlock(Block.blocksList[var5]);
-		if(var8 != null) {
-			var8.onDestroyBlock(var5, var1, var2, var3);
-			if(var8.stackSize == 0) {
-				var8.onItemDestroyedByUse(this.mc.thePlayer);
+	public PlayerControllerSP(Minecraft minecraft) {
+		super(minecraft);
+	}
+
+	public void flipPlayer(EntityPlayer entityPlayer) {
+		entityPlayer.rotationYaw = -180.0F;
+	}
+
+	public boolean sendBlockRemoved(int x, int y, int z, int side) {
+		int i5 = this.mc.theWorld.getBlockId(x, y, z);
+		int i6 = this.mc.theWorld.getBlockMetadata(x, y, z);
+		boolean z7 = super.sendBlockRemoved(x, y, z, side);
+		ItemStack itemStack8 = this.mc.thePlayer.getCurrentEquippedItem();
+		boolean z9 = this.mc.thePlayer.canHarvestBlock(Block.blocksList[i5]);
+		if(itemStack8 != null) {
+			itemStack8.onDestroyBlock(i5, x, y, z);
+			if(itemStack8.stackSize == 0) {
+				itemStack8.onItemDestroyedByUse(this.mc.thePlayer);
 				this.mc.thePlayer.destroyCurrentEquippedItem();
 			}
 		}
 
-		if(var7 && var9) {
-			Block.blocksList[var5].harvestBlock(this.mc.theWorld, var1, var2, var3, var6);
+		if(z7 && z9) {
+			Block.blocksList[i5].harvestBlock(this.mc.theWorld, x, y, z, i6);
 		}
 
-		return var7;
+		return z7;
 	}
 
-	public void clickBlock(int var1, int var2, int var3, int var4) {
-		int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
-		if(var5 > 0 && this.curBlockDamage == 0.0F) {
-			Block.blocksList[var5].onBlockClicked(this.mc.theWorld, var1, var2, var3, this.mc.thePlayer);
+	public void clickBlock(int x, int y, int z, int side) {
+		int i5 = this.mc.theWorld.getBlockId(x, y, z);
+		if(i5 > 0 && this.curBlockDamage == 0.0F) {
+			Block.blocksList[i5].onBlockClicked(this.mc.theWorld, x, y, z, this.mc.thePlayer);
 		}
 
-		if(var5 > 0 && Block.blocksList[var5].blockStrength(this.mc.thePlayer) >= 1.0F) {
-			this.sendBlockRemoved(var1, var2, var3, var4);
+		if(i5 > 0 && Block.blocksList[i5].blockStrength(this.mc.thePlayer) >= 1.0F) {
+			this.sendBlockRemoved(x, y, z, side);
 		}
 
 	}
@@ -59,50 +59,48 @@
 		this.blockHitWait = 0;
 	}
 
-	public void sendBlockRemoving(int var1, int var2, int var3, int var4) {
+	public void sendBlockRemoving(int x, int y, int z, int side) {
 		if(this.blockHitWait > 0) {
 			--this.blockHitWait;
-		} else {
-			if(var1 == this.curBlockX && var2 == this.curBlockY && var3 == this.curBlockZ) {
-				int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
-				if(var5 == 0) {
-					return;
-				}
-
-				Block var6 = Block.blocksList[var5];
-				this.curBlockDamage += var6.blockStrength(this.mc.thePlayer);
-				if(this.blockDestroySoundCounter % 4.0F == 0.0F && var6 != null) {
-					this.mc.sndManager.playSound(var6.stepSound.getStepSound(), (float)var1 + 0.5F, (float)var2 + 0.5F, (float)var3 + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 8.0F, var6.stepSound.getPitch() * 0.5F);
-				}
-
-				++this.blockDestroySoundCounter;
-				if(this.curBlockDamage >= 1.0F) {
-					this.sendBlockRemoved(var1, var2, var3, var4);
-					this.curBlockDamage = 0.0F;
-					this.prevBlockDamage = 0.0F;
-					this.blockDestroySoundCounter = 0.0F;
-					this.blockHitWait = 5;
-				}
-			} else {
+		} else if(x == this.curBlockX && y == this.curBlockY && z == this.curBlockZ) {
+			int i5 = this.mc.theWorld.getBlockId(x, y, z);
+			if(i5 == 0) {
+				return;
+			}
+
+			Block block6 = Block.blocksList[i5];
+			this.curBlockDamage += block6.blockStrength(this.mc.thePlayer);
+			if(this.blockDestroySoundCounter % 4.0F == 0.0F && block6 != null) {
+				this.mc.sndManager.playSound(block6.stepSound.getStepSound(), (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F, (block6.stepSound.getVolume() + 1.0F) / 8.0F, block6.stepSound.getPitch() * 0.5F);
+			}
+
+			++this.blockDestroySoundCounter;
+			if(this.curBlockDamage >= 1.0F) {
+				this.sendBlockRemoved(x, y, z, side);
 				this.curBlockDamage = 0.0F;
 				this.prevBlockDamage = 0.0F;
 				this.blockDestroySoundCounter = 0.0F;
-				this.curBlockX = var1;
-				this.curBlockY = var2;
-				this.curBlockZ = var3;
+				this.blockHitWait = 5;
 			}
-
+		} else {
+			this.curBlockDamage = 0.0F;
+			this.prevBlockDamage = 0.0F;
+			this.blockDestroySoundCounter = 0.0F;
+			this.curBlockX = x;
+			this.curBlockY = y;
+			this.curBlockZ = z;
 		}
+
 	}
 
-	public void setPartialTime(float var1) {
+	public void setPartialTime(float renderPartialTick) {
 		if(this.curBlockDamage <= 0.0F) {
 			this.mc.ingameGUI.damageGuiPartialTime = 0.0F;
 			this.mc.renderGlobal.damagePartialTime = 0.0F;
 		} else {
-			float var2 = this.prevBlockDamage + (this.curBlockDamage - this.prevBlockDamage) * var1;
-			this.mc.ingameGUI.damageGuiPartialTime = var2;
-			this.mc.renderGlobal.damagePartialTime = var2;
+			float f2 = this.prevBlockDamage + (this.curBlockDamage - this.prevBlockDamage) * renderPartialTick;
+			this.mc.ingameGUI.damageGuiPartialTime = f2;
+			this.mc.renderGlobal.damagePartialTime = f2;
 		}
 
 	}
@@ -111,14 +109,17 @@
 		return 4.0F;
 	}
 
-	public void onWorldChange(World var1) {
-		super.onWorldChange(var1);
+	public void onWorldChange(World world) {
+		super.onWorldChange(world);
 	}
 
 	public void onUpdate() {
 		this.prevBlockDamage = this.curBlockDamage;
-		this.monsterSpawner.onUpdate(this.mc.theWorld);
-		this.animalSpawner.onUpdate(this.mc.theWorld);
-		this.mc.sndManager.playRandomMusicIfReady();
+		if(this.mc.thePlayer.getClass() == EntityPlayerSP.class) {
+			this.monsterSpawner.onUpdate(this.mc.theWorld);
+			this.animalSpawner.onUpdate(this.mc.theWorld);
+			this.mc.sndManager.playRandomMusicIfReady();
+		}
+
 	}
 }
--- net/minecraft/src/Path.java
+++ net/minecraft/src/Path.java
@@ -4,20 +4,20 @@
 	private PathPoint[] pathPoints = new PathPoint[1024];
 	private int count = 0;
 
-	public PathPoint addPoint(PathPoint var1) {
-		if(var1.index >= 0) {
+	public PathPoint addPoint(PathPoint pathPoint) {
+		if(pathPoint.index >= 0) {
 			throw new IllegalStateException("OW KNOWS!");
 		} else {
 			if(this.count == this.pathPoints.length) {
-				PathPoint[] var2 = new PathPoint[this.count << 1];
-				System.arraycopy(this.pathPoints, 0, var2, 0, this.count);
-				this.pathPoints = var2;
+				PathPoint[] pathPoint2 = new PathPoint[this.count << 1];
+				System.arraycopy(this.pathPoints, 0, pathPoint2, 0, this.count);
+				this.pathPoints = pathPoint2;
 			}
 
-			this.pathPoints[this.count] = var1;
-			var1.index = this.count;
+			this.pathPoints[this.count] = pathPoint;
+			pathPoint.index = this.count;
 			this.sortBack(this.count++);
-			return var1;
+			return pathPoint;
 		}
 	}
 
@@ -26,91 +26,91 @@
 	}
 
 	public PathPoint dequeue() {
-		PathPoint var1 = this.pathPoints[0];
+		PathPoint pathPoint1 = this.pathPoints[0];
 		this.pathPoints[0] = this.pathPoints[--this.count];
 		this.pathPoints[this.count] = null;
 		if(this.count > 0) {
 			this.sortForward(0);
 		}
 
-		var1.index = -1;
-		return var1;
+		pathPoint1.index = -1;
+		return pathPoint1;
 	}
 
-	public void changeDistance(PathPoint var1, float var2) {
-		float var3 = var1.distanceToTarget;
-		var1.distanceToTarget = var2;
-		if(var2 < var3) {
-			this.sortBack(var1.index);
+	public void changeDistance(PathPoint pathPoint, float distanceToTarget) {
+		float f3 = pathPoint.distanceToTarget;
+		pathPoint.distanceToTarget = distanceToTarget;
+		if(distanceToTarget < f3) {
+			this.sortBack(pathPoint.index);
 		} else {
-			this.sortForward(var1.index);
+			this.sortForward(pathPoint.index);
 		}
 
 	}
 
-	private void sortBack(int var1) {
-		PathPoint var2 = this.pathPoints[var1];
+	private void sortBack(int index) {
+		PathPoint pathPoint2 = this.pathPoints[index];
 
-		int var4;
-		for(float var3 = var2.distanceToTarget; var1 > 0; var1 = var4) {
-			var4 = var1 - 1 >> 1;
-			PathPoint var5 = this.pathPoints[var4];
-			if(var3 >= var5.distanceToTarget) {
+		int i3;
+		for(float f4 = pathPoint2.distanceToTarget; index > 0; index = i3) {
+			i3 = index - 1 >> 1;
+			PathPoint pathPoint5 = this.pathPoints[i3];
+			if(f4 >= pathPoint5.distanceToTarget) {
 				break;
 			}
 
-			this.pathPoints[var1] = var5;
-			var5.index = var1;
+			this.pathPoints[index] = pathPoint5;
+			pathPoint5.index = index;
 		}
 
-		this.pathPoints[var1] = var2;
-		var2.index = var1;
+		this.pathPoints[index] = pathPoint2;
+		pathPoint2.index = index;
 	}
 
-	private void sortForward(int var1) {
-		PathPoint var2 = this.pathPoints[var1];
-		float var3 = var2.distanceToTarget;
+	private void sortForward(int index) {
+		PathPoint pathPoint2 = this.pathPoints[index];
+		float f3 = pathPoint2.distanceToTarget;
 
 		while(true) {
-			int var4 = 1 + (var1 << 1);
-			int var5 = var4 + 1;
-			if(var4 >= this.count) {
+			int i4 = 1 + (index << 1);
+			int i5 = i4 + 1;
+			if(i4 >= this.count) {
 				break;
 			}
 
-			PathPoint var6 = this.pathPoints[var4];
-			float var7 = var6.distanceToTarget;
-			PathPoint var8;
-			float var9;
-			if(var5 >= this.count) {
-				var8 = null;
-				var9 = Float.POSITIVE_INFINITY;
+			PathPoint pathPoint6 = this.pathPoints[i4];
+			float f7 = pathPoint6.distanceToTarget;
+			PathPoint pathPoint8;
+			float f9;
+			if(i5 >= this.count) {
+				pathPoint8 = null;
+				f9 = Float.POSITIVE_INFINITY;
 			} else {
-				var8 = this.pathPoints[var5];
-				var9 = var8.distanceToTarget;
+				pathPoint8 = this.pathPoints[i5];
+				f9 = pathPoint8.distanceToTarget;
 			}
 
-			if(var7 < var9) {
-				if(var7 >= var3) {
+			if(f7 < f9) {
+				if(f7 >= f3) {
 					break;
 				}
 
-				this.pathPoints[var1] = var6;
-				var6.index = var1;
-				var1 = var4;
+				this.pathPoints[index] = pathPoint6;
+				pathPoint6.index = index;
+				index = i4;
 			} else {
-				if(var9 >= var3) {
+				if(f9 >= f3) {
 					break;
 				}
 
-				this.pathPoints[var1] = var8;
-				var8.index = var1;
-				var1 = var5;
+				this.pathPoints[index] = pathPoint8;
+				pathPoint8.index = index;
+				index = i5;
 			}
 		}
 
-		this.pathPoints[var1] = var2;
-		var2.index = var1;
+		this.pathPoints[index] = pathPoint2;
+		pathPoint2.index = index;
 	}
 
 	public boolean isPathEmpty() {
--- /dev/null
+++ net/minecraft/src/WorldZMWaves.java
@@ -1,0 +1,76 @@
+package net.minecraft.src;
+
+import java.util.Iterator;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.opengl.GL11;
+
+public class WorldZMWaves {
+	private Minecraft field_11170_05A1miNp2BEVpcn35LSeg2P16Zv3bxD7dn2VaTITlDwJ9ep8Hn70gG5422j1;
+	private boolean field_11169_0uG3ONmXnRgF58Kx5s98zRvS53Y8aVc689hjwGFKTiw26OuIN1Hgcbjv1Gep = false;
+
+	public WorldZMWaves(Minecraft minecraft) {
+		this.field_11170_05A1miNp2BEVpcn35LSeg2P16Zv3bxD7dn2VaTITlDwJ9ep8Hn70gG5422j1 = minecraft;
+	}
+
+	public void func_11168_6h3rOHQYGRO7TA7Td6vS2750aVTKL5987vHSuDMiv9P7jUAw4e58s0G3d6Wz(int integer1, int integer2, int integer3) {
+		int i4 = 32 + integer1 * 32;
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.field_11170_05A1miNp2BEVpcn35LSeg2P16Zv3bxD7dn2VaTITlDwJ9ep8Hn70gG5422j1.renderEngine.getTexture("/gui/zm_perks.png"));
+		Tessellator.instance.startDrawingQuads();
+		Tessellator.instance.addVertexWithUV((double)integer2, (double)integer3, 0.0D, (double)((float)i4 / 256.0F), 0.0D);
+		Tessellator.instance.addVertexWithUV((double)integer2, (double)(integer3 + 32), 0.0D, (double)((float)i4 / 256.0F), 0.125D);
+		Tessellator.instance.addVertexWithUV((double)(integer2 + 32), (double)(integer3 + 32), 0.0D, (double)((float)(i4 + 32) / 256.0F), 0.125D);
+		Tessellator.instance.addVertexWithUV((double)(integer2 + 32), (double)integer3, 0.0D, (double)((float)(i4 + 32) / 256.0F), 0.0D);
+		Tessellator.instance.draw();
+	}
+
+	public void func_11167_4U925ZN0m8Nu9TK03KYE01U693LubPBQnFZPTZ58D5mrAp59upNarhi1NZXt(GuiIngame eu, int integer2, int integer3) {
+		GL11.glDisable(GL11.GL_LIGHTING);
+		FontRenderer fontRenderer4 = this.field_11170_05A1miNp2BEVpcn35LSeg2P16Zv3bxD7dn2VaTITlDwJ9ep8Hn70gG5422j1.fontRenderer;
+		EntityPlayerZombieModeClient entityPlayerZombieModeClient5 = (EntityPlayerZombieModeClient)InputHandler.mc.thePlayer;
+		String string6 = "Wave " + entityPlayerZombieModeClient5.worldIn.wave;
+		Gui.drawString(fontRenderer4, string6, 10, integer3 / 24 * 23, 0xFFFFFF);
+		Gui.drawString(fontRenderer4, "Points: " + entityPlayerZombieModeClient5.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.func_8686_3fQ4Zvl6ZGZtMHz8BDhx9ci7pQP8EhDqu7Ri4ywsZ3854I2e4ev3W4B3R3iy(), 10, integer3 / 24 * 23 - 38 - 25, 0xFFFFFF);
+		Gui.drawString(fontRenderer4, "Zombies left: " + (((ZMWorld)this.field_11170_05A1miNp2BEVpcn35LSeg2P16Zv3bxD7dn2VaTITlDwJ9ep8Hn70gG5422j1.theWorld).field_7562_3PLxvFTSuw98l2Tmt3im3M24nX1eATY0cEgRp2TFFF4G6s95xE89X6PYKutH - ((ZMWorld)this.field_11170_05A1miNp2BEVpcn35LSeg2P16Zv3bxD7dn2VaTITlDwJ9ep8Hn70gG5422j1.theWorld).field_7563_094H2VxtQX1PBry5CvxOiTi1xXrY5nta9M6hMPv418x8M47N5W97AYsw3wm2), 10, integer3 / 24 * 23 - 38 - 15, 0xFFFFFF);
+		InventoryVendingMachine inventoryVendingMachine7 = (InventoryVendingMachine)this.field_11170_05A1miNp2BEVpcn35LSeg2P16Zv3bxD7dn2VaTITlDwJ9ep8Hn70gG5422j1.thePlayer.inventory;
+		if(inventoryVendingMachine7.getCurrentItem() != null && (inventoryVendingMachine7.getCurrentItem().itemID == ExtItems.essenceGun.shiftedIndex || inventoryVendingMachine7.getCurrentItem().itemID == ExtItems.GrayGun.shiftedIndex)) {
+			Gui.drawString(fontRenderer4, "> " + inventoryVendingMachine7.field_8689_3p0gv43cL7j25sTw85c9cXfcP4HTk7W010VdL2XjgPV7V0w2R2sQvYNjSAja, integer2 / 12 * 11, integer3 / 24 * 23, 0xFFFFFF);
+		}
+
+		int i8 = 10;
+
+		int i9;
+		for(i9 = 0; i9 != 4; ++i9) {
+			if(entityPlayerZombieModeClient5.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.func_8687_2j3o3G4w9YEuL5Ti00BI486Z8qmmrnAgVGJYmg4Or967q661jjx3SsHBV6Ko(i9 + 1)) {
+				this.func_11168_6h3rOHQYGRO7TA7Td6vS2750aVTKL5987vHSuDMiv9P7jUAw4e58s0G3d6Wz(i9, i8, integer3 / 24 * 23 - 38);
+				i8 += 32;
+			}
+		}
+
+		int i10;
+		if(entityPlayerZombieModeClient5.field_9099_9Swr41S6T68d6dEsYG2c2L6B4clPHDs2giSrx84SjI081x3148rUDLOdX7Lp > 0) {
+			eu.drawCenteredString(fontRenderer4, "Reviving " + this.field_11170_05A1miNp2BEVpcn35LSeg2P16Zv3bxD7dn2VaTITlDwJ9ep8Hn70gG5422j1.thePlayer.username + "...", integer2 / 2, integer3 / 4, 0xFFFFFF);
+			GL11.glDisable(GL11.GL_LIGHTING);
+			Gui.drawGradientRect(integer2 / 2 - 100 - 1, integer3 / 2 - 30 - 1, integer2 / 2 - 100 + 200 + 1, integer3 / 2 - 30 + 5 + 1, -14671840, 0xFF000000);
+			i9 = 100 - entityPlayerZombieModeClient5.field_9099_9Swr41S6T68d6dEsYG2c2L6B4clPHDs2giSrx84SjI081x3148rUDLOdX7Lp;
+			i10 = 0xFFFFFF;
+			int i11 = 12303291;
+			int i12 = (int)(200.0F * ((float)i9 / 100.0F));
+			Gui.drawGradientRect(integer2 / 2 - 100, integer3 / 2 - 30, integer2 / 2 - 100 + i12, integer3 / 2 - 30 + 5, i10, -i11);
+		} else if(entityPlayerZombieModeClient5.field_9097_867sEKNEsa45Xq4Etlk5s449h7UUOWVcX6nYd2PGjFy373Y2PXcol521PBg2 != null) {
+			eu.drawCenteredString(fontRenderer4, entityPlayerZombieModeClient5.field_9097_867sEKNEsa45Xq4Etlk5s449h7UUOWVcX6nYd2PGjFy373Y2PXcol521PBg2.func_8287_3t2cX22yD5J55Zh6G33szTT1PY525wnemKTHp3jQ2r2jhLod41nugOV5rhqI(entityPlayerZombieModeClient5, entityPlayerZombieModeClient5.field_9093_8pX3Foh9nnqOBZGkAhkc659OKcv5h23UrLcQ0x07ZRU1yOwY57fY6vz12UYR), integer2 / 2, integer3 / 4 * 3, 0xFFFFFF);
+		}
+
+		if(this.field_11169_0uG3ONmXnRgF58Kx5s98zRvS53Y8aVc689hjwGFKTiw26OuIN1Hgcbjv1Gep) {
+			i9 = 40;
+			i10 = 0;
+
+			for(Iterator iterator13 = ((ZMWorld)this.field_11170_05A1miNp2BEVpcn35LSeg2P16Zv3bxD7dn2VaTITlDwJ9ep8Hn70gG5422j1.theWorld).field_7566_69E5GE0gWo145zq9937KGEU69w4fB0548pDTr5ja6vCMm6tn1vRONd86gs5E.iterator(); iterator13.hasNext(); i9 += 10) {
+				EntityZombie entityZombie14 = (EntityZombie)iterator13.next();
+				Gui.drawString(fontRenderer4, "[" + i10++ + "] X:" + (int)entityZombie14.posX + ", Y:" + (int)entityZombie14.posY + ", Z:" + (int)entityZombie14.posZ, 5, i9, 0xFFFFFF);
+			}
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockMultiSided.java
@@ -1,0 +1,41 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockMultiSided extends Block {
+	private int texTop;
+	private int texSide;
+	private int texBottom;
+	private int id;
+
+	public BlockMultiSided(int integer1, int integer2, int integer3, int integer4) {
+		super(integer1, Material.grass);
+		this.blockIndexInTexture = integer3;
+		this.setTickOnLoad(true);
+		this.texTop = integer2;
+		this.texSide = integer3;
+		this.texBottom = integer4;
+		this.id = integer1;
+	}
+
+	public BlockMultiSided(int integer1, int integer2, int integer3, int integer4, Material sx) {
+		super(integer1, sx);
+		this.blockIndexInTexture = integer3;
+		this.setTickOnLoad(true);
+		this.texTop = integer2;
+		this.texSide = integer3;
+		this.texBottom = integer4;
+		this.id = integer1;
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.texTop : (side == 0 ? this.texBottom : this.texSide);
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+	}
+
+	public int idDropped(int count, Random random) {
+		return this.id;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockChestOld.java
@@ -1,0 +1,196 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockChestOld extends BlockContainerOld {
+	private Random random = new Random();
+
+	protected BlockChestOld(int integer) {
+		super(integer, Material.wood);
+		this.blockIndexInTexture = 26;
+	}
+
+	public int getBlockTexture(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		if(integer5 == 1) {
+			return this.blockIndexInTexture - 1;
+		} else if(integer5 == 0) {
+			return this.blockIndexInTexture - 1;
+		} else {
+			int i6 = abt.getBlockId(integer2, integer3, integer4 - 1);
+			int i7 = abt.getBlockId(integer2, integer3, integer4 + 1);
+			int i8 = abt.getBlockId(integer2 - 1, integer3, integer4);
+			int i9 = abt.getBlockId(integer2 + 1, integer3, integer4);
+			int i10;
+			int i11;
+			int i12;
+			byte b13;
+			if(i6 != this.blockID && i7 != this.blockID) {
+				if(i8 != this.blockID && i9 != this.blockID) {
+					byte b14 = 3;
+					if(BlockOld.opaqueCubeLookup[i6] && !BlockOld.opaqueCubeLookup[i7]) {
+						b14 = 3;
+					}
+
+					if(BlockOld.opaqueCubeLookup[i7] && !BlockOld.opaqueCubeLookup[i6]) {
+						b14 = 2;
+					}
+
+					if(BlockOld.opaqueCubeLookup[i8] && !BlockOld.opaqueCubeLookup[i9]) {
+						b14 = 5;
+					}
+
+					if(BlockOld.opaqueCubeLookup[i9] && !BlockOld.opaqueCubeLookup[i8]) {
+						b14 = 4;
+					}
+
+					return integer5 == b14 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
+				} else if(integer5 != 4 && integer5 != 5) {
+					i10 = 0;
+					if(i8 == this.blockID) {
+						i10 = -1;
+					}
+
+					i11 = abt.getBlockId(i8 == this.blockID ? integer2 - 1 : integer2 + 1, integer3, integer4 - 1);
+					i12 = abt.getBlockId(i8 == this.blockID ? integer2 - 1 : integer2 + 1, integer3, integer4 + 1);
+					if(integer5 == 3) {
+						i10 = -1 - i10;
+					}
+
+					b13 = 3;
+					if((BlockOld.opaqueCubeLookup[i6] || BlockOld.opaqueCubeLookup[i11]) && !BlockOld.opaqueCubeLookup[i7] && !BlockOld.opaqueCubeLookup[i12]) {
+						b13 = 3;
+					}
+
+					if((BlockOld.opaqueCubeLookup[i7] || BlockOld.opaqueCubeLookup[i12]) && !BlockOld.opaqueCubeLookup[i6] && !BlockOld.opaqueCubeLookup[i11]) {
+						b13 = 2;
+					}
+
+					return (integer5 == b13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + i10;
+				} else {
+					return this.blockIndexInTexture;
+				}
+			} else if(integer5 != 2 && integer5 != 3) {
+				i10 = 0;
+				if(i6 == this.blockID) {
+					i10 = -1;
+				}
+
+				i11 = abt.getBlockId(integer2 - 1, integer3, i6 == this.blockID ? integer4 - 1 : integer4 + 1);
+				i12 = abt.getBlockId(integer2 + 1, integer3, i6 == this.blockID ? integer4 - 1 : integer4 + 1);
+				if(integer5 == 4) {
+					i10 = -1 - i10;
+				}
+
+				b13 = 5;
+				if((BlockOld.opaqueCubeLookup[i8] || BlockOld.opaqueCubeLookup[i11]) && !BlockOld.opaqueCubeLookup[i9] && !BlockOld.opaqueCubeLookup[i12]) {
+					b13 = 5;
+				}
+
+				if((BlockOld.opaqueCubeLookup[i9] || BlockOld.opaqueCubeLookup[i12]) && !BlockOld.opaqueCubeLookup[i8] && !BlockOld.opaqueCubeLookup[i11]) {
+					b13 = 4;
+				}
+
+				return (integer5 == b13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + i10;
+			} else {
+				return this.blockIndexInTexture;
+			}
+		}
+	}
+
+	public int getBlockTextureFromSide(int integer) {
+		return integer == 1 ? this.blockIndexInTexture - 1 : (integer == 0 ? this.blockIndexInTexture - 1 : (integer == 3 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture));
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		int i5 = 0;
+		if(vg.getBlockId(integer2 - 1, integer3, integer4) == this.blockID) {
+			++i5;
+		}
+
+		if(vg.getBlockId(integer2 + 1, integer3, integer4) == this.blockID) {
+			++i5;
+		}
+
+		if(vg.getBlockId(integer2, integer3, integer4 - 1) == this.blockID) {
+			++i5;
+		}
+
+		if(vg.getBlockId(integer2, integer3, integer4 + 1) == this.blockID) {
+			++i5;
+		}
+
+		return i5 > 1 ? false : (this.isThereANeighborChest(vg, integer2 - 1, integer3, integer4) ? false : (this.isThereANeighborChest(vg, integer2 + 1, integer3, integer4) ? false : (this.isThereANeighborChest(vg, integer2, integer3, integer4 - 1) ? false : !this.isThereANeighborChest(vg, integer2, integer3, integer4 + 1))));
+	}
+
+	private boolean isThereANeighborChest(World vg, int integer2, int integer3, int integer4) {
+		return vg.getBlockId(integer2, integer3, integer4) != this.blockID ? false : (vg.getBlockId(integer2 - 1, integer3, integer4) == this.blockID ? true : (vg.getBlockId(integer2 + 1, integer3, integer4) == this.blockID ? true : (vg.getBlockId(integer2, integer3, integer4 - 1) == this.blockID ? true : vg.getBlockId(integer2, integer3, integer4 + 1) == this.blockID)));
+	}
+
+	public void onBlockRemoval(World vg, int integer2, int integer3, int integer4) {
+		TileEntityChest tileEntityChest5 = (TileEntityChest)vg.getBlockTileEntity(integer2, integer3, integer4);
+
+		for(int i6 = 0; i6 < tileEntityChest5.getSizeInventory(); ++i6) {
+			ItemStack itemStack7 = tileEntityChest5.getStackInSlot(i6);
+			if(itemStack7 != null) {
+				float f8 = this.random.nextFloat() * 0.8F + 0.1F;
+				float f9 = this.random.nextFloat() * 0.8F + 0.1F;
+				float f10 = this.random.nextFloat() * 0.8F + 0.1F;
+
+				while(itemStack7.stackSize > 0) {
+					int i11 = this.random.nextInt(21) + 10;
+					if(i11 > itemStack7.stackSize) {
+						i11 = itemStack7.stackSize;
+					}
+
+					itemStack7.stackSize -= i11;
+					EntityItem entityItem12 = new EntityItem(vg, (double)((float)integer2 + f8), (double)((float)integer3 + f9), (double)((float)integer4 + f10), new ItemStack(itemStack7.itemID, i11, itemStack7.itemDmg));
+					float f13 = 0.05F;
+					entityItem12.motionX = (double)((float)this.random.nextGaussian() * f13);
+					entityItem12.motionY = (double)((float)this.random.nextGaussian() * f13 + 0.2F);
+					entityItem12.motionZ = (double)((float)this.random.nextGaussian() * f13);
+					vg.spawnEntityInWorld(entityItem12);
+				}
+			}
+		}
+
+		super.onBlockRemoval(vg, integer2, integer3, integer4);
+	}
+
+	public boolean blockActivated(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+		Object object6 = (TileEntityChest)vg.getBlockTileEntity(integer2, integer3, integer4);
+		if(vg.isBlockNormalCube(integer2, integer3 + 1, integer4)) {
+			return true;
+		} else if(vg.getBlockId(integer2 - 1, integer3, integer4) == this.blockID && vg.isBlockNormalCube(integer2 - 1, integer3 + 1, integer4)) {
+			return true;
+		} else if(vg.getBlockId(integer2 + 1, integer3, integer4) == this.blockID && vg.isBlockNormalCube(integer2 + 1, integer3 + 1, integer4)) {
+			return true;
+		} else if(vg.getBlockId(integer2, integer3, integer4 - 1) == this.blockID && vg.isBlockNormalCube(integer2, integer3 + 1, integer4 - 1)) {
+			return true;
+		} else if(vg.getBlockId(integer2, integer3, integer4 + 1) == this.blockID && vg.isBlockNormalCube(integer2, integer3 + 1, integer4 + 1)) {
+			return true;
+		} else {
+			if(vg.getBlockId(integer2 - 1, integer3, integer4) == this.blockID) {
+				object6 = new InventoryLargeChest("Large chest", (TileEntityChest)vg.getBlockTileEntity(integer2 - 1, integer3, integer4), (IInventory)object6);
+			}
+
+			if(vg.getBlockId(integer2 + 1, integer3, integer4) == this.blockID) {
+				object6 = new InventoryLargeChest("Large chest", (IInventory)object6, (TileEntityChest)vg.getBlockTileEntity(integer2 + 1, integer3, integer4));
+			}
+
+			if(vg.getBlockId(integer2, integer3, integer4 - 1) == this.blockID) {
+				object6 = new InventoryLargeChest("Large chest", (TileEntityChest)vg.getBlockTileEntity(integer2, integer3, integer4 - 1), (IInventory)object6);
+			}
+
+			if(vg.getBlockId(integer2, integer3, integer4 + 1) == this.blockID) {
+				object6 = new InventoryLargeChest("Large chest", (IInventory)object6, (TileEntityChest)vg.getBlockTileEntity(integer2, integer3, integer4 + 1));
+			}
+
+			gb.displayGUIChest((IInventory)object6);
+			return true;
+		}
+	}
+
+	protected TileEntity getBlockEntity() {
+		return new TileEntityChest();
+	}
+}
--- net/minecraft/src/EntityRainFX.java
+++ net/minecraft/src/EntityRainFX.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
 public class EntityRainFX extends EntityFX {
-	public EntityRainFX(World var1, double var2, double var4, double var6) {
-		super(var1, var2, var4, var6, 0.0D, 0.0D, 0.0D);
+	public EntityRainFX(World vg, double double2, double double3, double double4) {
+		super(vg, double2, double3, double4, 0.0D, 0.0D, 0.0D);
 		this.motionX *= (double)0.3F;
 		this.motionY = (double)((float)Math.random() * 0.2F + 0.1F);
 		this.motionZ *= (double)0.3F;
@@ -15,8 +15,8 @@
 		this.particleMaxAge = (int)(8.0D / (Math.random() * 0.8D + 0.2D));
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		super.renderParticle(var1, var2, var3, var4, var5, var6, var7);
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		super.renderParticle(tessellator, renderPartialTick, xOffset, yOffset, zOffset, xOffset2, zOffset2);
 	}
 
 	public void onUpdate() {
@@ -41,10 +41,10 @@
 			this.motionZ *= (double)0.7F;
 		}
 
-		Material var1 = this.worldObj.getBlockMaterial(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ));
-		if(var1.getIsLiquid() || var1.isSolid()) {
-			double var2 = (double)((float)(MathHelper.floor_double(this.posY) + 1) - BlockFluid.getFluidHeightPercent(this.worldObj.getBlockMetadata(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ))));
-			if(this.posY < var2) {
+		Material material1 = this.worldObj.getBlockMaterial(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ));
+		if(material1.getIsLiquid() || material1.isSolid()) {
+			double d2 = (double)((float)(MathHelper.floor_double(this.posY) + 1) - BlockFluid.getFluidHeightPercent(this.worldObj.getBlockMetadata(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ))));
+			if(this.posY < d2) {
 				this.setEntityDead();
 			}
 		}
--- net/minecraft/src/BlockStairs.java
+++ net/minecraft/src/BlockStairs.java
@@ -6,12 +6,12 @@
 public class BlockStairs extends Block {
 	private Block modelBlock;
 
-	protected BlockStairs(int var1, Block var2) {
-		super(var1, var2.blockIndexInTexture, var2.material);
-		this.modelBlock = var2;
-		this.setHardness(var2.hardness);
-		this.setResistance(var2.resistance / 3.0F);
-		this.setStepSound(var2.stepSound);
+	protected BlockStairs(int id, Block modelBlock) {
+		super(id, modelBlock.blockIndexInTexture, modelBlock.material);
+		this.modelBlock = modelBlock;
+		this.setHardness(modelBlock.hardness);
+		this.setResistance(modelBlock.resistance / 3.0F);
+		this.setStepSound(modelBlock.stepSound);
 	}
 
 	public boolean isOpaqueCube() {
@@ -26,226 +26,227 @@
 		return 10;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return super.shouldSideBeRendered(var1, var2, var3, var4, var5);
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return super.shouldSideBeRendered(blockAccess, x, y, z, side);
 	}
 
-	public void getCollidingBoundingBoxes(World var1, int var2, int var3, int var4, AxisAlignedBB var5, ArrayList var6) {
-		int var7 = var1.getBlockMetadata(var2, var3, var4);
-		if(var7 == 0) {
+	public void getCollidingBoundingBoxes(World world, int x, int y, int z, AxisAlignedBB aabb, ArrayList arrayList, Entity xy) {
+		int i8 = world.getBlockMetadata(x, y, z);
+		if(i8 == 0) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList, xy);
 			this.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		} else if(var7 == 1) {
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList, xy);
+		} else if(i8 == 1) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 1.0F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList, xy);
 			this.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		} else if(var7 == 2) {
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList, xy);
+		} else if(i8 == 2) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 0.5F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList, xy);
 			this.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 1.0F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		} else if(var7 == 3) {
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList, xy);
+		} else if(i8 == 3) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList, xy);
 			this.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList, xy);
 		}
 
 		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!var1.multiplayerWorld) {
-			if(var1.getBlockMaterial(var2, var3 + 1, var4).isSolid()) {
-				var1.setBlockWithNotify(var2, var3, var4, this.modelBlock.blockID);
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(!world.multiplayerWorld) {
+			if(world.getBlockMaterial(x, y + 1, z).isSolid()) {
+				world.setBlockWithNotify(x, y, z, this.modelBlock.blockID);
 			} else {
-				this.updateState(var1, var2, var3, var4);
-				this.updateState(var1, var2 + 1, var3 - 1, var4);
-				this.updateState(var1, var2 - 1, var3 - 1, var4);
-				this.updateState(var1, var2, var3 - 1, var4 - 1);
-				this.updateState(var1, var2, var3 - 1, var4 + 1);
-				this.updateState(var1, var2 + 1, var3 + 1, var4);
-				this.updateState(var1, var2 - 1, var3 + 1, var4);
-				this.updateState(var1, var2, var3 + 1, var4 - 1);
-				this.updateState(var1, var2, var3 + 1, var4 + 1);
-			}
-
-			this.modelBlock.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		}
-	}
-
-	private void updateState(World var1, int var2, int var3, int var4) {
-		if(this.isBlockStair(var1, var2, var3, var4)) {
-			byte var5 = -1;
-			if(this.isBlockStair(var1, var2 + 1, var3 + 1, var4)) {
-				var5 = 0;
-			}
-
-			if(this.isBlockStair(var1, var2 - 1, var3 + 1, var4)) {
-				var5 = 1;
-			}
-
-			if(this.isBlockStair(var1, var2, var3 + 1, var4 + 1)) {
-				var5 = 2;
-			}
-
-			if(this.isBlockStair(var1, var2, var3 + 1, var4 - 1)) {
-				var5 = 3;
-			}
-
-			if(var5 < 0) {
-				if(this.isBlockSolid(var1, var2 + 1, var3, var4) && !this.isBlockSolid(var1, var2 - 1, var3, var4)) {
-					var5 = 0;
-				}
-
-				if(this.isBlockSolid(var1, var2 - 1, var3, var4) && !this.isBlockSolid(var1, var2 + 1, var3, var4)) {
-					var5 = 1;
-				}
-
-				if(this.isBlockSolid(var1, var2, var3, var4 + 1) && !this.isBlockSolid(var1, var2, var3, var4 - 1)) {
-					var5 = 2;
-				}
-
-				if(this.isBlockSolid(var1, var2, var3, var4 - 1) && !this.isBlockSolid(var1, var2, var3, var4 + 1)) {
-					var5 = 3;
-				}
-			}
-
-			if(var5 < 0) {
-				if(this.isBlockStair(var1, var2 - 1, var3 - 1, var4)) {
-					var5 = 0;
-				}
-
-				if(this.isBlockStair(var1, var2 + 1, var3 - 1, var4)) {
-					var5 = 1;
-				}
-
-				if(this.isBlockStair(var1, var2, var3 - 1, var4 - 1)) {
-					var5 = 2;
-				}
-
-				if(this.isBlockStair(var1, var2, var3 - 1, var4 + 1)) {
-					var5 = 3;
-				}
-			}
-
-			if(var5 >= 0) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var5);
-			}
-
-		}
-	}
-
-	private boolean isBlockSolid(World var1, int var2, int var3, int var4) {
-		return var1.getBlockMaterial(var2, var3, var4).isSolid();
-	}
-
-	private boolean isBlockStair(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3, var4);
-		return var5 == 0 ? false : Block.blocksList[var5].getRenderType() == 10;
-	}
-
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-		this.modelBlock.randomDisplayTick(var1, var2, var3, var4, var5);
-	}
-
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.modelBlock.onBlockClicked(var1, var2, var3, var4, var5);
-	}
-
-	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-		this.modelBlock.onBlockDestroyedByPlayer(var1, var2, var3, var4, var5);
-	}
-
-	public float getBlockBrightness(IBlockAccess var1, int var2, int var3, int var4) {
-		return this.modelBlock.getBlockBrightness(var1, var2, var3, var4);
-	}
-
-	public float getExplosionResistance(Entity var1) {
-		return this.modelBlock.getExplosionResistance(var1);
+				this.updateState(world, x, y, z);
+				this.updateState(world, x + 1, y - 1, z);
+				this.updateState(world, x - 1, y - 1, z);
+				this.updateState(world, x, y - 1, z - 1);
+				this.updateState(world, x, y - 1, z + 1);
+				this.updateState(world, x + 1, y + 1, z);
+				this.updateState(world, x - 1, y + 1, z);
+				this.updateState(world, x, y + 1, z - 1);
+				this.updateState(world, x, y + 1, z + 1);
+			}
+
+			this.modelBlock.onNeighborBlockChange(world, x, y, z, flag);
+		}
+
+	}
+
+	private void updateState(World world, int x, int y, int z) {
+		if(this.isBlockStair(world, x, y, z)) {
+			byte b5 = -1;
+			if(this.isBlockStair(world, x + 1, y + 1, z)) {
+				b5 = 0;
+			}
+
+			if(this.isBlockStair(world, x - 1, y + 1, z)) {
+				b5 = 1;
+			}
+
+			if(this.isBlockStair(world, x, y + 1, z + 1)) {
+				b5 = 2;
+			}
+
+			if(this.isBlockStair(world, x, y + 1, z - 1)) {
+				b5 = 3;
+			}
+
+			if(b5 < 0) {
+				if(this.isBlockSolid(world, x + 1, y, z) && !this.isBlockSolid(world, x - 1, y, z)) {
+					b5 = 0;
+				}
+
+				if(this.isBlockSolid(world, x - 1, y, z) && !this.isBlockSolid(world, x + 1, y, z)) {
+					b5 = 1;
+				}
+
+				if(this.isBlockSolid(world, x, y, z + 1) && !this.isBlockSolid(world, x, y, z - 1)) {
+					b5 = 2;
+				}
+
+				if(this.isBlockSolid(world, x, y, z - 1) && !this.isBlockSolid(world, x, y, z + 1)) {
+					b5 = 3;
+				}
+			}
+
+			if(b5 < 0) {
+				if(this.isBlockStair(world, x - 1, y - 1, z)) {
+					b5 = 0;
+				}
+
+				if(this.isBlockStair(world, x + 1, y - 1, z)) {
+					b5 = 1;
+				}
+
+				if(this.isBlockStair(world, x, y - 1, z - 1)) {
+					b5 = 2;
+				}
+
+				if(this.isBlockStair(world, x, y - 1, z + 1)) {
+					b5 = 3;
+				}
+			}
+
+			if(b5 >= 0) {
+				world.setBlockMetadataWithNotify(x, y, z, b5);
+			}
+		}
+
+	}
+
+	private boolean isBlockSolid(World world, int x, int y, int z) {
+		return world.getBlockMaterial(x, y, z).isSolid();
+	}
+
+	private boolean isBlockStair(World world, int x, int y, int z) {
+		int i5 = world.getBlockId(x, y, z);
+		return i5 == 0 ? false : Block.blocksList[i5].getRenderType() == 10;
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+		this.modelBlock.randomDisplayTick(worldObj, x, y, z, rand);
+	}
+
+	public void onBlockClicked(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.modelBlock.onBlockClicked(world, x, y, z, entityPlayer);
+	}
+
+	public void onBlockDestroyedByPlayer(World world, int x, int y, int z, int flag) {
+		this.modelBlock.onBlockDestroyedByPlayer(world, x, y, z, flag);
+	}
+
+	public float getBlockBrightness(IBlockAccess blockAccess, int x, int y, int z) {
+		return this.modelBlock.getBlockBrightness(blockAccess, x, y, z);
+	}
+
+	public float getExplosionResistance(Entity entity) {
+		return this.modelBlock.getExplosionResistance(entity);
 	}
 
 	public int getRenderBlockPass() {
 		return this.modelBlock.getRenderBlockPass();
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return this.modelBlock.idDropped(var1, var2);
-	}
-
-	public int quantityDropped(Random var1) {
-		return this.modelBlock.quantityDropped(var1);
-	}
-
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, var2);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return this.modelBlock.getBlockTextureFromSide(var1);
-	}
-
-	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return this.modelBlock.getBlockTexture(var1, var2, var3, var4, var5);
+	public int idDropped(int count, Random random) {
+		return this.modelBlock.idDropped(count, random);
+	}
+
+	public int quantityDropped(Random random) {
+		return this.modelBlock.quantityDropped(random);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return this.modelBlock.getBlockTextureFromSideAndMetadata(side, metadata);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return this.modelBlock.getBlockTextureFromSide(side);
+	}
+
+	public int getBlockTexture(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return this.modelBlock.getBlockTexture(blockAccess, x, y, z, side);
 	}
 
 	public int tickRate() {
 		return this.modelBlock.tickRate();
 	}
 
-	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		return this.modelBlock.getSelectedBoundingBoxFromPool(var1, var2, var3, var4);
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		return this.modelBlock.getSelectedBoundingBoxFromPool(worldObj, x, y, z);
 	}
 
-	public void velocityToAddToEntity(World var1, int var2, int var3, int var4, Entity var5, Vec3D var6) {
-		this.modelBlock.velocityToAddToEntity(var1, var2, var3, var4, var5, var6);
+	public void velocityToAddToEntity(World world, int x, int y, int z, Entity entity, Vec3D vector) {
+		this.modelBlock.velocityToAddToEntity(world, x, y, z, entity, vector);
 	}
 
 	public boolean isCollidable() {
 		return this.modelBlock.isCollidable();
 	}
 
-	public boolean canCollideCheck(int var1, boolean var2) {
-		return this.modelBlock.canCollideCheck(var1, var2);
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return this.modelBlock.canPlaceBlockAt(var1, var2, var3, var4);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		this.onNeighborBlockChange(var1, var2, var3, var4, 0);
-		this.modelBlock.onBlockAdded(var1, var2, var3, var4);
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		this.modelBlock.onBlockRemoval(var1, var2, var3, var4);
-	}
-
-	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		this.modelBlock.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
-	}
-
-	public void dropBlockAsItem(World var1, int var2, int var3, int var4, int var5) {
-		this.modelBlock.dropBlockAsItem(var1, var2, var3, var4, var5);
-	}
-
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-		this.modelBlock.onEntityWalking(var1, var2, var3, var4, var5);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		this.modelBlock.updateTick(var1, var2, var3, var4, var5);
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		return this.modelBlock.blockActivated(var1, var2, var3, var4, var5);
-	}
-
-	public void onBlockDestroyedByExplosion(World var1, int var2, int var3, int var4) {
-		this.modelBlock.onBlockDestroyedByExplosion(var1, var2, var3, var4);
+	public boolean canCollideCheck(int metadata, boolean boolean2) {
+		return this.modelBlock.canCollideCheck(metadata, boolean2);
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return this.modelBlock.canPlaceBlockAt(world, x, y, z);
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		this.onNeighborBlockChange(world, x, y, z, 0);
+		this.modelBlock.onBlockAdded(world, x, y, z);
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		this.modelBlock.onBlockRemoval(world, x, y, z);
+	}
+
+	public void dropBlockAsItemWithChance(World world, int x, int y, int z, int metadata, float chance) {
+		this.modelBlock.dropBlockAsItemWithChance(world, x, y, z, metadata, chance);
+	}
+
+	public void dropBlockAsItem(World world, int x, int y, int z, int metadata) {
+		this.modelBlock.dropBlockAsItem(world, x, y, z, metadata);
+	}
+
+	public void onEntityWalking(World world, int x, int y, int z, Entity entity) {
+		this.modelBlock.onEntityWalking(world, x, y, z, entity);
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		this.modelBlock.updateTick(world, x, y, z, random);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		return this.modelBlock.blockActivated(world, x, y, z, entityPlayer);
+	}
+
+	public void onBlockDestroyedByExplosion(World world, int x, int y, int z) {
+		this.modelBlock.onBlockDestroyedByExplosion(world, x, y, z);
 	}
 }
--- net/minecraft/src/EntityBubbleFX.java
+++ net/minecraft/src/EntityBubbleFX.java
@@ -1,17 +1,17 @@
 package net.minecraft.src;
 
 public class EntityBubbleFX extends EntityFX {
-	public EntityBubbleFX(World var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-		super(var1, var2, var4, var6, var8, var10, var12);
+	public EntityBubbleFX(World worldObj, double x, double y, double z, double motionX, double motionY, double motionZ) {
+		super(worldObj, x, y, z, motionX, motionY, motionZ);
 		this.particleRed = 1.0F;
 		this.particleGreen = 1.0F;
 		this.particleBlue = 1.0F;
 		this.particleTextureIndex = 32;
 		this.setSize(0.02F, 0.02F);
 		this.particleScale *= this.rand.nextFloat() * 0.6F + 0.2F;
-		this.motionX = var8 * (double)0.2F + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.02F);
-		this.motionY = var10 * (double)0.2F + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.02F);
-		this.motionZ = var12 * (double)0.2F + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.02F);
+		this.motionX = motionX * (double)0.2F + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.02F);
+		this.motionY = motionY * (double)0.2F + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.02F);
+		this.motionZ = motionZ * (double)0.2F + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.02F);
 		this.particleMaxAge = (int)(8.0D / (Math.random() * 0.8D + 0.2D));
 	}
 
--- /dev/null
+++ net/minecraft/src/HubFragment2.java
@@ -1,0 +1,18 @@
+package net.minecraft.src;
+
+public class HubFragment2 extends HubWorldUnknownClass2 {
+	public HubFragment2(HubWorld wv, int integer2, int integer3, int integer4) {
+		super(wv, integer2, integer3, integer4);
+	}
+
+	public void func_9822_96pkMbVA643Z1Y78zU1zOHbm0WbR47PCGp9q1ZyTK64G0pr0ViUREK2TCos1() {
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 0, 5, 16, 0, 10, ExtBlocks.dimensionFloorBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(5, 0, 0, 10, 0, 16, ExtBlocks.dimensionFloorBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 1, 5, 16, 3, 10, ExtBlocks.dimensionWallBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(5, 0, 0, 10, 3, 16, ExtBlocks.dimensionWallBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 4, 5, 16, 4, 10, ExtBlocks.dimensionFloorBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(5, 4, 0, 10, 4, 16, ExtBlocks.dimensionFloorBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 1, 6, 16, 3, 9, 0);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(6, 0, 0, 9, 3, 16, 0);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockDoorOld.java
@@ -1,0 +1,195 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockDoorOld extends BlockOld {
+	protected BlockDoorOld(int integer, Material sx) {
+		super(integer, sx);
+		this.blockIndexInTexture = 97;
+		if(sx == Material.iron) {
+			++this.blockIndexInTexture;
+		}
+
+		float f3 = 0.5F;
+		float f4 = 1.0F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, f4, 0.5F + f3);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int integer1, int integer2) {
+		if(integer1 != 0 && integer1 != 1) {
+			int i3 = this.getState(integer2);
+			if((i3 == 0 || i3 == 2) ^ integer1 <= 3) {
+				return this.blockIndexInTexture;
+			} else {
+				int i4 = i3 / 2 + (integer1 & 1 ^ i3);
+				i4 += (integer2 & 4) / 4;
+				int i5 = this.blockIndexInTexture - (integer2 & 8) * 2;
+				if((i4 & 1) != 0) {
+					i5 = -i5;
+				}
+
+				return i5;
+			}
+		} else {
+			return this.blockIndexInTexture;
+		}
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 7;
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		this.setBlockBoundsBasedOnState(vg, integer2, integer3, integer4);
+		return super.getSelectedBoundingBoxFromPool(vg, integer2, integer3, integer4);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		this.setBlockBoundsBasedOnState(vg, integer2, integer3, integer4);
+		return super.getCollisionBoundingBoxFromPool(vg, integer2, integer3, integer4);
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		this.setDoorRotation(this.getState(abt.getBlockMetadata(integer2, integer3, integer4)));
+	}
+
+	public void setDoorRotation(int integer) {
+		float f2 = 0.1875F;
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F, 1.0F);
+		if(integer == 0) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f2);
+		}
+
+		if(integer == 1) {
+			this.setBlockBounds(1.0F - f2, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(integer == 2) {
+			this.setBlockBounds(0.0F, 0.0F, 1.0F - f2, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(integer == 3) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, f2, 1.0F, 1.0F);
+		}
+
+	}
+
+	public void onBlockClicked(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+		this.blockActivated(vg, integer2, integer3, integer4, gb);
+	}
+
+	public boolean blockActivated(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+		if(this.material == Material.iron) {
+			return true;
+		} else {
+			int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+			if((i6 & 8) != 0) {
+				if(vg.getBlockId(integer2, integer3 - 1, integer4) == this.blockID) {
+					this.blockActivated(vg, integer2, integer3 - 1, integer4, gb);
+				}
+
+				return true;
+			} else {
+				if(vg.getBlockId(integer2, integer3 + 1, integer4) == this.blockID) {
+					vg.setBlockMetadataWithNotify(integer2, integer3 + 1, integer4, (i6 ^ 4) + 8);
+				}
+
+				vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i6 ^ 4);
+				vg.markBlocksDirty(integer2, integer3 - 1, integer4, integer2, integer3, integer4);
+				if(Math.random() < 0.5D) {
+					vg.playSoundEffect((double)integer2 + 0.5D, (double)integer3 + 0.5D, (double)integer4 + 0.5D, "random.door_open", 1.0F, vg.rand.nextFloat() * 0.1F + 0.9F);
+				} else {
+					vg.playSoundEffect((double)integer2 + 0.5D, (double)integer3 + 0.5D, (double)integer4 + 0.5D, "random.door_close", 1.0F, vg.rand.nextFloat() * 0.1F + 0.9F);
+				}
+
+				return true;
+			}
+		}
+	}
+
+	public void onPoweredBlockChange(World vg, int integer2, int integer3, int integer4, boolean boolean5) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		if((i6 & 8) != 0) {
+			if(vg.getBlockId(integer2, integer3 - 1, integer4) == this.blockID) {
+				this.onPoweredBlockChange(vg, integer2, integer3 - 1, integer4, boolean5);
+			}
+
+		} else {
+			boolean z7 = (vg.getBlockMetadata(integer2, integer3, integer4) & 4) > 0;
+			if(z7 != boolean5) {
+				if(vg.getBlockId(integer2, integer3 + 1, integer4) == this.blockID) {
+					vg.setBlockMetadataWithNotify(integer2, integer3 + 1, integer4, (i6 ^ 4) + 8);
+				}
+
+				vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i6 ^ 4);
+				vg.markBlocksDirty(integer2, integer3 - 1, integer4, integer2, integer3, integer4);
+				if(Math.random() < 0.5D) {
+					vg.playSoundEffect((double)integer2 + 0.5D, (double)integer3 + 0.5D, (double)integer4 + 0.5D, "random.door_open", 1.0F, vg.rand.nextFloat() * 0.1F + 0.9F);
+				} else {
+					vg.playSoundEffect((double)integer2 + 0.5D, (double)integer3 + 0.5D, (double)integer4 + 0.5D, "random.door_close", 1.0F, vg.rand.nextFloat() * 0.1F + 0.9F);
+				}
+
+			}
+		}
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		if((i6 & 8) != 0) {
+			if(vg.getBlockId(integer2, integer3 - 1, integer4) != this.blockID) {
+				vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+			}
+
+			if(integer5 > 0 && BlockOld.blocksList[integer5].canProvidePower()) {
+				this.onNeighborBlockChange(vg, integer2, integer3 - 1, integer4, integer5);
+			}
+		} else {
+			boolean z7 = false;
+			if(vg.getBlockId(integer2, integer3 + 1, integer4) != this.blockID) {
+				vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+				z7 = true;
+			}
+
+			if(!vg.isBlockNormalCube(integer2, integer3 - 1, integer4)) {
+				vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+				z7 = true;
+				if(vg.getBlockId(integer2, integer3 + 1, integer4) == this.blockID) {
+					vg.setBlockWithNotify(integer2, integer3 + 1, integer4, 0);
+				}
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(vg, integer2, integer3, integer4, i6);
+			} else if(integer5 > 0 && BlockOld.blocksList[integer5].canProvidePower()) {
+				boolean z8 = vg.isBlockIndirectlyGettingPowered(integer2, integer3, integer4) || vg.isBlockIndirectlyGettingPowered(integer2, integer3 + 1, integer4);
+				this.onPoweredBlockChange(vg, integer2, integer3, integer4, z8);
+			}
+		}
+
+	}
+
+	public int idDropped(int integer, Random random) {
+		return (integer & 8) != 0 ? 0 : (this.material == Material.iron ? Item.doorSteel.shiftedIndex : Item.doorWood.shiftedIndex);
+	}
+
+	public MovingObjectPosition collisionRayTrace(World vg, int integer2, int integer3, int integer4, Vec3D adm5, Vec3D adm6) {
+		this.setBlockBoundsBasedOnState(vg, integer2, integer3, integer4);
+		return super.collisionRayTrace(vg, integer2, integer3, integer4, adm5, adm6);
+	}
+
+	public int getState(int integer) {
+		return (integer & 4) == 0 ? integer - 1 & 3 : integer & 3;
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		return integer3 >= 127 ? false : vg.isBlockNormalCube(integer2, integer3 - 1, integer4) && super.canPlaceBlockAt(vg, integer2, integer3, integer4) && super.canPlaceBlockAt(vg, integer2, integer3 + 1, integer4);
+	}
+}
--- net/minecraft/src/RecipesArmor.java
+++ net/minecraft/src/RecipesArmor.java
@@ -2,15 +2,15 @@
 
 public class RecipesArmor {
 	private String[][] recipePatterns = new String[][]{{"XXX", "X X"}, {"X X", "XXX", "XXX"}, {"XXX", "X X", "X X"}, {"X X", "X X"}};
-	private Object[][] recipeItems = new Object[][]{{Item.leather, Block.fire, Item.ingotIron, Item.diamond, Item.ingotGold}, {Item.helmetLeather, Item.helmetChain, Item.helmetSteel, Item.helmetDiamond, Item.helmetGold}, {Item.plateLeather, Item.plateChain, Item.plateSteel, Item.plateDiamond, Item.plateGold}, {Item.legsLeather, Item.legsChain, Item.legsSteel, Item.legsDiamond, Item.legsGold}, {Item.bootsLeather, Item.bootsChain, Item.bootsSteel, Item.bootsDiamond, Item.bootsGold}};
-
-	public void addRecipes(CraftingManager var1) {
-		for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
-			Object var3 = this.recipeItems[0][var2];
-
-			for(int var4 = 0; var4 < this.recipeItems.length - 1; ++var4) {
-				Item var5 = (Item)this.recipeItems[var4 + 1][var2];
-				var1.addRecipe(new ItemStack(var5), new Object[]{this.recipePatterns[var4], Character.valueOf('X'), var3});
+	private Object[][] recipeItems = new Object[][]{{Item.leather, ExtItems.ObserverFur, Item.ingotIron, Item.diamond, Item.ingotGold}, {Item.helmetLeather, Item.helmetChain, Item.helmetSteel, Item.helmetDiamond, Item.helmetGold}, {Item.plateLeather, Item.plateChain, Item.plateSteel, Item.plateDiamond, Item.plateGold}, {Item.legsLeather, Item.legsChain, Item.legsSteel, Item.legsDiamond, Item.legsGold}, {Item.bootsLeather, Item.bootsChain, Item.bootsSteel, Item.bootsDiamond, Item.bootsGold}};
+
+	public void addRecipes(CraftingManager craftingManager) {
+		for(int i2 = 0; i2 < this.recipeItems[0].length; ++i2) {
+			Object object3 = this.recipeItems[0][i2];
+
+			for(int i4 = 0; i4 < this.recipeItems.length - 1; ++i4) {
+				Item item5 = (Item)this.recipeItems[i4 + 1][i2];
+				craftingManager.addRecipe(new ItemStack(item5), new Object[]{this.recipePatterns[i4], 'X', object3});
 			}
 		}
 
--- net/minecraft/src/WorldIso.java
+++ net/minecraft/src/WorldIso.java
@@ -2,15 +2,15 @@
 
 import java.io.File;
 
-class WorldIso extends World {
+public class WorldIso extends World {
 	final CanvasIsomPreview isomPreview;
 
-	WorldIso(CanvasIsomPreview var1, File var2, String var3) {
-		super(var2, var3);
-		this.isomPreview = var1;
+	WorldIso(CanvasIsomPreview _34BE7AAhcY7AVgV68WH9t6HE23HX0E7VU2ivmI9wAoimqdXd3nLGeTagVsFF1RT890M5j2wLS6w457dlsmgC6M2d5k5sz8i0, File file, String string) {
+		super(file, string);
+		this.isomPreview = _34BE7AAhcY7AVgV68WH9t6HE23HX0E7VU2ivmI9wAoimqdXd3nLGeTagVsFF1RT890M5j2wLS6w457dlsmgC6M2d5k5sz8i0;
 	}
 
-	protected IChunkProvider getChunkProvider(File var1) {
-		return new ChunkProviderIso(this, new ChunkLoader(var1, false));
+	protected IChunkProvider getChunkProvider(File saveDir) {
+		return new ChunkProviderIso(this, new ChunkLoader(saveDir, false));
 	}
 }
--- /dev/null
+++ net/minecraft/src/CubeListBuilder.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class CubeListBuilder {
+	public List cubeList = new ArrayList();
+
+	public static CubeListBuilder create() {
+		return new CubeListBuilder();
+	}
+
+	public CubeListBuilder texOffs(int integer1, int integer2) {
+		this.cubeList.add(new CubeListElement(integer1, integer2));
+		return this;
+	}
+
+	public CubeListBuilder addBox(float float1, float float2, float float3, float float4, float float5, float float6, CubeDeformation qz) {
+		CubeListElement cubeListElement8 = (CubeListElement)this.cubeList.get(this.cubeList.size() - 1);
+		cubeListElement8.offsetX = float1;
+		cubeListElement8.offsetY = float2;
+		cubeListElement8.offsetZ = float3;
+		cubeListElement8.widthX = (int)float4;
+		cubeListElement8.height = (int)float5;
+		cubeListElement8.widthZ = (int)float6;
+		return this;
+	}
+
+	public CubeListBuilder mirror() {
+		((CubeListElement)this.cubeList.get(this.cubeList.size() - 1)).mirror = true;
+		return this;
+	}
+
+	public CubeListBuilder mirror(boolean boolean1) {
+		((CubeListElement)this.cubeList.get(this.cubeList.size() - 1)).mirror = boolean1;
+		return this;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EntityPongormatron.java
@@ -1,0 +1,35 @@
+package net.minecraft.src;
+
+public class EntityPongormatron extends EntityMob {
+	public boolean unusedBool2 = false;
+
+	public EntityPongormatron(World world) {
+		super(world);
+		this.texture = "/mob/pongt.png";
+		this.setSize(1.0F, 2.0F);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+	}
+
+	protected String getHurtSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected String getDeathSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected float getSoundVolume() {
+		return 0.4F;
+	}
+
+	public boolean interact(EntityPlayer entityPlayer) {
+		return false;
+	}
+}
--- net/minecraft/src/Timer.java
+++ net/minecraft/src/Timer.java
@@ -11,42 +11,42 @@
 	private long lastSyncHRClock;
 	private double timeSyncAdjustment = 1.0D;
 
-	public Timer(float var1) {
-		this.ticksPerSecond = var1;
+	public Timer(float ticksPerSecond) {
+		this.ticksPerSecond = ticksPerSecond;
 		this.lastSyncSysClock = System.currentTimeMillis();
 		this.lastSyncHRClock = System.nanoTime() / 1000000L;
 	}
 
 	public void updateTimer() {
-		long var1 = System.currentTimeMillis();
-		long var3 = var1 - this.lastSyncSysClock;
-		long var5 = System.nanoTime() / 1000000L;
-		double var9;
-		if(var3 > 1000L) {
-			long var7 = var5 - this.lastSyncHRClock;
-			var9 = (double)var3 / (double)var7;
-			this.timeSyncAdjustment += (var9 - this.timeSyncAdjustment) * (double)0.2F;
-			this.lastSyncSysClock = var1;
-			this.lastSyncHRClock = var5;
-		}
-
-		if(var3 < 0L) {
-			this.lastSyncSysClock = var1;
-			this.lastSyncHRClock = var5;
-		}
-
-		double var11 = (double)var5 / 1000.0D;
-		var9 = (var11 - this.lastHRTime) * this.timeSyncAdjustment;
-		this.lastHRTime = var11;
-		if(var9 < 0.0D) {
-			var9 = 0.0D;
-		}
-
-		if(var9 > 1.0D) {
-			var9 = 1.0D;
-		}
-
-		this.elapsedPartialTicks = (float)((double)this.elapsedPartialTicks + var9 * (double)this.timerSpeed * (double)this.ticksPerSecond);
+		long j1 = System.currentTimeMillis();
+		long j3 = j1 - this.lastSyncSysClock;
+		long j5 = System.nanoTime() / 1000000L;
+		double d7;
+		if(j3 > 1000L) {
+			long j9 = j5 - this.lastSyncHRClock;
+			d7 = (double)j3 / (double)j9;
+			this.timeSyncAdjustment += (d7 - this.timeSyncAdjustment) * (double)0.2F;
+			this.lastSyncSysClock = j1;
+			this.lastSyncHRClock = j5;
+		}
+
+		if(j3 < 0L) {
+			this.lastSyncSysClock = j1;
+			this.lastSyncHRClock = j5;
+		}
+
+		double d11 = (double)j5 / 1000.0D;
+		d7 = (d11 - this.lastHRTime) * this.timeSyncAdjustment;
+		this.lastHRTime = d11;
+		if(d7 < 0.0D) {
+			d7 = 0.0D;
+		}
+
+		if(d7 > 1.0D) {
+			d7 = 1.0D;
+		}
+
+		this.elapsedPartialTicks = (float)((double)this.elapsedPartialTicks + d7 * (double)this.timerSpeed * (double)this.ticksPerSecond);
 		this.elapsedTicks = (int)this.elapsedPartialTicks;
 		this.elapsedPartialTicks -= (float)this.elapsedTicks;
 		if(this.elapsedTicks > 10) {
--- /dev/null
+++ net/minecraft/src/VisualsReader.java
@@ -1,0 +1,146 @@
+package net.minecraft.src;
+
+import java.awt.image.BufferedImage;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+import javax.imageio.ImageIO;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.opengl.GL11;
+
+public class VisualsReader extends VisualsUnknownClass {
+	private ZipFile field_10172_571vUI1nI9vTchTM5C9H8xdh8TeB7u53h277FkE3zjWL4WzRM124lI04eRu6;
+	private int field_10171_2cUT0SUjeOMs7J6RZO3UBarVwD8a0JC8U48dhuR2R9pfyIQap1sO7FF8B3ct = -1;
+	private BufferedImage field_10170_2gve41Fd8RbvPhjqP6Qn697JjCjxn62kB6A60Dtr7TUxCo6cL9421hPZZ16W;
+	private File field_10173_7RJ0G7RpLs64I31WE97VKAl1w2b68fgkGi6s73Jx0s1KwfPGh4l4qfINn508;
+
+	public VisualsReader(File file) {
+		this.field_10166_0Sg7537VnLZ7du5FsLln7EYJ7tLG9LfdbFsVG53zuLLa94D21JXk6aie9tls = file.getName();
+		this.field_10173_7RJ0G7RpLs64I31WE97VKAl1w2b68fgkGi6s73Jx0s1KwfPGh4l4qfINn508 = file;
+	}
+
+	private String func_10169_27DPOA93HRGUbxXTtJ13X8a2q3wp16k5W2EI2N4AGpkaM5Ca8v0hMJXB0133(String string) {
+		if(string != null && string.length() > 34) {
+			string = string.substring(0, 34);
+		}
+
+		return string;
+	}
+
+	public void func_10158_0Gpj8594Ufmy5e2AAxicC9QX8AZ598q48b12zV8cSfE61ZzMvANYL3Omgcv9(Minecraft minecraft) throws IOException {
+		ZipFile zipFile2 = null;
+		InputStream inputStream3 = null;
+
+		try {
+			zipFile2 = new ZipFile(this.field_10173_7RJ0G7RpLs64I31WE97VKAl1w2b68fgkGi6s73Jx0s1KwfPGh4l4qfINn508);
+
+			try {
+				inputStream3 = zipFile2.getInputStream(zipFile2.getEntry("pack.txt"));
+				BufferedReader bufferedReader4 = new BufferedReader(new InputStreamReader(inputStream3));
+				this.field_10168_6rK7r47m1wf6M34G2s0hL7m282kBAy4521c3axU19Y9WKmYF8gZ6ryN7JLjP = this.func_10169_27DPOA93HRGUbxXTtJ13X8a2q3wp16k5W2EI2N4AGpkaM5Ca8v0hMJXB0133(bufferedReader4.readLine());
+				this.field_10165_3AzF56gtxWJ9912dPKDPOy7hH3t9Hl1HPMnVNkT671yMpR86uFp7khyzZyaR = this.func_10169_27DPOA93HRGUbxXTtJ13X8a2q3wp16k5W2EI2N4AGpkaM5Ca8v0hMJXB0133(bufferedReader4.readLine());
+				bufferedReader4.close();
+				inputStream3.close();
+			} catch (Exception exception23) {
+			}
+
+			try {
+				this.field_10164_5N63dbka0na7Is07L9kMmSk6ZK28Ioxdll6JwQgybo1I69cauDA8U5rtDvBv = new VisualsConfiguration();
+				inputStream3 = zipFile2.getInputStream(zipFile2.getEntry("packconfig.cfg"));
+				this.field_10164_5N63dbka0na7Is07L9kMmSk6ZK28Ioxdll6JwQgybo1I69cauDA8U5rtDvBv = VisualsConfiguration.func_12190_4qG6SCyQHhAB3Z4dLMG6530SnOk4ZY0WE2d12Vzgf77VgolUcGMS3afod9NS(inputStream3);
+				inputStream3.close();
+			} catch (Exception exception22) {
+			}
+
+			try {
+				inputStream3 = zipFile2.getInputStream(zipFile2.getEntry("pack.png"));
+				this.field_10170_2gve41Fd8RbvPhjqP6Qn697JjCjxn62kB6A60Dtr7TUxCo6cL9421hPZZ16W = ImageIO.read(inputStream3);
+				inputStream3.close();
+			} catch (Exception exception21) {
+			}
+
+			try {
+				inputStream3 = zipFile2.getInputStream(zipFile2.getEntry("terrain.png"));
+				BufferedImage bufferedImage27 = ImageIO.read(inputStream3);
+				if(bufferedImage27.getWidth() != 256 || bufferedImage27.getHeight() != 512) {
+					this.field_10164_5N63dbka0na7Is07L9kMmSk6ZK28Ioxdll6JwQgybo1I69cauDA8U5rtDvBv.field_12194_99q16b50kyIAY3WydyIly32wBpFBLxi4p3yRL4x1J0O0Z0CR3wEHi9t1G3x9 = false;
+				}
+
+				inputStream3.close();
+			} catch (Exception exception24) {
+			}
+
+			zipFile2.close();
+		} catch (Exception exception25) {
+			exception25.printStackTrace();
+		} finally {
+			try {
+				inputStream3.close();
+			} catch (Exception exception20) {
+			}
+
+			try {
+				zipFile2.close();
+			} catch (Exception exception19) {
+			}
+
+		}
+
+	}
+
+	public void func_10160_6kOi4sh8w5g34shttmoUUEDgCPE5VRiNwN076cQcxuDFXDkU0y92lK2v99vL(Minecraft minecraft) {
+		if(this.field_10170_2gve41Fd8RbvPhjqP6Qn697JjCjxn62kB6A60Dtr7TUxCo6cL9421hPZZ16W != null) {
+			minecraft.renderEngine.deleteTexture(this.field_10171_2cUT0SUjeOMs7J6RZO3UBarVwD8a0JC8U48dhuR2R9pfyIQap1sO7FF8B3ct);
+		}
+
+		this.func_10163_2I13qZ82Olr559q81461XqI7EvNeguYD7GAG7DmGJf04Fu44f4iY1Oy7WJME();
+	}
+
+	public void func_10162_7X6Ocgi2aWrG07279w14Ok6jeWFPa9bmt1my2NA0a1ZEmdxx5QjSOn3mi5a8(Minecraft minecraft) {
+		if(this.field_10170_2gve41Fd8RbvPhjqP6Qn697JjCjxn62kB6A60Dtr7TUxCo6cL9421hPZZ16W != null && this.field_10171_2cUT0SUjeOMs7J6RZO3UBarVwD8a0JC8U48dhuR2R9pfyIQap1sO7FF8B3ct < 0) {
+			this.field_10171_2cUT0SUjeOMs7J6RZO3UBarVwD8a0JC8U48dhuR2R9pfyIQap1sO7FF8B3ct = minecraft.renderEngine.allocateAndSetupTexture(this.field_10170_2gve41Fd8RbvPhjqP6Qn697JjCjxn62kB6A60Dtr7TUxCo6cL9421hPZZ16W);
+		}
+
+		if(this.field_10170_2gve41Fd8RbvPhjqP6Qn697JjCjxn62kB6A60Dtr7TUxCo6cL9421hPZZ16W != null) {
+			minecraft.renderEngine.bindTexture(this.field_10171_2cUT0SUjeOMs7J6RZO3UBarVwD8a0JC8U48dhuR2R9pfyIQap1sO7FF8B3ct);
+		} else {
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, minecraft.renderEngine.getTexture("/gui/unknown_pack.png"));
+		}
+
+	}
+
+	public void func_10159_18ZVjfTsTKfB80BRv0MI82mIW7A5kEEVTFqM41a5Y88G06sn7n695Ml9CX4X() {
+		try {
+			this.field_10172_571vUI1nI9vTchTM5C9H8xdh8TeB7u53h277FkE3zjWL4WzRM124lI04eRu6 = new ZipFile(this.field_10173_7RJ0G7RpLs64I31WE97VKAl1w2b68fgkGi6s73Jx0s1KwfPGh4l4qfINn508);
+		} catch (Exception exception2) {
+		}
+
+	}
+
+	public void func_10163_2I13qZ82Olr559q81461XqI7EvNeguYD7GAG7DmGJf04Fu44f4iY1Oy7WJME() {
+		try {
+			this.field_10172_571vUI1nI9vTchTM5C9H8xdh8TeB7u53h277FkE3zjWL4WzRM124lI04eRu6.close();
+		} catch (Exception exception2) {
+		}
+
+		this.field_10172_571vUI1nI9vTchTM5C9H8xdh8TeB7u53h277FkE3zjWL4WzRM124lI04eRu6 = null;
+	}
+
+	public InputStream getResourceAsStream(String string) {
+		try {
+			ZipEntry zipEntry2 = this.field_10172_571vUI1nI9vTchTM5C9H8xdh8TeB7u53h277FkE3zjWL4WzRM124lI04eRu6.getEntry(string.substring(1));
+			if(zipEntry2 != null) {
+				return this.field_10172_571vUI1nI9vTchTM5C9H8xdh8TeB7u53h277FkE3zjWL4WzRM124lI04eRu6.getInputStream(zipEntry2);
+			}
+		} catch (Exception exception3) {
+		}
+
+		return Ext1605Utils.func_12150_5v4Cs6sI06e6Hjpg3rSI82gG008x14C2jag2OM7ADaW5U8a3DYSrf570CJm6(string);
+	}
+}
--- net/minecraft/src/GuiButton.java
+++ net/minecraft/src/GuiButton.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.GL11;
 
 public class GuiButton extends Gui {
@@ -12,63 +13,92 @@
 	public int id;
 	public boolean enabled;
 	public boolean visible;
+	public boolean field_7874_8hutMN8Nkr6540tkVq0b1457yM08Q9Ty13MenI0kbL06Yf3m8DLUel3bs5Tm;
+	public int textColorHovered;
+	public int textColorUnhovered;
+	public long field_7885_8V9j94Md79aR86aj138Uw1LB5a62IQFql5eu5V3i1ZWfbQ46z3u0vqthhNz3;
+	public final long field_7877_4s9RdDbT5Y5Oz1LLGNh3g7UJi93213FSMDu5iEiBtANiGV16140lr3Y76O2K;
 
-	public GuiButton(int var1, int var2, int var3, String var4) {
-		this(var1, var2, var3, 200, 20, var4);
+	public GuiButton(int integer1, int integer2, int integer3, String string) {
+		this(integer1, integer2, integer3, 200, 20, string);
 	}
 
-	protected GuiButton(int var1, int var2, int var3, int var4, int var5, String var6) {
-		this.width = 200;
-		this.height = 20;
+	public GuiButton(int integer1, int integer2, int integer3, int integer4, int integer5, String string) {
+		this.field_7874_8hutMN8Nkr6540tkVq0b1457yM08Q9Ty13MenI0kbL06Yf3m8DLUel3bs5Tm = false;
+		this.textColorHovered = 16777120;
+		this.textColorUnhovered = 14737632;
+		this.field_7877_4s9RdDbT5Y5Oz1LLGNh3g7UJi93213FSMDu5iEiBtANiGV16140lr3Y76O2K = 300L;
 		this.enabled = true;
 		this.visible = true;
-		this.id = var1;
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.width = var4;
-		this.height = var5;
-		this.displayString = var6;
-	}
-
-	protected int getHoverState(boolean var1) {
-		byte var2 = 1;
+		this.id = integer1;
+		this.xPosition = integer2;
+		this.yPosition = integer3;
+		this.width = integer4;
+		this.height = integer5;
+		this.displayString = string;
+		this.field_7885_8V9j94Md79aR86aj138Uw1LB5a62IQFql5eu5V3i1ZWfbQ46z3u0vqthhNz3 = System.currentTimeMillis();
+	}
+
+	public boolean func_7873_6nn76xn75jkNpKB9Sh129Q32vm9N0lG68zRy7yDWq13FtymI5qk8UIhvhIPd() {
+		return true;
+	}
+
+	protected int getHoverState(boolean mousePointerHovered) {
+		byte b2 = 1;
 		if(!this.enabled) {
-			var2 = 0;
-		} else if(var1) {
-			var2 = 2;
+			b2 = 0;
+		} else if(mousePointerHovered) {
+			b2 = 2;
 		}
 
-		return var2;
+		return b2;
 	}
 
-	public void drawButton(Minecraft var1, int var2, int var3) {
+	public void drawButton(Minecraft minecraft, int mouseX, int mouseY) {
 		if(this.visible) {
-			FontRenderer var4 = var1.fontRenderer;
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var1.renderEngine.getTexture("/gui/gui.png"));
+			ScaledResolution scaledResolution4 = new ScaledResolution(minecraft.displayWidth, minecraft.displayHeight);
+			int i5 = scaledResolution4.getScaledWidth();
+			int i6 = scaledResolution4.getScaledHeight();
+			int i7 = this.xPosition;
+			int i8 = this.yPosition;
+			long j9 = System.currentTimeMillis() - this.field_7885_8V9j94Md79aR86aj138Uw1LB5a62IQFql5eu5V3i1ZWfbQ46z3u0vqthhNz3;
+			if(this.func_7873_6nn76xn75jkNpKB9Sh129Q32vm9N0lG68zRy7yDWq13FtymI5qk8UIhvhIPd() && j9 >= 0L && j9 < 300L) {
+				float f11 = (float)j9 / 300.0F;
+				i8 = (int)((float)i8 + (float)i6 * Ext1605Utils.func_12145_369AWaIx763AmDMElKtaxw1v8736Hd9436zT4kb46Iz21Y2Nw4rxl2u27Hjk(1.0F - f11));
+			}
+
+			FontRenderer fontRenderer13 = minecraft.fontRenderer;
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, minecraft.renderEngine.getTexture("/gui/gui.png"));
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-			boolean var5 = var2 >= this.xPosition && var3 >= this.yPosition && var2 < this.xPosition + this.width && var3 < this.yPosition + this.height;
-			int var6 = this.getHoverState(var5);
-			this.drawTexturedModalRect(this.xPosition, this.yPosition, 0, 46 + var6 * 20, this.width / 2, this.height);
-			this.drawTexturedModalRect(this.xPosition + this.width / 2, this.yPosition, 200 - this.width / 2, 46 + var6 * 20, this.width / 2, this.height);
-			this.mouseDragged(var1, var2, var3);
+			this.field_7874_8hutMN8Nkr6540tkVq0b1457yM08Q9Ty13MenI0kbL06Yf3m8DLUel3bs5Tm = mouseX >= this.xPosition && mouseY >= this.yPosition && mouseX < this.xPosition + this.width && mouseY < this.yPosition + this.height;
+			int i12 = this.getHoverState(this.field_7874_8hutMN8Nkr6540tkVq0b1457yM08Q9Ty13MenI0kbL06Yf3m8DLUel3bs5Tm);
+			this.drawTexturedModalRect(i7, i8, 0, 46 + i12 * 20, this.width / 2, this.height);
+			this.drawTexturedModalRect(i7 + this.width / 2, i8, 200 - this.width / 2, 46 + i12 * 20, this.width / 2, this.height);
+			this.mouseDragged(minecraft, mouseX, mouseY);
 			if(!this.enabled) {
-				this.drawCenteredString(var4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, -6250336);
-			} else if(var5) {
-				this.drawCenteredString(var4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, 16777120);
+				this.drawCenteredString(fontRenderer13, this.displayString, i7 + this.width / 2, i8 + (this.height - 8) / 2, -6250336);
+			} else if(this.field_7874_8hutMN8Nkr6540tkVq0b1457yM08Q9Ty13MenI0kbL06Yf3m8DLUel3bs5Tm) {
+				this.drawCenteredString(fontRenderer13, this.displayString, i7 + this.width / 2, i8 + (this.height - 8) / 2, this.textColorHovered);
 			} else {
-				this.drawCenteredString(var4, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, 14737632);
+				this.drawCenteredString(fontRenderer13, this.displayString, i7 + this.width / 2, i8 + (this.height - 8) / 2, this.textColorUnhovered);
 			}
-
 		}
-	}
-
-	protected void mouseDragged(Minecraft var1, int var2, int var3) {
-	}
-
-	public void mouseReleased(int var1, int var2) {
-	}
-
-	public boolean mousePressed(Minecraft var1, int var2, int var3) {
-		return this.enabled && var2 >= this.xPosition && var3 >= this.yPosition && var2 < this.xPosition + this.width && var3 < this.yPosition + this.height;
+
+	}
+
+	public GuiButton SetTextColors(int integer1, int integer2) {
+		this.textColorHovered = integer1;
+		this.textColorUnhovered = integer2;
+		return this;
+	}
+
+	protected void mouseDragged(Minecraft minecraft, int integer2, int integer3) {
+	}
+
+	public void mouseReleased(int integer1, int integer2) {
+	}
+
+	public boolean mousePressed(Minecraft minecraft, int integer2, int integer3) {
+		return this.enabled && integer2 >= this.xPosition && integer3 >= this.yPosition && integer2 < this.xPosition + this.width && integer3 < this.yPosition + this.height;
 	}
 }
--- net/minecraft/src/Packet6SpawnPosition.java
+++ net/minecraft/src/Packet6SpawnPosition.java
@@ -8,24 +8,27 @@
 	public int xPosition;
 	public int yPosition;
 	public int zPosition;
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleSpawnPosition(this);
+	public long worldSeed;
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.worldSeed = dataInputStream.readLong();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.writeLong(this.worldSeed);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleSpawnPosition(this);
 	}
 
 	public int getPacketSize() {
-		return 12;
+		return 20;
 	}
 }
--- net/minecraft/src/Packet12PlayerLook.java
+++ net/minecraft/src/Packet12PlayerLook.java
@@ -9,23 +9,23 @@
 		this.rotating = true;
 	}
 
-	public Packet12PlayerLook(float var1, float var2, boolean var3) {
-		this.yaw = var1;
-		this.pitch = var2;
-		this.onGround = var3;
+	public Packet12PlayerLook(float yaw, float pitch, boolean onGround) {
+		this.yaw = yaw;
+		this.pitch = pitch;
+		this.onGround = onGround;
 		this.rotating = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.yaw = var1.readFloat();
-		this.pitch = var1.readFloat();
-		super.readPacketData(var1);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.yaw = dataInputStream.readFloat();
+		this.pitch = dataInputStream.readFloat();
+		super.readPacketData(dataInputStream);
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeFloat(this.yaw);
-		var1.writeFloat(this.pitch);
-		super.writePacket(var1);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeFloat(this.yaw);
+		dataOutputStream.writeFloat(this.pitch);
+		super.writePacket(dataOutputStream);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/ModelCatBomb.java
@@ -1,0 +1,28 @@
+package net.minecraft.src;
+
+public class ModelCatBomb extends EntityModel {
+	public static final ModelLayerLocation LAYER_LOCATION = new ModelLayerLocation(new ResourceLocation("modid", "catbomb"), "main");
+	private final ModelPart bb_main;
+
+	public ModelCatBomb(ModelPart xs) {
+		this.bb_main = xs.getChild("bb_main");
+	}
+
+	public static LayerDefinition createBodyLayer() {
+		MeshDefinition meshDefinition0 = new MeshDefinition();
+		PartDefinition partDefinition1 = meshDefinition0.getRoot();
+		partDefinition1.addOrReplaceChild("bb_main", CubeListBuilder.create().texOffs(0, 10).addBox(1.0F, -1.0F, -3.0F, 1.0F, 1.0F, 2.0F, new CubeDeformation(0.0F)).texOffs(0, 0).addBox(-2.0F, -5.0F, -1.0F, 4.0F, 5.0F, 2.0F, new CubeDeformation(0.0F)).texOffs(6, 7).addBox(-2.0F, -1.0F, -3.0F, 1.0F, 1.0F, 2.0F, new CubeDeformation(0.0F)).texOffs(0, 7).addBox(-0.5F, -1.0F, 1.0F, 1.0F, 1.0F, 2.0F, new CubeDeformation(0.0F)).texOffs(10, 7).addBox(1.0F, -6.0F, -1.0F, 1.0F, 1.0F, 1.0F, new CubeDeformation(0.0F)).texOffs(4, 10).addBox(-2.0F, -6.0F, -1.0F, 1.0F, 1.0F, 1.0F, new CubeDeformation(0.0F)).texOffs(10, 0).addBox(-2.0F, -3.0F, -2.0F, 1.0F, 1.0F, 1.0F, new CubeDeformation(0.0F)).texOffs(4, 7).addBox(1.0F, -3.0F, -2.0F, 1.0F, 1.0F, 1.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 24.0F, 0.0F));
+		return LayerDefinition.create(meshDefinition0, 16, 16);
+	}
+
+	public void setupAnim(Entity xy, float float2, float float3, float float4, float float5, float float6) {
+	}
+
+	public void renderToBuffer(PoseStack f, VertexConsumer ie, int integer3, int integer4, float float5, float float6, float float7, float float8) {
+		this.bb_main.render(f, ie, integer3, integer4, float5, float6, float7, float8);
+	}
+
+	public void setupAnim(Object object, float float2, float float3, float float4, float float5, float float6) {
+		this.setupAnim((Entity)object, float2, float3, float4, float5, float6);
+	}
+}
--- net/minecraft/src/EntityGiantZombie.java
+++ net/minecraft/src/EntityGiantZombie.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
 public class EntityGiantZombie extends EntityMob {
-	public EntityGiantZombie(World var1) {
-		super(var1);
+	public EntityGiantZombie(World world) {
+		super(world);
 		this.texture = "/mob/zombie.png";
 		this.moveSpeed = 0.5F;
 		this.attackStrength = 50;
@@ -11,7 +11,7 @@
 		this.setSize(this.width * 6.0F, this.height * 6.0F);
 	}
 
-	protected float getBlockPathWeight(int var1, int var2, int var3) {
-		return this.worldObj.getBrightness(var1, var2, var3) - 0.5F;
+	protected float getBlockPathWeight(int x, int y, int z) {
+		return this.worldObj.getBrightness(x, y, z) - 0.5F;
 	}
 }
--- net/minecraft/src/RenderEngine.java
+++ net/minecraft/src/RenderEngine.java
@@ -4,6 +4,7 @@
 import java.awt.image.BufferedImage;
 import java.awt.image.ImageObserver;
 import java.io.IOException;
+import java.io.InputStream;
 import java.nio.ByteBuffer;
 import java.nio.IntBuffer;
 import java.util.ArrayList;
@@ -12,6 +13,9 @@
 import java.util.List;
 import java.util.Map;
 import javax.imageio.ImageIO;
+
+import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.GL11;
 
 public class RenderEngine {
@@ -19,73 +23,80 @@
 	private HashMap textureMap = new HashMap();
 	private HashMap textureContentsMap = new HashMap();
 	private IntBuffer singleIntBuffer = GLAllocation.createDirectIntBuffer(1);
-	private ByteBuffer imageData = GLAllocation.createDirectByteBuffer(1048576);
+	private ByteBuffer imageData = GLAllocation.createDirectByteBuffer(4194304);
 	private List textureList = new ArrayList();
 	private Map urlToImageDataMap = new HashMap();
-	private GameSettings options;
+	public GameSettings options;
 	private boolean clampTexture = false;
+	public MinecraftUnknownClass2 field_12279_8nB09v2wL31LD7473aXNMbJrX47AX71iPMP6yPX544heeDvxj78y5qTJYk68;
+	public ImageHolder nonDeclImageHolder = new ImageHolder();
 
-	public RenderEngine(GameSettings var1) {
-		this.options = var1;
+	public RenderEngine(MinecraftUnknownClass2 uy, GameSettings we) {
+		this.field_12279_8nB09v2wL31LD7473aXNMbJrX47AX71iPMP6yPX544heeDvxj78y5qTJYk68 = uy;
+		this.options = we;
 	}
 
-	public int getTexture(String var1) {
-		Integer var2 = (Integer)this.textureMap.get(var1);
-		if(var2 != null) {
-			return var2.intValue();
+	public int getTexture(String string) {
+		VisualsUnknownClass visualsUnknownClass2 = this.field_12279_8nB09v2wL31LD7473aXNMbJrX47AX71iPMP6yPX544heeDvxj78y5qTJYk68.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0;
+		Integer integer3 = (Integer)this.textureMap.get(string);
+		if(integer3 != null) {
+			return integer3.intValue();
 		} else {
 			try {
 				this.singleIntBuffer.clear();
 				GLAllocation.generateTextureNames(this.singleIntBuffer);
-				int var4 = this.singleIntBuffer.get(0);
-				if(var1.startsWith("##")) {
-					this.setupTexture(this.unwrapImageByColumns(ImageIO.read(RenderEngine.class.getResourceAsStream(var1.substring(2)))), var4);
-				} else if(var1.startsWith("%%")) {
+				int i4 = this.singleIntBuffer.get(0);
+				if(string.startsWith("##")) {
+					this.setupTexture(this.unwrapImageByColumns(this.func_12266_6Y6At49CUc59G341H19D7WD31Nq480a9ni7bM1Y4l5x2a18LJLiG1Z5Uv9sB(visualsUnknownClass2.getResourceAsStream(string.substring(2)))), i4);
+				} else if(string.startsWith("%%")) {
 					this.clampTexture = true;
-					this.setupTexture(ImageIO.read(RenderEngine.class.getResourceAsStream(var1.substring(2))), var4);
+					this.setupTexture(this.func_12266_6Y6At49CUc59G341H19D7WD31Nq480a9ni7bM1Y4l5x2a18LJLiG1Z5Uv9sB(visualsUnknownClass2.getResourceAsStream(string.substring(2))), i4);
 					this.clampTexture = false;
 				} else {
-					this.setupTexture(ImageIO.read(RenderEngine.class.getResourceAsStream(var1)), var4);
+					this.setupTexture(this.func_12266_6Y6At49CUc59G341H19D7WD31Nq480a9ni7bM1Y4l5x2a18LJLiG1Z5Uv9sB(visualsUnknownClass2.getResourceAsStream(string)), i4);
 				}
 
-				this.textureMap.put(var1, Integer.valueOf(var4));
-				return var4;
-			} catch (IOException var3) {
+				this.textureMap.put(string, i4);
+				return i4;
+			} catch (IOException iOException5) {
 				throw new RuntimeException("!!");
+			} catch (IllegalArgumentException illegalArgumentException6) {
+				System.err.println("Failed to load resource: " + string);
+				throw new RuntimeException(illegalArgumentException6);
 			}
 		}
 	}
 
-	private BufferedImage unwrapImageByColumns(BufferedImage var1) {
-		int var2 = var1.getWidth() / 16;
-		BufferedImage var3 = new BufferedImage(16, var1.getHeight() * var2, 2);
-		Graphics var4 = var3.getGraphics();
+	private BufferedImage unwrapImageByColumns(BufferedImage bufferedImage) {
+		int i2 = bufferedImage.getWidth() / 16;
+		BufferedImage bufferedImage3 = new BufferedImage(16, bufferedImage.getHeight() * i2, 2);
+		Graphics graphics4 = bufferedImage3.getGraphics();
 
-		for(int var5 = 0; var5 < var2; ++var5) {
-			var4.drawImage(var1, -var5 * 16, var5 * var1.getHeight(), (ImageObserver)null);
+		for(int i5 = 0; i5 < i2; ++i5) {
+			graphics4.drawImage(bufferedImage, -i5 * 16, i5 * bufferedImage.getHeight(), (ImageObserver)null);
 		}
 
-		var4.dispose();
-		return var3;
+		graphics4.dispose();
+		return bufferedImage3;
 	}
 
-	public int allocateAndSetupTexture(BufferedImage var1) {
+	public int allocateAndSetupTexture(BufferedImage bufferedImage) {
 		this.singleIntBuffer.clear();
 		GLAllocation.generateTextureNames(this.singleIntBuffer);
-		int var2 = this.singleIntBuffer.get(0);
-		this.setupTexture(var1, var2);
-		this.textureContentsMap.put(Integer.valueOf(var2), var1);
-		return var2;
+		int i2 = this.singleIntBuffer.get(0);
+		this.setupTexture(bufferedImage, i2);
+		this.textureContentsMap.put(i2, bufferedImage);
+		return i2;
 	}
 
-	public void setupTexture(BufferedImage var1, int var2) {
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, var2);
+	public void setupTexture(BufferedImage bufferedImage, int integer) {
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, integer);
 		if(useMipmaps) {
 			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);
 			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
 		} else {
-			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
-			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, ScreenDebugMenu.field_7956_48H3fYB8k2jE5s5HC81S9Sm600nFD73Lb4N90Pl1F0LSIx70mF1gldgvzgRz ? GL11.GL_LINEAR : GL11.GL_NEAREST);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, ScreenDebugMenu.field_7956_48H3fYB8k2jE5s5HC81S9Sm600nFD73Lb4N90Pl1F0LSIx70mF1gldgvzgRz ? GL11.GL_LINEAR : GL11.GL_NEAREST);
 		}
 
 		if(this.clampTexture) {
@@ -96,272 +107,303 @@
 			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL11.GL_REPEAT);
 		}
 
-		int var3 = var1.getWidth();
-		int var4 = var1.getHeight();
-		int[] var5 = new int[var3 * var4];
-		byte[] var6 = new byte[var3 * var4 * 4];
-		var1.getRGB(0, 0, var3, var4, var5, 0, var3);
+		int i3 = bufferedImage.getWidth();
+		int i4 = bufferedImage.getHeight();
+		int[] i5 = new int[i3 * i4];
+		byte[] b6 = new byte[i3 * i4 * 4];
+		bufferedImage.getRGB(0, 0, i3, i4, i5, 0, i3);
 
-		int var7;
-		int var8;
-		int var9;
-		int var10;
-		int var11;
-		int var12;
-		int var13;
-		int var14;
-		for(var7 = 0; var7 < var5.length; ++var7) {
-			var8 = var5[var7] >> 24 & 255;
-			var9 = var5[var7] >> 16 & 255;
-			var10 = var5[var7] >> 8 & 255;
-			var11 = var5[var7] & 255;
+		int i7;
+		int i8;
+		int i9;
+		int i10;
+		int i11;
+		int i12;
+		int i13;
+		int i14;
+		for(i7 = 0; i7 < i5.length; ++i7) {
+			i8 = i5[i7] >> 24 & 255;
+			i9 = i5[i7] >> 16 & 255;
+			i10 = i5[i7] >> 8 & 255;
+			i11 = i5[i7] & 255;
 			if(this.options != null && this.options.anaglyph) {
-				var12 = (var9 * 30 + var10 * 59 + var11 * 11) / 100;
-				var13 = (var9 * 30 + var10 * 70) / 100;
-				var14 = (var9 * 30 + var11 * 70) / 100;
-				var9 = var12;
-				var10 = var13;
-				var11 = var14;
+				i12 = (i9 * 30 + i10 * 59 + i11 * 11) / 100;
+				i13 = (i9 * 30 + i10 * 70) / 100;
+				i14 = (i9 * 30 + i11 * 70) / 100;
+				i9 = i12;
+				i10 = i13;
+				i11 = i14;
 			}
 
-			var6[var7 * 4 + 0] = (byte)var9;
-			var6[var7 * 4 + 1] = (byte)var10;
-			var6[var7 * 4 + 2] = (byte)var11;
-			var6[var7 * 4 + 3] = (byte)var8;
+			b6[i7 * 4 + 0] = (byte)i9;
+			b6[i7 * 4 + 1] = (byte)i10;
+			b6[i7 * 4 + 2] = (byte)i11;
+			b6[i7 * 4 + 3] = (byte)i8;
 		}
 
 		this.imageData.clear();
-		this.imageData.put(var6);
-		this.imageData.position(0).limit(var6.length);
-		GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, var3, var4, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
+		this.imageData.put(b6);
+		this.imageData.position(0).limit(b6.length);
+		GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, i3, i4, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
 		if(useMipmaps) {
-			for(var7 = 1; var7 <= 4; ++var7) {
-				var8 = var3 >> var7 - 1;
-				var9 = var3 >> var7;
-				var10 = var4 >> var7;
+			for(i7 = 1; i7 <= 4; ++i7) {
+				i8 = i3 >> i7 - 1;
+				i9 = i3 >> i7;
+				i10 = i4 >> i7;
 
-				for(var11 = 0; var11 < var9; ++var11) {
-					for(var12 = 0; var12 < var10; ++var12) {
-						var13 = this.imageData.getInt((var11 * 2 + 0 + (var12 * 2 + 0) * var8) * 4);
-						var14 = this.imageData.getInt((var11 * 2 + 1 + (var12 * 2 + 0) * var8) * 4);
-						int var15 = this.imageData.getInt((var11 * 2 + 1 + (var12 * 2 + 1) * var8) * 4);
-						int var16 = this.imageData.getInt((var11 * 2 + 0 + (var12 * 2 + 1) * var8) * 4);
-						int var17 = this.alphaBlend(this.alphaBlend(var13, var14), this.alphaBlend(var15, var16));
-						this.imageData.putInt((var11 + var12 * var9) * 4, var17);
+				for(i11 = 0; i11 < i9; ++i11) {
+					for(i12 = 0; i12 < i10; ++i12) {
+						i13 = this.imageData.getInt((i11 * 2 + 0 + (i12 * 2 + 0) * i8) * 4);
+						i14 = this.imageData.getInt((i11 * 2 + 1 + (i12 * 2 + 0) * i8) * 4);
+						int i15 = this.imageData.getInt((i11 * 2 + 1 + (i12 * 2 + 1) * i8) * 4);
+						int i16 = this.imageData.getInt((i11 * 2 + 0 + (i12 * 2 + 1) * i8) * 4);
+						int i17 = this.alphaBlend(this.alphaBlend(i13, i14), this.alphaBlend(i15, i16));
+						this.imageData.putInt((i11 + i12 * i9) * 4, i17);
 					}
 				}
 
-				GL11.glTexImage2D(GL11.GL_TEXTURE_2D, var7, GL11.GL_RGBA, var9, var10, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
+				GL11.glTexImage2D(GL11.GL_TEXTURE_2D, i7, GL11.GL_RGBA, i9, i10, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
 			}
 		}
 
 	}
 
-	public void deleteTexture(int var1) {
-		this.textureContentsMap.remove(Integer.valueOf(var1));
+	public void deleteTexture(int integer) {
+		this.textureContentsMap.remove(integer);
 		this.singleIntBuffer.clear();
-		this.singleIntBuffer.put(var1);
+		this.singleIntBuffer.put(integer);
 		this.singleIntBuffer.flip();
 		GL11.glDeleteTextures(this.singleIntBuffer);
 	}
 
-	public int getTextureForDownloadableImage(String var1, String var2) {
-		ThreadDownloadImageData var3 = (ThreadDownloadImageData)this.urlToImageDataMap.get(var1);
-		if(var3 != null && var3.image != null && !var3.textureSetupComplete) {
-			if(var3.textureName < 0) {
-				var3.textureName = this.allocateAndSetupTexture(var3.image);
+	public ImageHolder getTextureForDownloadableImage(String string1, String string2) {
+		ImageHolder imageHolder3;
+		if(SkinManager.skins.containsKey(string1)) {
+			imageHolder3 = (ImageHolder)SkinManager.skins.get(string1);
+		} else {
+			imageHolder3 = (ImageHolder)this.urlToImageDataMap.get(string1);
+		}
+
+		if(imageHolder3 != null && imageHolder3.image != null && !imageHolder3.textureSetupComplete) {
+			if(imageHolder3.textureName < 0) {
+				imageHolder3.textureName = this.allocateAndSetupTexture(imageHolder3.image);
 			} else {
-				this.setupTexture(var3.image, var3.textureName);
-			}
-
-			var3.textureSetupComplete = true;
-		}
-
-		return var3 != null && var3.textureName >= 0 ? var3.textureName : this.getTexture(var2);
-	}
-
-	public ThreadDownloadImageData obtainImageData(String var1, ImageBuffer var2) {
-		ThreadDownloadImageData var3 = (ThreadDownloadImageData)this.urlToImageDataMap.get(var1);
-		if(var3 == null) {
-			this.urlToImageDataMap.put(var1, new ThreadDownloadImageData(var1, var2));
-		} else {
-			++var3.referenceCount;
-		}
-
-		return var3;
-	}
-
-	public void releaseImageData(String var1) {
-		ThreadDownloadImageData var2 = (ThreadDownloadImageData)this.urlToImageDataMap.get(var1);
-		if(var2 != null) {
-			--var2.referenceCount;
-			if(var2.referenceCount == 0) {
-				if(var2.textureName >= 0) {
-					this.deleteTexture(var2.textureName);
+				this.setupTexture(imageHolder3.image, imageHolder3.textureName);
+			}
+
+			imageHolder3.textureSetupComplete = true;
+		}
+
+		if(imageHolder3 != null && imageHolder3.textureName >= 0) {
+			return imageHolder3;
+		} else {
+			this.nonDeclImageHolder.textureName = this.getTexture(string2);
+			return this.nonDeclImageHolder;
+		}
+	}
+
+	public ImageHolder obtainImageData(String string, ImageBuffer xo) {
+		ImageHolder imageHolder3;
+		if(SkinManager.skins.containsKey(string)) {
+			imageHolder3 = (ImageHolder)SkinManager.skins.get(string);
+		} else {
+			imageHolder3 = (ImageHolder)this.urlToImageDataMap.get(string);
+		}
+
+		if(imageHolder3 == null) {
+			if(this.urlToImageDataMap.containsKey(string)) {
+				this.urlToImageDataMap.remove(string);
+			}
+
+			this.urlToImageDataMap.put(string, new ThreadDownloadImageData(string, xo));
+		} else {
+			++imageHolder3.referenceCount;
+		}
+
+		return imageHolder3;
+	}
+
+	public void releaseImageData(String string) {
+		ImageHolder imageHolder2 = (ImageHolder)this.urlToImageDataMap.get(string);
+		if(imageHolder2 != null) {
+			--imageHolder2.referenceCount;
+			if(imageHolder2.referenceCount == 0) {
+				if(imageHolder2.textureName >= 0) {
+					this.deleteTexture(imageHolder2.textureName);
 				}
 
-				this.urlToImageDataMap.remove(var1);
+				this.urlToImageDataMap.remove(string);
 			}
 		}
 
 	}
 
-	public void registerTextureFX(TextureFX var1) {
-		this.textureList.add(var1);
-		var1.onTick();
+	public void registerTextureFX(TextureFX nq) {
+		this.textureList.add(nq);
+		nq.onTick();
 	}
 
 	public void updateDynamicTextures() {
-		int var1;
-		TextureFX var2;
-		int var3;
-		int var4;
-		int var5;
-		int var6;
-		int var7;
-		int var8;
-		int var9;
-		int var10;
-		int var11;
-		int var12;
-		for(var1 = 0; var1 < this.textureList.size(); ++var1) {
-			var2 = (TextureFX)this.textureList.get(var1);
-			var2.anaglyphEnabled = this.options.anaglyph;
-			var2.onTick();
-			this.imageData.clear();
-			this.imageData.put(var2.imageData);
-			this.imageData.position(0).limit(var2.imageData.length);
-			var2.bindImage(this);
-
-			for(var3 = 0; var3 < var2.tileSize; ++var3) {
-				for(var4 = 0; var4 < var2.tileSize; ++var4) {
-					GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, var2.iconIndex % 16 * 16 + var3 * 16, var2.iconIndex / 16 * 16 + var4 * 16, 16, 16, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
-					if(useMipmaps) {
-						for(var5 = 1; var5 <= 4; ++var5) {
-							var6 = 16 >> var5 - 1;
-							var7 = 16 >> var5;
-
-							for(var8 = 0; var8 < var7; ++var8) {
-								for(var9 = 0; var9 < var7; ++var9) {
-									var10 = this.imageData.getInt((var8 * 2 + 0 + (var9 * 2 + 0) * var6) * 4);
-									var11 = this.imageData.getInt((var8 * 2 + 1 + (var9 * 2 + 0) * var6) * 4);
-									var12 = this.imageData.getInt((var8 * 2 + 1 + (var9 * 2 + 1) * var6) * 4);
-									int var13 = this.imageData.getInt((var8 * 2 + 0 + (var9 * 2 + 1) * var6) * 4);
-									int var14 = this.averageColor(this.averageColor(var10, var11), this.averageColor(var12, var13));
-									this.imageData.putInt((var8 + var9 * var7) * 4, var14);
-								}
-							}
-
-							GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, var5, var2.iconIndex % 16 * var7, var2.iconIndex / 16 * var7, var7, var7, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
-						}
-					}
-				}
-			}
-		}
-
-		for(var1 = 0; var1 < this.textureList.size(); ++var1) {
-			var2 = (TextureFX)this.textureList.get(var1);
-			if(var2.textureId > 0) {
+		if(Minecraft.field_7307_8AX67fsnsj54328J9e6FiY9333555Xj726t2182u3TBB948QMZsZX2iz02iv) {
+			int i1;
+			TextureFX textureFX2;
+			int i3;
+			int i4;
+			int i5;
+			int i6;
+			int i7;
+			int i8;
+			int i9;
+			int i10;
+			int i11;
+			int i12;
+			for(i1 = 0; i1 < this.textureList.size(); ++i1) {
+				textureFX2 = (TextureFX)this.textureList.get(i1);
+				textureFX2.anaglyphEnabled = this.options.anaglyph;
+				textureFX2.onTick();
 				this.imageData.clear();
-				this.imageData.put(var2.imageData);
-				this.imageData.position(0).limit(var2.imageData.length);
-				GL11.glBindTexture(GL11.GL_TEXTURE_2D, var2.textureId);
-				GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, 0, 0, 16, 16, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
-				if(useMipmaps) {
-					for(var3 = 1; var3 <= 4; ++var3) {
-						var4 = 16 >> var3 - 1;
-						var5 = 16 >> var3;
-
-						for(var6 = 0; var6 < var5; ++var6) {
-							for(var7 = 0; var7 < var5; ++var7) {
-								var8 = this.imageData.getInt((var6 * 2 + 0 + (var7 * 2 + 0) * var4) * 4);
-								var9 = this.imageData.getInt((var6 * 2 + 1 + (var7 * 2 + 0) * var4) * 4);
-								var10 = this.imageData.getInt((var6 * 2 + 1 + (var7 * 2 + 1) * var4) * 4);
-								var11 = this.imageData.getInt((var6 * 2 + 0 + (var7 * 2 + 1) * var4) * 4);
-								var12 = this.averageColor(this.averageColor(var8, var9), this.averageColor(var10, var11));
-								this.imageData.putInt((var6 + var7 * var5) * 4, var12);
-							}
-						}
-
-						GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, var3, 0, 0, var5, var5, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
-					}
-				}
-			}
-		}
-
-	}
-
-	private int averageColor(int var1, int var2) {
-		int var3 = (var1 & -16777216) >> 24 & 255;
-		int var4 = (var2 & -16777216) >> 24 & 255;
-		return (var3 + var4 >> 1 << 24) + ((var1 & 16711422) + (var2 & 16711422) >> 1);
-	}
-
-	private int alphaBlend(int var1, int var2) {
-		int var3 = (var1 & -16777216) >> 24 & 255;
-		int var4 = (var2 & -16777216) >> 24 & 255;
-		short var5 = 255;
-		if(var3 + var4 == 0) {
-			var3 = 1;
-			var4 = 1;
-			var5 = 0;
-		}
-
-		int var6 = (var1 >> 16 & 255) * var3;
-		int var7 = (var1 >> 8 & 255) * var3;
-		int var8 = (var1 & 255) * var3;
-		int var9 = (var2 >> 16 & 255) * var4;
-		int var10 = (var2 >> 8 & 255) * var4;
-		int var11 = (var2 & 255) * var4;
-		int var12 = (var6 + var9) / (var3 + var4);
-		int var13 = (var7 + var10) / (var3 + var4);
-		int var14 = (var8 + var11) / (var3 + var4);
-		return var5 << 24 | var12 << 16 | var13 << 8 | var14;
+				this.imageData.put(textureFX2.imageData);
+				this.imageData.position(0).limit(textureFX2.imageData.length);
+				textureFX2.bindImage(this);
+
+				for(i3 = 0; i3 < textureFX2.tileSize; ++i3) {
+					for(i4 = 0; i4 < textureFX2.tileSize; ++i4) {
+						GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, textureFX2.iconIndex % 16 * 16 + i3 * 16, textureFX2.iconIndex / 16 * 16 + i4 * 16, 16, 16, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
+						if(useMipmaps) {
+							for(i5 = 1; i5 <= 4; ++i5) {
+								i6 = 16 >> i5 - 1;
+								i7 = 16 >> i5;
+
+								for(i8 = 0; i8 < i7; ++i8) {
+									for(i9 = 0; i9 < i7; ++i9) {
+										i10 = this.imageData.getInt((i8 * 2 + 0 + (i9 * 2 + 0) * i6) * 4);
+										i11 = this.imageData.getInt((i8 * 2 + 1 + (i9 * 2 + 0) * i6) * 4);
+										i12 = this.imageData.getInt((i8 * 2 + 1 + (i9 * 2 + 1) * i6) * 4);
+										int i13 = this.imageData.getInt((i8 * 2 + 0 + (i9 * 2 + 1) * i6) * 4);
+										int i14 = this.averageColor(this.averageColor(i10, i11), this.averageColor(i12, i13));
+										this.imageData.putInt((i8 + i9 * i7) * 4, i14);
+									}
+								}
+
+								GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, i5, textureFX2.iconIndex % 16 * i7, textureFX2.iconIndex / 16 * i7, i7, i7, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
+							}
+						}
+					}
+				}
+			}
+
+			for(i1 = 0; i1 < this.textureList.size(); ++i1) {
+				textureFX2 = (TextureFX)this.textureList.get(i1);
+				if(textureFX2.textureId > 0) {
+					this.imageData.clear();
+					this.imageData.put(textureFX2.imageData);
+					this.imageData.position(0).limit(textureFX2.imageData.length);
+					GL11.glBindTexture(GL11.GL_TEXTURE_2D, textureFX2.textureId);
+					GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, 0, 0, 16, 16, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
+					if(useMipmaps) {
+						for(i3 = 1; i3 <= 4; ++i3) {
+							i4 = 16 >> i3 - 1;
+							i5 = 16 >> i3;
+
+							for(i6 = 0; i6 < i5; ++i6) {
+								for(i7 = 0; i7 < i5; ++i7) {
+									i8 = this.imageData.getInt((i6 * 2 + 0 + (i7 * 2 + 0) * i4) * 4);
+									i9 = this.imageData.getInt((i6 * 2 + 1 + (i7 * 2 + 0) * i4) * 4);
+									i10 = this.imageData.getInt((i6 * 2 + 1 + (i7 * 2 + 1) * i4) * 4);
+									i11 = this.imageData.getInt((i6 * 2 + 0 + (i7 * 2 + 1) * i4) * 4);
+									i12 = this.averageColor(this.averageColor(i8, i9), this.averageColor(i10, i11));
+									this.imageData.putInt((i6 + i7 * i5) * 4, i12);
+								}
+							}
+
+							GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, i3, 0, 0, i5, i5, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
+						}
+					}
+				}
+			}
+
+		}
+	}
+
+	private int averageColor(int integer1, int integer2) {
+		int i3 = (integer1 & 0xFF000000) >> 24 & 255;
+		int i4 = (integer2 & 0xFF000000) >> 24 & 255;
+		return (i3 + i4 >> 1 << 24) + ((integer1 & 16711422) + (integer2 & 16711422) >> 1);
+	}
+
+	private int alphaBlend(int integer1, int integer2) {
+		int i3 = (integer1 & 0xFF000000) >> 24 & 255;
+		int i4 = (integer2 & 0xFF000000) >> 24 & 255;
+		short s5 = 255;
+		if(i3 + i4 == 0) {
+			i3 = 1;
+			i4 = 1;
+			s5 = 0;
+		}
+
+		int i6 = (integer1 >> 16 & 255) * i3;
+		int i7 = (integer1 >> 8 & 255) * i3;
+		int i8 = (integer1 & 255) * i3;
+		int i9 = (integer2 >> 16 & 255) * i4;
+		int i10 = (integer2 >> 8 & 255) * i4;
+		int i11 = (integer2 & 255) * i4;
+		int i12 = (i6 + i9) / (i3 + i4);
+		int i13 = (i7 + i10) / (i3 + i4);
+		int i14 = (i8 + i11) / (i3 + i4);
+		return s5 << 24 | i12 << 16 | i13 << 8 | i14;
 	}
 
 	public void refreshTextures() {
-		Iterator var1 = this.textureContentsMap.keySet().iterator();
-
-		BufferedImage var3;
-		while(var1.hasNext()) {
-			int var2 = ((Integer)var1.next()).intValue();
-			var3 = (BufferedImage)this.textureContentsMap.get(Integer.valueOf(var2));
-			this.setupTexture(var3, var2);
-		}
-
-		ThreadDownloadImageData var6;
-		for(var1 = this.urlToImageDataMap.values().iterator(); var1.hasNext(); var6.textureSetupComplete = false) {
-			var6 = (ThreadDownloadImageData)var1.next();
-		}
-
-		var1 = this.textureMap.keySet().iterator();
-
-		while(var1.hasNext()) {
-			String var7 = (String)var1.next();
+		VisualsUnknownClass visualsUnknownClass1 = this.field_12279_8nB09v2wL31LD7473aXNMbJrX47AX71iPMP6yPX544heeDvxj78y5qTJYk68.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0;
+		Iterator iterator2 = this.textureContentsMap.keySet().iterator();
+
+		BufferedImage bufferedImage3;
+		while(iterator2.hasNext()) {
+			int i4 = ((Integer)iterator2.next()).intValue();
+			bufferedImage3 = (BufferedImage)this.textureContentsMap.get(i4);
+			this.setupTexture(bufferedImage3, i4);
+		}
+
+		ImageHolder imageHolder8;
+		for(iterator2 = this.urlToImageDataMap.values().iterator(); iterator2.hasNext(); imageHolder8.textureSetupComplete = false) {
+			imageHolder8 = (ImageHolder)iterator2.next();
+		}
+
+		iterator2 = this.textureMap.keySet().iterator();
+
+		while(iterator2.hasNext()) {
+			String string5 = (String)iterator2.next();
 
 			try {
-				if(var7.startsWith("##")) {
-					var3 = this.unwrapImageByColumns(ImageIO.read(RenderEngine.class.getResourceAsStream(var7.substring(2))));
-				} else if(var7.startsWith("%%")) {
+				if(string5.startsWith("##")) {
+					bufferedImage3 = this.unwrapImageByColumns(this.func_12266_6Y6At49CUc59G341H19D7WD31Nq480a9ni7bM1Y4l5x2a18LJLiG1Z5Uv9sB(visualsUnknownClass1.getResourceAsStream(string5.substring(2))));
+				} else if(string5.startsWith("%%")) {
 					this.clampTexture = true;
-					var3 = ImageIO.read(RenderEngine.class.getResourceAsStream(var7.substring(2)));
+					bufferedImage3 = this.func_12266_6Y6At49CUc59G341H19D7WD31Nq480a9ni7bM1Y4l5x2a18LJLiG1Z5Uv9sB(visualsUnknownClass1.getResourceAsStream(string5.substring(2)));
 					this.clampTexture = false;
 				} else {
-					var3 = ImageIO.read(RenderEngine.class.getResourceAsStream(var7));
+					bufferedImage3 = this.func_12266_6Y6At49CUc59G341H19D7WD31Nq480a9ni7bM1Y4l5x2a18LJLiG1Z5Uv9sB(visualsUnknownClass1.getResourceAsStream(string5));
 				}
 
-				int var4 = ((Integer)this.textureMap.get(var7)).intValue();
-				this.setupTexture(var3, var4);
-			} catch (IOException var5) {
-				var5.printStackTrace();
+				int i6 = ((Integer)this.textureMap.get(string5)).intValue();
+				this.setupTexture(bufferedImage3, i6);
+			} catch (IOException iOException7) {
+				iOException7.printStackTrace();
 			}
 		}
 
 	}
 
-	public void bindTexture(int var1) {
-		if(var1 >= 0) {
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var1);
+	private BufferedImage func_12266_6Y6At49CUc59G341H19D7WD31Nq480a9ni7bM1Y4l5x2a18LJLiG1Z5Uv9sB(InputStream inputStream) throws IOException {
+		BufferedImage bufferedImage2 = ImageIO.read(inputStream);
+		inputStream.close();
+		return bufferedImage2;
+	}
+
+	public void bindTexture(int integer) {
+		if(integer >= 0) {
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, integer);
 		}
+
 	}
 }
--- net/minecraft/src/ImageBufferDownload.java
+++ net/minecraft/src/ImageBufferDownload.java
@@ -10,74 +10,74 @@
 	private int imageWidth;
 	private int imageHeight;
 
-	public BufferedImage parseUserSkin(BufferedImage var1) {
-		if(var1 == null) {
+	public BufferedImage parseUserSkin(BufferedImage bufferedImage) {
+		if(bufferedImage == null) {
 			return null;
 		} else {
 			this.imageWidth = 64;
 			this.imageHeight = 32;
-			BufferedImage var2 = new BufferedImage(this.imageWidth, this.imageHeight, 2);
-			Graphics var3 = var2.getGraphics();
-			var3.drawImage(var1, 0, 0, (ImageObserver)null);
-			var3.dispose();
-			this.imageData = ((DataBufferInt)var2.getRaster().getDataBuffer()).getData();
+			BufferedImage bufferedImage2 = new BufferedImage(this.imageWidth, this.imageHeight, 2);
+			Graphics graphics3 = bufferedImage2.getGraphics();
+			graphics3.drawImage(bufferedImage, 0, 0, (ImageObserver)null);
+			graphics3.dispose();
+			this.imageData = ((DataBufferInt)bufferedImage2.getRaster().getDataBuffer()).getData();
 			this.setAreaOpaque(0, 0, 32, 16);
 			this.setAreaTransparent(32, 0, 64, 32);
 			this.setAreaOpaque(0, 16, 64, 32);
-			boolean var4 = false;
+			boolean z4 = false;
 
-			int var5;
-			int var6;
-			int var7;
-			for(var5 = 32; var5 < 64; ++var5) {
-				for(var6 = 0; var6 < 16; ++var6) {
-					var7 = this.imageData[var5 + var6 * 64];
-					if((var7 >> 24 & 255) < 128) {
-						var4 = true;
+			int i5;
+			int i6;
+			int i7;
+			for(i5 = 32; i5 < 64; ++i5) {
+				for(i6 = 0; i6 < 16; ++i6) {
+					i7 = this.imageData[i5 + i6 * 64];
+					if((i7 >> 24 & 255) < 128) {
+						z4 = true;
 					}
 				}
 			}
 
-			if(!var4) {
-				for(var5 = 32; var5 < 64; ++var5) {
-					for(var6 = 0; var6 < 16; ++var6) {
-						var7 = this.imageData[var5 + var6 * 64];
-						if((var7 >> 24 & 255) < 128) {
-							var4 = true;
+			if(!z4) {
+				for(i5 = 32; i5 < 64; ++i5) {
+					for(i6 = 0; i6 < 16; ++i6) {
+						i7 = this.imageData[i5 + i6 * 64];
+						if((i7 >> 24 & 255) < 128) {
+							z4 = true;
 						}
 					}
 				}
 			}
 
-			return var2;
+			return bufferedImage2;
 		}
 	}
 
-	private void setAreaTransparent(int var1, int var2, int var3, int var4) {
-		if(!this.hasTransparency(var1, var2, var3, var4)) {
-			for(int var5 = var1; var5 < var3; ++var5) {
-				for(int var6 = var2; var6 < var4; ++var6) {
-					this.imageData[var5 + var6 * this.imageWidth] &= 16777215;
+	private void setAreaTransparent(int integer1, int integer2, int integer3, int integer4) {
+		if(!this.hasTransparency(integer1, integer2, integer3, integer4)) {
+			for(int i5 = integer1; i5 < integer3; ++i5) {
+				for(int i6 = integer2; i6 < integer4; ++i6) {
+					this.imageData[i5 + i6 * this.imageWidth] &= 0xFFFFFF;
 				}
 			}
-
 		}
+
 	}
 
-	private void setAreaOpaque(int var1, int var2, int var3, int var4) {
-		for(int var5 = var1; var5 < var3; ++var5) {
-			for(int var6 = var2; var6 < var4; ++var6) {
-				this.imageData[var5 + var6 * this.imageWidth] |= -16777216;
+	private void setAreaOpaque(int integer1, int integer2, int integer3, int integer4) {
+		for(int i5 = integer1; i5 < integer3; ++i5) {
+			for(int i6 = integer2; i6 < integer4; ++i6) {
+				this.imageData[i5 + i6 * this.imageWidth] |= 0xFF000000;
 			}
 		}
 
 	}
 
-	private boolean hasTransparency(int var1, int var2, int var3, int var4) {
-		for(int var5 = var1; var5 < var3; ++var5) {
-			for(int var6 = var2; var6 < var4; ++var6) {
-				int var7 = this.imageData[var5 + var6 * this.imageWidth];
-				if((var7 >> 24 & 255) < 128) {
+	private boolean hasTransparency(int integer1, int integer2, int integer3, int integer4) {
+		for(int i5 = integer1; i5 < integer3; ++i5) {
+			for(int i6 = integer2; i6 < integer4; ++i6) {
+				int i7 = this.imageData[i5 + i6 * this.imageWidth];
+				if((i7 >> 24 & 255) < 128) {
 					return true;
 				}
 			}
--- net/minecraft/src/ThreadDownloadImage.java
+++ net/minecraft/src/ThreadDownloadImage.java
@@ -1,44 +1,88 @@
 package net.minecraft.src;
 
+import java.awt.Color;
+import java.awt.Graphics2D;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.IOException;
 import java.net.HttpURLConnection;
 import java.net.URL;
+import java.util.Iterator;
 import javax.imageio.ImageIO;
 
 class ThreadDownloadImage extends Thread {
-	final String location;
+	String location;
 	final ImageBuffer buffer;
 	final ThreadDownloadImageData imageData;
 
-	ThreadDownloadImage(ThreadDownloadImageData var1, String var2, ImageBuffer var3) {
-		this.imageData = var1;
-		this.location = var2;
-		this.buffer = var3;
+	ThreadDownloadImage(ThreadDownloadImageData downloadImageData, String location, ImageBuffer imageBuffer) {
+		this.imageData = downloadImageData;
+		this.location = location;
+		this.buffer = imageBuffer;
 	}
 
 	public void run() {
-		HttpURLConnection var1 = null;
-
-		try {
-			URL var2 = new URL(this.location);
-			var1 = (HttpURLConnection)var2.openConnection();
-			var1.setDoInput(true);
-			var1.setDoOutput(false);
-			var1.connect();
-			if(var1.getResponseCode() != 404) {
-				if(this.buffer == null) {
-					this.imageData.image = ImageIO.read(var1.getInputStream());
+		while(this.location.charAt(0) == 1 || this.location.charAt(0) == 2) {
+			this.location = this.location.substring(1);
+		}
+
+		if(this.location == "@@") {
+			this.imageData.image = new BufferedImage(32, 16, 2);
+			Graphics2D graphics2D13 = this.imageData.image.createGraphics();
+			graphics2D13.setColor(new Color(0, 0, 0));
+			graphics2D13.fillRect(0, 0, 32, 16);
+			graphics2D13.dispose();
+		} else {
+			Iterator iterator1 = Ext1605Utils.skinUrls.iterator();
+
+			while(true) {
+				if(iterator1.hasNext()) {
+					String string2 = (String)iterator1.next();
+					String string3 = string2 + this.location + ".png";
+					if(string2.startsWith("file://")) {
+						try {
+							this.imageData.image = ImageIO.read(new File(string3.substring(7)));
+						} catch (IOException iOException10) {
+							System.out.println("Failed to load skin from " + string3);
+						}
+					} else {
+						HttpURLConnection httpURLConnection4 = null;
+
+						try {
+							URL uRL5 = new URL(string3);
+							httpURLConnection4 = (HttpURLConnection)uRL5.openConnection();
+							httpURLConnection4.setDoInput(true);
+							httpURLConnection4.setDoOutput(false);
+							httpURLConnection4.connect();
+							if(httpURLConnection4.getResponseCode() == 404) {
+								return;
+							}
+
+							if(this.buffer == null) {
+								this.imageData.image = ImageIO.read(httpURLConnection4.getInputStream());
+							} else {
+								this.imageData.image = this.buffer.parseUserSkin(ImageIO.read(httpURLConnection4.getInputStream()));
+							}
+						} catch (Exception exception11) {
+							exception11.printStackTrace();
+						} finally {
+							httpURLConnection4.disconnect();
+						}
+					}
+
+					if(this.imageData.image == null) {
+						continue;
+					}
+				}
+
+				if(this.imageData.image == null) {
+					System.out.println("Failed to load skin.");
 				} else {
-					this.imageData.image = this.buffer.parseUserSkin(ImageIO.read(var1.getInputStream()));
+					this.imageData.initialize();
 				}
 
 				return;
 			}
-		} catch (Exception var6) {
-			var6.printStackTrace();
-			return;
-		} finally {
-			var1.disconnect();
 		}
-
 	}
 }
--- /dev/null
+++ net/minecraft/src/ResourceLocation.java
@@ -1,0 +1,6 @@
+package net.minecraft.src;
+
+public class ResourceLocation {
+	public ResourceLocation(String string1, String string2) {
+	}
+}
--- /dev/null
+++ net/minecraft/src/EntityPlayerZombieModeClient.java
@@ -1,0 +1,143 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.input.Keyboard;
+
+public class EntityPlayerZombieModeClient extends EntityPlayerSP {
+	public BlockUnknownInterface field_9097_867sEKNEsa45Xq4Etlk5s449h7UUOWVcX6nYd2PGjFy373Y2PXcol521PBg2;
+	public XYZv field_9093_8pX3Foh9nnqOBZGkAhkc659OKcv5h23UrLcQ0x07ZRU1yOwY57fY6vz12UYR;
+	public ZMWorld worldIn;
+	private NamedLoc[] checkps = null;
+	public InventoryVendingMachine field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q;
+	public int field_9096_9Cq66X6kSMd1628jv96ZzpX8854blZjSRkO0AnxAFkKnO80vIjYxJK4rDT37 = 0;
+	public int field_9099_9Swr41S6T68d6dEsYG2c2L6B4clPHDs2giSrx84SjI081x3148rUDLOdX7Lp = -1;
+	public int field_9098_0T4mYOo96os7D946wHj66WQEoVFA7VTvN1ol4CfqE18e95s48a1Ihb6vgf6X = 0;
+
+	public void func_9090_5033aW84oic86C12UqY7P8G6DZj8848fFMS717oT7yfysLA8bD9uerQqVB7E() {
+		this.setSize(0.2F, 0.2F);
+		this.field_9099_9Swr41S6T68d6dEsYG2c2L6B4clPHDs2giSrx84SjI081x3148rUDLOdX7Lp = 100;
+		this.health = 1;
+	}
+
+	public EntityPlayerZombieModeClient(Minecraft minecraft, ZMWorld yv, Session tx) {
+		super(minecraft, yv, tx);
+		this.worldIn = yv;
+		XYZv xYZv4 = yv.func_7546_09CNVM2pJHfEd8I53GaO82x396qpVix0JSZqlf73zO9Itp6Z0ZM1dFPcr9r6();
+		this.setPosition((double)xYZv4.x, (double)xYZv4.y, (double)xYZv4.z);
+		this.inventory = this.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q = new InventoryVendingMachine(this);
+		ItemStack[] itemStack5 = yv.startingItems;
+		int i6 = itemStack5.length;
+
+		for(int i7 = 0; i7 < i6; ++i7) {
+			ItemStack itemStack8 = itemStack5[i7];
+			this.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.addItemStackToInventory(itemStack8.copy());
+		}
+
+	}
+
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		if(damage != 0 && this.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.field_8695_54O4q276dxP8y31413ENJjhqXBnFshV4S4ng8H76Bv5Y3Ma2DF7fbLk53PvO) {
+			damage /= 2;
+			damage = Math.max(damage, 1);
+		}
+
+		if(this.field_9099_9Swr41S6T68d6dEsYG2c2L6B4clPHDs2giSrx84SjI081x3148rUDLOdX7Lp < 0) {
+			super.attackEntityFrom(entity, damage);
+			this.field_9098_0T4mYOo96os7D946wHj66WQEoVFA7VTvN1ol4CfqE18e95s48a1Ihb6vgf6X = 0;
+			if(this.health <= 0 && this.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.field_8692_8s3a9ZFU1Lb4Y33KzN5HEwzzvMoj71d2qDVF231HNAJ36vP850tAYydwpyN6) {
+				this.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.field_8692_8s3a9ZFU1Lb4Y33KzN5HEwzzvMoj71d2qDVF231HNAJ36vP850tAYydwpyN6 = false;
+				this.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.field_8693_6a3I3v4L072y21iqK2Q4a7OJa1SIY587gNZ7teLm8k1uZzO68dY6lE8PKTBh = false;
+				this.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.field_8690_9ajSfayfVo92Z68A5B2rvo13codHKhrUqqH2LRN64r7Ac066r0ki4BD2lC9w = false;
+				this.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.field_8695_54O4q276dxP8y31413ENJjhqXBnFshV4S4ng8H76Bv5Y3Ma2DF7fbLk53PvO = false;
+				this.func_9090_5033aW84oic86C12UqY7P8G6DZj8848fFMS717oT7yfysLA8bD9uerQqVB7E();
+			}
+
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public void displayGUIChest(IInventory inventory) {
+	}
+
+	public void displayGUIEditSign(TileEntitySign tileEntitySign) {
+	}
+
+	public void displayWorkbenchGUI() {
+	}
+
+	public void displayGUIFurnace(TileEntityFurnace tileEntityFurnace) {
+	}
+
+	public void onLivingUpdate() {
+		if(this.field_9099_9Swr41S6T68d6dEsYG2c2L6B4clPHDs2giSrx84SjI081x3148rUDLOdX7Lp >= 0) {
+			--this.field_9099_9Swr41S6T68d6dEsYG2c2L6B4clPHDs2giSrx84SjI081x3148rUDLOdX7Lp;
+			this.motionX = this.motionY = this.motionZ = 0.0D;
+			this.movementInput.moveForward = this.movementInput.moveStrafe = 0.0F;
+			if(this.field_9099_9Swr41S6T68d6dEsYG2c2L6B4clPHDs2giSrx84SjI081x3148rUDLOdX7Lp == -1) {
+				this.setSize(1.6F, 1.8F);
+				this.health = 20;
+			} else {
+				this.yOffset = 0.1F;
+				this.setSize(0.2F, 0.2F);
+			}
+
+			super.func_9048_6Gw1VytaaUv0K01sl03hRqP53Gtn1diJT7GGN022KtBtJsK73Sx1JZ0GS264();
+		} else {
+			++this.field_9098_0T4mYOo96os7D946wHj66WQEoVFA7VTvN1ol4CfqE18e95s48a1Ihb6vgf6X;
+			if(this.field_9098_0T4mYOo96os7D946wHj66WQEoVFA7VTvN1ol4CfqE18e95s48a1Ihb6vgf6X > 120) {
+				this.field_9098_0T4mYOo96os7D946wHj66WQEoVFA7VTvN1ol4CfqE18e95s48a1Ihb6vgf6X -= 30;
+				this.heal(1);
+			}
+
+			this.affectedByFallDamage = !this.flying;
+			this.movementInput.updatePlayerMoveState(this);
+			if(this.movementInput.sneak && this.ySize < 0.2F) {
+				this.ySize = 0.2F;
+			}
+
+			if(this.dashTimer > 0) {
+				--this.dashTimer;
+				if(this.dashTimer == 0) {
+					this.mc.theWorld.playSoundEffect(this.posX, this.posY, this.posZ, "ext.recharg", 0.6F, 1.0F);
+				}
+			}
+
+			this.flying = ScreenDebugMenu.dbg_conf_fly;
+			this.func_9057_6FZ3s2AdD8672ATKvVLxT93uc6yRL35dQvB2PbBj9KC2ZS6kQVimb3657Hqb();
+			if(Keyboard.isKeyDown(Keyboard.KEY_F8)) {
+				this.worldIn.func_7555_0bxBq3DD3lTvn8h5d6Lh9Ud6SBFd8P1VY734Br5npXUaSk1x7rgO4bfsPjZk();
+			}
+
+			super.onLivingUpdate_handled();
+			if(this.flying) {
+				if(InputHandler.IsKeyDown(InputHandler.mc.options.keyBindJump.keyCode)) {
+					this.motionY = 1.0D;
+				} else if(InputHandler.IsKeyDown(InputHandler.mc.options.keyBindSneak.keyCode)) {
+					this.motionY = -1.0D;
+				} else {
+					this.motionY = 0.0D;
+				}
+			}
+		}
+
+	}
+
+	public void func_9050_0Y2V1e7t06S7hQ12YogQ88R8Lcbm2Sz6Y3o802q297lUgzXrhuM8Ioqo9Hzq(Minecraft minecraft) {
+		if(InputHandler.IsKeyDown(54)) {
+			super.func_9050_0Y2V1e7t06S7hQ12YogQ88R8Lcbm2Sz6Y3o802q297lUgzXrhuM8Ioqo9Hzq(minecraft);
+		} else {
+			this.func_9091_9LGb3eft4Vdk4NKxJJVr2dXQVsNzQTnqHvU8F7T7yL3TgO8aHWk01SZ8U29Z();
+		}
+
+	}
+
+	public void func_9091_9LGb3eft4Vdk4NKxJJVr2dXQVsNzQTnqHvU8F7T7yL3TgO8aHWk01SZ8U29Z() {
+		if(this.field_9097_867sEKNEsa45Xq4Etlk5s449h7UUOWVcX6nYd2PGjFy373Y2PXcol521PBg2 != null) {
+			this.field_9097_867sEKNEsa45Xq4Etlk5s449h7UUOWVcX6nYd2PGjFy373Y2PXcol521PBg2.func_8286_2f84KM1xKjK9eBj4915qo36L405Hm9W3JZ41244r918IGv3BpYiut0G1VBGw(this, this.field_9093_8pX3Foh9nnqOBZGkAhkc659OKcv5h23UrLcQ0x07ZRU1yOwY57fY6vz12UYR);
+		}
+
+	}
+}
--- net/minecraft/src/Packet4UpdateTime.java
+++ net/minecraft/src/Packet4UpdateTime.java
@@ -7,16 +7,16 @@
 public class Packet4UpdateTime extends Packet {
 	public long time;
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.time = var1.readLong();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeLong(this.time);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleUpdateTime(this);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.time = dataInputStream.readLong();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeLong(this.time);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleUpdateTime(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/HandlerSetCheckpointUnknownClass2.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class HandlerSetCheckpointUnknownClass2 {
+	public double field_12186_05n216qDAUZ2kE810Fqi64V6niu79vbRckyfaVY9Fqw11STapU0px02uapMx;
+	public double field_12188_9uq1C9Zys0Le7aJhWE0BeKD05T9G0hDuv6srjUYYK3RiBek01P8Ij69s3Es9;
+	public double field_12187_7Kg8S2j0ooT9LE62UmIi8A7J7Y4sM22qj00KYKP97u5583AOirdarRO6WOFv;
+
+	public HandlerSetCheckpointUnknownClass2(double double1, double double2, double double3) {
+		this.field_12186_05n216qDAUZ2kE810Fqi64V6niu79vbRckyfaVY9Fqw11STapU0px02uapMx = double1;
+		this.field_12188_9uq1C9Zys0Le7aJhWE0BeKD05T9G0hDuv6srjUYYK3RiBek01P8Ij69s3Es9 = double2;
+		this.field_12187_7Kg8S2j0ooT9LE62UmIi8A7J7Y4sM22qj00KYKP97u5583AOirdarRO6WOFv = double3;
+	}
+
+	public double func_12185_77E7ly6r5p8AgeD7j1MC3wrd4wUdbSPPEtyupBLDu5J7c0z302AEf633qiD9(double double1, double double2) {
+		return Math.sqrt(Math.pow(this.field_12186_05n216qDAUZ2kE810Fqi64V6niu79vbRckyfaVY9Fqw11STapU0px02uapMx - double1, 2.0D) + Math.pow(this.field_12187_7Kg8S2j0ooT9LE62UmIi8A7J7Y4sM22qj00KYKP97u5583AOirdarRO6WOFv - double2, 2.0D));
+	}
+}
--- net/minecraft/src/CraftingInventoryWorkbenchCB.java
+++ net/minecraft/src/CraftingInventoryWorkbenchCB.java
@@ -4,31 +4,31 @@
 	public InventoryCrafting craftMatrix = new InventoryCrafting(this, 3, 3);
 	public IInventory craftResult = new InventoryCraftResult();
 
-	public void onCraftMatrixChanged(IInventory var1) {
-		int[] var2 = new int[9];
+	public void a(IInventory cz) {
+		int[] i2 = new int[9];
 
-		for(int var3 = 0; var3 < 3; ++var3) {
-			for(int var4 = 0; var4 < 3; ++var4) {
-				int var5 = var3 + var4 * 3;
-				ItemStack var6 = this.craftMatrix.getStackInSlot(var5);
-				if(var6 == null) {
-					var2[var5] = -1;
+		for(int i3 = 0; i3 < 3; ++i3) {
+			for(int i4 = 0; i4 < 3; ++i4) {
+				int i5 = i3 + i4 * 3;
+				ItemStack itemStack6 = this.craftMatrix.getStackInSlot(i5);
+				if(itemStack6 == null) {
+					i2[i5] = -1;
 				} else {
-					var2[var5] = var6.itemID;
+					i2[i5] = itemStack6.itemID;
 				}
 			}
 		}
 
-		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(var2));
+		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(i2));
 	}
 
-	public void onCraftGuiClosed(EntityPlayer var1) {
-		super.onCraftGuiClosed(var1);
+	public void onCraftGuiClosed(EntityPlayer entityPlayer) {
+		super.onCraftGuiClosed(entityPlayer);
 
-		for(int var2 = 0; var2 < 9; ++var2) {
-			ItemStack var3 = this.craftMatrix.getStackInSlot(var2);
-			if(var3 != null) {
-				var1.dropPlayerItem(var3);
+		for(int i2 = 0; i2 < 9; ++i2) {
+			ItemStack itemStack3 = this.craftMatrix.getStackInSlot(i2);
+			if(itemStack3 != null) {
+				entityPlayer.dropPlayerItem(itemStack3);
 			}
 		}
 
--- net/minecraft/src/CanvasCrashReport.java
+++ net/minecraft/src/CanvasCrashReport.java
@@ -4,8 +4,8 @@
 import java.awt.Dimension;
 
 class CanvasCrashReport extends Canvas {
-	public CanvasCrashReport(int var1) {
-		this.setPreferredSize(new Dimension(var1, var1));
-		this.setMinimumSize(new Dimension(var1, var1));
+	public CanvasCrashReport(int size) {
+		this.setPreferredSize(new Dimension(size, size));
+		this.setMinimumSize(new Dimension(size, size));
 	}
 }
--- net/minecraft/src/Packet50PreChunk.java
+++ net/minecraft/src/Packet50PreChunk.java
@@ -8,21 +8,75 @@
 	public int xPosition;
 	public int yPosition;
 	public boolean mode;
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.mode = var1.read() != 0;
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.write(this.mode ? 1 : 0);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handlePreChunk(this);
+	public float[] field_8483_9F000reVs09qJC6RM1CDXbwpWot2ap8bQLJ224QEy3l8Sj0Ca7AELxBGg6v9;
+
+	public Packet50PreChunk() {
+	}
+
+	public Packet50PreChunk(int integer1, int integer2, float[] arr) {
+		this.xPosition = integer1;
+		this.yPosition = integer2;
+		this.field_8483_9F000reVs09qJC6RM1CDXbwpWot2ap8bQLJ224QEy3l8Sj0Ca7AELxBGg6v9 = arr;
+		this.mode = arr.length != 0;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.mode = dataInputStream.read() != 0;
+		if(this.mode) {
+			float f2 = dataInputStream.readFloat();
+			float f3 = dataInputStream.readFloat();
+			float f4 = f3 - f2;
+			byte[] b5 = new byte[1536];
+			dataInputStream.readFully(b5);
+			this.field_8483_9F000reVs09qJC6RM1CDXbwpWot2ap8bQLJ224QEy3l8Sj0Ca7AELxBGg6v9 = new float[1536];
+
+			for(int i6 = 0; i6 < b5.length; ++i6) {
+				this.field_8483_9F000reVs09qJC6RM1CDXbwpWot2ap8bQLJ224QEy3l8Sj0Ca7AELxBGg6v9[i6] = f2 + (float)(b5[i6] & 255) / 255.0F * f4;
+			}
+		}
+
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.write(this.mode ? 1 : 0);
+		if(this.mode) {
+			float f2 = Float.MAX_VALUE;
+			float f3 = 1.17549435E-38F;
+			float[] f4 = this.field_8483_9F000reVs09qJC6RM1CDXbwpWot2ap8bQLJ224QEy3l8Sj0Ca7AELxBGg6v9;
+			int i5 = f4.length;
+
+			int i6;
+			for(i6 = 0; i6 < i5; ++i6) {
+				float f7 = f4[i6];
+				if(f2 > f7) {
+					f2 = f7;
+				}
+
+				if(f3 < f7) {
+					f3 = f7;
+				}
+			}
+
+			float f8 = f3 - f2;
+			byte[] b9 = new byte[1536];
+
+			for(i6 = 0; i6 < b9.length; ++i6) {
+				b9[i6] = (byte)((int)((this.field_8483_9F000reVs09qJC6RM1CDXbwpWot2ap8bQLJ224QEy3l8Sj0Ca7AELxBGg6v9[i6] + f2) / f8 * 255.0F));
+			}
+
+			dataOutputStream.writeFloat(f2);
+			dataOutputStream.writeFloat(f3);
+			dataOutputStream.write(b9);
+		}
+
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handlePreChunk(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/EnumVendingMachine.java
@@ -1,0 +1,27 @@
+package net.minecraft.src;
+
+public enum EnumVendingMachine {
+	HealthBoost,
+	Armor,
+	Dash,
+	QuickRevive;
+
+    private static final /* synthetic */ EnumVendingMachine[] field_8625_1jn27Ud6K1E5aSFYYd6mPcAHRLbB5b99cdhLMyAifQxcxPKV6fEHsH17Y6Lr;
+
+	
+	public static EnumVendingMachine[] func_8621_1A4K8JmwLTo1bRceY319ILcN68Kz1yddU8DZWKk5CMsNwnMN4Amc8gdj0Pfv() {
+		return (EnumVendingMachine[])field_8625_1jn27Ud6K1E5aSFYYd6mPcAHRLbB5b99cdhLMyAifQxcxPKV6fEHsH17Y6Lr.clone();
+	}
+
+	public static EnumVendingMachine func_8620_0aJ1y4py1uO94VN9J2l4GELt978qX5AXCL4ZmZHwpP1ii30s8C2kJ6youLd6(String string) {
+		return (EnumVendingMachine)Enum.valueOf(EnumVendingMachine.class, string);
+	}
+
+	private static EnumVendingMachine[] func_8619_0VbSu8hi2TTghgtF7b2V61g7ZVe4jHvkomY6fhXrpXdH8k2GY6X98sWc6368() {
+		return new EnumVendingMachine[]{HealthBoost, Armor, Dash, QuickRevive};
+	}
+
+    static {
+        field_8625_1jn27Ud6K1E5aSFYYd6mPcAHRLbB5b99cdhLMyAifQxcxPKV6fEHsH17Y6Lr = EnumVendingMachine.func_8619_0VbSu8hi2TTghgtF7b2V61g7ZVe4jHvkomY6fhXrpXdH8k2GY6X98sWc6368();
+    }
+}
--- /dev/null
+++ net/minecraft/src/EntityLeafFX.java
@@ -1,0 +1,37 @@
+package net.minecraft.src;
+
+public class EntityLeafFX extends EntityFX {
+	public EntityLeafFX(World worldObj, double x, double y, double z, double motionX, double motionY, double motionZ) {
+		super(worldObj, x, y, z, motionX, motionY, motionZ);
+		this.motionX = this.motionX * (double)0.01F + motionX;
+		this.motionY = this.motionY * (double)0.01F + motionY;
+		this.motionZ = this.motionZ * (double)0.01F + motionZ;
+		this.particleRed = this.particleGreen = this.particleBlue = 1.0F;
+		this.noClip = true;
+		this.particleTextureIndex = 80;
+		this.particleMaxAge *= 2;
+	}
+
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		super.renderParticle(tessellator, renderPartialTick, xOffset, yOffset, zOffset, xOffset2, zOffset2);
+	}
+
+	public void onUpdate() {
+		this.prevPosX = this.posX;
+		this.prevPosY = this.posY;
+		this.prevPosZ = this.posZ;
+		if(this.particleAge++ >= this.particleMaxAge) {
+			this.setEntityDead();
+		}
+
+		this.moveEntity(this.motionX, this.motionY, this.motionZ);
+		this.motionX *= (double)0.96F;
+		this.motionY *= (double)0.96F;
+		this.motionZ *= (double)0.96F;
+		if(this.onGround) {
+			this.motionX *= (double)0.7F;
+			this.motionZ *= (double)0.7F;
+		}
+
+	}
+}
--- net/minecraft/src/ModelPig.java
+++ net/minecraft/src/ModelPig.java
@@ -5,7 +5,7 @@
 		super(6, 0.0F);
 	}
 
-	public ModelPig(float var1) {
-		super(6, var1);
+	public ModelPig(float float1) {
+		super(6, float1);
 	}
 }
--- net/minecraft/src/GuiOptions.java
+++ net/minecraft/src/GuiOptions.java
@@ -4,47 +4,76 @@
 	private GuiScreen parentScreen;
 	protected String screenTitle = "Options";
 	private GameSettings options;
+	public GuiOptionsUnknownClass[] field_7995_39B0S54XEoj9o578952Q1No7Z7432CSZfrb5cQA55jyR56Cie0Dk9uTlnOSY = new GuiOptionsUnknownClass[]{new GuiOptionsUnknownClass("AUDIO", new int[]{0, 1}), new GuiOptionsUnknownClass("CONTROLS", new int[]{2, 3, 100}), new GuiOptionsUnknownClass("GAME", new int[]{8, 5, 10}), new GuiOptionsUnknownClass("GRAPHICS", new int[]{4, 6, 7, 9, 11, 12, 101}), new GuiOptionsUnknownClass("ADV.GRAPHICS", new int[]{20, 21, 22, 23, 24})};
+	int field_7993_0H17uB6IO6cG7dQAsZqeXTW7jbxvmHrvBd13bbhKX72k1G3KevfMB9wFULbX = 0;
 
-	public GuiOptions(GuiScreen var1, GameSettings var2) {
-		this.parentScreen = var1;
-		this.options = var2;
+	public GuiOptions(GuiScreen hr, GameSettings we) {
+		this.parentScreen = hr;
+		this.options = we;
 	}
 
 	public void initGui() {
-		for(int var1 = 0; var1 < this.options.numberOfOptions; ++var1) {
-			int var2 = this.options.isSlider(var1);
-			if(var2 == 0) {
-				this.controlList.add(new GuiSmallButton(var1, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), this.options.getOptionDisplayString(var1)));
+		this.controlList.clear();
+		byte b1 = 80;
+
+		int i2;
+		for(i2 = 0; i2 != this.field_7995_39B0S54XEoj9o578952Q1No7Z7432CSZfrb5cQA55jyR56Cie0Dk9uTlnOSY.length; ++i2) {
+			GuiOptionsUnknownClass guiOptionsUnknownClass3 = this.field_7995_39B0S54XEoj9o578952Q1No7Z7432CSZfrb5cQA55jyR56Cie0Dk9uTlnOSY[i2];
+			ButtonSel buttonSel4 = new ButtonSel(300 + i2, 10 + b1 * i2, 50, b1, 20, guiOptionsUnknownClass3.field_11925_9Ru5RKiPGrWu85AybUGX8oMPo03B0m3zkt61t6dKCVEnr8y0yY74Kh1R2IVb, false);
+			this.controlList.add(buttonSel4);
+			buttonSel4.enabled = this.field_7993_0H17uB6IO6cG7dQAsZqeXTW7jbxvmHrvBd13bbhKX72k1G3KevfMB9wFULbX != i2;
+		}
+
+		i2 = 0;
+		byte b7 = 100;
+
+		for(int i8 = 0; i8 < this.field_7995_39B0S54XEoj9o578952Q1No7Z7432CSZfrb5cQA55jyR56Cie0Dk9uTlnOSY[this.field_7993_0H17uB6IO6cG7dQAsZqeXTW7jbxvmHrvBd13bbhKX72k1G3KevfMB9wFULbX].field_11926_9f6mt94hA9p2UClP6Cr5Zgnmo0Z76O6tynyCk27MR31oKNk3vK7Snk8Fkgl8.length; ++i8) {
+			int i5 = this.field_7995_39B0S54XEoj9o578952Q1No7Z7432CSZfrb5cQA55jyR56Cie0Dk9uTlnOSY[this.field_7993_0H17uB6IO6cG7dQAsZqeXTW7jbxvmHrvBd13bbhKX72k1G3KevfMB9wFULbX].field_11926_9f6mt94hA9p2UClP6Cr5Zgnmo0Z76O6tynyCk27MR31oKNk3vK7Snk8Fkgl8[i8];
+			int i6 = this.options.isSlider(i5);
+			if(i6 == 0) {
+				this.controlList.add(new GuiSmallButton(i5, this.width / 2 - 155 + i8 % 2 * 160, b7 + 24 * (i8 >> 1), this.options.getOptionDisplayString(i5)));
 			} else {
-				this.controlList.add(new GuiSlider(var1, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), var1, this.options.getOptionDisplayString(var1), this.options.getOptionFloatValue(var1)));
+				this.controlList.add(new GuiSlider(i5, this.width / 2 - 155 + i8 % 2 * 160, b7 + 24 * (i8 >> 1), i5, this.options.getOptionDisplayString(i5), this.options.getOptionFloatValue(i5)));
 			}
+
+			i2 = ((GuiButton)this.controlList.get(this.controlList.size() - 1)).yPosition;
 		}
 
-		this.controlList.add(new GuiButton(100, this.width / 2 - 100, this.height / 6 + 120 + 12, "Controls..."));
-		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, "Done"));
+		this.controlList.add(new ButtonSel(200, this.width / 2 - 100, Math.min(this.height / 6 * 5, i2 + 58), 180, 20, "Done", false));
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.enabled) {
-			if(var1.id < 100) {
-				this.options.setOptionValue(var1.id, 1);
-				var1.displayString = this.options.getOptionDisplayString(var1.id);
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled) {
+			if(button.id < 100) {
+				this.options.setOptionValue(button.id, 1);
+				button.displayString = this.options.getOptionDisplayString(button.id);
 			}
 
-			if(var1.id == 100) {
+			if(button.id == 100) {
 				this.mc.displayGuiScreen(new GuiControls(this, this.options));
 			}
 
-			if(var1.id == 200) {
+			if(button.id == 101) {
+				this.mc.displayGuiScreen(new GuiVisuals(this));
+			}
+
+			if(button.id == 200) {
+				this.options.saveOptions();
 				this.mc.displayGuiScreen(this.parentScreen);
 			}
 
+			if(button.id >= 300 && button.id < 400) {
+				this.field_7993_0H17uB6IO6cG7dQAsZqeXTW7jbxvmHrvBd13bbhKX72k1G3KevfMB9wFULbX = button.id - 300;
+				this.initGui();
+			}
 		}
+
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 0xFFFFFF);
+		Gui.drawGradientRect(0, 80, this.width, this.height, -1610612736, 537657372);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- net/minecraft/src/EntityPlayerSP.java
+++ net/minecraft/src/EntityPlayerSP.java
@@ -4,78 +4,165 @@
 
 public class EntityPlayerSP extends EntityPlayer {
 	public MovementInput movementInput;
-	private Minecraft mc;
+	protected Minecraft mc;
+	public int dashTimer = 0;
+	protected long lastGroupX = 0L;
+	protected long lastGroupZ = 0L;
+	protected long lastPlayerX = 0L;
+	protected long lastPlayerZ = 0L;
 
-	public EntityPlayerSP(Minecraft var1, World var2, Session var3) {
-		super(var2);
-		this.mc = var1;
-		if(var3 != null && var3.username != null && var3.username.length() > 0) {
-			this.skinUrl = "http://www.minecraft.net/skin/" + var3.username + ".png";
+	public EntityPlayerSP(Minecraft mc, World worldObj, Session session) {
+		super(worldObj);
+		this.mc = mc;
+		if(session != null && session.username != null && session.username.length() > 0) {
+			this.skinUrl = session.username;
 			System.out.println("Loading texture " + this.skinUrl);
 		}
 
-		this.username = var3.username;
+		this.username = session.username;
 	}
 
 	public void updateEntityActionState() {
 		super.updateEntityActionState();
 		this.moveStrafing = this.movementInput.moveStrafe;
 		this.moveForward = this.movementInput.moveForward;
+		if(this.isSneaking() && this.isInsideOfMaterial(Material.water)) {
+			this.moveForward /= 2.0F;
+			this.moveStrafing /= 2.0F;
+		}
+
 		this.isJumping = this.movementInput.jump;
 	}
 
+	public void func_9048_6Gw1VytaaUv0K01sl03hRqP53Gtn1diJT7GGN022KtBtJsK73Sx1JZ0GS264() {
+		super.func_8999_2V2k958X8cUl0N1lA83kol6zqQt7yi5f733JmXLv5F2q3Uq9IkthN796za9B();
+	}
+
+	public void onLivingUpdate_handled() {
+		super.onLivingUpdate();
+	}
+
+	public void func_9057_6FZ3s2AdD8672ATKvVLxT93uc6yRL35dQvB2PbBj9KC2ZS6kQVimb3657Hqb() {
+		long j1 = (long)this.posX;
+		long j3 = (long)this.posZ;
+		if(j1 != this.lastPlayerX || j3 != this.lastPlayerZ) {
+			this.lastPlayerX = j1;
+			this.lastPlayerZ = j3;
+			ExtEvents.PlayerMoveXZBlock(this, this.worldObj);
+		}
+
+	}
+
+	public void func_9053_4r7E25wNycK5Dtg6xYrBsbWgXj4SV79G01FBa6LOr2ZexDCWEEl67EY5VZXD() {
+		long j1 = (long)this.posX;
+		long j3 = (long)this.posZ;
+		long j5 = j1 / 32L;
+		long j7 = j3 / 32L;
+		if(this.lastGroupX != j5 || this.lastGroupZ != j7) {
+			this.lastGroupX = j5;
+			this.lastGroupZ = j7;
+			ExtEvents.PlayerMoveChunkgroup(this, this.worldObj);
+		}
+
+	}
+
 	public void onLivingUpdate() {
+		this.affectedByFallDamage = !this.flying;
 		this.movementInput.updatePlayerMoveState(this);
 		if(this.movementInput.sneak && this.ySize < 0.2F) {
 			this.ySize = 0.2F;
 		}
 
+		if(this.air < 150 && this.air % 15 == 0) {
+			int i1 = 1 + this.rand.nextInt(this.isSneaking() ? 2 : 5);
+
+			for(int i2 = 0; i2 != i1; ++i2) {
+				this.worldObj.spawnParticle("bubble", this.posX, this.posY, this.posZ + (double)((float)(i2 / i1) * 0.2F), 0.0D, 0.5D, 0.0D);
+			}
+		}
+
+		if(this.dashTimer > 0) {
+			--this.dashTimer;
+			if(this.dashTimer == 0) {
+				this.mc.theWorld.playSoundEffect(this.posX, this.posY, this.posZ, "ext.recharg", 0.6F, 1.0F);
+			}
+		}
+
+		this.func_9057_6FZ3s2AdD8672ATKvVLxT93uc6yRL35dQvB2PbBj9KC2ZS6kQVimb3657Hqb();
+		this.func_9053_4r7E25wNycK5Dtg6xYrBsbWgXj4SV79G01FBa6LOr2ZexDCWEEl67EY5VZXD();
+		this.flying = ScreenDebugMenu.dbg_conf_fly;
 		super.onLivingUpdate();
+		if(this.flying) {
+			if(InputHandler.IsKeyDown(InputHandler.mc.options.keyBindJump.keyCode)) {
+				this.motionY = 1.0D;
+			} else if(InputHandler.IsKeyDown(InputHandler.mc.options.keyBindSneak.keyCode)) {
+				this.motionY = -1.0D;
+			} else {
+				this.motionY = 0.0D;
+			}
+		}
+
 	}
 
 	public void resetPlayerKeyState() {
 		this.movementInput.resetKeyState();
 	}
 
-	public void handleKeyPress(int var1, boolean var2) {
-		this.movementInput.checkKeyForMovementInput(var1, var2);
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setInteger("Score", this.score);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.score = var1.getInteger("Score");
-	}
-
-	public void displayGUIChest(IInventory var1) {
-		this.mc.displayGuiScreen(new GuiChest(this.inventory, var1));
-	}
-
-	public void displayGUIEditSign(TileEntitySign var1) {
-		this.mc.displayGuiScreen(new GuiEditSign(var1));
+	public void handleKeyPress(int integer, boolean boolean2) {
+		this.movementInput.checkKeyForMovementInput(integer, boolean2);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+		nbttagcompound.setInteger("Score", this.score);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+		this.score = nbttagcompound.getInteger("Score");
+	}
+
+	public void func_9014_8m5ZIeFsLDmTSL7vg0gU2Gb8dJg6fdSuixcwsqYKcnVLS6AUHVRG1qS6my5L() {
+		this.mc.displayGuiScreen(new GuiPlayer());
+	}
+
+	public void displayGUIChest(IInventory inventory) {
+		this.mc.displayGuiScreen(new GuiChest(this.inventory, inventory));
+	}
+
+	public void displayGUIEditSign(TileEntitySign tileEntitySign) {
+		this.mc.displayGuiScreen(new GuiEditSign(tileEntitySign));
 	}
 
 	public void displayWorkbenchGUI() {
 		this.mc.displayGuiScreen(new GuiCrafting(this.inventory));
 	}
 
-	public void displayGUIFurnace(TileEntityFurnace var1) {
-		this.mc.displayGuiScreen(new GuiFurnace(this.inventory, var1));
-	}
-
-	public void attackEntity(Entity var1) {
-		int var2 = this.inventory.getDamageVsEntity(var1);
-		if(var2 > 0) {
-			var1.attackEntityFrom(this, var2);
-			ItemStack var3 = this.getCurrentEquippedItem();
-			if(var3 != null && var1 instanceof EntityLiving) {
-				var3.hitEntity((EntityLiving)var1);
-				if(var3.stackSize <= 0) {
-					var3.onItemDestroyedByUse(this);
+	public void displayEssenceTransformerGUI() {
+		this.mc.displayGuiScreen(new GuiEssenceTransformer(this.inventory));
+	}
+
+	public void displayEssenceClonerGUI() {
+		this.mc.displayGuiScreen(new GuiEssenceCloner(this.inventory));
+	}
+
+	public void displayFreezerGUI(TileEntityFreezer tileEntityFreezer) {
+		this.mc.displayGuiScreen(new GuiFreezer(this.inventory, tileEntityFreezer));
+	}
+
+	public void displayGUIFurnace(TileEntityFurnace tileEntityFurnace) {
+		this.mc.displayGuiScreen(new GuiFurnace(this.inventory, tileEntityFurnace));
+	}
+
+	public void attackEntity(Entity entity) {
+		int i2 = this.inventory.getDamageVsEntity(entity);
+		if(i2 > 0) {
+			entity.attackEntityFrom(this, i2);
+			ItemStack itemStack3 = this.getCurrentEquippedItem();
+			if(itemStack3 != null && entity instanceof EntityLiving) {
+				itemStack3.hitEntity((EntityLiving)entity);
+				if(itemStack3.stackSize <= 0) {
+					itemStack3.onItemDestroyedByUse(this);
 					this.destroyCurrentEquippedItem();
 				}
 			}
@@ -83,29 +170,67 @@
 
 	}
 
-	public void onItemPickup(Entity var1, int var2) {
-		this.mc.effectRenderer.addEffect(new EntityPickupFX(this.mc.theWorld, var1, this, -0.5F));
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		if(InputHandler.field_9759_4OT0vPMcJ68s5EU822c0Y9Asw74Su111s3rRCw8OSGMsYM8lx153p73RBtj3) {
+			return true;
+		} else {
+			if(entity instanceof EntityEssenceProjectileUnknownClass) {
+				damage /= 3;
+			}
+
+			if(this.mc.options.difficulty != 4) {
+				return super.attackEntityFrom(entity, damage);
+			} else if(this.health <= 0) {
+				return false;
+			} else if((float)this.heartsLife > (float)this.heartsHalvesLife / 2.0F) {
+				return false;
+			} else {
+				this.heartsLife = this.heartsHalvesLife;
+				System.out.println("Damage taken: " + damage);
+				if(this.inventory.getTotalArmorValue() == 0) {
+					this.health = 0;
+					this.onDeath((Entity)null);
+					this.worldObj.playSoundAtEntity(this, "random.glass", 1.0F, 1.0F);
+				} else {
+					this.worldObj.playSoundAtEntity(this, "ext.crack", 1.0F, 1.0F);
+					int i3 = 0;
+
+					for(int i4 = 0; i4 != 4; ++i4) {
+						i3 += this.inventory.armorItemInSlot(i4) == null ? 0 : 1;
+					}
+
+					this.inventory.damageArmor(damage * 16 / i3);
+				}
+
+				return true;
+			}
+		}
+	}
+
+	public void onItemPickup(Entity entity, int integer) {
+		this.mc.effectRenderer.addEffect(new EntityPickupFX(this.mc.theWorld, entity, this, -0.5F));
 	}
 
 	public int getPlayerArmorValue() {
 		return this.inventory.getTotalArmorValue();
 	}
 
-	public void interactWithEntity(Entity var1) {
-		if(!var1.interact(this)) {
-			ItemStack var2 = this.getCurrentEquippedItem();
-			if(var2 != null && var1 instanceof EntityLiving) {
-				var2.useItemOnEntity((EntityLiving)var1);
-				if(var2.stackSize <= 0) {
-					var2.onItemDestroyedByUse(this);
+	public void interactWithEntity(Entity entity) {
+		if(!entity.interact(this)) {
+			ItemStack itemStack2 = this.getCurrentEquippedItem();
+			if(itemStack2 != null && entity instanceof EntityLiving) {
+				itemStack2.useItemOnEntity((EntityLiving)entity);
+				if(itemStack2.stackSize <= 0) {
+					itemStack2.onItemDestroyedByUse(this);
 					this.destroyCurrentEquippedItem();
 				}
 			}
-
 		}
+
 	}
 
-	public void sendChatMessage(String var1) {
+	public void sendChatMessage(String chatMessage) {
+		this.mc.ingameGUI.addChatMessage(this.username + "> " + chatMessage);
 	}
 
 	public void onPlayerUpdate() {
@@ -113,5 +238,21 @@
 
 	public boolean isSneaking() {
 		return this.movementInput.sneak;
+	}
+
+	public void func_9050_0Y2V1e7t06S7hQ12YogQ88R8Lcbm2Sz6Y3o802q297lUgzXrhuM8Ioqo9Hzq(Minecraft minecraft) {
+		minecraft.displayGuiScreen(new GuiInventory(this.inventory, this.inventory.craftingInventory));
+	}
+
+	public void func_9049_0ir9tc7u5jmtNfeoBzZphngtt8O4D64zHw295M26kn9G40qzE3od61GQC9sP(Object object) {
+		GuiScreen guiScreen2 = ModLoader.OpenModGUI(this, object);
+		if(guiScreen2 != null) {
+			this.mc.displayGuiScreen(guiScreen2);
+		}
+
+	}
+
+	public boolean func_9051_0BV0Y2WM6kf88F6w7vcsLwnVBSniYsQu514MV1I5ZUN7fP2Rw484I9Mp1dV0(Class class1) {
+		return class1 == null ? this.mc.currentScreen == null : class1.isInstance(this.mc.currentScreen);
 	}
 }
--- net/minecraft/src/EnumSkyBlock.java
+++ net/minecraft/src/EnumSkyBlock.java
@@ -5,8 +5,26 @@
 	Block(0);
 
 	public final int defaultLightValue;
-
-	private EnumSkyBlock(int var3) {
-		this.defaultLightValue = var3;
-	}
+	
+    private static final /* synthetic */ EnumSkyBlock[] field_11426_9Oc2Y0v2oEq5UbV2KOWF7q7h2MOzsnA3gAIO7v6aO8XLd4L3c2Yxv0Iaun8K;
+
+	public static EnumSkyBlock[] func_11423_7onbADO9fG53f1v6L10ZSInBoLlz81WNX5z63C3Mkd786XD9881q8bWzF1gN() {
+		return (EnumSkyBlock[])field_11426_9Oc2Y0v2oEq5UbV2KOWF7q7h2MOzsnA3gAIO7v6aO8XLd4L3c2Yxv0Iaun8K.clone();
+	}
+
+	public static EnumSkyBlock func_11422_35IUvK4RK2Pe4JauNi90Ozvp1f4FO3FYCdGiu7GQ0TKrUT3uO7BHEN93zOt0(String string) {
+		return (EnumSkyBlock)Enum.valueOf(EnumSkyBlock.class, string);
+	}
+
+	private EnumSkyBlock(int integer3) {
+		this.defaultLightValue = integer3;
+	}
+
+	private static EnumSkyBlock[] func_11424_2Wq1HNI2vV64aNT0V0zloEyh02E97lV1vY3DkWi79v950BJB8nMoOofpp31N() {
+		return new EnumSkyBlock[]{Sky, Block};
+	}
+
+    static {
+        field_11426_9Oc2Y0v2oEq5UbV2KOWF7q7h2MOzsnA3gAIO7v6aO8XLd4L3c2Yxv0Iaun8K = EnumSkyBlock.func_11424_2Wq1HNI2vV64aNT0V0zloEyh02E97lV1vY3DkWi79v950BJB8nMoOofpp31N();
+    }
 }
--- /dev/null
+++ net/minecraft/src/EntitySquib.java
@@ -1,0 +1,35 @@
+package net.minecraft.src;
+
+public class EntitySquib extends EntityMob {
+	public boolean unusedBool2 = false;
+
+	public EntitySquib(World world) {
+		super(world);
+		this.texture = "/mob/kill_squid.png";
+		this.setSize(1.0F, 2.0F);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+	}
+
+	protected String getHurtSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected String getDeathSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected float getSoundVolume() {
+		return 0.4F;
+	}
+
+	public boolean interact(EntityPlayer entityPlayer) {
+		return false;
+	}
+}
--- net/minecraft/src/GuiConflictWarning.java
+++ net/minecraft/src/GuiConflictWarning.java
@@ -12,22 +12,20 @@
 		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120 + 12, "Back to title screen"));
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.enabled) {
-			if(var1.id == 0) {
-				this.mc.displayGuiScreen(new GuiMainMenu());
-			}
-
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled && button.id == 0) {
+			this.mc.displayGuiScreen(new GuiMainMenu());
 		}
+
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, "Level save conflict", this.width / 2, this.height / 4 - 60 + 20, 16777215);
-		this.drawString(this.fontRenderer, "Minecraft detected a conflict in the level save data.", this.width / 2 - 140, this.height / 4 - 60 + 60 + 0, 10526880);
-		this.drawString(this.fontRenderer, "This could be caused by two copies of the game", this.width / 2 - 140, this.height / 4 - 60 + 60 + 18, 10526880);
-		this.drawString(this.fontRenderer, "accessing the same level.", this.width / 2 - 140, this.height / 4 - 60 + 60 + 27, 10526880);
-		this.drawString(this.fontRenderer, "To prevent level corruption, the current game has quit.", this.width / 2 - 140, this.height / 4 - 60 + 60 + 45, 10526880);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, "Level save conflict", this.width / 2, this.height / 4 - 60 + 20, 0xFFFFFF);
+		drawString(this.fontRenderer, "Minecraft detected a conflict in the level save data.", this.width / 2 - 140, this.height / 4 - 60 + 60 + 0, 10526880);
+		drawString(this.fontRenderer, "This could be caused by two copies of the game", this.width / 2 - 140, this.height / 4 - 60 + 60 + 18, 10526880);
+		drawString(this.fontRenderer, "accessing the same level.", this.width / 2 - 140, this.height / 4 - 60 + 60 + 27, 10526880);
+		drawString(this.fontRenderer, "To prevent level corruption, the current game has quit.", this.width / 2 - 140, this.height / 4 - 60 + 60 + 45, 10526880);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- net/minecraft/src/BlockSand.java
+++ net/minecraft/src/BlockSand.java
@@ -5,31 +5,31 @@
 public class BlockSand extends Block {
 	public static boolean fallInstantly = false;
 
-	public BlockSand(int var1, int var2) {
-		super(var1, var2, Material.sand);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		this.tryToFall(var1, var2, var3, var4);
-	}
-
-	private void tryToFall(World var1, int var2, int var3, int var4) {
-		if(canFallBelow(var1, var2, var3 - 1, var4) && var3 >= 0) {
-			EntityFallingSand var8 = new EntityFallingSand(var1, (float)var2 + 0.5F, (float)var3 + 0.5F, (float)var4 + 0.5F, this.blockID);
+	public BlockSand(int id, int blockIndex) {
+		super(id, blockIndex, Material.sand);
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		world.scheduleBlockUpdate(x, y, z, this.blockID);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		world.scheduleBlockUpdate(x, y, z, this.blockID);
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		this.tryToFall(world, x, y, z);
+	}
+
+	private void tryToFall(World world, int x, int y, int z) {
+		if(Math.abs(x) <= 12540000 && Math.abs(z) <= 12540000 && canFallBelow(world, x, y - 1, z) && y >= 0) {
+			EntityFallingSand entityFallingSand5 = new EntityFallingSand(world, (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F, this.blockID);
 			if(fallInstantly) {
-				while(!var8.isDead) {
-					var8.onUpdate();
+				while(!entityFallingSand5.isDead) {
+					entityFallingSand5.onUpdate();
 				}
 			} else {
-				var1.spawnEntityInWorld(var8);
+				world.spawnEntityInWorld(entityFallingSand5);
 			}
 		}
 
@@ -39,15 +39,15 @@
 		return 3;
 	}
 
-	public static boolean canFallBelow(World var0, int var1, int var2, int var3) {
-		int var4 = var0.getBlockId(var1, var2, var3);
-		if(var4 == 0) {
+	public static boolean canFallBelow(World world, int x, int y, int z) {
+		int i4 = world.getBlockId(x, y, z);
+		if(i4 == 0) {
 			return true;
-		} else if(var4 == Block.fire.blockID) {
+		} else if(i4 == Block.fire.blockID) {
 			return true;
 		} else {
-			Material var5 = Block.blocksList[var4].material;
-			return var5 == Material.water ? true : var5 == Material.lava;
+			Material material5 = Block.blocksList[i4].material;
+			return material5 == Material.water ? true : material5 == Material.lava;
 		}
 	}
 }
--- net/minecraft/src/RenderGiantZombie.java
+++ net/minecraft/src/RenderGiantZombie.java
@@ -5,16 +5,16 @@
 public class RenderGiantZombie extends RenderLiving {
 	private float scale;
 
-	public RenderGiantZombie(ModelBase var1, float var2, float var3) {
-		super(var1, var2 * var3);
-		this.scale = var3;
+	public RenderGiantZombie(ModelBase yi, float float2, float float3) {
+		super(yi, float2 * float3);
+		this.scale = float3;
 	}
 
-	protected void preRenderScale(EntityGiantZombie var1, float var2) {
+	protected void preRenderScale(EntityGiantZombie gc, float float2) {
 		GL11.glScalef(this.scale, this.scale, this.scale);
 	}
 
-	protected void preRenderCallback(EntityLiving var1, float var2) {
-		this.preRenderScale((EntityGiantZombie)var1, var2);
+	protected void preRenderCallback(EntityLiving zi, float float2) {
+		this.preRenderScale((EntityGiantZombie)zi, float2);
 	}
 }
--- /dev/null
+++ net/minecraft/src/Start.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.lang.reflect.Field;
+
+import net.minecraft.client.Minecraft;
+
+public class Start {
+	public static void main(String[] arr) {
+		try {
+			Field field1 = Minecraft.class.getDeclaredField("minecraftDir");
+			Field.setAccessible(new Field[]{field1}, true);
+			field1.set((Object)null, new File("."));
+		} catch (Exception exception2) {
+			exception2.printStackTrace();
+			return;
+		}
+
+		Minecraft.main(arr);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockFurnaceOld.java
@@ -1,0 +1,110 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockFurnaceOld extends BlockContainerOld {
+	private final boolean isActive;
+
+	protected BlockFurnaceOld(int integer, boolean boolean2) {
+		super(integer, Material.rock);
+		this.isActive = boolean2;
+		this.blockIndexInTexture = 45;
+	}
+
+	public int idDropped(int integer, Random random) {
+		return BlockOld.stoneOvenIdle.blockID;
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+		super.onBlockAdded(vg, integer2, integer3, integer4);
+		this.setDefaultDirection(vg, integer2, integer3, integer4);
+	}
+
+	private void setDefaultDirection(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockId(integer2, integer3, integer4 - 1);
+		int i6 = vg.getBlockId(integer2, integer3, integer4 + 1);
+		int i7 = vg.getBlockId(integer2 - 1, integer3, integer4);
+		int i8 = vg.getBlockId(integer2 + 1, integer3, integer4);
+		byte b9 = 3;
+		if(BlockOld.opaqueCubeLookup[i5] && !BlockOld.opaqueCubeLookup[i6]) {
+			b9 = 3;
+		}
+
+		if(BlockOld.opaqueCubeLookup[i6] && !BlockOld.opaqueCubeLookup[i5]) {
+			b9 = 2;
+		}
+
+		if(BlockOld.opaqueCubeLookup[i7] && !BlockOld.opaqueCubeLookup[i8]) {
+			b9 = 5;
+		}
+
+		if(BlockOld.opaqueCubeLookup[i8] && !BlockOld.opaqueCubeLookup[i7]) {
+			b9 = 4;
+		}
+
+		vg.setBlockMetadataWithNotify(integer2, integer3, integer4, b9);
+	}
+
+	public int getBlockTexture(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		if(integer5 == 1) {
+			return BlockOld.stone.blockIndexInTexture;
+		} else if(integer5 == 0) {
+			return BlockOld.stone.blockIndexInTexture;
+		} else {
+			int i6 = abt.getBlockMetadata(integer2, integer3, integer4);
+			return integer5 != i6 ? this.blockIndexInTexture : (this.isActive ? this.blockIndexInTexture + 16 : this.blockIndexInTexture - 1);
+		}
+	}
+
+	public void randomDisplayTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(this.isActive) {
+			int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+			float f7 = (float)integer2 + 0.5F;
+			float f8 = (float)integer3 + 0.0F + random.nextFloat() * 6.0F / 16.0F;
+			float f9 = (float)integer4 + 0.5F;
+			float f10 = 0.52F;
+			float f11 = random.nextFloat() * 0.6F - 0.3F;
+			if(i6 == 4) {
+				vg.spawnParticle("smoke", (double)(f7 - f10), (double)f8, (double)(f9 + f11), 0.0D, 0.0D, 0.0D);
+				vg.spawnParticle("flame", (double)(f7 - f10), (double)f8, (double)(f9 + f11), 0.0D, 0.0D, 0.0D);
+			} else if(i6 == 5) {
+				vg.spawnParticle("smoke", (double)(f7 + f10), (double)f8, (double)(f9 + f11), 0.0D, 0.0D, 0.0D);
+				vg.spawnParticle("flame", (double)(f7 + f10), (double)f8, (double)(f9 + f11), 0.0D, 0.0D, 0.0D);
+			} else if(i6 == 2) {
+				vg.spawnParticle("smoke", (double)(f7 + f11), (double)f8, (double)(f9 - f10), 0.0D, 0.0D, 0.0D);
+				vg.spawnParticle("flame", (double)(f7 + f11), (double)f8, (double)(f9 - f10), 0.0D, 0.0D, 0.0D);
+			} else if(i6 == 3) {
+				vg.spawnParticle("smoke", (double)(f7 + f11), (double)f8, (double)(f9 + f10), 0.0D, 0.0D, 0.0D);
+				vg.spawnParticle("flame", (double)(f7 + f11), (double)f8, (double)(f9 + f10), 0.0D, 0.0D, 0.0D);
+			}
+
+		}
+	}
+
+	public int getBlockTextureFromSide(int integer) {
+		return integer == 1 ? BlockOld.stone.blockID : (integer == 0 ? BlockOld.stone.blockID : (integer == 3 ? this.blockIndexInTexture - 1 : this.blockIndexInTexture));
+	}
+
+	public boolean blockActivated(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+		TileEntityFurnace tileEntityFurnace6 = (TileEntityFurnace)vg.getBlockTileEntity(integer2, integer3, integer4);
+		gb.displayGUIFurnace(tileEntityFurnace6);
+		return true;
+	}
+
+	public static void updateFurnaceBlockState(boolean boolean1, World vg, int integer3, int integer4, int integer5) {
+		int i5 = vg.getBlockMetadata(integer3, integer4, integer5);
+		TileEntity tileEntity6 = vg.getBlockTileEntity(integer3, integer4, integer5);
+		if(boolean1) {
+			vg.setBlockWithNotify(integer3, integer4, integer5, BlockOld.stoneOvenActive.blockID);
+		} else {
+			vg.setBlockWithNotify(integer3, integer4, integer5, BlockOld.stoneOvenIdle.blockID);
+		}
+
+		vg.setBlockMetadataWithNotify(integer3, integer4, integer5, i5);
+		vg.setBlockTileEntity(integer3, integer4, integer5, tileEntity6);
+	}
+
+	protected TileEntity getBlockEntity() {
+		return new TileEntityFurnace();
+	}
+}
--- net/minecraft/src/Packet11PlayerPosition.java
+++ net/minecraft/src/Packet11PlayerPosition.java
@@ -9,29 +9,29 @@
 		this.moving = true;
 	}
 
-	public Packet11PlayerPosition(double var1, double var3, double var5, double var7, boolean var9) {
-		this.xPosition = var1;
-		this.yPosition = var3;
-		this.stance = var5;
-		this.zPosition = var7;
-		this.onGround = var9;
+	public Packet11PlayerPosition(double x, double minY, double y, double z, boolean onGround) {
+		this.xPosition = x;
+		this.yPosition = minY;
+		this.stance = y;
+		this.zPosition = z;
+		this.onGround = onGround;
 		this.moving = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readDouble();
-		this.yPosition = var1.readDouble();
-		this.stance = var1.readDouble();
-		this.zPosition = var1.readDouble();
-		super.readPacketData(var1);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readDouble();
+		this.yPosition = dataInputStream.readDouble();
+		this.stance = dataInputStream.readDouble();
+		this.zPosition = dataInputStream.readDouble();
+		super.readPacketData(dataInputStream);
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeDouble(this.xPosition);
-		var1.writeDouble(this.yPosition);
-		var1.writeDouble(this.stance);
-		var1.writeDouble(this.zPosition);
-		super.writePacket(var1);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeDouble(this.xPosition);
+		dataOutputStream.writeDouble(this.yPosition);
+		dataOutputStream.writeDouble(this.stance);
+		dataOutputStream.writeDouble(this.zPosition);
+		super.writePacket(dataOutputStream);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/IChunkLoader.java
+++ net/minecraft/src/IChunkLoader.java
@@ -3,11 +3,11 @@
 import java.io.IOException;
 
 public interface IChunkLoader {
-	Chunk loadChunk(World var1, int var2, int var3) throws IOException;
-
-	void saveChunk(World var1, Chunk var2) throws IOException;
-
-	void saveExtraChunkData(World var1, Chunk var2);
+	Chunk loadChunk(World world1, int i2, int i3) throws IOException;
+
+	void saveChunk(World world1, Chunk chunk2) throws IOException;
+
+	void saveExtraChunkData(World world1, Chunk chunk2);
 
 	void chunkTick();
 
--- /dev/null
+++ net/minecraft/src/CommandPlaceonme.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+class CommandPlaceonme extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8589_074hH8oZcO7pmHc267mWcI3SQgHU2aTg6Y4cYw5wTV5ic7463i88InLBw16o;
+    
+    CommandPlaceonme(final CommandManager abb) {
+        this.field_8589_074hH8oZcO7pmHc267mWcI3SQgHU2aTg6Y4cYw5wTV5ic7463i88InLBw16o = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        final World theWorld = InputHandler.mc.theWorld;
+        final EntityPlayerSP thePlayer = InputHandler.mc.thePlayer;
+        theWorld.setBlock((int)thePlayer.posX, (int)thePlayer.posY, (int)thePlayer.posZ, 1);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- net/minecraft/src/CodecMus.java
+++ net/minecraft/src/CodecMus.java
@@ -2,10 +2,19 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.net.URL;
+import java.net.URLConnection;
+
 import paulscode.sound.codecs.CodecJOrbis;
 
 public class CodecMus extends CodecJOrbis {
 	protected InputStream openInputStream() throws IOException {
-		return new MusInputStream(this, this.url, this.urlConnection.getInputStream());
+		try {
+			URL uRL1 = (URL)Refl.getField(this, "url", URL.class);
+			URLConnection uRLConnection2 = (URLConnection)Refl.getField(this, "urlConnection", URLConnection.class);
+			return new MusInputStream(this, uRL1, uRLConnection2.getInputStream());
+		} catch (IOException iOException3) {
+			return null;
+		}
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandMcTermconn.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+class CommandMcTermconn extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8590_3Xt55qOW228q5D8Xz377DE7DB6377kBy46RK8Aqps9gCelIg0BNp53n2AWv1;
+    
+    CommandMcTermconn(final CommandManager abb) {
+        this.field_8590_3Xt55qOW228q5D8Xz377DE7DB6377kBy46RK8Aqps9gCelIg0BNp53n2AWv1 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        ScreenDebugMenu.field_7955_2x00ovR61G2n6Zj5nN9jd9FAdV8H3Cz32KtPOCpcvM363cbIQ5o5vSMN7x7B = ((int)arr[0] == 1);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "" + (int)(ScreenDebugMenu.field_7955_2x00ovR61G2n6Zj5nN9jd9FAdV8H3Cz32KtPOCpcvM363cbIQ5o5vSMN7x7B ? 1 : 0);
+    }
+    
+    @Override
+    public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+        return false;
+    }
+}
--- net/minecraft/src/ThreadDownloadResources.java
+++ net/minecraft/src/ThreadDownloadResources.java
@@ -1,61 +1,145 @@
 package net.minecraft.src;
 
+import java.io.BufferedReader;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.net.URL;
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
+import java.nio.file.CopyOption;
+import java.nio.file.FileVisitResult;
+import java.nio.file.FileVisitor;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.nio.file.SimpleFileVisitor;
+import java.nio.file.StandardCopyOption;
+import java.nio.file.attribute.BasicFileAttributes;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipInputStream;
+
 import net.minecraft.client.Minecraft;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
 
 public class ThreadDownloadResources extends Thread {
 	public File resourcesFolder;
 	private Minecraft mc;
 	private boolean closing = false;
+	public static boolean finished = false;
+	public static int field_11491_0SH256J50ztK98I6A6bs5r40vo8pH2P0gb6sxjqPY3KzLgiP3OXy0Scq9399 = 0;
+	public static int field_11492_8f3Z0A851l0Aj7j727QIWsGHy7xKwyrM81FsXm09QFVtF7dPCOH2aOfq9n9c = 100;
 
-	public ThreadDownloadResources(File var1, Minecraft var2) {
-		this.mc = var2;
+	public ThreadDownloadResources(File file, Minecraft minecraft) {
+		this.mc = minecraft;
 		this.setName("Resource download thread");
 		this.setDaemon(true);
-		this.resourcesFolder = new File(var1, "resources/");
+		this.resourcesFolder = new File(file, "resources/");
 		if(!this.resourcesFolder.exists() && !this.resourcesFolder.mkdirs()) {
 			throw new RuntimeException("The working directory could not be created: " + this.resourcesFolder);
 		}
 	}
 
+	void deleteDirectoryWalkTree(Path path) throws IOException {
+        ThreadDownloadResourcesUnknownClass threadDownloadResourcesUnknownClass = new ThreadDownloadResourcesUnknownClass(this);
+        Files.walkFileTree((java.nio.file.Path)path, (FileVisitor)threadDownloadResourcesUnknownClass);
+    }
+
+	public void UnpackReader(BufferedReader bufferedReader) throws IOException {
+		String string2;
+		while((string2 = bufferedReader.readLine()) != null) {
+			if(string2 != "") {
+				String string3 = string2.replace("worldstatic", "saves").replace("sounddata", "resources");
+				InputStream inputStream4 = Ext1605Utils.func_12150_5v4Cs6sI06e6Hjpg3rSI82gG008x14C2jag2OM7ADaW5U8a3DYSrf570CJm6(string2);
+				File file5 = new File(Minecraft.getMinecraftDir(), string3);
+				file5.mkdirs();
+				Files.copy(inputStream4, Paths.get(file5.toString(), new String[0]), new CopyOption[]{StandardCopyOption.REPLACE_EXISTING});
+				inputStream4.close();
+			}
+		}
+
+		System.out.println("Resources unpacked");
+		bufferedReader.close();
+	}
+
 	public void run() {
 		try {
-			URL var1 = new URL("http://s3.amazonaws.com/MinecraftResources/");
-			DocumentBuilderFactory var2 = DocumentBuilderFactory.newInstance();
-			DocumentBuilder var3 = var2.newDocumentBuilder();
-			Document var4 = var3.parse(var1.openStream());
-			NodeList var5 = var4.getElementsByTagName("Contents");
-
-			for(int var6 = 0; var6 < 2; ++var6) {
-				for(int var7 = 0; var7 < var5.getLength(); ++var7) {
-					Node var8 = var5.item(var7);
-					if(var8.getNodeType() == 1) {
-						Element var9 = (Element)var8;
-						String var10 = ((Element)var9.getElementsByTagName("Key").item(0)).getChildNodes().item(0).getNodeValue();
-						long var11 = Long.parseLong(((Element)var9.getElementsByTagName("Size").item(0)).getChildNodes().item(0).getNodeValue());
-						if(var11 > 0L) {
-							this.downloadAndInstallResource(var1, var10, var11, var6);
-							if(this.closing) {
-								return;
-							}
-						}
-					}
-				}
+			if(!(new File(Minecraft.getMinecraftDir(), "/resources/contentversion-1d")).exists()) {
+				try {
+					this.deleteDirectoryWalkTree((Path) Paths.get(Minecraft.getMinecraftDir() + "/resources/", new String[0]));
+					this.resourcesFolder.mkdirs();
+				} catch (Exception exception28) {
+					System.out.println("Error removing existing resources...");
+				}
+
+				InputStream inputStream1 = Ext1605Utils.func_12150_5v4Cs6sI06e6Hjpg3rSI82gG008x14C2jag2OM7ADaW5U8a3DYSrf570CJm6("/soundres.txt");
+
+				try {
+					BufferedReader bufferedReader2 = new BufferedReader(new InputStreamReader(inputStream1));
+					this.UnpackReader(bufferedReader2);
+				} catch (Exception exception26) {
+					exception26.printStackTrace();
+				} finally {
+					inputStream1.close();
+				}
+
+				if(!(new File(Minecraft.getMinecraftDir(), "/saves/freerun/WorldFreerun0")).exists() || !(new File(Minecraft.getMinecraftDir(), "/saves/freerun/WorldFreerun1")).exists() || !(new File(Minecraft.getMinecraftDir(), "/saves/freerun/WorldFreerun2")).exists() || !(new File(Minecraft.getMinecraftDir(), "/saves/freerun/WorldFreerun3")).exists() || !(new File(Minecraft.getMinecraftDir(), "/saves/freerun/WorldFreerun4")).exists() || !(new File(Minecraft.getMinecraftDir(), "/saves/freerun/WorldFreerun5")).exists() || !(new File(Minecraft.getMinecraftDir(), "/saves/freerun/WorldZM1")).exists() || !(new File(Minecraft.getMinecraftDir(), "/saves/zombies/WorldZM2")).exists()) {
+					ZipInputStream zipInputStream31;
+					for(zipInputStream31 = new ZipInputStream(Ext1605Utils.func_12150_5v4Cs6sI06e6Hjpg3rSI82gG008x14C2jag2OM7ADaW5U8a3DYSrf570CJm6("/wstatic.zip")); zipInputStream31.getNextEntry() != null; ++field_11492_8f3Z0A851l0Aj7j727QIWsGHy7xKwyrM81FsXm09QFVtF7dPCOH2aOfq9n9c) {
+					}
+
+					field_11492_8f3Z0A851l0Aj7j727QIWsGHy7xKwyrM81FsXm09QFVtF7dPCOH2aOfq9n9c -= 100;
+					zipInputStream31.close();
+					ZipInputStream zipInputStream3 = new ZipInputStream(Ext1605Utils.func_12150_5v4Cs6sI06e6Hjpg3rSI82gG008x14C2jag2OM7ADaW5U8a3DYSrf570CJm6("/wstatic.zip"));
+					ZipEntry zipEntry4 = zipInputStream3.getNextEntry();
+
+					while(true) {
+						if(zipEntry4 == null) {
+							zipInputStream3.close();
+							break;
+						}
+
+						if(!zipEntry4.isDirectory()) {
+							String string5 = zipEntry4.getName();
+							if(string5.contains("/")) {
+								String string6 = string5.substring(0, string5.lastIndexOf("/"));
+								(new File(Minecraft.getMinecraftDir(), "/saves/" + string6)).mkdirs();
+							}
+
+							ExtLogger.i("Unpacking to " + Minecraft.getMinecraftDir().toString() + "/saves/" + string5);
+							FileOutputStream fileOutputStream32 = new FileOutputStream(Minecraft.getMinecraftDir().toString() + "/saves/" + string5);
+							byte[] b7 = new byte[1024];
+
+							int i8;
+							while((i8 = zipInputStream3.read(b7)) >= 0) {
+								fileOutputStream32.write(b7, 0, i8);
+							}
+
+							fileOutputStream32.close();
+						}
+
+						++field_11491_0SH256J50ztK98I6A6bs5r40vo8pH2P0gb6sxjqPY3KzLgiP3OXy0Scq9399;
+						zipEntry4 = zipInputStream3.getNextEntry();
+					}
+				}
+
+				(new File(Minecraft.getMinecraftDir() + "/resources/contentversion-1d")).createNewFile();
 			}
-		} catch (Exception var13) {
+		} catch (Exception exception29) {
+			exception29.printStackTrace();
+		} finally {
 			this.loadResource(this.resourcesFolder, "");
-			var13.printStackTrace();
+			finished = true;
+
+			try {
+				Thread.sleep(1000L);
+			} catch (InterruptedException interruptedException25) {
+			}
+
+			if(InputHandler.mc.theWorld == null && SoundManager.sndSystem != null && !SoundManager.sndSystem.playing("BgMusic")) {
+				InputHandler.mc.sndManager.func_12031_514dv3mYU7t95lOh23lLhBI10XBv07D8y61Goe1u7G926JNt2Y1WIoiHj5tm("mainmenu", true);
+			}
+
 		}
 
 	}
@@ -64,69 +148,69 @@
 		this.loadResource(this.resourcesFolder, "");
 	}
 
-	private void loadResource(File var1, String var2) {
-		File[] var3 = var1.listFiles();
+	private void loadResource(File file, String path) {
+		File[] file3 = file.listFiles();
 
-		for(int var4 = 0; var4 < var3.length; ++var4) {
-			if(var3[var4].isDirectory()) {
-				this.loadResource(var3[var4], var2 + var3[var4].getName() + "/");
+		for(int i4 = 0; i4 < file3.length; ++i4) {
+			if(file3[i4].isDirectory()) {
+				this.loadResource(file3[i4], path + file3[i4].getName() + "/");
 			} else {
 				try {
-					this.mc.installResource(var2 + var3[var4].getName(), var3[var4]);
-				} catch (Exception var6) {
-					System.out.println("Failed to add " + var2 + var3[var4].getName());
+					this.mc.installResource(path + file3[i4].getName(), file3[i4]);
+				} catch (Exception exception6) {
+					System.out.println("Failed to add " + path + file3[i4].getName());
+					exception6.printStackTrace();
 				}
 			}
 		}
 
 	}
 
-	private void downloadAndInstallResource(URL var1, String var2, long var3, int var5) {
+	private void downloadAndInstallResource(URL url, String key, long size, int integer) {
 		try {
-			int var6 = var2.indexOf("/");
-			String var7 = var2.substring(0, var6);
-			if(!var7.equals("sound") && !var7.equals("newsound")) {
-				if(var5 != 1) {
+			int i6 = key.indexOf("/");
+			String string7 = key.substring(0, i6);
+			if(!string7.equals("sound") && !string7.equals("newsound")) {
+				if(integer != 1) {
 					return;
 				}
-			} else if(var5 != 0) {
+			} else if(integer != 0) {
 				return;
 			}
 
-			File var8 = new File(this.resourcesFolder, var2);
-			if(!var8.exists() || var8.length() != var3) {
-				var8.getParentFile().mkdirs();
-				String var9 = var2.replaceAll(" ", "%20");
-				this.downloadResource(new URL(var1, var9), var8, var3);
+			File file8 = new File(this.resourcesFolder, key);
+			if(!file8.exists() || file8.length() != size) {
+				file8.getParentFile().mkdirs();
+				String string9 = key.replaceAll(" ", "%20");
+				this.downloadResource(new URL(url, string9), file8, size);
 				if(this.closing) {
 					return;
 				}
 			}
 
-			this.mc.installResource(var2, var8);
-		} catch (Exception var10) {
-			var10.printStackTrace();
+			this.mc.installResource(key, file8);
+		} catch (Exception exception10) {
+			exception10.printStackTrace();
 		}
 
 	}
 
-	private void downloadResource(URL var1, File var2, long var3) throws IOException {
-		byte[] var5 = new byte[4096];
-		DataInputStream var6 = new DataInputStream(var1.openStream());
-		DataOutputStream var7 = new DataOutputStream(new FileOutputStream(var2));
-		boolean var8 = false;
+	private void downloadResource(URL url, File file, long size) throws IOException {
+		byte[] b5 = new byte[4096];
+		DataInputStream dataInputStream6 = new DataInputStream(url.openStream());
+		DataOutputStream dataOutputStream7 = new DataOutputStream(new FileOutputStream(file));
+		boolean z8 = false;
 
-		do {
-			int var9 = var6.read(var5);
-			if(var9 < 0) {
-				var6.close();
-				var7.close();
+		int i9;
+		while((i9 = dataInputStream6.read(b5)) >= 0) {
+			dataOutputStream7.write(b5, 0, i9);
+			if(this.closing) {
 				return;
 			}
-
-			var7.write(var5, 0, var9);
-		} while(!this.closing);
-
+		}
+
+		dataInputStream6.close();
+		dataOutputStream7.close();
 	}
 
 	public void closeMinecraft() {
--- /dev/null
+++ net/minecraft/src/CommandRFullscreen.java
@@ -1,0 +1,29 @@
+package net.minecraft.src;
+
+import org.lwjgl.LWJGLException;
+import org.lwjgl.opengl.Display;
+
+class CommandRFullscreen extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8554_7vFNu3zc3b7C0UzWx0ahO64asYLV2lPx2j1Q7Q9g9NW74rjBz2R0IUAS8u5o;
+    
+    CommandRFullscreen(final CommandManager abb) {
+        this.field_8554_7vFNu3zc3b7C0UzWx0ahO64asYLV2lPx2j1Q7Q9g9NW74rjBz2R0IUAS8u5o = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.fullscreen = ((int)arr[0] == 1);
+        try {
+            Display.setFullscreen((int)arr[0] == 1);
+        }
+        catch (final LWJGLException ex) {
+            ex.printStackTrace();
+        }
+        Display.update();
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "" + (int)(InputHandler.mc.fullscreen ? 1 : 0);
+    }
+}
--- net/minecraft/src/BlockFluid.java
+++ net/minecraft/src/BlockFluid.java
@@ -5,45 +5,45 @@
 public abstract class BlockFluid extends Block {
 	protected int fluidType = 1;
 
-	protected BlockFluid(int var1, Material var2) {
-		super(var1, (var2 == Material.lava ? 14 : 12) * 16 + 13, var2);
-		float var3 = 0.0F;
-		float var4 = 0.0F;
-		if(var2 == Material.lava) {
+	protected BlockFluid(int id, Material material) {
+		super(id, (material == Material.lava ? 14 : 12) * 16 + 13, material);
+		float f3 = 0.0F;
+		float f4 = 0.0F;
+		if(material == Material.lava) {
 			this.fluidType = 2;
 		}
 
-		this.setBlockBounds(0.0F + var4, 0.0F + var3, 0.0F + var4, 1.0F + var4, 1.0F + var3, 1.0F + var4);
+		this.setBlockBounds(0.0F + f4, 0.0F + f3, 0.0F + f4, 1.0F + f4, 1.0F + f3, 1.0F + f4);
 		this.setTickOnLoad(true);
 	}
 
-	public static float getFluidHeightPercent(int var0) {
-		if(var0 >= 8) {
-			var0 = 0;
+	public static float getFluidHeightPercent(int integer) {
+		if(integer >= 8) {
+			integer = 0;
 		}
 
-		float var1 = (float)(var0 + 1) / 9.0F;
-		return var1;
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return var1 != 0 && var1 != 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
-	}
-
-	protected int getFlowDecay(World var1, int var2, int var3, int var4) {
-		return var1.getBlockMaterial(var2, var3, var4) != this.material ? -1 : var1.getBlockMetadata(var2, var3, var4);
-	}
-
-	protected int getEffectiveFlowDecay(IBlockAccess var1, int var2, int var3, int var4) {
-		if(var1.getBlockMaterial(var2, var3, var4) != this.material) {
+		float f1 = (float)(integer + 1) / 9.0F;
+		return f1;
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side != 0 && side != 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
+	}
+
+	protected int getFlowDecay(World world, int x, int y, int z) {
+		return world.getBlockMaterial(x, y, z) != this.material ? -1 : world.getBlockMetadata(x, y, z);
+	}
+
+	protected int getEffectiveFlowDecay(IBlockAccess blockAccess, int x, int y, int z) {
+		if(blockAccess.getBlockMaterial(x, y, z) != this.material) {
 			return -1;
 		} else {
-			int var5 = var1.getBlockMetadata(var2, var3, var4);
-			if(var5 >= 8) {
-				var5 = 0;
+			int i5 = blockAccess.getBlockMetadata(x, y, z);
+			if(i5 >= 8) {
+				i5 = 0;
 			}
 
-			return var5;
+			return i5;
 		}
 	}
 
@@ -55,16 +55,16 @@
 		return false;
 	}
 
-	public boolean canCollideCheck(int var1, boolean var2) {
-		return var2 && var1 == 0;
-	}
-
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		Material var6 = var1.getBlockMaterial(var2, var3, var4);
-		return var6 == this.material ? false : (var6 == Material.ice ? false : (var5 == 1 ? true : super.shouldSideBeRendered(var1, var2, var3, var4, var5)));
-	}
-
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public boolean canCollideCheck(int metadata, boolean boolean2) {
+		return boolean2 && metadata == 0;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		Material material6 = blockAccess.getBlockMaterial(x, y, z);
+		return material6 == this.material ? false : (material6 == Material.ice ? false : (side == 1 ? true : super.shouldSideBeRendered(blockAccess, x, y, z, side)));
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -72,203 +72,201 @@
 		return 4;
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return 0;
-	}
-
-	public int quantityDropped(Random var1) {
-		return 0;
-	}
-
-	private Vec3D getFlowVector(IBlockAccess var1, int var2, int var3, int var4) {
-		Vec3D var5 = Vec3D.createVector(0.0D, 0.0D, 0.0D);
-		int var6 = this.getEffectiveFlowDecay(var1, var2, var3, var4);
-
-		for(int var7 = 0; var7 < 4; ++var7) {
-			int var8 = var2;
-			int var10 = var4;
-			if(var7 == 0) {
-				var8 = var2 - 1;
-			}
-
-			if(var7 == 1) {
-				var10 = var4 - 1;
-			}
-
-			if(var7 == 2) {
-				++var8;
-			}
-
-			if(var7 == 3) {
-				++var10;
-			}
-
-			int var11 = this.getEffectiveFlowDecay(var1, var8, var3, var10);
-			int var12;
-			if(var11 < 0) {
-				if(!var1.getBlockMaterial(var8, var3, var10).getIsSolid()) {
-					var11 = this.getEffectiveFlowDecay(var1, var8, var3 - 1, var10);
-					if(var11 >= 0) {
-						var12 = var11 - (var6 - 8);
-						var5 = var5.addVector((double)((var8 - var2) * var12), (double)((var3 - var3) * var12), (double)((var10 - var4) * var12));
+	public int idDropped(int count, Random random) {
+		return 0;
+	}
+
+	public int quantityDropped(Random random) {
+		return 0;
+	}
+
+	private Vec3D getFlowVector(IBlockAccess blockAccess, int x, int y, int z) {
+		Vec3D vec3D5 = Vec3D.createVector(0.0D, 0.0D, 0.0D);
+		int i6 = this.getEffectiveFlowDecay(blockAccess, x, y, z);
+
+		for(int i7 = 0; i7 < 4; ++i7) {
+			int i8 = x;
+			int i9 = z;
+			if(i7 == 0) {
+				i8 = x - 1;
+			}
+
+			if(i7 == 1) {
+				i9 = z - 1;
+			}
+
+			if(i7 == 2) {
+				++i8;
+			}
+
+			if(i7 == 3) {
+				++i9;
+			}
+
+			int i10 = this.getEffectiveFlowDecay(blockAccess, i8, y, i9);
+			int i11;
+			if(i10 < 0) {
+				if(!blockAccess.getBlockMaterial(i8, y, i9).getIsSolid()) {
+					i10 = this.getEffectiveFlowDecay(blockAccess, i8, y - 1, i9);
+					if(i10 >= 0) {
+						i11 = i10 - (i6 - 8);
+						vec3D5 = vec3D5.addVector((double)((i8 - x) * i11), (double)((y - y) * i11), (double)((i9 - z) * i11));
 					}
 				}
-			} else if(var11 >= 0) {
-				var12 = var11 - var6;
-				var5 = var5.addVector((double)((var8 - var2) * var12), (double)((var3 - var3) * var12), (double)((var10 - var4) * var12));
-			}
-		}
-
-		if(var1.getBlockMetadata(var2, var3, var4) >= 8) {
-			boolean var13 = false;
-			if(var13 || this.shouldSideBeRendered(var1, var2, var3, var4 - 1, 2)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2, var3, var4 + 1, 3)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2 - 1, var3, var4, 4)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2 + 1, var3, var4, 5)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2, var3 + 1, var4 - 1, 2)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2, var3 + 1, var4 + 1, 3)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2 - 1, var3 + 1, var4, 4)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2 + 1, var3 + 1, var4, 5)) {
-				var13 = true;
-			}
-
-			if(var13) {
-				var5 = var5.normalize().addVector(0.0D, -6.0D, 0.0D);
-			}
-		}
-
-		var5 = var5.normalize();
-		return var5;
+			} else if(i10 >= 0) {
+				i11 = i10 - i6;
+				vec3D5 = vec3D5.addVector((double)((i8 - x) * i11), (double)((y - y) * i11), (double)((i9 - z) * i11));
+			}
+		}
+
+		if(blockAccess.getBlockMetadata(x, y, z) >= 8) {
+			boolean z12 = false;
+			if(z12 || this.shouldSideBeRendered(blockAccess, x, y, z - 1, 2)) {
+				z12 = true;
+			}
+
+			if(z12 || this.shouldSideBeRendered(blockAccess, x, y, z + 1, 3)) {
+				z12 = true;
+			}
+
+			if(z12 || this.shouldSideBeRendered(blockAccess, x - 1, y, z, 4)) {
+				z12 = true;
+			}
+
+			if(z12 || this.shouldSideBeRendered(blockAccess, x + 1, y, z, 5)) {
+				z12 = true;
+			}
+
+			if(z12 || this.shouldSideBeRendered(blockAccess, x, y + 1, z - 1, 2)) {
+				z12 = true;
+			}
+
+			if(z12 || this.shouldSideBeRendered(blockAccess, x, y + 1, z + 1, 3)) {
+				z12 = true;
+			}
+
+			if(z12 || this.shouldSideBeRendered(blockAccess, x - 1, y + 1, z, 4)) {
+				z12 = true;
+			}
+
+			if(z12 || this.shouldSideBeRendered(blockAccess, x + 1, y + 1, z, 5)) {
+				z12 = true;
+			}
+
+			if(z12) {
+				vec3D5 = vec3D5.normalize().addVector(0.0D, -6.0D, 0.0D);
+			}
+		}
+
+		vec3D5 = vec3D5.normalize();
+		return vec3D5;
 	}
 
-	public void velocityToAddToEntity(World var1, int var2, int var3, int var4, Entity var5, Vec3D var6) {
-		Vec3D var7 = this.getFlowVector(var1, var2, var3, var4);
-		var6.xCoord += var7.xCoord;
-		var6.yCoord += var7.yCoord;
-		var6.zCoord += var7.zCoord;
+	public void velocityToAddToEntity(World world, int x, int y, int z, Entity entity, Vec3D vector) {
+		Vec3D vec3D7 = this.getFlowVector(world, x, y, z);
+		vector.xCoord += vec3D7.xCoord;
+		vector.yCoord += vec3D7.yCoord;
+		vector.zCoord += vec3D7.zCoord;
 	}
 
 	public int tickRate() {
 		return this.material == Material.water ? 5 : (this.material == Material.lava ? 30 : 0);
 	}
 
-	public float getBlockBrightness(IBlockAccess var1, int var2, int var3, int var4) {
-		float var5 = var1.getBrightness(var2, var3, var4);
-		float var6 = var1.getBrightness(var2, var3 + 1, var4);
-		return var5 > var6 ? var5 : var6;
+	public float getBlockBrightness(IBlockAccess blockAccess, int x, int y, int z) {
+		float f5 = blockAccess.getBrightness(x, y, z);
+		float f6 = blockAccess.getBrightness(x, y + 1, z);
+		return f5 > f6 ? f5 : f6;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		super.updateTick(var1, var2, var3, var4, var5);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		super.updateTick(world, x, y, z, random);
 	}
 
 	public int getRenderBlockPass() {
 		return this.material == Material.water ? 1 : 0;
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(this.material == Material.water && var5.nextInt(64) == 0) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 > 0 && var6 < 8) {
-				var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "liquid.water", var5.nextFloat() * 0.25F + 12.0F / 16.0F, var5.nextFloat() * 1.0F + 0.5F);
-			}
-		}
-
-		if(this.material == Material.lava && var1.getBlockMaterial(var2, var3 + 1, var4) == Material.air && !var1.isBlockNormalCube(var2, var3 + 1, var4) && var5.nextInt(100) == 0) {
-			double var12 = (double)((float)var2 + var5.nextFloat());
-			double var8 = (double)var3 + this.maxY;
-			double var10 = (double)((float)var4 + var5.nextFloat());
-			var1.spawnParticle("lava", var12, var8, var10, 0.0D, 0.0D, 0.0D);
-		}
-
-	}
-
-	public static double getFlowDirection(IBlockAccess var0, int var1, int var2, int var3, Material var4) {
-		Vec3D var5 = null;
-		if(var4 == Material.water) {
-			var5 = ((BlockFluid)Block.waterMoving).getFlowVector(var0, var1, var2, var3);
-		}
-
-		if(var4 == Material.lava) {
-			var5 = ((BlockFluid)Block.lavaMoving).getFlowVector(var0, var1, var2, var3);
-		}
-
-		return var5.xCoord == 0.0D && var5.zCoord == 0.0D ? -1000.0D : Math.atan2(var5.zCoord, var5.xCoord) - Math.PI * 0.5D;
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		this.checkForHarden(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		this.checkForHarden(var1, var2, var3, var4);
-	}
-
-	private void checkForHarden(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			if(this.material == Material.lava) {
-				boolean var5 = false;
-				if(var5 || var1.getBlockMaterial(var2, var3, var4 - 1) == Material.water) {
-					var5 = true;
-				}
-
-				if(var5 || var1.getBlockMaterial(var2, var3, var4 + 1) == Material.water) {
-					var5 = true;
-				}
-
-				if(var5 || var1.getBlockMaterial(var2 - 1, var3, var4) == Material.water) {
-					var5 = true;
-				}
-
-				if(var5 || var1.getBlockMaterial(var2 + 1, var3, var4) == Material.water) {
-					var5 = true;
-				}
-
-				if(var5 || var1.getBlockMaterial(var2, var3 + 1, var4) == Material.water) {
-					var5 = true;
-				}
-
-				if(var5) {
-					int var6 = var1.getBlockMetadata(var2, var3, var4);
-					if(var6 == 0) {
-						var1.setBlockWithNotify(var2, var3, var4, Block.obsidian.blockID);
-					} else if(var6 <= 4) {
-						var1.setBlockWithNotify(var2, var3, var4, Block.cobblestone.blockID);
-					}
-
-					this.triggerLavaMixEffects(var1, var2, var3, var4);
-				}
-			}
-
-		}
-	}
-
-	protected void triggerLavaMixEffects(World var1, int var2, int var3, int var4) {
-		var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "random.fizz", 0.5F, 2.6F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.8F);
-
-		for(int var5 = 0; var5 < 8; ++var5) {
-			var1.spawnParticle("largesmoke", (double)var2 + Math.random(), (double)var3 + 1.2D, (double)var4 + Math.random(), 0.0D, 0.0D, 0.0D);
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+		if(this.material == Material.water && rand.nextInt(64) == 0) {
+			int i6 = worldObj.getBlockMetadata(x, y, z);
+			if(i6 > 0 && i6 < 8) {
+				worldObj.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "liquid.water", rand.nextFloat() * 0.25F + 0.75F, rand.nextFloat() * 1.0F + 0.5F);
+			}
+		}
+
+		if(this.material == Material.lava && worldObj.getBlockMaterial(x, y + 1, z) == Material.air && !worldObj.isBlockNormalCube(x, y + 1, z) && rand.nextInt(100) == 0) {
+			double d12 = (double)((float)x + rand.nextFloat());
+			double d8 = (double)y + this.maxY;
+			double d10 = (double)((float)z + rand.nextFloat());
+			worldObj.spawnParticle("lava", d12, d8, d10, 0.0D, 0.0D, 0.0D);
+		}
+
+	}
+
+	public static double getFlowDirection(IBlockAccess abt, int integer2, int integer3, int integer4, Material sx) {
+		Vec3D vec3D5 = null;
+		if(sx == Material.water) {
+			vec3D5 = ((BlockFluid)Block.waterMoving).getFlowVector(abt, integer2, integer3, integer4);
+		}
+
+		if(sx == Material.lava) {
+			vec3D5 = ((BlockFluid)Block.lavaMoving).getFlowVector(abt, integer2, integer3, integer4);
+		}
+
+		return vec3D5.xCoord == 0.0D && vec3D5.zCoord == 0.0D ? -1000.0D : Math.atan2(vec3D5.zCoord, vec3D5.xCoord) - Math.PI / 2D;
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		this.checkForHarden(world, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		this.checkForHarden(world, x, y, z);
+	}
+
+	private void checkForHarden(World world, int x, int y, int z) {
+		if(world.getBlockId(x, y, z) == this.blockID && this.material == Material.lava) {
+			boolean z5 = false;
+			if(z5 || world.getBlockMaterial(x, y, z - 1) == Material.water) {
+				z5 = true;
+			}
+
+			if(z5 || world.getBlockMaterial(x, y, z + 1) == Material.water) {
+				z5 = true;
+			}
+
+			if(z5 || world.getBlockMaterial(x - 1, y, z) == Material.water) {
+				z5 = true;
+			}
+
+			if(z5 || world.getBlockMaterial(x + 1, y, z) == Material.water) {
+				z5 = true;
+			}
+
+			if(z5 || world.getBlockMaterial(x, y + 1, z) == Material.water) {
+				z5 = true;
+			}
+
+			if(z5) {
+				int i6 = world.getBlockMetadata(x, y, z);
+				if(i6 == 0) {
+					world.setBlockWithNotify(x, y, z, Block.obsidian.blockID);
+				} else if(i6 <= 4) {
+					world.setBlockWithNotify(x, y, z, Block.cobblestone.blockID);
+				}
+
+				this.triggerLavaMixEffects(world, x, y, z);
+			}
+		}
+
+	}
+
+	protected void triggerLavaMixEffects(World world, int x, int y, int z) {
+		world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "random.fizz", 0.5F, 2.6F + (world.rand.nextFloat() - world.rand.nextFloat()) * 0.8F);
+
+		for(int i5 = 0; i5 < 8; ++i5) {
+			world.spawnParticle("largesmoke", (double)x + Math.random(), (double)y + 1.2D, (double)z + Math.random(), 0.0D, 0.0D, 0.0D);
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/HubNetworkUnknownClass.java
@@ -1,0 +1,50 @@
+package net.minecraft.src;
+
+import java.net.InetAddress;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+
+public class HubNetworkUnknownClass {
+	private final ArrayList field_11077_8qiGAomP1Ac59NByARiO6pVjqT4C6N37mr32u6eG2epkwyCHGmsH5PxpA9JO = new ArrayList();
+	boolean field_11079_8R0mBB7qtp39935XMEFi447KYF8skIV0XL1aWdss5yPZm1ex2uh66NCDjg85;
+	private static final String field_11078_5Lw1SQWLG80U10f06kq95YIR7fW76FAzTEIJ9296C9Nq0Hn6726cSy59Nr40 = "CL_00001136";
+
+	public synchronized boolean func_11074_53A5WI0FU98UL8SXf5cJVaH1xv8pv3UGLAjw753vVH5y6xI0PW0Z8240M6rY() {
+		return this.field_11079_8R0mBB7qtp39935XMEFi447KYF8skIV0XL1aWdss5yPZm1ex2uh66NCDjg85;
+	}
+
+	public synchronized void func_11073_0y8txWznESNB1q0JYvpTmTj4BNS015M11I5smw3PILvvh9x8IV38iS08E1q0() {
+		this.field_11079_8R0mBB7qtp39935XMEFi447KYF8skIV0XL1aWdss5yPZm1ex2uh66NCDjg85 = false;
+	}
+
+	public synchronized List func_11075_52XI3RXerJv8CbWlcvMpwK9y35fi0m50zFf24uZqVddP89zIWh0vc8cgSBBR() {
+		return Collections.unmodifiableList(this.field_11077_8qiGAomP1Ac59NByARiO6pVjqT4C6N37mr32u6eG2epkwyCHGmsH5PxpA9JO);
+	}
+
+	public synchronized void func_11076_6JWlo5oTbj6698u3MxWj43m8jjLW826DJsk9l6DW0z4oK6cxa991XuVMtgSV(String string, InetAddress inetAddress) {
+		String string3 = ThreadHubServerPing.getMotdFromPingResponse(string);
+		String string4 = ThreadHubServerPing.getAdFromPingResponse(string);
+		if(string4 != null) {
+			string4 = inetAddress.getHostAddress() + ":" + string4;
+			boolean z5 = false;
+			Iterator iterator6 = this.field_11077_8qiGAomP1Ac59NByARiO6pVjqT4C6N37mr32u6eG2epkwyCHGmsH5PxpA9JO.iterator();
+
+			while(iterator6.hasNext()) {
+				HubNetworkUnknownClass2 hubNetworkUnknownClass27 = (HubNetworkUnknownClass2)iterator6.next();
+				if(hubNetworkUnknownClass27.func_10778_8gM7pIBK1I76SCft4Dhm813bD256bmhlhOrb5h1mMYJ3i7FFAMb9LSfc7uw2().equals(string4)) {
+					hubNetworkUnknownClass27.func_10777_04W88zu2434rH5KSiplYwuX5J2HRsV2SgDIT38qBV8XVz0wUb2NY5BCpH2aW();
+					z5 = true;
+					break;
+				}
+			}
+
+			if(!z5) {
+				this.field_11077_8qiGAomP1Ac59NByARiO6pVjqT4C6N37mr32u6eG2epkwyCHGmsH5PxpA9JO.add(new HubNetworkUnknownClass2(string3, string4));
+				this.field_11079_8R0mBB7qtp39935XMEFi447KYF8skIV0XL1aWdss5yPZm1ex2uh66NCDjg85 = true;
+			}
+		}
+
+	}
+}
--- net/minecraft/src/Packet33RelEntityMoveLook.java
+++ net/minecraft/src/Packet33RelEntityMoveLook.java
@@ -9,22 +9,22 @@
 		this.rotating = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		super.readPacketData(var1);
-		this.xPosition = var1.readByte();
-		this.yPosition = var1.readByte();
-		this.zPosition = var1.readByte();
-		this.yaw = var1.readByte();
-		this.pitch = var1.readByte();
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		super.readPacketData(dataInputStream);
+		this.xPosition = dataInputStream.readByte();
+		this.yPosition = dataInputStream.readByte();
+		this.zPosition = dataInputStream.readByte();
+		this.yaw = dataInputStream.readByte();
+		this.pitch = dataInputStream.readByte();
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		super.writePacket(var1);
-		var1.writeByte(this.xPosition);
-		var1.writeByte(this.yPosition);
-		var1.writeByte(this.zPosition);
-		var1.writeByte(this.yaw);
-		var1.writeByte(this.pitch);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		super.writePacket(dataOutputStream);
+		dataOutputStream.writeByte(this.xPosition);
+		dataOutputStream.writeByte(this.yPosition);
+		dataOutputStream.writeByte(this.zPosition);
+		dataOutputStream.writeByte(this.yaw);
+		dataOutputStream.writeByte(this.pitch);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/ChunkLoader.java
+++ net/minecraft/src/ChunkLoader.java
@@ -4,195 +4,197 @@
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.util.Iterator;
+import java.util.Random;
 
 public class ChunkLoader implements IChunkLoader {
 	private File saveDir;
 	private boolean createIfNecessary;
 
-	public ChunkLoader(File var1, boolean var2) {
-		this.saveDir = var1;
-		this.createIfNecessary = var2;
-	}
-
-	private File chunkFileForXZ(int var1, int var2) {
-		String var3 = "c." + Integer.toString(var1, 36) + "." + Integer.toString(var2, 36) + ".dat";
-		String var4 = Integer.toString(var1 & 63, 36);
-		String var5 = Integer.toString(var2 & 63, 36);
-		File var6 = new File(this.saveDir, var4);
-		if(!var6.exists()) {
-			if(!this.createIfNecessary) {
-				return null;
-			}
-
-			var6.mkdir();
-		}
-
-		var6 = new File(var6, var5);
-		if(!var6.exists()) {
-			if(!this.createIfNecessary) {
-				return null;
-			}
-
-			var6.mkdir();
-		}
-
-		var6 = new File(var6, var3);
-		return !var6.exists() && !this.createIfNecessary ? null : var6;
-	}
-
-	public Chunk loadChunk(World var1, int var2, int var3) {
-		File var4 = this.chunkFileForXZ(var2, var3);
-		if(var4 != null && var4.exists()) {
+	public ChunkLoader(File saveDir, boolean createIfNecessary) {
+		this.saveDir = saveDir;
+		this.createIfNecessary = createIfNecessary;
+	}
+
+	private File chunkFileForXZ(int chunkX, int chunkZ) {
+		String string3 = "c." + Integer.toString(chunkX, 36) + "." + Integer.toString(chunkZ, 36) + ".dat";
+		String string4 = Integer.toString(chunkX & 63, 36);
+		String string5 = Integer.toString(chunkZ & 63, 36);
+		File file6 = new File(this.saveDir, string4);
+		if(!file6.exists()) {
+			if(!this.createIfNecessary) {
+				return null;
+			}
+
+			file6.mkdir();
+		}
+
+		file6 = new File(file6, string5);
+		if(!file6.exists()) {
+			if(!this.createIfNecessary) {
+				return null;
+			}
+
+			file6.mkdir();
+		}
+
+		file6 = new File(file6, string3);
+		return !file6.exists() && !this.createIfNecessary ? null : file6;
+	}
+
+	public Chunk loadChunk(World worldObj, int chunkX, int chunkZ) {
+		File file4 = this.chunkFileForXZ(chunkX, chunkZ);
+		if(file4 != null && file4.exists()) {
 			try {
-				FileInputStream var5 = new FileInputStream(var4);
-				NBTTagCompound var6 = CompressedStreamTools.readCompressed(var5);
-				if(!var6.hasKey("Level")) {
-					System.out.println("Chunk file at " + var2 + "," + var3 + " is missing level data, skipping");
-					return null;
-				}
-
-				if(!var6.getCompoundTag("Level").hasKey("Blocks")) {
-					System.out.println("Chunk file at " + var2 + "," + var3 + " is missing block data, skipping");
-					return null;
-				}
-
-				Chunk var7 = loadChunkIntoWorldFromCompound(var1, var6.getCompoundTag("Level"));
-				if(!var7.isAtLocation(var2, var3)) {
-					System.out.println("Chunk file at " + var2 + "," + var3 + " is in the wrong location; relocating. (Expected " + var2 + ", " + var3 + ", got " + var7.xPosition + ", " + var7.zPosition + ")");
-					var6.setInteger("xPos", var2);
-					var6.setInteger("zPos", var3);
-					var7 = loadChunkIntoWorldFromCompound(var1, var6.getCompoundTag("Level"));
-				}
-
-				return var7;
-			} catch (Exception var8) {
-				var8.printStackTrace();
+				FileInputStream fileInputStream5 = new FileInputStream(file4);
+				NBTTagCompound nBTTagCompound6 = CompressedStreamTools.readCompressed(fileInputStream5);
+				if(!nBTTagCompound6.hasKey("Level")) {
+					System.out.println("Chunk file at " + chunkX + "," + chunkZ + " is missing level data, skipping");
+					return null;
+				}
+
+				if(!nBTTagCompound6.getCompoundTag("Level").hasKey("Blocks")) {
+					System.out.println("Chunk file at " + chunkX + "," + chunkZ + " is missing block data, skipping");
+					return null;
+				}
+
+				Chunk chunk7 = loadChunkIntoWorldFromCompound(worldObj, nBTTagCompound6.getCompoundTag("Level"));
+				if(!chunk7.isAtLocation(chunkX, chunkZ)) {
+					System.out.println("Chunk file at " + chunkX + "," + chunkZ + " is in the wrong location; relocating. (Expected " + chunkX + ", " + chunkZ + ", got " + chunk7.xPosition + ", " + chunk7.zPosition + ")");
+					nBTTagCompound6.setInteger("xPos", chunkX);
+					nBTTagCompound6.setInteger("zPos", chunkZ);
+					chunk7 = loadChunkIntoWorldFromCompound(worldObj, nBTTagCompound6.getCompoundTag("Level"));
+				}
+
+				return chunk7;
+			} catch (Exception exception8) {
+				exception8.printStackTrace();
 			}
 		}
 
 		return null;
 	}
 
-	public void saveChunk(World var1, Chunk var2) {
-		var1.checkSessionLock();
-		File var3 = this.chunkFileForXZ(var2.xPosition, var2.zPosition);
-		if(var3.exists()) {
-			var1.sizeOnDisk -= var3.length();
+	public void saveChunk(World worldObj, Chunk chunk) {
+		worldObj.checkSessionLock();
+		File file3 = this.chunkFileForXZ(chunk.xPosition, chunk.zPosition);
+		if(file3.exists()) {
+			worldObj.sizeOnDisk -= file3.length();
 		}
 
 		try {
-			File var4 = new File(this.saveDir, "tmp_chunk.dat");
-			FileOutputStream var5 = new FileOutputStream(var4);
-			NBTTagCompound var6 = new NBTTagCompound();
-			NBTTagCompound var7 = new NBTTagCompound();
-			var6.setTag("Level", var7);
-			this.storeChunkInCompound(var2, var1, var7);
-			CompressedStreamTools.writeCompressed(var6, var5);
-			var5.close();
-			if(var3.exists()) {
-				var3.delete();
-			}
-
-			var4.renameTo(var3);
-			var1.sizeOnDisk += var3.length();
-		} catch (Exception var8) {
-			var8.printStackTrace();
-		}
-
-	}
-
-	public void storeChunkInCompound(Chunk var1, World var2, NBTTagCompound var3) {
-		var2.checkSessionLock();
-		var3.setInteger("xPos", var1.xPosition);
-		var3.setInteger("zPos", var1.zPosition);
-		var3.setLong("LastUpdate", var2.worldTime);
-		var3.setByteArray("Blocks", var1.blocks);
-		var3.setByteArray("Data", var1.data.data);
-		var3.setByteArray("SkyLight", var1.skylightMap.data);
-		var3.setByteArray("BlockLight", var1.blocklightMap.data);
-		var3.setByteArray("HeightMap", var1.heightMap);
-		var3.setBoolean("TerrainPopulated", var1.isTerrainPopulated);
-		var1.hasEntities = false;
-		NBTTagList var4 = new NBTTagList();
-
-		Iterator var6;
-		NBTTagCompound var8;
-		for(int var5 = 0; var5 < var1.entities.length; ++var5) {
-			var6 = var1.entities[var5].iterator();
-
-			while(var6.hasNext()) {
-				Entity var7 = (Entity)var6.next();
-				var1.hasEntities = true;
-				var8 = new NBTTagCompound();
-				if(var7.addEntityID(var8)) {
-					var4.setTag(var8);
-				}
-			}
-		}
-
-		var3.setTag("Entities", var4);
-		NBTTagList var9 = new NBTTagList();
-		var6 = var1.chunkTileEntityMap.values().iterator();
-
-		while(var6.hasNext()) {
-			TileEntity var10 = (TileEntity)var6.next();
-			var8 = new NBTTagCompound();
-			var10.writeToNBT(var8);
-			var9.setTag(var8);
-		}
-
-		var3.setTag("TileEntities", var9);
-	}
-
-	public static Chunk loadChunkIntoWorldFromCompound(World var0, NBTTagCompound var1) {
-		int var2 = var1.getInteger("xPos");
-		int var3 = var1.getInteger("zPos");
-		Chunk var4 = new Chunk(var0, var2, var3);
-		var4.blocks = var1.getByteArray("Blocks");
-		var4.data = new NibbleArray(var1.getByteArray("Data"));
-		var4.skylightMap = new NibbleArray(var1.getByteArray("SkyLight"));
-		var4.blocklightMap = new NibbleArray(var1.getByteArray("BlockLight"));
-		var4.heightMap = var1.getByteArray("HeightMap");
-		var4.isTerrainPopulated = var1.getBoolean("TerrainPopulated");
-		if(!var4.data.isValid()) {
-			var4.data = new NibbleArray(var4.blocks.length);
-		}
-
-		if(var4.heightMap == null || !var4.skylightMap.isValid()) {
-			var4.heightMap = new byte[256];
-			var4.skylightMap = new NibbleArray(var4.blocks.length);
-			var4.generateSkylightMap();
-		}
-
-		if(!var4.blocklightMap.isValid()) {
-			var4.blocklightMap = new NibbleArray(var4.blocks.length);
-			var4.doNothing();
-		}
-
-		NBTTagList var5 = var1.getTagList("Entities");
-		if(var5 != null) {
-			for(int var6 = 0; var6 < var5.tagCount(); ++var6) {
-				NBTTagCompound var7 = (NBTTagCompound)var5.tagAt(var6);
-				Entity var8 = EntityList.createEntityFromNBT(var7, var0);
-				var4.hasEntities = true;
-				if(var8 != null) {
-					var4.addEntity(var8);
-				}
-			}
-		}
-
-		NBTTagList var10 = var1.getTagList("TileEntities");
-		if(var10 != null) {
-			for(int var11 = 0; var11 < var10.tagCount(); ++var11) {
-				NBTTagCompound var12 = (NBTTagCompound)var10.tagAt(var11);
-				TileEntity var9 = TileEntity.createAndLoadEntity(var12);
-				if(var9 != null) {
-					var4.addTileEntity(var9);
-				}
-			}
-		}
-
-		return var4;
+			Random random4 = new Random();
+			File file5 = new File(this.saveDir, "tmp_chunk" + random4.nextLong() + "" + random4.nextLong() + ".dat");
+			FileOutputStream fileOutputStream6 = new FileOutputStream(file5);
+			NBTTagCompound nBTTagCompound7 = new NBTTagCompound();
+			NBTTagCompound nBTTagCompound8 = new NBTTagCompound();
+			nBTTagCompound7.setTag("Level", nBTTagCompound8);
+			this.storeChunkInCompound(chunk, worldObj, nBTTagCompound8);
+			CompressedStreamTools.writeCompressed(nBTTagCompound7, fileOutputStream6);
+			fileOutputStream6.close();
+			if(file3.exists()) {
+				file3.delete();
+			}
+
+			file5.renameTo(file3);
+			worldObj.sizeOnDisk += file3.length();
+		} catch (Exception exception9) {
+			exception9.printStackTrace();
+		}
+
+	}
+
+	public void storeChunkInCompound(Chunk chunk, World worldObj, NBTTagCompound nbtCompound) {
+		worldObj.checkSessionLock();
+		nbtCompound.setInteger("xPos", chunk.xPosition);
+		nbtCompound.setInteger("zPos", chunk.zPosition);
+		nbtCompound.setLong("LastUpdate", worldObj.worldTime);
+		nbtCompound.setByteArray("Blocks", chunk.blocks);
+		nbtCompound.setByteArray("Data", chunk.data.data);
+		nbtCompound.setByteArray("SkyLight", chunk.skylightMap.data);
+		nbtCompound.setByteArray("BlockLight", chunk.blocklightMap.data);
+		nbtCompound.setByteArray("HeightMap", chunk.heightMap);
+		nbtCompound.setBoolean("TerrainPopulated", chunk.isTerrainPopulated);
+		chunk.hasEntities = false;
+		NBTTagList nBTTagList4 = new NBTTagList();
+
+		NBTTagCompound nBTTagCompound5;
+		Iterator iterator7;
+		for(int i6 = 0; i6 < chunk.entities.length; ++i6) {
+			iterator7 = chunk.entities[i6].iterator();
+
+			while(iterator7.hasNext()) {
+				Entity entity8 = (Entity)iterator7.next();
+				chunk.hasEntities = true;
+				nBTTagCompound5 = new NBTTagCompound();
+				if(entity8.addEntityID(nBTTagCompound5)) {
+					nBTTagList4.setTag(nBTTagCompound5);
+				}
+			}
+		}
+
+		nbtCompound.setTag("Entities", nBTTagList4);
+		NBTTagList nBTTagList9 = new NBTTagList();
+		iterator7 = chunk.chunkTileEntityMap.values().iterator();
+
+		while(iterator7.hasNext()) {
+			TileEntity tileEntity10 = (TileEntity)iterator7.next();
+			nBTTagCompound5 = new NBTTagCompound();
+			tileEntity10.writeToNBT(nBTTagCompound5);
+			nBTTagList9.setTag(nBTTagCompound5);
+		}
+
+		nbtCompound.setTag("TileEntities", nBTTagList9);
+	}
+
+	public static Chunk loadChunkIntoWorldFromCompound(World worldObj, NBTTagCompound nbtCompound) {
+		int i2 = nbtCompound.getInteger("xPos");
+		int i3 = nbtCompound.getInteger("zPos");
+		Chunk chunk4 = new Chunk(worldObj, i2, i3);
+		chunk4.blocks = nbtCompound.getByteArray("Blocks");
+		chunk4.data = new NibbleArray(nbtCompound.getByteArray("Data"));
+		chunk4.skylightMap = new NibbleArray(nbtCompound.getByteArray("SkyLight"));
+		chunk4.blocklightMap = new NibbleArray(nbtCompound.getByteArray("BlockLight"));
+		chunk4.heightMap = nbtCompound.getByteArray("HeightMap");
+		chunk4.isTerrainPopulated = nbtCompound.getBoolean("TerrainPopulated");
+		if(!chunk4.data.isValid()) {
+			chunk4.data = new NibbleArray(chunk4.blocks.length);
+		}
+
+		if(chunk4.heightMap == null || !chunk4.skylightMap.isValid()) {
+			chunk4.heightMap = new byte[256];
+			chunk4.skylightMap = new NibbleArray(chunk4.blocks.length);
+			chunk4.generateSkylightMap();
+		}
+
+		if(!chunk4.blocklightMap.isValid()) {
+			chunk4.blocklightMap = new NibbleArray(chunk4.blocks.length);
+			chunk4.doNothing();
+		}
+
+		NBTTagList nBTTagList5 = nbtCompound.getTagList("Entities");
+		if(nBTTagList5 != null) {
+			for(int i6 = 0; i6 < nBTTagList5.tagCount(); ++i6) {
+				NBTTagCompound nBTTagCompound7 = (NBTTagCompound)nBTTagList5.tagAt(i6);
+				Entity entity8 = EntityList.createEntityFromNBT(nBTTagCompound7, worldObj);
+				chunk4.hasEntities = true;
+				if(entity8 != null) {
+					chunk4.addEntity(entity8);
+				}
+			}
+		}
+
+		NBTTagList nBTTagList10 = nbtCompound.getTagList("TileEntities");
+		if(nBTTagList10 != null) {
+			for(int i11 = 0; i11 < nBTTagList10.tagCount(); ++i11) {
+				NBTTagCompound nBTTagCompound12 = (NBTTagCompound)nBTTagList10.tagAt(i11);
+				TileEntity tileEntity9 = TileEntity.createAndLoadEntity(nBTTagCompound12);
+				if(tileEntity9 != null) {
+					chunk4.addTileEntity(tileEntity9);
+				}
+			}
+		}
+
+		return chunk4;
 	}
 
 	public void chunkTick() {
@@ -201,6 +203,6 @@
 	public void saveExtraData() {
 	}
 
-	public void saveExtraChunkData(World var1, Chunk var2) {
+	public void saveExtraChunkData(World worldObj, Chunk chunk) {
 	}
 }
--- /dev/null
+++ net/minecraft/src/EnumWorldGenerator.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+public enum EnumWorldGenerator {
+	SURFACE,
+	UNDERGROUND,
+	LOW_RIVER;
+
+    private static final /* synthetic */ EnumWorldGenerator[] field_10218_3QrIHxRx2jG15e9tuS5r0965HnOUaDkLsjOAqP48GPYU5wQjQ45qYyYp6i39;
+
+	public static EnumWorldGenerator[] func_10212_687pFhoaPBF6M4hBc653Q576K1D17054nP32W3591E5Q2aYGU1m5Kdc9N1JW() {
+		return (EnumWorldGenerator[])field_10218_3QrIHxRx2jG15e9tuS5r0965HnOUaDkLsjOAqP48GPYU5wQjQ45qYyYp6i39.clone();
+	}
+
+	public static EnumWorldGenerator func_10213_0ZK60yIEWC7x49spI4Px0g54M5La7Pn2X3qKvS4J166Fmb2htc02is7LQRlq(String string) {
+		return (EnumWorldGenerator)Enum.valueOf(EnumWorldGenerator.class, string);
+	}
+
+	private static EnumWorldGenerator[] func_10214_7w4698oPqL58Fjaf1uMTfEAgGG0uN10YP758eR09r2wx2dSrl77je7cUNid6() {
+		return new EnumWorldGenerator[]{SURFACE, UNDERGROUND, LOW_RIVER};
+	}
+
+    static {
+        field_10218_3QrIHxRx2jG15e9tuS5r0965HnOUaDkLsjOAqP48GPYU5wQjQ45qYyYp6i39 = EnumWorldGenerator.func_10214_7w4698oPqL58Fjaf1uMTfEAgGG0uN10YP758eR09r2wx2dSrl77je7cUNid6();
+    }
+}
--- /dev/null
+++ net/minecraft/src/BlockStoneOld.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockStoneOld extends BlockOld {
+	public BlockStoneOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.rock);
+	}
+
+	public int idDropped(int integer, Random random) {
+		return BlockOld.cobblestone.blockID;
+	}
+}
--- net/minecraft/src/EntitySkeleton.java
+++ net/minecraft/src/EntitySkeleton.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
 public class EntitySkeleton extends EntityMob {
-	public EntitySkeleton(World var1) {
-		super(var1);
+	public EntitySkeleton(World world) {
+		super(world);
 		this.texture = "/mob/skeleton.png";
 	}
 
@@ -20,8 +20,8 @@
 
 	public void onLivingUpdate() {
 		if(this.worldObj.isDaytime()) {
-			float var1 = this.getBrightness(1.0F);
-			if(var1 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) && this.rand.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F) {
+			float f1 = this.getBrightness(1.0F);
+			if(f1 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) && this.rand.nextFloat() * 30.0F < (f1 - 0.4F) * 2.0F) {
 				this.fire = 300;
 			}
 		}
@@ -29,36 +29,40 @@
 		super.onLivingUpdate();
 	}
 
-	protected void attackEntity(Entity var1, float var2) {
-		if(var2 < 10.0F) {
-			double var3 = var1.posX - this.posX;
-			double var5 = var1.posZ - this.posZ;
+	protected void attackEntity(Entity entity, float damage) {
+		if(damage < 10.0F) {
+			double d3 = entity.posX - this.posX;
+			double d5 = entity.posZ - this.posZ;
 			if(this.attackTime == 0) {
-				EntityArrow var7 = new EntityArrow(this.worldObj, this);
-				var7.posY += (double)1.4F;
-				double var8 = var1.posY - (double)0.2F - var7.posY;
-				float var10 = MathHelper.sqrt_double(var3 * var3 + var5 * var5) * 0.2F;
+				EntityArrow entityArrow7 = new EntityArrow(this.worldObj, this);
+				++entityArrow7.posY;
+				double d8 = entity.posY - (double)0.2F - entityArrow7.posY;
+				float f10 = MathHelper.sqrt_double(d3 * d3 + d5 * d5) * 0.2F;
 				this.worldObj.playSoundAtEntity(this, "random.bow", 1.0F, 1.0F / (this.rand.nextFloat() * 0.4F + 0.8F));
-				this.worldObj.spawnEntityInWorld(var7);
-				var7.setArrowHeading(var3, var8 + (double)var10, var5, 0.6F, 12.0F);
+				this.worldObj.spawnEntityInWorld(entityArrow7);
+				entityArrow7.setArrowHeading(d3, d8 + (double)f10, d5, 0.6F, 12.0F);
 				this.attackTime = 30;
 			}
 
-			this.rotationYaw = (float)(Math.atan2(var5, var3) * 180.0D / (double)((float)Math.PI)) - 90.0F;
+			this.rotationYaw = (float)(Math.atan2(d5, d3) * 180.0D / (double)(float)Math.PI) - 90.0F;
 			this.hasAttacked = true;
 		}
 
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
 	}
 
 	protected int getDropItemId() {
 		return Item.arrow.shiftedIndex;
+	}
+
+	public int getEssenceDroppedOnKill() {
+		return 12 + this.rand.nextInt(6);
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandName.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+class CommandName extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8551_44E6V5Mg9bzvMFx5VEPdcQ4Jwt8r6O2lwz0d55z7359uqj6ZAeJIzJ49W0H2;
+    
+    CommandName(final CommandManager abb) {
+        this.field_8551_44E6V5Mg9bzvMFx5VEPdcQ4Jwt8r6O2lwz0d55z7359uqj6ZAeJIzJ49W0H2 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.session.username = (String)arr[0];
+        InputHandler.mc.func_7251_0aCQ3QUtAn82t0f1z3JQKRAg5aNB155g64AWf0ztqf7j603OA1tsJsAwlFrq();
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return InputHandler.mc.session.username;
+    }
+}
--- /dev/null
+++ net/minecraft/src/BlockLeverOld.java
@@ -1,0 +1,196 @@
+package net.minecraft.src;
+
+public class BlockLeverOld extends BlockOld {
+	protected BlockLeverOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.circuits);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return null;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 12;
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		return vg.isBlockNormalCube(integer2 - 1, integer3, integer4) ? true : (vg.isBlockNormalCube(integer2 + 1, integer3, integer4) ? true : (vg.isBlockNormalCube(integer2, integer3, integer4 - 1) ? true : (vg.isBlockNormalCube(integer2, integer3, integer4 + 1) ? true : vg.isBlockNormalCube(integer2, integer3 - 1, integer4))));
+	}
+
+	public void onBlockPlaced(World vg, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		int i7 = i6 & 8;
+		i6 &= 7;
+		if(integer5 == 1 && vg.isBlockNormalCube(integer2, integer3 - 1, integer4)) {
+			i6 = 5 + vg.rand.nextInt(2);
+		}
+
+		if(integer5 == 2 && vg.isBlockNormalCube(integer2, integer3, integer4 + 1)) {
+			i6 = 4;
+		}
+
+		if(integer5 == 3 && vg.isBlockNormalCube(integer2, integer3, integer4 - 1)) {
+			i6 = 3;
+		}
+
+		if(integer5 == 4 && vg.isBlockNormalCube(integer2 + 1, integer3, integer4)) {
+			i6 = 2;
+		}
+
+		if(integer5 == 5 && vg.isBlockNormalCube(integer2 - 1, integer3, integer4)) {
+			i6 = 1;
+		}
+
+		vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i6 + i7);
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+		if(vg.isBlockNormalCube(integer2 - 1, integer3, integer4)) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 1);
+		} else if(vg.isBlockNormalCube(integer2 + 1, integer3, integer4)) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 2);
+		} else if(vg.isBlockNormalCube(integer2, integer3, integer4 - 1)) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 3);
+		} else if(vg.isBlockNormalCube(integer2, integer3, integer4 + 1)) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 4);
+		} else if(vg.isBlockNormalCube(integer2, integer3 - 1, integer4)) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 5 + vg.rand.nextInt(2));
+		}
+
+		this.checkIfAttachedToBlock(vg, integer2, integer3, integer4);
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		if(this.checkIfAttachedToBlock(vg, integer2, integer3, integer4)) {
+			int i6 = vg.getBlockMetadata(integer2, integer3, integer4) & 7;
+			boolean z7 = false;
+			if(!vg.isBlockNormalCube(integer2 - 1, integer3, integer4) && i6 == 1) {
+				z7 = true;
+			}
+
+			if(!vg.isBlockNormalCube(integer2 + 1, integer3, integer4) && i6 == 2) {
+				z7 = true;
+			}
+
+			if(!vg.isBlockNormalCube(integer2, integer3, integer4 - 1) && i6 == 3) {
+				z7 = true;
+			}
+
+			if(!vg.isBlockNormalCube(integer2, integer3, integer4 + 1) && i6 == 4) {
+				z7 = true;
+			}
+
+			if(!vg.isBlockNormalCube(integer2, integer3 - 1, integer4) && i6 == 5) {
+				z7 = true;
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+				vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+			}
+		}
+
+	}
+
+	private boolean checkIfAttachedToBlock(World vg, int integer2, int integer3, int integer4) {
+		if(!this.canPlaceBlockAt(vg, integer2, integer3, integer4)) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		int i5 = abt.getBlockMetadata(integer2, integer3, integer4) & 7;
+		float f6 = 0.1875F;
+		if(i5 == 1) {
+			this.setBlockBounds(0.0F, 0.2F, 0.5F - f6, f6 * 2.0F, 0.8F, 0.5F + f6);
+		} else if(i5 == 2) {
+			this.setBlockBounds(1.0F - f6 * 2.0F, 0.2F, 0.5F - f6, 1.0F, 0.8F, 0.5F + f6);
+		} else if(i5 == 3) {
+			this.setBlockBounds(0.5F - f6, 0.2F, 0.0F, 0.5F + f6, 0.8F, f6 * 2.0F);
+		} else if(i5 == 4) {
+			this.setBlockBounds(0.5F - f6, 0.2F, 1.0F - f6 * 2.0F, 0.5F + f6, 0.8F, 1.0F);
+		} else {
+			f6 = 0.25F;
+			this.setBlockBounds(0.5F - f6, 0.0F, 0.5F - f6, 0.5F + f6, 0.6F, 0.5F + f6);
+		}
+
+	}
+
+	public void onBlockClicked(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+		this.blockActivated(vg, integer2, integer3, integer4, gb);
+	}
+
+	public boolean blockActivated(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		int i7 = i6 & 7;
+		int i8 = 8 - (i6 & 8);
+		vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i7 + i8);
+		vg.markBlocksDirty(integer2, integer3, integer4, integer2, integer3, integer4);
+		vg.playSoundEffect((double)integer2 + 0.5D, (double)integer3 + 0.5D, (double)integer4 + 0.5D, "random.click", 0.3F, i8 > 0 ? 0.6F : 0.5F);
+		vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4, this.blockID);
+		if(i7 == 1) {
+			vg.notifyBlocksOfNeighborChange(integer2 - 1, integer3, integer4, this.blockID);
+		} else if(i7 == 2) {
+			vg.notifyBlocksOfNeighborChange(integer2 + 1, integer3, integer4, this.blockID);
+		} else if(i7 == 3) {
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 - 1, this.blockID);
+		} else if(i7 == 4) {
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 + 1, this.blockID);
+		} else {
+			vg.notifyBlocksOfNeighborChange(integer2, integer3 - 1, integer4, this.blockID);
+		}
+
+		return true;
+	}
+
+	public void onBlockRemoval(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockMetadata(integer2, integer3, integer4);
+		if((i5 & 8) > 0) {
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4, this.blockID);
+			int i6 = i5 & 7;
+			if(i6 == 1) {
+				vg.notifyBlocksOfNeighborChange(integer2 - 1, integer3, integer4, this.blockID);
+			} else if(i6 == 2) {
+				vg.notifyBlocksOfNeighborChange(integer2 + 1, integer3, integer4, this.blockID);
+			} else if(i6 == 3) {
+				vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 - 1, this.blockID);
+			} else if(i6 == 4) {
+				vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 + 1, this.blockID);
+			} else {
+				vg.notifyBlocksOfNeighborChange(integer2, integer3 - 1, integer4, this.blockID);
+			}
+		}
+
+		super.onBlockRemoval(vg, integer2, integer3, integer4);
+	}
+
+	public boolean isPoweringTo(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		return (abt.getBlockMetadata(integer2, integer3, integer4) & 8) > 0;
+	}
+
+	public boolean isIndirectlyPoweringTo(World vg, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		if((i6 & 8) == 0) {
+			return false;
+		} else {
+			int i7 = i6 & 7;
+			return i7 == 5 && integer5 == 1 ? true : (i7 == 4 && integer5 == 2 ? true : (i7 == 3 && integer5 == 3 ? true : (i7 == 2 && integer5 == 4 ? true : i7 == 1 && integer5 == 5)));
+		}
+	}
+
+	public boolean canProvidePower() {
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockEmptyBookshelf.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockEmptyBookshelf extends Block {
+	public BlockEmptyBookshelf(int integer1, int integer2) {
+		super(integer1, integer2, Material.wood);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side <= 1 ? 127 : this.blockIndexInTexture;
+	}
+
+	public int quantityDropped(Random random) {
+		return 0;
+	}
+}
--- net/minecraft/src/InventoryCrafting.java
+++ net/minecraft/src/InventoryCrafting.java
@@ -3,57 +3,57 @@
 public class InventoryCrafting implements IInventory {
 	private ItemStack[] stackList;
 	private int gridSize;
-	private CraftingInventoryCB craftingInventory;
+	private InventoryCB craftingInventory;
 
-	public InventoryCrafting(CraftingInventoryCB var1, int var2, int var3) {
-		this.gridSize = var2 * var3;
+	public InventoryCrafting(InventoryCB ac, int integer2, int integer3) {
+		this.gridSize = integer2 * integer3;
 		this.stackList = new ItemStack[this.gridSize];
-		this.craftingInventory = var1;
+		this.craftingInventory = ac;
 	}
 
-	public InventoryCrafting(CraftingInventoryCB var1, ItemStack[] var2) {
-		this.gridSize = var2.length;
-		this.stackList = var2;
-		this.craftingInventory = var1;
+	public InventoryCrafting(InventoryCB ac, ItemStack[] arr) {
+		this.gridSize = arr.length;
+		this.stackList = arr;
+		this.craftingInventory = ac;
 	}
 
 	public int getSizeInventory() {
 		return this.gridSize;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.stackList[var1];
+	public ItemStack getStackInSlot(int slot) {
+		return this.stackList[slot];
 	}
 
 	public String getInvName() {
 		return "Crafting";
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
-		if(this.stackList[var1] != null) {
-			ItemStack var3;
-			if(this.stackList[var1].stackSize <= var2) {
-				var3 = this.stackList[var1];
-				this.stackList[var1] = null;
-				this.craftingInventory.onCraftMatrixChanged(this);
-				return var3;
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.stackList[slot] != null) {
+			ItemStack itemStack3;
+			if(this.stackList[slot].stackSize <= stackSize) {
+				itemStack3 = this.stackList[slot];
+				this.stackList[slot] = null;
+				this.craftingInventory.a(this);
+				return itemStack3;
 			} else {
-				var3 = this.stackList[var1].splitStack(var2);
-				if(this.stackList[var1].stackSize == 0) {
-					this.stackList[var1] = null;
+				itemStack3 = this.stackList[slot].splitStack(stackSize);
+				if(this.stackList[slot].stackSize == 0) {
+					this.stackList[slot] = null;
 				}
 
-				this.craftingInventory.onCraftMatrixChanged(this);
-				return var3;
+				this.craftingInventory.a(this);
+				return itemStack3;
 			}
 		} else {
 			return null;
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.stackList[var1] = var2;
-		this.craftingInventory.onCraftMatrixChanged(this);
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.stackList[slot] = itemStack;
+		this.craftingInventory.a(this);
 	}
 
 	public int getInventoryStackLimit() {
--- /dev/null
+++ net/minecraft/src/EnumHouseBig.java
@@ -1,0 +1,31 @@
+package net.minecraft.src;
+
+enum EnumHouseBig {
+	None,
+	Door,
+	PinkGlass,
+	BlueGlass,
+	LimeGlass,
+	BlackGlass,
+	WhiteGlass,
+	Doorless,
+	PlateDecor;
+
+    private static final /* synthetic */ EnumHouseBig[] field_12162_3ohPnU20KK0B3749924RNr8lbCpQasiePhtV1KEYP88a0Gy0sOCo3Qt724XT;
+
+	public static EnumHouseBig[] func_12158_5d1PqAM31919iSOCPJkkBw3o2MG1I7zT27GPOp97Xf3srdW4U58elVI1No8M() {
+		return (EnumHouseBig[])field_12162_3ohPnU20KK0B3749924RNr8lbCpQasiePhtV1KEYP88a0Gy0sOCo3Qt724XT.clone();
+	}
+
+	public static EnumHouseBig func_12159_9NhRvHFhUTqV1qGM1SvT7e65i70URCm3i6u46KI7jt261H4O551ScEE5x9oe(String string) {
+		return (EnumHouseBig)Enum.valueOf(EnumHouseBig.class, string);
+	}
+
+	private static EnumHouseBig[] func_12157_0TxqrB9t263mD1k6604P3L01Vwh2X40gSZVg737b7zNkUpBeZhIJ2YTMs895() {
+		return new EnumHouseBig[]{None, Door, PinkGlass, BlueGlass, LimeGlass, BlackGlass, WhiteGlass, Doorless, PlateDecor};
+	}
+
+    static {
+        field_12162_3ohPnU20KK0B3749924RNr8lbCpQasiePhtV1KEYP88a0Gy0sOCo3Qt724XT = EnumHouseBig.func_12157_0TxqrB9t263mD1k6604P3L01Vwh2X40gSZVg737b7zNkUpBeZhIJ2YTMs895();
+    }
+}
--- /dev/null
+++ net/minecraft/src/CommandWorldeditSetpos.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandWorldeditSetpos extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8573_2i927939HzkFLH5oG4VnVZi3n1nnH05aF8rRn7be4xXJ5H0808k98uL0RLx5;
+    
+    CommandWorldeditSetpos(final CommandManager abb) {
+        this.field_8573_2i927939HzkFLH5oG4VnVZi3n1nnH05aF8rRn7be4xXJ5H0808k98uL0RLx5 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.ingameGUI.weditOverlay.func_11896_21hxskjoCalSdNwCUtCH797a5Bv6x17Si7L3X48r8FIf14LJZL110IOeH5JV();
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/EntityPlayerBanned.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+public class EntityPlayerBanned extends EntityPlayerSP {
+	public EntityPlayerBanned(Minecraft mc, World worldObj, Session session) {
+		super(mc, worldObj, session);
+		mc.ingameGUI = new GuiBanned(mc);
+	}
+
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		return false;
+	}
+}
--- net/minecraft/src/WorldGenMinable.java
+++ net/minecraft/src/WorldGenMinable.java
@@ -4,38 +4,55 @@
 
 public class WorldGenMinable extends WorldGenerator {
 	private int minableBlockId;
+	private int blockIDBelowY10;
 	private int numberOfBlocks;
 
-	public WorldGenMinable(int var1, int var2) {
-		this.minableBlockId = var1;
-		this.numberOfBlocks = var2;
-	}
-
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		float var6 = var2.nextFloat() * (float)Math.PI;
-		double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var15 = (double)(var4 + var2.nextInt(3) + 2);
-		double var17 = (double)(var4 + var2.nextInt(3) + 2);
-
-		for(int var19 = 0; var19 <= this.numberOfBlocks; ++var19) {
-			double var20 = var7 + (var9 - var7) * (double)var19 / (double)this.numberOfBlocks;
-			double var22 = var15 + (var17 - var15) * (double)var19 / (double)this.numberOfBlocks;
-			double var24 = var11 + (var13 - var11) * (double)var19 / (double)this.numberOfBlocks;
-			double var26 = var2.nextDouble() * (double)this.numberOfBlocks / 16.0D;
-			double var28 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
-			double var30 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
-
-			for(int var32 = (int)(var20 - var28 / 2.0D); var32 <= (int)(var20 + var28 / 2.0D); ++var32) {
-				for(int var33 = (int)(var22 - var30 / 2.0D); var33 <= (int)(var22 + var30 / 2.0D); ++var33) {
-					for(int var34 = (int)(var24 - var28 / 2.0D); var34 <= (int)(var24 + var28 / 2.0D); ++var34) {
-						double var35 = ((double)var32 + 0.5D - var20) / (var28 / 2.0D);
-						double var37 = ((double)var33 + 0.5D - var22) / (var30 / 2.0D);
-						double var39 = ((double)var34 + 0.5D - var24) / (var28 / 2.0D);
-						if(var35 * var35 + var37 * var37 + var39 * var39 < 1.0D && var1.getBlockId(var32, var33, var34) == Block.stone.blockID) {
-							var1.setBlock(var32, var33, var34, this.minableBlockId);
+	public WorldGenMinable(int integer1, int integer2, int integer3) {
+		this(integer1, integer3);
+		this.blockIDBelowY10 = integer2;
+	}
+
+	public WorldGenMinable(int minableBlockID, int numberOfBlocks) {
+		this.minableBlockId = minableBlockID;
+		this.numberOfBlocks = numberOfBlocks;
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		float f6 = rand.nextFloat() * (float)Math.PI;
+		double d7 = (double)((float)(x + 8) + MathHelper.sin(f6) * (float)this.numberOfBlocks / 8.0F);
+		double d9 = (double)((float)(x + 8) - MathHelper.sin(f6) * (float)this.numberOfBlocks / 8.0F);
+		double d11 = (double)((float)(z + 8) + MathHelper.cos(f6) * (float)this.numberOfBlocks / 8.0F);
+		double d13 = (double)((float)(z + 8) - MathHelper.cos(f6) * (float)this.numberOfBlocks / 8.0F);
+		double d15 = (double)(y + rand.nextInt(3) + 2);
+		double d17 = (double)(y + rand.nextInt(3) + 2);
+
+		for(int i19 = 0; i19 <= this.numberOfBlocks; ++i19) {
+			double d20 = d7 + (d9 - d7) * (double)i19 / (double)this.numberOfBlocks;
+			double d22 = d15 + (d17 - d15) * (double)i19 / (double)this.numberOfBlocks;
+			double d24 = d11 + (d13 - d11) * (double)i19 / (double)this.numberOfBlocks;
+			double d26 = rand.nextDouble() * (double)this.numberOfBlocks / 16.0D;
+			double d28 = (double)(MathHelper.sin((float)i19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * d26 + 1.0D;
+			double d30 = (double)(MathHelper.sin((float)i19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * d26 + 1.0D;
+
+			for(int i32 = (int)(d20 - d28 / 2.0D); i32 <= (int)(d20 + d28 / 2.0D); ++i32) {
+				for(int i33 = (int)(d22 - d30 / 2.0D); i33 <= (int)(d22 + d30 / 2.0D); ++i33) {
+					for(int i34 = (int)(d24 - d28 / 2.0D); i34 <= (int)(d24 + d28 / 2.0D); ++i34) {
+						double d35 = ((double)i32 + 0.5D - d20) / (d28 / 2.0D);
+						double d37 = ((double)i33 + 0.5D - d22) / (d30 / 2.0D);
+						double d39 = ((double)i34 + 0.5D - d24) / (d28 / 2.0D);
+						if(d35 * d35 + d37 * d37 + d39 * d39 < 1.0D && (world.getBlockId(i32, i33, i34) == Block.stone.blockID || world.getBlockId(i32, i33, i34) == ExtBlocks.LowStone.blockID)) {
+							world.setBlock(i32, i33, i34, i33 <= 10 ? this.blockIDBelowY10 : this.minableBlockId);
+							if(i33 <= 10) {
+								for(int i41 = -1; i41 <= 1; i41 += 2) {
+									for(int i42 = -1; i42 <= 1; i42 += 2) {
+										for(int i43 = -1; i43 <= 1; i43 += 2) {
+											if(world.getBlockId(i32 + i41, i33 + i42, i34 + i43) == Block.stone.blockID) {
+												world.setBlock(i32 + i41, i33 + i42, i34 + i43, ExtBlocks.LowStone.blockID);
+											}
+										}
+									}
+								}
+							}
 						}
 					}
 				}
--- net/minecraft/client/MinecraftApplet.java
+++ net/minecraft/client/MinecraftApplet.java
@@ -3,6 +3,7 @@
 import java.applet.Applet;
 import java.awt.BorderLayout;
 import java.awt.Canvas;
+
 import net.minecraft.src.CanvasMinecraftApplet;
 import net.minecraft.src.MinecraftAppletImpl;
 import net.minecraft.src.Session;
@@ -14,12 +15,12 @@
 
 	public void init() {
 		this.mcCanvas = new CanvasMinecraftApplet(this);
-		boolean var1 = false;
+		boolean z1 = false;
 		if(this.getParameter("fullscreen") != null) {
-			var1 = this.getParameter("fullscreen").equalsIgnoreCase("true");
+			z1 = this.getParameter("fullscreen").equalsIgnoreCase("true");
 		}
 
-		this.mc = new MinecraftAppletImpl(this, this, this.mcCanvas, this, this.getWidth(), this.getHeight(), var1);
+		this.mc = new MinecraftAppletImpl(this, this, this.mcCanvas, this, this.getWidth(), this.getHeight(), z1);
 		this.mc.minecraftUri = this.getDocumentBase().getHost();
 		if(this.getDocumentBase().getPort() > 0) {
 			this.mc.minecraftUri = this.mc.minecraftUri + ":" + this.getDocumentBase().getPort();
@@ -54,6 +55,7 @@
 			this.mcThread = new Thread(this.mc, "Minecraft main thread");
 			this.mcThread.start();
 		}
+
 	}
 
 	public void start() {
@@ -80,16 +82,17 @@
 
 			try {
 				this.mcThread.join(10000L);
-			} catch (InterruptedException var4) {
+			} catch (InterruptedException interruptedException4) {
 				try {
 					this.mc.shutdownMinecraftApplet();
-				} catch (Exception var3) {
-					var3.printStackTrace();
+				} catch (Exception exception3) {
+					exception3.printStackTrace();
 				}
 			}
 
 			this.mcThread = null;
 		}
+
 	}
 
 	public void clearApplet() {
@@ -100,7 +103,7 @@
 		try {
 			this.removeAll();
 			this.validate();
-		} catch (Exception var2) {
+		} catch (Exception exception2) {
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/GuiFreerunWorlds.java
@@ -1,0 +1,111 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.util.Iterator;
+
+import net.minecraft.client.Minecraft;
+
+public class GuiFreerunWorlds extends GuiScreen {
+	protected GuiScreen parentScreen;
+	protected String screenTitle = "Freerun";
+	private boolean selected = false;
+	public long field_8064_4oNKTSR4J6PmB4lQ8Og86yJYr49F2Y9cBz2H2uDi9sVNSS5rSVh489kn0E56 = -1L;
+	GuiImageHandler field_8066_0zGDjQ05EJl5TayZsg879M41o7X39B5M7SD8x5WnJz78w3cGByQ9ivEu9GZp;
+
+	public GuiFreerunWorlds(GuiScreen hr) {
+		this.parentScreen = hr;
+		this.field_8064_4oNKTSR4J6PmB4lQ8Og86yJYr49F2Y9cBz2H2uDi9sVNSS5rSVh489kn0E56 = System.currentTimeMillis();
+		this.field_8066_0zGDjQ05EJl5TayZsg879M41o7X39B5M7SD8x5WnJz78w3cGByQ9ivEu9GZp = new GuiImageHandler(hr.mc, "/gui/freerun_cover0.png", 500.0F);
+	}
+
+	public void CreateWorldButtons() {
+		while(this.controlList.size() > 2) {
+			this.controlList.remove(2);
+		}
+
+		File file1 = Minecraft.getMinecraftDir();
+
+		for(int i2 = 0; i2 < 6; ++i2) {
+			GuiButton guiButton3 = new GuiButton(i2, this.width / 2 - 75 + (i2 > 2 ? 80 : -80), this.height / 4 + 25 * (i2 % 3), 150, 20, this.getSaveName(i2));
+			this.controlList.add(guiButton3);
+			NBTTagCompound nBTTagCompound4 = World.getLevelData(file1, "/freerun/WorldFreerun" + i2);
+			if(nBTTagCompound4 == null) {
+				guiButton3.enabled = false;
+			}
+		}
+
+	}
+
+	public void initGui() {
+		this.controlList.clear();
+		this.initButtons();
+		this.CreateWorldButtons();
+	}
+
+	protected String getSaveName(int integer) {
+		switch(integer) {
+		case 0:
+			return "INTRODUCTION";
+		case 1:
+			return "CONSTRUCT";
+		case 2:
+			return "SKYLINE";
+		case 3:
+			return "SORROW";
+		case 4:
+			return "SHIVER";
+		case 5:
+			return "FINALE";
+		default:
+			return "???";
+		}
+	}
+
+	public void initButtons() {
+		this.controlList.add(new GuiButton(-2, this.width / 2 - 100, this.height / 6 + 168, "Back"));
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled) {
+			if(button.id > -1) {
+				Class class2 = button.id == 0 ? FreerunMap0.class : (button.id == 1 ? FreerunMap1.class : (button.id == 2 ? FreerunMap2.class : (button.id == 3 ? FreerunMap3.class : (button.id == 4 ? FreerunMap4.class : (button.id == 5 ? FreerunMap5.class : null)))));
+				this.selectWorld("/freerun/WorldFreerun" + button.id, class2);
+			} else if(button.id == -2) {
+				this.mc.displayGuiScreen(this.parentScreen);
+			}
+		}
+
+	}
+
+	public void selectWorld(String string, Class class2) {
+		if(class2 != null) {
+			((BlockHidable)ExtBlocks.BarrierBlock).render = false;
+			this.mc.displayGuiScreen((GuiScreen)null);
+			if(!this.selected) {
+				this.selected = true;
+				this.mc.playerController = new PlayerControllerSP(this.mc);
+				this.mc.func_7260_29708o9t3Kv11ORjhW6WgtZ1jrShpxII2V33oCWwflopdLkDYzM1ouYGxg87(string, class2);
+				this.mc.displayGuiScreen((GuiScreen)null);
+			}
+
+		}
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		Iterator iterator4 = this.controlList.iterator();
+
+		while(iterator4.hasNext()) {
+			GuiButton guiButton5 = (GuiButton)iterator4.next();
+			if(guiButton5.field_7874_8hutMN8Nkr6540tkVq0b1457yM08Q9Ty13MenI0kbL06Yf3m8DLUel3bs5Tm && !this.field_8066_0zGDjQ05EJl5TayZsg879M41o7X39B5M7SD8x5WnJz78w3cGByQ9ivEu9GZp.field_9956_15GOe6410z7Fl452j2yZISN60Abc7m54nek0mM34PB830a3aHI564YEQpTcg.contains("cover" + guiButton5.id + ".png") && guiButton5.id >= 0 && guiButton5.id <= 5) {
+				this.field_8066_0zGDjQ05EJl5TayZsg879M41o7X39B5M7SD8x5WnJz78w3cGByQ9ivEu9GZp.func_9955_5630DX5SV053d8F74A11907j9t7039N0rdr37W800V11wnAC9AhArcyC6F5W("/gui/freerun_cover" + guiButton5.id + ".png");
+			}
+		}
+
+		this.field_8066_0zGDjQ05EJl5TayZsg879M41o7X39B5M7SD8x5WnJz78w3cGByQ9ivEu9GZp.func_9954_31xL9lqzsd832NIF2fnqGsFer65B6pP9dW8u4402h7H3mW9p6ZjIZK9RM2zT(this.width, this.height);
+		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 0xFFFFFF);
+		this.drawCenteredString(this.fontRenderer, "-- FREERUN --", this.width / 2, this.height / 6 + 118, 0xFFFFFF);
+		this.drawCenteredString(this.fontRenderer, "Test your skills using the new gameplay mechanics", this.width / 2, this.height / 6 + 138, 10526880);
+		this.drawCenteredString(this.fontRenderer, "by playing these timed stages.", this.width / 2, this.height / 6 + 148, 10526880);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockSaplingOld.java
@@ -1,0 +1,32 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockSaplingOld extends BlockFlowerOld {
+	protected BlockSaplingOld(int integer1, int integer2) {
+		super(integer1, integer2);
+		float f3 = 0.4F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, f3 * 2.0F, 0.5F + f3);
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		super.updateTick(vg, integer2, integer3, integer4, random);
+		if(vg.getBlockLightValue(integer2, integer3 + 1, integer4) >= 9 && random.nextInt(5) == 0) {
+			int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+			if(i6 < 15) {
+				vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i6 + 1);
+			} else {
+				vg.setBlock(integer2, integer3, integer4, 0);
+				Object object7 = new WorldGenTrees();
+				if(random.nextInt(10) == 0) {
+					object7 = new WorldGenBigTree();
+				}
+
+				if(!((WorldGenerator)object7).generate(vg, random, integer2, integer3, integer4)) {
+					vg.setBlock(integer2, integer3, integer4, this.blockID);
+				}
+			}
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenHouseSmallUnknownClass5.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.List;
+
+class WorldGenHouseSmallUnknownClass5 {
+	public int field_12171_5UJO83Sal8307YLDFyzIt779v5qD6812ur6y32x891iN95OgW8FOAZDB1pNG;
+	public int field_12173_7fAKjHW1LE847OSwtPxt16L6WGEi68u7u6fWOmkZTpO3ZbiE0TR39wTva1vJ;
+	public int field_12170_8ceUXPOD34dVCWOlpGT5Do01b84rla5c3oO5uc195z07QUJ9oHb4k9hRdKb9;
+	public int field_12175_2H1YgXg1iR1kd9fC2ubGim1KGwSPUAnw9qg68y5mGH12kgO6dN8w61caMKO3;
+	public int field_12174_2QgdUt39i2D2kz0DVgEK57x7SbqDO3VF01u5FKjDkJE4E2TM9g1sTnjxdetP;
+	public List field_12172_7EQ6jd3x88fSv4M9BHi7s57Y778Lr34WSc98fXK3YndnTY5T4cO73NCZv1zn = new ArrayList();
+
+	public WorldGenHouseSmallUnknownClass5(int integer1, int integer2, int integer3, int integer4, int integer5) {
+		this.field_12171_5UJO83Sal8307YLDFyzIt779v5qD6812ur6y32x891iN95OgW8FOAZDB1pNG = integer1;
+		this.field_12173_7fAKjHW1LE847OSwtPxt16L6WGEi68u7u6fWOmkZTpO3ZbiE0TR39wTva1vJ = integer2;
+		this.field_12170_8ceUXPOD34dVCWOlpGT5Do01b84rla5c3oO5uc195z07QUJ9oHb4k9hRdKb9 = integer3;
+		this.field_12175_2H1YgXg1iR1kd9fC2ubGim1KGwSPUAnw9qg68y5mGH12kgO6dN8w61caMKO3 = integer4;
+		this.field_12174_2QgdUt39i2D2kz0DVgEK57x7SbqDO3VF01u5FKjDkJE4E2TM9g1sTnjxdetP = integer5;
+	}
+}
--- net/minecraft/src/ItemRedstone.java
+++ net/minecraft/src/ItemRedstone.java
@@ -1,41 +1,41 @@
 package net.minecraft.src;
 
 public class ItemRedstone extends Item {
-	public ItemRedstone(int var1) {
-		super(var1);
+	public ItemRedstone(int itemID) {
+		super(itemID);
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 == 0) {
-			--var5;
-		}
-
-		if(var7 == 1) {
-			++var5;
-		}
-
-		if(var7 == 2) {
-			--var6;
-		}
-
-		if(var7 == 3) {
-			++var6;
-		}
-
-		if(var7 == 4) {
-			--var4;
-		}
-
-		if(var7 == 5) {
-			++var4;
-		}
-
-		if(var3.getBlockId(var4, var5, var6) != 0) {
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(side == 0) {
+			--y;
+		}
+
+		if(side == 1) {
+			++y;
+		}
+
+		if(side == 2) {
+			--z;
+		}
+
+		if(side == 3) {
+			++z;
+		}
+
+		if(side == 4) {
+			--x;
+		}
+
+		if(side == 5) {
+			++x;
+		}
+
+		if(world.getBlockId(x, y, z) != 0) {
 			return false;
 		} else {
-			if(Block.redstoneWire.canPlaceBlockAt(var3, var4, var5, var6)) {
-				--var1.stackSize;
-				var3.setBlockWithNotify(var4, var5, var6, Block.redstoneWire.blockID);
+			if(Block.redstoneWire.canPlaceBlockAt(world, x, y, z)) {
+				--stack.stackSize;
+				world.setBlockWithNotify(x, y, z, Block.redstoneWire.blockID);
 			}
 
 			return true;
--- /dev/null
+++ net/minecraft/src/BlockGlowing.java
@@ -1,0 +1,91 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockGlowing extends Block {
+	int renderMode = 1;
+
+	public BlockGlowing(int integer1, int integer2, int integer3) {
+		super(integer1, integer2, Material.plants);
+		this.setTickOnLoad(true);
+		this.renderMode = integer3;
+	}
+
+	public BlockGlowing(int id, int blockIndex, Material material) {
+		super(id, blockIndex, material);
+		this.setTickOnLoad(true);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		return null;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return this.renderMode;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return true;
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		super.updateTick(world, x, y, z, random);
+		if(world.getBlockMetadata(x, y, z) == 0) {
+			this.onBlockAdded(world, x, y, z);
+		}
+
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(this.h(world, x, y, z)) {
+			int i6 = world.getBlockMetadata(x, y, z);
+			boolean z7 = false;
+			if(!world.isBlockNormalCube(x - 1, y, z) && i6 == 1) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x + 1, y, z) && i6 == 2) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z - 1) && i6 == 3) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z + 1) && i6 == 4) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y - 1, z) && i6 == 5) {
+				z7 = true;
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+				world.setBlockWithNotify(x, y, z, 0);
+			}
+		}
+
+	}
+
+	private boolean h(World vg, int integer2, int integer3, int integer4) {
+		if(!this.canPlaceBlockAt(vg, integer2, integer3, integer4)) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+	}
+}
--- /dev/null
+++ net/minecraft/src/ShapelessCraftingRecipe.java
@@ -1,0 +1,42 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+
+public class ShapelessCraftingRecipe extends CraftingRecipe {
+	public ShapelessCraftingRecipe(int width, int height, int[] ingredientMap, ItemStack resultStack) {
+		super(width, height, ingredientMap, resultStack);
+	}
+
+	public boolean matches(int[] arr) {
+		ArrayList arrayList2 = new ArrayList();
+		int[] i3 = this.ingredientMap;
+		int i4 = i3.length;
+
+		int i5;
+		int i6;
+		for(i5 = 0; i5 < i4; ++i5) {
+			i6 = i3[i5];
+			if(i6 != -1) {
+				arrayList2.add(Integer.valueOf(i6));
+			}
+		}
+
+		i3 = arr;
+		i4 = arr.length;
+
+		for(i5 = 0; i5 < i4; ++i5) {
+			i6 = i3[i5];
+			if(i6 != -1) {
+				if(arrayList2.size() == 0) {
+					return false;
+				}
+
+				if(arrayList2.contains(Integer.valueOf(i6))) {
+					arrayList2.remove(Integer.valueOf(i6));
+				}
+			}
+		}
+
+		return arrayList2.size() == 0;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EssenceTransformerInventoryCB.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+public class EssenceTransformerInventoryCB extends InventoryCB {
+	public InventoryEssenceTransformer craftMatrix = new InventoryEssenceTransformer(this, 3, 3);
+	public EssenceTransformResult craftResult = new EssenceTransformResult();
+	public int currentEssenceVal = 0;
+
+	public void a(IInventory cz) {
+		this.currentEssenceVal = 0;
+
+		for(int i2 = 0; i2 < 3; ++i2) {
+			for(int i3 = 0; i3 < 3; ++i3) {
+				ItemStack itemStack4 = this.craftMatrix.getStackInSlot(i2 + i3 * 3);
+				if(itemStack4 != null) {
+					this.currentEssenceVal += itemStack4.getEssenceValue() * itemStack4.stackSize;
+				}
+			}
+		}
+
+	}
+
+	public void onCraftGuiClosed(EntityPlayer gb) {
+		InventoryPlayer inventoryPlayer2 = gb.inventory;
+		if(inventoryPlayer2.draggedItemStack != null) {
+			gb.dropPlayerItem(inventoryPlayer2.draggedItemStack);
+		}
+
+		for(int i3 = 0; i3 < 9; ++i3) {
+			ItemStack itemStack4 = this.craftMatrix.getStackInSlot(i3);
+			if(itemStack4 != null) {
+				gb.dropPlayerItem(itemStack4);
+			}
+		}
+
+	}
+}
--- net/minecraft/src/ItemStack.java
+++ net/minecraft/src/ItemStack.java
@@ -6,92 +6,129 @@
 	public int itemID;
 	public int itemDmg;
 
-	public ItemStack(Block var1) {
-		this((Block)var1, 1);
-	}
-
-	public ItemStack(Block var1, int var2) {
-		this(var1.blockID, var2);
-	}
-
-	public ItemStack(Item var1) {
-		this((Item)var1, 1);
-	}
-
-	public ItemStack(Item var1, int var2) {
-		this(var1.shiftedIndex, var2);
-	}
-
-	public ItemStack(int var1) {
-		this(var1, 1);
-	}
-
-	public ItemStack(int var1, int var2) {
-		this.stackSize = 0;
-		this.itemID = var1;
-		this.stackSize = var2;
-	}
-
-	public ItemStack(int var1, int var2, int var3) {
-		this.stackSize = 0;
-		this.itemID = var1;
-		this.stackSize = var2;
-		this.itemDmg = var3;
-	}
-
-	public ItemStack(NBTTagCompound var1) {
-		this.stackSize = 0;
-		this.readFromNBT(var1);
-	}
-
-	public ItemStack splitStack(int var1) {
-		this.stackSize -= var1;
-		return new ItemStack(this.itemID, var1, this.itemDmg);
+	public void func_10812_1A6pzoPv1nkjqwR9gM0v7CU0l8Z064TFD4D4Cr06sgkHSnb2m8Rq0p8Ot8ke() {
+		if(this.itemID < 0) {
+			ExtLogger.i("##################");
+			ExtLogger.i("SEND A SCREENSHOT OF THIS TO CHAT:");
+			Ext1605Utils.FindOutWhatTheFuckIsMakingThisNotWork();
+			System.exit(3939);
+		}
+
+	}
+
+	public ItemStack(Block block) {
+		this((Block)block, 1);
+	}
+
+	public ItemStack(Block block, int stackSize) {
+		this(block.blockID, stackSize);
+	}
+
+	public ItemStack(Item item) {
+		this((Item)item, 1);
+	}
+
+	public ItemStack(Item item, int stackSize) {
+		this(item.shiftedIndex, stackSize);
+	}
+
+	public ItemStack(int itemID) {
+		this(itemID, 1);
+	}
+
+	public ItemStack(int itemID, int stackSize) {
+		this.stackSize = 0;
+		this.itemID = itemID;
+		this.stackSize = stackSize;
+		this.func_10812_1A6pzoPv1nkjqwR9gM0v7CU0l8Z064TFD4D4Cr06sgkHSnb2m8Rq0p8Ot8ke();
+	}
+
+	public ItemStack(int itemID, int stackSize, int itemDmg) {
+		this.stackSize = 0;
+		this.itemID = itemID;
+		this.stackSize = stackSize;
+		this.itemDmg = itemDmg;
+		this.func_10812_1A6pzoPv1nkjqwR9gM0v7CU0l8Z064TFD4D4Cr06sgkHSnb2m8Rq0p8Ot8ke();
+	}
+
+	public ItemStack(NBTTagCompound nbtCompound) {
+		this.stackSize = 0;
+		this.readFromNBT(nbtCompound);
+		this.func_10812_1A6pzoPv1nkjqwR9gM0v7CU0l8Z064TFD4D4Cr06sgkHSnb2m8Rq0p8Ot8ke();
+	}
+
+	public ItemStack(NBTTagCompound id, boolean boolean2) {
+		this.stackSize = 0;
+		this.func_10814_40m3ravc2GR8df70VK4wnGhY0290ChbYFQY8zdF1EKI25IV7eSrX00jgEf51(id, boolean2);
+		this.func_10812_1A6pzoPv1nkjqwR9gM0v7CU0l8Z064TFD4D4Cr06sgkHSnb2m8Rq0p8Ot8ke();
+	}
+
+	public ItemStack splitStack(int stackSize) {
+		this.stackSize -= stackSize;
+		return new ItemStack(this.itemID, stackSize, this.itemDmg);
 	}
 
 	public Item getItem() {
 		return Item.itemsList[this.itemID];
 	}
 
+	public int getEssenceValue() {
+		return this.itemID > 32767 ? Item.itemsList[this.itemID].essenceValue : Block.blocksList[this.itemID].essenceValue;
+	}
+
 	public int getIconIndex() {
 		return this.getItem().getIconIndex(this);
 	}
 
-	public boolean useItem(EntityPlayer var1, World var2, int var3, int var4, int var5, int var6) {
-		return this.getItem().onItemUse(this, var1, var2, var3, var4, var5, var6);
-	}
-
-	public float getStrVsBlock(Block var1) {
-		return this.getItem().getStrVsBlock(this, var1);
-	}
-
-	public ItemStack useItemRightClick(World var1, EntityPlayer var2) {
-		return this.getItem().onItemRightClick(this, var1, var2);
-	}
-
-	public NBTTagCompound writeToNBT(NBTTagCompound var1) {
-		var1.setShort("id", (short)this.itemID);
-		var1.setByte("Count", (byte)this.stackSize);
-		var1.setShort("Damage", (short)this.itemDmg);
-		return var1;
-	}
-
-	public void readFromNBT(NBTTagCompound var1) {
-		this.itemID = var1.getShort("id");
-		this.stackSize = var1.getByte("Count");
-		this.itemDmg = var1.getShort("Damage");
+	public boolean useItem(EntityPlayer entityPlayer, World worldObj, int x, int y, int z, int side) {
+		return this.getItem().onItemUse(this, entityPlayer, worldObj, x, y, z, side);
+	}
+
+	public float getStrVsBlock(Block block) {
+		return this.getItem().getStrVsBlock(this, block);
+	}
+
+	public ItemStack useItemRightClick(World worldObj, EntityPlayer entityPlayer) {
+		return this.getItem().onItemRightClick(this, worldObj, entityPlayer);
+	}
+
+	public NBTTagCompound writeToNBT(NBTTagCompound nbtCompound) {
+		nbtCompound.setShort("id", (short)this.itemID);
+		nbtCompound.setByte("NFORMAT", (byte)57);
+		nbtCompound.setInteger("Count", this.stackSize);
+		nbtCompound.setShort("Damage", (short)this.itemDmg);
+		return nbtCompound;
+	}
+
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		this.func_10814_40m3ravc2GR8df70VK4wnGhY0290ChbYFQY8zdF1EKI25IV7eSrX00jgEf51(nbttagcompound, nbttagcompound.hasKey("NFORMAT"));
+	}
+
+	public void func_10814_40m3ravc2GR8df70VK4wnGhY0290ChbYFQY8zdF1EKI25IV7eSrX00jgEf51(NBTTagCompound id, boolean boolean2) {
+		this.itemID = id.getShort("id") & 65535;
+		if(!boolean2 && this.itemID >= 256) {
+			this.itemID = this.itemID - 256 + 32767;
+		}
+
+		try {
+			this.stackSize = id.getInteger("Count");
+		} catch (ClassCastException classCastException4) {
+			this.stackSize = id.getByte("Count");
+		}
+
+		this.itemDmg = id.getShort("Damage");
 	}
 
 	public int getMaxStackSize() {
-		return this.getItem().getItemStackLimit();
+		return this.itemID == ExtBlocks.EssenceBlock.blockID ? 10000 : this.getItem().getItemStackLimit();
 	}
 
 	public int getMaxDamage() {
 		return Item.itemsList[this.itemID].getMaxDamage();
 	}
 
-	public void damageItem(int var1) {
-		this.itemDmg += var1;
+	public void damageItem(int damage) {
+		this.itemDmg += damage;
 		if(this.itemDmg > this.getMaxDamage()) {
 			--this.stackSize;
 			if(this.stackSize < 0) {
@@ -103,27 +140,27 @@
 
 	}
 
-	public void hitEntity(EntityLiving var1) {
-		Item.itemsList[this.itemID].hitEntity(this, var1);
-	}
-
-	public void onDestroyBlock(int var1, int var2, int var3, int var4) {
-		Item.itemsList[this.itemID].onBlockDestroyed(this, var1, var2, var3, var4);
-	}
-
-	public int getDamageVsEntity(Entity var1) {
-		return Item.itemsList[this.itemID].getDamageVsEntity(var1);
-	}
-
-	public boolean canHarvestBlock(Block var1) {
-		return Item.itemsList[this.itemID].canHarvestBlock(var1);
-	}
-
-	public void onItemDestroyedByUse(EntityPlayer var1) {
-	}
-
-	public void useItemOnEntity(EntityLiving var1) {
-		Item.itemsList[this.itemID].saddleEntity(this, var1);
+	public void hitEntity(EntityLiving entityLiving) {
+		Item.itemsList[this.itemID].hitEntity(this, entityLiving);
+	}
+
+	public void onDestroyBlock(int id, int x, int y, int z) {
+		Item.itemsList[this.itemID].onBlockDestroyed(this, id, x, y, z);
+	}
+
+	public int getDamageVsEntity(Entity entity) {
+		return Item.itemsList[this.itemID].getDamageVsEntity(entity);
+	}
+
+	public boolean canHarvestBlock(Block block) {
+		return Item.itemsList[this.itemID].canHarvestBlock(block);
+	}
+
+	public void onItemDestroyedByUse(EntityPlayer entityPlayer) {
+	}
+
+	public void useItemOnEntity(EntityLiving entityLiving) {
+		Item.itemsList[this.itemID].saddleEntity(this, entityLiving);
 	}
 
 	public ItemStack copy() {
--- net/minecraft/src/EntityChicken.java
+++ net/minecraft/src/EntityChicken.java
@@ -9,8 +9,8 @@
 	public float moveWings = 1.0F;
 	public int timeUntilNextEgg;
 
-	public EntityChicken(World var1) {
-		super(var1);
+	public EntityChicken(World world) {
+		super(world);
 		this.texture = "/mob/chicken.png";
 		this.setSize(0.3F, 0.4F);
 		this.health = 4;
@@ -48,15 +48,15 @@
 
 	}
 
-	protected void fall(float var1) {
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	protected void fall(float distance) {
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
 	}
 
 	protected String getLivingSound() {
--- net/minecraft/src/Entity.java
+++ net/minecraft/src/Entity.java
@@ -10,7 +10,7 @@
 	public boolean preventEntitySpawning = false;
 	public Entity riddenByEntity;
 	public Entity ridingEntity;
-	protected World worldObj;
+	public World worldObj;
 	public double prevPosX;
 	public double prevPosY;
 	public double prevPosZ;
@@ -47,7 +47,7 @@
 	public boolean noClip = false;
 	public float entityCollisionReduction = 0.0F;
 	public boolean unusedBool = false;
-	protected Random rand = new Random();
+	public Random rand = new Random();
 	public int ticksExisted = 0;
 	public int fireResistance = 1;
 	public int fire = 0;
@@ -67,13 +67,13 @@
 	public int serverPosY;
 	public int serverPosZ;
 
-	public Entity(World var1) {
-		this.worldObj = var1;
+	public Entity(World world) {
+		this.worldObj = world;
 		this.setPosition(0.0D, 0.0D, 0.0D);
 	}
 
-	public boolean equals(Object var1) {
-		return var1 instanceof Entity ? ((Entity)var1).entityID == this.entityID : false;
+	public boolean equals(Object object) {
+		return object instanceof Entity ? ((Entity)object).entityID == this.entityID : false;
 	}
 
 	public int hashCode() {
@@ -82,48 +82,51 @@
 
 	protected void preparePlayerToSpawn() {
 		if(this.worldObj != null) {
-			while(this.posY > 0.0D) {
-				this.setPosition(this.posX, this.posY, this.posZ);
-				if(this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox).size() == 0) {
-					break;
+			while(true) {
+				if(this.posY > 0.0D) {
+					this.setPosition(this.posX, this.posY, this.posZ);
+					if(this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox).size() != 0) {
+						++this.posY;
+						continue;
+					}
 				}
 
-				++this.posY;
+				this.motionX = this.motionY = this.motionZ = 0.0D;
+				this.rotationPitch = 0.0F;
+				break;
 			}
-
-			this.motionX = this.motionY = this.motionZ = 0.0D;
-			this.rotationPitch = 0.0F;
 		}
+
 	}
 
 	public void setEntityDead() {
 		this.isDead = true;
 	}
 
-	protected void setSize(float var1, float var2) {
-		this.width = var1;
-		this.height = var2;
-	}
-
-	protected void setRotation(float var1, float var2) {
-		this.rotationYaw = var1;
-		this.rotationPitch = var2;
-	}
-
-	public void setPosition(double var1, double var3, double var5) {
-		this.posX = var1;
-		this.posY = var3;
-		this.posZ = var5;
-		float var7 = this.width / 2.0F;
-		float var8 = this.height;
-		this.boundingBox.setBounds(var1 - (double)var7, var3 - (double)this.yOffset + (double)this.ySize, var5 - (double)var7, var1 + (double)var7, var3 - (double)this.yOffset + (double)this.ySize + (double)var8, var5 + (double)var7);
-	}
-
-	public void setAngles(float var1, float var2) {
-		float var3 = this.rotationPitch;
-		float var4 = this.rotationYaw;
-		this.rotationYaw = (float)((double)this.rotationYaw + (double)var1 * 0.15D);
-		this.rotationPitch = (float)((double)this.rotationPitch - (double)var2 * 0.15D);
+	protected void setSize(float width, float height) {
+		this.width = width;
+		this.height = height;
+	}
+
+	protected void setRotation(float rotationYaw, float rotationPitch) {
+		this.rotationYaw = rotationYaw;
+		this.rotationPitch = rotationPitch;
+	}
+
+	public void setPosition(double posX, double posY, double posZ) {
+		this.posX = posX;
+		this.posY = posY;
+		this.posZ = posZ;
+		float f7 = this.width / 2.0F;
+		float f8 = this.height;
+		this.boundingBox.setBounds(posX - (double)f7, posY - (double)this.yOffset + (double)this.ySize, posZ - (double)f7, posX + (double)f7, posY - (double)this.yOffset + (double)this.ySize + (double)f8, posZ + (double)f7);
+	}
+
+	public void setAngles(float yaw, float pitch) {
+		float f3 = this.rotationPitch;
+		float f4 = this.rotationYaw;
+		this.rotationYaw = (float)((double)this.rotationYaw + (double)yaw * 0.15D);
+		this.rotationPitch = (float)((double)this.rotationPitch - (double)pitch * 0.15D);
 		if(this.rotationPitch < -90.0F) {
 			this.rotationPitch = -90.0F;
 		}
@@ -132,8 +135,8 @@
 			this.rotationPitch = 90.0F;
 		}
 
-		this.prevRotationPitch += this.rotationPitch - var3;
-		this.prevRotationYaw += this.rotationYaw - var4;
+		this.prevRotationPitch += this.rotationPitch - f3;
+		this.prevRotationYaw += this.rotationYaw - f4;
 	}
 
 	public void onUpdate() {
@@ -154,27 +157,27 @@
 		this.prevRotationYaw = this.rotationYaw;
 		if(this.handleWaterMovement()) {
 			if(!this.inWater && !this.firstUpdate) {
-				float var1 = MathHelper.sqrt_double(this.motionX * this.motionX * (double)0.2F + this.motionY * this.motionY + this.motionZ * this.motionZ * (double)0.2F) * 0.2F;
-				if(var1 > 1.0F) {
-					var1 = 1.0F;
-				}
-
-				this.worldObj.playSoundAtEntity(this, "random.splash", var1, 1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
-				float var2 = (float)MathHelper.floor_double(this.boundingBox.minY);
-
-				int var3;
-				float var4;
-				float var5;
-				for(var3 = 0; (float)var3 < 1.0F + this.width * 20.0F; ++var3) {
-					var4 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-					var5 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-					this.worldObj.spawnParticle("bubble", this.posX + (double)var4, (double)(var2 + 1.0F), this.posZ + (double)var5, this.motionX, this.motionY - (double)(this.rand.nextFloat() * 0.2F), this.motionZ);
-				}
-
-				for(var3 = 0; (float)var3 < 1.0F + this.width * 20.0F; ++var3) {
-					var4 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-					var5 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-					this.worldObj.spawnParticle("splash", this.posX + (double)var4, (double)(var2 + 1.0F), this.posZ + (double)var5, this.motionX, this.motionY, this.motionZ);
+				float f1 = MathHelper.sqrt_double(this.motionX * this.motionX * (double)0.2F + this.motionY * this.motionY + this.motionZ * this.motionZ * (double)0.2F) * 0.2F;
+				if(f1 > 1.0F) {
+					f1 = 1.0F;
+				}
+
+				this.worldObj.playSoundAtEntity(this, "random.splash", f1, 1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
+				float f2 = (float)MathHelper.floor_double(this.boundingBox.minY);
+
+				int i3;
+				float f4;
+				float f5;
+				for(i3 = 0; (float)i3 < 1.0F + this.width * 20.0F; ++i3) {
+					f4 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+					f5 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+					this.worldObj.spawnParticle("bubble", this.posX + (double)f4, (double)(f2 + 1.0F), this.posZ + (double)f5, this.motionX, this.motionY - (double)(this.rand.nextFloat() * 0.2F), this.motionZ);
+				}
+
+				for(i3 = 0; (float)i3 < 1.0F + this.width * 20.0F; ++i3) {
+					f4 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+					f5 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+					this.worldObj.spawnParticle("splash", this.posX + (double)f4, (double)(f2 + 1.0F), this.posZ + (double)f5, this.motionX, this.motionY, this.motionZ);
 				}
 			}
 
@@ -185,14 +188,7 @@
 			this.inWater = false;
 		}
 
-		if(this.fire > 0) {
-			if(this.fire % 20 == 0) {
-				this.attackEntityFrom((Entity)null, 1);
-			}
-
-			--this.fire;
-		}
-
+		this.fireDamage();
 		if(this.handleLavaMovement()) {
 			this.attackEntityFrom((Entity)null, 10);
 			this.fire = 600;
@@ -205,143 +201,158 @@
 		this.firstUpdate = false;
 	}
 
+	protected void fireDamage() {
+		if(this.fire > 0) {
+			if(this.shouldBeDamagedByFire() && this.fire % 20 == 0) {
+				this.attackEntityFrom((Entity)null, 1);
+			}
+
+			--this.fire;
+		}
+
+	}
+
+	protected boolean shouldBeDamagedByFire() {
+		return true;
+	}
+
 	protected void kill() {
 		this.setEntityDead();
 	}
 
-	public boolean isOffsetPositionInLiquid(double var1, double var3, double var5) {
-		AxisAlignedBB var7 = this.boundingBox.getOffsetBoundingBox(var1, var3, var5);
-		List var8 = this.worldObj.getCollidingBoundingBoxes(this, var7);
-		return var8.size() > 0 ? false : !this.worldObj.getIsAnyLiquid(var7);
+	public boolean isOffsetPositionInLiquid(double x, double y, double z) {
+		AxisAlignedBB axisAlignedBB7 = this.boundingBox.getOffsetBoundingBox(x, y, z);
+		List list8 = this.worldObj.getCollidingBoundingBoxes(this, axisAlignedBB7);
+		return list8.size() > 0 ? false : !this.worldObj.getIsAnyLiquid(axisAlignedBB7);
 	}
 
-	public void moveEntity(double var1, double var3, double var5) {
+	public void moveEntity(double x, double y, double z) {
 		if(this.noClip) {
-			this.boundingBox.offset(var1, var3, var5);
+			this.boundingBox.offset(x, y, z);
 			this.posX = (this.boundingBox.minX + this.boundingBox.maxX) / 2.0D;
 			this.posY = this.boundingBox.minY + (double)this.yOffset - (double)this.ySize;
 			this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0D;
 		} else {
-			double var7 = this.posX;
-			double var9 = this.posZ;
-			double var11 = var1;
-			double var13 = var3;
-			double var15 = var5;
-			AxisAlignedBB var17 = this.boundingBox.copy();
-			boolean var18 = this.onGround && this.isSneaking();
-			if(var18) {
-				double var19;
-				for(var19 = 0.05D; var1 != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(var1, -1.0D, 0.0D)).size() == 0; var11 = var1) {
-					if(var1 < var19 && var1 >= -var19) {
-						var1 = 0.0D;
-					} else if(var1 > 0.0D) {
-						var1 -= var19;
-					} else {
-						var1 += var19;
-					}
-				}
-
-				for(; var5 != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(0.0D, -1.0D, var5)).size() == 0; var15 = var5) {
-					if(var5 < var19 && var5 >= -var19) {
-						var5 = 0.0D;
-					} else if(var5 > 0.0D) {
-						var5 -= var19;
-					} else {
-						var5 += var19;
-					}
-				}
-			}
-
-			List var35 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(var1, var3, var5));
-
-			for(int var20 = 0; var20 < var35.size(); ++var20) {
-				var3 = ((AxisAlignedBB)var35.get(var20)).calculateYOffset(this.boundingBox, var3);
-			}
-
-			this.boundingBox.offset(0.0D, var3, 0.0D);
-			if(!this.surfaceCollision && var13 != var3) {
-				var5 = 0.0D;
-				var3 = var5;
-				var1 = var5;
-			}
-
-			boolean var36 = this.onGround || var13 != var3 && var13 < 0.0D;
-
-			int var21;
-			for(var21 = 0; var21 < var35.size(); ++var21) {
-				var1 = ((AxisAlignedBB)var35.get(var21)).calculateXOffset(this.boundingBox, var1);
-			}
-
-			this.boundingBox.offset(var1, 0.0D, 0.0D);
-			if(!this.surfaceCollision && var11 != var1) {
-				var5 = 0.0D;
-				var3 = var5;
-				var1 = var5;
-			}
-
-			for(var21 = 0; var21 < var35.size(); ++var21) {
-				var5 = ((AxisAlignedBB)var35.get(var21)).calculateZOffset(this.boundingBox, var5);
-			}
-
-			this.boundingBox.offset(0.0D, 0.0D, var5);
-			if(!this.surfaceCollision && var15 != var5) {
-				var5 = 0.0D;
-				var3 = var5;
-				var1 = var5;
-			}
-
-			double var23;
-			int var28;
-			double var37;
-			if(this.stepHeight > 0.0F && var36 && this.ySize < 0.05F && (var11 != var1 || var15 != var5)) {
-				var37 = var1;
-				var23 = var3;
-				double var25 = var5;
-				var1 = var11;
-				var3 = (double)this.stepHeight;
-				var5 = var15;
-				AxisAlignedBB var27 = this.boundingBox.copy();
-				this.boundingBox.setBB(var17);
-				var35 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(var11, var3, var15));
-
-				for(var28 = 0; var28 < var35.size(); ++var28) {
-					var3 = ((AxisAlignedBB)var35.get(var28)).calculateYOffset(this.boundingBox, var3);
-				}
-
-				this.boundingBox.offset(0.0D, var3, 0.0D);
-				if(!this.surfaceCollision && var13 != var3) {
-					var5 = 0.0D;
-					var3 = var5;
-					var1 = var5;
-				}
-
-				for(var28 = 0; var28 < var35.size(); ++var28) {
-					var1 = ((AxisAlignedBB)var35.get(var28)).calculateXOffset(this.boundingBox, var1);
-				}
-
-				this.boundingBox.offset(var1, 0.0D, 0.0D);
-				if(!this.surfaceCollision && var11 != var1) {
-					var5 = 0.0D;
-					var3 = var5;
-					var1 = var5;
-				}
-
-				for(var28 = 0; var28 < var35.size(); ++var28) {
-					var5 = ((AxisAlignedBB)var35.get(var28)).calculateZOffset(this.boundingBox, var5);
-				}
-
-				this.boundingBox.offset(0.0D, 0.0D, var5);
-				if(!this.surfaceCollision && var15 != var5) {
-					var5 = 0.0D;
-					var3 = var5;
-					var1 = var5;
-				}
-
-				if(var37 * var37 + var25 * var25 >= var1 * var1 + var5 * var5) {
-					var1 = var37;
-					var3 = var23;
-					var5 = var25;
-					this.boundingBox.setBB(var27);
+			double d7 = this.posX;
+			double d9 = this.posZ;
+			double d11 = x;
+			double d13 = y;
+			double d15 = z;
+			AxisAlignedBB axisAlignedBB17 = this.boundingBox.copy();
+			boolean z18 = this.onGround && this.isSneaking();
+			if(z18) {
+				double d19;
+				for(d19 = 0.05D; x != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(x, -1.0D, 0.0D)).size() == 0; d11 = x) {
+					if(x < d19 && x >= -d19) {
+						x = 0.0D;
+					} else if(x > 0.0D) {
+						x -= d19;
+					} else {
+						x += d19;
+					}
+				}
+
+				for(; z != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(0.0D, -1.0D, z)).size() == 0; d15 = z) {
+					if(z < d19 && z >= -d19) {
+						z = 0.0D;
+					} else if(z > 0.0D) {
+						z -= d19;
+					} else {
+						z += d19;
+					}
+				}
+			}
+
+			List list36 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(x, y, z));
+
+			for(int i20 = 0; i20 < list36.size(); ++i20) {
+				y = ((AxisAlignedBB)list36.get(i20)).calculateYOffset(this.boundingBox, y);
+			}
+
+			this.boundingBox.offset(0.0D, y, 0.0D);
+			if(!this.surfaceCollision && d13 != y) {
+				z = 0.0D;
+				y = 0.0D;
+				x = 0.0D;
+			}
+
+			boolean z37 = this.onGround || d13 != y && d13 < 0.0D;
+
+			int i21;
+			for(i21 = 0; i21 < list36.size(); ++i21) {
+				x = ((AxisAlignedBB)list36.get(i21)).calculateXOffset(this.boundingBox, x);
+			}
+
+			this.boundingBox.offset(x, 0.0D, 0.0D);
+			if(!this.surfaceCollision && d11 != x) {
+				z = 0.0D;
+				y = 0.0D;
+				x = 0.0D;
+			}
+
+			for(i21 = 0; i21 < list36.size(); ++i21) {
+				z = ((AxisAlignedBB)list36.get(i21)).calculateZOffset(this.boundingBox, z);
+			}
+
+			this.boundingBox.offset(0.0D, 0.0D, z);
+			if(!this.surfaceCollision && d15 != z) {
+				z = 0.0D;
+				y = 0.0D;
+				x = 0.0D;
+			}
+
+			double d22;
+			int i24;
+			double d25;
+			if(this.stepHeight > 0.0F && z37 && this.ySize < 0.05F && (d11 != x || d15 != z)) {
+				d25 = x;
+				d22 = y;
+				double d27 = z;
+				x = d11;
+				y = (double)this.stepHeight;
+				z = d15;
+				AxisAlignedBB axisAlignedBB29 = this.boundingBox.copy();
+				this.boundingBox.setBB(axisAlignedBB17);
+				list36 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(d11, y, d15));
+
+				for(i24 = 0; i24 < list36.size(); ++i24) {
+					y = ((AxisAlignedBB)list36.get(i24)).calculateYOffset(this.boundingBox, y);
+				}
+
+				this.boundingBox.offset(0.0D, y, 0.0D);
+				if(!this.surfaceCollision && d13 != y) {
+					z = 0.0D;
+					y = 0.0D;
+					x = 0.0D;
+				}
+
+				for(i24 = 0; i24 < list36.size(); ++i24) {
+					x = ((AxisAlignedBB)list36.get(i24)).calculateXOffset(this.boundingBox, x);
+				}
+
+				this.boundingBox.offset(x, 0.0D, 0.0D);
+				if(!this.surfaceCollision && d11 != x) {
+					z = 0.0D;
+					y = 0.0D;
+					x = 0.0D;
+				}
+
+				for(i24 = 0; i24 < list36.size(); ++i24) {
+					z = ((AxisAlignedBB)list36.get(i24)).calculateZOffset(this.boundingBox, z);
+				}
+
+				this.boundingBox.offset(0.0D, 0.0D, z);
+				if(!this.surfaceCollision && d15 != z) {
+					z = 0.0D;
+					y = 0.0D;
+					x = 0.0D;
+				}
+
+				if(d25 * d25 + d27 * d27 >= x * x + z * z) {
+					x = d25;
+					y = d22;
+					z = d27;
+					this.boundingBox.setBB(axisAlignedBB29);
 				} else {
 					this.ySize = (float)((double)this.ySize + 0.5D);
 				}
@@ -350,79 +361,81 @@
 			this.posX = (this.boundingBox.minX + this.boundingBox.maxX) / 2.0D;
 			this.posY = this.boundingBox.minY + (double)this.yOffset - (double)this.ySize;
 			this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0D;
-			this.isCollidedHorizontally = var11 != var1 || var15 != var5;
-			this.isCollidedVertically = var13 != var3;
-			this.onGround = var13 != var3 && var13 < 0.0D;
+			this.isCollidedHorizontally = d11 != x || d15 != z;
+			this.isCollidedVertically = d13 != y;
+			this.onGround = d13 != y && d13 < 0.0D;
 			this.isCollided = this.isCollidedHorizontally || this.isCollidedVertically;
 			if(this.onGround) {
 				if(this.fallDistance > 0.0F) {
 					this.fall(this.fallDistance);
 					this.fallDistance = 0.0F;
 				}
-			} else if(var3 < 0.0D) {
-				this.fallDistance = (float)((double)this.fallDistance - var3);
+			} else if(y < 0.0D) {
+				this.fallDistance = (float)((double)this.fallDistance - y);
 			}
 
-			if(var11 != var1) {
+			if(d11 != x) {
 				this.motionX = 0.0D;
 			}
 
-			if(var13 != var3) {
+			if(d13 != y) {
 				this.motionY = 0.0D;
 			}
 
-			if(var15 != var5) {
+			if(d15 != z) {
 				this.motionZ = 0.0D;
 			}
 
-			var37 = this.posX - var7;
-			var23 = this.posZ - var9;
-			this.distanceWalkedModified = (float)((double)this.distanceWalkedModified + (double)MathHelper.sqrt_double(var37 * var37 + var23 * var23) * 0.6D);
-			int var26;
-			int var38;
-			int var40;
-			if(this.canTriggerWalking && !var18) {
-				var38 = MathHelper.floor_double(this.posX);
-				var26 = MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset);
-				var40 = MathHelper.floor_double(this.posZ);
-				var28 = this.worldObj.getBlockId(var38, var26, var40);
-				if(this.distanceWalkedModified > (float)this.nextStepDistance && var28 > 0) {
+			d25 = this.posX - d7;
+			d22 = this.posZ - d9;
+			this.distanceWalkedModified = (float)((double)this.distanceWalkedModified + (double)MathHelper.sqrt_double(d25 * d25 + d22 * d22) * 0.6D);
+			int i28;
+			int i38;
+			int i39;
+			if(this.canTriggerWalking && !z18) {
+				i28 = MathHelper.floor_double(this.posX);
+				i38 = MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset);
+				i39 = MathHelper.floor_double(this.posZ);
+				i24 = this.worldObj.getBlockId(i28, i38, i39);
+				if(this.distanceWalkedModified > (float)this.nextStepDistance) {
 					++this.nextStepDistance;
-					StepSound var29 = Block.blocksList[var28].stepSound;
-					if(this.worldObj.getBlockId(var38, var26 + 1, var40) == Block.snow.blockID) {
-						var29 = Block.snow.stepSound;
-						this.worldObj.playSoundAtEntity(this, var29.getStepSound(), var29.getVolume() * 0.15F, var29.getPitch());
-					} else if(!Block.blocksList[var28].material.getIsLiquid()) {
-						this.worldObj.playSoundAtEntity(this, var29.getStepSound(), var29.getVolume() * 0.15F, var29.getPitch());
+					if(i24 > 0) {
+						StepSound stepSound30 = Block.blocksList[i24].stepSound;
+						if(this.worldObj.getBlockId(i28, i38 + 1, i39) == Block.snow.blockID) {
+							stepSound30 = Block.snow.stepSound;
+							this.worldObj.playSoundAtEntity(this, stepSound30.getStepSound(), stepSound30.getVolume() * 0.15F, stepSound30.getPitch());
+						} else if(!Block.blocksList[i24].material.getIsLiquid()) {
+							this.worldObj.playSoundAtEntity(this, stepSound30.getStepSound(), stepSound30.getVolume() * 0.15F, stepSound30.getPitch());
+						}
+
+						Block.blocksList[i24].onEntityWalking(this.worldObj, i28, i38, i39, this);
 					}
-
-					Block.blocksList[var28].onEntityWalking(this.worldObj, var38, var26, var40, this);
 				}
 			}
 
-			var38 = MathHelper.floor_double(this.boundingBox.minX);
-			var26 = MathHelper.floor_double(this.boundingBox.minY);
-			var40 = MathHelper.floor_double(this.boundingBox.minZ);
-			var28 = MathHelper.floor_double(this.boundingBox.maxX);
-			int var41 = MathHelper.floor_double(this.boundingBox.maxY);
-			int var30 = MathHelper.floor_double(this.boundingBox.maxZ);
+			i28 = MathHelper.floor_double(this.boundingBox.minX);
+			i38 = MathHelper.floor_double(this.boundingBox.minY);
+			i39 = MathHelper.floor_double(this.boundingBox.minZ);
+			i24 = MathHelper.floor_double(this.boundingBox.maxX);
+			int i40 = MathHelper.floor_double(this.boundingBox.maxY);
+			int i31 = MathHelper.floor_double(this.boundingBox.maxZ);
 
-			for(int var31 = var38; var31 <= var28; ++var31) {
-				for(int var32 = var26; var32 <= var41; ++var32) {
-					for(int var33 = var40; var33 <= var30; ++var33) {
-						int var34 = this.worldObj.getBlockId(var31, var32, var33);
-						if(var34 > 0) {
-							Block.blocksList[var34].onEntityCollidedWithBlock(this.worldObj, var31, var32, var33, this);
+			for(int i32 = i28; i32 <= i24; ++i32) {
+				for(int i33 = i38; i33 <= i40; ++i33) {
+					for(int i34 = i39; i34 <= i31; ++i34) {
+						int i35 = this.worldObj.getBlockId(i32, i33, i34);
+						if(i35 > 0) {
+							Block.blocksList[i35].onEntityCollidedWithBlock(this.worldObj, i32, i33, i34, this);
 						}
 					}
 				}
 			}
 
 			this.ySize *= 0.4F;
-			boolean var39 = this.handleWaterMovement();
+			boolean z41 = this.handleWaterMovement();
 			if(this.worldObj.isBoundingBoxBurning(this.boundingBox)) {
 				this.dealFireDamage(1);
-				if(!var39) {
+				if(!z41) {
 					++this.fire;
 					if(this.fire == 0) {
 						this.fire = 300;
@@ -432,12 +445,12 @@
 				this.fire = -this.fireResistance;
 			}
 
-			if(var39 && this.fire > 0) {
+			if(z41 && this.fire > 0) {
 				this.worldObj.playSoundAtEntity(this, "random.fizz", 0.7F, 1.6F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
 				this.fire = -this.fireResistance;
 			}
-
 		}
+
 	}
 
 	public boolean isSneaking() {
@@ -448,27 +461,30 @@
 		return null;
 	}
 
-	protected void dealFireDamage(int var1) {
-		this.attackEntityFrom((Entity)null, var1);
+	protected void dealFireDamage(int fireDamage) {
+		if(this.shouldBeDamagedByFire()) {
+			this.attackEntityFrom((Entity)null, fireDamage);
+		}
+
 	}
 
-	protected void fall(float var1) {
+	protected void fall(float distance) {
 	}
 
 	public boolean handleWaterMovement() {
-		return this.worldObj.handleMaterialAcceleration(this.boundingBox.expand(0.0D, (double)-0.4F, 0.0D), Material.water, this);
+		return this.worldObj.handleMaterialAcceleration(this.boundingBox.expand(0.0D, -0.4000000059604645D, 0.0D), Material.water, this);
 	}
 
-	public boolean isInsideOfMaterial(Material var1) {
-		double var2 = this.posY + (double)this.getEyeHeight();
-		int var4 = MathHelper.floor_double(this.posX);
-		int var5 = MathHelper.floor_float((float)MathHelper.floor_double(var2));
-		int var6 = MathHelper.floor_double(this.posZ);
-		int var7 = this.worldObj.getBlockId(var4, var5, var6);
-		if(var7 != 0 && Block.blocksList[var7].material == var1) {
-			float var8 = BlockFluid.getFluidHeightPercent(this.worldObj.getBlockMetadata(var4, var5, var6)) - 1.0F / 9.0F;
-			float var9 = (float)(var5 + 1) - var8;
-			return var2 < (double)var9;
+	public boolean isInsideOfMaterial(Material material) {
+		double d2 = this.posY + (double)this.getEyeHeight();
+		int i4 = MathHelper.floor_double(this.posX);
+		int i5 = MathHelper.floor_float((float)MathHelper.floor_double(d2));
+		int i6 = MathHelper.floor_double(this.posZ);
+		int i7 = this.worldObj.getBlockId(i4, i5, i6);
+		if(i7 != 0 && Block.blocksList[i7].material == material) {
+			float f8 = BlockFluid.getFluidHeightPercent(this.worldObj.getBlockMetadata(i4, i5, i6)) - 0.11111111F;
+			float f9 = (float)(i5 + 1) - f8;
+			return d2 < (double)f9;
 		} else {
 			return false;
 		}
@@ -479,131 +495,137 @@
 	}
 
 	public boolean handleLavaMovement() {
-		return this.worldObj.isMaterialInBB(this.boundingBox.expand(0.0D, (double)-0.4F, 0.0D), Material.lava);
-	}
-
-	public void moveFlying(float var1, float var2, float var3) {
-		float var4 = MathHelper.sqrt_float(var1 * var1 + var2 * var2);
-		if(var4 >= 0.01F) {
-			if(var4 < 1.0F) {
-				var4 = 1.0F;
+		return this.worldObj.isMaterialInBB(this.boundingBox.expand(0.0D, -0.4000000059604645D, 0.0D), Material.lava);
+	}
+
+	public void moveFlying(float moveX, float moveY, float moveZ) {
+		this.moveFlying(moveX, moveY, moveZ, 0.0F);
+	}
+
+	public void moveFlying(float float1, float float2, float float3, float float4) {
+		float f5 = MathHelper.sqrt_float(float1 * float1 + float2 * float2);
+		if(f5 >= 0.01F) {
+			if(f5 < 1.0F) {
+				f5 = 1.0F;
 			}
 
-			var4 = var3 / var4;
-			var1 *= var4;
-			var2 *= var4;
-			float var5 = MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F);
-			float var6 = MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F);
-			this.motionX += (double)(var1 * var6 - var2 * var5);
-			this.motionZ += (double)(var2 * var6 + var1 * var5);
+			f5 = float3 / f5;
+			float1 *= f5;
+			float2 *= f5;
+			float f6 = MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F);
+			float f7 = MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F);
+			this.motionX += (double)(float1 * f7 - float2 * f6);
+			this.motionZ += (double)(float2 * f7 + float1 * f6);
+			this.motionY += (double)float4;
 		}
-	}
-
-	public float getBrightness(float var1) {
-		int var2 = MathHelper.floor_double(this.posX);
-		double var3 = (this.boundingBox.maxY - this.boundingBox.minY) * 0.66D;
-		int var5 = MathHelper.floor_double(this.posY - (double)this.yOffset + var3);
-		int var6 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.getBrightness(var2, var5, var6);
-	}
-
-	public void setWorld(World var1) {
-		this.worldObj = var1;
-	}
-
-	public void setPositionAndRotation(double var1, double var3, double var5, float var7, float var8) {
-		this.prevPosX = this.posX = var1;
-		this.prevPosY = this.posY = var3;
-		this.prevPosZ = this.posZ = var5;
-		this.rotationYaw = var7;
-		this.rotationPitch = var8;
+
+	}
+
+	public float getBrightness(float unused) {
+		int i2 = MathHelper.floor_double(this.posX);
+		double d3 = (this.boundingBox.maxY - this.boundingBox.minY) * 0.66D;
+		int i5 = MathHelper.floor_double(this.posY - (double)this.yOffset + d3);
+		int i6 = MathHelper.floor_double(this.posZ);
+		return this.worldObj.getBrightness(i2, i5, i6);
+	}
+
+	public void setWorld(World world) {
+		this.worldObj = world;
+	}
+
+	public void setPositionAndRotation(double x, double y, double z, float yaw, float pitch) {
+		this.prevPosX = this.posX = x;
+		this.prevPosY = this.posY = y;
+		this.prevPosZ = this.posZ = z;
+		this.rotationYaw = yaw;
+		this.rotationPitch = pitch;
 		this.ySize = 0.0F;
-		double var9 = (double)(this.prevRotationYaw - var7);
-		if(var9 < -180.0D) {
+		double d9 = (double)(this.prevRotationYaw - yaw);
+		if(d9 < -180.0D) {
 			this.prevRotationYaw += 360.0F;
 		}
 
-		if(var9 >= 180.0D) {
+		if(d9 >= 180.0D) {
 			this.prevRotationYaw -= 360.0F;
 		}
 
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
-	public void setLocationAndAngles(double var1, double var3, double var5, float var7, float var8) {
-		this.prevPosX = this.posX = var1;
-		this.prevPosY = this.posY = var3 + (double)this.yOffset;
-		this.prevPosZ = this.posZ = var5;
-		this.rotationYaw = var7;
-		this.rotationPitch = var8;
+	public void setLocationAndAngles(double x, double y, double z, float yaw, float pitch) {
+		this.prevPosX = this.posX = x;
+		this.prevPosY = this.posY = y + (double)this.yOffset;
+		this.prevPosZ = this.posZ = z;
+		this.rotationYaw = yaw;
+		this.rotationPitch = pitch;
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
-	public float getDistanceToEntity(Entity var1) {
-		float var2 = (float)(this.posX - var1.posX);
-		float var3 = (float)(this.posY - var1.posY);
-		float var4 = (float)(this.posZ - var1.posZ);
-		return MathHelper.sqrt_float(var2 * var2 + var3 * var3 + var4 * var4);
-	}
-
-	public double getDistanceSq(double var1, double var3, double var5) {
-		double var7 = this.posX - var1;
-		double var9 = this.posY - var3;
-		double var11 = this.posZ - var5;
-		return var7 * var7 + var9 * var9 + var11 * var11;
-	}
-
-	public double getDistance(double var1, double var3, double var5) {
-		double var7 = this.posX - var1;
-		double var9 = this.posY - var3;
-		double var11 = this.posZ - var5;
-		return (double)MathHelper.sqrt_double(var7 * var7 + var9 * var9 + var11 * var11);
-	}
-
-	public double getDistanceSqToEntity(Entity var1) {
-		double var2 = this.posX - var1.posX;
-		double var4 = this.posY - var1.posY;
-		double var6 = this.posZ - var1.posZ;
-		return var2 * var2 + var4 * var4 + var6 * var6;
-	}
-
-	public void onCollideWithPlayer(EntityPlayer var1) {
-	}
-
-	public void applyEntityCollision(Entity var1) {
-		if(var1.riddenByEntity != this && var1.ridingEntity != this) {
-			double var2 = var1.posX - this.posX;
-			double var4 = var1.posZ - this.posZ;
-			double var6 = MathHelper.abs_max(var2, var4);
-			if(var6 >= (double)0.01F) {
-				var6 = (double)MathHelper.sqrt_double(var6);
-				var2 /= var6;
-				var4 /= var6;
-				double var8 = 1.0D / var6;
-				if(var8 > 1.0D) {
-					var8 = 1.0D;
+	public float getDistanceToEntity(Entity entity) {
+		float f2 = (float)(this.posX - entity.posX);
+		float f3 = (float)(this.posY - entity.posY);
+		float f4 = (float)(this.posZ - entity.posZ);
+		return MathHelper.sqrt_float(f2 * f2 + f3 * f3 + f4 * f4);
+	}
+
+	public double getDistanceSq(double x, double y, double z) {
+		double d7 = this.posX - x;
+		double d9 = this.posY - y;
+		double d11 = this.posZ - z;
+		return d7 * d7 + d9 * d9 + d11 * d11;
+	}
+
+	public double getDistance(double x, double y, double z) {
+		double d7 = this.posX - x;
+		double d9 = this.posY - y;
+		double d11 = this.posZ - z;
+		return (double)MathHelper.sqrt_double(d7 * d7 + d9 * d9 + d11 * d11);
+	}
+
+	public double getDistanceSqToEntity(Entity entity) {
+		double d2 = this.posX - entity.posX;
+		double d4 = this.posY - entity.posY;
+		double d6 = this.posZ - entity.posZ;
+		return d2 * d2 + d4 * d4 + d6 * d6;
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+	}
+
+	public void applyEntityCollision(Entity entity) {
+		if(entity.riddenByEntity != this && entity.ridingEntity != this) {
+			double d2 = entity.posX - this.posX;
+			double d4 = entity.posZ - this.posZ;
+			double d6 = MathHelper.abs_max(d2, d4);
+			if(d6 >= (double)0.01F) {
+				d6 = (double)MathHelper.sqrt_double(d6);
+				d2 /= d6;
+				d4 /= d6;
+				double d8 = 1.0D / d6;
+				if(d8 > 1.0D) {
+					d8 = 1.0D;
 				}
 
-				var2 *= var8;
-				var4 *= var8;
-				var2 *= (double)0.05F;
-				var4 *= (double)0.05F;
-				var2 *= (double)(1.0F - this.entityCollisionReduction);
-				var4 *= (double)(1.0F - this.entityCollisionReduction);
-				this.addVelocity(-var2, 0.0D, -var4);
-				var1.addVelocity(var2, 0.0D, var4);
+				d2 *= d8;
+				d4 *= d8;
+				d2 *= (double)0.05F;
+				d4 *= (double)0.05F;
+				d2 *= (double)(1.0F - this.entityCollisionReduction);
+				d4 *= (double)(1.0F - this.entityCollisionReduction);
+				this.addVelocity(-d2, 0.0D, -d4);
+				entity.addVelocity(d2, 0.0D, d4);
 			}
-
 		}
-	}
-
-	public void addVelocity(double var1, double var3, double var5) {
-		this.motionX += var1;
-		this.motionY += var3;
-		this.motionZ += var5;
-	}
-
-	public boolean attackEntityFrom(Entity var1, int var2) {
+
+	}
+
+	public void addVelocity(double motionX, double motionY, double motionZ) {
+		this.motionX += motionX;
+		this.motionY += motionY;
+		this.motionZ += motionZ;
+	}
+
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		return false;
 	}
 
@@ -615,117 +637,117 @@
 		return false;
 	}
 
-	public void addToPlayerScore(Entity var1, int var2) {
-	}
-
-	public boolean isInRangeToRenderVec3D(Vec3D var1) {
-		double var2 = this.posX - var1.xCoord;
-		double var4 = this.posY - var1.yCoord;
-		double var6 = this.posZ - var1.zCoord;
-		double var8 = var2 * var2 + var4 * var4 + var6 * var6;
-		return this.isInRangeToRenderDist(var8);
-	}
-
-	public boolean isInRangeToRenderDist(double var1) {
-		double var3 = this.boundingBox.getAverageEdgeLength();
-		var3 *= 64.0D * this.renderDistanceWeight;
-		return var1 < var3 * var3;
+	public void addToPlayerScore(Entity entity, int score) {
+	}
+
+	public boolean isInRangeToRenderVec3D(Vec3D vector) {
+		double d2 = this.posX - vector.xCoord;
+		double d4 = this.posY - vector.yCoord;
+		double d6 = this.posZ - vector.zCoord;
+		double d8 = d2 * d2 + d4 * d4 + d6 * d6;
+		return this.isInRangeToRenderDist(d8);
+	}
+
+	public boolean isInRangeToRenderDist(double distance) {
+		double d3 = this.boundingBox.getAverageEdgeLength();
+		d3 *= 128.0D * this.renderDistanceWeight;
+		return distance < d3 * d3;
 	}
 
 	public String getTexture() {
 		return null;
 	}
 
-	public boolean addEntityID(NBTTagCompound var1) {
-		String var2 = this.getEntityString();
-		if(!this.isDead && var2 != null) {
-			var1.setString("id", var2);
-			this.writeToNBT(var1);
+	public boolean addEntityID(NBTTagCompound nbttagcompound) {
+		String string2 = this.getEntityString();
+		if(!this.isDead && string2 != null) {
+			nbttagcompound.setString("id", string2);
+			this.writeToNBT(nbttagcompound);
 			return true;
 		} else {
 			return false;
 		}
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		var1.setTag("Pos", this.newDoubleNBTList(new double[]{this.posX, this.posY, this.posZ}));
-		var1.setTag("Motion", this.newDoubleNBTList(new double[]{this.motionX, this.motionY, this.motionZ}));
-		var1.setTag("Rotation", this.newFloatNBTList(new float[]{this.rotationYaw, this.rotationPitch}));
-		var1.setFloat("FallDistance", this.fallDistance);
-		var1.setShort("Fire", (short)this.fire);
-		var1.setShort("Air", (short)this.air);
-		var1.setBoolean("OnGround", this.onGround);
-		this.writeEntityToNBT(var1);
+	public void writeToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setTag(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9795_70meZjpgin77izFDRms6YiXGbm7sTRK649zXtTMpcaGJg7Z3848NcHmipQ3k), this.newDoubleNBTList(new double[]{this.posX, this.posY, this.posZ}));
+		nbttagcompound.setTag(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9791_17t872E67KsYQ1d04LU0O5giS6ZSq17O2qre6bZO5GyA530TyCK24CM264IQ), this.newDoubleNBTList(new double[]{this.motionX, this.motionY, this.motionZ}));
+		nbttagcompound.setTag("Rotation", this.newFloatNBTList(new float[]{this.rotationYaw, this.rotationPitch}));
+		nbttagcompound.setFloat("FallDistance", this.fallDistance);
+		nbttagcompound.setShort("Fire", (short)this.fire);
+		nbttagcompound.setShort("Air", (short)this.air);
+		nbttagcompound.setBoolean("OnGround", this.onGround);
+		this.writeEntityToNBT(nbttagcompound);
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		NBTTagList var2 = var1.getTagList("Pos");
-		NBTTagList var3 = var1.getTagList("Motion");
-		NBTTagList var4 = var1.getTagList("Rotation");
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		NBTTagList nBTTagList2 = nbttagcompound.getTagList(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9795_70meZjpgin77izFDRms6YiXGbm7sTRK649zXtTMpcaGJg7Z3848NcHmipQ3k));
+		NBTTagList nBTTagList3 = nbttagcompound.getTagList(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9791_17t872E67KsYQ1d04LU0O5giS6ZSq17O2qre6bZO5GyA530TyCK24CM264IQ));
+		NBTTagList nBTTagList4 = nbttagcompound.getTagList("Rotation");
 		this.setPosition(0.0D, 0.0D, 0.0D);
-		this.motionX = ((NBTTagDouble)var3.tagAt(0)).doubleValue;
-		this.motionY = ((NBTTagDouble)var3.tagAt(1)).doubleValue;
-		this.motionZ = ((NBTTagDouble)var3.tagAt(2)).doubleValue;
-		this.prevPosX = this.lastTickPosX = this.posX = ((NBTTagDouble)var2.tagAt(0)).doubleValue;
-		this.prevPosY = this.lastTickPosY = this.posY = ((NBTTagDouble)var2.tagAt(1)).doubleValue;
-		this.prevPosZ = this.lastTickPosZ = this.posZ = ((NBTTagDouble)var2.tagAt(2)).doubleValue;
-		this.prevRotationYaw = this.rotationYaw = ((NBTTagFloat)var4.tagAt(0)).floatValue;
-		this.prevRotationPitch = this.rotationPitch = ((NBTTagFloat)var4.tagAt(1)).floatValue;
-		this.fallDistance = var1.getFloat("FallDistance");
-		this.fire = var1.getShort("Fire");
-		this.air = var1.getShort("Air");
-		this.onGround = var1.getBoolean("OnGround");
+		this.motionX = ((NBTTagDouble)nBTTagList3.tagAt(0)).doubleValue;
+		this.motionY = ((NBTTagDouble)nBTTagList3.tagAt(1)).doubleValue;
+		this.motionZ = ((NBTTagDouble)nBTTagList3.tagAt(2)).doubleValue;
+		this.prevPosX = this.lastTickPosX = this.posX = ((NBTTagDouble)nBTTagList2.tagAt(0)).doubleValue;
+		this.prevPosY = this.lastTickPosY = this.posY = ((NBTTagDouble)nBTTagList2.tagAt(1)).doubleValue;
+		this.prevPosZ = this.lastTickPosZ = this.posZ = ((NBTTagDouble)nBTTagList2.tagAt(2)).doubleValue;
+		this.prevRotationYaw = this.rotationYaw = ((NBTTagFloat)nBTTagList4.tagAt(0)).floatValue;
+		this.prevRotationPitch = this.rotationPitch = ((NBTTagFloat)nBTTagList4.tagAt(1)).floatValue;
+		this.fallDistance = nbttagcompound.getFloat("FallDistance");
+		this.fire = nbttagcompound.getShort("Fire");
+		this.air = nbttagcompound.getShort("Air");
+		this.onGround = nbttagcompound.getBoolean("OnGround");
 		this.setPosition(this.posX, this.posY, this.posZ);
-		this.readEntityFromNBT(var1);
+		this.readEntityFromNBT(nbttagcompound);
 	}
 
 	protected final String getEntityString() {
 		return EntityList.getEntityString(this);
 	}
 
-	protected abstract void readEntityFromNBT(NBTTagCompound var1);
-
-	protected abstract void writeEntityToNBT(NBTTagCompound var1);
-
-	protected NBTTagList newDoubleNBTList(double... var1) {
-		NBTTagList var2 = new NBTTagList();
-		double[] var3 = var1;
-		int var4 = var1.length;
-
-		for(int var5 = 0; var5 < var4; ++var5) {
-			double var6 = var3[var5];
-			var2.setTag(new NBTTagDouble(var6));
+	protected abstract void readEntityFromNBT(NBTTagCompound nBTTagCompound1);
+
+	protected abstract void writeEntityToNBT(NBTTagCompound nBTTagCompound1);
+
+	protected NBTTagList newDoubleNBTList(double... doubleArray) {
+		NBTTagList nBTTagList2 = new NBTTagList();
+		double[] d3 = doubleArray;
+		int i4 = doubleArray.length;
+
+		for(int i5 = 0; i5 < i4; ++i5) {
+			double d6 = d3[i5];
+			nBTTagList2.setTag(new NBTTagDouble(d6));
 		}
 
-		return var2;
+		return nBTTagList2;
 	}
 
-	protected NBTTagList newFloatNBTList(float... var1) {
-		NBTTagList var2 = new NBTTagList();
-		float[] var3 = var1;
-		int var4 = var1.length;
+	protected NBTTagList newFloatNBTList(float... floatArray) {
+		NBTTagList nBTTagList2 = new NBTTagList();
+		float[] f3 = floatArray;
+		int i4 = floatArray.length;
 
-		for(int var5 = 0; var5 < var4; ++var5) {
-			float var6 = var3[var5];
-			var2.setTag(new NBTTagFloat(var6));
+		for(int i5 = 0; i5 < i4; ++i5) {
+			float f6 = f3[i5];
+			nBTTagList2.setTag(new NBTTagFloat(f6));
 		}
 
-		return var2;
+		return nBTTagList2;
 	}
 
 	public float getShadowSize() {
 		return this.height / 2.0F;
 	}
 
-	public EntityItem dropItem(int var1, int var2) {
-		return this.entityDropItem(var1, var2, 0.0F);
+	public EntityItem dropItem(int itemID, int count) {
+		return this.entityDropItem(itemID, count, 0.0F);
 	}
 
-	public EntityItem entityDropItem(int var1, int var2, float var3) {
-		EntityItem var4 = new EntityItem(this.worldObj, this.posX, this.posY + (double)var3, this.posZ, new ItemStack(var1, var2));
-		var4.delayBeforeCanPickup = 10;
-		this.worldObj.spawnEntityInWorld(var4);
-		return var4;
+	public EntityItem entityDropItem(int itemID, int count, float velocity) {
+		EntityItem entityItem4 = new EntityItem(this.worldObj, this.posX, this.posY + (double)velocity, this.posZ, new ItemStack(itemID, count));
+		entityItem4.delayBeforeCanPickup = 10;
+		this.worldObj.spawnEntityInWorld(entityItem4);
+		return entityItem4;
 	}
 
 	public boolean isEntityAlive() {
@@ -733,17 +755,17 @@
 	}
 
 	public boolean isEntityInsideOpaqueBlock() {
-		int var1 = MathHelper.floor_double(this.posX);
-		int var2 = MathHelper.floor_double(this.posY + (double)this.getEyeHeight());
-		int var3 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.isBlockNormalCube(var1, var2, var3);
+		int i1 = MathHelper.floor_double(this.posX);
+		int i2 = MathHelper.floor_double(this.posY + (double)this.getEyeHeight());
+		int i3 = MathHelper.floor_double(this.posZ);
+		return this.worldObj.isBlockNormalCube(i1, i2, i3);
 	}
 
-	public boolean interact(EntityPlayer var1) {
+	public boolean interact(EntityPlayer entityPlayer) {
 		return false;
 	}
 
-	public AxisAlignedBB getCollisionBox(Entity var1) {
+	public AxisAlignedBB getCollisionBox(Entity entity) {
 		return null;
 	}
 
@@ -773,30 +795,31 @@
 				this.entityRiderPitchDelta += 360.0D;
 			}
 
-			double var1 = this.entityRiderYawDelta * 0.5D;
-			double var3 = this.entityRiderPitchDelta * 0.5D;
-			float var5 = 10.0F;
-			if(var1 > (double)var5) {
-				var1 = (double)var5;
-			}
-
-			if(var1 < (double)(-var5)) {
-				var1 = (double)(-var5);
-			}
-
-			if(var3 > (double)var5) {
-				var3 = (double)var5;
-			}
-
-			if(var3 < (double)(-var5)) {
-				var3 = (double)(-var5);
-			}
-
-			this.entityRiderYawDelta -= var1;
-			this.entityRiderPitchDelta -= var3;
-			this.rotationYaw = (float)((double)this.rotationYaw + var1);
-			this.rotationPitch = (float)((double)this.rotationPitch + var3);
+			double d1 = this.entityRiderYawDelta * 0.5D;
+			double d3 = this.entityRiderPitchDelta * 0.5D;
+			float f5 = 10.0F;
+			if(d1 > (double)f5) {
+				d1 = (double)f5;
+			}
+
+			if(d1 < (double)(-f5)) {
+				d1 = (double)(-f5);
+			}
+
+			if(d3 > (double)f5) {
+				d3 = (double)f5;
+			}
+
+			if(d3 < (double)(-f5)) {
+				d3 = (double)(-f5);
+			}
+
+			this.entityRiderYawDelta -= d1;
+			this.entityRiderPitchDelta -= d3;
+			this.rotationYaw = (float)((double)this.rotationYaw + d1);
+			this.rotationPitch = (float)((double)this.rotationPitch + d3);
 		}
+
 	}
 
 	protected void updateRiderPosition() {
@@ -811,29 +834,30 @@
 		return (double)this.height * 0.75D;
 	}
 
-	public void mountEntity(Entity var1) {
+	public void mountEntity(Entity entity) {
 		this.entityRiderPitchDelta = 0.0D;
 		this.entityRiderYawDelta = 0.0D;
-		if(this.ridingEntity == var1) {
+		if(this.ridingEntity == entity) {
 			this.ridingEntity.riddenByEntity = null;
 			this.ridingEntity = null;
-			this.setLocationAndAngles(var1.posX, var1.boundingBox.minY + (double)var1.height, var1.posZ, this.rotationYaw, this.rotationPitch);
+			this.setLocationAndAngles(entity.posX, entity.boundingBox.minY + (double)entity.height, entity.posZ, this.rotationYaw, this.rotationPitch);
 		} else {
 			if(this.ridingEntity != null) {
 				this.ridingEntity.riddenByEntity = null;
 			}
 
-			if(var1.riddenByEntity != null) {
-				var1.riddenByEntity.ridingEntity = null;
+			if(entity.riddenByEntity != null) {
+				entity.riddenByEntity.ridingEntity = null;
 			}
 
-			this.ridingEntity = var1;
-			var1.riddenByEntity = this;
+			this.ridingEntity = entity;
+			entity.riddenByEntity = this;
 		}
+
 	}
 
-	public void setPositionAndRotation(double var1, double var3, double var5, float var7, float var8, int var9) {
-		this.setPosition(var1, var3, var5);
-		this.setRotation(var7, var8);
+	public void setPositionAndRotation(double x, double y, double z, float rotationYaw, float rotationPitch, int newPosRotationIncrements) {
+		this.setPosition(x, y, z);
+		this.setRotation(rotationYaw, rotationPitch);
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockFenceOld.java
@@ -1,0 +1,29 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+
+public class BlockFenceOld extends BlockOld {
+	public BlockFenceOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.wood);
+	}
+
+	public void getCollidingBoundingBoxes(World vg, int integer2, int integer3, int integer4, AxisAlignedBB zb, ArrayList arrayList) {
+		arrayList.add(AxisAlignedBB.getBoundingBoxFromPool((double)integer2, (double)integer3, (double)integer4, (double)(integer2 + 1), (double)integer3 + 1.5D, (double)(integer4 + 1)));
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		return vg.getBlockId(integer2, integer3 - 1, integer4) == this.blockID ? false : (!vg.getBlockMaterial(integer2, integer3 - 1, integer4).isSolid() ? false : super.canPlaceBlockAt(vg, integer2, integer3, integer4));
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 11;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockDirtOld.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public class BlockDirtOld extends BlockOld {
+	protected BlockDirtOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.grass);
+	}
+}
--- net/minecraft/src/IInventory.java
+++ net/minecraft/src/IInventory.java
@@ -3,11 +3,11 @@
 public interface IInventory {
 	int getSizeInventory();
 
-	ItemStack getStackInSlot(int var1);
-
-	ItemStack decrStackSize(int var1, int var2);
-
-	void setInventorySlotContents(int var1, ItemStack var2);
+	ItemStack getStackInSlot(int i1);
+
+	ItemStack decrStackSize(int i1, int i2);
+
+	void setInventorySlotContents(int i1, ItemStack itemStack2);
 
 	String getInvName();
 
--- net/minecraft/src/BlockSponge.java
+++ net/minecraft/src/BlockSponge.java
@@ -1,18 +1,19 @@
 package net.minecraft.src;
 
 public class BlockSponge extends Block {
-	protected BlockSponge(int var1) {
-		super(var1, Material.sponge);
+	protected BlockSponge(int id) {
+		super(id, Material.sponge);
 		this.blockIndexInTexture = 48;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		byte var5 = 2;
+	public void onBlockAdded(World world, int x, int y, int z) {
+		byte b5 = 2;
 
-		for(int var6 = var2 - var5; var6 <= var2 + var5; ++var6) {
-			for(int var7 = var3 - var5; var7 <= var3 + var5; ++var7) {
-				for(int var8 = var4 - var5; var8 <= var4 + var5; ++var8) {
-					if(var1.getBlockMaterial(var6, var7, var8) == Material.water) {
+		for(int i6 = x - b5; i6 <= x + b5; ++i6) {
+			for(int i7 = y - b5; i7 <= y + b5; ++i7) {
+				for(int i8 = z - b5; i8 <= z + b5; ++i8) {
+					if(world.getBlockMaterial(i6, i7, i8) == Material.water) {
+						;
 					}
 				}
 			}
@@ -20,13 +21,13 @@
 
 	}
 
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		byte var5 = 2;
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		byte b5 = 2;
 
-		for(int var6 = var2 - var5; var6 <= var2 + var5; ++var6) {
-			for(int var7 = var3 - var5; var7 <= var3 + var5; ++var7) {
-				for(int var8 = var4 - var5; var8 <= var4 + var5; ++var8) {
-					var1.notifyBlocksOfNeighborChange(var6, var7, var8, var1.getBlockId(var6, var7, var8));
+		for(int i6 = x - b5; i6 <= x + b5; ++i6) {
+			for(int i7 = y - b5; i7 <= y + b5; ++i7) {
+				for(int i8 = z - b5; i8 <= z + b5; ++i8) {
+					world.notifyBlocksOfNeighborChange(i6, i7, i8, world.getBlockId(i6, i7, i8));
 				}
 			}
 		}
--- net/minecraft/src/NBTTagByteArray.java
+++ net/minecraft/src/NBTTagByteArray.java
@@ -10,19 +10,19 @@
 	public NBTTagByteArray() {
 	}
 
-	public NBTTagByteArray(byte[] var1) {
-		this.byteArray = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeInt(this.byteArray.length);
-		var1.write(this.byteArray);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		int var2 = var1.readInt();
-		this.byteArray = new byte[var2];
-		var1.readFully(this.byteArray);
+	public NBTTagByteArray(byte[] value) {
+		this.byteArray = value;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeInt(this.byteArray.length);
+		dataOutput.write(this.byteArray);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		int i2 = dataInput.readInt();
+		this.byteArray = new byte[i2];
+		dataInput.readFully(this.byteArray);
 	}
 
 	public byte getType() {
--- net/minecraft/src/NetClientHandler.java
+++ net/minecraft/src/NetClientHandler.java
@@ -7,6 +7,7 @@
 import java.net.Socket;
 import java.net.URL;
 import java.util.Random;
+
 import net.minecraft.client.Minecraft;
 
 public class NetClientHandler extends NetHandler {
@@ -17,155 +18,164 @@
 	private WorldClient worldClient;
 	private boolean posUpdated = false;
 	Random rand = new Random();
+	public int secureID = -1;
 
-	public NetClientHandler(Minecraft var1, String var2, int var3) throws IOException {
-		this.mc = var1;
-		Socket var4 = new Socket(InetAddress.getByName(var2), var3);
-		this.netManager = new NetworkManager(var4, "Client", this);
+	public NetClientHandler(Minecraft minecraft, String ip, int port) throws IOException {
+		this.mc = minecraft;
+		Socket socket4 = new Socket(InetAddress.getByName(ip), port);
+		this.netManager = new NetworkManager(socket4, "Client", this);
 	}
 
 	public void processReadPackets() {
 		if(!this.disconnected) {
 			this.netManager.processReadPackets();
 		}
+
 	}
 
-	public void handleLogin(Packet1Login var1) {
+	public void handleLogin(Packet1Login packet) {
 		this.mc.playerController = new PlayerControllerMP(this.mc, this);
 		this.worldClient = new WorldClient(this);
 		this.worldClient.multiplayerWorld = true;
+		this.secureID = packet.secID;
 		this.mc.changeWorld1(this.worldClient);
 		this.mc.displayGuiScreen(new GuiDownloadTerrain(this));
 	}
 
-	public void handlePickupSpawn(Packet21PickupSpawn var1) {
-		double var2 = (double)var1.xPosition / 32.0D;
-		double var4 = (double)var1.yPosition / 32.0D;
-		double var6 = (double)var1.zPosition / 32.0D;
-		EntityItem var8 = new EntityItem(this.worldClient, var2, var4, var6, new ItemStack(var1.itemID, var1.count));
-		var8.motionX = (double)var1.rotation / 128.0D;
-		var8.motionY = (double)var1.pitch / 128.0D;
-		var8.motionZ = (double)var1.roll / 128.0D;
-		var8.serverPosX = var1.xPosition;
-		var8.serverPosY = var1.yPosition;
-		var8.serverPosZ = var1.zPosition;
-		this.worldClient.addEntityToWorld(var1.entityId, var8);
-	}
-
-	public void handleVehicleSpawn(Packet23VehicleSpawn var1) {
-		double var2 = (double)var1.xPosition / 32.0D;
-		double var4 = (double)var1.yPosition / 32.0D;
-		double var6 = (double)var1.zPosition / 32.0D;
-		Object var8 = null;
-		if(var1.type == 10) {
-			var8 = new EntityMinecart(this.worldClient, var2, var4, var6, 0);
-		}
-
-		if(var1.type == 11) {
-			var8 = new EntityMinecart(this.worldClient, var2, var4, var6, 1);
-		}
-
-		if(var1.type == 12) {
-			var8 = new EntityMinecart(this.worldClient, var2, var4, var6, 2);
-		}
-
-		if(var1.type == 1) {
-			var8 = new EntityBoat(this.worldClient, var2, var4, var6);
-		}
-
-		if(var8 != null) {
-			((Entity)var8).serverPosX = var1.xPosition;
-			((Entity)var8).serverPosY = var1.yPosition;
-			((Entity)var8).serverPosZ = var1.zPosition;
-			((Entity)var8).rotationYaw = 0.0F;
-			((Entity)var8).rotationPitch = 0.0F;
-			((Entity)var8).entityID = var1.entityId;
-			this.worldClient.addEntityToWorld(var1.entityId, (Entity)var8);
-		}
-
-	}
-
-	public void handleNamedEntitySpawn(Packet20NamedEntitySpawn var1) {
-		double var2 = (double)var1.xPosition / 32.0D;
-		double var4 = (double)var1.yPosition / 32.0D;
-		double var6 = (double)var1.zPosition / 32.0D;
-		float var8 = (float)(var1.rotation * 360) / 256.0F;
-		float var9 = (float)(var1.pitch * 360) / 256.0F;
-		EntityOtherPlayerMP var10 = new EntityOtherPlayerMP(this.mc.theWorld, var1.name);
-		var10.serverPosX = var1.xPosition;
-		var10.serverPosY = var1.yPosition;
-		var10.serverPosZ = var1.zPosition;
-		int var11 = var1.currentItem;
-		if(var11 == 0) {
-			var10.inventory.mainInventory[var10.inventory.currentItem] = null;
+	public void handlePickupSpawn(Packet21PickupSpawn packet) {
+		double d2 = (double)packet.xPosition / 32.0D;
+		double d4 = (double)packet.yPosition / 32.0D;
+		double d6 = (double)packet.zPosition / 32.0D;
+		EntityItem entityItem8 = new EntityItem(this.worldClient, d2, d4, d6, new ItemStack(packet.itemID, packet.count));
+		entityItem8.motionX = (double)packet.rotation / 128.0D;
+		entityItem8.motionY = (double)packet.pitch / 128.0D;
+		entityItem8.motionZ = (double)packet.roll / 128.0D;
+		entityItem8.serverPosX = packet.xPosition;
+		entityItem8.serverPosY = packet.yPosition;
+		entityItem8.serverPosZ = packet.zPosition;
+		this.worldClient.addEntityToWorld(packet.entityId, entityItem8);
+	}
+
+	public void handleVehicleSpawn(Packet23VehicleSpawn packet) {
+		double d2 = (double)packet.xPosition / 32.0D;
+		double d4 = (double)packet.yPosition / 32.0D;
+		double d6 = (double)packet.zPosition / 32.0D;
+		Object object8 = null;
+		if(packet.type == 10) {
+			object8 = new EntityMinecart(this.worldClient, d2, d4, d6, 0);
+		}
+
+		if(packet.type == 11) {
+			object8 = new EntityMinecart(this.worldClient, d2, d4, d6, 1);
+		}
+
+		if(packet.type == 12) {
+			object8 = new EntityMinecart(this.worldClient, d2, d4, d6, 2);
+		}
+
+		if(packet.type == 1) {
+			object8 = new EntityBoat(this.worldClient, d2, d4, d6);
+		}
+
+		if(object8 != null) {
+			((Entity)object8).serverPosX = packet.xPosition;
+			((Entity)object8).serverPosY = packet.yPosition;
+			((Entity)object8).serverPosZ = packet.zPosition;
+			((Entity)object8).rotationYaw = 0.0F;
+			((Entity)object8).rotationPitch = 0.0F;
+			((Entity)object8).entityID = packet.entityId;
+			this.worldClient.addEntityToWorld(packet.entityId, (Entity)object8);
+		}
+
+	}
+
+	public void handleNamedEntitySpawn(Packet20NamedEntitySpawn packet) {
+		double d2 = (double)packet.xPosition / 32.0D;
+		double d4 = (double)packet.yPosition / 32.0D;
+		double d6 = (double)packet.zPosition / 32.0D;
+		float f8 = (float)(packet.rotation * 360) / 256.0F;
+		float f9 = (float)(packet.pitch * 360) / 256.0F;
+		EntityOtherPlayerMP entityOtherPlayerMP10 = new EntityOtherPlayerMP(this.mc.theWorld, packet.name);
+		if(!SkinManager.skins.containsKey(packet.name)) {
+			this.netManager.addToSendQueue(new Packet7SendSkinRequest(packet.name));
+		}
+
+		entityOtherPlayerMP10.serverPosX = packet.xPosition;
+		entityOtherPlayerMP10.serverPosY = packet.yPosition;
+		entityOtherPlayerMP10.serverPosZ = packet.zPosition;
+		int i11 = packet.currentItem;
+		if(i11 == 0) {
+			entityOtherPlayerMP10.inventory.mainInventory[entityOtherPlayerMP10.inventory.currentItem] = null;
 		} else {
-			var10.inventory.mainInventory[var10.inventory.currentItem] = new ItemStack(var11);
-		}
-
-		var10.setPositionAndRotation(var2, var4, var6, var8, var9);
-		this.worldClient.addEntityToWorld(var1.entityId, var10);
-	}
-
-	public void handleEntityTeleport(Packet34EntityTeleport var1) {
-		Entity var2 = this.worldClient.getEntityByID(var1.entityId);
-		if(var2 != null) {
-			var2.serverPosX = var1.xPosition;
-			var2.serverPosY = var1.yPosition;
-			var2.serverPosZ = var1.zPosition;
-			double var3 = (double)var2.serverPosX / 32.0D;
-			double var5 = (double)var2.serverPosY / 32.0D;
-			double var7 = (double)var2.serverPosZ / 32.0D;
-			float var9 = (float)(var1.yaw * 360) / 256.0F;
-			float var10 = (float)(var1.pitch * 360) / 256.0F;
-			var2.setPositionAndRotation(var3, var5, var7, var9, var10, 3);
-		}
-	}
-
-	public void handleEntity(Packet30Entity var1) {
-		Entity var2 = this.worldClient.getEntityByID(var1.entityId);
-		if(var2 != null) {
-			var2.serverPosX += var1.xPosition;
-			var2.serverPosY += var1.yPosition;
-			var2.serverPosZ += var1.zPosition;
-			double var3 = (double)var2.serverPosX / 32.0D;
-			double var5 = (double)var2.serverPosY / 32.0D;
-			double var7 = (double)var2.serverPosZ / 32.0D;
-			float var9 = var1.rotating ? (float)(var1.yaw * 360) / 256.0F : var2.rotationYaw;
-			float var10 = var1.rotating ? (float)(var1.pitch * 360) / 256.0F : var2.rotationPitch;
-			var2.setPositionAndRotation(var3, var5, var7, var9, var10, 3);
-		}
-	}
-
-	public void handleDestroyEntity(Packet29DestroyEntity var1) {
-		this.worldClient.removeEntityFromWorld(var1.entityId);
-	}
-
-	public void handleFlying(Packet10Flying var1) {
-		EntityPlayerSP var2 = this.mc.thePlayer;
-		double var3 = var2.posX;
-		double var5 = var2.posY;
-		double var7 = var2.posZ;
-		float var9 = var2.rotationYaw;
-		float var10 = var2.rotationPitch;
-		if(var1.moving) {
-			var3 = var1.xPosition;
-			var5 = var1.yPosition;
-			var7 = var1.zPosition;
-		}
-
-		if(var1.rotating) {
-			var9 = var1.yaw;
-			var10 = var1.pitch;
-		}
-
-		var2.ySize = 0.0F;
-		var2.motionX = var2.motionY = var2.motionZ = 0.0D;
-		var2.setPositionAndRotation(var3, var5, var7, var9, var10);
-		var1.xPosition = var2.posX;
-		var1.yPosition = var2.boundingBox.minY;
-		var1.zPosition = var2.posZ;
-		var1.stance = var2.posY;
-		this.netManager.addToSendQueue(var1);
+			entityOtherPlayerMP10.inventory.mainInventory[entityOtherPlayerMP10.inventory.currentItem] = new ItemStack(i11);
+		}
+
+		entityOtherPlayerMP10.setPositionAndRotation(d2, d4, d6, f8, f9);
+		this.worldClient.addEntityToWorld(packet.entityId, entityOtherPlayerMP10);
+	}
+
+	public void handleEntityTeleport(Packet34EntityTeleport packet) {
+		Entity entity2 = this.worldClient.getEntityByID(packet.entityId);
+		if(entity2 != null) {
+			entity2.serverPosX = packet.xPosition;
+			entity2.serverPosY = packet.yPosition;
+			entity2.serverPosZ = packet.zPosition;
+			double d3 = (double)entity2.serverPosX / 32.0D;
+			double d5 = (double)entity2.serverPosY / 32.0D;
+			double d7 = (double)entity2.serverPosZ / 32.0D;
+			float f9 = (float)(packet.yaw * 360) / 256.0F;
+			float f10 = (float)(packet.pitch * 360) / 256.0F;
+			entity2.setPositionAndRotation(d3, d5, d7, f9, f10, 3);
+		}
+
+	}
+
+	public void handleEntity(Packet30Entity packet) {
+		Entity entity2 = this.worldClient.getEntityByID(packet.entityId);
+		if(entity2 != null) {
+			entity2.serverPosX += packet.xPosition;
+			entity2.serverPosY += packet.yPosition;
+			entity2.serverPosZ += packet.zPosition;
+			double d3 = (double)entity2.serverPosX / 32.0D;
+			double d5 = (double)entity2.serverPosY / 32.0D;
+			double d7 = (double)entity2.serverPosZ / 32.0D;
+			float f9 = packet.rotating ? (float)(packet.yaw * 360) / 256.0F : entity2.rotationYaw;
+			float f10 = packet.rotating ? (float)(packet.pitch * 360) / 256.0F : entity2.rotationPitch;
+			entity2.setPositionAndRotation(d3, d5, d7, f9, f10, 3);
+		}
+
+	}
+
+	public void handleDestroyEntity(Packet29DestroyEntity packet) {
+		this.worldClient.removeEntityFromWorld(packet.entityId);
+	}
+
+	public void handleFlying(Packet10Flying packet) {
+		EntityPlayerSP entityPlayerSP2 = this.mc.thePlayer;
+		double d3 = entityPlayerSP2.posX;
+		double d5 = entityPlayerSP2.posY;
+		double d7 = entityPlayerSP2.posZ;
+		float f9 = entityPlayerSP2.rotationYaw;
+		float f10 = entityPlayerSP2.rotationPitch;
+		if(packet.moving) {
+			d3 = packet.xPosition;
+			d5 = packet.yPosition;
+			d7 = packet.zPosition;
+		}
+
+		if(packet.rotating) {
+			f9 = packet.yaw;
+			f10 = packet.pitch;
+		}
+
+		entityPlayerSP2.ySize = 0.0F;
+		entityPlayerSP2.motionX = entityPlayerSP2.motionY = entityPlayerSP2.motionZ = 0.0D;
+		entityPlayerSP2.setPositionAndRotation(d3, d5, d7, f9, f10);
+		packet.xPosition = entityPlayerSP2.posX;
+		packet.yPosition = entityPlayerSP2.boundingBox.minY;
+		packet.zPosition = entityPlayerSP2.posZ;
+		packet.stance = entityPlayerSP2.posY;
+		this.netManager.addToSendQueue(packet);
 		if(!this.posUpdated) {
 			this.mc.thePlayer.prevPosX = this.mc.thePlayer.posX;
 			this.mc.thePlayer.prevPosY = this.mc.thePlayer.posY;
@@ -176,121 +186,133 @@
 
 	}
 
-	public void handlePreChunk(Packet50PreChunk var1) {
-		this.worldClient.doPreChunk(var1.xPosition, var1.yPosition, var1.mode);
+	public void handlePreChunk(Packet50PreChunk packet) {
+		this.worldClient.doPreChunk(packet.xPosition, packet.yPosition, packet.mode, packet.field_8483_9F000reVs09qJC6RM1CDXbwpWot2ap8bQLJ224QEy3l8Sj0Ca7AELxBGg6v9);
 	}
 
-	public void handleMultiBlockChange(Packet52MultiBlockChange var1) {
-		Chunk var2 = this.worldClient.getChunkFromChunkCoords(var1.xPosition, var1.zPosition);
-		int var3 = var1.xPosition * 16;
-		int var4 = var1.zPosition * 16;
+	public void handleMultiBlockChange(Packet52MultiBlockChange packet) {
+		Chunk chunk2 = this.worldClient.getChunkFromChunkCoords(packet.xPosition, packet.zPosition);
+		int i3 = packet.xPosition * 16;
+		int i4 = packet.zPosition * 16;
 
-		for(int var5 = 0; var5 < var1.size; ++var5) {
-			short var6 = var1.coordinateArray[var5];
-			int var7 = var1.typeArray[var5] & 255;
-			byte var8 = var1.metadataArray[var5];
-			int var9 = var6 >> 12 & 15;
-			int var10 = var6 >> 8 & 15;
-			int var11 = var6 & 255;
-			var2.setBlockIDWithMetadata(var9, var11, var10, var7, var8);
-			this.worldClient.invalidateBlockReceiveRegion(var9 + var3, var11, var10 + var4, var9 + var3, var11, var10 + var4);
-			this.worldClient.markBlocksDirty(var9 + var3, var11, var10 + var4, var9 + var3, var11, var10 + var4);
+		for(int i5 = 0; i5 < packet.size; ++i5) {
+			short s6 = packet.coordinateArray[i5];
+			int i7 = packet.typeArray[i5] & 255;
+			byte b8 = packet.metadataArray[i5];
+			int i9 = s6 >> 12 & 15;
+			int i10 = s6 >> 8 & 15;
+			int i11 = s6 & 255;
+			chunk2.setBlockIDWithMetadata(i9, i11, i10, i7, b8);
+			this.worldClient.invalidateBlockReceiveRegion(i9 + i3, i11, i10 + i4, i9 + i3, i11, i10 + i4);
+			this.worldClient.markBlocksDirty(i9 + i3, i11, i10 + i4, i9 + i3, i11, i10 + i4);
 		}
 
 	}
 
-	public void handleMapChunk(Packet51MapChunk var1) {
-		this.worldClient.invalidateBlockReceiveRegion(var1.xPosition, var1.yPosition, var1.zPosition, var1.xPosition + var1.xSize - 1, var1.yPosition + var1.ySize - 1, var1.zPosition + var1.zSize - 1);
-		this.worldClient.setChunkData(var1.xPosition, var1.yPosition, var1.zPosition, var1.xSize, var1.ySize, var1.zSize, var1.chunkData);
-	}
-
-	public void handleBlockChange(Packet53BlockChange var1) {
-		this.worldClient.handleBlockChange(var1.xPosition, var1.yPosition, var1.zPosition, var1.type, var1.metadata);
-	}
-
-	public void handleKickDisconnect(Packet255KickDisconnect var1) {
+	public void handleMapChunk(Packet51MapChunk packet) {
+		this.worldClient.invalidateBlockReceiveRegion(packet.xPosition, packet.yPosition, packet.zPosition, packet.xPosition + packet.xSize - 1, packet.yPosition + packet.ySize - 1, packet.zPosition + packet.zSize - 1);
+		this.worldClient.setChunkData(packet.xPosition, packet.yPosition, packet.zPosition, packet.xSize, packet.ySize, packet.zSize, packet.chunkData);
+	}
+
+	public void handleBlockChange(Packet53BlockChange packet) {
+		this.worldClient.handleBlockChange(packet.xPosition, packet.yPosition, packet.zPosition, packet.type, packet.metadata);
+	}
+
+	public void handleKickDisconnect(Packet255KickDisconnect packet) {
 		this.netManager.networkShutdown("Got kicked");
 		this.disconnected = true;
 		this.mc.changeWorld1((World)null);
-		this.mc.displayGuiScreen(new GuiConnectFailed("Disconnected by server", var1.reason));
+		this.mc.displayGuiScreen(new GuiConnectFailed("Disconnected by server", packet.reason));
 	}
 
-	public void handleErrorMessage(String var1) {
+	public void handleErrorMessage(String message) {
 		if(!this.disconnected) {
 			this.disconnected = true;
 			this.mc.changeWorld1((World)null);
-			this.mc.displayGuiScreen(new GuiConnectFailed("Connection lost", var1));
+			this.mc.displayGuiScreen(new GuiConnectFailed("Connection lost", message));
 		}
+
 	}
 
-	public void addToSendQueue(Packet var1) {
+	public void addToSendQueue(Packet packet) {
 		if(!this.disconnected) {
-			this.netManager.addToSendQueue(var1);
-		}
-	}
-
-	public void handleCollect(Packet22Collect var1) {
-		EntityItem var2 = (EntityItem)this.worldClient.getEntityByID(var1.collectedEntityId);
-		Object var3 = (EntityLiving)this.worldClient.getEntityByID(var1.collectorEntityId);
-		if(var3 == null) {
-			var3 = this.mc.thePlayer;
-		}
-
-		if(var2 != null) {
-			this.worldClient.playSoundAtEntity(var2, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-			this.mc.effectRenderer.addEffect(new EntityPickupFX(this.mc.theWorld, var2, (Entity)var3, -0.5F));
-			this.worldClient.removeEntityFromWorld(var1.collectedEntityId);
-		}
-
-	}
-
-	public void handleBlockItemSwitch(Packet16BlockItemSwitch var1) {
-		Entity var2 = this.worldClient.getEntityByID(var1.entityId);
-		if(var2 != null) {
-			EntityPlayer var3 = (EntityPlayer)var2;
-			int var4 = var1.id;
-			if(var4 == 0) {
-				var3.inventory.mainInventory[var3.inventory.currentItem] = null;
-			} else {
-				var3.inventory.mainInventory[var3.inventory.currentItem] = new ItemStack(var4);
-			}
-
-		}
-	}
-
-	public void handleChat(Packet3Chat var1) {
-		this.mc.ingameGUI.addChatMessage(var1.message);
-	}
-
-	public void handleArmAnimation(Packet18ArmAnimation var1) {
-		Entity var2 = this.worldClient.getEntityByID(var1.entityId);
-		if(var2 != null) {
-			EntityPlayer var3 = (EntityPlayer)var2;
-			var3.swingItem();
-		}
-	}
-
-	public void handleAddToInventory(Packet17AddToInventory var1) {
-		this.mc.thePlayer.inventory.addItemStackToInventory(new ItemStack(var1.itemID, var1.count, var1.itemDamage));
-	}
-
-	public void handleHandshake(Packet2Handshake var1) {
-		if(var1.username.equals("-")) {
-			this.addToSendQueue(new Packet1Login(this.mc.session.username, "Password", 2));
+			this.netManager.addToSendQueue(packet);
+		}
+
+	}
+
+	public void handleCollect(Packet22Collect packet) {
+		EntityItem entityItem2 = (EntityItem)this.worldClient.getEntityByID(packet.collectedEntityId);
+		Object object3 = (EntityLiving)this.worldClient.getEntityByID(packet.collectorEntityId);
+		if(object3 == null) {
+			object3 = this.mc.thePlayer;
+		}
+
+		if(entityItem2 != null) {
+			this.worldClient.playSoundAtEntity(entityItem2, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+			this.mc.effectRenderer.addEffect(new EntityPickupFX(this.mc.theWorld, entityItem2, (Entity)object3, -0.5F));
+			this.worldClient.removeEntityFromWorld(packet.collectedEntityId);
+		}
+
+	}
+
+	public void handleBlockItemSwitch(Packet16BlockItemSwitch packet) {
+		Entity entity2 = this.worldClient.getEntityByID(packet.entityId);
+		if(entity2 != null) {
+			EntityPlayer entityPlayer3 = (EntityPlayer)entity2;
+			int i4 = packet.id;
+			if(i4 == 0) {
+				entityPlayer3.inventory.mainInventory[entityPlayer3.inventory.currentItem] = null;
+			} else {
+				entityPlayer3.inventory.mainInventory[entityPlayer3.inventory.currentItem] = new ItemStack(i4);
+			}
+		}
+
+	}
+
+	public void handleChat(Packet3Chat packet) {
+		if(packet instanceof Packet202SecureChatEcho && !((Packet202SecureChatEcho)packet).verified) {
+			this.mc.ingameGUI.addChatMessage("WARNING!");
+			this.mc.ingameGUI.addChatMessage("This message is not legitimate.");
+		}
+
+		this.mc.ingameGUI.addChatMessage(packet.message);
+	}
+
+	public void handleArmAnimation(Packet18ArmAnimation packet) {
+		Entity entity2 = this.worldClient.getEntityByID(packet.entityId);
+		if(entity2 != null) {
+			EntityPlayer entityPlayer3 = (EntityPlayer)entity2;
+			entityPlayer3.swingItem();
+		}
+
+	}
+
+	public void handleAddToInventory(Packet17AddToInventory packet) {
+		this.mc.thePlayer.inventory.addItemStackToInventory(new ItemStack(packet.itemID, packet.count, packet.itemDamage));
+	}
+
+	public void handleHandshake(Packet2Handshake packet) {
+		if(packet.username.equals("-")) {
+			if(CertUtils.loadedPrivKey == null) {
+				this.addToSendQueue(new Packet1Login(this.mc.session.username, "Password", 2));
+			} else {
+				this.addToSendQueue(new Packet200SecureLogin(this.mc.session.username, "Password", 2, GuiMultiplayer.playerMode));
+			}
 		} else {
 			try {
-				URL var2 = new URL("http://www.minecraft.net/game/joinserver.jsp?user=" + this.mc.session.username + "&sessionId=" + this.mc.session.sessionId + "&serverId=" + var1.username);
-				BufferedReader var3 = new BufferedReader(new InputStreamReader(var2.openStream()));
-				String var4 = var3.readLine();
-				var3.close();
-				if(var4.equalsIgnoreCase("ok")) {
+				URL uRL2 = new URL("http://www.minecraft.net/game/joinserver.jsp?user=" + this.mc.session.username + "&sessionId=" + this.mc.session.sessionId + "&serverId=" + packet.username);
+				BufferedReader bufferedReader3 = new BufferedReader(new InputStreamReader(uRL2.openStream()));
+				String string4 = bufferedReader3.readLine();
+				bufferedReader3.close();
+				if(string4.equalsIgnoreCase("ok")) {
 					this.addToSendQueue(new Packet1Login(this.mc.session.username, "Password", 2));
 				} else {
-					this.netManager.networkShutdown("Failed to login: " + var4);
+					this.netManager.networkShutdown("Failed to login: " + string4);
 				}
-			} catch (Exception var5) {
-				var5.printStackTrace();
-				this.netManager.networkShutdown("Internal client error: " + var5.toString());
+			} catch (Exception exception5) {
+				exception5.printStackTrace();
+				this.netManager.networkShutdown("Internal client error: " + exception5);
 			}
 		}
 
@@ -301,53 +323,92 @@
 		this.netManager.networkShutdown("Closed");
 	}
 
-	public void handleMobSpawn(Packet24MobSpawn var1) {
-		double var2 = (double)var1.xPosition / 32.0D;
-		double var4 = (double)var1.yPosition / 32.0D;
-		double var6 = (double)var1.zPosition / 32.0D;
-		float var8 = (float)(var1.yaw * 360) / 256.0F;
-		float var9 = (float)(var1.pitch * 360) / 256.0F;
-		EntityLiving var10 = (EntityLiving)EntityList.createEntityByID(var1.type, this.mc.theWorld);
-		var10.serverPosX = var1.xPosition;
-		var10.serverPosY = var1.yPosition;
-		var10.serverPosZ = var1.zPosition;
-		var10.setPositionAndRotation(var2, var4, var6, var8, var9);
-		var10.isAIEnabled = true;
-		this.worldClient.addEntityToWorld(var1.entityId, var10);
-	}
-
-	public void handleUpdateTime(Packet4UpdateTime var1) {
-		this.mc.theWorld.setWorldTime(var1.time);
-	}
-
-	public void handlePlayerInventory(Packet5PlayerInventory var1) {
-		EntityPlayerSP var2 = this.mc.thePlayer;
-		if(var1.inventoryType == -1) {
-			var2.inventory.mainInventory = var1.inventory;
-		}
-
-		if(var1.inventoryType == -2) {
-			var2.inventory.craftingInventory = var1.inventory;
-		}
-
-		if(var1.inventoryType == -3) {
-			var2.inventory.armorInventory = var1.inventory;
-		}
-
-	}
-
-	public void handleComplexEntity(Packet59ComplexEntity var1) {
-		TileEntity var2 = this.worldClient.getBlockTileEntity(var1.xCoord, var1.yCoord, var1.zCoord);
-		if(var2 != null) {
-			var2.readFromNBT(var1.tileEntityNBT);
-			this.worldClient.markBlocksDirty(var1.xCoord, var1.yCoord, var1.zCoord, var1.xCoord, var1.yCoord, var1.zCoord);
-		}
-
-	}
-
-	public void handleSpawnPosition(Packet6SpawnPosition var1) {
-		this.worldClient.spawnX = var1.xPosition;
-		this.worldClient.spawnY = var1.yPosition;
-		this.worldClient.spawnZ = var1.zPosition;
+	public void handleMobSpawn(Packet24MobSpawn packet) {
+		double d2 = (double)packet.xPosition / 32.0D;
+		double d4 = (double)packet.yPosition / 32.0D;
+		double d6 = (double)packet.zPosition / 32.0D;
+		float f8 = (float)(packet.yaw * 360) / 256.0F;
+		float f9 = (float)(packet.pitch * 360) / 256.0F;
+		EntityLiving entityLiving10 = (EntityLiving)EntityList.createEntityByID(packet.type, this.mc.theWorld);
+		entityLiving10.serverPosX = packet.xPosition;
+		entityLiving10.serverPosY = packet.yPosition;
+		entityLiving10.serverPosZ = packet.zPosition;
+		entityLiving10.setPositionAndRotation(d2, d4, d6, f8, f9);
+		entityLiving10.isAIEnabled = true;
+		this.worldClient.addEntityToWorld(packet.entityId, entityLiving10);
+	}
+
+	public void handleUpdateTime(Packet4UpdateTime packet) {
+		this.mc.theWorld.setWorldTime(packet.time);
+	}
+
+	public void handlePlayerInventory(Packet5PlayerInventory packet) {
+		EntityPlayerSP entityPlayerSP2 = this.mc.thePlayer;
+		if(packet.inventoryType == -1) {
+			entityPlayerSP2.inventory.mainInventory = packet.inventory;
+		}
+
+		if(packet.inventoryType == -2) {
+			entityPlayerSP2.inventory.craftingInventory = packet.inventory;
+		}
+
+		if(packet.inventoryType == -3) {
+			entityPlayerSP2.inventory.armorInventory = packet.inventory;
+		}
+
+	}
+
+	public void handleComplexEntity(Packet59ComplexEntity packet) {
+		TileEntity tileEntity2 = this.worldClient.getBlockTileEntity(packet.xCoord, packet.yCoord, packet.zCoord);
+		if(tileEntity2 != null) {
+			tileEntity2.readFromNBT(packet.tileEntityNBT);
+			this.worldClient.markBlocksDirty(packet.xCoord, packet.yCoord, packet.zCoord, packet.xCoord, packet.yCoord, packet.zCoord);
+		}
+
+	}
+
+	public void handleSpawnPosition(Packet6SpawnPosition packet) {
+		this.worldClient.spawnX = packet.xPosition;
+		this.worldClient.spawnY = packet.yPosition;
+		this.worldClient.spawnZ = packet.zPosition;
+		this.worldClient.randomSeed = packet.worldSeed;
+	}
+
+	public void handleRemoteEntityData(Packet210RemoteEntityData packet) {
+		RemoteEntityData remoteEntityData2 = new RemoteEntityData(packet.id);
+		remoteEntityData2.x = packet.px;
+		remoteEntityData2.y = packet.py;
+		remoteEntityData2.z = packet.pz;
+		remoteEntityData2.rotPitch = packet.rx;
+		remoteEntityData2.rotYaw = packet.ry;
+		this.worldClient.updateRemoteEntityState(remoteEntityData2);
+	}
+
+	public void func_9533_25tX06Rn1x8M23UU2H9zV6jXRvKnHTUhNF2dQmklMdj7A1h0k1f98dr4AwsU(Packet211 packet) {
+		XYZv xYZv2 = packet.field_8478_2tSnAC2xVUHExz1aDX8Sa8Y3qNowB5P09O82NNyk8BjqM44f064S2911lmuQ;
+		XYZv xYZv3 = packet.field_8477_6nRq2qJNrDKC2o4Y72ETc41d4Mx8UAPay651yfdnjp6nj25JnXzS4zszE35c;
+		long j4 = Math.min(xYZv2.x, xYZv3.x);
+		long j6 = Math.max(xYZv2.x, xYZv3.x);
+		long j8 = Math.min(xYZv2.y, xYZv3.y);
+		long j10 = Math.max(xYZv2.y, xYZv3.y);
+		long j12 = Math.min(xYZv2.z, xYZv3.z);
+		long j14 = Math.max(xYZv2.z, xYZv3.z);
+
+		for(long j16 = j4; j16 <= j6; ++j16) {
+			for(long j18 = j8; j18 <= j10; ++j18) {
+				for(long j20 = j12; j20 <= j14; ++j20) {
+					this.worldClient.setBlockWithNotify((int)j16, (int)j18, (int)j20, packet.field_8476_3gK8iVkh5Ag4DU8I447HxslvLJJu2925rh5f4WA43l64kg50e321Ohb427Ez);
+				}
+			}
+		}
+
+	}
+
+	public void func_9567_8Uqzx4T0U7C4w4y2Ni3ekUd757k1g1Aslx6MbBL4gp7k8VP7S54Cq5ura317(Packet71 me) {
+		this.worldClient.playSoundEffect(me.field_8474_145olukCshOr7AbHQ37u7Mek5J4P72YUunedJaJO16hjSfTGODn4m9m5a1li, me.field_8470_9IrDiRRUrGdyFa6A7PTN8n2gN7KM6m7hJt8zUc23Te1J28vMxI4uo31CBYay, me.field_8475_3jlw1j330Q8Z8q9Qo97DvEh5W2hcFrGUFMo0W390y314Nds665s329qCvr51, me.field_8472_28DRek4v4KQUw9KLE6Oc1AsTx74xRWg892e8w2RDtc17be6dHpNr005yCRW6, me.field_8471_102rZg1EIQM0yf5sxDO3Mo7Ck6i5Z4kWuhm2PPl40f7rZS7L9M2G9ciup82Q, me.field_8473_42sARdt3h0YOa81x8UlPl0CEJtC90d59hSH909CU366FzIF4B45o6aiwz125);
+	}
+
+	public void func_9565_0Y8HJW4TgPPE2z549sYe11V6j33RgAx30G8Wqd6O07L94mxIBzIR8Xpj72GI(Packet72 rm) {
+		this.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw(rm.field_8485_902s024v0T40AC31By11eacj2G9ftX6I7oIimZe17emPq6w323bj398K2v81, rm.field_8486_8TA6UV69W9P3wmw711p172l3T8s0Ptbd25wMM71jF6fUH6cq4n64JE8jvFIR);
 	}
 }
--- /dev/null
+++ net/minecraft/src/GuiEssenceCloner.java
@@ -1,0 +1,47 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+public class GuiEssenceCloner extends GuiContainer {
+	public EssenceClonerInventoryCB craftingInventory = new EssenceClonerInventoryCB();
+
+	public GuiEssenceCloner(InventoryPlayer bb) {
+		this.inventorySlots.add(new SlotInventory(this, this.craftingInventory.craftMatrix, 0, 30, 35));
+		this.inventorySlots.add(new SlotInventory(this, this.craftingInventory.craftMatrix, 1, 48, 35));
+		this.inventorySlots.add(new SlotInventory(this, this.craftingInventory.craftMatrix, 2, 66, 35));
+		this.inventorySlots.add(new SlotEssenceCloner(this, this.craftingInventory.craftMatrix, this.craftingInventory.craftResult, 0, 102, 35));
+		this.inventorySlots.add(new SlotEssenceCloner(this, this.craftingInventory.craftMatrix, this.craftingInventory.craftResult, 1, 120, 35));
+		this.inventorySlots.add(new SlotEssenceCloner(this, this.craftingInventory.craftMatrix, this.craftingInventory.craftResult, 2, 138, 35));
+
+		int i2;
+		for(i2 = 0; i2 < 3; ++i2) {
+			for(int i3 = 0; i3 < 9; ++i3) {
+				this.inventorySlots.add(new SlotInventory(this, bb, i3 + (i2 + 1) * 9, 8 + i3 * 18, 84 + i2 * 18));
+			}
+		}
+
+		for(i2 = 0; i2 < 9; ++i2) {
+			this.inventorySlots.add(new SlotInventory(this, bb, i2, 8 + i2 * 18, 142));
+		}
+
+	}
+
+	public void onGuiClosed() {
+		super.onGuiClosed();
+		this.craftingInventory.onCraftGuiClosed(this.mc.thePlayer);
+	}
+
+	protected void drawGuiContainerForegroundLayer() {
+		this.fontRenderer.drawString("Essence Cloner", 30, 6, 0xFFFFFF);
+		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, 0xFFFFFF);
+	}
+
+	protected void drawGuiContainerBackgroundLayer(float renderPartialTick) {
+		int i2 = this.mc.renderEngine.getTexture("/gui/essencecloner.png");
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		this.mc.renderEngine.bindTexture(i2);
+		int i3 = (this.width - this.xSize) / 2;
+		int i4 = (this.height - this.ySize) / 2;
+		this.drawTexturedModalRect(i3, i4, 0, 0, this.xSize, this.ySize);
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandGuiVersionstring.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandGuiVersionstring extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8553_2uh2AnL8M7fn5IDp8w3625fo72jBhJUYO8qCZ8H78oo4hJUuuW8BTGoR01kF;
+    
+    CommandGuiVersionstring(final CommandManager abb) {
+        this.field_8553_2uh2AnL8M7fn5IDp8w3625fo72jBhJUYO8qCZ8H78oo4hJUuuW8BTGoR01kF = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        GuiIngame.field_7848_69F5OIYAc4x6RX395dAQNvnAE6gbvlYWUWFq5k519dDHt6V3lS7NcP1YaM1d = (String)arr[0];
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return GuiIngame.field_7848_69F5OIYAc4x6RX395dAQNvnAE6gbvlYWUWFq5k519dDHt6V3lS7NcP1YaM1d;
+    }
+}
--- net/minecraft/src/SpawnerAnimals.java
+++ net/minecraft/src/SpawnerAnimals.java
@@ -10,112 +10,112 @@
 	private Class[] entities;
 	private Set eligibleChunksForSpawning = new HashSet();
 
-	public SpawnerAnimals(int var1, Class var2, Class[] var3) {
-		this.maxSpawns = var1;
-		this.entityType = var2;
-		this.entities = var3;
+	public SpawnerAnimals(int integer, Class class2, Class[] arr) {
+		this.maxSpawns = integer;
+		this.entityType = class2;
+		this.entities = arr;
 	}
 
-	public void onUpdate(World var1) {
-		int var2 = var1.countEntities(this.entityType);
-		if(var2 < this.maxSpawns) {
-			for(int var3 = 0; var3 < 3; ++var3) {
-				this.performSpawning(var1, 1, (IProgressUpdate)null);
+	public void onUpdate(World vg) {
+		int i2 = vg.countEntities(this.entityType);
+		if(i2 < this.maxSpawns) {
+			for(int i3 = 0; i3 < 3; ++i3) {
+				this.performSpawning(vg, 1, (IProgressUpdate)null);
 			}
 		}
 
 	}
 
-	protected ChunkPosition getRandomSpawningPointInChunk(World var1, int var2, int var3) {
-		int var4 = var2 + var1.rand.nextInt(16);
-		int var5 = var1.rand.nextInt(128);
-		int var6 = var3 + var1.rand.nextInt(16);
-		return new ChunkPosition(var4, var5, var6);
+	protected ChunkPosition getRandomSpawningPointInChunk(World vg, int integer2, int integer3) {
+		int i4 = integer2 + vg.rand.nextInt(16);
+		int i5 = vg.rand.nextInt(128);
+		int i6 = integer3 + vg.rand.nextInt(16);
+		return new ChunkPosition(i4, i5, i6);
 	}
 
-	private int performSpawning(World var1, int var2, IProgressUpdate var3) {
+	private int performSpawning(World vg, int integer, IProgressUpdate na) {
 		this.eligibleChunksForSpawning.clear();
 
-		int var4;
-		int var7;
-		int var9;
-		int var10;
-		for(var4 = 0; var4 < var1.playerEntities.size(); ++var4) {
-			EntityPlayer var5 = (EntityPlayer)var1.playerEntities.get(var4);
-			int var6 = MathHelper.floor_double(var5.posX / 16.0D);
-			var7 = MathHelper.floor_double(var5.posZ / 16.0D);
-			byte var8 = 4;
+		int i4;
+		int i5;
+		int i6;
+		int i7;
+		for(i4 = 0; i4 < vg.playerEntities.size(); ++i4) {
+			EntityPlayer entityPlayer8 = (EntityPlayer)vg.playerEntities.get(i4);
+			int i9 = MathHelper.floor_double(entityPlayer8.posX / 16.0D);
+			i5 = MathHelper.floor_double(entityPlayer8.posZ / 16.0D);
+			byte b10 = 4;
 
-			for(var9 = -var8; var9 <= var8; ++var9) {
-				for(var10 = -var8; var10 <= var8; ++var10) {
-					this.eligibleChunksForSpawning.add(new ChunkCoordIntPair(var9 + var6, var10 + var7));
+			for(i6 = -b10; i6 <= b10; ++i6) {
+				for(i7 = -b10; i7 <= b10; ++i7) {
+					this.eligibleChunksForSpawning.add(new ChunkCoordIntPair(i6 + i9, i7 + i5));
 				}
 			}
 		}
 
-		var4 = 0;
-		Iterator var26 = this.eligibleChunksForSpawning.iterator();
+		i4 = 0;
+		Iterator iterator28 = this.eligibleChunksForSpawning.iterator();
 
 		while(true) {
-			ChunkCoordIntPair var27;
+			ChunkCoordIntPair chunkCoordIntPair29;
 			do {
-				if(!var26.hasNext()) {
-					return var4;
+				if(!iterator28.hasNext()) {
+					return i4;
 				}
 
-				var27 = (ChunkCoordIntPair)var26.next();
-			} while(var1.rand.nextInt(10) != 0);
-
-			var7 = var1.rand.nextInt(this.entities.length);
-			ChunkPosition var28 = this.getRandomSpawningPointInChunk(var1, var27.chunkXPos * 16, var27.chunkZPos * 16);
-			var9 = var28.x;
-			var10 = var28.y;
-			int var11 = var28.z;
-			if(var1.isBlockNormalCube(var9, var10, var11)) {
-				return 0;
-			}
-
-			if(var1.getBlockMaterial(var9, var10, var11) != Material.air) {
-				return 0;
-			}
-
-			for(int var12 = 0; var12 < 3; ++var12) {
-				int var13 = var9;
-				int var14 = var10;
-				int var15 = var11;
-				byte var16 = 6;
-
-				for(int var17 = 0; var17 < 2; ++var17) {
-					var13 += var1.rand.nextInt(var16) - var1.rand.nextInt(var16);
-					var14 += var1.rand.nextInt(1) - var1.rand.nextInt(1);
-					var15 += var1.rand.nextInt(var16) - var1.rand.nextInt(var16);
-					if(var1.isBlockNormalCube(var13, var14 - 1, var15) && !var1.isBlockNormalCube(var13, var14, var15) && !var1.getBlockMaterial(var13, var14, var15).getIsLiquid() && !var1.isBlockNormalCube(var13, var14 + 1, var15)) {
-						float var18 = (float)var13 + 0.5F;
-						float var19 = (float)var14;
-						float var20 = (float)var15 + 0.5F;
-						if(var1.getClosestPlayer((double)var18, (double)var19, (double)var20, 24.0D) == null) {
-							float var21 = var18 - (float)var1.spawnX;
-							float var22 = var19 - (float)var1.spawnY;
-							float var23 = var20 - (float)var1.spawnZ;
-							float var24 = var21 * var21 + var22 * var22 + var23 * var23;
-							if(var24 >= 576.0F) {
-								EntityLiving var29;
+				chunkCoordIntPair29 = (ChunkCoordIntPair)iterator28.next();
+			} while(vg.rand.nextInt(10) != 0);
+
+			i5 = vg.rand.nextInt(this.entities.length);
+			ChunkPosition chunkPosition30 = this.getRandomSpawningPointInChunk(vg, chunkCoordIntPair29.chunkXPos * 16, chunkCoordIntPair29.chunkZPos * 16);
+			i6 = chunkPosition30.x;
+			i7 = chunkPosition30.y;
+			int i11 = chunkPosition30.z;
+			if(vg.isBlockNormalCube(i6, i7, i11)) {
+				return 0;
+			}
+
+			if(vg.getBlockMaterial(i6, i7, i11) != Material.air) {
+				return 0;
+			}
+
+			for(int i12 = 0; i12 < 3; ++i12) {
+				int i13 = i6;
+				int i14 = i7;
+				int i15 = i11;
+				byte b16 = 6;
+
+				for(int i17 = 0; i17 < 2; ++i17) {
+					i13 += vg.rand.nextInt(b16) - vg.rand.nextInt(b16);
+					i14 += vg.rand.nextInt(1) - vg.rand.nextInt(1);
+					i15 += vg.rand.nextInt(b16) - vg.rand.nextInt(b16);
+					if(vg.isBlockNormalCube(i13, i14 - 1, i15) && !vg.isBlockNormalCube(i13, i14, i15) && !vg.getBlockMaterial(i13, i14, i15).getIsLiquid() && !vg.isBlockNormalCube(i13, i14 + 1, i15)) {
+						float f18 = (float)i13 + 0.5F;
+						float f19 = (float)i14;
+						float f20 = (float)i15 + 0.5F;
+						if(vg.getClosestPlayer((double)f18, (double)f19, (double)f20, 24.0D) == null) {
+							float f21 = f18 - (float)vg.spawnX;
+							float f22 = f19 - (float)vg.spawnY;
+							float f23 = f20 - (float)vg.spawnZ;
+							float f24 = f21 * f21 + f22 * f22 + f23 * f23;
+							if(f24 >= 576.0F) {
+								EntityLiving entityLiving25;
 								try {
-									var29 = (EntityLiving)this.entities[var7].getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
-								} catch (Exception var25) {
-									var25.printStackTrace();
-									return var4;
+									entityLiving25 = (EntityLiving)this.entities[i5].getConstructor(new Class[]{World.class}).newInstance(new Object[]{vg});
+								} catch (Exception exception27) {
+									exception27.printStackTrace();
+									return i4;
 								}
 
-								var29.setLocationAndAngles((double)var18, (double)var19, (double)var20, var1.rand.nextFloat() * 360.0F, 0.0F);
-								if(var29.getCanSpawnHere()) {
-									++var4;
-									var1.spawnEntityInWorld(var29);
-									if(var29 instanceof EntitySpider && var1.rand.nextInt(100) == 0) {
-										EntitySkeleton var30 = new EntitySkeleton(var1);
-										var30.setLocationAndAngles((double)var18, (double)var19, (double)var20, var29.rotationYaw, 0.0F);
-										var1.spawnEntityInWorld(var30);
-										var30.mountEntity(var29);
+								entityLiving25.setLocationAndAngles((double)f18, (double)f19, (double)f20, vg.rand.nextFloat() * 360.0F, 0.0F);
+								if(entityLiving25.getCanSpawnHere()) {
+									++i4;
+									vg.spawnEntityInWorld(entityLiving25);
+									if(entityLiving25 instanceof EntitySpider && vg.rand.nextInt(100) == 0) {
+										EntitySkeleton entitySkeleton26 = new EntitySkeleton(vg);
+										entitySkeleton26.setLocationAndAngles((double)f18, (double)f19, (double)f20, entityLiving25.rotationYaw, 0.0F);
+										vg.spawnEntityInWorld(entitySkeleton26);
+										entitySkeleton26.mountEntity(entityLiving25);
 									}
 								}
 							}
--- net/minecraft/src/ModelZombie.java
+++ net/minecraft/src/ModelZombie.java
@@ -1,21 +1,21 @@
 package net.minecraft.src;
 
 public class ModelZombie extends ModelBiped {
-	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
-		super.setRotationAngles(var1, var2, var3, var4, var5, var6);
-		float var7 = MathHelper.sin(this.swingProgress * (float)Math.PI);
-		float var8 = MathHelper.sin((1.0F - (1.0F - this.swingProgress) * (1.0F - this.swingProgress)) * (float)Math.PI);
+	public void setRotationAngles(float float1, float float2, float float3, float float4, float float5, float float6) {
+		super.setRotationAngles(float1, float2, float3, float4, float5, float6);
+		float f7 = MathHelper.sin(this.swingProgress * (float)Math.PI);
+		float f8 = MathHelper.sin((1.0F - (1.0F - this.swingProgress) * (1.0F - this.swingProgress)) * (float)Math.PI);
 		this.bipedRightArm.rotateAngleZ = 0.0F;
 		this.bipedLeftArm.rotateAngleZ = 0.0F;
-		this.bipedRightArm.rotateAngleY = -(0.1F - var7 * 0.6F);
-		this.bipedLeftArm.rotateAngleY = 0.1F - var7 * 0.6F;
-		this.bipedRightArm.rotateAngleX = (float)Math.PI * -0.5F;
-		this.bipedLeftArm.rotateAngleX = (float)Math.PI * -0.5F;
-		this.bipedRightArm.rotateAngleX -= var7 * 1.2F - var8 * 0.4F;
-		this.bipedLeftArm.rotateAngleX -= var7 * 1.2F - var8 * 0.4F;
-		this.bipedRightArm.rotateAngleZ += MathHelper.cos(var3 * 0.09F) * 0.05F + 0.05F;
-		this.bipedLeftArm.rotateAngleZ -= MathHelper.cos(var3 * 0.09F) * 0.05F + 0.05F;
-		this.bipedRightArm.rotateAngleX += MathHelper.sin(var3 * 0.067F) * 0.05F;
-		this.bipedLeftArm.rotateAngleX -= MathHelper.sin(var3 * 0.067F) * 0.05F;
+		this.bipedRightArm.rotateAngleY = -(0.1F - f7 * 0.6F);
+		this.bipedLeftArm.rotateAngleY = 0.1F - f7 * 0.6F;
+		this.bipedRightArm.rotateAngleX = -1.5707964F;
+		this.bipedLeftArm.rotateAngleX = -1.5707964F;
+		this.bipedRightArm.rotateAngleX -= f7 * 1.2F - f8 * 0.4F;
+		this.bipedLeftArm.rotateAngleX -= f7 * 1.2F - f8 * 0.4F;
+		this.bipedRightArm.rotateAngleZ += MathHelper.cos(float3 * 0.09F) * 0.05F + 0.05F;
+		this.bipedLeftArm.rotateAngleZ -= MathHelper.cos(float3 * 0.09F) * 0.05F + 0.05F;
+		this.bipedRightArm.rotateAngleX += MathHelper.sin(float3 * 0.067F) * 0.05F;
+		this.bipedLeftArm.rotateAngleX -= MathHelper.sin(float3 * 0.067F) * 0.05F;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockEssenceFountain.java
@@ -1,0 +1,71 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockEssenceFountain extends BlockContainer {
+	public BlockEssenceFountain(int id, Material material) {
+		super(id, material);
+		this.blockIndexInTexture = 1;
+		this.setTickOnLoad(true);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.25F, 1.0F);
+	}
+
+	protected TileEntity getBlockEntity() {
+		return new TileEntityEssenceFountain();
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 14;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return true;
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		TileEntityEssenceFountain tileEntityEssenceFountain6 = (TileEntityEssenceFountain)world.getBlockTileEntity(x, y, z);
+		if(tileEntityEssenceFountain6.getStackInSlot(0).stackSize != 0) {
+			if(++tileEntityEssenceFountain6.counter >= 2 && random.nextInt(3) == 0) {
+				if(tileEntityEssenceFountain6.getStackInSlot(0).stackSize == 64) {
+					world.markBlocksDirty(x, y, z, x, y, z);
+				}
+
+				tileEntityEssenceFountain6.decrStackSize(0, 1);
+				tileEntityEssenceFountain6.counter = 0;
+				if(tileEntityEssenceFountain6.getStackInSlot(0).stackSize == 0) {
+					for(int i7 = 0; i7 < 12; ++i7) {
+						world.spawnParticle("smoke", (double)x + random.nextDouble(), (double)y + 0.4D, (double)z + random.nextDouble(), 0.0D, 0.1D, 0.0D);
+						world.markBlocksDirty(x, y, z, x, y, z);
+					}
+				}
+			}
+
+		}
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+		TileEntityEssenceFountain tileEntityEssenceFountain6 = (TileEntityEssenceFountain)worldObj.getBlockTileEntity(x, y, z);
+		if(tileEntityEssenceFountain6.getStackInSlot(0).stackSize != 0) {
+			if(rand.nextInt(2) == 0) {
+				worldObj.spawnParticle("snowballpoof", (double)x + rand.nextDouble(), (double)y + 0.4D, (double)z + rand.nextDouble(), 0.0D, 0.0D, 0.0D);
+			}
+
+			if(rand.nextInt(3) == 0) {
+				for(int i7 = y + 1; i7 < Math.min(128, tileEntityEssenceFountain6.getStackInSlot(0).stackSize + y) && worldObj.getBlockId(x, i7, z) == 0; ++i7) {
+					if(rand.nextInt(6) == 0) {
+						worldObj.spawnParticle("splash", (double)x + rand.nextDouble(), (double)i7 + rand.nextDouble(), (double)z + rand.nextDouble(), 0.0D, 0.0D, 0.0D);
+					}
+				}
+			}
+
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/ItemHoursLongPastVI.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+public class ItemHoursLongPastVI extends Item {
+	private int field_9431_6c8m4a2A82WE6Y6dp5kLAR23JJoR713x6HH39dB5eBiJU0Ux4PC29w4uT4D8 = 804;
+
+	public ItemHoursLongPastVI(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		worldObj.playSoundAtEntity(entityPlayer, "ext.notif", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+		GuiInGameUnknownClass2 guiInGameUnknownClass24 = (GuiInGameUnknownClass2)InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.field_11177_7Zksb7i503i87T27QXh6g1K1pS0mrm03cH6J60Ws3B3hciqhuD9PIOw861xp.peek();
+		if(guiInGameUnknownClass24 == null || guiInGameUnknownClass24.field_8627_0ZmECs21Yya5NZUsnBNbB5tPFhkwONMzlzVXHX4jsV5aynDc020B97BLqocx != this.field_9431_6c8m4a2A82WE6Y6dp5kLAR23JJoR713x6HH39dB5eBiJU0Ux4PC29w4uT4D8) {
+			InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11171_604vK63ksNcNlyaekc36K9YTmY8326K6noo7h77989I2TsYQ61KM5M25Nii9("Hours Long Past IV \nBut far down below, the Old World still lives. Flowers bloom\n with a light stolen from them so long ago\n Moss and fungi grow as trees - just like they would before.\nAnd they will, too, be seen again one day.", 20000, this.field_9431_6c8m4a2A82WE6Y6dp5kLAR23JJoR713x6HH39dB5eBiJU0Ux4PC29w4uT4D8);
+		}
+
+		return itemStack;
+	}
+}
--- /dev/null
+++ net/minecraft/src/ExtEvents.java
@@ -1,0 +1,168 @@
+package net.minecraft.src;
+
+import java.util.Iterator;
+import java.util.List;
+import java.util.Random;
+
+import org.lwjgl.input.Keyboard;
+
+public class ExtEvents {
+	public static Random rand = new Random();
+	public static boolean bossfightInProgress = false;
+	public static String bossname = "";
+	public static EntityGiantBoss bossRef = null;
+
+	public static void PlayerMoveChunkgroup(EntityPlayer gb, World vg) {
+		if(!vg.multiplayerWorld) {
+			if(ScreenDebugMenu.dbg_conf_spawnShadowPlayers && rand.nextInt(100) < 3) {
+				Spawn(gb, vg);
+			}
+
+			if(rand.nextInt(100) > 94 || Keyboard.isKeyDown(Keyboard.KEY_END)) {
+				CueSpawnBossFrom((int)gb.posX, (int)gb.posZ, vg);
+			}
+		}
+
+		if(gb == InputHandler.mc.thePlayer) {
+			InputHandler.mc.ingameGUI.ResetNamegen();
+		}
+
+	}
+
+	public static void WorldTick(World vg) {
+		if(bossfightInProgress && (bossRef == null || bossRef.isDead || bossRef.worldObj != vg)) {
+			bossfightInProgress = false;
+			bossRef = null;
+		}
+
+	}
+
+	public static void Spawn(EntityPlayer gb, World vg) {
+		EntityShadowPlayer entityShadowPlayer2 = new EntityShadowPlayer(vg);
+		entityShadowPlayer2.spawnedThisCycle = true;
+		int i3 = (int)(gb.posX + (double)((rand.nextBoolean() ? 1 : -1) * (20 + rand.nextInt(60))));
+		int i4 = (int)gb.posY;
+
+		int i5;
+		for(i5 = (int)(gb.posZ + (double)((rand.nextBoolean() ? 1 : -1) * (20 + rand.nextInt(60)))); vg.getBlockId(i3, i4, i5) != 0 || vg.getBlockId(i3, i4 + 1, i5) != 0; ++i4) {
+		}
+
+		while(vg.getBlockId(i3, i4 - 1, i5) == 0) {
+			--i4;
+		}
+
+		entityShadowPlayer2.setPosition((double)i3, (double)(i4 + 2), (double)i5);
+		vg.spawnEntityInWorld(entityShadowPlayer2);
+	}
+
+	public static void func_11856_0t7OQN0wYClKPyfCdKW9g3t0MW94ScRD4ffzAB4MaIwS6K3mB51a67GSmU0B(EntityPlayer gb, World vg) {
+		EntityShadowPlayer entityShadowPlayer2 = new EntityShadowPlayer(vg);
+		entityShadowPlayer2.spawnedThisCycle = true;
+		int i3 = (int)gb.posX;
+		int i4 = (int)gb.posY;
+		int i5 = (int)gb.posZ;
+		entityShadowPlayer2.setPosition((double)i3, (double)(i4 + 2), (double)i5);
+		vg.spawnEntityInWorld(entityShadowPlayer2);
+	}
+
+	public static EntityGiantBoss SpawnGiant(double double1, double double2, double double3, World vg) {
+		EntityGiantBoss entityGiantBoss7 = new EntityGiantBoss(vg, (int)vg.GetMilestone());
+		entityGiantBoss7.setLocationAndAngles(double1, double2, double3, rand.nextFloat() * 360.0F, 0.0F);
+		InputHandler.mc.theWorld.spawnEntityInWorld(entityGiantBoss7);
+		return entityGiantBoss7;
+	}
+
+	public static void CueSpawnBossFrom(int integer1, int integer2, World vg) {
+		if(!vg.multiplayerWorld && !bossfightInProgress) {
+			Random random3 = new Random();
+			int i4 = integer1 + 32 * (random3.nextInt(3) - 1);
+			int i5 = integer2 + 32 * (random3.nextInt(3) - 1);
+			if(i4 == integer1 && i5 == integer2) {
+				i5 += 32;
+			}
+
+			bossname = "Giant of " + GuiIngame.Namegen2(vg.randomSeed, i4 / 32, i5 / 32);
+			bossRef = SpawnGiant((double)i4, 100.0D, (double)i5, vg);
+			bossfightInProgress = true;
+		}
+
+	}
+
+	public static void GiantBossKilled(EntityGiantBoss or) {
+		bossfightInProgress = false;
+		bossRef = null;
+		bossname = "";
+	}
+
+	public static void PlayerMoveXZBlock(EntityPlayer gb, World vg) {
+		if(vg instanceof FreerunWorld) {
+			List list2 = ((FreerunWorld)vg).func_7517_8oADBp42n4G2Ly6U1WLv70n6VyS2bkokzo8dF7ayUqDb1A6ofY86pUJA8mf8();
+			if(list2 != null) {
+				Iterator iterator3 = list2.iterator();
+
+				while(iterator3.hasNext()) {
+					HandlerSetCheckpointUnknownClass handlerSetCheckpointUnknownClass4 = (HandlerSetCheckpointUnknownClass)iterator3.next();
+					if(handlerSetCheckpointUnknownClass4.func_10085_7D2n8t3Lap70612qvby3qIC226DCKo8Nk73Nno70193Sp6c96td8erpx97bW(gb)) {
+						InputHandler.field_9756_3t1caBu1CS15veqc01ypG4DqCRJ91Rw6b5pITOU21064uqb1k1F7E6SIPrCO = true;
+						InputHandler.field_9755_40jW6A12nU5Bx0XJVnftRWc1g168MkyD0Hs1G3PDx769g8p92eI4LUrp43lZ = handlerSetCheckpointUnknownClass4;
+						InputHandler.field_9770_2V6p0RtqpP2jB5MbKC4kOM794OwxL5Fl82SMBE30e16wdk1Iemyry4Fh4Dt6 = gb;
+					}
+				}
+			}
+		}
+
+		if(vg instanceof ZMWorld) {
+			int[] i14 = new int[]{0, 0, -1, 0, 1, 0, 0, -1, 0, 1, -1, -1, 1, 1, -1, 1, 1, -1};
+			int i17 = (int)Math.floor(gb.posX);
+			int i20 = (int)Math.ceil(gb.posY);
+			int i5 = (int)Math.floor(gb.posZ);
+			((EntityPlayerZombieModeClient)gb).field_9097_867sEKNEsa45Xq4Etlk5s449h7UUOWVcX6nYd2PGjFy373Y2PXcol521PBg2 = null;
+			((EntityPlayerZombieModeClient)gb).field_9093_8pX3Foh9nnqOBZGkAhkc659OKcv5h23UrLcQ0x07ZRU1yOwY57fY6vz12UYR = null;
+
+			for(int i6 = 0; i6 != i14.length / 2; ++i6) {
+				for(int i7 = -2; i7 != 1; ++i7) {
+					int i8 = i17 + i14[i6 * 2];
+					int i9 = i20 + i7;
+					int i10 = i5 + i14[i6 * 2 + 1];
+					int i11 = ((ZMWorld)vg).getBlockId(i8, i9, i10);
+					if(i11 != 0) {
+						Block block12 = Block.blocksList[i11];
+						if(block12 instanceof BlockUnknownInterface) {
+							int i13 = ((BlockUnknownInterface)block12).func_8288_98t8S89tFW42rGL9ALNhVV7sJ5qB3j8Z10bg69FoU68e30R380Rp4L4Dn5kC();
+							if(i13 != -1) {
+								((EntityPlayerZombieModeClient)gb).field_9097_867sEKNEsa45Xq4Etlk5s449h7UUOWVcX6nYd2PGjFy373Y2PXcol521PBg2 = (BlockUnknownInterface)block12;
+								((EntityPlayerZombieModeClient)gb).field_9093_8pX3Foh9nnqOBZGkAhkc659OKcv5h23UrLcQ0x07ZRU1yOwY57fY6vz12UYR = new XYZv((long)i8, (long)i9, (long)i10);
+							}
+						}
+					}
+				}
+			}
+
+			((ZMWorld)vg).func_7549_44O8yX39q3gNk27615OXRQ532BD73gQDG1C0XB575HgYp5YVG7N00ux31ql9(gb);
+		}
+
+		Iterator iterator15 = vg.field_7498_65957fU9nGL5PA2e96ZOK3ePBveSt2ceA9Glj10PC2Jo5s0wI21ix69flng2.iterator();
+
+		while(iterator15.hasNext()) {
+			HandlerSetCheckpointUnknownClass handlerSetCheckpointUnknownClass18 = (HandlerSetCheckpointUnknownClass)iterator15.next();
+			if(handlerSetCheckpointUnknownClass18.func_10085_7D2n8t3Lap70612qvby3qIC226DCKo8Nk73Nno70193Sp6c96td8erpx97bW(gb)) {
+				InputHandler.field_9756_3t1caBu1CS15veqc01ypG4DqCRJ91Rw6b5pITOU21064uqb1k1F7E6SIPrCO = true;
+				InputHandler.field_9755_40jW6A12nU5Bx0XJVnftRWc1g168MkyD0Hs1G3PDx769g8p92eI4LUrp43lZ = handlerSetCheckpointUnknownClass18;
+				InputHandler.field_9770_2V6p0RtqpP2jB5MbKC4kOM794OwxL5Fl82SMBE30e16wdk1Iemyry4Fh4Dt6 = gb;
+			}
+		}
+
+		if(!vg.multiplayerWorld && vg.difficultySetting != 0 && !(vg instanceof ZMWorld) && !(vg instanceof FreerunWorld) && gb.observerCooldown <= 0L && gb instanceof EntityPlayerSP && rand.nextInt(100) < 5) {
+			XYZv xYZv16 = new XYZv((long)gb.posX, (long)gb.posY, (long)gb.posZ);
+			long j19 = vg.worldTime % 24000L;
+			if((double)vg.getBrightness((int)xYZv16.x, (int)xYZv16.y, (int)xYZv16.z) < 0.2D && j19 >= 14000L && j19 <= 22800L) {
+				EntityObserver entityObserver21 = new EntityObserver(vg);
+				entityObserver21.setPosition((double)xYZv16.x, (double)(xYZv16.y + 2L), (double)xYZv16.z);
+				vg.spawnEntityInWorld(entityObserver21);
+				vg.playSoundAtEntity(gb, "ext.obvr_spawn", 1.0F, 1.0F);
+				gb.observerCooldown = 5500L;
+			}
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockFireOld2.java
@@ -1,0 +1,224 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockFireOld2 extends Block {
+	private int[] field_8356_064Q9Z2cEh2dH1cNb2g5urp8z80Vae941DOOD757H839J0r4ZzA2Pt74B8pN = new int[32767];
+	private int[] field_8357_019Uc9q8fiF1aTHYJsQuU9Jr5L5ljf7Z82n2063KcKG8u0kib8C7Q20N9KVe = new int[32767];
+
+	protected BlockFireOld2(int integer1, int integer2) {
+		super(integer1, integer2, Material.fire);
+		this.func_8352_7Z212n48NiXMyCofFqitKG3edYMY2HWc5fBaSQd5lWYR2Sp070zg98U67V3W(Block.planks.blockID, 5, 20);
+		this.func_8352_7Z212n48NiXMyCofFqitKG3edYMY2HWc5fBaSQd5lWYR2Sp070zg98U67V3W(Block.wood.blockID, 5, 5);
+		this.func_8352_7Z212n48NiXMyCofFqitKG3edYMY2HWc5fBaSQd5lWYR2Sp070zg98U67V3W(Block.leaves.blockID, 30, 60);
+		this.func_8352_7Z212n48NiXMyCofFqitKG3edYMY2HWc5fBaSQd5lWYR2Sp070zg98U67V3W(Block.bookshelf.blockID, 30, 20);
+		this.func_8352_7Z212n48NiXMyCofFqitKG3edYMY2HWc5fBaSQd5lWYR2Sp070zg98U67V3W(Block.tnt.blockID, 15, 100);
+		this.func_8352_7Z212n48NiXMyCofFqitKG3edYMY2HWc5fBaSQd5lWYR2Sp070zg98U67V3W(Block.cloth.blockID, 30, 60);
+		this.setTickOnLoad(true);
+	}
+
+	private void func_8352_7Z212n48NiXMyCofFqitKG3edYMY2HWc5fBaSQd5lWYR2Sp070zg98U67V3W(int integer1, int integer2, int integer3) {
+		this.field_8356_064Q9Z2cEh2dH1cNb2g5urp8z80Vae941DOOD757H839J0r4ZzA2Pt74B8pN[integer1] = integer2;
+		this.field_8357_019Uc9q8fiF1aTHYJsQuU9Jr5L5ljf7Z82n2063KcKG8u0kib8C7Q20N9KVe[integer1] = integer3;
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		return null;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 3;
+	}
+
+	public int quantityDropped(Random random) {
+		return 0;
+	}
+
+	public int tickRate() {
+		return 10;
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if(i6 < 15) {
+			world.setBlockMetadataWithNotify(x, y, z, i6 + 1);
+			world.scheduleBlockUpdate(x, y, z, this.blockID);
+		}
+
+		if(!this.func_8354_75avOdXJd9YwI3L0G15wKvOuuCJ2R0I30ejp4VpwoQiRj5hC145X882Eoas4(world, x, y, z)) {
+			if(!world.isBlockNormalCube(x, y - 1, z) || i6 > 3) {
+				world.setBlockWithNotify(x, y, z, 0);
+			}
+		} else if(!this.func_8350_8O3kVuPnAs3h2Kx4b8R9skbm8A5w9UV30W0BE92lQ5zOiggZ897bv2Y6RyA0(world, x, y - 1, z) && i6 == 15 && random.nextInt(4) == 0) {
+			world.setBlockWithNotify(x, y, z, 0);
+		} else if(i6 % 2 == 0 && i6 > 2) {
+			this.func_8353_29gKfL9t3ANlzP5mtP92TA7l24RI160YGGY68k081p3K9a8W3rOSD22Ptzil(world, x + 1, y, z, 300, random);
+			this.func_8353_29gKfL9t3ANlzP5mtP92TA7l24RI160YGGY68k081p3K9a8W3rOSD22Ptzil(world, x - 1, y, z, 300, random);
+			this.func_8353_29gKfL9t3ANlzP5mtP92TA7l24RI160YGGY68k081p3K9a8W3rOSD22Ptzil(world, x, y - 1, z, 200, random);
+			this.func_8353_29gKfL9t3ANlzP5mtP92TA7l24RI160YGGY68k081p3K9a8W3rOSD22Ptzil(world, x, y + 1, z, 250, random);
+			this.func_8353_29gKfL9t3ANlzP5mtP92TA7l24RI160YGGY68k081p3K9a8W3rOSD22Ptzil(world, x, y, z - 1, 300, random);
+			this.func_8353_29gKfL9t3ANlzP5mtP92TA7l24RI160YGGY68k081p3K9a8W3rOSD22Ptzil(world, x, y, z + 1, 300, random);
+
+			for(int i7 = x - 1; i7 <= x + 1; ++i7) {
+				for(int i8 = z - 1; i8 <= z + 1; ++i8) {
+					for(int i9 = y - 1; i9 <= y + 4; ++i9) {
+						if(i7 != x || i9 != y || i8 != z) {
+							int i10 = 100;
+							if(i9 > y + 1) {
+								i10 += (i9 - (y + 1)) * 100;
+							}
+
+							int i11 = this.func_8355_42hRnbxCf6OY0Z56rbmq105B75461JtJD9SMQ2BEIlJeekIwHwxDlS4S2FlN(world, i7, i9, i8);
+							if(i11 > 0 && random.nextInt(i10) <= i11) {
+								world.setBlockWithNotify(i7, i9, i8, this.blockID);
+							}
+						}
+					}
+				}
+			}
+		}
+
+	}
+
+	private void func_8353_29gKfL9t3ANlzP5mtP92TA7l24RI160YGGY68k081p3K9a8W3rOSD22Ptzil(World vg, int integer2, int integer3, int integer4, int integer5, Random random) {
+		int i7 = this.field_8357_019Uc9q8fiF1aTHYJsQuU9Jr5L5ljf7Z82n2063KcKG8u0kib8C7Q20N9KVe[vg.getBlockId(integer2, integer3, integer4)];
+		if(random.nextInt(integer5) < i7) {
+			boolean z8 = vg.getBlockId(integer2, integer3, integer4) == Block.tnt.blockID;
+			if(random.nextInt(2) == 0) {
+				vg.setBlockWithNotify(integer2, integer3, integer4, this.blockID);
+			} else {
+				vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+			}
+
+			if(z8) {
+				Block.tnt.onBlockDestroyedByPlayer(vg, integer2, integer3, integer4, 0);
+			}
+		}
+
+	}
+
+	private boolean func_8354_75avOdXJd9YwI3L0G15wKvOuuCJ2R0I30ejp4VpwoQiRj5hC145X882Eoas4(World vg, int integer2, int integer3, int integer4) {
+		return this.func_8350_8O3kVuPnAs3h2Kx4b8R9skbm8A5w9UV30W0BE92lQ5zOiggZ897bv2Y6RyA0(vg, integer2 + 1, integer3, integer4) ? true : (this.func_8350_8O3kVuPnAs3h2Kx4b8R9skbm8A5w9UV30W0BE92lQ5zOiggZ897bv2Y6RyA0(vg, integer2 - 1, integer3, integer4) ? true : (this.func_8350_8O3kVuPnAs3h2Kx4b8R9skbm8A5w9UV30W0BE92lQ5zOiggZ897bv2Y6RyA0(vg, integer2, integer3 - 1, integer4) ? true : (this.func_8350_8O3kVuPnAs3h2Kx4b8R9skbm8A5w9UV30W0BE92lQ5zOiggZ897bv2Y6RyA0(vg, integer2, integer3 + 1, integer4) ? true : (this.func_8350_8O3kVuPnAs3h2Kx4b8R9skbm8A5w9UV30W0BE92lQ5zOiggZ897bv2Y6RyA0(vg, integer2, integer3, integer4 - 1) ? true : this.func_8350_8O3kVuPnAs3h2Kx4b8R9skbm8A5w9UV30W0BE92lQ5zOiggZ897bv2Y6RyA0(vg, integer2, integer3, integer4 + 1)))));
+	}
+
+	private int func_8355_42hRnbxCf6OY0Z56rbmq105B75461JtJD9SMQ2BEIlJeekIwHwxDlS4S2FlN(World vg, int integer2, int integer3, int integer4) {
+		byte b5 = 0;
+		if(vg.getBlockId(integer2, integer3, integer4) != 0) {
+			return 0;
+		} else {
+			int i6 = this.func_8351_67Za7K9F7vhGS7e86pG0eB37akuNC27rj0UYDRsbdGwZ5UceiE2sDlb4Q88h(vg, integer2 + 1, integer3, integer4, b5);
+			i6 = this.func_8351_67Za7K9F7vhGS7e86pG0eB37akuNC27rj0UYDRsbdGwZ5UceiE2sDlb4Q88h(vg, integer2 - 1, integer3, integer4, i6);
+			i6 = this.func_8351_67Za7K9F7vhGS7e86pG0eB37akuNC27rj0UYDRsbdGwZ5UceiE2sDlb4Q88h(vg, integer2, integer3 - 1, integer4, i6);
+			i6 = this.func_8351_67Za7K9F7vhGS7e86pG0eB37akuNC27rj0UYDRsbdGwZ5UceiE2sDlb4Q88h(vg, integer2, integer3 + 1, integer4, i6);
+			i6 = this.func_8351_67Za7K9F7vhGS7e86pG0eB37akuNC27rj0UYDRsbdGwZ5UceiE2sDlb4Q88h(vg, integer2, integer3, integer4 - 1, i6);
+			i6 = this.func_8351_67Za7K9F7vhGS7e86pG0eB37akuNC27rj0UYDRsbdGwZ5UceiE2sDlb4Q88h(vg, integer2, integer3, integer4 + 1, i6);
+			return i6;
+		}
+	}
+
+	public boolean isCollidable() {
+		return false;
+	}
+
+	public boolean func_8350_8O3kVuPnAs3h2Kx4b8R9skbm8A5w9UV30W0BE92lQ5zOiggZ897bv2Y6RyA0(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		return this.field_8356_064Q9Z2cEh2dH1cNb2g5urp8z80Vae941DOOD757H839J0r4ZzA2Pt74B8pN[abt.getBlockId(integer2, integer3, integer4)] > 0;
+	}
+
+	public int func_8351_67Za7K9F7vhGS7e86pG0eB37akuNC27rj0UYDRsbdGwZ5UceiE2sDlb4Q88h(World vg, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = this.field_8356_064Q9Z2cEh2dH1cNb2g5urp8z80Vae941DOOD757H839J0r4ZzA2Pt74B8pN[vg.getBlockId(integer2, integer3, integer4)];
+		return i6 > integer5 ? i6 : integer5;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y - 1, z) || this.func_8354_75avOdXJd9YwI3L0G15wKvOuuCJ2R0I30ejp4VpwoQiRj5hC145X882Eoas4(world, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(!world.isBlockNormalCube(x, y - 1, z) && !this.func_8354_75avOdXJd9YwI3L0G15wKvOuuCJ2R0I30ejp4VpwoQiRj5hC145X882Eoas4(world, x, y, z)) {
+			world.setBlockWithNotify(x, y, z, 0);
+		}
+
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		if(!world.isBlockNormalCube(x, y - 1, z) && !this.func_8354_75avOdXJd9YwI3L0G15wKvOuuCJ2R0I30ejp4VpwoQiRj5hC145X882Eoas4(world, x, y, z)) {
+			world.setBlockWithNotify(x, y, z, 0);
+		} else {
+			world.scheduleBlockUpdate(x, y, z, this.blockID);
+		}
+
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+		if(rand.nextInt(24) == 0) {
+			worldObj.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "fire.fire", 1.0F + rand.nextFloat(), rand.nextFloat() * 0.7F + 0.3F);
+		}
+
+		int i6;
+		float f7;
+		float f8;
+		float f9;
+		if(!worldObj.isBlockNormalCube(x, y - 1, z) && !Block.fire.canBlockCatchFire(worldObj, x, y - 1, z)) {
+			if(Block.fire.canBlockCatchFire(worldObj, x - 1, y, z)) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					f7 = (float)x + rand.nextFloat() * 0.1F;
+					f8 = (float)y + rand.nextFloat();
+					f9 = (float)z + rand.nextFloat();
+					worldObj.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(Block.fire.canBlockCatchFire(worldObj, x + 1, y, z)) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					f7 = (float)(x + 1) - rand.nextFloat() * 0.1F;
+					f8 = (float)y + rand.nextFloat();
+					f9 = (float)z + rand.nextFloat();
+					worldObj.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(Block.fire.canBlockCatchFire(worldObj, x, y, z - 1)) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					f7 = (float)x + rand.nextFloat();
+					f8 = (float)y + rand.nextFloat();
+					f9 = (float)z + rand.nextFloat() * 0.1F;
+					worldObj.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(Block.fire.canBlockCatchFire(worldObj, x, y, z + 1)) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					f7 = (float)x + rand.nextFloat();
+					f8 = (float)y + rand.nextFloat();
+					f9 = (float)(z + 1) - rand.nextFloat() * 0.1F;
+					worldObj.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(Block.fire.canBlockCatchFire(worldObj, x, y + 1, z)) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					f7 = (float)x + rand.nextFloat();
+					f8 = (float)(y + 1) - rand.nextFloat() * 0.1F;
+					f9 = (float)z + rand.nextFloat();
+					worldObj.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+		} else {
+			for(i6 = 0; i6 < 3; ++i6) {
+				f7 = (float)x + rand.nextFloat();
+				f8 = (float)y + rand.nextFloat() * 0.5F + 0.5F;
+				f9 = (float)z + rand.nextFloat();
+				worldObj.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+			}
+		}
+
+	}
+}
--- net/minecraft/src/ThreadRunIsoClient.java
+++ net/minecraft/src/ThreadRunIsoClient.java
@@ -1,10 +1,10 @@
 package net.minecraft.src;
 
-class ThreadRunIsoClient extends Thread {
+public class ThreadRunIsoClient extends Thread {
 	final CanvasIsomPreview isomPreview;
 
-	ThreadRunIsoClient(CanvasIsomPreview var1) {
-		this.isomPreview = var1;
+	public ThreadRunIsoClient(CanvasIsomPreview canvas) {
+		this.isomPreview = canvas;
 	}
 
 	public void run() {
@@ -13,7 +13,7 @@
 
 			try {
 				Thread.sleep(1L);
-			} catch (Exception var2) {
+			} catch (Exception exception2) {
 			}
 		}
 
--- net/minecraft/src/ItemBow.java
+++ net/minecraft/src/ItemBow.java
@@ -1,17 +1,17 @@
 package net.minecraft.src;
 
 public class ItemBow extends Item {
-	public ItemBow(int var1) {
-		super(var1);
+	public ItemBow(int itemID) {
+		super(itemID);
 		this.maxStackSize = 1;
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		if(var3.inventory.consumeInventoryItem(Item.arrow.shiftedIndex)) {
-			var2.playSoundAtEntity(var3, "random.bow", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
-			var2.spawnEntityInWorld(new EntityArrow(var2, var3));
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		if(entityPlayer.inventory.consumeInventoryItem(Item.arrow.shiftedIndex)) {
+			worldObj.playSoundAtEntity(entityPlayer, "random.bow", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+			worldObj.spawnEntityInWorld(new EntityArrow(worldObj, entityPlayer));
 		}
 
-		return var1;
+		return itemStack;
 	}
 }
--- net/minecraft/src/TextureLavaFlowFX.java
+++ net/minecraft/src/TextureLavaFlowFX.java
@@ -14,72 +14,76 @@
 
 	public void onTick() {
 		++this.tickCounter;
-
-		int var2;
-		float var3;
-		int var5;
-		int var6;
-		int var7;
-		int var8;
-		int var9;
-		for(int var1 = 0; var1 < 16; ++var1) {
-			for(var2 = 0; var2 < 16; ++var2) {
-				var3 = 0.0F;
-				int var4 = (int)(MathHelper.sin((float)var2 * (float)Math.PI * 2.0F / 16.0F) * 1.2F);
-				var5 = (int)(MathHelper.sin((float)var1 * (float)Math.PI * 2.0F / 16.0F) * 1.2F);
-
-				for(var6 = var1 - 1; var6 <= var1 + 1; ++var6) {
-					for(var7 = var2 - 1; var7 <= var2 + 1; ++var7) {
-						var8 = var6 + var4 & 15;
-						var9 = var7 + var5 & 15;
-						var3 += this.red[var8 + var9 * 16];
-					}
-				}
-
-				this.green[var1 + var2 * 16] = var3 / 10.0F + (this.blue[(var1 + 0 & 15) + (var2 + 0 & 15) * 16] + this.blue[(var1 + 1 & 15) + (var2 + 0 & 15) * 16] + this.blue[(var1 + 1 & 15) + (var2 + 1 & 15) * 16] + this.blue[(var1 + 0 & 15) + (var2 + 1 & 15) * 16]) / 4.0F * 0.8F;
-				this.blue[var1 + var2 * 16] += this.alpha[var1 + var2 * 16] * 0.01F;
-				if(this.blue[var1 + var2 * 16] < 0.0F) {
-					this.blue[var1 + var2 * 16] = 0.0F;
-				}
-
-				this.alpha[var1 + var2 * 16] -= 0.06F;
-				if(Math.random() < 0.005D) {
-					this.alpha[var1 + var2 * 16] = 1.5F;
-				}
-			}
-		}
-
-		float[] var11 = this.green;
-		this.green = this.red;
-		this.red = var11;
-
-		for(var2 = 0; var2 < 256; ++var2) {
-			var3 = this.red[var2 - this.tickCounter / 3 * 16 & 255] * 2.0F;
-			if(var3 > 1.0F) {
-				var3 = 1.0F;
-			}
-
-			if(var3 < 0.0F) {
-				var3 = 0.0F;
-			}
-
-			var5 = (int)(var3 * 100.0F + 155.0F);
-			var6 = (int)(var3 * var3 * 255.0F);
-			var7 = (int)(var3 * var3 * var3 * var3 * 128.0F);
-			if(this.anaglyphEnabled) {
-				var8 = (var5 * 30 + var6 * 59 + var7 * 11) / 100;
-				var9 = (var5 * 30 + var6 * 70) / 100;
-				int var10 = (var5 * 30 + var7 * 70) / 100;
-				var5 = var8;
-				var6 = var9;
-				var7 = var10;
-			}
-
-			this.imageData[var2 * 4 + 0] = (byte)var5;
-			this.imageData[var2 * 4 + 1] = (byte)var6;
-			this.imageData[var2 * 4 + 2] = (byte)var7;
-			this.imageData[var2 * 4 + 3] = -1;
-		}
-
+		if(InputHandler.mc.options.fancyGraphics != 2 || this.field_10713_88024hG6da4f4kcVfOqR8cTJ36RtCs13wB6V30Rs17vqAj14F4Cqz3neFg20) {
+			this.field_10713_88024hG6da4f4kcVfOqR8cTJ36RtCs13wB6V30Rs17vqAj14F4Cqz3neFg20 = false;
+
+			int i1;
+			float f2;
+			int i3;
+			int i4;
+			int i5;
+			int i6;
+			int i7;
+			int i9;
+			for(int i8 = 0; i8 < 16; ++i8) {
+				for(i1 = 0; i1 < 16; ++i1) {
+					f2 = 0.0F;
+					i9 = (int)(MathHelper.sin((float)i1 * (float)Math.PI * 2.0F / 16.0F) * 1.2F);
+					i3 = (int)(MathHelper.sin((float)i8 * (float)Math.PI * 2.0F / 16.0F) * 1.2F);
+
+					for(i4 = i8 - 1; i4 <= i8 + 1; ++i4) {
+						for(i5 = i1 - 1; i5 <= i1 + 1; ++i5) {
+							i6 = i4 + i9 & 15;
+							i7 = i5 + i3 & 15;
+							f2 += this.red[i6 + i7 * 16];
+						}
+					}
+
+					this.green[i8 + i1 * 16] = f2 / 10.0F + (this.blue[(i8 + 0 & 15) + (i1 + 0 & 15) * 16] + this.blue[(i8 + 1 & 15) + (i1 + 0 & 15) * 16] + this.blue[(i8 + 1 & 15) + (i1 + 1 & 15) * 16] + this.blue[(i8 + 0 & 15) + (i1 + 1 & 15) * 16]) / 4.0F * 0.8F;
+					this.blue[i8 + i1 * 16] += this.alpha[i8 + i1 * 16] * 0.01F;
+					if(this.blue[i8 + i1 * 16] < 0.0F) {
+						this.blue[i8 + i1 * 16] = 0.0F;
+					}
+
+					this.alpha[i8 + i1 * 16] -= 0.06F;
+					if(Math.random() < 0.005D) {
+						this.alpha[i8 + i1 * 16] = 1.5F;
+					}
+				}
+			}
+
+			float[] f10 = this.green;
+			this.green = this.red;
+			this.red = f10;
+
+			for(i1 = 0; i1 < 256; ++i1) {
+				f2 = this.red[i1 - this.tickCounter / 3 * 16 & 255] * 2.0F;
+				if(f2 > 1.0F) {
+					f2 = 1.0F;
+				}
+
+				if(f2 < 0.0F) {
+					f2 = 0.0F;
+				}
+
+				i3 = (int)(f2 * 100.0F + 155.0F);
+				i4 = (int)(f2 * f2 * 255.0F);
+				i5 = (int)(f2 * f2 * f2 * f2 * 128.0F);
+				if(this.anaglyphEnabled) {
+					i6 = (i3 * 30 + i4 * 59 + i5 * 11) / 100;
+					i7 = (i3 * 30 + i4 * 70) / 100;
+					i9 = (i3 * 30 + i5 * 70) / 100;
+					i3 = i6;
+					i4 = i7;
+					i5 = i9;
+				}
+
+				this.imageData[i1 * 4 + 0] = (byte)i3;
+				this.imageData[i1 * 4 + 1] = (byte)i4;
+				this.imageData[i1 * 4 + 2] = (byte)i5;
+				this.imageData[i1 * 4 + 3] = -1;
+			}
+
+		}
 	}
 }
--- net/minecraft/src/PlayerControllerMP.java
+++ net/minecraft/src/PlayerControllerMP.java
@@ -11,49 +11,49 @@
 	private float stepSoundTickCounter = 0.0F;
 	private int blockHitDelay = 0;
 	private boolean isHittingBlock = false;
-	private NetClientHandler netClientHandler;
+	public NetClientHandler netClientHandler;
 	private int currentPlayerItem = 0;
 
-	public PlayerControllerMP(Minecraft var1, NetClientHandler var2) {
-		super(var1);
-		this.netClientHandler = var2;
-	}
-
-	public void flipPlayer(EntityPlayer var1) {
-		var1.rotationYaw = -180.0F;
-	}
-
-	public boolean sendBlockRemoved(int var1, int var2, int var3, int var4) {
-		this.netClientHandler.addToSendQueue(new Packet14BlockDig(3, var1, var2, var3, var4));
-		int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
-		int var6 = this.mc.theWorld.getBlockMetadata(var1, var2, var3);
-		boolean var7 = super.sendBlockRemoved(var1, var2, var3, var4);
-		ItemStack var8 = this.mc.thePlayer.getCurrentEquippedItem();
-		if(var8 != null) {
-			var8.onDestroyBlock(var5, var1, var2, var3);
-			if(var8.stackSize == 0) {
-				var8.onItemDestroyedByUse(this.mc.thePlayer);
+	public PlayerControllerMP(Minecraft minecraft, NetClientHandler netClientHandler) {
+		super(minecraft);
+		this.netClientHandler = netClientHandler;
+	}
+
+	public void flipPlayer(EntityPlayer entityPlayer) {
+		entityPlayer.rotationYaw = -180.0F;
+	}
+
+	public boolean sendBlockRemoved(int x, int y, int z, int side) {
+		this.netClientHandler.addToSendQueue(new Packet14BlockDig(3, x, y, z, side));
+		int i5 = this.mc.theWorld.getBlockId(x, y, z);
+		int i6 = this.mc.theWorld.getBlockMetadata(x, y, z);
+		boolean z7 = super.sendBlockRemoved(x, y, z, side);
+		ItemStack itemStack8 = this.mc.thePlayer.getCurrentEquippedItem();
+		if(itemStack8 != null) {
+			itemStack8.onDestroyBlock(i5, x, y, z);
+			if(itemStack8.stackSize == 0) {
+				itemStack8.onItemDestroyedByUse(this.mc.thePlayer);
 				this.mc.thePlayer.destroyCurrentEquippedItem();
 			}
 		}
 
-		if(var7 && this.mc.thePlayer.canHarvestBlock(Block.blocksList[var5])) {
-			Block.blocksList[var5].dropBlockAsItem(this.mc.theWorld, var1, var2, var3, var6);
+		if(z7 && this.mc.thePlayer.canHarvestBlock(Block.blocksList[i5])) {
+			Block.blocksList[i5].dropBlockAsItem(this.mc.theWorld, x, y, z, i6);
 		}
 
-		return var7;
+		return z7;
 	}
 
-	public void clickBlock(int var1, int var2, int var3, int var4) {
+	public void clickBlock(int x, int y, int z, int side) {
 		this.isHittingBlock = true;
-		this.netClientHandler.addToSendQueue(new Packet14BlockDig(0, var1, var2, var3, var4));
-		int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
-		if(var5 > 0 && this.curBlockDamageMP == 0.0F) {
-			Block.blocksList[var5].onBlockClicked(this.mc.theWorld, var1, var2, var3, this.mc.thePlayer);
+		this.netClientHandler.addToSendQueue(new Packet14BlockDig(0, x, y, z, side));
+		int i5 = this.mc.theWorld.getBlockId(x, y, z);
+		if(i5 > 0 && this.curBlockDamageMP == 0.0F) {
+			Block.blocksList[i5].onBlockClicked(this.mc.theWorld, x, y, z, this.mc.thePlayer);
 		}
 
-		if(var5 > 0 && Block.blocksList[var5].blockStrength(this.mc.thePlayer) >= 1.0F) {
-			this.sendBlockRemoved(var1, var2, var3, var4);
+		if(i5 > 0 && Block.blocksList[i5].blockStrength(this.mc.thePlayer) >= 1.0F) {
+			this.sendBlockRemoved(x, y, z, side);
 		}
 
 	}
@@ -65,55 +65,54 @@
 			this.curBlockDamageMP = 0.0F;
 			this.blockHitDelay = 0;
 		}
+
 	}
 
-	public void sendBlockRemoving(int var1, int var2, int var3, int var4) {
+	public void sendBlockRemoving(int x, int y, int z, int side) {
 		this.isHittingBlock = true;
 		this.syncCurrentPlayItem();
-		this.netClientHandler.addToSendQueue(new Packet14BlockDig(1, var1, var2, var3, var4));
+		this.netClientHandler.addToSendQueue(new Packet14BlockDig(1, x, y, z, side));
 		if(this.blockHitDelay > 0) {
 			--this.blockHitDelay;
-		} else {
-			if(var1 == this.currentBlockX && var2 == this.currentBlockY && var3 == this.currentBlockZ) {
-				int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
-				if(var5 == 0) {
-					return;
-				}
-
-				Block var6 = Block.blocksList[var5];
-				this.curBlockDamageMP += var6.blockStrength(this.mc.thePlayer);
-				if(this.stepSoundTickCounter % 4.0F == 0.0F && var6 != null) {
-					this.mc.sndManager.playSound(var6.stepSound.getStepSound(), (float)var1 + 0.5F, (float)var2 + 0.5F, (float)var3 + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 8.0F, var6.stepSound.getPitch() * 0.5F);
-				}
-
-				++this.stepSoundTickCounter;
-				if(this.curBlockDamageMP >= 1.0F) {
-					this.sendBlockRemoved(var1, var2, var3, var4);
-					this.curBlockDamageMP = 0.0F;
-					this.prevBlockDamageMP = 0.0F;
-					this.stepSoundTickCounter = 0.0F;
-					this.blockHitDelay = 5;
-				}
-			} else {
+		} else if(x == this.currentBlockX && y == this.currentBlockY && z == this.currentBlockZ) {
+			int i5 = this.mc.theWorld.getBlockId(x, y, z);
+			if(i5 == 0) {
+				return;
+			}
+
+			Block block6 = Block.blocksList[i5];
+			this.curBlockDamageMP += block6.blockStrength(this.mc.thePlayer);
+			if(this.stepSoundTickCounter % 4.0F == 0.0F && block6 != null) {
+				this.mc.sndManager.playSound(block6.stepSound.getStepSound(), (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F, (block6.stepSound.getVolume() + 1.0F) / 8.0F, block6.stepSound.getPitch() * 0.5F);
+			}
+
+			++this.stepSoundTickCounter;
+			if(this.curBlockDamageMP >= 1.0F) {
+				this.sendBlockRemoved(x, y, z, side);
 				this.curBlockDamageMP = 0.0F;
 				this.prevBlockDamageMP = 0.0F;
 				this.stepSoundTickCounter = 0.0F;
-				this.currentBlockX = var1;
-				this.currentBlockY = var2;
-				this.currentBlockZ = var3;
+				this.blockHitDelay = 5;
 			}
-
+		} else {
+			this.curBlockDamageMP = 0.0F;
+			this.prevBlockDamageMP = 0.0F;
+			this.stepSoundTickCounter = 0.0F;
+			this.currentBlockX = x;
+			this.currentBlockY = y;
+			this.currentBlockZ = z;
 		}
+
 	}
 
-	public void setPartialTime(float var1) {
+	public void setPartialTime(float renderPartialTick) {
 		if(this.curBlockDamageMP <= 0.0F) {
 			this.mc.ingameGUI.damageGuiPartialTime = 0.0F;
 			this.mc.renderGlobal.damagePartialTime = 0.0F;
 		} else {
-			float var2 = this.prevBlockDamageMP + (this.curBlockDamageMP - this.prevBlockDamageMP) * var1;
-			this.mc.ingameGUI.damageGuiPartialTime = var2;
-			this.mc.renderGlobal.damagePartialTime = var2;
+			float f2 = this.prevBlockDamageMP + (this.curBlockDamageMP - this.prevBlockDamageMP) * renderPartialTick;
+			this.mc.ingameGUI.damageGuiPartialTime = f2;
+			this.mc.renderGlobal.damagePartialTime = f2;
 		}
 
 	}
@@ -122,8 +121,8 @@
 		return 4.0F;
 	}
 
-	public void onWorldChange(World var1) {
-		super.onWorldChange(var1);
+	public void onWorldChange(World world) {
+		super.onWorldChange(world);
 	}
 
 	public void onUpdate() {
@@ -132,26 +131,26 @@
 	}
 
 	private void syncCurrentPlayItem() {
-		ItemStack var1 = this.mc.thePlayer.inventory.getCurrentItem();
-		int var2 = 0;
-		if(var1 != null) {
-			var2 = var1.itemID;
+		ItemStack itemStack1 = this.mc.thePlayer.inventory.getCurrentItem();
+		int i2 = 0;
+		if(itemStack1 != null) {
+			i2 = itemStack1.itemID;
 		}
 
-		if(var2 != this.currentPlayerItem) {
-			this.currentPlayerItem = var2;
+		if(i2 != this.currentPlayerItem) {
+			this.currentPlayerItem = i2;
 			this.netClientHandler.addToSendQueue(new Packet16BlockItemSwitch(0, this.currentPlayerItem));
 		}
 
 	}
 
-	public boolean onPlayerRightClick(EntityPlayer var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7) {
+	public boolean onPlayerRightClick(EntityPlayer entityPlayer, World world, ItemStack itemStack, int x, int y, int z, int side) {
 		this.syncCurrentPlayItem();
-		this.netClientHandler.addToSendQueue(new Packet15Place(var3 != null ? var3.itemID : -1, var4, var5, var6, var7));
-		return super.onPlayerRightClick(var1, var2, var3, var4, var5, var6, var7);
+		this.netClientHandler.addToSendQueue(new Packet15Place(itemStack != null ? itemStack.itemID : -1, x, y, z, side));
+		return super.onPlayerRightClick(entityPlayer, world, itemStack, x, y, z, side);
 	}
 
-	public EntityPlayer createPlayer(World var1) {
-		return new EntityClientPlayerMP(this.mc, var1, this.mc.session, this.netClientHandler);
+	public EntityPlayer createPlayer(World world) {
+		return new EntityClientPlayerMP(this.mc, world, this.mc.session, this.netClientHandler);
 	}
 }
--- /dev/null
+++ net/minecraft/src/HandlerSetCheckpoint.java
@@ -1,0 +1,50 @@
+package net.minecraft.src;
+
+public class HandlerSetCheckpoint {
+	public XYZv[] field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f = new XYZv[4];
+	public int field_11162_6465Np8FUyVvv71JijLg8KaAXuAY3Se0jp88oUhnpanbitz08O9RoUCc28Ip = 0;
+
+	public void func_11161_878G68i7RK8cnFGe82HhotKR54i4CTCOFqIav8G900cC11I38cT2xY88v3Z8(int integer) {
+		if(integer == 49) {
+			if(InputHandler.mc.objectMouseOver != null && InputHandler.mc.objectMouseOver.typeOfHit == 0) {
+				MovingObjectPosition movingObjectPosition2 = InputHandler.mc.objectMouseOver;
+				InputHandler.mc.ingameGUI.addChatMessage("Set position " + this.field_11162_6465Np8FUyVvv71JijLg8KaAXuAY3Se0jp88oUhnpanbitz08O9RoUCc28Ip + " to " + movingObjectPosition2.blockX + ":" + movingObjectPosition2.blockY + ":" + movingObjectPosition2.blockZ);
+				this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[this.field_11162_6465Np8FUyVvv71JijLg8KaAXuAY3Se0jp88oUhnpanbitz08O9RoUCc28Ip++] = new XYZv((long)movingObjectPosition2.blockX, (long)movingObjectPosition2.blockY, (long)movingObjectPosition2.blockZ);
+				if(this.field_11162_6465Np8FUyVvv71JijLg8KaAXuAY3Se0jp88oUhnpanbitz08O9RoUCc28Ip == 4) {
+					for(int i3 = 0; i3 != 2; ++i3) {
+						long j4;
+						if(this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2].x > this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2 + 1].x) {
+							j4 = this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2 + 1].x;
+							this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2 + 1].x = this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2].x;
+							this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2].x = j4;
+						}
+
+						if(this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2].y > this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2 + 1].y) {
+							j4 = this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2 + 1].y;
+							this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2 + 1].y = this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2].y;
+							this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2].y = j4;
+						}
+
+						if(this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2].z > this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2 + 1].z) {
+							j4 = this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2 + 1].z;
+							this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2 + 1].z = this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2].z;
+							this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[i3 * 2].z = j4;
+						}
+					}
+
+					InputHandler.mc.theWorld.field_7498_65957fU9nGL5PA2e96ZOK3ePBveSt2ceA9Glj10PC2Jo5s0wI21ix69flng2.add(new HandlerSetCheckpointUnknownClass("---", this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[0], this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[1], this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[2], this.field_11163_58232jkx0P8BtIjcx9jyMynapa6HyGdBfgcQ0f07QW8ypD8JcSHQUr7A3f0f[3]));
+					InputHandler.mc.ingameGUI.addChatMessage("New portal section added.");
+					this.field_11162_6465Np8FUyVvv71JijLg8KaAXuAY3Se0jp88oUhnpanbitz08O9RoUCc28Ip = 0;
+				}
+			}
+		} else if(integer == 50) {
+			--this.field_11162_6465Np8FUyVvv71JijLg8KaAXuAY3Se0jp88oUhnpanbitz08O9RoUCc28Ip;
+			if(this.field_11162_6465Np8FUyVvv71JijLg8KaAXuAY3Se0jp88oUhnpanbitz08O9RoUCc28Ip == -1) {
+				this.field_11162_6465Np8FUyVvv71JijLg8KaAXuAY3Se0jp88oUhnpanbitz08O9RoUCc28Ip = 0;
+			}
+
+			InputHandler.mc.ingameGUI.addChatMessage("section:" + this.field_11162_6465Np8FUyVvv71JijLg8KaAXuAY3Se0jp88oUhnpanbitz08O9RoUCc28Ip);
+		}
+
+	}
+}
--- net/minecraft/src/RecipesIngots.java
+++ net/minecraft/src/RecipesIngots.java
@@ -3,12 +3,12 @@
 public class RecipesIngots {
 	private Object[][] recipeItems = new Object[][]{{Block.blockGold, Item.ingotGold}, {Block.blockSteel, Item.ingotIron}, {Block.blockDiamond, Item.diamond}};
 
-	public void addRecipes(CraftingManager var1) {
-		for(int var2 = 0; var2 < this.recipeItems.length; ++var2) {
-			Block var3 = (Block)this.recipeItems[var2][0];
-			Item var4 = (Item)this.recipeItems[var2][1];
-			var1.addRecipe(new ItemStack(var3), new Object[]{"###", "###", "###", Character.valueOf('#'), var4});
-			var1.addRecipe(new ItemStack(var4, 9), new Object[]{"#", Character.valueOf('#'), var3});
+	public void addRecipes(CraftingManager craftingManager) {
+		for(int i2 = 0; i2 < this.recipeItems.length; ++i2) {
+			Block block3 = (Block)this.recipeItems[i2][0];
+			Item item4 = (Item)this.recipeItems[i2][1];
+			craftingManager.addRecipe(new ItemStack(block3), new Object[]{"###", "###", "###", '#', item4});
+			craftingManager.addRecipe(new ItemStack(item4, 9), new Object[]{"#", '#', block3});
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/GuiBanned.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.opengl.GL11;
+
+public class GuiBanned extends GuiIngame {
+	public GuiBanned(Minecraft minecraft) {
+		super(minecraft);
+	}
+
+	public void renderGameOverlay(float renderPartialTick, boolean hasScreen, int width, int height) {
+		ScaledResolution scaledResolution5 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+		int i6 = scaledResolution5.getScaledWidth();
+		int i7 = scaledResolution5.getScaledHeight();
+		FontRenderer fontRenderer8 = this.mc.fontRenderer;
+		this.mc.entityRenderer.setupOverlayRendering();
+		GL11.glEnable(GL11.GL_BLEND);
+		this.drawCenteredString(this.mc.fontRenderer, "You have been banned for violating our Online Play Guidelines!", i6 / 2, 2, 14909708);
+		this.drawCenteredString(this.mc.fontRenderer, "Remaining suspension time: indefinite", i6 / 2, 12, 14909708);
+		GL11.glEnable(GL11.GL_ALPHA_TEST);
+		GL11.glDisable(GL11.GL_BLEND);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockGlowingCube.java
@@ -1,0 +1,88 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockGlowingCube extends Block {
+	int renderMode = 1;
+
+	public BlockGlowingCube(int integer1, int integer2, int integer3) {
+		super(integer1, integer2, Material.rock);
+		this.setTickOnLoad(true);
+		this.renderMode = 0;
+	}
+
+	public BlockGlowingCube(int id, int blockIndex, Material material) {
+		super(id, blockIndex, material);
+		this.setTickOnLoad(true);
+		this.renderMode = 0;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return true;
+	}
+
+	public int getRenderType() {
+		return this.renderMode;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return true;
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		super.updateTick(world, x, y, z, random);
+		if(world.getBlockMetadata(x, y, z) == 0) {
+			this.onBlockAdded(world, x, y, z);
+		}
+
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(this.h(world, x, y, z)) {
+			int i6 = world.getBlockMetadata(x, y, z);
+			boolean z7 = false;
+			if(!world.isBlockNormalCube(x - 1, y, z) && i6 == 1) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x + 1, y, z) && i6 == 2) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z - 1) && i6 == 3) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z + 1) && i6 == 4) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y - 1, z) && i6 == 5) {
+				z7 = true;
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+				world.setBlockWithNotify(x, y, z, 0);
+			}
+		}
+
+	}
+
+	private boolean h(World vg, int integer2, int integer3, int integer4) {
+		if(!this.canPlaceBlockAt(vg, integer2, integer3, integer4)) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+	}
+}
--- /dev/null
+++ net/minecraft/src/HandlerSetCheckpointUnknownClass.java
@@ -1,0 +1,51 @@
+package net.minecraft.src;
+
+public class HandlerSetCheckpointUnknownClass {
+	public XYZv field_10093_41klyVs2CLSaqXti2PHc7KbJst4Q1nDst1o4iLj6BaTBzFuss9jc926LVo3Y;
+	public XYZv field_10092_7T6J0x9x8Olq6N9RF2N6H3mi3H4w5709ZMMCb850Fhazm6NU9068AFW6shHl;
+	public XYZv field_10089_4EqR2C4N6Be6qvcuc8XOsIuMr3V2jl7dxCt6OU2Iz5CXZ7BkjKL435C882wP;
+	public XYZv field_10091_6899v9cNo0GWz1ut5xqwbn7S4GZzi19V8D2JRLTZC837Z5T33xkgAt68ptow;
+	public String field_10090_5v540C4sk8Ke8C3282XWygqtOknzxtF0r5Vd1NaB0QsfgW9I05m88Cq1r6Iv = "---";
+
+	public HandlerSetCheckpointUnknownClass(String string, XYZv ya2, XYZv ya3, XYZv ya4, XYZv ya5) {
+		this.field_10090_5v540C4sk8Ke8C3282XWygqtOknzxtF0r5Vd1NaB0QsfgW9I05m88Cq1r6Iv = string;
+		this.field_10093_41klyVs2CLSaqXti2PHc7KbJst4Q1nDst1o4iLj6BaTBzFuss9jc926LVo3Y = ya2;
+		this.field_10092_7T6J0x9x8Olq6N9RF2N6H3mi3H4w5709ZMMCb850Fhazm6NU9068AFW6shHl = ya3;
+		this.field_10089_4EqR2C4N6Be6qvcuc8XOsIuMr3V2jl7dxCt6OU2Iz5CXZ7BkjKL435C882wP = ya4;
+		this.field_10091_6899v9cNo0GWz1ut5xqwbn7S4GZzi19V8D2JRLTZC837Z5T33xkgAt68ptow = ya5;
+	}
+
+	public boolean func_10085_7D2n8t3Lap70612qvby3qIC226DCKo8Nk73Nno70193Sp6c96td8erpx97bW(EntityPlayer gb) {
+		return (double)this.field_10093_41klyVs2CLSaqXti2PHc7KbJst4Q1nDst1o4iLj6BaTBzFuss9jc926LVo3Y.x <= gb.posX && gb.posX <= (double)this.field_10092_7T6J0x9x8Olq6N9RF2N6H3mi3H4w5709ZMMCb850Fhazm6NU9068AFW6shHl.x && (double)this.field_10093_41klyVs2CLSaqXti2PHc7KbJst4Q1nDst1o4iLj6BaTBzFuss9jc926LVo3Y.y <= gb.posY && gb.posY <= (double)this.field_10092_7T6J0x9x8Olq6N9RF2N6H3mi3H4w5709ZMMCb850Fhazm6NU9068AFW6shHl.y && (double)this.field_10093_41klyVs2CLSaqXti2PHc7KbJst4Q1nDst1o4iLj6BaTBzFuss9jc926LVo3Y.z <= gb.posZ && gb.posZ <= (double)this.field_10092_7T6J0x9x8Olq6N9RF2N6H3mi3H4w5709ZMMCb850Fhazm6NU9068AFW6shHl.z;
+	}
+
+	public void func_10086_40267dho6H9z8k685WY93RRJ940tPSUiFidSqaVzX0J37XEjJsK5jBgfy5k1(EntityPlayer gb) {
+		double d2 = (double)this.field_10089_4EqR2C4N6Be6qvcuc8XOsIuMr3V2jl7dxCt6OU2Iz5CXZ7BkjKL435C882wP.x + (gb.posX - (double)this.field_10093_41klyVs2CLSaqXti2PHc7KbJst4Q1nDst1o4iLj6BaTBzFuss9jc926LVo3Y.x);
+		double d4 = (double)this.field_10089_4EqR2C4N6Be6qvcuc8XOsIuMr3V2jl7dxCt6OU2Iz5CXZ7BkjKL435C882wP.y + (gb.posY - (double)this.field_10093_41klyVs2CLSaqXti2PHc7KbJst4Q1nDst1o4iLj6BaTBzFuss9jc926LVo3Y.y);
+		double d6 = (double)this.field_10089_4EqR2C4N6Be6qvcuc8XOsIuMr3V2jl7dxCt6OU2Iz5CXZ7BkjKL435C882wP.z + (gb.posZ - (double)this.field_10093_41klyVs2CLSaqXti2PHc7KbJst4Q1nDst1o4iLj6BaTBzFuss9jc926LVo3Y.z);
+		gb.posX = d2;
+		gb.posY = d4 + 0.001D;
+		gb.posZ = d6;
+		gb.setPosition(d2, d4, d6);
+	}
+
+	public HandlerSetCheckpointUnknownClass2 func_10088_1Srn1NO8VIG8sE99Jtv77t920erw08KpSDq49OsE7m757020A0FU0vxsGMvt(EntityPlayer gb) {
+		double d2 = (double)this.field_10089_4EqR2C4N6Be6qvcuc8XOsIuMr3V2jl7dxCt6OU2Iz5CXZ7BkjKL435C882wP.x + (gb.posX - (double)this.field_10093_41klyVs2CLSaqXti2PHc7KbJst4Q1nDst1o4iLj6BaTBzFuss9jc926LVo3Y.x);
+		double d4 = (double)this.field_10089_4EqR2C4N6Be6qvcuc8XOsIuMr3V2jl7dxCt6OU2Iz5CXZ7BkjKL435C882wP.y + (gb.posY - (double)this.field_10093_41klyVs2CLSaqXti2PHc7KbJst4Q1nDst1o4iLj6BaTBzFuss9jc926LVo3Y.y);
+		double d6 = (double)this.field_10089_4EqR2C4N6Be6qvcuc8XOsIuMr3V2jl7dxCt6OU2Iz5CXZ7BkjKL435C882wP.z + (gb.posZ - (double)this.field_10093_41klyVs2CLSaqXti2PHc7KbJst4Q1nDst1o4iLj6BaTBzFuss9jc926LVo3Y.z);
+		return new HandlerSetCheckpointUnknownClass2(d2, d4, d6);
+	}
+
+	public static HandlerSetCheckpointUnknownClass func_10084_6FAAVBx3XRV8rsU1z0770zreU3637zjNEWB3Z8B3V8CI5d1V47yA72wzHu01(NBTTagCompound id, String string) {
+		return new HandlerSetCheckpointUnknownClass(string, XYZv.func_11874_7D7Ldwzfjq7N2h00fkA2p56PZg3G8WUWHZij3DQ7icA7D4681et2A8u9NXkk(id, "AP1_1"), XYZv.func_11874_7D7Ldwzfjq7N2h00fkA2p56PZg3G8WUWHZij3DQ7icA7D4681et2A8u9NXkk(id, "AP1_2"), XYZv.func_11874_7D7Ldwzfjq7N2h00fkA2p56PZg3G8WUWHZij3DQ7icA7D4681et2A8u9NXkk(id, "AP2_1"), XYZv.func_11874_7D7Ldwzfjq7N2h00fkA2p56PZg3G8WUWHZij3DQ7icA7D4681et2A8u9NXkk(id, "AP2_2"));
+	}
+
+	public NBTTagCompound func_10087_1y146m8JQy5RXz2ldm45tt2tSQj9U640VM27JQiN01nA79WhHvFRXlvxe84l() {
+		NBTTagCompound nBTTagCompound1 = new NBTTagCompound();
+		this.field_10093_41klyVs2CLSaqXti2PHc7KbJst4Q1nDst1o4iLj6BaTBzFuss9jc926LVo3Y.func_11870_8PE2rM1Pz0ANK7KSirgdpIuY0x9S23IpHh64xjXM385ympB75xykX9x0C0cz(nBTTagCompound1, "AP1_1");
+		this.field_10092_7T6J0x9x8Olq6N9RF2N6H3mi3H4w5709ZMMCb850Fhazm6NU9068AFW6shHl.func_11870_8PE2rM1Pz0ANK7KSirgdpIuY0x9S23IpHh64xjXM385ympB75xykX9x0C0cz(nBTTagCompound1, "AP1_2");
+		this.field_10089_4EqR2C4N6Be6qvcuc8XOsIuMr3V2jl7dxCt6OU2Iz5CXZ7BkjKL435C882wP.func_11870_8PE2rM1Pz0ANK7KSirgdpIuY0x9S23IpHh64xjXM385ympB75xykX9x0C0cz(nBTTagCompound1, "AP2_1");
+		this.field_10091_6899v9cNo0GWz1ut5xqwbn7S4GZzi19V8D2JRLTZC837Z5T33xkgAt68ptow.func_11870_8PE2rM1Pz0ANK7KSirgdpIuY0x9S23IpHh64xjXM385ympB75xykX9x0C0cz(nBTTagCompound1, "AP2_2");
+		return nBTTagCompound1;
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandConnect.java
@@ -1,0 +1,18 @@
+package net.minecraft.src;
+
+class CommandConnect extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8571_5LQP624ZQEOkZxy5u97DA1tj8C5hN47Nkq0aMY5iNEKAli5D4uhvE5014BuQ;
+    
+    CommandConnect(final CommandManager abb) {
+        this.field_8571_5LQP624ZQEOkZxy5u97DA1tj8C5hN47Nkq0aMY5iNEKAli5D4uhvE5014BuQ = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- net/minecraft/src/SlotArmor.java
+++ net/minecraft/src/SlotArmor.java
@@ -4,14 +4,14 @@
 	final int armorType;
 	final GuiInventory guiInventory;
 
-	SlotArmor(GuiInventory var1, GuiContainer var2, IInventory var3, int var4, int var5, int var6, int var7) {
-		super(var2, var3, var4, var5, var6);
-		this.guiInventory = var1;
-		this.armorType = var7;
+	SlotArmor(GuiInventory cw, GuiContainer um, IInventory cz, int integer4, int integer5, int integer6, int integer7) {
+		super(um, cz, integer4, integer5, integer6);
+		this.guiInventory = cw;
+		this.armorType = integer7;
 	}
 
-	public boolean isItemValid(ItemStack var1) {
-		return var1.getItem() instanceof ItemArmor ? ((ItemArmor)var1.getItem()).armorType == this.armorType : false;
+	public boolean isItemValid(ItemStack itemStack) {
+		return itemStack.getItem() instanceof ItemArmor ? ((ItemArmor)itemStack.getItem()).armorType == this.armorType : false;
 	}
 
 	public int getBackgroundIconIndex() {
--- net/minecraft/src/EntityClientPlayerMP.java
+++ net/minecraft/src/EntityClientPlayerMP.java
@@ -12,14 +12,20 @@
 	private float oldRotationYaw;
 	private float oldRotationPitch;
 	private InventoryPlayer serverSideInventory = new InventoryPlayer((EntityPlayer)null);
+	private boolean skinRqSent = false;
 
-	public EntityClientPlayerMP(Minecraft var1, World var2, Session var3, NetClientHandler var4) {
-		super(var1, var2, var3);
-		this.sendQueue = var4;
+	public EntityClientPlayerMP(Minecraft minecraft, World worldObj, Session session, NetClientHandler sendQueue) {
+		super(minecraft, worldObj, session);
+		this.sendQueue = sendQueue;
 	}
 
 	public void onUpdate() {
 		super.onUpdate();
+		if(!this.skinRqSent) {
+			this.sendQueue.addToSendQueue(new Packet7SendSkinRequest(this.username));
+			this.skinRqSent = true;
+		}
+
 		this.sendMotionUpdates();
 	}
 
@@ -39,52 +45,57 @@
 			this.motionUpdateCounter = 0;
 		}
 
-		double var1 = this.posX - this.oldPosX;
-		double var3 = this.boundingBox.minY - this.oldBasePos;
-		double var5 = this.posY - this.oldPosY;
-		double var7 = this.posZ - this.oldPosZ;
-		double var9 = (double)(this.rotationYaw - this.oldRotationYaw);
-		double var11 = (double)(this.rotationPitch - this.oldRotationPitch);
-		boolean var13 = var3 != 0.0D || var5 != 0.0D || var1 != 0.0D || var7 != 0.0D;
-		boolean var14 = var9 != 0.0D || var11 != 0.0D;
-		if(var13 && var14) {
+		double d1 = this.posX - this.oldPosX;
+		double d3 = this.boundingBox.minY - this.oldBasePos;
+		double d5 = this.posY - this.oldPosY;
+		double d7 = this.posZ - this.oldPosZ;
+		double d9 = (double)(this.rotationYaw - this.oldRotationYaw);
+		double d11 = (double)(this.rotationPitch - this.oldRotationPitch);
+		boolean z13 = d3 != 0.0D || d5 != 0.0D || d1 != 0.0D || d7 != 0.0D;
+		boolean z14 = d9 != 0.0D || d11 != 0.0D;
+		if(z13 && z14) {
 			this.sendQueue.addToSendQueue(new Packet13PlayerLookMove(this.posX, this.boundingBox.minY, this.posY, this.posZ, this.rotationYaw, this.rotationPitch, this.onGround));
-		} else if(var13) {
+		} else if(z13) {
 			this.sendQueue.addToSendQueue(new Packet11PlayerPosition(this.posX, this.boundingBox.minY, this.posY, this.posZ, this.onGround));
-		} else if(var14) {
+		} else if(z14) {
 			this.sendQueue.addToSendQueue(new Packet12PlayerLook(this.rotationYaw, this.rotationPitch, this.onGround));
 		} else {
 			this.sendQueue.addToSendQueue(new Packet10Flying(this.onGround));
 		}
 
-		if(var13) {
+		if(z13) {
 			this.oldPosX = this.posX;
 			this.oldBasePos = this.boundingBox.minY;
 			this.oldPosY = this.posY;
 			this.oldPosZ = this.posZ;
 		}
 
-		if(var14) {
+		if(z14) {
 			this.oldRotationYaw = this.rotationYaw;
 			this.oldRotationPitch = this.rotationPitch;
 		}
 
 	}
 
-	protected void joinEntityItemWithWorld(EntityItem var1) {
+	protected void joinEntityItemWithWorld(EntityItem entityItem) {
 		System.out.println("Dropping?");
-		Packet21PickupSpawn var2 = new Packet21PickupSpawn(var1);
-		this.sendQueue.addToSendQueue(var2);
-		var1.posX = (double)var2.xPosition / 32.0D;
-		var1.posY = (double)var2.yPosition / 32.0D;
-		var1.posZ = (double)var2.zPosition / 32.0D;
-		var1.motionX = (double)var2.rotation / 128.0D;
-		var1.motionY = (double)var2.pitch / 128.0D;
-		var1.motionZ = (double)var2.roll / 128.0D;
+		Packet21PickupSpawn packet21PickupSpawn2 = new Packet21PickupSpawn(entityItem);
+		this.sendQueue.addToSendQueue(packet21PickupSpawn2);
+		entityItem.posX = (double)packet21PickupSpawn2.xPosition / 32.0D;
+		entityItem.posY = (double)packet21PickupSpawn2.yPosition / 32.0D;
+		entityItem.posZ = (double)packet21PickupSpawn2.zPosition / 32.0D;
+		entityItem.motionX = (double)packet21PickupSpawn2.rotation / 128.0D;
+		entityItem.motionY = (double)packet21PickupSpawn2.pitch / 128.0D;
+		entityItem.motionZ = (double)packet21PickupSpawn2.roll / 128.0D;
 	}
 
-	public void sendChatMessage(String var1) {
-		this.sendQueue.addToSendQueue(new Packet3Chat(var1));
+	public void sendChatMessage(String chatMessage) {
+		if(CertUtils.loadedPrivKey == null) {
+			this.sendQueue.addToSendQueue(new Packet3Chat(chatMessage));
+		} else {
+			this.sendQueue.addToSendQueue(new Packet201SecureChat(chatMessage, this.sendQueue.secureID));
+		}
+
 	}
 
 	public void swingItem() {
--- net/minecraft/src/BlockRedstoneTorch.java
+++ net/minecraft/src/BlockRedstoneTorch.java
@@ -8,22 +8,22 @@
 	private boolean torchActive = false;
 	private static List torchUpdates = new ArrayList();
 
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var1 == 1 ? Block.redstoneWire.getBlockTextureFromSideAndMetadata(var1, var2) : super.getBlockTextureFromSideAndMetadata(var1, var2);
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return side == 1 ? Block.redstoneWire.getBlockTextureFromSideAndMetadata(side, metadata) : super.getBlockTextureFromSideAndMetadata(side, metadata);
 	}
 
-	private boolean checkForBurnout(World var1, int var2, int var3, int var4, boolean var5) {
-		if(var5) {
-			torchUpdates.add(new RedstoneUpdateInfo(var2, var3, var4, var1.worldTime));
+	private boolean checkForBurnout(World world, int x, int y, int z, boolean boolean5) {
+		if(boolean5) {
+			torchUpdates.add(new RedstoneUpdateInfo(x, y, z, world.worldTime));
 		}
 
-		int var6 = 0;
+		int i6 = 0;
 
-		for(int var7 = 0; var7 < torchUpdates.size(); ++var7) {
-			RedstoneUpdateInfo var8 = (RedstoneUpdateInfo)torchUpdates.get(var7);
-			if(var8.x == var2 && var8.y == var3 && var8.z == var4) {
-				++var6;
-				if(var6 >= 8) {
+		for(int i7 = 0; i7 < torchUpdates.size(); ++i7) {
+			RedstoneUpdateInfo redstoneUpdateInfo8 = (RedstoneUpdateInfo)torchUpdates.get(i7);
+			if(redstoneUpdateInfo8.x == x && redstoneUpdateInfo8.y == y && redstoneUpdateInfo8.z == z) {
+				++i6;
+				if(i6 >= 8) {
 					return true;
 				}
 			}
@@ -32,9 +32,9 @@
 		return false;
 	}
 
-	protected BlockRedstoneTorch(int var1, int var2, boolean var3) {
-		super(var1, var2);
-		this.torchActive = var3;
+	protected BlockRedstoneTorch(int id, int blockIndex, boolean torchActive) {
+		super(id, blockIndex);
+		this.torchActive = torchActive;
 		this.setTickOnLoad(true);
 	}
 
@@ -42,85 +42,85 @@
 		return 2;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockMetadata(var2, var3, var4) == 0) {
-			super.onBlockAdded(var1, var2, var3, var4);
-		}
-
-		if(this.torchActive) {
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-		}
-
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		if(this.torchActive) {
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-		}
-
-	}
-
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+	public void onBlockAdded(World world, int x, int y, int z) {
+		if(world.getBlockMetadata(x, y, z) == 0) {
+			super.onBlockAdded(world, x, y, z);
+		}
+
+		if(this.torchActive) {
+			world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+		}
+
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		if(this.torchActive) {
+			world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+		}
+
+	}
+
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int unused) {
 		if(!this.torchActive) {
 			return false;
 		} else {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			return var6 == 5 && var5 == 1 ? false : (var6 == 3 && var5 == 3 ? false : (var6 == 4 && var5 == 2 ? false : (var6 == 1 && var5 == 5 ? false : var6 != 2 || var5 != 4)));
+			int i6 = blockAccess.getBlockMetadata(x, y, z);
+			return i6 == 5 && unused == 1 ? false : (i6 == 3 && unused == 3 ? false : (i6 == 4 && unused == 2 ? false : (i6 == 1 && unused == 5 ? false : i6 != 2 || unused != 4)));
 		}
 	}
 
-	private boolean isIndirectlyPowered(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		return var5 == 5 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3 - 1, var4, 0) ? true : (var5 == 3 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3, var4 - 1, 2) ? true : (var5 == 4 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3, var4 + 1, 3) ? true : (var5 == 1 && var1.isBlockIndirectlyProvidingPowerTo(var2 - 1, var3, var4, 4) ? true : var5 == 2 && var1.isBlockIndirectlyProvidingPowerTo(var2 + 1, var3, var4, 5))));
+	private boolean isIndirectlyPowered(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		return i5 == 5 && world.isBlockIndirectlyProvidingPowerTo(x, y - 1, z, 0) ? true : (i5 == 3 && world.isBlockIndirectlyProvidingPowerTo(x, y, z - 1, 2) ? true : (i5 == 4 && world.isBlockIndirectlyProvidingPowerTo(x, y, z + 1, 3) ? true : (i5 == 1 && world.isBlockIndirectlyProvidingPowerTo(x - 1, y, z, 4) ? true : i5 == 2 && world.isBlockIndirectlyProvidingPowerTo(x + 1, y, z, 5))));
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		boolean var6 = this.isIndirectlyPowered(var1, var2, var3, var4);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		boolean z6 = this.isIndirectlyPowered(world, x, y, z);
 
-		while(torchUpdates.size() > 0 && var1.worldTime - ((RedstoneUpdateInfo)torchUpdates.get(0)).updateTime > 100L) {
+		while(torchUpdates.size() > 0 && world.worldTime - ((RedstoneUpdateInfo)torchUpdates.get(0)).updateTime > 100L) {
 			torchUpdates.remove(0);
 		}
 
 		if(this.torchActive) {
-			if(var6) {
-				var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.torchRedstoneIdle.blockID, var1.getBlockMetadata(var2, var3, var4));
-				if(this.checkForBurnout(var1, var2, var3, var4, true)) {
-					var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "random.fizz", 0.5F, 2.6F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.8F);
+			if(z6) {
+				world.setBlockAndMetadataWithNotify(x, y, z, Block.torchRedstoneIdle.blockID, world.getBlockMetadata(x, y, z));
+				if(this.checkForBurnout(world, x, y, z, true)) {
+					world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "random.fizz", 0.5F, 2.6F + (world.rand.nextFloat() - world.rand.nextFloat()) * 0.8F);
 
-					for(int var7 = 0; var7 < 5; ++var7) {
-						double var8 = (double)var2 + var5.nextDouble() * 0.6D + 0.2D;
-						double var10 = (double)var3 + var5.nextDouble() * 0.6D + 0.2D;
-						double var12 = (double)var4 + var5.nextDouble() * 0.6D + 0.2D;
-						var1.spawnParticle("smoke", var8, var10, var12, 0.0D, 0.0D, 0.0D);
+					for(int i7 = 0; i7 < 5; ++i7) {
+						double d8 = (double)x + random.nextDouble() * 0.6D + 0.2D;
+						double d10 = (double)y + random.nextDouble() * 0.6D + 0.2D;
+						double d12 = (double)z + random.nextDouble() * 0.6D + 0.2D;
+						world.spawnParticle("smoke", d8, d10, d12, 0.0D, 0.0D, 0.0D);
 					}
 				}
 			}
-		} else if(!var6 && !this.checkForBurnout(var1, var2, var3, var4, false)) {
-			var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.torchRedstoneActive.blockID, var1.getBlockMetadata(var2, var3, var4));
+		} else if(!z6 && !this.checkForBurnout(world, x, y, z, false)) {
+			world.setBlockAndMetadataWithNotify(x, y, z, Block.torchRedstoneActive.blockID, world.getBlockMetadata(x, y, z));
 		}
 
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-	}
-
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-		return var5 == 0 ? this.isPoweringTo(var1, var2, var3, var4, var5) : false;
-	}
-
-	public int idDropped(int var1, Random var2) {
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		super.onNeighborBlockChange(world, x, y, z, flag);
+		world.scheduleBlockUpdate(x, y, z, this.blockID);
+	}
+
+	public boolean isIndirectlyPoweringTo(World world, int x, int y, int z, int flag) {
+		return flag == 0 ? this.isPoweringTo(world, x, y, z, flag) : false;
+	}
+
+	public int idDropped(int count, Random random) {
 		return Block.torchRedstoneActive.blockID;
 	}
 
@@ -128,26 +128,26 @@
 		return true;
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
 		if(this.torchActive) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			double var7 = (double)((float)var2 + 0.5F) + (double)(var5.nextFloat() - 0.5F) * 0.2D;
-			double var9 = (double)((float)var3 + 0.7F) + (double)(var5.nextFloat() - 0.5F) * 0.2D;
-			double var11 = (double)((float)var4 + 0.5F) + (double)(var5.nextFloat() - 0.5F) * 0.2D;
-			double var13 = (double)0.22F;
-			double var15 = (double)0.27F;
-			if(var6 == 1) {
-				var1.spawnParticle("reddust", var7 - var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
-			} else if(var6 == 2) {
-				var1.spawnParticle("reddust", var7 + var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
-			} else if(var6 == 3) {
-				var1.spawnParticle("reddust", var7, var9 + var13, var11 - var15, 0.0D, 0.0D, 0.0D);
-			} else if(var6 == 4) {
-				var1.spawnParticle("reddust", var7, var9 + var13, var11 + var15, 0.0D, 0.0D, 0.0D);
+			int i6 = worldObj.getBlockMetadata(x, y, z);
+			double d7 = (double)((float)x + 0.5F) + (double)(rand.nextFloat() - 0.5F) * 0.2D;
+			double d9 = (double)((float)y + 0.7F) + (double)(rand.nextFloat() - 0.5F) * 0.2D;
+			double d11 = (double)((float)z + 0.5F) + (double)(rand.nextFloat() - 0.5F) * 0.2D;
+			double d13 = (double)0.22F;
+			double d15 = (double)0.27F;
+			if(i6 == 1) {
+				worldObj.spawnParticle("reddust", d7 - d15, d9 + d13, d11, 0.0D, 0.0D, 0.0D);
+			} else if(i6 == 2) {
+				worldObj.spawnParticle("reddust", d7 + d15, d9 + d13, d11, 0.0D, 0.0D, 0.0D);
+			} else if(i6 == 3) {
+				worldObj.spawnParticle("reddust", d7, d9 + d13, d11 - d15, 0.0D, 0.0D, 0.0D);
+			} else if(i6 == 4) {
+				worldObj.spawnParticle("reddust", d7, d9 + d13, d11 + d15, 0.0D, 0.0D, 0.0D);
 			} else {
-				var1.spawnParticle("reddust", var7, var9, var11, 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("reddust", d7, d9, d11, 0.0D, 0.0D, 0.0D);
 			}
-
 		}
+
 	}
 }
--- net/minecraft/src/NetHandler.java
+++ net/minecraft/src/NetHandler.java
@@ -1,112 +1,124 @@
 package net.minecraft.src;
 
 public class NetHandler {
-	public void handleMapChunk(Packet51MapChunk var1) {
-	}
-
-	public void registerPacket(Packet var1) {
-	}
-
-	public void handleErrorMessage(String var1) {
-	}
-
-	public void handleKickDisconnect(Packet255KickDisconnect var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleLogin(Packet1Login var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleFlying(Packet10Flying var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleMultiBlockChange(Packet52MultiBlockChange var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleBlockDig(Packet14BlockDig var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleBlockChange(Packet53BlockChange var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handlePreChunk(Packet50PreChunk var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleNamedEntitySpawn(Packet20NamedEntitySpawn var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleEntity(Packet30Entity var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleEntityTeleport(Packet34EntityTeleport var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handlePlace(Packet15Place var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleBlockItemSwitch(Packet16BlockItemSwitch var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleDestroyEntity(Packet29DestroyEntity var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handlePickupSpawn(Packet21PickupSpawn var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleCollect(Packet22Collect var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleChat(Packet3Chat var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleAddToInventory(Packet17AddToInventory var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleVehicleSpawn(Packet23VehicleSpawn var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleArmAnimation(Packet18ArmAnimation var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleHandshake(Packet2Handshake var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleMobSpawn(Packet24MobSpawn var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleUpdateTime(Packet4UpdateTime var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handlePlayerInventory(Packet5PlayerInventory var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleComplexEntity(Packet59ComplexEntity var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleSpawnPosition(Packet6SpawnPosition var1) {
-		this.registerPacket(var1);
+	public void handleMapChunk(Packet51MapChunk packet) {
+	}
+
+	public void registerPacket(Packet packet) {
+	}
+
+	public void handleErrorMessage(String message) {
+	}
+
+	public void handleKickDisconnect(Packet255KickDisconnect packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleLogin(Packet1Login packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleSecureLogin(Packet200SecureLogin packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleFlying(Packet10Flying packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleMultiBlockChange(Packet52MultiBlockChange packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleBlockDig(Packet14BlockDig packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleBlockChange(Packet53BlockChange packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handlePreChunk(Packet50PreChunk packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleNamedEntitySpawn(Packet20NamedEntitySpawn packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleEntity(Packet30Entity packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleEntityTeleport(Packet34EntityTeleport packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handlePlace(Packet15Place packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleBlockItemSwitch(Packet16BlockItemSwitch packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleDestroyEntity(Packet29DestroyEntity packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handlePickupSpawn(Packet21PickupSpawn packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleCollect(Packet22Collect packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleChat(Packet3Chat packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleAddToInventory(Packet17AddToInventory packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleVehicleSpawn(Packet23VehicleSpawn packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleArmAnimation(Packet18ArmAnimation packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleHandshake(Packet2Handshake packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleMobSpawn(Packet24MobSpawn packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleUpdateTime(Packet4UpdateTime packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handlePlayerInventory(Packet5PlayerInventory packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleComplexEntity(Packet59ComplexEntity packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleSpawnPosition(Packet6SpawnPosition packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleRemoteEntityData(Packet210RemoteEntityData packet) {
+		this.registerPacket(packet);
+	}
+
+	public void func_9533_25tX06Rn1x8M23UU2H9zV6jXRvKnHTUhNF2dQmklMdj7A1h0k1f98dr4AwsU(Packet211 packet) {
+		this.registerPacket(packet);
 	}
 }
--- net/minecraft/src/ModelSpider.java
+++ net/minecraft/src/ModelSpider.java
@@ -14,103 +14,103 @@
 	public ModelRenderer spiderLeg8;
 
 	public ModelSpider() {
-		float var1 = 0.0F;
-		byte var2 = 15;
+		float f1 = 0.0F;
+		byte b2 = 15;
 		this.spiderHead = new ModelRenderer(32, 4);
-		this.spiderHead.addBox(-4.0F, -4.0F, -8.0F, 8, 8, 8, var1);
-		this.spiderHead.setRotationPoint(0.0F, (float)(0 + var2), -3.0F);
+		this.spiderHead.addBox(-4.0F, -4.0F, -8.0F, 8, 8, 8, f1);
+		this.spiderHead.setRotationPoint(0.0F, (float)(0 + b2), -3.0F);
 		this.spiderNeck = new ModelRenderer(0, 0);
-		this.spiderNeck.addBox(-3.0F, -3.0F, -3.0F, 6, 6, 6, var1);
-		this.spiderNeck.setRotationPoint(0.0F, (float)var2, 0.0F);
+		this.spiderNeck.addBox(-3.0F, -3.0F, -3.0F, 6, 6, 6, f1);
+		this.spiderNeck.setRotationPoint(0.0F, (float)b2, 0.0F);
 		this.spiderBody = new ModelRenderer(0, 12);
-		this.spiderBody.addBox(-5.0F, -4.0F, -6.0F, 10, 8, 12, var1);
-		this.spiderBody.setRotationPoint(0.0F, (float)(0 + var2), 9.0F);
+		this.spiderBody.addBox(-5.0F, -4.0F, -6.0F, 10, 8, 12, f1);
+		this.spiderBody.setRotationPoint(0.0F, (float)(0 + b2), 9.0F);
 		this.spiderLeg1 = new ModelRenderer(18, 0);
-		this.spiderLeg1.addBox(-15.0F, -1.0F, -1.0F, 16, 2, 2, var1);
-		this.spiderLeg1.setRotationPoint(-4.0F, (float)(0 + var2), 2.0F);
+		this.spiderLeg1.addBox(-15.0F, -1.0F, -1.0F, 16, 2, 2, f1);
+		this.spiderLeg1.setRotationPoint(-4.0F, (float)(0 + b2), 2.0F);
 		this.spiderLeg2 = new ModelRenderer(18, 0);
-		this.spiderLeg2.addBox(-1.0F, -1.0F, -1.0F, 16, 2, 2, var1);
-		this.spiderLeg2.setRotationPoint(4.0F, (float)(0 + var2), 2.0F);
+		this.spiderLeg2.addBox(-1.0F, -1.0F, -1.0F, 16, 2, 2, f1);
+		this.spiderLeg2.setRotationPoint(4.0F, (float)(0 + b2), 2.0F);
 		this.spiderLeg3 = new ModelRenderer(18, 0);
-		this.spiderLeg3.addBox(-15.0F, -1.0F, -1.0F, 16, 2, 2, var1);
-		this.spiderLeg3.setRotationPoint(-4.0F, (float)(0 + var2), 1.0F);
+		this.spiderLeg3.addBox(-15.0F, -1.0F, -1.0F, 16, 2, 2, f1);
+		this.spiderLeg3.setRotationPoint(-4.0F, (float)(0 + b2), 1.0F);
 		this.spiderLeg4 = new ModelRenderer(18, 0);
-		this.spiderLeg4.addBox(-1.0F, -1.0F, -1.0F, 16, 2, 2, var1);
-		this.spiderLeg4.setRotationPoint(4.0F, (float)(0 + var2), 1.0F);
+		this.spiderLeg4.addBox(-1.0F, -1.0F, -1.0F, 16, 2, 2, f1);
+		this.spiderLeg4.setRotationPoint(4.0F, (float)(0 + b2), 1.0F);
 		this.spiderLeg5 = new ModelRenderer(18, 0);
-		this.spiderLeg5.addBox(-15.0F, -1.0F, -1.0F, 16, 2, 2, var1);
-		this.spiderLeg5.setRotationPoint(-4.0F, (float)(0 + var2), 0.0F);
+		this.spiderLeg5.addBox(-15.0F, -1.0F, -1.0F, 16, 2, 2, f1);
+		this.spiderLeg5.setRotationPoint(-4.0F, (float)(0 + b2), 0.0F);
 		this.spiderLeg6 = new ModelRenderer(18, 0);
-		this.spiderLeg6.addBox(-1.0F, -1.0F, -1.0F, 16, 2, 2, var1);
-		this.spiderLeg6.setRotationPoint(4.0F, (float)(0 + var2), 0.0F);
+		this.spiderLeg6.addBox(-1.0F, -1.0F, -1.0F, 16, 2, 2, f1);
+		this.spiderLeg6.setRotationPoint(4.0F, (float)(0 + b2), 0.0F);
 		this.spiderLeg7 = new ModelRenderer(18, 0);
-		this.spiderLeg7.addBox(-15.0F, -1.0F, -1.0F, 16, 2, 2, var1);
-		this.spiderLeg7.setRotationPoint(-4.0F, (float)(0 + var2), -1.0F);
+		this.spiderLeg7.addBox(-15.0F, -1.0F, -1.0F, 16, 2, 2, f1);
+		this.spiderLeg7.setRotationPoint(-4.0F, (float)(0 + b2), -1.0F);
 		this.spiderLeg8 = new ModelRenderer(18, 0);
-		this.spiderLeg8.addBox(-1.0F, -1.0F, -1.0F, 16, 2, 2, var1);
-		this.spiderLeg8.setRotationPoint(4.0F, (float)(0 + var2), -1.0F);
-	}
-
-	public void render(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.setRotationAngles(var1, var2, var3, var4, var5, var6);
-		this.spiderHead.render(var6);
-		this.spiderNeck.render(var6);
-		this.spiderBody.render(var6);
-		this.spiderLeg1.render(var6);
-		this.spiderLeg2.render(var6);
-		this.spiderLeg3.render(var6);
-		this.spiderLeg4.render(var6);
-		this.spiderLeg5.render(var6);
-		this.spiderLeg6.render(var6);
-		this.spiderLeg7.render(var6);
-		this.spiderLeg8.render(var6);
-	}
-
-	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.spiderHead.rotateAngleY = var4 / (180.0F / (float)Math.PI);
-		this.spiderHead.rotateAngleX = var5 / (180.0F / (float)Math.PI);
-		float var7 = (float)Math.PI * 0.25F;
-		this.spiderLeg1.rotateAngleZ = -var7;
-		this.spiderLeg2.rotateAngleZ = var7;
-		this.spiderLeg3.rotateAngleZ = -var7 * 0.74F;
-		this.spiderLeg4.rotateAngleZ = var7 * 0.74F;
-		this.spiderLeg5.rotateAngleZ = -var7 * 0.74F;
-		this.spiderLeg6.rotateAngleZ = var7 * 0.74F;
-		this.spiderLeg7.rotateAngleZ = -var7;
-		this.spiderLeg8.rotateAngleZ = var7;
-		float var8 = -0.0F;
-		float var9 = (float)Math.PI * 0.125F;
-		this.spiderLeg1.rotateAngleY = var9 * 2.0F + var8;
-		this.spiderLeg2.rotateAngleY = -var9 * 2.0F - var8;
-		this.spiderLeg3.rotateAngleY = var9 * 1.0F + var8;
-		this.spiderLeg4.rotateAngleY = -var9 * 1.0F - var8;
-		this.spiderLeg5.rotateAngleY = -var9 * 1.0F + var8;
-		this.spiderLeg6.rotateAngleY = var9 * 1.0F - var8;
-		this.spiderLeg7.rotateAngleY = -var9 * 2.0F + var8;
-		this.spiderLeg8.rotateAngleY = var9 * 2.0F - var8;
-		float var10 = -(MathHelper.cos(var1 * 0.6662F * 2.0F + 0.0F) * 0.4F) * var2;
-		float var11 = -(MathHelper.cos(var1 * 0.6662F * 2.0F + (float)Math.PI) * 0.4F) * var2;
-		float var12 = -(MathHelper.cos(var1 * 0.6662F * 2.0F + (float)Math.PI * 0.5F) * 0.4F) * var2;
-		float var13 = -(MathHelper.cos(var1 * 0.6662F * 2.0F + (float)Math.PI * 3.0F / 2.0F) * 0.4F) * var2;
-		float var14 = Math.abs(MathHelper.sin(var1 * 0.6662F + 0.0F) * 0.4F) * var2;
-		float var15 = Math.abs(MathHelper.sin(var1 * 0.6662F + (float)Math.PI) * 0.4F) * var2;
-		float var16 = Math.abs(MathHelper.sin(var1 * 0.6662F + (float)Math.PI * 0.5F) * 0.4F) * var2;
-		float var17 = Math.abs(MathHelper.sin(var1 * 0.6662F + (float)Math.PI * 3.0F / 2.0F) * 0.4F) * var2;
-		this.spiderLeg1.rotateAngleY += var10;
-		this.spiderLeg2.rotateAngleY += -var10;
-		this.spiderLeg3.rotateAngleY += var11;
-		this.spiderLeg4.rotateAngleY += -var11;
-		this.spiderLeg5.rotateAngleY += var12;
-		this.spiderLeg6.rotateAngleY += -var12;
-		this.spiderLeg7.rotateAngleY += var13;
-		this.spiderLeg8.rotateAngleY += -var13;
-		this.spiderLeg1.rotateAngleZ += var14;
-		this.spiderLeg2.rotateAngleZ += -var14;
-		this.spiderLeg3.rotateAngleZ += var15;
-		this.spiderLeg4.rotateAngleZ += -var15;
-		this.spiderLeg5.rotateAngleZ += var16;
-		this.spiderLeg6.rotateAngleZ += -var16;
-		this.spiderLeg7.rotateAngleZ += var17;
-		this.spiderLeg8.rotateAngleZ += -var17;
+		this.spiderLeg8.addBox(-1.0F, -1.0F, -1.0F, 16, 2, 2, f1);
+		this.spiderLeg8.setRotationPoint(4.0F, (float)(0 + b2), -1.0F);
+	}
+
+	public void render(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.setRotationAngles(float1, float2, float3, float4, float5, float6);
+		this.spiderHead.render(float6);
+		this.spiderNeck.render(float6);
+		this.spiderBody.render(float6);
+		this.spiderLeg1.render(float6);
+		this.spiderLeg2.render(float6);
+		this.spiderLeg3.render(float6);
+		this.spiderLeg4.render(float6);
+		this.spiderLeg5.render(float6);
+		this.spiderLeg6.render(float6);
+		this.spiderLeg7.render(float6);
+		this.spiderLeg8.render(float6);
+	}
+
+	public void setRotationAngles(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.spiderHead.rotateAngleY = float4 / 57.295776F;
+		this.spiderHead.rotateAngleX = float5 / 57.295776F;
+		float f7 = 0.7853982F;
+		this.spiderLeg1.rotateAngleZ = -f7;
+		this.spiderLeg2.rotateAngleZ = f7;
+		this.spiderLeg3.rotateAngleZ = -f7 * 0.74F;
+		this.spiderLeg4.rotateAngleZ = f7 * 0.74F;
+		this.spiderLeg5.rotateAngleZ = -f7 * 0.74F;
+		this.spiderLeg6.rotateAngleZ = f7 * 0.74F;
+		this.spiderLeg7.rotateAngleZ = -f7;
+		this.spiderLeg8.rotateAngleZ = f7;
+		float f8 = -0.0F;
+		float f9 = 0.3926991F;
+		this.spiderLeg1.rotateAngleY = f9 * 2.0F + f8;
+		this.spiderLeg2.rotateAngleY = -f9 * 2.0F - f8;
+		this.spiderLeg3.rotateAngleY = f9 * 1.0F + f8;
+		this.spiderLeg4.rotateAngleY = -f9 * 1.0F - f8;
+		this.spiderLeg5.rotateAngleY = -f9 * 1.0F + f8;
+		this.spiderLeg6.rotateAngleY = f9 * 1.0F - f8;
+		this.spiderLeg7.rotateAngleY = -f9 * 2.0F + f8;
+		this.spiderLeg8.rotateAngleY = f9 * 2.0F - f8;
+		float f10 = -(MathHelper.cos(float1 * 0.6662F * 2.0F + 0.0F) * 0.4F) * float2;
+		float f11 = -(MathHelper.cos(float1 * 0.6662F * 2.0F + (float)Math.PI) * 0.4F) * float2;
+		float f12 = -(MathHelper.cos(float1 * 0.6662F * 2.0F + (float)Math.PI / 2F) * 0.4F) * float2;
+		float f13 = -(MathHelper.cos(float1 * 0.6662F * 2.0F + 4.712389F) * 0.4F) * float2;
+		float f14 = Math.abs(MathHelper.sin(float1 * 0.6662F + 0.0F) * 0.4F) * float2;
+		float f15 = Math.abs(MathHelper.sin(float1 * 0.6662F + (float)Math.PI) * 0.4F) * float2;
+		float f16 = Math.abs(MathHelper.sin(float1 * 0.6662F + (float)Math.PI / 2F) * 0.4F) * float2;
+		float f17 = Math.abs(MathHelper.sin(float1 * 0.6662F + 4.712389F) * 0.4F) * float2;
+		this.spiderLeg1.rotateAngleY += f10;
+		this.spiderLeg2.rotateAngleY += -f10;
+		this.spiderLeg3.rotateAngleY += f11;
+		this.spiderLeg4.rotateAngleY += -f11;
+		this.spiderLeg5.rotateAngleY += f12;
+		this.spiderLeg6.rotateAngleY += -f12;
+		this.spiderLeg7.rotateAngleY += f13;
+		this.spiderLeg8.rotateAngleY += -f13;
+		this.spiderLeg1.rotateAngleZ += f14;
+		this.spiderLeg2.rotateAngleZ += -f14;
+		this.spiderLeg3.rotateAngleZ += f15;
+		this.spiderLeg4.rotateAngleZ += -f15;
+		this.spiderLeg5.rotateAngleZ += f16;
+		this.spiderLeg6.rotateAngleZ += -f16;
+		this.spiderLeg7.rotateAngleZ += f17;
+		this.spiderLeg8.rotateAngleZ += -f17;
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandPass.java
@@ -1,0 +1,60 @@
+package net.minecraft.src;
+
+class CommandPass extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8548_63h7728PhQFr6rOT1k6tViR0P9s4mH56399sbwPz9e6y6CA3T1PZ7J9fd7sq;
+    
+    CommandPass(final CommandManager abb) {
+        this.field_8548_63h7728PhQFr6rOT1k6tViR0P9s4mH56399sbwPz9e6y6CA3T1PZ7J9fd7sq = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        switch ((int)arr[0]) {
+            case 7: {
+                InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("Is the number", 10000);
+                break;
+            }
+            case 9: {
+                InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("Wrong place, Raven.", 10000);
+                break;
+            }
+            case 810116: {
+                InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("Help what with?", 10000);
+                break;
+            }
+            case 1: {
+                InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("Welcome back, dear friend", 10000);
+                break;
+            }
+            case 77: {
+                InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("You won't find the candles here", 10000);
+                break;
+            }
+            case 1986: {
+                InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("It's dangerous to go alone!", 10000);
+                break;
+            }
+            case 1993: {
+                InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("Lamp Oil? Rope? Bombs? We don't have that.", 10000);
+                break;
+            }
+            case 2011: {
+                InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("Wrong password screen, Zachary", 10000);
+                break;
+            }
+            case 1604: {
+                InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("3:8jWBk36GiUr3dV9dB8n6a47594GNQ4AHz1V3p5660O75oGy93l89Yu4vDhCgfMahmA67q60z01Nu3vgS", 10000);
+                break;
+            }
+            case 1605: {
+                InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("I guess this can be called an easter egg.\nThis was our first foray into working with a somewhat popular property\nThe prior branches, they were cut just because they weren't high enough quality\nor too drastic a change.\nThe workflow was surely quite different, But i can't really complain\nI'm glad this branch is as is.\nIt was our magnum opus.", 10000);
+                break;
+            }
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/DS5InstrTriggerUpdate.java
@@ -1,0 +1,26 @@
+package net.minecraft.src;
+
+public class DS5InstrTriggerUpdate implements DS5Instruction {
+	public int controllerIndex;
+	public TriggerIndex triggerIndex;
+	public TriggerMode triggerMode;
+	public int[] triggerModeVal;
+
+	public DS5InstrTriggerUpdate(int integer, TriggerIndex _5qDg8I6V6use5F4eR66if1sn4LSYJ0Sm2uHv3rQcPoPVlx50GV5Q3li13Gqu0pt36nj8eCRNFxYqZ9zy514883Z17idh6gR, TriggerMode _13LkeC1Ve0FSxHCSmhIvs6MMly6pK00h697UjF14ovhmWgBu13Xr7GXeKf20GuhM9l8Lg4ZaPAaGO00v38854j7C7JnMlRv0uB, int... arr) {
+		this.controllerIndex = integer;
+		this.triggerIndex = _5qDg8I6V6use5F4eR66if1sn4LSYJ0Sm2uHv3rQcPoPVlx50GV5Q3li13Gqu0pt36nj8eCRNFxYqZ9zy514883Z17idh6gR;
+		this.triggerMode = _13LkeC1Ve0FSxHCSmhIvs6MMly6pK00h697UjF14ovhmWgBu13Xr7GXeKf20GuhM9l8Lg4ZaPAaGO00v38854j7C7JnMlRv0uB;
+		this.triggerModeVal = arr;
+	}
+
+	public String GetJSON() {
+		String string1 = "{\"type\":1,\"parameters\":[" + this.controllerIndex + "," + this.triggerIndex.index + "," + this.triggerMode.index + ",";
+
+		for(int i2 = 0; i2 != this.triggerModeVal.length; ++i2) {
+			string1 = string1 + this.triggerModeVal[i2] + (i2 != this.triggerModeVal.length - 1 ? "," : "");
+		}
+
+		string1 = string1 + "]}";
+		return string1;
+	}
+}
--- net/minecraft/src/Frustum.java
+++ net/minecraft/src/Frustum.java
@@ -6,17 +6,17 @@
 	private double yPosition;
 	private double zPosition;
 
-	public void setPosition(double var1, double var3, double var5) {
-		this.xPosition = var1;
-		this.yPosition = var3;
-		this.zPosition = var5;
-	}
-
-	public boolean isBoxInFrustum(double var1, double var3, double var5, double var7, double var9, double var11) {
-		return this.clippingHelper.isBoxInFrustum(var1 - this.xPosition, var3 - this.yPosition, var5 - this.zPosition, var7 - this.xPosition, var9 - this.yPosition, var11 - this.zPosition);
-	}
-
-	public boolean isBoundingBoxInFrustum(AxisAlignedBB var1) {
-		return this.isBoxInFrustum(var1.minX, var1.minY, var1.minZ, var1.maxX, var1.maxY, var1.maxZ);
+	public void setPosition(double double1, double double2, double double3) {
+		this.xPosition = double1;
+		this.yPosition = double2;
+		this.zPosition = double3;
+	}
+
+	public boolean isBoxInFrustum(double double1, double double2, double double3, double double4, double double5, double double6) {
+		return this.clippingHelper.isBoxInFrustum(double1 - this.xPosition, double2 - this.yPosition, double3 - this.zPosition, double4 - this.xPosition, double5 - this.yPosition, double6 - this.zPosition);
+	}
+
+	public boolean isBoundingBoxInFrustum(AxisAlignedBB zb) {
+		return this.isBoxInFrustum(zb.minX, zb.minY, zb.minZ, zb.maxX, zb.maxY, zb.maxZ);
 	}
 }
--- /dev/null
+++ net/minecraft/src/HubWorldUnknownClass.java
@@ -1,0 +1,10 @@
+package net.minecraft.src;
+
+public class HubWorldUnknownClass {
+	public HubWorldUnknownClass(HubWorld wv, int integer2, int integer3, int integer4) {
+	}
+
+	public void func_11056_6le43T75qqWDp58m0mrEzmN4D8XIFDp49q0UpzT6b648itxkXf9xW730lX12() {
+		throw new UnsupportedOperationException("Not implemented yet");
+	}
+}
--- net/minecraft/src/MCHashEntry.java
+++ net/minecraft/src/MCHashEntry.java
@@ -6,11 +6,11 @@
 	MCHashEntry nextEntry;
 	final int slotHash;
 
-	MCHashEntry(int var1, int var2, Object var3, MCHashEntry var4) {
-		this.valueEntry = var3;
-		this.nextEntry = var4;
-		this.hashEntry = var2;
-		this.slotHash = var1;
+	MCHashEntry(int slotHash, int hashEntry, Object valueEntry, MCHashEntry nextEntry) {
+		this.valueEntry = valueEntry;
+		this.nextEntry = nextEntry;
+		this.hashEntry = hashEntry;
+		this.slotHash = slotHash;
 	}
 
 	public final int getHash() {
@@ -21,17 +21,17 @@
 		return this.valueEntry;
 	}
 
-	public final boolean equals(Object var1) {
-		if(!(var1 instanceof MCHashEntry)) {
+	public final boolean equals(Object object) {
+		if(!(object instanceof MCHashEntry)) {
 			return false;
 		} else {
-			MCHashEntry var2 = (MCHashEntry)var1;
-			Integer var3 = Integer.valueOf(this.getHash());
-			Integer var4 = Integer.valueOf(var2.getHash());
-			if(var3 == var4 || var3 != null && var3.equals(var4)) {
-				Object var5 = this.getValue();
-				Object var6 = var2.getValue();
-				if(var5 == var6 || var5 != null && var5.equals(var6)) {
+			MCHashEntry mCHashEntry2 = (MCHashEntry)object;
+			Integer integer3 = this.getHash();
+			Integer integer4 = mCHashEntry2.getHash();
+			if(integer3 == integer4 || integer3 != null && integer3.equals(integer4)) {
+				Object object5 = this.getValue();
+				Object object6 = mCHashEntry2.getValue();
+				if(object5 == object6 || object5 != null && object5.equals(object6)) {
 					return true;
 				}
 			}
--- net/minecraft/isom/IsomPreviewApplet.java
+++ net/minecraft/isom/IsomPreviewApplet.java
@@ -2,6 +2,7 @@
 
 import java.applet.Applet;
 import java.awt.BorderLayout;
+
 import net.minecraft.src.CanvasIsomPreview;
 
 public class IsomPreviewApplet extends Applet {
--- net/minecraft/src/ItemBoat.java
+++ net/minecraft/src/ItemBoat.java
@@ -1,40 +1,40 @@
 package net.minecraft.src;
 
 public class ItemBoat extends Item {
-	public ItemBoat(int var1) {
-		super(var1);
+	public ItemBoat(int itemID) {
+		super(itemID);
 		this.maxStackSize = 1;
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		float var4 = 1.0F;
-		float var5 = var3.prevRotationPitch + (var3.rotationPitch - var3.prevRotationPitch) * var4;
-		float var6 = var3.prevRotationYaw + (var3.rotationYaw - var3.prevRotationYaw) * var4;
-		double var7 = var3.prevPosX + (var3.posX - var3.prevPosX) * (double)var4;
-		double var9 = var3.prevPosY + (var3.posY - var3.prevPosY) * (double)var4;
-		double var11 = var3.prevPosZ + (var3.posZ - var3.prevPosZ) * (double)var4;
-		Vec3D var13 = Vec3D.createVector(var7, var9, var11);
-		float var14 = MathHelper.cos(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-		float var15 = MathHelper.sin(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-		float var16 = -MathHelper.cos(-var5 * ((float)Math.PI / 180.0F));
-		float var17 = MathHelper.sin(-var5 * ((float)Math.PI / 180.0F));
-		float var18 = var15 * var16;
-		float var20 = var14 * var16;
-		double var21 = 5.0D;
-		Vec3D var23 = var13.addVector((double)var18 * var21, (double)var17 * var21, (double)var20 * var21);
-		MovingObjectPosition var24 = var2.rayTraceBlocks_do(var13, var23, true);
-		if(var24 == null) {
-			return var1;
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		float f4 = 1.0F;
+		float f5 = entityPlayer.prevRotationPitch + (entityPlayer.rotationPitch - entityPlayer.prevRotationPitch) * f4;
+		float f6 = entityPlayer.prevRotationYaw + (entityPlayer.rotationYaw - entityPlayer.prevRotationYaw) * f4;
+		double d7 = entityPlayer.prevPosX + (entityPlayer.posX - entityPlayer.prevPosX) * (double)f4;
+		double d9 = entityPlayer.prevPosY + (entityPlayer.posY - entityPlayer.prevPosY) * (double)f4;
+		double d11 = entityPlayer.prevPosZ + (entityPlayer.posZ - entityPlayer.prevPosZ) * (double)f4;
+		Vec3D vec3D13 = Vec3D.createVector(d7, d9, d11);
+		float f14 = MathHelper.cos(-f6 * 0.017453292F - (float)Math.PI);
+		float f15 = MathHelper.sin(-f6 * 0.017453292F - (float)Math.PI);
+		float f16 = -MathHelper.cos(-f5 * 0.017453292F);
+		float f17 = MathHelper.sin(-f5 * 0.017453292F);
+		float f18 = f15 * f16;
+		float f19 = f14 * f16;
+		double d20 = 5.0D;
+		Vec3D vec3D22 = vec3D13.addVector((double)f18 * d20, (double)f17 * d20, (double)f19 * d20);
+		MovingObjectPosition movingObjectPosition23 = worldObj.rayTraceBlocks_do(vec3D13, vec3D22, true);
+		if(movingObjectPosition23 == null) {
+			return itemStack;
 		} else {
-			if(var24.typeOfHit == 0) {
-				int var25 = var24.blockX;
-				int var26 = var24.blockY;
-				int var27 = var24.blockZ;
-				var2.spawnEntityInWorld(new EntityBoat(var2, (double)((float)var25 + 0.5F), (double)((float)var26 + 1.5F), (double)((float)var27 + 0.5F)));
-				--var1.stackSize;
+			if(movingObjectPosition23.typeOfHit == 0) {
+				int i24 = movingObjectPosition23.blockX;
+				int i25 = movingObjectPosition23.blockY;
+				int i26 = movingObjectPosition23.blockZ;
+				worldObj.spawnEntityInWorld(new EntityBoat(worldObj, (double)((float)i24 + 0.5F), (double)((float)i25 + 1.5F), (double)((float)i26 + 0.5F)));
+				--itemStack.stackSize;
 			}
 
-			return var1;
+			return itemStack;
 		}
 	}
 }
--- /dev/null
+++ net/minecraft/src/OverlayPaintingTitle.java
@@ -1,0 +1,22 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+public class OverlayPaintingTitle {
+	private Minecraft field_11633_2B86TRZ3P4524vBa1ifZ79TQhjgCR4Gjn6E91P5j9B2xgA7ud1Z8xbt2n5T2;
+
+	public OverlayPaintingTitle(Minecraft minecraft) {
+		this.field_11633_2B86TRZ3P4524vBa1ifZ79TQhjgCR4Gjn6E91P5j9B2xgA7ud1Z8xbt2n5T2 = minecraft;
+	}
+
+	public void RenderOverlay(GuiIngame eu, int integer2, int integer3) {
+		if(InputHandler.mc.objectMouseOver != null && InputHandler.mc.objectMouseOver.typeOfHit == 1 && InputHandler.mc.objectMouseOver.entityHit instanceof EntityPainting) {
+			FontRenderer fontRenderer4 = this.field_11633_2B86TRZ3P4524vBa1ifZ79TQhjgCR4Gjn6E91P5j9B2xgA7ud1Z8xbt2n5T2.fontRenderer;
+			String string5 = ((EntityPainting)InputHandler.mc.objectMouseOver.entityHit).art.title;
+			int i6 = fontRenderer4.getStringWidth(string5);
+			GuiIngame.drawGradientRect(integer2 / 2 - i6 / 2 - 2, integer3 / 4, integer2 / 2 + i6 / 2 + 2, integer3 / 4 + 13, -1610612736, Integer.MIN_VALUE);
+			eu.drawCenteredString(fontRenderer4, string5, integer2 / 2, integer3 / 4 + 2, -1);
+		}
+
+	}
+}
--- net/minecraft/src/InventoryLargeChest.java
+++ net/minecraft/src/InventoryLargeChest.java
@@ -5,10 +5,10 @@
 	private IInventory upperChest;
 	private IInventory lowerChest;
 
-	public InventoryLargeChest(String var1, IInventory var2, IInventory var3) {
-		this.name = var1;
-		this.upperChest = var2;
-		this.lowerChest = var3;
+	public InventoryLargeChest(String name, IInventory upperChest, IInventory lowerChest) {
+		this.name = name;
+		this.upperChest = upperChest;
+		this.lowerChest = lowerChest;
 	}
 
 	public int getSizeInventory() {
@@ -19,19 +19,19 @@
 		return this.name;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return var1 >= this.upperChest.getSizeInventory() ? this.lowerChest.getStackInSlot(var1 - this.upperChest.getSizeInventory()) : this.upperChest.getStackInSlot(var1);
-	}
-
-	public ItemStack decrStackSize(int var1, int var2) {
-		return var1 >= this.upperChest.getSizeInventory() ? this.lowerChest.decrStackSize(var1 - this.upperChest.getSizeInventory(), var2) : this.upperChest.decrStackSize(var1, var2);
-	}
-
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		if(var1 >= this.upperChest.getSizeInventory()) {
-			this.lowerChest.setInventorySlotContents(var1 - this.upperChest.getSizeInventory(), var2);
+	public ItemStack getStackInSlot(int slot) {
+		return slot >= this.upperChest.getSizeInventory() ? this.lowerChest.getStackInSlot(slot - this.upperChest.getSizeInventory()) : this.upperChest.getStackInSlot(slot);
+	}
+
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		return slot >= this.upperChest.getSizeInventory() ? this.lowerChest.decrStackSize(slot - this.upperChest.getSizeInventory(), stackSize) : this.upperChest.decrStackSize(slot, stackSize);
+	}
+
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		if(slot >= this.upperChest.getSizeInventory()) {
+			this.lowerChest.setInventorySlotContents(slot - this.upperChest.getSizeInventory(), itemStack);
 		} else {
-			this.upperChest.setInventorySlotContents(var1, var2);
+			this.upperChest.setInventorySlotContents(slot, itemStack);
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/CubeDeformation.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+public class CubeDeformation {
+	public float v;
+
+	public CubeDeformation(float float1) {
+		this.v = float1;
+	}
+}
--- net/minecraft/src/NetworkWriterThread.java
+++ net/minecraft/src/NetworkWriterThread.java
@@ -3,40 +3,69 @@
 class NetworkWriterThread extends Thread {
 	final NetworkManager netManager;
 
-	NetworkWriterThread(NetworkManager var1, String var2) {
-		super(var2);
-		this.netManager = var1;
+	NetworkWriterThread(NetworkManager netManager, String threadName) {
+		super(threadName);
+		this.netManager = netManager;
 	}
 
 	public void run() {
-		Object var1 = NetworkManager.threadSyncObject;
-		synchronized(var1) {
+		Object object1 = NetworkManager.threadSyncObject;
+		Object object2 = NetworkManager.threadSyncObject;
+		synchronized(NetworkManager.threadSyncObject) {
 			++NetworkManager.numWriteThreads;
 		}
 
+		Object object3;
+		Object object4;
+		boolean z25;
 		while(true) {
-			boolean var11 = false;
+			z25 = false;
+			boolean z18 = false;
 
 			try {
-				var11 = true;
+				z18 = true;
+				z25 = true;
 				if(!NetworkManager.isRunning(this.netManager)) {
-					var11 = false;
+					z25 = false;
+					z18 = false;
 					break;
 				}
 
 				NetworkManager.sendNetworkPacket(this.netManager);
+				z18 = false;
 			} finally {
-				if(var11) {
-					Object var5 = NetworkManager.threadSyncObject;
-					synchronized(var5) {
-						--NetworkManager.numWriteThreads;
+				if(z18) {
+					if(z25) {
+						Object object8 = NetworkManager.threadSyncObject;
+						Object object9 = NetworkManager.threadSyncObject;
+						synchronized(NetworkManager.threadSyncObject) {
+							--NetworkManager.numWriteThreads;
+						}
 					}
-				}
-			}
-		}
-
-		var1 = NetworkManager.threadSyncObject;
-		synchronized(var1) {
+
+				}
+			}
+
+			if(z25) {
+				object3 = NetworkManager.threadSyncObject;
+				object4 = NetworkManager.threadSyncObject;
+				synchronized(NetworkManager.threadSyncObject) {
+					--NetworkManager.numWriteThreads;
+				}
+			}
+		}
+
+		if(z25) {
+			object3 = NetworkManager.threadSyncObject;
+			object4 = NetworkManager.threadSyncObject;
+			synchronized(NetworkManager.threadSyncObject) {
+				--NetworkManager.numWriteThreads;
+			}
+		}
+
+		object1 = NetworkManager.threadSyncObject;
+		object2 = NetworkManager.threadSyncObject;
+		synchronized(NetworkManager.threadSyncObject) {
 			--NetworkManager.numWriteThreads;
 		}
 	}
--- /dev/null
+++ net/minecraft/src/CommandBlockinfo.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+class CommandBlockinfo extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8593_15BAj0cnMWh93A96NBW4sLmc6g62th9D3veqibo5XF23q770Wk876k3ZkyUw;
+    
+    CommandBlockinfo(final CommandManager abb) {
+        this.field_8593_15BAj0cnMWh93A96NBW4sLmc6g62th9D3veqibo5XF23q770Wk876k3ZkyUw = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        if (InputHandler.mc.objectMouseOver != null && InputHandler.mc.objectMouseOver.typeOfHit == 0) {
+            InputHandler.mc.ingameGUI.addChatMessage("Block ID: " + InputHandler.mc.theWorld.getBlockId(InputHandler.mc.objectMouseOver.blockX, InputHandler.mc.objectMouseOver.blockY, InputHandler.mc.objectMouseOver.blockZ) + ", [" + InputHandler.mc.objectMouseOver.blockX + "," + InputHandler.mc.objectMouseOver.blockY + "," + InputHandler.mc.objectMouseOver.blockZ + "]");
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/EntitySpear.java
@@ -1,0 +1,225 @@
+package net.minecraft.src;
+
+import java.util.List;
+
+public class EntitySpear extends EntityFirable {
+	private int field_8871_608941W5fgI6s2x32s8TmN8Pqp1I2Z8x71oa6OkR14U4zPPVMF3xC9BIRDlJ = -1;
+	private int field_8868_3DLPx76j5E04a498y1RQW52Sb3Wg9153eA5r9F1bDZL6an48DY98Cwdn70S1 = -1;
+	private int field_8870_5RX6HJLT2GYsMzqLxb3M1549LjHiIlxi2wE5517n5v0Ec6OkK6r429E78WMt = -1;
+	private int field_8866_1z9z7x2ZMfQZ4u4aI84p6401ttI6UZQbti6666e4HgXvOB6X9Hll5JKDq0CI = 0;
+	private boolean field_8865_6hOnHT7l3R5ni9ccNeBDZKIcYZTeR773Q7eO0122TKr0JA0uV2s4uc02H9I9 = false;
+	public int field_8867_7caYZgQ3EvPcFOT813282a37X2sHr0psPvDj99PBcm2588z93rYCkidzv3gI = 0;
+	private EntityLiving field_8869_381h9T83DMXn2q7FfLFLpsu56Aue7Q3y7HNtXH2B8z7vTNQYhiGlkQk8g73Z;
+	private int field_8864_75Z193MxJXUsNy6zH723e2R41h3vr4Oby89XPA8Ui2O00i4LWnS5d0VSTQ8K;
+	private int field_8863_1Gi60KvZi082o3Lb38Af2U73gx1ygjA29DyNiHI67LJL32KByc1z5CQtrA2K = 0;
+
+	public String getTexture() {
+		return "/item/spearprojectile.png";
+	}
+
+	public EntitySpear(World world) {
+		super(world);
+		this.setSize(0.5F, 0.5F);
+	}
+
+	public EntitySpear(World vg, EntityLiving zi) {
+		super(vg);
+		this.field_8869_381h9T83DMXn2q7FfLFLpsu56Aue7Q3y7HNtXH2B8z7vTNQYhiGlkQk8g73Z = zi;
+		this.setSize(0.5F, 0.5F);
+		this.setLocationAndAngles(zi.posX, zi.posY, zi.posZ, zi.rotationYaw, zi.rotationPitch);
+		this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+		this.posY -= (double)0.1F;
+		this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+		this.setPosition(this.posX, this.posY, this.posZ);
+		this.yOffset = 0.0F;
+		this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI));
+		this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI));
+		this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI));
+		this.func_8862_62fy3xag0c9z7TJjArJC90Lh4QqV7rKpSSg3hIM929UUP4Eg7q57g2p0SP6W(this.motionX, this.motionY, this.motionZ, 3.5F, 1.0F);
+	}
+
+	public void func_8862_62fy3xag0c9z7TJjArJC90Lh4QqV7rKpSSg3hIM929UUP4Eg7q57g2p0SP6W(double double1, double double2, double double3, float float4, float float5) {
+		float f9 = MathHelper.sqrt_double(double1 * double1 + double2 * double2 + double3 * double3);
+		double1 /= (double)f9;
+		double2 /= (double)f9;
+		double3 /= (double)f9;
+		double1 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double2 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double3 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double1 *= (double)float4;
+		double2 *= (double)float4;
+		double3 *= (double)float4;
+		this.motionX = double1;
+		this.motionY = double2;
+		this.motionZ = double3;
+		float f10 = MathHelper.sqrt_double(double1 * double1 + double3 * double3);
+		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(double1, double3) * 180.0D / (double)(float)Math.PI);
+		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(double2, (double)f10) * 180.0D / (double)(float)Math.PI);
+		this.field_8864_75Z193MxJXUsNy6zH723e2R41h3vr4Oby89XPA8Ui2O00i4LWnS5d0VSTQ8K = 0;
+	}
+
+	public void onUpdate() {
+		super.onUpdate();
+		if(this.field_8867_7caYZgQ3EvPcFOT813282a37X2sHr0psPvDj99PBcm2588z93rYCkidzv3gI > 0) {
+			--this.field_8867_7caYZgQ3EvPcFOT813282a37X2sHr0psPvDj99PBcm2588z93rYCkidzv3gI;
+		}
+
+		if(this.field_8865_6hOnHT7l3R5ni9ccNeBDZKIcYZTeR773Q7eO0122TKr0JA0uV2s4uc02H9I9) {
+			int i1 = this.worldObj.getBlockId(this.field_8871_608941W5fgI6s2x32s8TmN8Pqp1I2Z8x71oa6OkR14U4zPPVMF3xC9BIRDlJ, this.field_8868_3DLPx76j5E04a498y1RQW52Sb3Wg9153eA5r9F1bDZL6an48DY98Cwdn70S1, this.field_8870_5RX6HJLT2GYsMzqLxb3M1549LjHiIlxi2wE5517n5v0Ec6OkK6r429E78WMt);
+			if(i1 == this.field_8866_1z9z7x2ZMfQZ4u4aI84p6401ttI6UZQbti6666e4HgXvOB6X9Hll5JKDq0CI) {
+				++this.field_8864_75Z193MxJXUsNy6zH723e2R41h3vr4Oby89XPA8Ui2O00i4LWnS5d0VSTQ8K;
+				if(this.field_8864_75Z193MxJXUsNy6zH723e2R41h3vr4Oby89XPA8Ui2O00i4LWnS5d0VSTQ8K == 1200) {
+					this.setEntityDead();
+				}
+
+				return;
+			}
+
+			this.field_8865_6hOnHT7l3R5ni9ccNeBDZKIcYZTeR773Q7eO0122TKr0JA0uV2s4uc02H9I9 = false;
+			this.motionX *= (double)(this.rand.nextFloat() * 0.2F);
+			this.motionY *= (double)(this.rand.nextFloat() * 0.2F);
+			this.motionZ *= (double)(this.rand.nextFloat() * 0.2F);
+			this.field_8864_75Z193MxJXUsNy6zH723e2R41h3vr4Oby89XPA8Ui2O00i4LWnS5d0VSTQ8K = 0;
+			this.field_8863_1Gi60KvZi082o3Lb38Af2U73gx1ygjA29DyNiHI67LJL32KByc1z5CQtrA2K = 0;
+		} else {
+			++this.field_8863_1Gi60KvZi082o3Lb38Af2U73gx1ygjA29DyNiHI67LJL32KByc1z5CQtrA2K;
+		}
+
+		Vec3D vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		Vec3D vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		MovingObjectPosition movingObjectPosition3 = this.worldObj.rayTraceBlocks(vec3D15, vec3D2);
+		vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		if(movingObjectPosition3 != null) {
+			vec3D2 = Vec3D.createVector(movingObjectPosition3.hitVec.xCoord, movingObjectPosition3.hitVec.yCoord, movingObjectPosition3.hitVec.zCoord);
+		}
+
+		Entity entity4 = null;
+		List list5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+		double d6 = 0.0D;
+
+		float f8;
+		for(int i9 = 0; i9 < list5.size(); ++i9) {
+			Entity entity10 = (Entity)list5.get(i9);
+			if(entity10.canBeCollidedWith() && (entity10 != this.field_8869_381h9T83DMXn2q7FfLFLpsu56Aue7Q3y7HNtXH2B8z7vTNQYhiGlkQk8g73Z || this.field_8863_1Gi60KvZi082o3Lb38Af2U73gx1ygjA29DyNiHI67LJL32KByc1z5CQtrA2K >= 5)) {
+				f8 = 0.3F;
+				AxisAlignedBB axisAlignedBB11 = entity10.boundingBox.expand((double)f8, (double)f8, (double)f8);
+				MovingObjectPosition movingObjectPosition12 = axisAlignedBB11.calculateIntercept(vec3D15, vec3D2);
+				if(movingObjectPosition12 != null) {
+					double d13 = vec3D15.distanceTo(movingObjectPosition12.hitVec);
+					if(d13 < d6 || d6 == 0.0D) {
+						entity4 = entity10;
+						d6 = d13;
+					}
+				}
+			}
+		}
+
+		if(entity4 != null) {
+			movingObjectPosition3 = new MovingObjectPosition(entity4);
+		}
+
+		float f16;
+		if(movingObjectPosition3 != null) {
+			if(movingObjectPosition3.entityHit != null) {
+				if(movingObjectPosition3.entityHit.attackEntityFrom(this.field_8869_381h9T83DMXn2q7FfLFLpsu56Aue7Q3y7HNtXH2B8z7vTNQYhiGlkQk8g73Z, 4)) {
+					this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
+					this.setEntityDead();
+				} else {
+					this.motionX *= -0.10000000149011612D;
+					this.motionY *= -0.10000000149011612D;
+					this.motionZ *= -0.10000000149011612D;
+					this.rotationYaw += 180.0F;
+					this.prevRotationYaw += 180.0F;
+					this.field_8863_1Gi60KvZi082o3Lb38Af2U73gx1ygjA29DyNiHI67LJL32KByc1z5CQtrA2K = 0;
+				}
+			} else {
+				this.field_8871_608941W5fgI6s2x32s8TmN8Pqp1I2Z8x71oa6OkR14U4zPPVMF3xC9BIRDlJ = movingObjectPosition3.blockX;
+				this.field_8868_3DLPx76j5E04a498y1RQW52Sb3Wg9153eA5r9F1bDZL6an48DY98Cwdn70S1 = movingObjectPosition3.blockY;
+				this.field_8870_5RX6HJLT2GYsMzqLxb3M1549LjHiIlxi2wE5517n5v0Ec6OkK6r429E78WMt = movingObjectPosition3.blockZ;
+				this.field_8866_1z9z7x2ZMfQZ4u4aI84p6401ttI6UZQbti6666e4HgXvOB6X9Hll5JKDq0CI = this.worldObj.getBlockId(this.field_8871_608941W5fgI6s2x32s8TmN8Pqp1I2Z8x71oa6OkR14U4zPPVMF3xC9BIRDlJ, this.field_8868_3DLPx76j5E04a498y1RQW52Sb3Wg9153eA5r9F1bDZL6an48DY98Cwdn70S1, this.field_8870_5RX6HJLT2GYsMzqLxb3M1549LjHiIlxi2wE5517n5v0Ec6OkK6r429E78WMt);
+				this.motionX = (double)((float)(movingObjectPosition3.hitVec.xCoord - this.posX));
+				this.motionY = (double)((float)(movingObjectPosition3.hitVec.yCoord - this.posY));
+				this.motionZ = (double)((float)(movingObjectPosition3.hitVec.zCoord - this.posZ));
+				f16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
+				this.posX -= this.motionX / (double)f16 * (double)0.05F;
+				this.posY -= this.motionY / (double)f16 * (double)0.05F;
+				this.posZ -= this.motionZ / (double)f16 * (double)0.05F;
+				this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
+				this.field_8865_6hOnHT7l3R5ni9ccNeBDZKIcYZTeR773Q7eO0122TKr0JA0uV2s4uc02H9I9 = true;
+				this.field_8867_7caYZgQ3EvPcFOT813282a37X2sHr0psPvDj99PBcm2588z93rYCkidzv3gI = 7;
+			}
+		}
+
+		this.posX += this.motionX;
+		this.posY += this.motionY;
+		this.posZ += this.motionZ;
+		f16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)(float)Math.PI);
+
+		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)f16) * 180.0D / (double)(float)Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+		}
+
+		while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
+			this.prevRotationPitch += 360.0F;
+		}
+
+		while(this.rotationYaw - this.prevRotationYaw < -180.0F) {
+			this.prevRotationYaw -= 360.0F;
+		}
+
+		while(this.rotationYaw - this.prevRotationYaw >= 180.0F) {
+			this.prevRotationYaw += 360.0F;
+		}
+
+		this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
+		this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
+		float f17 = 0.99F;
+		f8 = 0.03F;
+		if(this.handleWaterMovement()) {
+			for(int i18 = 0; i18 < 4; ++i18) {
+				float f19 = 0.25F;
+				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)f19, this.posY - this.motionY * (double)f19, this.posZ - this.motionZ * (double)f19, this.motionX, this.motionY, this.motionZ);
+			}
+
+			f17 = 0.8F;
+		}
+
+		this.motionX *= (double)f17;
+		this.motionY *= (double)f17;
+		this.motionZ *= (double)f17;
+		this.motionY -= (double)f8;
+		this.setPosition(this.posX, this.posY, this.posZ);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setShort("xTile", (short)this.field_8871_608941W5fgI6s2x32s8TmN8Pqp1I2Z8x71oa6OkR14U4zPPVMF3xC9BIRDlJ);
+		nbttagcompound.setShort("yTile", (short)this.field_8868_3DLPx76j5E04a498y1RQW52Sb3Wg9153eA5r9F1bDZL6an48DY98Cwdn70S1);
+		nbttagcompound.setShort("zTile", (short)this.field_8870_5RX6HJLT2GYsMzqLxb3M1549LjHiIlxi2wE5517n5v0Ec6OkK6r429E78WMt);
+		nbttagcompound.setByte("inTile", (byte)this.field_8866_1z9z7x2ZMfQZ4u4aI84p6401ttI6UZQbti6666e4HgXvOB6X9Hll5JKDq0CI);
+		nbttagcompound.setByte("shake", (byte)this.field_8867_7caYZgQ3EvPcFOT813282a37X2sHr0psPvDj99PBcm2588z93rYCkidzv3gI);
+		nbttagcompound.setByte("inGround", (byte)(this.field_8865_6hOnHT7l3R5ni9ccNeBDZKIcYZTeR773Q7eO0122TKr0JA0uV2s4uc02H9I9 ? 1 : 0));
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.field_8871_608941W5fgI6s2x32s8TmN8Pqp1I2Z8x71oa6OkR14U4zPPVMF3xC9BIRDlJ = nbttagcompound.getShort("xTile");
+		this.field_8868_3DLPx76j5E04a498y1RQW52Sb3Wg9153eA5r9F1bDZL6an48DY98Cwdn70S1 = nbttagcompound.getShort("yTile");
+		this.field_8870_5RX6HJLT2GYsMzqLxb3M1549LjHiIlxi2wE5517n5v0Ec6OkK6r429E78WMt = nbttagcompound.getShort("zTile");
+		this.field_8866_1z9z7x2ZMfQZ4u4aI84p6401ttI6UZQbti6666e4HgXvOB6X9Hll5JKDq0CI = nbttagcompound.getByte("inTile") & 255;
+		this.field_8867_7caYZgQ3EvPcFOT813282a37X2sHr0psPvDj99PBcm2588z93rYCkidzv3gI = nbttagcompound.getByte("shake") & 255;
+		this.field_8865_6hOnHT7l3R5ni9ccNeBDZKIcYZTeR773Q7eO0122TKr0JA0uV2s4uc02H9I9 = nbttagcompound.getByte("inGround") == 1;
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+		if(this.field_8865_6hOnHT7l3R5ni9ccNeBDZKIcYZTeR773Q7eO0122TKr0JA0uV2s4uc02H9I9 && this.field_8869_381h9T83DMXn2q7FfLFLpsu56Aue7Q3y7HNtXH2B8z7vTNQYhiGlkQk8g73Z == entityPlayer && this.field_8867_7caYZgQ3EvPcFOT813282a37X2sHr0psPvDj99PBcm2588z93rYCkidzv3gI <= 0 && entityPlayer.inventory.addItemStackToInventory(new ItemStack(ExtItems.Spear.shiftedIndex, 1))) {
+			this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+			entityPlayer.onItemPickup(this, 1);
+			this.setEntityDead();
+		}
+
+	}
+
+	public float getShadowSize() {
+		return 0.0F;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeUnknownClass.java
@@ -1,0 +1,75 @@
+package net.minecraft.src;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map.Entry;
+
+public class BiomeUnknownClass implements BiomeInterface {
+	private final HashMap field_10189_0jQxZ1dVC518Y32Z1425p2LEer8Ex9wWwb3RWTp79I88VOPE42N1kQ516HmO = new HashMap();
+
+	public void func_10188_7w1lB4c92lMJbh1WTsqK8RWVdY460iP4FuXe5pstl82DxM6koOm8O527VIZ9(WorldGenHouseSmallUnknownClass2 ns, float[] arr) {
+		if(arr.length != 1536) {
+			throw new IllegalArgumentException("Invalid biome map");
+		} else {
+			this.field_10189_0jQxZ1dVC518Y32Z1425p2LEer8Ex9wWwb3RWTp79I88VOPE42N1kQ516HmO.put(ns, arr);
+		}
+	}
+
+	public void func_10187_3AndXWge0Me8Q040iwfs6eu0O3Y09uh0xQI51Sv3WSs5ZG8n7t4xbP8BL96U(WorldGenHouseSmallUnknownClass2 ns) {
+		this.field_10189_0jQxZ1dVC518Y32Z1425p2LEer8Ex9wWwb3RWTp79I88VOPE42N1kQ516HmO.remove(ns);
+	}
+
+	public double func_10184_39mJVmq3bl4dbH51995p9tocRB43bFXruO32GkxVTy54fzIxdy5dt9OeTC2A(int integer1, int integer2, EnumWorldGenerator _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178) {
+		int i4 = integer1 % 16;
+		if(i4 < 0) {
+			i4 += 15;
+		}
+
+		int i5 = integer2 % 16;
+		if(i5 < 0) {
+			i5 += 15;
+		}
+
+		Iterator iterator6 = this.field_10189_0jQxZ1dVC518Y32Z1425p2LEer8Ex9wWwb3RWTp79I88VOPE42N1kQ516HmO.entrySet().iterator();
+
+		Entry map$Entry7;
+		do {
+			if(!iterator6.hasNext()) {
+				return 0.0D;
+			}
+
+			map$Entry7 = (Entry)iterator6.next();
+		} while(((WorldGenHouseSmallUnknownClass2)map$Entry7.getKey()).field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM != integer1 / 16 || ((WorldGenHouseSmallUnknownClass2)map$Entry7.getKey()).field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 != integer2 / 16);
+
+		return (double)((float[])map$Entry7.getValue())[_7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178.ordinal() * 16 * 16 * 2 + i4 * 2 + i5 * 16 * 2];
+	}
+
+	public double func_10186_4hoZRS129yUan88AHp1ksCfja1h93mYKfFda82Qtd8pqKm7G4bgpnYsijiMu(int integer1, int integer2, EnumWorldGenerator _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178) {
+		int i4 = integer1 % 16;
+		if(i4 < 0) {
+			i4 += 16;
+		}
+
+		int i5 = integer2 % 16;
+		if(i5 < 0) {
+			i5 += 16;
+		}
+
+		Iterator iterator6 = this.field_10189_0jQxZ1dVC518Y32Z1425p2LEer8Ex9wWwb3RWTp79I88VOPE42N1kQ516HmO.entrySet().iterator();
+
+		Entry map$Entry7;
+		do {
+			if(!iterator6.hasNext()) {
+				return 0.0D;
+			}
+
+			map$Entry7 = (Entry)iterator6.next();
+		} while(((WorldGenHouseSmallUnknownClass2)map$Entry7.getKey()).field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM != integer1 / 16 || ((WorldGenHouseSmallUnknownClass2)map$Entry7.getKey()).field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 != integer2 / 16);
+
+		return (double)((float[])map$Entry7.getValue())[_7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178.ordinal() * 16 * 16 * 2 + i4 * 2 + i5 * 16 * 2 + 1];
+	}
+
+	public WorldGenMyconUnknownClass func_10185_7j1lR4019pucW00n7wn38afjBd62vEMB6B6SVB9068f4kyPzw4E6wI65ufr8(int integer1, int integer2, EnumWorldGenerator _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178) {
+		return WorldGenMyconUnknownClass.func_9978_2dCM22Pc7rV0IQo46JM3ja84x9AHCGNPeSCDVFoTi3969B8hv2sM7nr6o61r(this.func_10184_39mJVmq3bl4dbH51995p9tocRB43bFXruO32GkxVTy54fzIxdy5dt9OeTC2A(integer1, integer2, _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178), this.func_10186_4hoZRS129yUan88AHp1ksCfja1h93mYKfFda82Qtd8pqKm7G4bgpnYsijiMu(integer1, integer2, _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178), _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178);
+	}
+}
--- net/minecraft/src/Vec3D.java
+++ net/minecraft/src/Vec3D.java
@@ -10,122 +10,122 @@
 	public double yCoord;
 	public double zCoord;
 
-	public static Vec3D createVectorHelper(double var0, double var2, double var4) {
-		return new Vec3D(var0, var2, var4);
+	public static Vec3D createVectorHelper(double x, double y, double z) {
+		return new Vec3D(x, y, z);
 	}
 
 	public static void initialize() {
 		nextVector = 0;
 	}
 
-	public static Vec3D createVector(double var0, double var2, double var4) {
+	public static Vec3D createVector(double x, double y, double z) {
 		if(nextVector >= vectorList.size()) {
 			vectorList.add(createVectorHelper(0.0D, 0.0D, 0.0D));
 		}
 
-		return ((Vec3D)vectorList.get(nextVector++)).setComponents(var0, var2, var4);
-	}
-
-	private Vec3D(double var1, double var3, double var5) {
-		if(var1 == -0.0D) {
-			var1 = 0.0D;
-		}
-
-		if(var3 == -0.0D) {
-			var3 = 0.0D;
-		}
-
-		if(var5 == -0.0D) {
-			var5 = 0.0D;
-		}
-
-		this.xCoord = var1;
-		this.yCoord = var3;
-		this.zCoord = var5;
-	}
-
-	private Vec3D setComponents(double var1, double var3, double var5) {
-		this.xCoord = var1;
-		this.yCoord = var3;
-		this.zCoord = var5;
+		return ((Vec3D)vectorList.get(nextVector++)).setComponents(x, y, z);
+	}
+
+	private Vec3D(double x, double y, double z) {
+		if(x == -0.0D) {
+			x = 0.0D;
+		}
+
+		if(y == -0.0D) {
+			y = 0.0D;
+		}
+
+		if(z == -0.0D) {
+			z = 0.0D;
+		}
+
+		this.xCoord = x;
+		this.yCoord = y;
+		this.zCoord = z;
+	}
+
+	private Vec3D setComponents(double x, double y, double z) {
+		this.xCoord = x;
+		this.yCoord = y;
+		this.zCoord = z;
 		return this;
 	}
 
-	public Vec3D subtract(Vec3D var1) {
-		return createVector(var1.xCoord - this.xCoord, var1.yCoord - this.yCoord, var1.zCoord - this.zCoord);
+	public Vec3D subtract(Vec3D vector) {
+		return createVector(vector.xCoord - this.xCoord, vector.yCoord - this.yCoord, vector.zCoord - this.zCoord);
 	}
 
 	public Vec3D normalize() {
-		double var1 = (double)MathHelper.sqrt_double(this.xCoord * this.xCoord + this.yCoord * this.yCoord + this.zCoord * this.zCoord);
-		return var1 < 1.0E-4D ? createVector(0.0D, 0.0D, 0.0D) : createVector(this.xCoord / var1, this.yCoord / var1, this.zCoord / var1);
-	}
-
-	public Vec3D crossProduct(Vec3D var1) {
-		return createVector(this.yCoord * var1.zCoord - this.zCoord * var1.yCoord, this.zCoord * var1.xCoord - this.xCoord * var1.zCoord, this.xCoord * var1.yCoord - this.yCoord * var1.xCoord);
-	}
-
-	public Vec3D addVector(double var1, double var3, double var5) {
-		return createVector(this.xCoord + var1, this.yCoord + var3, this.zCoord + var5);
-	}
-
-	public double distanceTo(Vec3D var1) {
-		double var2 = var1.xCoord - this.xCoord;
-		double var4 = var1.yCoord - this.yCoord;
-		double var6 = var1.zCoord - this.zCoord;
-		return (double)MathHelper.sqrt_double(var2 * var2 + var4 * var4 + var6 * var6);
-	}
-
-	public double squareDistanceTo(Vec3D var1) {
-		double var2 = var1.xCoord - this.xCoord;
-		double var4 = var1.yCoord - this.yCoord;
-		double var6 = var1.zCoord - this.zCoord;
-		return var2 * var2 + var4 * var4 + var6 * var6;
-	}
-
-	public double squareDistanceTo(double var1, double var3, double var5) {
-		double var7 = var1 - this.xCoord;
-		double var9 = var3 - this.yCoord;
-		double var11 = var5 - this.zCoord;
-		return var7 * var7 + var9 * var9 + var11 * var11;
+		double d1 = (double)MathHelper.sqrt_double(this.xCoord * this.xCoord + this.yCoord * this.yCoord + this.zCoord * this.zCoord);
+		return d1 < 1.0E-4D ? createVector(0.0D, 0.0D, 0.0D) : createVector(this.xCoord / d1, this.yCoord / d1, this.zCoord / d1);
+	}
+
+	public Vec3D crossProduct(Vec3D vector) {
+		return createVector(this.yCoord * vector.zCoord - this.zCoord * vector.yCoord, this.zCoord * vector.xCoord - this.xCoord * vector.zCoord, this.xCoord * vector.yCoord - this.yCoord * vector.xCoord);
+	}
+
+	public Vec3D addVector(double x, double y, double z) {
+		return createVector(this.xCoord + x, this.yCoord + y, this.zCoord + z);
+	}
+
+	public double distanceTo(Vec3D vector) {
+		double d2 = vector.xCoord - this.xCoord;
+		double d4 = vector.yCoord - this.yCoord;
+		double d6 = vector.zCoord - this.zCoord;
+		return (double)MathHelper.sqrt_double(d2 * d2 + d4 * d4 + d6 * d6);
+	}
+
+	public double squareDistanceTo(Vec3D vector) {
+		double d2 = vector.xCoord - this.xCoord;
+		double d4 = vector.yCoord - this.yCoord;
+		double d6 = vector.zCoord - this.zCoord;
+		return d2 * d2 + d4 * d4 + d6 * d6;
+	}
+
+	public double squareDistanceTo(double x, double y, double z) {
+		double d7 = x - this.xCoord;
+		double d9 = y - this.yCoord;
+		double d11 = z - this.zCoord;
+		return d7 * d7 + d9 * d9 + d11 * d11;
 	}
 
 	public double lengthVector() {
 		return (double)MathHelper.sqrt_double(this.xCoord * this.xCoord + this.yCoord * this.yCoord + this.zCoord * this.zCoord);
 	}
 
-	public Vec3D getIntermediateWithXValue(Vec3D var1, double var2) {
-		double var4 = var1.xCoord - this.xCoord;
-		double var6 = var1.yCoord - this.yCoord;
-		double var8 = var1.zCoord - this.zCoord;
-		if(var4 * var4 < (double)1.0E-7F) {
-			return null;
-		} else {
-			double var10 = (var2 - this.xCoord) / var4;
-			return var10 >= 0.0D && var10 <= 1.0D ? createVector(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10) : null;
-		}
-	}
-
-	public Vec3D getIntermediateWithYValue(Vec3D var1, double var2) {
-		double var4 = var1.xCoord - this.xCoord;
-		double var6 = var1.yCoord - this.yCoord;
-		double var8 = var1.zCoord - this.zCoord;
-		if(var6 * var6 < (double)1.0E-7F) {
-			return null;
-		} else {
-			double var10 = (var2 - this.yCoord) / var6;
-			return var10 >= 0.0D && var10 <= 1.0D ? createVector(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10) : null;
-		}
-	}
-
-	public Vec3D getIntermediateWithZValue(Vec3D var1, double var2) {
-		double var4 = var1.xCoord - this.xCoord;
-		double var6 = var1.yCoord - this.yCoord;
-		double var8 = var1.zCoord - this.zCoord;
-		if(var8 * var8 < (double)1.0E-7F) {
-			return null;
-		} else {
-			double var10 = (var2 - this.zCoord) / var8;
-			return var10 >= 0.0D && var10 <= 1.0D ? createVector(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10) : null;
+	public Vec3D getIntermediateWithXValue(Vec3D vector, double xValue) {
+		double d4 = vector.xCoord - this.xCoord;
+		double d6 = vector.yCoord - this.yCoord;
+		double d8 = vector.zCoord - this.zCoord;
+		if(d4 * d4 < 1.0000000116860974E-7D) {
+			return null;
+		} else {
+			double d10 = (xValue - this.xCoord) / d4;
+			return d10 >= 0.0D && d10 <= 1.0D ? createVector(this.xCoord + d4 * d10, this.yCoord + d6 * d10, this.zCoord + d8 * d10) : null;
+		}
+	}
+
+	public Vec3D getIntermediateWithYValue(Vec3D vector, double yValue) {
+		double d4 = vector.xCoord - this.xCoord;
+		double d6 = vector.yCoord - this.yCoord;
+		double d8 = vector.zCoord - this.zCoord;
+		if(d6 * d6 < 1.0000000116860974E-7D) {
+			return null;
+		} else {
+			double d10 = (yValue - this.yCoord) / d6;
+			return d10 >= 0.0D && d10 <= 1.0D ? createVector(this.xCoord + d4 * d10, this.yCoord + d6 * d10, this.zCoord + d8 * d10) : null;
+		}
+	}
+
+	public Vec3D getIntermediateWithZValue(Vec3D vector, double zValue) {
+		double d4 = vector.xCoord - this.xCoord;
+		double d6 = vector.yCoord - this.yCoord;
+		double d8 = vector.zCoord - this.zCoord;
+		if(d8 * d8 < 1.0000000116860974E-7D) {
+			return null;
+		} else {
+			double d10 = (zValue - this.zCoord) / d8;
+			return d10 >= 0.0D && d10 <= 1.0D ? createVector(this.xCoord + d4 * d10, this.yCoord + d6 * d10, this.zCoord + d8 * d10) : null;
 		}
 	}
 
@@ -133,25 +133,25 @@
 		return "(" + this.xCoord + ", " + this.yCoord + ", " + this.zCoord + ")";
 	}
 
-	public void rotateAroundX(float var1) {
-		float var2 = MathHelper.cos(var1);
-		float var3 = MathHelper.sin(var1);
-		double var4 = this.xCoord;
-		double var6 = this.yCoord * (double)var2 + this.zCoord * (double)var3;
-		double var8 = this.zCoord * (double)var2 - this.yCoord * (double)var3;
-		this.xCoord = var4;
-		this.yCoord = var6;
-		this.zCoord = var8;
+	public void rotateAroundX(float x) {
+		float f2 = MathHelper.cos(x);
+		float f3 = MathHelper.sin(x);
+		double d4 = this.xCoord;
+		double d6 = this.yCoord * (double)f2 + this.zCoord * (double)f3;
+		double d8 = this.zCoord * (double)f2 - this.yCoord * (double)f3;
+		this.xCoord = d4;
+		this.yCoord = d6;
+		this.zCoord = d8;
 	}
 
-	public void rotateAroundY(float var1) {
-		float var2 = MathHelper.cos(var1);
-		float var3 = MathHelper.sin(var1);
-		double var4 = this.xCoord * (double)var2 + this.zCoord * (double)var3;
-		double var6 = this.yCoord;
-		double var8 = this.zCoord * (double)var2 - this.xCoord * (double)var3;
-		this.xCoord = var4;
-		this.yCoord = var6;
-		this.zCoord = var8;
+	public void rotateAroundY(float y) {
+		float f2 = MathHelper.cos(y);
+		float f3 = MathHelper.sin(y);
+		double d4 = this.xCoord * (double)f2 + this.zCoord * (double)f3;
+		double d6 = this.yCoord;
+		double d8 = this.zCoord * (double)f2 - this.xCoord * (double)f3;
+		this.xCoord = d4;
+		this.yCoord = d6;
+		this.zCoord = d8;
 	}
 }
--- net/minecraft/src/BlockObsidian.java
+++ net/minecraft/src/BlockObsidian.java
@@ -3,15 +3,15 @@
 import java.util.Random;
 
 public class BlockObsidian extends BlockStone {
-	public BlockObsidian(int var1, int var2) {
-		super(var1, var2);
+	public BlockObsidian(int id, int blockIndex) {
+		super(id, blockIndex);
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 1;
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Block.obsidian.blockID;
 	}
 }
--- net/minecraft/src/RenderTNTPrimed.java
+++ net/minecraft/src/RenderTNTPrimed.java
@@ -9,35 +9,35 @@
 		this.shadowSize = 0.5F;
 	}
 
-	public void doRenderTNT(EntityTNTPrimed var1, double var2, double var4, double var6, float var8, float var9) {
+	public void doRenderTNT(EntityTNTPrimed aci, double double2, double double3, double double4, float float5, float float6) {
 		GL11.glPushMatrix();
-		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
-		float var10;
-		if((float)var1.fuse - var9 + 1.0F < 10.0F) {
-			var10 = 1.0F - ((float)var1.fuse - var9 + 1.0F) / 10.0F;
-			if(var10 < 0.0F) {
-				var10 = 0.0F;
-			}
-
-			if(var10 > 1.0F) {
-				var10 = 1.0F;
-			}
-
-			var10 *= var10;
-			var10 *= var10;
-			float var11 = 1.0F + var10 * 0.3F;
-			GL11.glScalef(var11, var11, var11);
+		GL11.glTranslatef((float)double2, (float)double3, (float)double4);
+		float f10;
+		if((float)aci.fuse - float6 + 1.0F < 10.0F) {
+			f10 = 1.0F - ((float)aci.fuse - float6 + 1.0F) / 10.0F;
+			if(f10 < 0.0F) {
+				f10 = 0.0F;
+			}
+
+			if(f10 > 1.0F) {
+				f10 = 1.0F;
+			}
+
+			f10 *= f10;
+			f10 *= f10;
+			float f11 = 1.0F + f10 * 0.3F;
+			GL11.glScalef(f11, f11, f11);
 		}
 
-		var10 = (1.0F - ((float)var1.fuse - var9 + 1.0F) / 100.0F) * 0.8F;
-		this.loadTexture("/terrain.png");
+		f10 = (1.0F - ((float)aci.fuse - float6 + 1.0F) / 100.0F) * 0.8F;
+		this.loadTexture(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9796_62Ccm2XAR6JqSDTgV762x61j971DNgsIrMhaXZxPs0fQnBC7ymR2l1v1V22X));
 		this.blockRenderer.renderBlockOnInventory(Block.tnt);
-		if(var1.fuse / 5 % 2 == 0) {
+		if(aci.fuse / 5 % 2 == 0) {
 			GL11.glDisable(GL11.GL_TEXTURE_2D);
 			GL11.glDisable(GL11.GL_LIGHTING);
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_DST_ALPHA);
-			GL11.glColor4f(1.0F, 1.0F, 1.0F, var10);
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, f10);
 			this.blockRenderer.renderBlockOnInventory(Block.tnt);
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 			GL11.glDisable(GL11.GL_BLEND);
@@ -48,7 +48,7 @@
 		GL11.glPopMatrix();
 	}
 
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.doRenderTNT((EntityTNTPrimed)var1, var2, var4, var6, var8, var9);
+	public void doRender(Entity xy, double double2, double double3, double double4, float float5, float float6) {
+		this.doRenderTNT((EntityTNTPrimed)xy, double2, double3, double4, float5, float6);
 	}
 }
--- /dev/null
+++ net/minecraft/src/Packet70PlayGlobalMusic.java
@@ -1,0 +1,32 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet70PlayGlobalMusic extends Packet {
+	public String audioName = "";
+
+	public Packet70PlayGlobalMusic() {
+	}
+
+	public Packet70PlayGlobalMusic(String string) {
+		this.audioName = string;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.audioName = dataInputStream.readUTF();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.audioName);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		InputHandler.mc.sndManager.playMusic(this.audioName);
+	}
+
+	public int getPacketSize() {
+		return this.audioName.length() + 2;
+	}
+}
--- net/minecraft/src/ItemAxe.java
+++ net/minecraft/src/ItemAxe.java
@@ -3,7 +3,7 @@
 public class ItemAxe extends ItemTool {
 	private static Block[] blocksEffectiveAgainst = new Block[]{Block.planks, Block.bookshelf, Block.wood, Block.chest};
 
-	public ItemAxe(int var1, int var2) {
-		super(var1, 3, var2, blocksEffectiveAgainst);
+	public ItemAxe(int itemID, int material) {
+		super(itemID, 3, material, blocksEffectiveAgainst);
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockSafe.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+public class BlockSafe extends BlockMultiSided {
+	public BlockSafe(int integer1, int integer2, int integer3, int integer4) {
+		super(integer1, integer2, integer3, integer4);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		ItemStack itemStack6 = entityPlayer.inventory.getCurrentItem();
+		if(itemStack6 == null) {
+			;
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/Packet16BlockItemSwitch.java
+++ net/minecraft/src/Packet16BlockItemSwitch.java
@@ -11,23 +11,23 @@
 	public Packet16BlockItemSwitch() {
 	}
 
-	public Packet16BlockItemSwitch(int var1, int var2) {
-		this.entityId = var1;
-		this.id = var2;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.id = var1.readShort();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeShort(this.id);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleBlockItemSwitch(this);
+	public Packet16BlockItemSwitch(int entityId, int id) {
+		this.entityId = entityId;
+		this.id = id;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.id = dataInputStream.readShort() & 65535;
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeShort(this.id);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleBlockItemSwitch(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/BlockGravel.java
+++ net/minecraft/src/BlockGravel.java
@@ -3,11 +3,11 @@
 import java.util.Random;
 
 public class BlockGravel extends BlockSand {
-	public BlockGravel(int var1, int var2) {
-		super(var1, var2);
+	public BlockGravel(int id, int blockIndex) {
+		super(id, blockIndex);
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return var2.nextInt(10) == 0 ? Item.flint.shiftedIndex : this.blockID;
+	public int idDropped(int count, Random random) {
+		return random.nextInt(10) == 0 ? Item.flint.shiftedIndex : this.blockID;
 	}
 }
--- net/minecraft/src/NBTTagDouble.java
+++ net/minecraft/src/NBTTagDouble.java
@@ -10,16 +10,16 @@
 	public NBTTagDouble() {
 	}
 
-	public NBTTagDouble(double var1) {
-		this.doubleValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeDouble(this.doubleValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.doubleValue = var1.readDouble();
+	public NBTTagDouble(double value) {
+		this.doubleValue = value;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeDouble(this.doubleValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.doubleValue = dataInput.readDouble();
 	}
 
 	public byte getType() {
--- /dev/null
+++ net/minecraft/src/TextureFireFX.java
@@ -1,0 +1,81 @@
+package net.minecraft.src;
+
+public class TextureFireFX extends TextureFX {
+	protected float[] field_10724_1svNgOD7VwC79ql8Ab9UzfF8D46rA021y0ms1p8xU9T5zY3xw9ZpMO1y5l2o = new float[320];
+	protected float[] field_10723_9DRBfXVt5K7W37u6Ajl7cm67r78YQjAQ195BIs46746AC6b61UCABL0oy6eh = new float[320];
+
+	public TextureFireFX(int index) {
+		super(Block.fire.blockIndexInTexture + index * 16);
+	}
+
+	public void onTick() {
+		if(InputHandler.mc.options.fancyGraphics != 2 || this.field_10713_88024hG6da4f4kcVfOqR8cTJ36RtCs13wB6V30Rs17vqAj14F4Cqz3neFg20) {
+			this.field_10713_88024hG6da4f4kcVfOqR8cTJ36RtCs13wB6V30Rs17vqAj14F4Cqz3neFg20 = false;
+
+			int i1;
+			float f2;
+			int i3;
+			int i4;
+			for(int i5 = 0; i5 < 16; ++i5) {
+				for(i1 = 0; i1 < 20; ++i1) {
+					int i6 = 18;
+					f2 = this.field_10724_1svNgOD7VwC79ql8Ab9UzfF8D46rA021y0ms1p8xU9T5zY3xw9ZpMO1y5l2o[i5 + (i1 + 1) % 20 * 16] * (float)i6;
+
+					for(i3 = i5 - 1; i3 <= i5 + 1; ++i3) {
+						for(i4 = i1; i4 <= i1 + 1; ++i4) {
+							if(i3 >= 0 && i4 >= 0 && i3 < 16 && i4 < 20) {
+								f2 += this.field_10724_1svNgOD7VwC79ql8Ab9UzfF8D46rA021y0ms1p8xU9T5zY3xw9ZpMO1y5l2o[i3 + i4 * 16];
+							}
+
+							++i6;
+						}
+					}
+
+					this.field_10723_9DRBfXVt5K7W37u6Ajl7cm67r78YQjAQ195BIs46746AC6b61UCABL0oy6eh[i5 + i1 * 16] = f2 / ((float)i6 * 1.06F);
+					if(i1 >= 19) {
+						this.field_10723_9DRBfXVt5K7W37u6Ajl7cm67r78YQjAQ195BIs46746AC6b61UCABL0oy6eh[i5 + i1 * 16] = (float)(Math.random() * Math.random() * Math.random() * 4.0D + Math.random() * (double)0.1F + (double)0.2F);
+					}
+				}
+			}
+
+			float[] f12 = this.field_10723_9DRBfXVt5K7W37u6Ajl7cm67r78YQjAQ195BIs46746AC6b61UCABL0oy6eh;
+			this.field_10723_9DRBfXVt5K7W37u6Ajl7cm67r78YQjAQ195BIs46746AC6b61UCABL0oy6eh = this.field_10724_1svNgOD7VwC79ql8Ab9UzfF8D46rA021y0ms1p8xU9T5zY3xw9ZpMO1y5l2o;
+			this.field_10724_1svNgOD7VwC79ql8Ab9UzfF8D46rA021y0ms1p8xU9T5zY3xw9ZpMO1y5l2o = f12;
+
+			for(i1 = 0; i1 < 256; ++i1) {
+				float f13 = this.field_10724_1svNgOD7VwC79ql8Ab9UzfF8D46rA021y0ms1p8xU9T5zY3xw9ZpMO1y5l2o[i1] * 1.8F;
+				if(f13 > 1.0F) {
+					f13 = 1.0F;
+				}
+
+				if(f13 < 0.0F) {
+					f13 = 0.0F;
+				}
+
+				i3 = (int)(10.0F * f13 + 75.0F);
+				i4 = (int)(5.0F * f13 * 225.0F);
+				int i7 = (int)(f13 * f13 * f13 * f13 * f13 * f13 * f13 * f13 * f13 * f13 * 255.0F);
+				short s8 = 255;
+				if(f13 < 0.5F) {
+					s8 = 0;
+				}
+
+				f2 = (f13 - 0.5F) * 2.0F;
+				if(this.anaglyphEnabled) {
+					int i9 = (i3 * 30 + i4 * 59 + i7 * 11) / 100;
+					int i10 = (i3 * 30 + i4 * 70) / 100;
+					int i11 = (i3 * 30 + i7 * 70) / 100;
+					i3 = i9;
+					i4 = i10;
+					i7 = i11;
+				}
+
+				this.imageData[i1 * 4 + 0] = (byte)i3;
+				this.imageData[i1 * 4 + 1] = (byte)i4;
+				this.imageData[i1 * 4 + 2] = (byte)i7;
+				this.imageData[i1 * 4 + 3] = (byte)s8;
+			}
+
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/HubServerDetector.java
@@ -1,0 +1,53 @@
+package net.minecraft.src;
+
+import java.io.IOException;
+import java.net.DatagramPacket;
+import java.net.InetAddress;
+import java.net.MulticastSocket;
+import java.net.SocketTimeoutException;
+import java.util.logging.Level;
+
+public class HubServerDetector extends Thread {
+	private final HubNetworkUnknownClass field_10570_5K3sbQn5X6ulj0GQ3fhSzWEJld90E9S4eChV16qYUBMZ26x064s1ny2w4eON;
+	private final InetAddress field_10569_5u8aht315N4kaG3o8hr41398KCm7udkU1m2nMTx4Qod98ZFnoF9V7Xr880gb;
+	private final MulticastSocket field_10568_9TIT1Oh03A2XA7jeuG3SzugWFnrI2oc818408ineX5q2lnc58swhho8Ca7m8;
+	private static final String field_10571_9Mny94npF0LbWrJ2fye1flUmV44PK9522l2S4ypZod7UyPxBvo30U6LTUkRW = "CL_00001135";
+
+	public HubServerDetector(HubNetworkUnknownClass ni) throws IOException {
+		super("LanServerDetector #" + HubServerDetectorUnknownClass.func_12078_8095QTr6V051pTOyEln290S3uDK3v65566PUXfys595pR5uPyLtaonH4p9jn().incrementAndGet());
+		this.field_10570_5K3sbQn5X6ulj0GQ3fhSzWEJld90E9S4eChV16qYUBMZ26x064s1ny2w4eON = ni;
+		this.setDaemon(true);
+		this.field_10568_9TIT1Oh03A2XA7jeuG3SzugWFnrI2oc818408ineX5q2lnc58swhho8Ca7m8 = new MulticastSocket(4445);
+		this.field_10569_5u8aht315N4kaG3o8hr41398KCm7udkU1m2nMTx4Qod98ZFnoF9V7Xr880gb = InetAddress.getByName("224.0.2.60");
+		this.field_10568_9TIT1Oh03A2XA7jeuG3SzugWFnrI2oc818408ineX5q2lnc58swhho8Ca7m8.setSoTimeout(5000);
+		this.field_10568_9TIT1Oh03A2XA7jeuG3SzugWFnrI2oc818408ineX5q2lnc58swhho8Ca7m8.joinGroup(this.field_10569_5u8aht315N4kaG3o8hr41398KCm7udkU1m2nMTx4Qod98ZFnoF9V7Xr880gb);
+	}
+
+	public void run() {
+		byte[] b1 = new byte[1024];
+
+		while(!this.isInterrupted()) {
+			DatagramPacket datagramPacket2 = new DatagramPacket(b1, b1.length);
+
+			try {
+				this.field_10568_9TIT1Oh03A2XA7jeuG3SzugWFnrI2oc818408ineX5q2lnc58swhho8Ca7m8.receive(datagramPacket2);
+			} catch (SocketTimeoutException socketTimeoutException5) {
+				continue;
+			} catch (IOException iOException6) {
+				HubServerDetectorUnknownClass.func_12077_9aCES4xVN044Nl6kBDM97r4haJIM3J7NY0D1z5IeNMU9oucd80P32kO8d8h5().log(Level.SEVERE, "Couldn\'t ping server", iOException6);
+				break;
+			}
+
+			String string3 = new String(datagramPacket2.getData(), datagramPacket2.getOffset(), datagramPacket2.getLength());
+			HubServerDetectorUnknownClass.func_12077_9aCES4xVN044Nl6kBDM97r4haJIM3J7NY0D1z5IeNMU9oucd80P32kO8d8h5().log(Level.FINEST, datagramPacket2.getAddress() + ": " + string3);
+			this.field_10570_5K3sbQn5X6ulj0GQ3fhSzWEJld90E9S4eChV16qYUBMZ26x064s1ny2w4eON.func_11076_6JWlo5oTbj6698u3MxWj43m8jjLW826DJsk9l6DW0z4oK6cxa991XuVMtgSV(string3, datagramPacket2.getAddress());
+		}
+
+		try {
+			this.field_10568_9TIT1Oh03A2XA7jeuG3SzugWFnrI2oc818408ineX5q2lnc58swhho8Ca7m8.leaveGroup(this.field_10569_5u8aht315N4kaG3o8hr41398KCm7udkU1m2nMTx4Qod98ZFnoF9V7Xr880gb);
+		} catch (IOException iOException4) {
+		}
+
+		this.field_10568_9TIT1Oh03A2XA7jeuG3SzugWFnrI2oc818408ineX5q2lnc58swhho8Ca7m8.close();
+	}
+}
--- /dev/null
+++ net/minecraft/src/GenLowRiver.java
@@ -1,0 +1,71 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class GenLowRiver extends WorldGenerator {
+	private int a;
+	int chunkBeginX;
+	int chunkBeginZ;
+	int chCoordX;
+	int chCoordZ;
+	Random rng;
+
+	public GenLowRiver(int integer1, int integer2, int integer3) {
+		this.a = integer1;
+		this.chunkBeginX = integer2;
+		this.chunkBeginZ = integer3;
+		this.chCoordX = integer2 / 16;
+		this.chCoordZ = integer3 / 16;
+	}
+
+	public void DigSphere(World vg, int integer2, int integer3, int integer4, int integer5) {
+		if(integer5 != 0) {
+			for(int i6 = -integer5; i6 <= integer5; ++i6) {
+				for(int i7 = -integer5; i7 <= integer5; ++i7) {
+					for(int i8 = -integer5; i8 <= integer5; ++i8) {
+						if(i6 * i6 + i7 * i7 + i8 * i8 <= integer5 * integer5 && (integer2 + i6) / 16 - (this.chCoordX < 0 ? 1 : 0) == this.chCoordX && (integer4 + i8) / 16 - (this.chCoordZ < 0 ? 1 : 0) == this.chCoordZ && integer3 + i7 >= 1 && vg.getBlockId(integer2 + i6, integer3 + i7, integer4 + i8) != ExtBlocks.LowGlowingFlower.blockID) {
+							boolean z9 = vg.getBlockId(integer2 + i6, integer3 + i7, integer4 + i8) != Block.bedrock.blockID;
+							if(integer3 + i7 > 3 || z9 || !z9 && this.rng.nextInt(4) < 3) {
+								if(integer3 + i7 > 3) {
+									vg.setBlock(integer2 + i6, integer3 + i7, integer4 + i8, 0);
+								} else {
+									vg.setBlock(integer2 + i6, integer3 + i7, integer4 + i8, Block.waterStill.blockID);
+
+									for(int i10 = -1; i10 <= 1; ++i10) {
+										for(int i11 = -1; i11 <= 1; ++i11) {
+											for(int i12 = -1; i12 <= 1; ++i12) {
+												if(vg.getBlockId(integer2 + i6 + i10, integer3 + i7 + i12, integer4 + i8 + i11) == Block.stone.blockID) {
+													vg.setBlock(integer2 + i6 + i10, integer3 + i7 + i12, integer4 + i8 + i11, ExtBlocks.LowRiverbed.blockID);
+												} else if(vg.getBlockId(integer2 + i6 + i10, integer3 + i7 + i12, integer4 + i8 + i11) == Block.dirt.blockID) {
+													vg.setBlock(integer2 + i6 + i10, integer3 + i7 + i12, integer4 + i8 + i11, ExtBlocks.LowGlowingBlock.blockID);
+												}
+											}
+										}
+									}
+
+									if(integer3 + i7 == 3 && this.rng.nextInt(80) == 0) {
+										vg.setBlock(integer2 + i6, integer3 + i7 + 1, integer4 + i8, ExtBlocks.LowGlowingFlower.blockID);
+									}
+								}
+							}
+						}
+					}
+				}
+			}
+
+		}
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		this.rng = rand;
+		if(y < 10) {
+			try {
+				this.DigSphere(world, x, y, z, this.a);
+			} catch (StackOverflowError stackOverflowError7) {
+				System.out.println("StackOverflowError at " + x + " " + y + " " + z + ", " + this.a);
+			}
+		}
+
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandManager.java
@@ -1,0 +1,942 @@
+package net.minecraft.src;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.LWJGLException;
+import org.lwjgl.opengl.Display;
+
+public class CommandManager {
+	public ArrayList field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf = new ArrayList();
+	public String field_12074_59H713eWwMqHt2BkXfmtU7Gw1Ed2yJ84RRj5r8Os9hXCRrICXE2XfeV2i7Jm = "";
+	public HashMap field_12072_57Pslv03tR1GVO6rfR7Myg6SJ9Dfi77KWF699D8Zy703Dh2cM61HfFA0VmYd = new HashMap();
+	boolean field_12071_8Mn4tj13vIyC6B4sKvgNU753iaUwsGLVW462dSPrK3Q6u34DDVgN8g4gP3Sg = false;
+	boolean field_12075_28FdWuxC13fShF99oFUZRa9Zk8Ur8d7gsfw157Cj6qaqjdwi8sD2yQP7IySf = true;
+
+	public CommandManager() {
+		this.func_12060_2N8lggB3Ex84Toh6NAyZR3Jnms86ir0MO35KZ66K1G6RzeQubR99KXYq62k0();
+		this.func_12068_4rc9DN1jWH38BaKK48Mt6971xRupd1bIwtx41dL4x6s0W0LFEFHHipCs5mmI();
+		this.func_12070_5fc36Njx84NPQ80UYRTm0H3y3FdowxJygPG7D9Ooyv63oOGKn8xN4A8U7pN9();
+	}
+
+	public void func_12068_4rc9DN1jWH38BaKK48Mt6971xRupd1bIwtx41dL4x6s0W0LFEFHHipCs5mmI() {
+		this.field_12072_57Pslv03tR1GVO6rfR7Myg6SJ9Dfi77KWF699D8Zy703Dh2cM61HfFA0VmYd.put(53, "blockinfo");
+		this.field_12072_57Pslv03tR1GVO6rfR7Myg6SJ9Dfi77KWF699D8Zy703Dh2cM61HfFA0VmYd.put(51, "+worldedit_setpos1");
+		this.field_12072_57Pslv03tR1GVO6rfR7Myg6SJ9Dfi77KWF699D8Zy703Dh2cM61HfFA0VmYd.put(52, "+worldedit_setpos2");
+		this.field_12072_57Pslv03tR1GVO6rfR7Myg6SJ9Dfi77KWF699D8Zy703Dh2cM61HfFA0VmYd.put(47, "+mc_creatmenu");
+	}
+
+	public void func_12070_5fc36Njx84NPQ80UYRTm0H3y3FdowxJygPG7D9Ooyv63oOGKn8xN4A8U7pN9() {
+		File file1 = new File(Minecraft.getMinecraftDir() + "/autoexec.cfg");
+		if(file1.exists()) {
+			try {
+				BufferedReader bufferedReader2 = new BufferedReader(new FileReader(file1));
+
+				String string3;
+				try {
+					while((string3 = bufferedReader2.readLine()) != null) {
+						try {
+							this.func_12062_0t842hU0v5526eutHbG997y2Nv04t2F2gXt64U0tN25Eoja8W099icp26853(string3);
+						} catch (Exception exception6) {
+							ExtLogger.w("TCON Exception: " + exception6.getMessage());
+						}
+					}
+				} catch (Throwable throwable7) {
+					try {
+						bufferedReader2.close();
+					} catch (Throwable throwable5) {
+						throwable7.addSuppressed(throwable5);
+					}
+
+					throw throwable7;
+				}
+
+				bufferedReader2.close();
+			} catch (IOException iOException8) {
+			}
+		}
+
+		this.field_12075_28FdWuxC13fShF99oFUZRa9Zk8Ur8d7gsfw157Cj6qaqjdwi8sD2yQP7IySf = false;
+	}
+
+	public void func_12063_192DBW3rWeWbZy26TpK5rt1Ak36TmR6Dn90BSf6Z5oNr7Q5wXRqyph3fgy8S(int integer) {
+		if(this.field_12072_57Pslv03tR1GVO6rfR7Myg6SJ9Dfi77KWF699D8Zy703Dh2cM61HfFA0VmYd.containsKey(integer)) {
+			try {
+				this.func_12062_0t842hU0v5526eutHbG997y2Nv04t2F2gXt64U0tN25Eoja8W099icp26853((String)this.field_12072_57Pslv03tR1GVO6rfR7Myg6SJ9Dfi77KWF699D8Zy703Dh2cM61HfFA0VmYd.get(integer));
+			} catch (Exception exception3) {
+			}
+		}
+
+	}
+
+	public void func_12060_2N8lggB3Ex84Toh6NAyZR3Jnms86ir0MO35KZ66K1G6RzeQubR99KXYq62k0() {
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("bind", new Class[]{Integer.class, String.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				CommandManager.this.field_12072_57Pslv03tR1GVO6rfR7Myg6SJ9Dfi77KWF699D8Zy703Dh2cM61HfFA0VmYd.put(((Integer)arr[0]).intValue(), (String)arr[1]);
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("unbind", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				if(CommandManager.this.field_12072_57Pslv03tR1GVO6rfR7Myg6SJ9Dfi77KWF699D8Zy703Dh2cM61HfFA0VmYd.containsKey(((Integer)arr[0]).intValue())) {
+					CommandManager.this.field_12072_57Pslv03tR1GVO6rfR7Myg6SJ9Dfi77KWF699D8Zy703Dh2cM61HfFA0VmYd.remove(((Integer)arr[0]).intValue());
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("con_refresh", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				CommandManager.this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.clear();
+				CommandManager.this.func_12060_2N8lggB3Ex84Toh6NAyZR3Jnms86ir0MO35KZ66K1G6RzeQubR99KXYq62k0();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("name", new Class[]{String.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.session.username = (String)arr[0];
+				InputHandler.mc.func_7251_0aCQ3QUtAn82t0f1z3JQKRAg5aNB155g64AWf0ztqf7j603OA1tsJsAwlFrq();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return InputHandler.mc.session.username;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("gpu", new Class[]{String.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.field_7289_3R5t255Q5D6KY19uD068Mkk1B6OU9sWGPdWh8cCMUgE3jA5I39fu26h80483 = (String)arr[0];
+				InputHandler.mc.func_7251_0aCQ3QUtAn82t0f1z3JQKRAg5aNB155g64AWf0ztqf7j603OA1tsJsAwlFrq();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return InputHandler.mc.func_7236_2E4BZaw4wUzRdqs6H26gijBXYV2x4keaA5V5idykFk39ETvee94J18B7nBcD();
+			}
+
+			public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+				return false;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("perfclass", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				Minecraft.field_7277_2ap75bw7uWpJs9xa2VRa8p40l51ptv8B02tkt5OcOFM8BeYBB08G54gDjTCY = ((Integer)arr[0]).intValue();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return Minecraft.field_7277_2ap75bw7uWpJs9xa2VRa8p40l51ptv8B02tkt5OcOFM8BeYBB08G54gDjTCY + "";
+			}
+
+			public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+				return false;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("title+", new Class[]{String.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.func_7248_2y5vE7Yn817r5Knu79o4Aj1C8zSXCZv983MY0Ng8eMzo5U95JWt5FIuSSHqv((String)arr[0]);
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("connect", new Class[]{String.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("disconnect", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				if(InputHandler.mc.theWorld != null) {
+					if(InputHandler.mc.isMultiplayerWorld()) {
+						InputHandler.mc.theWorld.sendQuittingDisconnectingPacket();
+					}
+
+					InputHandler.mc.changeWorld1((World)null);
+					InputHandler.mc.displayGuiScreen(new GuiMainMenu());
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("map", new Class[]{String.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.displayGuiScreen((GuiScreen)null);
+				InputHandler.mc.playerController = new PlayerControllerSP(InputHandler.mc);
+				InputHandler.mc.startWorld((String)arr[0]);
+				InputHandler.mc.displayGuiScreen((GuiScreen)null);
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("mc_minimap", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.InputOpenMinimap();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("mc_redl", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				try {
+					ThreadDownloadResources.finished = false;
+					InputHandler.mc.downloadResourcesThread = new ThreadDownloadResources(InputHandler.mc.mcDataDir, InputHandler.mc);
+					InputHandler.mc.downloadResourcesThread.start();
+				} catch (Exception exception3) {
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("mc_viewbarrier", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				try {
+					((BlockHidable)ExtBlocks.BarrierBlock).render = ((Integer)arr[0]).intValue() == 1;
+				} catch (Exception exception3) {
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return ((BlockHidable)ExtBlocks.BarrierBlock).render ? "1" : "0";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("mc_termconn", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				ScreenDebugMenu.field_7955_2x00ovR61G2n6Zj5nN9jd9FAdV8H3Cz32KtPOCpcvM363cbIQ5o5vSMN7x7B = ((Integer)arr[0]).intValue() == 1;
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "" + (ScreenDebugMenu.field_7955_2x00ovR61G2n6Zj5nN9jd9FAdV8H3Cz32KtPOCpcvM363cbIQ5o5vSMN7x7B ? 1 : 0);
+			}
+
+			public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+				return false;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("mc_diff", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.options.difficulty = ((Integer)arr[0]).intValue();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "" + InputHandler.mc.options.difficulty;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("mc_creat", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.field_9759_4OT0vPMcJ68s5EU822c0Y9Asw74Su111s3rRCw8OSGMsYM8lx153p73RBtj3 = ((Integer)arr[0]).intValue() == 1;
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "" + InputHandler.field_9759_4OT0vPMcJ68s5EU822c0Y9Asw74Su111s3rRCw8OSGMsYM8lx153p73RBtj3;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("mc_winterlevel", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.theWorld.snowCovered = ((Integer)arr[0]).intValue() == 1;
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return InputHandler.mc.theWorld.snowCovered ? "1" : "0";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("mc_sandlevel", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.theWorld.sandCovered = ((Integer)arr[0]).intValue() == 1;
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return InputHandler.mc.theWorld.sandCovered ? "1" : "0";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("mc_renderdistance", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.options.renderDistance = Math.max(Math.min(((Integer)arr[0]).intValue(), 5), 0);
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "" + InputHandler.mc.options.renderDistance;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("mc_posthint", new Class[]{Integer.class, String.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw((String)arr[1], ((Integer)arr[0]).intValue());
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("mc_playmus", new Class[]{String.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.sndManager.playMusic((String)arr[0]);
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("pass", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				int i2 = ((Integer)arr[0]).intValue();
+				switch(i2) {
+				case 1:
+					InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("Welcome back, dear friend", 10000);
+					break;
+				case 7:
+					InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("Is the number", 10000);
+					break;
+				case 9:
+					InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("Wrong place, Raven.", 10000);
+					break;
+				case 77:
+					InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("You won\'t find the candles here", 10000);
+					break;
+				case 1604:
+					InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("3:8jWBk36GiUr3dV9dB8n6a47594GNQ4AHz1V3p5660O75oGy93l89Yu4vDhCgfMahmA67q60z01Nu3vgS", 10000);
+					break;
+				case 1605:
+					InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("I guess this can be called an easter egg.\nThis was our first foray into working with a somewhat popular property\nThe prior branches, they were cut just because they weren\'t high enough quality\nor too drastic a change.\nThe workflow was surely quite different, But i can\'t really complain\nI\'m glad this branch is as is.\nIt was our magnum opus.", 10000);
+					break;
+				case 1986:
+					InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("It\'s dangerous to go alone!", 10000);
+					break;
+				case 1993:
+					InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("Lamp Oil? Rope? Bombs? We don\'t have that.", 10000);
+					break;
+				case 2011:
+					InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("Wrong password screen, Zachary", 10000);
+					break;
+				case 810116:
+					InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("Help what with?", 10000);
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("mc_gencitysize", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				WorldGenHouseSmall.field_9665_9HHBzQ2wG84LFbc45tMzL7mAlvvdO1k855mGGSfk3FfJP80LupQs710X4K6J = Math.max(((Integer)arr[0]).intValue(), 0);
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "" + WorldGenHouseSmall.field_9665_9HHBzQ2wG84LFbc45tMzL7mAlvvdO1k855mGGSfk3FfJP80LupQs710X4K6J;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("+mc_creatmenu", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.func_9723_0s53bwug7AIh7wok927NkfC491OTVIE9w7Ze8dTW9h9VOaC74c60EkiUo90l();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("cg_fovmod", new Class[]{Float.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.options.fovModifier = ((Float)arr[0]).floatValue();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "" + InputHandler.mc.options.fovModifier;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("sv_cheats", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				ScreenDebugMenu.dbg_conf_enableCheats = ((Integer)arr[0]).intValue() != 0;
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return ScreenDebugMenu.dbg_conf_enableCheats ? "1" : "0";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("sv_leveltime", new Class[]{Long.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				if(ScreenDebugMenu.dbg_conf_enableCheats) {
+					InputHandler.mc.theWorld.worldTime = ((Long)arr[0]).longValue();
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "" + InputHandler.mc.theWorld.worldTime;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("sv_rainworld", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				if(ScreenDebugMenu.dbg_conf_enableCheats) {
+					InputHandler.mc.isRaining = ((Integer)arr[0]).intValue() == 1;
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "" + InputHandler.mc.isRaining;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("sv_allowrnet", new Class[]{Long.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				if(InputHandler.mc.thePlayer.rand.nextBoolean()) {
+					ScreenDebugMenu.dbg_conf_spawnShadowPlayers = !ScreenDebugMenu.dbg_conf_spawnShadowPlayers;
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return ScreenDebugMenu.dbg_conf_spawnShadowPlayers ? "1" : "0";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("fly", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				if(ScreenDebugMenu.dbg_conf_enableCheats) {
+					ScreenDebugMenu.dbg_conf_fly = !ScreenDebugMenu.dbg_conf_fly;
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return ScreenDebugMenu.dbg_conf_fly ? "1" : "0";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("noclip", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				if(ScreenDebugMenu.dbg_conf_enableCheats) {
+					InputHandler.mc.thePlayer.noClip = !InputHandler.mc.thePlayer.noClip;
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return InputHandler.mc.thePlayer.noClip ? "1" : "0";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("summon_spaceman", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				EntityAmoung entityAmoung2 = new EntityAmoung(InputHandler.mc.theWorld);
+				entityAmoung2.setPosition(InputHandler.mc.thePlayer.posX, InputHandler.mc.thePlayer.posY, InputHandler.mc.thePlayer.posZ);
+				InputHandler.mc.theWorld.spawnEntityInWorld(entityAmoung2);
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+
+			public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+				return false;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("summon_spearmaster", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				EntitySpearmaster entitySpearmaster2 = new EntitySpearmaster(InputHandler.mc.theWorld);
+				entitySpearmaster2.setPosition(InputHandler.mc.thePlayer.posX, InputHandler.mc.thePlayer.posY, InputHandler.mc.thePlayer.posZ);
+				InputHandler.mc.theWorld.spawnEntityInWorld(entitySpearmaster2);
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+
+			public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+				return false;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("summon_spacemen", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				for(int i2 = 0; i2 < ((Integer)arr[0]).intValue(); ++i2) {
+					EntityAmoung entityAmoung3 = new EntityAmoung(InputHandler.mc.theWorld);
+					entityAmoung3.setPosition(InputHandler.mc.thePlayer.posX, InputHandler.mc.thePlayer.posY, InputHandler.mc.thePlayer.posZ);
+					InputHandler.mc.theWorld.spawnEntityInWorld(entityAmoung3);
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+
+			public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+				return false;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("impulse", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				if(ScreenDebugMenu.dbg_conf_enableCheats) {
+					switch(((Integer)arr[0]).intValue()) {
+					case 102:
+						for(int i4 = 0; i4 < 4; ++i4) {
+							EntitySkeleton entitySkeleton3 = new EntitySkeleton(InputHandler.mc.theWorld);
+							entitySkeleton3.setPosition(InputHandler.mc.thePlayer.posX, InputHandler.mc.thePlayer.posY, InputHandler.mc.thePlayer.posZ);
+							InputHandler.mc.theWorld.spawnEntityInWorld(entitySkeleton3);
+						}
+
+						return;
+					case 300:
+						ExtEvents.Spawn(InputHandler.mc.thePlayer, InputHandler.mc.theWorld);
+						break;
+					case 320:
+						ExtEvents.func_11856_0t7OQN0wYClKPyfCdKW9g3t0MW94ScRD4ffzAB4MaIwS6K3mB51a67GSmU0B(InputHandler.mc.thePlayer, InputHandler.mc.theWorld);
+						break;
+					case 400:
+						EntityCatbomb entityCatbomb2 = new EntityCatbomb(InputHandler.mc.theWorld);
+						entityCatbomb2.setPosition(InputHandler.mc.thePlayer.posX, InputHandler.mc.thePlayer.posY, InputHandler.mc.thePlayer.posZ);
+						InputHandler.mc.theWorld.spawnEntityInWorld(entityCatbomb2);
+						break;
+					case 3900:
+						InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10945_6iX357SpWthupUbWNfLRO87UU7xQ8Prgh5bU4EX2jBlYJ3DWToctpI0eQj4u.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+						InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10943_4P6yLgfnvnO6y89XpVE5PS5Hjo62bm3kdr4eGy8mOs9dKTZu5L8RqEHy2P44.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+						InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10948_0K9Wvp8r1YnOA5010xZpl66lyNUt78N6SfQ197bg85kafTuYvONKR77OoXDq.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+						InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10942_7xLO64tuZWfUPmt15N4O95hJ0176qp03d5mSW8trXS890yqputsco88a0dk3.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+						InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10946_7AR6ItAen3fx05Vncef3s63538b5wb97oi4kfrKpN1xXa92ennAR19lcPgfJ.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+						InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10947_9AnvDYT3tcTSS9Cz1srJAOWX62V5Gqyb2ubqdcRVgP303Y40U8Ke6dGNVv08.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+						InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10944_2EWN3F9cOeZLc1s1Wh3Y3X5G88vSKS70wXa1x0jY361oZ36mAnvM2vYHm7oe.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+						InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10949_90L26at7gGnz0J8Af23lCTpFsYX1JLxXD3R7KOPeOnNw65r9paK3i34TuD8w.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+					}
+
+				}
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("mat_fullbright", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				ScreenDebugMenu.field_7960_2AJG81m1pl0O5bhn2XiQ37CD76Uoi3M5l8gTKvm6mx16vAu3Ik5oCR8W6P15 = ((Integer)arr[0]).intValue() == 1;
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "" + (ScreenDebugMenu.field_7960_2AJG81m1pl0O5bhn2XiQ37CD76Uoi3M5l8gTKvm6mx16vAu3Ik5oCR8W6P15 ? 1 : 0);
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("r_remodel", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.renderEngine.refreshTextures();
+				Minecraft.field_7326_55yB6jYtSi94r555184CYoXDQ1YhyBnoS1lJaCCAbdj3rDu1RNzU8Gp4C3g5 = true;
+				InputHandler.mc.field_7311_0ef1dw6U62P0w8bU619gHGHeA4m17T8k6bnjfEQQwhJz0UwhJ6Kx9rBRdIvo.func_11380_9r1511Jp0jE144f4MQc4NK82XBZn9UtKQ9T0m3371572UnC4jS4YM9eJUhB9();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("r_clouds", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.field_7316_28K4517FJT58jN9ucjj3zE1jE410Ltpi330vH7516f19B006E4Wco5x4Y0w5 = ((Integer)arr[0]).intValue() == 1;
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return InputHandler.mc.field_7316_28K4517FJT58jN9ucjj3zE1jE410Ltpi330vH7516f19B006E4Wco5x4Y0w5 ? "1" : "0";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("r_nobiome", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				ScreenDebugMenu.field_7964_8G80Kimsj2t150ZuEHxk97V3fSV455qzurOOVWgX8oTDDCEH9YV34z9vRAoC = ((Integer)arr[0]).intValue() == 1;
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return ScreenDebugMenu.field_7964_8G80Kimsj2t150ZuEHxk97V3fSV455qzurOOVWgX8oTDDCEH9YV34z9vRAoC ? "1" : "0";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("r_texfilter", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				ScreenDebugMenu.field_7956_48H3fYB8k2jE5s5HC81S9Sm600nFD73Lb4N90Pl1F0LSIx70mF1gldgvzgRz = ((Integer)arr[0]).intValue() == 1;
+				InputHandler.mc.renderEngine.refreshTextures();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "" + (ScreenDebugMenu.field_7956_48H3fYB8k2jE5s5HC81S9Sm600nFD73Lb4N90Pl1F0LSIx70mF1gldgvzgRz ? 1 : 0);
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("r_fullscreen", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.fullscreen = ((Integer)arr[0]).intValue() == 1;
+
+				try {
+					Display.setFullscreen(((Integer)arr[0]).intValue() == 1);
+				} catch (LWJGLException lWJGLException3) {
+					lWJGLException3.printStackTrace();
+				}
+
+				Display.update();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "" + (InputHandler.mc.fullscreen ? 1 : 0);
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("r_mode", new Class[]{Integer.class, Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.resize(((Integer)arr[0]).intValue(), ((Integer)arr[1]).intValue());
+				Display.update();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return InputHandler.mc.displayWidth + " " + InputHandler.mc.displayHeight;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("r_texfx", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				Minecraft.field_7307_8AX67fsnsj54328J9e6FiY9333555Xj726t2182u3TBB948QMZsZX2iz02iv = ((Integer)arr[0]).intValue() == 1;
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return Minecraft.field_7307_8AX67fsnsj54328J9e6FiY9333555Xj726t2182u3TBB948QMZsZX2iz02iv ? "1" : "0";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("gui_versionstring", new Class[]{String.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				GuiIngame.field_7848_69F5OIYAc4x6RX395dAQNvnAE6gbvlYWUWFq5k519dDHt6V3lS7NcP1YaM1d = (String)arr[0];
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return GuiIngame.field_7848_69F5OIYAc4x6RX395dAQNvnAE6gbvlYWUWFq5k519dDHt6V3lS7NcP1YaM1d;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("zm_givepoints", new Class[]{Integer.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				if(ScreenDebugMenu.dbg_conf_enableCheats) {
+					((EntityPlayerZombieModeClient)InputHandler.mc.thePlayer).field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.func_8688_6DmcXOP1jZRKDasP2440t8904Ry66MRC3K00nwd8iGDlPgYii5d1f50QVICF((long)((Integer)arr[0]).intValue());
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("INTERLOPE", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				throw new RuntimeException("Unable to connect to s0.fsky.org:27015");
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+
+			public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+				return false;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("mason", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				throw new RuntimeException("Unable to find numeric definition.");
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+
+			public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+				return false;
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("record", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL.func_12202_16f5qR4S63G9o02Iv9q3fI2EBSIV7xO6D6qHK36vkX5ETh2rQeDp7rBKoju0(InputHandler.mc.thePlayer);
+				System.out.println("Demo record started");
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("stopdemo", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL.func_12204_8r9RTHlpJjIj8rv8a68Pq9g6006yw2MZ4W4u9N9p23i9532c8WU7ByApxh50();
+				System.out.println("Demo record finished, " + InputHandler.field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL.field_12210_1g5X6A25jcG50Z3d47g1ufx5qZuFNya14hd6OpQ6a42pd2RKbHZAqAO16G5P.size() + " frames");
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("savedemo", new Class[]{String.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL.func_12199_0T1EBqlwN0r6zrh3Sg0XWHZ8YGwKZ7S93cTMLKw1r2Y6V9Bl9qyCtXn0g300((String)arr[0]);
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("frrn_savedemo", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				if(InputHandler.mc.thePlayer instanceof EntityPlayerFreerunClient) {
+					Calendar calendar2 = Calendar.getInstance();
+					((EntityPlayerFreerunClient)InputHandler.mc.thePlayer).field_9077_6828xUDuW4HE2czdD77Ktkps1BKQr55aauI7IbsAkcX5iy1397o0JfVUA615.func_12199_0T1EBqlwN0r6zrh3Sg0XWHZ8YGwKZ7S93cTMLKw1r2Y6V9Bl9qyCtXn0g300(Minecraft.getMinecraftDir() + "/freeerundemo-" + ((FreerunWorld)InputHandler.mc.theWorld).levelName.replace('\\', '_').replace('/', '_') + "-" + calendar2.get(5) + "-" + (calendar2.get(2) + 1) + "-" + calendar2.get(1) + "@" + calendar2.get(11) + "-" + calendar2.get(12) + "-" + calendar2.get(13) + ".mcdem");
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("+frrn_reset", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				if(InputHandler.mc.thePlayer instanceof EntityPlayerFreerunClient) {
+					((EntityPlayerFreerunClient)InputHandler.mc.thePlayer).ResetFreerun();
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("+frrn_lastcheckpoint", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				if(InputHandler.mc.thePlayer instanceof EntityPlayerFreerunClient) {
+					((EntityPlayerFreerunClient)InputHandler.mc.thePlayer).ResetLastCheckpoint();
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("playdemo", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL.func_12200_2zuKLzAjc8o3T9KVZ7ZY36o6qOp5e1FG836622Br32SKguF06W9W1437p52T();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("playdemofile", new Class[]{String.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL.func_12205_6ZOj2zwwjPk9f604twAF89u12c3MGns9EqJD4l3jZR2R6cy50aEWBthikzOk((String)arr[0]);
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("blockinfo", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				if(InputHandler.mc.objectMouseOver != null && InputHandler.mc.objectMouseOver.typeOfHit == 0) {
+					InputHandler.mc.ingameGUI.addChatMessage("Block ID: " + InputHandler.mc.theWorld.getBlockId(InputHandler.mc.objectMouseOver.blockX, InputHandler.mc.objectMouseOver.blockY, InputHandler.mc.objectMouseOver.blockZ) + ", [" + InputHandler.mc.objectMouseOver.blockX + "," + InputHandler.mc.objectMouseOver.blockY + "," + InputHandler.mc.objectMouseOver.blockZ + "]");
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("placeonme", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				World world2 = InputHandler.mc.theWorld;
+				EntityPlayerSP entityPlayerSP3 = InputHandler.mc.thePlayer;
+				world2.setBlock((int)entityPlayerSP3.posX, (int)entityPlayerSP3.posY, (int)entityPlayerSP3.posZ, 1);
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("invclear", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.thePlayer.inventory.func_8655_2030zy05r8P1HRnaOEgnBoKr1OC1y9FA0RMNRU6eq535ylSExX5MmN7p6vst();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("+worldedit_setpos1", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.ingameGUI.weditOverlay.func_11896_21hxskjoCalSdNwCUtCH797a5Bv6x17Si7L3X48r8FIf14LJZL110IOeH5JV();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("+worldedit_setpos2", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.ingameGUI.weditOverlay.func_11901_4GX3NWZYNNxs7759a7f8764Sjs8mN8d0w06o2vq3vJdsHhi1084359oRzOm3();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("+worldedit_accept", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				InputHandler.mc.ingameGUI.weditOverlay.Next();
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("sysexec", new Class[]{String.class}, new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				if(CommandManager.this.field_12071_8Mn4tj13vIyC6B4sKvgNU753iaUwsGLVW462dSPrK3Q6u34DDVgN8g4gP3Sg) {
+					try {
+						Runtime.getRuntime().exec((String)arr[0]);
+					} catch (IOException iOException3) {
+						iOException3.printStackTrace();
+					}
+				} else {
+					ExtLogger.i("System execute is currently locked. This command will execute a system command.\n To confirm that you know what you\'re doing, add \"sysexec_unlock\" to autoexec.cfg and restart the game.");
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "Executable command. " + (CommandManager.this.field_12071_8Mn4tj13vIyC6B4sKvgNU753iaUwsGLVW462dSPrK3Q6u34DDVgN8g4gP3Sg ? "WARNING: This command may be dangerous!" : "Currently locked.");
+			}
+		}));
+		this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.add(new CommandManagerUnknownClass("sysexec_unlock", new Class[0], new CommandUnknownClass() {
+			public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(Object... arr) {
+				if(CommandManager.this.field_12075_28FdWuxC13fShF99oFUZRa9Zk8Ur8d7gsfw157Cj6qaqjdwi8sD2yQP7IySf) {
+					CommandManager.this.field_12071_8Mn4tj13vIyC6B4sKvgNU753iaUwsGLVW462dSPrK3Q6u34DDVgN8g4gP3Sg = true;
+				}
+
+			}
+
+			public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+				return "~exec";
+			}
+
+			public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+				return false;
+			}
+		}));
+	}
+
+	public void func_12061_7rTYs2NQ25PEKTb5TGv3QZrl94uj1H72t7FJlO1Nqj2OJ7I32X7wEQO1BzbG(String string) {
+	}
+
+	public List func_12065_70o5m3y9gbwr3PpxBbyXBPCTq6zSby60p7fwgFYI1mH6IJ8DJMrZAt2f87KR(String string) {
+		ArrayList arrayList2 = new ArrayList();
+		if(string.equals("")) {
+			return arrayList2;
+		} else {
+			Iterator iterator3 = this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.iterator();
+
+			while(iterator3.hasNext()) {
+				CommandManagerUnknownClass commandManagerUnknownClass4 = (CommandManagerUnknownClass)iterator3.next();
+				if(commandManagerUnknownClass4.field_12024_1q5eqd4V75vh5r0RkoHJF19l4S347yEp0rA4sR70sQOr8jdcCj1Z12u5PSx9.contains(string) && commandManagerUnknownClass4.field_12023_4a6hGbi1yf1wisYXW788UpKE9grOBLI6J908Opcn8Zv63ROZKy49K6Z3M3gz.func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd()) {
+					arrayList2.add(commandManagerUnknownClass4);
+				}
+			}
+
+			return arrayList2;
+		}
+	}
+
+	public CommandManagerUnknownClass func_12064_066qvw8i8VJk9r8W9zey0qBl7l4RI0SeVtY38i356k7OodNhLGt3200y64s6(String string) {
+		Iterator iterator2 = this.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.iterator();
+
+		CommandManagerUnknownClass commandManagerUnknownClass3;
+		do {
+			if(!iterator2.hasNext()) {
+				return null;
+			}
+
+			commandManagerUnknownClass3 = (CommandManagerUnknownClass)iterator2.next();
+		} while(!commandManagerUnknownClass3.field_12024_1q5eqd4V75vh5r0RkoHJF19l4S347yEp0rA4sR70sQOr8jdcCj1Z12u5PSx9.equals(string));
+
+		return commandManagerUnknownClass3;
+	}
+
+	public void func_12062_0t842hU0v5526eutHbG997y2Nv04t2F2gXt64U0tN25Eoja8W099icp26853(String string) {
+		String[] string2 = string.split(" ");
+		if(string2.length > 0) {
+			CommandManagerUnknownClass commandManagerUnknownClass3 = this.func_12064_066qvw8i8VJk9r8W9zey0qBl7l4RI0SeVtY38i356k7OodNhLGt3200y64s6(string2[0]);
+			if(commandManagerUnknownClass3 != null && (commandManagerUnknownClass3.field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640.length == 0 || string2.length == 1 + commandManagerUnknownClass3.field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640.length || string2.length >= 1 + commandManagerUnknownClass3.field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640.length && commandManagerUnknownClass3.field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640[commandManagerUnknownClass3.field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640.length - 1] == String.class)) {
+				Object[] object4 = new Object[commandManagerUnknownClass3.field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640.length];
+
+				try {
+					int i5 = 0;
+
+					while(true) {
+						if(i5 == object4.length) {
+							commandManagerUnknownClass3.field_12023_4a6hGbi1yf1wisYXW788UpKE9grOBLI6J908Opcn8Zv63ROZKy49K6Z3M3gz.func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(object4);
+							break;
+						}
+
+						if(commandManagerUnknownClass3.field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640[i5] == Integer.class) {
+							object4[i5] = Integer.parseInt(string2[1 + i5]);
+						} else if(commandManagerUnknownClass3.field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640[i5] == Float.class) {
+							object4[i5] = Float.parseFloat(string2[1 + i5]);
+						} else if(commandManagerUnknownClass3.field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640[i5] == Long.class) {
+							object4[i5] = Long.parseLong(string2[1 + i5]);
+						} else if(commandManagerUnknownClass3.field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640[i5] == String.class) {
+							object4[i5] = string2[1 + i5];
+							if(i5 == object4.length - 1) {
+								for(int i6 = i5 + 1; i6 < string2.length - 1; ++i6) {
+									object4[i5] = object4[i5] + " " + string2[1 + i6];
+								}
+							}
+						} else {
+							ExtLogger.w("[3ECONSOLE] Type invalid");
+						}
+
+						++i5;
+					}
+				} catch (Exception exception7) {
+					if(exception7 instanceof RuntimeException) {
+						throw exception7;
+					}
+
+					ExtLogger.w("[3ECONSOLE] Failed to parse argument: " + exception7.getClass().getSimpleName());
+					exception7.printStackTrace();
+				}
+			} else {
+				ExtLogger.w("[3ECONSOLE] Command not found or args wrong");
+			}
+		}
+
+		this.field_12074_59H713eWwMqHt2BkXfmtU7Gw1Ed2yJ84RRj5r8Os9hXCRrICXE2XfeV2i7Jm = "";
+	}
+
+	public void func_12066_3G1KR5Cj4Oc1UWW3nROs4iPJarSF633X338OpM3D85527J342we9BwJP271F(char character, int integer) {
+		if(character != 0) {
+			if(InputHandler.IsKeyDown(29) && integer != 29) {
+				this.field_12074_59H713eWwMqHt2BkXfmtU7Gw1Ed2yJ84RRj5r8Os9hXCRrICXE2XfeV2i7Jm = this.field_12074_59H713eWwMqHt2BkXfmtU7Gw1Ed2yJ84RRj5r8Os9hXCRrICXE2XfeV2i7Jm + integer + "";
+			} else if(character != 9) {
+				this.field_12074_59H713eWwMqHt2BkXfmtU7Gw1Ed2yJ84RRj5r8Os9hXCRrICXE2XfeV2i7Jm = this.field_12074_59H713eWwMqHt2BkXfmtU7Gw1Ed2yJ84RRj5r8Os9hXCRrICXE2XfeV2i7Jm + character;
+			}
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/ExtLogger.java
@@ -1,0 +1,92 @@
+package net.minecraft.src;
+
+import java.io.FileWriter;
+import java.io.IOException;
+
+import org.lwjgl.opengl.GL11;
+
+public class ExtLogger {
+	static FileWriter fw;
+
+	public static void InitLogger() {
+		r("MINECRAFT EXTENSION 16.05 (MODIFICATION) GAME LOG");
+		r("This is the file you need to send to the bug tracker.");
+		r("Please add it as an attachment, do not copy it into a comment");
+		r("");
+		r("Game version:");
+		r("  -base: 1.1.2_01");
+		r("  -extension: 16.05 R4");
+		r("");
+		String string0 = System.getProperty("os.arch");
+		if(string0.contains("64")) {
+			string0 = string0 + "(64-bit)";
+		}
+
+		r("OS: " + System.getProperty("os.name") + " (" + string0 + ") [" + System.getProperty("os.version") + "]");
+		r("JVM: " + System.getProperty("java.version"));
+		r("");
+		r("Technical specification:");
+		r("CPU: <unsupported>");
+		r("GPU: " + GL11.glGetString(GL11.GL_RENDERER));
+		r("    - compatible API:");
+		r("      - OpenGL: " + GL11.glGetString(GL11.GL_VERSION));
+		r("      - Direct3D: <unsupported>");
+		r("Memory: " + Runtime.getRuntime().maxMemory() / 1024L / 1024L + " MB");
+		r("");
+		r("");
+		r("###################################");
+		r("");
+		i("Extension 16.05 init");
+		i("Compilation mode:");
+		i("  - debug output: MINIMAL");
+		i("  - hub connections: DISABLED");
+		i("Build without Direct3D support, launching in legacy OpenGL mode");
+		i("Connection timed out");
+
+		for(int i1 = 1; i1 != 6; ++i1) {
+			i("Reconnection attempt " + i1);
+		}
+
+		i("Connection failed. Launching in offline mode.");
+		i("Unable to authenticate. You will only be able to play on local servers.");
+	}
+
+	public static void i(String string) {
+		try {
+			if(fw != null) {
+				fw.write("[INFO] " + string + "\n");
+			}
+
+			System.out.println("[INFO] " + string);
+		} catch (IOException iOException2) {
+			iOException2.printStackTrace();
+		}
+
+	}
+
+	public static void w(String string) {
+		try {
+			if(fw != null) {
+				fw.write("[WARN] " + string + "\n");
+			}
+
+			System.out.println("[WARN] " + string);
+		} catch (IOException iOException2) {
+			iOException2.printStackTrace();
+		}
+
+	}
+
+	public static void r(String string) {
+		try {
+			if(fw != null) {
+				fw.write(string + "\n");
+			}
+
+			System.out.println(string);
+		} catch (IOException iOException2) {
+			iOException2.printStackTrace();
+		}
+
+	}
+}
--- net/minecraft/src/ModelSkeleton.java
+++ net/minecraft/src/ModelSkeleton.java
@@ -2,20 +2,20 @@
 
 public class ModelSkeleton extends ModelZombie {
 	public ModelSkeleton() {
-		float var1 = 0.0F;
+		float f1 = 0.0F;
 		this.bipedRightArm = new ModelRenderer(40, 16);
-		this.bipedRightArm.addBox(-1.0F, -2.0F, -1.0F, 2, 12, 2, var1);
+		this.bipedRightArm.addBox(-1.0F, -2.0F, -1.0F, 2, 12, 2, f1);
 		this.bipedRightArm.setRotationPoint(-5.0F, 2.0F, 0.0F);
 		this.bipedLeftArm = new ModelRenderer(40, 16);
 		this.bipedLeftArm.mirror = true;
-		this.bipedLeftArm.addBox(-1.0F, -2.0F, -1.0F, 2, 12, 2, var1);
+		this.bipedLeftArm.addBox(-1.0F, -2.0F, -1.0F, 2, 12, 2, f1);
 		this.bipedLeftArm.setRotationPoint(5.0F, 2.0F, 0.0F);
 		this.bipedRightLeg = new ModelRenderer(0, 16);
-		this.bipedRightLeg.addBox(-1.0F, 0.0F, -1.0F, 2, 12, 2, var1);
+		this.bipedRightLeg.addBox(-1.0F, 0.0F, -1.0F, 2, 12, 2, f1);
 		this.bipedRightLeg.setRotationPoint(-2.0F, 12.0F, 0.0F);
 		this.bipedLeftLeg = new ModelRenderer(0, 16);
 		this.bipedLeftLeg.mirror = true;
-		this.bipedLeftLeg.addBox(-1.0F, 0.0F, -1.0F, 2, 12, 2, var1);
+		this.bipedLeftLeg.addBox(-1.0F, 0.0F, -1.0F, 2, 12, 2, f1);
 		this.bipedLeftLeg.setRotationPoint(2.0F, 12.0F, 0.0F);
 	}
 }
--- net/minecraft/src/ChatLine.java
+++ net/minecraft/src/ChatLine.java
@@ -4,8 +4,8 @@
 	public String message;
 	public int updateCounter;
 
-	public ChatLine(String var1) {
-		this.message = var1;
+	public ChatLine(String message) {
+		this.message = message;
 		this.updateCounter = 0;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockGravelOld.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockGravelOld extends BlockSandOld {
+	public BlockGravelOld(int integer1, int integer2) {
+		super(integer1, integer2);
+	}
+
+	public int idDropped(int integer, Random random) {
+		return random.nextInt(10) == 0 ? Item.flint.shiftedIndex : this.blockID;
+	}
+}
--- /dev/null
+++ net/minecraft/src/HubWorld.java
@@ -1,0 +1,34 @@
+package net.minecraft.src;
+
+import java.io.File;
+
+public class HubWorld extends World {
+	public HubWorld(File file, long long2) {
+		super(file, "hub", long2);
+		this.spawnY = 1;
+		this.snowCovered = false;
+		this.fogColor = 1567L;
+	}
+
+	protected IChunkProvider getChunkProvider(File saveDir) {
+		return new HubChunkProviderLoadOrGenerate(this, new ChunkLoader(saveDir, true), new HubChunkProviderGenerate(this));
+	}
+
+	protected boolean findSpawn(int x, int z) {
+		boolean z3 = false;
+
+		for(int i4 = 0; i4 < 128; ++i4) {
+			z3 = this.getBlockId(x, i4, z) != 0;
+		}
+
+		return z3;
+	}
+
+	public void spawnPlayerWithLoadedChunks(EntityPlayer entityPlayer) {
+		super.spawnPlayerWithLoadedChunks(entityPlayer);
+	}
+
+	public boolean func_7543_8eqo515dTkd08uE6VZt7E90969pNXPyr50tqh4WFlpod3J41K71rd9eZA84p(HubWorld wv, int integer2, int integer3, int integer4, RemoteWorld qt) {
+		return wv.setBlockAndMetadataWithNotify(integer2, integer3, integer4, ExtBlocks.BlockFlameWoodDoor.blockID, qt.func_7541_2R3b24Cp7xDHr78U056N76Op70FJ85s7dEtYz9pBRZWqC0G4g9SZxX0Lg07H().func_9816_2x0acOjuTTpK4OJWkVSraAOSw60K40SH908itmm7PawcvTN8Ic7280XzUhVj());
+	}
+}
--- /dev/null
+++ net/minecraft/src/EntitySnowflakeFX.java
@@ -1,0 +1,56 @@
+package net.minecraft.src;
+
+public class EntitySnowflakeFX extends EntityFX {
+	private final float snowflakeParticleScale;
+
+	public EntitySnowflakeFX(World vg, double double2, double double3, double double4, double double5, double double6, double double7, int integer) {
+		super(vg, double2, double3, double4, double5, double6, double7);
+		this.motionX = this.motionX * (double)0.01F + double5;
+		this.motionY = this.motionY * (double)0.01F + double6;
+		this.motionZ = this.motionZ * (double)0.01F + double7;
+		this.snowflakeParticleScale = this.particleScale;
+		this.particleRed = this.particleGreen = this.particleBlue = 1.0F;
+		this.noClip = false;
+		this.particleTextureIndex = 63 + integer;
+		this.particleMaxAge += 2;
+	}
+
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		float f8 = ((float)this.particleAge + renderPartialTick) / (float)this.particleMaxAge;
+		this.particleScale = this.snowflakeParticleScale * (1.0F - f8 * f8 * 0.5F);
+		super.renderParticle(tessellator, renderPartialTick, xOffset, yOffset, zOffset, xOffset2, zOffset2);
+	}
+
+	public float getBrightness(float unused) {
+		float f2 = ((float)this.particleAge + unused) / (float)this.particleMaxAge;
+		if(f2 < 0.0F) {
+			f2 = 0.0F;
+		}
+
+		if(f2 > 1.0F) {
+			f2 = 1.0F;
+		}
+
+		float f3 = super.getBrightness(unused);
+		return f3 * f2 + (1.0F - f2);
+	}
+
+	public void onUpdate() {
+		this.prevPosX = this.posX;
+		this.prevPosY = this.posY;
+		this.prevPosZ = this.posZ;
+		if(this.particleAge++ >= this.particleMaxAge) {
+			this.setEntityDead();
+		}
+
+		this.moveEntity(this.motionX, this.motionY, this.motionZ);
+		this.motionX *= (double)0.96F;
+		this.motionY *= (double)0.96F;
+		this.motionZ *= (double)0.96F;
+		if(this.onGround) {
+			this.motionX *= (double)0.7F;
+			this.motionZ *= (double)0.7F;
+		}
+
+	}
+}
--- net/minecraft/src/Block.java
+++ net/minecraft/src/Block.java
@@ -4,42 +4,45 @@
 import java.util.Random;
 
 public class Block {
+	public static final int BLOCK_LIST_SIZE = 32767;
 	public static final StepSound soundPowderFootstep = new StepSound("stone", 1.0F, 1.0F);
 	public static final StepSound soundWoodFootstep = new StepSound("wood", 1.0F, 1.0F);
 	public static final StepSound soundGravelFootstep = new StepSound("gravel", 1.0F, 1.0F);
 	public static final StepSound soundGrassFootstep = new StepSound("grass", 1.0F, 1.0F);
 	public static final StepSound soundStoneFootstep = new StepSound("stone", 1.0F, 1.0F);
 	public static final StepSound soundMetalFootstep = new StepSound("stone", 1.0F, 1.5F);
-	public static final StepSound soundGlassFootstep = new StepSoundGlass("stone", 1.0F, 1.0F);
+	public static final StepSound soundGlassFootstep = new StepSoundGlass("glass", 1.0F, 1.0F);
 	public static final StepSound soundClothFootstep = new StepSound("cloth", 1.0F, 1.0F);
 	public static final StepSound soundSandFootstep = new StepSoundSand("sand", 1.0F, 1.0F);
-	public static final Block[] blocksList = new Block[256];
-	public static final boolean[] tickOnLoad = new boolean[256];
-	public static final boolean[] opaqueCubeLookup = new boolean[256];
-	public static final boolean[] isBlockContainer = new boolean[256];
-	public static final int[] lightOpacity = new int[256];
-	public static final boolean[] canBlockGrass = new boolean[256];
-	public static final int[] lightValue = new int[256];
-	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep);
-	public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep);
-	public static final Block cobblestone = (new Block(4, 16, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block planks = (new Block(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
-	public static final Block sapling = (new BlockSapling(6, 15)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final Block bedrock = (new Block(7, 17, Material.rock)).setHardness(-1.0F).setResistance(6000000.0F).setStepSound(soundStoneFootstep);
-	public static final Block waterMoving = (new BlockFlowing(8, Material.water)).setHardness(100.0F).setLightOpacity(3);
-	public static final Block waterStill = (new BlockStationary(9, Material.water)).setHardness(100.0F).setLightOpacity(3);
-	public static final Block lavaMoving = (new BlockFlowing(10, Material.lava)).setHardness(0.0F).setLightValue(1.0F).setLightOpacity(255);
-	public static final Block lavaStill = (new BlockStationary(11, Material.lava)).setHardness(100.0F).setLightValue(1.0F).setLightOpacity(255);
-	public static final Block sand = (new BlockSand(12, 18)).setHardness(0.5F).setStepSound(soundSandFootstep);
-	public static final Block gravel = (new BlockGravel(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep);
-	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep);
-	public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep);
-	public static final Block sponge = (new BlockSponge(19)).setHardness(0.6F).setStepSound(soundGrassFootstep);
-	public static final Block glass = (new BlockGlass(20, 49, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep);
+	public static final StepSound soundElderFootstep = new StepSound("elder", 1.0F, 1.0F);
+	public static final StepSound soundSpecialFootstep = new StepSound("special", 1.0F, 1.0F);
+	public static final Block[] blocksList = new Block[32767];
+	public static final boolean[] tickOnLoad = new boolean[32767];
+	public static final boolean[] opaqueCubeLookup = new boolean[32767];
+	public static final boolean[] isBlockContainer = new boolean[32767];
+	public static final int[] lightOpacity = new int[32767];
+	public static final boolean[] canBlockGrass = new boolean[32767];
+	public static final int[] lightValue = new int[32767];
+	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setEssValue(2).setName("Stone");
+	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep).setName("Grass Block").setEssValue(1);
+	public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep).setEssValue(1).setName("Dirt");
+	public static final Block cobblestone = (new Block(4, 16, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setEssValue(1).setName("Cobblestone");
+	public static final Block planks = (new Block(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setEssValue(2).setName("Wooden Planks");
+	public static final Block sapling = (new BlockSapling(6, 15)).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("Sapling").setEssValue(4);
+	public static final Block bedrock = (new Block(7, 17, Material.rock)).setHardness(-1.0F).setResistance(6000000.0F).setStepSound(soundElderFootstep).setName("Elderstone").setEssValue(1);
+	public static final Block waterMoving = (new BlockFlowing(8, Material.water)).setHardness(100.0F).setLightOpacity(3).setName("Water").setEssValue(1);
+	public static final Block waterStill = (new BlockStationary(9, Material.water)).setHardness(100.0F).setLightOpacity(3).setName("Water").setEssValue(1);
+	public static final Block lavaMoving = (new BlockFlowing(10, Material.lava)).setHardness(0.0F).setLightValue(1.0F).setLightOpacity(255).setName("Lava").setEssValue(1);
+	public static final Block lavaStill = (new BlockStationary(11, Material.lava)).setHardness(100.0F).setLightValue(1.0F).setLightOpacity(255).setName("Lava").setEssValue(1);
+	public static final Block sand = (new BlockSand(12, 18)).setHardness(0.5F).setStepSound(soundSandFootstep).setName("Sand").setEssValue(1);
+	public static final Block gravel = (new BlockGravel(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep).setName("Gravel").setEssValue(2);
+	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setEssValue(32).setName("Gold Ore");
+	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setEssValue(16).setName("Iron Ore");
+	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("Coal Ore").setEssValue(8);
+	public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep).setEssValue(4).setName("Wood");
+	public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep).setName("Leaves").setEssValue(1);
+	public static final Block sponge = (new BlockSponge(19)).setHardness(0.6F).setStepSound(soundGrassFootstep).setName("Sponge").setEssValue(1);
+	public static final Block glass = (new BlockGlass(20, 49, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep).setEssValue(4).setName("Glass");
 	public static final Block clothRed = null;
 	public static final Block clothOrange = null;
 	public static final Block clothYellow = null;
@@ -54,57 +57,57 @@
 	public static final Block clothMagenta = null;
 	public static final Block clothRose = null;
 	public static final Block clothDarkGray = null;
-	public static final Block cloth = (new Block(35, 64, Material.cloth)).setHardness(0.8F).setStepSound(soundClothFootstep);
+	public static final Block cloth = (new Block(35, 64, Material.cloth)).setHardness(0.8F).setStepSound(soundClothFootstep).setEssValue(16).setName("Cloth");
 	public static final Block clothWhite = null;
-	public static final BlockFlower plantYellow = (BlockFlower)(new BlockFlower(37, 13)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final BlockFlower plantRed = (BlockFlower)(new BlockFlower(38, 12)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(2.0F / 16.0F);
-	public static final BlockFlower mushroomRed = (BlockFlower)(new BlockMushroom(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final Block blockGold = (new BlockOreBlock(41, 39)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
-	public static final Block blockSteel = (new BlockOreBlock(42, 38)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
-	public static final Block stairDouble = (new BlockStep(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block stairSingle = (new BlockStep(44, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block brick = (new Block(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block tnt = (new BlockTNT(46, 8)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final Block bookshelf = (new BlockBookshelf(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep);
-	public static final Block cobblestoneMossy = (new Block(48, 36, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block obsidian = (new BlockObsidian(49, 37)).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep);
-	public static final Block torch = (new BlockTorch(50, 80)).setHardness(0.0F).setLightValue(15.0F / 16.0F).setStepSound(soundWoodFootstep);
-	public static final BlockFire fire = (BlockFire)((BlockFire)(new BlockFire(51, 31)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep));
-	public static final Block mobSpawner = (new BlockMobSpawner(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep);
-	public static final Block stairCompactWood = new BlockStairs(53, planks);
-	public static final Block chest = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep);
-	public static final Block redstoneWire = (new BlockRedstoneWire(55, 84)).setHardness(0.0F).setStepSound(soundPowderFootstep);
-	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block blockDiamond = (new BlockOreBlock(57, 40)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
-	public static final Block workbench = (new BlockWorkbench(58)).setHardness(2.5F).setStepSound(soundWoodFootstep);
-	public static final Block crops = (new BlockCrops(59, 88)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final Block tilledField = (new BlockFarmland(60)).setHardness(0.6F).setStepSound(soundGravelFootstep);
-	public static final Block stoneOvenIdle = (new BlockFurnace(61, false)).setHardness(3.5F).setStepSound(soundStoneFootstep);
-	public static final Block stoneOvenActive = (new BlockFurnace(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(14.0F / 16.0F);
-	public static final Block signStanding = (new BlockSign(63, TileEntitySign.class, true)).setHardness(1.0F).setStepSound(soundWoodFootstep);
-	public static final Block doorWood = (new BlockDoor(64, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep);
-	public static final Block ladder = (new BlockLadder(65, 83)).setHardness(0.4F).setStepSound(soundWoodFootstep);
-	public static final Block minecartTrack = (new BlockMinecartTrack(66, 128)).setHardness(0.7F).setStepSound(soundMetalFootstep);
-	public static final Block stairCompactStone = new BlockStairs(67, cobblestone);
-	public static final Block signWall = (new BlockSign(68, TileEntitySign.class, false)).setHardness(1.0F).setStepSound(soundWoodFootstep);
-	public static final Block lever = (new BlockLever(69, 96)).setHardness(0.5F).setStepSound(soundWoodFootstep);
-	public static final Block pressurePlateStone = (new BlockPressurePlate(70, stone.blockIndexInTexture, EnumMobType.mobs)).setHardness(0.5F).setStepSound(soundStoneFootstep);
-	public static final Block doorSteel = (new BlockDoor(71, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep);
-	public static final Block pressurePlateWood = (new BlockPressurePlate(72, planks.blockIndexInTexture, EnumMobType.everything)).setHardness(0.5F).setStepSound(soundWoodFootstep);
-	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, true)).setLightValue(10.0F / 16.0F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block torchRedstoneIdle = (new BlockRedstoneTorch(75, 115, false)).setHardness(0.0F).setStepSound(soundWoodFootstep);
-	public static final Block torchRedstoneActive = (new BlockRedstoneTorch(76, 99, true)).setHardness(0.0F).setLightValue(0.5F).setStepSound(soundWoodFootstep);
-	public static final Block button = (new BlockButton(77, stone.blockIndexInTexture)).setHardness(0.5F).setStepSound(soundStoneFootstep);
-	public static final Block snow = (new BlockSnow(78, 66)).setHardness(0.1F).setStepSound(soundClothFootstep);
-	public static final Block ice = (new BlockIce(79, 67)).setHardness(0.5F).setLightOpacity(3).setStepSound(soundGlassFootstep);
-	public static final Block blockSnow = (new BlockSnowBlock(80, 66)).setHardness(0.2F).setStepSound(soundClothFootstep);
-	public static final Block cactus = (new BlockCactus(81, 70)).setHardness(0.4F).setStepSound(soundClothFootstep);
-	public static final Block blockClay = (new BlockClay(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep);
-	public static final Block reed = (new BlockReed(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
+	public static final BlockFlower plantYellow = (BlockFlower)(new BlockFlower(37, 13)).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("Rose").setEssValue(4);
+	public static final BlockFlower plantRed = (BlockFlower)(new BlockFlower(38, 12)).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("Dandelion").setEssValue(4);
+	public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(0.125F).setEssValue(10).setName("Mushroom");
+	public static final BlockFlower mushroomRed = (BlockFlower)(new BlockMushroom(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep).setEssValue(10).setName("Red Mushroom");
+	public static final Block blockGold = (new BlockOreBlock(41, 39)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setEssValue(432).setName("Gold Block");
+	public static final Block blockSteel = (new BlockOreBlock(42, 38)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setEssValue(180).setName("Iron Block");
+	public static final Block stairDouble = (new BlockStep(43, 5, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("Stone Slab").setEssValue(4);
+	public static final Block stairSingle = (new BlockStep(44, 5, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("Stone Slab").setEssValue(8);
+	public static final Block brick = (new Block(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("Bricks").setEssValue(16);
+	public static final Block tnt = (new BlockTNT(46, 8)).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("TNT").setEssValue(20);
+	public static final Block bookshelf = (new BlockBookshelf(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep).setName("Cloth Panel").setEssValue(8);
+	public static final Block cobblestoneMossy = (new Block(48, 36, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("Lichen Cobblestone").setEssValue(16);
+	public static final Block obsidian = (new BlockObsidian(49, 37)).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep).setName("Obsidian").setEssValue(24);
+	public static final Block torch = (new BlockTorch(50, 80)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(soundWoodFootstep).setName("Torch").setEssValue(2);
+	public static final BlockFire fire = (BlockFire)((BlockFire)(new BlockFire(51, 349)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep)).setName("Fire").setEssValue(2);
+	public static final Block mobSpawner = (new BlockMobSpawner(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep).setName("Mob Creator").setEssValue(1);
+	public static final Block stairCompactWood = (new BlockStairs(53, planks)).setName("Wooden Stairs").setEssValue(2);
+	public static final Block chest = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep).setName("Chest").setEssValue(4);
+	public static final Block redstoneWire = (new BlockRedstoneWire(55, 84)).setHardness(0.0F).setStepSound(soundPowderFootstep).setName("Greenstone Wire").setEssValue(1);
+	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("Diamond Ore").setEssValue(28);
+	public static final Block blockDiamond = (new BlockOreBlock(57, 40)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setEssValue(504).setName("Diamond Block");
+	public static final Block workbench = (new BlockWorkbench(58)).setHardness(2.5F).setStepSound(soundWoodFootstep).setName("Workbench").setEssValue(8);
+	public static final Block crops = (new BlockCrops(59, 88)).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("Crops").setEssValue(8);
+	public static final Block tilledField = (new BlockFarmland(60)).setHardness(0.6F).setStepSound(soundGravelFootstep).setName("Tilled Field").setEssValue(9);
+	public static final Block stoneOvenIdle = (new BlockFurnace(61, false)).setHardness(3.5F).setStepSound(soundStoneFootstep).setName("Furnace").setEssValue(8);
+	public static final Block stoneOvenActive = (new BlockFurnace(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(0.875F).setName("Furnace").setEssValue(8);
+	public static final Block signStanding = (new BlockSign(63, TileEntitySign.class, true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setName("Sign").setEssValue(1);
+	public static final Block doorWood = (new BlockDoor(64, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setName("Wooden Door").setEssValue(4);
+	public static final Block ladder = (new BlockLadder(65, 83)).setHardness(0.4F).setStepSound(soundWoodFootstep).setName("Ladder").setEssValue(1);
+	public static final Block minecartTrack = (new BlockMinecartTrack(66, 128)).setHardness(0.7F).setStepSound(soundMetalFootstep).setName("Rail").setEssValue(11);
+	public static final Block stairCompactStone = (new BlockStairs(67, cobblestone)).setName("Cobblestone Stairs").setEssValue(12);
+	public static final Block signWall = (new BlockSign(68, TileEntitySign.class, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setName("Sign").setEssValue(1);
+	public static final Block lever = (new BlockLever(69, 96)).setHardness(0.5F).setStepSound(soundWoodFootstep).setName("Lever").setEssValue(11);
+	public static final Block pressurePlateStone = (new BlockPressurePlate(70, stone.blockIndexInTexture, EnumMobType.mobs)).setHardness(0.5F).setStepSound(soundStoneFootstep).setName("Stone Pressure Plate").setEssValue(11);
+	public static final Block doorSteel = (new BlockDoor(71, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep).setName("Iron Door").setEssValue(32);
+	public static final Block pressurePlateWood = (new BlockPressurePlate(72, wood.blockIndexInTexture, EnumMobType.everything)).setHardness(0.5F).setStepSound(soundWoodFootstep).setName("Wooden Pressure Plate").setEssValue(1);
+	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("Greenstone Ore").setEssValue(12);
+	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, true)).setLightValue(0.625F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setName("Greenstone Ore").setEssValue(12);
+	public static final Block torchRedstoneIdle = (new BlockRedstoneTorch(75, 115, false)).setHardness(0.0F).setStepSound(soundWoodFootstep).setName("Greenstone Torch").setEssValue(8);
+	public static final Block torchRedstoneActive = (new BlockRedstoneTorch(76, 99, true)).setHardness(0.0F).setLightValue(0.5F).setStepSound(soundWoodFootstep).setName("Greenstone Torch").setEssValue(8);
+	public static final Block button = (new BlockButton(77, stone.blockIndexInTexture)).setHardness(0.5F).setStepSound(soundStoneFootstep).setName("Stone Button").setEssValue(2);
+	public static final Block snow = (new BlockSnow(78, 66)).setHardness(0.1F).setStepSound(soundClothFootstep).setName("Snow").setEssValue(4);
+	public static final Block ice = (new BlockIce(79, 67)).setHardness(0.5F).setLightOpacity(3).setStepSound(soundGlassFootstep).setName("Ice").setEssValue(4);
+	public static final Block blockSnow = (new BlockSnowBlock(80, 66)).setHardness(0.2F).setStepSound(soundClothFootstep).setName("Snow Block").setEssValue(2);
+	public static final Block cactus = (new BlockCactus(81, 70)).setHardness(0.4F).setStepSound(soundClothFootstep).setName("Cactus").setEssValue(1);
+	public static final Block blockClay = (new BlockClay(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep).setName("Clay Block").setEssValue(8);
+	public static final Block reed = (new BlockReed(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep).setName("Reed").setEssValue(4);
+	public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setName("Jukebox").setEssValue(32);
+	public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setName("Fence").setEssValue(1);
 	public int blockIndexInTexture;
 	public final int blockID;
 	protected float hardness;
@@ -119,47 +122,77 @@
 	public float blockParticleGravity;
 	public final Material material;
 	public float slipperiness;
+	public boolean field_8144_72Oqw3429TI8hzf27v89Z538VRbsgF2pj0D81SJ8382HK8gS4P4A3E30873e;
+	public float field_8147_0302QNNy7BWr9fvSg53bo3h52Yd0s3sBK659JxLqc53AIWmi10i9E0y4Y008;
+	public boolean pickaxeEffective;
+	public int essenceValue;
+	public String blockName;
+	public boolean breakableInZM;
+	public boolean field_8232_4k8w3e5f26ugs937dSokGDXxBmWPP88K3JA1GT907Fv1DTkFL8dM2vt8hknU;
 
-	protected Block(int var1, Material var2) {
+	protected Block(int id, Material material) {
+		this.field_8144_72Oqw3429TI8hzf27v89Z538VRbsgF2pj0D81SJ8382HK8gS4P4A3E30873e = false;
+		this.field_8147_0302QNNy7BWr9fvSg53bo3h52Yd0s3sBK659JxLqc53AIWmi10i9E0y4Y008 = 0.0F;
+		this.pickaxeEffective = false;
+		this.essenceValue = 1;
+		this.blockName = "";
+		this.breakableInZM = false;
+		this.field_8232_4k8w3e5f26ugs937dSokGDXxBmWPP88K3JA1GT907Fv1DTkFL8dM2vt8hknU = false;
 		this.stepSound = soundPowderFootstep;
 		this.blockParticleGravity = 1.0F;
 		this.slipperiness = 0.6F;
-		if(blocksList[var1] != null) {
-			throw new IllegalArgumentException("Slot " + var1 + " is already occupied by " + blocksList[var1] + " when adding " + this);
+		if(blocksList[id] != null) {
+			throw new IllegalArgumentException("Slot " + id + " is already occupied by " + blocksList[id] + " when adding " + this);
 		} else {
-			this.material = var2;
-			blocksList[var1] = this;
-			this.blockID = var1;
+			this.material = material;
+			blocksList[id] = this;
+			this.blockID = id;
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-			opaqueCubeLookup[var1] = this.isOpaqueCube();
-			lightOpacity[var1] = this.isOpaqueCube() ? 255 : 0;
-			canBlockGrass[var1] = this.getCanBlockGrass();
-			isBlockContainer[var1] = false;
+			opaqueCubeLookup[id] = this.isOpaqueCube();
+			lightOpacity[id] = this.isOpaqueCube() ? 255 : 0;
+			canBlockGrass[id] = this.getCanBlockGrass();
+			isBlockContainer[id] = false;
 		}
 	}
 
-	protected Block(int var1, int var2, Material var3) {
-		this(var1, var3);
-		this.blockIndexInTexture = var2;
-	}
-
-	protected Block setStepSound(StepSound var1) {
-		this.stepSound = var1;
-		return this;
-	}
-
-	protected Block setLightOpacity(int var1) {
-		lightOpacity[this.blockID] = var1;
-		return this;
-	}
-
-	protected Block setLightValue(float var1) {
-		lightValue[this.blockID] = (int)(15.0F * var1);
-		return this;
-	}
-
-	protected Block setResistance(float var1) {
-		this.resistance = var1 * 3.0F;
+	public Block(int id, int blockIndex, Material material) {
+		this(id, material);
+		this.blockIndexInTexture = blockIndex;
+	}
+
+	public Block setStepSound(StepSound stepSound) {
+		this.stepSound = stepSound;
+		return this;
+	}
+
+	public Block setLightOpacity(int opacity) {
+		lightOpacity[this.blockID] = opacity;
+		return this;
+	}
+
+	public Block setLightValue(float value) {
+		lightValue[this.blockID] = (int)(15.0F * value);
+		return this;
+	}
+
+	public Block func_8119_1b5dH1WWcMpF1V68H8m8EZc7fRK8e3hz5O7Wug712q7QVU8915w75pQ4IeWl(float float1) {
+		this.field_8144_72Oqw3429TI8hzf27v89Z538VRbsgF2pj0D81SJ8382HK8gS4P4A3E30873e = true;
+		this.field_8147_0302QNNy7BWr9fvSg53bo3h52Yd0s3sBK659JxLqc53AIWmi10i9E0y4Y008 = float1;
+		return this;
+	}
+
+	public Block setResistance(float resistance) {
+		this.resistance = resistance * 3.0F;
+		return this;
+	}
+
+	public Block setPickaxeEffective(boolean boolean1) {
+		this.pickaxeEffective = boolean1;
+		return this;
+	}
+
+	public Block setEssValue(int integer) {
+		this.essenceValue = integer;
 		return this;
 	}
 
@@ -175,69 +208,77 @@
 		return 0;
 	}
 
-	protected Block setHardness(float var1) {
-		this.hardness = var1;
-		if(this.resistance < var1 * 5.0F) {
-			this.resistance = var1 * 5.0F;
+	public Block setHardness(float hardness) {
+		this.hardness = hardness;
+		if(this.resistance < hardness * 5.0F) {
+			this.resistance = hardness * 5.0F;
 		}
 
 		return this;
 	}
 
-	protected void setTickOnLoad(boolean var1) {
-		tickOnLoad[this.blockID] = var1;
-	}
-
-	public void setBlockBounds(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.minX = (double)var1;
-		this.minY = (double)var2;
-		this.minZ = (double)var3;
-		this.maxX = (double)var4;
-		this.maxY = (double)var5;
-		this.maxZ = (double)var6;
-	}
-
-	public float getBlockBrightness(IBlockAccess var1, int var2, int var3, int var4) {
-		return var1.getBrightness(var2, var3, var4);
-	}
-
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return var5 == 0 && this.minY > 0.0D ? true : (var5 == 1 && this.maxY < 1.0D ? true : (var5 == 2 && this.minZ > 0.0D ? true : (var5 == 3 && this.maxZ < 1.0D ? true : (var5 == 4 && this.minX > 0.0D ? true : (var5 == 5 && this.maxX < 1.0D ? true : !var1.isBlockNormalCube(var2, var3, var4))))));
-	}
-
-	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return this.getBlockTextureFromSideAndMetadata(var5, var1.getBlockMetadata(var2, var3, var4));
-	}
-
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return this.getBlockTextureFromSide(var1);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
+	protected void setTickOnLoad(boolean doesTickOnLoad) {
+		tickOnLoad[this.blockID] = doesTickOnLoad;
+	}
+
+	public void setBlockBounds(float minX, float minY, float minZ, float maxX, float maxY, float maxZ) {
+		this.minX = (double)minX;
+		this.minY = (double)minY;
+		this.minZ = (double)minZ;
+		this.maxX = (double)maxX;
+		this.maxY = (double)maxY;
+		this.maxZ = (double)maxZ;
+	}
+
+	public float getRenderSideBrightness(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		return this.field_8144_72Oqw3429TI8hzf27v89Z538VRbsgF2pj0D81SJ8382HK8gS4P4A3E30873e ? this.field_8147_0302QNNy7BWr9fvSg53bo3h52Yd0s3sBK659JxLqc53AIWmi10i9E0y4Y008 : abt.getRenderSideBrightness(integer2, integer3, integer4);
+	}
+
+	public float getBlockBrightness(IBlockAccess blockAccess, int x, int y, int z) {
+		return blockAccess.getBrightness(x, y, z);
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return side == 0 && this.minY > 0.0D ? true : (side == 1 && this.maxY < 1.0D ? true : (side == 2 && this.minZ > 0.0D ? true : (side == 3 && this.maxZ < 1.0D ? true : (side == 4 && this.minX > 0.0D ? true : (side == 5 && this.maxX < 1.0D ? true : !blockAccess.isBlockNormalCube(x, y, z))))));
+	}
+
+	public int getBlockTexture(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return this.getBlockTextureFromSideAndMetadata(side, blockAccess.getBlockMetadata(x, y, z));
+	}
+
+	public int func_8086_562a2lhwZKvA2q1SYRkk6a3ib277RkRI785Nc3EOo7NAF01ZLdp6C8534NoH(IBlockAccess abt, int integer2, int integer3, double double4, double double5, double double6) {
+		return this.getBlockTextureFromSide(integer2);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return this.getBlockTextureFromSide(side);
+	}
+
+	public int getBlockTextureFromSide(int side) {
 		return this.blockIndexInTexture;
 	}
 
-	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		return AxisAlignedBB.getBoundingBoxFromPool((double)var2 + this.minX, (double)var3 + this.minY, (double)var4 + this.minZ, (double)var2 + this.maxX, (double)var3 + this.maxY, (double)var4 + this.maxZ);
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		return AxisAlignedBB.getBoundingBoxFromPool((double)x + this.minX, (double)y + this.minY, (double)z + this.minZ, (double)x + this.maxX, (double)y + this.maxY, (double)z + this.maxZ);
 	}
 
-	public void getCollidingBoundingBoxes(World var1, int var2, int var3, int var4, AxisAlignedBB var5, ArrayList var6) {
-		AxisAlignedBB var7 = this.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
-		if(var7 != null && var5.intersectsWith(var7)) {
-			var6.add(var7);
+	public void getCollidingBoundingBoxes(World world, int x, int y, int z, AxisAlignedBB aabb, ArrayList arrayList, Entity xy) {
+		AxisAlignedBB axisAlignedBB8 = this.getCollisionBoundingBoxFromPool(world, x, y, z);
+		if(axisAlignedBB8 != null && aabb.intersectsWith(axisAlignedBB8)) {
+			arrayList.add(axisAlignedBB8);
 		}
 
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		return AxisAlignedBB.getBoundingBoxFromPool((double)var2 + this.minX, (double)var3 + this.minY, (double)var4 + this.minZ, (double)var2 + this.maxX, (double)var3 + this.maxY, (double)var4 + this.maxZ);
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		return AxisAlignedBB.getBoundingBoxFromPool((double)x + this.minX, (double)y + this.minY, (double)z + this.minZ, (double)x + this.maxX, (double)y + this.maxY, (double)z + this.maxZ);
 	}
 
 	public boolean isOpaqueCube() {
 		return true;
 	}
 
-	public boolean canCollideCheck(int var1, boolean var2) {
+	public boolean canCollideCheck(int metadata, boolean boolean2) {
 		return this.isCollidable();
 	}
 
@@ -245,209 +286,209 @@
 		return true;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-	}
-
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-	}
-
-	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+	public void updateTick(World world, int x, int y, int z, Random random) {
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+	}
+
+	public void onBlockDestroyedByPlayer(World world, int x, int y, int z, int flag) {
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
 	}
 
 	public int tickRate() {
 		return 10;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-	}
-
-	public int quantityDropped(Random var1) {
+	public void onBlockAdded(World world, int x, int y, int z) {
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+	}
+
+	public int quantityDropped(Random random) {
 		return 1;
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return this.blockID;
 	}
 
-	public float blockStrength(EntityPlayer var1) {
-		return this.hardness < 0.0F ? 0.0F : (!var1.canHarvestBlock(this) ? 1.0F / this.hardness / 100.0F : var1.getCurrentPlayerStrVsBlock(this) / this.hardness / 30.0F);
-	}
-
-	public void dropBlockAsItem(World var1, int var2, int var3, int var4, int var5) {
-		this.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, 1.0F);
-	}
-
-	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		if(!var1.multiplayerWorld) {
-			int var7 = this.quantityDropped(var1.rand);
-
-			for(int var8 = 0; var8 < var7; ++var8) {
-				if(var1.rand.nextFloat() <= var6) {
-					int var9 = this.idDropped(var5, var1.rand);
-					if(var9 > 0) {
-						float var10 = 0.7F;
-						double var11 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
-						double var13 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
-						double var15 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
-						EntityItem var17 = new EntityItem(var1, (double)var2 + var11, (double)var3 + var13, (double)var4 + var15, new ItemStack(var9));
-						var17.delayBeforeCanPickup = 10;
-						var1.spawnEntityInWorld(var17);
+	public float blockStrength(EntityPlayer entityPlayer) {
+		return this.hardness >= 0.0F ? (!entityPlayer.canHarvestBlock(this) ? 1.0F / this.hardness / 100.0F : entityPlayer.getCurrentPlayerStrVsBlock(this) / this.hardness / 30.0F) : (entityPlayer.inventory.getCurrentItem() == null || entityPlayer.inventory.getCurrentItem().getItem() != ExtItems.obsidianPick && entityPlayer.inventory.getCurrentItem().getItem() != ExtItems.eraser ? 0.0F : entityPlayer.getCurrentPlayerStrVsBlock(this) / 2.0F / 30.0F);
+	}
+
+	public void dropBlockAsItem(World world, int x, int y, int z, int metadata) {
+		this.dropBlockAsItemWithChance(world, x, y, z, metadata, 1.0F);
+	}
+
+	public void dropBlockAsItemWithChance(World world, int x, int y, int z, int metadata, float chance) {
+		if(!world.multiplayerWorld) {
+			int i7 = this.quantityDropped(world.rand);
+
+			for(int i8 = 0; i8 < i7; ++i8) {
+				if(world.rand.nextFloat() <= chance) {
+					int i9 = this.idDropped(metadata, world.rand);
+					if(i9 > 0) {
+						float f10 = 0.7F;
+						double d11 = (double)(world.rand.nextFloat() * f10) + (double)(1.0F - f10) * 0.5D;
+						double d13 = (double)(world.rand.nextFloat() * f10) + (double)(1.0F - f10) * 0.5D;
+						double d15 = (double)(world.rand.nextFloat() * f10) + (double)(1.0F - f10) * 0.5D;
+						EntityItem entityItem17 = new EntityItem(world, (double)x + d11, (double)y + d13, (double)z + d15, new ItemStack(i9));
+						entityItem17.delayBeforeCanPickup = 10;
+						world.spawnEntityInWorld(entityItem17);
 					}
 				}
 			}
-
 		}
+
 	}
 
-	public float getExplosionResistance(Entity var1) {
+	public float getExplosionResistance(Entity entity) {
 		return this.resistance / 5.0F;
 	}
 
-	public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3D var5, Vec3D var6) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		var5 = var5.addVector((double)(-var2), (double)(-var3), (double)(-var4));
-		var6 = var6.addVector((double)(-var2), (double)(-var3), (double)(-var4));
-		Vec3D var7 = var5.getIntermediateWithXValue(var6, this.minX);
-		Vec3D var8 = var5.getIntermediateWithXValue(var6, this.maxX);
-		Vec3D var9 = var5.getIntermediateWithYValue(var6, this.minY);
-		Vec3D var10 = var5.getIntermediateWithYValue(var6, this.maxY);
-		Vec3D var11 = var5.getIntermediateWithZValue(var6, this.minZ);
-		Vec3D var12 = var5.getIntermediateWithZValue(var6, this.maxZ);
-		if(!this.isVecInsideYZBounds(var7)) {
-			var7 = null;
-		}
-
-		if(!this.isVecInsideYZBounds(var8)) {
-			var8 = null;
-		}
-
-		if(!this.isVecInsideXZBounds(var9)) {
-			var9 = null;
-		}
-
-		if(!this.isVecInsideXZBounds(var10)) {
-			var10 = null;
-		}
-
-		if(!this.isVecInsideXYBounds(var11)) {
-			var11 = null;
-		}
-
-		if(!this.isVecInsideXYBounds(var12)) {
-			var12 = null;
-		}
-
-		Vec3D var13 = null;
-		if(var7 != null && (var13 == null || var5.distanceTo(var7) < var5.distanceTo(var13))) {
-			var13 = var7;
-		}
-
-		if(var8 != null && (var13 == null || var5.distanceTo(var8) < var5.distanceTo(var13))) {
-			var13 = var8;
-		}
-
-		if(var9 != null && (var13 == null || var5.distanceTo(var9) < var5.distanceTo(var13))) {
-			var13 = var9;
-		}
-
-		if(var10 != null && (var13 == null || var5.distanceTo(var10) < var5.distanceTo(var13))) {
-			var13 = var10;
-		}
-
-		if(var11 != null && (var13 == null || var5.distanceTo(var11) < var5.distanceTo(var13))) {
-			var13 = var11;
-		}
-
-		if(var12 != null && (var13 == null || var5.distanceTo(var12) < var5.distanceTo(var13))) {
-			var13 = var12;
-		}
-
-		if(var13 == null) {
+	public MovingObjectPosition collisionRayTrace(World world, int x, int y, int z, Vec3D vector1, Vec3D vector2) {
+		this.setBlockBoundsBasedOnState(world, x, y, z);
+		vector1 = vector1.addVector((double)(-x), (double)(-y), (double)(-z));
+		vector2 = vector2.addVector((double)(-x), (double)(-y), (double)(-z));
+		Vec3D vec3D7 = vector1.getIntermediateWithXValue(vector2, this.minX);
+		Vec3D vec3D8 = vector1.getIntermediateWithXValue(vector2, this.maxX);
+		Vec3D vec3D9 = vector1.getIntermediateWithYValue(vector2, this.minY);
+		Vec3D vec3D10 = vector1.getIntermediateWithYValue(vector2, this.maxY);
+		Vec3D vec3D11 = vector1.getIntermediateWithZValue(vector2, this.minZ);
+		Vec3D vec3D12 = vector1.getIntermediateWithZValue(vector2, this.maxZ);
+		if(!this.isVecInsideYZBounds(vec3D7)) {
+			vec3D7 = null;
+		}
+
+		if(!this.isVecInsideYZBounds(vec3D8)) {
+			vec3D8 = null;
+		}
+
+		if(!this.isVecInsideXZBounds(vec3D9)) {
+			vec3D9 = null;
+		}
+
+		if(!this.isVecInsideXZBounds(vec3D10)) {
+			vec3D10 = null;
+		}
+
+		if(!this.isVecInsideXYBounds(vec3D11)) {
+			vec3D11 = null;
+		}
+
+		if(!this.isVecInsideXYBounds(vec3D12)) {
+			vec3D12 = null;
+		}
+
+		Vec3D vec3D13 = null;
+		if(vec3D7 != null && (vec3D13 == null || vector1.distanceTo(vec3D7) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D7;
+		}
+
+		if(vec3D8 != null && (vec3D13 == null || vector1.distanceTo(vec3D8) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D8;
+		}
+
+		if(vec3D9 != null && (vec3D13 == null || vector1.distanceTo(vec3D9) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D9;
+		}
+
+		if(vec3D10 != null && (vec3D13 == null || vector1.distanceTo(vec3D10) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D10;
+		}
+
+		if(vec3D11 != null && (vec3D13 == null || vector1.distanceTo(vec3D11) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D11;
+		}
+
+		if(vec3D12 != null && (vec3D13 == null || vector1.distanceTo(vec3D12) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D12;
+		}
+
+		if(vec3D13 == null) {
 			return null;
 		} else {
-			byte var14 = -1;
-			if(var13 == var7) {
-				var14 = 4;
-			}
-
-			if(var13 == var8) {
-				var14 = 5;
-			}
-
-			if(var13 == var9) {
-				var14 = 0;
-			}
-
-			if(var13 == var10) {
-				var14 = 1;
-			}
-
-			if(var13 == var11) {
-				var14 = 2;
-			}
-
-			if(var13 == var12) {
-				var14 = 3;
-			}
-
-			return new MovingObjectPosition(var2, var3, var4, var14, var13.addVector((double)var2, (double)var3, (double)var4));
+			byte b14 = -1;
+			if(vec3D13 == vec3D7) {
+				b14 = 4;
+			}
+
+			if(vec3D13 == vec3D8) {
+				b14 = 5;
+			}
+
+			if(vec3D13 == vec3D9) {
+				b14 = 0;
+			}
+
+			if(vec3D13 == vec3D10) {
+				b14 = 1;
+			}
+
+			if(vec3D13 == vec3D11) {
+				b14 = 2;
+			}
+
+			if(vec3D13 == vec3D12) {
+				b14 = 3;
+			}
+
+			return new MovingObjectPosition(x, y, z, b14, vec3D13.addVector((double)x, (double)y, (double)z));
 		}
 	}
 
-	private boolean isVecInsideYZBounds(Vec3D var1) {
-		return var1 == null ? false : var1.yCoord >= this.minY && var1.yCoord <= this.maxY && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
-	}
-
-	private boolean isVecInsideXZBounds(Vec3D var1) {
-		return var1 == null ? false : var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
-	}
-
-	private boolean isVecInsideXYBounds(Vec3D var1) {
-		return var1 == null ? false : var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.yCoord >= this.minY && var1.yCoord <= this.maxY;
-	}
-
-	public void onBlockDestroyedByExplosion(World var1, int var2, int var3, int var4) {
+	private boolean isVecInsideYZBounds(Vec3D vector) {
+		return vector == null ? false : vector.yCoord >= this.minY && vector.yCoord <= this.maxY && vector.zCoord >= this.minZ && vector.zCoord <= this.maxZ;
+	}
+
+	private boolean isVecInsideXZBounds(Vec3D vector) {
+		return vector == null ? false : vector.xCoord >= this.minX && vector.xCoord <= this.maxX && vector.zCoord >= this.minZ && vector.zCoord <= this.maxZ;
+	}
+
+	private boolean isVecInsideXYBounds(Vec3D vector) {
+		return vector == null ? false : vector.xCoord >= this.minX && vector.xCoord <= this.maxX && vector.yCoord >= this.minY && vector.yCoord <= this.maxY;
+	}
+
+	public void onBlockDestroyedByExplosion(World world, int x, int y, int z) {
 	}
 
 	public int getRenderBlockPass() {
 		return 0;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3, var4);
-		return var5 == 0 || blocksList[var5].material.getIsLiquid();
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		int i5 = world.getBlockId(x, y, z);
+		return i5 == 0 || blocksList[i5].material.getIsLiquid();
 	}
 
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
 		return false;
 	}
 
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-	}
-
-	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
-	}
-
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-	}
-
-	public void velocityToAddToEntity(World var1, int var2, int var3, int var4, Entity var5, Vec3D var6) {
-	}
-
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-	}
-
-	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
-		return 16777215;
-	}
-
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+	public void onEntityWalking(World world, int x, int y, int z, Entity entity) {
+	}
+
+	public void onBlockPlaced(World world, int x, int y, int z, int notifyFlag) {
+	}
+
+	public void onBlockClicked(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+	}
+
+	public void velocityToAddToEntity(World world, int x, int y, int z, Entity entity, Vec3D vector) {
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+	}
+
+	public int colorMultiplier(IBlockAccess blockAccess, int x, int y, int z) {
+		return 0xFFFFFF;
+	}
+
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int unused) {
 		return false;
 	}
 
@@ -455,28 +496,40 @@
 		return false;
 	}
 
-	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
 	}
 
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
+	public boolean isIndirectlyPoweringTo(World world, int x, int y, int z, int flag) {
 		return false;
 	}
 
 	public void setBlockBoundsForItemRender() {
 	}
 
-	public void harvestBlock(World var1, int var2, int var3, int var4, int var5) {
-		this.dropBlockAsItem(var1, var2, var3, var4, var5);
+	public void harvestBlock(World worldObj, int x, int y, int z, int metadata) {
+		this.dropBlockAsItem(worldObj, x, y, z, metadata);
 	}
 
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
+	public boolean canBlockStay(World world, int x, int y, int z) {
 		return true;
+	}
+
+	public Block func_8091_6nAmgshv12CC9DlDC27iSsr36CH5syW1ChRUHTQWG3h8BFOoZHb76nu7wbgg(boolean boolean1) {
+		this.field_8232_4k8w3e5f26ugs937dSokGDXxBmWPP88K3JA1GT907Fv1DTkFL8dM2vt8hknU = boolean1;
+		return this;
+	}
+
+	public Block setName(String string) {
+		this.blockName = string;
+		return this;
 	}
 
 	static {
-		for(int var0 = 0; var0 < 256; ++var0) {
-			if(blocksList[var0] != null) {
-				Item.itemsList[var0] = new ItemBlock(var0 - 256);
+		ExtBlocks.Register();
+
+		for(int i0 = 0; i0 < 32767; ++i0) {
+			if(blocksList[i0] != null) {
+				Item.itemsList[i0] = new ItemBlock(i0 - 32767);
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/BlockFlamingCube.java
@@ -1,0 +1,100 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockFlamingCube extends Block {
+	int renderMode = 1;
+
+	public BlockFlamingCube(int integer1, int integer2, int integer3) {
+		super(integer1, integer2, Material.rock);
+		this.setTickOnLoad(true);
+		this.renderMode = 0;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return true;
+	}
+
+	public int getRenderType() {
+		return this.renderMode;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return true;
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		super.updateTick(world, x, y, z, random);
+		if(world.getBlockMetadata(x, y, z) == 0) {
+			this.onBlockAdded(world, x, y, z);
+		}
+
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		float f5 = 0.0625F;
+		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + f5), (double)y, (double)((float)z + f5), (double)((float)(x + 1) - f5), (double)((float)(y + 1) - f5), (double)((float)(z + 1) - f5));
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		float f5 = 0.0625F;
+		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + f5), (double)y, (double)((float)z + f5), (double)((float)(x + 1) - f5), (double)(y + 1), (double)((float)(z + 1) - f5));
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(this.h(world, x, y, z)) {
+			int i6 = world.getBlockMetadata(x, y, z);
+			boolean z7 = false;
+			if(!world.isBlockNormalCube(x - 1, y, z) && i6 == 1) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x + 1, y, z) && i6 == 2) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z - 1) && i6 == 3) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z + 1) && i6 == 4) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y - 1, z) && i6 == 5) {
+				z7 = true;
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+				world.setBlockWithNotify(x, y, z, 0);
+			}
+		}
+
+	}
+
+	private boolean h(World vg, int integer2, int integer3, int integer4) {
+		if(!this.canPlaceBlockAt(vg, integer2, integer3, integer4)) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+	}
+
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
+		if(!(entity instanceof EntityItem)) {
+			entity.attackEntityFrom((Entity)null, 5);
+			entity.fire = 300;
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/HubChunkProviderGenerate.java
@@ -1,0 +1,35 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class HubChunkProviderGenerate extends ChunkProviderGenerate {
+	HubWorld worldObj;
+	Random random;
+
+	public HubChunkProviderGenerate(HubWorld wv) {
+		super(wv, wv.randomSeed);
+		this.worldObj = wv;
+		this.random = new Random(this.worldObj.randomSeed);
+	}
+
+	public Chunk provideChunk(int x, int z) {
+		Chunk chunk3 = new Chunk(this.worldObj, new byte[32768], x, z);
+		chunk3.isChunkRendered = true;
+
+		for(int i4 = 0; i4 < 16; ++i4) {
+			for(int i5 = 0; i5 < 16; ++i5) {
+				chunk3.blocks[Ext1605Utils.func_12140_8Oq1I57w9nMV4xcg8IUTb31D6Wumtz10kJJWyh9ORMW4uP8Zr0oyd0bFHQ1k(i4, 0, i5)] = (byte)ExtBlocks.dbgBlock.blockID;
+			}
+		}
+
+		chunk3.generateSkylightMap();
+		return chunk3;
+	}
+
+	public void populate(IChunkProvider chunkProvider, int x, int z) {
+		ThreadChunkPopulator.AddPopulateOperation(new ChunkProviderPopulateOperation(this, chunkProvider, x, z), this);
+	}
+
+	public void actualPopulate(IChunkProvider adg, int integer2, int integer3) {
+	}
+}
--- net/minecraft/src/CraftingInventoryCB.java
+++ net/minecraft/src/CraftingInventoryCB.java
@@ -3,17 +3,17 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class CraftingInventoryCB {
+public class CraftingInventoryCB extends InventoryCB {
 	protected List list = new ArrayList();
 
-	public void onCraftGuiClosed(EntityPlayer var1) {
-		InventoryPlayer var2 = var1.inventory;
-		if(var2.draggedItemStack != null) {
-			var1.dropPlayerItem(var2.draggedItemStack);
+	public void onCraftGuiClosed(EntityPlayer entityPlayer) {
+		InventoryPlayer inventoryPlayer2 = entityPlayer.inventory;
+		if(inventoryPlayer2.draggedItemStack != null) {
+			entityPlayer.dropPlayerItem(inventoryPlayer2.draggedItemStack);
 		}
 
 	}
 
-	public void onCraftMatrixChanged(IInventory var1) {
+	public void a(IInventory cz) {
 	}
 }
--- /dev/null
+++ net/minecraft/src/GuiInGameUnknownClass.java
@@ -1,0 +1,80 @@
+package net.minecraft.src;
+
+import java.util.ArrayDeque;
+import java.util.Queue;
+
+public class GuiInGameUnknownClass {
+	public boolean field_11178_8APKy72u19hOIaE2Z4Xvukph7W65JE3ad6i99NnTv27c0psoIZ64k98qwjAc = false;
+	public Queue field_11177_7Zksb7i503i87T27QXh6g1K1pS0mrm03cH6J60Ws3B3hciqhuD9PIOw861xp = new ArrayDeque();
+
+	public static int func_11175_8my6U1vRYPACx6FVFgY5SF8R2AeWMyp28Qb3f5B97E8nPn67nnwq5B031eCj(GuiIngame eu, String string) {
+		return string.split("\n").length;
+	}
+
+	public static int func_11174_14kV142Ta558F2E46DP6LwA4XW2b3fOGmLXaa14a3n7mirTuNtZ4KPCPUkwP(GuiIngame eu, String string, int integer) {
+		int i3 = integer;
+		String[] string4 = string.split("\n");
+		String[] string5 = string4;
+		int i6 = string4.length;
+
+		for(int i7 = 0; i7 < i6; ++i7) {
+			String string8;
+			for(string8 = string5[i7]; string8.startsWith(" "); string8 = string8.substring(1)) {
+			}
+
+			int i9 = eu.mc.fontRenderer.getStringWidth(string8);
+			if(i9 > i3) {
+				i3 = i9;
+			}
+		}
+
+		return i3;
+	}
+
+	public void func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw(String string, int integer) {
+		this.func_11171_604vK63ksNcNlyaekc36K9YTmY8326K6noo7h77989I2TsYQ61KM5M25Nii9(string, integer, -1);
+	}
+
+	public void func_11171_604vK63ksNcNlyaekc36K9YTmY8326K6noo7h77989I2TsYQ61KM5M25Nii9(String string, int integer2, int integer3) {
+		this.field_11177_7Zksb7i503i87T27QXh6g1K1pS0mrm03cH6J60Ws3B3hciqhuD9PIOw861xp.add(new GuiInGameUnknownClass2(string, integer2, integer3));
+	}
+
+	public void func_11172_2QP80BU03R4UHdT475J8ac4cMi96bVM8m9S2H1g9E6TZY4f0OO33N6Bi3Rqm() {
+		if(!this.field_11177_7Zksb7i503i87T27QXh6g1K1pS0mrm03cH6J60Ws3B3hciqhuD9PIOw861xp.isEmpty()) {
+			GuiInGameUnknownClass2 guiInGameUnknownClass21 = (GuiInGameUnknownClass2)this.field_11177_7Zksb7i503i87T27QXh6g1K1pS0mrm03cH6J60Ws3B3hciqhuD9PIOw861xp.peek();
+			if(guiInGameUnknownClass21.field_8628_5D60yv253cRcGA1p2c559jzTJvqGE369RAfPv6g62Q8uXkc617ON6RdFwLZq == -1L) {
+				guiInGameUnknownClass21.field_8628_5D60yv253cRcGA1p2c559jzTJvqGE369RAfPv6g62Q8uXkc617ON6RdFwLZq = System.currentTimeMillis();
+			} else if(System.currentTimeMillis() > guiInGameUnknownClass21.field_8628_5D60yv253cRcGA1p2c559jzTJvqGE369RAfPv6g62Q8uXkc617ON6RdFwLZq + (long)guiInGameUnknownClass21.field_8630_3VXD2Ebm4sq1Ua61nY0XjjdZz4zX5u1B4NPjzd6i9nYHZZV1Z4rOO6r4NkAR) {
+				this.field_11177_7Zksb7i503i87T27QXh6g1K1pS0mrm03cH6J60Ws3B3hciqhuD9PIOw861xp.poll();
+			}
+		}
+
+	}
+
+	public void func_11173_66q8fr6Ip48GXz9oYC8o3XM5Qm0c28Ie4sSA6167vMMhs7iZl0ACYc6sz6VL(GuiIngame eu, int integer2, int integer3) {
+		this.func_11172_2QP80BU03R4UHdT475J8ac4cMi96bVM8m9S2H1g9E6TZY4f0OO33N6Bi3Rqm();
+		if(!this.field_11177_7Zksb7i503i87T27QXh6g1K1pS0mrm03cH6J60Ws3B3hciqhuD9PIOw861xp.isEmpty()) {
+			GuiInGameUnknownClass2 guiInGameUnknownClass24 = (GuiInGameUnknownClass2)this.field_11177_7Zksb7i503i87T27QXh6g1K1pS0mrm03cH6J60Ws3B3hciqhuD9PIOw861xp.peek();
+			byte b5 = 20;
+			byte b6 = 30;
+			byte b7 = 20;
+			int i15 = b7 + func_11175_8my6U1vRYPACx6FVFgY5SF8R2AeWMyp28Qb3f5B97E8nPn67nnwq5B031eCj(eu, guiInGameUnknownClass24.field_8629_38yXZ5dFY9GgxhmHS221M01TS31EN5EQ169OUGe5B07fwQaCd3Y2DMP0SnB5) * 10;
+			int i8 = b5 + func_11174_14kV142Ta558F2E46DP6LwA4XW2b3fOGmLXaa14a3n7mirTuNtZ4KPCPUkwP(eu, guiInGameUnknownClass24.field_8629_38yXZ5dFY9GgxhmHS221M01TS31EN5EQ169OUGe5B07fwQaCd3Y2DMP0SnB5, b5 - integer2 / 2) + 20;
+			Gui.drawGradientRect(b5, b6, i8, b6 + i15, -1610612736, 1879048192);
+			String[] string9 = guiInGameUnknownClass24.field_8629_38yXZ5dFY9GgxhmHS221M01TS31EN5EQ169OUGe5B07fwQaCd3Y2DMP0SnB5.split("\n");
+			int i10 = 0;
+			String[] string11 = string9;
+			int i12 = string9.length;
+
+			for(int i13 = 0; i13 < i12; ++i13) {
+				String string14;
+				for(string14 = string11[i13]; string14.startsWith(" "); string14 = string14.substring(1)) {
+				}
+
+				Gui.drawString(eu.mc.fontRenderer, string14, b5 + 10, b6 + 10 + 10 * i10, 0xFFFFFF);
+				++i10;
+			}
+		}
+
+	}
+}
--- net/minecraft/src/NetworkMasterThread.java
+++ net/minecraft/src/NetworkMasterThread.java
@@ -3,8 +3,8 @@
 class NetworkMasterThread extends Thread {
 	final NetworkManager netManager;
 
-	NetworkMasterThread(NetworkManager var1) {
-		this.netManager = var1;
+	NetworkMasterThread(NetworkManager netManager) {
+		this.netManager = netManager;
 	}
 
 	public void run() {
@@ -13,18 +13,18 @@
 			if(NetworkManager.getReadThread(this.netManager).isAlive()) {
 				try {
 					NetworkManager.getReadThread(this.netManager).stop();
-				} catch (Throwable var3) {
+				} catch (Throwable throwable3) {
 				}
 			}
 
 			if(NetworkManager.getWriteThread(this.netManager).isAlive()) {
 				try {
 					NetworkManager.getWriteThread(this.netManager).stop();
-				} catch (Throwable var2) {
+				} catch (Throwable throwable2) {
 				}
 			}
-		} catch (InterruptedException var4) {
-			var4.printStackTrace();
+		} catch (InterruptedException interruptedException4) {
+			interruptedException4.printStackTrace();
 		}
 
 	}
--- net/minecraft/src/GuiScreen.java
+++ net/minecraft/src/GuiScreen.java
@@ -5,13 +5,15 @@
 import java.awt.datatransfer.Transferable;
 import java.util.ArrayList;
 import java.util.List;
+
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.GL11;
 
 public class GuiScreen extends Gui {
-	protected Minecraft mc;
+	public Minecraft mc;
 	public int width;
 	public int height;
 	protected List controlList = new ArrayList();
@@ -19,16 +21,16 @@
 	protected FontRenderer fontRenderer;
 	private GuiButton selectedButton = null;
 
-	public void drawScreen(int var1, int var2, float var3) {
-		for(int var4 = 0; var4 < this.controlList.size(); ++var4) {
-			GuiButton var5 = (GuiButton)this.controlList.get(var4);
-			var5.drawButton(this.mc, var1, var2);
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		for(int i4 = 0; i4 < this.controlList.size(); ++i4) {
+			GuiButton guiButton5 = (GuiButton)this.controlList.get(i4);
+			guiButton5.drawButton(this.mc, mouseX, mouseY);
 		}
 
 	}
 
-	protected void keyTyped(char var1, int var2) {
-		if(var2 == 1) {
+	protected void keyTyped(char character, int key) {
+		if(key == 1) {
 			this.mc.displayGuiScreen((GuiScreen)null);
 			this.mc.setIngameFocus();
 		}
@@ -37,47 +39,47 @@
 
 	public static String getClipboardString() {
 		try {
-			Transferable var0 = Toolkit.getDefaultToolkit().getSystemClipboard().getContents((Object)null);
-			if(var0 != null && var0.isDataFlavorSupported(DataFlavor.stringFlavor)) {
-				String var1 = (String)var0.getTransferData(DataFlavor.stringFlavor);
-				return var1;
+			Transferable transferable0 = Toolkit.getDefaultToolkit().getSystemClipboard().getContents((Object)null);
+			if(transferable0 != null && transferable0.isDataFlavorSupported(DataFlavor.stringFlavor)) {
+				String string1 = (String)transferable0.getTransferData(DataFlavor.stringFlavor);
+				return string1;
 			}
-		} catch (Exception var2) {
+		} catch (Exception exception2) {
 		}
 
 		return null;
 	}
 
-	protected void mouseClicked(int var1, int var2, int var3) {
-		if(var3 == 0) {
-			for(int var4 = 0; var4 < this.controlList.size(); ++var4) {
-				GuiButton var5 = (GuiButton)this.controlList.get(var4);
-				if(var5.mousePressed(this.mc, var1, var2)) {
-					this.selectedButton = var5;
+	protected void mouseClicked(int integer1, int integer2, int integer3) {
+		if(integer3 == 0) {
+			for(int i4 = 0; i4 < this.controlList.size(); ++i4) {
+				GuiButton guiButton5 = (GuiButton)this.controlList.get(i4);
+				if(guiButton5.mousePressed(this.mc, integer1, integer2)) {
+					this.selectedButton = guiButton5;
 					this.mc.sndManager.playSoundFX("random.click", 1.0F, 1.0F);
-					this.actionPerformed(var5);
+					this.actionPerformed(guiButton5);
 				}
 			}
 		}
 
 	}
 
-	protected void mouseMovedOrUp(int var1, int var2, int var3) {
-		if(this.selectedButton != null && var3 == 0) {
-			this.selectedButton.mouseReleased(var1, var2);
+	protected void mouseMovedOrUp(int integer1, int integer2, int integer3) {
+		if(this.selectedButton != null && integer3 == 0) {
+			this.selectedButton.mouseReleased(integer1, integer2);
 			this.selectedButton = null;
 		}
 
 	}
 
-	protected void actionPerformed(GuiButton var1) {
+	protected void actionPerformed(GuiButton button) {
 	}
 
-	public void setWorldAndResolution(Minecraft var1, int var2, int var3) {
-		this.mc = var1;
-		this.fontRenderer = var1.fontRenderer;
-		this.width = var2;
-		this.height = var3;
+	public void setWorldAndResolution(Minecraft minecraft, int integer2, int integer3) {
+		this.mc = minecraft;
+		this.fontRenderer = minecraft.fontRenderer;
+		this.width = integer2;
+		this.height = integer3;
 		this.initGui();
 	}
 
@@ -85,27 +87,27 @@
 	}
 
 	public void handleInput() {
-		while(Mouse.next()) {
+		while(InputHandler.NextEvent()) {
 			this.handleMouseInput();
 		}
 
-		while(Keyboard.next()) {
+		while(InputHandler.NextKBEvent()) {
 			this.handleKeyboardInput();
 		}
 
 	}
 
 	public void handleMouseInput() {
-		int var1;
-		int var2;
+		int i1;
+		int i2;
 		if(Mouse.getEventButtonState()) {
-			var1 = Mouse.getEventX() * this.width / this.mc.displayWidth;
-			var2 = this.height - Mouse.getEventY() * this.height / this.mc.displayHeight - 1;
-			this.mouseClicked(var1, var2, Mouse.getEventButton());
+			i1 = Mouse.getEventX() * this.width / this.mc.displayWidth;
+			i2 = this.height - Mouse.getEventY() * this.height / this.mc.displayHeight - 1;
+			this.mouseClicked(i1, i2, Mouse.getEventButton());
 		} else {
-			var1 = Mouse.getEventX() * this.width / this.mc.displayWidth;
-			var2 = this.height - Mouse.getEventY() * this.height / this.mc.displayHeight - 1;
-			this.mouseMovedOrUp(var1, var2, Mouse.getEventButton());
+			i1 = Mouse.getEventX() * this.width / this.mc.displayWidth;
+			i2 = this.height - Mouse.getEventY() * this.height / this.mc.displayHeight - 1;
+			this.mouseMovedOrUp(i1, i2, Mouse.getEventButton());
 		}
 
 	}
@@ -125,42 +127,49 @@
 	public void updateScreen() {
 	}
 
+	public void onGuiOpen() {
+	}
+
 	public void onGuiClosed() {
 	}
 
 	public void drawDefaultBackground() {
-		this.drawWorldBackground(0);
+		float f1 = (float)(System.currentTimeMillis() - this.mc.field_7273_9A23in1uqW3pg13kj4pOda0YD2W2B8toO2Xk31j7y1F2q5nDP0ompj85iXQC) / 10000.0F;
+		this.drawWorldBackground(f1);
 	}
 
-	public void drawWorldBackground(int var1) {
+	public void drawWorldBackground(float float1) {
 		if(this.mc.theWorld != null) {
-			this.drawGradientRect(0, 0, this.width, this.height, -1072689136, -804253680);
+			Gui.drawGradientRect(0, 0, this.width, this.height, -1072689136, -804253680);
 		} else {
-			this.drawBackground(var1);
+			this.drawBackground(float1);
 		}
 
 	}
 
-	public void drawBackground(int var1) {
+	public void drawBackground(float float1) {
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_FOG);
-		Tessellator var2 = Tessellator.instance;
+		Tessellator tessellator2 = Tessellator.instance;
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/dirt.png"));
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		float var3 = 32.0F;
-		var2.startDrawingQuads();
-		var2.setColorOpaque_I(4210752);
-		var2.addVertexWithUV(0.0D, (double)this.height, 0.0D, 0.0D, (double)((float)this.height / var3 + (float)var1));
-		var2.addVertexWithUV((double)this.width, (double)this.height, 0.0D, (double)((float)this.width / var3), (double)((float)this.height / var3 + (float)var1));
-		var2.addVertexWithUV((double)this.width, 0.0D, 0.0D, (double)((float)this.width / var3), (double)(0 + var1));
-		var2.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, (double)(0 + var1));
-		var2.draw();
+		float f3 = 32.0F;
+		tessellator2.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+		tessellator2.setColorOpaque_I(3815994);
+		tessellator2.addVertexWithUV(0.0D, (double)this.height, 0.0D, 0.0D, (double)((float)this.height / f3 + float1));
+		tessellator2.addVertexWithUV((double)this.width, (double)this.height, 0.0D, (double)((float)this.width / f3), (double)((float)this.height / f3 + float1));
+		tessellator2.addVertexWithUV((double)this.width, 0.0D, 0.0D, (double)((float)this.width / f3), (double)(0.0F + float1));
+		tessellator2.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, (double)(0.0F + float1));
+		tessellator2.draw();
 	}
 
 	public boolean doesGuiPauseGame() {
 		return true;
 	}
 
-	public void deleteWorld(boolean var1, int var2) {
+	public void deleteWorld(boolean boolean1, int integer) {
+	}
+
+	public void sliderReleasedOn1() {
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandMcMinimap.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandMcMinimap extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8579_4U10tcewRSy8yXOV77q13xjeMTd61uK6Me54PpxK9WL9XDV7E61214UPxA9H;
+    
+    CommandMcMinimap(final CommandManager abb) {
+        this.field_8579_4U10tcewRSy8yXOV77q13xjeMTd61uK6Me54PpxK9WL9XDV7E61214UPxA9H = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.InputOpenMinimap();
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- net/minecraft/src/RenderHelper.java
+++ net/minecraft/src/RenderHelper.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import java.nio.FloatBuffer;
+
 import org.lwjgl.opengl.GL11;
 
 public class RenderHelper {
@@ -19,30 +20,30 @@
 		GL11.glEnable(GL11.GL_LIGHT1);
 		GL11.glEnable(GL11.GL_COLOR_MATERIAL);
 		GL11.glColorMaterial(GL11.GL_FRONT_AND_BACK, GL11.GL_AMBIENT_AND_DIFFUSE);
-		float var0 = 0.4F;
-		float var1 = 0.6F;
-		float var2 = 0.0F;
-		Vec3D var3 = Vec3D.createVector((double)0.2F, 1.0D, (double)-0.7F).normalize();
-		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_POSITION, setColorBuffer(var3.xCoord, var3.yCoord, var3.zCoord, 0.0D));
-		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_DIFFUSE, setColorBuffer(var1, var1, var1, 1.0F));
+		float f0 = 0.4F;
+		float f1 = 0.6F;
+		float f2 = 0.0F;
+		Vec3D vec3D3 = Vec3D.createVector((double)0.2F, 1.0D, -0.699999988079071D).normalize();
+		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_POSITION, setColorBuffer(vec3D3.xCoord, vec3D3.yCoord, vec3D3.zCoord, 0.0D));
+		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_DIFFUSE, setColorBuffer(f1, f1, f1, 1.0F));
 		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_AMBIENT, setColorBuffer(0.0F, 0.0F, 0.0F, 1.0F));
-		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_SPECULAR, setColorBuffer(var2, var2, var2, 1.0F));
-		var3 = Vec3D.createVector((double)-0.2F, 1.0D, (double)0.7F).normalize();
-		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_POSITION, setColorBuffer(var3.xCoord, var3.yCoord, var3.zCoord, 0.0D));
-		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_DIFFUSE, setColorBuffer(var1, var1, var1, 1.0F));
+		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_SPECULAR, setColorBuffer(f2, f2, f2, 1.0F));
+		vec3D3 = Vec3D.createVector(-0.20000000298023224D, 1.0D, (double)0.7F).normalize();
+		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_POSITION, setColorBuffer(vec3D3.xCoord, vec3D3.yCoord, vec3D3.zCoord, 0.0D));
+		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_DIFFUSE, setColorBuffer(f1, f1, f1, 1.0F));
 		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_AMBIENT, setColorBuffer(0.0F, 0.0F, 0.0F, 1.0F));
-		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_SPECULAR, setColorBuffer(var2, var2, var2, 1.0F));
+		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_SPECULAR, setColorBuffer(f2, f2, f2, 1.0F));
 		GL11.glShadeModel(GL11.GL_FLAT);
-		GL11.glLightModel(GL11.GL_LIGHT_MODEL_AMBIENT, setColorBuffer(var0, var0, var0, 1.0F));
-	}
-
-	private static FloatBuffer setColorBuffer(double var0, double var2, double var4, double var6) {
-		return setColorBuffer((float)var0, (float)var2, (float)var4, (float)var6);
-	}
-
-	private static FloatBuffer setColorBuffer(float var0, float var1, float var2, float var3) {
+		GL11.glLightModel(GL11.GL_LIGHT_MODEL_AMBIENT, setColorBuffer(f0, f0, f0, 1.0F));
+	}
+
+	private static FloatBuffer setColorBuffer(double double1, double double2, double double3, double double4) {
+		return setColorBuffer((float)double1, (float)double2, (float)double3, (float)double4);
+	}
+
+	private static FloatBuffer setColorBuffer(float float1, float float2, float float3, float float4) {
 		colorBuffer.clear();
-		colorBuffer.put(var0).put(var1).put(var2).put(var3);
+		colorBuffer.put(float1).put(float2).put(float3).put(float4);
 		colorBuffer.flip();
 		return colorBuffer;
 	}
--- /dev/null
+++ net/minecraft/src/Refl.java
@@ -1,0 +1,68 @@
+package net.minecraft.src;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+public class Refl {
+	public static boolean classExists(String string) {
+		try {
+			Class.forName(string);
+			return true;
+		} catch (ClassNotFoundException classNotFoundException2) {
+			return false;
+		}
+	}
+
+	public static Object invoke(Object object1, String string, Class[] arr, Object object4) {
+		try {
+			Method method4 = (object1 instanceof Class ? (Class)object1 : object1.getClass()).getMethod(string, arr);
+			return method4.invoke(object1 instanceof Class ? null : object1, new Object[]{object4});
+		} catch (IllegalAccessException illegalAccessException5) {
+			illegalAccessException5.printStackTrace();
+		} catch (IllegalArgumentException illegalArgumentException6) {
+			illegalArgumentException6.printStackTrace();
+		} catch (InvocationTargetException invocationTargetException7) {
+			invocationTargetException7.printStackTrace();
+		} catch (NoSuchMethodException noSuchMethodException8) {
+			noSuchMethodException8.printStackTrace();
+		} catch (SecurityException securityException9) {
+			securityException9.printStackTrace();
+		}
+
+		return null;
+	}
+
+	public static Object getField(Object object, String string, Class class3) {
+		try {
+			return object.getClass().getField(string).get(object);
+		} catch (IllegalAccessException | NoSuchFieldException | SecurityException | IllegalArgumentException illegalArgumentException4) {
+			illegalArgumentException4.printStackTrace();
+			return null;
+		}
+	}
+
+	public static Object instantiate(String string, Class[] arr, Object... arr1) {
+		try {
+			Class class3 = Class.forName(string);
+			Constructor constructor4 = class3.getConstructor(arr);
+			return constructor4.newInstance(arr1);
+		} catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | ClassNotFoundException classNotFoundException5) {
+			classNotFoundException5.printStackTrace();
+			return null;
+		}
+	}
+
+	public static String func_9784_71s752so86DwU77rXlw1cHR51hpLewQ9ESrHcQon430rMgQXErcroRxA09ph(Object object) {
+		return object.getClass().getName();
+	}
+
+	public static Class func_9786_8Ehd0r9aAHEF32cGHok0smD4vA0B3N9Qx96zs8VmDa6dhPs1YF2JWfDn7x46(String string) {
+		try {
+			return Class.forName(string);
+		} catch (ClassNotFoundException classNotFoundException2) {
+			classNotFoundException2.printStackTrace();
+			return null;
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockWireframeBlock2.java
@@ -1,0 +1,71 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+
+import org.lwjgl.input.Keyboard;
+
+public class BlockWireframeBlock2 extends BlockGlass implements BlockUnknownInterface {
+	public BlockWireframeBlock2(int id, int blockIndex, Material material) {
+		super(id, blockIndex, material, false);
+	}
+
+	public void func_8297_77HIWfELdva1mN9P09GxJcvD9xKJmd9Fnpldg7zWs7fFI31aYjkvgAve3sf2(ZMWorld yv, XYZv ya) {
+		yv.setBlock((int)ya.x, (int)ya.y, (int)ya.z, 0);
+
+		int i3;
+		for(i3 = -1; i3 <= 1; i3 += 2) {
+			if(yv.getBlockId((int)ya.x + i3, (int)ya.y, (int)ya.z) == this.blockID) {
+				this.func_8297_77HIWfELdva1mN9P09GxJcvD9xKJmd9Fnpldg7zWs7fFI31aYjkvgAve3sf2(yv, ya.add((long)i3, 0L, 0L));
+			}
+		}
+
+		for(i3 = -1; i3 <= 1; i3 += 2) {
+			if(yv.getBlockId((int)ya.x, (int)ya.y + i3, (int)ya.z) == this.blockID) {
+				this.func_8297_77HIWfELdva1mN9P09GxJcvD9xKJmd9Fnpldg7zWs7fFI31aYjkvgAve3sf2(yv, ya.add(0L, (long)i3, 0L));
+			}
+		}
+
+		for(i3 = -1; i3 <= 1; i3 += 2) {
+			if(yv.getBlockId((int)ya.x, (int)ya.y, (int)ya.z + i3) == this.blockID) {
+				this.func_8297_77HIWfELdva1mN9P09GxJcvD9xKJmd9Fnpldg7zWs7fFI31aYjkvgAve3sf2(yv, ya.add(0L, 0L, (long)i3));
+			}
+		}
+
+	}
+
+	public void func_8286_2f84KM1xKjK9eBj4915qo36L405Hm9W3JZ41244r918IGv3BpYiut0G1VBGw(EntityPlayerZombieModeClient wp, XYZv ya) {
+		int i3 = wp.worldIn.func_7547_7wmn1Zcw5XkXB713A8pO6G393j0dbhaxkUpdvto5V7Th2f9uwaIY1qagv9mW(ya);
+		if(wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.func_8686_3fQ4Zvl6ZGZtMHz8BDhx9ci7pQP8EhDqu7Ri4ywsZ3854I2e4ev3W4B3R3iy() >= (long)i3) {
+			wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.func_8688_6DmcXOP1jZRKDasP2440t8904Ry66MRC3K00nwd8iGDlPgYii5d1f50QVICF((long)(-i3));
+			wp.field_9097_867sEKNEsa45Xq4Etlk5s449h7UUOWVcX6nYd2PGjFy373Y2PXcol521PBg2 = null;
+			this.func_8297_77HIWfELdva1mN9P09GxJcvD9xKJmd9Fnpldg7zWs7fFI31aYjkvgAve3sf2(wp.worldIn, ya);
+		} else {
+			InputHandler.mc.ingameGUI.addChatMessage("Not enough points!");
+		}
+
+	}
+
+	public String func_8287_3t2cX22yD5J55Zh6G33szTT1PY525wnemKTHp3jQ2r2jhLod41nugOV5rhqI(EntityPlayerZombieModeClient wp, XYZv ya) {
+		String string3 = Keyboard.getKeyName(InputHandler.mc.options.keyBindInventory.keyCode);
+		return "[" + string3 + "] Open [" + wp.worldIn.func_7547_7wmn1Zcw5XkXB713A8pO6G393j0dbhaxkUpdvto5V7Th2f9uwaIY1qagv9mW(ya) + " points]";
+	}
+
+	public int func_8288_98t8S89tFW42rGL9ALNhVV7sJ5qB3j8Z10bg69FoU68e30R380Rp4L4Dn5kC() {
+		return 11;
+	}
+
+	public void getCollidingBoundingBoxes(World world, int x, int y, int z, AxisAlignedBB aabb, ArrayList arrayList, Entity xy) {
+		if(!(world instanceof ZMWorld) || !(xy instanceof EntityZombie) && !(xy instanceof EntityEssenceProjectile)) {
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList, xy);
+		}
+
+	}
+
+	public void velocityToAddToEntity(World world, int x, int y, int z, Entity entity, Vec3D vector) {
+		if(world instanceof ZMWorld && entity instanceof EntityZombie) {
+			vector.xCoord += entity.motionX * 2.0D;
+			vector.zCoord += entity.motionZ * 2.0D;
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/CubeListElement.java
@@ -1,0 +1,29 @@
+package net.minecraft.src;
+
+public class CubeListElement {
+	public int texOffX;
+	public int texOffY;
+	public float offsetX;
+	public float offsetY;
+	public float offsetZ;
+	public int widthX;
+	public int height;
+	public int widthZ;
+	public boolean mirror = false;
+
+	public CubeListElement(int integer1, int integer2, float float3, float float4, float float5, int integer6, int integer7, int integer8) {
+		this.texOffX = integer1;
+		this.texOffY = integer2;
+		this.offsetX = float3;
+		this.offsetY = float4;
+		this.offsetZ = float5;
+		this.widthX = integer6;
+		this.height = integer7;
+		this.widthZ = integer8;
+	}
+
+	public CubeListElement(int integer1, int integer2) {
+		this.texOffX = integer1;
+		this.texOffY = integer2;
+	}
+}
--- net/minecraft/src/EntityZombie.java
+++ net/minecraft/src/EntityZombie.java
@@ -1,8 +1,21 @@
 package net.minecraft.src;
 
 public class EntityZombie extends EntityMob {
-	public EntityZombie(World var1) {
-		super(var1);
+	public boolean field_9125_1El4crnUetNgXSg7SKknZ3Xrp3gsWZDYE4H3O0PK0rXkIR7u7tRB3Mk2D66I;
+	public HandlerSetCheckpointUnknownClass2 field_9124_4tH5o01tS5v858g45IUmtS5yD0VBrCu75xP0sp51kFpd4DMdwEBUTO9F2jYg;
+	public boolean field_9123_9I0lZoUovDGeve5cJx6Oj7LWM19fChsy14XQ1T0l4iJ7xsy2w4VcEy1Ct8xc;
+	public int field_9126_8303N9lSB88n8wLU2F4D0UiDwdf83IeH7345Q51R43R5J8Bd14BvXn73d0RC;
+
+	public EntityZombie(World vg, HandlerSetCheckpointUnknownClass2 acm) {
+		this(vg);
+		this.field_9124_4tH5o01tS5v858g45IUmtS5yD0VBrCu75xP0sp51kFpd4DMdwEBUTO9F2jYg = acm;
+	}
+
+	public EntityZombie(World world) {
+		super(world);
+		this.field_9125_1El4crnUetNgXSg7SKknZ3Xrp3gsWZDYE4H3O0PK0rXkIR7u7tRB3Mk2D66I = false;
+		this.field_9123_9I0lZoUovDGeve5cJx6Oj7LWM19fChsy14XQ1T0l4iJ7xsy2w4VcEy1Ct8xc = false;
+		this.field_9126_8303N9lSB88n8wLU2F4D0UiDwdf83IeH7345Q51R43R5J8Bd14BvXn73d0RC = 0;
 		this.texture = "/mob/zombie.png";
 		this.moveSpeed = 0.5F;
 		this.attackStrength = 5;
@@ -10,12 +23,28 @@
 
 	public void onLivingUpdate() {
 		if(this.worldObj.isDaytime()) {
-			float var1 = this.getBrightness(1.0F);
-			if(var1 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) && this.rand.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F) {
+			float f1 = this.getBrightness(1.0F);
+			if(f1 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) && this.rand.nextFloat() * 30.0F < (f1 - 0.4F) * 2.0F) {
 				this.fire = 300;
 			}
 		}
 
+		if(this.worldObj instanceof ZMWorld) {
+			if(this.posY < (double)(this.worldObj instanceof WorldZMSpawnWorld1 ? 64 : (this.worldObj instanceof WorldZMSpawnWorld2 ? 71 : 64))) {
+				((ZMWorld)this.worldObj).func_7554_0I283audif5iacL5K5Ui88QGwr47fu94TPZL1hdjcTpUe0ULL4h3e2jdjO8b(this);
+			}
+
+			if(this.field_9124_4tH5o01tS5v858g45IUmtS5yD0VBrCu75xP0sp51kFpd4DMdwEBUTO9F2jYg != null && !this.field_9123_9I0lZoUovDGeve5cJx6Oj7LWM19fChsy14XQ1T0l4iJ7xsy2w4VcEy1Ct8xc) {
+				this.field_9123_9I0lZoUovDGeve5cJx6Oj7LWM19fChsy14XQ1T0l4iJ7xsy2w4VcEy1Ct8xc = this.field_9124_4tH5o01tS5v858g45IUmtS5yD0VBrCu75xP0sp51kFpd4DMdwEBUTO9F2jYg.func_12185_77E7ly6r5p8AgeD7j1MC3wrd4wUdbSPPEtyupBLDu5J7c0z302AEf633qiD9(this.posX, this.posZ) < 3.0D;
+				if(!this.field_9123_9I0lZoUovDGeve5cJx6Oj7LWM19fChsy14XQ1T0l4iJ7xsy2w4VcEy1Ct8xc) {
+					++this.field_9126_8303N9lSB88n8wLU2F4D0UiDwdf83IeH7345Q51R43R5J8Bd14BvXn73d0RC;
+					if(this.field_9126_8303N9lSB88n8wLU2F4D0UiDwdf83IeH7345Q51R43R5J8Bd14BvXn73d0RC > 120 && ((ZMWorld)this.worldObj).func_7554_0I283audif5iacL5K5Ui88QGwr47fu94TPZL1hdjcTpUe0ULL4h3e2jdjO8b(this)) {
+						this.field_9126_8303N9lSB88n8wLU2F4D0UiDwdf83IeH7345Q51R43R5J8Bd14BvXn73d0RC = 0;
+					}
+				}
+			}
+		}
+
 		super.onLivingUpdate();
 	}
 
@@ -32,6 +61,88 @@
 	}
 
 	protected int getDropItemId() {
-		return Item.feather.shiftedIndex;
+		return this.worldObj instanceof ZMWorld ? -1 : Item.feather.shiftedIndex;
+	}
+
+	public int getEssenceDroppedOnKill() {
+		return 4 + this.rand.nextInt(6);
+	}
+
+	public float maxPathFindingDistance() {
+		return this.worldObj instanceof ZMWorld ? 64.0F : 16.0F;
+	}
+
+	protected Entity findPlayerToAttack() {
+		EntityPlayer entityPlayer1 = this.worldObj.getClosestPlayerToEntity(this, 18.0D);
+		return entityPlayer1 != null && this.canEntityBeSeen(entityPlayer1) ? entityPlayer1 : null;
+	}
+
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		int i3 = this.health;
+		super.attackEntityFrom(entity, damage);
+		if(i3 > 0 && this.health <= 0 && this.worldObj instanceof ZMWorld) {
+			this.field_9125_1El4crnUetNgXSg7SKknZ3Xrp3gsWZDYE4H3O0PK0rXkIR7u7tRB3Mk2D66I = true;
+			if(entity instanceof EntityPlayerZombieModeClient) {
+				((InventoryVendingMachine)((EntityPlayerZombieModeClient)entity).inventory).func_8688_6DmcXOP1jZRKDasP2440t8904Ry66MRC3K00nwd8iGDlPgYii5d1f50QVICF(120L);
+			}
+
+			((ZMWorld)this.worldObj).func_7552_036DW72WL0cd7Vw9IwUIgji0lq5c1Ohi97waHrW37UV3X1L0uWXa6RqT45zH(this);
+		}
+
+		return super.attackEntityFrom(entity, damage);
+	}
+
+	protected void attackEntity(Entity entity, float damage) {
+		if((double)damage < 2.5D && entity.boundingBox.maxY > this.boundingBox.minY && entity.boundingBox.minY < this.boundingBox.maxY) {
+			this.attackTime = 20;
+			this.func_9122_32wo4zf7J8f8iCDk8p7I4yFwMi1AYyUTD75Qm44x1RATC7tC65oa39Qk1z36(entity, damage);
+			entity.attackEntityFrom(this, this.attackStrength);
+		}
+
+	}
+
+	void func_9122_32wo4zf7J8f8iCDk8p7I4yFwMi1AYyUTD75Qm44x1RATC7tC65oa39Qk1z36(Entity xy, float float2) {
+		if(this.onGround) {
+			double d3;
+			double d5;
+			float f7;
+			if(float2 > 2.0F && float2 < 12.0F && this.rand.nextInt(50) == 0 && this.onGround) {
+				d3 = xy.posX - this.posX;
+				d5 = xy.posZ - this.posZ;
+				f7 = MathHelper.sqrt_double(d3 * d3 + d5 * d5);
+				this.motionX = d3 / (double)f7 * 0.5D * (double)0.8F + this.motionX * (double)0.2F;
+				this.motionZ = d5 / (double)f7 * 0.5D * (double)0.8F + this.motionZ * (double)0.2F;
+			}
+
+			if(float2 > 2.0F && float2 < 6.0F && this.rand.nextInt(35) == 0 && this.onGround) {
+				d3 = xy.posX - this.posX;
+				d5 = xy.posZ + this.posZ;
+				f7 = MathHelper.sqrt_double(d3 * d3 + d5 * d5);
+				this.motionX = d3 / (double)f7 * 0.5D * (double)0.8F + this.motionX * (double)0.2F;
+				this.motionZ = d5 / (double)f7 * 0.5D * (double)0.8F + this.motionZ * (double)0.2F;
+				this.motionY = (double)0.2F;
+			}
+
+			if(float2 > 2.0F && float2 < 6.0F && this.rand.nextInt(35) == 0 && this.onGround) {
+				d3 = xy.posX + this.posX;
+				d5 = xy.posZ - this.posZ;
+				f7 = MathHelper.sqrt_double(d3 * d3 + d5 * d5);
+				this.motionX = d3 / (double)f7 * 0.5D * (double)0.8F + this.motionX * (double)0.2F;
+				this.motionZ = d5 / (double)f7 * 0.5D * (double)0.8F + this.motionZ * (double)0.2F;
+				this.motionY = (double)0.2F;
+			}
+
+			if(float2 == 6.0F && this.rand.nextInt(70) == 0 && this.onGround) {
+				d3 = xy.posX + this.posX;
+				d5 = xy.posZ + this.posZ;
+				f7 = MathHelper.sqrt_double(d3 * d3 + d5 * d5);
+				this.motionX = d3 / (double)f7 * 0.5D * (double)0.8F + this.motionX * (double)0.2F;
+				this.motionZ = d5 / (double)f7 * 0.5D * (double)0.8F + this.motionZ * (double)0.2F;
+				this.motionY = (double)0.4F;
+			}
+		} else {
+			super.attackEntity(xy, float2);
+		}
+
 	}
 }
--- net/minecraft/src/BlockLeaves.java
+++ net/minecraft/src/BlockLeaves.java
@@ -6,111 +6,118 @@
 	private int leafTexIndex;
 	private int decayCounter = 0;
 
-	protected BlockLeaves(int var1, int var2) {
-		super(var1, var2, Material.leaves, false);
-		this.leafTexIndex = var2;
+	public BlockLeaves(int id, int blockIndex) {
+		super(id, blockIndex, Material.leaves, false);
+		this.leafTexIndex = blockIndex;
 		this.setTickOnLoad(true);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
 		this.decayCounter = 0;
-		this.updateCurrentLeaves(var1, var2, var3, var4);
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
+		this.updateCurrentLeaves(world, x, y, z);
+		super.onNeighborBlockChange(world, x, y, z, flag);
 	}
 
-	public void updateConnectedLeaves(World var1, int var2, int var3, int var4, int var5) {
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 != 0 && var6 == var5 - 1) {
-				this.updateCurrentLeaves(var1, var2, var3, var4);
+	public void updateConnectedLeaves(World world, int x, int y, int z, int metadata) {
+		if(world.getBlockId(x, y, z) == this.blockID) {
+			int i6 = world.getBlockMetadata(x, y, z);
+			if(i6 != 0 && i6 == metadata - 1) {
+				this.updateCurrentLeaves(world, x, y, z);
 			}
 		}
+
 	}
 
-	public void updateCurrentLeaves(World var1, int var2, int var3, int var4) {
+	public void updateCurrentLeaves(World world, int x, int y, int z) {
 		if(this.decayCounter++ < 100) {
-			int var5 = var1.getBlockMaterial(var2, var3 - 1, var4).isSolid() ? 16 : 0;
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 == 0) {
-				var6 = 1;
-				var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-			}
-
-			var5 = this.getConnectionStrength(var1, var2, var3 - 1, var4, var5);
-			var5 = this.getConnectionStrength(var1, var2, var3, var4 - 1, var5);
-			var5 = this.getConnectionStrength(var1, var2, var3, var4 + 1, var5);
-			var5 = this.getConnectionStrength(var1, var2 - 1, var3, var4, var5);
-			var5 = this.getConnectionStrength(var1, var2 + 1, var3, var4, var5);
-			int var7 = var5 - 1;
-			if(var7 < 10) {
-				var7 = 1;
-			}
-
-			if(var7 != var6) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var7);
-				this.updateConnectedLeaves(var1, var2, var3 - 1, var4, var6);
-				this.updateConnectedLeaves(var1, var2, var3 + 1, var4, var6);
-				this.updateConnectedLeaves(var1, var2, var3, var4 - 1, var6);
-				this.updateConnectedLeaves(var1, var2, var3, var4 + 1, var6);
-				this.updateConnectedLeaves(var1, var2 - 1, var3, var4, var6);
-				this.updateConnectedLeaves(var1, var2 + 1, var3, var4, var6);
-			}
-
+			int i5 = world.getBlockMaterial(x, y - 1, z).isSolid() ? 16 : 0;
+			int i6 = world.getBlockMetadata(x, y, z);
+			if(i6 == 0) {
+				i6 = 1;
+				world.setBlockMetadataWithNotify(x, y, z, 1);
+			}
+
+			i5 = this.getConnectionStrength(world, x, y - 1, z, i5);
+			i5 = this.getConnectionStrength(world, x, y, z - 1, i5);
+			i5 = this.getConnectionStrength(world, x, y, z + 1, i5);
+			i5 = this.getConnectionStrength(world, x - 1, y, z, i5);
+			i5 = this.getConnectionStrength(world, x + 1, y, z, i5);
+			int i7 = i5 - 1;
+			if(i7 < 10) {
+				i7 = 1;
+			}
+
+			if(i7 != i6) {
+				world.setBlockMetadataWithNotify(x, y, z, i7);
+				this.updateConnectedLeaves(world, x, y - 1, z, i6);
+				this.updateConnectedLeaves(world, x, y + 1, z, i6);
+				this.updateConnectedLeaves(world, x, y, z - 1, i6);
+				this.updateConnectedLeaves(world, x, y, z + 1, i6);
+				this.updateConnectedLeaves(world, x - 1, y, z, i6);
+				this.updateConnectedLeaves(world, x + 1, y, z, i6);
+			}
 		}
+
 	}
 
-	private int getConnectionStrength(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockId(var2, var3, var4);
-		if(var6 == Block.wood.blockID) {
-			return 16;
-		} else {
-			if(var6 == this.blockID) {
-				int var7 = var1.getBlockMetadata(var2, var3, var4);
-				if(var7 != 0 && var7 > var5) {
-					return var7;
+	private int getConnectionStrength(World world, int x, int y, int z, int metadata) {
+		int i6 = world.getBlockId(x, y, z);
+		if(i6 != Block.wood.blockID && i6 != ExtBlocks.FireSkyLeaves.blockID && i6 != ExtBlocks.AncientWood.blockID && i6 != ExtBlocks.TeaBush.blockID) {
+			if(i6 == this.blockID) {
+				int i7 = world.getBlockMetadata(x, y, z);
+				if(i7 != 0 && i7 > metadata) {
+					return i7;
 				}
 			}
 
-			return var5;
+			return metadata;
+		} else {
+			return 16;
 		}
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if(var6 == 0) {
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if(random.nextBoolean()) {
+			double d7 = (random.nextDouble() - 0.5D) * 0.1D;
+			double d9 = (random.nextDouble() - 0.5D) * 0.1D;
+			world.spawnParticle("leaf", (double)x, (double)y, (double)z, d7, -0.1D, d9);
+		}
+
+		if(i6 == 0) {
 			this.decayCounter = 0;
-			this.updateCurrentLeaves(var1, var2, var3, var4);
-		} else if(var6 == 1) {
-			this.removeLeaves(var1, var2, var3, var4);
-		} else if(var5.nextInt(10) == 0) {
-			this.updateCurrentLeaves(var1, var2, var3, var4);
+			this.updateCurrentLeaves(world, x, y, z);
+		} else if(i6 == 1) {
+			this.removeLeaves(world, x, y, z);
+		} else if(random.nextInt(10) == 0) {
+			this.updateCurrentLeaves(world, x, y, z);
 		}
 
 	}
 
-	private void removeLeaves(World var1, int var2, int var3, int var4) {
-		this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-		var1.setBlockWithNotify(var2, var3, var4, 0);
-	}
-
-	public int quantityDropped(Random var1) {
-		return var1.nextInt(20) == 0 ? 1 : 0;
-	}
-
-	public int idDropped(int var1, Random var2) {
-		return Block.sapling.blockID;
+	private void removeLeaves(World world, int x, int y, int z) {
+		this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+		world.setBlockWithNotify(x, y, z, 0);
+	}
+
+	public int quantityDropped(Random random) {
+		return random.nextInt(20) == 0 ? 1 : 0;
+	}
+
+	public int idDropped(int count, Random random) {
+		return this.blockID == ExtBlocks.TeaBush.blockID ? (random.nextBoolean() ? Block.sapling.blockID : ExtItems.TeaLeaf.shiftedIndex) : (random.nextBoolean() ? Block.sapling.blockID : (random.nextBoolean() ? Item.appleRed.shiftedIndex : (random.nextBoolean() ? ExtItems.Pear.shiftedIndex : ExtItems.RokkubitoruTune.shiftedIndex)));
 	}
 
 	public boolean isOpaqueCube() {
 		return !this.graphicsLevel;
 	}
 
-	public void setGraphicsLevel(boolean var1) {
-		this.graphicsLevel = var1;
-		this.blockIndexInTexture = this.leafTexIndex + (var1 ? 0 : 1);
+	public void setGraphicsLevel(boolean graphicsLevel) {
+		this.graphicsLevel = graphicsLevel;
+		this.blockIndexInTexture = this.leafTexIndex + (graphicsLevel ? 0 : 1);
 	}
 
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-		super.onEntityWalking(var1, var2, var3, var4, var5);
+	public void onEntityWalking(World world, int x, int y, int z, Entity entity) {
+		super.onEntityWalking(world, x, y, z, entity);
 	}
 }
--- net/minecraft/src/TileEntityMobSpawnerRenderer.java
+++ net/minecraft/src/TileEntityMobSpawnerRenderer.java
@@ -2,36 +2,37 @@
 
 import java.util.HashMap;
 import java.util.Map;
+
 import org.lwjgl.opengl.GL11;
 
 public class TileEntityMobSpawnerRenderer extends TileEntitySpecialRenderer {
 	private Map entityHashMap = new HashMap();
 
-	public void renderTileEntityMobSpawner(TileEntityMobSpawner var1, double var2, double var4, double var6, float var8) {
+	public void renderTileEntityMobSpawner(TileEntityMobSpawner abg, double double2, double double3, double double4, float float5) {
 		GL11.glPushMatrix();
-		GL11.glTranslatef((float)var2 + 0.5F, (float)var4, (float)var6 + 0.5F);
-		Entity var9 = (Entity)this.entityHashMap.get(var1.mobID);
-		if(var9 == null) {
-			var9 = EntityList.createEntityByName(var1.mobID, (World)null);
-			this.entityHashMap.put(var1.mobID, var9);
+		GL11.glTranslatef((float)double2 + 0.5F, (float)double3, (float)double4 + 0.5F);
+		Entity entity9 = (Entity)this.entityHashMap.get(abg.mobID);
+		if(entity9 == null) {
+			entity9 = EntityList.createEntityByName(abg.mobID, (World)null);
+			this.entityHashMap.put(abg.mobID, entity9);
 		}
 
-		if(var9 != null) {
-			var9.setWorld(var1.worldObj);
-			float var10 = 7.0F / 16.0F;
+		if(entity9 != null) {
+			entity9.setWorld(abg.worldObj);
+			float f10 = 0.4375F;
 			GL11.glTranslatef(0.0F, 0.4F, 0.0F);
-			GL11.glRotatef((float)(var1.prevYaw + (var1.yaw - var1.prevYaw) * (double)var8) * 10.0F, 0.0F, 1.0F, 0.0F);
+			GL11.glRotatef((float)(abg.prevYaw + (abg.yaw - abg.prevYaw) * (double)float5) * 10.0F, 0.0F, 1.0F, 0.0F);
 			GL11.glRotatef(-30.0F, 1.0F, 0.0F, 0.0F);
 			GL11.glTranslatef(0.0F, -0.4F, 0.0F);
-			GL11.glScalef(var10, var10, var10);
-			var9.setLocationAndAngles(var2, var4, var6, 0.0F, 0.0F);
-			RenderManager.instance.renderEntityWithPosYaw(var9, 0.0D, 0.0D, 0.0D, 0.0F, var8);
+			GL11.glScalef(f10, f10, f10);
+			entity9.setLocationAndAngles(double2, double3, double4, 0.0F, 0.0F);
+			RenderManager.instance.renderEntityWithPosYaw(entity9, 0.0D, 0.0D, 0.0D, 0.0F, float5);
 		}
 
 		GL11.glPopMatrix();
 	}
 
-	public void renderTileEntityAt(TileEntity var1, double var2, double var4, double var6, float var8) {
-		this.renderTileEntityMobSpawner((TileEntityMobSpawner)var1, var2, var4, var6, var8);
+	public void renderTileEntityAt(TileEntity tileEntity, double x, double y, double z, float renderPartialTick) {
+		this.renderTileEntityMobSpawner((TileEntityMobSpawner)tileEntity, x, y, z, renderPartialTick);
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenHouseBig.java
@@ -1,0 +1,522 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenHouseBig implements IHouseBig {
+	private final NoiseGeneratorPerlin field_9896_01Q1s81DUx467KLo2kQqjfIuiCC55M9Jh6q0VrbdGe64M7g8UGdHGUv6e8po;
+	private final NoiseGeneratorPerlin field_9898_214v7j53QG02jhmR6FG45dcc8P97KCHkC3qqCzWL7RuZFSkVJR9WS01m1420;
+	private final NoiseGeneratorPerlin field_9897_8ztr5uZa0264BA160Bdg24e6wPVIaNKr9wuJ56FsQ40wc64L5Q5w3s87OK08;
+
+	public WorldGenHouseBig(Random random) {
+		this.field_9896_01Q1s81DUx467KLo2kQqjfIuiCC55M9Jh6q0VrbdGe64M7g8UGdHGUv6e8po = new NoiseGeneratorPerlin(random);
+		this.field_9898_214v7j53QG02jhmR6FG45dcc8P97KCHkC3qqCzWL7RuZFSkVJR9WS01m1420 = new NoiseGeneratorPerlin(random);
+		this.field_9897_8ztr5uZa0264BA160Bdg24e6wPVIaNKr9wuJ56FsQ40wc64L5Q5w3s87OK08 = new NoiseGeneratorPerlin(random);
+	}
+
+	public float func_9883_913vTZx6no47397W6wG95Q5uB254nJBZ27osnW242XcA9M93Alb1ry5oPyVe() {
+		return 1.0F;
+	}
+
+	private EnumHouseBig func_9889_6V9M1y0rD66IzESBhbtaW530L5zr7MXWWxju10Ibed9N0Yq7r7jZ01hE282X(int integer1, int integer2, int integer3, int integer4) {
+		int i5 = integer1 * 5436345 + integer2 * -12416265;
+		int i6 = integer3 * 4256285 + integer4 * -82344232;
+		double d7 = this.field_9898_214v7j53QG02jhmR6FG45dcc8P97KCHkC3qqCzWL7RuZFSkVJR9WS01m1420.generateNoise((double)i5 / 634.0D, (double)i6 / 634.0D);
+		if(d7 < 0.0D) {
+			d7 = -d7;
+		}
+
+		if(d7 > 1.0D) {
+			d7 %= 1.0D;
+		}
+
+		return d7 < 0.3D ? EnumHouseBig.Door : (d7 < 0.4D ? EnumHouseBig.BlackGlass : (d7 < 0.5D ? EnumHouseBig.WhiteGlass : (d7 < 0.6D ? EnumHouseBig.BlueGlass : (d7 < 0.7D ? EnumHouseBig.LimeGlass : (d7 < 0.8D ? EnumHouseBig.PlateDecor : (d7 < 0.9D ? EnumHouseBig.Doorless : EnumHouseBig.Door))))));
+	}
+
+	private void func_9894_1X8Miaez5C7C4Stve4NvGnN1qCVG3CsBzj36x6U4HV52nY6HeXJq0BcxGyYm() {
+	}
+
+	private EnumHouseBig[] func_9886_8ZH5qLYxNz467u1uJMUDJalqGg1WFDGTR9GCMu99tnz5ZT7AKQ9Roo86275S(int integer1, int integer2, int integer3) {
+		return new EnumHouseBig[]{this.func_9889_6V9M1y0rD66IzESBhbtaW530L5zr7MXWWxju10Ibed9N0Yq7r7jZ01hE282X(integer1, integer2, integer3, 0), this.func_9889_6V9M1y0rD66IzESBhbtaW530L5zr7MXWWxju10Ibed9N0Yq7r7jZ01hE282X(integer1, integer2, integer3, 1), this.func_9889_6V9M1y0rD66IzESBhbtaW530L5zr7MXWWxju10Ibed9N0Yq7r7jZ01hE282X(integer1, integer2, integer3, 2), this.func_9889_6V9M1y0rD66IzESBhbtaW530L5zr7MXWWxju10Ibed9N0Yq7r7jZ01hE282X(integer1, integer2, integer3, 3)};
+	}
+
+	private boolean func_9887_222reZAc4tQC2IipCEZax67PG0WkcvUJGGzDPQ79N2ThadrSzs8v18glXqA7(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockId(integer2, integer3, integer4);
+		return i5 != 0 && Block.blocksList[i5].isOpaqueCube() && Block.blocksList[i5].isCollidable() && Block.blocksList[i5].renderAsNormalBlock();
+	}
+
+	private boolean func_9895_64EF8cC2FppVMJU2QNG1K3esZ0sOSbsYZrKxu7wCZWa489iFH4s610HxG600(World vg, int integer2, int integer3, int integer4) {
+		int i5 = 256;
+
+		for(int i6 = 0; i6 < 8; ++i6) {
+			for(int i7 = 0; i7 < 15; ++i7) {
+				for(int i8 = 0; i8 < 15; ++i8) {
+					if(this.func_9887_222reZAc4tQC2IipCEZax67PG0WkcvUJGGzDPQ79N2ThadrSzs8v18glXqA7(vg, integer2 * 16 + i7, integer3 + i6, integer4 * 16 + i8)) {
+						--i5;
+						if(i5 == 0) {
+							return false;
+						}
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+
+	private void func_9891_7jRn6QF8j7SHbcNzXW806SpN34AM1N24Y7CPdJI866WCP1JJ13ryLsQ154pY(World vg, int integer2, int integer3, int integer4, int integer5) {
+		for(int i6 = integer4; i6 >= 0; --i6) {
+			if(this.func_9887_222reZAc4tQC2IipCEZax67PG0WkcvUJGGzDPQ79N2ThadrSzs8v18glXqA7(vg, integer3, i6, integer5)) {
+				return;
+			}
+
+			vg.setBlock(integer3, i6, integer5, integer2);
+		}
+
+	}
+
+	private void func_9888_96i39bh95up2Yb8Yr4Q9w6Vx88D9gjQbyaAVr1LRMqsqkEvV8suQKH360cb2(World vg, int integer2, int integer3, int integer4, int integer5, int integer6, int integer7, Block pb, int integer9, int integer10) {
+		switch(integer9) {
+		case 0:
+			integer2 += 11;
+			++integer3;
+			integer4 += 7;
+			integer2 += integer5;
+			integer3 += integer6;
+			integer4 += integer7;
+			break;
+		case 1:
+			integer2 += 8;
+			++integer3;
+			integer4 += 11;
+			integer2 -= integer7;
+			integer3 += integer6;
+			integer4 += integer5;
+			break;
+		case 2:
+			integer2 += 7;
+			++integer3;
+			integer4 += 4;
+			integer2 += integer7;
+			integer3 += integer6;
+			integer4 -= integer5;
+			break;
+		case 3:
+			integer2 += 4;
+			++integer3;
+			integer4 += 8;
+			integer2 -= integer5;
+			integer3 += integer6;
+			integer4 -= integer7;
+		}
+
+		vg.setBlockAndMetadata(integer2, integer3, integer4, pb.blockID, integer9);
+		vg.setBlockAndMetadata(integer2, integer3 + 1, integer4, pb.blockID, integer9 + 8 + integer10);
+	}
+
+	private void func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(World vg, int integer2, int integer3, int integer4, int integer5, int integer6, int integer7, Block pb, int integer9) {
+		switch(integer9) {
+		case 0:
+			integer2 += 11;
+			++integer3;
+			integer4 += 7;
+			integer2 += integer5;
+			integer3 += integer6;
+			integer4 += integer7;
+			break;
+		case 1:
+			integer2 += 8;
+			++integer3;
+			integer4 += 11;
+			integer2 -= integer7;
+			integer3 += integer6;
+			integer4 += integer5;
+			break;
+		case 2:
+			integer2 += 7;
+			++integer3;
+			integer4 += 4;
+			integer2 += integer7;
+			integer3 += integer6;
+			integer4 -= integer5;
+			break;
+		case 3:
+			integer2 += 4;
+			++integer3;
+			integer4 += 8;
+			integer2 -= integer5;
+			integer3 += integer6;
+			integer4 -= integer7;
+		}
+
+		vg.setBlock(integer2, integer3, integer4, pb.blockID);
+	}
+
+	private void func_9885_1L9Ls7B6F25a90S6Izh91tZ09Cs2reys4i6eRTG1i56p88AUU5809f3N6iTL(World vg, int integer2, int integer3, int integer4, WorldGenHouseBigInterior hp) {
+		if(!hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBig.class, integer2, integer4)) {
+			;
+		}
+
+		int i6 = integer2 * 16;
+		int i7 = integer4 * 16;
+
+		int i8;
+		int i9;
+		int i10;
+		for(i8 = 7; i8 > 0; --i8) {
+			vg.setBlock(i6 + 2, integer3 + i8, i7 + 2, ExtBlocks.SlatePillar.blockID);
+			vg.setBlock(i6 + 2, integer3 + i8, i7 + 13, ExtBlocks.SlatePillar.blockID);
+			vg.setBlock(i6 + 13, integer3 + i8, i7 + 2, ExtBlocks.SlatePillar.blockID);
+			vg.setBlock(i6 + 13, integer3 + i8, i7 + 13, ExtBlocks.SlatePillar.blockID);
+			if(i8 != 7) {
+				for(i9 = 3; i9 <= 12; ++i9) {
+					i10 = i9 >= 6 && i9 <= 9 ? 1 : 0;
+					if(i10 != 0 || i8 < 5) {
+						vg.setBlock(i6 + i9, integer3 + i8, i7 + 3 + i10, ExtBlocks.SlateBricks.blockID);
+						vg.setBlock(i6 + i9, integer3 + i8, i7 + 12 - i10, ExtBlocks.SlateBricks.blockID);
+					}
+				}
+
+				for(i9 = 4; i9 <= 11; ++i9) {
+					i10 = i9 >= 6 && i9 <= 9 ? 1 : 0;
+					if(i10 != 0 || i8 < 5) {
+						vg.setBlock(i6 + 3 + i10, integer3 + i8, i7 + i9, ExtBlocks.SlateBricks.blockID);
+						vg.setBlock(i6 + 12 - i10, integer3 + i8, i7 + i9, ExtBlocks.SlateBricks.blockID);
+					}
+				}
+			}
+		}
+
+		for(i8 = 2; i8 <= 13; ++i8) {
+			for(i9 = 2; i9 <= 13; ++i9) {
+				vg.setBlock(i6 + i8, integer3, i7 + i9, ExtBlocks.SmoothStone.blockID);
+			}
+		}
+
+		for(i8 = 1; i8 < 15; ++i8) {
+			for(i9 = 7; i9 <= 8; ++i9) {
+				vg.setBlock(i6 + i8, integer3 + 7, i7 + i9, ExtBlocks.FlamewoodPillar.blockID);
+				vg.setBlock(i6 + i9, integer3 + 7, i7 + i8, ExtBlocks.FlamewoodPillar.blockID);
+			}
+		}
+
+		for(i8 = 5; i8 <= 10; ++i8) {
+			for(i9 = 5; i9 <= 10; ++i9) {
+				vg.setBlock(i6 + i8, integer3 + 7, i7 + i9, ExtBlocks.FlamewoodPillar.blockID);
+			}
+		}
+
+		for(i8 = 0; i8 < 4; ++i8) {
+			vg.setBlock(i6 + 4 - i8, integer3 + 6, i7 + 6, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 4 - i8, integer3 + 6, i7 + 9, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 11 + i8, integer3 + 6, i7 + 6, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 11 + i8, integer3 + 6, i7 + 9, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 6, integer3 + 6, i7 + 4 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 9, integer3 + 6, i7 + 4 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 6, integer3 + 6, i7 + 11 + i8, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 9, integer3 + 6, i7 + 11 + i8, ExtBlocks.FlamewoodPillar.blockID);
+		}
+
+		vg.setBlock(i6 + 4, integer3 + 6, i7 + 4, ExtBlocks.FlamewoodPillar.blockID);
+		vg.setBlock(i6 + 4, integer3 + 6, i7 + 5, ExtBlocks.FlamewoodPillar.blockID);
+		vg.setBlock(i6 + 5, integer3 + 6, i7 + 4, ExtBlocks.FlamewoodPillar.blockID);
+		vg.setBlock(i6 + 11, integer3 + 6, i7 + 11, ExtBlocks.FlamewoodPillar.blockID);
+		vg.setBlock(i6 + 10, integer3 + 6, i7 + 11, ExtBlocks.FlamewoodPillar.blockID);
+		vg.setBlock(i6 + 11, integer3 + 6, i7 + 10, ExtBlocks.FlamewoodPillar.blockID);
+		vg.setBlock(i6 + 11, integer3 + 6, i7 + 4, ExtBlocks.FlamewoodPillar.blockID);
+		vg.setBlock(i6 + 10, integer3 + 6, i7 + 4, ExtBlocks.FlamewoodPillar.blockID);
+		vg.setBlock(i6 + 11, integer3 + 6, i7 + 5, ExtBlocks.FlamewoodPillar.blockID);
+		vg.setBlock(i6 + 4, integer3 + 6, i7 + 11, ExtBlocks.FlamewoodPillar.blockID);
+		vg.setBlock(i6 + 5, integer3 + 6, i7 + 11, ExtBlocks.FlamewoodPillar.blockID);
+		vg.setBlock(i6 + 4, integer3 + 6, i7 + 10, ExtBlocks.FlamewoodPillar.blockID);
+
+		for(i8 = 0; i8 < 3; ++i8) {
+			vg.setBlock(i6 + 3 - i8, integer3 + 5, i7 + 5, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 3 - i8, integer3 + 5, i7 + 10, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 12 + i8, integer3 + 5, i7 + 5, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 12 + i8, integer3 + 5, i7 + 10, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 5, integer3 + 5, i7 + 3 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 10, integer3 + 5, i7 + 3 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 5, integer3 + 5, i7 + 12 + i8, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 10, integer3 + 5, i7 + 12 + i8, ExtBlocks.FlamewoodPillar.blockID);
+		}
+
+		for(i8 = 0; i8 < 2; ++i8) {
+			vg.setBlock(i6 + 4, integer3 + 5, i7 + 3 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 3, integer3 + 5, i7 + 3 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 3 - i8, integer3 + 5, i7 + 4, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 3 - i8, integer3 + 5, i7 + 3, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 11, integer3 + 5, i7 + 12 + i8, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 12, integer3 + 5, i7 + 12 + i8, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 12 + i8, integer3 + 5, i7 + 11, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 12 + i8, integer3 + 5, i7 + 12, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 4, integer3 + 5, i7 + 12 + i8, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 3, integer3 + 5, i7 + 12 + i8, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 3 - i8, integer3 + 5, i7 + 11, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 3 - i8, integer3 + 5, i7 + 12, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 11, integer3 + 5, i7 + 3 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 12, integer3 + 5, i7 + 3 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 12 + i8, integer3 + 5, i7 + 4, ExtBlocks.FlamewoodPillar.blockID);
+			vg.setBlock(i6 + 12 + i8, integer3 + 5, i7 + 3, ExtBlocks.FlamewoodPillar.blockID);
+		}
+
+		i8 = integer3 / 8;
+		EnumHouseBig[] enumHouseBig13 = this.func_9886_8ZH5qLYxNz467u1uJMUDJalqGg1WFDGTR9GCMu99tnz5ZT7AKQ9Roo86275S(integer2, i8, integer4);
+
+		for(i10 = 0; i10 < 4; ++i10) {
+			int i11;
+			int i12;
+			switch(EnumHouseBigUnknownClass.field_10860_6445xGvFiQrxwB6B3Jv6E6Y2wuWtLZ480V96b43GE0f1Xis2uZL9xrGn6JSw[enumHouseBig13[i10].ordinal()]) {
+			case 1:
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 1, 0, Block.glass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 2, 0, Block.glass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 3, 0, Block.glass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 1, 1, Block.glass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 2, 1, Block.glass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 3, 1, Block.glass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, -1, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 0, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 1, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 2, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, -2, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, -1, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 0, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 1, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 2, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 3, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 1, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 2, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 3, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 1, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 2, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 3, -2, ExtBlocks.FlamewoodPillar, i10);
+				break;
+			case 2:
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 1, 0, ExtBlocks.GlassBlue, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 2, 0, ExtBlocks.GlassBlue, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 3, 0, ExtBlocks.GlassBlue, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 1, 1, ExtBlocks.GlassBlue, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 2, 1, ExtBlocks.GlassBlue, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 3, 1, ExtBlocks.GlassBlue, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, -1, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 0, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 1, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 2, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, -2, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, -1, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 0, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 1, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 2, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 3, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 1, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 2, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 3, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 1, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 2, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 3, -2, ExtBlocks.FlamewoodPillar, i10);
+				break;
+			case 3:
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 1, 0, ExtBlocks.GlassMagenta, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 2, 0, ExtBlocks.GlassMagenta, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 3, 0, ExtBlocks.GlassMagenta, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 1, 1, ExtBlocks.GlassMagenta, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 2, 1, ExtBlocks.GlassMagenta, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 3, 1, ExtBlocks.GlassMagenta, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, -1, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 0, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 1, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 2, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, -2, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, -1, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 0, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 1, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 2, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 3, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 1, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 2, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 3, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 1, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 2, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 3, -2, ExtBlocks.FlamewoodPillar, i10);
+				break;
+			case 4:
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 1, 0, ExtBlocks.SmoothStone, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 2, 0, ExtBlocks.SmoothStone, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 3, 0, ExtBlocks.SmoothStone, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 1, 1, ExtBlocks.SmoothStone, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 2, 1, ExtBlocks.SmoothStone, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 3, 1, ExtBlocks.SmoothStone, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 1, 0, ExtBlocks.SolarPlate, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 2, 0, ExtBlocks.DenialPlate, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 3, 0, ExtBlocks.SwitchPlate, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 1, 1, ExtBlocks.LoopPlate, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 2, 1, ExtBlocks.PartPlate, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 3, 1, ExtBlocks.AssociationPlate, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, -1, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 0, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 1, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 2, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, -2, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, -1, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 0, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 1, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 2, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 3, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 1, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 2, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 3, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 1, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 2, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 3, -2, ExtBlocks.FlamewoodPillar, i10);
+				break;
+			case 5:
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 1, 0, ExtBlocks.GlassGreen, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 2, 0, ExtBlocks.GlassGreen, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 3, 0, ExtBlocks.GlassGreen, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 1, 1, ExtBlocks.GlassGreen, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 2, 1, ExtBlocks.GlassGreen, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 3, 1, ExtBlocks.GlassGreen, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, -1, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 0, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 1, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 2, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, -2, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, -1, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 0, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 1, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 2, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 3, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 1, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 2, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 3, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 1, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 2, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 3, -2, ExtBlocks.FlamewoodPillar, i10);
+				break;
+			case 6:
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 1, 0, ExtBlocks.GlassBlack, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 2, 0, ExtBlocks.GlassBlack, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 3, 0, ExtBlocks.GlassBlack, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 1, 1, ExtBlocks.GlassBlack, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 2, 1, ExtBlocks.GlassBlack, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 3, 1, ExtBlocks.GlassBlack, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, -1, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 0, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 1, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 1, 0, 2, Block.grass, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, -2, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, -1, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 0, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 1, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 2, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 0, 3, ExtBlocks.SlatePillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 1, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 2, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 3, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 1, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 2, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 2, 3, -2, ExtBlocks.FlamewoodPillar, i10);
+				break;
+			case 7:
+				i11 = i10 == 0 ? 1 : (i10 == 2 ? -1 : 0);
+				i12 = i10 == 1 ? 1 : (i10 == 3 ? -1 : 0);
+				i11 += integer2;
+				i12 += integer4;
+				if(this.func_9889_6V9M1y0rD66IzESBhbtaW530L5zr7MXWWxju10Ibed9N0Yq7r7jZ01hE282X(i11, i8, i12, (i10 + 2) % 4) == EnumHouseBig.Door && hp.func_10702_96UC4VBn6u965CnKc5uafY87yvjBZ6tGq8l4AZ6h876hH5k4586FgF30zZVW(i11, i12) instanceof WorldGenHouseBig) {
+					this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 0, 0, ExtBlocks.WireframeBlock, i10);
+					this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 0, 1, ExtBlocks.WireframeBlock, i10);
+					this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 1, 0, ExtBlocks.WireframeBlock, i10);
+					this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 0, 1, 1, ExtBlocks.WireframeBlock, i10);
+					this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 3, -1, 0, ExtBlocks.SmoothStone, i10);
+					this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 3, -1, 1, ExtBlocks.SmoothStone, i10);
+					this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 4, -1, 0, ExtBlocks.SmoothStone, i10);
+					this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 4, -1, 1, ExtBlocks.SmoothStone, i10);
+				}
+			case 8:
+				i11 = i10 == 0 ? 1 : (i10 == 2 ? -1 : 0);
+				i12 = i10 == 1 ? 1 : (i10 == 3 ? -1 : 0);
+				i11 += integer2;
+				i12 += integer4;
+				if(this.func_9889_6V9M1y0rD66IzESBhbtaW530L5zr7MXWWxju10Ibed9N0Yq7r7jZ01hE282X(i11, i8, i12, (i10 + 2) % 4) == EnumHouseBig.Door && hp.func_10702_96UC4VBn6u965CnKc5uafY87yvjBZ6tGq8l4AZ6h876hH5k4586FgF30zZVW(i11, i12) instanceof WorldGenHouseBig) {
+					this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 3, -1, 0, ExtBlocks.SmoothStone, i10);
+					this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 3, -1, 1, ExtBlocks.SmoothStone, i10);
+					this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 4, -1, 0, ExtBlocks.SmoothStone, i10);
+					this.func_9892_77b9EYVuP52H0l6NhBVIN108hk94iZ0RbsMHh6sqIXrXYH5KdJ05A5pfml0k(vg, i6, integer3, i7, 4, -1, 1, ExtBlocks.SmoothStone, i10);
+				}
+			}
+		}
+
+		this.func_9890_40anu2kvL0nHOy6LSv2lHT9m038haRlWFvl3sDCOBTG3vGl4uZZtpcL2Enmf(vg, i6 + 4, integer3 + 1, i7 + 4);
+		this.func_9890_40anu2kvL0nHOy6LSv2lHT9m038haRlWFvl3sDCOBTG3vGl4uZZtpcL2Enmf(vg, i6 + 11, integer3 + 1, i7 + 4);
+		this.func_9890_40anu2kvL0nHOy6LSv2lHT9m038haRlWFvl3sDCOBTG3vGl4uZZtpcL2Enmf(vg, i6 + 4, integer3 + 1, i7 + 11);
+		this.func_9890_40anu2kvL0nHOy6LSv2lHT9m038haRlWFvl3sDCOBTG3vGl4uZZtpcL2Enmf(vg, i6 + 11, integer3 + 1, i7 + 11);
+	}
+
+	private void func_9890_40anu2kvL0nHOy6LSv2lHT9m038haRlWFvl3sDCOBTG3vGl4uZZtpcL2Enmf(World vg, int integer2, int integer3, int integer4) {
+		Random random5 = new Random((long)integer2 * 456856235L - (long)integer3 * 184761862L + (long)integer4 * 4618624L + 18162412L);
+		if(random5.nextInt(127) == 0) {
+			vg.setBlock(integer2, integer3, integer4, Block.chest.blockID);
+			TileEntityChest tileEntityChest6 = new TileEntityChest();
+			vg.setBlockTileEntity(integer2, integer3, integer4, tileEntityChest6);
+
+			for(int i7 = 0; i7 < tileEntityChest6.getSizeInventory(); ++i7) {
+				int i8 = random5.nextInt(30);
+				if(i8 < 1) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(Item.ingotGold));
+				} else if(i8 < 6) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(ExtBlocks.SolarPlate.blockID + i8 - 1, random5.nextInt(15) + 1));
+				} else if(i8 < 11) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(ExtBlocks.TrinityPlate.blockID + i8 - 6, random5.nextInt(15) + 1));
+				} else if(i8 < 12) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(Item.appleRed));
+				} else if(i8 < 13) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(Item.bread));
+				} else if(i8 < 14) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(ExtItems.Pear));
+				} else if(i8 < 15) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(ExtItems.HoursLongPastIII));
+				} else if(i8 < 16) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(ExtItems.HoursLongPastVI));
+				}
+			}
+
+		}
+	}
+
+	private void func_9893_9pFTVlPhK8P59xUw19Tn4YO43NMA5FTPzPaeGlDQDOekAk89FW3B7c25kR6T(World vg, int integer2, int integer3, int integer4) {
+		int i5;
+		int i6;
+		for(i5 = 2; i5 <= 13; ++i5) {
+			for(i6 = 2; i6 <= 13; ++i6) {
+				for(int i7 = 5; i7 < 8; ++i7) {
+					if(!this.func_9887_222reZAc4tQC2IipCEZax67PG0WkcvUJGGzDPQ79N2ThadrSzs8v18glXqA7(vg, integer2 * 16 + i5, integer3 + i7, integer4 * 16 + i6)) {
+						vg.setBlock(integer2 * 16 + i5, integer3 + i7, integer4 * 16 + i6, ExtBlocks.SmoothStone.blockID);
+					}
+				}
+			}
+		}
+
+		for(i5 = 3; i5 <= 12; ++i5) {
+			for(i6 = 3; i6 <= 12; ++i6) {
+				this.func_9891_7jRn6QF8j7SHbcNzXW806SpN34AM1N24Y7CPdJI866WCP1JJ13ryLsQ154pY(vg, ExtBlocks.CrudePillar.blockID, integer2 * 16 + i5, integer3 + 4, integer4 * 16 + i6);
+			}
+		}
+
+	}
+
+	public void func_9884_61qP7q8deV5ospnX8sW5XUMxMcV5ssOU68863452kQ9H403L5ScR3DEa98qO(World vg, int integer2, int integer3, WorldGenHouseBigInterior hp) {
+		int i5 = (int)((this.field_9896_01Q1s81DUx467KLo2kQqjfIuiCC55M9Jh6q0VrbdGe64M7g8UGdHGUv6e8po.generateNoise((double)integer2, (double)integer3) / 2.0D + 1.0D) * 8.0D);
+
+		for(int i6 = i5; i6 >= 0; --i6) {
+			int i7 = 30 + i6 * 8;
+			if(!this.func_9895_64EF8cC2FppVMJU2QNG1K3esZ0sOSbsYZrKxu7wCZWa489iFH4s610HxG600(vg, integer2, i7, integer3)) {
+				if(i5 != i6) {
+					this.func_9893_9pFTVlPhK8P59xUw19Tn4YO43NMA5FTPzPaeGlDQDOekAk89FW3B7c25kR6T(vg, integer2, i7, integer3);
+				}
+				break;
+			}
+
+			this.func_9885_1L9Ls7B6F25a90S6Izh91tZ09Cs2reys4i6eRTG1i56p88AUU5809f3N6iTL(vg, integer2, i7, integer3, hp);
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/ThreadChunkPopulator.java
@@ -1,0 +1,76 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+public class ThreadChunkPopulator extends Thread {
+	List qChanges = new ArrayList();
+	public List queuedPopulateOperations = new ArrayList();
+	public static boolean useAsyncGen = false;
+	public static ThreadChunkPopulator instance = null;
+	public volatile boolean writingToList = false;
+
+	public static boolean OpListHasOperation(ChunkProviderPopulateOperation oh) {
+		Iterator iterator1 = instance.queuedPopulateOperations.iterator();
+
+		ChunkProviderPopulateOperation chunkProviderPopulateOperation2;
+		do {
+			if(!iterator1.hasNext()) {
+				return false;
+			}
+
+			chunkProviderPopulateOperation2 = (ChunkProviderPopulateOperation)iterator1.next();
+		} while(chunkProviderPopulateOperation2.x != oh.x || chunkProviderPopulateOperation2.y != oh.y);
+
+		return true;
+	}
+
+	public static void AddPopulateOperation(ChunkProviderPopulateOperation oh, ChunkProviderGenerate vy) {
+		if(useAsyncGen) {
+			if(instance == null) {
+				instance = new ThreadChunkPopulator();
+			}
+
+			if(!instance.isAlive()) {
+				instance.start();
+			}
+
+			instance.writingToList = true;
+			if(!OpListHasOperation(oh)) {
+				instance.queuedPopulateOperations.add(oh);
+			}
+
+			instance.writingToList = false;
+		} else {
+			oh.caller.actualPopulate(oh.a, oh.x, oh.y);
+		}
+
+	}
+
+	public void run() {
+		while(true) {
+			if(this.queuedPopulateOperations.size() > 0) {
+				while(true) {
+					if(!this.writingToList) {
+						ChunkProviderPopulateOperation chunkProviderPopulateOperation1 = (ChunkProviderPopulateOperation)this.queuedPopulateOperations.get(0);
+
+						try {
+							chunkProviderPopulateOperation1.caller.actualPopulate(chunkProviderPopulateOperation1.a, chunkProviderPopulateOperation1.x, chunkProviderPopulateOperation1.y);
+						} catch (Exception exception4) {
+						}
+
+						this.queuedPopulateOperations.remove(0);
+						break;
+					}
+				}
+			}
+
+			try {
+				Thread.sleep(16L);
+			} catch (InterruptedException interruptedException3) {
+				interruptedException3.printStackTrace();
+			}
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/GenPillar.java
@@ -1,0 +1,32 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class GenPillar extends WorldGenerator {
+	private int a;
+
+	public GenPillar(int integer) {
+		this.a = integer;
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 64; ++i6) {
+			int i9 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i7;
+			int i8;
+			int i10 = world.getBlockId(i9, (i8 = y + rand.nextInt(4) - rand.nextInt(4)) - 1, i7 = z + rand.nextInt(8) - rand.nextInt(8));
+			boolean z11 = i10 != 0 && i10 != 9 && i10 != 116 && i10 != 18 && i10 != ExtBlocks.glowingFlower.blockID && i10 != ExtBlocks.blueFireIdk.blockID;
+			if(world.getBlockId(i9, i8, i7) == 0 && z11) {
+				world.setBlock(i9, i8, i7, this.a);
+				if(rand.nextInt(100) > 50) {
+					world.setBlock(i9, i8 + 1, i7, this.a);
+					if(rand.nextInt(100) > 50) {
+						world.setBlock(i9, i8 + 2, i7, this.a);
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/TriggerIndex.java
@@ -1,0 +1,31 @@
+package net.minecraft.src;
+
+public enum TriggerIndex {
+	Invalid(0),
+	Left(1),
+	Right(2);
+
+	int index;
+
+    private static final /* synthetic */ TriggerIndex[] field_11014_38uHwFwC2G7nIfaHER5W7paxX34a2i2G0DlAyp8IDFGyE83x7r3aXZa4arho;
+
+	public static TriggerIndex[] func_11010_83dO0Li6AtsBrc9SeaTfBlK6z8078A8Vv2lfqLm1s8mqwqxNLn265793zvnh() {
+		return (TriggerIndex[])field_11014_38uHwFwC2G7nIfaHER5W7paxX34a2i2G0DlAyp8IDFGyE83x7r3aXZa4arho.clone();
+	}
+
+	public static TriggerIndex func_11009_19uvZS16nzgBQ8jK7rTv8z29Dtno1sfX06SPMaNMpTwe57HqaG4RXdiIKBzj(String string) {
+		return (TriggerIndex)Enum.valueOf(TriggerIndex.class, string);
+	}
+
+	private TriggerIndex(int integer3) {
+		this.index = integer3;
+	}
+
+	private static TriggerIndex[] func_11008_1x08Zh970e308T504bTd7DvFfeZ1PkvWJ73V2t7yaI6t72YI0TE507Q3087w() {
+		return new TriggerIndex[]{Invalid, Left, Right};
+	}
+
+    static {
+        field_11014_38uHwFwC2G7nIfaHER5W7paxX34a2i2G0DlAyp8IDFGyE83x7r3aXZa4arho = TriggerIndex.func_11008_1x08Zh970e308T504bTd7DvFfeZ1PkvWJ73V2t7yaI6t72YI0TE507Q3087w();
+    }
+}
--- /dev/null
+++ net/minecraft/src/ItemEraser.java
@@ -1,0 +1,27 @@
+package net.minecraft.src;
+
+public class ItemEraser extends ItemPickaxe {
+	public ItemEraser(int itemID, int harvestLevelAndMaterial) {
+		super(itemID, harvestLevelAndMaterial);
+	}
+
+	public boolean canHarvestBlock(Block block) {
+		return true;
+	}
+
+	public int getMaxDamage() {
+		return Integer.MAX_VALUE;
+	}
+
+	public int getDamageVsEntity(Entity entity) {
+		return Integer.MAX_VALUE;
+	}
+
+	public float getStrVsBlock(ItemStack stack, Block block) {
+		return Float.POSITIVE_INFINITY;
+	}
+
+	public boolean isFull3D() {
+		return false;
+	}
+}
--- net/minecraft/src/MapGenCaves.java
+++ net/minecraft/src/MapGenCaves.java
@@ -3,151 +3,151 @@
 import java.util.Random;
 
 public class MapGenCaves extends MapGenBase {
-	protected void generateLargeCaveNode(int var1, int var2, byte[] var3, double var4, double var6, double var8) {
-		this.generateCaveNode(var1, var2, var3, var4, var6, var8, 1.0F + this.rand.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
+	protected void generateLargeCaveNode(int integer1, int integer2, byte[] data, double double4, double double5, double double6) {
+		this.generateCaveNode(integer1, integer2, data, double4, double5, double6, 1.0F + this.rand.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
 	}
 
-	protected void generateCaveNode(int var1, int var2, byte[] var3, double var4, double var6, double var8, float var10, float var11, float var12, int var13, int var14, double var15) {
-		double var17 = (double)(var1 * 16 + 8);
-		double var19 = (double)(var2 * 16 + 8);
-		float var21 = 0.0F;
-		float var22 = 0.0F;
-		Random var23 = new Random(this.rand.nextLong());
-		if(var14 <= 0) {
-			int var24 = this.range * 16 - 16;
-			var14 = var24 - var23.nextInt(var24 / 4);
-		}
-
-		boolean var52 = false;
-		if(var13 == -1) {
-			var13 = var14 / 2;
-			var52 = true;
-		}
-
-		int var25 = var23.nextInt(var14 / 2) + var14 / 4;
-
-		for(boolean var26 = var23.nextInt(6) == 0; var13 < var14; ++var13) {
-			double var27 = 1.5D + (double)(MathHelper.sin((float)var13 * (float)Math.PI / (float)var14) * var10 * 1.0F);
-			double var29 = var27 * var15;
-			float var31 = MathHelper.cos(var12);
-			float var32 = MathHelper.sin(var12);
-			var4 += (double)(MathHelper.cos(var11) * var31);
-			var6 += (double)var32;
-			var8 += (double)(MathHelper.sin(var11) * var31);
-			if(var26) {
-				var12 *= 0.92F;
+	protected void generateCaveNode(int x, int z, byte[] data, double double4, double double5, double double6, float float7, float float8, float float9, int integer10, int integer11, double double12) {
+		double d17 = (double)(x * 16 + 8);
+		double d19 = (double)(z * 16 + 8);
+		float f21 = 0.0F;
+		float f22 = 0.0F;
+		Random random23 = new Random(this.rand.nextLong());
+		if(integer11 <= 0) {
+			int i24 = this.range * 16 - 16;
+			integer11 = i24 - random23.nextInt(i24 / 4);
+		}
+
+		boolean z60 = false;
+		if(integer10 == -1) {
+			integer10 = integer11 / 2;
+			z60 = true;
+		}
+
+		int i25 = random23.nextInt(integer11 / 2) + integer11 / 4;
+
+		for(boolean z26 = random23.nextInt(6) == 0; integer10 < integer11; ++integer10) {
+			double d27 = 1.5D + (double)(MathHelper.sin((float)integer10 * (float)Math.PI / (float)integer11) * float7 * 1.0F);
+			double d29 = d27 * double12;
+			float f31 = MathHelper.cos(float9);
+			float f32 = MathHelper.sin(float9);
+			double4 += (double)(MathHelper.cos(float8) * f31);
+			double5 += (double)f32;
+			double6 += (double)(MathHelper.sin(float8) * f31);
+			if(z26) {
+				float9 *= 0.92F;
 			} else {
-				var12 *= 0.7F;
+				float9 *= 0.7F;
 			}
 
-			var12 += var22 * 0.1F;
-			var11 += var21 * 0.1F;
-			var22 *= 0.9F;
-			var21 *= 12.0F / 16.0F;
-			var22 += (var23.nextFloat() - var23.nextFloat()) * var23.nextFloat() * 2.0F;
-			var21 += (var23.nextFloat() - var23.nextFloat()) * var23.nextFloat() * 4.0F;
-			if(!var52 && var13 == var25 && var10 > 1.0F) {
-				this.generateCaveNode(var1, var2, var3, var4, var6, var8, var23.nextFloat() * 0.5F + 0.5F, var11 - (float)Math.PI * 0.5F, var12 / 3.0F, var13, var14, 1.0D);
-				this.generateCaveNode(var1, var2, var3, var4, var6, var8, var23.nextFloat() * 0.5F + 0.5F, var11 + (float)Math.PI * 0.5F, var12 / 3.0F, var13, var14, 1.0D);
+			float9 += f22 * 0.1F;
+			float8 += f21 * 0.1F;
+			f22 *= 0.9F;
+			f21 *= 0.75F;
+			f22 += (random23.nextFloat() - random23.nextFloat()) * random23.nextFloat() * 2.0F;
+			f21 += (random23.nextFloat() - random23.nextFloat()) * random23.nextFloat() * 4.0F;
+			if(!z60 && integer10 == i25 && float7 > 1.0F) {
+				this.generateCaveNode(x, z, data, double4, double5, double6, random23.nextFloat() * 0.5F + 0.5F, float8 - (float)Math.PI / 2F, float9 / 3.0F, integer10, integer11, 1.0D);
+				this.generateCaveNode(x, z, data, double4, double5, double6, random23.nextFloat() * 0.5F + 0.5F, float8 + (float)Math.PI / 2F, float9 / 3.0F, integer10, integer11, 1.0D);
 				return;
 			}
 
-			if(var52 || var23.nextInt(4) != 0) {
-				double var33 = var4 - var17;
-				double var35 = var8 - var19;
-				double var37 = (double)(var14 - var13);
-				double var39 = (double)(var10 + 2.0F + 16.0F);
-				if(var33 * var33 + var35 * var35 - var37 * var37 > var39 * var39) {
+			if(z60 || random23.nextInt(4) != 0) {
+				double d33 = double4 - d17;
+				double d35 = double6 - d19;
+				double d37 = (double)(integer11 - integer10);
+				double d39 = (double)(float7 + 2.0F + 16.0F);
+				if(d33 * d33 + d35 * d35 - d37 * d37 > d39 * d39) {
 					return;
 				}
 
-				if(var4 >= var17 - 16.0D - var27 * 2.0D && var8 >= var19 - 16.0D - var27 * 2.0D && var4 <= var17 + 16.0D + var27 * 2.0D && var8 <= var19 + 16.0D + var27 * 2.0D) {
-					int var53 = MathHelper.floor_double(var4 - var27) - var1 * 16 - 1;
-					int var34 = MathHelper.floor_double(var4 + var27) - var1 * 16 + 1;
-					int var54 = MathHelper.floor_double(var6 - var29) - 1;
-					int var36 = MathHelper.floor_double(var6 + var29) + 1;
-					int var55 = MathHelper.floor_double(var8 - var27) - var2 * 16 - 1;
-					int var38 = MathHelper.floor_double(var8 + var27) - var2 * 16 + 1;
-					if(var53 < 0) {
-						var53 = 0;
-					}
-
-					if(var34 > 16) {
-						var34 = 16;
-					}
-
-					if(var54 < 1) {
-						var54 = 1;
-					}
-
-					if(var36 > 120) {
-						var36 = 120;
-					}
-
-					if(var55 < 0) {
-						var55 = 0;
-					}
-
-					if(var38 > 16) {
-						var38 = 16;
-					}
-
-					boolean var56 = false;
-
-					int var40;
-					int var43;
-					for(var40 = var53; !var56 && var40 < var34; ++var40) {
-						for(int var41 = var55; !var56 && var41 < var38; ++var41) {
-							for(int var42 = var36 + 1; !var56 && var42 >= var54 - 1; --var42) {
-								var43 = (var40 * 16 + var41) * 128 + var42;
-								if(var42 >= 0 && var42 < 128) {
-									if(var3[var43] == Block.waterMoving.blockID || var3[var43] == Block.waterStill.blockID) {
-										var56 = true;
+				if(double4 >= d17 - 16.0D - d27 * 2.0D && double6 >= d19 - 16.0D - d27 * 2.0D && double4 <= d17 + 16.0D + d27 * 2.0D && double6 <= d19 + 16.0D + d27 * 2.0D) {
+					int i41 = MathHelper.floor_double(double4 - d27) - x * 16 - 1;
+					int i42 = MathHelper.floor_double(double4 + d27) - x * 16 + 1;
+					int i43 = MathHelper.floor_double(double5 - d29) - 1;
+					int i44 = MathHelper.floor_double(double5 + d29) + 1;
+					int i45 = MathHelper.floor_double(double6 - d27) - z * 16 - 1;
+					int i46 = MathHelper.floor_double(double6 + d27) - z * 16 + 1;
+					if(i41 < 0) {
+						i41 = 0;
+					}
+
+					if(i42 > 16) {
+						i42 = 16;
+					}
+
+					if(i43 < 1) {
+						i43 = 1;
+					}
+
+					if(i44 > 120) {
+						i44 = 120;
+					}
+
+					if(i45 < 0) {
+						i45 = 0;
+					}
+
+					if(i46 > 16) {
+						i46 = 16;
+					}
+
+					boolean z47 = false;
+
+					int i48;
+					int i49;
+					for(i48 = i41; !z47 && i48 < i42; ++i48) {
+						for(int i50 = i45; !z47 && i50 < i46; ++i50) {
+							for(int i51 = i44 + 1; !z47 && i51 >= i43 - 1; --i51) {
+								i49 = (i48 * 16 + i50) * 128 + i51;
+								if(i51 >= 0 && i51 < 128) {
+									if(data[i49] == Block.waterMoving.blockID || data[i49] == Block.waterStill.blockID) {
+										z47 = true;
 									}
 
-									if(var42 != var54 - 1 && var40 != var53 && var40 != var34 - 1 && var41 != var55 && var41 != var38 - 1) {
-										var42 = var54;
+									if(i51 != i43 - 1 && i48 != i41 && i48 != i42 - 1 && i50 != i45 && i50 != i46 - 1) {
+										i51 = i43;
 									}
 								}
 							}
 						}
 					}
 
-					if(!var56) {
-						for(var40 = var53; var40 < var34; ++var40) {
-							double var57 = ((double)(var40 + var1 * 16) + 0.5D - var4) / var27;
-
-							for(var43 = var55; var43 < var38; ++var43) {
-								double var44 = ((double)(var43 + var2 * 16) + 0.5D - var8) / var27;
-								int var46 = (var40 * 16 + var43) * 128 + var36;
-								boolean var47 = false;
-
-								for(int var48 = var36 - 1; var48 >= var54; --var48) {
-									double var49 = ((double)var48 + 0.5D - var6) / var29;
-									if(var49 > -0.7D && var57 * var57 + var49 * var49 + var44 * var44 < 1.0D) {
-										byte var51 = var3[var46];
-										if(var51 == Block.grass.blockID) {
-											var47 = true;
+					if(!z47) {
+						for(i48 = i41; i48 < i42; ++i48) {
+							double d61 = ((double)(i48 + x * 16) + 0.5D - double4) / d27;
+
+							for(i49 = i45; i49 < i46; ++i49) {
+								double d52 = ((double)(i49 + z * 16) + 0.5D - double6) / d27;
+								int i54 = (i48 * 16 + i49) * 128 + i44;
+								boolean z55 = false;
+
+								for(int i56 = i44 - 1; i56 >= i43; --i56) {
+									double d57 = ((double)i56 + 0.5D - double5) / d29;
+									if(d57 > -0.7D && d61 * d61 + d57 * d57 + d52 * d52 < 1.0D) {
+										byte b59 = data[i54];
+										if(b59 == Block.grass.blockID) {
+											z55 = true;
 										}
 
-										if(var51 == Block.stone.blockID || var51 == Block.dirt.blockID || var51 == Block.grass.blockID) {
-											if(var48 < 10) {
-												var3[var46] = (byte)Block.lavaMoving.blockID;
+										if(b59 == Block.stone.blockID || b59 == Block.dirt.blockID || b59 == Block.grass.blockID) {
+											if(i56 < 10) {
+												data[i54] = (byte)Block.lavaMoving.blockID;
 											} else {
-												var3[var46] = 0;
-												if(var47 && var3[var46 - 1] == Block.dirt.blockID) {
-													var3[var46 - 1] = (byte)Block.grass.blockID;
+												data[i54] = 0;
+												if(z55 && data[i54 - 1] == Block.dirt.blockID) {
+													data[i54 - 1] = (byte)Block.grass.blockID;
 												}
 											}
 										}
 									}
 
-									--var46;
+									--i54;
 								}
 							}
 						}
 
-						if(var52) {
+						if(z60) {
 							break;
 						}
 					}
@@ -157,27 +157,27 @@
 
 	}
 
-	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
-		int var7 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(40) + 1) + 1);
+	protected void recursiveGenerate(World world, int integer2, int integer3, int integer4, int integer5, byte[] data) {
+		int i7 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(40) + 1) + 1);
 		if(this.rand.nextInt(15) != 0) {
-			var7 = 0;
+			i7 = 0;
 		}
 
-		for(int var8 = 0; var8 < var7; ++var8) {
-			double var9 = (double)(var2 * 16 + this.rand.nextInt(16));
-			double var11 = (double)this.rand.nextInt(this.rand.nextInt(120) + 8);
-			double var13 = (double)(var3 * 16 + this.rand.nextInt(16));
-			int var15 = 1;
+		for(int i8 = 0; i8 < i7; ++i8) {
+			double d9 = (double)(integer2 * 16 + this.rand.nextInt(16));
+			double d11 = (double)this.rand.nextInt(this.rand.nextInt(120) + 8);
+			double d13 = (double)(integer3 * 16 + this.rand.nextInt(16));
+			int i15 = 1;
 			if(this.rand.nextInt(4) == 0) {
-				this.generateLargeCaveNode(var4, var5, var6, var9, var11, var13);
-				var15 += this.rand.nextInt(4);
+				this.generateLargeCaveNode(integer4, integer5, data, d9, d11, d13);
+				i15 += this.rand.nextInt(4);
 			}
 
-			for(int var16 = 0; var16 < var15; ++var16) {
-				float var17 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
-				float var18 = (this.rand.nextFloat() - 0.5F) * 2.0F / 8.0F;
-				float var19 = this.rand.nextFloat() * 2.0F + this.rand.nextFloat();
-				this.generateCaveNode(var4, var5, var6, var9, var11, var13, var19, var17, var18, 0, 0, 1.0D);
+			for(int i16 = 0; i16 < i15; ++i16) {
+				float f17 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
+				float f18 = (this.rand.nextFloat() - 0.5F) * 2.0F / 8.0F;
+				float f19 = this.rand.nextFloat() * 2.0F + this.rand.nextFloat();
+				this.generateCaveNode(integer4, integer5, data, d9, d11, d13, f19, f17, f18, 0, 0, 1.0D);
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/PlayerControllerZombieMode.java
@@ -1,0 +1,128 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.input.Keyboard;
+
+public class PlayerControllerZombieMode extends PlayerController {
+	private int curBlockX = -1;
+	private int curBlockY = -1;
+	private int curBlockZ = -1;
+	private float curBlockDamage = 0.0F;
+	private float prevBlockDamage = 0.0F;
+	private float blockDestroySoundCounter = 0.0F;
+	private int blockHitWait = 0;
+
+	public PlayerControllerZombieMode(Minecraft minecraft) {
+		super(minecraft);
+	}
+
+	public void flipPlayer(EntityPlayer entityPlayer) {
+		entityPlayer.rotationYaw = -180.0F;
+	}
+
+	public boolean sendBlockRemoved(int x, int y, int z, int side) {
+		if(!Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
+			return false;
+		} else {
+			int i5 = this.mc.theWorld.getBlockId(x, y, z);
+			int i6 = this.mc.theWorld.getBlockMetadata(x, y, z);
+			boolean z7 = super.sendBlockRemoved(x, y, z, side);
+			ItemStack itemStack8 = this.mc.thePlayer.getCurrentEquippedItem();
+			boolean z9 = this.mc.thePlayer.canHarvestBlock(Block.blocksList[i5]);
+			if(itemStack8 != null) {
+				itemStack8.onDestroyBlock(i5, x, y, z);
+				if(itemStack8.stackSize == 0) {
+					itemStack8.onItemDestroyedByUse(this.mc.thePlayer);
+					this.mc.thePlayer.destroyCurrentEquippedItem();
+				}
+			}
+
+			if(z7 && z9) {
+				Block.blocksList[i5].harvestBlock(this.mc.theWorld, x, y, z, i6);
+			}
+
+			return z7;
+		}
+	}
+
+	public void clickBlock(int x, int y, int z, int side) {
+		int i5 = this.mc.theWorld.getBlockId(x, y, z);
+		if(i5 > 0 && this.curBlockDamage == 0.0F) {
+			Block.blocksList[i5].onBlockClicked(this.mc.theWorld, x, y, z, this.mc.thePlayer);
+		}
+
+		if(i5 > 0 && Block.blocksList[i5].blockStrength(this.mc.thePlayer) >= 1.0F && Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
+			this.sendBlockRemoved(x, y, z, side);
+		}
+
+	}
+
+	public void resetBlockRemoving() {
+		this.curBlockDamage = 0.0F;
+		this.blockHitWait = 0;
+	}
+
+	public void sendBlockRemoving(int x, int y, int z, int side) {
+		if(this.blockHitWait > 0) {
+			--this.blockHitWait;
+		} else if(x == this.curBlockX && y == this.curBlockY && z == this.curBlockZ) {
+			int i5 = this.mc.theWorld.getBlockId(x, y, z);
+			if(i5 == 0) {
+				return;
+			}
+
+			Block block6 = Block.blocksList[i5];
+			if(!block6.breakableInZM) {
+				this.curBlockDamage = 0.0F;
+				return;
+			}
+
+			this.curBlockDamage += block6.blockStrength(this.mc.thePlayer);
+			if(this.blockDestroySoundCounter % 4.0F == 0.0F && block6 != null) {
+				this.mc.sndManager.playSound(block6.stepSound.getStepSound(), (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F, (block6.stepSound.getVolume() + 1.0F) / 8.0F, block6.stepSound.getPitch() * 0.5F);
+			}
+
+			++this.blockDestroySoundCounter;
+			if(this.curBlockDamage >= 1.0F) {
+				this.sendBlockRemoved(x, y, z, side);
+				this.curBlockDamage = 0.0F;
+				this.prevBlockDamage = 0.0F;
+				this.blockDestroySoundCounter = 0.0F;
+				this.blockHitWait = 5;
+			}
+		} else {
+			this.curBlockDamage = 0.0F;
+			this.prevBlockDamage = 0.0F;
+			this.blockDestroySoundCounter = 0.0F;
+			this.curBlockX = x;
+			this.curBlockY = y;
+			this.curBlockZ = z;
+		}
+
+	}
+
+	public void setPartialTime(float renderPartialTick) {
+		if(this.curBlockDamage <= 0.0F) {
+			this.mc.ingameGUI.damageGuiPartialTime = 0.0F;
+			this.mc.renderGlobal.damagePartialTime = 0.0F;
+		} else {
+			float f2 = this.prevBlockDamage + (this.curBlockDamage - this.prevBlockDamage) * renderPartialTick;
+			this.mc.ingameGUI.damageGuiPartialTime = f2;
+			this.mc.renderGlobal.damagePartialTime = f2;
+		}
+
+	}
+
+	public float getBlockReachDistance() {
+		return 4.0F;
+	}
+
+	public void onWorldChange(World world) {
+		super.onWorldChange(world);
+	}
+
+	public void onUpdate() {
+		this.prevBlockDamage = this.curBlockDamage;
+	}
+}
--- net/minecraft/src/Packet5PlayerInventory.java
+++ net/minecraft/src/Packet5PlayerInventory.java
@@ -11,53 +11,53 @@
 	public Packet5PlayerInventory() {
 	}
 
-	public Packet5PlayerInventory(int var1, ItemStack[] var2) {
-		this.inventoryType = var1;
-		this.inventory = new ItemStack[var2.length];
+	public Packet5PlayerInventory(int inventoryType, ItemStack[] stacks) {
+		this.inventoryType = inventoryType;
+		this.inventory = new ItemStack[stacks.length];
 
-		for(int var3 = 0; var3 < this.inventory.length; ++var3) {
-			this.inventory[var3] = var2[var3] == null ? null : var2[var3].copy();
+		for(int i3 = 0; i3 < this.inventory.length; ++i3) {
+			this.inventory[i3] = stacks[i3] == null ? null : stacks[i3].copy();
 		}
 
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.inventoryType = var1.readInt();
-		short var2 = var1.readShort();
-		this.inventory = new ItemStack[var2];
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.inventoryType = dataInputStream.readInt();
+		short s2 = dataInputStream.readShort();
+		this.inventory = new ItemStack[s2];
 
-		for(int var3 = 0; var3 < var2; ++var3) {
-			short var4 = var1.readShort();
-			if(var4 >= 0) {
-				byte var5 = var1.readByte();
-				short var6 = var1.readShort();
-				this.inventory[var3] = new ItemStack(var4, var5, var6);
+		for(int i3 = 0; i3 < s2; ++i3) {
+			int i4 = dataInputStream.readInt();
+			if(i4 >= 0) {
+				byte b5 = dataInputStream.readByte();
+				short s6 = dataInputStream.readShort();
+				this.inventory[i3] = new ItemStack(i4, b5, s6);
 			}
 		}
 
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.inventoryType);
-		var1.writeShort(this.inventory.length);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.inventoryType);
+		dataOutputStream.writeShort(this.inventory.length);
 
-		for(int var2 = 0; var2 < this.inventory.length; ++var2) {
-			if(this.inventory[var2] == null) {
-				var1.writeShort(-1);
+		for(int i2 = 0; i2 < this.inventory.length; ++i2) {
+			if(this.inventory[i2] == null) {
+				dataOutputStream.writeInt(-1);
 			} else {
-				var1.writeShort((short)this.inventory[var2].itemID);
-				var1.writeByte((byte)this.inventory[var2].stackSize);
-				var1.writeShort((short)this.inventory[var2].itemDmg);
+				dataOutputStream.writeInt(this.inventory[i2].itemID);
+				dataOutputStream.writeByte((byte)this.inventory[i2].stackSize);
+				dataOutputStream.writeShort((short)this.inventory[i2].itemDmg);
 			}
 		}
 
 	}
 
-	public void processPacket(NetHandler var1) {
-		var1.handlePlayerInventory(this);
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handlePlayerInventory(this);
 	}
 
 	public int getPacketSize() {
-		return 6 + this.inventory.length * 5;
+		return 6 + this.inventory.length * 7;
 	}
 }
--- net/minecraft/src/EnumOS.java
+++ net/minecraft/src/EnumOS.java
@@ -6,4 +6,12 @@
 	windows,
 	macos,
 	unknown;
+
+	public static EnumOS func_12176_0kK8ejRcI1TDI8EKf5I5MlMt660u5fn5R8A861cd5zfFy8WGgo291s3TF7n0(String string) {
+		return (EnumOS)Enum.valueOf(EnumOS.class, string);
+	}
+
+	private static EnumOS[] func_12177_0EMv5186A6vi9i3Sg3qaZ9wTSGYjG7TnA27NWu2HEFkz4P06j21J2DGcJ3sf() {
+		return new EnumOS[]{linux, solaris, windows, macos, unknown};
+	}
 }
--- net/minecraft/src/EntitySheep.java
+++ net/minecraft/src/EntitySheep.java
@@ -3,36 +3,36 @@
 public class EntitySheep extends EntityAnimal {
 	public boolean sheared = false;
 
-	public EntitySheep(World var1) {
-		super(var1);
+	public EntitySheep(World world) {
+		super(world);
 		this.texture = "/mob/sheep.png";
 		this.setSize(0.9F, 1.3F);
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
-		if(!this.sheared && var1 instanceof EntityLiving) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		if(!this.sheared && entity instanceof EntityLiving) {
 			this.sheared = true;
-			int var3 = 1 + this.rand.nextInt(3);
+			int i3 = 1 + this.rand.nextInt(3);
 
-			for(int var4 = 0; var4 < var3; ++var4) {
-				EntityItem var5 = this.entityDropItem(Block.cloth.blockID, 1, 1.0F);
-				var5.motionY += (double)(this.rand.nextFloat() * 0.05F);
-				var5.motionX += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
-				var5.motionZ += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+			for(int i4 = 0; i4 < i3; ++i4) {
+				EntityItem entityItem5 = this.entityDropItem(Block.cloth.blockID, 1, 1.0F);
+				entityItem5.motionY += (double)(this.rand.nextFloat() * 0.05F);
+				entityItem5.motionX += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+				entityItem5.motionZ += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
 			}
 		}
 
-		return super.attackEntityFrom(var1, var2);
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setBoolean("Sheared", this.sheared);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.sheared = var1.getBoolean("Sheared");
+		return super.attackEntityFrom(entity, damage);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+		nbttagcompound.setBoolean("Sheared", this.sheared);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+		this.sheared = nbttagcompound.getBoolean("Sheared");
 	}
 
 	protected String getLivingSound() {
--- /dev/null
+++ net/minecraft/src/CommandPlaydemo.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandPlaydemo extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8562_52fLf3lgrmlFsBi92jzoYI4QS2IKAIHz5eJ4OK0D18Nx3tQDD2I2Vg2ltY5H;
+    
+    CommandPlaydemo(final CommandManager abb) {
+        this.field_8562_52fLf3lgrmlFsBi92jzoYI4QS2IKAIHz5eJ4OK0D18Nx3tQDD2I2Vg2ltY5H = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL.func_12200_2zuKLzAjc8o3T9KVZ7ZY36o6qOp5e1FG836622Br32SKguF06W9W1437p52T();
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/WorldGenHub.java
@@ -1,0 +1,30 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+public class WorldGenHub extends WorldGenerator {
+	List field_9603_89nMga116eHH0Cz7qWE0DC32KW7xCG8zMHKVZAK007oujTd05Q77n3l18670 = new ArrayList();
+	List field_9602_1LyU83q3Hz6C78Ai50PWBSiv34LkVAODYWOxOZoHWwP3v5F9BDzX2NL23988 = new ArrayList();
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		if(world instanceof HubWorld) {
+			Object object6;
+			switch(rand.nextInt()) {
+			case 0:
+				object6 = new HubFragment1((HubWorld)world, x, y, z);
+				break;
+			case 1:
+				object6 = new HubFragment2((HubWorld)world, x, y, z);
+				break;
+			default:
+				object6 = new HubFragment3((HubWorld)world, x, y, z);
+			}
+
+			((HubWorldUnknownClass2)object6).func_9822_96pkMbVA643Z1Y78zU1zOHbm0WbR47PCGp9q1ZyTK64G0pr0ViUREK2TCos1();
+		}
+
+		return false;
+	}
+}
--- /dev/null
+++ net/minecraft/src/HubChunkProviderLoadOrGenerate.java
@@ -1,0 +1,47 @@
+package net.minecraft.src;
+
+public class HubChunkProviderLoadOrGenerate extends ChunkProviderLoadOrGenerate {
+	public HubChunkProviderLoadOrGenerate(HubWorld wv, IChunkLoader en, IChunkProvider adg) {
+		super(wv, en, adg);
+	}
+
+	public Chunk provideChunk(int x, int z) {
+		if(x == this.lastQueriedChunkXPos && z == this.lastQueriedChunkZPos && this.lastQueriedChunk != null) {
+			return this.lastQueriedChunk;
+		} else {
+			int i3 = x & 31;
+			int i4 = z & 31;
+			int i5 = i3 + i4 * 32;
+			if(!this.chunkExists(x, z)) {
+				if(this.chunks[i5] != null) {
+					this.chunks[i5].onChunkUnload();
+					this.saveChunk(this.chunks[i5]);
+					this.saveExtraChunkData(this.chunks[i5]);
+				}
+
+				Chunk chunk6 = this.getChunkAt(x, z);
+				if(chunk6 == null) {
+					if(this.chunkProvider == null) {
+						chunk6 = this.blankChunk;
+					} else {
+						chunk6 = this.chunkProvider.provideChunk(x, z);
+					}
+				}
+
+				this.chunks[i5] = chunk6;
+				if(this.chunks[i5] != null) {
+					this.chunks[i5].onChunkLoad();
+				}
+			}
+
+			this.lastQueriedChunkXPos = x;
+			this.lastQueriedChunkZPos = z;
+			this.lastQueriedChunk = this.chunks[i5];
+			return this.chunks[i5];
+		}
+	}
+
+	public void populate(IChunkProvider chunkProvider, int x, int z) {
+		this.provideChunk(x, z).setChunkModified();
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockRedstoneTorchOld.java
@@ -1,0 +1,153 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+public class BlockRedstoneTorchOld extends BlockTorchOld {
+	private boolean torchActive = false;
+	private static List torchUpdates = new ArrayList();
+
+	public int getBlockTextureFromSideAndMetadata(int integer1, int integer2) {
+		return integer1 == 1 ? BlockOld.redstoneWire.getBlockTextureFromSideAndMetadata(integer1, integer2) : super.getBlockTextureFromSideAndMetadata(integer1, integer2);
+	}
+
+	private boolean checkForBurnout(World vg, int integer2, int integer3, int integer4, boolean boolean5) {
+		if(boolean5) {
+			torchUpdates.add(new RedstoneUpdateInfo(integer2, integer3, integer4, vg.worldTime));
+		}
+
+		int i6 = 0;
+
+		for(int i7 = 0; i7 < torchUpdates.size(); ++i7) {
+			RedstoneUpdateInfo redstoneUpdateInfo8 = (RedstoneUpdateInfo)torchUpdates.get(i7);
+			if(redstoneUpdateInfo8.x == integer2 && redstoneUpdateInfo8.y == integer3 && redstoneUpdateInfo8.z == integer4) {
+				++i6;
+				if(i6 >= 8) {
+					return true;
+				}
+			}
+		}
+
+		return false;
+	}
+
+	protected BlockRedstoneTorchOld(int integer1, int integer2, boolean boolean3) {
+		super(integer1, integer2);
+		this.torchActive = boolean3;
+		this.setTickOnLoad(true);
+	}
+
+	public int tickRate() {
+		return 2;
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+		if(vg.getBlockMetadata(integer2, integer3, integer4) == 0) {
+			super.onBlockAdded(vg, integer2, integer3, integer4);
+		}
+
+		if(this.torchActive) {
+			vg.notifyBlocksOfNeighborChange(integer2, integer3 - 1, integer4, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3 + 1, integer4, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2 - 1, integer3, integer4, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2 + 1, integer3, integer4, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 - 1, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 + 1, this.blockID);
+		}
+
+	}
+
+	public void onBlockRemoval(World vg, int integer2, int integer3, int integer4) {
+		if(this.torchActive) {
+			vg.notifyBlocksOfNeighborChange(integer2, integer3 - 1, integer4, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3 + 1, integer4, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2 - 1, integer3, integer4, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2 + 1, integer3, integer4, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 - 1, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 + 1, this.blockID);
+		}
+
+	}
+
+	public boolean isPoweringTo(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		if(!this.torchActive) {
+			return false;
+		} else {
+			int i6 = abt.getBlockMetadata(integer2, integer3, integer4);
+			return i6 == 5 && integer5 == 1 ? false : (i6 == 3 && integer5 == 3 ? false : (i6 == 4 && integer5 == 2 ? false : (i6 == 1 && integer5 == 5 ? false : i6 != 2 || integer5 != 4)));
+		}
+	}
+
+	private boolean isIndirectlyPowered(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockMetadata(integer2, integer3, integer4);
+		return i5 == 5 && vg.isBlockIndirectlyProvidingPowerTo(integer2, integer3 - 1, integer4, 0) ? true : (i5 == 3 && vg.isBlockIndirectlyProvidingPowerTo(integer2, integer3, integer4 - 1, 2) ? true : (i5 == 4 && vg.isBlockIndirectlyProvidingPowerTo(integer2, integer3, integer4 + 1, 3) ? true : (i5 == 1 && vg.isBlockIndirectlyProvidingPowerTo(integer2 - 1, integer3, integer4, 4) ? true : i5 == 2 && vg.isBlockIndirectlyProvidingPowerTo(integer2 + 1, integer3, integer4, 5))));
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		boolean z6 = this.isIndirectlyPowered(vg, integer2, integer3, integer4);
+
+		while(torchUpdates.size() > 0 && vg.worldTime - ((RedstoneUpdateInfo)torchUpdates.get(0)).updateTime > 100L) {
+			torchUpdates.remove(0);
+		}
+
+		if(this.torchActive) {
+			if(z6) {
+				vg.setBlockAndMetadataWithNotify(integer2, integer3, integer4, BlockOld.torchRedstoneIdle.blockID, vg.getBlockMetadata(integer2, integer3, integer4));
+				if(this.checkForBurnout(vg, integer2, integer3, integer4, true)) {
+					vg.playSoundEffect((double)((float)integer2 + 0.5F), (double)((float)integer3 + 0.5F), (double)((float)integer4 + 0.5F), "random.fizz", 0.5F, 2.6F + (vg.rand.nextFloat() - vg.rand.nextFloat()) * 0.8F);
+
+					for(int i7 = 0; i7 < 5; ++i7) {
+						double d8 = (double)integer2 + random.nextDouble() * 0.6D + 0.2D;
+						double d10 = (double)integer3 + random.nextDouble() * 0.6D + 0.2D;
+						double d12 = (double)integer4 + random.nextDouble() * 0.6D + 0.2D;
+						vg.spawnParticle("smoke", d8, d10, d12, 0.0D, 0.0D, 0.0D);
+					}
+				}
+			}
+		} else if(!z6 && !this.checkForBurnout(vg, integer2, integer3, integer4, false)) {
+			vg.setBlockAndMetadataWithNotify(integer2, integer3, integer4, BlockOld.torchRedstoneActive.blockID, vg.getBlockMetadata(integer2, integer3, integer4));
+		}
+
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		super.onNeighborBlockChange(vg, integer2, integer3, integer4, integer5);
+		vg.scheduleBlockUpdate(integer2, integer3, integer4, this.blockID);
+	}
+
+	public boolean isIndirectlyPoweringTo(World vg, int integer2, int integer3, int integer4, int integer5) {
+		return integer5 == 0 ? this.isPoweringTo(vg, integer2, integer3, integer4, integer5) : false;
+	}
+
+	public int idDropped(int integer, Random random) {
+		return BlockOld.torchRedstoneActive.blockID;
+	}
+
+	public boolean canProvidePower() {
+		return true;
+	}
+
+	public void randomDisplayTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(this.torchActive) {
+			int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+			double d7 = (double)((float)integer2 + 0.5F) + (double)(random.nextFloat() - 0.5F) * 0.2D;
+			double d9 = (double)((float)integer3 + 0.7F) + (double)(random.nextFloat() - 0.5F) * 0.2D;
+			double d11 = (double)((float)integer4 + 0.5F) + (double)(random.nextFloat() - 0.5F) * 0.2D;
+			double d13 = (double)0.22F;
+			double d15 = (double)0.27F;
+			if(i6 == 1) {
+				vg.spawnParticle("reddust", d7 - d15, d9 + d13, d11, 0.0D, 0.0D, 0.0D);
+			} else if(i6 == 2) {
+				vg.spawnParticle("reddust", d7 + d15, d9 + d13, d11, 0.0D, 0.0D, 0.0D);
+			} else if(i6 == 3) {
+				vg.spawnParticle("reddust", d7, d9 + d13, d11 - d15, 0.0D, 0.0D, 0.0D);
+			} else if(i6 == 4) {
+				vg.spawnParticle("reddust", d7, d9 + d13, d11 + d15, 0.0D, 0.0D, 0.0D);
+			} else {
+				vg.spawnParticle("reddust", d7, d9, d11, 0.0D, 0.0D, 0.0D);
+			}
+
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/ItemSpear.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class ItemSpear extends Item {
+	public ItemSpear(int itemID) {
+		super(itemID);
+		this.maxStackSize = 8;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		if(entityPlayer.inventory.consumeInventoryItem(ExtItems.Spear.shiftedIndex)) {
+			worldObj.playSoundAtEntity(entityPlayer, "random.bow", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+			worldObj.spawnEntityInWorld(new EntitySpear(worldObj, entityPlayer));
+		}
+
+		return itemStack;
+	}
+}
--- /dev/null
+++ net/minecraft/src/PlayerControllerSPUnknownClass2.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.input.Keyboard;
+
+public class PlayerControllerSPUnknownClass2 extends PlayerControllerSP {
+	public PlayerControllerSPUnknownClass2(Minecraft minecraft) {
+		super(minecraft);
+	}
+
+	public boolean sendBlockRemoved(int x, int y, int z, int side) {
+		return !Keyboard.isKeyDown(Keyboard.KEY_RSHIFT) ? false : super.sendBlockRemoved(x, y, z, side);
+	}
+
+	public void sendBlockRemoving(int x, int y, int z, int side) {
+		if(Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
+			super.sendBlockRemoving(x, y, z, side);
+		}
+	}
+}
--- net/minecraft/src/FontRenderer.java
+++ net/minecraft/src/FontRenderer.java
@@ -4,6 +4,7 @@
 import java.io.IOException;
 import java.nio.IntBuffer;
 import javax.imageio.ImageIO;
+
 import org.lwjgl.opengl.GL11;
 
 public class FontRenderer {
@@ -12,147 +13,150 @@
 	private int fontDisplayLists;
 	private IntBuffer buffer = GLAllocation.createDirectIntBuffer(1024);
 
-	public FontRenderer(GameSettings var1, String var2, RenderEngine var3) {
-		BufferedImage var4;
+	public FontRenderer(GameSettings we, String string, RenderEngine aee) {
+		BufferedImage bufferedImage4;
 		try {
-			var4 = ImageIO.read(RenderEngine.class.getResourceAsStream(var2));
-		} catch (IOException var18) {
-			throw new RuntimeException(var18);
+			bufferedImage4 = ImageIO.read(aee.field_12279_8nB09v2wL31LD7473aXNMbJrX47AX71iPMP6yPX544heeDvxj78y5qTJYk68.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0.getResourceAsStream(string));
+		} catch (IOException iOException18) {
+			throw new RuntimeException(iOException18);
 		}
 
-		int var5 = var4.getWidth();
-		int var6 = var4.getHeight();
-		int[] var7 = new int[var5 * var6];
-		var4.getRGB(0, 0, var5, var6, var7, 0, var5);
-
-		int var9;
-		int var10;
-		int var11;
-		int var12;
-		int var15;
-		int var16;
-		for(int var8 = 0; var8 < 256; ++var8) {
-			var9 = var8 % 16;
-			var10 = var8 / 16;
-
-			for(var11 = 7; var11 >= 0; --var11) {
-				var12 = var9 * 8 + var11;
-				boolean var13 = true;
-
-				for(int var14 = 0; var14 < 8 && var13; ++var14) {
-					var15 = (var10 * 8 + var14) * var5;
-					var16 = var7[var12 + var15] & 255;
-					if(var16 > 0) {
-						var13 = false;
+		int i5 = bufferedImage4.getWidth();
+		int i6 = bufferedImage4.getHeight();
+		int[] i7 = new int[i5 * i6];
+		bufferedImage4.getRGB(0, 0, i5, i6, i7, 0, i5);
+
+		int i8;
+		int i9;
+		int i10;
+		int i11;
+		int i12;
+		int i13;
+		for(int i14 = 0; i14 < 256; ++i14) {
+			i8 = i14 % 16;
+			i9 = i14 / 16;
+
+			for(i10 = 7; i10 >= 0; --i10) {
+				i11 = i8 * 8 + i10;
+				boolean z15 = true;
+
+				for(int i16 = 0; i16 < 8 && z15; ++i16) {
+					i12 = (i9 * 8 + i16) * i5;
+					i13 = i7[i11 + i12] & 255;
+					if(i13 > 0) {
+						z15 = false;
 					}
 				}
 
-				if(!var13) {
+				if(!z15) {
 					break;
 				}
 			}
 
-			if(var8 == 32) {
-				var11 = 2;
+			if(i14 == 32) {
+				i10 = 2;
 			}
 
-			this.charWidth[var8] = var11 + 2;
+			this.charWidth[i14] = i10 + 2;
 		}
 
-		this.fontTextureName = var3.allocateAndSetupTexture(var4);
+		this.fontTextureName = aee.allocateAndSetupTexture(bufferedImage4);
 		this.fontDisplayLists = GLAllocation.generateDisplayLists(288);
-		Tessellator var19 = Tessellator.instance;
-
-		for(var9 = 0; var9 < 256; ++var9) {
-			GL11.glNewList(this.fontDisplayLists + var9, GL11.GL_COMPILE);
-			var19.startDrawingQuads();
-			var10 = var9 % 16 * 8;
-			var11 = var9 / 16 * 8;
-			float var20 = 7.99F;
-			float var21 = 0.0F;
-			float var23 = 0.0F;
-			var19.addVertexWithUV(0.0D, (double)(0.0F + var20), 0.0D, (double)((float)var10 / 128.0F + var21), (double)(((float)var11 + var20) / 128.0F + var23));
-			var19.addVertexWithUV((double)(0.0F + var20), (double)(0.0F + var20), 0.0D, (double)(((float)var10 + var20) / 128.0F + var21), (double)(((float)var11 + var20) / 128.0F + var23));
-			var19.addVertexWithUV((double)(0.0F + var20), 0.0D, 0.0D, (double)(((float)var10 + var20) / 128.0F + var21), (double)((float)var11 / 128.0F + var23));
-			var19.addVertexWithUV(0.0D, 0.0D, 0.0D, (double)((float)var10 / 128.0F + var21), (double)((float)var11 / 128.0F + var23));
-			var19.draw();
-			GL11.glTranslatef((float)this.charWidth[var9], 0.0F, 0.0F);
-			GL11.glEndList();
-		}
-
-		for(var9 = 0; var9 < 32; ++var9) {
-			var10 = (var9 >> 3 & 1) * 85;
-			var11 = (var9 >> 2 & 1) * 170 + var10;
-			var12 = (var9 >> 1 & 1) * 170 + var10;
-			int var22 = (var9 >> 0 & 1) * 170 + var10;
-			if(var9 == 6) {
-				var11 += 85;
-			}
-
-			boolean var24 = var9 >= 16;
-			if(var1.anaglyph) {
-				var15 = (var11 * 30 + var12 * 59 + var22 * 11) / 100;
-				var16 = (var11 * 30 + var12 * 70) / 100;
-				int var17 = (var11 * 30 + var22 * 70) / 100;
-				var11 = var15;
-				var12 = var16;
-				var22 = var17;
-			}
-
-			if(var24) {
-				var11 /= 4;
-				var12 /= 4;
-				var22 /= 4;
-			}
-
-			GL11.glNewList(this.fontDisplayLists + 256 + var9, GL11.GL_COMPILE);
-			GL11.glColor3f((float)var11 / 255.0F, (float)var12 / 255.0F, (float)var22 / 255.0F);
-			GL11.glEndList();
-		}
-
-	}
-
-	public void drawStringWithShadow(String var1, int var2, int var3, int var4) {
-		this.renderString(var1, var2 + 1, var3 + 1, var4, true);
-		this.drawString(var1, var2, var3, var4);
-	}
-
-	public void drawString(String var1, int var2, int var3, int var4) {
-		this.renderString(var1, var2, var3, var4, false);
-	}
-
-	public void renderString(String var1, int var2, int var3, int var4, boolean var5) {
-		if(var1 != null) {
-			int var6;
-			if(var5) {
-				var6 = var4 & -16777216;
-				var4 = (var4 & 16579836) >> 2;
-				var4 += var6;
-			}
-
+		Tessellator tessellator19 = Tessellator.instance;
+
+		for(i8 = 0; i8 < 256; ++i8) {
+			GL11.glNewList(this.fontDisplayLists + i8, GL11.GL_COMPILE);
+			tessellator19.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			i9 = i8 % 16 * 8;
+			i10 = i8 / 16 * 8;
+			float f20 = 7.99F;
+			float f22 = 0.0F;
+			float f17 = 0.0F;
+			tessellator19.addVertexWithUV(0.0D, (double)(0.0F + f20), 0.0D, (double)((float)i9 / 128.0F + f22), (double)(((float)i10 + f20) / 128.0F + f17));
+			tessellator19.addVertexWithUV((double)(0.0F + f20), (double)(0.0F + f20), 0.0D, (double)(((float)i9 + f20) / 128.0F + f22), (double)(((float)i10 + f20) / 128.0F + f17));
+			tessellator19.addVertexWithUV((double)(0.0F + f20), 0.0D, 0.0D, (double)(((float)i9 + f20) / 128.0F + f22), (double)((float)i10 / 128.0F + f17));
+			tessellator19.addVertexWithUV(0.0D, 0.0D, 0.0D, (double)((float)i9 / 128.0F + f22), (double)((float)i10 / 128.0F + f17));
+			tessellator19.draw();
+			GL11.glTranslatef((float)this.charWidth[i8], 0.0F, 0.0F);
+			GL11.glEndList();
+		}
+
+		for(i8 = 0; i8 < 32; ++i8) {
+			i9 = (i8 >> 3 & 1) * 85;
+			i10 = (i8 >> 2 & 1) * 170 + i9;
+			i11 = (i8 >> 1 & 1) * 170 + i9;
+			int i21 = (i8 >> 0 & 1) * 170 + i9;
+			if(i8 == 6) {
+				i10 += 85;
+			}
+
+			boolean z23 = i8 >= 16;
+			if(we.anaglyph) {
+				i12 = (i10 * 30 + i11 * 59 + i21 * 11) / 100;
+				i13 = (i10 * 30 + i11 * 70) / 100;
+				int i24 = (i10 * 30 + i21 * 70) / 100;
+				i10 = i12;
+				i11 = i13;
+				i21 = i24;
+			}
+
+			if(z23) {
+				i10 /= 4;
+				i11 /= 4;
+				i21 /= 4;
+			}
+
+			GL11.glNewList(this.fontDisplayLists + 256 + i8, GL11.GL_COMPILE);
+			GL11.glColor3f((float)i10 / 255.0F, (float)i11 / 255.0F, (float)i21 / 255.0F);
+			GL11.glEndList();
+		}
+
+	}
+
+	public void drawStringWithShadow(String string, int integer2, int integer3, int integer4) {
+		this.renderString(string, integer2 + 1, integer3 + 1, integer4, true);
+		this.drawString(string, integer2, integer3, integer4);
+	}
+
+	public void drawString(String string, int integer2, int integer3, int integer4) {
+		this.renderString(string, integer2, integer3, integer4, false);
+	}
+
+	public void renderString(String string, int integer2, int integer3, int integer4, boolean boolean5) {
+		if(string != null) {
+			int i6;
+			if(boolean5) {
+				i6 = integer4 & 0xFF000000;
+				integer4 = (integer4 & 16579836) >> 2;
+				integer4 += i6;
+				integer4 = i6 != 255 && i6 != 0 ? integer4 | i6 / 2 << 24 : (integer4 |= 0xFF000000);
+			}
+
+			GL11.glEnable(GL11.GL_BLEND);
+			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.fontTextureName);
-			float var10 = (float)(var4 >> 16 & 255) / 255.0F;
-			float var7 = (float)(var4 >> 8 & 255) / 255.0F;
-			float var8 = (float)(var4 & 255) / 255.0F;
-			float var9 = (float)(var4 >> 24 & 255) / 255.0F;
-			if(var9 == 0.0F) {
-				var9 = 1.0F;
+			float f7 = (float)(integer4 >> 16 & 255) / 255.0F;
+			float f8 = (float)(integer4 >> 8 & 255) / 255.0F;
+			float f9 = (float)(integer4 & 255) / 255.0F;
+			float f10 = (float)(integer4 >> 24 & 255) / 255.0F;
+			if(f10 == 0.0F) {
+				f10 = 1.0F;
 			}
 
-			GL11.glColor4f(var10, var7, var8, var9);
+			GL11.glColor4f(f7, f8, f9, f10);
 			this.buffer.clear();
 			GL11.glPushMatrix();
-			GL11.glTranslatef((float)var2, (float)var3, 0.0F);
+			GL11.glTranslatef((float)integer2, (float)integer3, 0.0F);
 
-			for(var6 = 0; var6 < var1.length(); ++var6) {
-				int var11;
-				for(; var1.charAt(var6) == 167 && var1.length() > var6 + 1; var6 += 2) {
-					var11 = "0123456789abcdef".indexOf(var1.toLowerCase().charAt(var6 + 1));
-					if(var11 < 0 || var11 > 15) {
-						var11 = 15;
+			for(i6 = 0; i6 < string.length(); ++i6) {
+				int i11;
+				for(; string.charAt(i6) == 167 && string.length() > i6 + 1; i6 += 2) {
+					i11 = "0123456789abcdef".indexOf(string.toLowerCase().charAt(i6 + 1));
+					if(i11 < 0 || i11 > 15) {
+						i11 = 15;
 					}
 
-					this.buffer.put(this.fontDisplayLists + 256 + var11 + (var5 ? 16 : 0));
+					this.buffer.put(this.fontDisplayLists + 256 + i11 + (boolean5 ? 16 : 0));
 					if(this.buffer.remaining() == 0) {
 						this.buffer.flip();
 						GL11.glCallLists(this.buffer);
@@ -160,9 +164,9 @@
 					}
 				}
 
-				var11 = " !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(var1.charAt(var6));
-				if(var11 >= 0) {
-					this.buffer.put(this.fontDisplayLists + var11 + 32);
+				i11 = " !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(string.charAt(i6));
+				if(i11 >= 0) {
+					this.buffer.put(this.fontDisplayLists + i11 + 32);
 				}
 
 				if(this.buffer.remaining() == 0) {
@@ -176,26 +180,27 @@
 			GL11.glCallLists(this.buffer);
 			GL11.glPopMatrix();
 		}
+
 	}
 
-	public int getStringWidth(String var1) {
-		if(var1 == null) {
+	public int getStringWidth(String string) {
+		if(string == null) {
 			return 0;
 		} else {
-			int var2 = 0;
+			int i2 = 0;
 
-			for(int var3 = 0; var3 < var1.length(); ++var3) {
-				if(var1.charAt(var3) == 167) {
-					++var3;
+			for(int i3 = 0; i3 < string.length(); ++i3) {
+				if(string.charAt(i3) == 167) {
+					++i3;
 				} else {
-					int var4 = " !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(var1.charAt(var3));
-					if(var4 >= 0) {
-						var2 += this.charWidth[var4 + 32];
+					int i4 = " !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(string.charAt(i3));
+					if(i4 >= 0) {
+						i2 += this.charWidth[i4 + 32];
 					}
 				}
 			}
 
-			return var2;
+			return i2;
 		}
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenHouseSmall.java
@@ -1,0 +1,361 @@
+package net.minecraft.src;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Random;
+import java.util.Map.Entry;
+
+public class WorldGenHouseSmall extends WorldGenerator {
+	public static int field_9665_9HHBzQ2wG84LFbc45tMzL7mAlvvdO1k855mGGSfk3FfJP80LupQs710X4K6J = 25;
+	private final Map field_9667_9IWUn864qx5IO5om711HK5Sftm12yv0GK3QrtVY84g747HU1IztC3G1RDFZ6 = new HashMap();
+	private final HashMap field_9666_6A95w6TCKMljjJy1nntH1rW395Pix9TTxJ3jQYOCs5ip238cYFQFYZLOL6xM = new HashMap();
+
+	private WorldGenHouseSmallUnknownClass5 func_9664_4bSggIjY4Y8PdaaH85z1zIqMCNm5aG4TqjidsQP1lxcesP15aXOIcvtKAyC8(World vg, Random random, int integer3, int integer4, int integer5, WorldGenHouseSmallUnknownClass2 ns, int integer7) {
+		return this.func_9663_9pTy4yiDSYYiMgi1p82kZR862lr5vjJNqdi8KePH7dH2wrISOg522L69fb4R(vg, random, integer3, integer4, integer5, ns, integer7, new WorldUnknownClass3(0));
+	}
+
+	private WorldGenHouseSmallUnknownClass5 func_9663_9pTy4yiDSYYiMgi1p82kZR862lr5vjJNqdi8KePH7dH2wrISOg522L69fb4R(World vg, Random random, int integer3, int integer4, int integer5, WorldGenHouseSmallUnknownClass2 ns, int integer7, WorldUnknownClass3 abc) {
+		if(this.field_9667_9IWUn864qx5IO5om711HK5Sftm12yv0GK3QrtVY84g747HU1IztC3G1RDFZ6.containsKey(ns)) {
+			return null;
+		} else {
+			this.field_9667_9IWUn864qx5IO5om711HK5Sftm12yv0GK3QrtVY84g747HU1IztC3G1RDFZ6.put(ns, (Object)null);
+			if(vg.getBlockId(integer3, integer4, integer5) != 0) {
+				return null;
+			} else {
+				while(vg.getBlockId(integer3, integer4, integer5) == 0) {
+					--integer4;
+					if(integer4 <= 0) {
+						return null;
+					}
+				}
+
+				if(integer4 > 104) {
+					return null;
+				} else {
+					integer4 /= 4;
+					++integer4;
+					integer4 *= 4;
+					int i9 = 3 + random.nextInt(3);
+					int i10 = (116 - integer4) / 4 - 2;
+					if(i10 <= 0) {
+						return null;
+					} else {
+						int i11 = 2 + random.nextInt(i10);
+						WorldGenHouseSmallUnknownClass5 worldGenHouseSmallUnknownClass512 = new WorldGenHouseSmallUnknownClass5(i9, i11, integer3, integer4, integer5);
+
+						int i13;
+						int i14;
+						int i15;
+						for(i13 = -i9 + 1; i13 <= i9 - 1; ++i13) {
+							for(i14 = 1; i14 <= 3; ++i14) {
+								for(i15 = 0; i15 <= i11; ++i15) {
+									vg.setBlock(i13 + integer3, integer4 + 4 * i15 + i14, -i9 + 1 + integer5, ExtBlocks.SlateBricks.blockID);
+									vg.setBlock(i13 + integer3, integer4 + 4 * i15 + i14, i9 - 1 + integer5, ExtBlocks.SlateBricks.blockID);
+									vg.setBlock(-i9 + 1 + integer3, integer4 + 4 * i15 + i14, i13 + integer5, ExtBlocks.SlateBricks.blockID);
+									vg.setBlock(i9 - 1 + integer3, integer4 + 4 * i15 + i14, i13 + integer5, ExtBlocks.SlateBricks.blockID);
+								}
+							}
+						}
+
+						for(i13 = -i9; i13 <= i9; ++i13) {
+							for(i14 = -i9; i14 <= i9; ++i14) {
+								for(i15 = 0; i15 <= i11 + 1; ++i15) {
+									vg.setBlock(i13 + integer3, integer4 + 4 * i15, i14 + integer5, ExtBlocks.SmoothStone.blockID);
+								}
+							}
+						}
+
+						for(i13 = 1; i13 <= 3; ++i13) {
+							for(i14 = 0; i14 <= i11; ++i14) {
+								vg.setBlock(i9 + integer3, integer4 + 4 * i14 + i13, -i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+								vg.setBlock(-i9 + integer3, integer4 + 4 * i14 + i13, i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+								vg.setBlock(-i9 + integer3, integer4 + 4 * i14 + i13, -i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+								vg.setBlock(i9 + integer3, integer4 + 4 * i14 + i13, i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+							}
+						}
+
+						for(i13 = -i9 + 1; i13 <= i9 - 1; ++i13) {
+							for(i14 = -i9 + 1; i14 <= i9 - 1; ++i14) {
+								for(i15 = integer4 - 1; i15 > 0 && vg.getBlockId(i13 + integer3, i15, i14 + integer5) == 0; --i15) {
+									vg.setBlock(i13 + integer3, i15, i14 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+								}
+							}
+						}
+
+						int i16;
+						int i17;
+						int i18;
+						for(i13 = 0; i13 < i11; ++i13) {
+							i14 = integer4 + 1 + 4 * i13;
+							EnumHouseSmall[] enumHouseSmall28 = new EnumHouseSmall[4];
+							worldGenHouseSmallUnknownClass512.field_12172_7EQ6jd3x88fSv4M9BHi7s57Y778Lr34WSc98fXK3YndnTY5T4cO73NCZv1zn.add(enumHouseSmall28);
+
+							for(i16 = 0; i16 < 4; ++i16) {
+								enumHouseSmall28[i16] = EnumHouseSmall.NORMAL;
+							}
+
+							for(i16 = 0; i16 < 4; ++i16) {
+								i17 = 0;
+								i18 = (i16 & 2) - 1;
+								if(i16 % 2 == 1) {
+									i17 = i18;
+									i18 = 0;
+								}
+
+								int i19 = i17 * (i9 - 1) + integer3;
+								int i20 = i18 * (i9 - 1) + integer5;
+								switch(random.nextInt(5)) {
+								case 1:
+									vg.setBlock(i19, i14 + 1, i20, ExtBlocks.WireframeBlock.blockID);
+									enumHouseSmall28[i16] = EnumHouseSmall.WINDOW;
+									break;
+								case 2:
+									WorldGenHouseSmallUnknownClass2 worldGenHouseSmallUnknownClass221 = new WorldGenHouseSmallUnknownClass2(ns.func_11105_5ZR6ielH0gxIT8YmA1m4F65rkWUs4cP2723lV4Hy6tl6rO7opLrvOyTWthww() + i17, ns.func_11106_47IAru15P2DzBMMdHFDJNZXRKMMGzW0ZSLEGX87l25z9CdPzg63Pq5T04vvr() + i18);
+									if(!this.field_9667_9IWUn864qx5IO5om711HK5Sftm12yv0GK3QrtVY84g747HU1IztC3G1RDFZ6.containsKey(worldGenHouseSmallUnknownClass221)) {
+										enumHouseSmall28[i16] = EnumHouseSmall.DOOR;
+
+										for(int i22 = 0; i22 <= integer7 / 2 + 1; ++i22) {
+											if(random.nextInt(integer7 + 1) == 0 && ((Integer)abc.field_12076_0yKQEI9scMQYs2U79FTz0taKE8d93C90G8erLBZDQ88O3Q6XJ3zC1l0lXK1q).intValue() < field_9665_9HHBzQ2wG84LFbc45tMzL7mAlvvdO1k855mGGSfk3FfJP80LupQs710X4K6J) {
+												Integer integer24 = (Integer)abc.field_12076_0yKQEI9scMQYs2U79FTz0taKE8d93C90G8erLBZDQ88O3Q6XJ3zC1l0lXK1q;
+												abc.field_12076_0yKQEI9scMQYs2U79FTz0taKE8d93C90G8erLBZDQ88O3Q6XJ3zC1l0lXK1q = ((Integer)abc.field_12076_0yKQEI9scMQYs2U79FTz0taKE8d93C90G8erLBZDQ88O3Q6XJ3zC1l0lXK1q).intValue() + 1;
+												int i23 = i9 + 8 + random.nextInt(3);
+												WorldGenHouseSmallUnknownClass5 worldGenHouseSmallUnknownClass529 = this.func_9663_9pTy4yiDSYYiMgi1p82kZR862lr5vjJNqdi8KePH7dH2wrISOg522L69fb4R(vg, random, integer3 + i17 * i23, 128, integer5 + i18 * i23, worldGenHouseSmallUnknownClass221, integer7 + 1, abc);
+												if(worldGenHouseSmallUnknownClass529 == null || worldGenHouseSmallUnknownClass529.field_12175_2H1YgXg1iR1kd9fC2ubGim1KGwSPUAnw9qg68y5mGH12kgO6dN8w61caMKO3 + (worldGenHouseSmallUnknownClass529.field_12173_7fAKjHW1LE847OSwtPxt16L6WGEi68u7u6fWOmkZTpO3ZbiE0TR39wTva1vJ + 1) * 4 < i14) {
+													break;
+												}
+
+												vg.setBlock(i19, i14, i20, 0);
+												vg.setBlock(i19, i14 + 1, i20, 0);
+
+												for(int i25 = i9; i25 < i23 - worldGenHouseSmallUnknownClass529.field_12171_5UJO83Sal8307YLDFyzIt779v5qD6812ur6y32x891iN95OgW8FOAZDB1pNG + 1; ++i25) {
+													i19 += i17;
+													i20 += i18;
+
+													for(int i26 = -1; i26 <= 1; ++i26) {
+														for(int i27 = -1; i27 <= 1; ++i27) {
+															if(vg.getBlockId(i19 + i26, i14 - 1, i20 + i27) == 0) {
+																vg.setBlock(i19 + i26, i14 - 1, i20 + i27, ExtBlocks.SlatePillar.blockID);
+															}
+														}
+													}
+												}
+
+												i19 += i17;
+												i20 += i18;
+												vg.setBlock(i19, i14, i20, 0);
+												vg.setBlock(i19, i14 + 1, i20, 0);
+												break;
+											}
+										}
+									}
+								}
+							}
+						}
+
+						i13 = integer4 + (i11 + 1) * 4 + 1;
+
+						for(i14 = 0; i14 <= 1; ++i14) {
+							vg.setBlock(i9 + integer3, i13 + i14, -i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+							vg.setBlock(-i9 + integer3, i13 + i14, i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+							vg.setBlock(-i9 + integer3, i13 + i14, -i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+							vg.setBlock(i9 + integer3, i13 + i14, i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+						}
+
+						if(random.nextInt(10) == 0) {
+							vg.setBlock(integer3, i13 + i9, integer5, ExtBlocks.essenceFountain.blockID);
+							vg.setBlock(integer3, i13 + i9 - 1, integer5, ExtBlocks.FlamewoodPillar.blockID);
+
+							for(i14 = 0; i14 < i9 - 1; ++i14) {
+								for(i15 = -i9 + 1 + i14; i15 <= i9 - 1 - i14; ++i15) {
+									for(i16 = -i9 + 1 + i14; i16 <= i9 - 1 - i14; ++i16) {
+										vg.setBlock(integer3 + i15, i13 + i14, integer5 + i16, ExtBlocks.SlateBeacon.blockID);
+									}
+								}
+							}
+						} else {
+							for(i14 = 0; i14 <= 1; ++i14) {
+								vg.setBlock(i9 - 1 + integer3, i13 + i14, -i9 + 1 + integer5, ExtBlocks.SlateBricks.blockID);
+								vg.setBlock(-i9 + 1 + integer3, i13 + i14, i9 - 1 + integer5, ExtBlocks.SlateBricks.blockID);
+								vg.setBlock(-i9 + 1 + integer3, i13 + i14, -i9 + 1 + integer5, ExtBlocks.SlateBricks.blockID);
+								vg.setBlock(i9 - 1 + integer3, i13 + i14, i9 - 1 + integer5, ExtBlocks.SlateBricks.blockID);
+							}
+
+							vg.setBlock(i9 - 2 + integer3, i13, -i9 + 1 + integer5, ExtBlocks.SlateBricks.blockID);
+							vg.setBlock(-i9 + 2 + integer3, i13, i9 - 1 + integer5, ExtBlocks.SlateBricks.blockID);
+							vg.setBlock(-i9 + 2 + integer3, i13, -i9 + 1 + integer5, ExtBlocks.SlateBricks.blockID);
+							vg.setBlock(i9 - 2 + integer3, i13, i9 - 1 + integer5, ExtBlocks.SlateBricks.blockID);
+							vg.setBlock(i9 - 1 + integer3, i13, -i9 + 2 + integer5, ExtBlocks.SlateBricks.blockID);
+							vg.setBlock(-i9 + 1 + integer3, i13, i9 - 2 + integer5, ExtBlocks.SlateBricks.blockID);
+							vg.setBlock(-i9 + 1 + integer3, i13, -i9 + 2 + integer5, ExtBlocks.SlateBricks.blockID);
+							vg.setBlock(i9 - 1 + integer3, i13, i9 - 2 + integer5, ExtBlocks.SlateBricks.blockID);
+						}
+
+						for(i13 = 0; i13 <= i11; ++i13) {
+							if(i11 != i13) {
+								i14 = random.nextInt(4);
+								i15 = (1 + random.nextInt(i9 - 2)) * (random.nextInt(2) * 2 - 1);
+								i16 = 0;
+								i17 = 0;
+								switch(i14) {
+								case 0:
+									i16 = integer3 + i15;
+									i17 = integer5 + i9 - 2;
+									break;
+								case 1:
+									i16 = integer3 + i15;
+									i17 = integer5 - i9 + 2;
+									break;
+								case 2:
+									i16 = integer3 + i9 - 2;
+									i17 = integer5 + i15;
+									break;
+								case 3:
+									i16 = integer3 - i9 + 2;
+									i17 = integer5 + i15;
+								}
+
+								for(i18 = 1; i18 <= 4; ++i18) {
+									vg.setBlock(i16, integer4 + i18 + i13 * 4, i17, Block.ladder.blockID);
+									vg.setBlockMetadata(i16, integer4 + i18 + i13 * 4, i17, i14 + 2);
+								}
+							}
+						}
+
+						this.field_9667_9IWUn864qx5IO5om711HK5Sftm12yv0GK3QrtVY84g747HU1IztC3G1RDFZ6.put(ns, worldGenHouseSmallUnknownClass512);
+						return worldGenHouseSmallUnknownClass512;
+					}
+				}
+			}
+		}
+	}
+
+	private void func_9661_00EILg3OmCfJhYO3i3J4ybeenZj4OZ0JmTbQvREppfrHT8BnI9Z3yfR0OsE4(World vg, Random random) {
+		Iterator iterator3 = this.field_9667_9IWUn864qx5IO5om711HK5Sftm12yv0GK3QrtVY84g747HU1IztC3G1RDFZ6.entrySet().iterator();
+
+		while(true) {
+			label115:
+			while(true) {
+				Entry map$Entry4;
+				do {
+					do {
+						if(!iterator3.hasNext()) {
+							return;
+						}
+
+						map$Entry4 = (Entry)iterator3.next();
+					} while(map$Entry4.getValue() == null);
+				} while(((WorldGenHouseSmallUnknownClass5)map$Entry4.getValue()).field_12173_7fAKjHW1LE847OSwtPxt16L6WGEi68u7u6fWOmkZTpO3ZbiE0TR39wTva1vJ < 8);
+
+				WorldGenHouseSmallUnknownClass5 worldGenHouseSmallUnknownClass55 = (WorldGenHouseSmallUnknownClass5)map$Entry4.getValue();
+
+				for(int i6 = 4; i6 < worldGenHouseSmallUnknownClass55.field_12173_7fAKjHW1LE847OSwtPxt16L6WGEi68u7u6fWOmkZTpO3ZbiE0TR39wTva1vJ - 3; ++i6) {
+					label110:
+					for(int i7 = 0; i7 < 4; ++i7) {
+						int i8;
+						for(i8 = 0; i8 < 3; ++i8) {
+							if(((EnumHouseSmall[])worldGenHouseSmallUnknownClass55.field_12172_7EQ6jd3x88fSv4M9BHi7s57Y778Lr34WSc98fXK3YndnTY5T4cO73NCZv1zn.get(i6 + i8))[i7] != EnumHouseSmall.NORMAL) {
+								continue label110;
+							}
+						}
+
+						i8 = 0;
+						int i9 = (i7 & 2) - 1;
+						if(i7 % 2 == 1) {
+							i8 = i9;
+							i9 = 0;
+						}
+
+						WorldGenHouseSmallUnknownClass2 worldGenHouseSmallUnknownClass210 = new WorldGenHouseSmallUnknownClass2((WorldGenHouseSmallUnknownClass2)map$Entry4.getKey());
+						worldGenHouseSmallUnknownClass210.func_11104_0t72uE0X6e9X1lk504mMn0Usl2040LLyJIqoCM5A8QY4qQ7Bui0LPvUn4qLg(i8, i9);
+						WorldGenHouseSmallUnknownClass5 worldGenHouseSmallUnknownClass511 = (WorldGenHouseSmallUnknownClass5)this.field_9667_9IWUn864qx5IO5om711HK5Sftm12yv0GK3QrtVY84g747HU1IztC3G1RDFZ6.get(worldGenHouseSmallUnknownClass210);
+						int i12;
+						if(worldGenHouseSmallUnknownClass511 != null) {
+							i12 = Math.max(Math.abs(worldGenHouseSmallUnknownClass511.field_12170_8ceUXPOD34dVCWOlpGT5Do01b84rla5c3oO5uc195z07QUJ9oHb4k9hRdKb9 - worldGenHouseSmallUnknownClass55.field_12170_8ceUXPOD34dVCWOlpGT5Do01b84rla5c3oO5uc195z07QUJ9oHb4k9hRdKb9), Math.abs(worldGenHouseSmallUnknownClass511.field_12170_8ceUXPOD34dVCWOlpGT5Do01b84rla5c3oO5uc195z07QUJ9oHb4k9hRdKb9 - worldGenHouseSmallUnknownClass55.field_12170_8ceUXPOD34dVCWOlpGT5Do01b84rla5c3oO5uc195z07QUJ9oHb4k9hRdKb9));
+							if(i12 - worldGenHouseSmallUnknownClass511.field_12171_5UJO83Sal8307YLDFyzIt779v5qD6812ur6y32x891iN95OgW8FOAZDB1pNG - worldGenHouseSmallUnknownClass55.field_12171_5UJO83Sal8307YLDFyzIt779v5qD6812ur6y32x891iN95OgW8FOAZDB1pNG < 5) {
+								continue;
+							}
+						}
+
+						if(random.nextInt(10) == 0) {
+							int i22 = i8 * worldGenHouseSmallUnknownClass55.field_12171_5UJO83Sal8307YLDFyzIt779v5qD6812ur6y32x891iN95OgW8FOAZDB1pNG + worldGenHouseSmallUnknownClass55.field_12170_8ceUXPOD34dVCWOlpGT5Do01b84rla5c3oO5uc195z07QUJ9oHb4k9hRdKb9;
+							int i23 = i9 * worldGenHouseSmallUnknownClass55.field_12171_5UJO83Sal8307YLDFyzIt779v5qD6812ur6y32x891iN95OgW8FOAZDB1pNG + worldGenHouseSmallUnknownClass55.field_12174_2QgdUt39i2D2kz0DVgEK57x7SbqDO3VF01u5FKjDkJE4E2TM9g1sTnjxdetP;
+							i12 = i9;
+							int i13 = i8;
+							vg.setBlock(i22, worldGenHouseSmallUnknownClass55.field_12175_2H1YgXg1iR1kd9fC2ubGim1KGwSPUAnw9qg68y5mGH12kgO6dN8w61caMKO3 + i6 * 4 + 2, i23, ExtBlocks.ElderPillar.blockID);
+							vg.setBlock(i22, worldGenHouseSmallUnknownClass55.field_12175_2H1YgXg1iR1kd9fC2ubGim1KGwSPUAnw9qg68y5mGH12kgO6dN8w61caMKO3 + i6 * 4 + 8, i23, ExtBlocks.ElderPillar.blockID);
+							vg.setBlock(i22 + i8, worldGenHouseSmallUnknownClass55.field_12175_2H1YgXg1iR1kd9fC2ubGim1KGwSPUAnw9qg68y5mGH12kgO6dN8w61caMKO3 + i6 * 4 + 2, i23 + i9, ExtBlocks.ElderPillar.blockID);
+							vg.setBlock(i22 + i8, worldGenHouseSmallUnknownClass55.field_12175_2H1YgXg1iR1kd9fC2ubGim1KGwSPUAnw9qg68y5mGH12kgO6dN8w61caMKO3 + i6 * 4 + 8, i23 + i9, ExtBlocks.ElderPillar.blockID);
+
+							int[] i14;
+							for(i14 = new int[]{random.nextInt(5) + 1, random.nextInt(5) + 1, random.nextInt(5) + 1, random.nextInt(5) + 1}; Math.abs(i14[0] - i14[2]) == 1; i14[2] = random.nextInt(5) + 1) {
+								i14[0] = random.nextInt(5) + 1;
+							}
+
+							while(Math.abs(i14[1] - i14[3]) == 1) {
+								i14[1] = random.nextInt(5) + 1;
+								i14[3] = random.nextInt(5) + 1;
+							}
+
+							for(int i15 = worldGenHouseSmallUnknownClass55.field_12175_2H1YgXg1iR1kd9fC2ubGim1KGwSPUAnw9qg68y5mGH12kgO6dN8w61caMKO3 + i6 * 4 + 1; i15 <= worldGenHouseSmallUnknownClass55.field_12175_2H1YgXg1iR1kd9fC2ubGim1KGwSPUAnw9qg68y5mGH12kgO6dN8w61caMKO3 + i6 * 4 + 9; ++i15) {
+								for(int i16 = 0; i16 < 3; ++i16) {
+									boolean z17 = i16 == 1 && i15 != worldGenHouseSmallUnknownClass55.field_12175_2H1YgXg1iR1kd9fC2ubGim1KGwSPUAnw9qg68y5mGH12kgO6dN8w61caMKO3 + i6 * 4 + 1 && i15 != worldGenHouseSmallUnknownClass55.field_12175_2H1YgXg1iR1kd9fC2ubGim1KGwSPUAnw9qg68y5mGH12kgO6dN8w61caMKO3 + i6 * 4 + 9;
+									vg.setBlock(i22 + i8 * (2 + i16), i15, i23 + i9 * (2 + i16), !z17 ? ExtBlocks.ElderSmoothStone.blockID : ExtBlocks.ElderDecoratedStone.blockID);
+									if(z17) {
+										for(int i18 = -1; i18 <= 1; i18 += 2) {
+											byte b19 = 0;
+											i12 *= i18;
+											i13 *= i18;
+											if(i12 == 1) {
+												b19 = 5;
+											} else if(i12 == -1) {
+												b19 = 4;
+											} else if(i13 == 1) {
+												b19 = 3;
+											} else if(i13 == -1) {
+												b19 = 2;
+											}
+
+											i12 *= i18;
+											i13 *= i18;
+											int i20 = i15 - (worldGenHouseSmallUnknownClass55.field_12175_2H1YgXg1iR1kd9fC2ubGim1KGwSPUAnw9qg68y5mGH12kgO6dN8w61caMKO3 + i6 * 4 + 1);
+											if(i20 != i14[i18 + 1] && i20 != i14[i18 + 2]) {
+												int i21 = random.nextBoolean() ? ExtBlocks.SolarPlate.blockID : ExtBlocks.TrinityPlate.blockID;
+												vg.setBlockAndMetadataWithNotify(i22 + i8 * (2 + i16) + i12 * i18, i15, i23 + i9 * (2 + i16) + i13 * i18, i21 + random.nextInt(5), b19);
+											}
+										}
+									}
+								}
+							}
+							continue label115;
+						}
+					}
+				}
+			}
+		}
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		if(Math.abs(x) < 64 && Math.abs(z) < 64) {
+			return false;
+		} else {
+			this.func_9664_4bSggIjY4Y8PdaaH85z1zIqMCNm5aG4TqjidsQP1lxcesP15aXOIcvtKAyC8(world, rand, x, y, z, new WorldGenHouseSmallUnknownClass2(Ext1605Utils.func_12155_8Hz7yQrbpttYl62r56lFe782dI9GJEm7d3W4768d4S2Iay7QH2DbzVf66DGe(x, 196), Ext1605Utils.func_12155_8Hz7yQrbpttYl62r56lFe782dI9GJEm7d3W4768d4S2Iay7QH2DbzVf66DGe(z, 196)), 0);
+			this.func_9661_00EILg3OmCfJhYO3i3J4ybeenZj4OZ0JmTbQvREppfrHT8BnI9Z3yfR0OsE4(world, rand);
+			return true;
+		}
+	}
+
+	private WorldGenHouseSmallUnknownClass func_9662_6dKE8W4m3r1pcJ4AkaSl4NNeJjf9Xu15ce9m1bEB2krev7jJONoh6b6cnMkv(int integer1, int integer2, Random random) {
+		WorldGenHouseSmallUnknownClass2 worldGenHouseSmallUnknownClass24 = new WorldGenHouseSmallUnknownClass2(integer1 / 1000, integer2 / 1000);
+		if(this.field_9666_6A95w6TCKMljjJy1nntH1rW395Pix9TTxJ3jQYOCs5ip238cYFQFYZLOL6xM.containsKey(worldGenHouseSmallUnknownClass24)) {
+			return (WorldGenHouseSmallUnknownClass)this.field_9666_6A95w6TCKMljjJy1nntH1rW395Pix9TTxJ3jQYOCs5ip238cYFQFYZLOL6xM.get(worldGenHouseSmallUnknownClass24);
+		} else {
+			WorldGenHouseSmallUnknownClass worldGenHouseSmallUnknownClass5 = new WorldGenHouseSmallUnknownClass(random, worldGenHouseSmallUnknownClass24);
+			this.field_9666_6A95w6TCKMljjJy1nntH1rW395Pix9TTxJ3jQYOCs5ip238cYFQFYZLOL6xM.put(worldGenHouseSmallUnknownClass24, worldGenHouseSmallUnknownClass5);
+			return worldGenHouseSmallUnknownClass5;
+		}
+	}
+
+	public WorldGenHouseSmall(Random random) {
+	}
+}
--- /dev/null
+++ net/minecraft/src/Visuals1604Extended.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+class Visuals1604Extended extends Visuals {
+    final /* synthetic */ VisualsManager field_10076_027pvF1VLyNnJ8M484tjyXEaC151mdIM8Iq4A554pQ0f0Of4vrbqqb3AElG4;
+    
+    Visuals1604Extended(final VisualsManager la) {
+        this.field_10076_027pvF1VLyNnJ8M484tjyXEaC151mdIM8Iq4A554pQ0f0Of4vrbqqb3AElG4 = la;
+    }
+    
+    @Override
+    public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+        return "/unl/8db7811c-71de-11ee-b962-0242ac120002.xAL";
+    }
+    
+    @Override
+    public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(final Object... arr) {
+        if (arr[0] instanceof WorldZMSpawnWorld2 && (int)arr[1] == 5) {
+            this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+            return true;
+        }
+        return false;
+    }
+    
+    @Override
+    public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+        return "unlock--v1604tex";
+    }
+    
+    @Override
+    public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+        return "16.04 Extended Visuals";
+    }
+    
+    @Override
+    public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+        return "Survive 5 rounds on [ZM]Metsan Talo";
+    }
+}
--- net/minecraft/src/CompressedStreamTools.java
+++ net/minecraft/src/CompressedStreamTools.java
@@ -13,66 +13,66 @@
 import java.util.zip.GZIPOutputStream;
 
 public class CompressedStreamTools {
-	public static NBTTagCompound readCompressed(InputStream var0) throws IOException {
-		DataInputStream var1 = new DataInputStream(new GZIPInputStream(var0));
-
-		NBTTagCompound var2;
-		try {
-			var2 = read(var1);
-		} finally {
-			var1.close();
-		}
-
-		return var2;
-	}
-
-	public static void writeCompressed(NBTTagCompound var0, OutputStream var1) throws IOException {
-		DataOutputStream var2 = new DataOutputStream(new GZIPOutputStream(var1));
-
-		try {
-			write(var0, var2);
-		} finally {
-			var2.close();
-		}
-
-	}
-
-	public static NBTTagCompound decompress(byte[] var0) throws IOException {
-		DataInputStream var1 = new DataInputStream(new GZIPInputStream(new ByteArrayInputStream(var0)));
-
-		NBTTagCompound var2;
-		try {
-			var2 = read(var1);
-		} finally {
-			var1.close();
-		}
-
-		return var2;
-	}
-
-	public static byte[] compress(NBTTagCompound var0) throws IOException {
-		ByteArrayOutputStream var1 = new ByteArrayOutputStream();
-		DataOutputStream var2 = new DataOutputStream(new GZIPOutputStream(var1));
-
-		try {
-			write(var0, var2);
-		} finally {
-			var2.close();
-		}
-
-		return var1.toByteArray();
-	}
-
-	public static NBTTagCompound read(DataInput var0) throws IOException {
-		NBTBase var1 = NBTBase.readNamedTag(var0);
-		if(var1 instanceof NBTTagCompound) {
-			return (NBTTagCompound)var1;
+	public static NBTTagCompound readCompressed(InputStream inputStream) throws IOException {
+		DataInputStream dataInputStream1 = new DataInputStream(new GZIPInputStream(inputStream));
+
+		NBTTagCompound nBTTagCompound2;
+		try {
+			nBTTagCompound2 = read(dataInputStream1);
+		} finally {
+			dataInputStream1.close();
+		}
+
+		return nBTTagCompound2;
+	}
+
+	public static void writeCompressed(NBTTagCompound nbttagcompound, OutputStream outputStream) throws IOException {
+		DataOutputStream dataOutputStream2 = new DataOutputStream(new GZIPOutputStream(outputStream));
+
+		try {
+			write(nbttagcompound, dataOutputStream2);
+		} finally {
+			dataOutputStream2.close();
+		}
+
+	}
+
+	public static NBTTagCompound decompress(byte[] data) throws IOException {
+		DataInputStream dataInputStream1 = new DataInputStream(new GZIPInputStream(new ByteArrayInputStream(data)));
+
+		NBTTagCompound nBTTagCompound2;
+		try {
+			nBTTagCompound2 = read(dataInputStream1);
+		} finally {
+			dataInputStream1.close();
+		}
+
+		return nBTTagCompound2;
+	}
+
+	public static byte[] compress(NBTTagCompound nbttagcompound) throws IOException {
+		ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
+		DataOutputStream dataOutputStream2 = new DataOutputStream(new GZIPOutputStream(byteArrayOutputStream1));
+
+		try {
+			write(nbttagcompound, dataOutputStream2);
+		} finally {
+			dataOutputStream2.close();
+		}
+
+		return byteArrayOutputStream1.toByteArray();
+	}
+
+	public static NBTTagCompound read(DataInput dataInput) throws IOException {
+		NBTBase nBTBase1 = NBTBase.readNamedTag(dataInput);
+		if(nBTBase1 instanceof NBTTagCompound) {
+			return (NBTTagCompound)nBTBase1;
 		} else {
 			throw new IOException("Root tag must be a named compound tag");
 		}
 	}
 
-	public static void write(NBTTagCompound var0, DataOutput var1) throws IOException {
-		NBTBase.writeNamedTag(var0, var1);
+	public static void write(NBTTagCompound nbttagcompound, DataOutput dataOutput) throws IOException {
+		NBTBase.writeNamedTag(nbttagcompound, dataOutput);
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenMycon.java
@@ -1,0 +1,118 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public final class WorldGenMycon extends WorldGenMyconUnknownClass {
+	private NoiseGeneratorOctaves field_9992_4Oh17DH0kQy6z545RnvgS7UF6zFCyrZ4Bjc306x63zC74kLLs4t4Vi87bGgD = null;
+
+	public WorldGenMycon(double double1, double double2, EnumWorldGenerator _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178) {
+		super(double1, double2, _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178);
+	}
+
+	private void func_9990_0o1yP502fmHSvq4K13FdssA7ty6n72SWOuYo16DO8L6QnP4Bmd24CH16BP30(World vg, int integer2, int integer3, int integer4) {
+		vg.setBlockWithNotify(integer2, integer3, integer4, ExtBlocks.GlowingMyconCap.blockID);
+		if(vg.getBlockId(integer2 - 1, integer3, integer4) == 0) {
+			vg.setBlockWithNotify(integer2 - 1, integer3, integer4, ExtBlocks.MyconCap.blockID);
+		}
+
+		if(vg.getBlockId(integer2, integer3, integer4 - 1) == 0) {
+			vg.setBlockWithNotify(integer2, integer3, integer4 - 1, ExtBlocks.MyconCap.blockID);
+		}
+
+		if(vg.getBlockId(integer2 + 1, integer3, integer4) == 0) {
+			vg.setBlockWithNotify(integer2 + 1, integer3, integer4, ExtBlocks.MyconCap.blockID);
+		}
+
+		if(vg.getBlockId(integer2, integer3, integer4 + 1) == 0) {
+			vg.setBlockWithNotify(integer2, integer3, integer4 + 1, ExtBlocks.MyconCap.blockID);
+		}
+
+		if(vg.getBlockId(integer2, integer3 + 1, integer4) == 0) {
+			vg.setBlockWithNotify(integer2, integer3 + 1, integer4, ExtBlocks.MyconCap.blockID);
+		}
+
+	}
+
+	private void func_9991_5M4z7jt1f08Pg16kEgU3bE3U01936aPTL2B349KOSZhQ04YOpCW29o187Aa1(Random random, World vg, int integer3, int integer4) {
+		int i5;
+		int i6;
+		int i7;
+		for(i5 = -1; i5 <= 1; ++i5) {
+			for(i6 = -1; i6 <= 1; ++i6) {
+				for(i7 = 0; i7 <= 1; ++i7) {
+					this.func_9990_0o1yP502fmHSvq4K13FdssA7ty6n72SWOuYo16DO8L6QnP4Bmd24CH16BP30(vg, integer3 + i5, 7 + i7, integer4 + i6);
+				}
+			}
+		}
+
+		int i8;
+		for(i5 = 0; i5 < 3; ++i5) {
+			i6 = random.nextInt(2) * 2 - 1;
+			i7 = random.nextInt(2) * 2 - 1;
+			i8 = random.nextInt(2) + 2;
+			int i9 = random.nextInt(2) + 2;
+
+			for(int i10 = 0; i10 < i8; ++i10) {
+				for(int i11 = 0; i11 < i9; ++i11) {
+					this.func_9990_0o1yP502fmHSvq4K13FdssA7ty6n72SWOuYo16DO8L6QnP4Bmd24CH16BP30(vg, integer3 + i10 * i6, 7, integer4 + i11 * i7);
+				}
+			}
+		}
+
+		for(i5 = -2; i5 <= 2; ++i5) {
+			if(vg.getBlockId(integer3 + i5, 7, integer4 + 2) == ExtBlocks.GlowingMyconCap.blockID && random.nextInt(6) == 0) {
+				this.func_9990_0o1yP502fmHSvq4K13FdssA7ty6n72SWOuYo16DO8L6QnP4Bmd24CH16BP30(vg, integer3 + i5, 8, integer4 + 2);
+			}
+
+			if(vg.getBlockId(integer3 + i5, 7, integer4 - 2) == ExtBlocks.GlowingMyconCap.blockID && random.nextInt(6) == 0) {
+				this.func_9990_0o1yP502fmHSvq4K13FdssA7ty6n72SWOuYo16DO8L6QnP4Bmd24CH16BP30(vg, integer3 + i5, 8, integer4 - 2);
+			}
+
+			if(vg.getBlockId(integer3 + 2, 7, integer4 + i5) == ExtBlocks.GlowingMyconCap.blockID && random.nextInt(6) == 0) {
+				this.func_9990_0o1yP502fmHSvq4K13FdssA7ty6n72SWOuYo16DO8L6QnP4Bmd24CH16BP30(vg, integer3 + 2, 8, integer4 + i5);
+			}
+
+			if(vg.getBlockId(integer3 - 2, 7, integer4 + i5) == ExtBlocks.GlowingMyconCap.blockID && random.nextInt(6) == 0) {
+				this.func_9990_0o1yP502fmHSvq4K13FdssA7ty6n72SWOuYo16DO8L6QnP4Bmd24CH16BP30(vg, integer3 - 2, 8, integer4 + i5);
+			}
+		}
+
+		i5 = -random.nextInt(2);
+		i6 = -random.nextInt(2);
+
+		for(i7 = i5; i7 < 2 + i5; ++i7) {
+			for(i8 = i6; i8 < 2 + i6; ++i8) {
+				this.func_9990_0o1yP502fmHSvq4K13FdssA7ty6n72SWOuYo16DO8L6QnP4Bmd24CH16BP30(vg, integer3 + i7, 9, integer4 + i8);
+			}
+		}
+
+		for(i5 = 4; i5 < 10; ++i5) {
+			vg.setBlock(integer3, i5, integer4, ExtBlocks.MyconStem.blockID);
+		}
+
+	}
+
+	public boolean func_9982_84EZjwmgfVpn5brk96GnU3Eit81Yc6Xxm4lTPdVKUWyphKxl38Uh4dg8VF3T(Random random, World vg, int integer3, int integer4) {
+		boolean z5 = false;
+
+		for(int i6 = 0; i6 < 16; ++i6) {
+			for(int i7 = 0; i7 < 16; ++i7) {
+				if(this.field_9992_4Oh17DH0kQy6z545RnvgS7UF6zFCyrZ4Bjc306x63zC74kLLs4t4Vi87bGgD.generateNoiseOctaves((double)(integer3 * 16 + i6), (double)(integer4 * 16 + i7)) > 0.1D) {
+					vg.setBlock(integer3 * 16 + i6, 3, integer4 * 16 + i7, ExtBlocks.LowMycon.blockID);
+					if(random.nextInt(400) == 0 && !z5) {
+						this.func_9991_5M4z7jt1f08Pg16kEgU3bE3U01936aPTL2B349KOSZhQ04YOpCW29o187Aa1(random, vg, integer3 * 16 + i6, integer4 * 16 + i7);
+						z5 = true;
+					} else if(random.nextInt(120) == 0 && vg.getBlockId(integer3 * 16 + i6, 4, integer4 * 16 + i7) == 0) {
+						vg.setBlockWithNotify(integer3 * 16 + i6, 4, integer4 * 16 + i7, ExtBlocks.LowGlowingVine.blockID);
+					}
+				}
+			}
+		}
+
+		return false;
+	}
+
+	public void func_9977_0C8cKMHZGkSA22DGYztFv5857z0O34nRumUNAm59CrgBrFnKV5bq3guXEYB5(Random random) {
+		this.field_9992_4Oh17DH0kQy6z545RnvgS7UF6zFCyrZ4Bjc306x63zC74kLLs4t4Vi87bGgD = new NoiseGeneratorOctaves(random, 6);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockGlassOld.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockGlassOld extends BlockBreakableOld {
+	public BlockGlassOld(int integer1, int integer2, Material sx, boolean boolean4) {
+		super(integer1, integer2, sx, boolean4);
+	}
+
+	public int quantityDropped(Random random) {
+		return 0;
+	}
+}
--- net/minecraft/src/NBTTagByte.java
+++ net/minecraft/src/NBTTagByte.java
@@ -10,16 +10,16 @@
 	public NBTTagByte() {
 	}
 
-	public NBTTagByte(byte var1) {
-		this.byteValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeByte(this.byteValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.byteValue = var1.readByte();
+	public NBTTagByte(byte value) {
+		this.byteValue = value;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeByte(this.byteValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.byteValue = dataInput.readByte();
 	}
 
 	public byte getType() {
--- /dev/null
+++ net/minecraft/src/EntitySpearmaster.java
@@ -1,0 +1,71 @@
+package net.minecraft.src;
+
+public class EntitySpearmaster extends EntityMob {
+	public EntitySpearmaster(World world) {
+		super(world);
+		this.texture = "/mob/spearmaster.png";
+	}
+
+	protected String getLivingSound() {
+		return "mob.skeleton";
+	}
+
+	protected String getHurtSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected String getDeathSound() {
+		return "mob.skeletonhurt";
+	}
+
+	public void onLivingUpdate() {
+		if(this.worldObj.isDaytime()) {
+			float f1 = this.getBrightness(1.0F);
+			if(f1 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) && this.rand.nextFloat() * 30.0F < (f1 - 0.4F) * 2.0F) {
+				this.fire = 150;
+			}
+		}
+
+		super.onLivingUpdate();
+	}
+
+	protected void attackEntity(Entity entity, float damage) {
+		if(damage < 12.0F) {
+			double d3 = entity.posX;
+			double d5 = entity.posZ;
+			double d7 = entity.posY;
+			if(this.attackTime == 0) {
+				EntitySpear entitySpear9 = new EntitySpear(this.worldObj, this);
+				++entitySpear9.posY;
+				double d10 = entity.posY - (double)0.2F - entitySpear9.posY;
+				float f12 = MathHelper.sqrt_double(d3 * d3 + d5 * d5) * 0.2F;
+				this.worldObj.playSoundAtEntity(this, "random.bow", 1.0F, 1.0F / (this.rand.nextFloat() * 0.4F + 0.8F));
+				this.worldObj.spawnEntityInWorld(entitySpear9);
+				entitySpear9.func_8862_62fy3xag0c9z7TJjArJC90Lh4QqV7rKpSSg3hIM929UUP4Eg7q57g2p0SP6W(d3, d10 + (double)f12, d5, 0.6F, 12.0F);
+				this.worldObj.spawnEntityInWorld(entitySpear9);
+				entitySpear9.func_8862_62fy3xag0c9z7TJjArJC90Lh4QqV7rKpSSg3hIM929UUP4Eg7q57g2p0SP6W(d3, d10 + (double)f12, d5, 0.8F, 15.0F);
+				this.attackTime = 25;
+			}
+
+			this.rotationYaw = (float)(Math.atan2(d5, d3) * 180.0D / (double)(float)Math.PI) - 90.0F;
+			this.hasAttacked = true;
+		}
+
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+	}
+
+	protected int getDropItemId() {
+		return ExtItems.Spear.shiftedIndex;
+	}
+
+	public int getEssenceDroppedOnKill() {
+		return 12 + this.rand.nextInt(6);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockStationaryOld.java
@@ -1,0 +1,57 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockStationaryOld extends BlockFluidOld {
+	protected BlockStationaryOld(int integer, Material sx) {
+		super(integer, sx);
+		this.setTickOnLoad(false);
+		if(sx == Material.lava) {
+			this.setTickOnLoad(true);
+		}
+
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		super.onNeighborBlockChange(vg, integer2, integer3, integer4, integer5);
+		if(vg.getBlockId(integer2, integer3, integer4) == this.blockID) {
+			this.setNotStationary(vg, integer2, integer3, integer4);
+		}
+
+	}
+
+	private void setNotStationary(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockMetadata(integer2, integer3, integer4);
+		vg.editingBlocks = true;
+		vg.setBlockAndMetadata(integer2, integer3, integer4, this.blockID - 1, i5);
+		vg.markBlocksDirty(integer2, integer3, integer4, integer2, integer3, integer4);
+		vg.scheduleBlockUpdate(integer2, integer3, integer4, this.blockID - 1);
+		vg.editingBlocks = false;
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(this.material == Material.lava) {
+			int i6 = random.nextInt(3);
+
+			for(int i7 = 0; i7 < i6; ++i7) {
+				integer2 += random.nextInt(3) - 1;
+				++integer3;
+				integer4 += random.nextInt(3) - 1;
+				int i8 = vg.getBlockId(integer2, integer3, integer4);
+				if(i8 == 0) {
+					if(this.isFlammable(vg, integer2 - 1, integer3, integer4) || this.isFlammable(vg, integer2 + 1, integer3, integer4) || this.isFlammable(vg, integer2, integer3, integer4 - 1) || this.isFlammable(vg, integer2, integer3, integer4 + 1) || this.isFlammable(vg, integer2, integer3 - 1, integer4) || this.isFlammable(vg, integer2, integer3 + 1, integer4)) {
+						vg.setBlockWithNotify(integer2, integer3, integer4, BlockOld.fire.blockID);
+						return;
+					}
+				} else if(BlockOld.blocksList[i8].material.getIsSolid()) {
+					return;
+				}
+			}
+		}
+
+	}
+
+	private boolean isFlammable(World vg, int integer2, int integer3, int integer4) {
+		return vg.getBlockMaterial(integer2, integer3, integer4).getCanBurn();
+	}
+}
--- net/minecraft/src/WorldGenFlowers.java
+++ net/minecraft/src/WorldGenFlowers.java
@@ -5,17 +5,17 @@
 public class WorldGenFlowers extends WorldGenerator {
 	private int plantBlockId;
 
-	public WorldGenFlowers(int var1) {
-		this.plantBlockId = var1;
+	public WorldGenFlowers(int plantBlockID) {
+		this.plantBlockId = plantBlockID;
 	}
 
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		for(int var6 = 0; var6 < 64; ++var6) {
-			int var7 = var3 + var2.nextInt(8) - var2.nextInt(8);
-			int var8 = var4 + var2.nextInt(4) - var2.nextInt(4);
-			int var9 = var5 + var2.nextInt(8) - var2.nextInt(8);
-			if(var1.getBlockId(var7, var8, var9) == 0 && ((BlockFlower)Block.blocksList[this.plantBlockId]).canBlockStay(var1, var7, var8, var9)) {
-				var1.setBlock(var7, var8, var9, this.plantBlockId);
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 64; ++i6) {
+			int i7 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+			int i9 = z + rand.nextInt(8) - rand.nextInt(8);
+			if(world.getBlockId(i7, i8, i9) == 0 && ((BlockFlower)Block.blocksList[this.plantBlockId]).canBlockStay(world, i7, i8, i9)) {
+				world.setBlock(i7, i8, i9, this.plantBlockId);
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/GuiExtensions.java
@@ -1,0 +1,35 @@
+package net.minecraft.src;
+
+public class GuiExtensions extends GuiScreen {
+	private GuiScreen field_7985_0aA04xDJHl9kB9QyHOKYg9nrlzIQ18z87W3Of1PZ2e2Ea6JqDKn777Sxnymn;
+
+	public GuiExtensions(GuiScreen hr) {
+		this.field_7985_0aA04xDJHl9kB9QyHOKYg9nrlzIQ18z87W3Of1PZ2e2Ea6JqDKn777Sxnymn = hr;
+	}
+
+	public void initGui() {
+		super.initGui();
+		this.controlList.clear();
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120 + 12, "Done"));
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		if(button.id == 0) {
+			this.mc.displayGuiScreen(this.field_7985_0aA04xDJHl9kB9QyHOKYg9nrlzIQ18z87W3Of1PZ2e2Ea6JqDKn777Sxnymn);
+		}
+
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		this.drawDefaultBackground();
+		String string4 = "ExtensionLoader 16.05_20#";
+		Gui.drawString(this.fontRenderer, string4, (new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight)).getScaledWidth() - this.fontRenderer.getStringWidth(string4) - 2, 2, 14737632);
+		this.drawCenteredString(this.fontRenderer, "Extensions loaded:", this.width / 2, 20, 0xFFFFFF);
+
+		for(int i5 = 0; i5 < ModLoader.func_11264_7AT2q764kBM4UAhX20130C3Jh6LT7Y5snv3wxjh9e5VP43467B37csjDd1NC().size(); ++i5) {
+			this.fontRenderer.drawString("- " + ((BaseMod)ModLoader.func_11264_7AT2q764kBM4UAhX20130C3Jh6LT7Y5snv3wxjh9e5VP43467B37csjDd1NC().get(i5)).toString(), 20, 60 + i5 * 16, 0xFFFFFF);
+		}
+
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
+	}
+}
--- net/minecraft/src/GuiSelectWorld.java
+++ net/minecraft/src/GuiSelectWorld.java
@@ -1,71 +1,101 @@
 package net.minecraft.src;
 
 import java.io.File;
+
 import net.minecraft.client.Minecraft;
 
 public class GuiSelectWorld extends GuiScreen {
 	protected GuiScreen parentScreen;
 	protected String screenTitle = "Select world";
 	private boolean selected = false;
+	public int worldSelBeginX = 0;
 
-	public GuiSelectWorld(GuiScreen var1) {
-		this.parentScreen = var1;
+	public GuiSelectWorld(GuiScreen hr) {
+		this.parentScreen = hr;
 	}
 
-	public void initGui() {
-		File var1 = Minecraft.getMinecraftDir();
-
-		for(int var2 = 0; var2 < 5; ++var2) {
-			NBTTagCompound var3 = World.getLevelData(var1, "World" + (var2 + 1));
-			if(var3 == null) {
-				this.controlList.add(new GuiButton(var2, this.width / 2 - 100, this.height / 6 + 24 * var2, "- empty -"));
+	public void CreateWorldButtons() {
+		while(this.controlList.size() > 2) {
+			this.controlList.remove(2);
+		}
+
+		this.controlList.add(new ButtonSel(-3, this.width / 2 - 160, this.height / 6 + 80, "<"));
+		int i1 = this.controlList.size() - 1;
+		this.controlList.add(new ButtonSel(-4, this.width / 2 + 110, this.height / 6 + 80, ">"));
+		if(this.worldSelBeginX == 0) {
+			((GuiButton)this.controlList.get(i1)).enabled = false;
+		}
+
+		File file2 = Minecraft.getMinecraftDir();
+
+		for(int i3 = this.worldSelBeginX; i3 < this.worldSelBeginX + 5; ++i3) {
+			NBTTagCompound nBTTagCompound4 = World.getLevelData(file2, "World" + (i3 + 1));
+			int i5 = i3 - this.worldSelBeginX;
+			if(nBTTagCompound4 == null) {
+				this.controlList.add(new GuiButton(i3, this.width / 2 - 100, this.height / 6 + 24 * i5, "- empty [World " + (i3 + 1) + "] -"));
 			} else {
-				String var4 = "World " + (var2 + 1);
-				long var5 = var3.getLong("SizeOnDisk");
-				var4 = var4 + " (" + (float)(var5 / 1024L * 100L / 1024L) / 100.0F + " MB)";
-				this.controlList.add(new GuiButton(var2, this.width / 2 - 100, this.height / 6 + 24 * var2, var4));
+				File file6 = new File(file2, "/saves/World" + (i3 + 1) + "/excl_frail");
+				boolean z7 = file6.exists();
+				String string8 = "World " + (i3 + 1) + (z7 ? "\u00ac" : "");
+				long j9 = nBTTagCompound4.getLong("SizeOnDisk");
+				string8 = string8 + " (" + (float)(j9 / 1024L * 100L / 1024L) / 100.0F + " MB)";
+				this.controlList.add((new GuiButton(i3, this.width / 2 - 100, this.height / 6 + 24 * i5, string8)).SetTextColors(z7 ? 16728128 : 16777120, z7 ? 16552080 : 14737632));
 			}
 		}
 
+	}
+
+	public void initGui() {
+		this.controlList.clear();
 		this.initButtons();
+		this.CreateWorldButtons();
 	}
 
-	protected String getSaveName(int var1) {
-		File var2 = Minecraft.getMinecraftDir();
-		return World.getLevelData(var2, "World" + var1) != null ? "World" + var1 : null;
+	protected String getSaveName(int integer) {
+		File file2 = Minecraft.getMinecraftDir();
+		return World.getLevelData(file2, "World" + integer) != null ? "World" + integer : null;
 	}
 
 	public void initButtons() {
-		this.controlList.add(new GuiButton(5, this.width / 2 - 100, this.height / 6 + 120 + 12, "Delete world..."));
-		this.controlList.add(new GuiButton(6, this.width / 2 - 100, this.height / 6 + 168, "Cancel"));
+		this.controlList.add(new GuiButton(-1, this.width / 2 - 100, this.height / 6 + 120 + 12, "Delete world..."));
+		this.controlList.add(new GuiButton(-2, this.width / 2 - 100, this.height / 6 + 168, "Cancel"));
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.enabled) {
-			if(var1.id < 5) {
-				this.selectWorld(var1.id + 1);
-			} else if(var1.id == 5) {
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled) {
+			if(button.id > -1) {
+				this.selectWorld(button.id + 1);
+			} else if(button.id == -1) {
 				this.mc.displayGuiScreen(new GuiDeleteWorld(this));
-			} else if(var1.id == 6) {
+			} else if(button.id == -2) {
 				this.mc.displayGuiScreen(this.parentScreen);
+			} else if(button.id == -3) {
+				if(this.worldSelBeginX != 0) {
+					this.worldSelBeginX -= 5;
+					this.CreateWorldButtons();
+				}
+			} else if(button.id == -4) {
+				this.worldSelBeginX += 5;
+				this.CreateWorldButtons();
 			}
-
 		}
+
 	}
 
-	public void selectWorld(int var1) {
+	public void selectWorld(int integer) {
 		this.mc.displayGuiScreen((GuiScreen)null);
 		if(!this.selected) {
 			this.selected = true;
 			this.mc.playerController = new PlayerControllerSP(this.mc);
-			this.mc.startWorld("World" + var1);
+			this.mc.startWorld("World" + integer);
 			this.mc.displayGuiScreen((GuiScreen)null);
 		}
+
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- net/minecraft/src/GuiChest.java
+++ net/minecraft/src/GuiChest.java
@@ -7,48 +7,48 @@
 	private IInventory lowerChestInventory;
 	private int inventoryRows = 0;
 
-	public GuiChest(IInventory var1, IInventory var2) {
-		this.upperChestInventory = var1;
-		this.lowerChestInventory = var2;
+	public GuiChest(IInventory cz1, IInventory cz2) {
+		this.upperChestInventory = cz1;
+		this.lowerChestInventory = cz2;
 		this.allowUserInput = false;
-		short var3 = 222;
-		int var4 = var3 - 108;
-		this.inventoryRows = var2.getSizeInventory() / 9;
-		this.ySize = var4 + this.inventoryRows * 18;
-		int var5 = (this.inventoryRows - 4) * 18;
-
-		int var6;
-		int var7;
-		for(var6 = 0; var6 < this.inventoryRows; ++var6) {
-			for(var7 = 0; var7 < 9; ++var7) {
-				this.inventorySlots.add(new SlotInventory(this, var2, var7 + var6 * 9, 8 + var7 * 18, 18 + var6 * 18));
-			}
-		}
-
-		for(var6 = 0; var6 < 3; ++var6) {
-			for(var7 = 0; var7 < 9; ++var7) {
-				this.inventorySlots.add(new SlotInventory(this, var1, var7 + (var6 + 1) * 9, 8 + var7 * 18, 103 + var6 * 18 + var5));
-			}
-		}
-
-		for(var6 = 0; var6 < 9; ++var6) {
-			this.inventorySlots.add(new SlotInventory(this, var1, var6, 8 + var6 * 18, 161 + var5));
+		short s3 = 222;
+		int i4 = s3 - 108;
+		this.inventoryRows = cz2.getSizeInventory() / 9;
+		this.ySize = i4 + this.inventoryRows * 18;
+		int i5 = (this.inventoryRows - 4) * 18;
+
+		int i6;
+		int i7;
+		for(i6 = 0; i6 < this.inventoryRows; ++i6) {
+			for(i7 = 0; i7 < 9; ++i7) {
+				this.inventorySlots.add(new SlotInventory(this, cz2, i7 + i6 * 9, 8 + i7 * 18, 18 + i6 * 18));
+			}
+		}
+
+		for(i6 = 0; i6 < 3; ++i6) {
+			for(i7 = 0; i7 < 9; ++i7) {
+				this.inventorySlots.add(new SlotInventory(this, cz1, i7 + (i6 + 1) * 9, 8 + i7 * 18, 103 + i6 * 18 + i5));
+			}
+		}
+
+		for(i6 = 0; i6 < 9; ++i6) {
+			this.inventorySlots.add(new SlotInventory(this, cz1, i6, 8 + i6 * 18, 161 + i5));
 		}
 
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString(this.lowerChestInventory.getInvName(), 8, 6, 4210752);
-		this.fontRenderer.drawString(this.upperChestInventory.getInvName(), 8, this.ySize - 96 + 2, 4210752);
+		this.fontRenderer.drawString(this.lowerChestInventory.getInvName(), 8, 6, 0xFFFFFF);
+		this.fontRenderer.drawString(this.upperChestInventory.getInvName(), 8, this.ySize - 96 + 2, 0xFFFFFF);
 	}
 
-	protected void drawGuiContainerBackgroundLayer(float var1) {
-		int var2 = this.mc.renderEngine.getTexture("/gui/container.png");
+	protected void drawGuiContainerBackgroundLayer(float renderPartialTick) {
+		int i2 = this.mc.renderEngine.getTexture("/gui/container.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.mc.renderEngine.bindTexture(var2);
-		int var3 = (this.width - this.xSize) / 2;
-		int var4 = (this.height - this.ySize) / 2;
-		this.drawTexturedModalRect(var3, var4, 0, 0, this.xSize, this.inventoryRows * 18 + 17);
-		this.drawTexturedModalRect(var3, var4 + this.inventoryRows * 18 + 17, 0, 126, this.xSize, 96);
+		this.mc.renderEngine.bindTexture(i2);
+		int i3 = (this.width - this.xSize) / 2;
+		int i4 = (this.height - this.ySize) / 2;
+		this.drawTexturedModalRect(i3, i4, 0, 0, this.xSize, this.inventoryRows * 18 + 17);
+		this.drawTexturedModalRect(i3, i4 + this.inventoryRows * 18 + 17, 0, 126, this.xSize, 96);
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandRMode.java
@@ -1,0 +1,22 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.Display;
+
+class CommandRMode extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8599_44YRDy00KIMlVCL4hSOgy016KLqJZzleree8A8pNL6N1c5KX5zNRjLqOjG8z;
+    
+    CommandRMode(final CommandManager abb) {
+        this.field_8599_44YRDy00KIMlVCL4hSOgy016KLqJZzleree8A8pNL6N1c5KX5zNRjLqOjG8z = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.resize((int)arr[0], (int)arr[1]);
+        Display.update();
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return InputHandler.mc.displayWidth + " " + InputHandler.mc.displayHeight;
+    }
+}
--- net/minecraft/src/Packet15Place.java
+++ net/minecraft/src/Packet15Place.java
@@ -14,32 +14,32 @@
 	public Packet15Place() {
 	}
 
-	public Packet15Place(int var1, int var2, int var3, int var4, int var5) {
-		this.id = var1;
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.zPosition = var4;
-		this.direction = var5;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.id = var1.readShort();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.read();
-		this.zPosition = var1.readInt();
-		this.direction = var1.read();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeShort(this.id);
-		var1.writeInt(this.xPosition);
-		var1.write(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.write(this.direction);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handlePlace(this);
+	public Packet15Place(int id, int x, int y, int z, int direction) {
+		this.id = id;
+		this.xPosition = x;
+		this.yPosition = y;
+		this.zPosition = z;
+		this.direction = direction;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.id = dataInputStream.readShort();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.read();
+		this.zPosition = dataInputStream.readInt();
+		this.direction = dataInputStream.read();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeShort(this.id);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.write(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.write(this.direction);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handlePlace(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/ModelSheepFur.java
+++ net/minecraft/src/ModelSheepFur.java
@@ -9,18 +9,18 @@
 		this.body = new ModelRenderer(28, 8);
 		this.body.addBox(-4.0F, -10.0F, -7.0F, 8, 16, 6, 1.75F);
 		this.body.setRotationPoint(0.0F, 5.0F, 2.0F);
-		float var1 = 0.5F;
+		float f1 = 0.5F;
 		this.leg1 = new ModelRenderer(0, 16);
-		this.leg1.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, var1);
+		this.leg1.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, f1);
 		this.leg1.setRotationPoint(-3.0F, 12.0F, 7.0F);
 		this.leg2 = new ModelRenderer(0, 16);
-		this.leg2.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, var1);
+		this.leg2.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, f1);
 		this.leg2.setRotationPoint(3.0F, 12.0F, 7.0F);
 		this.leg3 = new ModelRenderer(0, 16);
-		this.leg3.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, var1);
+		this.leg3.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, f1);
 		this.leg3.setRotationPoint(-3.0F, 12.0F, -5.0F);
 		this.leg4 = new ModelRenderer(0, 16);
-		this.leg4.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, var1);
+		this.leg4.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, f1);
 		this.leg4.setRotationPoint(3.0F, 12.0F, -5.0F);
 	}
 }
--- net/minecraft/src/PlayerController.java
+++ net/minecraft/src/PlayerController.java
@@ -6,45 +6,45 @@
 	protected final Minecraft mc;
 	public boolean isInTestMode = false;
 
-	public PlayerController(Minecraft var1) {
-		this.mc = var1;
-	}
-
-	public void onWorldChange(World var1) {
-	}
-
-	public void clickBlock(int var1, int var2, int var3, int var4) {
-		this.sendBlockRemoved(var1, var2, var3, var4);
-	}
-
-	public boolean sendBlockRemoved(int var1, int var2, int var3, int var4) {
-		this.mc.effectRenderer.addBlockDestroyEffects(var1, var2, var3);
-		World var5 = this.mc.theWorld;
-		Block var6 = Block.blocksList[var5.getBlockId(var1, var2, var3)];
-		int var7 = var5.getBlockMetadata(var1, var2, var3);
-		boolean var8 = var5.setBlockWithNotify(var1, var2, var3, 0);
-		if(var6 != null && var8) {
-			this.mc.sndManager.playSound(var6.stepSound.getBreakSound(), (float)var1 + 0.5F, (float)var2 + 0.5F, (float)var3 + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 2.0F, var6.stepSound.getPitch() * 0.8F);
-			var6.onBlockDestroyedByPlayer(var5, var1, var2, var3, var7);
+	public PlayerController(Minecraft minecraft) {
+		this.mc = minecraft;
+	}
+
+	public void onWorldChange(World world) {
+	}
+
+	public void clickBlock(int x, int y, int z, int side) {
+		this.sendBlockRemoved(x, y, z, side);
+	}
+
+	public boolean sendBlockRemoved(int x, int y, int z, int side) {
+		this.mc.effectRenderer.addBlockDestroyEffects(x, y, z);
+		World world5 = this.mc.theWorld;
+		Block block6 = Block.blocksList[world5.getBlockId(x, y, z)];
+		int i7 = world5.getBlockMetadata(x, y, z);
+		boolean z8 = world5.setBlockWithNotify(x, y, z, 0);
+		if(block6 != null && z8) {
+			this.mc.sndManager.playSound(block6.stepSound.getBreakSound(), (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F, (block6.stepSound.getVolume() + 1.0F) / 2.0F, block6.stepSound.getPitch() * 0.8F);
+			block6.onBlockDestroyedByPlayer(world5, x, y, z, i7);
 		}
 
-		return var8;
+		return z8;
 	}
 
-	public void sendBlockRemoving(int var1, int var2, int var3, int var4) {
+	public void sendBlockRemoving(int x, int y, int z, int side) {
 	}
 
 	public void resetBlockRemoving() {
 	}
 
-	public void setPartialTime(float var1) {
+	public void setPartialTime(float renderPartialTick) {
 	}
 
 	public float getBlockReachDistance() {
 		return 5.0F;
 	}
 
-	public void flipPlayer(EntityPlayer var1) {
+	public void flipPlayer(EntityPlayer entityPlayer) {
 	}
 
 	public void onUpdate() {
@@ -54,15 +54,15 @@
 		return true;
 	}
 
-	public void onRespawn(EntityPlayer var1) {
-	}
-
-	public boolean onPlayerRightClick(EntityPlayer var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7) {
-		int var8 = var2.getBlockId(var4, var5, var6);
-		return var8 > 0 && Block.blocksList[var8].blockActivated(var2, var4, var5, var6, var1) ? true : (var3 == null ? false : var3.useItem(var1, var2, var4, var5, var6, var7));
-	}
-
-	public EntityPlayer createPlayer(World var1) {
-		return new EntityPlayerSP(this.mc, var1, this.mc.session);
+	public void onRespawn(EntityPlayer entityPlayer) {
+	}
+
+	public boolean onPlayerRightClick(EntityPlayer entityPlayer, World world, ItemStack itemStack, int x, int y, int z, int side) {
+		int i8 = world.getBlockId(x, y, z);
+		return i8 > 0 && Block.blocksList[i8].blockActivated(world, x, y, z, entityPlayer) ? true : (itemStack == null ? false : itemStack.useItem(entityPlayer, world, x, y, z, side));
+	}
+
+	public EntityPlayer createPlayer(World world) {
+		return (EntityPlayer)(world instanceof FreerunWorld ? new EntityPlayerFreerunClient(this.mc, (FreerunWorld)world, this.mc.session) : (world instanceof ZMWorld ? new EntityPlayerZombieModeClient(this.mc, (ZMWorld)world, this.mc.session) : (Minecraft.field_7272_4vZ36FKx2I9PxzXyWH4290I55Q6yd6FI668q2Ylv62ISy2u1yh710qJ4Q0Yo ? new EntityPlayerBanned(this.mc, world, this.mc.session) : new EntityPlayerSP(this.mc, world, this.mc.session))));
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenFrigidHighwood.java
@@ -1,0 +1,219 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.Random;
+
+import net.minecraft.client.Minecraft;
+
+public class WorldGenFrigidHighwood extends WorldGenerator {
+	private Boolean field_9601_14W2tr76fRFVwxt8UMKtXBST5QgZfZd76Kd60D0ecLT6rj2651p1OIw3Okl7 = null;
+
+	public WorldGenFrigidHighwood func_9599_6t2D748Z7amgg6374qlf449x2Q0OB9B0wDPgUi1O77x30fiK30LU69tit5K7(boolean boolean1) {
+		this.field_9601_14W2tr76fRFVwxt8UMKtXBST5QgZfZd76Kd60D0ecLT6rj2651p1OIw3Okl7 = boolean1;
+		return this;
+	}
+
+	private boolean func_9597_8ybc3aO2T6MgY1TYT8ss066o6JU57Xmb5te89rUZiY5oFY9rdx2bLb5U8vu3(World vg, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.FrigidTrunk.blockID;
+		int i7 = ExtBlocks.FrigidLeaves.blockID;
+		int i8 = random.nextInt(4) + 4;
+		boolean z9 = true;
+		if(integer4 >= 1 && integer4 + i8 + 1 <= 128) {
+			int i10;
+			int i11;
+			int i13;
+			for(i10 = integer4; i10 <= integer4 + 1 + i8; ++i10) {
+				byte b14 = 1;
+				if(i10 == integer4) {
+					b14 = 0;
+				}
+
+				if(i10 >= integer4 + 1 + i8 - 2) {
+					b14 = 2;
+				}
+
+				for(i11 = integer3 - b14; i11 <= integer3 + b14 && z9; ++i11) {
+					for(int i12 = integer5 - b14; i12 <= integer5 + b14 && z9; ++i12) {
+						if(i10 >= 0 && i10 < 128) {
+							i13 = vg.getBlockId(i11, i10, i12);
+							if(i13 != 0 && i13 != i7) {
+								z9 = false;
+							}
+						} else {
+							z9 = false;
+						}
+					}
+				}
+			}
+
+			if(!z9) {
+				return false;
+			} else {
+				i10 = vg.getBlockId(integer3, integer4 - 1, integer5);
+				if((i10 == Block.blockSnow.blockID || i10 == Block.blockSnow.blockID) && integer4 < 128 - i8 - 1) {
+					vg.setBlock(integer3, integer4 - 1, integer5, Block.blockSnow.blockID);
+
+					int i20;
+					for(i20 = integer4 - 1 + i8; i20 <= integer4 + i8; ++i20) {
+						boolean z18 = true;
+						byte b19 = 1;
+
+						for(i13 = integer3 - b19; i13 <= integer3 - b19; ++i13) {
+							int i10000 = i13 - integer3;
+
+							for(int i16 = integer5 - b19; i16 <= integer5 - b19; ++i16) {
+								i10000 = i16 - integer5;
+								if(!Block.opaqueCubeLookup[vg.getBlockId(i13, i20, i16)]) {
+									vg.setBlock(i13 + 1, i20, i16 + 1, i7);
+								}
+							}
+						}
+					}
+
+					for(i20 = 0; i20 < i8; ++i20) {
+						i11 = vg.getBlockId(integer3, integer4 + i20, integer5);
+						if(i11 == 0 || i11 == i7) {
+							vg.setBlock(integer3, integer4 + i20, integer5, i6);
+						}
+					}
+
+					return true;
+				} else {
+					return false;
+				}
+			}
+		} else {
+			return false;
+		}
+	}
+
+	private void func_9598_8Q6sVEAF0181r05kCUEta3Mj47k1jnf88657Pv2Q38U9H8M6EAlf2G7PEzYb(World vg, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientWood.blockID;
+		int i7 = ExtBlocks.AncientLeaves.blockID;
+		float f8 = 0.0F;
+		float f9 = random.nextFloat() * (float)Math.PI * 2.0F;
+		int i10 = random.nextInt(8) + 7;
+		float f11 = (float)integer4;
+
+		float f13;
+		for(int i12 = 0; i12 < i10; ++i12) {
+			f9 = (float)((double)f9 + ((double)random.nextFloat() - 0.5D) * 0.1D);
+			++f8;
+			f13 = f8 / (float)i10;
+			integer3 = (int)((float)integer3 + MathHelper.cos(f9) * (1.0F - f13));
+			f11 += f13;
+			integer5 = (int)((float)integer5 + MathHelper.sin(f9) * (1.0F - f13));
+			integer4 = Math.round(f11);
+			vg.setBlock(integer3, integer4, integer5, i6);
+		}
+
+		integer4 += random.nextInt(2) + 1;
+		int i15 = random.nextInt(2) + 2;
+
+		for(int i16 = 0; i16 < i15; ++i16) {
+			vg.setBlock(integer3, integer4, integer5, i7);
+
+			for(float f17 = 0.0F; (double)f17 < Math.PI * 2D; f17 = (float)((double)f17 + 0.6283185307179586D)) {
+				int i18 = random.nextInt(i16 + 2) + i16 + 2;
+				float f19 = (float)integer3;
+				f13 = (float)integer5;
+
+				for(int i14 = 0; i14 < i18; ++i14) {
+					f13 += MathHelper.sin(f17);
+					f19 += MathHelper.cos(f17);
+					if(!vg.getBlockMaterial(Math.round(f19), integer4 - i16, Math.round(f13)).getIsSolid()) {
+						vg.setBlock(Math.round(f19), integer4 - i16, Math.round(f13), i7);
+					}
+				}
+			}
+		}
+
+	}
+
+	private void func_9600_57JnQz29BeV8zgzsGl3J1kp08qjYLG4ixDPE5NIopzS8Rx361W9D19x2164N(World vg, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientRoots.blockID;
+		int i7 = random.nextInt(3);
+
+		for(int i8 = 0; i8 < i7; ++i8) {
+			int i9 = random.nextInt(4) + 2;
+			int i10 = integer3;
+			int i11 = integer4;
+			int i12 = integer5;
+
+			for(int i13 = 0; i13 < i9; ++i13) {
+				i10 += random.nextInt(3) - 1;
+				--i11;
+				i12 += random.nextInt(3) - 1;
+				if(vg.getBlockId(i10, i11, i12) != Block.bedrock.blockID) {
+					vg.setBlock(i10, i11, i12, i6);
+				}
+			}
+		}
+
+	}
+
+	private boolean func_9596_207WU7S6UShx2dKMu834lJM1ofWd2fa8azp67F0oht39izalOwX18EZ268Y8(World vg, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientWood.blockID;
+		int i7 = ExtBlocks.AncientLeaves.blockID;
+		if(vg.getBlockId(integer3, integer4 - 1, integer5) != Block.grass.blockID && vg.getBlockId(integer3, integer4 - 1, integer5) != Block.dirt.blockID) {
+			return true;
+		} else {
+			Random random8 = new Random(random.nextLong() + (long)integer3 + (long)integer4 + (long)integer5 + vg.randomSeed);
+			ArrayList arrayList9 = new ArrayList();
+			int i10 = 7 + random8.nextInt(10);
+			arrayList9.add(Vec3D.createVector((double)integer3, (double)(integer4 + i10), (double)integer5));
+
+			label71:
+			for(int i11 = 0; arrayList9.size() > 0; ++i11) {
+				Iterator iterator12 = (new ArrayList(arrayList9)).iterator();
+
+				while(true) {
+					while(true) {
+						if(!iterator12.hasNext()) {
+							continue label71;
+						}
+
+						Vec3D vec3D13 = (Vec3D)iterator12.next();
+						int i14 = (int)Math.round(vec3D13.xCoord);
+						int i15 = (int)Math.round(vec3D13.yCoord);
+						int i16 = (int)Math.round(vec3D13.zCoord);
+						if((!vg.getBlockMaterial(i14, i15, i16).getIsSolid() || vg.getBlockId(i14, i15, i16) != i7) && i15 >= 0 && (random8.nextInt(3) != 0 || arrayList9.size() <= 3)) {
+							vg.setBlock(i14, i15, i16, i6);
+							int i17 = 0;
+
+							while(random8.nextInt(arrayList9.size() / 30 + 2) <= 1 && arrayList9.size() <= 10000) {
+								++i17;
+								if(i17 >= 4) {
+									break;
+								}
+
+								Vec3D vec3D18 = vec3D13.addVector((double)(random8.nextInt(3) - 1), -1.0D, (double)(random8.nextInt(3) - 1));
+								arrayList9.add(vec3D18);
+							}
+
+							if(i11 > 2 && random8.nextInt(Math.max(40, 78 - i11)) == 3) {
+								this.func_9598_8Q6sVEAF0181r05kCUEta3Mj47k1jnf88657Pv2Q38U9H8M6EAlf2G7PEzYb(vg, random, i14, i15, i16);
+							}
+
+							arrayList9.remove(vec3D13);
+							arrayList9.add(vec3D13.addVector(0.0D, -1.0D, 0.0D));
+						} else {
+							arrayList9.remove(vec3D13);
+							if(vg.getBlockId(i14, i15, i16) == Block.blockSnow.blockID || vg.getBlockId(i14, i15, i16) == Block.blockSnow.blockID) {
+								this.func_9600_57JnQz29BeV8zgzsGl3J1kp08qjYLG4ixDPE5NIopzS8Rx361W9D19x2164N(vg, random8, i14, i15, i16);
+							}
+						}
+					}
+				}
+			}
+
+			return true;
+		}
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		Random random6 = new Random(rand.nextLong() + (long)x + (long)y + (long)z + world.randomSeed);
+		return Minecraft.field_7272_4vZ36FKx2I9PxzXyWH4290I55Q6yd6FI668q2Ylv62ISy2u1yh710qJ4Q0Yo || this.field_9601_14W2tr76fRFVwxt8UMKtXBST5QgZfZd76Kd60D0ecLT6rj2651p1OIw3Okl7 == null || random6.nextInt(150) != 0 && !this.field_9601_14W2tr76fRFVwxt8UMKtXBST5QgZfZd76Kd60D0ecLT6rj2651p1OIw3Okl7.booleanValue() ? this.func_9597_8ybc3aO2T6MgY1TYT8ss066o6JU57Xmb5te89rUZiY5oFY9rdx2bLb5U8vu3(world, rand, x, y, z) : this.func_9596_207WU7S6UShx2dKMu834lJM1ofWd2fa8azp67F0oht39izalOwX18EZ268Y8(world, rand, x, y, z);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockIceOld.java
@@ -1,0 +1,39 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockIceOld extends BlockBreakableOld {
+	public BlockIceOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.ice, false);
+		this.slipperiness = 0.98F;
+		this.setTickOnLoad(true);
+	}
+
+	public int getRenderBlockPass() {
+		return 1;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		return super.shouldSideBeRendered(abt, integer2, integer3, integer4, 1 - integer5);
+	}
+
+	public void onBlockRemoval(World vg, int integer2, int integer3, int integer4) {
+		Material material5 = vg.getBlockMaterial(integer2, integer3 - 1, integer4);
+		if(material5.getIsSolid() || material5.getIsLiquid()) {
+			vg.setBlockWithNotify(integer2, integer3, integer4, BlockOld.waterMoving.blockID);
+		}
+
+	}
+
+	public int quantityDropped(Random random) {
+		return 0;
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(vg.getSavedLightValue(EnumSkyBlock.Block, integer2, integer3, integer4) > 11 - BlockOld.lightOpacity[this.blockID]) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, BlockOld.waterStill.blockID);
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandNoclip.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+class CommandNoclip extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8565_7G0JQg0t57TYw233FG3RFxyZXGBge6wInqe8JWK2gby4h8FhSCj0cs7Op3Zs;
+    
+    CommandNoclip(final CommandManager abb) {
+        this.field_8565_7G0JQg0t57TYw233FG3RFxyZXGBge6wInqe8JWK2gby4h8FhSCj0cs7Op3Zs = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        if (ScreenDebugMenu.dbg_conf_enableCheats) {
+            InputHandler.mc.thePlayer.noClip = !InputHandler.mc.thePlayer.noClip;
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return InputHandler.mc.thePlayer.noClip ? "1" : "0";
+    }
+}
--- /dev/null
+++ net/minecraft/src/ItemSwordFlameberge.java
@@ -1,0 +1,43 @@
+package net.minecraft.src;
+
+public class ItemSwordFlameberge extends ItemSword {
+	int[] v2s = new int[]{3, 0, 3, 1, 2, 2, 1, 3, 0, 3, -1, 3, -2, 2, -3, 1, -3, 0, -3, -1, -2, -2, -1, -3, 0, -3, 1, -3, 2, -2, 3, -1};
+
+	public ItemSwordFlameberge(int itemID) {
+		super(itemID, 2);
+	}
+
+	public boolean BlockIDFirable(int integer) {
+		return integer == 0 || integer == 78;
+	}
+
+	public void SetBlockFire(World vg, int integer2, int integer3, int integer4, int integer5) {
+		if(integer5 != 6) {
+			int i6 = vg.getBlockId(integer2, integer3, integer4);
+			int i7 = vg.getBlockId(integer2, integer3 - 1, integer4);
+			if(this.BlockIDFirable(i6)) {
+				if(!this.BlockIDFirable(i7)) {
+					Ext1605Utils.setBlock(vg, (long)integer2, (long)integer3, (long)integer4, Block.fire.blockID);
+				} else {
+					this.SetBlockFire(vg, integer2, integer3 - 1, integer4, integer5 + 1);
+				}
+			} else {
+				this.SetBlockFire(vg, integer2, integer3 + 1, integer4, integer5 + 1);
+			}
+
+		}
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		int i4 = (int)entityPlayer.posX;
+		int i5 = (int)entityPlayer.posY;
+		int i6 = (int)entityPlayer.posZ;
+		worldObj.playSoundEffect((double)((float)entityPlayer.posX), (double)((float)entityPlayer.posY + 0.5F), (double)((float)entityPlayer.posZ), "ext.useflame", 0.4F, rand.nextFloat() * 0.3F + 0.7F);
+
+		for(int i7 = 0; i7 != this.v2s.length / 2; ++i7) {
+			this.SetBlockFire(worldObj, i4 + this.v2s[i7 * 2], i5, i6 + this.v2s[i7 * 2 + 1], 0);
+		}
+
+		return itemStack;
+	}
+}
--- net/minecraft/src/Tessellator.java
+++ net/minecraft/src/Tessellator.java
@@ -3,10 +3,11 @@
 import java.nio.ByteBuffer;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
+
 import org.lwjgl.opengl.ARBVertexBufferObject;
 import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL15;
 import org.lwjgl.opengl.GLContext;
+import org.lwjgl.opengl.GL15;
 
 public class Tessellator {
 	private static boolean convertQuadsToTriangles = true;
@@ -37,13 +38,15 @@
 	private int vboIndex = 0;
 	private int vboCount = 10;
 	private int bufferSize;
+	public int field_10304_0MROVDArlUltRNep2c82Yjn0c1YV0K6TX18zu3ch3eo466SKujDB70HFNvjW = 0;
+	public final int field_10293_3MB0Qm9645l05CgxH9Qp56vd457542UnkuBZPjHcpx7w5Fg2FpWDJ5149EH8 = 150;
 
-	private Tessellator(int var1) {
-		this.bufferSize = var1;
-		this.byteBuffer = GLAllocation.createDirectByteBuffer(var1 * 4);
+	private Tessellator(int integer) {
+		this.bufferSize = integer;
+		this.byteBuffer = GLAllocation.createDirectByteBuffer(integer * 4);
 		this.intBuffer = this.byteBuffer.asIntBuffer();
 		this.floatBuffer = this.byteBuffer.asFloatBuffer();
-		this.rawBuffer = new int[var1];
+		this.rawBuffer = new int[integer];
 		this.useVBO = tryVBO && GLContext.getCapabilities().GL_ARB_vertex_buffer_object;
 		if(this.useVBO) {
 			this.vertexBuffers = GLAllocation.createDirectIntBuffer(this.vboCount);
@@ -53,9 +56,7 @@
 	}
 
 	public void draw() {
-		if(!this.isDrawing) {
-			throw new IllegalStateException("Not tesselating!");
-		} else {
+		if(this.isDrawing) {
 			this.isDrawing = false;
 			if(this.vertexCount > 0) {
 				this.intBuffer.clear();
@@ -73,7 +74,7 @@
 						GL11.glTexCoordPointer(2, GL11.GL_FLOAT, 32, 12L);
 					} else {
 						this.floatBuffer.position(3);
-						GL11.glTexCoordPointer(2, 32, (FloatBuffer)this.floatBuffer);
+						GL11.glTexCoordPointer(2, 32, this.floatBuffer);
 					}
 
 					GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
@@ -95,7 +96,7 @@
 						GL11.glNormalPointer(GL11.GL_BYTE, 32, 24L);
 					} else {
 						this.byteBuffer.position(24);
-						GL11.glNormalPointer(32, (ByteBuffer)this.byteBuffer);
+						GL11.glNormalPointer(32, this.byteBuffer);
 					}
 
 					GL11.glEnableClientState(GL11.GL_NORMAL_ARRAY);
@@ -105,7 +106,7 @@
 					GL11.glVertexPointer(3, GL11.GL_FLOAT, 32, 0L);
 				} else {
 					this.floatBuffer.position(0);
-					GL11.glVertexPointer(3, 32, (FloatBuffer)this.floatBuffer);
+					GL11.glVertexPointer(3, 32, this.floatBuffer);
 				}
 
 				GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
@@ -131,6 +132,7 @@
 
 			this.reset();
 		}
+
 	}
 
 	private void reset() {
@@ -141,164 +143,186 @@
 	}
 
 	public void startDrawingQuads() {
-		this.startDrawing(7);
-	}
-
-	public void startDrawing(int var1) {
-		if(this.isDrawing) {
-			throw new IllegalStateException("Already tesselating!");
-		} else {
+		this.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(false);
+	}
+
+	public void func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(boolean boolean1) {
+		this.func_10268_3G1to8O20W0e2IAxPtN5nia9CixxL69I1Ao9c5u7G19MPeSOCku1IA8g8iV3(7, boolean1);
+	}
+
+	public void startDrawing(int integer) {
+		this.func_10268_3G1to8O20W0e2IAxPtN5nia9CixxL69I1Ao9c5u7G19MPeSOCku1IA8g8iV3(integer, false);
+	}
+
+	public void func_10268_3G1to8O20W0e2IAxPtN5nia9CixxL69I1Ao9c5u7G19MPeSOCku1IA8g8iV3(int integer, boolean boolean2) {
+		++this.field_10304_0MROVDArlUltRNep2c82Yjn0c1YV0K6TX18zu3ch3eo466SKujDB70HFNvjW;
+		if(boolean2 || InputHandler.mc.options.fancyGraphics != 2 || this.field_10304_0MROVDArlUltRNep2c82Yjn0c1YV0K6TX18zu3ch3eo466SKujDB70HFNvjW < 150) {
+			if(this.isDrawing) {
+				throw new IllegalStateException("Already tesselating!");
+			}
+
 			this.isDrawing = true;
 			this.reset();
-			this.drawMode = var1;
+			this.drawMode = integer;
 			this.hasNormals = false;
 			this.hasColor = false;
 			this.hasTexture = false;
 			this.isColorDisabled = false;
 		}
+
 	}
 
-	public void setTextureUV(double var1, double var3) {
+	public void setTextureUV(double double1, double double2) {
 		this.hasTexture = true;
-		this.textureU = var1;
-		this.textureV = var3;
-	}
-
-	public void setColorOpaque_F(float var1, float var2, float var3) {
-		this.setColorOpaque((int)(var1 * 255.0F), (int)(var2 * 255.0F), (int)(var3 * 255.0F));
-	}
-
-	public void setColorRGBA_F(float var1, float var2, float var3, float var4) {
-		this.setColorRGBA((int)(var1 * 255.0F), (int)(var2 * 255.0F), (int)(var3 * 255.0F), (int)(var4 * 255.0F));
-	}
-
-	public void setColorOpaque(int var1, int var2, int var3) {
-		this.setColorRGBA(var1, var2, var3, 255);
-	}
-
-	public void setColorRGBA(int var1, int var2, int var3, int var4) {
+		this.textureU = double1;
+		this.textureV = double2;
+	}
+
+	public void setColorOpaque_F(float float1, float float2, float float3) {
+		this.setColorOpaque((int)(float1 * 255.0F), (int)(float2 * 255.0F), (int)(float3 * 255.0F));
+	}
+
+	public void setColorRGBA_F(float float1, float float2, float float3, float float4) {
+		this.setColorRGBA((int)(float1 * 255.0F), (int)(float2 * 255.0F), (int)(float3 * 255.0F), (int)(float4 * 255.0F));
+	}
+
+	public void setColorOpaque(int integer1, int integer2, int integer3) {
+		this.setColorRGBA(integer1, integer2, integer3, 255);
+	}
+
+	public void setColorRGBA(int integer1, int integer2, int integer3, int integer4) {
 		if(!this.isColorDisabled) {
-			if(var1 > 255) {
-				var1 = 255;
-			}
-
-			if(var2 > 255) {
-				var2 = 255;
-			}
-
-			if(var3 > 255) {
-				var3 = 255;
-			}
-
-			if(var4 > 255) {
-				var4 = 255;
-			}
-
-			if(var1 < 0) {
-				var1 = 0;
-			}
-
-			if(var2 < 0) {
-				var2 = 0;
-			}
-
-			if(var3 < 0) {
-				var3 = 0;
-			}
-
-			if(var4 < 0) {
-				var4 = 0;
+			if(integer1 > 255) {
+				integer1 = 255;
+			}
+
+			if(integer2 > 255) {
+				integer2 = 255;
+			}
+
+			if(integer3 > 255) {
+				integer3 = 255;
+			}
+
+			if(integer4 > 255) {
+				integer4 = 255;
+			}
+
+			if(integer1 < 0) {
+				integer1 = 0;
+			}
+
+			if(integer2 < 0) {
+				integer2 = 0;
+			}
+
+			if(integer3 < 0) {
+				integer3 = 0;
+			}
+
+			if(integer4 < 0) {
+				integer4 = 0;
 			}
 
 			this.hasColor = true;
-			this.color = var4 << 24 | var3 << 16 | var2 << 8 | var1;
-		}
-	}
-
-	public void addVertexWithUV(double var1, double var3, double var5, double var7, double var9) {
-		this.setTextureUV(var7, var9);
-		this.addVertex(var1, var3, var5);
-	}
-
-	public void addVertex(double var1, double var3, double var5) {
-		++this.addedVertices;
-		if(this.drawMode == 7 && convertQuadsToTriangles && this.addedVertices % 4 == 0) {
-			for(int var7 = 0; var7 < 2; ++var7) {
-				int var8 = 8 * (3 - var7);
-				if(this.hasTexture) {
-					this.rawBuffer[this.rawBufferIndex + 3] = this.rawBuffer[this.rawBufferIndex - var8 + 3];
-					this.rawBuffer[this.rawBufferIndex + 4] = this.rawBuffer[this.rawBufferIndex - var8 + 4];
-				}
-
-				if(this.hasColor) {
-					this.rawBuffer[this.rawBufferIndex + 5] = this.rawBuffer[this.rawBufferIndex - var8 + 5];
-				}
-
-				this.rawBuffer[this.rawBufferIndex + 0] = this.rawBuffer[this.rawBufferIndex - var8 + 0];
-				this.rawBuffer[this.rawBufferIndex + 1] = this.rawBuffer[this.rawBufferIndex - var8 + 1];
-				this.rawBuffer[this.rawBufferIndex + 2] = this.rawBuffer[this.rawBufferIndex - var8 + 2];
-				++this.vertexCount;
-				this.rawBufferIndex += 8;
-			}
-		}
-
-		if(this.hasTexture) {
-			this.rawBuffer[this.rawBufferIndex + 3] = Float.floatToRawIntBits((float)this.textureU);
-			this.rawBuffer[this.rawBufferIndex + 4] = Float.floatToRawIntBits((float)this.textureV);
-		}
-
-		if(this.hasColor) {
-			this.rawBuffer[this.rawBufferIndex + 5] = this.color;
-		}
-
-		if(this.hasNormals) {
-			this.rawBuffer[this.rawBufferIndex + 6] = this.normal;
-		}
-
-		this.rawBuffer[this.rawBufferIndex + 0] = Float.floatToRawIntBits((float)(var1 + this.xOffset));
-		this.rawBuffer[this.rawBufferIndex + 1] = Float.floatToRawIntBits((float)(var3 + this.yOffset));
-		this.rawBuffer[this.rawBufferIndex + 2] = Float.floatToRawIntBits((float)(var5 + this.zOffset));
-		this.rawBufferIndex += 8;
-		++this.vertexCount;
-		if(this.vertexCount % 4 == 0 && this.rawBufferIndex >= this.bufferSize - 32) {
-			this.draw();
-			this.isDrawing = true;
-		}
-
-	}
-
-	public void setColorOpaque_I(int var1) {
-		int var2 = var1 >> 16 & 255;
-		int var3 = var1 >> 8 & 255;
-		int var4 = var1 & 255;
-		this.setColorOpaque(var2, var3, var4);
+			this.color = integer4 << 24 | integer3 << 16 | integer2 << 8 | integer1;
+		}
+
+	}
+
+	public void addVertexWithUV(double double1, double double2, double double3, double double4, double double5) {
+		if(this.isDrawing) {
+			this.setTextureUV(double4, double5);
+			this.addVertex(double1, double2, double3);
+		}
+	}
+
+	public void addVertex(double double1, double double2, double double3) {
+		if(this.isDrawing) {
+			++this.addedVertices;
+			if(this.drawMode == 7 && convertQuadsToTriangles && this.addedVertices % 4 == 0) {
+				for(int i7 = 0; i7 < 2; ++i7) {
+					int i8 = 8 * (3 - i7);
+					if(this.hasTexture) {
+						this.rawBuffer[this.rawBufferIndex + 3] = this.rawBuffer[this.rawBufferIndex - i8 + 3];
+						this.rawBuffer[this.rawBufferIndex + 4] = this.rawBuffer[this.rawBufferIndex - i8 + 4];
+					}
+
+					if(this.hasColor) {
+						this.rawBuffer[this.rawBufferIndex + 5] = this.rawBuffer[this.rawBufferIndex - i8 + 5];
+					}
+
+					this.rawBuffer[this.rawBufferIndex + 0] = this.rawBuffer[this.rawBufferIndex - i8 + 0];
+					this.rawBuffer[this.rawBufferIndex + 1] = this.rawBuffer[this.rawBufferIndex - i8 + 1];
+					this.rawBuffer[this.rawBufferIndex + 2] = this.rawBuffer[this.rawBufferIndex - i8 + 2];
+					++this.vertexCount;
+					this.rawBufferIndex += 8;
+				}
+			}
+
+			if(this.hasTexture) {
+				this.rawBuffer[this.rawBufferIndex + 3] = Float.floatToRawIntBits((float)this.textureU);
+				this.rawBuffer[this.rawBufferIndex + 4] = Float.floatToRawIntBits((float)this.textureV);
+			}
+
+			if(this.hasColor) {
+				this.rawBuffer[this.rawBufferIndex + 5] = this.color;
+			}
+
+			if(this.hasNormals) {
+				this.rawBuffer[this.rawBufferIndex + 6] = this.normal;
+			}
+
+			this.rawBuffer[this.rawBufferIndex + 0] = Float.floatToRawIntBits((float)(double1 + this.xOffset));
+			this.rawBuffer[this.rawBufferIndex + 1] = Float.floatToRawIntBits((float)(double2 + this.yOffset));
+			this.rawBuffer[this.rawBufferIndex + 2] = Float.floatToRawIntBits((float)(double3 + this.zOffset));
+			this.rawBufferIndex += 8;
+			++this.vertexCount;
+			if(this.vertexCount % 4 == 0 && this.rawBufferIndex >= this.bufferSize - 32) {
+				this.draw();
+				this.isDrawing = true;
+			}
+
+		}
+	}
+
+	public void setColorOpaque_I(int integer) {
+		int i2 = integer >> 16 & 255;
+		int i3 = integer >> 8 & 255;
+		int i4 = integer & 255;
+		this.setColorOpaque(i2, i3, i4);
+	}
+
+	public void func_10264_9bHy7fL74IXD4UsqOd2Ex73M73ud0NIomc86hi8cp0K3zOYc25dWZ4o11NzU(int integer1, int integer2) {
+		int i3 = integer1 >> 16 & 255;
+		int i4 = integer1 >> 8 & 255;
+		int i5 = integer1 & 255;
+		this.setColorRGBA(i3, i4, i5, integer2);
 	}
 
 	public void disableColor() {
 		this.isColorDisabled = true;
 	}
 
-	public void setNormal(float var1, float var2, float var3) {
-		if(!this.isDrawing) {
-			System.out.println("But..");
+	public void setNormal(float float1, float float2, float float3) {
+		if(this.isDrawing) {
+			this.hasNormals = true;
+			byte b4 = (byte)((int)(float1 * 128.0F));
+			byte b5 = (byte)((int)(float2 * 127.0F));
+			byte b6 = (byte)((int)(float3 * 127.0F));
+			this.normal = b4 | b5 << 8 | b6 << 16;
 		}
-
-		this.hasNormals = true;
-		byte var4 = (byte)((int)(var1 * 128.0F));
-		byte var5 = (byte)((int)(var2 * 127.0F));
-		byte var6 = (byte)((int)(var3 * 127.0F));
-		this.normal = var4 | var5 << 8 | var6 << 16;
-	}
-
-	public void setTranslationD(double var1, double var3, double var5) {
-		this.xOffset = var1;
-		this.yOffset = var3;
-		this.zOffset = var5;
-	}
-
-	public void setTranslationF(float var1, float var2, float var3) {
-		this.xOffset += (double)var1;
-		this.yOffset += (double)var2;
-		this.zOffset += (double)var3;
+	}
+
+	public void setTranslationD(double double1, double double2, double double3) {
+		this.xOffset = double1;
+		this.yOffset = double2;
+		this.zOffset = double3;
+	}
+
+	public void setTranslationF(float float1, float float2, float float3) {
+		this.xOffset += (double)float1;
+		this.yOffset += (double)float2;
+		this.zOffset += (double)float3;
 	}
 }
--- /dev/null
+++ net/minecraft/src/NetSplitImageDataHandler.java
@@ -1,0 +1,51 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+
+public class NetSplitImageDataHandler {
+	public static HashMap handlers = new HashMap();
+	public String targetName;
+	public byte[] imageData;
+	public int chunkSize = 1024;
+	public int wholeSize;
+	public int recvdSize = 0;
+	public List receivedChunks = new ArrayList();
+
+	public NetSplitImageDataHandler(String string, int integer) {
+		this.targetName = string;
+		this.imageData = new byte[integer];
+		this.wholeSize = integer;
+	}
+
+	public static NetSplitImageDataHandler getHandler(String string, int integer) {
+		if(!handlers.containsKey(string)) {
+			handlers.put(string, new NetSplitImageDataHandler(string, integer));
+		}
+
+		return (NetSplitImageDataHandler)handlers.get(string);
+	}
+
+	public void ReceiveChunk(byte[] arr, int integer) {
+		if(integer >= 0 && integer <= this.wholeSize / this.chunkSize) {
+			if(!this.receivedChunks.contains(integer)) {
+				ExtLogger.i("Received data chunk n" + integer);
+				int i3 = integer * this.chunkSize;
+				int i4 = 1024;
+				if(i3 + this.chunkSize > this.wholeSize) {
+					i4 = this.wholeSize - i3;
+				}
+
+				System.arraycopy(arr, 0, this.imageData, integer * this.chunkSize, i4);
+				this.recvdSize += arr.length;
+			}
+		} else {
+			ExtLogger.w("Received invalid data chunk n" + integer);
+		}
+	}
+
+	public boolean IsComplete() {
+		return this.recvdSize >= this.wholeSize;
+	}
+}
--- net/minecraft/src/TextureWaterFlowFX.java
+++ net/minecraft/src/TextureWaterFlowFX.java
@@ -14,73 +14,76 @@
 
 	public void onTick() {
 		++this.tickCounter;
-
-		int var1;
-		int var2;
-		float var3;
-		int var5;
-		int var6;
-		for(var1 = 0; var1 < 16; ++var1) {
-			for(var2 = 0; var2 < 16; ++var2) {
-				var3 = 0.0F;
-
-				for(int var4 = var2 - 2; var4 <= var2; ++var4) {
-					var5 = var1 & 15;
-					var6 = var4 & 15;
-					var3 += this.red[var5 + var6 * 16];
-				}
-
-				this.green[var1 + var2 * 16] = var3 / 3.2F + this.blue[var1 + var2 * 16] * 0.8F;
-			}
-		}
-
-		for(var1 = 0; var1 < 16; ++var1) {
-			for(var2 = 0; var2 < 16; ++var2) {
-				this.blue[var1 + var2 * 16] += this.alpha[var1 + var2 * 16] * 0.05F;
-				if(this.blue[var1 + var2 * 16] < 0.0F) {
-					this.blue[var1 + var2 * 16] = 0.0F;
-				}
-
-				this.alpha[var1 + var2 * 16] -= 0.3F;
-				if(Math.random() < 0.2D) {
-					this.alpha[var1 + var2 * 16] = 0.5F;
-				}
-			}
-		}
-
-		float[] var12 = this.green;
-		this.green = this.red;
-		this.red = var12;
-
-		for(var2 = 0; var2 < 256; ++var2) {
-			var3 = this.red[var2 - this.tickCounter * 16 & 255];
-			if(var3 > 1.0F) {
-				var3 = 1.0F;
-			}
-
-			if(var3 < 0.0F) {
-				var3 = 0.0F;
-			}
-
-			float var13 = var3 * var3;
-			var5 = (int)(32.0F + var13 * 32.0F);
-			var6 = (int)(50.0F + var13 * 64.0F);
-			int var7 = 255;
-			int var8 = (int)(146.0F + var13 * 50.0F);
-			if(this.anaglyphEnabled) {
-				int var9 = (var5 * 30 + var6 * 59 + var7 * 11) / 100;
-				int var10 = (var5 * 30 + var6 * 70) / 100;
-				int var11 = (var5 * 30 + var7 * 70) / 100;
-				var5 = var9;
-				var6 = var10;
-				var7 = var11;
-			}
-
-			this.imageData[var2 * 4 + 0] = (byte)var5;
-			this.imageData[var2 * 4 + 1] = (byte)var6;
-			this.imageData[var2 * 4 + 2] = (byte)var7;
-			this.imageData[var2 * 4 + 3] = (byte)var8;
-		}
-
+		if(InputHandler.mc.options.fancyGraphics != 2 || this.field_10713_88024hG6da4f4kcVfOqR8cTJ36RtCs13wB6V30Rs17vqAj14F4Cqz3neFg20) {
+			this.field_10713_88024hG6da4f4kcVfOqR8cTJ36RtCs13wB6V30Rs17vqAj14F4Cqz3neFg20 = false;
+
+			int i1;
+			int i2;
+			float f3;
+			int i4;
+			int i5;
+			for(i1 = 0; i1 < 16; ++i1) {
+				for(i2 = 0; i2 < 16; ++i2) {
+					f3 = 0.0F;
+
+					for(int i6 = i2 - 2; i6 <= i2; ++i6) {
+						i4 = i1 & 15;
+						i5 = i6 & 15;
+						f3 += this.red[i4 + i5 * 16];
+					}
+
+					this.green[i1 + i2 * 16] = f3 / 3.2F + this.blue[i1 + i2 * 16] * 0.8F;
+				}
+			}
+
+			for(i1 = 0; i1 < 16; ++i1) {
+				for(i2 = 0; i2 < 16; ++i2) {
+					this.blue[i1 + i2 * 16] += this.alpha[i1 + i2 * 16] * 0.05F;
+					if(this.blue[i1 + i2 * 16] < 0.0F) {
+						this.blue[i1 + i2 * 16] = 0.0F;
+					}
+
+					this.alpha[i1 + i2 * 16] -= 0.3F;
+					if(Math.random() < 0.2D) {
+						this.alpha[i1 + i2 * 16] = 0.5F;
+					}
+				}
+			}
+
+			float[] f13 = this.green;
+			this.green = this.red;
+			this.red = f13;
+
+			for(i2 = 0; i2 < 256; ++i2) {
+				f3 = this.red[i2 - this.tickCounter * 16 & 255];
+				if(f3 > 1.0F) {
+					f3 = 1.0F;
+				}
+
+				if(f3 < 0.0F) {
+					f3 = 0.0F;
+				}
+
+				float f7 = f3 * f3;
+				i4 = (int)(32.0F + f7 * 32.0F);
+				i5 = (int)(50.0F + f7 * 64.0F);
+				int i8 = 255;
+				int i9 = (int)(146.0F + f7 * 50.0F);
+				if(this.anaglyphEnabled) {
+					int i10 = (i4 * 30 + i5 * 59 + i8 * 11) / 100;
+					int i11 = (i4 * 30 + i5 * 70) / 100;
+					int i12 = (i4 * 30 + i8 * 70) / 100;
+					i4 = i10;
+					i5 = i11;
+					i8 = i12;
+				}
+
+				this.imageData[i2 * 4 + 0] = (byte)i4;
+				this.imageData[i2 * 4 + 1] = (byte)i5;
+				this.imageData[i2 * 4 + 2] = (byte)i8;
+				this.imageData[i2 * 4 + 3] = (byte)i9;
+			}
+
+		}
 	}
 }
--- net/minecraft/src/EnumOSIsom.java
+++ net/minecraft/src/EnumOSIsom.java
@@ -6,4 +6,12 @@
 	windows,
 	macos,
 	unknown;
+
+	public static EnumOSIsom func_10689_7uK3J55m8yMkpQ2ydJ7CmNjp41V7WAqGMCdtAeg95xG2WvkchnYvtT54SmME(String string) {
+		return (EnumOSIsom)Enum.valueOf(EnumOSIsom.class, string);
+	}
+
+	private static EnumOSIsom[] func_10688_0p7id85Oby5ZE1XLbpA8uBM4t1x8vBpTbuK0R6320rlw9LfbkTCJG6492QTf() {
+		return new EnumOSIsom[]{linux, solaris, windows, macos, unknown};
+	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenHouseSmallUnknownClass4.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public abstract class WorldGenHouseSmallUnknownClass4 {
+	public static final int field_11470_0Tuli76kpX0a412c0QXG7pzA13eN3qEY8w43UEEjdz6uFY96YtwB5tj02gDN = 14;
+
+	public abstract WorldGenHouseSmallUnknownClass2 func_11469_1XD49rMZ7tPLtP0CWc3LgGLFv6JSjO4Q2B8uBaPHCRWAe6cbTx3935ua6FcY();
+
+	public abstract WorldGenHouseSmallUnknownClass2 func_11466_770WwnPt75L6J8UguFyXX1ITRtqTVRYMUSrCy1V0cX98wO01Qc5EpwKsvcM9();
+
+	public abstract boolean func_11468_5FEqwXoAtY7AI1e7tv5jsIS2I33Pxp03S2iKy3TijST5d36Zh4iU6YGR536H(World world1, int i2, int i3);
+
+	public static WorldGenHouseSmallUnknownClass4 func_11467_510xxO0w79ZkBWq2cMUy7UUel9V7981Kqlz3lT2pU4RuFo2N2qx8G3dE8izE(Random random, WorldGenHouseSmallUnknownClass2 ns) {
+		return new WorldGenHouseSmallUnknownClass3(ns);
+	}
+}
--- net/minecraft/src/NBTTagInt.java
+++ net/minecraft/src/NBTTagInt.java
@@ -10,16 +10,16 @@
 	public NBTTagInt() {
 	}
 
-	public NBTTagInt(int var1) {
-		this.intValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeInt(this.intValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.intValue = var1.readInt();
+	public NBTTagInt(int value) {
+		this.intValue = value;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeInt(this.intValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.intValue = dataInput.readInt();
 	}
 
 	public byte getType() {
--- net/minecraft/src/ItemSword.java
+++ net/minecraft/src/ItemSword.java
@@ -3,30 +3,33 @@
 public class ItemSword extends Item {
 	private int weaponDamage;
 
-	public ItemSword(int var1, int var2) {
-		super(var1);
+	public ItemSword(int itemID, int maxDamage) {
+		super(itemID);
 		this.maxStackSize = 1;
-		this.maxDamage = 32 << var2;
-		if(var2 == 3) {
+		this.maxDamage = 32 << maxDamage;
+		if(maxDamage == 3) {
 			this.maxDamage *= 4;
 		}
 
-		this.weaponDamage = 4 + var2 * 2;
+		this.weaponDamage = 4 + maxDamage * 2;
 	}
 
-	public float getStrVsBlock(ItemStack var1, Block var2) {
+	public float getStrVsBlock(ItemStack stack, Block block) {
 		return 1.5F;
 	}
 
-	public void hitEntity(ItemStack var1, EntityLiving var2) {
-		var1.damageItem(1);
-	}
-
-	public void onBlockDestroyed(ItemStack var1, int var2, int var3, int var4, int var5) {
-		var1.damageItem(2);
-	}
-
-	public int getDamageVsEntity(Entity var1) {
+	public void hitEntity(ItemStack itemStack, EntityLiving entityLiving) {
+		if(!(entityLiving.worldObj instanceof ZMWorld)) {
+			itemStack.damageItem(1);
+		}
+
+	}
+
+	public void onBlockDestroyed(ItemStack stack, int x, int y, int z, int z1) {
+		stack.damageItem(2);
+	}
+
+	public int getDamageVsEntity(Entity entity) {
 		return this.weaponDamage;
 	}
 
--- net/minecraft/src/Packet17AddToInventory.java
+++ net/minecraft/src/Packet17AddToInventory.java
@@ -9,20 +9,20 @@
 	public int count;
 	public int itemDamage;
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.itemID = var1.readShort();
-		this.count = var1.readByte();
-		this.itemDamage = var1.readShort();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeShort(this.itemID);
-		var1.writeByte(this.count);
-		var1.writeShort(this.itemDamage);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleAddToInventory(this);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.itemID = dataInputStream.readShort() & 65535;
+		this.count = dataInputStream.readByte();
+		this.itemDamage = dataInputStream.readShort();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeShort(this.itemID);
+		dataOutputStream.writeByte(this.count);
+		dataOutputStream.writeShort(this.itemDamage);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleAddToInventory(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/ModelLayerLocation.java
@@ -1,0 +1,6 @@
+package net.minecraft.src;
+
+public class ModelLayerLocation {
+	public ModelLayerLocation(ResourceLocation bj, String string) {
+	}
+}
--- net/minecraft/src/TileEntityChest.java
+++ net/minecraft/src/TileEntityChest.java
@@ -7,36 +7,40 @@
 		return 27;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.chestContents[var1];
+	public ItemStack getStackInSlot(int slot) {
+		return this.chestContents[slot];
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
-		if(this.chestContents[var1] != null) {
-			ItemStack var3;
-			if(this.chestContents[var1].stackSize <= var2) {
-				var3 = this.chestContents[var1];
-				this.chestContents[var1] = null;
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.chestContents[slot] != null) {
+			ItemStack itemStack3;
+			if(this.chestContents[slot].stackSize <= stackSize) {
+				itemStack3 = this.chestContents[slot];
+				this.chestContents[slot] = null;
 				this.onInventoryChanged();
-				return var3;
+				return itemStack3;
 			} else {
-				var3 = this.chestContents[var1].splitStack(var2);
-				if(this.chestContents[var1].stackSize == 0) {
-					this.chestContents[var1] = null;
+				itemStack3 = this.chestContents[slot].splitStack(stackSize);
+				if(this.chestContents[slot].stackSize == 0) {
+					this.chestContents[slot] = null;
 				}
 
 				this.onInventoryChanged();
-				return var3;
+				return itemStack3;
 			}
 		} else {
 			return null;
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.chestContents[var1] = var2;
-		if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-			var2.stackSize = this.getInventoryStackLimit();
+	public void onInventoryChanged() {
+		super.onInventoryChanged();
+	}
+
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.chestContents[slot] = itemStack;
+		if(itemStack != null && itemStack.stackSize > this.getInventoryStackLimit()) {
+			itemStack.stackSize = this.getInventoryStackLimit();
 		}
 
 		this.onInventoryChanged();
@@ -46,38 +50,38 @@
 		return "Chest";
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		super.readFromNBT(var1);
-		NBTTagList var2 = var1.getTagList("Items");
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		super.readFromNBT(nbttagcompound);
+		NBTTagList nBTTagList2 = nbttagcompound.getTagList("Items");
 		this.chestContents = new ItemStack[this.getSizeInventory()];
 
-		for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-			NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-			int var5 = var4.getByte("Slot") & 255;
-			if(var5 >= 0 && var5 < this.chestContents.length) {
-				this.chestContents[var5] = new ItemStack(var4);
+		for(int i3 = 0; i3 < nBTTagList2.tagCount(); ++i3) {
+			NBTTagCompound nBTTagCompound4 = (NBTTagCompound)nBTTagList2.tagAt(i3);
+			int i5 = nBTTagCompound4.getByte("Slot") & 255;
+			if(i5 >= 0 && i5 < this.chestContents.length) {
+				this.chestContents[i5] = new ItemStack(nBTTagCompound4);
 			}
 		}
 
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		super.writeToNBT(var1);
-		NBTTagList var2 = new NBTTagList();
+	public void writeToNBT(NBTTagCompound nbttagcompound) {
+		super.writeToNBT(nbttagcompound);
+		NBTTagList nBTTagList2 = new NBTTagList();
 
-		for(int var3 = 0; var3 < this.chestContents.length; ++var3) {
-			if(this.chestContents[var3] != null) {
-				NBTTagCompound var4 = new NBTTagCompound();
-				var4.setByte("Slot", (byte)var3);
-				this.chestContents[var3].writeToNBT(var4);
-				var2.setTag(var4);
+		for(int i3 = 0; i3 < this.chestContents.length; ++i3) {
+			if(this.chestContents[i3] != null) {
+				NBTTagCompound nBTTagCompound4 = new NBTTagCompound();
+				nBTTagCompound4.setByte("Slot", (byte)i3);
+				this.chestContents[i3].writeToNBT(nBTTagCompound4);
+				nBTTagList2.setTag(nBTTagCompound4);
 			}
 		}
 
-		var1.setTag("Items", var2);
+		nbttagcompound.setTag("Items", nBTTagList2);
 	}
 
 	public int getInventoryStackLimit() {
-		return 64;
+		return 10000;
 	}
 }
--- net/minecraft/src/EntitySlime.java
+++ net/minecraft/src/EntitySlime.java
@@ -6,8 +6,8 @@
 	private int slimeJumpDelay = 0;
 	public int size = 1;
 
-	public EntitySlime(World var1) {
-		super(var1);
+	public EntitySlime(World world) {
+		super(world);
 		this.texture = "/mob/slime.png";
 		this.size = 1 << this.rand.nextInt(3);
 		this.yOffset = 0.0F;
@@ -15,34 +15,34 @@
 		this.setSlimeSize(this.size);
 	}
 
-	public void setSlimeSize(int var1) {
-		this.size = var1;
-		this.setSize(0.6F * (float)var1, 0.6F * (float)var1);
-		this.health = var1 * var1;
+	public void setSlimeSize(int size) {
+		this.size = size;
+		this.setSize(0.6F * (float)size, 0.6F * (float)size);
+		this.health = size * size;
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setInteger("Size", this.size - 1);
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+		nbttagcompound.setInteger("Size", this.size - 1);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.size = var1.getInteger("Size") + 1;
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+		this.size = nbttagcompound.getInteger("Size") + 1;
 	}
 
 	public void onUpdate() {
 		this.prevSquishFactor = this.squishFactor;
-		boolean var1 = this.onGround;
+		boolean z1 = this.onGround;
 		super.onUpdate();
-		if(this.onGround && !var1) {
-			for(int var2 = 0; var2 < this.size * 8; ++var2) {
-				float var3 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
-				float var4 = this.rand.nextFloat() * 0.5F + 0.5F;
-				float var5 = MathHelper.sin(var3) * (float)this.size * 0.5F * var4;
-				float var6 = MathHelper.cos(var3) * (float)this.size * 0.5F * var4;
-				this.worldObj.spawnParticle("slime", this.posX + (double)var5, this.boundingBox.minY, this.posZ + (double)var6, 0.0D, 0.0D, 0.0D);
+		if(this.onGround && !z1) {
+			for(int i2 = 0; i2 < this.size * 8; ++i2) {
+				float f3 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
+				float f4 = this.rand.nextFloat() * 0.5F + 0.5F;
+				float f5 = MathHelper.sin(f3) * (float)this.size * 0.5F * f4;
+				float f6 = MathHelper.cos(f3) * (float)this.size * 0.5F * f4;
+				this.worldObj.spawnParticle("slime", this.posX + (double)f5, this.boundingBox.minY, this.posZ + (double)f6, 0.0D, 0.0D, 0.0D);
 			}
 
 			if(this.size > 2) {
@@ -56,14 +56,14 @@
 	}
 
 	protected void updateEntityActionState() {
-		EntityPlayer var1 = this.worldObj.getClosestPlayerToEntity(this, 16.0D);
-		if(var1 != null) {
-			this.faceEntity(var1, 10.0F);
+		EntityPlayer entityPlayer1 = this.worldObj.getClosestPlayerToEntity(this, 16.0D);
+		if(entityPlayer1 != null) {
+			this.faceEntity(entityPlayer1, 10.0F);
 		}
 
 		if(this.onGround && this.slimeJumpDelay-- <= 0) {
 			this.slimeJumpDelay = this.rand.nextInt(20) + 10;
-			if(var1 != null) {
+			if(entityPlayer1 != null) {
 				this.slimeJumpDelay /= 3;
 			}
 
@@ -86,21 +86,21 @@
 
 	public void setEntityDead() {
 		if(this.size > 1 && this.health == 0) {
-			for(int var1 = 0; var1 < 4; ++var1) {
-				float var2 = ((float)(var1 % 2) - 0.5F) * (float)this.size / 4.0F;
-				float var3 = ((float)(var1 / 2) - 0.5F) * (float)this.size / 4.0F;
-				EntitySlime var4 = new EntitySlime(this.worldObj);
-				var4.setSlimeSize(this.size / 2);
-				var4.setLocationAndAngles(this.posX + (double)var2, this.posY + 0.5D, this.posZ + (double)var3, this.rand.nextFloat() * 360.0F, 0.0F);
-				this.worldObj.spawnEntityInWorld(var4);
+			for(int i1 = 0; i1 < 4; ++i1) {
+				float f2 = ((float)(i1 % 2) - 0.5F) * (float)this.size / 4.0F;
+				float f3 = ((float)(i1 / 2) - 0.5F) * (float)this.size / 4.0F;
+				EntitySlime entitySlime4 = new EntitySlime(this.worldObj);
+				entitySlime4.setSlimeSize(this.size / 2);
+				entitySlime4.setLocationAndAngles(this.posX + (double)f2, this.posY + 0.5D, this.posZ + (double)f3, this.rand.nextFloat() * 360.0F, 0.0F);
+				this.worldObj.spawnEntityInWorld(entitySlime4);
 			}
 		}
 
 		super.setEntityDead();
 	}
 
-	public void onCollideWithPlayer(EntityPlayer var1) {
-		if(this.size > 1 && this.canEntityBeSeen(var1) && (double)this.getDistanceToEntity(var1) < 0.6D * (double)this.size && var1.attackEntityFrom(this, this.size)) {
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+		if(this.size > 1 && this.canEntityBeSeen(entityPlayer) && (double)this.getDistanceToEntity(entityPlayer) < 0.6D * (double)this.size && entityPlayer.attackEntityFrom(this, this.size)) {
 			this.worldObj.playSoundAtEntity(this, "mob.slimeattack", 1.0F, (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
 		}
 
@@ -119,8 +119,8 @@
 	}
 
 	public boolean getCanSpawnHere() {
-		Chunk var1 = this.worldObj.getChunkFromBlockCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY));
-		return (this.size == 1 || this.worldObj.difficultySetting > 0) && this.rand.nextInt(10) == 0 && var1.getRandomWithSeed(987234911L).nextInt(10) == 0 && this.posY < 16.0D;
+		Chunk chunk1 = this.worldObj.getChunkFromBlockCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY));
+		return (this.size == 1 || this.worldObj.difficultySetting > 0) && this.rand.nextInt(10) == 0 && chunk1.getRandomWithSeed(987234911L).nextInt(10) == 0 && this.posY < 16.0D;
 	}
 
 	protected float getSoundVolume() {
--- net/minecraft/src/BlockGrass.java
+++ net/minecraft/src/BlockGrass.java
@@ -3,42 +3,67 @@
 import java.util.Random;
 
 public class BlockGrass extends Block {
-	protected BlockGrass(int var1) {
-		super(var1, Material.grass);
+	protected BlockGrass(int id) {
+		super(id, Material.grass);
 		this.blockIndexInTexture = 3;
 		this.setTickOnLoad(true);
 	}
 
-	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		if(var5 == 1) {
-			return 0;
-		} else if(var5 == 0) {
+	public int getBlockTexture(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		if(side == 0) {
 			return 2;
 		} else {
-			Material var6 = var1.getBlockMaterial(var2, var3 + 1, var4);
-			return var6 != Material.snow && var6 != Material.craftedSnow ? 3 : 68;
+			if(!ScreenDebugMenu.field_7964_8G80Kimsj2t150ZuEHxk97V3fSV455qzurOOVWgX8oTDDCEH9YV34z9vRAoC) {
+				WorldGenMyconUnknownClass worldGenMyconUnknownClass6 = blockAccess.func_7342_9805301CWs03An9555qIw883P54dcq9802DkM5DuquNweM1NH26RH6oP02mr().func_10185_7j1lR4019pucW00n7wn38afjBd62vEMB6B6SVB9068f4kyPzw4E6wI65ufr8(x, z, EnumWorldGenerator.SURFACE);
+				if(worldGenMyconUnknownClass6 != null) {
+					Material material7;
+					switch(worldGenMyconUnknownClass6.func_9983_8WfOXonA2bRS7hUpHd7sbe7k20yqj7N6OH13GX3XXy71V13Eva115wQwe47C()) {
+					case 1:
+						if(side == 1) {
+							return 320;
+						}
+
+						material7 = blockAccess.getBlockMaterial(x, y + 1, z);
+						return material7 != Material.snow && material7 != Material.craftedSnow ? 321 : 68;
+					case 2:
+						if(side == 1) {
+							return 215;
+						}
+
+						material7 = blockAccess.getBlockMaterial(x, y + 1, z);
+						return material7 != Material.snow && material7 != Material.craftedSnow ? 214 : 68;
+					}
+				}
+			}
+
+			if(side == 1) {
+				return 0;
+			} else {
+				Material material8 = blockAccess.getBlockMaterial(x, y + 1, z);
+				return material8 != Material.snow && material8 != Material.craftedSnow ? 3 : 68;
+			}
 		}
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getBlockLightValue(var2, var3 + 1, var4) < 4 && var1.getBlockMaterial(var2, var3 + 1, var4).getCanBlockGrass()) {
-			if(var5.nextInt(4) != 0) {
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(world.getBlockLightValue(x, y + 1, z) < 4 && world.getBlockMaterial(x, y + 1, z).getCanBlockGrass()) {
+			if(random.nextInt(4) != 0) {
 				return;
 			}
 
-			var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
-		} else if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9) {
-			int var6 = var2 + var5.nextInt(3) - 1;
-			int var7 = var3 + var5.nextInt(5) - 3;
-			int var8 = var4 + var5.nextInt(3) - 1;
-			if(var1.getBlockId(var6, var7, var8) == Block.dirt.blockID && var1.getBlockLightValue(var6, var7 + 1, var8) >= 4 && !var1.getBlockMaterial(var6, var7 + 1, var8).getCanBlockGrass()) {
-				var1.setBlockWithNotify(var6, var7, var8, Block.grass.blockID);
+			world.setBlockWithNotify(x, y, z, Block.dirt.blockID);
+		} else if(world.getBlockLightValue(x, y + 1, z) >= 9) {
+			int i6 = x + random.nextInt(3) - 1;
+			int i7 = y + random.nextInt(5) - 3;
+			int i8 = z + random.nextInt(3) - 1;
+			if(world.getBlockId(i6, i7, i8) == Block.dirt.blockID && world.getBlockLightValue(i6, i7 + 1, i8) >= 4 && !world.getBlockMaterial(i6, i7 + 1, i8).getCanBlockGrass()) {
+				world.setBlockWithNotify(i6, i7, i8, this.blockID);
 			}
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return Block.dirt.idDropped(0, var2);
+	public int idDropped(int count, Random random) {
+		return Block.dirt.idDropped(0, random);
 	}
 }
--- /dev/null
+++ net/minecraft/src/ItemRokkubitoruTune.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+import org.lwjgl.input.Keyboard;
+
+public class ItemRokkubitoruTune extends ItemRecord {
+	public ItemRokkubitoruTune(int itemID, String recordName) {
+		super(itemID, recordName);
+	}
+
+	public String itemName() {
+		return Keyboard.isKeyDown(Keyboard.KEY_RSHIFT) ? "LA CREATURA MAGNIFICA" : this.itemName;
+	}
+}
--- net/minecraft/src/Packet29DestroyEntity.java
+++ net/minecraft/src/Packet29DestroyEntity.java
@@ -7,16 +7,16 @@
 public class Packet29DestroyEntity extends Packet {
 	public int entityId;
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleDestroyEntity(this);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleDestroyEntity(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/RPacketA0Ping.java
@@ -1,0 +1,27 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class RPacketA0Ping implements RPacket {
+	public byte GetPacketID() {
+		return (byte)-96;
+	}
+
+	public void Send(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeByte(17);
+	}
+
+	public void Receive(DataInputStream dataInputStream) throws IOException {
+		byte b2 = dataInputStream.readByte();
+		System.out.println("Ping request received: " + b2);
+	}
+
+	public void Respond(DataOutputStream dataOutputStream) throws IOException {
+	}
+
+	public int GetResponseSize() {
+		return 1;
+	}
+}
--- net/minecraft/src/SoundPool.java
+++ net/minecraft/src/SoundPool.java
@@ -10,43 +10,56 @@
 
 public class SoundPool {
 	private Random rand = new Random();
-	private Map nameToSoundPoolEntriesMapping = new HashMap();
+	public Map nameToSoundPoolEntriesMapping = new HashMap();
 	private List allSoundPoolEntries = new ArrayList();
 	public int numberOfSoundPoolEntries = 0;
 	public boolean isGetRandomSound = true;
 
-	public SoundPoolEntry addSound(String var1, File var2) {
+	public SoundPoolEntry addSound(String string, File file) {
 		try {
-			String var3 = var1;
-			var1 = var1.substring(0, var1.indexOf("."));
+			String string3 = string;
+			string = string.substring(0, string.indexOf("."));
 			if(this.isGetRandomSound) {
-				while(Character.isDigit(var1.charAt(var1.length() - 1))) {
-					var1 = var1.substring(0, var1.length() - 1);
+				while(Character.isDigit(string.charAt(string.length() - 1))) {
+					string = string.substring(0, string.length() - 1);
 				}
 			}
 
-			var1 = var1.replaceAll("/", ".");
-			if(!this.nameToSoundPoolEntriesMapping.containsKey(var1)) {
-				this.nameToSoundPoolEntriesMapping.put(var1, new ArrayList());
+			string = string.replaceAll("/", ".");
+			if(!this.nameToSoundPoolEntriesMapping.containsKey(string)) {
+				this.nameToSoundPoolEntriesMapping.put(string, new ArrayList());
 			}
 
-			SoundPoolEntry var4 = new SoundPoolEntry(var3, var2.toURI().toURL());
-			((List)this.nameToSoundPoolEntriesMapping.get(var1)).add(var4);
-			this.allSoundPoolEntries.add(var4);
+			SoundPoolEntry soundPoolEntry4 = new SoundPoolEntry(string3, file.toURI().toURL());
+			((List)this.nameToSoundPoolEntriesMapping.get(string)).add(soundPoolEntry4);
+			this.allSoundPoolEntries.add(soundPoolEntry4);
 			++this.numberOfSoundPoolEntries;
-			return var4;
-		} catch (MalformedURLException var5) {
-			var5.printStackTrace();
-			throw new RuntimeException(var5);
+			return soundPoolEntry4;
+		} catch (MalformedURLException malformedURLException5) {
+			malformedURLException5.printStackTrace();
+			throw new RuntimeException(malformedURLException5);
 		}
 	}
 
-	public SoundPoolEntry getRandomSoundFromSoundPool(String var1) {
-		List var2 = (List)this.nameToSoundPoolEntriesMapping.get(var1);
-		return var2 == null ? null : (SoundPoolEntry)var2.get(this.rand.nextInt(var2.size()));
+	public SoundPoolEntry getRandomSoundFromSoundPool(String string) {
+		List list2 = (List)this.nameToSoundPoolEntriesMapping.get(string);
+		return list2 == null ? null : (SoundPoolEntry)list2.get(this.rand.nextInt(list2.size()));
 	}
 
 	public SoundPoolEntry getRandomSound() {
-		return this.allSoundPoolEntries.size() == 0 ? null : (SoundPoolEntry)this.allSoundPoolEntries.get(this.rand.nextInt(this.allSoundPoolEntries.size()));
+		return this.getRandomSound((List)null);
+	}
+
+	public SoundPoolEntry getRandomSound(List list) {
+		if(this.allSoundPoolEntries.size() == 0) {
+			return null;
+		} else {
+			int i2;
+			for(i2 = this.rand.nextInt(this.allSoundPoolEntries.size()); list != null && list.contains(((SoundPoolEntry)this.allSoundPoolEntries.get(i2)).soundName); i2 %= this.allSoundPoolEntries.size()) {
+				++i2;
+			}
+
+			return (SoundPoolEntry)this.allSoundPoolEntries.get(i2);
+		}
 	}
 }
--- net/minecraft/src/RenderFallingSand.java
+++ net/minecraft/src/RenderFallingSand.java
@@ -9,19 +9,19 @@
 		this.shadowSize = 0.5F;
 	}
 
-	public void doRenderFallingSand(EntityFallingSand var1, double var2, double var4, double var6, float var8, float var9) {
+	public void doRenderFallingSand(EntityFallingSand yh, double double2, double double3, double double4, float float5, float float6) {
 		GL11.glPushMatrix();
-		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
-		this.loadTexture("/terrain.png");
-		Block var10 = Block.blocksList[var1.blockID];
-		World var11 = var1.getWorld();
+		GL11.glTranslatef((float)double2, (float)double3, (float)double4);
+		this.loadTexture(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9796_62Ccm2XAR6JqSDTgV762x61j971DNgsIrMhaXZxPs0fQnBC7ymR2l1v1V22X));
+		Block block10 = Block.blocksList[yh.blockID];
+		World world11 = yh.getWorld();
 		GL11.glDisable(GL11.GL_LIGHTING);
-		this.sandRenderBlocks.renderBlockFallingSand(var10, var11, MathHelper.floor_double(var1.posX), MathHelper.floor_double(var1.posY), MathHelper.floor_double(var1.posZ));
+		this.sandRenderBlocks.renderBlockFallingSand(block10, world11, MathHelper.floor_double(yh.posX), MathHelper.floor_double(yh.posY), MathHelper.floor_double(yh.posZ));
 		GL11.glEnable(GL11.GL_LIGHTING);
 		GL11.glPopMatrix();
 	}
 
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.doRenderFallingSand((EntityFallingSand)var1, var2, var4, var6, var8, var9);
+	public void doRender(Entity xy, double double2, double double3, double double4, float float5, float float6) {
+		this.doRenderFallingSand((EntityFallingSand)xy, double2, double3, double4, float5, float6);
 	}
 }
--- /dev/null
+++ net/minecraft/src/HandlerPlayDemoUnknownClass2.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+public class HandlerPlayDemoUnknownClass2 {
+	long field_11240_47ME2ux1w9JD07OmK1KWlC2l36wjp9k5rk5C91EqYYR6gjOY4kb42895Ml2n;
+	double field_11238_06ia42Crh5k64k27yg1rkw01iek6FWqXq038Nz5xCsr1186gZTb5QrQC9Ee6;
+	double field_11239_27ngU1sJjzhN2F1lwIlqzdWsQU09NIv1oOAETINS9vPghD0aR3wNidfKbmq8;
+	double field_11242_70hhZNfPCn7F2A43sUn292vmU47FJ2Xqf8wxmaj0Jvht0gJ3JZdg1B11ZIS4;
+	double field_11241_1pBNhz72hG0DM4M2G197Aq7qWjMeY65Hl12oPon7Y3795IIGRLKfWH6264yk;
+	double field_11243_366213Kygu44q4VZJiDT5dY5qsS8R35a4wMyFfwM8f9lEhNH41knI2ixxw3K;
+	double field_11235_9PuH3jWZ0MDG4rg08sntk93kjfDv2P6b59Q9soX01Ey3WsujUs200QhUHLp9;
+	double field_11237_979Vt94Ikeubje8aq02QS2ct4vv1F2xoYEYcud7ff1548HLvX33CvjHHnP0K;
+	double field_11236_73B65S5lxs1r7B0z1M2S4uMTH4ZE43GT5xQV19C44T08jAeG7ae4e6V605K6;
+
+	public HandlerPlayDemoUnknownClass2(long long1, double double2, double double3, double double4, double double5, double double6, double double7, double double8, double double9) {
+		this.field_11240_47ME2ux1w9JD07OmK1KWlC2l36wjp9k5rk5C91EqYYR6gjOY4kb42895Ml2n = long1;
+		this.field_11238_06ia42Crh5k64k27yg1rkw01iek6FWqXq038Nz5xCsr1186gZTb5QrQC9Ee6 = double2;
+		this.field_11239_27ngU1sJjzhN2F1lwIlqzdWsQU09NIv1oOAETINS9vPghD0aR3wNidfKbmq8 = double3;
+		this.field_11242_70hhZNfPCn7F2A43sUn292vmU47FJ2Xqf8wxmaj0Jvht0gJ3JZdg1B11ZIS4 = double4;
+		this.field_11241_1pBNhz72hG0DM4M2G197Aq7qWjMeY65Hl12oPon7Y3795IIGRLKfWH6264yk = double5;
+		this.field_11243_366213Kygu44q4VZJiDT5dY5qsS8R35a4wMyFfwM8f9lEhNH41knI2ixxw3K = double6;
+		this.field_11235_9PuH3jWZ0MDG4rg08sntk93kjfDv2P6b59Q9soX01Ey3WsujUs200QhUHLp9 = double7;
+		this.field_11237_979Vt94Ikeubje8aq02QS2ct4vv1F2xoYEYcud7ff1548HLvX33CvjHHnP0K = double8;
+		this.field_11236_73B65S5lxs1r7B0z1M2S4uMTH4ZE43GT5xQV19C44T08jAeG7ae4e6V605K6 = double9;
+	}
+}
--- net/minecraft/src/Packet0KeepAlive.java
+++ net/minecraft/src/Packet0KeepAlive.java
@@ -4,13 +4,13 @@
 import java.io.DataOutputStream;
 
 public class Packet0KeepAlive extends Packet {
-	public void processPacket(NetHandler var1) {
-	}
-
-	public void readPacketData(DataInputStream var1) {
-	}
-
-	public void writePacket(DataOutputStream var1) {
+	public void processPacket(NetHandler netHandler) {
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) {
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) {
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/Slot.java
+++ net/minecraft/src/Slot.java
@@ -4,16 +4,16 @@
 	public final int slotIndex;
 	public final IInventory inventory;
 
-	public Slot(IInventory var1, int var2) {
-		this.inventory = var1;
-		this.slotIndex = var2;
+	public Slot(IInventory inventory, int slotIndex) {
+		this.inventory = inventory;
+		this.slotIndex = slotIndex;
 	}
 
 	public void onPickupFromSlot() {
 		this.onSlotChanged();
 	}
 
-	public boolean isItemValid(ItemStack var1) {
+	public boolean isItemValid(ItemStack itemStack) {
 		return true;
 	}
 
@@ -21,8 +21,8 @@
 		return this.inventory.getStackInSlot(this.slotIndex);
 	}
 
-	public void putStack(ItemStack var1) {
-		this.inventory.setInventorySlotContents(this.slotIndex, var1);
+	public void putStack(ItemStack itemStack) {
+		this.inventory.setInventorySlotContents(this.slotIndex, itemStack);
 		this.onSlotChanged();
 	}
 
--- net/minecraft/src/BlockFurnace.java
+++ net/minecraft/src/BlockFurnace.java
@@ -3,105 +3,105 @@
 import java.util.Random;
 
 public class BlockFurnace extends BlockContainer {
-	private final boolean isActive;
+	protected final boolean isActive;
 
-	protected BlockFurnace(int var1, boolean var2) {
-		super(var1, Material.rock);
-		this.isActive = var2;
+	protected BlockFurnace(int id, boolean isActive) {
+		super(id, Material.rock);
+		this.isActive = isActive;
 		this.blockIndexInTexture = 45;
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Block.stoneOvenIdle.blockID;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		super.onBlockAdded(var1, var2, var3, var4);
-		this.setDefaultDirection(var1, var2, var3, var4);
-	}
-
-	private void setDefaultDirection(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3, var4 - 1);
-		int var6 = var1.getBlockId(var2, var3, var4 + 1);
-		int var7 = var1.getBlockId(var2 - 1, var3, var4);
-		int var8 = var1.getBlockId(var2 + 1, var3, var4);
-		byte var9 = 3;
-		if(Block.opaqueCubeLookup[var5] && !Block.opaqueCubeLookup[var6]) {
-			var9 = 3;
-		}
-
-		if(Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var5]) {
-			var9 = 2;
-		}
-
-		if(Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var8]) {
-			var9 = 5;
-		}
-
-		if(Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var7]) {
-			var9 = 4;
-		}
-
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var9);
-	}
-
-	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		if(var5 == 1) {
+	public void onBlockAdded(World world, int x, int y, int z) {
+		super.onBlockAdded(world, x, y, z);
+		this.setDefaultDirection(world, x, y, z);
+	}
+
+	private void setDefaultDirection(World world, int x, int y, int z) {
+		int i5 = world.getBlockId(x, y, z - 1);
+		int i6 = world.getBlockId(x, y, z + 1);
+		int i7 = world.getBlockId(x - 1, y, z);
+		int i8 = world.getBlockId(x + 1, y, z);
+		byte b9 = 3;
+		if(Block.opaqueCubeLookup[i5] && !Block.opaqueCubeLookup[i6]) {
+			b9 = 3;
+		}
+
+		if(Block.opaqueCubeLookup[i6] && !Block.opaqueCubeLookup[i5]) {
+			b9 = 2;
+		}
+
+		if(Block.opaqueCubeLookup[i7] && !Block.opaqueCubeLookup[i8]) {
+			b9 = 5;
+		}
+
+		if(Block.opaqueCubeLookup[i8] && !Block.opaqueCubeLookup[i7]) {
+			b9 = 4;
+		}
+
+		world.setBlockMetadataWithNotify(x, y, z, b9);
+	}
+
+	public int getBlockTexture(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		if(side == 1) {
 			return Block.stone.blockIndexInTexture;
-		} else if(var5 == 0) {
+		} else if(side == 0) {
 			return Block.stone.blockIndexInTexture;
 		} else {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			return var5 != var6 ? this.blockIndexInTexture : (this.isActive ? this.blockIndexInTexture + 16 : this.blockIndexInTexture - 1);
+			int i6 = blockAccess.getBlockMetadata(x, y, z);
+			return side != i6 ? this.blockIndexInTexture : (this.isActive ? this.blockIndexInTexture + 16 : this.blockIndexInTexture - 1);
 		}
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
 		if(this.isActive) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			float var7 = (float)var2 + 0.5F;
-			float var8 = (float)var3 + 0.0F + var5.nextFloat() * 6.0F / 16.0F;
-			float var9 = (float)var4 + 0.5F;
-			float var10 = 0.52F;
-			float var11 = var5.nextFloat() * 0.6F - 0.3F;
-			if(var6 == 4) {
-				var1.spawnParticle("smoke", (double)(var7 - var10), (double)var8, (double)(var9 + var11), 0.0D, 0.0D, 0.0D);
-				var1.spawnParticle("flame", (double)(var7 - var10), (double)var8, (double)(var9 + var11), 0.0D, 0.0D, 0.0D);
-			} else if(var6 == 5) {
-				var1.spawnParticle("smoke", (double)(var7 + var10), (double)var8, (double)(var9 + var11), 0.0D, 0.0D, 0.0D);
-				var1.spawnParticle("flame", (double)(var7 + var10), (double)var8, (double)(var9 + var11), 0.0D, 0.0D, 0.0D);
-			} else if(var6 == 2) {
-				var1.spawnParticle("smoke", (double)(var7 + var11), (double)var8, (double)(var9 - var10), 0.0D, 0.0D, 0.0D);
-				var1.spawnParticle("flame", (double)(var7 + var11), (double)var8, (double)(var9 - var10), 0.0D, 0.0D, 0.0D);
-			} else if(var6 == 3) {
-				var1.spawnParticle("smoke", (double)(var7 + var11), (double)var8, (double)(var9 + var10), 0.0D, 0.0D, 0.0D);
-				var1.spawnParticle("flame", (double)(var7 + var11), (double)var8, (double)(var9 + var10), 0.0D, 0.0D, 0.0D);
+			int i6 = worldObj.getBlockMetadata(x, y, z);
+			float f7 = (float)x + 0.5F;
+			float f8 = (float)y + 0.0F + rand.nextFloat() * 6.0F / 16.0F;
+			float f9 = (float)z + 0.5F;
+			float f10 = 0.52F;
+			float f11 = rand.nextFloat() * 0.6F - 0.3F;
+			if(i6 == 4) {
+				worldObj.spawnParticle("smoke", (double)(f7 - f10), (double)f8, (double)(f9 + f11), 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("flame", (double)(f7 - f10), (double)f8, (double)(f9 + f11), 0.0D, 0.0D, 0.0D);
+			} else if(i6 == 5) {
+				worldObj.spawnParticle("smoke", (double)(f7 + f10), (double)f8, (double)(f9 + f11), 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("flame", (double)(f7 + f10), (double)f8, (double)(f9 + f11), 0.0D, 0.0D, 0.0D);
+			} else if(i6 == 2) {
+				worldObj.spawnParticle("smoke", (double)(f7 + f11), (double)f8, (double)(f9 - f10), 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("flame", (double)(f7 + f11), (double)f8, (double)(f9 - f10), 0.0D, 0.0D, 0.0D);
+			} else if(i6 == 3) {
+				worldObj.spawnParticle("smoke", (double)(f7 + f11), (double)f8, (double)(f9 + f10), 0.0D, 0.0D, 0.0D);
+				worldObj.spawnParticle("flame", (double)(f7 + f11), (double)f8, (double)(f9 + f10), 0.0D, 0.0D, 0.0D);
 			}
-
 		}
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? Block.stone.blockID : (var1 == 0 ? Block.stone.blockID : (var1 == 3 ? this.blockIndexInTexture - 1 : this.blockIndexInTexture));
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		TileEntityFurnace var6 = (TileEntityFurnace)var1.getBlockTileEntity(var2, var3, var4);
-		var5.displayGUIFurnace(var6);
+
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? Block.stone.blockID : (side == 0 ? Block.stone.blockID : (side == 3 ? this.blockIndexInTexture - 1 : this.blockIndexInTexture));
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		TileEntityFurnace tileEntityFurnace6 = (TileEntityFurnace)world.getBlockTileEntity(x, y, z);
+		entityPlayer.displayGUIFurnace(tileEntityFurnace6);
 		return true;
 	}
 
-	public static void updateFurnaceBlockState(boolean var0, World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		TileEntity var6 = var1.getBlockTileEntity(var2, var3, var4);
-		if(var0) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.stoneOvenActive.blockID);
+	public static void updateFurnaceBlockState(boolean isActive, World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		TileEntity tileEntity6 = world.getBlockTileEntity(x, y, z);
+		if(isActive) {
+			world.setBlockWithNotify(x, y, z, Block.stoneOvenActive.blockID);
 		} else {
-			var1.setBlockWithNotify(var2, var3, var4, Block.stoneOvenIdle.blockID);
+			world.setBlockWithNotify(x, y, z, Block.stoneOvenIdle.blockID);
 		}
 
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var5);
-		var1.setBlockTileEntity(var2, var3, var4, var6);
+		world.setBlockMetadataWithNotify(x, y, z, i5);
+		world.setBlockTileEntity(x, y, z, tileEntity6);
 	}
 
 	protected TileEntity getBlockEntity() {
--- /dev/null
+++ net/minecraft/src/NamedLoc.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+public class NamedLoc {
+	public int bx1;
+	public int by1;
+	public int bz1;
+	public int bx2;
+	public int by2;
+	public int bz2;
+	boolean p2Invalid = false;
+	String name;
+
+	public NamedLoc(int integer1, int integer2, int integer3, int integer4, int integer5, int integer6, String string) {
+		this.bx1 = integer1;
+		this.by1 = integer2;
+		this.bz1 = integer3;
+		this.bx2 = integer4;
+		this.by2 = integer5;
+		this.bz2 = integer6;
+		this.p2Invalid = false;
+		this.name = string;
+	}
+
+	public NamedLoc(int integer1, int integer2, int integer3, String string) {
+		this.bx1 = integer1;
+		this.by1 = integer2;
+		this.bz1 = integer3;
+		this.bx2 = integer1;
+		this.by2 = integer2;
+		this.bz2 = integer3;
+		this.p2Invalid = true;
+		this.name = string;
+	}
+
+	public HandlerSetCheckpointUnknownClass2 func_12096_2rdzFnI6r437tV8H4g4amO6c0UvbR1Bk63McJ9C8IuxrI5J07L0IocLF91rI() {
+		return new HandlerSetCheckpointUnknownClass2((double)this.bx1, (double)this.by1, (double)this.bz1);
+	}
+}
--- net/minecraft/src/SoundManager.java
+++ net/minecraft/src/SoundManager.java
@@ -1,15 +1,25 @@
 package net.minecraft.src;
 
+import paulscode.sound.codecs.CodecWav;
+
+import paulscode.sound.libraries.LibraryLWJGLOpenAL;
+
+import java.io.BufferedReader;
 import java.io.File;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.List;
 import java.util.Random;
+
 import paulscode.sound.SoundSystem;
 import paulscode.sound.SoundSystemConfig;
 import paulscode.sound.codecs.CodecJOrbis;
-import paulscode.sound.codecs.CodecWav;
-import paulscode.sound.libraries.LibraryLWJGLOpenAL;
 
 public class SoundManager {
-	private static SoundSystem sndSystem;
+	public static SoundSystem sndSystem;
 	private SoundPool soundPoolSounds = new SoundPool();
 	private SoundPool soundPoolStreaming = new SoundPool();
 	private SoundPool soundPoolMusic = new SoundPool();
@@ -18,11 +28,79 @@
 	private static boolean loaded = false;
 	private Random rand = new Random();
 	private int ticksBeforeMusic = this.rand.nextInt(12000);
-
-	public void loadSoundSettings(GameSettings var1) {
+	private boolean field_12053_1QbQxlwTaKB4hm59YLHlvThzfq2YbJyVj7EmIiTd5zt1ECZBD89v107v1to6 = false;
+	private long field_12049_5zslk1kn2Jnm08H2254eL9Twk60RO5RMRmuOb58n56vf6KV7r5F1fnz9I6B7 = System.currentTimeMillis();
+	List ignoreList = new ArrayList();
+	List ignoreList_a = new ArrayList();
+	private String field_12054_0W6U3lHtBH2q8zjz4sb22pr3my27vTWdwd08101Z4gfY796USIv2PR2f955r = null;
+	private boolean field_12058_3pVFu51zt1z9rF631hpzqpI63FL08O13s3WkquN5BZaRkEP3wg3Lc967ZFs3 = false;
+	private float field_12046_2aw7ngKI3BxGf8nNnVac7ruGr530Wi8yv4y3bk1r8q8T0tt16Laaz7M16Zvg = 1.0F;
+
+	public SoundManager() {
+		try {
+			BufferedReader bufferedReader1 = new BufferedReader(new InputStreamReader(Ext1605Utils.func_12150_5v4Cs6sI06e6Hjpg3rSI82gG008x14C2jag2OM7ADaW5U8a3DYSrf570CJm6("/aqueue_ignore.txt")));
+
+			String string2;
+			while((string2 = bufferedReader1.readLine()) != null) {
+				this.ignoreList.add(string2);
+			}
+
+			bufferedReader1.close();
+			bufferedReader1 = new BufferedReader(new InputStreamReader(Ext1605Utils.func_12150_5v4Cs6sI06e6Hjpg3rSI82gG008x14C2jag2OM7ADaW5U8a3DYSrf570CJm6("/aqueue_ignore_a.txt")));
+			string2 = null;
+
+			while((string2 = bufferedReader1.readLine()) != null) {
+				this.ignoreList_a.add(string2);
+			}
+
+			bufferedReader1.close();
+		} catch (IOException iOException3) {
+		}
+
+	}
+
+	public boolean func_12028_0Q48c7Q5B51VmKR6v879976kWbp8F737S8T15SyjAj664KVBIuoLfz0qRtAW() {
+		return !this.field_12053_1QbQxlwTaKB4hm59YLHlvThzfq2YbJyVj7EmIiTd5zt1ECZBD89v107v1to6;
+	}
+
+	public synchronized void func_12039_718z1OJ9VakHqRSuN9qHt03I9336Di6o7ObA2RkDlwQ9KQzNeZ53VZA8sC69() {
+		long j1 = System.currentTimeMillis();
+		float f3 = (float)(j1 - this.field_12049_5zslk1kn2Jnm08H2254eL9Twk60RO5RMRmuOb58n56vf6KV7r5F1fnz9I6B7) / 1000.0F;
+		if(this.field_12058_3pVFu51zt1z9rF631hpzqpI63FL08O13s3WkquN5BZaRkEP3wg3Lc967ZFs3) {
+			this.field_12046_2aw7ngKI3BxGf8nNnVac7ruGr530Wi8yv4y3bk1r8q8T0tt16Laaz7M16Zvg -= f3;
+			if(this.field_12046_2aw7ngKI3BxGf8nNnVac7ruGr530Wi8yv4y3bk1r8q8T0tt16Laaz7M16Zvg <= 0.0F) {
+				this.field_12046_2aw7ngKI3BxGf8nNnVac7ruGr530Wi8yv4y3bk1r8q8T0tt16Laaz7M16Zvg = 0.0F;
+				sndSystem.stop("BgMusic");
+				this.field_12058_3pVFu51zt1z9rF631hpzqpI63FL08O13s3WkquN5BZaRkEP3wg3Lc967ZFs3 = false;
+				if(this.field_12054_0W6U3lHtBH2q8zjz4sb22pr3my27vTWdwd08101Z4gfY796USIv2PR2f955r != null) {
+					SoundPoolEntry soundPoolEntry4 = this.soundPoolMusic.getRandomSoundFromSoundPool(this.field_12054_0W6U3lHtBH2q8zjz4sb22pr3my27vTWdwd08101Z4gfY796USIv2PR2f955r);
+					if(soundPoolEntry4 == null) {
+						soundPoolEntry4 = this.soundPoolStreaming.getRandomSoundFromSoundPool(this.field_12054_0W6U3lHtBH2q8zjz4sb22pr3my27vTWdwd08101Z4gfY796USIv2PR2f955r);
+					}
+
+					if(soundPoolEntry4 != null) {
+						this.ticksBeforeMusic = this.rand.nextInt(24000) + 24000;
+						sndSystem.backgroundMusic("BgMusic", soundPoolEntry4.soundUrl, soundPoolEntry4.soundName, true);
+						sndSystem.setVolume("BgMusic", this.options.musicVolume);
+						sndSystem.play("BgMusic");
+					}
+				}
+			}
+		} else if(this.field_12054_0W6U3lHtBH2q8zjz4sb22pr3my27vTWdwd08101Z4gfY796USIv2PR2f955r != null) {
+			this.field_12046_2aw7ngKI3BxGf8nNnVac7ruGr530Wi8yv4y3bk1r8q8T0tt16Laaz7M16Zvg += f3;
+			if(this.field_12046_2aw7ngKI3BxGf8nNnVac7ruGr530Wi8yv4y3bk1r8q8T0tt16Laaz7M16Zvg > 1.0F) {
+				this.field_12046_2aw7ngKI3BxGf8nNnVac7ruGr530Wi8yv4y3bk1r8q8T0tt16Laaz7M16Zvg = 1.0F;
+			}
+		}
+
+		sndSystem.setVolume("BgMusic", this.field_12046_2aw7ngKI3BxGf8nNnVac7ruGr530Wi8yv4y3bk1r8q8T0tt16Laaz7M16Zvg * this.options.musicVolume);
+		this.field_12049_5zslk1kn2Jnm08H2254eL9Twk60RO5RMRmuOb58n56vf6KV7r5F1fnz9I6B7 = j1;
+	}
+
+	public void loadSoundSettings(GameSettings we) {
 		this.soundPoolStreaming.isGetRandomSound = false;
-		this.options = var1;
-		if(!loaded && (var1 == null || var1.soundVolume != 0.0F || var1.musicVolume != 0.0F)) {
+		this.options = we;
+		if(!loaded && (we == null || we.soundVolume != 0.0F || we.musicVolume != 0.0F)) {
 			this.tryToSetLibraryAndCodecs();
 		}
 
@@ -30,8 +108,8 @@
 
 	private void tryToSetLibraryAndCodecs() {
 		try {
-			float var1 = this.options.soundVolume;
-			float var2 = this.options.musicVolume;
+			float f1 = this.options.soundVolume;
+			float f2 = this.options.musicVolume;
 			this.options.soundVolume = 0.0F;
 			this.options.musicVolume = 0.0F;
 			this.options.saveOptions();
@@ -40,11 +118,11 @@
 			SoundSystemConfig.setCodec("mus", CodecMus.class);
 			SoundSystemConfig.setCodec("wav", CodecWav.class);
 			sndSystem = new SoundSystem();
-			this.options.soundVolume = var1;
-			this.options.musicVolume = var2;
+			this.options.soundVolume = f1;
+			this.options.musicVolume = f2;
 			this.options.saveOptions();
-		} catch (Throwable var3) {
-			var3.printStackTrace();
+		} catch (Throwable throwable3) {
+			throwable3.printStackTrace();
 			System.err.println("error linking with the LibraryJavaSound plug-in");
 		}
 
@@ -65,130 +143,173 @@
 	}
 
 	public void closeMinecraft() {
+		this.field_12053_1QbQxlwTaKB4hm59YLHlvThzfq2YbJyVj7EmIiTd5zt1ECZBD89v107v1to6 = true;
 		if(loaded) {
 			sndSystem.cleanup();
 		}
 
 	}
 
-	public void addSound(String var1, File var2) {
-		this.soundPoolSounds.addSound(var1, var2);
-	}
-
-	public void addStreaming(String var1, File var2) {
-		this.soundPoolStreaming.addSound(var1, var2);
-	}
-
-	public void addMusic(String var1, File var2) {
-		this.soundPoolMusic.addSound(var1, var2);
+	public void addSound(String name, File file) {
+		this.soundPoolSounds.addSound(name, file);
+	}
+
+	public void addStreaming(String name, File file) {
+		this.soundPoolStreaming.addSound(name, file);
+	}
+
+	public void addMusic(String name, File file) {
+		this.soundPoolMusic.addSound(name, file);
 	}
 
 	public void playRandomMusicIfReady() {
-		if(loaded && this.options.musicVolume != 0.0F) {
-			if(!sndSystem.playing("BgMusic") && !sndSystem.playing("streaming")) {
-				if(this.ticksBeforeMusic > 0) {
-					--this.ticksBeforeMusic;
-					return;
-				}
-
-				SoundPoolEntry var1 = this.soundPoolMusic.getRandomSound();
-				if(var1 != null) {
-					this.ticksBeforeMusic = this.rand.nextInt(24000) + 24000;
-					sndSystem.backgroundMusic("BgMusic", var1.soundUrl, var1.soundName, false);
-					sndSystem.setVolume("BgMusic", this.options.musicVolume);
-					sndSystem.play("BgMusic");
-				}
-			}
-
-		}
-	}
-
-	public void setListener(EntityLiving var1, float var2) {
-		if(loaded && this.options.soundVolume != 0.0F) {
-			if(var1 != null) {
-				float var3 = var1.prevRotationYaw + (var1.rotationYaw - var1.prevRotationYaw) * var2;
-				double var4 = var1.prevPosX + (var1.posX - var1.prevPosX) * (double)var2;
-				double var6 = var1.prevPosY + (var1.posY - var1.prevPosY) * (double)var2;
-				double var8 = var1.prevPosZ + (var1.posZ - var1.prevPosZ) * (double)var2;
-				float var10 = MathHelper.cos(-var3 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-				float var11 = MathHelper.sin(-var3 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-				float var12 = -var11;
-				float var13 = 0.0F;
-				float var14 = -var10;
-				float var15 = 0.0F;
-				float var16 = 1.0F;
-				float var17 = 0.0F;
-				sndSystem.setListenerPosition((float)var4, (float)var6, (float)var8);
-				sndSystem.setListenerOrientation(var12, var13, var14, var15, var16, var17);
-			}
-		}
-	}
-
-	public void playStreaming(String var1, float var2, float var3, float var4, float var5, float var6) {
-		if(loaded && this.options.soundVolume != 0.0F) {
-			String var7 = "streaming";
+		if(loaded && this.options.musicVolume != 0.0F && !sndSystem.playing("BgMusic") && !sndSystem.playing("streaming")) {
+			if(this.ticksBeforeMusic > 0) {
+				--this.ticksBeforeMusic;
+				return;
+			}
+
+			SoundPoolEntry soundPoolEntry1;
+			if(InputHandler.mc.theWorld instanceof HubWorld) {
+				soundPoolEntry1 = this.soundPoolMusic.getRandomSoundFromSoundPool("hub");
+			} else {
+				SimpleDateFormat simpleDateFormat3 = new SimpleDateFormat("HH");
+				int i4 = Integer.parseInt(simpleDateFormat3.format(Calendar.getInstance().getTime()));
+				List list2 = i4 <= 22 && i4 >= 5 ? this.ignoreList : this.ignoreList_a;
+				soundPoolEntry1 = this.soundPoolMusic.getRandomSound(list2);
+			}
+
+			if(soundPoolEntry1 != null) {
+				this.ticksBeforeMusic = this.rand.nextInt(24000) + 24000;
+				sndSystem.backgroundMusic("BgMusic", soundPoolEntry1.soundUrl, soundPoolEntry1.soundName, false);
+				sndSystem.setVolume("BgMusic", this.options.musicVolume);
+				sndSystem.play("BgMusic");
+				this.field_12058_3pVFu51zt1z9rF631hpzqpI63FL08O13s3WkquN5BZaRkEP3wg3Lc967ZFs3 = false;
+				this.field_12046_2aw7ngKI3BxGf8nNnVac7ruGr530Wi8yv4y3bk1r8q8T0tt16Laaz7M16Zvg = 1.0F;
+			}
+		}
+
+	}
+
+	public void setListener(EntityLiving listener, float partialTick) {
+		if(loaded && this.options.soundVolume != 0.0F && listener != null) {
+			float f3 = listener.prevRotationYaw + (listener.rotationYaw - listener.prevRotationYaw) * partialTick;
+			double d4 = listener.prevPosX + (listener.posX - listener.prevPosX) * (double)partialTick;
+			double d6 = listener.prevPosY + (listener.posY - listener.prevPosY) * (double)partialTick;
+			double d8 = listener.prevPosZ + (listener.posZ - listener.prevPosZ) * (double)partialTick;
+			float f10 = MathHelper.cos(-f3 * 0.017453292F - (float)Math.PI);
+			float f11 = MathHelper.sin(-f3 * 0.017453292F - (float)Math.PI);
+			float f12 = -f11;
+			float f13 = 0.0F;
+			float f14 = -f10;
+			float f15 = 0.0F;
+			float f16 = 1.0F;
+			float f17 = 0.0F;
+			sndSystem.setListenerPosition((float)d4, (float)d6, (float)d8);
+			sndSystem.setListenerOrientation(f12, f13, f14, f15, f16, f17);
+		}
+
+	}
+
+	public void playStreaming(String sound, float posX, float posY, float posZ, float volume, float pitch) {
+		if(loaded && this.options.soundVolume != 0.0F) {
+			String string7 = "streaming";
 			if(sndSystem.playing("streaming")) {
 				sndSystem.stop("streaming");
 			}
 
-			if(var1 != null) {
-				SoundPoolEntry var8 = this.soundPoolStreaming.getRandomSoundFromSoundPool(var1);
-				if(var8 != null && var5 > 0.0F) {
+			if(sound != null) {
+				SoundPoolEntry soundPoolEntry8 = this.soundPoolStreaming.getRandomSoundFromSoundPool(sound);
+				if(soundPoolEntry8 != null && volume > 0.0F) {
 					if(sndSystem.playing("BgMusic")) {
 						sndSystem.stop("BgMusic");
 					}
 
-					float var9 = 16.0F;
-					sndSystem.newStreamingSource(true, var7, var8.soundUrl, var8.soundName, false, var2, var3, var4, 2, var9 * 4.0F);
-					sndSystem.setVolume(var7, 0.5F * this.options.soundVolume);
-					sndSystem.play(var7);
-				}
-
-			}
-		}
-	}
-
-	public void playSound(String var1, float var2, float var3, float var4, float var5, float var6) {
-		if(loaded && this.options.soundVolume != 0.0F) {
-			SoundPoolEntry var7 = this.soundPoolSounds.getRandomSoundFromSoundPool(var1);
-			if(var7 != null && var5 > 0.0F) {
-				this.playedSoundsCount = (this.playedSoundsCount + 1) % 256;
-				String var8 = "sound_" + this.playedSoundsCount;
-				float var9 = 16.0F;
-				if(var5 > 1.0F) {
-					var9 *= var5;
-				}
-
-				sndSystem.newSource(var5 > 1.0F, var8, var7.soundUrl, var7.soundName, false, var2, var3, var4, 2, var9);
-				sndSystem.setPitch(var8, var6);
-				if(var5 > 1.0F) {
-					var5 = 1.0F;
-				}
-
-				sndSystem.setVolume(var8, var5 * this.options.soundVolume);
-				sndSystem.play(var8);
-			}
-
-		}
-	}
-
-	public void playSoundFX(String var1, float var2, float var3) {
-		if(loaded && this.options.soundVolume != 0.0F) {
-			SoundPoolEntry var4 = this.soundPoolSounds.getRandomSoundFromSoundPool(var1);
-			if(var4 != null) {
-				this.playedSoundsCount = (this.playedSoundsCount + 1) % 256;
-				String var5 = "sound_" + this.playedSoundsCount;
-				sndSystem.newSource(false, var5, var4.soundUrl, var4.soundName, false, 0.0F, 0.0F, 0.0F, 0, 0.0F);
-				if(var2 > 1.0F) {
-					var2 = 1.0F;
-				}
-
-				var2 *= 0.25F;
-				sndSystem.setPitch(var5, var3);
-				sndSystem.setVolume(var5, var2 * this.options.soundVolume);
-				sndSystem.play(var5);
-			}
-
-		}
+					float f9 = 16.0F;
+					sndSystem.newStreamingSource(true, string7, soundPoolEntry8.soundUrl, soundPoolEntry8.soundName, false, posX, posY, posZ, 2, f9 * 4.0F);
+					sndSystem.setVolume(string7, 0.5F * this.options.soundVolume);
+					sndSystem.play(string7);
+					this.field_12058_3pVFu51zt1z9rF631hpzqpI63FL08O13s3WkquN5BZaRkEP3wg3Lc967ZFs3 = false;
+					this.field_12046_2aw7ngKI3BxGf8nNnVac7ruGr530Wi8yv4y3bk1r8q8T0tt16Laaz7M16Zvg = 1.0F;
+				}
+			}
+		}
+
+	}
+
+	public void playMusic(String string) {
+		this.func_12031_514dv3mYU7t95lOh23lLhBI10XBv07D8y61Goe1u7G926JNt2Y1WIoiHj5tm(string, false);
+	}
+
+	public void func_12031_514dv3mYU7t95lOh23lLhBI10XBv07D8y61Goe1u7G926JNt2Y1WIoiHj5tm(String string, boolean boolean2) {
+		if(loaded && this.options.musicVolume != 0.0F) {
+			if(boolean2) {
+				this.field_12054_0W6U3lHtBH2q8zjz4sb22pr3my27vTWdwd08101Z4gfY796USIv2PR2f955r = string;
+				this.field_12058_3pVFu51zt1z9rF631hpzqpI63FL08O13s3WkquN5BZaRkEP3wg3Lc967ZFs3 = true;
+			} else {
+				this.field_12058_3pVFu51zt1z9rF631hpzqpI63FL08O13s3WkquN5BZaRkEP3wg3Lc967ZFs3 = false;
+				this.field_12046_2aw7ngKI3BxGf8nNnVac7ruGr530Wi8yv4y3bk1r8q8T0tt16Laaz7M16Zvg = 1.0F;
+				if(string != null) {
+					SoundPoolEntry soundPoolEntry3 = this.soundPoolMusic.getRandomSoundFromSoundPool(string);
+					if(soundPoolEntry3 == null) {
+						soundPoolEntry3 = this.soundPoolStreaming.getRandomSoundFromSoundPool(string);
+					}
+
+					if(soundPoolEntry3 != null) {
+						this.ticksBeforeMusic = this.rand.nextInt(24000) + 24000;
+						sndSystem.backgroundMusic("BgMusic", soundPoolEntry3.soundUrl, soundPoolEntry3.soundName, false);
+						sndSystem.setVolume("BgMusic", this.options.musicVolume);
+						sndSystem.play("BgMusic");
+					}
+				} else {
+					sndSystem.stop("BgMusic");
+				}
+			}
+		}
+
+	}
+
+	public void playSound(String sound, float posX, float posY, float posZ, float volume, float pitch) {
+		if(loaded && this.options.soundVolume != 0.0F) {
+			SoundPoolEntry soundPoolEntry7 = this.soundPoolSounds.getRandomSoundFromSoundPool(sound);
+			if(soundPoolEntry7 != null && volume > 0.0F) {
+				this.playedSoundsCount = (this.playedSoundsCount + 1) % 256;
+				String string8 = "sound_" + this.playedSoundsCount;
+				float f9 = 16.0F;
+				if(volume > 1.0F) {
+					f9 *= volume;
+				}
+
+				sndSystem.newSource(volume > 1.0F, string8, soundPoolEntry7.soundUrl, soundPoolEntry7.soundName, false, posX, posY, posZ, 2, f9);
+				sndSystem.setPitch(string8, pitch);
+				if(volume > 1.0F) {
+					volume = 1.0F;
+				}
+
+				sndSystem.setVolume(string8, volume * this.options.soundVolume);
+				sndSystem.play(string8);
+			}
+		}
+
+	}
+
+	public void playSoundFX(String sound, float volume, float pitch) {
+		if(loaded && this.options.soundVolume != 0.0F) {
+			SoundPoolEntry soundPoolEntry4 = this.soundPoolSounds.getRandomSoundFromSoundPool(sound);
+			if(soundPoolEntry4 != null) {
+				this.playedSoundsCount = (this.playedSoundsCount + 1) % 256;
+				String string5 = "sound_" + this.playedSoundsCount;
+				sndSystem.newSource(false, string5, soundPoolEntry4.soundUrl, soundPoolEntry4.soundName, false, 0.0F, 0.0F, 0.0F, 0, 0.0F);
+				if(volume > 1.0F) {
+					volume = 1.0F;
+				}
+
+				volume *= 0.25F;
+				sndSystem.setPitch(string5, pitch);
+				sndSystem.setVolume(string5, volume * this.options.soundVolume);
+				sndSystem.play(string5);
+			}
+		}
+
 	}
 }
--- net/minecraft/src/SlotCrafting.java
+++ net/minecraft/src/SlotCrafting.java
@@ -3,19 +3,19 @@
 public class SlotCrafting extends SlotInventory {
 	private final IInventory craftMatrix;
 
-	public SlotCrafting(GuiContainer var1, IInventory var2, IInventory var3, int var4, int var5, int var6) {
-		super(var1, var3, var4, var5, var6);
-		this.craftMatrix = var2;
+	public SlotCrafting(GuiContainer um, IInventory cz2, IInventory cz3, int integer4, int integer5, int integer6) {
+		super(um, cz3, integer4, integer5, integer6);
+		this.craftMatrix = cz2;
 	}
 
-	public boolean isItemValid(ItemStack var1) {
+	public boolean isItemValid(ItemStack itemStack) {
 		return false;
 	}
 
 	public void onPickupFromSlot() {
-		for(int var1 = 0; var1 < this.craftMatrix.getSizeInventory(); ++var1) {
-			if(this.craftMatrix.getStackInSlot(var1) != null) {
-				this.craftMatrix.decrStackSize(var1, 1);
+		for(int i1 = 0; i1 < this.craftMatrix.getSizeInventory(); ++i1) {
+			if(this.craftMatrix.getStackInSlot(i1) != null) {
+				this.craftMatrix.decrStackSize(i1, 1);
 			}
 		}
 
--- net/minecraft/src/Packet22Collect.java
+++ net/minecraft/src/Packet22Collect.java
@@ -8,18 +8,18 @@
 	public int collectedEntityId;
 	public int collectorEntityId;
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.collectedEntityId = var1.readInt();
-		this.collectorEntityId = var1.readInt();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.collectedEntityId);
-		var1.writeInt(this.collectorEntityId);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleCollect(this);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.collectedEntityId = dataInputStream.readInt();
+		this.collectorEntityId = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.collectedEntityId);
+		dataOutputStream.writeInt(this.collectorEntityId);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleCollect(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/GuiFurnace.java
+++ net/minecraft/src/GuiFurnace.java
@@ -5,44 +5,44 @@
 public class GuiFurnace extends GuiContainer {
 	private TileEntityFurnace furnaceInventory;
 
-	public GuiFurnace(InventoryPlayer var1, TileEntityFurnace var2) {
-		this.furnaceInventory = var2;
-		this.inventorySlots.add(new SlotInventory(this, var2, 0, 56, 17));
-		this.inventorySlots.add(new SlotInventory(this, var2, 1, 56, 53));
-		this.inventorySlots.add(new SlotInventory(this, var2, 2, 116, 35));
+	public GuiFurnace(InventoryPlayer bb, TileEntityFurnace z) {
+		this.furnaceInventory = z;
+		this.inventorySlots.add(new SlotInventory(this, z, 0, 56, 17));
+		this.inventorySlots.add(new SlotInventory(this, z, 1, 56, 53));
+		this.inventorySlots.add(new SlotInventory(this, z, 2, 116, 35));
 
-		int var3;
-		for(var3 = 0; var3 < 3; ++var3) {
-			for(int var4 = 0; var4 < 9; ++var4) {
-				this.inventorySlots.add(new SlotInventory(this, var1, var4 + (var3 + 1) * 9, 8 + var4 * 18, 84 + var3 * 18));
+		int i3;
+		for(i3 = 0; i3 < 3; ++i3) {
+			for(int i4 = 0; i4 < 9; ++i4) {
+				this.inventorySlots.add(new SlotInventory(this, bb, i4 + (i3 + 1) * 9, 8 + i4 * 18, 84 + i3 * 18));
 			}
 		}
 
-		for(var3 = 0; var3 < 9; ++var3) {
-			this.inventorySlots.add(new SlotInventory(this, var1, var3, 8 + var3 * 18, 142));
+		for(i3 = 0; i3 < 9; ++i3) {
+			this.inventorySlots.add(new SlotInventory(this, bb, i3, 8 + i3 * 18, 142));
 		}
 
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString("Furnace", 60, 6, 4210752);
-		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, 4210752);
+		this.fontRenderer.drawString("Furnace", 60, 6, 0xFFFFFF);
+		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, 0xFFFFFF);
 	}
 
-	protected void drawGuiContainerBackgroundLayer(float var1) {
-		int var2 = this.mc.renderEngine.getTexture("/gui/furnace.png");
+	protected void drawGuiContainerBackgroundLayer(float renderPartialTick) {
+		int i2 = this.mc.renderEngine.getTexture("/gui/furnace.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.mc.renderEngine.bindTexture(var2);
-		int var3 = (this.width - this.xSize) / 2;
-		int var4 = (this.height - this.ySize) / 2;
-		this.drawTexturedModalRect(var3, var4, 0, 0, this.xSize, this.ySize);
-		int var5;
+		this.mc.renderEngine.bindTexture(i2);
+		int i3 = (this.width - this.xSize) / 2;
+		int i4 = (this.height - this.ySize) / 2;
+		this.drawTexturedModalRect(i3, i4, 0, 0, this.xSize, this.ySize);
+		int i5;
 		if(this.furnaceInventory.isBurning()) {
-			var5 = this.furnaceInventory.getBurnTimeRemainingScaled(12);
-			this.drawTexturedModalRect(var3 + 56, var4 + 36 + 12 - var5, 176, 12 - var5, 14, var5 + 2);
+			i5 = this.furnaceInventory.getBurnTimeRemainingScaled(12);
+			this.drawTexturedModalRect(i3 + 56, i4 + 36 + 12 - i5, 176, 12 - i5, 14, i5 + 2);
 		}
 
-		var5 = this.furnaceInventory.getCookProgressScaled(24);
-		this.drawTexturedModalRect(var3 + 79, var4 + 34, 176, 14, var5 + 1, 16);
+		i5 = this.furnaceInventory.getCookProgressScaled(24);
+		this.drawTexturedModalRect(i3 + 79, i4 + 34, 176, 14, i5 + 1, 16);
 	}
 }
--- /dev/null
+++ net/minecraft/src/EnumVendingMachineUnknownClass3.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+class EnumVendingMachineUnknownClass3 {
+    static final /* synthetic */ int[] field_9819_6Ecx7VuG87M4Qa2PJ40n23uvU73przk4v42MDHptW0m8xI7Wq9zqailKsgX8;
+
+    static {
+        field_9819_6Ecx7VuG87M4Qa2PJ40n23uvU73przk4v42MDHptW0m8xI7Wq9zqailKsgX8 = new int[EnumVendingMachine.func_8621_1A4K8JmwLTo1bRceY319ILcN68Kz1yddU8DZWKk5CMsNwnMN4Amc8gdj0Pfv().length];
+        try {
+            EnumVendingMachineUnknownClass3.field_9819_6Ecx7VuG87M4Qa2PJ40n23uvU73przk4v42MDHptW0m8xI7Wq9zqailKsgX8[EnumVendingMachine.Armor.ordinal()] = 1;
+        }
+        catch (final NoSuchFieldError noSuchFieldError) {}
+        try {
+            EnumVendingMachineUnknownClass3.field_9819_6Ecx7VuG87M4Qa2PJ40n23uvU73przk4v42MDHptW0m8xI7Wq9zqailKsgX8[EnumVendingMachine.Dash.ordinal()] = 2;
+        }
+        catch (final NoSuchFieldError noSuchFieldError2) {}
+        try {
+            EnumVendingMachineUnknownClass3.field_9819_6Ecx7VuG87M4Qa2PJ40n23uvU73przk4v42MDHptW0m8xI7Wq9zqailKsgX8[EnumVendingMachine.HealthBoost.ordinal()] = 3;
+        }
+        catch (final NoSuchFieldError noSuchFieldError3) {}
+        try {
+            EnumVendingMachineUnknownClass3.field_9819_6Ecx7VuG87M4Qa2PJ40n23uvU73przk4v42MDHptW0m8xI7Wq9zqailKsgX8[EnumVendingMachine.QuickRevive.ordinal()] = 4;
+        }
+        catch (final NoSuchFieldError noSuchFieldError4) {}
+    }
+}
--- net/minecraft/src/Packet53BlockChange.java
+++ net/minecraft/src/Packet53BlockChange.java
@@ -15,24 +15,24 @@
 		this.isChunkDataPacket = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.read();
-		this.zPosition = var1.readInt();
-		this.type = var1.read();
-		this.metadata = var1.read();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.write(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.write(this.type);
-		var1.write(this.metadata);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleBlockChange(this);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.read();
+		this.zPosition = dataInputStream.readInt();
+		this.type = dataInputStream.read();
+		this.metadata = dataInputStream.read();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.write(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.write(this.type);
+		dataOutputStream.write(this.metadata);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleBlockChange(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/RemoteWorld.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+import java.net.InetSocketAddress;
+
+public class RemoteWorld extends World {
+	private InetSocketAddress field_7542_3pr4P5SLvVdVSgykmyy0Xrx4D1Xh8mmt0ZCphNIMf8izs5rUsX3MrxE0lFVv;
+
+	public RemoteWorld(String string1, String string2) {
+		this(string1, string2.substring(0, string2.indexOf(":")), Integer.parseInt(string2.substring(string2.indexOf(":") + 1)));
+	}
+
+	public RemoteWorld(String string1, String string2, int integer) {
+		super(string1);
+		this.field_7542_3pr4P5SLvVdVSgykmyy0Xrx4D1Xh8mmt0ZCphNIMf8izs5rUsX3MrxE0lFVv = new InetSocketAddress(string2, integer);
+	}
+
+	public NetworkLocation func_7541_2R3b24Cp7xDHr78U056N76Op70FJ85s7dEtYz9pBRZWqC0G4g9SZxX0Lg07H() {
+		return new NetworkLocation(this.field_7542_3pr4P5SLvVdVSgykmyy0Xrx4D1Xh8mmt0ZCphNIMf8izs5rUsX3MrxE0lFVv);
+	}
+}
--- net/minecraft/src/OSMapIsom.java
+++ net/minecraft/src/OSMapIsom.java
@@ -6,22 +6,22 @@
 	static {
 		try {
 			osValues[EnumOSIsom.linux.ordinal()] = 1;
-		} catch (NoSuchFieldError var4) {
+		} catch (NoSuchFieldError noSuchFieldError4) {
 		}
 
 		try {
 			osValues[EnumOSIsom.solaris.ordinal()] = 2;
-		} catch (NoSuchFieldError var3) {
+		} catch (NoSuchFieldError noSuchFieldError3) {
 		}
 
 		try {
 			osValues[EnumOSIsom.windows.ordinal()] = 3;
-		} catch (NoSuchFieldError var2) {
+		} catch (NoSuchFieldError noSuchFieldError2) {
 		}
 
 		try {
 			osValues[EnumOSIsom.macos.ordinal()] = 4;
-		} catch (NoSuchFieldError var1) {
+		} catch (NoSuchFieldError noSuchFieldError1) {
 		}
 
 	}
--- net/minecraft/src/Packet51MapChunk.java
+++ net/minecraft/src/Packet51MapChunk.java
@@ -20,43 +20,43 @@
 		this.isChunkDataPacket = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readShort();
-		this.zPosition = var1.readInt();
-		this.xSize = var1.read() + 1;
-		this.ySize = var1.read() + 1;
-		this.zSize = var1.read() + 1;
-		int var2 = var1.readInt();
-		byte[] var3 = new byte[var2];
-		var1.readFully(var3);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readShort();
+		this.zPosition = dataInputStream.readInt();
+		this.xSize = dataInputStream.read() + 1;
+		this.ySize = dataInputStream.read() + 1;
+		this.zSize = dataInputStream.read() + 1;
+		int i2 = dataInputStream.readInt();
+		byte[] b3 = new byte[i2];
+		dataInputStream.readFully(b3);
 		this.chunkData = new byte[this.xSize * this.ySize * this.zSize * 5 / 2];
-		Inflater var4 = new Inflater();
-		var4.setInput(var3);
+		Inflater inflater4 = new Inflater();
+		inflater4.setInput(b3);
 
 		try {
-			var4.inflate(this.chunkData);
-		} catch (DataFormatException var9) {
+			inflater4.inflate(this.chunkData);
+		} catch (DataFormatException dataFormatException9) {
 			throw new IOException("Bad compressed data format");
 		} finally {
-			var4.end();
+			inflater4.end();
 		}
 
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.writeShort(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.write(this.xSize - 1);
-		var1.write(this.ySize - 1);
-		var1.write(this.zSize - 1);
-		var1.writeInt(this.tempLength);
-		var1.write(this.chunkData, 0, this.tempLength);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeShort(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.write(this.xSize - 1);
+		dataOutputStream.write(this.ySize - 1);
+		dataOutputStream.write(this.zSize - 1);
+		dataOutputStream.writeInt(this.tempLength);
+		dataOutputStream.write(this.chunkData, 0, this.tempLength);
 	}
 
-	public void processPacket(NetHandler var1) {
-		var1.handleMapChunk(this);
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleMapChunk(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/RenderCow.java
+++ net/minecraft/src/RenderCow.java
@@ -1,19 +1,19 @@
 package net.minecraft.src;
 
 public class RenderCow extends RenderLiving {
-	public RenderCow(ModelBase var1, float var2) {
-		super(var1, var2);
-	}
-
-	public void renderCow(EntityCow var1, double var2, double var4, double var6, float var8, float var9) {
-		super.doRenderLiving(var1, var2, var4, var6, var8, var9);
-	}
-
-	public void doRenderLiving(EntityLiving var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderCow((EntityCow)var1, var2, var4, var6, var8, var9);
-	}
-
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderCow((EntityCow)var1, var2, var4, var6, var8, var9);
+	public RenderCow(ModelBase yi, float float2) {
+		super(yi, float2);
+	}
+
+	public void renderCow(EntityCow be, double double2, double double3, double double4, float float5, float float6) {
+		super.doRenderLiving(be, double2, double3, double4, float5, float6);
+	}
+
+	public void doRenderLiving(EntityLiving zi, double double2, double double3, double double4, float float5, float float6) {
+		this.renderCow((EntityCow)zi, double2, double3, double4, float5, float6);
+	}
+
+	public void doRender(Entity xy, double double2, double double3, double double4, float float5, float float6) {
+		this.renderCow((EntityCow)xy, double2, double3, double4, float5, float6);
 	}
 }
--- /dev/null
+++ net/minecraft/src/MinecraftUnknownClass3.java
@@ -1,0 +1,277 @@
+package net.minecraft.src;
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.nio.ByteBuffer;
+import java.nio.IntBuffer;
+import java.util.Random;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.ARBShaderObjects;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL13;
+import org.lwjgl.opengl.ARBVertexShader;
+import org.lwjgl.opengl.ARBFragmentShader;
+import org.lwjgl.opengl.ARBMultitexture;
+
+public class MinecraftUnknownClass3 {
+	public int field_11406_6hrv4v954Okb7obaj0yHtV3G5Pxi4HLBshp8pHZ6gBKLb8z38aC0Wl5J781Q = 0;
+	public int field_11404_6G238hzdz174ui01Kn7hC7aXG4OFtxgSTqd88RZTU29K01h2S9Ewl85O71ni = 0;
+	private int field_11398_2fk6kdaE94v3T9513Sk23R46mYaA5nqbbaE37TC85q0I8bC3Rul64T4PeL7t = 0;
+	private int field_11397_91wim1EVvh3KkuC0VI77xjt4EvJUg5K9i65b5GTg1PsB8Vv00h1Sje3KX91p = 0;
+	public int field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C = 0;
+	private int field_11391_0Jliadq6MiR90YwBX2EcyoC4q777p4ThxDrqTIN9pjcRGK23VU3JY7xA9v39 = 0;
+	private int field_11399_8q3NnYF395aMwM6JsGAH1dqDyCG6rgY7QK44W9yx8CEBc2hSTW4rcLdNgth0 = 0;
+	private int field_11402_0SSC84N8JG6dE09gQ6910N5N78f81K4E4ovsfRt5iRjZCSVdok9vRwTZuh1k = 0;
+	private int field_11395_385X644BXT9qBn6EF1gIbS63mT0B092Z2lynp6yudR6UJeSv1MPf63o296yR = 0;
+	private int field_11400_99QURSTWyu6T75EQj21pgtAS627wxwQ52Z8b7F8U3R81i613FC3SJLY2aTbs = 0;
+	private int field_11396_9441y1Y9T40FDCF9uuwkU1lmehM65hg8761b2m6X1BgG7auF90lDMvklrCeq = 0;
+	private int field_11392_6lfU3mNn3UomWZH8MfUGPg4LX59b1U18fabPV53p2u7ludbeYE1196g5rWX6 = 0;
+	private int field_11403_20GQz7zR34Tp693G3DSupFXBE66x7RUvn9JBul8RyCo5s50123NSbmOaYt5u = 0;
+	private int field_11407_2i7O7iJDFtoO2YSWX2e96Df4ACzXIrBwc2Khi70y062n1HJaqNA1njxwdt6o = 0;
+	private int field_11405_5OVC2g2d9zq6dP14qJsUlMx8ghzyNOS2n5hh0gcYmL4BF9KuER7SqHiYE809 = 0;
+	private int field_11401_3W20rY0C5sq1crIFTGspopkir94xT6ZbCJ2HfG0YdtAolGW79iW5ue93k9gj = 0;
+	public Random field_11408_2SsePNiNxSOe8T43T3RkxQkXltd0oPOKg7w710gmT1w1fVdSSd15fP0M69aI = new Random();
+	private Minecraft field_11393_6kPc5bsQEopw306pUZPVI78jGyAvqN5EXMDClw6q2Hy6z4n2X8f6EJIXw0Zs;
+
+	public MinecraftUnknownClass3(Minecraft minecraft) {
+		this.field_11393_6kPc5bsQEopw306pUZPVI78jGyAvqN5EXMDClw6q2Hy6z4n2X8f6EJIXw0Zs = minecraft;
+		this.func_11380_9r1511Jp0jE144f4MQc4NK82XBZn9UtKQ9T0m3371572UnC4jS4YM9eJUhB9();
+	}
+
+	public void func_11380_9r1511Jp0jE144f4MQc4NK82XBZn9UtKQ9T0m3371572UnC4jS4YM9eJUhB9() {
+		this.field_11404_6G238hzdz174ui01Kn7hC7aXG4OFtxgSTqd88RZTU29K01h2S9Ewl85O71ni = ARBShaderObjects.glCreateProgramObjectARB();
+		if(this.field_11404_6G238hzdz174ui01Kn7hC7aXG4OFtxgSTqd88RZTU29K01h2S9Ewl85O71ni != 0) {
+			this.field_11398_2fk6kdaE94v3T9513Sk23R46mYaA5nqbbaE37TC85q0I8bC3Rul64T4PeL7t = this.func_11389_0u1i79tq0P37AEqTW68P5h1i60IaZ9B5ZJcVyUU5cxE4ZBy70htlWd17uQle("/ext1605/shaders/default/base.vsh");
+			this.field_11397_91wim1EVvh3KkuC0VI77xjt4EvJUg5K9i65b5GTg1PsB8Vv00h1Sje3KX91p = this.func_11381_1z5mnRcFcRlTWBe1jp2xD0rCP4M4Y54xinN7y78Gku4p1Fs79CtzhXaAM43P("/ext1605/shaders/default/base.fsh");
+		}
+
+		if(this.field_11398_2fk6kdaE94v3T9513Sk23R46mYaA5nqbbaE37TC85q0I8bC3Rul64T4PeL7t != 0 && this.field_11397_91wim1EVvh3KkuC0VI77xjt4EvJUg5K9i65b5GTg1PsB8Vv00h1Sje3KX91p != 0) {
+			ARBShaderObjects.glAttachObjectARB(this.field_11404_6G238hzdz174ui01Kn7hC7aXG4OFtxgSTqd88RZTU29K01h2S9Ewl85O71ni, this.field_11398_2fk6kdaE94v3T9513Sk23R46mYaA5nqbbaE37TC85q0I8bC3Rul64T4PeL7t);
+			ARBShaderObjects.glAttachObjectARB(this.field_11404_6G238hzdz174ui01Kn7hC7aXG4OFtxgSTqd88RZTU29K01h2S9Ewl85O71ni, this.field_11397_91wim1EVvh3KkuC0VI77xjt4EvJUg5K9i65b5GTg1PsB8Vv00h1Sje3KX91p);
+			ARBShaderObjects.glLinkProgramARB(this.field_11404_6G238hzdz174ui01Kn7hC7aXG4OFtxgSTqd88RZTU29K01h2S9Ewl85O71ni);
+			ARBShaderObjects.glValidateProgramARB(this.field_11404_6G238hzdz174ui01Kn7hC7aXG4OFtxgSTqd88RZTU29K01h2S9Ewl85O71ni);
+			if(!func_11390_0Xl1zrDDJ6B7f1Ga59F3PLk9v9hZR3c4d9CJ6uv71JQVj2ByH42wT0OY43XH(this.field_11404_6G238hzdz174ui01Kn7hC7aXG4OFtxgSTqd88RZTU29K01h2S9Ewl85O71ni)) {
+				this.field_11404_6G238hzdz174ui01Kn7hC7aXG4OFtxgSTqd88RZTU29K01h2S9Ewl85O71ni = 0;
+			}
+		}
+
+		this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C = ARBShaderObjects.glCreateProgramObjectARB();
+		if(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C != 0) {
+			this.field_11391_0Jliadq6MiR90YwBX2EcyoC4q777p4ThxDrqTIN9pjcRGK23VU3JY7xA9v39 = this.func_11389_0u1i79tq0P37AEqTW68P5h1i60IaZ9B5ZJcVyUU5cxE4ZBy70htlWd17uQle("/ext1605/shaders/default/final.vsh");
+			this.field_11399_8q3NnYF395aMwM6JsGAH1dqDyCG6rgY7QK44W9yx8CEBc2hSTW4rcLdNgth0 = this.func_11381_1z5mnRcFcRlTWBe1jp2xD0rCP4M4Y54xinN7y78Gku4p1Fs79CtzhXaAM43P("/ext1605/shaders/custom/final.fsh");
+		}
+
+		if(this.field_11391_0Jliadq6MiR90YwBX2EcyoC4q777p4ThxDrqTIN9pjcRGK23VU3JY7xA9v39 != 0 && this.field_11399_8q3NnYF395aMwM6JsGAH1dqDyCG6rgY7QK44W9yx8CEBc2hSTW4rcLdNgth0 != 0) {
+			ARBShaderObjects.glAttachObjectARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C, this.field_11391_0Jliadq6MiR90YwBX2EcyoC4q777p4ThxDrqTIN9pjcRGK23VU3JY7xA9v39);
+			ARBShaderObjects.glAttachObjectARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C, this.field_11399_8q3NnYF395aMwM6JsGAH1dqDyCG6rgY7QK44W9yx8CEBc2hSTW4rcLdNgth0);
+			ARBShaderObjects.glLinkProgramARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C);
+			ARBShaderObjects.glValidateProgramARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C);
+			if(!func_11390_0Xl1zrDDJ6B7f1Ga59F3PLk9v9hZR3c4d9CJ6uv71JQVj2ByH42wT0OY43XH(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C)) {
+				this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C = 0;
+			}
+		}
+
+	}
+
+	public void func_11385_2aBrqFndfkzC8w9LabN9jT6nygQa1G113SE0F3xs21Ehzq80X8oVOnixaKXP(int integer) {
+		ARBShaderObjects.glUseProgramObjectARB(integer);
+		this.field_11406_6hrv4v954Okb7obaj0yHtV3G5Pxi4HLBshp8pHZ6gBKLb8z38aC0Wl5J781Q = integer;
+		if(integer != 0) {
+			int i2 = ARBShaderObjects.glGetUniformLocationARB(integer, "sampler0");
+			ARBShaderObjects.glUniform1iARB(i2, 0);
+		}
+
+	}
+
+	private int func_11389_0u1i79tq0P37AEqTW68P5h1i60IaZ9B5ZJcVyUU5cxE4ZBy70htlWd17uQle(String string) {
+		int i2 = ARBShaderObjects.glCreateShaderObjectARB(ARBVertexShader.GL_VERTEX_SHADER_ARB);
+		if(i2 == 0) {
+			return 0;
+		} else {
+			String string3 = "";
+
+			String string4;
+			try {
+				for(BufferedReader bufferedReader5 = new BufferedReader(new InputStreamReader(Ext1605Utils.func_12150_5v4Cs6sI06e6Hjpg3rSI82gG008x14C2jag2OM7ADaW5U8a3DYSrf570CJm6(string))); (string4 = bufferedReader5.readLine()) != null; string3 = string3 + string4 + "\n") {
+				}
+			} catch (Exception exception6) {
+				System.out.println("Failed reading vertex shading code.");
+				return 0;
+			}
+
+			ARBShaderObjects.glShaderSourceARB(i2, string3);
+			ARBShaderObjects.glCompileShaderARB(i2);
+			if(!func_11390_0Xl1zrDDJ6B7f1Ga59F3PLk9v9hZR3c4d9CJ6uv71JQVj2ByH42wT0OY43XH(i2)) {
+				i2 = 0;
+			}
+
+			return i2;
+		}
+	}
+
+	private int func_11381_1z5mnRcFcRlTWBe1jp2xD0rCP4M4Y54xinN7y78Gku4p1Fs79CtzhXaAM43P(String string) {
+		int i2 = ARBShaderObjects.glCreateShaderObjectARB(ARBFragmentShader.GL_FRAGMENT_SHADER_ARB);
+		if(i2 == 0) {
+			return 0;
+		} else {
+			String string3 = "#version 120\n";
+			string3 = string3 + this.field_11393_6kPc5bsQEopw306pUZPVI78jGyAvqN5EXMDClw6q2Hy6z4n2X8f6EJIXw0Zs.options.func_11736_4ZBw6818NpyygSj15g0tevwT2VRNee9iyV3HNltCy7o20mr67D74Di6czF41();
+
+			String string4;
+			try {
+				for(BufferedReader bufferedReader5 = new BufferedReader(new InputStreamReader(Ext1605Utils.func_12150_5v4Cs6sI06e6Hjpg3rSI82gG008x14C2jag2OM7ADaW5U8a3DYSrf570CJm6(string))); (string4 = bufferedReader5.readLine()) != null; string3 = string3 + string4 + "\n") {
+				}
+			} catch (Exception exception6) {
+				System.out.println("Failed reading fragment shading code.");
+				return 0;
+			}
+
+			ARBShaderObjects.glShaderSourceARB(i2, string3);
+			ARBShaderObjects.glCompileShaderARB(i2);
+			if(!func_11390_0Xl1zrDDJ6B7f1Ga59F3PLk9v9hZR3c4d9CJ6uv71JQVj2ByH42wT0OY43XH(i2)) {
+				i2 = 0;
+			}
+
+			return i2;
+		}
+	}
+
+	private static boolean func_11390_0Xl1zrDDJ6B7f1Ga59F3PLk9v9hZR3c4d9CJ6uv71JQVj2ByH42wT0OY43XH(int integer) {
+		IntBuffer intBuffer1 = BufferUtils.createIntBuffer(1);
+		ARBShaderObjects.glGetObjectParameterARB(integer, ARBShaderObjects.GL_OBJECT_INFO_LOG_LENGTH_ARB, intBuffer1);
+		int i2 = intBuffer1.get();
+		if(i2 > 1) {
+			ByteBuffer byteBuffer3 = BufferUtils.createByteBuffer(i2);
+			intBuffer1.flip();
+			ARBShaderObjects.glGetInfoLogARB(integer, intBuffer1, byteBuffer3);
+			byte[] b4 = new byte[i2];
+			byteBuffer3.get(b4);
+			String string5 = new String(b4);
+			System.out.println("Info log:\n" + string5);
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	private int func_11387_6N3mcf0BGqjNK53qh26x8VQ4E61x3o39KsFng4ST42q2tOJc811a7A37Zu88(int integer1, int integer2, boolean boolean3) {
+		int i4 = GL11.glGenTextures();
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, i4);
+		ByteBuffer byteBuffer5;
+		if(boolean3) {
+			byteBuffer5 = ByteBuffer.allocateDirect(integer1 * integer2 * 4 * 4);
+			GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_DEPTH_COMPONENT, integer1, integer2, 0, GL11.GL_DEPTH_COMPONENT, GL11.GL_FLOAT, byteBuffer5);
+		} else {
+			byteBuffer5 = ByteBuffer.allocateDirect(integer1 * integer2 * 4);
+			GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, integer1, integer2, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, byteBuffer5);
+		}
+
+		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
+		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
+		return i4;
+	}
+
+	private void func_11386_70Z3u02f1Kr9285gO782wwmyAI50j816Mb433849317G7yhuZTqic1PYtnPe(int integer) {
+		GL11.glDeleteTextures(integer);
+	}
+
+	public int func_11388_8HzFSuQdA8hV11L03HqdJf3J6QnwTI3IL1K751k618F0KmXstFu981F5bdPq(Minecraft minecraft) {
+		if(this.field_11402_0SSC84N8JG6dE09gQ6910N5N78f81K4E4ovsfRt5iRjZCSVdok9vRwTZuh1k == 0 || this.field_11395_385X644BXT9qBn6EF1gIbS63mT0B092Z2lynp6yudR6UJeSv1MPf63o296yR != minecraft.displayWidth || this.field_11400_99QURSTWyu6T75EQj21pgtAS627wxwQ52Z8b7F8U3R81i613FC3SJLY2aTbs != minecraft.displayHeight) {
+			this.field_11402_0SSC84N8JG6dE09gQ6910N5N78f81K4E4ovsfRt5iRjZCSVdok9vRwTZuh1k = this.func_11387_6N3mcf0BGqjNK53qh26x8VQ4E61x3o39KsFng4ST42q2tOJc811a7A37Zu88(minecraft.displayWidth, minecraft.displayHeight, false);
+			this.field_11395_385X644BXT9qBn6EF1gIbS63mT0B092Z2lynp6yudR6UJeSv1MPf63o296yR = minecraft.displayWidth;
+			this.field_11400_99QURSTWyu6T75EQj21pgtAS627wxwQ52Z8b7F8U3R81i613FC3SJLY2aTbs = minecraft.displayHeight;
+		}
+
+		return this.field_11402_0SSC84N8JG6dE09gQ6910N5N78f81K4E4ovsfRt5iRjZCSVdok9vRwTZuh1k;
+	}
+
+	public int func_11384_35vk4IIhd8hao4F5HSR9jWpH6tem7rh9B886Pq7RYkf415WQC9hm6vShCua6(Minecraft minecraft) {
+		if(this.field_11396_9441y1Y9T40FDCF9uuwkU1lmehM65hg8761b2m6X1BgG7auF90lDMvklrCeq == 0 || this.field_11392_6lfU3mNn3UomWZH8MfUGPg4LX59b1U18fabPV53p2u7ludbeYE1196g5rWX6 != minecraft.displayWidth || this.field_11403_20GQz7zR34Tp693G3DSupFXBE66x7RUvn9JBul8RyCo5s50123NSbmOaYt5u != minecraft.displayHeight) {
+			this.field_11396_9441y1Y9T40FDCF9uuwkU1lmehM65hg8761b2m6X1BgG7auF90lDMvklrCeq = this.func_11387_6N3mcf0BGqjNK53qh26x8VQ4E61x3o39KsFng4ST42q2tOJc811a7A37Zu88(minecraft.displayWidth, minecraft.displayHeight, true);
+			this.field_11392_6lfU3mNn3UomWZH8MfUGPg4LX59b1U18fabPV53p2u7ludbeYE1196g5rWX6 = minecraft.displayWidth;
+			this.field_11403_20GQz7zR34Tp693G3DSupFXBE66x7RUvn9JBul8RyCo5s50123NSbmOaYt5u = minecraft.displayHeight;
+		}
+
+		return this.field_11396_9441y1Y9T40FDCF9uuwkU1lmehM65hg8761b2m6X1BgG7auF90lDMvklrCeq;
+	}
+
+	public int func_11382_6L4tKeSFB9JuB4C21yfU9Wexrw7VE17dZURA0uDEgh0622ButpwPgn1H7yV8(Minecraft minecraft) {
+		if(this.field_11407_2i7O7iJDFtoO2YSWX2e96Df4ACzXIrBwc2Khi70y062n1HJaqNA1njxwdt6o == 0 || this.field_11405_5OVC2g2d9zq6dP14qJsUlMx8ghzyNOS2n5hh0gcYmL4BF9KuER7SqHiYE809 != minecraft.displayWidth || this.field_11401_3W20rY0C5sq1crIFTGspopkir94xT6ZbCJ2HfG0YdtAolGW79iW5ue93k9gj != minecraft.displayHeight) {
+			this.field_11407_2i7O7iJDFtoO2YSWX2e96Df4ACzXIrBwc2Khi70y062n1HJaqNA1njxwdt6o = this.func_11387_6N3mcf0BGqjNK53qh26x8VQ4E61x3o39KsFng4ST42q2tOJc811a7A37Zu88(minecraft.displayWidth, minecraft.displayHeight, true);
+			this.field_11405_5OVC2g2d9zq6dP14qJsUlMx8ghzyNOS2n5hh0gcYmL4BF9KuER7SqHiYE809 = minecraft.displayWidth;
+			this.field_11401_3W20rY0C5sq1crIFTGspopkir94xT6ZbCJ2HfG0YdtAolGW79iW5ue93k9gj = minecraft.displayHeight;
+		}
+
+		return this.field_11407_2i7O7iJDFtoO2YSWX2e96Df4ACzXIrBwc2Khi70y062n1HJaqNA1njxwdt6o;
+	}
+
+	public void func_11379_3Ox6ELkjL7tS0M11M9Ec3mtp515ihaUVz6k07257y4J6E9IJVRiQKoD3Ym6J(Minecraft minecraft, float float2, float float3, float float4, float float5) {
+		if(!minecraft.options.anaglyph && this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C != 0) {
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.func_11388_8HzFSuQdA8hV11L03HqdJf3J6QnwTI3IL1K751k618F0KmXstFu981F5bdPq(minecraft));
+			GL11.glCopyTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, 0, 0, minecraft.displayWidth, minecraft.displayHeight, 0);
+			GL13.glActiveTexture(ARBMultitexture.GL_TEXTURE1_ARB);
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.func_11384_35vk4IIhd8hao4F5HSR9jWpH6tem7rh9B886Pq7RYkf415WQC9hm6vShCua6(minecraft));
+			GL13.glActiveTexture(ARBMultitexture.GL_TEXTURE2_ARB);
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.func_11382_6L4tKeSFB9JuB4C21yfU9Wexrw7VE17dZURA0uDEgh0622ButpwPgn1H7yV8(minecraft));
+			GL13.glActiveTexture(ARBMultitexture.GL_TEXTURE0_ARB);
+			this.func_11385_2aBrqFndfkzC8w9LabN9jT6nygQa1G113SE0F3xs21Ehzq80X8oVOnixaKXP(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C);
+			int i6 = ARBShaderObjects.glGetUniformLocationARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C, "sampler0");
+			ARBShaderObjects.glUniform1iARB(i6, 0);
+			int i7 = ARBShaderObjects.glGetUniformLocationARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C, "sampler1");
+			ARBShaderObjects.glUniform1iARB(i7, 1);
+			int i8 = ARBShaderObjects.glGetUniformLocationARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C, "sampler2");
+			ARBShaderObjects.glUniform1iARB(i8, 2);
+			int i9 = ARBShaderObjects.glGetUniformLocationARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C, "aspectRatio");
+			ARBShaderObjects.glUniform1fARB(i9, (float)(minecraft.displayWidth / minecraft.displayHeight));
+			int i10 = ARBShaderObjects.glGetUniformLocationARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C, "near");
+			ARBShaderObjects.glUniform1fARB(i10, 0.05F);
+			int i11 = ARBShaderObjects.glGetUniformLocationARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C, "far");
+			ARBShaderObjects.glUniform1fARB(i11, float2);
+			int i12 = ARBShaderObjects.glGetUniformLocationARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C, "rand");
+			ARBShaderObjects.glUniform1fARB(i12, this.field_11408_2SsePNiNxSOe8T43T3RkxQkXltd0oPOKg7w710gmT1w1fVdSSd15fP0M69aI.nextFloat());
+			int i13 = ARBShaderObjects.glGetUniformLocationARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C, "lastMouseDist");
+			ARBShaderObjects.glUniform1fARB(i13, minecraft.currentScreen != null ? 0.0F : (float)Math.abs(Math.sqrt(Math.pow((double)InputHandler.EventDX, 2.0D) + Math.pow((double)InputHandler.EventDY, 2.0D))));
+			int i14 = ARBShaderObjects.glGetUniformLocationARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C, "lastMouseX");
+			ARBShaderObjects.glUniform1fARB(i14, (float)InputHandler.EventDX);
+			int i15 = ARBShaderObjects.glGetUniformLocationARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C, "lastMouseY");
+			ARBShaderObjects.glUniform1fARB(i15, (float)InputHandler.EventDY);
+			int i16 = ARBShaderObjects.glGetUniformLocationARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C, "playerPitchRot");
+			ARBShaderObjects.glUniform1fARB(i16, minecraft.thePlayer.rotationPitch);
+			int i17 = ARBShaderObjects.glGetUniformLocationARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C, "fovMod");
+			ARBShaderObjects.glUniform1fARB(i17, minecraft.options.fovModifier);
+			int i18 = GL11.glGetInteger(GL11.GL_FOG_MODE);
+			int i19 = ARBShaderObjects.glGetUniformLocationARB(this.field_11394_5njmf4RMUMok22e26216PC1AQHrm3cuOQ244o6dsQIZ7mMyYI2OdfKFqUw9C, "fogMode");
+			ARBShaderObjects.glUniform1iARB(i19, i18);
+			GL11.glClearColor(float3, float4, float5, 0.0F);
+			GL11.glClear(16384);
+			GL11.glDisable(GL11.GL_DEPTH_TEST);
+			GL11.glDisable(GL11.GL_BLEND);
+			GL11.glMatrixMode(GL11.GL_PROJECTION);
+			GL11.glLoadIdentity();
+			GL11.glOrtho(0.0D, (double)minecraft.displayWidth, (double)minecraft.displayHeight, 0.0D, -1.0D, 1.0D);
+			GL11.glMatrixMode(GL11.GL_MODELVIEW);
+			GL11.glLoadIdentity();
+			GL11.glBegin(GL11.GL_QUADS);
+			GL11.glTexCoord2f(0.0F, 1.0F);
+			GL11.glVertex3f(0.0F, 0.0F, 0.0F);
+			GL11.glTexCoord2f(0.0F, 0.0F);
+			GL11.glVertex3f(0.0F, (float)minecraft.displayHeight, 0.0F);
+			GL11.glTexCoord2f(1.0F, 0.0F);
+			GL11.glVertex3f((float)minecraft.displayWidth, (float)minecraft.displayHeight, 0.0F);
+			GL11.glTexCoord2f(1.0F, 1.0F);
+			GL11.glVertex3f((float)minecraft.displayWidth, 0.0F, 0.0F);
+			GL11.glEnd();
+			GL11.glEnable(GL11.GL_DEPTH_TEST);
+			this.func_11385_2aBrqFndfkzC8w9LabN9jT6nygQa1G113SE0F3xs21Ehzq80X8oVOnixaKXP(0);
+		}
+
+	}
+
+	public static void func_11383_9k8UYIQjyl8A669E4479n7ZN6ovKzu0Py7mZLt8QHMg0jDqVsW8F6L6Ycg15(int integer, Minecraft minecraft) {
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, integer);
+		GL11.glCopyTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_DEPTH_COMPONENT, 0, 0, minecraft.displayWidth, minecraft.displayHeight, 0);
+	}
+}
--- /dev/null
+++ net/minecraft/src/EntityShadowPlayer.java
@@ -1,0 +1,52 @@
+package net.minecraft.src;
+
+public class EntityShadowPlayer extends EntityPlayer {
+	public int stareTimer = 0;
+	public boolean getTheFrickOut = false;
+	public boolean spawnedThisCycle = false;
+
+	public EntityShadowPlayer(World world) {
+		super(world);
+		this.yOffset = 1.62F;
+		this.setLocationAndAngles((double)world.spawnX + 0.5D, (double)(world.spawnY + 1), (double)world.spawnZ + 0.5D, 0.0F, 0.0F);
+		this.health = 20;
+		this.entityType = "humanoid";
+		this.fireResistance = 20;
+		this.texture = "/char.png";
+		this.username = "";
+		this.skinUrl = "@@";
+	}
+
+	public void Gone() {
+		this.isDead = true;
+		this.dead = true;
+		this.onDeath(this);
+	}
+
+	public void onLivingUpdate() {
+		float f1 = this.getDistanceToEntity(InputHandler.mc.thePlayer);
+		if(!ScreenDebugMenu.dbg_conf_spawnShadowPlayers || f1 < 19.0F && !ScreenDebugMenu.field_7955_2x00ovR61G2n6Zj5nN9jd9FAdV8H3Cz32KtPOCpcvM363cbIQ5o5vSMN7x7B) {
+			this.Gone();
+		}
+
+		if(InputHandler.mc.thePlayer != null) {
+			double d2 = Math.atan2(this.posX - InputHandler.mc.thePlayer.posX, -(this.posZ - InputHandler.mc.thePlayer.posZ)) / Math.PI * 180.0D;
+			this.setRotation((float)d2, 0.0F);
+			double d4 = Ext1605Utils.AngleDistance((double)InputHandler.mc.thePlayer.rotationYaw, (double)this.rotationYaw) - 180.0D;
+			boolean z6 = !Ext1605Utils.RayCastBlock(this.worldObj, 128, this.posX, this.posY + 1.0D, this.posZ, InputHandler.mc.thePlayer.posX, InputHandler.mc.thePlayer.posY + 1.0D, InputHandler.mc.thePlayer.posZ);
+			if(d4 > -10.0D && d4 < 10.0D && z6 && !ScreenDebugMenu.field_7955_2x00ovR61G2n6Zj5nN9jd9FAdV8H3Cz32KtPOCpcvM363cbIQ5o5vSMN7x7B) {
+				++this.stareTimer;
+				if(this.stareTimer > 70) {
+					this.getTheFrickOut = true;
+					this.Gone();
+				}
+			}
+		}
+
+		if(!this.spawnedThisCycle) {
+			this.Gone();
+		}
+
+		super.onLivingUpdate();
+	}
+}
--- /dev/null
+++ net/minecraft/src/ThreadDownloadResourcesUnknownClass.java
@@ -1,0 +1,34 @@
+package net.minecraft.src;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.FileVisitResult;
+import java.nio.file.attribute.BasicFileAttributes;
+import java.nio.file.Path;
+import java.nio.file.SimpleFileVisitor;
+
+class ThreadDownloadResourcesUnknownClass extends SimpleFileVisitor<Path> {
+    final /* synthetic */ ThreadDownloadResources field_12254_9lpJ3hOq9he863cILd0jzFa4s8qR0EQ4UCpz997Oq5O3RN6TOWx4JtzglpnC;
+    
+    ThreadDownloadResourcesUnknownClass(final ThreadDownloadResources ue) {
+        this.field_12254_9lpJ3hOq9he863cILd0jzFa4s8qR0EQ4UCpz997Oq5O3RN6TOWx4JtzglpnC = ue;
+    }
+    
+    public FileVisitResult visitFile(final Path path, final BasicFileAttributes basicFileAttributes) throws IOException {
+        Files.delete(path);
+        return FileVisitResult.CONTINUE;
+    }
+    
+    public FileVisitResult visitFileFailed(final Path path, final IOException iOException) throws IOException {
+        Files.delete(path);
+        return FileVisitResult.CONTINUE;
+    }
+    
+    public FileVisitResult postVisitDirectory(final Path path, final IOException iOException) throws IOException {
+        if (iOException != null) {
+            throw iOException;
+        }
+        Files.delete(path);
+        return FileVisitResult.CONTINUE;
+    }
+}
--- /dev/null
+++ net/minecraft/src/RemoteEntityData.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+public class RemoteEntityData {
+	public int entityID;
+	public double x;
+	public double y;
+	public double z;
+	public double rotPitch;
+	public double rotYaw;
+
+	public RemoteEntityData(int integer) {
+		this.entityID = integer;
+	}
+}
--- /dev/null
+++ net/minecraft/src/HubWorldUnknownClass4.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+public class HubWorldUnknownClass4 {
+	public HubWorldUnknownClass4 field_11789_0J562Mkp8zd7uXcLK816mU9467m831KM7RpX06f6clIam7Juk383188UJI1W;
+	public HubWorldUnknownClass2 field_11787_8iCq4GSKPkQ43x8qDCT4F6e6GtJRbja891p0117NYXqiVP33D0nGR8Ro1PTS;
+	public int field_11788_8SC3atS6j6Isbe0L8jfHn20VpDQ2oEuWx50aPWK7m4716WZvPxNuDet8WcyH;
+	public int field_11785_1xaZJg9P3466Q7kKjNR53Spq94J4346Zn1Fr8ECSh2J6WfTC48Ol85CY516B;
+	public int field_11786_8Cqhm6p50sez02g2aksV2az047YVCwO71qNEk8njBkCznU01mr6qkEVSNl5Y;
+
+	public HubWorldUnknownClass4(HubWorldUnknownClass2 gx, int integer2, int integer3, int integer4) {
+		this.field_11787_8iCq4GSKPkQ43x8qDCT4F6e6GtJRbja891p0117NYXqiVP33D0nGR8Ro1PTS = gx;
+		this.field_11788_8SC3atS6j6Isbe0L8jfHn20VpDQ2oEuWx50aPWK7m4716WZvPxNuDet8WcyH = integer2;
+		this.field_11785_1xaZJg9P3466Q7kKjNR53Spq94J4346Zn1Fr8ECSh2J6WfTC48Ol85CY516B = integer3;
+		this.field_11786_8Cqhm6p50sez02g2aksV2az047YVCwO71qNEk8njBkCznU01mr6qkEVSNl5Y = integer4;
+	}
+
+	public boolean func_11784_50HlF50aFoB7NiHFoTOH3x80rsY8B1b3Kth2O196sr37CQNqM7QEDA5Lg1xv() {
+		return this.field_11789_0J562Mkp8zd7uXcLK816mU9467m831KM7RpX06f6clIam7Juk383188UJI1W != null;
+	}
+}
--- /dev/null
+++ net/minecraft/src/VisualsCavestyle.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+class VisualsCavestyle extends Visuals {
+    final /* synthetic */ VisualsManager field_10077_1Z0xOFE6V2whQr0Nx8b20Y4Bn07W40vG4Xn7f94Lxfl2KeZ6j7FK18iMP03U;
+    
+    VisualsCavestyle(final VisualsManager la) {
+        this.field_10077_1Z0xOFE6V2whQr0Nx8b20Y4Bn07W40vG4Xn7f94Lxfl2KeZ6j7FK18iMP03U = la;
+    }
+    
+    @Override
+    public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+        return "/unl/ebcc7fc5-e1ff-4d8a-b96c-475aae32cc91.xAL";
+    }
+    
+    @Override
+    public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(final Object... arr) {
+        if (arr[0] instanceof FreerunMap1 && (long)arr[1] <= 480L) {
+            this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+            return true;
+        }
+        return false;
+    }
+    
+    @Override
+    public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+        return "unlock--cavestyle";
+    }
+    
+    @Override
+    public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+        return "Cavestyle";
+    }
+    
+    @Override
+    public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+        return "Finish CONSTRUCT in 24 seconds or less";
+    }
+}
--- net/minecraft/src/EntityLiving.java
+++ net/minecraft/src/EntityLiving.java
@@ -4,23 +4,15 @@
 
 public class EntityLiving extends Entity {
 	public int heartsHalvesLife = 20;
-	public float unusedRotationPitch2;
-	public float unusedFloat;
-	public float unusedRotationPitch;
 	public float renderYawOffset = 0.0F;
 	public float prevRenderYawOffset = 0.0F;
 	protected float ridingRotUnused;
 	protected float prevRidingRotUnused;
 	protected float rotationUnused;
 	protected float prevRotationUnused;
-	protected boolean unusedBool1 = true;
 	protected String texture = "/char.png";
-	protected boolean unusedBool2 = true;
-	protected float unusedRotation = 0.0F;
 	protected String entityType = null;
-	protected float unusedFloat1 = 1.0F;
 	protected int scoreValue = 0;
-	protected float unusedFloat2 = 0.0F;
 	public boolean isAIEnabled = false;
 	public float prevSwingProgress;
 	public float swingProgress;
@@ -35,8 +27,6 @@
 	public float prevCameraPitch;
 	public float cameraPitch;
 	protected boolean dead = false;
-	public int unusedInt = -1;
-	public float unusedFloat4 = (float)(Math.random() * (double)0.9F + (double)0.1F);
 	public float prevLimbYaw;
 	public float limbYaw;
 	public float limbSwing;
@@ -56,20 +46,18 @@
 	protected float moveSpeed = 0.7F;
 	private Entity currentTarget;
 	private int numTicksToChaseTarget = 0;
+	public boolean affectedByFallDamage = true;
 
-	public EntityLiving(World var1) {
-		super(var1);
+	public EntityLiving(World world) {
+		super(world);
 		this.preventEntitySpawning = true;
-		this.unusedRotationPitch = (float)(Math.random() + 1.0D) * 0.01F;
 		this.setPosition(this.posX, this.posY, this.posZ);
-		this.unusedRotationPitch2 = (float)Math.random() * 12398.0F;
-		this.rotationYaw = (float)(Math.random() * (double)((float)Math.PI) * 2.0D);
-		this.unusedFloat = 1.0F;
+		this.rotationYaw = (float)(Math.random() * (double)(float)Math.PI * 2.0D);
 		this.stepHeight = 0.5F;
 	}
 
-	protected boolean canEntityBeSeen(Entity var1) {
-		return this.worldObj.rayTraceBlocks(Vec3D.createVector(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ), Vec3D.createVector(var1.posX, var1.posY + (double)var1.getEyeHeight(), var1.posZ)) == null;
+	protected boolean canEntityBeSeen(Entity entity) {
+		return this.worldObj.rayTraceBlocks(Vec3D.createVector(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ), Vec3D.createVector(entity.posX, entity.posY + (double)entity.getEyeHeight(), entity.posZ)) == null;
 	}
 
 	public String getTexture() {
@@ -97,9 +85,9 @@
 		super.onEntityUpdate();
 		if(this.rand.nextInt(1000) < this.livingSoundTime++) {
 			this.livingSoundTime = -this.getTalkInterval();
-			String var1 = this.getLivingSound();
-			if(var1 != null) {
-				this.worldObj.playSoundAtEntity(this, var1, this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+			String string1 = this.getLivingSound();
+			if(string1 != null) {
+				this.worldObj.playSoundAtEntity(this, string1, this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
 			}
 		}
 
@@ -107,17 +95,24 @@
 			this.attackEntityFrom((Entity)null, 1);
 		}
 
-		int var8;
+		int i8;
 		if(this.isEntityAlive() && this.isInsideOfMaterial(Material.water)) {
-			--this.air;
+			if(this instanceof EntityPlayer && ((EntityPlayer)this).isSneaking()) {
+				if(this.worldObj.worldTime % 2L == 0L) {
+					--this.air;
+				}
+			} else {
+				--this.air;
+			}
+
 			if(this.air == -20) {
 				this.air = 0;
 
-				for(var8 = 0; var8 < 8; ++var8) {
-					float var2 = this.rand.nextFloat() - this.rand.nextFloat();
-					float var3 = this.rand.nextFloat() - this.rand.nextFloat();
-					float var4 = this.rand.nextFloat() - this.rand.nextFloat();
-					this.worldObj.spawnParticle("bubble", this.posX + (double)var2, this.posY + (double)var3, this.posZ + (double)var4, this.motionX, this.motionY, this.motionZ);
+				for(i8 = 0; i8 < 8; ++i8) {
+					float f2 = this.rand.nextFloat() - this.rand.nextFloat();
+					float f3 = this.rand.nextFloat() - this.rand.nextFloat();
+					float f4 = this.rand.nextFloat() - this.rand.nextFloat();
+					this.worldObj.spawnParticle("bubble", this.posX + (double)f2, this.posY + (double)f3, this.posZ + (double)f4, this.motionX, this.motionY, this.motionZ);
 				}
 
 				this.attackEntityFrom((Entity)null, 2);
@@ -147,11 +142,11 @@
 				this.onEntityDeath();
 				this.setEntityDead();
 
-				for(var8 = 0; var8 < 20; ++var8) {
-					double var9 = this.rand.nextGaussian() * 0.02D;
-					double var10 = this.rand.nextGaussian() * 0.02D;
-					double var6 = this.rand.nextGaussian() * 0.02D;
-					this.worldObj.spawnParticle("explode", this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, var9, var10, var6);
+				for(i8 = 0; i8 < 20; ++i8) {
+					double d9 = this.rand.nextGaussian() * 0.02D;
+					double d10 = this.rand.nextGaussian() * 0.02D;
+					double d6 = this.rand.nextGaussian() * 0.02D;
+					this.worldObj.spawnParticle("explode", this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, d9, d10, d6);
 				}
 			}
 		}
@@ -163,12 +158,12 @@
 	}
 
 	public void spawnExplosionParticle() {
-		for(int var1 = 0; var1 < 20; ++var1) {
-			double var2 = this.rand.nextGaussian() * 0.02D;
-			double var4 = this.rand.nextGaussian() * 0.02D;
-			double var6 = this.rand.nextGaussian() * 0.02D;
-			double var8 = 10.0D;
-			this.worldObj.spawnParticle("explode", this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - var2 * var8, this.posY + (double)(this.rand.nextFloat() * this.height) - var4 * var8, this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - var6 * var8, var2, var4, var6);
+		for(int i1 = 0; i1 < 20; ++i1) {
+			double d2 = this.rand.nextGaussian() * 0.02D;
+			double d4 = this.rand.nextGaussian() * 0.02D;
+			double d6 = this.rand.nextGaussian() * 0.02D;
+			double d8 = 10.0D;
+			this.worldObj.spawnParticle("explode", this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - d2 * d8, this.posY + (double)(this.rand.nextFloat() * this.height) - d4 * d8, this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - d6 * d8, d2, d4, d6);
 		}
 
 	}
@@ -179,76 +174,76 @@
 		this.prevRidingRotUnused = 0.0F;
 	}
 
-	public void setPositionAndRotation(double var1, double var3, double var5, float var7, float var8, int var9) {
+	public void setPositionAndRotation(double x, double y, double z, float rotationYaw, float rotationPitch, int newPosRotationIncrements) {
 		this.yOffset = 0.0F;
-		this.newPosX = var1;
-		this.newPosY = var3;
-		this.newPosZ = var5;
-		this.newRotationYaw = (double)var7;
-		this.newRotationPitch = (double)var8;
-		this.newPosRotationIncrements = var9;
+		this.newPosX = x;
+		this.newPosY = y;
+		this.newPosZ = z;
+		this.newRotationYaw = (double)rotationYaw;
+		this.newRotationPitch = (double)rotationPitch;
+		this.newPosRotationIncrements = newPosRotationIncrements;
 	}
 
 	public void onUpdate() {
 		super.onUpdate();
 		this.onLivingUpdate();
-		double var1 = this.posX - this.prevPosX;
-		double var3 = this.posZ - this.prevPosZ;
-		float var5 = MathHelper.sqrt_double(var1 * var1 + var3 * var3);
-		float var6 = this.renderYawOffset;
-		float var7 = 0.0F;
+		double d1 = this.posX - this.prevPosX;
+		double d3 = this.posZ - this.prevPosZ;
+		float f5 = MathHelper.sqrt_double(d1 * d1 + d3 * d3);
+		float f6 = this.renderYawOffset;
+		float f7 = 0.0F;
 		this.ridingRotUnused = this.prevRidingRotUnused;
-		float var8 = 0.0F;
-		if(var5 > 0.05F) {
-			var8 = 1.0F;
-			var7 = var5 * 3.0F;
-			var6 = (float)Math.atan2(var3, var1) * 180.0F / (float)Math.PI - 90.0F;
+		float f8 = 0.0F;
+		if(f5 > 0.05F) {
+			f8 = 1.0F;
+			f7 = f5 * 3.0F;
+			f6 = (float)Math.atan2(d3, d1) * 180.0F / (float)Math.PI - 90.0F;
 		}
 
 		if(this.swingProgress > 0.0F) {
-			var6 = this.rotationYaw;
+			f6 = this.rotationYaw;
 		}
 
 		if(!this.onGround) {
-			var8 = 0.0F;
-		}
-
-		this.prevRidingRotUnused += (var8 - this.prevRidingRotUnused) * 0.3F;
-
-		float var9;
-		for(var9 = var6 - this.renderYawOffset; var9 < -180.0F; var9 += 360.0F) {
-		}
-
-		while(var9 >= 180.0F) {
-			var9 -= 360.0F;
-		}
-
-		this.renderYawOffset += var9 * 0.3F;
-
-		float var10;
-		for(var10 = this.rotationYaw - this.renderYawOffset; var10 < -180.0F; var10 += 360.0F) {
-		}
-
-		while(var10 >= 180.0F) {
-			var10 -= 360.0F;
-		}
-
-		boolean var11 = var10 < -90.0F || var10 >= 90.0F;
-		if(var10 < -75.0F) {
-			var10 = -75.0F;
-		}
-
-		if(var10 >= 75.0F) {
-			var10 = 75.0F;
-		}
-
-		this.renderYawOffset = this.rotationYaw - var10;
-		if(var10 * var10 > 2500.0F) {
-			this.renderYawOffset += var10 * 0.2F;
-		}
-
-		if(var11) {
-			var7 *= -1.0F;
+			f8 = 0.0F;
+		}
+
+		this.prevRidingRotUnused += (f8 - this.prevRidingRotUnused) * 0.3F;
+
+		float f9;
+		for(f9 = f6 - this.renderYawOffset; f9 < -180.0F; f9 += 360.0F) {
+		}
+
+		while(f9 >= 180.0F) {
+			f9 -= 360.0F;
+		}
+
+		this.renderYawOffset += f9 * 0.3F;
+
+		float f10;
+		for(f10 = this.rotationYaw - this.renderYawOffset; f10 < -180.0F; f10 += 360.0F) {
+		}
+
+		while(f10 >= 180.0F) {
+			f10 -= 360.0F;
+		}
+
+		boolean z11 = f10 < -90.0F || f10 >= 90.0F;
+		if(f10 < -75.0F) {
+			f10 = -75.0F;
+		}
+
+		if(f10 >= 75.0F) {
+			f10 = 75.0F;
+		}
+
+		this.renderYawOffset = this.rotationYaw - f10;
+		if(f10 * f10 > 2500.0F) {
+			this.renderYawOffset += f10 * 0.2F;
+		}
+
+		if(z11) {
+			f7 *= -1.0F;
 		}
 
 		while(this.rotationYaw - this.prevRotationYaw < -180.0F) {
@@ -275,27 +270,28 @@
 			this.prevRotationPitch += 360.0F;
 		}
 
-		this.rotationUnused += var7;
-	}
-
-	protected void setSize(float var1, float var2) {
-		super.setSize(var1, var2);
-	}
-
-	public void heal(int var1) {
+		this.rotationUnused += f7;
+	}
+
+	protected void setSize(float width, float height) {
+		super.setSize(width, height);
+	}
+
+	public void heal(int health) {
 		if(this.health > 0) {
-			this.health += var1;
+			this.health += health;
 			if(this.health > 20) {
 				this.health = 20;
 			}
 
 			this.heartsLife = this.heartsHalvesLife / 2;
 		}
+
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		if(this.worldObj.multiplayerWorld) {
-			var2 = 0;
+			damage = 0;
 		}
 
 		this.entityAge = 0;
@@ -304,36 +300,36 @@
 		} else {
 			this.limbYaw = 1.5F;
 			if((float)this.heartsLife > (float)this.heartsHalvesLife / 2.0F) {
-				if(this.prevHealth - var2 >= this.health) {
+				if(this.prevHealth - damage >= this.health) {
 					return false;
 				}
 
-				this.health = this.prevHealth - var2;
+				this.health = this.prevHealth - damage;
 			} else {
 				this.prevHealth = this.health;
 				this.heartsLife = this.heartsHalvesLife;
-				this.health -= var2;
+				this.health -= damage;
 				this.hurtTime = this.maxHurtTime = 10;
 			}
 
 			this.attackedAtYaw = 0.0F;
-			if(var1 != null) {
-				double var3 = var1.posX - this.posX;
+			if(entity != null) {
+				double d3 = entity.posX - this.posX;
 
-				double var5;
-				for(var5 = var1.posZ - this.posZ; var3 * var3 + var5 * var5 < 1.0E-4D; var5 = (Math.random() - Math.random()) * 0.01D) {
-					var3 = (Math.random() - Math.random()) * 0.01D;
+				double d5;
+				for(d5 = entity.posZ - this.posZ; d3 * d3 + d5 * d5 < 1.0E-4D; d5 = (Math.random() - Math.random()) * 0.01D) {
+					d3 = (Math.random() - Math.random()) * 0.01D;
 				}
 
-				this.attackedAtYaw = (float)(Math.atan2(var5, var3) * 180.0D / (double)((float)Math.PI)) - this.rotationYaw;
-				this.knockBack(var1, var2, var3, var5);
+				this.attackedAtYaw = (float)(Math.atan2(d5, d3) * 180.0D / (double)(float)Math.PI) - this.rotationYaw;
+				this.knockBack(entity, damage, d3, d5);
 			} else {
 				this.attackedAtYaw = (float)((int)(Math.random() * 2.0D) * 180);
 			}
 
 			if(this.health <= 0) {
 				this.worldObj.playSoundAtEntity(this, this.getDeathSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
-				this.onDeath(var1);
+				this.onDeath(entity);
 			} else {
 				this.worldObj.playSoundAtEntity(this, this.getHurtSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
 			}
@@ -358,33 +354,33 @@
 		return "random.hurt";
 	}
 
-	public void knockBack(Entity var1, int var2, double var3, double var5) {
-		float var7 = MathHelper.sqrt_double(var3 * var3 + var5 * var5);
-		float var8 = 0.4F;
+	public void knockBack(Entity entity, int x, double y, double z) {
+		float f7 = MathHelper.sqrt_double(y * y + z * z);
+		float f8 = 0.4F;
 		this.motionX /= 2.0D;
 		this.motionY /= 2.0D;
 		this.motionZ /= 2.0D;
-		this.motionX -= var3 / (double)var7 * (double)var8;
+		this.motionX -= y / (double)f7 * (double)f8;
 		this.motionY += (double)0.4F;
-		this.motionZ -= var5 / (double)var7 * (double)var8;
+		this.motionZ -= z / (double)f7 * (double)f8;
 		if(this.motionY > (double)0.4F) {
 			this.motionY = (double)0.4F;
 		}
 
 	}
 
-	public void onDeath(Entity var1) {
-		if(this.scoreValue > 0 && var1 != null) {
-			var1.addToPlayerScore(this, this.scoreValue);
+	public void onDeath(Entity entity) {
+		if(this.scoreValue > 0 && entity != null) {
+			entity.addToPlayerScore(this, this.scoreValue);
 		}
 
 		this.dead = true;
-		int var2 = this.getDropItemId();
-		if(var2 > 0) {
-			int var3 = this.rand.nextInt(3);
+		int i2 = this.getDropItemId();
+		if(i2 > 0) {
+			int i3 = this.rand.nextInt(3);
 
-			for(int var4 = 0; var4 < var3; ++var4) {
-				this.dropItem(var2, 1);
+			for(int i4 = 0; i4 < i3; ++i4) {
+				this.dropItem(i2, 1);
 			}
 		}
 
@@ -394,61 +390,73 @@
 		return 0;
 	}
 
-	protected void fall(float var1) {
-		int var2 = (int)Math.ceil((double)(var1 - 3.0F));
-		if(var2 > 0) {
-			this.attackEntityFrom((Entity)null, var2);
-			int var3 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset), MathHelper.floor_double(this.posZ));
-			if(var3 > 0) {
-				StepSound var4 = Block.blocksList[var3].stepSound;
-				this.worldObj.playSoundAtEntity(this, var4.getStepSound(), var4.getVolume() * 0.5F, var4.getPitch() * (12.0F / 16.0F));
+	protected void fall(float distance) {
+		if(this.affectedByFallDamage) {
+			int i2 = (int)Math.ceil((double)(distance - 3.0F));
+			if(i2 > 0) {
+				this.attackEntityFrom((Entity)null, i2);
+				int i3 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset), MathHelper.floor_double(this.posZ));
+				if(i3 > 0) {
+					StepSound stepSound4 = Block.blocksList[i3].stepSound;
+					this.worldObj.playSoundAtEntity(this, stepSound4.getStepSound(), stepSound4.getVolume() * 0.5F, stepSound4.getPitch() * 0.75F);
+				}
 			}
 		}
 
 	}
 
-	public void moveEntityWithHeading(float var1, float var2) {
-		double var3;
+	public void moveEntityWithHeading(float moveX, float moveZ) {
+		this.moveEntityWithHeading(moveX, moveZ, 0.0F);
+	}
+
+	public void moveEntityWithHeading(float float1, float float2, float float3) {
+		double d4;
 		if(this.handleWaterMovement()) {
-			var3 = this.posY;
-			this.moveFlying(var1, var2, 0.02F);
+			d4 = this.posY;
+			this.moveFlying(float1, float2, 0.02F, this.isInsideOfMaterial(Material.water) ? (float)(float2 > 0.0F ? -1 : 1) * (float3 / 8.0F) : 0.0F);
 			this.moveEntity(this.motionX, this.motionY, this.motionZ);
-			this.motionX *= (double)0.8F;
-			this.motionY *= (double)0.8F;
-			this.motionZ *= (double)0.8F;
-			this.motionY -= 0.02D;
-			if(this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + (double)0.6F - this.posY + var3, this.motionZ)) {
-				this.motionY = (double)0.3F;
+			if(this.isInsideOfMaterial(Material.water)) {
+				this.motionX *= (double)0.95F;
+				this.motionY *= (double)0.8F;
+				this.motionZ *= (double)0.95F;
+			} else {
+				this.motionX *= (double)0.8F;
+				this.motionY *= (double)0.8F;
+				this.motionZ *= (double)0.8F;
+				this.motionY -= 0.02D;
+				if(this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + (double)0.6F - this.posY + d4, this.motionZ)) {
+					this.motionY = (double)0.3F;
+				}
 			}
 		} else if(this.handleLavaMovement()) {
-			var3 = this.posY;
-			this.moveFlying(var1, var2, 0.02F);
+			d4 = this.posY;
+			this.moveFlying(float1, float2, 0.02F);
 			this.moveEntity(this.motionX, this.motionY, this.motionZ);
 			this.motionX *= 0.5D;
 			this.motionY *= 0.5D;
 			this.motionZ *= 0.5D;
 			this.motionY -= 0.02D;
-			if(this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + (double)0.6F - this.posY + var3, this.motionZ)) {
+			if(this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + (double)0.6F - this.posY + d4, this.motionZ)) {
 				this.motionY = (double)0.3F;
 			}
 		} else {
-			float var8 = 0.91F;
+			float f6 = 0.91F;
 			if(this.onGround) {
-				var8 = 546.0F * 0.1F * 0.1F * 0.1F;
-				int var4 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
-				if(var4 > 0) {
-					var8 = Block.blocksList[var4].slipperiness * 0.91F;
+				f6 = 0.54600006F;
+				int i7 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
+				if(i7 > 0) {
+					f6 = Block.blocksList[i7].slipperiness * 0.91F;
 				}
 			}
 
-			float var9 = 0.16277136F / (var8 * var8 * var8);
-			this.moveFlying(var1, var2, this.onGround ? 0.1F * var9 : 0.02F);
-			var8 = 0.91F;
+			float f9 = 0.16277136F / (f6 * f6 * f6);
+			this.moveFlying(float1, float2, this.onGround ? 0.1F * f9 : 0.02F);
+			f6 = 0.91F;
 			if(this.onGround) {
-				var8 = 546.0F * 0.1F * 0.1F * 0.1F;
-				int var5 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
-				if(var5 > 0) {
-					var8 = Block.blocksList[var5].slipperiness * 0.91F;
+				f6 = 0.54600006F;
+				int i8 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
+				if(i8 > 0) {
+					f6 = Block.blocksList[i8].slipperiness * 0.91F;
 				}
 			}
 
@@ -466,45 +474,45 @@
 
 			this.motionY -= 0.08D;
 			this.motionY *= (double)0.98F;
-			this.motionX *= (double)var8;
-			this.motionZ *= (double)var8;
+			this.motionX *= (double)f6;
+			this.motionZ *= (double)f6;
 		}
 
 		this.prevLimbYaw = this.limbYaw;
-		var3 = this.posX - this.prevPosX;
-		double var10 = this.posZ - this.prevPosZ;
-		float var7 = MathHelper.sqrt_double(var3 * var3 + var10 * var10) * 4.0F;
-		if(var7 > 1.0F) {
-			var7 = 1.0F;
+		d4 = this.posX - this.prevPosX;
+		double d11 = this.posZ - this.prevPosZ;
+		float f10 = MathHelper.sqrt_double(d4 * d4 + d11 * d11) * 4.0F;
+		if(f10 > 1.0F) {
+			f10 = 1.0F;
 		}
 
-		this.limbYaw += (var7 - this.limbYaw) * 0.4F;
+		this.limbYaw += (f10 - this.limbYaw) * 0.4F;
 		this.limbSwing += this.limbYaw;
 	}
 
 	public boolean isOnLadder() {
-		int var1 = MathHelper.floor_double(this.posX);
-		int var2 = MathHelper.floor_double(this.boundingBox.minY);
-		int var3 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.getBlockId(var1, var2, var3) == Block.ladder.blockID || this.worldObj.getBlockId(var1, var2 + 1, var3) == Block.ladder.blockID;
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setShort("Health", (short)this.health);
-		var1.setShort("HurtTime", (short)this.hurtTime);
-		var1.setShort("DeathTime", (short)this.deathTime);
-		var1.setShort("AttackTime", (short)this.attackTime);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.health = var1.getShort("Health");
-		if(!var1.hasKey("Health")) {
+		int i1 = MathHelper.floor_double(this.posX);
+		int i2 = MathHelper.floor_double(this.boundingBox.minY);
+		int i3 = MathHelper.floor_double(this.posZ);
+		return this.worldObj.getBlockId(i1, i2, i3) == Block.ladder.blockID || this.worldObj.getBlockId(i1, i2 + 1, i3) == Block.ladder.blockID;
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setShort("Health", (short)this.health);
+		nbttagcompound.setShort("HurtTime", (short)this.hurtTime);
+		nbttagcompound.setShort("DeathTime", (short)this.deathTime);
+		nbttagcompound.setShort("AttackTime", (short)this.attackTime);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.health = nbttagcompound.getShort("Health");
+		if(!nbttagcompound.hasKey("Health")) {
 			this.health = 10;
 		}
 
-		this.hurtTime = var1.getShort("HurtTime");
-		this.deathTime = var1.getShort("DeathTime");
-		this.attackTime = var1.getShort("AttackTime");
+		this.hurtTime = nbttagcompound.getShort("HurtTime");
+		this.deathTime = nbttagcompound.getShort("DeathTime");
+		this.attackTime = nbttagcompound.getShort("AttackTime");
 	}
 
 	public boolean isEntityAlive() {
@@ -513,22 +521,22 @@
 
 	public void onLivingUpdate() {
 		if(this.newPosRotationIncrements > 0) {
-			double var1 = this.posX + (this.newPosX - this.posX) / (double)this.newPosRotationIncrements;
-			double var3 = this.posY + (this.newPosY - this.posY) / (double)this.newPosRotationIncrements;
-			double var5 = this.posZ + (this.newPosZ - this.posZ) / (double)this.newPosRotationIncrements;
-
-			double var7;
-			for(var7 = this.newRotationYaw - (double)this.rotationYaw; var7 < -180.0D; var7 += 360.0D) {
-			}
-
-			while(var7 >= 180.0D) {
-				var7 -= 360.0D;
-			}
-
-			this.rotationYaw = (float)((double)this.rotationYaw + var7 / (double)this.newPosRotationIncrements);
+			double d1 = this.posX + (this.newPosX - this.posX) / (double)this.newPosRotationIncrements;
+			double d3 = this.posY + (this.newPosY - this.posY) / (double)this.newPosRotationIncrements;
+			double d5 = this.posZ + (this.newPosZ - this.posZ) / (double)this.newPosRotationIncrements;
+
+			double d7;
+			for(d7 = this.newRotationYaw - (double)this.rotationYaw; d7 < -180.0D; d7 += 360.0D) {
+			}
+
+			while(d7 >= 180.0D) {
+				d7 -= 360.0D;
+			}
+
+			this.rotationYaw = (float)((double)this.rotationYaw + d7 / (double)this.newPosRotationIncrements);
 			this.rotationPitch = (float)((double)this.rotationPitch + (this.newRotationPitch - (double)this.rotationPitch) / (double)this.newPosRotationIncrements);
 			--this.newPosRotationIncrements;
-			this.setPosition(var1, var3, var5);
+			this.setPosition(d1, d3, d5);
 			this.setRotation(this.rotationYaw, this.rotationPitch);
 		}
 
@@ -541,12 +549,12 @@
 			this.updateEntityActionState();
 		}
 
-		boolean var9 = this.handleWaterMovement();
-		boolean var2 = this.handleLavaMovement();
+		boolean z9 = this.handleWaterMovement();
+		boolean z2 = this.handleLavaMovement();
 		if(this.isJumping) {
-			if(var9) {
+			if(z9) {
 				this.motionY += (double)0.04F;
-			} else if(var2) {
+			} else if(z2) {
 				this.motionY += (double)0.04F;
 			} else if(this.onGround) {
 				this.jump();
@@ -556,13 +564,13 @@
 		this.moveStrafing *= 0.98F;
 		this.moveForward *= 0.98F;
 		this.randomYawVelocity *= 0.9F;
-		this.moveEntityWithHeading(this.moveStrafing, this.moveForward);
-		List var10 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
-		if(var10 != null && var10.size() > 0) {
-			for(int var4 = 0; var4 < var10.size(); ++var4) {
-				Entity var11 = (Entity)var10.get(var4);
-				if(var11.canBePushed()) {
-					var11.applyEntityCollision(this);
+		this.moveEntityWithHeading(this.moveStrafing, this.moveForward, this.rotationPitch / 90.0F);
+		List list10 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
+		if(list10 != null && list10.size() > 0) {
+			for(int i4 = 0; i4 < list10.size(); ++i4) {
+				Entity entity11 = (Entity)list10.get(i4);
+				if(entity11.canBePushed()) {
+					entity11.applyEntityCollision(this);
 				}
 			}
 		}
@@ -575,18 +583,18 @@
 
 	protected void updateEntityActionState() {
 		++this.entityAge;
-		EntityPlayer var1 = this.worldObj.getClosestPlayerToEntity(this, -1.0D);
-		if(var1 != null) {
-			double var2 = var1.posX - this.posX;
-			double var4 = var1.posY - this.posY;
-			double var6 = var1.posZ - this.posZ;
-			double var8 = var2 * var2 + var4 * var4 + var6 * var6;
-			if(var8 > 16384.0D) {
+		EntityPlayer entityPlayer1 = this.worldObj.getClosestPlayerToEntity(this, -1.0D);
+		if(entityPlayer1 != null) {
+			double d2 = entityPlayer1.posX - this.posX;
+			double d4 = entityPlayer1.posY - this.posY;
+			double d6 = entityPlayer1.posZ - this.posZ;
+			double d8 = d2 * d2 + d4 * d4 + d6 * d6;
+			if(d8 > 16384.0D) {
 				this.setEntityDead();
 			}
 
 			if(this.entityAge > 600 && this.rand.nextInt(800) == 0) {
-				if(var8 < 1024.0D) {
+				if(d8 < 1024.0D) {
 					this.entityAge = 0;
 				} else {
 					this.setEntityDead();
@@ -596,11 +604,11 @@
 
 		this.moveStrafing = 0.0F;
 		this.moveForward = 0.0F;
-		float var10 = 8.0F;
+		float f10 = 8.0F;
 		if(this.rand.nextFloat() < 0.02F) {
-			var1 = this.worldObj.getClosestPlayerToEntity(this, (double)var10);
-			if(var1 != null) {
-				this.currentTarget = var1;
+			entityPlayer1 = this.worldObj.getClosestPlayerToEntity(this, (double)f10);
+			if(entityPlayer1 != null) {
+				this.currentTarget = entityPlayer1;
 				this.numTicksToChaseTarget = 10 + this.rand.nextInt(20);
 			} else {
 				this.randomYawVelocity = (this.rand.nextFloat() - 0.5F) * 20.0F;
@@ -609,7 +617,7 @@
 
 		if(this.currentTarget != null) {
 			this.faceEntity(this.currentTarget, 10.0F);
-			if(this.numTicksToChaseTarget-- <= 0 || this.currentTarget.isDead || this.currentTarget.getDistanceSqToEntity(this) > (double)(var10 * var10)) {
+			if(this.numTicksToChaseTarget-- <= 0 || this.currentTarget.isDead || this.currentTarget.getDistanceSqToEntity(this) > (double)(f10 * f10)) {
 				this.currentTarget = null;
 			}
 		} else {
@@ -621,50 +629,50 @@
 			this.rotationPitch = this.defaultPitch;
 		}
 
-		boolean var3 = this.handleWaterMovement();
-		boolean var11 = this.handleLavaMovement();
-		if(var3 || var11) {
+		boolean z3 = this.handleWaterMovement();
+		boolean z11 = this.handleLavaMovement();
+		if(z3 || z11) {
 			this.isJumping = this.rand.nextFloat() < 0.8F;
 		}
 
 	}
 
-	public void faceEntity(Entity var1, float var2) {
-		double var3 = var1.posX - this.posX;
-		double var7 = var1.posZ - this.posZ;
-		double var5;
-		if(var1 instanceof EntityLiving) {
-			EntityLiving var9 = (EntityLiving)var1;
-			var5 = var9.posY + (double)var9.getEyeHeight() - (this.posY + (double)this.getEyeHeight());
+	public void faceEntity(Entity entity, float float2) {
+		double d3 = entity.posX - this.posX;
+		double d5 = entity.posZ - this.posZ;
+		double d7;
+		if(entity instanceof EntityLiving) {
+			EntityLiving entityLiving9 = (EntityLiving)entity;
+			d7 = entityLiving9.posY + (double)entityLiving9.getEyeHeight() - (this.posY + (double)this.getEyeHeight());
 		} else {
-			var5 = (var1.boundingBox.minY + var1.boundingBox.maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
+			d7 = (entity.boundingBox.minY + entity.boundingBox.maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
 		}
 
-		double var13 = (double)MathHelper.sqrt_double(var3 * var3 + var7 * var7);
-		float var11 = (float)(Math.atan2(var7, var3) * 180.0D / (double)((float)Math.PI)) - 90.0F;
-		float var12 = (float)(Math.atan2(var5, var13) * 180.0D / (double)((float)Math.PI));
-		this.rotationPitch = this.updateRotation(this.rotationPitch, var12, var2);
-		this.rotationYaw = this.updateRotation(this.rotationYaw, var11, var2);
+		double d13 = (double)MathHelper.sqrt_double(d3 * d3 + d5 * d5);
+		float f11 = (float)(Math.atan2(d5, d3) * 180.0D / (double)(float)Math.PI) - 90.0F;
+		float f12 = (float)(Math.atan2(d7, d13) * 180.0D / (double)(float)Math.PI);
+		this.rotationPitch = this.updateRotation(this.rotationPitch, f12, float2);
+		this.rotationYaw = this.updateRotation(this.rotationYaw, f11, float2);
 	}
 
-	private float updateRotation(float var1, float var2, float var3) {
-		float var4;
-		for(var4 = var2 - var1; var4 < -180.0F; var4 += 360.0F) {
-		}
-
-		while(var4 >= 180.0F) {
-			var4 -= 360.0F;
-		}
-
-		if(var4 > var3) {
-			var4 = var3;
-		}
-
-		if(var4 < -var3) {
-			var4 = -var3;
-		}
-
-		return var1 + var4;
+	private float updateRotation(float float1, float float2, float float3) {
+		float f4;
+		for(f4 = float2 - float1; f4 < -180.0F; f4 += 360.0F) {
+		}
+
+		while(f4 >= 180.0F) {
+			f4 -= 360.0F;
+		}
+
+		if(f4 > float3) {
+			f4 = float3;
+		}
+
+		if(f4 < -float3) {
+			f4 = -float3;
+		}
+
+		return float1 + f4;
 	}
 
 	public void onEntityDeath() {
@@ -678,52 +686,52 @@
 		this.attackEntityFrom((Entity)null, 4);
 	}
 
-	public float getSwingProgress(float var1) {
-		float var2 = this.swingProgress - this.prevSwingProgress;
-		if(var2 < 0.0F) {
-			++var2;
+	public float getSwingProgress(float renderPartialTick) {
+		float f2 = this.swingProgress - this.prevSwingProgress;
+		if(f2 < 0.0F) {
+			++f2;
 		}
 
-		return this.prevSwingProgress + var2 * var1;
+		return this.prevSwingProgress + f2 * renderPartialTick;
 	}
 
-	public Vec3D getPosition(float var1) {
-		if(var1 == 1.0F) {
+	public Vec3D getPosition(float renderPartialTick) {
+		if(renderPartialTick == 1.0F) {
 			return Vec3D.createVector(this.posX, this.posY, this.posZ);
 		} else {
-			double var2 = this.prevPosX + (this.posX - this.prevPosX) * (double)var1;
-			double var4 = this.prevPosY + (this.posY - this.prevPosY) * (double)var1;
-			double var6 = this.prevPosZ + (this.posZ - this.prevPosZ) * (double)var1;
-			return Vec3D.createVector(var2, var4, var6);
+			double d2 = this.prevPosX + (this.posX - this.prevPosX) * (double)renderPartialTick;
+			double d4 = this.prevPosY + (this.posY - this.prevPosY) * (double)renderPartialTick;
+			double d6 = this.prevPosZ + (this.posZ - this.prevPosZ) * (double)renderPartialTick;
+			return Vec3D.createVector(d2, d4, d6);
 		}
 	}
 
-	public Vec3D getLook(float var1) {
-		float var2;
-		float var3;
-		float var4;
-		float var5;
-		if(var1 == 1.0F) {
-			var2 = MathHelper.cos(-this.rotationYaw * ((float)Math.PI / 180.0F) - (float)Math.PI);
-			var3 = MathHelper.sin(-this.rotationYaw * ((float)Math.PI / 180.0F) - (float)Math.PI);
-			var4 = -MathHelper.cos(-this.rotationPitch * ((float)Math.PI / 180.0F));
-			var5 = MathHelper.sin(-this.rotationPitch * ((float)Math.PI / 180.0F));
-			return Vec3D.createVector((double)(var3 * var4), (double)var5, (double)(var2 * var4));
+	public Vec3D getLook(float renderPartialTick) {
+		float f2;
+		float f3;
+		float f4;
+		float f5;
+		if(renderPartialTick == 1.0F) {
+			f2 = MathHelper.cos(-this.rotationYaw * 0.017453292F - (float)Math.PI);
+			f3 = MathHelper.sin(-this.rotationYaw * 0.017453292F - (float)Math.PI);
+			f4 = -MathHelper.cos(-this.rotationPitch * 0.017453292F);
+			f5 = MathHelper.sin(-this.rotationPitch * 0.017453292F);
+			return Vec3D.createVector((double)(f3 * f4), (double)f5, (double)(f2 * f4));
 		} else {
-			var2 = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * var1;
-			var3 = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * var1;
-			var4 = MathHelper.cos(-var3 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-			var5 = MathHelper.sin(-var3 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-			float var6 = -MathHelper.cos(-var2 * ((float)Math.PI / 180.0F));
-			float var7 = MathHelper.sin(-var2 * ((float)Math.PI / 180.0F));
-			return Vec3D.createVector((double)(var5 * var6), (double)var7, (double)(var4 * var6));
+			f2 = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * renderPartialTick;
+			f3 = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * renderPartialTick;
+			f4 = MathHelper.cos(-f3 * 0.017453292F - (float)Math.PI);
+			f5 = MathHelper.sin(-f3 * 0.017453292F - (float)Math.PI);
+			float f6 = -MathHelper.cos(-f2 * 0.017453292F);
+			float f7 = MathHelper.sin(-f2 * 0.017453292F);
+			return Vec3D.createVector((double)(f5 * f6), (double)f7, (double)(f4 * f6));
 		}
 	}
 
-	public MovingObjectPosition rayTrace(double var1, float var3) {
-		Vec3D var4 = this.getPosition(var3);
-		Vec3D var5 = this.getLook(var3);
-		Vec3D var6 = var4.addVector(var5.xCoord * var1, var5.yCoord * var1, var5.zCoord * var1);
-		return this.worldObj.rayTraceBlocks(var4, var6);
+	public MovingObjectPosition rayTrace(double double1, float renderPartialTick) {
+		Vec3D vec3D4 = this.getPosition(renderPartialTick);
+		Vec3D vec3D5 = this.getLook(renderPartialTick);
+		Vec3D vec3D6 = vec3D4.addVector(vec3D5.xCoord * double1, vec3D5.yCoord * double1, vec3D5.zCoord * double1);
+		return this.worldObj.rayTraceBlocks(vec3D4, vec3D6);
 	}
 }
--- /dev/null
+++ net/minecraft/src/VisualsIrrigant.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+class VisualsIrrigant extends Visuals {
+    final /* synthetic */ VisualsManager field_10079_1F2x6aKhREY5El8Ks5g74U0VCiBi47SJK6N3wEuWE9B7u5Z6C181t22ekbsM;
+    
+    VisualsIrrigant(final VisualsManager la) {
+        this.field_10079_1F2x6aKhREY5El8Ks5g74U0VCiBi47SJK6N3wEuWE9B7u5Z6C181t22ekbsM = la;
+    }
+    
+    @Override
+    public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+        return "/unl/189953d6-71e0-11ee-b962-0242ac120002.xAL";
+    }
+    
+    @Override
+    public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(final Object... arr) {
+        if (arr[0] instanceof EntityPlayerZombieModeClient && (int)arr[1] == ExtItems.GrayGun.shiftedIndex) {
+            this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+            return true;
+        }
+        return false;
+    }
+    
+    @Override
+    public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+        return "unlock--irrigant";
+    }
+    
+    @Override
+    public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+        return "Irrigant";
+    }
+    
+    @Override
+    public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+        return "Acquire the Gray Gun in ZOMBIES";
+    }
+}
--- /dev/null
+++ net/minecraft/src/CommandInvclear.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandInvclear extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8572_4148bjZ81823Crxl168Y7YksI5SYz20HMGwPUDm32ibK9EsFe0q594br66P2;
+    
+    CommandInvclear(final CommandManager abb) {
+        this.field_8572_4148bjZ81823Crxl168Y7YksI5SYz20HMGwPUDm32ibK9EsFe0q594br66P2 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.thePlayer.inventory.func_8655_2030zy05r8P1HRnaOEgnBoKr1OC1y9FA0RMNRU6eq535ylSExX5MmN7p6vst();
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/ImageHolder.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+import java.awt.image.BufferedImage;
+
+public class ImageHolder {
+	public BufferedImage image;
+	public boolean slimTypePlayer = false;
+	public int referenceCount = 1;
+	public int textureName = -1;
+	public boolean textureSetupComplete = false;
+
+	public void initialize() {
+		if(this.image.getHeight() != this.image.getWidth() / 2) {
+			this.image = this.image.getSubimage(0, 0, this.image.getWidth(), this.image.getWidth() / 2);
+		}
+
+		int i1 = (int)(54.0F * ((float)this.image.getWidth() / 64.0F));
+		int i2 = (int)(20.0F * ((float)this.image.getHeight() / 32.0F));
+		this.slimTypePlayer = (this.image.getRGB(i1, i2) & 0xFF000000) == 0;
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandSvAllowrnet.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+class CommandSvAllowrnet extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8556_9mjx2LGPowCiXoUou1ybCO6d4A0T601Rg2c9VP1R1H5gSjXmJ5rDO1bzy0qa;
+    
+    CommandSvAllowrnet(final CommandManager abb) {
+        this.field_8556_9mjx2LGPowCiXoUou1ybCO6d4A0T601Rg2c9VP1R1H5gSjXmJ5rDO1bzy0qa = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        if (InputHandler.mc.thePlayer.rand.nextBoolean()) {
+            ScreenDebugMenu.dbg_conf_spawnShadowPlayers = !ScreenDebugMenu.dbg_conf_spawnShadowPlayers;
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return ScreenDebugMenu.dbg_conf_spawnShadowPlayers ? "1" : "0";
+    }
+}
--- net/minecraft/src/PathEntity.java
+++ net/minecraft/src/PathEntity.java
@@ -5,9 +5,9 @@
 	public final int pathLength;
 	private int pathIndex;
 
-	public PathEntity(PathPoint[] var1) {
-		this.points = var1;
-		this.pathLength = var1.length;
+	public PathEntity(PathPoint[] points) {
+		this.points = points;
+		this.pathLength = points.length;
 	}
 
 	public void incrementPathIndex() {
@@ -18,10 +18,10 @@
 		return this.pathIndex >= this.points.length;
 	}
 
-	public Vec3D getPosition(Entity var1) {
-		double var2 = (double)this.points[this.pathIndex].xCoord + (double)((int)(var1.width + 1.0F)) * 0.5D;
-		double var4 = (double)this.points[this.pathIndex].yCoord;
-		double var6 = (double)this.points[this.pathIndex].zCoord + (double)((int)(var1.width + 1.0F)) * 0.5D;
-		return Vec3D.createVector(var2, var4, var6);
+	public Vec3D getPosition(Entity entity) {
+		double d2 = (double)this.points[this.pathIndex].xCoord + (double)((int)(entity.width + 1.0F)) * 0.5D;
+		double d4 = (double)this.points[this.pathIndex].yCoord;
+		double d6 = (double)this.points[this.pathIndex].zCoord + (double)((int)(entity.width + 1.0F)) * 0.5D;
+		return Vec3D.createVector(d2, d4, d6);
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandImpulse.java
@@ -1,0 +1,56 @@
+package net.minecraft.src;
+
+class CommandImpulse extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8547_2sb1GS8bLF1bjEN4agYOq9Gd2561tP638I0nv8l6zhXw38t314hGURyTOJ33;
+    
+    CommandImpulse(final CommandManager abb) {
+        this.field_8547_2sb1GS8bLF1bjEN4agYOq9Gd2561tP638I0nv8l6zhXw38t314hGURyTOJ33 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        if (!ScreenDebugMenu.dbg_conf_enableCheats) {
+            return;
+        }
+        switch ((int)arr[0]) {
+            case 102: {
+                for (int i = 0; i < 4; ++i) {
+                    final EntitySkeleton entity = new EntitySkeleton(InputHandler.mc.theWorld);
+                    entity.setPosition(InputHandler.mc.thePlayer.posX, InputHandler.mc.thePlayer.posY, InputHandler.mc.thePlayer.posZ);
+                    InputHandler.mc.theWorld.spawnEntityInWorld(entity);
+                }
+                break;
+            }
+            case 300: {
+                ExtEvents.Spawn(InputHandler.mc.thePlayer, InputHandler.mc.theWorld);
+                break;
+            }
+            case 320: {
+                ExtEvents.func_11856_0t7OQN0wYClKPyfCdKW9g3t0MW94ScRD4ffzAB4MaIwS6K3mB51a67GSmU0B(InputHandler.mc.thePlayer, InputHandler.mc.theWorld);
+                break;
+            }
+            case 400: {
+                final EntityCatbomb entity2 = new EntityCatbomb(InputHandler.mc.theWorld);
+                entity2.setPosition(InputHandler.mc.thePlayer.posX, InputHandler.mc.thePlayer.posY, InputHandler.mc.thePlayer.posZ);
+                InputHandler.mc.theWorld.spawnEntityInWorld(entity2);
+                break;
+            }
+            case 3900: {
+                InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10945_6iX357SpWthupUbWNfLRO87UU7xQ8Prgh5bU4EX2jBlYJ3DWToctpI0eQj4u.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+                InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10943_4P6yLgfnvnO6y89XpVE5PS5Hjo62bm3kdr4eGy8mOs9dKTZu5L8RqEHy2P44.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+                InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10948_0K9Wvp8r1YnOA5010xZpl66lyNUt78N6SfQ197bg85kafTuYvONKR77OoXDq.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+                InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10942_7xLO64tuZWfUPmt15N4O95hJ0176qp03d5mSW8trXS890yqputsco88a0dk3.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+                InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10946_7AR6ItAen3fx05Vncef3s63538b5wb97oi4kfrKpN1xXa92ennAR19lcPgfJ.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+                InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10947_9AnvDYT3tcTSS9Cz1srJAOWX62V5Gqyb2ubqdcRVgP303Y40U8Ke6dGNVv08.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+                InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10944_2EWN3F9cOeZLc1s1Wh3Y3X5G88vSKS70wXa1x0jY361oZ36mAnvM2vYHm7oe.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+                InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10949_90L26at7gGnz0J8Af23lCTpFsYX1JLxXD3R7KOPeOnNw65r9paK3i34TuD8w.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+                break;
+            }
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/BlockUnknownInterface.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+public interface BlockUnknownInterface {
+	void func_8286_2f84KM1xKjK9eBj4915qo36L405Hm9W3JZ41244r918IGv3BpYiut0G1VBGw(EntityPlayerZombieModeClient entityPlayerZombieModeClient1, XYZv xYZv2);
+
+	String func_8287_3t2cX22yD5J55Zh6G33szTT1PY525wnemKTHp3jQ2r2jhLod41nugOV5rhqI(EntityPlayerZombieModeClient entityPlayerZombieModeClient1, XYZv xYZv2);
+
+	int func_8288_98t8S89tFW42rGL9ALNhVV7sJ5qB3j8Z10bg69FoU68e30R380Rp4L4Dn5kC();
+}
--- net/minecraft/src/EnumArt.java
+++ net/minecraft/src/EnumArt.java
@@ -1,30 +1,139 @@
 package net.minecraft.src;
 
 public enum EnumArt {
-	Kebab("Kebab", 16, 16, 0, 0),
-	Aztec("Aztec", 16, 16, 16, 0),
-	Alban("Alban", 16, 16, 32, 0),
-	Aztec2("Aztec2", 16, 16, 48, 0),
-	Bomb("Bomb", 16, 16, 64, 0),
-	Plant("Plant", 16, 16, 80, 0),
-	Wasteland("Wasteland", 16, 16, 96, 0),
-	Pool("Pool", 32, 16, 0, 32),
-	Courbet("Courbet", 32, 16, 32, 32),
-	Sea("Sea", 32, 16, 64, 32),
-	Sunset("Sunset", 32, 16, 96, 32),
-	Creebet("Creebet", 32, 16, 128, 32),
-	Wanderer("Wanderer", 16, 32, 0, 64),
-	Graham("Graham", 16, 32, 16, 64),
-	Match("Match", 32, 32, 0, 128),
-	Bust("Bust", 32, 32, 32, 128),
-	Stage("Stage", 32, 32, 64, 128),
-	Void("Void", 32, 32, 96, 128),
-	SkullAndRoses("SkullAndRoses", 32, 32, 128, 128),
-	Fighters("Fighters", 64, 32, 0, 96),
-	Pointer("Pointer", 64, 64, 0, 192),
-	Pigscene("Pigscene", 64, 64, 64, 192),
-	Skeleton("Skeleton", 64, 48, 192, 64),
-	DonkeyKong("DonkeyKong", 64, 48, 192, 112);
+	Rock("Rock", 64, 32, 128, 256),
+	Phoenix("Phoenix", 16, 16, 0, 0),
+	Hue("Hue", 16, 16, 16, 0),
+	Nebula("Nebula", 16, 16, 32, 0),
+	HellAspect("HellAspect", 16, 16, 48, 0),
+	Duality("Duality", 16, 16, 64, 0),
+	Smother("Smother", 16, 16, 80, 0),
+	WastelandNight("WastelandNight", 16, 16, 96, 0),
+	Silentio("Silentio", 16, 16, 112, 0),
+	NightGarden("NightGarden", 64, 16, 0, 16),
+	Demo("Demo", 32, 16, 0, 32),
+	Reptile("Reptile", 32, 16, 32, 32),
+	Seek("Seek", 32, 16, 64, 32),
+	Town("Town", 32, 16, 96, 32),
+	AutumnSun("AutumnSun", 16, 16, 0, 48),
+	SunRiver("SunRiver", 32, 32, 16, 48),
+	Poet("Poet", 16, 32, 0, 64),
+	Gradient("Gradient", 48, 16, 16, 80),
+	Seas("Seas", 32, 32, 0, 128),
+	Bird("Bird", 32, 32, 0, 160),
+	Cave("Cave", 32, 32, 32, 128),
+	Cube("Cube", 32, 32, 64, 128),
+	Fog("Fog", 32, 32, 96, 128),
+	Quartet("Quartet", 32, 32, 128, 128),
+	Bull("Bull", 32, 32, 160, 128),
+	Shack("Shack", 64, 32, 0, 96),
+	DoorsToNexi("DoorsToNexi", 64, 64, 0, 192),
+	FloodedDuality("FloodedDuality", 64, 64, 64, 192),
+	Sorrow("Sorrow", 64, 48, 128, 208),
+	Yggdrasil("Yggdrasil", 48, 48, 64, 80),
+	Parallax("Parallax", 48, 48, 112, 80),
+	DigitalMan("DigitalMan", 32, 48, 160, 80),
+	LightBeam("LightBeam", 48, 48, 208, 64),
+	Shrine("Shrine", 48, 48, 208, 112),
+	Galaxy("Ear Wax", 48, 32, 208, 160),
+	DeepseaCoral("DeepseaCoral", 64, 32, 192, 192),
+	Landscape("Landscape", 64, 32, 192, 224),
+	Fragments("Fragments", 32, 64, 256, 128),
+	StoneTroll("Summit", 48, 64, 384, 0),
+	NightLight("NightLight", 16, 16, 64, 16),
+	Snow("Snow", 32, 16, 80, 16),
+	Salt("Empty (Small)", 16, 16, 112, 16),
+	Fate("Fate", 32, 32, 48, 48),
+	BigSalt("Empty", 32, 32, 80, 48),
+	Maze("Merriweather", 16, 16, 112, 48),
+	Darkness("Darkness", 16, 16, 112, 64),
+	CatOne("Cat", 32, 32, 32, 160),
+	Parrot("Parrot", 32, 32, 64, 160),
+	Hill("Hill", 32, 32, 96, 160),
+	HandGuy("Fungus", 64, 64, 0, 256),
+	Fucker("Vermin", 64, 64, 64, 256),
+	Bloodfest("Towers", 48, 48, 0, 320),
+	Mirror("Mirror", 32, 32, 48, 336),
+	Atmosphere("Atmosphere", 48, 48, 80, 320),
+	Plane("Windy Day", 16, 32, 0, 368),
+	Sky("Azores", 16, 32, 0, 400),
+	Apple("Apple", 16, 32, 0, 432),
+	Laptop("Laptop", 16, 32, 0, 464),
+	Plant("Plant", 16, 32, 16, 368),
+	Landscaping("Landscaping", 16, 32, 16, 400),
+	BlueShit("Pillars", 16, 32, 16, 432),
+	RedShit("Step Forward", 16, 32, 16, 464),
+	Ascension("Ascension", 16, 64, 32, 368),
+	Infiltration("Infiltration", 80, 64, 48, 368),
+	LostParadise("Lost Paradise", 96, 64, 32, 432),
+	Distant("Distant", 64, 64, 128, 0),
+	Smoke("Smoke", 32, 16, 128, 64),
+	Symbol("Symbol", 16, 16, 160, 64),
+	BlueGuts("Divine Drowned", 16, 16, 176, 64),
+	Handdrawn("Handdrawn Life", 48, 48, 128, 160),
+	Blue("Blue", 16, 48, 176, 160),
+	Andrei("Cloudman", 64, 32, 128, 256),
+	Distortion("Masque", 32, 48, 128, 288),
+	CatBroom("Katze", 32, 32, 160, 288),
+	Slain("Slain", 32, 32, 128, 336),
+	Galaxia("Cosmos", 48, 48, 160, 320),
+	Hidden("Hidden", 64, 64, 128, 368),
+	TiledSurface("Tiled Surface", 64, 64, 128, 432),
+	Sunrise("Sunrise", 80, 64, 192, 0),
+	Cosmos("Cosmos", 16, 64, 192, 64),
+	TreePlain("Satellite", 16, 64, 192, 128),
+	Shattered("Shattered", 64, 64, 192, 256),
+	Worrysome("Worrysome", 48, 16, 192, 368),
+	Integrity("Stickbug", 48, 48, 192, 384),
+	Globe("Global", 64, 64, 272, 0),
+	Sailor("Sailor", 64, 64, 32, 32),
+	Gorey("Jam", 32, 32, 256, 96),
+	SeaAnimal("Sea Animal", 32, 32, 256, 192),
+	Feline("Feline", 32, 32, 256, 224),
+	MonopolyBoard("Colours", 32, 32, 256, 256),
+	Moon("Moon", 32, 32, 256, 288),
+	Leader("Leader", 48, 64, 336, 0),
+	Fighter("Past", 48, 64, 288, 112),
+	Sideview("Sideview", 48, 48, 288, 176),
+	Hexagon("Okinawa", 64, 64, 288, 224),
+	NightSky("Night Sky", 64, 16, 336, 112),
+	TheTop("Superstructure", 64, 32, 352, 256),
+	DoorThingIdk("Lineframe", 32, 32, 336, 128),
+	Haeven("Heaven", 32, 32, 368, 128),
+	Jupiter("Jupiter", 64, 64, 336, 160),
+	Weed("Cyanobacteria Spiral", 64, 64, 400, 160),
+	Seaside("Seaside View", 48, 48, 384, 64),
+	Stairwell("Stairwell", 64, 48, 400, 112),
+	Event("Event", 64, 48, 432, 64),
+	Erupt("Erupt", 16, 16, 432, 0),
+	GradedSky("Graded Sky", 16, 32, 432, 32),
+	BlackHole("Celestial Center", 32, 32, 416, 224),
+	PinkShit("Magenta", 16, 48, 496, 64),
+	LowRiverSkull("Golden Skull", 48, 48, 464, 112),
+	MissingTex("Texture", 48, 64, 464, 160),
+	FlippedShape("Diamond", 64, 64, 448, 448),
+	Company("Company", 48, 48, 288, 64),
+	Game("Game", 48, 48, 336, 64),
+	GayPorn("Kitten", 16, 32, 256, 320),
+	BigFish("Oarfish", 192, 16, 0, 496),
+	Dreamland("Dreamed World", 48, 32, 192, 480),
+	UnseenLand("Unseen Land", 128, 128, 288, 352),
+	Fields("Snow Growth", 64, 64, 288, 288),
+	Emil("Emil", 16, 16, 496, 320),
+	Zombies("Untoten", 48, 48, 240, 464),
+	Cube2("Cube 2", 32, 32, 416, 480),
+	Cubes("Cubes", 32, 32, 416, 448),
+	Spirit("Space Spirit", 32, 32, 384, 480),
+	Pengo("Penguin", 32, 32, 352, 480),
+	Rogue("Rogue", 32, 32, 320, 480),
+	Encounter("Encounter", 32, 32, 288, 480),
+	FlippedShape2("Cyanine", 64, 64, 480, 448),
+	FlippedShape3("Emerald", 32, 32, 480, 480),
+	FlippedShape4("Amber", 32, 32, 448, 480),
+	CityLicht("Licht", 48, 32, 240, 368),
+	waterhall("Depth", 48, 32, 240, 400),
+	MirrorMirror("Mirror Mirror", 32, 32, 48, 336),
+	Mall("Mall", 96, 96, 416, 352);
 
 	public final String title;
 	public final int sizeX;
@@ -32,11 +141,29 @@
 	public final int offsetX;
 	public final int offsetY;
 
-	private EnumArt(String var3, int var4, int var5, int var6, int var7) {
-		this.title = var3;
-		this.sizeX = var4;
-		this.sizeY = var5;
-		this.offsetX = var6;
-		this.offsetY = var7;
-	}
+    private static final /* synthetic */ EnumArt[] field_11581_4z516q5I9h4uBOd5Pllg8z4y2OzP501u7Fh2s93LWM7vxgc5TLD7U99yMnua;
+
+	public static EnumArt[] func_11496_9D6dOuxURsoKgZJGzy4t6u99UDf0ap9v2NhRK3xa7zoR3mTWD0560ktX85Mr() {
+		return (EnumArt[])field_11581_4z516q5I9h4uBOd5Pllg8z4y2OzP501u7Fh2s93LWM7vxgc5TLD7U99yMnua.clone();
+	}
+
+	public static EnumArt func_11495_4EzTIa33UPAMDdQ4Mm8zuX2m7L88O43BYXPi5Jiyxb086cg0n6GEK5y4y1l0(String string) {
+		return (EnumArt)Enum.valueOf(EnumArt.class, string);
+	}
+
+	private EnumArt(String title, int sizeX, int sizeY, int offsetX, int offsetY) {
+		this.title = title;
+		this.sizeX = sizeX;
+		this.sizeY = sizeY;
+		this.offsetX = offsetX;
+		this.offsetY = offsetY;
+	}
+
+	private static EnumArt[] func_11497_0lKJM3d0zK99WfUzY2Z1yrT58EzBaCmhgS5YbRNA8P4Mv6ujoWOQJU445NQJ() {
+		return new EnumArt[]{Rock, Phoenix, Hue, Nebula, HellAspect, Duality, Smother, WastelandNight, Silentio, NightGarden, Demo, Reptile, Seek, Town, AutumnSun, SunRiver, Poet, Gradient, Seas, Bird, Cave, Cube, Fog, Quartet, Bull, Shack, DoorsToNexi, FloodedDuality, Sorrow, Yggdrasil, Parallax, DigitalMan, LightBeam, Shrine, Galaxy, DeepseaCoral, Landscape, Fragments, StoneTroll, NightLight, Snow, Salt, Fate, BigSalt, Maze, Darkness, CatOne, Parrot, Hill, HandGuy, Fucker, Bloodfest, Mirror, Atmosphere, Plane, Sky, Apple, Laptop, Plant, Landscaping, BlueShit, RedShit, Ascension, Infiltration, LostParadise, Distant, Smoke, Symbol, BlueGuts, Handdrawn, Blue, Andrei, Distortion, CatBroom, Slain, Galaxia, Hidden, TiledSurface, Sunrise, Cosmos, TreePlain, Shattered, Worrysome, Integrity, Globe, Sailor, Gorey, SeaAnimal, Feline, MonopolyBoard, Moon, Leader, Fighter, Sideview, Hexagon, NightSky, TheTop, DoorThingIdk, Haeven, Jupiter, Weed, Seaside, Stairwell, Event, Erupt, GradedSky, BlackHole, PinkShit, LowRiverSkull, MissingTex, FlippedShape, Company, Game, GayPorn, BigFish, Dreamland, UnseenLand, Fields, Emil, Zombies, Cube2, Cubes, Spirit, Pengo, Rogue, Encounter, FlippedShape2, FlippedShape3, FlippedShape4, CityLicht, waterhall, MirrorMirror, Mall};
+	}
+
+    static {
+        field_11581_4z516q5I9h4uBOd5Pllg8z4y2OzP501u7Fh2s93LWM7vxgc5TLD7U99yMnua = EnumArt.func_11497_0lKJM3d0zK99WfUzY2Z1yrT58EzBaCmhgS5YbRNA8P4Mv6ujoWOQJU445NQJ();
+    }
 }
--- net/minecraft/src/BlockDoor.java
+++ net/minecraft/src/BlockDoor.java
@@ -3,32 +3,32 @@
 import java.util.Random;
 
 public class BlockDoor extends Block {
-	protected BlockDoor(int var1, Material var2) {
-		super(var1, var2);
+	protected BlockDoor(int id, Material material) {
+		super(id, material);
 		this.blockIndexInTexture = 97;
-		if(var2 == Material.iron) {
+		if(material == Material.iron) {
 			++this.blockIndexInTexture;
 		}
 
-		float var3 = 0.5F;
-		float var4 = 1.0F;
-		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var4, 0.5F + var3);
+		float f3 = 0.5F;
+		float f4 = 1.0F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, f4, 0.5F + f3);
 	}
 
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		if(var1 != 0 && var1 != 1) {
-			int var3 = this.getState(var2);
-			if((var3 == 0 || var3 == 2) ^ var1 <= 3) {
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		if(side != 0 && side != 1) {
+			int i3 = this.getState(metadata);
+			if((i3 == 0 || i3 == 2) ^ side <= 3) {
 				return this.blockIndexInTexture;
 			} else {
-				int var4 = var3 / 2 + (var1 & 1 ^ var3);
-				var4 += (var2 & 4) / 4;
-				int var5 = this.blockIndexInTexture - (var2 & 8) * 2;
-				if((var4 & 1) != 0) {
-					var5 = -var5;
+				int i4 = i3 / 2 + (side & 1 ^ i3);
+				i4 += (metadata & 4) / 4;
+				int i5 = this.blockIndexInTexture - (metadata & 8) * 2;
+				if((i4 & 1) != 0) {
+					i5 = -i5;
 				}
 
-				return var5;
+				return i5;
 			}
 		} else {
 			return this.blockIndexInTexture;
@@ -47,67 +47,67 @@
 		return 7;
 	}
 
-	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.getSelectedBoundingBoxFromPool(var1, var2, var3, var4);
-	}
-
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
-	}
-
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		this.setDoorRotation(this.getState(var1.getBlockMetadata(var2, var3, var4)));
-	}
-
-	public void setDoorRotation(int var1) {
-		float var2 = 3.0F / 16.0F;
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		this.setBlockBoundsBasedOnState(worldObj, x, y, z);
+		return super.getSelectedBoundingBoxFromPool(worldObj, x, y, z);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		this.setBlockBoundsBasedOnState(world, x, y, z);
+		return super.getCollisionBoundingBoxFromPool(world, x, y, z);
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		this.setDoorRotation(this.getState(blockAccess.getBlockMetadata(x, y, z)));
+	}
+
+	public void setDoorRotation(int metadata) {
+		float f2 = 0.1875F;
 		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F, 1.0F);
-		if(var1 == 0) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var2);
-		}
-
-		if(var1 == 1) {
-			this.setBlockBounds(1.0F - var2, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-		}
-
-		if(var1 == 2) {
-			this.setBlockBounds(0.0F, 0.0F, 1.0F - var2, 1.0F, 1.0F, 1.0F);
-		}
-
-		if(var1 == 3) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, var2, 1.0F, 1.0F);
-		}
-
-	}
-
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.blockActivated(var1, var2, var3, var4, var5);
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		if(metadata == 0) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f2);
+		}
+
+		if(metadata == 1) {
+			this.setBlockBounds(1.0F - f2, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(metadata == 2) {
+			this.setBlockBounds(0.0F, 0.0F, 1.0F - f2, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(metadata == 3) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, f2, 1.0F, 1.0F);
+		}
+
+	}
+
+	public void onBlockClicked(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.blockActivated(world, x, y, z, entityPlayer);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
 		if(this.material == Material.iron) {
 			return true;
 		} else {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if((var6 & 8) != 0) {
-				if(var1.getBlockId(var2, var3 - 1, var4) == this.blockID) {
-					this.blockActivated(var1, var2, var3 - 1, var4, var5);
+			int i6 = world.getBlockMetadata(x, y, z);
+			if((i6 & 8) != 0) {
+				if(world.getBlockId(x, y - 1, z) == this.blockID) {
+					this.blockActivated(world, x, y - 1, z, entityPlayer);
 				}
 
 				return true;
 			} else {
-				if(var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
-					var1.setBlockMetadataWithNotify(var2, var3 + 1, var4, (var6 ^ 4) + 8);
+				if(world.getBlockId(x, y + 1, z) == this.blockID) {
+					world.setBlockMetadataWithNotify(x, y + 1, z, (i6 ^ 4) + 8);
 				}
 
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var6 ^ 4);
-				var1.markBlocksDirty(var2, var3 - 1, var4, var2, var3, var4);
+				world.setBlockMetadataWithNotify(x, y, z, i6 ^ 4);
+				world.markBlocksDirty(x, y - 1, z, x, y, z);
 				if(Math.random() < 0.5D) {
-					var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.door_open", 1.0F, var1.rand.nextFloat() * 0.1F + 0.9F);
+					world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.door_open", 1.0F, world.rand.nextFloat() * 0.1F + 0.9F);
 				} else {
-					var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.door_close", 1.0F, var1.rand.nextFloat() * 0.1F + 0.9F);
+					world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.door_close", 1.0F, world.rand.nextFloat() * 0.1F + 0.9F);
 				}
 
 				return true;
@@ -115,81 +115,80 @@
 		}
 	}
 
-	public void onPoweredBlockChange(World var1, int var2, int var3, int var4, boolean var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if((var6 & 8) != 0) {
-			if(var1.getBlockId(var2, var3 - 1, var4) == this.blockID) {
-				this.onPoweredBlockChange(var1, var2, var3 - 1, var4, var5);
+	public void onPoweredBlockChange(World world, int x, int y, int z, boolean flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if((i6 & 8) != 0) {
+			if(world.getBlockId(x, y - 1, z) == this.blockID) {
+				this.onPoweredBlockChange(world, x, y - 1, z, flag);
 			}
-
 		} else {
-			boolean var7 = (var1.getBlockMetadata(var2, var3, var4) & 4) > 0;
-			if(var7 != var5) {
-				if(var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
-					var1.setBlockMetadataWithNotify(var2, var3 + 1, var4, (var6 ^ 4) + 8);
+			boolean z7 = (world.getBlockMetadata(x, y, z) & 4) > 0;
+			if(z7 != flag) {
+				if(world.getBlockId(x, y + 1, z) == this.blockID) {
+					world.setBlockMetadataWithNotify(x, y + 1, z, (i6 ^ 4) + 8);
 				}
 
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var6 ^ 4);
-				var1.markBlocksDirty(var2, var3 - 1, var4, var2, var3, var4);
+				world.setBlockMetadataWithNotify(x, y, z, i6 ^ 4);
+				world.markBlocksDirty(x, y - 1, z, x, y, z);
 				if(Math.random() < 0.5D) {
-					var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.door_open", 1.0F, var1.rand.nextFloat() * 0.1F + 0.9F);
+					world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.door_open", 1.0F, world.rand.nextFloat() * 0.1F + 0.9F);
 				} else {
-					var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.door_close", 1.0F, var1.rand.nextFloat() * 0.1F + 0.9F);
+					world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.door_close", 1.0F, world.rand.nextFloat() * 0.1F + 0.9F);
 				}
-
 			}
 		}
+
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if((var6 & 8) != 0) {
-			if(var1.getBlockId(var2, var3 - 1, var4) != this.blockID) {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if((i6 & 8) != 0) {
+			if(world.getBlockId(x, y - 1, z) != this.blockID) {
+				world.setBlockWithNotify(x, y, z, 0);
 			}
 
-			if(var5 > 0 && Block.blocksList[var5].canProvidePower()) {
-				this.onNeighborBlockChange(var1, var2, var3 - 1, var4, var5);
+			if(flag > 0 && Block.blocksList[flag].canProvidePower()) {
+				this.onNeighborBlockChange(world, x, y - 1, z, flag);
 			}
 		} else {
-			boolean var7 = false;
-			if(var1.getBlockId(var2, var3 + 1, var4) != this.blockID) {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
-				var7 = true;
+			boolean z7 = false;
+			if(world.getBlockId(x, y + 1, z) != this.blockID) {
+				world.setBlockWithNotify(x, y, z, 0);
+				z7 = true;
 			}
 
-			if(!var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
-				var7 = true;
-				if(var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
-					var1.setBlockWithNotify(var2, var3 + 1, var4, 0);
+			if(!world.isBlockNormalCube(x, y - 1, z)) {
+				world.setBlockWithNotify(x, y, z, 0);
+				z7 = true;
+				if(world.getBlockId(x, y + 1, z) == this.blockID) {
+					world.setBlockWithNotify(x, y + 1, z, 0);
 				}
 			}
 
-			if(var7) {
-				this.dropBlockAsItem(var1, var2, var3, var4, var6);
-			} else if(var5 > 0 && Block.blocksList[var5].canProvidePower()) {
-				boolean var8 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4) || var1.isBlockIndirectlyGettingPowered(var2, var3 + 1, var4);
-				this.onPoweredBlockChange(var1, var2, var3, var4, var8);
+			if(z7) {
+				this.dropBlockAsItem(world, x, y, z, i6);
+			} else if(flag > 0 && Block.blocksList[flag].canProvidePower()) {
+				boolean z8 = world.isBlockIndirectlyGettingPowered(x, y, z) || world.isBlockIndirectlyGettingPowered(x, y + 1, z);
+				this.onPoweredBlockChange(world, x, y, z, z8);
 			}
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return (var1 & 8) != 0 ? 0 : (this.material == Material.iron ? Item.doorSteel.shiftedIndex : Item.doorWood.shiftedIndex);
-	}
-
-	public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3D var5, Vec3D var6) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.collisionRayTrace(var1, var2, var3, var4, var5, var6);
-	}
-
-	public int getState(int var1) {
-		return (var1 & 4) == 0 ? var1 - 1 & 3 : var1 & 3;
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var3 >= 127 ? false : var1.isBlockNormalCube(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : (this.material == Material.iron ? Item.doorSteel.shiftedIndex : Item.doorWood.shiftedIndex);
+	}
+
+	public MovingObjectPosition collisionRayTrace(World world, int x, int y, int z, Vec3D vector1, Vec3D vector2) {
+		this.setBlockBoundsBasedOnState(world, x, y, z);
+		return super.collisionRayTrace(world, x, y, z, vector1, vector2);
+	}
+
+	public int getState(int flag) {
+		return (flag & 4) == 0 ? flag - 1 & 3 : flag & 3;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return y >= 127 ? false : world.isBlockNormalCube(x, y - 1, z) && super.canPlaceBlockAt(world, x, y, z) && super.canPlaceBlockAt(world, x, y + 1, z);
 	}
 }
--- net/minecraft/src/RenderPig.java
+++ net/minecraft/src/RenderPig.java
@@ -1,17 +1,17 @@
 package net.minecraft.src;
 
 public class RenderPig extends RenderLiving {
-	public RenderPig(ModelBase var1, ModelBase var2, float var3) {
-		super(var1, var3);
-		this.setRenderPassModel(var2);
+	public RenderPig(ModelBase yi1, ModelBase yi2, float float3) {
+		super(yi1, float3);
+		this.setRenderPassModel(yi2);
 	}
 
-	protected boolean renderSaddledPig(EntityPig var1, int var2) {
+	protected boolean renderSaddledPig(EntityPig jr, int integer) {
 		this.loadTexture("/mob/saddle.png");
-		return var2 == 0 && var1.saddled;
+		return integer == 0 && jr.saddled;
 	}
 
-	protected boolean shouldRenderPass(EntityLiving var1, int var2) {
-		return this.renderSaddledPig((EntityPig)var1, var2);
+	protected boolean shouldRenderPass(EntityLiving zi, int integer) {
+		return this.renderSaddledPig((EntityPig)zi, integer);
 	}
 }
--- net/minecraft/src/ThreadDownloadImageData.java
+++ net/minecraft/src/ThreadDownloadImageData.java
@@ -1,14 +1,7 @@
 package net.minecraft.src;
 
-import java.awt.image.BufferedImage;
-
-public class ThreadDownloadImageData {
-	public BufferedImage image;
-	public int referenceCount = 1;
-	public int textureName = -1;
-	public boolean textureSetupComplete = false;
-
-	public ThreadDownloadImageData(String var1, ImageBuffer var2) {
-		(new ThreadDownloadImage(this, var1, var2)).start();
+public class ThreadDownloadImageData extends ImageHolder {
+	public ThreadDownloadImageData(String location, ImageBuffer imageBuffer) {
+		(new ThreadDownloadImage(this, location, imageBuffer)).start();
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockFireOld.java
@@ -1,0 +1,225 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockFireOld extends BlockOld {
+	private int[] chanceToEncourageFire = new int[256];
+	private int[] abilityToCatchFire = new int[256];
+
+	protected BlockFireOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.fire);
+		this.initializeBlock(BlockOld.planks.blockID, 5, 20);
+		this.initializeBlock(BlockOld.wood.blockID, 5, 5);
+		this.initializeBlock(BlockOld.leaves.blockID, 30, 60);
+		this.initializeBlock(BlockOld.bookshelf.blockID, 30, 20);
+		this.initializeBlock(BlockOld.tnt.blockID, 15, 100);
+		this.initializeBlock(BlockOld.cloth.blockID, 30, 60);
+		this.setTickOnLoad(true);
+	}
+
+	private void initializeBlock(int integer1, int integer2, int integer3) {
+		this.chanceToEncourageFire[integer1] = integer2;
+		this.abilityToCatchFire[integer1] = integer3;
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return null;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 3;
+	}
+
+	public int quantityDropped(Random random) {
+		return 0;
+	}
+
+	public int tickRate() {
+		return 10;
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		if(i6 < 15) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i6 + 1);
+			vg.scheduleBlockUpdate(integer2, integer3, integer4, this.blockID);
+		}
+
+		if(!this.canNeighborBurn(vg, integer2, integer3, integer4)) {
+			if(!vg.isBlockNormalCube(integer2, integer3 - 1, integer4) || i6 > 3) {
+				vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+			}
+
+		} else if(!this.canBlockCatchFire(vg, integer2, integer3 - 1, integer4) && i6 == 15 && random.nextInt(4) == 0) {
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+		} else {
+			if(i6 % 2 == 0 && i6 > 2) {
+				this.tryToCatchBlockOnFire(vg, integer2 + 1, integer3, integer4, 300, random);
+				this.tryToCatchBlockOnFire(vg, integer2 - 1, integer3, integer4, 300, random);
+				this.tryToCatchBlockOnFire(vg, integer2, integer3 - 1, integer4, 200, random);
+				this.tryToCatchBlockOnFire(vg, integer2, integer3 + 1, integer4, 250, random);
+				this.tryToCatchBlockOnFire(vg, integer2, integer3, integer4 - 1, 300, random);
+				this.tryToCatchBlockOnFire(vg, integer2, integer3, integer4 + 1, 300, random);
+
+				for(int i7 = integer2 - 1; i7 <= integer2 + 1; ++i7) {
+					for(int i8 = integer4 - 1; i8 <= integer4 + 1; ++i8) {
+						for(int i9 = integer3 - 1; i9 <= integer3 + 4; ++i9) {
+							if(i7 != integer2 || i9 != integer3 || i8 != integer4) {
+								int i10 = 100;
+								if(i9 > integer3 + 1) {
+									i10 += (i9 - (integer3 + 1)) * 100;
+								}
+
+								int i11 = this.getChanceOfNeighborsEncouragingFire(vg, i7, i9, i8);
+								if(i11 > 0 && random.nextInt(i10) <= i11) {
+									vg.setBlockWithNotify(i7, i9, i8, this.blockID);
+								}
+							}
+						}
+					}
+				}
+			}
+
+		}
+	}
+
+	private void tryToCatchBlockOnFire(World vg, int integer2, int integer3, int integer4, int integer5, Random random) {
+		int i7 = this.abilityToCatchFire[vg.getBlockId(integer2, integer3, integer4)];
+		if(random.nextInt(integer5) < i7) {
+			boolean z8 = vg.getBlockId(integer2, integer3, integer4) == BlockOld.tnt.blockID;
+			if(random.nextInt(2) == 0) {
+				vg.setBlockWithNotify(integer2, integer3, integer4, this.blockID);
+			} else {
+				vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+			}
+
+			if(z8) {
+				BlockOld.tnt.onBlockDestroyedByPlayer(vg, integer2, integer3, integer4, 0);
+			}
+		}
+
+	}
+
+	private boolean canNeighborBurn(World vg, int integer2, int integer3, int integer4) {
+		return this.canBlockCatchFire(vg, integer2 + 1, integer3, integer4) ? true : (this.canBlockCatchFire(vg, integer2 - 1, integer3, integer4) ? true : (this.canBlockCatchFire(vg, integer2, integer3 - 1, integer4) ? true : (this.canBlockCatchFire(vg, integer2, integer3 + 1, integer4) ? true : (this.canBlockCatchFire(vg, integer2, integer3, integer4 - 1) ? true : this.canBlockCatchFire(vg, integer2, integer3, integer4 + 1)))));
+	}
+
+	private int getChanceOfNeighborsEncouragingFire(World vg, int integer2, int integer3, int integer4) {
+		byte b5 = 0;
+		if(vg.getBlockId(integer2, integer3, integer4) != 0) {
+			return 0;
+		} else {
+			int i6 = this.getChanceToEncourageFire(vg, integer2 + 1, integer3, integer4, b5);
+			i6 = this.getChanceToEncourageFire(vg, integer2 - 1, integer3, integer4, i6);
+			i6 = this.getChanceToEncourageFire(vg, integer2, integer3 - 1, integer4, i6);
+			i6 = this.getChanceToEncourageFire(vg, integer2, integer3 + 1, integer4, i6);
+			i6 = this.getChanceToEncourageFire(vg, integer2, integer3, integer4 - 1, i6);
+			i6 = this.getChanceToEncourageFire(vg, integer2, integer3, integer4 + 1, i6);
+			return i6;
+		}
+	}
+
+	public boolean isCollidable() {
+		return false;
+	}
+
+	public boolean canBlockCatchFire(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		return this.chanceToEncourageFire[abt.getBlockId(integer2, integer3, integer4)] > 0;
+	}
+
+	public int getChanceToEncourageFire(World vg, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = this.chanceToEncourageFire[vg.getBlockId(integer2, integer3, integer4)];
+		return i6 > integer5 ? i6 : integer5;
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		return vg.isBlockNormalCube(integer2, integer3 - 1, integer4) || this.canNeighborBurn(vg, integer2, integer3, integer4);
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		if(!vg.isBlockNormalCube(integer2, integer3 - 1, integer4) && !this.canNeighborBurn(vg, integer2, integer3, integer4)) {
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+		}
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+		if(!vg.isBlockNormalCube(integer2, integer3 - 1, integer4) && !this.canNeighborBurn(vg, integer2, integer3, integer4)) {
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+		} else {
+			vg.scheduleBlockUpdate(integer2, integer3, integer4, this.blockID);
+		}
+	}
+
+	public void randomDisplayTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(random.nextInt(24) == 0) {
+			vg.playSoundEffect((double)((float)integer2 + 0.5F), (double)((float)integer3 + 0.5F), (double)((float)integer4 + 0.5F), "fire.fire", 1.0F + random.nextFloat(), random.nextFloat() * 0.7F + 0.3F);
+		}
+
+		int i6;
+		float f7;
+		float f8;
+		float f9;
+		if(!vg.isBlockNormalCube(integer2, integer3 - 1, integer4) && !BlockOld.fire.canBlockCatchFire(vg, integer2, integer3 - 1, integer4)) {
+			if(BlockOld.fire.canBlockCatchFire(vg, integer2 - 1, integer3, integer4)) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					f7 = (float)integer2 + random.nextFloat() * 0.1F;
+					f8 = (float)integer3 + random.nextFloat();
+					f9 = (float)integer4 + random.nextFloat();
+					vg.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(BlockOld.fire.canBlockCatchFire(vg, integer2 + 1, integer3, integer4)) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					f7 = (float)(integer2 + 1) - random.nextFloat() * 0.1F;
+					f8 = (float)integer3 + random.nextFloat();
+					f9 = (float)integer4 + random.nextFloat();
+					vg.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(BlockOld.fire.canBlockCatchFire(vg, integer2, integer3, integer4 - 1)) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					f7 = (float)integer2 + random.nextFloat();
+					f8 = (float)integer3 + random.nextFloat();
+					f9 = (float)integer4 + random.nextFloat() * 0.1F;
+					vg.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(BlockOld.fire.canBlockCatchFire(vg, integer2, integer3, integer4 + 1)) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					f7 = (float)integer2 + random.nextFloat();
+					f8 = (float)integer3 + random.nextFloat();
+					f9 = (float)(integer4 + 1) - random.nextFloat() * 0.1F;
+					vg.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(BlockOld.fire.canBlockCatchFire(vg, integer2, integer3 + 1, integer4)) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					f7 = (float)integer2 + random.nextFloat();
+					f8 = (float)(integer3 + 1) - random.nextFloat() * 0.1F;
+					f9 = (float)integer4 + random.nextFloat();
+					vg.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+		} else {
+			for(i6 = 0; i6 < 3; ++i6) {
+				f7 = (float)integer2 + random.nextFloat();
+				f8 = (float)integer3 + random.nextFloat() * 0.5F + 0.5F;
+				f9 = (float)integer4 + random.nextFloat();
+				vg.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+			}
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandMatFullbright.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandMatFullbright extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8567_6ULnph1TG62vdcEFU8pdKlVfR8XNyX9qh12LpPD28Mkm7NqkJ52wJhupXR5C;
+    
+    CommandMatFullbright(final CommandManager abb) {
+        this.field_8567_6ULnph1TG62vdcEFU8pdKlVfR8XNyX9qh12LpPD28Mkm7NqkJ52wJhupXR5C = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        ScreenDebugMenu.field_7960_2AJG81m1pl0O5bhn2XiQ37CD76Uoi3M5l8gTKvm6mx16vAu3Ik5oCR8W6P15 = ((int)arr[0] == 1);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "" + (int)(ScreenDebugMenu.field_7960_2AJG81m1pl0O5bhn2XiQ37CD76Uoi3M5l8gTKvm6mx16vAu3Ik5oCR8W6P15 ? 1 : 0);
+    }
+}
--- net/minecraft/src/BlockStone.java
+++ net/minecraft/src/BlockStone.java
@@ -3,11 +3,18 @@
 import java.util.Random;
 
 public class BlockStone extends Block {
-	public BlockStone(int var1, int var2) {
-		super(var1, var2, Material.rock);
-	}
-
-	public int idDropped(int var1, Random var2) {
-		return Block.cobblestone.blockID;
+	int dropID = -1;
+
+	public BlockStone(int integer1, int integer2, int integer3) {
+		super(integer1, integer2, Material.rock);
+		this.dropID = integer3;
+	}
+
+	public BlockStone(int id, int blockIndex) {
+		super(id, blockIndex, Material.rock);
+	}
+
+	public int idDropped(int count, Random random) {
+		return this.dropID == -1 ? Block.cobblestone.blockID : this.dropID;
 	}
 }
--- /dev/null
+++ net/minecraft/src/GuiEssenceTransformer.java
@@ -1,0 +1,89 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+public class GuiEssenceTransformer extends GuiContainer {
+	public EssenceTransformerInventoryCB craftingInventory = new EssenceTransformerInventoryCB();
+
+	public void initGui() {
+		this.controlList.clear();
+		this.controlList.add(new SliderConfirm(this, 0, this.width / 2 + 7, this.height / 2 - 25, 75, "Confirm >>", 0.0F));
+		((GuiButton)this.controlList.get(0)).enabled = true;
+	}
+
+	public GuiEssenceTransformer(InventoryPlayer bb) {
+		this.initGui();
+
+		int i2;
+		int i3;
+		for(i2 = 0; i2 < 3; ++i2) {
+			for(i3 = 0; i3 < 3; ++i3) {
+				this.inventorySlots.add(new SlotInventory(this, this.craftingInventory.craftMatrix, i3 + i2 * 3, 30 + i3 * 18, 17 + i2 * 18));
+			}
+		}
+
+		this.inventorySlots.add(new SlotInventory(this, this.craftingInventory.craftResult, 0, 138, 35));
+		this.inventorySlots.add(new SlotInventory(this, this.craftingInventory.craftResult, 1, 102, 35));
+
+		for(i2 = 0; i2 < 3; ++i2) {
+			for(i3 = 0; i3 < 9; ++i3) {
+				this.inventorySlots.add(new SlotInventory(this, bb, i3 + (i2 + 1) * 9, 8 + i3 * 18, 84 + i2 * 18));
+			}
+		}
+
+		for(i2 = 0; i2 < 9; ++i2) {
+			this.inventorySlots.add(new SlotInventory(this, bb, i2, 8 + i2 * 18, 142));
+		}
+
+	}
+
+	public void sliderReleasedOn1() {
+		if(this.craftingInventory.craftResult.stackResult[1] == null && this.craftingInventory.craftResult.stackResult[0] == null) {
+			int i1;
+			for(i1 = 0; i1 != 9; ++i1) {
+				this.craftingInventory.craftMatrix.stackList[i1] = null;
+			}
+
+			this.craftingInventory.craftResult.stackResult[0] = null;
+			this.craftingInventory.craftResult.stackResult[1] = null;
+			i1 = this.craftingInventory.currentEssenceVal;
+			int i2 = 0;
+			if(i1 > 64) {
+				i2 = i1 / 9;
+				i1 %= 9;
+			}
+
+			InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10944_2EWN3F9cOeZLc1s1Wh3Y3X5G88vSKS70wXa1x0jY361oZ36mAnvM2vYHm7oe.func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(new Object[]{this, this.craftingInventory.currentEssenceVal});
+			if(i2 != 0) {
+				this.craftingInventory.craftResult.stackResult[1] = new ItemStack(ExtBlocks.EssenceBlock, i2);
+			}
+
+			if(i1 != 0) {
+				this.craftingInventory.craftResult.stackResult[0] = new ItemStack(ExtItems.essence, i1);
+			}
+
+			this.craftingInventory.currentEssenceVal = 0;
+		}
+	}
+
+	public void onGuiClosed() {
+		super.onGuiClosed();
+		this.craftingInventory.onCraftGuiClosed(this.mc.thePlayer);
+	}
+
+	protected void drawGuiContainerForegroundLayer() {
+		this.fontRenderer.drawString("Essence Transformer", 30, 6, 0xFFFFFF);
+		this.fontRenderer.drawString("Essence Value:", 90, 16, 0xFFFFFF);
+		this.fontRenderer.drawString(this.craftingInventory.currentEssenceVal + "e", 90, 26, 0xFFFFFF);
+		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, 0xFFFFFF);
+	}
+
+	protected void drawGuiContainerBackgroundLayer(float renderPartialTick) {
+		int i2 = this.mc.renderEngine.getTexture("/gui/essencetransformer.png");
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		this.mc.renderEngine.bindTexture(i2);
+		int i3 = (this.width - this.xSize) / 2;
+		int i4 = (this.height - this.ySize) / 2;
+		this.drawTexturedModalRect(i3, i4, 0, 0, this.xSize, this.ySize);
+	}
+}
--- net/minecraft/src/RenderItem.java
+++ net/minecraft/src/RenderItem.java
@@ -1,6 +1,9 @@
 package net.minecraft.src;
 
 import java.util.Random;
+
+import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
@@ -10,90 +13,90 @@
 
 	public RenderItem() {
 		this.shadowSize = 0.15F;
-		this.shadowOpaque = 12.0F / 16.0F;
+		this.shadowOpaque = 0.75F;
 	}
 
-	public void doRenderItem(EntityItem var1, double var2, double var4, double var6, float var8, float var9) {
+	public void doRenderItem(EntityItem ph, double double2, double double3, double double4, float float5, float float6) {
 		this.random.setSeed(187L);
-		ItemStack var10 = var1.item;
+		ItemStack itemStack10 = ph.item;
 		GL11.glPushMatrix();
-		float var11 = MathHelper.sin(((float)var1.age + var9) / 10.0F + var1.hoverStart) * 0.1F + 0.1F;
-		float var12 = (((float)var1.age + var9) / 20.0F + var1.hoverStart) * (180.0F / (float)Math.PI);
-		byte var13 = 1;
-		if(var1.item.stackSize > 1) {
-			var13 = 2;
-		}
-
-		if(var1.item.stackSize > 5) {
-			var13 = 3;
-		}
-
-		if(var1.item.stackSize > 20) {
-			var13 = 4;
-		}
-
-		GL11.glTranslatef((float)var2, (float)var4 + var11, (float)var6);
+		float f11 = MathHelper.sin(((float)ph.age + float6) / 10.0F + ph.hoverStart) * 0.1F + 0.1F;
+		float f12 = (((float)ph.age + float6) / 20.0F + ph.hoverStart) * 57.295776F;
+		byte b13 = 1;
+		if(ph.item.stackSize > 1) {
+			b13 = 2;
+		}
+
+		if(ph.item.stackSize > 5) {
+			b13 = 3;
+		}
+
+		if(ph.item.stackSize > 20) {
+			b13 = 4;
+		}
+
+		GL11.glTranslatef((float)double2, (float)double3 + f11, (float)double4);
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-		float var16;
-		float var17;
-		float var18;
-		if(var10.itemID < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var10.itemID].getRenderType())) {
-			GL11.glRotatef(var12, 0.0F, 1.0F, 0.0F);
-			this.loadTexture("/terrain.png");
-			float var27 = 0.25F;
-			if(!Block.blocksList[var10.itemID].renderAsNormalBlock() && var10.itemID != Block.stairSingle.blockID) {
-				var27 = 0.5F;
+		float f14;
+		float f15;
+		float f16;
+		if(itemStack10.itemID < 32767 && RenderBlocks.renderItemIn3d(Block.blocksList[itemStack10.itemID].getRenderType())) {
+			GL11.glRotatef(f12, 0.0F, 1.0F, 0.0F);
+			this.loadTexture(Minecraft.field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L);
+			float f27 = 0.25F;
+			if(!Block.blocksList[itemStack10.itemID].renderAsNormalBlock() && itemStack10.itemID != Block.stairSingle.blockID) {
+				f27 = 0.5F;
 			}
 
-			GL11.glScalef(var27, var27, var27);
+			GL11.glScalef(f27, f27, f27);
 
-			for(int var28 = 0; var28 < var13; ++var28) {
+			for(int i28 = 0; i28 < b13; ++i28) {
 				GL11.glPushMatrix();
-				if(var28 > 0) {
-					var16 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / var27;
-					var17 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / var27;
-					var18 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / var27;
-					GL11.glTranslatef(var16, var17, var18);
+				if(i28 > 0) {
+					f14 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / f27;
+					f15 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / f27;
+					f16 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / f27;
+					GL11.glTranslatef(f14, f15, f16);
 				}
 
-				this.itemRenderBlocks.renderBlockOnInventory(Block.blocksList[var10.itemID]);
+				this.itemRenderBlocks.renderBlockOnInventory(Block.blocksList[itemStack10.itemID]);
 				GL11.glPopMatrix();
 			}
 		} else {
 			GL11.glScalef(0.5F, 0.5F, 0.5F);
-			int var14 = var10.getIconIndex();
-			if(var10.itemID < 256) {
-				this.loadTexture("/terrain.png");
+			int i17 = itemStack10.getIconIndex();
+			if(itemStack10.itemID < 32767) {
+				this.loadTexture(Minecraft.field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L);
 			} else {
 				this.loadTexture("/gui/items.png");
 			}
 
-			Tessellator var15 = Tessellator.instance;
-			var16 = (float)(var14 % 16 * 16 + 0) / 256.0F;
-			var17 = (float)(var14 % 16 * 16 + 16) / 256.0F;
-			var18 = (float)(var14 / 16 * 16 + 0) / 256.0F;
-			float var19 = (float)(var14 / 16 * 16 + 16) / 256.0F;
-			float var20 = 1.0F;
-			float var21 = 0.5F;
-			float var22 = 0.25F;
+			Tessellator tessellator18 = Tessellator.instance;
+			f14 = (float)(i17 % 16 * 16 + 0) / 256.0F;
+			f15 = (float)(i17 % 16 * 16 + 16) / 256.0F;
+			f16 = (float)(i17 / 16 * 16 + 0) / (itemStack10.itemID < 32767 ? 512.0F : 256.0F);
+			float f19 = (float)(i17 / 16 * 16 + 16) / (itemStack10.itemID < 32767 ? 512.0F : 256.0F);
+			float f20 = 1.0F;
+			float f21 = 0.5F;
+			float f22 = 0.25F;
 
-			for(int var23 = 0; var23 < var13; ++var23) {
+			for(int i23 = 0; i23 < b13; ++i23) {
 				GL11.glPushMatrix();
-				if(var23 > 0) {
-					float var24 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
-					float var25 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
-					float var26 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
-					GL11.glTranslatef(var24, var25, var26);
+				if(i23 > 0) {
+					float f24 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
+					float f25 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
+					float f26 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.3F;
+					GL11.glTranslatef(f24, f25, f26);
 				}
 
 				GL11.glRotatef(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-				var15.startDrawingQuads();
-				var15.setNormal(0.0F, 1.0F, 0.0F);
-				var15.addVertexWithUV((double)(0.0F - var21), (double)(0.0F - var22), 0.0D, (double)var16, (double)var19);
-				var15.addVertexWithUV((double)(var20 - var21), (double)(0.0F - var22), 0.0D, (double)var17, (double)var19);
-				var15.addVertexWithUV((double)(var20 - var21), (double)(1.0F - var22), 0.0D, (double)var17, (double)var18);
-				var15.addVertexWithUV((double)(0.0F - var21), (double)(1.0F - var22), 0.0D, (double)var16, (double)var18);
-				var15.draw();
+				tessellator18.startDrawingQuads();
+				tessellator18.setNormal(0.0F, 1.0F, 0.0F);
+				tessellator18.addVertexWithUV((double)(0.0F - f21), (double)(0.0F - f22), 0.0D, (double)f14, (double)f19);
+				tessellator18.addVertexWithUV((double)(f20 - f21), (double)(0.0F - f22), 0.0D, (double)f15, (double)f19);
+				tessellator18.addVertexWithUV((double)(f20 - f21), (double)(1.0F - f22), 0.0D, (double)f15, (double)f16);
+				tessellator18.addVertexWithUV((double)(0.0F - f21), (double)(1.0F - f22), 0.0D, (double)f14, (double)f16);
+				tessellator18.draw();
 				GL11.glPopMatrix();
 			}
 		}
@@ -102,94 +105,95 @@
 		GL11.glPopMatrix();
 	}
 
-	public void renderItemIntoGUI(FontRenderer var1, RenderEngine var2, ItemStack var3, int var4, int var5) {
-		if(var3 != null) {
-			if(var3.itemID < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var3.itemID].getRenderType())) {
-				int var6 = var3.itemID;
-				var2.bindTexture(var2.getTexture("/terrain.png"));
-				Block var7 = Block.blocksList[var6];
+	public void renderItemIntoGUI(FontRenderer aaf, RenderEngine aee, ItemStack iy, int integer4, int integer5) {
+		if(iy != null) {
+			if(iy.itemID < 32767 && RenderBlocks.renderItemIn3d(Block.blocksList[iy.itemID].getRenderType())) {
+				int i6 = iy.itemID;
+				aee.bindTexture(aee.getTexture(Minecraft.field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L));
+				Block block7 = Block.blocksList[i6];
 				GL11.glPushMatrix();
-				GL11.glTranslatef((float)(var4 - 2), (float)(var5 + 3), 0.0F);
+				GL11.glTranslatef((float)(integer4 - 2), (float)(integer5 + 3), 0.0F);
 				GL11.glScalef(10.0F, 10.0F, 10.0F);
 				GL11.glTranslatef(1.0F, 0.5F, 8.0F);
 				GL11.glRotatef(210.0F, 1.0F, 0.0F, 0.0F);
 				GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
 				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 				GL11.glScalef(1.0F, 1.0F, 1.0F);
-				this.itemRenderBlocks.renderBlockOnInventory(var7);
+				this.itemRenderBlocks.renderBlockOnInventory(block7);
 				GL11.glPopMatrix();
-			} else if(var3.getIconIndex() >= 0) {
+			} else if(iy.getIconIndex() >= 0) {
 				GL11.glDisable(GL11.GL_LIGHTING);
-				if(var3.itemID < 256) {
-					var2.bindTexture(var2.getTexture("/terrain.png"));
+				if(iy.itemID < 32767) {
+					aee.bindTexture(aee.getTexture(Minecraft.field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L));
 				} else {
-					var2.bindTexture(var2.getTexture("/gui/items.png"));
+					aee.bindTexture(aee.getTexture("/gui/items.png"));
 				}
 
-				this.renderIcon(var4, var5, var3.getIconIndex() % 16 * 16, var3.getIconIndex() / 16 * 16, 16, 16);
+				this.renderIcon(integer4, integer5, iy.getIconIndex() % 16 * 16, iy.getIconIndex() / 16 * 16, 16, 16, iy.itemID < 32767);
 				GL11.glEnable(GL11.GL_LIGHTING);
 			}
 
 			GL11.glEnable(GL11.GL_CULL_FACE);
 		}
+
 	}
 
-	public void renderItemOverlayIntoGUI(FontRenderer var1, RenderEngine var2, ItemStack var3, int var4, int var5) {
-		if(var3 != null) {
-			if(var3.stackSize > 1) {
-				String var6 = "" + var3.stackSize;
+	public void renderItemOverlayIntoGUI(FontRenderer aaf, RenderEngine aee, ItemStack iy, int integer4, int integer5) {
+		if(iy != null) {
+			if(iy.stackSize > 1) {
+				String string6 = "" + iy.stackSize;
 				GL11.glDisable(GL11.GL_LIGHTING);
 				GL11.glDisable(GL11.GL_DEPTH_TEST);
-				var1.drawStringWithShadow(var6, var4 + 19 - 2 - var1.getStringWidth(var6), var5 + 6 + 3, 16777215);
+				aaf.drawStringWithShadow(string6, integer4 + 19 - 2 - aaf.getStringWidth(string6), integer5 + 6 + 3, 0xFFFFFF);
 				GL11.glEnable(GL11.GL_LIGHTING);
 				GL11.glEnable(GL11.GL_DEPTH_TEST);
 			}
 
-			if(var3.itemDmg > 0) {
-				int var11 = 13 - var3.itemDmg * 13 / var3.getMaxDamage();
-				int var7 = 255 - var3.itemDmg * 255 / var3.getMaxDamage();
+			if(iy.itemDmg > 0) {
+				int i11 = 13 - iy.itemDmg * 13 / iy.getMaxDamage();
+				int i7 = 255 - iy.itemDmg * 255 / iy.getMaxDamage();
 				GL11.glDisable(GL11.GL_LIGHTING);
 				GL11.glDisable(GL11.GL_DEPTH_TEST);
 				GL11.glDisable(GL11.GL_TEXTURE_2D);
-				Tessellator var8 = Tessellator.instance;
-				int var9 = 255 - var7 << 16 | var7 << 8;
-				int var10 = (255 - var7) / 4 << 16 | 16128;
-				this.renderQuad(var8, var4 + 2, var5 + 13, 13, 2, 0);
-				this.renderQuad(var8, var4 + 2, var5 + 13, 12, 1, var10);
-				this.renderQuad(var8, var4 + 2, var5 + 13, var11, 1, var9);
+				Tessellator tessellator8 = Tessellator.instance;
+				int i9 = 255 - i7 << 16 | i7 << 8;
+				int i10 = (255 - i7) / 4 << 16 | 16128;
+				this.renderQuad(tessellator8, integer4 + 2, integer5 + 13, 13, 2, 0);
+				this.renderQuad(tessellator8, integer4 + 2, integer5 + 13, 12, 1, i10);
+				this.renderQuad(tessellator8, integer4 + 2, integer5 + 13, i11, 1, i9);
 				GL11.glEnable(GL11.GL_TEXTURE_2D);
 				GL11.glEnable(GL11.GL_LIGHTING);
 				GL11.glEnable(GL11.GL_DEPTH_TEST);
 				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 			}
-
 		}
-	}
-
-	private void renderQuad(Tessellator var1, int var2, int var3, int var4, int var5, int var6) {
-		var1.startDrawingQuads();
-		var1.setColorOpaque_I(var6);
-		var1.addVertex((double)(var2 + 0), (double)(var3 + 0), 0.0D);
-		var1.addVertex((double)(var2 + 0), (double)(var3 + var5), 0.0D);
-		var1.addVertex((double)(var2 + var4), (double)(var3 + var5), 0.0D);
-		var1.addVertex((double)(var2 + var4), (double)(var3 + 0), 0.0D);
-		var1.draw();
-	}
-
-	public void renderIcon(int var1, int var2, int var3, int var4, int var5, int var6) {
-		float var7 = 0.0F;
-		float var8 = 0.00390625F;
-		float var9 = 0.00390625F;
-		Tessellator var10 = Tessellator.instance;
-		var10.startDrawingQuads();
-		var10.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), (double)var7, (double)((float)(var3 + 0) * var8), (double)((float)(var4 + var6) * var9));
-		var10.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), (double)var7, (double)((float)(var3 + var5) * var8), (double)((float)(var4 + var6) * var9));
-		var10.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), (double)var7, (double)((float)(var3 + var5) * var8), (double)((float)(var4 + 0) * var9));
-		var10.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), (double)var7, (double)((float)(var3 + 0) * var8), (double)((float)(var4 + 0) * var9));
-		var10.draw();
-	}
-
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.doRenderItem((EntityItem)var1, var2, var4, var6, var8, var9);
+
+	}
+
+	private void renderQuad(Tessellator em, int integer2, int integer3, int integer4, int integer5, int integer6) {
+		em.startDrawingQuads();
+		em.setColorOpaque_I(integer6);
+		em.addVertex((double)(integer2 + 0), (double)(integer3 + 0), 0.0D);
+		em.addVertex((double)(integer2 + 0), (double)(integer3 + integer5), 0.0D);
+		em.addVertex((double)(integer2 + integer4), (double)(integer3 + integer5), 0.0D);
+		em.addVertex((double)(integer2 + integer4), (double)(integer3 + 0), 0.0D);
+		em.draw();
+	}
+
+	public void renderIcon(int integer1, int integer2, int integer3, int integer4, int integer5, int integer6, boolean boolean7) {
+		float f8 = 0.0F;
+		float f9 = 0.00390625F;
+		float f10 = 1.0F / (boolean7 ? 512.0F : 256.0F);
+		Tessellator tessellator11 = Tessellator.instance;
+		tessellator11.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+		tessellator11.addVertexWithUV((double)(integer1 + 0), (double)(integer2 + integer6), (double)f8, (double)((float)(integer3 + 0) * f9), (double)((float)(integer4 + integer6) * f10));
+		tessellator11.addVertexWithUV((double)(integer1 + integer5), (double)(integer2 + integer6), (double)f8, (double)((float)(integer3 + integer5) * f9), (double)((float)(integer4 + integer6) * f10));
+		tessellator11.addVertexWithUV((double)(integer1 + integer5), (double)(integer2 + 0), (double)f8, (double)((float)(integer3 + integer5) * f9), (double)((float)(integer4 + 0) * f10));
+		tessellator11.addVertexWithUV((double)(integer1 + 0), (double)(integer2 + 0), (double)f8, (double)((float)(integer3 + 0) * f9), (double)((float)(integer4 + 0) * f10));
+		tessellator11.draw();
+	}
+
+	public void doRender(Entity xy, double double2, double double3, double double4, float float5, float float6) {
+		this.doRenderItem((EntityItem)xy, double2, double3, double4, float5, float6);
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockFlameWoodDoor.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockFlameWoodDoor extends BlockDoor {
+	public BlockFlameWoodDoor(int integer1, int integer2) {
+		super(integer1, Material.wood);
+		this.blockIndexInTexture = integer2;
+	}
+
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : ExtItems.fireWoodDoor.shiftedIndex;
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandGpu.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+class CommandGpu extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8598_4sH4LS5487j4XHmJuu216WPDD6jn8958PFO6A6QYS8tGP5U2S4ACwuUQTd61;
+    
+    CommandGpu(final CommandManager abb) {
+        this.field_8598_4sH4LS5487j4XHmJuu216WPDD6jn8958PFO6A6QYS8tGP5U2S4ACwuUQTd61 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.field_7289_3R5t255Q5D6KY19uD068Mkk1B6OU9sWGPdWh8cCMUgE3jA5I39fu26h80483 = (String)arr[0];
+        InputHandler.mc.func_7251_0aCQ3QUtAn82t0f1z3JQKRAg5aNB155g64AWf0ztqf7j603OA1tsJsAwlFrq();
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return InputHandler.mc.func_7236_2E4BZaw4wUzRdqs6H26gijBXYV2x4keaA5V5idykFk39ETvee94J18B7nBcD();
+    }
+    
+    @Override
+    public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+        return false;
+    }
+}
--- /dev/null
+++ net/minecraft/src/SchemaExterior.java
@@ -1,0 +1,10 @@
+package net.minecraft.src;
+
+public class SchemaExterior {
+	public SchemaExterior(HubWorld wv, int integer2, int integer3, int integer4) {
+	}
+
+	public void func_11005_0ot5LkL5021P1EytulSh4X8Hvu84R17PTHuefhewY5LSIN1s8L39i9O57E49() {
+		throw new UnsupportedOperationException("SchemaExterior is not implemented yet");
+	}
+}
--- net/minecraft/src/NextTickListEntry.java
+++ net/minecraft/src/NextTickListEntry.java
@@ -9,19 +9,19 @@
 	public long scheduledTime;
 	private long tickEntryID = nextTickEntryID++;
 
-	public NextTickListEntry(int var1, int var2, int var3, int var4) {
-		this.xCoord = var1;
-		this.yCoord = var2;
-		this.zCoord = var3;
-		this.blockID = var4;
+	public NextTickListEntry(int xCoord, int yCoord, int zCoord, int blockID) {
+		this.xCoord = xCoord;
+		this.yCoord = yCoord;
+		this.zCoord = zCoord;
+		this.blockID = blockID;
 	}
 
-	public boolean equals(Object var1) {
-		if(!(var1 instanceof NextTickListEntry)) {
+	public boolean equals(Object object) {
+		if(!(object instanceof NextTickListEntry)) {
 			return false;
 		} else {
-			NextTickListEntry var2 = (NextTickListEntry)var1;
-			return this.xCoord == var2.xCoord && this.yCoord == var2.yCoord && this.zCoord == var2.zCoord && this.blockID == var2.blockID;
+			NextTickListEntry nextTickListEntry2 = (NextTickListEntry)object;
+			return this.xCoord == nextTickListEntry2.xCoord && this.yCoord == nextTickListEntry2.yCoord && this.zCoord == nextTickListEntry2.zCoord && this.blockID == nextTickListEntry2.blockID;
 		}
 	}
 
@@ -29,16 +29,16 @@
 		return (this.xCoord * 128 * 1024 + this.zCoord * 128 + this.yCoord) * 256 + this.blockID;
 	}
 
-	public NextTickListEntry setScheduledTime(long var1) {
-		this.scheduledTime = var1;
+	public NextTickListEntry setScheduledTime(long scheduledTime) {
+		this.scheduledTime = scheduledTime;
 		return this;
 	}
 
-	public int comparer(NextTickListEntry var1) {
-		return this.scheduledTime < var1.scheduledTime ? -1 : (this.scheduledTime > var1.scheduledTime ? 1 : (this.tickEntryID < var1.tickEntryID ? -1 : (this.tickEntryID > var1.tickEntryID ? 1 : 0)));
+	public int comparer(NextTickListEntry bt) {
+		return this.scheduledTime < bt.scheduledTime ? -1 : (this.scheduledTime > bt.scheduledTime ? 1 : (this.tickEntryID < bt.tickEntryID ? -1 : (this.tickEntryID > bt.tickEntryID ? 1 : 0)));
 	}
 
-	public int compareTo(Object var1) {
-		return this.comparer((NextTickListEntry)var1);
+	public int compareTo(Object nextTickListEntry) {
+		return this.comparer((NextTickListEntry)nextTickListEntry);
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockOreBlockOld.java
@@ -1,0 +1,12 @@
+package net.minecraft.src;
+
+public class BlockOreBlockOld extends BlockOld {
+	public BlockOreBlockOld(int integer1, int integer2) {
+		super(integer1, Material.iron);
+		this.blockIndexInTexture = integer2;
+	}
+
+	public int getBlockTextureFromSide(int integer) {
+		return integer == 1 ? this.blockIndexInTexture - 16 : (integer == 0 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockLeavesBaseOld.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public class BlockLeavesBaseOld extends BlockOld {
+	protected boolean graphicsLevel;
+
+	protected BlockLeavesBaseOld(int integer1, int integer2, Material sx, boolean boolean4) {
+		super(integer1, integer2, sx);
+		this.graphicsLevel = boolean4;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = abt.getBlockId(integer2, integer3, integer4);
+		return !this.graphicsLevel && i6 == this.blockID ? false : super.shouldSideBeRendered(abt, integer2, integer3, integer4, integer5);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockJukeBoxOld.java
@@ -1,0 +1,44 @@
+package net.minecraft.src;
+
+public class BlockJukeBoxOld extends BlockOld {
+	protected BlockJukeBoxOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.wood);
+	}
+
+	public int getBlockTextureFromSide(int integer) {
+		return this.blockIndexInTexture + (integer == 1 ? 1 : 0);
+	}
+
+	public boolean blockActivated(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		if(i6 > 0) {
+			this.ejectRecord(vg, integer2, integer3, integer4, i6);
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public void ejectRecord(World vg, int integer2, int integer3, int integer4, int integer5) {
+		vg.playRecord((String)null, integer2, integer3, integer4);
+		vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 0);
+		int i6 = Item.record13.shiftedIndex + integer5 - 1;
+		float f7 = 0.7F;
+		double d8 = (double)(vg.rand.nextFloat() * f7) + (double)(1.0F - f7) * 0.5D;
+		double d10 = (double)(vg.rand.nextFloat() * f7) + (double)(1.0F - f7) * 0.2D + 0.6D;
+		double d12 = (double)(vg.rand.nextFloat() * f7) + (double)(1.0F - f7) * 0.5D;
+		EntityItem entityItem14 = new EntityItem(vg, (double)integer2 + d8, (double)integer3 + d10, (double)integer4 + d12, new ItemStack(i6));
+		entityItem14.delayBeforeCanPickup = 10;
+		vg.spawnEntityInWorld(entityItem14);
+	}
+
+	public void dropBlockAsItemWithChance(World vg, int integer2, int integer3, int integer4, int integer5, float float6) {
+		if(!vg.multiplayerWorld) {
+			if(integer5 > 0) {
+				this.ejectRecord(vg, integer2, integer3, integer4, integer5);
+			}
+
+			super.dropBlockAsItemWithChance(vg, integer2, integer3, integer4, integer5, float6);
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandMcSandlevel.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandMcSandlevel extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8546_6Ql3TPH628AFmnPG9Udui1bIfKC0ee1Z75H1P5K4tVVUS3lRvb1SaMAipK4f;
+    
+    CommandMcSandlevel(final CommandManager abb) {
+        this.field_8546_6Ql3TPH628AFmnPG9Udui1bIfKC0ee1Z75H1P5K4tVVUS3lRvb1SaMAipK4f = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.theWorld.sandCovered = ((int)arr[0] == 1);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return InputHandler.mc.theWorld.sandCovered ? "1" : "0";
+    }
+}
--- net/minecraft/src/NBTTagEnd.java
+++ net/minecraft/src/NBTTagEnd.java
@@ -5,10 +5,10 @@
 import java.io.IOException;
 
 public class NBTTagEnd extends NBTBase {
-	void readTagContents(DataInput var1) throws IOException {
+	void readTagContents(DataInput dataInput) throws IOException {
 	}
 
-	void writeTagContents(DataOutput var1) throws IOException {
+	void writeTagContents(DataOutput dataOutput) throws IOException {
 	}
 
 	public byte getType() {
--- /dev/null
+++ net/minecraft/src/GuiOptionsUnknownClass.java
@@ -1,0 +1,11 @@
+package net.minecraft.src;
+
+public class GuiOptionsUnknownClass {
+	public String field_11925_9Ru5RKiPGrWu85AybUGX8oMPo03B0m3zkt61t6dKCVEnr8y0yY74Kh1R2IVb;
+	public int[] field_11926_9f6mt94hA9p2UClP6Cr5Zgnmo0Z76O6tynyCk27MR31oKNk3vK7Snk8Fkgl8;
+
+	public GuiOptionsUnknownClass(String string, int[] arr) {
+		this.field_11925_9Ru5RKiPGrWu85AybUGX8oMPo03B0m3zkt61t6dKCVEnr8y0yY74Kh1R2IVb = string;
+		this.field_11926_9f6mt94hA9p2UClP6Cr5Zgnmo0Z76O6tynyCk27MR31oKNk3vK7Snk8Fkgl8 = arr;
+	}
+}
--- net/minecraft/src/ImageBuffer.java
+++ net/minecraft/src/ImageBuffer.java
@@ -3,5 +3,5 @@
 import java.awt.image.BufferedImage;
 
 public interface ImageBuffer {
-	BufferedImage parseUserSkin(BufferedImage var1);
+	BufferedImage parseUserSkin(BufferedImage bufferedImage1);
 }
--- /dev/null
+++ net/minecraft/src/CommandMcPosthint.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandMcPosthint extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8601_600qyGvz87d0hQ9L3rd07bkN614Z1ljmu1NinT42g16lfXUW6Ml7nI8NHirz;
+    
+    CommandMcPosthint(final CommandManager abb) {
+        this.field_8601_600qyGvz87d0hQ9L3rd07bkN614Z1ljmu1NinT42g16lfXUW6Ml7nI8NHirz = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw((String)arr[1], (int)arr[0]);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- net/minecraft/src/RenderSorter.java
+++ net/minecraft/src/RenderSorter.java
@@ -5,17 +5,21 @@
 public class RenderSorter implements Comparator {
 	private EntityPlayer baseEntity;
 
-	public RenderSorter(EntityPlayer var1) {
-		this.baseEntity = var1;
-	}
-
-	public int doCompare(WorldRenderer var1, WorldRenderer var2) {
-		boolean var3 = var1.isInFrustum;
-		boolean var4 = var2.isInFrustum;
-		return var3 && !var4 ? 1 : (var4 && !var3 ? -1 : (var1.distanceToEntitySquared(this.baseEntity) < var2.distanceToEntitySquared(this.baseEntity) ? 1 : -1));
-	}
-
-	public int compare(Object var1, Object var2) {
-		return this.doCompare((WorldRenderer)var1, (WorldRenderer)var2);
+	public RenderSorter(EntityPlayer gb) {
+		this.baseEntity = gb;
+	}
+
+	public int doCompare(WorldRenderer cx1, WorldRenderer cx2) {
+		boolean z3 = cx1.isInFrustum;
+		boolean z4 = cx2.isInFrustum;
+		return z3 && !z4 ? 1 : (z4 && !z3 ? -1 : (cx1.distanceToEntitySquared(this.baseEntity) < cx2.distanceToEntitySquared(this.baseEntity) ? 1 : -1));
+	}
+
+	public int compare(WorldRenderer cx1, WorldRenderer cx2) {
+		return this.doCompare(cx1, cx2);
+	}
+
+	public int compare(Object object1, Object object2) {
+		return this.doCompare((WorldRenderer)object1, (WorldRenderer)object2);
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenHouseSmallUnknownClass.java
@@ -1,0 +1,98 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Random;
+
+public class WorldGenHouseSmallUnknownClass {
+	public static final int field_10595_4w74pvYXa7sHUyUKm9RwA7R6dYS5l137T0iovPx6qXkyp4A654X9oYDIIiEs = 30;
+	private final WorldGenHouseSmallUnknownClass2 field_10596_14Wpy36M5dtsKprEKf2Y4vtHO5KoBlcFwIcPD7Q7b2Z320Z530icn8P8OKm8;
+	private final List field_10594_8j1Q760kpqsxwN9XC05XRk5NhDyNDLOEU5eR3ka6jY604e164oMNtSBfU03n;
+
+	public static int func_10591_06Gg7YSs1BbiPOukbWMG1FpX9uQjn5167srQmT4e4Tz1P27uh1V14O20Xg65(int integer) {
+		return integer >= 0 ? integer * 16 : integer * 16 + 15;
+	}
+
+	public static boolean func_10592_030X7YBFIyq838PzbbohW0DU604Ufm6fU5P2pk1l46RcvZNy7l32uebe2559(int integer1, int integer2, int integer3, int integer4) {
+		int i4 = func_10591_06Gg7YSs1BbiPOukbWMG1FpX9uQjn5167srQmT4e4Tz1P27uh1V14O20Xg65(integer1);
+		int i5 = func_10591_06Gg7YSs1BbiPOukbWMG1FpX9uQjn5167srQmT4e4Tz1P27uh1V14O20Xg65(integer2);
+		return integer3 <= i4 && integer4 <= i5 && integer3 > i4 - 16 && integer4 > i5 - 16;
+	}
+
+	public WorldGenHouseSmallUnknownClass(Random random, WorldGenHouseSmallUnknownClass2 ns) {
+		long j3 = System.currentTimeMillis();
+		this.field_10594_8j1Q760kpqsxwN9XC05XRk5NhDyNDLOEU5eR3ka6jY604e164oMNtSBfU03n = new ArrayList();
+		this.field_10596_14Wpy36M5dtsKprEKf2Y4vtHO5KoBlcFwIcPD7Q7b2Z320Z530icn8P8OKm8 = ns;
+		int[] i5 = new int[900];
+		Arrays.fill(i5, 0);
+		int i6 = 0;
+
+		boolean z7;
+		do {
+			z7 = false;
+
+			for(int i8 = 0; i8 < i5.length; ++i8) {
+				if(i5[i8] == 0) {
+					int i9 = i8 % 30;
+					int i10 = i8 / 30;
+					WorldGenHouseSmallUnknownClass2 worldGenHouseSmallUnknownClass211 = (new WorldGenHouseSmallUnknownClass2(func_10591_06Gg7YSs1BbiPOukbWMG1FpX9uQjn5167srQmT4e4Tz1P27uh1V14O20Xg65(ns.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM), func_10591_06Gg7YSs1BbiPOukbWMG1FpX9uQjn5167srQmT4e4Tz1P27uh1V14O20Xg65(ns.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174))).func_11107_43cW0BG7D6e15UgFxhYIhnbmvR9R0GKm0lZwapr276d869pJ379mWCc345jT((i9 - 15) * 14, (i10 - 15) * 14);
+					WorldGenHouseSmallUnknownClass4 worldGenHouseSmallUnknownClass412 = WorldGenHouseSmallUnknownClass4.func_11467_510xxO0w79ZkBWq2cMUy7UUel9V7981Kqlz3lT2pU4RuFo2N2qx8G3dE8izE(random, worldGenHouseSmallUnknownClass211);
+					WorldGenHouseSmallUnknownClass2 worldGenHouseSmallUnknownClass213 = worldGenHouseSmallUnknownClass412.func_11469_1XD49rMZ7tPLtP0CWc3LgGLFv6JSjO4Q2B8uBaPHCRWAe6cbTx3935ua6FcY();
+					boolean z14 = true;
+
+					int i15;
+					int i16;
+					label65:
+					for(i15 = 0; i15 < worldGenHouseSmallUnknownClass213.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM; ++i15) {
+						for(i16 = 0; i16 < worldGenHouseSmallUnknownClass213.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174; ++i16) {
+							if(i9 + i15 >= 30 || i10 + i16 >= 30 || i5[i9 + i15 + (i10 + i16) * 30] != 0) {
+								z14 = false;
+								break label65;
+							}
+						}
+					}
+
+					if(!z14) {
+						z7 = true;
+					} else {
+						++i6;
+						this.field_10594_8j1Q760kpqsxwN9XC05XRk5NhDyNDLOEU5eR3ka6jY604e164oMNtSBfU03n.add(worldGenHouseSmallUnknownClass412);
+
+						for(i15 = 0; i15 < worldGenHouseSmallUnknownClass213.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM; ++i15) {
+							for(i16 = 0; i16 < worldGenHouseSmallUnknownClass213.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174; ++i16) {
+								i5[i9 + i15 + (i10 + i16) * 30] = i6;
+							}
+						}
+					}
+				}
+			}
+		} while(z7);
+
+	}
+
+	public void func_10593_9T6PaAkH5j21yXgxCz0Ky7LkSL657x54i6JmNXG0p2PDYoP5H2HS678A5k0f(World vg, int integer2, int integer3) {
+		ArrayList arrayList4 = new ArrayList();
+		Iterator iterator5 = this.field_10594_8j1Q760kpqsxwN9XC05XRk5NhDyNDLOEU5eR3ka6jY604e164oMNtSBfU03n.iterator();
+
+		WorldGenHouseSmallUnknownClass4 worldGenHouseSmallUnknownClass46;
+		while(iterator5.hasNext()) {
+			worldGenHouseSmallUnknownClass46 = (WorldGenHouseSmallUnknownClass4)iterator5.next();
+			WorldGenHouseSmallUnknownClass2 worldGenHouseSmallUnknownClass27 = worldGenHouseSmallUnknownClass46.func_11466_770WwnPt75L6J8UguFyXX1ITRtqTVRYMUSrCy1V0cX98wO01Qc5EpwKsvcM9();
+			int i8 = worldGenHouseSmallUnknownClass27.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM - func_10591_06Gg7YSs1BbiPOukbWMG1FpX9uQjn5167srQmT4e4Tz1P27uh1V14O20Xg65(integer2);
+			int i9 = worldGenHouseSmallUnknownClass27.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 - func_10591_06Gg7YSs1BbiPOukbWMG1FpX9uQjn5167srQmT4e4Tz1P27uh1V14O20Xg65(integer3);
+			if(i8 <= 0 && i9 <= 0 && i8 >= -29 && i9 >= -29 && worldGenHouseSmallUnknownClass46.func_11468_5FEqwXoAtY7AI1e7tv5jsIS2I33Pxp03S2iKy3TijST5d36Zh4iU6YGR536H(vg, integer2, integer3)) {
+				arrayList4.add(worldGenHouseSmallUnknownClass46);
+			}
+		}
+
+		iterator5 = arrayList4.iterator();
+
+		while(iterator5.hasNext()) {
+			worldGenHouseSmallUnknownClass46 = (WorldGenHouseSmallUnknownClass4)iterator5.next();
+			this.field_10594_8j1Q760kpqsxwN9XC05XRk5NhDyNDLOEU5eR3ka6jY604e164oMNtSBfU03n.remove(worldGenHouseSmallUnknownClass46);
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/RenderHub.java
@@ -1,0 +1,89 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.opengl.GL11;
+
+public class RenderHub extends RenderGlobal {
+	public void RenderHub(Minecraft minecraft, RenderEngine aee) {
+		super.RenderHub(minecraft, aee);
+	}
+
+	public void renderSky(float renderPartialTick) {
+		if(!(InputHandler.mc.theWorld instanceof HubWorld)) {
+			super.renderSky(renderPartialTick);
+		} else {
+			int i2 = this.renderEngine.getTexture("/terrain/hub_parallax3.png");
+			Tessellator tessellator3 = Tessellator.instance;
+			float f4 = 100.0F;
+			GL11.glRotatef(0.0F, 0.0F, 0.0F, 1.0F);
+			GL11.glRotatef(0.0F, 0.0F, 1.0F, 0.0F);
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, i2);
+			tessellator3.startDrawingQuads();
+			tessellator3.addVertexWithUV((double)(-f4), 100.0D, (double)(-f4), 0.0D, 0.0D);
+			tessellator3.addVertexWithUV((double)f4, 100.0D, (double)(-f4), 1.0D, 0.0D);
+			tessellator3.addVertexWithUV((double)f4, 100.0D, (double)f4, 1.0D, 1.0D);
+			tessellator3.addVertexWithUV((double)(-f4), 100.0D, (double)f4, 0.0D, 1.0D);
+			tessellator3.draw();
+			GL11.glRotatef(90.0F, 0.0F, 0.0F, 1.0F);
+			tessellator3.startDrawingQuads();
+			tessellator3.addVertexWithUV((double)(-f4), 100.0D, (double)(-f4), 0.0D, 0.0D);
+			tessellator3.addVertexWithUV((double)f4, 100.0D, (double)(-f4), 1.0D, 0.0D);
+			tessellator3.addVertexWithUV((double)f4, 100.0D, (double)f4, 1.0D, 1.0D);
+			tessellator3.addVertexWithUV((double)(-f4), 100.0D, (double)f4, 0.0D, 1.0D);
+			tessellator3.draw();
+			GL11.glRotatef(90.0F, 0.0F, 0.0F, 1.0F);
+			tessellator3.startDrawingQuads();
+			tessellator3.addVertexWithUV((double)(-f4), 100.0D, (double)(-f4), 0.0D, 0.0D);
+			tessellator3.addVertexWithUV((double)f4, 100.0D, (double)(-f4), 1.0D, 0.0D);
+			tessellator3.addVertexWithUV((double)f4, 100.0D, (double)f4, 1.0D, 1.0D);
+			tessellator3.addVertexWithUV((double)(-f4), 100.0D, (double)f4, 0.0D, 1.0D);
+			tessellator3.draw();
+			GL11.glRotatef(90.0F, 0.0F, 0.0F, 1.0F);
+			tessellator3.startDrawingQuads();
+			tessellator3.addVertexWithUV((double)(-f4), 100.0D, (double)(-f4), 0.0D, 0.0D);
+			tessellator3.addVertexWithUV((double)f4, 100.0D, (double)(-f4), 1.0D, 0.0D);
+			tessellator3.addVertexWithUV((double)f4, 100.0D, (double)f4, 1.0D, 1.0D);
+			tessellator3.addVertexWithUV((double)(-f4), 100.0D, (double)f4, 0.0D, 1.0D);
+			tessellator3.draw();
+			GL11.glRotatef(90.0F, 0.0F, 0.0F, 1.0F);
+			GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
+			tessellator3.startDrawingQuads();
+			tessellator3.addVertexWithUV((double)(-f4), 100.0D, (double)(-f4), 0.0D, 0.0D);
+			tessellator3.addVertexWithUV((double)f4, 100.0D, (double)(-f4), 1.0D, 0.0D);
+			tessellator3.addVertexWithUV((double)f4, 100.0D, (double)f4, 1.0D, 1.0D);
+			tessellator3.addVertexWithUV((double)(-f4), 100.0D, (double)f4, 0.0D, 1.0D);
+			tessellator3.draw();
+			GL11.glRotatef(180.0F, 1.0F, 0.0F, 0.0F);
+			tessellator3.startDrawingQuads();
+			tessellator3.addVertexWithUV((double)(-f4), 100.0D, (double)(-f4), 0.0D, 0.0D);
+			tessellator3.addVertexWithUV((double)f4, 100.0D, (double)(-f4), 1.0D, 0.0D);
+			tessellator3.addVertexWithUV((double)f4, 100.0D, (double)f4, 1.0D, 1.0D);
+			tessellator3.addVertexWithUV((double)(-f4), 100.0D, (double)f4, 0.0D, 1.0D);
+			tessellator3.draw();
+			GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
+		}
+
+	}
+
+	public void renderClouds(float float1) {
+		if(!(InputHandler.mc.theWorld instanceof HubWorld)) {
+			super.renderClouds(float1);
+		}
+
+	}
+
+	public void renderCloudsFancy(float float1) {
+		if(!(InputHandler.mc.theWorld instanceof HubWorld)) {
+			super.renderCloudsFancy(float1);
+		}
+
+	}
+
+	public void updateClouds() {
+		if(!(InputHandler.mc.theWorld instanceof HubWorld)) {
+			super.updateClouds();
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockIceDoor.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockIceDoor extends BlockDoor {
+	public BlockIceDoor(int integer1, int integer2) {
+		super(integer1, Material.wood);
+		this.blockIndexInTexture = integer2;
+	}
+
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : ExtItems.IceDoor.shiftedIndex;
+	}
+}
--- /dev/null
+++ net/minecraft/src/SQUID_GAMES.java
@@ -1,0 +1,28 @@
+package net.minecraft.src;
+
+public class SQUID_GAMES extends EntityModel {
+	public static final ModelLayerLocation LAYER_LOCATION = new ModelLayerLocation(new ResourceLocation("modid", "kill_squid"), "main");
+	private final ModelPart bb_main;
+
+	public SQUID_GAMES(ModelPart xs) {
+		this.bb_main = xs.getChild("bb_main");
+	}
+
+	public static LayerDefinition createBodyLayer() {
+		MeshDefinition meshDefinition0 = new MeshDefinition();
+		PartDefinition partDefinition1 = meshDefinition0.getRoot();
+		partDefinition1.addOrReplaceChild("bb_main", CubeListBuilder.create().texOffs(0, 0).addBox(-6.0F, -37.0F, -6.0F, 12.0F, 18.0F, 12.0F, new CubeDeformation(0.0F)).texOffs(12, 30).addBox(-9.0F, -37.0F, -2.0F, 3.0F, 11.0F, 3.0F, new CubeDeformation(0.0F)).texOffs(0, 30).addBox(6.0F, -37.0F, -2.0F, 3.0F, 11.0F, 3.0F, new CubeDeformation(0.0F)).texOffs(24, 30).addBox(-3.0F, -19.0F, -5.0F, 2.0F, 15.0F, 2.0F, new CubeDeformation(0.0F)).texOffs(32, 30).mirror().addBox(3.0F, -19.0F, -2.0F, 2.0F, 14.0F, 2.0F, new CubeDeformation(0.0F)).mirror(false).texOffs(24, 30).mirror().addBox(1.0F, -19.0F, -5.0F, 2.0F, 15.0F, 2.0F, new CubeDeformation(0.0F)).mirror(false).texOffs(32, 30).addBox(-5.0F, -19.0F, -2.0F, 2.0F, 14.0F, 2.0F, new CubeDeformation(0.0F)).texOffs(32, 30).mirror().addBox(3.0F, -19.0F, 1.0F, 2.0F, 14.0F, 2.0F, new CubeDeformation(0.0F)).mirror(false).texOffs(32, 30).addBox(-5.0F, -19.0F, 1.0F, 2.0F, 14.0F, 2.0F, new CubeDeformation(0.0F)).texOffs(24, 30).addBox(-3.0F, -19.0F, 4.0F, 2.0F, 15.0F, 2.0F, new CubeDeformation(0.0F)).texOffs(24, 30).mirror().addBox(1.0F, -19.0F, 4.0F, 2.0F, 15.0F, 2.0F, new CubeDeformation(0.0F)).mirror(false), PartPose.offset(0.0F, 24.0F, 0.0F));
+		return LayerDefinition.create(meshDefinition0, 64, 64);
+	}
+
+	public void setupAnim(Entity xy, float float2, float float3, float float4, float float5, float float6) {
+	}
+
+	public void renderToBuffer(PoseStack f, VertexConsumer ie, int integer3, int integer4, float float5, float float6, float float7, float float8) {
+		this.bb_main.render(f, ie, integer3, integer4, float5, float6, float7, float8);
+	}
+
+	public void setupAnim(Object object, float float2, float float3, float float4, float float5, float float6) {
+		this.setupAnim((Entity)object, float2, float3, float4, float5, float6);
+	}
+}
--- net/minecraft/src/BlockContainer.java
+++ net/minecraft/src/BlockContainer.java
@@ -1,23 +1,23 @@
 package net.minecraft.src;
 
 public abstract class BlockContainer extends Block {
-	protected BlockContainer(int var1, Material var2) {
-		super(var1, var2);
-		isBlockContainer[var1] = true;
-	}
-
-	protected BlockContainer(int var1, int var2, Material var3) {
-		super(var1, var2, var3);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		super.onBlockAdded(var1, var2, var3, var4);
-		var1.setBlockTileEntity(var2, var3, var4, this.getBlockEntity());
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		super.onBlockRemoval(var1, var2, var3, var4);
-		var1.removeBlockTileEntity(var2, var3, var4);
+	protected BlockContainer(int id, Material material) {
+		super(id, material);
+		isBlockContainer[id] = true;
+	}
+
+	protected BlockContainer(int id, int blockIndex, Material material) {
+		super(id, blockIndex, material);
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		super.onBlockAdded(world, x, y, z);
+		world.setBlockTileEntity(x, y, z, this.getBlockEntity());
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		super.onBlockRemoval(world, x, y, z);
+		world.removeBlockTileEntity(x, y, z);
 	}
 
 	protected abstract TileEntity getBlockEntity();
--- /dev/null
+++ net/minecraft/src/WorldZMSpawnWorld1.java
@@ -1,0 +1,73 @@
+package net.minecraft.src;
+
+import java.io.File;
+
+public class WorldZMSpawnWorld1 extends ZMWorld {
+	XYZv[] field_7569_0g2oBAP1g21M58g0C4R0a3bS78iiawEN1wZdSp08Z7191q7q57aJ73OctDOv = new XYZv[]{new XYZv(-299L, 86L, 155L), new XYZv(-233L, 73L, 122L), new XYZv(-234L, 87L, 57L), new XYZv(-174L, 76L, 62L), new XYZv(-177L, 83L, 99L), new XYZv(-186L, 68L, 140L)};
+	private boolean field_7567_6SzFyghBi7bgl911n8NHf189f6j7lpv9Y0fo73cx6u5M27SD4mHtePLsH44F = false;
+	private int field_7568_34g98fJMkSE6zt48Z36T847cfT3Z4963V0iVN6G97f2XbI3Kc3s8APxrbzHg = 0;
+
+	public XYZv func_7546_09CNVM2pJHfEd8I53GaO82x396qpVix0JSZqlf73zO9Itp6Z0ZM1dFPcr9r6() {
+		return new XYZv(-173L, 66L, 123L);
+	}
+
+	public WorldZMSpawnWorld1(File worldFile, String levelName) {
+		super(worldFile, levelName);
+		this.enemySpawnLocations.add(new WorldZMSpawn(new NamedLoc(-188, 66, 141, "house_1"), new XYZv(0L, -1L, 0L)));
+		this.enemySpawnLocations.add(new WorldZMSpawn(new NamedLoc(-188, 66, 151, "house_2"), new XYZv(0L, -1L, 0L)));
+		this.enemySpawnLocations.add(new WorldZMSpawn(new NamedLoc(-187, 67, 92, "c_1"), new XYZv(0L, -1L, 0L)));
+		this.enemySpawnLocations.add(new WorldZMSpawn(new NamedLoc(-162, 66, 109, "c_2"), new XYZv(0L, -1L, 0L)));
+		this.enemySpawnLocations.add(new WorldZMSpawn(new NamedLoc(-172, 66, 178, "other_1"), (XYZv)null));
+		this.enemySpawnLocations.add(new WorldZMSpawn(new NamedLoc(-248, 78, 158, "fountainspawn"), (XYZv)null));
+		this.func_7544_6zl5Arnowm866sQ3ny372TOkUNmzVF1HF27ODrSt9jyfg491UBi1U4DDt2Yq(new XYZv(-181L, 65L, 144L), new XYZv(-170L, 68L, 144L));
+		this.func_7544_6zl5Arnowm866sQ3ny372TOkUNmzVF1HF27ODrSt9jyfg491UBi1U4DDt2Yq(new XYZv(-181L, 65L, 130L), new XYZv(-181L, 68L, 117L));
+		this.func_7544_6zl5Arnowm866sQ3ny372TOkUNmzVF1HF27ODrSt9jyfg491UBi1U4DDt2Yq(new XYZv(-213L, 64L, 123L), new XYZv(-213L, 68L, 120L));
+		this.func_7544_6zl5Arnowm866sQ3ny372TOkUNmzVF1HF27ODrSt9jyfg491UBi1U4DDt2Yq(new XYZv(-191L, 65L, 165L), new XYZv(-191L, 68L, 160L));
+		this.func_7544_6zl5Arnowm866sQ3ny372TOkUNmzVF1HF27ODrSt9jyfg491UBi1U4DDt2Yq(new XYZv(-187L, 65L, 168L), new XYZv(-170L, 68L, 168L));
+		this.func_7544_6zl5Arnowm866sQ3ny372TOkUNmzVF1HF27ODrSt9jyfg491UBi1U4DDt2Yq(new XYZv(-172L, 65L, 115L), new XYZv(-181L, 68L, 115L));
+		this.func_7544_6zl5Arnowm866sQ3ny372TOkUNmzVF1HF27ODrSt9jyfg491UBi1U4DDt2Yq(new XYZv(-181L, 66L, 87L), new XYZv(-174L, 69L, 87L));
+		this.func_7544_6zl5Arnowm866sQ3ny372TOkUNmzVF1HF27ODrSt9jyfg491UBi1U4DDt2Yq(new XYZv(-252L, 75L, 150L), new XYZv(-248L, 82L, 148L));
+		this.func_7544_6zl5Arnowm866sQ3ny372TOkUNmzVF1HF27ODrSt9jyfg491UBi1U4DDt2Yq(new XYZv(-268L, 75L, 158L), new XYZv(-270L, 82L, 156L));
+		this.func_7544_6zl5Arnowm866sQ3ny372TOkUNmzVF1HF27ODrSt9jyfg491UBi1U4DDt2Yq(new XYZv(-217L, 76L, 156L), new XYZv(-218L, 79L, 159L));
+		this.func_7544_6zl5Arnowm866sQ3ny372TOkUNmzVF1HF27ODrSt9jyfg491UBi1U4DDt2Yq(new XYZv(-235L, 79L, 107L), new XYZv(-230L, 85L, 104L));
+		this.setBlockWithNotify(-314, 71, 159, ExtBlocks.WeaponGiverGrayGun.blockID);
+		this.setBlockWithNotify(-314, 71, 157, 167);
+		Ext1605Utils.func_12137_4B14YTlTqWTNVpM2G9851Dyfx9DbvQPLa5I81ItD974L7kJ315Qu8EP49Cg9(this, new XYZv(-340L, 60L, 159L), new XYZv(-340L, 67L, 172L), 0, ExtBlocks.BarrierBlock.blockID);
+		XYZv[] xYZv3 = this.field_7569_0g2oBAP1g21M58g0C4R0a3bS78iiawEN1wZdSp08Z7191q7q57aJ73OctDOv;
+		int i4 = xYZv3.length;
+
+		for(int i5 = 0; i5 < i4; ++i5) {
+			XYZv xYZv6 = xYZv3[i5];
+			this.setBlockWithNotify((int)xYZv6.x, (int)xYZv6.y, (int)xYZv6.z, 0);
+		}
+
+	}
+
+	public void func_7550_1TEi6UNf3SwyaU3NIC3s8C7gZNGcTG9vFQGy5qOc4gI9AwjR87h7g68M37B3(XYZv ya, int integer) {
+		if(ya.func_11871_4RIxa4425GeFc7bSJ4pOTa6PYnO0fKP5EOCLB0Ntkt78v4xuQKdo35x8q1y5(new XYZv(-314L, 71L, 159L))) {
+			this.field_7567_6SzFyghBi7bgl911n8NHf189f6j7lpv9Y0fo73cx6u5M27SD4mHtePLsH44F = true;
+			this.setBlockWithNotify(-314, 71, 159, 0);
+			InputHandler.mc.sndManager.playSoundFX("ext.notif", 1.0F, 0.0F);
+			InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("0/6", 2000);
+			XYZv[] xYZv3 = this.field_7569_0g2oBAP1g21M58g0C4R0a3bS78iiawEN1wZdSp08Z7191q7q57aJ73OctDOv;
+			int i4 = xYZv3.length;
+
+			for(int i5 = 0; i5 < i4; ++i5) {
+				XYZv xYZv6 = xYZv3[i5];
+				this.setBlockWithNotify((int)xYZv6.x, (int)xYZv6.y, (int)xYZv6.z, ExtBlocks.WeaponGiverGrayGun.blockID);
+			}
+		} else if(this.field_7567_6SzFyghBi7bgl911n8NHf189f6j7lpv9Y0fo73cx6u5M27SD4mHtePLsH44F) {
+			InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw(++this.field_7568_34g98fJMkSE6zt48Z36T847cfT3Z4963V0iVN6G97f2XbI3Kc3s8APxrbzHg + "/6", 2000);
+			this.setBlockWithNotify((int)ya.x, (int)ya.y, (int)ya.z, 0);
+			InputHandler.mc.sndManager.playSoundFX("ext.notif", 1.0F, 0.0F);
+			this.playSoundEffect((double)ya.x, (double)ya.y, (double)ya.z, "random.glass", 1.0F, 0.0F);
+			if(this.field_7568_34g98fJMkSE6zt48Z36T847cfT3Z4963V0iVN6G97f2XbI3Kc3s8APxrbzHg == 6) {
+				this.setBlockWithNotify(-314, 71, 157, 0);
+				this.playSoundEffect(-314.0D, 71.0D, 157.0D, "random.glass", 1.0F, 0.0F);
+				InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10949_90L26at7gGnz0J8Af23lCTpFsYX1JLxXD3R7KOPeOnNw65r9paK3i34TuD8w.func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(new Object[]{this, this.field_7568_34g98fJMkSE6zt48Z36T847cfT3Z4963V0iVN6G97f2XbI3Kc3s8APxrbzHg});
+			}
+		}
+
+		ExtLogger.i(ya.toString());
+	}
+}
--- /dev/null
+++ net/minecraft/src/ItemGrayGun.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+public class ItemGrayGun extends Item {
+	public ItemGrayGun(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		if(entityPlayer instanceof EntityPlayerZombieModeClient) {
+			if(((InventoryVendingMachine)entityPlayer.inventory).field_8689_3p0gv43cL7j25sTw85c9cXfcP4HTk7W010VdL2XjgPV7V0w2R2sQvYNjSAja > 10) {
+				((InventoryVendingMachine)entityPlayer.inventory).field_8689_3p0gv43cL7j25sTw85c9cXfcP4HTk7W010VdL2XjgPV7V0w2R2sQvYNjSAja -= 10;
+				worldObj.playSoundAtEntity(entityPlayer, "ext1605.neutralspecial", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+				worldObj.spawnEntityInWorld(new EntityEssenceProjectileUnknownClass(worldObj, entityPlayer));
+			}
+		} else if(entityPlayer.inventory.consumeInventoryItem(ExtItems.essence.shiftedIndex)) {
+			worldObj.playSoundAtEntity(entityPlayer, "ext1605.neutralspecial", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+			worldObj.spawnEntityInWorld(new EntityEssenceProjectileUnknownClass(worldObj, entityPlayer));
+		}
+
+		return itemStack;
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiAltMultiplayer.java
@@ -1,0 +1,79 @@
+package net.minecraft.src;
+
+public class GuiAltMultiplayer extends GuiScreen {
+	private GuiScreen parentScreen;
+	private int updateCounter = 0;
+	private String ipText = "";
+
+	public GuiAltMultiplayer(GuiScreen hr) {
+		this.parentScreen = hr;
+	}
+
+	public void updateScreen() {
+		++this.updateCounter;
+	}
+
+	public void initGui() {
+		this.controlList.clear();
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96 + 12, "Connect"));
+		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 120 + 12, "Cancel"));
+		((GuiButton)this.controlList.get(0)).enabled = false;
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled) {
+			if(button.id == 1) {
+				this.mc.displayGuiScreen(this.parentScreen);
+			} else if(button.id == 0) {
+				String[] string2 = this.ipText.split(":");
+			}
+		}
+
+	}
+
+	protected void keyTyped(char character, int key) {
+		if(character == 22) {
+			String string3 = GuiScreen.getClipboardString();
+			if(string3 == null) {
+				string3 = "";
+			}
+
+			int i4 = 32 - this.ipText.length();
+			if(i4 > string3.length()) {
+				i4 = string3.length();
+			}
+
+			if(i4 > 0) {
+				this.ipText = this.ipText + string3.substring(0, i4);
+			}
+		}
+
+		if(character == 13) {
+			this.actionPerformed((GuiButton)this.controlList.get(0));
+		}
+
+		if(key == 14 && this.ipText.length() > 0) {
+			this.ipText = this.ipText.substring(0, this.ipText.length() - 1);
+		}
+
+		if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(character) >= 0 && this.ipText.length() < 32) {
+			this.ipText = this.ipText + character;
+		}
+
+		((GuiButton)this.controlList.get(0)).enabled = this.ipText.length() > 0;
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		this.drawDefaultBackground();
+		this.drawCenteredString(this.fontRenderer, "##############", this.width / 2, this.height / 4 - 60 + 20, 0xFFFFFF);
+		drawString(this.fontRenderer, "#################################", this.width / 2 - 140, this.height / 4 - 60 + 60 + 0, 10526880);
+		int i4 = this.width / 2 - 100;
+		int i5 = this.height / 4 - 10 + 50 + 18;
+		short s6 = 200;
+		byte b7 = 20;
+		drawRect(i4 - 1, i5 - 1, i4 + s6 + 1, i5 + b7 + 1, -6250336);
+		drawRect(i4, i5, i4 + s6, i5 + b7, 0xFF000000);
+		drawString(this.fontRenderer, this.ipText + (this.updateCounter / 6 % 2 == 0 ? "_" : ""), i4 + 4, i5 + (b7 - 8) / 2, 14737632);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
+	}
+}
--- net/minecraft/src/Packet23VehicleSpawn.java
+++ net/minecraft/src/Packet23VehicleSpawn.java
@@ -11,24 +11,24 @@
 	public int zPosition;
 	public int type;
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.type = var1.readByte();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeByte(this.type);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleVehicleSpawn(this);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.type = dataInputStream.readByte();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeByte(this.type);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleVehicleSpawn(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/NetworkLocation.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+import java.net.InetSocketAddress;
+import java.util.Arrays;
+
+public class NetworkLocation {
+	public String field_9817_37049353O7B1gM3wO60gA12oJ8K3V78sEIfGg7Rh05gJ9xxp8t26kOOC5X98;
+	public int field_9818_3NlaE0FJ00EAa6rG0jNPh6XTohgUfb7TCEkeHePUhVNt6I96mw1NRr1pfpCk;
+
+	public NetworkLocation(InetSocketAddress inetSocketAddress) {
+		this.field_9817_37049353O7B1gM3wO60gA12oJ8K3V78sEIfGg7Rh05gJ9xxp8t26kOOC5X98 = inetSocketAddress.getAddress().getHostAddress();
+		this.field_9818_3NlaE0FJ00EAa6rG0jNPh6XTohgUfb7TCEkeHePUhVNt6I96mw1NRr1pfpCk = inetSocketAddress.getPort();
+	}
+
+	public int func_9816_2x0acOjuTTpK4OJWkVSraAOSw60K40SH908itmm7PawcvTN8Ic7280XzUhVj() {
+		String string1 = Arrays.toString(this.field_9817_37049353O7B1gM3wO60gA12oJ8K3V78sEIfGg7Rh05gJ9xxp8t26kOOC5X98.split("\\."));
+		System.out.println("Returned " + string1);
+		return Integer.parseInt(string1);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockTorchOld.java
@@ -1,0 +1,166 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockTorchOld extends BlockOld {
+	protected BlockTorchOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.circuits);
+		this.setTickOnLoad(true);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return null;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 2;
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		return vg.isBlockNormalCube(integer2 - 1, integer3, integer4) ? true : (vg.isBlockNormalCube(integer2 + 1, integer3, integer4) ? true : (vg.isBlockNormalCube(integer2, integer3, integer4 - 1) ? true : (vg.isBlockNormalCube(integer2, integer3, integer4 + 1) ? true : vg.isBlockNormalCube(integer2, integer3 - 1, integer4))));
+	}
+
+	public void onBlockPlaced(World vg, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		if(integer5 == 1 && vg.isBlockNormalCube(integer2, integer3 - 1, integer4)) {
+			i6 = 5;
+		}
+
+		if(integer5 == 2 && vg.isBlockNormalCube(integer2, integer3, integer4 + 1)) {
+			i6 = 4;
+		}
+
+		if(integer5 == 3 && vg.isBlockNormalCube(integer2, integer3, integer4 - 1)) {
+			i6 = 3;
+		}
+
+		if(integer5 == 4 && vg.isBlockNormalCube(integer2 + 1, integer3, integer4)) {
+			i6 = 2;
+		}
+
+		if(integer5 == 5 && vg.isBlockNormalCube(integer2 - 1, integer3, integer4)) {
+			i6 = 1;
+		}
+
+		vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i6);
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		super.updateTick(vg, integer2, integer3, integer4, random);
+		if(vg.getBlockMetadata(integer2, integer3, integer4) == 0) {
+			this.onBlockAdded(vg, integer2, integer3, integer4);
+		}
+
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+		if(vg.isBlockNormalCube(integer2 - 1, integer3, integer4)) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 1);
+		} else if(vg.isBlockNormalCube(integer2 + 1, integer3, integer4)) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 2);
+		} else if(vg.isBlockNormalCube(integer2, integer3, integer4 - 1)) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 3);
+		} else if(vg.isBlockNormalCube(integer2, integer3, integer4 + 1)) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 4);
+		} else if(vg.isBlockNormalCube(integer2, integer3 - 1, integer4)) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 5);
+		}
+
+		this.checkIfAttachedToBlock(vg, integer2, integer3, integer4);
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		if(this.checkIfAttachedToBlock(vg, integer2, integer3, integer4)) {
+			int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+			boolean z7 = false;
+			if(!vg.isBlockNormalCube(integer2 - 1, integer3, integer4) && i6 == 1) {
+				z7 = true;
+			}
+
+			if(!vg.isBlockNormalCube(integer2 + 1, integer3, integer4) && i6 == 2) {
+				z7 = true;
+			}
+
+			if(!vg.isBlockNormalCube(integer2, integer3, integer4 - 1) && i6 == 3) {
+				z7 = true;
+			}
+
+			if(!vg.isBlockNormalCube(integer2, integer3, integer4 + 1) && i6 == 4) {
+				z7 = true;
+			}
+
+			if(!vg.isBlockNormalCube(integer2, integer3 - 1, integer4) && i6 == 5) {
+				z7 = true;
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+				vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+			}
+		}
+
+	}
+
+	private boolean checkIfAttachedToBlock(World vg, int integer2, int integer3, int integer4) {
+		if(!this.canPlaceBlockAt(vg, integer2, integer3, integer4)) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	public MovingObjectPosition collisionRayTrace(World vg, int integer2, int integer3, int integer4, Vec3D adm5, Vec3D adm6) {
+		int i7 = vg.getBlockMetadata(integer2, integer3, integer4) & 7;
+		float f8 = 0.15F;
+		if(i7 == 1) {
+			this.setBlockBounds(0.0F, 0.2F, 0.5F - f8, f8 * 2.0F, 0.8F, 0.5F + f8);
+		} else if(i7 == 2) {
+			this.setBlockBounds(1.0F - f8 * 2.0F, 0.2F, 0.5F - f8, 1.0F, 0.8F, 0.5F + f8);
+		} else if(i7 == 3) {
+			this.setBlockBounds(0.5F - f8, 0.2F, 0.0F, 0.5F + f8, 0.8F, f8 * 2.0F);
+		} else if(i7 == 4) {
+			this.setBlockBounds(0.5F - f8, 0.2F, 1.0F - f8 * 2.0F, 0.5F + f8, 0.8F, 1.0F);
+		} else {
+			f8 = 0.1F;
+			this.setBlockBounds(0.5F - f8, 0.0F, 0.5F - f8, 0.5F + f8, 0.6F, 0.5F + f8);
+		}
+
+		return super.collisionRayTrace(vg, integer2, integer3, integer4, adm5, adm6);
+	}
+
+	public void randomDisplayTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		double d7 = (double)((float)integer2 + 0.5F);
+		double d9 = (double)((float)integer3 + 0.7F);
+		double d11 = (double)((float)integer4 + 0.5F);
+		double d13 = (double)0.22F;
+		double d15 = (double)0.27F;
+		if(i6 == 1) {
+			vg.spawnParticle("smoke", d7 - d15, d9 + d13, d11, 0.0D, 0.0D, 0.0D);
+			vg.spawnParticle("flame", d7 - d15, d9 + d13, d11, 0.0D, 0.0D, 0.0D);
+		} else if(i6 == 2) {
+			vg.spawnParticle("smoke", d7 + d15, d9 + d13, d11, 0.0D, 0.0D, 0.0D);
+			vg.spawnParticle("flame", d7 + d15, d9 + d13, d11, 0.0D, 0.0D, 0.0D);
+		} else if(i6 == 3) {
+			vg.spawnParticle("smoke", d7, d9 + d13, d11 - d15, 0.0D, 0.0D, 0.0D);
+			vg.spawnParticle("flame", d7, d9 + d13, d11 - d15, 0.0D, 0.0D, 0.0D);
+		} else if(i6 == 4) {
+			vg.spawnParticle("smoke", d7, d9 + d13, d11 + d15, 0.0D, 0.0D, 0.0D);
+			vg.spawnParticle("flame", d7, d9 + d13, d11 + d15, 0.0D, 0.0D, 0.0D);
+		} else {
+			vg.spawnParticle("smoke", d7, d9, d11, 0.0D, 0.0D, 0.0D);
+			vg.spawnParticle("flame", d7, d9, d11, 0.0D, 0.0D, 0.0D);
+		}
+
+	}
+}
--- net/minecraft/src/SpawnerClient.java
+++ net/minecraft/src/SpawnerClient.java
@@ -3,15 +3,15 @@
 class SpawnerClient extends SpawnerAnimals {
 	final PlayerControllerSP playerController;
 
-	SpawnerClient(PlayerControllerSP var1, int var2, Class var3, Class[] var4) {
-		super(var2, var3, var4);
-		this.playerController = var1;
+	SpawnerClient(PlayerControllerSP lt, int integer, Class class3, Class[] arr) {
+		super(integer, class3, arr);
+		this.playerController = lt;
 	}
 
-	protected ChunkPosition getRandomSpawningPointInChunk(World var1, int var2, int var3) {
-		int var4 = var2 + var1.rand.nextInt(16);
-		int var5 = var1.rand.nextInt(var1.rand.nextInt(120) + 8);
-		int var6 = var3 + var1.rand.nextInt(16);
-		return new ChunkPosition(var4, var5, var6);
+	protected ChunkPosition getRandomSpawningPointInChunk(World vg, int integer2, int integer3) {
+		int i4 = integer2 + vg.rand.nextInt(16);
+		int i5 = vg.rand.nextInt(vg.rand.nextInt(120) + 8);
+		int i6 = integer3 + vg.rand.nextInt(16);
+		return new ChunkPosition(i4, i5, i6);
 	}
 }
--- /dev/null
+++ net/minecraft/src/ItemHoursLongPastI.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+public class ItemHoursLongPastI extends Item {
+	private int field_9444_1261ip0628mg057N19XxbK0BtF5YI86RaSI8BKQcc7p1FhQG01Foq5mCDM7A = 801;
+
+	public ItemHoursLongPastI(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		worldObj.playSoundAtEntity(entityPlayer, "ext.notif", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+		GuiInGameUnknownClass2 guiInGameUnknownClass24 = (GuiInGameUnknownClass2)InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.field_11177_7Zksb7i503i87T27QXh6g1K1pS0mrm03cH6J60Ws3B3hciqhuD9PIOw861xp.peek();
+		if(guiInGameUnknownClass24 == null || guiInGameUnknownClass24.field_8627_0ZmECs21Yya5NZUsnBNbB5tPFhkwONMzlzVXHX4jsV5aynDc020B97BLqocx != this.field_9444_1261ip0628mg057N19XxbK0BtF5YI86RaSI8BKQcc7p1FhQG01Foq5mCDM7A) {
+			InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11171_604vK63ksNcNlyaekc36K9YTmY8326K6noo7h77989I2TsYQ61KM5M25Nii9("Hours Long Past I \nCenturies upon Centuries ago, the world was nothing but shallow tidal pools \nand rock. Simple beings dwelled within - And were content in their ever so \ntemperate Paradise.", 20000, this.field_9444_1261ip0628mg057N19XxbK0BtF5YI86RaSI8BKQcc7p1FhQG01Foq5mCDM7A);
+		}
+
+		return itemStack;
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandConRefresh.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+class CommandConRefresh extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8584_59upxRquVby9ygIBFeg2c9e29905cu29JhN4FbM80hyns32WJLOII8c2NBi7;
+    
+    CommandConRefresh(final CommandManager abb) {
+        this.field_8584_59upxRquVby9ygIBFeg2c9e29905cu29JhN4FbM80hyns32WJLOII8c2NBi7 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        this.field_8584_59upxRquVby9ygIBFeg2c9e29905cu29JhN4FbM80hyns32WJLOII8c2NBi7.field_12073_0iqOuoZgC116WGpSB1E8h6gYyzW4BIQI3nCQmb4kRXV3H1cDIrlUZ7MOVIxf.clear();
+        this.field_8584_59upxRquVby9ygIBFeg2c9e29905cu29JhN4FbM80hyns32WJLOII8c2NBi7.func_12060_2N8lggB3Ex84Toh6NAyZR3Jnms86ir0MO35KZ66K1G6RzeQubR99KXYq62k0();
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- net/minecraft/src/MapGenBase.java
+++ net/minecraft/src/MapGenBase.java
@@ -6,21 +6,21 @@
 	protected int range = 8;
 	protected Random rand = new Random();
 
-	public void generate(ChunkProviderGenerate var1, World var2, int var3, int var4, byte[] var5) {
-		int var6 = this.range;
-		this.rand.setSeed(var2.randomSeed);
-		long var7 = this.rand.nextLong() / 2L * 2L + 1L;
-		long var9 = this.rand.nextLong() / 2L * 2L + 1L;
+	public void generate(ChunkProviderGenerate chunkProviderGenerate, World world, int integer3, int integer4, byte[] data) {
+		int i6 = this.range;
+		this.rand.setSeed(world.randomSeed);
+		long j7 = this.rand.nextLong() / 2L * 2L + 1L;
+		long j9 = this.rand.nextLong() / 2L * 2L + 1L;
 
-		for(int var11 = var3 - var6; var11 <= var3 + var6; ++var11) {
-			for(int var12 = var4 - var6; var12 <= var4 + var6; ++var12) {
-				this.rand.setSeed((long)var11 * var7 + (long)var12 * var9 ^ var2.randomSeed);
-				this.recursiveGenerate(var2, var11, var12, var3, var4, var5);
+		for(int i11 = integer3 - i6; i11 <= integer3 + i6; ++i11) {
+			for(int i12 = integer4 - i6; i12 <= integer4 + i6; ++i12) {
+				this.rand.setSeed((long)i11 * j7 + (long)i12 * j9 ^ world.randomSeed);
+				this.recursiveGenerate(world, i11, i12, integer3, integer4, data);
 			}
 		}
 
 	}
 
-	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
+	protected void recursiveGenerate(World world, int integer2, int integer3, int integer4, int integer5, byte[] data) {
 	}
 }
--- net/minecraft/src/GuiErrorScreen.java
+++ net/minecraft/src/GuiErrorScreen.java
@@ -7,13 +7,13 @@
 	public void initGui() {
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
-		this.drawGradientRect(0, 0, this.width, this.height, -12574688, -11530224);
-		this.drawCenteredString(this.fontRenderer, this.title, this.width / 2, 90, 16777215);
-		this.drawCenteredString(this.fontRenderer, this.text, this.width / 2, 110, 16777215);
-		super.drawScreen(var1, var2, var3);
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		drawGradientRect(0, 0, this.width, this.height, -12574688, -11530224);
+		this.drawCenteredString(this.fontRenderer, this.title, this.width / 2, 90, 0xFFFFFF);
+		this.drawCenteredString(this.fontRenderer, this.text, this.width / 2, 110, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 
-	protected void keyTyped(char var1, int var2) {
+	protected void keyTyped(char character, int key) {
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandSysexecUnlock.java
@@ -1,0 +1,26 @@
+package net.minecraft.src;
+
+class CommandSysexecUnlock extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8563_2C84426j5keNFqbh0Ly7RPoJmFui7FtTLwhioMoqUiSz0AQ36GNQRtc7pOU4;
+    
+    CommandSysexecUnlock(final CommandManager abb) {
+        this.field_8563_2C84426j5keNFqbh0Ly7RPoJmFui7FtTLwhioMoqUiSz0AQ36GNQRtc7pOU4 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        if (this.field_8563_2C84426j5keNFqbh0Ly7RPoJmFui7FtTLwhioMoqUiSz0AQ36GNQRtc7pOU4.field_12075_28FdWuxC13fShF99oFUZRa9Zk8Ur8d7gsfw157Cj6qaqjdwi8sD2yQP7IySf) {
+            this.field_8563_2C84426j5keNFqbh0Ly7RPoJmFui7FtTLwhioMoqUiSz0AQ36GNQRtc7pOU4.field_12071_8Mn4tj13vIyC6B4sKvgNU753iaUwsGLVW462dSPrK3Q6u34DDVgN8g4gP3Sg = true;
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+    
+    @Override
+    public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+        return false;
+    }
+}
--- net/minecraft/src/Packet31RelEntityMove.java
+++ net/minecraft/src/Packet31RelEntityMove.java
@@ -5,18 +5,18 @@
 import java.io.IOException;
 
 public class Packet31RelEntityMove extends Packet30Entity {
-	public void readPacketData(DataInputStream var1) throws IOException {
-		super.readPacketData(var1);
-		this.xPosition = var1.readByte();
-		this.yPosition = var1.readByte();
-		this.zPosition = var1.readByte();
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		super.readPacketData(dataInputStream);
+		this.xPosition = dataInputStream.readByte();
+		this.yPosition = dataInputStream.readByte();
+		this.zPosition = dataInputStream.readByte();
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		super.writePacket(var1);
-		var1.writeByte(this.xPosition);
-		var1.writeByte(this.yPosition);
-		var1.writeByte(this.zPosition);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		super.writePacket(dataOutputStream);
+		dataOutputStream.writeByte(this.xPosition);
+		dataOutputStream.writeByte(this.yPosition);
+		dataOutputStream.writeByte(this.zPosition);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/HubFragmentHallwayFwd.java
@@ -1,0 +1,18 @@
+package net.minecraft.src;
+
+import java.util.Arrays;
+import java.util.List;
+
+public class HubFragmentHallwayFwd implements HubFragment {
+	public List generateAt(World vg, XYZv ya) {
+		Ext1605Utils.fillBlock(vg, ya, ya.add((new XYZv(5L, 0L, 5L)).rotateAroundXP(ya.v)), ExtBlocks.dimensionFloorBlock.blockID);
+		Ext1605Utils.fillBlock(vg, ya.add((new XYZv(0L, 1L, 0L)).rotateAroundXP(ya.v)), ya.add((new XYZv(5L, 4L, 0L)).rotateAroundXP(ya.v)), ExtBlocks.dimensionWallBlock.blockID);
+		Ext1605Utils.fillBlock(vg, ya.add((new XYZv(0L, 1L, 5L)).rotateAroundXP(ya.v)), ya.add((new XYZv(5L, 4L, 5L)).rotateAroundXP(ya.v)), ExtBlocks.dimensionWallBlock.blockID);
+		Ext1605Utils.fillBlock(vg, ya, ya, ExtBlocks.woolPink.blockID + ya.v.direction);
+		return Arrays.asList(new XYZv[]{ya.add((new XYZv(6L, 0L, 0L)).rotateAroundXP(ya.v))});
+	}
+
+	public boolean canGenerateAt(World vg, XYZv ya) {
+		return Ext1605Utils.RTForBlocks(vg, ya.add(0L, 1L, 0L), ya.v, 6);
+	}
+}
--- net/minecraft/src/NBTTagLong.java
+++ net/minecraft/src/NBTTagLong.java
@@ -10,16 +10,16 @@
 	public NBTTagLong() {
 	}
 
-	public NBTTagLong(long var1) {
-		this.longValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeLong(this.longValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.longValue = var1.readLong();
+	public NBTTagLong(long value) {
+		this.longValue = value;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeLong(this.longValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.longValue = dataInput.readLong();
 	}
 
 	public byte getType() {
--- net/minecraft/src/RecipesWeapons.java
+++ net/minecraft/src/RecipesWeapons.java
@@ -4,17 +4,17 @@
 	private String[][] recipePatterns = new String[][]{{"X", "X", "#"}};
 	private Object[][] recipeItems = new Object[][]{{Block.planks, Block.cobblestone, Item.ingotIron, Item.diamond, Item.ingotGold}, {Item.swordWood, Item.swordStone, Item.swordSteel, Item.swordDiamond, Item.swordGold}};
 
-	public void addRecipes(CraftingManager var1) {
-		for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
-			Object var3 = this.recipeItems[0][var2];
+	public void addRecipes(CraftingManager craftingManager) {
+		for(int i2 = 0; i2 < this.recipeItems[0].length; ++i2) {
+			Object object3 = this.recipeItems[0][i2];
 
-			for(int var4 = 0; var4 < this.recipeItems.length - 1; ++var4) {
-				Item var5 = (Item)this.recipeItems[var4 + 1][var2];
-				var1.addRecipe(new ItemStack(var5), new Object[]{this.recipePatterns[var4], Character.valueOf('#'), Item.stick, Character.valueOf('X'), var3});
+			for(int i4 = 0; i4 < this.recipeItems.length - 1; ++i4) {
+				Item item5 = (Item)this.recipeItems[i4 + 1][i2];
+				craftingManager.addRecipe(new ItemStack(item5), new Object[]{this.recipePatterns[i4], '#', Item.stick, 'X', object3});
 			}
 		}
 
-		var1.addRecipe(new ItemStack(Item.bow, 1), new Object[]{" #X", "# X", " #X", Character.valueOf('X'), Item.silk, Character.valueOf('#'), Item.stick});
-		var1.addRecipe(new ItemStack(Item.arrow, 4), new Object[]{"X", "#", "Y", Character.valueOf('Y'), Item.feather, Character.valueOf('X'), Item.flint, Character.valueOf('#'), Item.stick});
+		craftingManager.addRecipe(new ItemStack(Item.bow, 1), new Object[]{" #X", "# X", " #X", 'X', Item.silk, '#', Item.stick});
+		craftingManager.addRecipe(new ItemStack(Item.arrow, 4), new Object[]{"X", "#", "Y", 'Y', Item.feather, 'X', Item.flint, '#', Item.stick});
 	}
 }
--- net/minecraft/src/NBTTagCompound.java
+++ net/minecraft/src/NBTTagCompound.java
@@ -3,6 +3,7 @@
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
@@ -10,124 +11,125 @@
 public class NBTTagCompound extends NBTBase {
 	private Map tagMap = new HashMap();
 
-	void writeTagContents(DataOutput var1) throws IOException {
-		Iterator var2 = this.tagMap.values().iterator();
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		Iterator iterator2 = this.tagMap.values().iterator();
 
-		while(var2.hasNext()) {
-			NBTBase var3 = (NBTBase)var2.next();
-			NBTBase.writeNamedTag(var3, var1);
+		while(iterator2.hasNext()) {
+			NBTBase nBTBase3 = (NBTBase)iterator2.next();
+			NBTBase.writeNamedTag(nBTBase3, dataOutput);
 		}
 
-		var1.writeByte(0);
+		dataOutput.writeByte(0);
 	}
 
-	void readTagContents(DataInput var1) throws IOException {
+	void readTagContents(DataInput dataInput) throws IOException {
 		this.tagMap.clear();
 
-		while(true) {
-			NBTBase var2 = NBTBase.readNamedTag(var1);
-			if(var2.getType() == 0) {
-				return;
-			}
-
-			this.tagMap.put(var2.getKey(), var2);
+		NBTBase nBTBase2;
+		while((nBTBase2 = NBTBase.readNamedTag(dataInput)).getType() != 0) {
+			this.tagMap.put(nBTBase2.getKey(), nBTBase2);
 		}
+
+	}
+
+	public Collection func_9925_7Nmdbr2ySWTWPYBjFFp2Pj5o350YfKPz3M4LF0Uy1488hQ70sr9S06Q7XbE6() {
+		return this.tagMap.values();
 	}
 
 	public byte getType() {
 		return (byte)10;
 	}
 
-	public void setTag(String var1, NBTBase var2) {
-		this.tagMap.put(var1, var2.setKey(var1));
-	}
-
-	public void setByte(String var1, byte var2) {
-		this.tagMap.put(var1, (new NBTTagByte(var2)).setKey(var1));
-	}
-
-	public void setShort(String var1, short var2) {
-		this.tagMap.put(var1, (new NBTTagShort(var2)).setKey(var1));
-	}
-
-	public void setInteger(String var1, int var2) {
-		this.tagMap.put(var1, (new NBTTagInt(var2)).setKey(var1));
-	}
-
-	public void setLong(String var1, long var2) {
-		this.tagMap.put(var1, (new NBTTagLong(var2)).setKey(var1));
-	}
-
-	public void setFloat(String var1, float var2) {
-		this.tagMap.put(var1, (new NBTTagFloat(var2)).setKey(var1));
-	}
-
-	public void setDouble(String var1, double var2) {
-		this.tagMap.put(var1, (new NBTTagDouble(var2)).setKey(var1));
-	}
-
-	public void setString(String var1, String var2) {
-		this.tagMap.put(var1, (new NBTTagString(var2)).setKey(var1));
-	}
-
-	public void setByteArray(String var1, byte[] var2) {
-		this.tagMap.put(var1, (new NBTTagByteArray(var2)).setKey(var1));
-	}
-
-	public void setCompoundTag(String var1, NBTTagCompound var2) {
-		this.tagMap.put(var1, var2.setKey(var1));
-	}
-
-	public void setBoolean(String var1, boolean var2) {
-		this.setByte(var1, (byte)(var2 ? 1 : 0));
-	}
-
-	public boolean hasKey(String var1) {
-		return this.tagMap.containsKey(var1);
-	}
-
-	public byte getByte(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0 : ((NBTTagByte)this.tagMap.get(var1)).byteValue;
-	}
-
-	public short getShort(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0 : ((NBTTagShort)this.tagMap.get(var1)).shortValue;
-	}
-
-	public int getInteger(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0 : ((NBTTagInt)this.tagMap.get(var1)).intValue;
-	}
-
-	public long getLong(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0L : ((NBTTagLong)this.tagMap.get(var1)).longValue;
-	}
-
-	public float getFloat(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0.0F : ((NBTTagFloat)this.tagMap.get(var1)).floatValue;
-	}
-
-	public double getDouble(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0.0D : ((NBTTagDouble)this.tagMap.get(var1)).doubleValue;
-	}
-
-	public String getString(String var1) {
-		return !this.tagMap.containsKey(var1) ? "" : ((NBTTagString)this.tagMap.get(var1)).stringValue;
-	}
-
-	public byte[] getByteArray(String var1) {
-		return !this.tagMap.containsKey(var1) ? new byte[0] : ((NBTTagByteArray)this.tagMap.get(var1)).byteArray;
-	}
-
-	public NBTTagCompound getCompoundTag(String var1) {
-		return !this.tagMap.containsKey(var1) ? new NBTTagCompound() : (NBTTagCompound)this.tagMap.get(var1);
-	}
-
-	public NBTTagList getTagList(String var1) {
-		return !this.tagMap.containsKey(var1) ? new NBTTagList() : (NBTTagList)this.tagMap.get(var1);
-	}
-
-	public boolean getBoolean(String var1) {
-		return this.getByte(var1) != 0;
+	public void setTag(String name, NBTBase tag) {
+		this.tagMap.put(name, tag.setKey(name));
+	}
+
+	public void setByte(String name, byte value) {
+		this.tagMap.put(name, (new NBTTagByte(value)).setKey(name));
+	}
+
+	public void setShort(String name, short value) {
+		this.tagMap.put(name, (new NBTTagShort(value)).setKey(name));
+	}
+
+	public void setInteger(String name, int value) {
+		this.tagMap.put(name, (new NBTTagInt(value)).setKey(name));
+	}
+
+	public void setLong(String name, long value) {
+		this.tagMap.put(name, (new NBTTagLong(value)).setKey(name));
+	}
+
+	public void setFloat(String name, float value) {
+		this.tagMap.put(name, (new NBTTagFloat(value)).setKey(name));
+	}
+
+	public void setDouble(String name, double value) {
+		this.tagMap.put(name, (new NBTTagDouble(value)).setKey(name));
+	}
+
+	public void setString(String name, String value) {
+		this.tagMap.put(name, (new NBTTagString(value)).setKey(name));
+	}
+
+	public void setByteArray(String name, byte[] value) {
+		this.tagMap.put(name, (new NBTTagByteArray(value)).setKey(name));
+	}
+
+	public void setCompoundTag(String name, NBTTagCompound compoundTag) {
+		this.tagMap.put(name, compoundTag.setKey(name));
+	}
+
+	public void setBoolean(String name, boolean value) {
+		this.setByte(name, (byte)(value ? 1 : 0));
+	}
+
+	public boolean hasKey(String name) {
+		return this.tagMap.containsKey(name);
+	}
+
+	public byte getByte(String name) {
+		return !this.tagMap.containsKey(name) ? 0 : ((NBTTagByte)this.tagMap.get(name)).byteValue;
+	}
+
+	public short getShort(String name) {
+		return !this.tagMap.containsKey(name) ? 0 : ((NBTTagShort)this.tagMap.get(name)).shortValue;
+	}
+
+	public int getInteger(String name) {
+		return !this.tagMap.containsKey(name) ? 0 : ((NBTTagInt)this.tagMap.get(name)).intValue;
+	}
+
+	public long getLong(String name) {
+		return !this.tagMap.containsKey(name) ? 0L : ((NBTTagLong)this.tagMap.get(name)).longValue;
+	}
+
+	public float getFloat(String name) {
+		return !this.tagMap.containsKey(name) ? 0.0F : ((NBTTagFloat)this.tagMap.get(name)).floatValue;
+	}
+
+	public double getDouble(String name) {
+		return !this.tagMap.containsKey(name) ? 0.0D : ((NBTTagDouble)this.tagMap.get(name)).doubleValue;
+	}
+
+	public String getString(String name) {
+		return !this.tagMap.containsKey(name) ? "" : ((NBTTagString)this.tagMap.get(name)).stringValue;
+	}
+
+	public byte[] getByteArray(String name) {
+		return !this.tagMap.containsKey(name) ? new byte[0] : ((NBTTagByteArray)this.tagMap.get(name)).byteArray;
+	}
+
+	public NBTTagCompound getCompoundTag(String name) {
+		return !this.tagMap.containsKey(name) ? new NBTTagCompound() : (NBTTagCompound)this.tagMap.get(name);
+	}
+
+	public NBTTagList getTagList(String name) {
+		return !this.tagMap.containsKey(name) ? new NBTTagList() : (NBTTagList)this.tagMap.get(name);
+	}
+
+	public boolean getBoolean(String name) {
+		return this.getByte(name) != 0;
 	}
 
 	public String toString() {
--- net/minecraft/src/BlockLog.java
+++ net/minecraft/src/BlockLog.java
@@ -3,20 +3,20 @@
 import java.util.Random;
 
 public class BlockLog extends Block {
-	protected BlockLog(int var1) {
-		super(var1, Material.wood);
+	protected BlockLog(int id) {
+		super(id, Material.wood);
 		this.blockIndexInTexture = 20;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 1;
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Block.wood.blockID;
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? 21 : (var1 == 0 ? 21 : 20);
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? 21 : (side == 0 ? 21 : 20);
 	}
 }
--- net/minecraft/src/EntityItem.java
+++ net/minecraft/src/EntityItem.java
@@ -2,18 +2,21 @@
 
 public class EntityItem extends Entity {
 	public ItemStack item;
-	private int age2;
 	public int age = 0;
 	public int delayBeforeCanPickup;
 	private int health = 5;
 	public float hoverStart = (float)(Math.random() * Math.PI * 2.0D);
+	private int prevX = Integer.MAX_VALUE;
+	private int prevY = Integer.MAX_VALUE;
+	private int prevZ = Integer.MAX_VALUE;
+	private int essenceFountainEffectStrength = 0;
 
-	public EntityItem(World var1, double var2, double var4, double var6, ItemStack var8) {
-		super(var1);
+	public EntityItem(World world, double x, double y, double z, ItemStack item) {
+		super(world);
 		this.setSize(0.25F, 0.25F);
 		this.yOffset = this.height / 2.0F;
-		this.setPosition(var2, var4, var6);
-		this.item = var8;
+		this.setPosition(x, y, z);
+		this.item = item;
 		this.rotationYaw = (float)(Math.random() * 360.0D);
 		this.motionX = (double)((float)(Math.random() * (double)0.2F - (double)0.1F));
 		this.motionY = (double)0.2F;
@@ -21,8 +24,8 @@
 		this.canTriggerWalking = false;
 	}
 
-	public EntityItem(World var1) {
-		super(var1);
+	public EntityItem(World world) {
+		super(world);
 		this.setSize(0.25F, 0.25F);
 		this.yOffset = this.height / 2.0F;
 	}
@@ -36,7 +39,12 @@
 		this.prevPosX = this.posX;
 		this.prevPosY = this.posY;
 		this.prevPosZ = this.posZ;
-		this.motionY -= (double)0.04F;
+		if(this.essenceFountainEffectStrength > 0) {
+			this.motionY += (double)0.2F;
+		} else {
+			this.motionY -= (double)0.04F;
+		}
+
 		if(this.worldObj.getBlockMaterial(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) == Material.lava) {
 			this.motionY = (double)0.2F;
 			this.motionX = (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);
@@ -47,115 +55,295 @@
 		this.pushOutOfBlocks(this.posX, this.posY, this.posZ);
 		this.handleWaterMovement();
 		this.moveEntity(this.motionX, this.motionY, this.motionZ);
-		float var1 = 0.98F;
-		if(this.onGround) {
-			var1 = 0.1F * 0.1F * 58.8F;
-			int var2 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
-			if(var2 > 0) {
-				var1 = Block.blocksList[var2].slipperiness * 0.98F;
+		float f1 = 0.98F;
+		int i2;
+		if(this.onGround && this.essenceFountainEffectStrength == 0) {
+			f1 = 0.58800006F;
+			i2 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
+			if(i2 > 0) {
+				f1 = Block.blocksList[i2].slipperiness * 0.98F;
 			}
 		}
 
-		this.motionX *= (double)var1;
+		this.motionX *= (double)f1;
 		this.motionY *= (double)0.98F;
-		this.motionZ *= (double)var1;
-		if(this.onGround) {
+		this.motionZ *= (double)f1;
+		if(this.onGround && this.essenceFountainEffectStrength == 0) {
 			this.motionY *= -0.5D;
 		}
 
-		++this.age2;
 		++this.age;
 		if(this.age >= 6000) {
 			this.setEntityDead();
 		}
 
+		i2 = (int)Math.round(Math.floor(this.posX));
+		int i3 = (int)Math.round(Math.floor(this.posY));
+		int i4 = (int)Math.round(Math.floor(this.posZ));
+		if(i2 != this.prevX || i3 != this.prevY || i4 != this.prevZ) {
+			this.essenceFountainEffectStrength = 0;
+			if(i3 < 0) {
+				this.prevX = i2;
+				this.prevY = i3;
+				this.prevZ = i4;
+			} else {
+				byte b5 = 0;
+
+				label198:
+				for(int i6 = Math.min(i3, 128); i6 >= 0; --i6) {
+					int i7 = this.worldObj.getBlockId(i2, i6, i4);
+					if(i7 == ExtBlocks.essenceFountain.blockID) {
+						TileEntityEssenceFountain tileEntityEssenceFountain8 = (TileEntityEssenceFountain)this.worldObj.getBlockTileEntity(i2, i6, i4);
+						boolean z9 = false;
+						boolean z10 = tileEntityEssenceFountain8.getStackInSlot(0).stackSize > 0;
+						int i11;
+						if(this.item.itemID == ExtItems.essence.shiftedIndex && tileEntityEssenceFountain8.getStackInSlot(0).stackSize < 64 && i6 == i3) {
+							if(!z10) {
+								this.worldObj.markBlocksDirty(i2, i6, i4, i2, i6, i4);
+							}
+
+							z10 = true;
+							if(this.item.stackSize <= 64 - tileEntityEssenceFountain8.getStackInSlot(0).stackSize) {
+								ItemStack itemStack10000 = tileEntityEssenceFountain8.getStackInSlot(0);
+								itemStack10000.stackSize += this.item.stackSize;
+								if(tileEntityEssenceFountain8.getStackInSlot(0).stackSize == 64) {
+									this.worldObj.markBlocksDirty(i2, i3, i4, i2, i3, i4);
+								}
+
+								this.setEntityDead();
+								break;
+							}
+
+							i11 = 64 - tileEntityEssenceFountain8.getStackInSlot(0).stackSize;
+							tileEntityEssenceFountain8.getStackInSlot(0).stackSize = 64;
+							z9 = true;
+							this.item.stackSize -= i11;
+						}
+
+						if(z9) {
+							this.worldObj.markBlocksDirty(i2, i3, i4, i2, i3, i4);
+						}
+
+						if(!z10) {
+							break;
+						}
+
+						if(i6 > 0) {
+							i11 = this.worldObj.getBlockId(i2, i6 - 1, i4);
+							if(i11 == ExtBlocks.EssenceTransformer.blockID) {
+								b5 = 1;
+							}
+
+							if(i11 == ExtBlocks.EssenceCloner.blockID) {
+								b5 = 6;
+							}
+
+							if(i11 == Block.chest.blockID) {
+								b5 = 2;
+							}
+
+							if(i11 == Block.stoneOvenIdle.blockID || i11 == Block.stoneOvenActive.blockID) {
+								if(tileEntityEssenceFountain8.getStackInSlot(0).stackSize == 64) {
+									b5 = 4;
+								} else {
+									b5 = 3;
+								}
+							}
+
+							if(i11 == Block.ice.blockID) {
+								b5 = 5;
+							}
+						}
+
+						switch(b5) {
+						case 0:
+							this.essenceFountainEffectStrength = tileEntityEssenceFountain8.getStackInSlot(0).stackSize - (i3 - i6);
+							break label198;
+						case 1:
+							if(i6 != i3 || tileEntityEssenceFountain8.getStackInSlot(0).stackSize != 64 || this.item.getItem() == ExtItems.essence) {
+								break label198;
+							}
+
+							for(i11 = this.item.getEssenceValue() * this.item.stackSize; i11 > 64; i11 -= 64) {
+								ItemStack itemStack18 = new ItemStack(ExtItems.essence, 64);
+								EntityItem entityItem19 = new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, itemStack18);
+								entityItem19.motionX = this.motionX;
+								entityItem19.motionY = this.motionY;
+								entityItem19.motionZ = this.motionZ;
+								this.worldObj.spawnEntityInWorld(entityItem19);
+							}
+
+							this.item = new ItemStack(ExtItems.essence, i11);
+							break label198;
+						case 2:
+							if(i6 == i3 && tileEntityEssenceFountain8.getStackInSlot(0).stackSize == 64) {
+								TileEntityChest tileEntityChest16 = (TileEntityChest)this.worldObj.getBlockTileEntity(i2, i6 - 1, i4);
+								int i17 = tileEntityChest16.getSizeInventory();
+
+								for(int i13 = 0; i13 < i17; ++i13) {
+									ItemStack itemStack14 = tileEntityChest16.getStackInSlot(i13);
+									if(itemStack14 == null) {
+										itemStack14 = new ItemStack(0, 0);
+									}
+
+									if(itemStack14.itemID != 0) {
+										if(itemStack14.itemID != this.item.itemID || itemStack14.itemDmg != this.item.itemDmg || itemStack14.getMaxStackSize() <= itemStack14.stackSize) {
+											continue;
+										}
+									} else {
+										itemStack14.itemID = this.item.itemID;
+										itemStack14.stackSize = 0;
+									}
+
+									if(itemStack14.stackSize == 0) {
+										itemStack14.stackSize = this.item.stackSize;
+										this.item.stackSize = 0;
+										this.setEntityDead();
+									} else if(itemStack14.getMaxStackSize() - itemStack14.stackSize >= this.item.stackSize) {
+										itemStack14.stackSize += this.item.stackSize;
+										this.item.stackSize = 0;
+										this.setEntityDead();
+									} else {
+										this.item.stackSize -= itemStack14.getMaxStackSize() - itemStack14.stackSize;
+										itemStack14.stackSize = itemStack14.getMaxStackSize();
+									}
+
+									tileEntityChest16.setInventorySlotContents(i13, itemStack14);
+									if(this.item.stackSize <= 0) {
+										break label198;
+									}
+								}
+							}
+						case 3:
+						case 4:
+						default:
+							break label198;
+						case 5:
+							if(i6 == i3) {
+								this.motionX *= 2.299999952316284D;
+								this.motionZ *= 2.299999952316284D;
+							}
+							break label198;
+						case 6:
+							if(i6 == i3 && tileEntityEssenceFountain8.getStackInSlot(0).stackSize == 64 && this.item.getItem() == ExtItems.essence && this.item.stackSize >= 9) {
+								if(this.item.stackSize % 9 == 0) {
+									this.item = new ItemStack(ExtBlocks.EssenceBlock, this.item.stackSize / 9);
+								} else {
+									ItemStack itemStack15 = new ItemStack(ExtBlocks.EssenceBlock, this.item.stackSize / 9);
+									EntityItem entityItem12 = new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, itemStack15);
+									entityItem12.motionX = this.motionX;
+									entityItem12.motionY = this.motionY;
+									entityItem12.motionZ = this.motionZ;
+									this.worldObj.spawnEntityInWorld(entityItem12);
+									this.item.stackSize %= 9;
+								}
+							}
+							break label198;
+						}
+					}
+
+					if(i7 != 0) {
+						break;
+					}
+				}
+
+				this.prevX = i2;
+				this.prevY = i3;
+				this.prevZ = i4;
+			}
+		}
+
+		if(this.essenceFountainEffectStrength > 0) {
+			this.motionY = (double)this.essenceFountainEffectStrength * 0.015D;
+		}
+
 	}
 
 	public boolean handleWaterMovement() {
 		return this.worldObj.handleMaterialAcceleration(this.boundingBox, Material.water, this);
 	}
 
-	private boolean pushOutOfBlocks(double var1, double var3, double var5) {
-		int var7 = MathHelper.floor_double(var1);
-		int var8 = MathHelper.floor_double(var3);
-		int var9 = MathHelper.floor_double(var5);
-		double var10 = var1 - (double)var7;
-		double var12 = var3 - (double)var8;
-		double var14 = var5 - (double)var9;
-		if(Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8, var9)]) {
-			boolean var16 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7 - 1, var8, var9)];
-			boolean var17 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7 + 1, var8, var9)];
-			boolean var18 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8 - 1, var9)];
-			boolean var19 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8 + 1, var9)];
-			boolean var20 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8, var9 - 1)];
-			boolean var21 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8, var9 + 1)];
-			byte var22 = -1;
-			double var23 = 9999.0D;
-			if(var16 && var10 < var23) {
-				var23 = var10;
-				var22 = 0;
-			}
-
-			if(var17 && 1.0D - var10 < var23) {
-				var23 = 1.0D - var10;
-				var22 = 1;
-			}
-
-			if(var18 && var12 < var23) {
-				var23 = var12;
-				var22 = 2;
-			}
-
-			if(var19 && 1.0D - var12 < var23) {
-				var23 = 1.0D - var12;
-				var22 = 3;
-			}
-
-			if(var20 && var14 < var23) {
-				var23 = var14;
-				var22 = 4;
-			}
-
-			if(var21 && 1.0D - var14 < var23) {
-				var23 = 1.0D - var14;
-				var22 = 5;
-			}
-
-			float var25 = this.rand.nextFloat() * 0.2F + 0.1F;
-			if(var22 == 0) {
-				this.motionX = (double)(-var25);
-			}
-
-			if(var22 == 1) {
-				this.motionX = (double)var25;
-			}
-
-			if(var22 == 2) {
-				this.motionY = (double)(-var25);
-			}
-
-			if(var22 == 3) {
-				this.motionY = (double)var25;
-			}
-
-			if(var22 == 4) {
-				this.motionZ = (double)(-var25);
-			}
-
-			if(var22 == 5) {
-				this.motionZ = (double)var25;
+	private boolean pushOutOfBlocks(double x, double y, double z) {
+		int i7 = MathHelper.floor_double(x);
+		int i8 = MathHelper.floor_double(y);
+		int i9 = MathHelper.floor_double(z);
+		double d10 = x - (double)i7;
+		double d12 = y - (double)i8;
+		double d14 = z - (double)i9;
+		if(Block.opaqueCubeLookup[this.worldObj.getBlockId(i7, i8, i9)]) {
+			boolean z16 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(i7 - 1, i8, i9)];
+			boolean z17 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(i7 + 1, i8, i9)];
+			boolean z18 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(i7, i8 - 1, i9)];
+			boolean z19 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(i7, i8 + 1, i9)];
+			boolean z20 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(i7, i8, i9 - 1)];
+			boolean z21 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(i7, i8, i9 + 1)];
+			byte b22 = -1;
+			double d23 = 9999.0D;
+			if(z16 && d10 < d23) {
+				d23 = d10;
+				b22 = 0;
+			}
+
+			if(z17 && 1.0D - d10 < d23) {
+				d23 = 1.0D - d10;
+				b22 = 1;
+			}
+
+			if(z18 && d12 < d23) {
+				d23 = d12;
+				b22 = 2;
+			}
+
+			if(z19 && 1.0D - d12 < d23) {
+				d23 = 1.0D - d12;
+				b22 = 3;
+			}
+
+			if(z20 && d14 < d23) {
+				d23 = d14;
+				b22 = 4;
+			}
+
+			if(z21 && 1.0D - d14 < d23) {
+				d23 = 1.0D - d14;
+				b22 = 5;
+			}
+
+			float f25 = this.rand.nextFloat() * 0.2F + 0.1F;
+			if(b22 == 0) {
+				this.motionX = (double)(-f25);
+			}
+
+			if(b22 == 1) {
+				this.motionX = (double)f25;
+			}
+
+			if(b22 == 2) {
+				this.motionY = (double)(-f25);
+			}
+
+			if(b22 == 3) {
+				this.motionY = (double)f25;
+			}
+
+			if(b22 == 4) {
+				this.motionZ = (double)(-f25);
+			}
+
+			if(b22 == 5) {
+				this.motionZ = (double)f25;
 			}
 		}
 
 		return false;
 	}
 
-	protected void dealFireDamage(int var1) {
-		this.attackEntityFrom((Entity)null, var1);
+	protected void dealFireDamage(int fireDamage) {
+		this.attackEntityFrom((Entity)null, fireDamage);
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
-		this.health -= var2;
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		this.health -= damage;
 		if(this.health <= 0) {
 			this.setEntityDead();
 		}
@@ -163,28 +351,28 @@
 		return false;
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setShort("Health", (short)((byte)this.health));
-		var1.setShort("Age", (short)this.age);
-		var1.setCompoundTag("Item", this.item.writeToNBT(new NBTTagCompound()));
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.health = var1.getShort("Health") & 255;
-		this.age = var1.getShort("Age");
-		NBTTagCompound var2 = var1.getCompoundTag("Item");
-		this.item = new ItemStack(var2);
-	}
-
-	public void onCollideWithPlayer(EntityPlayer var1) {
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setShort("Health", (short)((byte)this.health));
+		nbttagcompound.setShort("Age", (short)this.age);
+		nbttagcompound.setCompoundTag("Item", this.item.writeToNBT(new NBTTagCompound()));
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.health = nbttagcompound.getShort("Health") & 255;
+		this.age = nbttagcompound.getShort("Age");
+		NBTTagCompound nBTTagCompound2 = nbttagcompound.getCompoundTag("Item");
+		this.item = new ItemStack(nBTTagCompound2);
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
 		if(!this.worldObj.multiplayerWorld) {
-			int var2 = this.item.stackSize;
-			if(this.delayBeforeCanPickup == 0 && var1.inventory.addItemStackToInventory(this.item)) {
+			int i2 = this.item.stackSize;
+			if(this.delayBeforeCanPickup == 0 && entityPlayer.inventory.addItemStackToInventory(this.item)) {
 				this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-				var1.onItemPickup(this, var2);
+				entityPlayer.onItemPickup(this, i2);
 				this.setEntityDead();
 			}
-
 		}
+
 	}
 }
--- /dev/null
+++ net/minecraft/src/ItemEssenceGun.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+public class ItemEssenceGun extends Item {
+	public ItemEssenceGun(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		if(entityPlayer instanceof EntityPlayerZombieModeClient) {
+			if(((InventoryVendingMachine)entityPlayer.inventory).field_8689_3p0gv43cL7j25sTw85c9cXfcP4HTk7W010VdL2XjgPV7V0w2R2sQvYNjSAja > 0) {
+				--((InventoryVendingMachine)entityPlayer.inventory).field_8689_3p0gv43cL7j25sTw85c9cXfcP4HTk7W010VdL2XjgPV7V0w2R2sQvYNjSAja;
+				worldObj.playSoundAtEntity(entityPlayer, "ext1605.neutralspecial", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+				worldObj.spawnEntityInWorld(new EntityEssenceProjectile(worldObj, entityPlayer));
+			}
+		} else if(entityPlayer.inventory.consumeInventoryItem(ExtItems.essence.shiftedIndex)) {
+			worldObj.playSoundAtEntity(entityPlayer, "ext1605.neutralspecial", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+			worldObj.spawnEntityInWorld(new EntityEssenceProjectile(worldObj, entityPlayer));
+		}
+
+		return itemStack;
+	}
+}
--- net/minecraft/src/SlotInventory.java
+++ net/minecraft/src/SlotInventory.java
@@ -5,18 +5,18 @@
 	public final int xDisplayPosition;
 	public final int yDisplayPosition;
 
-	public SlotInventory(GuiContainer var1, IInventory var2, int var3, int var4, int var5) {
-		super(var2, var3);
-		this.guiContainer = var1;
-		this.xDisplayPosition = var4;
-		this.yDisplayPosition = var5;
+	public SlotInventory(GuiContainer guiContainer, IInventory inventory, int slotIndex, int x, int y) {
+		super(inventory, slotIndex);
+		this.guiContainer = guiContainer;
+		this.xDisplayPosition = x;
+		this.yDisplayPosition = y;
 	}
 
-	public boolean getIsMouseOverSlot(int var1, int var2) {
-		int var3 = (this.guiContainer.width - this.guiContainer.xSize) / 2;
-		int var4 = (this.guiContainer.height - this.guiContainer.ySize) / 2;
-		var1 -= var3;
-		var2 -= var4;
-		return var1 >= this.xDisplayPosition - 1 && var1 < this.xDisplayPosition + 16 + 1 && var2 >= this.yDisplayPosition - 1 && var2 < this.yDisplayPosition + 16 + 1;
+	public boolean getIsMouseOverSlot(int x, int y) {
+		int i3 = (this.guiContainer.width - this.guiContainer.xSize) / 2;
+		int i4 = (this.guiContainer.height - this.guiContainer.ySize) / 2;
+		x -= i3;
+		y -= i4;
+		return x >= this.xDisplayPosition - 1 && x < this.xDisplayPosition + 16 + 1 && y >= this.yDisplayPosition - 1 && y < this.yDisplayPosition + 16 + 1;
 	}
 }
--- net/minecraft/src/ModelRenderer.java
+++ net/minecraft/src/ModelRenderer.java
@@ -19,144 +19,148 @@
 	public boolean showModel = true;
 	public boolean isHidden = false;
 
-	public ModelRenderer(int var1, int var2) {
-		this.textureOffsetX = var1;
-		this.textureOffsetY = var2;
-	}
-
-	public void addBox(float var1, float var2, float var3, int var4, int var5, int var6) {
-		this.addBox(var1, var2, var3, var4, var5, var6, 0.0F);
-	}
-
-	public void addBox(float var1, float var2, float var3, int var4, int var5, int var6, float var7) {
+	public ModelRenderer(int integer1, int integer2) {
+		this.textureOffsetX = integer1;
+		this.textureOffsetY = integer2;
+	}
+
+	public void addBox(float float1, float float2, float float3, int integer4, int integer5, int integer6, float float7) {
+		this.addBox(float1, float2, float3, integer4, integer5, integer6, float7, 64, 32);
+	}
+
+	public void addBox(float float1, float float2, float float3, int integer4, int integer5, int integer6) {
+		this.addBox(float1, float2, float3, integer4, integer5, integer6, 0.0F, 64, 32);
+	}
+
+	public void addBox(float float1, float float2, float float3, int integer4, int integer5, int integer6, float float7, int integer8, int integer9) {
 		this.corners = new PositionTexureVertex[8];
 		this.faces = new TexturedQuad[6];
-		float var8 = var1 + (float)var4;
-		float var9 = var2 + (float)var5;
-		float var10 = var3 + (float)var6;
-		var1 -= var7;
-		var2 -= var7;
-		var3 -= var7;
-		var8 += var7;
-		var9 += var7;
-		var10 += var7;
-		if(this.mirror) {
-			float var11 = var8;
-			var8 = var1;
-			var1 = var11;
-		}
-
-		PositionTexureVertex var20 = new PositionTexureVertex(var1, var2, var3, 0.0F, 0.0F);
-		PositionTexureVertex var12 = new PositionTexureVertex(var8, var2, var3, 0.0F, 8.0F);
-		PositionTexureVertex var13 = new PositionTexureVertex(var8, var9, var3, 8.0F, 8.0F);
-		PositionTexureVertex var14 = new PositionTexureVertex(var1, var9, var3, 8.0F, 0.0F);
-		PositionTexureVertex var15 = new PositionTexureVertex(var1, var2, var10, 0.0F, 0.0F);
-		PositionTexureVertex var16 = new PositionTexureVertex(var8, var2, var10, 0.0F, 8.0F);
-		PositionTexureVertex var17 = new PositionTexureVertex(var8, var9, var10, 8.0F, 8.0F);
-		PositionTexureVertex var18 = new PositionTexureVertex(var1, var9, var10, 8.0F, 0.0F);
-		this.corners[0] = var20;
-		this.corners[1] = var12;
-		this.corners[2] = var13;
-		this.corners[3] = var14;
-		this.corners[4] = var15;
-		this.corners[5] = var16;
-		this.corners[6] = var17;
-		this.corners[7] = var18;
-		this.faces[0] = new TexturedQuad(new PositionTexureVertex[]{var16, var12, var13, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6 + var5);
-		this.faces[1] = new TexturedQuad(new PositionTexureVertex[]{var20, var15, var18, var14}, this.textureOffsetX + 0, this.textureOffsetY + var6, this.textureOffsetX + var6, this.textureOffsetY + var6 + var5);
-		this.faces[2] = new TexturedQuad(new PositionTexureVertex[]{var16, var15, var20, var12}, this.textureOffsetX + var6, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6);
-		this.faces[3] = new TexturedQuad(new PositionTexureVertex[]{var13, var14, var18, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4 + var4, this.textureOffsetY + var6);
-		this.faces[4] = new TexturedQuad(new PositionTexureVertex[]{var12, var20, var14, var13}, this.textureOffsetX + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6 + var5);
-		this.faces[5] = new TexturedQuad(new PositionTexureVertex[]{var15, var16, var17, var18}, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6 + var4, this.textureOffsetY + var6 + var5);
-		if(this.mirror) {
-			for(int var19 = 0; var19 < this.faces.length; ++var19) {
-				this.faces[var19].flipFace();
-			}
-		}
-
-	}
-
-	public void setRotationPoint(float var1, float var2, float var3) {
-		this.rotationPointX = var1;
-		this.rotationPointY = var2;
-		this.rotationPointZ = var3;
-	}
-
-	public void render(float var1) {
-		if(!this.isHidden) {
-			if(this.showModel) {
-				if(!this.compiled) {
-					this.compileDisplayList(var1);
-				}
-
-				if(this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F) {
-					if(this.rotationPointX == 0.0F && this.rotationPointY == 0.0F && this.rotationPointZ == 0.0F) {
-						GL11.glCallList(this.displayList);
-					} else {
-						GL11.glTranslatef(this.rotationPointX * var1, this.rotationPointY * var1, this.rotationPointZ * var1);
-						GL11.glCallList(this.displayList);
-						GL11.glTranslatef(-this.rotationPointX * var1, -this.rotationPointY * var1, -this.rotationPointZ * var1);
-					}
-				} else {
-					GL11.glPushMatrix();
-					GL11.glTranslatef(this.rotationPointX * var1, this.rotationPointY * var1, this.rotationPointZ * var1);
-					if(this.rotateAngleZ != 0.0F) {
-						GL11.glRotatef(this.rotateAngleZ * (180.0F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
-					}
-
-					if(this.rotateAngleY != 0.0F) {
-						GL11.glRotatef(this.rotateAngleY * (180.0F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
-					}
-
-					if(this.rotateAngleX != 0.0F) {
-						GL11.glRotatef(this.rotateAngleX * (180.0F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
-					}
-
-					GL11.glCallList(this.displayList);
-					GL11.glPopMatrix();
-				}
-
-			}
-		}
-	}
-
-	public void renderWithRotation(float var1) {
-		if(!this.isHidden) {
-			if(this.showModel) {
-				if(!this.compiled) {
-					this.compileDisplayList(var1);
-				}
-
-				if(this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F) {
-					if(this.rotationPointX != 0.0F || this.rotationPointY != 0.0F || this.rotationPointZ != 0.0F) {
-						GL11.glTranslatef(this.rotationPointX * var1, this.rotationPointY * var1, this.rotationPointZ * var1);
-					}
-				} else {
-					GL11.glTranslatef(this.rotationPointX * var1, this.rotationPointY * var1, this.rotationPointZ * var1);
-					if(this.rotateAngleZ != 0.0F) {
-						GL11.glRotatef(this.rotateAngleZ * (180.0F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
-					}
-
-					if(this.rotateAngleY != 0.0F) {
-						GL11.glRotatef(this.rotateAngleY * (180.0F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
-					}
-
-					if(this.rotateAngleX != 0.0F) {
-						GL11.glRotatef(this.rotateAngleX * (180.0F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
-					}
-				}
-
-			}
-		}
-	}
-
-	private void compileDisplayList(float var1) {
+		float f17 = float1 + (float)integer4;
+		float f18 = float2 + (float)integer5;
+		float f19 = float3 + (float)integer6;
+		float f10 = float1 - float7;
+		float f11 = float2 - float7;
+		float f12 = float3 - float7;
+		f17 += float7;
+		f18 += float7;
+		f19 += float7;
+		if(this.mirror) {
+			float f20 = f17;
+			f17 = f10;
+			f10 = f20;
+		}
+
+		PositionTexureVertex positionTexureVertex29 = new PositionTexureVertex(f10, f11, f12, 0.0F, 0.0F);
+		PositionTexureVertex positionTexureVertex21 = new PositionTexureVertex(f17, f11, f12, 0.0F, 8.0F);
+		PositionTexureVertex positionTexureVertex22 = new PositionTexureVertex(f17, f18, f12, 8.0F, 8.0F);
+		PositionTexureVertex positionTexureVertex23 = new PositionTexureVertex(f10, f18, f12, 8.0F, 0.0F);
+		PositionTexureVertex positionTexureVertex24 = new PositionTexureVertex(f10, f11, f19, 0.0F, 0.0F);
+		PositionTexureVertex positionTexureVertex25 = new PositionTexureVertex(f17, f11, f19, 0.0F, 8.0F);
+		PositionTexureVertex positionTexureVertex26 = new PositionTexureVertex(f17, f18, f19, 8.0F, 8.0F);
+		PositionTexureVertex positionTexureVertex27 = new PositionTexureVertex(f10, f18, f19, 8.0F, 0.0F);
+		this.corners[0] = positionTexureVertex29;
+		this.corners[1] = positionTexureVertex21;
+		this.corners[2] = positionTexureVertex22;
+		this.corners[3] = positionTexureVertex23;
+		this.corners[4] = positionTexureVertex24;
+		this.corners[5] = positionTexureVertex25;
+		this.corners[6] = positionTexureVertex26;
+		this.corners[7] = positionTexureVertex27;
+		this.faces[0] = new TexturedQuad(new PositionTexureVertex[]{positionTexureVertex25, positionTexureVertex21, positionTexureVertex22, positionTexureVertex26}, this.textureOffsetX + integer6 + integer4, this.textureOffsetY + integer6, this.textureOffsetX + integer6 + integer4 + integer6, this.textureOffsetY + integer6 + integer5, integer8, integer9);
+		this.faces[1] = new TexturedQuad(new PositionTexureVertex[]{positionTexureVertex29, positionTexureVertex24, positionTexureVertex27, positionTexureVertex23}, this.textureOffsetX + 0, this.textureOffsetY + integer6, this.textureOffsetX + integer6, this.textureOffsetY + integer6 + integer5, integer8, integer9);
+		this.faces[2] = new TexturedQuad(new PositionTexureVertex[]{positionTexureVertex25, positionTexureVertex24, positionTexureVertex29, positionTexureVertex21}, this.textureOffsetX + integer6, this.textureOffsetY + 0, this.textureOffsetX + integer6 + integer4, this.textureOffsetY + integer6, integer8, integer9);
+		this.faces[3] = new TexturedQuad(new PositionTexureVertex[]{positionTexureVertex22, positionTexureVertex23, positionTexureVertex27, positionTexureVertex26}, this.textureOffsetX + integer6 + integer4, this.textureOffsetY + 0, this.textureOffsetX + integer6 + integer4 + integer4, this.textureOffsetY + integer6, integer8, integer9);
+		this.faces[4] = new TexturedQuad(new PositionTexureVertex[]{positionTexureVertex21, positionTexureVertex29, positionTexureVertex23, positionTexureVertex22}, this.textureOffsetX + integer6, this.textureOffsetY + integer6, this.textureOffsetX + integer6 + integer4, this.textureOffsetY + integer6 + integer5, integer8, integer9);
+		this.faces[5] = new TexturedQuad(new PositionTexureVertex[]{positionTexureVertex24, positionTexureVertex25, positionTexureVertex26, positionTexureVertex27}, this.textureOffsetX + integer6 + integer4 + integer6, this.textureOffsetY + integer6, this.textureOffsetX + integer6 + integer4 + integer6 + integer4, this.textureOffsetY + integer6 + integer5, integer8, integer9);
+		if(this.mirror) {
+			for(int i28 = 0; i28 < this.faces.length; ++i28) {
+				this.faces[i28].flipFace();
+			}
+		}
+
+	}
+
+	public void setRotationPoint(float float1, float float2, float float3) {
+		this.rotationPointX = float1;
+		this.rotationPointY = float2;
+		this.rotationPointZ = float3;
+	}
+
+	public void render(float float1) {
+		if(!this.isHidden && this.showModel) {
+			if(!this.compiled) {
+				this.compileDisplayList(float1);
+			}
+
+			if(this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F) {
+				if(this.rotationPointX == 0.0F && this.rotationPointY == 0.0F && this.rotationPointZ == 0.0F) {
+					GL11.glCallList(this.displayList);
+				} else {
+					GL11.glTranslatef(this.rotationPointX * float1, this.rotationPointY * float1, this.rotationPointZ * float1);
+					GL11.glCallList(this.displayList);
+					GL11.glTranslatef(-this.rotationPointX * float1, -this.rotationPointY * float1, -this.rotationPointZ * float1);
+				}
+			} else {
+				GL11.glPushMatrix();
+				GL11.glTranslatef(this.rotationPointX * float1, this.rotationPointY * float1, this.rotationPointZ * float1);
+				if(this.rotateAngleZ != 0.0F) {
+					GL11.glRotatef(this.rotateAngleZ * 57.295776F, 0.0F, 0.0F, 1.0F);
+				}
+
+				if(this.rotateAngleY != 0.0F) {
+					GL11.glRotatef(this.rotateAngleY * 57.295776F, 0.0F, 1.0F, 0.0F);
+				}
+
+				if(this.rotateAngleX != 0.0F) {
+					GL11.glRotatef(this.rotateAngleX * 57.295776F, 1.0F, 0.0F, 0.0F);
+				}
+
+				GL11.glCallList(this.displayList);
+				GL11.glPopMatrix();
+			}
+		}
+
+	}
+
+	public void func_11978_0QKT3xm998dLH60L19HqO3EUJs5HjELk2UIGifv4D843kdr3JB8CqrJxup6e(float float1) {
+		this.renderWithRotation(float1, false);
+	}
+
+	public void renderWithRotation(float float1, boolean boolean2) {
+		if(!this.isHidden && this.showModel || boolean2) {
+			if(!this.compiled && !this.isHidden && this.showModel) {
+				this.compileDisplayList(float1);
+			}
+
+			if(this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F) {
+				if(this.rotationPointX != 0.0F || this.rotationPointY != 0.0F || this.rotationPointZ != 0.0F) {
+					GL11.glTranslatef(this.rotationPointX * float1, this.rotationPointY * float1, this.rotationPointZ * float1);
+				}
+			} else {
+				GL11.glTranslatef(this.rotationPointX * float1, this.rotationPointY * float1, this.rotationPointZ * float1);
+				if(this.rotateAngleZ != 0.0F) {
+					GL11.glRotatef(this.rotateAngleZ * 57.295776F, 0.0F, 0.0F, 1.0F);
+				}
+
+				if(this.rotateAngleY != 0.0F) {
+					GL11.glRotatef(this.rotateAngleY * 57.295776F, 0.0F, 1.0F, 0.0F);
+				}
+
+				if(this.rotateAngleX != 0.0F) {
+					GL11.glRotatef(this.rotateAngleX * 57.295776F, 1.0F, 0.0F, 0.0F);
+				}
+			}
+		}
+
+	}
+
+	private void compileDisplayList(float float1) {
 		this.displayList = GLAllocation.generateDisplayLists(1);
 		GL11.glNewList(this.displayList, GL11.GL_COMPILE);
-		Tessellator var2 = Tessellator.instance;
+		Tessellator tessellator2 = Tessellator.instance;
 
-		for(int var3 = 0; var3 < this.faces.length; ++var3) {
-			this.faces[var3].draw(var2, var1);
+		for(int i3 = 0; i3 < this.faces.length; ++i3) {
+			this.faces[i3].draw(tessellator2, float1, true);
 		}
 
 		GL11.glEndList();
--- net/minecraft/src/ModelChicken.java
+++ net/minecraft/src/ModelChicken.java
@@ -11,56 +11,56 @@
 	public ModelRenderer chin;
 
 	public ModelChicken() {
-		byte var1 = 16;
+		byte b1 = 16;
 		this.head = new ModelRenderer(0, 0);
 		this.head.addBox(-2.0F, -6.0F, -2.0F, 4, 6, 3, 0.0F);
-		this.head.setRotationPoint(0.0F, (float)(-1 + var1), -4.0F);
+		this.head.setRotationPoint(0.0F, (float)(-1 + b1), -4.0F);
 		this.bill = new ModelRenderer(14, 0);
 		this.bill.addBox(-2.0F, -4.0F, -4.0F, 4, 2, 2, 0.0F);
-		this.bill.setRotationPoint(0.0F, (float)(-1 + var1), -4.0F);
+		this.bill.setRotationPoint(0.0F, (float)(-1 + b1), -4.0F);
 		this.chin = new ModelRenderer(14, 4);
 		this.chin.addBox(-1.0F, -2.0F, -3.0F, 2, 2, 2, 0.0F);
-		this.chin.setRotationPoint(0.0F, (float)(-1 + var1), -4.0F);
+		this.chin.setRotationPoint(0.0F, (float)(-1 + b1), -4.0F);
 		this.body = new ModelRenderer(0, 9);
 		this.body.addBox(-3.0F, -4.0F, -3.0F, 6, 8, 6, 0.0F);
-		this.body.setRotationPoint(0.0F, (float)(0 + var1), 0.0F);
+		this.body.setRotationPoint(0.0F, (float)(0 + b1), 0.0F);
 		this.rightLeg = new ModelRenderer(26, 0);
 		this.rightLeg.addBox(-1.0F, 0.0F, -3.0F, 3, 5, 3);
-		this.rightLeg.setRotationPoint(-2.0F, (float)(3 + var1), 1.0F);
+		this.rightLeg.setRotationPoint(-2.0F, (float)(3 + b1), 1.0F);
 		this.leftLeg = new ModelRenderer(26, 0);
 		this.leftLeg.addBox(-1.0F, 0.0F, -3.0F, 3, 5, 3);
-		this.leftLeg.setRotationPoint(1.0F, (float)(3 + var1), 1.0F);
+		this.leftLeg.setRotationPoint(1.0F, (float)(3 + b1), 1.0F);
 		this.rightWing = new ModelRenderer(24, 13);
 		this.rightWing.addBox(0.0F, 0.0F, -3.0F, 1, 4, 6);
-		this.rightWing.setRotationPoint(-4.0F, (float)(-3 + var1), 0.0F);
+		this.rightWing.setRotationPoint(-4.0F, (float)(-3 + b1), 0.0F);
 		this.leftWing = new ModelRenderer(24, 13);
 		this.leftWing.addBox(-1.0F, 0.0F, -3.0F, 1, 4, 6);
-		this.leftWing.setRotationPoint(4.0F, (float)(-3 + var1), 0.0F);
-	}
-
-	public void render(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.setRotationAngles(var1, var2, var3, var4, var5, var6);
-		this.head.render(var6);
-		this.bill.render(var6);
-		this.chin.render(var6);
-		this.body.render(var6);
-		this.rightLeg.render(var6);
-		this.leftLeg.render(var6);
-		this.rightWing.render(var6);
-		this.leftWing.render(var6);
-	}
-
-	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.head.rotateAngleX = -(var5 / (180.0F / (float)Math.PI));
-		this.head.rotateAngleY = var4 / (180.0F / (float)Math.PI);
+		this.leftWing.setRotationPoint(4.0F, (float)(-3 + b1), 0.0F);
+	}
+
+	public void render(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.setRotationAngles(float1, float2, float3, float4, float5, float6);
+		this.head.render(float6);
+		this.bill.render(float6);
+		this.chin.render(float6);
+		this.body.render(float6);
+		this.rightLeg.render(float6);
+		this.leftLeg.render(float6);
+		this.rightWing.render(float6);
+		this.leftWing.render(float6);
+	}
+
+	public void setRotationAngles(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.head.rotateAngleX = -(float5 / 57.295776F);
+		this.head.rotateAngleY = float4 / 57.295776F;
 		this.bill.rotateAngleX = this.head.rotateAngleX;
 		this.bill.rotateAngleY = this.head.rotateAngleY;
 		this.chin.rotateAngleX = this.head.rotateAngleX;
 		this.chin.rotateAngleY = this.head.rotateAngleY;
-		this.body.rotateAngleX = (float)Math.PI * 0.5F;
-		this.rightLeg.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.4F * var2;
-		this.leftLeg.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.4F * var2;
-		this.rightWing.rotateAngleZ = var3;
-		this.leftWing.rotateAngleZ = -var3;
+		this.body.rotateAngleX = (float)Math.PI / 2F;
+		this.rightLeg.rotateAngleX = MathHelper.cos(float1 * 0.6662F) * 1.4F * float2;
+		this.leftLeg.rotateAngleX = MathHelper.cos(float1 * 0.6662F + (float)Math.PI) * 1.4F * float2;
+		this.rightWing.rotateAngleZ = float3;
+		this.leftWing.rotateAngleZ = -float3;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BaseMod.java
@@ -1,0 +1,75 @@
+package net.minecraft.src;
+
+import java.util.List;
+import java.util.Map;
+import java.util.Random;
+
+import net.minecraft.client.Minecraft;
+
+public class BaseMod {
+	public void AddEntityID() {
+	}
+
+	public int AddFuel(int integer) {
+		return 0;
+	}
+
+	public void AddRecipes(CraftingManager lb) {
+	}
+
+	public void AddRenderer(Map map) {
+	}
+
+	public int AddSmelting(int integer) {
+		return -1;
+	}
+
+	@Deprecated
+	public void func_9842_20fGD696E1rrnKO3zQ6ej3jllKU462gK6r1jhOj9DZ6R475673aN5KvNgDSo(World vg, Random random, int integer3, int integer4) {
+		this.func_9838_2Kw4R7ZOnb1rE7OLoL4M99KgoznAH38Zmydk544lS35ACgh9089lk2p3Tb8a(vg, random, integer3, integer4);
+	}
+
+	public void func_9838_2Kw4R7ZOnb1rE7OLoL4M99KgoznAH38Zmydk544lS35ACgh9089lk2p3Tb8a(World vg, Random random, int integer3, int integer4) {
+	}
+
+	public void GenerateSurface(World vg, Random random, int integer3, int integer4) {
+	}
+
+	public GuiScreen OpenModGUI(EntityPlayerSP zc, Object object) {
+		return null;
+	}
+
+	public void OSDHook(Minecraft minecraft) {
+	}
+
+	public void RegisterBlocks(List list) {
+	}
+
+	public void RegisterTextureOverrides() {
+	}
+
+	public void RegisterAnimation(Minecraft minecraft) {
+	}
+
+	public void RegisterTileEntity() {
+	}
+
+	public int func_9844_54pM8s64ZMnaU952nGEh82Q57WO2N6jhc3lwdq8i55LCTqh9Z6CBI7mTN1xJ(int integer) {
+		return -1;
+	}
+
+	public int func_9849_7m6m13dn8LrG10h8c2Og50FZ5BadQ06sFis8fvT5TqNZ2cpOxQ56X340JqVC(int integer) {
+		return 0;
+	}
+
+	public String Version() {
+		return "1.0.0";
+	}
+
+	public String toString() {
+		return this.getClass().getName() + " " + this.Version();
+	}
+
+	public void func_9851_9VTXo56vuK02QP3b768P1531Ie7r9zZnEp8PN8XCM31YP2br8w7rWVX045H2() {
+	}
+}
--- net/minecraft/src/CanvasMojangLogo.java
+++ net/minecraft/src/CanvasMojangLogo.java
@@ -9,21 +9,21 @@
 import javax.imageio.ImageIO;
 
 class CanvasMojangLogo extends Canvas {
-	private BufferedImage logo;
+	private BufferedImage BufferedImage1;
 
 	public CanvasMojangLogo() {
 		try {
-			this.logo = ImageIO.read(PanelCrashReport.class.getResource("/gui/logo.png"));
-		} catch (IOException var2) {
+			this.BufferedImage1 = ImageIO.read(Ext1605Utils.func_12146_9P3TY758VM8951Z7q70WD5qYdKqLdB22jUqQNi8u6rFBU4uZnFfpCw0XU82v("/gui/logo.png"));
+		} catch (IOException iOException2) {
 		}
 
-		byte var1 = 100;
-		this.setPreferredSize(new Dimension(var1, var1));
-		this.setMinimumSize(new Dimension(var1, var1));
+		byte b1 = 100;
+		this.setPreferredSize(new Dimension(b1, b1));
+		this.setMinimumSize(new Dimension(b1, b1));
 	}
 
-	public void paint(Graphics var1) {
-		super.paint(var1);
-		var1.drawImage(this.logo, this.getWidth() / 2 - this.logo.getWidth() / 2, 32, (ImageObserver)null);
+	public void paint(Graphics graphics) {
+		super.paint(graphics);
+		graphics.drawImage(this.BufferedImage1, this.getWidth() / 2 - this.BufferedImage1.getWidth() / 2, 32, (ImageObserver)null);
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockSnowBlockOld.java
@@ -1,0 +1,26 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockSnowBlockOld extends BlockOld {
+	protected BlockSnowBlockOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.craftedSnow);
+		this.setTickOnLoad(true);
+	}
+
+	public int idDropped(int integer, Random random) {
+		return Item.snowball.shiftedIndex;
+	}
+
+	public int quantityDropped(Random random) {
+		return 4;
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(vg.getSavedLightValue(EnumSkyBlock.Block, integer2, integer3, integer4) > 11) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/Base64.java
@@ -1,0 +1,49 @@
+package net.minecraft.src;
+
+import java.util.Objects;
+
+public class Base64 {
+	public static Encoder getEncoder() {
+		return Encoder.RFC4648;
+	}
+
+	public static Encoder getUrlEncoder() {
+		return Encoder.RFC4648_URLSAFE;
+	}
+
+	public static Encoder getMimeEncoder() {
+		return Encoder.RFC2045;
+	}
+
+	public static Encoder getMimeEncoder(int integer, byte[] arr) {
+		Objects.requireNonNull(arr);
+		int[] i2 = Decoder.fromBase64();
+		byte[] b3 = arr;
+		int i4 = arr.length;
+
+		for(int i5 = 0; i5 < i4; ++i5) {
+			byte b6 = b3[i5];
+			if(i2[b6 & 255] != -1) {
+				throw new IllegalArgumentException("Illegal base64 line separator character 0x" + Integer.toString(b6, 16));
+			}
+		}
+
+		if(integer <= 0) {
+			return Encoder.RFC4648;
+		} else {
+			return new Encoder(false, arr, integer >> 2 << 2, true);
+		}
+	}
+
+	public static Decoder getDecoder() {
+		return Decoder.RFC4648;
+	}
+
+	public static Decoder getUrlDecoder() {
+		return Decoder.RFC4648_URLSAFE;
+	}
+
+	public static Decoder getMimeDecoder() {
+		return Decoder.RFC2045;
+	}
+}
--- net/minecraft/src/NBTTagString.java
+++ net/minecraft/src/NBTTagString.java
@@ -10,19 +10,19 @@
 	public NBTTagString() {
 	}
 
-	public NBTTagString(String var1) {
-		this.stringValue = var1;
-		if(var1 == null) {
+	public NBTTagString(String value) {
+		this.stringValue = value;
+		if(value == null) {
 			throw new IllegalArgumentException("Empty string not allowed");
 		}
 	}
 
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeUTF(this.stringValue);
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeUTF(this.stringValue);
 	}
 
-	void readTagContents(DataInput var1) throws IOException {
-		this.stringValue = var1.readUTF();
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.stringValue = dataInput.readUTF();
 	}
 
 	public byte getType() {
--- net/minecraft/src/ItemSpade.java
+++ net/minecraft/src/ItemSpade.java
@@ -3,11 +3,11 @@
 public class ItemSpade extends ItemTool {
 	private static Block[] blocksEffectiveAgainst = new Block[]{Block.grass, Block.dirt, Block.sand, Block.gravel, Block.snow, Block.blockSnow, Block.blockClay};
 
-	public ItemSpade(int var1, int var2) {
-		super(var1, 1, var2, blocksEffectiveAgainst);
+	public ItemSpade(int itemID, int material) {
+		super(itemID, 1, material, blocksEffectiveAgainst);
 	}
 
-	public boolean canHarvestBlock(Block var1) {
-		return var1 == Block.snow ? true : var1 == Block.blockSnow;
+	public boolean canHarvestBlock(Block block) {
+		return block == Block.snow ? true : block == Block.blockSnow;
 	}
 }
--- /dev/null
+++ net/minecraft/src/HandlerPlayDemoUnknownClass3.java
@@ -1,0 +1,18 @@
+package net.minecraft.src;
+
+public class HandlerPlayDemoUnknownClass3 {
+	public long field_11851_6Isyx6ibE614572UHOY1hG1DI1xi348XJ8wDp59Qzv9n59hSYsTm088vzK93;
+	public String field_11850_3IpS3kF2uJayWkIy0xX4RkoL010nzpWr3TkCWy49CYtw3Y7pflXVVkOihgHc = "";
+
+	public HandlerPlayDemoUnknownClass3(long long1, String string) {
+		this.field_11851_6Isyx6ibE614572UHOY1hG1DI1xi348XJ8wDp59Qzv9n59hSYsTm088vzK93 = long1;
+		this.field_11850_3IpS3kF2uJayWkIy0xX4RkoL010nzpWr3TkCWy49CYtw3Y7pflXVVkOihgHc = string;
+	}
+
+	public void func_11849_8m6693d8dhYR0w4HrTryNkH00xQWV6oS9Yjo7ME4Oro3F23Zt91YucB1PvA1(EntityOtherPlayerMPUnknownClass yc) {
+		if(this.field_11850_3IpS3kF2uJayWkIy0xX4RkoL010nzpWr3TkCWy49CYtw3Y7pflXVVkOihgHc.length() > 2 && this.field_11850_3IpS3kF2uJayWkIy0xX4RkoL010nzpWr3TkCWy49CYtw3Y7pflXVVkOihgHc.substring(0, 2).equals("dc")) {
+			InputHandler.mc.ingameGUI.addChatMessage("<" + yc.username + "> " + this.field_11850_3IpS3kF2uJayWkIy0xX4RkoL010nzpWr3TkCWy49CYtw3Y7pflXVVkOihgHc.substring(3));
+		}
+
+	}
+}
--- net/minecraft/src/ModelBoat.java
+++ net/minecraft/src/ModelBoat.java
@@ -9,33 +9,33 @@
 		this.boatSides[2] = new ModelRenderer(0, 0);
 		this.boatSides[3] = new ModelRenderer(0, 0);
 		this.boatSides[4] = new ModelRenderer(0, 0);
-		byte var1 = 24;
-		byte var2 = 6;
-		byte var3 = 20;
-		byte var4 = 4;
-		this.boatSides[0].addBox((float)(-var1 / 2), (float)(-var3 / 2 + 2), -3.0F, var1, var3 - 4, 4, 0.0F);
-		this.boatSides[0].setRotationPoint(0.0F, (float)(0 + var4), 0.0F);
-		this.boatSides[1].addBox((float)(-var1 / 2 + 2), (float)(-var2 - 1), -1.0F, var1 - 4, var2, 2, 0.0F);
-		this.boatSides[1].setRotationPoint((float)(-var1 / 2 + 1), (float)(0 + var4), 0.0F);
-		this.boatSides[2].addBox((float)(-var1 / 2 + 2), (float)(-var2 - 1), -1.0F, var1 - 4, var2, 2, 0.0F);
-		this.boatSides[2].setRotationPoint((float)(var1 / 2 - 1), (float)(0 + var4), 0.0F);
-		this.boatSides[3].addBox((float)(-var1 / 2 + 2), (float)(-var2 - 1), -1.0F, var1 - 4, var2, 2, 0.0F);
-		this.boatSides[3].setRotationPoint(0.0F, (float)(0 + var4), (float)(-var3 / 2 + 1));
-		this.boatSides[4].addBox((float)(-var1 / 2 + 2), (float)(-var2 - 1), -1.0F, var1 - 4, var2, 2, 0.0F);
-		this.boatSides[4].setRotationPoint(0.0F, (float)(0 + var4), (float)(var3 / 2 - 1));
-		this.boatSides[0].rotateAngleX = (float)Math.PI * 0.5F;
-		this.boatSides[1].rotateAngleY = (float)Math.PI * 3.0F / 2.0F;
-		this.boatSides[2].rotateAngleY = (float)Math.PI * 0.5F;
+		byte b1 = 24;
+		byte b2 = 6;
+		byte b3 = 20;
+		byte b4 = 4;
+		this.boatSides[0].addBox((float)(-b1 / 2), (float)(-b3 / 2 + 2), -3.0F, b1, b3 - 4, 4, 0.0F);
+		this.boatSides[0].setRotationPoint(0.0F, (float)(0 + b4), 0.0F);
+		this.boatSides[1].addBox((float)(-b1 / 2 + 2), (float)(-b2 - 1), -1.0F, b1 - 4, b2, 2, 0.0F);
+		this.boatSides[1].setRotationPoint((float)(-b1 / 2 + 1), (float)(0 + b4), 0.0F);
+		this.boatSides[2].addBox((float)(-b1 / 2 + 2), (float)(-b2 - 1), -1.0F, b1 - 4, b2, 2, 0.0F);
+		this.boatSides[2].setRotationPoint((float)(b1 / 2 - 1), (float)(0 + b4), 0.0F);
+		this.boatSides[3].addBox((float)(-b1 / 2 + 2), (float)(-b2 - 1), -1.0F, b1 - 4, b2, 2, 0.0F);
+		this.boatSides[3].setRotationPoint(0.0F, (float)(0 + b4), (float)(-b3 / 2 + 1));
+		this.boatSides[4].addBox((float)(-b1 / 2 + 2), (float)(-b2 - 1), -1.0F, b1 - 4, b2, 2, 0.0F);
+		this.boatSides[4].setRotationPoint(0.0F, (float)(0 + b4), (float)(b3 / 2 - 1));
+		this.boatSides[0].rotateAngleX = (float)Math.PI / 2F;
+		this.boatSides[1].rotateAngleY = 4.712389F;
+		this.boatSides[2].rotateAngleY = (float)Math.PI / 2F;
 		this.boatSides[3].rotateAngleY = (float)Math.PI;
 	}
 
-	public void render(float var1, float var2, float var3, float var4, float var5, float var6) {
-		for(int var7 = 0; var7 < 5; ++var7) {
-			this.boatSides[var7].render(var6);
+	public void render(float float1, float float2, float float3, float float4, float float5, float float6) {
+		for(int i7 = 0; i7 < 5; ++i7) {
+			this.boatSides[i7].render(float6);
 		}
 
 	}
 
-	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
+	public void setRotationAngles(float float1, float float2, float float3, float float4, float float5, float float6) {
 	}
 }
--- /dev/null
+++ net/minecraft/src/DecInputStream.java
@@ -1,0 +1,147 @@
+package net.minecraft.src;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+class DecInputStream extends InputStream {
+	private final InputStream is;
+	private final boolean isMIME;
+	private final int[] base64;
+	private int bits = 0;
+	private int nextin = 18;
+	private int nextout = -8;
+	private boolean eof = false;
+	private boolean closed = false;
+	private byte[] sbBuf = new byte[1];
+
+	DecInputStream(InputStream inputStream, int[] arr, boolean boolean3) {
+		this.is = inputStream;
+		this.base64 = arr;
+		this.isMIME = boolean3;
+	}
+
+	public int read() throws IOException {
+		return this.read(this.sbBuf, 0, 1) == -1 ? -1 : this.sbBuf[0] & 255;
+	}
+
+	public int read(byte[] arr, int integer2, int integer3) throws IOException {
+		if(this.closed) {
+			throw new IOException("Stream is closed");
+		} else if(this.eof && this.nextout < 0) {
+			return -1;
+		} else if(integer2 >= 0 && integer3 >= 0 && integer3 <= arr.length - integer2) {
+			int i4 = integer2;
+			if(this.nextout >= 0) {
+				do {
+					if(integer3 == 0) {
+						return integer2 - i4;
+					}
+
+					arr[integer2++] = (byte)(this.bits >> this.nextout);
+					--integer3;
+					this.nextout -= 8;
+				} while(this.nextout >= 0);
+
+				this.bits = 0;
+			}
+
+			while(true) {
+				if(integer3 > 0) {
+					int i5 = this.is.read();
+					if(i5 == -1) {
+						this.eof = true;
+						if(this.nextin != 18) {
+							if(this.nextin == 12) {
+								throw new IOException("Base64 stream has one un-decoded dangling byte.");
+							}
+
+							arr[integer2++] = (byte)(this.bits >> 16);
+							--integer3;
+							if(this.nextin == 0) {
+								if(integer3 == 0) {
+									this.bits >>= 8;
+									this.nextout = 0;
+								} else {
+									arr[integer2++] = (byte)(this.bits >> 8);
+								}
+							}
+						}
+
+						if(integer2 == i4) {
+							return -1;
+						}
+
+						return integer2 - i4;
+					}
+
+					if(i5 != 61) {
+						if((i5 = this.base64[i5]) == -1) {
+							if(!this.isMIME) {
+								throw new IOException("Illegal base64 character " + Integer.toString(i5, 16));
+							}
+							continue;
+						}
+
+						this.bits |= i5 << this.nextin;
+						if(this.nextin != 0) {
+							this.nextin -= 6;
+							continue;
+						}
+
+						this.nextin = 18;
+						this.nextout = 16;
+
+						while(this.nextout >= 0) {
+							arr[integer2++] = (byte)(this.bits >> this.nextout);
+							--integer3;
+							this.nextout -= 8;
+							if(integer3 == 0 && this.nextout >= 0) {
+								return integer2 - i4;
+							}
+						}
+
+						this.bits = 0;
+						continue;
+					}
+
+					if(this.nextin == 18 || this.nextin == 12 || this.nextin == 6 && this.is.read() != 61) {
+						throw new IOException("Illegal base64 ending sequence:" + this.nextin);
+					}
+
+					arr[integer2++] = (byte)(this.bits >> 16);
+					--integer3;
+					if(this.nextin == 0) {
+						if(integer3 == 0) {
+							this.bits >>= 8;
+							this.nextout = 0;
+						} else {
+							arr[integer2++] = (byte)(this.bits >> 8);
+						}
+					}
+
+					this.eof = true;
+				}
+
+				return integer2 - i4;
+			}
+		} else {
+			throw new IndexOutOfBoundsException();
+		}
+	}
+
+	public int available() throws IOException {
+		if(this.closed) {
+			throw new IOException("Stream is closed");
+		} else {
+			return this.is.available();
+		}
+	}
+
+	public void close() throws IOException {
+		if(!this.closed) {
+			this.closed = true;
+			this.is.close();
+		}
+
+	}
+}
--- net/minecraft/src/ItemFood.java
+++ net/minecraft/src/ItemFood.java
@@ -3,15 +3,15 @@
 public class ItemFood extends Item {
 	private int healAmount;
 
-	public ItemFood(int var1, int var2) {
-		super(var1);
-		this.healAmount = var2;
+	public ItemFood(int itemID, int healAmount) {
+		super(itemID);
+		this.healAmount = healAmount;
 		this.maxStackSize = 1;
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		--var1.stackSize;
-		var3.heal(this.healAmount);
-		return var1;
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		--itemStack.stackSize;
+		entityPlayer.heal(this.healAmount);
+		return itemStack;
 	}
 }
--- net/minecraft/src/RenderBlocks.java
+++ net/minecraft/src/RenderBlocks.java
@@ -8,1895 +8,2310 @@
 	private boolean flipTexture = false;
 	private boolean renderAllFaces = false;
 
-	public RenderBlocks(IBlockAccess var1) {
-		this.blockAccess = var1;
+	public RenderBlocks(IBlockAccess blockAccess) {
+		this.blockAccess = blockAccess;
 	}
 
 	public RenderBlocks() {
 	}
 
-	public void renderBlockUsingTexture(Block var1, int var2, int var3, int var4, int var5) {
-		this.overrideBlockTexture = var5;
-		this.renderBlockByRenderType(var1, var2, var3, var4);
+	public void renderBlockUsingTexture(Block block, int integer2, int integer3, int integer4, int integer5) {
+		this.overrideBlockTexture = integer5;
+		this.renderBlockByRenderType(block, integer2, integer3, integer4);
 		this.overrideBlockTexture = -1;
 	}
 
-	public boolean renderBlockByRenderType(Block var1, int var2, int var3, int var4) {
-		int var5 = var1.getRenderType();
-		var1.setBlockBoundsBasedOnState(this.blockAccess, var2, var3, var4);
-		return var5 == 0 ? this.renderStandardBlock(var1, var2, var3, var4) : (var5 == 4 ? this.renderBlockFluids(var1, var2, var3, var4) : (var5 == 13 ? this.renderBlockCactus(var1, var2, var3, var4) : (var5 == 1 ? this.renderBlockReed(var1, var2, var3, var4) : (var5 == 6 ? this.renderBlockCrops(var1, var2, var3, var4) : (var5 == 2 ? this.renderBlockTorch(var1, var2, var3, var4) : (var5 == 3 ? this.renderBlockFire(var1, var2, var3, var4) : (var5 == 5 ? this.renderBlockRedstoneWire(var1, var2, var3, var4) : (var5 == 8 ? this.renderBlockLadder(var1, var2, var3, var4) : (var5 == 7 ? this.renderBlockDoor(var1, var2, var3, var4) : (var5 == 9 ? this.renderBlockMinecartTrack(var1, var2, var3, var4) : (var5 == 10 ? this.renderBlockStairs(var1, var2, var3, var4) : (var5 == 11 ? this.renderBlockFence(var1, var2, var3, var4) : (var5 == 12 ? this.renderBlockLever(var1, var2, var3, var4) : false)))))))))))));
-	}
-
-	public boolean renderBlockTorch(Block var1, int var2, int var3, int var4) {
-		int var5 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-		Tessellator var6 = Tessellator.instance;
-		float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		if(Block.lightValue[var1.blockID] > 0) {
-			var7 = 1.0F;
-		}
-
-		var6.setColorOpaque_F(var7, var7, var7);
-		double var8 = (double)0.4F;
-		double var10 = 0.5D - var8;
-		double var12 = (double)0.2F;
-		if(var5 == 1) {
-			this.renderTorchAtAngle(var1, (double)var2 - var10, (double)var3 + var12, (double)var4, -var8, 0.0D);
-		} else if(var5 == 2) {
-			this.renderTorchAtAngle(var1, (double)var2 + var10, (double)var3 + var12, (double)var4, var8, 0.0D);
-		} else if(var5 == 3) {
-			this.renderTorchAtAngle(var1, (double)var2, (double)var3 + var12, (double)var4 - var10, 0.0D, -var8);
-		} else if(var5 == 4) {
-			this.renderTorchAtAngle(var1, (double)var2, (double)var3 + var12, (double)var4 + var10, 0.0D, var8);
+	public boolean renderBlockByRenderType(Block block, int x, int y, int z) {
+		int i5 = block.getRenderType();
+		block.setBlockBoundsBasedOnState(this.blockAccess, x, y, z);
+		switch(i5) {
+		case -1:
+			return true;
+		case 0:
+		default:
+			return this.renderStandardBlock(block, x, y, z);
+		case 1:
+			return this.renderBlockReed(block, x, y, z);
+		case 2:
+			return this.renderBlockTorch(block, x, y, z);
+		case 3:
+			return this.renderBlockFire(block, x, y, z);
+		case 4:
+			return this.renderBlockFluids(block, x, y, z);
+		case 5:
+			return this.renderBlockRedstoneWire(block, x, y, z);
+		case 6:
+			return this.renderBlockCrops(block, x, y, z);
+		case 7:
+			return this.renderBlockDoor(block, x, y, z);
+		case 8:
+			return this.renderBlockLadder(block, x, y, z);
+		case 9:
+			return this.renderBlockMinecartTrack(block, x, y, z);
+		case 10:
+			return this.renderBlockStairs(block, x, y, z);
+		case 11:
+			return this.renderBlockFence(block, x, y, z);
+		case 12:
+			return this.renderBlockLever(block, x, y, z);
+		case 13:
+			return this.renderBlockCactus(block, x, y, z);
+		case 14:
+			return this.renderBlockEssenceFountain(block, x, y, z, false);
+		}
+	}
+
+	private boolean renderBlockEssenceFountain(Block pb, int integer2, int integer3, int integer4, boolean boolean5) {
+		Tessellator tessellator6 = Tessellator.instance;
+		byte b7 = 1;
+		byte b8 = 0;
+		float f9 = 1.0F;
+		if(!boolean5) {
+			f9 = pb.getRenderSideBrightness(this.blockAccess, integer2, integer3 - 1, integer4);
+		}
+
+		tessellator6.setColorOpaque_F(f9, f9, f9);
+		double d10 = ((double)b7 * 16.0D + 1.0D) / 256.0D;
+		double d12 = ((double)b7 * 16.0D + 15.0D - 0.01D) / 256.0D;
+		double d14 = ((double)b8 * 16.0D + 1.0D) / 512.0D;
+		double d16 = ((double)b8 * 16.0D + 15.0D - 0.01D) / 512.0D;
+		double d18 = (double)integer2 + 0.0625D;
+		double d20 = (double)integer2 + 0.9375D;
+		double d22 = (double)integer4 + 0.0625D;
+		double d24 = (double)integer4 + 0.9375D;
+		tessellator6.addVertexWithUV(d18, (double)integer3, d24, d10, d16);
+		tessellator6.addVertexWithUV(d18, (double)integer3, d22, d10, d14);
+		tessellator6.addVertexWithUV(d20, (double)integer3, d22, d12, d14);
+		tessellator6.addVertexWithUV(d20, (double)integer3, d24, d12, d16);
+		d10 = ((double)b7 * 16.0D + 0.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 16.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 0.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 16.0D - 0.01D) / 512.0D;
+		d18 = (double)(integer2 + 1);
+		d20 = (double)integer3 + 0.0625D;
+		d22 = (double)(integer4 + 1);
+		tessellator6.addVertexWithUV((double)integer2, d20, d22, d10, d16);
+		tessellator6.addVertexWithUV((double)integer2, d20, (double)integer4, d10, d14);
+		tessellator6.addVertexWithUV(d18, d20, (double)integer4, d12, d14);
+		tessellator6.addVertexWithUV(d18, d20, d22, d12, d16);
+		if(!boolean5) {
+			f9 = pb.getRenderSideBrightness(this.blockAccess, integer2, integer3, integer4 - 1);
+		}
+
+		tessellator6.setColorOpaque_F(f9, f9, f9);
+		d10 = ((double)b7 * 16.0D + 1.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 4.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 0.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 16.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2;
+		d20 = (double)(integer2 + 1);
+		d22 = (double)integer3 + 0.0625D;
+		d24 = (double)integer3 + 0.25D;
+		double d26 = (double)integer4;
+		tessellator6.addVertexWithUV(d18, d24, d26, d10, d16);
+		tessellator6.addVertexWithUV(d20, d24, d26, d10, d14);
+		tessellator6.addVertexWithUV(d20, d22, d26, d12, d14);
+		tessellator6.addVertexWithUV(d18, d22, d26, d12, d16);
+		d10 = ((double)b7 * 16.0D + 0.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 1.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 1.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 15.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2 + 0.0625D;
+		d20 = (double)integer2 + 0.9375D;
+		d22 = (double)integer3;
+		d24 = (double)integer3 + 0.0625D;
+		d26 = (double)integer4 + 0.0625D;
+		tessellator6.addVertexWithUV(d18, d24, d26, d10, d16);
+		tessellator6.addVertexWithUV(d20, d24, d26, d10, d14);
+		tessellator6.addVertexWithUV(d20, d22, d26, d12, d14);
+		tessellator6.addVertexWithUV(d18, d22, d26, d12, d16);
+		if(!boolean5) {
+			f9 = pb.getRenderSideBrightness(this.blockAccess, integer2, integer3, integer4 + 1);
+		}
+
+		tessellator6.setColorOpaque_F(f9, f9, f9);
+		d10 = ((double)b7 * 16.0D + 1.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 4.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 0.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 16.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2;
+		d20 = (double)(integer2 + 1);
+		d22 = (double)integer3 + 0.0625D;
+		d24 = (double)integer3 + 0.25D;
+		d26 = (double)(integer4 + 1);
+		tessellator6.addVertexWithUV(d20, d24, d26, d10, d16);
+		tessellator6.addVertexWithUV(d18, d24, d26, d10, d14);
+		tessellator6.addVertexWithUV(d18, d22, d26, d12, d14);
+		tessellator6.addVertexWithUV(d20, d22, d26, d12, d16);
+		d10 = ((double)b7 * 16.0D + 0.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 1.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 1.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 15.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2 + 0.0625D;
+		d20 = (double)integer2 + 0.9375D;
+		d22 = (double)integer3;
+		d24 = (double)integer3 + 0.0625D;
+		d26 = (double)integer4 + 0.9375D;
+		tessellator6.addVertexWithUV(d20, d24, d26, d10, d16);
+		tessellator6.addVertexWithUV(d18, d24, d26, d10, d14);
+		tessellator6.addVertexWithUV(d18, d22, d26, d12, d14);
+		tessellator6.addVertexWithUV(d20, d22, d26, d12, d16);
+		if(!boolean5) {
+			f9 = pb.getRenderSideBrightness(this.blockAccess, integer2 - 1, integer3, integer4);
+		}
+
+		tessellator6.setColorOpaque_F(f9, f9, f9);
+		d10 = ((double)b7 * 16.0D + 1.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 4.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 0.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 16.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2;
+		d20 = (double)integer3 + 0.0625D;
+		d22 = (double)integer3 + 0.25D;
+		d24 = (double)integer4;
+		d26 = (double)(integer4 + 1);
+		tessellator6.addVertexWithUV(d18, d22, d26, d10, d16);
+		tessellator6.addVertexWithUV(d18, d22, d24, d10, d14);
+		tessellator6.addVertexWithUV(d18, d20, d24, d12, d14);
+		tessellator6.addVertexWithUV(d18, d20, d26, d12, d16);
+		d10 = ((double)b7 * 16.0D + 1.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 4.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 0.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 16.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2 + 0.0625D;
+		d20 = (double)integer3;
+		d22 = (double)integer3 + 0.0625D;
+		d24 = (double)integer4 + 0.0625D;
+		d26 = (double)integer4 + 0.9375D;
+		tessellator6.addVertexWithUV(d18, d22, d26, d10, d16);
+		tessellator6.addVertexWithUV(d18, d22, d24, d10, d14);
+		tessellator6.addVertexWithUV(d18, d20, d24, d12, d14);
+		tessellator6.addVertexWithUV(d18, d20, d26, d12, d16);
+		if(!boolean5) {
+			f9 = pb.getRenderSideBrightness(this.blockAccess, integer2 + 1, integer3, integer4);
+		}
+
+		tessellator6.setColorOpaque_F(f9, f9, f9);
+		d10 = ((double)b7 * 16.0D + 1.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 4.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 0.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 16.0D - 0.01D) / 512.0D;
+		d18 = (double)(integer2 + 1);
+		d20 = (double)integer3 + 0.0625D;
+		d22 = (double)integer3 + 0.25D;
+		d24 = (double)integer4;
+		d26 = (double)(integer4 + 1);
+		tessellator6.addVertexWithUV(d18, d22, d24, d10, d16);
+		tessellator6.addVertexWithUV(d18, d22, d26, d10, d14);
+		tessellator6.addVertexWithUV(d18, d20, d26, d12, d14);
+		tessellator6.addVertexWithUV(d18, d20, d24, d12, d16);
+		d10 = ((double)b7 * 16.0D + 1.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 4.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 0.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 16.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2 + 0.9375D;
+		d20 = (double)integer3;
+		d22 = (double)integer3 + 0.0625D;
+		d24 = (double)integer4 + 0.0625D;
+		d26 = (double)integer4 + 0.9375D;
+		tessellator6.addVertexWithUV(d18, d22, d24, d10, d16);
+		tessellator6.addVertexWithUV(d18, d22, d26, d10, d14);
+		tessellator6.addVertexWithUV(d18, d20, d26, d12, d14);
+		tessellator6.addVertexWithUV(d18, d20, d24, d12, d16);
+		if(!boolean5) {
+			f9 = pb.getRenderSideBrightness(this.blockAccess, integer2, integer3 + 1, integer4);
+		}
+
+		tessellator6.setColorOpaque_F(f9, f9, f9);
+		d10 = ((double)b7 * 16.0D + 0.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 1.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 0.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 16.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2 + 0.0D;
+		d20 = (double)integer2 + 0.0625D;
+		d22 = (double)integer3 + 0.25D;
+		d24 = (double)integer4 + 0.0D;
+		d26 = (double)(integer4 + 1);
+		tessellator6.addVertexWithUV(d20, d22, d26, d10, d16);
+		tessellator6.addVertexWithUV(d20, d22, d24, d10, d14);
+		tessellator6.addVertexWithUV(d18, d22, d24, d12, d14);
+		tessellator6.addVertexWithUV(d18, d22, d26, d12, d16);
+		d10 = ((double)b7 * 16.0D + 0.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 1.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 0.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 16.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2 + 0.9375D;
+		d20 = (double)(integer2 + 1);
+		d22 = (double)integer3 + 0.25D;
+		d24 = (double)integer4 + 0.0D;
+		d26 = (double)(integer4 + 1);
+		tessellator6.addVertexWithUV(d20, d22, d26, d10, d16);
+		tessellator6.addVertexWithUV(d20, d22, d24, d10, d14);
+		tessellator6.addVertexWithUV(d18, d22, d24, d12, d14);
+		tessellator6.addVertexWithUV(d18, d22, d26, d12, d16);
+		d10 = ((double)b7 * 16.0D + 1.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 15.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 0.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 1.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2 + 0.0625D;
+		d20 = (double)integer2 + 0.9375D;
+		d22 = (double)integer3 + 0.25D;
+		d24 = (double)integer4 + 0.0D;
+		d26 = (double)integer4 + 0.0625D;
+		tessellator6.addVertexWithUV(d20, d22, d26, d10, d16);
+		tessellator6.addVertexWithUV(d20, d22, d24, d10, d14);
+		tessellator6.addVertexWithUV(d18, d22, d24, d12, d14);
+		tessellator6.addVertexWithUV(d18, d22, d26, d12, d16);
+		d10 = ((double)b7 * 16.0D + 1.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 15.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 0.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 1.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2 + 0.0625D;
+		d20 = (double)integer2 + 0.9375D;
+		d22 = (double)integer3 + 0.25D;
+		d24 = (double)integer4 + 0.9375D;
+		d26 = (double)(integer4 + 1);
+		tessellator6.addVertexWithUV(d20, d22, d26, d10, d16);
+		tessellator6.addVertexWithUV(d20, d22, d24, d10, d14);
+		tessellator6.addVertexWithUV(d18, d22, d24, d12, d14);
+		tessellator6.addVertexWithUV(d18, d22, d26, d12, d16);
+		d10 = ((double)b7 * 16.0D + 1.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 15.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 1.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 15.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2 + 0.0625D;
+		d20 = (double)integer2 + 0.9375D;
+		d22 = (double)integer3 + 0.125D;
+		d24 = (double)integer4 + 0.0625D;
+		d26 = (double)integer4 + 0.9375D;
+		tessellator6.addVertexWithUV(d20, d22, d26, d10, d16);
+		tessellator6.addVertexWithUV(d20, d22, d24, d10, d14);
+		tessellator6.addVertexWithUV(d18, d22, d24, d12, d14);
+		tessellator6.addVertexWithUV(d18, d22, d26, d12, d16);
+		if(!boolean5) {
+			f9 = Math.min(pb.getRenderSideBrightness(this.blockAccess, integer2, integer3 + 1, integer4 - 1), pb.getRenderSideBrightness(this.blockAccess, integer2, integer3 + 1, integer4));
+		}
+
+		tessellator6.setColorOpaque_F(f9, f9, f9);
+		d10 = ((double)b7 * 16.0D + 1.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 4.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 1.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 15.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2 + 0.0625D;
+		d20 = (double)integer2 + 0.9375D;
+		d22 = (double)integer3 + 0.125D;
+		d24 = (double)integer3 + 0.25D;
+		d26 = (double)integer4 + 0.9375D;
+		tessellator6.addVertexWithUV(d18, d24, d26, d10, d16);
+		tessellator6.addVertexWithUV(d20, d24, d26, d10, d14);
+		tessellator6.addVertexWithUV(d20, d22, d26, d12, d14);
+		tessellator6.addVertexWithUV(d18, d22, d26, d12, d16);
+		if(!boolean5) {
+			f9 = Math.min(pb.getRenderSideBrightness(this.blockAccess, integer2, integer3 + 1, integer4 + 1), pb.getRenderSideBrightness(this.blockAccess, integer2, integer3 + 1, integer4));
+		}
+
+		tessellator6.setColorOpaque_F(f9, f9, f9);
+		d10 = ((double)b7 * 16.0D + 1.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 4.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 1.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 15.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2 + 0.0625D;
+		d20 = (double)integer2 + 0.9375D;
+		d22 = (double)integer3 + 0.125D;
+		d24 = (double)integer3 + 0.25D;
+		d26 = (double)integer4 + 0.0625D;
+		tessellator6.addVertexWithUV(d20, d24, d26, d10, d16);
+		tessellator6.addVertexWithUV(d18, d24, d26, d10, d14);
+		tessellator6.addVertexWithUV(d18, d22, d26, d12, d14);
+		tessellator6.addVertexWithUV(d20, d22, d26, d12, d16);
+		if(!boolean5) {
+			f9 = Math.min(pb.getRenderSideBrightness(this.blockAccess, integer2 + 1, integer3 + 1, integer4), pb.getRenderSideBrightness(this.blockAccess, integer2, integer3 + 1, integer4));
+		}
+
+		tessellator6.setColorOpaque_F(f9, f9, f9);
+		d10 = ((double)b7 * 16.0D + 1.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 4.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 0.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 16.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2 + 0.9375D;
+		d20 = (double)integer3 + 0.125D;
+		d22 = (double)integer3 + 0.25D;
+		d24 = (double)integer4 + 0.0625D;
+		d26 = (double)integer4 + 0.9375D;
+		tessellator6.addVertexWithUV(d18, d22, d26, d10, d16);
+		tessellator6.addVertexWithUV(d18, d22, d24, d10, d14);
+		tessellator6.addVertexWithUV(d18, d20, d24, d12, d14);
+		tessellator6.addVertexWithUV(d18, d20, d26, d12, d16);
+		if(!boolean5) {
+			f9 = Math.min(pb.getRenderSideBrightness(this.blockAccess, integer2 - 1, integer3 + 1, integer4), pb.getRenderSideBrightness(this.blockAccess, integer2, integer3 + 1, integer4));
+		}
+
+		tessellator6.setColorOpaque_F(f9, f9, f9);
+		d10 = ((double)b7 * 16.0D + 1.0D) / 256.0D;
+		d12 = ((double)b7 * 16.0D + 4.0D - 0.01D) / 256.0D;
+		d14 = ((double)b8 * 16.0D + 0.0D) / 512.0D;
+		d16 = ((double)b8 * 16.0D + 16.0D - 0.01D) / 512.0D;
+		d18 = (double)integer2 + 0.0625D;
+		d20 = (double)integer3 + 0.125D;
+		d22 = (double)integer3 + 0.25D;
+		d24 = (double)integer4 + 0.0625D;
+		d26 = (double)integer4 + 0.9375D;
+		tessellator6.addVertexWithUV(d18, d22, d24, d10, d16);
+		tessellator6.addVertexWithUV(d18, d22, d26, d10, d14);
+		tessellator6.addVertexWithUV(d18, d20, d26, d12, d14);
+		tessellator6.addVertexWithUV(d18, d20, d24, d12, d16);
+		b7 = 13;
+		b8 = 12;
+		tessellator6.setColorOpaque_F(1.0F, 1.0F, 1.0F);
+		TileEntityEssenceFountain tileEntityEssenceFountain30 = boolean5 ? null : (TileEntityEssenceFountain)this.blockAccess.getBlockTileEntity(integer2, integer3, integer4);
+		if(!boolean5 && integer3 > 1) {
+			int i11 = this.blockAccess.getBlockId(integer2, integer3 - 1, integer4);
+			TileEntityEssenceFountain tileEntityEssenceFountain31 = (TileEntityEssenceFountain)this.blockAccess.getBlockTileEntity(integer2, integer3, integer4);
+			if(i11 == ExtBlocks.EssenceTransformer.blockID) {
+				tessellator6.setColorOpaque_F(0.2F, 1.0F, 0.2F);
+			} else if(i11 == ExtBlocks.EssenceCloner.blockID) {
+				tessellator6.setColorOpaque_F(0.1F, 1.0F, 0.4F);
+			} else if(i11 == Block.chest.blockID) {
+				tessellator6.setColorOpaque_F(1.0F, 0.8F, 0.0F);
+			} else if(i11 != Block.stoneOvenIdle.blockID && i11 != Block.stoneOvenActive.blockID) {
+				if(i11 == Block.ice.blockID) {
+					f9 = pb.getRenderSideBrightness(this.blockAccess, integer2, integer3 + 1, integer4);
+					tessellator6.setColorOpaque_F(f9, f9, f9);
+					b7 = 3;
+					b8 = 4;
+				}
+			} else if(tileEntityEssenceFountain31.getStackInSlot(0).stackSize == 64) {
+				tessellator6.setColorOpaque_F(1.0F, 0.0F, 0.0F);
+			} else {
+				tessellator6.setColorOpaque_F(0.5F, 0.0F, 0.0F);
+			}
+		}
+
+		if(tileEntityEssenceFountain30 == null || tileEntityEssenceFountain30.getStackInSlot(0).stackSize > 0) {
+			double d29 = ((double)b7 * 16.0D + 1.0D) / 256.0D;
+			double d13 = ((double)b7 * 16.0D + 15.0D - 0.01D) / 256.0D;
+			double d15 = ((double)b8 * 16.0D + 1.0D) / 512.0D;
+			double d17 = ((double)b8 * 16.0D + 15.0D - 0.01D) / 512.0D;
+			double d19 = (double)integer2 + 0.0625D;
+			double d21 = (double)integer2 + 0.9375D;
+			double d23 = (double)integer3 + 0.125D;
+			double d25 = (double)integer4 + 0.0625D;
+			double d27 = (double)integer4 + 0.9375D;
+			tessellator6.addVertexWithUV(d21, d23, d27, d29, d17);
+			tessellator6.addVertexWithUV(d21, d23, d25, d29, d15);
+			tessellator6.addVertexWithUV(d19, d23, d25, d13, d15);
+			tessellator6.addVertexWithUV(d19, d23, d27, d13, d17);
+		}
+
+		return true;
+	}
+
+	public boolean renderBlockTorch(Block block, int x, int y, int z) {
+		int i5 = this.blockAccess.getBlockMetadata(x, y, z);
+		Tessellator tessellator6 = Tessellator.instance;
+		float f7 = block.getRenderSideBrightness(this.blockAccess, x, y, z);
+		if(Block.lightValue[block.blockID] > 0) {
+			f7 = 1.0F;
+		}
+
+		tessellator6.setColorOpaque_F(f7, f7, f7);
+		double d8 = (double)0.4F;
+		double d10 = 0.5D - d8;
+		double d12 = (double)0.2F;
+		if(i5 == 1) {
+			this.renderTorchAtAngle(block, (double)x - d10, (double)y + d12, (double)z, -d8, 0.0D);
+		} else if(i5 == 2) {
+			this.renderTorchAtAngle(block, (double)x + d10, (double)y + d12, (double)z, d8, 0.0D);
+		} else if(i5 == 3) {
+			this.renderTorchAtAngle(block, (double)x, (double)y + d12, (double)z - d10, 0.0D, -d8);
+		} else if(i5 == 4) {
+			this.renderTorchAtAngle(block, (double)x, (double)y + d12, (double)z + d10, 0.0D, d8);
 		} else {
-			this.renderTorchAtAngle(var1, (double)var2, (double)var3, (double)var4, 0.0D, 0.0D);
+			this.renderTorchAtAngle(block, (double)x, (double)y, (double)z, 0.0D, 0.0D);
 		}
 
 		return true;
 	}
 
-	public boolean renderBlockLever(Block var1, int var2, int var3, int var4) {
-		int var5 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-		int var6 = var5 & 7;
-		boolean var7 = (var5 & 8) > 0;
-		Tessellator var8 = Tessellator.instance;
-		boolean var9 = this.overrideBlockTexture >= 0;
-		if(!var9) {
+	public boolean renderBlockLever(Block block, int x, int y, int z) {
+		int i5 = this.blockAccess.getBlockMetadata(x, y, z);
+		int i6 = i5 & 7;
+		boolean z7 = (i5 & 8) > 0;
+		Tessellator tessellator8 = Tessellator.instance;
+		boolean z9 = this.overrideBlockTexture >= 0;
+		if(!z9) {
 			this.overrideBlockTexture = Block.cobblestone.blockIndexInTexture;
 		}
 
-		float var10 = 0.25F;
-		float var11 = 3.0F / 16.0F;
-		float var12 = 3.0F / 16.0F;
-		if(var6 == 5) {
-			var1.setBlockBounds(0.5F - var11, 0.0F, 0.5F - var10, 0.5F + var11, var12, 0.5F + var10);
-		} else if(var6 == 6) {
-			var1.setBlockBounds(0.5F - var10, 0.0F, 0.5F - var11, 0.5F + var10, var12, 0.5F + var11);
-		} else if(var6 == 4) {
-			var1.setBlockBounds(0.5F - var11, 0.5F - var10, 1.0F - var12, 0.5F + var11, 0.5F + var10, 1.0F);
-		} else if(var6 == 3) {
-			var1.setBlockBounds(0.5F - var11, 0.5F - var10, 0.0F, 0.5F + var11, 0.5F + var10, var12);
-		} else if(var6 == 2) {
-			var1.setBlockBounds(1.0F - var12, 0.5F - var10, 0.5F - var11, 1.0F, 0.5F + var10, 0.5F + var11);
-		} else if(var6 == 1) {
-			var1.setBlockBounds(0.0F, 0.5F - var10, 0.5F - var11, var12, 0.5F + var10, 0.5F + var11);
+		float f10 = 0.25F;
+		float f11 = 0.1875F;
+		float f12 = 0.1875F;
+		if(i6 == 5) {
+			block.setBlockBounds(0.5F - f11, 0.0F, 0.5F - f10, 0.5F + f11, f12, 0.5F + f10);
+		} else if(i6 == 6) {
+			block.setBlockBounds(0.5F - f10, 0.0F, 0.5F - f11, 0.5F + f10, f12, 0.5F + f11);
+		} else if(i6 == 4) {
+			block.setBlockBounds(0.5F - f11, 0.5F - f10, 1.0F - f12, 0.5F + f11, 0.5F + f10, 1.0F);
+		} else if(i6 == 3) {
+			block.setBlockBounds(0.5F - f11, 0.5F - f10, 0.0F, 0.5F + f11, 0.5F + f10, f12);
+		} else if(i6 == 2) {
+			block.setBlockBounds(1.0F - f12, 0.5F - f10, 0.5F - f11, 1.0F, 0.5F + f10, 0.5F + f11);
+		} else if(i6 == 1) {
+			block.setBlockBounds(0.0F, 0.5F - f10, 0.5F - f11, f12, 0.5F + f10, 0.5F + f11);
 		}
 
-		this.renderStandardBlock(var1, var2, var3, var4);
-		if(!var9) {
+		this.renderStandardBlock(block, x, y, z);
+		if(!z9) {
 			this.overrideBlockTexture = -1;
 		}
 
-		float var13 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		if(Block.lightValue[var1.blockID] > 0) {
-			var13 = 1.0F;
+		float f13 = block.getRenderSideBrightness(this.blockAccess, x, y, z);
+		if(Block.lightValue[block.blockID] > 0) {
+			f13 = 1.0F;
 		}
 
-		var8.setColorOpaque_F(var13, var13, var13);
-		int var14 = var1.getBlockTextureFromSide(0);
+		tessellator8.setColorOpaque_F(f13, f13, f13);
+		int i14 = block.getBlockTextureFromSide(0);
 		if(this.overrideBlockTexture >= 0) {
-			var14 = this.overrideBlockTexture;
-		}
-
-		int var15 = (var14 & 15) << 4;
-		int var16 = var14 & 240;
-		float var17 = (float)var15 / 256.0F;
-		float var18 = ((float)var15 + 15.99F) / 256.0F;
-		float var19 = (float)var16 / 256.0F;
-		float var20 = ((float)var16 + 15.99F) / 256.0F;
-		Vec3D[] var21 = new Vec3D[8];
-		float var22 = 1.0F / 16.0F;
-		float var23 = 1.0F / 16.0F;
-		float var24 = 10.0F / 16.0F;
-		var21[0] = Vec3D.createVector((double)(-var22), 0.0D, (double)(-var23));
-		var21[1] = Vec3D.createVector((double)var22, 0.0D, (double)(-var23));
-		var21[2] = Vec3D.createVector((double)var22, 0.0D, (double)var23);
-		var21[3] = Vec3D.createVector((double)(-var22), 0.0D, (double)var23);
-		var21[4] = Vec3D.createVector((double)(-var22), (double)var24, (double)(-var23));
-		var21[5] = Vec3D.createVector((double)var22, (double)var24, (double)(-var23));
-		var21[6] = Vec3D.createVector((double)var22, (double)var24, (double)var23);
-		var21[7] = Vec3D.createVector((double)(-var22), (double)var24, (double)var23);
-
-		for(int var25 = 0; var25 < 8; ++var25) {
-			if(var7) {
-				var21[var25].zCoord -= 1.0D / 16.0D;
-				var21[var25].rotateAroundX((float)Math.PI * 2.0F / 9.0F);
-			} else {
-				var21[var25].zCoord += 1.0D / 16.0D;
-				var21[var25].rotateAroundX(-((float)Math.PI * 2.0F / 9.0F));
-			}
-
-			if(var6 == 6) {
-				var21[var25].rotateAroundY((float)Math.PI * 0.5F);
-			}
-
-			if(var6 < 5) {
-				var21[var25].yCoord -= 0.375D;
-				var21[var25].rotateAroundX((float)Math.PI * 0.5F);
-				if(var6 == 4) {
-					var21[var25].rotateAroundY(0.0F);
-				}
-
-				if(var6 == 3) {
-					var21[var25].rotateAroundY((float)Math.PI);
-				}
-
-				if(var6 == 2) {
-					var21[var25].rotateAroundY((float)Math.PI * 0.5F);
-				}
-
-				if(var6 == 1) {
-					var21[var25].rotateAroundY((float)Math.PI * -0.5F);
-				}
-
-				var21[var25].xCoord += (double)var2 + 0.5D;
-				var21[var25].yCoord += (double)((float)var3 + 0.5F);
-				var21[var25].zCoord += (double)var4 + 0.5D;
-			} else {
-				var21[var25].xCoord += (double)var2 + 0.5D;
-				var21[var25].yCoord += (double)((float)var3 + 2.0F / 16.0F);
-				var21[var25].zCoord += (double)var4 + 0.5D;
-			}
-		}
-
-		Vec3D var30 = null;
-		Vec3D var26 = null;
-		Vec3D var27 = null;
-		Vec3D var28 = null;
-
-		for(int var29 = 0; var29 < 6; ++var29) {
-			if(var29 == 0) {
-				var17 = (float)(var15 + 7) / 256.0F;
-				var18 = ((float)(var15 + 9) - 0.01F) / 256.0F;
-				var19 = (float)(var16 + 6) / 256.0F;
-				var20 = ((float)(var16 + 8) - 0.01F) / 256.0F;
-			} else if(var29 == 2) {
-				var17 = (float)(var15 + 7) / 256.0F;
-				var18 = ((float)(var15 + 9) - 0.01F) / 256.0F;
-				var19 = (float)(var16 + 6) / 256.0F;
-				var20 = ((float)(var16 + 16) - 0.01F) / 256.0F;
-			}
-
-			if(var29 == 0) {
-				var30 = var21[0];
-				var26 = var21[1];
-				var27 = var21[2];
-				var28 = var21[3];
-			} else if(var29 == 1) {
-				var30 = var21[7];
-				var26 = var21[6];
-				var27 = var21[5];
-				var28 = var21[4];
-			} else if(var29 == 2) {
-				var30 = var21[1];
-				var26 = var21[0];
-				var27 = var21[4];
-				var28 = var21[5];
-			} else if(var29 == 3) {
-				var30 = var21[2];
-				var26 = var21[1];
-				var27 = var21[5];
-				var28 = var21[6];
-			} else if(var29 == 4) {
-				var30 = var21[3];
-				var26 = var21[2];
-				var27 = var21[6];
-				var28 = var21[7];
-			} else if(var29 == 5) {
-				var30 = var21[0];
-				var26 = var21[3];
-				var27 = var21[7];
-				var28 = var21[4];
-			}
-
-			var8.addVertexWithUV(var30.xCoord, var30.yCoord, var30.zCoord, (double)var17, (double)var20);
-			var8.addVertexWithUV(var26.xCoord, var26.yCoord, var26.zCoord, (double)var18, (double)var20);
-			var8.addVertexWithUV(var27.xCoord, var27.yCoord, var27.zCoord, (double)var18, (double)var19);
-			var8.addVertexWithUV(var28.xCoord, var28.yCoord, var28.zCoord, (double)var17, (double)var19);
+			i14 = this.overrideBlockTexture;
+		}
+
+		int i15 = (i14 & 15) << 4;
+		int i16 = i14 & 4080;
+		float f17 = (float)i15 / 256.0F;
+		float f18 = ((float)i15 + 15.99F) / 256.0F;
+		float f19 = (float)i16 / 512.0F;
+		float f20 = ((float)i16 + 15.99F) / 512.0F;
+		Vec3D[] vec3D21 = new Vec3D[8];
+		float f22 = 0.0625F;
+		float f23 = 0.0625F;
+		float f24 = 0.625F;
+		vec3D21[0] = Vec3D.createVector((double)(-f22), 0.0D, (double)(-f23));
+		vec3D21[1] = Vec3D.createVector((double)f22, 0.0D, (double)(-f23));
+		vec3D21[2] = Vec3D.createVector((double)f22, 0.0D, (double)f23);
+		vec3D21[3] = Vec3D.createVector((double)(-f22), 0.0D, (double)f23);
+		vec3D21[4] = Vec3D.createVector((double)(-f22), (double)f24, (double)(-f23));
+		vec3D21[5] = Vec3D.createVector((double)f22, (double)f24, (double)(-f23));
+		vec3D21[6] = Vec3D.createVector((double)f22, (double)f24, (double)f23);
+		vec3D21[7] = Vec3D.createVector((double)(-f22), (double)f24, (double)f23);
+
+		for(int i25 = 0; i25 < 8; ++i25) {
+			if(z7) {
+				vec3D21[i25].zCoord -= 0.0625D;
+				vec3D21[i25].rotateAroundX((float)Math.PI / 4.5F);
+			} else {
+				vec3D21[i25].zCoord += 0.0625D;
+				vec3D21[i25].rotateAroundX(-0.69813174F);
+			}
+
+			if(i6 == 6) {
+				vec3D21[i25].rotateAroundY((float)Math.PI / 2F);
+			}
+
+			if(i6 < 5) {
+				vec3D21[i25].yCoord -= 0.375D;
+				vec3D21[i25].rotateAroundX((float)Math.PI / 2F);
+				if(i6 == 4) {
+					vec3D21[i25].rotateAroundY(0.0F);
+				}
+
+				if(i6 == 3) {
+					vec3D21[i25].rotateAroundY((float)Math.PI);
+				}
+
+				if(i6 == 2) {
+					vec3D21[i25].rotateAroundY((float)Math.PI / 2F);
+				}
+
+				if(i6 == 1) {
+					vec3D21[i25].rotateAroundY(-1.5707964F);
+				}
+
+				vec3D21[i25].xCoord += (double)x + 0.5D;
+				vec3D21[i25].yCoord += (double)((float)y + 0.5F);
+				vec3D21[i25].zCoord += (double)z + 0.5D;
+			} else {
+				vec3D21[i25].xCoord += (double)x + 0.5D;
+				vec3D21[i25].yCoord += (double)((float)y + 0.125F);
+				vec3D21[i25].zCoord += (double)z + 0.5D;
+			}
+		}
+
+		Vec3D vec3D30 = null;
+		Vec3D vec3D26 = null;
+		Vec3D vec3D27 = null;
+		Vec3D vec3D28 = null;
+
+		for(int i29 = 0; i29 < 6; ++i29) {
+			if(i29 == 0) {
+				f17 = (float)(i15 + 7) / 256.0F;
+				f18 = ((float)(i15 + 9) - 0.01F) / 256.0F;
+				f19 = (float)(i16 + 6) / 512.0F;
+				f20 = ((float)(i16 + 8) - 0.01F) / 512.0F;
+			} else if(i29 == 2) {
+				f17 = (float)(i15 + 7) / 256.0F;
+				f18 = ((float)(i15 + 9) - 0.01F) / 256.0F;
+				f19 = (float)(i16 + 6) / 512.0F;
+				f20 = ((float)(i16 + 16) - 0.01F) / 512.0F;
+			}
+
+			if(i29 == 0) {
+				vec3D30 = vec3D21[0];
+				vec3D26 = vec3D21[1];
+				vec3D27 = vec3D21[2];
+				vec3D28 = vec3D21[3];
+			} else if(i29 == 1) {
+				vec3D30 = vec3D21[7];
+				vec3D26 = vec3D21[6];
+				vec3D27 = vec3D21[5];
+				vec3D28 = vec3D21[4];
+			} else if(i29 == 2) {
+				vec3D30 = vec3D21[1];
+				vec3D26 = vec3D21[0];
+				vec3D27 = vec3D21[4];
+				vec3D28 = vec3D21[5];
+			} else if(i29 == 3) {
+				vec3D30 = vec3D21[2];
+				vec3D26 = vec3D21[1];
+				vec3D27 = vec3D21[5];
+				vec3D28 = vec3D21[6];
+			} else if(i29 == 4) {
+				vec3D30 = vec3D21[3];
+				vec3D26 = vec3D21[2];
+				vec3D27 = vec3D21[6];
+				vec3D28 = vec3D21[7];
+			} else if(i29 == 5) {
+				vec3D30 = vec3D21[0];
+				vec3D26 = vec3D21[3];
+				vec3D27 = vec3D21[7];
+				vec3D28 = vec3D21[4];
+			}
+
+			tessellator8.addVertexWithUV(vec3D30.xCoord, vec3D30.yCoord, vec3D30.zCoord, (double)f17, (double)f20);
+			tessellator8.addVertexWithUV(vec3D26.xCoord, vec3D26.yCoord, vec3D26.zCoord, (double)f18, (double)f20);
+			tessellator8.addVertexWithUV(vec3D27.xCoord, vec3D27.yCoord, vec3D27.zCoord, (double)f18, (double)f19);
+			tessellator8.addVertexWithUV(vec3D28.xCoord, vec3D28.yCoord, vec3D28.zCoord, (double)f17, (double)f19);
 		}
 
 		return true;
 	}
 
-	public boolean renderBlockFire(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		int var6 = var1.getBlockTextureFromSide(0);
+	public boolean renderBlockFire(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		int i6 = block.getBlockTextureFromSide(0);
 		if(this.overrideBlockTexture >= 0) {
-			var6 = this.overrideBlockTexture;
+			i6 = this.overrideBlockTexture;
 		}
 
-		float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		var5.setColorOpaque_F(var7, var7, var7);
-		int var8 = (var6 & 15) << 4;
-		int var9 = var6 & 240;
-		double var10 = (double)((float)var8 / 256.0F);
-		double var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-		double var14 = (double)((float)var9 / 256.0F);
-		double var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-		float var18 = 1.4F;
-		double var21;
-		double var23;
-		double var25;
-		double var27;
-		double var29;
-		double var31;
-		double var33;
-		if(!this.blockAccess.isBlockNormalCube(var2, var3 - 1, var4) && !Block.fire.canBlockCatchFire(this.blockAccess, var2, var3 - 1, var4)) {
-			float var37 = 0.2F;
-			float var20 = 1.0F / 16.0F;
-			if((var2 + var3 + var4 & 1) == 1) {
-				var10 = (double)((float)var8 / 256.0F);
-				var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-				var14 = (double)((float)(var9 + 16) / 256.0F);
-				var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
-			}
-
-			if((var2 / 2 + var3 / 2 + var4 / 2 & 1) == 1) {
-				var21 = var12;
-				var12 = var10;
-				var10 = var21;
-			}
-
-			if(Block.fire.canBlockCatchFire(this.blockAccess, var2 - 1, var3, var4)) {
-				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
-				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
-			}
-
-			if(Block.fire.canBlockCatchFire(this.blockAccess, var2 + 1, var3, var4)) {
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
-				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
-				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
-			}
-
-			if(Block.fire.canBlockCatchFire(this.blockAccess, var2, var3, var4 - 1)) {
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var12, var14);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var10, var14);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var10, var14);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var12, var14);
-			}
-
-			if(Block.fire.canBlockCatchFire(this.blockAccess, var2, var3, var4 + 1)) {
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var10, var14);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var12, var14);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var12, var14);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var10, var14);
-			}
-
-			if(Block.fire.canBlockCatchFire(this.blockAccess, var2, var3 + 1, var4)) {
-				var21 = (double)var2 + 0.5D + 0.5D;
-				var23 = (double)var2 + 0.5D - 0.5D;
-				var25 = (double)var4 + 0.5D + 0.5D;
-				var27 = (double)var4 + 0.5D - 0.5D;
-				var29 = (double)var2 + 0.5D - 0.5D;
-				var31 = (double)var2 + 0.5D + 0.5D;
-				var33 = (double)var4 + 0.5D - 0.5D;
-				double var35 = (double)var4 + 0.5D + 0.5D;
-				var10 = (double)((float)var8 / 256.0F);
-				var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-				var14 = (double)((float)var9 / 256.0F);
-				var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-				++var3;
-				var18 = -0.2F;
-				if((var2 + var3 + var4 & 1) == 0) {
-					var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
-					var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
-					var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
-					var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
-					var10 = (double)((float)var8 / 256.0F);
-					var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-					var14 = (double)((float)(var9 + 16) / 256.0F);
-					var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
-					var5.addVertexWithUV(var31, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
-					var5.addVertexWithUV(var23, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
-					var5.addVertexWithUV(var23, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
-					var5.addVertexWithUV(var31, (double)((float)var3 + var18), (double)(var4 + 0), var10, var14);
+		float f7 = block.getRenderSideBrightness(this.blockAccess, x, y, z);
+		tessellator5.setColorOpaque_F(f7, f7, f7);
+		int i8 = (i6 & 15) << 4;
+		int i9 = i6 & 4080;
+		double d10 = (double)((float)i8 / 256.0F);
+		double d12 = (double)(((float)i8 + 15.99F) / 256.0F);
+		double d14 = (double)((float)i9 / 512.0F);
+		double d16 = (double)(((float)i9 + 15.99F) / 512.0F);
+		float f18 = 1.4F;
+		double d19;
+		double d21;
+		double d23;
+		double d25;
+		double d27;
+		double d29;
+		double d31;
+		if(!this.blockAccess.isBlockNormalCube(x, y - 1, z) && !Block.fire.canBlockCatchFire(this.blockAccess, x, y - 1, z)) {
+			float f37 = 0.2F;
+			float f34 = 0.0625F;
+			if((x + y + z & 1) == 1) {
+				d10 = (double)((float)i8 / 256.0F);
+				d12 = (double)(((float)i8 + 15.99F) / 256.0F);
+				d14 = (double)((float)(i9 + 16) / 512.0F);
+				d16 = (double)(((float)i9 + 15.99F + 16.0F) / 512.0F);
+			}
+
+			if((x / 2 + y / 2 + z / 2 & 1) == 1) {
+				d19 = d12;
+				d12 = d10;
+				d10 = d19;
+			}
+
+			if(Block.fire.canBlockCatchFire(this.blockAccess, x - 1, y, z)) {
+				tessellator5.addVertexWithUV((double)((float)x + f37), (double)((float)y + f18 + f34), (double)(z + 1), d12, d14);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + f34), (double)(z + 1), d12, d16);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + f34), (double)(z + 0), d10, d16);
+				tessellator5.addVertexWithUV((double)((float)x + f37), (double)((float)y + f18 + f34), (double)(z + 0), d10, d14);
+				tessellator5.addVertexWithUV((double)((float)x + f37), (double)((float)y + f18 + f34), (double)(z + 0), d10, d14);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + f34), (double)(z + 0), d10, d16);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + f34), (double)(z + 1), d12, d16);
+				tessellator5.addVertexWithUV((double)((float)x + f37), (double)((float)y + f18 + f34), (double)(z + 1), d12, d14);
+			}
+
+			if(Block.fire.canBlockCatchFire(this.blockAccess, x + 1, y, z)) {
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - f37), (double)((float)y + f18 + f34), (double)(z + 0), d10, d14);
+				tessellator5.addVertexWithUV((double)(x + 1 - 0), (double)((float)(y + 0) + f34), (double)(z + 0), d10, d16);
+				tessellator5.addVertexWithUV((double)(x + 1 - 0), (double)((float)(y + 0) + f34), (double)(z + 1), d12, d16);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - f37), (double)((float)y + f18 + f34), (double)(z + 1), d12, d14);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - f37), (double)((float)y + f18 + f34), (double)(z + 1), d12, d14);
+				tessellator5.addVertexWithUV((double)(x + 1 - 0), (double)((float)(y + 0) + f34), (double)(z + 1), d12, d16);
+				tessellator5.addVertexWithUV((double)(x + 1 - 0), (double)((float)(y + 0) + f34), (double)(z + 0), d10, d16);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - f37), (double)((float)y + f18 + f34), (double)(z + 0), d10, d14);
+			}
+
+			if(Block.fire.canBlockCatchFire(this.blockAccess, x, y, z - 1)) {
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + f18 + f34), (double)((float)z + f37), d12, d14);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + f34), (double)(z + 0), d12, d16);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)(y + 0) + f34), (double)(z + 0), d10, d16);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + f18 + f34), (double)((float)z + f37), d10, d14);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + f18 + f34), (double)((float)z + f37), d10, d14);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)(y + 0) + f34), (double)(z + 0), d10, d16);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + f34), (double)(z + 0), d12, d16);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + f18 + f34), (double)((float)z + f37), d12, d14);
+			}
+
+			if(Block.fire.canBlockCatchFire(this.blockAccess, x, y, z + 1)) {
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + f18 + f34), (double)((float)(z + 1) - f37), d10, d14);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)(y + 0) + f34), (double)(z + 1 - 0), d10, d16);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + f34), (double)(z + 1 - 0), d12, d16);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + f18 + f34), (double)((float)(z + 1) - f37), d12, d14);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + f18 + f34), (double)((float)(z + 1) - f37), d12, d14);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)(y + 0) + f34), (double)(z + 1 - 0), d12, d16);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)(y + 0) + f34), (double)(z + 1 - 0), d10, d16);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + f18 + f34), (double)((float)(z + 1) - f37), d10, d14);
+			}
+
+			if(Block.fire.canBlockCatchFire(this.blockAccess, x, y + 1, z)) {
+				d19 = (double)x + 0.5D + 0.5D;
+				d21 = (double)x + 0.5D - 0.5D;
+				d23 = (double)z + 0.5D + 0.5D;
+				d25 = (double)z + 0.5D - 0.5D;
+				d27 = (double)x + 0.5D - 0.5D;
+				d29 = (double)x + 0.5D + 0.5D;
+				d31 = (double)z + 0.5D - 0.5D;
+				double d35 = (double)z + 0.5D + 0.5D;
+				d10 = (double)((float)i8 / 256.0F);
+				d12 = (double)(((float)i8 + 15.99F) / 256.0F);
+				d14 = (double)((float)i9 / 512.0F);
+				d16 = (double)(((float)i9 + 15.99F) / 512.0F);
+				++y;
+				f18 = -0.2F;
+				if((x + y + z & 1) == 0) {
+					tessellator5.addVertexWithUV(d27, (double)((float)y + f18), (double)(z + 0), d12, d14);
+					tessellator5.addVertexWithUV(d19, (double)(y + 0), (double)(z + 0), d12, d16);
+					tessellator5.addVertexWithUV(d19, (double)(y + 0), (double)(z + 1), d10, d16);
+					tessellator5.addVertexWithUV(d27, (double)((float)y + f18), (double)(z + 1), d10, d14);
+					d10 = (double)((float)i8 / 256.0F);
+					d12 = (double)(((float)i8 + 15.99F) / 256.0F);
+					d14 = (double)((float)(i9 + 16) / 512.0F);
+					d16 = (double)(((float)i9 + 15.99F + 16.0F) / 512.0F);
+					tessellator5.addVertexWithUV(d29, (double)((float)y + f18), (double)(z + 1), d12, d14);
+					tessellator5.addVertexWithUV(d21, (double)(y + 0), (double)(z + 1), d12, d16);
+					tessellator5.addVertexWithUV(d21, (double)(y + 0), (double)(z + 0), d10, d16);
+					tessellator5.addVertexWithUV(d29, (double)((float)y + f18), (double)(z + 0), d10, d14);
 				} else {
-					var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var35, var12, var14);
-					var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var27, var12, var16);
-					var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var27, var10, var16);
-					var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var35, var10, var14);
-					var10 = (double)((float)var8 / 256.0F);
-					var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-					var14 = (double)((float)(var9 + 16) / 256.0F);
-					var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
-					var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var33, var12, var14);
-					var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var12, var16);
-					var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var10, var16);
-					var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var33, var10, var14);
-				}
-			}
-		} else {
-			double var19 = (double)var2 + 0.5D + 0.2D;
-			var21 = (double)var2 + 0.5D - 0.2D;
-			var23 = (double)var4 + 0.5D + 0.2D;
-			var25 = (double)var4 + 0.5D - 0.2D;
-			var27 = (double)var2 + 0.5D - 0.3D;
-			var29 = (double)var2 + 0.5D + 0.3D;
-			var31 = (double)var4 + 0.5D - 0.3D;
-			var33 = (double)var4 + 0.5D + 0.3D;
-			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
-			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
-			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
-			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 0), var10, var14);
-			var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
-			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
-			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
-			var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
-			var10 = (double)((float)var8 / 256.0F);
-			var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-			var14 = (double)((float)(var9 + 16) / 256.0F);
-			var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
-			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var33, var12, var14);
-			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var12, var16);
-			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var10, var16);
-			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var33, var10, var14);
-			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var31, var12, var14);
-			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var23, var12, var16);
-			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var23, var10, var16);
-			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var31, var10, var14);
-			var19 = (double)var2 + 0.5D - 0.5D;
-			var21 = (double)var2 + 0.5D + 0.5D;
-			var23 = (double)var4 + 0.5D - 0.5D;
-			var25 = (double)var4 + 0.5D + 0.5D;
-			var27 = (double)var2 + 0.5D - 0.4D;
-			var29 = (double)var2 + 0.5D + 0.4D;
-			var31 = (double)var4 + 0.5D - 0.4D;
-			var33 = (double)var4 + 0.5D + 0.4D;
-			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 0), var10, var14);
-			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
-			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
-			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
-			var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
-			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
-			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
-			var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
-			var10 = (double)((float)var8 / 256.0F);
-			var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-			var14 = (double)((float)var9 / 256.0F);
-			var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var33, var10, var14);
-			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var10, var16);
-			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var12, var16);
-			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var33, var12, var14);
-			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var31, var10, var14);
-			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var23, var10, var16);
-			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var23, var12, var16);
-			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var31, var12, var14);
-		}
-
-		return true;
-	}
-
-	public boolean renderBlockRedstoneWire(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		int var6 = var1.getBlockTextureFromSideAndMetadata(1, this.blockAccess.getBlockMetadata(var2, var3, var4));
-		if(this.overrideBlockTexture >= 0) {
-			var6 = this.overrideBlockTexture;
-		}
-
-		float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		var5.setColorOpaque_F(var7, var7, var7);
-		int var8 = (var6 & 15) << 4;
-		int var9 = var6 & 240;
-		double var10 = (double)((float)var8 / 256.0F);
-		double var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-		double var14 = (double)((float)var9 / 256.0F);
-		double var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-		float var18 = 0.0F;
-		float var19 = 0.03125F;
-		boolean var20 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3, var4) || !this.blockAccess.isBlockNormalCube(var2 - 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3 - 1, var4);
-		boolean var21 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3, var4) || !this.blockAccess.isBlockNormalCube(var2 + 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3 - 1, var4);
-		boolean var22 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3, var4 - 1) || !this.blockAccess.isBlockNormalCube(var2, var3, var4 - 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 - 1, var4 - 1);
-		boolean var23 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3, var4 + 1) || !this.blockAccess.isBlockNormalCube(var2, var3, var4 + 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 - 1, var4 + 1);
-		if(!this.blockAccess.isBlockNormalCube(var2, var3 + 1, var4)) {
-			if(this.blockAccess.isBlockNormalCube(var2 - 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3 + 1, var4)) {
-				var20 = true;
-			}
-
-			if(this.blockAccess.isBlockNormalCube(var2 + 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3 + 1, var4)) {
-				var21 = true;
-			}
-
-			if(this.blockAccess.isBlockNormalCube(var2, var3, var4 - 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 + 1, var4 - 1)) {
-				var22 = true;
-			}
-
-			if(this.blockAccess.isBlockNormalCube(var2, var3, var4 + 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 + 1, var4 + 1)) {
-				var23 = true;
-			}
-		}
-
-		float var24 = 5.0F / 16.0F;
-		float var25 = (float)(var2 + 0);
-		float var26 = (float)(var2 + 1);
-		float var27 = (float)(var4 + 0);
-		float var28 = (float)(var4 + 1);
-		byte var29 = 0;
-		if((var20 || var21) && !var22 && !var23) {
-			var29 = 1;
-		}
-
-		if((var22 || var23) && !var21 && !var20) {
-			var29 = 2;
-		}
-
-		if(var29 != 0) {
-			var10 = (double)((float)(var8 + 16) / 256.0F);
-			var12 = (double)(((float)(var8 + 16) + 15.99F) / 256.0F);
-			var14 = (double)((float)var9 / 256.0F);
-			var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-		}
-
-		if(var29 == 0) {
-			if(var21 || var22 || var23 || var20) {
-				if(!var20) {
-					var25 += var24;
-				}
-
-				if(!var20) {
-					var10 += (double)(var24 / 16.0F);
-				}
-
-				if(!var21) {
-					var26 -= var24;
-				}
-
-				if(!var21) {
-					var12 -= (double)(var24 / 16.0F);
-				}
-
-				if(!var22) {
-					var27 += var24;
-				}
-
-				if(!var22) {
-					var14 += (double)(var24 / 16.0F);
-				}
-
-				if(!var23) {
-					var28 -= var24;
-				}
-
-				if(!var23) {
-					var16 -= (double)(var24 / 16.0F);
-				}
-			}
-
-			var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var28 + var18), var12, var16);
-			var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var27 - var18), var12, var14);
-			var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var27 - var18), var10, var14);
-			var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var28 + var18), var10, var16);
-		}
-
-		if(var29 == 1) {
-			var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var28 + var18), var12, var16);
-			var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var27 - var18), var12, var14);
-			var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var27 - var18), var10, var14);
-			var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var28 + var18), var10, var16);
-		}
-
-		if(var29 == 2) {
-			var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var28 + var18), var12, var16);
-			var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var27 - var18), var10, var16);
-			var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var27 - var18), var10, var14);
-			var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var28 + var18), var12, var14);
-		}
-
-		var10 = (double)((float)(var8 + 16) / 256.0F);
-		var12 = (double)(((float)(var8 + 16) + 15.99F) / 256.0F);
-		var14 = (double)((float)var9 / 256.0F);
-		var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-		if(!this.blockAccess.isBlockNormalCube(var2, var3 + 1, var4)) {
-			if(this.blockAccess.isBlockNormalCube(var2 - 1, var3, var4) && this.blockAccess.getBlockId(var2 - 1, var3 + 1, var4) == Block.redstoneWire.blockID) {
-				var5.addVertexWithUV((double)((float)var2 + var19), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 1) + var18), var12, var14);
-				var5.addVertexWithUV((double)((float)var2 + var19), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 1) + var18), var10, var14);
-				var5.addVertexWithUV((double)((float)var2 + var19), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 0) - var18), var10, var16);
-				var5.addVertexWithUV((double)((float)var2 + var19), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 0) - var18), var12, var16);
-			}
-
-			if(this.blockAccess.isBlockNormalCube(var2 + 1, var3, var4) && this.blockAccess.getBlockId(var2 + 1, var3 + 1, var4) == Block.redstoneWire.blockID) {
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var19), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 1) + var18), var10, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var19), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 1) + var18), var12, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var19), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 0) - var18), var12, var14);
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var19), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 0) - var18), var10, var14);
-			}
-
-			if(this.blockAccess.isBlockNormalCube(var2, var3, var4 - 1) && this.blockAccess.getBlockId(var2, var3 + 1, var4 - 1) == Block.redstoneWire.blockID) {
-				var5.addVertexWithUV((double)((float)(var2 + 1) + var18), (double)((float)(var3 + 0) - var18), (double)((float)var4 + var19), var10, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 1) + var18), (double)((float)(var3 + 1) + var18), (double)((float)var4 + var19), var12, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 0) - var18), (double)((float)(var3 + 1) + var18), (double)((float)var4 + var19), var12, var14);
-				var5.addVertexWithUV((double)((float)(var2 + 0) - var18), (double)((float)(var3 + 0) - var18), (double)((float)var4 + var19), var10, var14);
-			}
-
-			if(this.blockAccess.isBlockNormalCube(var2, var3, var4 + 1) && this.blockAccess.getBlockId(var2, var3 + 1, var4 + 1) == Block.redstoneWire.blockID) {
-				var5.addVertexWithUV((double)((float)(var2 + 1) + var18), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 1) - var19), var12, var14);
-				var5.addVertexWithUV((double)((float)(var2 + 1) + var18), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 1) - var19), var10, var14);
-				var5.addVertexWithUV((double)((float)(var2 + 0) - var18), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 1) - var19), var10, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 0) - var18), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 1) - var19), var12, var16);
-			}
-		}
-
-		return true;
-	}
-
-	public boolean renderBlockMinecartTrack(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		int var6 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-		int var7 = var1.getBlockTextureFromSideAndMetadata(0, var6);
-		if(this.overrideBlockTexture >= 0) {
-			var7 = this.overrideBlockTexture;
-		}
-
-		float var8 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		var5.setColorOpaque_F(var8, var8, var8);
-		int var9 = (var7 & 15) << 4;
-		int var10 = var7 & 240;
-		double var11 = (double)((float)var9 / 256.0F);
-		double var13 = (double)(((float)var9 + 15.99F) / 256.0F);
-		double var15 = (double)((float)var10 / 256.0F);
-		double var17 = (double)(((float)var10 + 15.99F) / 256.0F);
-		float var19 = 1.0F / 16.0F;
-		float var20 = (float)(var2 + 1);
-		float var21 = (float)(var2 + 1);
-		float var22 = (float)(var2 + 0);
-		float var23 = (float)(var2 + 0);
-		float var24 = (float)(var4 + 0);
-		float var25 = (float)(var4 + 1);
-		float var26 = (float)(var4 + 1);
-		float var27 = (float)(var4 + 0);
-		float var28 = (float)var3 + var19;
-		float var29 = (float)var3 + var19;
-		float var30 = (float)var3 + var19;
-		float var31 = (float)var3 + var19;
-		if(var6 != 1 && var6 != 2 && var6 != 3 && var6 != 7) {
-			if(var6 == 8) {
-				var21 = (float)(var2 + 0);
-				var20 = var21;
-				var23 = (float)(var2 + 1);
-				var22 = var23;
-				var27 = (float)(var4 + 1);
-				var24 = var27;
-				var26 = (float)(var4 + 0);
-				var25 = var26;
-			} else if(var6 == 9) {
-				var23 = (float)(var2 + 0);
-				var20 = var23;
-				var22 = (float)(var2 + 1);
-				var21 = var22;
-				var25 = (float)(var4 + 0);
-				var24 = var25;
-				var27 = (float)(var4 + 1);
-				var26 = var27;
-			}
-		} else {
-			var23 = (float)(var2 + 1);
-			var20 = var23;
-			var22 = (float)(var2 + 0);
-			var21 = var22;
-			var25 = (float)(var4 + 1);
-			var24 = var25;
-			var27 = (float)(var4 + 0);
-			var26 = var27;
-		}
-
-		if(var6 != 2 && var6 != 4) {
-			if(var6 == 3 || var6 == 5) {
-				++var29;
-				++var30;
-			}
-		} else {
-			++var28;
-			++var31;
-		}
-
-		var5.addVertexWithUV((double)var20, (double)var28, (double)var24, var13, var15);
-		var5.addVertexWithUV((double)var21, (double)var29, (double)var25, var13, var17);
-		var5.addVertexWithUV((double)var22, (double)var30, (double)var26, var11, var17);
-		var5.addVertexWithUV((double)var23, (double)var31, (double)var27, var11, var15);
-		var5.addVertexWithUV((double)var23, (double)var31, (double)var27, var11, var15);
-		var5.addVertexWithUV((double)var22, (double)var30, (double)var26, var11, var17);
-		var5.addVertexWithUV((double)var21, (double)var29, (double)var25, var13, var17);
-		var5.addVertexWithUV((double)var20, (double)var28, (double)var24, var13, var15);
-		return true;
-	}
-
-	public boolean renderBlockLadder(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		int var6 = var1.getBlockTextureFromSide(0);
-		if(this.overrideBlockTexture >= 0) {
-			var6 = this.overrideBlockTexture;
-		}
-
-		float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		var5.setColorOpaque_F(var7, var7, var7);
-		int var8 = (var6 & 15) << 4;
-		int var9 = var6 & 240;
-		double var10 = (double)((float)var8 / 256.0F);
-		double var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-		double var14 = (double)((float)var9 / 256.0F);
-		double var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-		int var18 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-		float var19 = 0.0F;
-		float var20 = 0.05F;
-		if(var18 == 5) {
-			var5.addVertexWithUV((double)((float)var2 + var20), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 1) + var19), var10, var14);
-			var5.addVertexWithUV((double)((float)var2 + var20), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 1) + var19), var10, var16);
-			var5.addVertexWithUV((double)((float)var2 + var20), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 0) - var19), var12, var16);
-			var5.addVertexWithUV((double)((float)var2 + var20), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 0) - var19), var12, var14);
-		}
-
-		if(var18 == 4) {
-			var5.addVertexWithUV((double)((float)(var2 + 1) - var20), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 1) + var19), var12, var16);
-			var5.addVertexWithUV((double)((float)(var2 + 1) - var20), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 1) + var19), var12, var14);
-			var5.addVertexWithUV((double)((float)(var2 + 1) - var20), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 0) - var19), var10, var14);
-			var5.addVertexWithUV((double)((float)(var2 + 1) - var20), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 0) - var19), var10, var16);
-		}
-
-		if(var18 == 3) {
-			var5.addVertexWithUV((double)((float)(var2 + 1) + var19), (double)((float)(var3 + 0) - var19), (double)((float)var4 + var20), var12, var16);
-			var5.addVertexWithUV((double)((float)(var2 + 1) + var19), (double)((float)(var3 + 1) + var19), (double)((float)var4 + var20), var12, var14);
-			var5.addVertexWithUV((double)((float)(var2 + 0) - var19), (double)((float)(var3 + 1) + var19), (double)((float)var4 + var20), var10, var14);
-			var5.addVertexWithUV((double)((float)(var2 + 0) - var19), (double)((float)(var3 + 0) - var19), (double)((float)var4 + var20), var10, var16);
-		}
-
-		if(var18 == 2) {
-			var5.addVertexWithUV((double)((float)(var2 + 1) + var19), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 1) - var20), var10, var14);
-			var5.addVertexWithUV((double)((float)(var2 + 1) + var19), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 1) - var20), var10, var16);
-			var5.addVertexWithUV((double)((float)(var2 + 0) - var19), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 1) - var20), var12, var16);
-			var5.addVertexWithUV((double)((float)(var2 + 0) - var19), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 1) - var20), var12, var14);
-		}
-
-		return true;
-	}
-
-	public boolean renderBlockReed(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		float var6 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		var5.setColorOpaque_F(var6, var6, var6);
-		this.renderCrossedSquares(var1, this.blockAccess.getBlockMetadata(var2, var3, var4), (double)var2, (double)var3, (double)var4);
-		return true;
-	}
-
-	public boolean renderBlockCrops(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		float var6 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		var5.setColorOpaque_F(var6, var6, var6);
-		this.renderBlockCropsImpl(var1, this.blockAccess.getBlockMetadata(var2, var3, var4), (double)var2, (double)((float)var3 - 1.0F / 16.0F), (double)var4);
-		return true;
-	}
-
-	public void renderTorchAtAngle(Block var1, double var2, double var4, double var6, double var8, double var10) {
-		Tessellator var12 = Tessellator.instance;
-		int var13 = var1.getBlockTextureFromSide(0);
-		if(this.overrideBlockTexture >= 0) {
-			var13 = this.overrideBlockTexture;
-		}
-
-		int var14 = (var13 & 15) << 4;
-		int var15 = var13 & 240;
-		float var16 = (float)var14 / 256.0F;
-		float var17 = ((float)var14 + 15.99F) / 256.0F;
-		float var18 = (float)var15 / 256.0F;
-		float var19 = ((float)var15 + 15.99F) / 256.0F;
-		double var20 = (double)var16 + 1.75D / 64.0D;
-		double var22 = (double)var18 + 6.0D / 256.0D;
-		double var24 = (double)var16 + 9.0D / 256.0D;
-		double var26 = (double)var18 + 1.0D / 32.0D;
-		var2 += 0.5D;
-		var6 += 0.5D;
-		double var28 = var2 - 0.5D;
-		double var30 = var2 + 0.5D;
-		double var32 = var6 - 0.5D;
-		double var34 = var6 + 0.5D;
-		double var36 = 1.0D / 16.0D;
-		double var38 = 0.625D;
-		var12.addVertexWithUV(var2 + var8 * (1.0D - var38) - var36, var4 + var38, var6 + var10 * (1.0D - var38) - var36, var20, var22);
-		var12.addVertexWithUV(var2 + var8 * (1.0D - var38) - var36, var4 + var38, var6 + var10 * (1.0D - var38) + var36, var20, var26);
-		var12.addVertexWithUV(var2 + var8 * (1.0D - var38) + var36, var4 + var38, var6 + var10 * (1.0D - var38) + var36, var24, var26);
-		var12.addVertexWithUV(var2 + var8 * (1.0D - var38) + var36, var4 + var38, var6 + var10 * (1.0D - var38) - var36, var24, var22);
-		var12.addVertexWithUV(var2 - var36, var4 + 1.0D, var32, (double)var16, (double)var18);
-		var12.addVertexWithUV(var2 - var36 + var8, var4 + 0.0D, var32 + var10, (double)var16, (double)var19);
-		var12.addVertexWithUV(var2 - var36 + var8, var4 + 0.0D, var34 + var10, (double)var17, (double)var19);
-		var12.addVertexWithUV(var2 - var36, var4 + 1.0D, var34, (double)var17, (double)var18);
-		var12.addVertexWithUV(var2 + var36, var4 + 1.0D, var34, (double)var16, (double)var18);
-		var12.addVertexWithUV(var2 + var8 + var36, var4 + 0.0D, var34 + var10, (double)var16, (double)var19);
-		var12.addVertexWithUV(var2 + var8 + var36, var4 + 0.0D, var32 + var10, (double)var17, (double)var19);
-		var12.addVertexWithUV(var2 + var36, var4 + 1.0D, var32, (double)var17, (double)var18);
-		var12.addVertexWithUV(var28, var4 + 1.0D, var6 + var36, (double)var16, (double)var18);
-		var12.addVertexWithUV(var28 + var8, var4 + 0.0D, var6 + var36 + var10, (double)var16, (double)var19);
-		var12.addVertexWithUV(var30 + var8, var4 + 0.0D, var6 + var36 + var10, (double)var17, (double)var19);
-		var12.addVertexWithUV(var30, var4 + 1.0D, var6 + var36, (double)var17, (double)var18);
-		var12.addVertexWithUV(var30, var4 + 1.0D, var6 - var36, (double)var16, (double)var18);
-		var12.addVertexWithUV(var30 + var8, var4 + 0.0D, var6 - var36 + var10, (double)var16, (double)var19);
-		var12.addVertexWithUV(var28 + var8, var4 + 0.0D, var6 - var36 + var10, (double)var17, (double)var19);
-		var12.addVertexWithUV(var28, var4 + 1.0D, var6 - var36, (double)var17, (double)var18);
-	}
-
-	public void renderCrossedSquares(Block var1, int var2, double var3, double var5, double var7) {
-		Tessellator var9 = Tessellator.instance;
-		int var10 = var1.getBlockTextureFromSideAndMetadata(0, var2);
-		if(this.overrideBlockTexture >= 0) {
-			var10 = this.overrideBlockTexture;
-		}
-
-		int var11 = (var10 & 15) << 4;
-		int var12 = var10 & 240;
-		double var13 = (double)((float)var11 / 256.0F);
-		double var15 = (double)(((float)var11 + 15.99F) / 256.0F);
-		double var17 = (double)((float)var12 / 256.0F);
-		double var19 = (double)(((float)var12 + 15.99F) / 256.0F);
-		double var21 = var3 + 0.5D - (double)0.45F;
-		double var23 = var3 + 0.5D + (double)0.45F;
-		double var25 = var7 + 0.5D - (double)0.45F;
-		double var27 = var7 + 0.5D + (double)0.45F;
-		var9.addVertexWithUV(var21, var5 + 1.0D, var25, var13, var17);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var25, var13, var19);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var27, var15, var19);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var27, var15, var17);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var27, var13, var17);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var27, var13, var19);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var25, var15, var19);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var25, var15, var17);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var27, var13, var17);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var27, var13, var19);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var25, var15, var19);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var25, var15, var17);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var25, var13, var17);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var25, var13, var19);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var27, var15, var19);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var27, var15, var17);
-	}
-
-	public void renderBlockCropsImpl(Block var1, int var2, double var3, double var5, double var7) {
-		Tessellator var9 = Tessellator.instance;
-		int var10 = var1.getBlockTextureFromSideAndMetadata(0, var2);
-		if(this.overrideBlockTexture >= 0) {
-			var10 = this.overrideBlockTexture;
-		}
-
-		int var11 = (var10 & 15) << 4;
-		int var12 = var10 & 240;
-		double var13 = (double)((float)var11 / 256.0F);
-		double var15 = (double)(((float)var11 + 15.99F) / 256.0F);
-		double var17 = (double)((float)var12 / 256.0F);
-		double var19 = (double)(((float)var12 + 15.99F) / 256.0F);
-		double var21 = var3 + 0.5D - 0.25D;
-		double var23 = var3 + 0.5D + 0.25D;
-		double var25 = var7 + 0.5D - 0.5D;
-		double var27 = var7 + 0.5D + 0.5D;
-		var9.addVertexWithUV(var21, var5 + 1.0D, var25, var13, var17);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var25, var13, var19);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var27, var15, var19);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var27, var15, var17);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var27, var13, var17);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var27, var13, var19);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var25, var15, var19);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var25, var15, var17);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var27, var13, var17);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var27, var13, var19);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var25, var15, var19);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var25, var15, var17);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var25, var13, var17);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var25, var13, var19);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var27, var15, var19);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var27, var15, var17);
-		var21 = var3 + 0.5D - 0.5D;
-		var23 = var3 + 0.5D + 0.5D;
-		var25 = var7 + 0.5D - 0.25D;
-		var27 = var7 + 0.5D + 0.25D;
-		var9.addVertexWithUV(var21, var5 + 1.0D, var25, var13, var17);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var25, var13, var19);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var25, var15, var19);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var25, var15, var17);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var25, var13, var17);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var25, var13, var19);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var25, var15, var19);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var25, var15, var17);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var27, var13, var17);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var27, var13, var19);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var27, var15, var19);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var27, var15, var17);
-		var9.addVertexWithUV(var21, var5 + 1.0D, var27, var13, var17);
-		var9.addVertexWithUV(var21, var5 + 0.0D, var27, var13, var19);
-		var9.addVertexWithUV(var23, var5 + 0.0D, var27, var15, var19);
-		var9.addVertexWithUV(var23, var5 + 1.0D, var27, var15, var17);
-	}
-
-	public boolean renderBlockFluids(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		boolean var6 = var1.shouldSideBeRendered(this.blockAccess, var2, var3 + 1, var4, 1);
-		boolean var7 = var1.shouldSideBeRendered(this.blockAccess, var2, var3 - 1, var4, 0);
-		boolean[] var8 = new boolean[]{var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2), var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 + 1, 3), var1.shouldSideBeRendered(this.blockAccess, var2 - 1, var3, var4, 4), var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5)};
-		if(!var6 && !var7 && !var8[0] && !var8[1] && !var8[2] && !var8[3]) {
+					tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + f18), d35, d12, d14);
+					tessellator5.addVertexWithUV((double)(x + 0), (double)(y + 0), d25, d12, d16);
+					tessellator5.addVertexWithUV((double)(x + 1), (double)(y + 0), d25, d10, d16);
+					tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + f18), d35, d10, d14);
+					d10 = (double)((float)i8 / 256.0F);
+					d12 = (double)(((float)i8 + 15.99F) / 256.0F);
+					d14 = (double)((float)(i9 + 16) / 512.0F);
+					d16 = (double)(((float)i9 + 15.99F + 16.0F) / 512.0F);
+					tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + f18), d31, d12, d14);
+					tessellator5.addVertexWithUV((double)(x + 1), (double)(y + 0), d23, d12, d16);
+					tessellator5.addVertexWithUV((double)(x + 0), (double)(y + 0), d23, d10, d16);
+					tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + f18), d31, d10, d14);
+				}
+			}
+		} else {
+			double d33 = (double)x + 0.5D + 0.2D;
+			d19 = (double)x + 0.5D - 0.2D;
+			d21 = (double)z + 0.5D + 0.2D;
+			d23 = (double)z + 0.5D - 0.2D;
+			d25 = (double)x + 0.5D - 0.3D;
+			d27 = (double)x + 0.5D + 0.3D;
+			d29 = (double)z + 0.5D - 0.3D;
+			d31 = (double)z + 0.5D + 0.3D;
+			tessellator5.addVertexWithUV(d25, (double)((float)y + f18), (double)(z + 1), d12, d14);
+			tessellator5.addVertexWithUV(d33, (double)(y + 0), (double)(z + 1), d12, d16);
+			tessellator5.addVertexWithUV(d33, (double)(y + 0), (double)(z + 0), d10, d16);
+			tessellator5.addVertexWithUV(d25, (double)((float)y + f18), (double)(z + 0), d10, d14);
+			tessellator5.addVertexWithUV(d27, (double)((float)y + f18), (double)(z + 0), d12, d14);
+			tessellator5.addVertexWithUV(d19, (double)(y + 0), (double)(z + 0), d12, d16);
+			tessellator5.addVertexWithUV(d19, (double)(y + 0), (double)(z + 1), d10, d16);
+			tessellator5.addVertexWithUV(d27, (double)((float)y + f18), (double)(z + 1), d10, d14);
+			d10 = (double)((float)i8 / 256.0F);
+			d12 = (double)(((float)i8 + 15.99F) / 256.0F);
+			d14 = (double)((float)(i9 + 16) / 512.0F);
+			d16 = (double)(((float)i9 + 15.99F + 16.0F) / 512.0F);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + f18), d31, d12, d14);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)(y + 0), d23, d12, d16);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)(y + 0), d23, d10, d16);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + f18), d31, d10, d14);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + f18), d29, d12, d14);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)(y + 0), d21, d12, d16);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)(y + 0), d21, d10, d16);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + f18), d29, d10, d14);
+			d33 = (double)x + 0.5D - 0.5D;
+			d19 = (double)x + 0.5D + 0.5D;
+			d21 = (double)z + 0.5D - 0.5D;
+			d23 = (double)z + 0.5D + 0.5D;
+			d25 = (double)x + 0.5D - 0.4D;
+			d27 = (double)x + 0.5D + 0.4D;
+			d29 = (double)z + 0.5D - 0.4D;
+			d31 = (double)z + 0.5D + 0.4D;
+			tessellator5.addVertexWithUV(d25, (double)((float)y + f18), (double)(z + 0), d10, d14);
+			tessellator5.addVertexWithUV(d33, (double)(y + 0), (double)(z + 0), d10, d16);
+			tessellator5.addVertexWithUV(d33, (double)(y + 0), (double)(z + 1), d12, d16);
+			tessellator5.addVertexWithUV(d25, (double)((float)y + f18), (double)(z + 1), d12, d14);
+			tessellator5.addVertexWithUV(d27, (double)((float)y + f18), (double)(z + 1), d10, d14);
+			tessellator5.addVertexWithUV(d19, (double)(y + 0), (double)(z + 1), d10, d16);
+			tessellator5.addVertexWithUV(d19, (double)(y + 0), (double)(z + 0), d12, d16);
+			tessellator5.addVertexWithUV(d27, (double)((float)y + f18), (double)(z + 0), d12, d14);
+			d10 = (double)((float)i8 / 256.0F);
+			d12 = (double)(((float)i8 + 15.99F) / 256.0F);
+			d14 = (double)((float)i9 / 512.0F);
+			d16 = (double)(((float)i9 + 15.99F) / 512.0F);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + f18), d31, d10, d14);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)(y + 0), d23, d10, d16);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)(y + 0), d23, d12, d16);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + f18), d31, d12, d14);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + f18), d29, d10, d14);
+			tessellator5.addVertexWithUV((double)(x + 1), (double)(y + 0), d21, d10, d16);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)(y + 0), d21, d12, d16);
+			tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + f18), d29, d12, d14);
+		}
+
+		return true;
+	}
+
+	public boolean renderBlockRedstoneWire(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		int i6 = block.getBlockTextureFromSideAndMetadata(1, this.blockAccess.getBlockMetadata(x, y, z));
+		if(this.overrideBlockTexture >= 0) {
+			i6 = this.overrideBlockTexture;
+		}
+
+		float f7 = block.getRenderSideBrightness(this.blockAccess, x, y, z);
+		tessellator5.setColorOpaque_F(f7, f7, f7);
+		int i8 = (i6 & 15) << 4;
+		int i9 = i6 & 4080;
+		double d10 = (double)((float)i8 / 256.0F);
+		double d12 = (double)(((float)i8 + 15.99F) / 256.0F);
+		double d14 = (double)((float)i9 / 512.0F);
+		double d16 = (double)(((float)i9 + 15.99F) / 512.0F);
+		float f18 = 0.0F;
+		float f19 = 0.03125F;
+		boolean z20 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x - 1, y, z) || !this.blockAccess.isBlockNormalCube(x - 1, y, z) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x - 1, y - 1, z);
+		boolean z21 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x + 1, y, z) || !this.blockAccess.isBlockNormalCube(x + 1, y, z) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x + 1, y - 1, z);
+		boolean z22 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x, y, z - 1) || !this.blockAccess.isBlockNormalCube(x, y, z - 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x, y - 1, z - 1);
+		boolean z23 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x, y, z + 1) || !this.blockAccess.isBlockNormalCube(x, y, z + 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x, y - 1, z + 1);
+		if(!this.blockAccess.isBlockNormalCube(x, y + 1, z)) {
+			if(this.blockAccess.isBlockNormalCube(x - 1, y, z) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x - 1, y + 1, z)) {
+				z20 = true;
+			}
+
+			if(this.blockAccess.isBlockNormalCube(x + 1, y, z) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x + 1, y + 1, z)) {
+				z21 = true;
+			}
+
+			if(this.blockAccess.isBlockNormalCube(x, y, z - 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x, y + 1, z - 1)) {
+				z22 = true;
+			}
+
+			if(this.blockAccess.isBlockNormalCube(x, y, z + 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, x, y + 1, z + 1)) {
+				z23 = true;
+			}
+		}
+
+		float f24 = 0.3125F;
+		float f25 = (float)(x + 0);
+		float f26 = (float)(x + 1);
+		float f27 = (float)(z + 0);
+		float f28 = (float)(z + 1);
+		byte b29 = 0;
+		if((z20 || z21) && !z22 && !z23) {
+			b29 = 1;
+		}
+
+		if((z22 || z23) && !z21 && !z20) {
+			b29 = 2;
+		}
+
+		if(b29 != 0) {
+			d10 = (double)((float)(i8 + 16) / 256.0F);
+			d12 = (double)(((float)(i8 + 16) + 15.99F) / 256.0F);
+			d14 = (double)((float)i9 / 512.0F);
+			d16 = (double)(((float)i9 + 15.99F) / 512.0F);
+		}
+
+		if(b29 == 0) {
+			if(z21 || z22 || z23 || z20) {
+				if(!z20) {
+					f25 += f24;
+				}
+
+				if(!z20) {
+					d10 += (double)(f24 / 16.0F);
+				}
+
+				if(!z21) {
+					f26 -= f24;
+				}
+
+				if(!z21) {
+					d12 -= (double)(f24 / 16.0F);
+				}
+
+				if(!z22) {
+					f27 += f24;
+				}
+
+				if(!z22) {
+					d14 += (double)(f24 / 32.0F);
+				}
+
+				if(!z23) {
+					f28 -= f24;
+				}
+
+				if(!z23) {
+					d16 -= (double)(f24 / 32.0F);
+				}
+			}
+
+			tessellator5.addVertexWithUV((double)(f26 + f18), (double)((float)y + f19), (double)(f28 + f18), d12, d16);
+			tessellator5.addVertexWithUV((double)(f26 + f18), (double)((float)y + f19), (double)(f27 - f18), d12, d14);
+			tessellator5.addVertexWithUV((double)(f25 - f18), (double)((float)y + f19), (double)(f27 - f18), d10, d14);
+			tessellator5.addVertexWithUV((double)(f25 - f18), (double)((float)y + f19), (double)(f28 + f18), d10, d16);
+		}
+
+		if(b29 == 1) {
+			tessellator5.addVertexWithUV((double)(f26 + f18), (double)((float)y + f19), (double)(f28 + f18), d12, d16);
+			tessellator5.addVertexWithUV((double)(f26 + f18), (double)((float)y + f19), (double)(f27 - f18), d12, d14);
+			tessellator5.addVertexWithUV((double)(f25 - f18), (double)((float)y + f19), (double)(f27 - f18), d10, d14);
+			tessellator5.addVertexWithUV((double)(f25 - f18), (double)((float)y + f19), (double)(f28 + f18), d10, d16);
+		}
+
+		if(b29 == 2) {
+			tessellator5.addVertexWithUV((double)(f26 + f18), (double)((float)y + f19), (double)(f28 + f18), d12, d16);
+			tessellator5.addVertexWithUV((double)(f26 + f18), (double)((float)y + f19), (double)(f27 - f18), d10, d16);
+			tessellator5.addVertexWithUV((double)(f25 - f18), (double)((float)y + f19), (double)(f27 - f18), d10, d14);
+			tessellator5.addVertexWithUV((double)(f25 - f18), (double)((float)y + f19), (double)(f28 + f18), d12, d14);
+		}
+
+		d10 = (double)((float)(i8 + 16) / 256.0F);
+		d12 = (double)(((float)(i8 + 16) + 15.99F) / 256.0F);
+		d14 = (double)((float)i9 / 512.0F);
+		d16 = (double)(((float)i9 + 15.99F) / 512.0F);
+		if(!this.blockAccess.isBlockNormalCube(x, y + 1, z)) {
+			if(this.blockAccess.isBlockNormalCube(x - 1, y, z) && this.blockAccess.getBlockId(x - 1, y + 1, z) == Block.redstoneWire.blockID) {
+				tessellator5.addVertexWithUV((double)((float)x + f19), (double)((float)(y + 1) + f18), (double)((float)(z + 1) + f18), d12, d14);
+				tessellator5.addVertexWithUV((double)((float)x + f19), (double)((float)(y + 0) - f18), (double)((float)(z + 1) + f18), d10, d14);
+				tessellator5.addVertexWithUV((double)((float)x + f19), (double)((float)(y + 0) - f18), (double)((float)(z + 0) - f18), d10, d16);
+				tessellator5.addVertexWithUV((double)((float)x + f19), (double)((float)(y + 1) + f18), (double)((float)(z + 0) - f18), d12, d16);
+			}
+
+			if(this.blockAccess.isBlockNormalCube(x + 1, y, z) && this.blockAccess.getBlockId(x + 1, y + 1, z) == Block.redstoneWire.blockID) {
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - f19), (double)((float)(y + 0) - f18), (double)((float)(z + 1) + f18), d10, d16);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - f19), (double)((float)(y + 1) + f18), (double)((float)(z + 1) + f18), d12, d16);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - f19), (double)((float)(y + 1) + f18), (double)((float)(z + 0) - f18), d12, d14);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) - f19), (double)((float)(y + 0) - f18), (double)((float)(z + 0) - f18), d10, d14);
+			}
+
+			if(this.blockAccess.isBlockNormalCube(x, y, z - 1) && this.blockAccess.getBlockId(x, y + 1, z - 1) == Block.redstoneWire.blockID) {
+				tessellator5.addVertexWithUV((double)((float)(x + 1) + f18), (double)((float)(y + 0) - f18), (double)((float)z + f19), d10, d16);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) + f18), (double)((float)(y + 1) + f18), (double)((float)z + f19), d12, d16);
+				tessellator5.addVertexWithUV((double)((float)(x + 0) - f18), (double)((float)(y + 1) + f18), (double)((float)z + f19), d12, d14);
+				tessellator5.addVertexWithUV((double)((float)(x + 0) - f18), (double)((float)(y + 0) - f18), (double)((float)z + f19), d10, d14);
+			}
+
+			if(this.blockAccess.isBlockNormalCube(x, y, z + 1) && this.blockAccess.getBlockId(x, y + 1, z + 1) == Block.redstoneWire.blockID) {
+				tessellator5.addVertexWithUV((double)((float)(x + 1) + f18), (double)((float)(y + 1) + f18), (double)((float)(z + 1) - f19), d12, d14);
+				tessellator5.addVertexWithUV((double)((float)(x + 1) + f18), (double)((float)(y + 0) - f18), (double)((float)(z + 1) - f19), d10, d14);
+				tessellator5.addVertexWithUV((double)((float)(x + 0) - f18), (double)((float)(y + 0) - f18), (double)((float)(z + 1) - f19), d10, d16);
+				tessellator5.addVertexWithUV((double)((float)(x + 0) - f18), (double)((float)(y + 1) + f18), (double)((float)(z + 1) - f19), d12, d16);
+			}
+		}
+
+		return true;
+	}
+
+	public boolean renderBlockMinecartTrack(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		int i6 = this.blockAccess.getBlockMetadata(x, y, z);
+		int i7 = block.getBlockTextureFromSideAndMetadata(0, i6);
+		if(this.overrideBlockTexture >= 0) {
+			i7 = this.overrideBlockTexture;
+		}
+
+		float f8 = block.getRenderSideBrightness(this.blockAccess, x, y, z);
+		tessellator5.setColorOpaque_F(f8, f8, f8);
+		int i9 = (i7 & 15) << 4;
+		int i10 = i7 & 4080;
+		double d11 = (double)((float)i9 / 256.0F);
+		double d13 = (double)(((float)i9 + 15.99F) / 256.0F);
+		double d15 = (double)((float)i10 / 512.0F);
+		double d17 = (double)(((float)i10 + 15.99F) / 512.0F);
+		float f19 = 0.0625F;
+		float f20 = (float)(x + 1);
+		float f21 = (float)(x + 1);
+		float f22 = (float)(x + 0);
+		float f23 = (float)(x + 0);
+		float f24 = (float)(z + 0);
+		float f25 = (float)(z + 1);
+		float f26 = (float)(z + 1);
+		float f27 = (float)(z + 0);
+		float f28 = (float)y + f19;
+		float f29 = (float)y + f19;
+		float f30 = (float)y + f19;
+		float f31 = (float)y + f19;
+		if(i6 != 1 && i6 != 2 && i6 != 3 && i6 != 7) {
+			if(i6 == 8) {
+				f20 = f21 = (float)(x + 0);
+				f22 = f23 = (float)(x + 1);
+				f24 = f27 = (float)(z + 1);
+				f25 = f26 = (float)(z + 0);
+			} else if(i6 == 9) {
+				f20 = f23 = (float)(x + 0);
+				f21 = f22 = (float)(x + 1);
+				f24 = f25 = (float)(z + 0);
+				f26 = f27 = (float)(z + 1);
+			}
+		} else {
+			f20 = f23 = (float)(x + 1);
+			f21 = f22 = (float)(x + 0);
+			f24 = f25 = (float)(z + 1);
+			f26 = f27 = (float)(z + 0);
+		}
+
+		if(i6 != 2 && i6 != 4) {
+			if(i6 == 3 || i6 == 5) {
+				++f29;
+				++f30;
+			}
+		} else {
+			++f28;
+			++f31;
+		}
+
+		tessellator5.addVertexWithUV((double)f20, (double)f28, (double)f24, d13, d15);
+		tessellator5.addVertexWithUV((double)f21, (double)f29, (double)f25, d13, d17);
+		tessellator5.addVertexWithUV((double)f22, (double)f30, (double)f26, d11, d17);
+		tessellator5.addVertexWithUV((double)f23, (double)f31, (double)f27, d11, d15);
+		tessellator5.addVertexWithUV((double)f23, (double)f31, (double)f27, d11, d15);
+		tessellator5.addVertexWithUV((double)f22, (double)f30, (double)f26, d11, d17);
+		tessellator5.addVertexWithUV((double)f21, (double)f29, (double)f25, d13, d17);
+		tessellator5.addVertexWithUV((double)f20, (double)f28, (double)f24, d13, d15);
+		return true;
+	}
+
+	public boolean renderBlockLadder(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		int i6 = block.getBlockTextureFromSide(0);
+		if(this.overrideBlockTexture >= 0) {
+			i6 = this.overrideBlockTexture;
+		}
+
+		float f7 = block.getRenderSideBrightness(this.blockAccess, x, y, z);
+		tessellator5.setColorOpaque_F(f7, f7, f7);
+		int i8 = (i6 & 15) << 4;
+		int i9 = i6 & 4080;
+		double d10 = (double)((float)i8 / 256.0F);
+		double d12 = (double)(((float)i8 + 15.99F) / 256.0F);
+		double d14 = (double)((float)i9 / 512.0F);
+		double d16 = (double)(((float)i9 + 15.99F) / 512.0F);
+		int i18 = this.blockAccess.getBlockMetadata(x, y, z);
+		float f19 = 0.0F;
+		float f20 = 0.05F;
+		switch(i18) {
+		case 2:
+			tessellator5.addVertexWithUV((double)((float)(x + 1) + f19), (double)((float)(y + 1) + f19), (double)((float)(z + 1) - f20), d10, d14);
+			tessellator5.addVertexWithUV((double)((float)(x + 1) + f19), (double)((float)(y + 0) - f19), (double)((float)(z + 1) - f20), d10, d16);
+			tessellator5.addVertexWithUV((double)((float)(x + 0) - f19), (double)((float)(y + 0) - f19), (double)((float)(z + 1) - f20), d12, d16);
+			tessellator5.addVertexWithUV((double)((float)(x + 0) - f19), (double)((float)(y + 1) + f19), (double)((float)(z + 1) - f20), d12, d14);
+			break;
+		case 3:
+			tessellator5.addVertexWithUV((double)((float)(x + 1) + f19), (double)((float)(y + 0) - f19), (double)((float)z + f20), d12, d16);
+			tessellator5.addVertexWithUV((double)((float)(x + 1) + f19), (double)((float)(y + 1) + f19), (double)((float)z + f20), d12, d14);
+			tessellator5.addVertexWithUV((double)((float)(x + 0) - f19), (double)((float)(y + 1) + f19), (double)((float)z + f20), d10, d14);
+			tessellator5.addVertexWithUV((double)((float)(x + 0) - f19), (double)((float)(y + 0) - f19), (double)((float)z + f20), d10, d16);
+			break;
+		case 4:
+			tessellator5.addVertexWithUV((double)((float)(x + 1) - f20), (double)((float)(y + 0) - f19), (double)((float)(z + 1) + f19), d12, d16);
+			tessellator5.addVertexWithUV((double)((float)(x + 1) - f20), (double)((float)(y + 1) + f19), (double)((float)(z + 1) + f19), d12, d14);
+			tessellator5.addVertexWithUV((double)((float)(x + 1) - f20), (double)((float)(y + 1) + f19), (double)((float)(z + 0) - f19), d10, d14);
+			tessellator5.addVertexWithUV((double)((float)(x + 1) - f20), (double)((float)(y + 0) - f19), (double)((float)(z + 0) - f19), d10, d16);
+			break;
+		case 5:
+			tessellator5.addVertexWithUV((double)((float)x + f20), (double)((float)(y + 1) + f19), (double)((float)(z + 1) + f19), d10, d14);
+			tessellator5.addVertexWithUV((double)((float)x + f20), (double)((float)(y + 0) - f19), (double)((float)(z + 1) + f19), d10, d16);
+			tessellator5.addVertexWithUV((double)((float)x + f20), (double)((float)(y + 0) - f19), (double)((float)(z + 0) - f19), d12, d16);
+			tessellator5.addVertexWithUV((double)((float)x + f20), (double)((float)(y + 1) + f19), (double)((float)(z + 0) - f19), d12, d14);
+			break;
+		case 6:
+			tessellator5.addVertexWithUV((double)((float)(x + 1) + f19), (double)((float)(y + 1) - f20), (double)((float)(z + 1) + f19), d10, d14);
+			tessellator5.addVertexWithUV((double)((float)(x + 0) - f19), (double)((float)(y + 1) - f20), (double)((float)(z + 1) + f19), d10, d16);
+			tessellator5.addVertexWithUV((double)((float)(x + 0) - f19), (double)((float)(y + 1) - f20), (double)((float)(z + 0) - f19), d12, d16);
+			tessellator5.addVertexWithUV((double)((float)(x + 1) + f19), (double)((float)(y + 1) - f20), (double)((float)(z + 0) - f19), d12, d14);
+			break;
+		case 7:
+			tessellator5.addVertexWithUV((double)((float)(x + 1) + f19), (double)((float)y + f20), (double)((float)(z + 1) + f19), d10, d14);
+			tessellator5.addVertexWithUV((double)((float)(x + 1) + f19), (double)((float)y + f20), (double)((float)(z + 0) - f19), d10, d16);
+			tessellator5.addVertexWithUV((double)((float)(x + 0) - f19), (double)((float)y + f20), (double)((float)(z + 0) - f19), d12, d16);
+			tessellator5.addVertexWithUV((double)((float)(x + 0) - f19), (double)((float)y + f20), (double)((float)(z + 1) + f19), d12, d14);
+		}
+
+		return true;
+	}
+
+	public boolean renderBlockReed(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		float f6 = block.getRenderSideBrightness(this.blockAccess, x, y, z);
+		tessellator5.setColorOpaque_F(f6, f6, f6);
+		this.renderCrossedSquares(block, this.blockAccess.getBlockMetadata(x, y, z), (double)x, (double)y, (double)z);
+		return true;
+	}
+
+	public boolean renderBlockCrops(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		float f6 = block.getRenderSideBrightness(this.blockAccess, x, y, z);
+		tessellator5.setColorOpaque_F(f6, f6, f6);
+		this.renderBlockCropsImpl(block, this.blockAccess.getBlockMetadata(x, y, z), (double)x, (double)((float)y - 0.0625F), (double)z);
+		return true;
+	}
+
+	public void renderTorchAtAngle(Block block, double double2, double double3, double double4, double double5, double double6) {
+		Tessellator tessellator12 = Tessellator.instance;
+		int i13 = block.getBlockTextureFromSide(0);
+		if(this.overrideBlockTexture >= 0) {
+			i13 = this.overrideBlockTexture;
+		}
+
+		int i14 = (i13 & 15) << 4;
+		int i15 = i13 & 4080;
+		float f16 = (float)i14 / 256.0F;
+		float f17 = ((float)i14 + 15.99F) / 256.0F;
+		float f18 = (float)i15 / 512.0F;
+		float f19 = ((float)i15 + 15.99F) / 512.0F;
+		double d20 = (double)f16 + 7.0D / 256D;
+		double d22 = (double)f18 + 6.0D / 256D;
+		double d24 = (double)f16 + 9.0D / 256D;
+		double d26 = (double)f18 + 8.0D / 256D;
+		double2 += 0.5D;
+		double4 += 0.5D;
+		double d28 = double2 - 0.5D;
+		double d30 = double2 + 0.5D;
+		double d32 = double4 - 0.5D;
+		double d34 = double4 + 0.5D;
+		double d36 = 0.0625D;
+		double d38 = 0.625D;
+		tessellator12.addVertexWithUV(double2 + double5 * (1.0D - d38) - d36, double3 + d38, double4 + double6 * (1.0D - d38) - d36, d20, d22);
+		tessellator12.addVertexWithUV(double2 + double5 * (1.0D - d38) - d36, double3 + d38, double4 + double6 * (1.0D - d38) + d36, d20, d26);
+		tessellator12.addVertexWithUV(double2 + double5 * (1.0D - d38) + d36, double3 + d38, double4 + double6 * (1.0D - d38) + d36, d24, d26);
+		tessellator12.addVertexWithUV(double2 + double5 * (1.0D - d38) + d36, double3 + d38, double4 + double6 * (1.0D - d38) - d36, d24, d22);
+		tessellator12.addVertexWithUV(double2 - d36, double3 + 1.0D, d32, (double)f16, (double)f18);
+		tessellator12.addVertexWithUV(double2 - d36 + double5, double3 + 0.0D, d32 + double6, (double)f16, (double)f19);
+		tessellator12.addVertexWithUV(double2 - d36 + double5, double3 + 0.0D, d34 + double6, (double)f17, (double)f19);
+		tessellator12.addVertexWithUV(double2 - d36, double3 + 1.0D, d34, (double)f17, (double)f18);
+		tessellator12.addVertexWithUV(double2 + d36, double3 + 1.0D, d34, (double)f16, (double)f18);
+		tessellator12.addVertexWithUV(double2 + double5 + d36, double3 + 0.0D, d34 + double6, (double)f16, (double)f19);
+		tessellator12.addVertexWithUV(double2 + double5 + d36, double3 + 0.0D, d32 + double6, (double)f17, (double)f19);
+		tessellator12.addVertexWithUV(double2 + d36, double3 + 1.0D, d32, (double)f17, (double)f18);
+		tessellator12.addVertexWithUV(d28, double3 + 1.0D, double4 + d36, (double)f16, (double)f18);
+		tessellator12.addVertexWithUV(d28 + double5, double3 + 0.0D, double4 + d36 + double6, (double)f16, (double)f19);
+		tessellator12.addVertexWithUV(d30 + double5, double3 + 0.0D, double4 + d36 + double6, (double)f17, (double)f19);
+		tessellator12.addVertexWithUV(d30, double3 + 1.0D, double4 + d36, (double)f17, (double)f18);
+		tessellator12.addVertexWithUV(d30, double3 + 1.0D, double4 - d36, (double)f16, (double)f18);
+		tessellator12.addVertexWithUV(d30 + double5, double3 + 0.0D, double4 - d36 + double6, (double)f16, (double)f19);
+		tessellator12.addVertexWithUV(d28 + double5, double3 + 0.0D, double4 - d36 + double6, (double)f17, (double)f19);
+		tessellator12.addVertexWithUV(d28, double3 + 1.0D, double4 - d36, (double)f17, (double)f18);
+	}
+
+	public void renderCrossedSquares(Block block, int metadata, double x, double y, double z) {
+		Tessellator tessellator9 = Tessellator.instance;
+		int i10 = block.func_8086_562a2lhwZKvA2q1SYRkk6a3ib277RkRI785Nc3EOo7NAF01ZLdp6C8534NoH(this.blockAccess, 0, metadata, x, y, z);
+		if(this.overrideBlockTexture >= 0) {
+			i10 = this.overrideBlockTexture;
+		}
+
+		int i11 = (i10 & 15) << 4;
+		int i12 = i10 & 4080;
+		double d13 = (double)((float)i11 / 256.0F);
+		double d15 = (double)(((float)i11 + 15.99F) / 256.0F);
+		double d17 = (double)((float)i12 / 512.0F);
+		double d19 = (double)(((float)i12 + 15.99F) / 512.0F);
+		double d21 = x + 0.5D - (double)0.45F;
+		double d23 = x + 0.5D + (double)0.45F;
+		double d25 = z + 0.5D - (double)0.45F;
+		double d27 = z + 0.5D + (double)0.45F;
+		tessellator9.addVertexWithUV(d21, y + 1.0D, d25, d13, d17);
+		tessellator9.addVertexWithUV(d21, y + 0.0D, d25, d13, d19);
+		tessellator9.addVertexWithUV(d23, y + 0.0D, d27, d15, d19);
+		tessellator9.addVertexWithUV(d23, y + 1.0D, d27, d15, d17);
+		tessellator9.addVertexWithUV(d23, y + 1.0D, d27, d13, d17);
+		tessellator9.addVertexWithUV(d23, y + 0.0D, d27, d13, d19);
+		tessellator9.addVertexWithUV(d21, y + 0.0D, d25, d15, d19);
+		tessellator9.addVertexWithUV(d21, y + 1.0D, d25, d15, d17);
+		tessellator9.addVertexWithUV(d21, y + 1.0D, d27, d13, d17);
+		tessellator9.addVertexWithUV(d21, y + 0.0D, d27, d13, d19);
+		tessellator9.addVertexWithUV(d23, y + 0.0D, d25, d15, d19);
+		tessellator9.addVertexWithUV(d23, y + 1.0D, d25, d15, d17);
+		tessellator9.addVertexWithUV(d23, y + 1.0D, d25, d13, d17);
+		tessellator9.addVertexWithUV(d23, y + 0.0D, d25, d13, d19);
+		tessellator9.addVertexWithUV(d21, y + 0.0D, d27, d15, d19);
+		tessellator9.addVertexWithUV(d21, y + 1.0D, d27, d15, d17);
+	}
+
+	public void renderBlockCropsImpl(Block block, int metadata, double x, double y, double z) {
+		Tessellator tessellator9 = Tessellator.instance;
+		int i10 = block.getBlockTextureFromSideAndMetadata(0, metadata);
+		if(this.overrideBlockTexture >= 0) {
+			i10 = this.overrideBlockTexture;
+		}
+
+		int i11 = (i10 & 15) << 4;
+		int i12 = i10 & 4080;
+		double d13 = (double)((float)i11 / 256.0F);
+		double d15 = (double)(((float)i11 + 15.99F) / 256.0F);
+		double d17 = (double)((float)i12 / 512.0F);
+		double d19 = (double)(((float)i12 + 15.99F) / 512.0F);
+		double d21 = x + 0.5D - 0.25D;
+		double d23 = x + 0.5D + 0.25D;
+		double d25 = z + 0.5D - 0.5D;
+		double d27 = z + 0.5D + 0.5D;
+		tessellator9.addVertexWithUV(d21, y + 1.0D, d25, d13, d17);
+		tessellator9.addVertexWithUV(d21, y + 0.0D, d25, d13, d19);
+		tessellator9.addVertexWithUV(d21, y + 0.0D, d27, d15, d19);
+		tessellator9.addVertexWithUV(d21, y + 1.0D, d27, d15, d17);
+		tessellator9.addVertexWithUV(d21, y + 1.0D, d27, d13, d17);
+		tessellator9.addVertexWithUV(d21, y + 0.0D, d27, d13, d19);
+		tessellator9.addVertexWithUV(d21, y + 0.0D, d25, d15, d19);
+		tessellator9.addVertexWithUV(d21, y + 1.0D, d25, d15, d17);
+		tessellator9.addVertexWithUV(d23, y + 1.0D, d27, d13, d17);
+		tessellator9.addVertexWithUV(d23, y + 0.0D, d27, d13, d19);
+		tessellator9.addVertexWithUV(d23, y + 0.0D, d25, d15, d19);
+		tessellator9.addVertexWithUV(d23, y + 1.0D, d25, d15, d17);
+		tessellator9.addVertexWithUV(d23, y + 1.0D, d25, d13, d17);
+		tessellator9.addVertexWithUV(d23, y + 0.0D, d25, d13, d19);
+		tessellator9.addVertexWithUV(d23, y + 0.0D, d27, d15, d19);
+		tessellator9.addVertexWithUV(d23, y + 1.0D, d27, d15, d17);
+		d21 = x + 0.5D - 0.5D;
+		d23 = x + 0.5D + 0.5D;
+		d25 = z + 0.5D - 0.25D;
+		d27 = z + 0.5D + 0.25D;
+		tessellator9.addVertexWithUV(d21, y + 1.0D, d25, d13, d17);
+		tessellator9.addVertexWithUV(d21, y + 0.0D, d25, d13, d19);
+		tessellator9.addVertexWithUV(d23, y + 0.0D, d25, d15, d19);
+		tessellator9.addVertexWithUV(d23, y + 1.0D, d25, d15, d17);
+		tessellator9.addVertexWithUV(d23, y + 1.0D, d25, d13, d17);
+		tessellator9.addVertexWithUV(d23, y + 0.0D, d25, d13, d19);
+		tessellator9.addVertexWithUV(d21, y + 0.0D, d25, d15, d19);
+		tessellator9.addVertexWithUV(d21, y + 1.0D, d25, d15, d17);
+		tessellator9.addVertexWithUV(d23, y + 1.0D, d27, d13, d17);
+		tessellator9.addVertexWithUV(d23, y + 0.0D, d27, d13, d19);
+		tessellator9.addVertexWithUV(d21, y + 0.0D, d27, d15, d19);
+		tessellator9.addVertexWithUV(d21, y + 1.0D, d27, d15, d17);
+		tessellator9.addVertexWithUV(d21, y + 1.0D, d27, d13, d17);
+		tessellator9.addVertexWithUV(d21, y + 0.0D, d27, d13, d19);
+		tessellator9.addVertexWithUV(d23, y + 0.0D, d27, d15, d19);
+		tessellator9.addVertexWithUV(d23, y + 1.0D, d27, d15, d17);
+	}
+
+	public boolean renderBlockFluids(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		boolean z6 = block.shouldSideBeRendered(this.blockAccess, x, y + 1, z, 1);
+		boolean z7 = block.shouldSideBeRendered(this.blockAccess, x, y - 1, z, 0);
+		boolean[] z8 = new boolean[]{block.shouldSideBeRendered(this.blockAccess, x, y, z - 1, 2), block.shouldSideBeRendered(this.blockAccess, x, y, z + 1, 3), block.shouldSideBeRendered(this.blockAccess, x - 1, y, z, 4), block.shouldSideBeRendered(this.blockAccess, x + 1, y, z, 5)};
+		if(!z6 && !z7 && !z8[0] && !z8[1] && !z8[2] && !z8[3]) {
 			return false;
 		} else {
-			boolean var9 = false;
-			float var10 = 0.5F;
-			float var11 = 1.0F;
-			float var12 = 0.8F;
-			float var13 = 0.6F;
-			double var14 = 0.0D;
-			double var16 = 1.0D;
-			Material var18 = var1.material;
-			int var19 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-			float var20 = this.getFluidHeight(var2, var3, var4, var18);
-			float var21 = this.getFluidHeight(var2, var3, var4 + 1, var18);
-			float var22 = this.getFluidHeight(var2 + 1, var3, var4 + 1, var18);
-			float var23 = this.getFluidHeight(var2 + 1, var3, var4, var18);
-			int var24;
-			int var27;
-			float var32;
-			float var33;
-			float var34;
-			if(this.renderAllFaces || var6) {
-				var9 = true;
-				var24 = var1.getBlockTextureFromSideAndMetadata(1, var19);
-				float var25 = (float)BlockFluid.getFlowDirection(this.blockAccess, var2, var3, var4, var18);
-				if(var25 > -999.0F) {
-					var24 = var1.getBlockTextureFromSideAndMetadata(2, var19);
+			boolean z9 = false;
+			float f10 = 0.5F;
+			float f11 = 1.0F;
+			float f12 = 0.8F;
+			float f13 = 0.6F;
+			double d14 = 0.0D;
+			double d16 = 1.0D;
+			Material material18 = block.material;
+			int i19 = this.blockAccess.getBlockMetadata(x, y, z);
+			float f20 = this.getFluidHeight(x, y, z, material18);
+			float f21 = this.getFluidHeight(x, y, z + 1, material18);
+			float f22 = this.getFluidHeight(x + 1, y, z + 1, material18);
+			float f23 = this.getFluidHeight(x + 1, y, z, material18);
+			int i24;
+			int i25;
+			float f26;
+			float f27;
+			float f28;
+			float f29;
+			int i30;
+			float f35;
+			if(this.renderAllFaces || z6) {
+				z9 = true;
+				i24 = block.getBlockTextureFromSideAndMetadata(1, i19);
+				f29 = (float)BlockFluid.getFlowDirection(this.blockAccess, x, y, z, material18);
+				if(f29 > -999.0F) {
+					i24 = block.getBlockTextureFromSideAndMetadata(2, i19);
 				}
 
-				int var26 = (var24 & 15) << 4;
-				var27 = var24 & 240;
-				double var28 = ((double)var26 + 8.0D) / 256.0D;
-				double var30 = ((double)var27 + 8.0D) / 256.0D;
-				if(var25 < -999.0F) {
-					var25 = 0.0F;
+				i30 = (i24 & 15) << 4;
+				i25 = i24 & 4080;
+				double d31 = ((double)i30 + 8.0D) / 256.0D;
+				double d33 = ((double)i25 + 8.0D) / 512.0D;
+				if(f29 < -999.0F) {
+					f29 = 0.0F;
 				} else {
-					var28 = (double)((float)(var26 + 16) / 256.0F);
-					var30 = (double)((float)(var27 + 16) / 256.0F);
-				}
-
-				var32 = MathHelper.sin(var25) * 8.0F / 256.0F;
-				var33 = MathHelper.cos(var25) * 8.0F / 256.0F;
-				var34 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-				var5.setColorOpaque_F(var11 * var34, var11 * var34, var11 * var34);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var20), (double)(var4 + 0), var28 - (double)var33 - (double)var32, var30 - (double)var33 + (double)var32);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var21), (double)(var4 + 1), var28 - (double)var33 + (double)var32, var30 + (double)var33 + (double)var32);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var22), (double)(var4 + 1), var28 + (double)var33 + (double)var32, var30 + (double)var33 - (double)var32);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var23), (double)(var4 + 0), var28 + (double)var33 - (double)var32, var30 - (double)var33 - (double)var32);
-			}
-
-			if(this.renderAllFaces || var7) {
-				float var48 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
-				var5.setColorOpaque_F(var10 * var48, var10 * var48, var10 * var48);
-				this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTextureFromSide(0));
-				var9 = true;
-			}
-
-			for(var24 = 0; var24 < 4; ++var24) {
-				int var49 = var2;
-				var27 = var4;
-				if(var24 == 0) {
-					var27 = var4 - 1;
-				}
-
-				if(var24 == 1) {
-					++var27;
-				}
-
-				if(var24 == 2) {
-					var49 = var2 - 1;
-				}
-
-				if(var24 == 3) {
-					++var49;
-				}
-
-				int var50 = var1.getBlockTextureFromSideAndMetadata(var24 + 2, var19);
-				int var29 = (var50 & 15) << 4;
-				int var51 = var50 & 240;
-				if(this.renderAllFaces || var8[var24]) {
-					float var31;
-					float var35;
-					float var36;
-					if(var24 == 0) {
-						var31 = var20;
-						var32 = var23;
-						var33 = (float)var2;
-						var35 = (float)(var2 + 1);
-						var34 = (float)var4;
-						var36 = (float)var4;
-					} else if(var24 == 1) {
-						var31 = var22;
-						var32 = var21;
-						var33 = (float)(var2 + 1);
-						var35 = (float)var2;
-						var34 = (float)(var4 + 1);
-						var36 = (float)(var4 + 1);
-					} else if(var24 == 2) {
-						var31 = var21;
-						var32 = var20;
-						var33 = (float)var2;
-						var35 = (float)var2;
-						var34 = (float)(var4 + 1);
-						var36 = (float)var4;
-					} else {
-						var31 = var23;
-						var32 = var22;
-						var33 = (float)(var2 + 1);
-						var35 = (float)(var2 + 1);
-						var34 = (float)var4;
-						var36 = (float)(var4 + 1);
-					}
-
-					var9 = true;
-					double var37 = (double)((float)(var29 + 0) / 256.0F);
-					double var39 = ((double)(var29 + 16) - 0.01D) / 256.0D;
-					double var41 = (double)(((float)var51 + (1.0F - var31) * 16.0F) / 256.0F);
-					double var43 = (double)(((float)var51 + (1.0F - var32) * 16.0F) / 256.0F);
-					double var45 = ((double)(var51 + 16) - 0.01D) / 256.0D;
-					float var47 = var1.getBlockBrightness(this.blockAccess, var49, var3, var27);
-					if(var24 < 2) {
-						var47 *= var12;
-					} else {
-						var47 *= var13;
-					}
-
-					var5.setColorOpaque_F(var11 * var47, var11 * var47, var11 * var47);
-					var5.addVertexWithUV((double)var33, (double)((float)var3 + var31), (double)var34, var37, var41);
-					var5.addVertexWithUV((double)var35, (double)((float)var3 + var32), (double)var36, var39, var43);
-					var5.addVertexWithUV((double)var35, (double)(var3 + 0), (double)var36, var39, var45);
-					var5.addVertexWithUV((double)var33, (double)(var3 + 0), (double)var34, var37, var45);
-				}
-			}
-
-			var1.minY = var14;
-			var1.maxY = var16;
-			return var9;
+					d31 = (double)((float)(i30 + 16) / 256.0F);
+					d33 = (double)((float)(i25 + 16) / 512.0F);
+				}
+
+				f35 = MathHelper.sin(f29) * 8.0F / 256.0F;
+				float f36 = MathHelper.cos(f29) * 8.0F / 256.0F;
+				f26 = MathHelper.sin(f29) * 8.0F / 512.0F;
+				f27 = MathHelper.cos(f29) * 8.0F / 512.0F;
+				f28 = block.getBlockBrightness(this.blockAccess, x, y, z);
+				tessellator5.setColorOpaque_F(f11 * f28, f11 * f28, f11 * f28);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + f20), (double)(z + 0), d31 - (double)f36 - (double)f35, d33 - (double)f27 + (double)f26);
+				tessellator5.addVertexWithUV((double)(x + 0), (double)((float)y + f21), (double)(z + 1), d31 - (double)f36 + (double)f35, d33 + (double)f27 + (double)f26);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + f22), (double)(z + 1), d31 + (double)f36 + (double)f35, d33 + (double)f27 - (double)f26);
+				tessellator5.addVertexWithUV((double)(x + 1), (double)((float)y + f23), (double)(z + 0), d31 + (double)f36 - (double)f35, d33 - (double)f27 - (double)f26);
+			}
+
+			if(this.renderAllFaces || z7) {
+				f29 = block.getRenderSideBrightness(this.blockAccess, x, y - 1, z);
+				tessellator5.setColorOpaque_F(f10 * f29, f10 * f29, f10 * f29);
+				this.renderBottomFace(block, (double)x, (double)y, (double)z, block.getBlockTextureFromSide(0));
+				z9 = true;
+			}
+
+			for(i24 = 0; i24 < 4; ++i24) {
+				int i47 = x;
+				i25 = z;
+				if(i24 == 0) {
+					i25 = z - 1;
+				}
+
+				if(i24 == 1) {
+					++i25;
+				}
+
+				if(i24 == 2) {
+					i47 = x - 1;
+				}
+
+				if(i24 == 3) {
+					++i47;
+				}
+
+				i30 = block.getBlockTextureFromSideAndMetadata(i24 + 2, i19);
+				int i48 = (i30 & 15) << 4;
+				int i32 = i30 & 4080;
+				if(this.renderAllFaces || z8[i24]) {
+					float f34;
+					float f49;
+					if(i24 == 0) {
+						f49 = f20;
+						f26 = f23;
+						f27 = (float)x;
+						f34 = (float)(x + 1);
+						f28 = (float)z;
+						f35 = (float)z;
+					} else if(i24 == 1) {
+						f49 = f22;
+						f26 = f21;
+						f27 = (float)(x + 1);
+						f34 = (float)x;
+						f28 = (float)(z + 1);
+						f35 = (float)(z + 1);
+					} else if(i24 == 2) {
+						f49 = f21;
+						f26 = f20;
+						f27 = (float)x;
+						f34 = (float)x;
+						f28 = (float)(z + 1);
+						f35 = (float)z;
+					} else {
+						f49 = f23;
+						f26 = f22;
+						f27 = (float)(x + 1);
+						f34 = (float)(x + 1);
+						f28 = (float)z;
+						f35 = (float)(z + 1);
+					}
+
+					z9 = true;
+					double d50 = (double)((float)(i48 + 0) / 256.0F);
+					double d38 = ((double)(i48 + 16) - 0.01D) / 256.0D;
+					double d40 = (double)(((float)i32 + (1.0F - f49) * 16.0F) / 512.0F);
+					double d42 = (double)(((float)i32 + (1.0F - f26) * 16.0F) / 512.0F);
+					double d44 = ((double)(i32 + 16) - 0.01D) / 512.0D;
+					float f46 = block.getRenderSideBrightness(this.blockAccess, i47, y, i25);
+					if(i24 < 2) {
+						f46 *= f12;
+					} else {
+						f46 *= f13;
+					}
+
+					tessellator5.setColorOpaque_F(f11 * f46, f11 * f46, f11 * f46);
+					tessellator5.addVertexWithUV((double)f27, (double)((float)y + f49), (double)f28, d50, d40);
+					tessellator5.addVertexWithUV((double)f34, (double)((float)y + f26), (double)f35, d38, d42);
+					tessellator5.addVertexWithUV((double)f34, (double)(y + 0), (double)f35, d38, d44);
+					tessellator5.addVertexWithUV((double)f27, (double)(y + 0), (double)f28, d50, d44);
+				}
+			}
+
+			block.minY = d14;
+			block.maxY = d16;
+			return z9;
 		}
 	}
 
-	private float getFluidHeight(int var1, int var2, int var3, Material var4) {
-		int var5 = 0;
-		float var6 = 0.0F;
+	private float getFluidHeight(int x, int y, int z, Material material) {
+		int i5 = 0;
+		float f6 = 0.0F;
 
-		for(int var7 = 0; var7 < 4; ++var7) {
-			int var8 = var1 - (var7 & 1);
-			int var10 = var3 - (var7 >> 1 & 1);
-			if(this.blockAccess.getBlockMaterial(var8, var2 + 1, var10) == var4) {
+		for(int i7 = 0; i7 < 4; ++i7) {
+			int i8 = x - (i7 & 1);
+			int i9 = z - (i7 >> 1 & 1);
+			if(this.blockAccess.getBlockMaterial(i8, y + 1, i9) == material) {
 				return 1.0F;
 			}
 
-			Material var11 = this.blockAccess.getBlockMaterial(var8, var2, var10);
-			if(var11 != var4) {
-				if(!var11.isSolid()) {
-					++var6;
-					++var5;
-				}
-			} else {
-				int var12 = this.blockAccess.getBlockMetadata(var8, var2, var10);
-				if(var12 >= 8 || var12 == 0) {
-					var6 += BlockFluid.getFluidHeightPercent(var12) * 10.0F;
-					var5 += 10;
-				}
-
-				var6 += BlockFluid.getFluidHeightPercent(var12);
-				++var5;
-			}
-		}
-
-		return 1.0F - var6 / (float)var5;
-	}
-
-	public void renderBlockFallingSand(Block var1, World var2, int var3, int var4, int var5) {
-		float var6 = 0.5F;
-		float var7 = 1.0F;
-		float var8 = 0.8F;
-		float var9 = 0.6F;
-		Tessellator var10 = Tessellator.instance;
-		var10.startDrawingQuads();
-		float var11 = var1.getBlockBrightness(var2, var3, var4, var5);
-		float var12 = var1.getBlockBrightness(var2, var3, var4 - 1, var5);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var6 * var12, var6 * var12, var6 * var12);
-		this.renderBottomFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(0));
-		var12 = var1.getBlockBrightness(var2, var3, var4 + 1, var5);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var7 * var12, var7 * var12, var7 * var12);
-		this.renderTopFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(1));
-		var12 = var1.getBlockBrightness(var2, var3, var4, var5 - 1);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
-		this.renderEastFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(2));
-		var12 = var1.getBlockBrightness(var2, var3, var4, var5 + 1);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
-		this.renderWestFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(3));
-		var12 = var1.getBlockBrightness(var2, var3 - 1, var4, var5);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
-		this.renderNorthFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(4));
-		var12 = var1.getBlockBrightness(var2, var3 + 1, var4, var5);
-		if(var12 < var11) {
-			var12 = var11;
-		}
-
-		var10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
-		this.renderSouthFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(5));
-		var10.draw();
-	}
-
-	public boolean renderStandardBlock(Block var1, int var2, int var3, int var4) {
-		int var5 = var1.colorMultiplier(this.blockAccess, var2, var3, var4);
-		float var6 = (float)(var5 >> 16 & 255) / 255.0F;
-		float var7 = (float)(var5 >> 8 & 255) / 255.0F;
-		float var8 = (float)(var5 & 255) / 255.0F;
-		return this.renderStandardBlockWithColorMultiplier(var1, var2, var3, var4, var6, var7, var8);
-	}
-
-	public boolean renderStandardBlockWithColorMultiplier(Block var1, int var2, int var3, int var4, float var5, float var6, float var7) {
-		Tessellator var8 = Tessellator.instance;
-		boolean var9 = false;
-		float var10 = 0.5F;
-		float var11 = 1.0F;
-		float var12 = 0.8F;
-		float var13 = 0.6F;
-		float var14 = var10 * var5;
-		float var15 = var11 * var5;
-		float var16 = var12 * var5;
-		float var17 = var13 * var5;
-		float var18 = var10 * var6;
-		float var19 = var11 * var6;
-		float var20 = var12 * var6;
-		float var21 = var13 * var6;
-		float var22 = var10 * var7;
-		float var23 = var11 * var7;
-		float var24 = var12 * var7;
-		float var25 = var13 * var7;
-		float var26 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		float var27;
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 - 1, var4, 0)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
-			var8.setColorOpaque_F(var14 * var27, var18 * var27, var22 * var27);
-			this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0));
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 + 1, var4, 1)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2, var3 + 1, var4);
-			if(var1.maxY != 1.0D && !var1.material.getIsLiquid()) {
-				var27 = var26;
-			}
-
-			var8.setColorOpaque_F(var15 * var27, var19 * var27, var23 * var27);
-			this.renderTopFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 1));
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 - 1);
-			if(var1.minZ > 0.0D) {
-				var27 = var26;
-			}
-
-			var8.setColorOpaque_F(var16 * var27, var20 * var27, var24 * var27);
-			this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2));
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 + 1, 3)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 + 1);
-			if(var1.maxZ < 1.0D) {
-				var27 = var26;
-			}
-
-			var8.setColorOpaque_F(var16 * var27, var20 * var27, var24 * var27);
-			this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3));
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 - 1, var3, var4, 4)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
-			if(var1.minX > 0.0D) {
-				var27 = var26;
-			}
-
-			var8.setColorOpaque_F(var17 * var27, var21 * var27, var25 * var27);
-			this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 4));
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5)) {
-			var27 = var1.getBlockBrightness(this.blockAccess, var2 + 1, var3, var4);
-			if(var1.maxX < 1.0D) {
-				var27 = var26;
-			}
-
-			var8.setColorOpaque_F(var17 * var27, var21 * var27, var25 * var27);
-			this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5));
-			var9 = true;
-		}
-
-		return var9;
-	}
-
-	public boolean renderBlockCactus(Block var1, int var2, int var3, int var4) {
-		int var5 = var1.colorMultiplier(this.blockAccess, var2, var3, var4);
-		float var6 = (float)(var5 >> 16 & 255) / 255.0F;
-		float var7 = (float)(var5 >> 8 & 255) / 255.0F;
-		float var8 = (float)(var5 & 255) / 255.0F;
-		return this.renderBlockCactusImpl(var1, var2, var3, var4, var6, var7, var8);
-	}
-
-	public boolean renderBlockCactusImpl(Block var1, int var2, int var3, int var4, float var5, float var6, float var7) {
-		Tessellator var8 = Tessellator.instance;
-		boolean var9 = false;
-		float var10 = 0.5F;
-		float var11 = 1.0F;
-		float var12 = 0.8F;
-		float var13 = 0.6F;
-		float var14 = var10 * var5;
-		float var15 = var11 * var5;
-		float var16 = var12 * var5;
-		float var17 = var13 * var5;
-		float var18 = var10 * var6;
-		float var19 = var11 * var6;
-		float var20 = var12 * var6;
-		float var21 = var13 * var6;
-		float var22 = var10 * var7;
-		float var23 = var11 * var7;
-		float var24 = var12 * var7;
-		float var25 = var13 * var7;
-		float var26 = 1.0F / 16.0F;
-		float var27 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		float var28;
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 - 1, var4, 0)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
-			var8.setColorOpaque_F(var14 * var28, var18 * var28, var22 * var28);
-			this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0));
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 + 1, var4, 1)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2, var3 + 1, var4);
-			if(var1.maxY != 1.0D && !var1.material.getIsLiquid()) {
-				var28 = var27;
-			}
-
-			var8.setColorOpaque_F(var15 * var28, var19 * var28, var23 * var28);
-			this.renderTopFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 1));
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 - 1);
-			if(var1.minZ > 0.0D) {
-				var28 = var27;
-			}
-
-			var8.setColorOpaque_F(var16 * var28, var20 * var28, var24 * var28);
-			var8.setTranslationF(0.0F, 0.0F, var26);
-			this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2));
-			var8.setTranslationF(0.0F, 0.0F, -var26);
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 + 1, 3)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 + 1);
-			if(var1.maxZ < 1.0D) {
-				var28 = var27;
-			}
-
-			var8.setColorOpaque_F(var16 * var28, var20 * var28, var24 * var28);
-			var8.setTranslationF(0.0F, 0.0F, -var26);
-			this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3));
-			var8.setTranslationF(0.0F, 0.0F, var26);
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 - 1, var3, var4, 4)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
-			if(var1.minX > 0.0D) {
-				var28 = var27;
-			}
-
-			var8.setColorOpaque_F(var17 * var28, var21 * var28, var25 * var28);
-			var8.setTranslationF(var26, 0.0F, 0.0F);
-			this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 4));
-			var8.setTranslationF(-var26, 0.0F, 0.0F);
-			var9 = true;
-		}
-
-		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5)) {
-			var28 = var1.getBlockBrightness(this.blockAccess, var2 + 1, var3, var4);
-			if(var1.maxX < 1.0D) {
-				var28 = var27;
-			}
-
-			var8.setColorOpaque_F(var17 * var28, var21 * var28, var25 * var28);
-			var8.setTranslationF(-var26, 0.0F, 0.0F);
-			this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5));
-			var8.setTranslationF(var26, 0.0F, 0.0F);
-			var9 = true;
-		}
-
-		return var9;
-	}
-
-	public boolean renderBlockFence(Block var1, int var2, int var3, int var4) {
-		boolean var5 = false;
-		float var6 = 6.0F / 16.0F;
-		float var7 = 10.0F / 16.0F;
-		var1.setBlockBounds(var6, 0.0F, var6, var7, 1.0F, var7);
-		this.renderStandardBlock(var1, var2, var3, var4);
-		boolean var8 = false;
-		boolean var9 = false;
-		if(this.blockAccess.getBlockId(var2 - 1, var3, var4) == var1.blockID || this.blockAccess.getBlockId(var2 + 1, var3, var4) == var1.blockID) {
-			var8 = true;
-		}
-
-		if(this.blockAccess.getBlockId(var2, var3, var4 - 1) == var1.blockID || this.blockAccess.getBlockId(var2, var3, var4 + 1) == var1.blockID) {
-			var9 = true;
-		}
-
-		boolean var10 = this.blockAccess.getBlockId(var2 - 1, var3, var4) == var1.blockID;
-		boolean var11 = this.blockAccess.getBlockId(var2 + 1, var3, var4) == var1.blockID;
-		boolean var12 = this.blockAccess.getBlockId(var2, var3, var4 - 1) == var1.blockID;
-		boolean var13 = this.blockAccess.getBlockId(var2, var3, var4 + 1) == var1.blockID;
-		if(!var8 && !var9) {
-			var8 = true;
-		}
-
-		var6 = 7.0F / 16.0F;
-		var7 = 9.0F / 16.0F;
-		float var14 = 12.0F / 16.0F;
-		float var15 = 15.0F / 16.0F;
-		float var16 = var10 ? 0.0F : var6;
-		float var17 = var11 ? 1.0F : var7;
-		float var18 = var12 ? 0.0F : var6;
-		float var19 = var13 ? 1.0F : var7;
-		if(var8) {
-			var1.setBlockBounds(var16, var14, var6, var17, var15, var7);
-			this.renderStandardBlock(var1, var2, var3, var4);
-		}
-
-		if(var9) {
-			var1.setBlockBounds(var6, var14, var18, var7, var15, var19);
-			this.renderStandardBlock(var1, var2, var3, var4);
-		}
-
-		var14 = 6.0F / 16.0F;
-		var15 = 9.0F / 16.0F;
-		if(var8) {
-			var1.setBlockBounds(var16, var14, var6, var17, var15, var7);
-			this.renderStandardBlock(var1, var2, var3, var4);
-		}
-
-		if(var9) {
-			var1.setBlockBounds(var6, var14, var18, var7, var15, var19);
-			this.renderStandardBlock(var1, var2, var3, var4);
-		}
-
-		var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-		return var5;
-	}
-
-	public boolean renderBlockStairs(Block var1, int var2, int var3, int var4) {
-		boolean var5 = false;
-		int var6 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-		if(var6 == 0) {
-			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-			var1.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-		} else if(var6 == 1) {
-			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 1.0F, 1.0F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-			var1.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-		} else if(var6 == 2) {
-			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 0.5F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-			var1.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 1.0F, 1.0F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-		} else if(var6 == 3) {
-			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-			var1.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-		}
-
-		var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-		return var5;
-	}
-
-	public boolean renderBlockDoor(Block var1, int var2, int var3, int var4) {
-		Tessellator var5 = Tessellator.instance;
-		BlockDoor var6 = (BlockDoor)var1;
-		boolean var7 = false;
-		float var8 = 0.5F;
-		float var9 = 1.0F;
-		float var10 = 0.8F;
-		float var11 = 0.6F;
-		float var12 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		float var13 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
-		if(var6.minY > 0.0D) {
-			var13 = var12;
-		}
-
-		if(Block.lightValue[var1.blockID] > 0) {
-			var13 = 1.0F;
-		}
-
-		var5.setColorOpaque_F(var8 * var13, var8 * var13, var8 * var13);
-		this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0));
-		var7 = true;
-		var13 = var1.getBlockBrightness(this.blockAccess, var2, var3 + 1, var4);
-		if(var6.maxY < 1.0D) {
-			var13 = var12;
-		}
-
-		if(Block.lightValue[var1.blockID] > 0) {
-			var13 = 1.0F;
-		}
-
-		var5.setColorOpaque_F(var9 * var13, var9 * var13, var9 * var13);
-		this.renderTopFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 1));
-		var7 = true;
-		var13 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 - 1);
-		if(var6.minZ > 0.0D) {
-			var13 = var12;
-		}
-
-		if(Block.lightValue[var1.blockID] > 0) {
-			var13 = 1.0F;
-		}
-
-		var5.setColorOpaque_F(var10 * var13, var10 * var13, var10 * var13);
-		int var14 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2);
-		if(var14 < 0) {
-			this.flipTexture = true;
-			var14 = -var14;
-		}
-
-		this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var14);
-		var7 = true;
-		this.flipTexture = false;
-		var13 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 + 1);
-		if(var6.maxZ < 1.0D) {
-			var13 = var12;
-		}
-
-		if(Block.lightValue[var1.blockID] > 0) {
-			var13 = 1.0F;
-		}
-
-		var5.setColorOpaque_F(var10 * var13, var10 * var13, var10 * var13);
-		var14 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3);
-		if(var14 < 0) {
-			this.flipTexture = true;
-			var14 = -var14;
-		}
-
-		this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, var14);
-		var7 = true;
-		this.flipTexture = false;
-		var13 = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
-		if(var6.minX > 0.0D) {
-			var13 = var12;
-		}
-
-		if(Block.lightValue[var1.blockID] > 0) {
-			var13 = 1.0F;
-		}
-
-		var5.setColorOpaque_F(var11 * var13, var11 * var13, var11 * var13);
-		var14 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 4);
-		if(var14 < 0) {
-			this.flipTexture = true;
-			var14 = -var14;
-		}
-
-		this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, var14);
-		var7 = true;
-		this.flipTexture = false;
-		var13 = var1.getBlockBrightness(this.blockAccess, var2 + 1, var3, var4);
-		if(var6.maxX < 1.0D) {
-			var13 = var12;
-		}
-
-		if(Block.lightValue[var1.blockID] > 0) {
-			var13 = 1.0F;
-		}
-
-		var5.setColorOpaque_F(var11 * var13, var11 * var13, var11 * var13);
-		var14 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5);
-		if(var14 < 0) {
-			this.flipTexture = true;
-			var14 = -var14;
-		}
-
-		this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var14);
-		var7 = true;
-		this.flipTexture = false;
-		return var7;
-	}
-
-	public void renderBottomFace(Block var1, double var2, double var4, double var6, int var8) {
-		Tessellator var9 = Tessellator.instance;
-		if(this.overrideBlockTexture >= 0) {
-			var8 = this.overrideBlockTexture;
-		}
-
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minZ * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-		}
-
-		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-		}
-
-		double var20 = var2 + var1.minX;
-		double var22 = var2 + var1.maxX;
-		double var24 = var4 + var1.minY;
-		double var26 = var6 + var1.minZ;
-		double var28 = var6 + var1.maxZ;
-		var9.addVertexWithUV(var20, var24, var28, var12, var18);
-		var9.addVertexWithUV(var20, var24, var26, var12, var16);
-		var9.addVertexWithUV(var22, var24, var26, var14, var16);
-		var9.addVertexWithUV(var22, var24, var28, var14, var18);
-	}
-
-	public void renderTopFace(Block var1, double var2, double var4, double var6, int var8) {
-		Tessellator var9 = Tessellator.instance;
-		if(this.overrideBlockTexture >= 0) {
-			var8 = this.overrideBlockTexture;
-		}
-
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minZ * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-		}
-
-		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-		}
-
-		double var20 = var2 + var1.minX;
-		double var22 = var2 + var1.maxX;
-		double var24 = var4 + var1.maxY;
-		double var26 = var6 + var1.minZ;
-		double var28 = var6 + var1.maxZ;
-		var9.addVertexWithUV(var22, var24, var28, var14, var18);
-		var9.addVertexWithUV(var22, var24, var26, var14, var16);
-		var9.addVertexWithUV(var20, var24, var26, var12, var16);
-		var9.addVertexWithUV(var20, var24, var28, var12, var18);
-	}
-
-	public void renderEastFace(Block var1, double var2, double var4, double var6, int var8) {
-		Tessellator var9 = Tessellator.instance;
-		if(this.overrideBlockTexture >= 0) {
-			var8 = this.overrideBlockTexture;
-		}
-
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minY * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxY * 16.0D - 0.01D) / 256.0D;
-		double var20;
-		if(this.flipTexture) {
-			var20 = var12;
-			var12 = var14;
-			var14 = var20;
-		}
-
-		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-		}
-
-		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-		}
-
-		var20 = var2 + var1.minX;
-		double var22 = var2 + var1.maxX;
-		double var24 = var4 + var1.minY;
-		double var26 = var4 + var1.maxY;
-		double var28 = var6 + var1.minZ;
-		var9.addVertexWithUV(var20, var26, var28, var14, var16);
-		var9.addVertexWithUV(var22, var26, var28, var12, var16);
-		var9.addVertexWithUV(var22, var24, var28, var12, var18);
-		var9.addVertexWithUV(var20, var24, var28, var14, var18);
-	}
-
-	public void renderWestFace(Block var1, double var2, double var4, double var6, int var8) {
-		Tessellator var9 = Tessellator.instance;
-		if(this.overrideBlockTexture >= 0) {
-			var8 = this.overrideBlockTexture;
-		}
-
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minY * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxY * 16.0D - 0.01D) / 256.0D;
-		double var20;
-		if(this.flipTexture) {
-			var20 = var12;
-			var12 = var14;
-			var14 = var20;
-		}
-
-		if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-		}
-
-		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-		}
-
-		var20 = var2 + var1.minX;
-		double var22 = var2 + var1.maxX;
-		double var24 = var4 + var1.minY;
-		double var26 = var4 + var1.maxY;
-		double var28 = var6 + var1.maxZ;
-		var9.addVertexWithUV(var20, var26, var28, var12, var16);
-		var9.addVertexWithUV(var20, var24, var28, var12, var18);
-		var9.addVertexWithUV(var22, var24, var28, var14, var18);
-		var9.addVertexWithUV(var22, var26, var28, var14, var16);
-	}
-
-	public void renderNorthFace(Block var1, double var2, double var4, double var6, int var8) {
-		Tessellator var9 = Tessellator.instance;
-		if(this.overrideBlockTexture >= 0) {
-			var8 = this.overrideBlockTexture;
-		}
-
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minZ * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minY * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxY * 16.0D - 0.01D) / 256.0D;
-		double var20;
-		if(this.flipTexture) {
-			var20 = var12;
-			var12 = var14;
-			var14 = var20;
-		}
-
-		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-		}
-
-		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-		}
-
-		var20 = var2 + var1.minX;
-		double var22 = var4 + var1.minY;
-		double var24 = var4 + var1.maxY;
-		double var26 = var6 + var1.minZ;
-		double var28 = var6 + var1.maxZ;
-		var9.addVertexWithUV(var20, var24, var28, var14, var16);
-		var9.addVertexWithUV(var20, var24, var26, var12, var16);
-		var9.addVertexWithUV(var20, var22, var26, var12, var18);
-		var9.addVertexWithUV(var20, var22, var28, var14, var18);
-	}
-
-	public void renderSouthFace(Block var1, double var2, double var4, double var6, int var8) {
-		Tessellator var9 = Tessellator.instance;
-		if(this.overrideBlockTexture >= 0) {
-			var8 = this.overrideBlockTexture;
-		}
-
-		int var10 = (var8 & 15) << 4;
-		int var11 = var8 & 240;
-		double var12 = ((double)var10 + var1.minZ * 16.0D) / 256.0D;
-		double var14 = ((double)var10 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-		double var16 = ((double)var11 + var1.minY * 16.0D) / 256.0D;
-		double var18 = ((double)var11 + var1.maxY * 16.0D - 0.01D) / 256.0D;
-		double var20;
-		if(this.flipTexture) {
-			var20 = var12;
-			var12 = var14;
-			var14 = var20;
-		}
-
-		if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-			var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-			var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-		}
-
-		if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-			var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-			var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-		}
-
-		var20 = var2 + var1.maxX;
-		double var22 = var4 + var1.minY;
-		double var24 = var4 + var1.maxY;
-		double var26 = var6 + var1.minZ;
-		double var28 = var6 + var1.maxZ;
-		var9.addVertexWithUV(var20, var22, var28, var12, var18);
-		var9.addVertexWithUV(var20, var22, var26, var14, var18);
-		var9.addVertexWithUV(var20, var24, var26, var14, var16);
-		var9.addVertexWithUV(var20, var24, var28, var12, var16);
-	}
-
-	public void renderBlockAsItem(Block var1, float var2) {
-		int var3 = var1.getRenderType();
-		Tessellator var4 = Tessellator.instance;
-		if(var3 == 0) {
-			var1.setBlockBoundsForItemRender();
-			GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
-			float var5 = 0.5F;
-			float var6 = 1.0F;
-			float var7 = 0.8F;
-			float var8 = 0.6F;
-			var4.startDrawingQuads();
-			var4.setColorRGBA_F(var6, var6, var6, var2);
-			this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
-			var4.setColorRGBA_F(var5, var5, var5, var2);
-			this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
-			var4.setColorRGBA_F(var7, var7, var7, var2);
-			this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
-			this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
-			var4.setColorRGBA_F(var8, var8, var8, var2);
-			this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
-			this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
-			var4.draw();
-			GL11.glTranslatef(0.5F, 0.5F, 0.5F);
-		}
-
-	}
-
-	public void renderBlockOnInventory(Block var1) {
-		byte var2 = -1;
-		Tessellator var3 = Tessellator.instance;
-		int var4 = var1.getRenderType();
-		if(var4 == 0) {
-			var1.setBlockBoundsForItemRender();
-			GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, -1.0F, 0.0F);
-			this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, 1.0F, 0.0F);
-			this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, 0.0F, -1.0F);
-			this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, 0.0F, 1.0F);
-			this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(-1.0F, 0.0F, 0.0F);
-			this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(1.0F, 0.0F, 0.0F);
-			this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
-			var3.draw();
-			GL11.glTranslatef(0.5F, 0.5F, 0.5F);
-		} else if(var4 == 1) {
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, -1.0F, 0.0F);
-			this.renderCrossedSquares(var1, var2, -0.5D, -0.5D, -0.5D);
-			var3.draw();
-		} else if(var4 == 13) {
-			var1.setBlockBoundsForItemRender();
-			GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
-			float var5 = 1.0F / 16.0F;
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, -1.0F, 0.0F);
-			this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, 1.0F, 0.0F);
-			this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, 0.0F, -1.0F);
-			var3.setTranslationF(0.0F, 0.0F, var5);
-			this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
-			var3.setTranslationF(0.0F, 0.0F, -var5);
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, 0.0F, 1.0F);
-			var3.setTranslationF(0.0F, 0.0F, -var5);
-			this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
-			var3.setTranslationF(0.0F, 0.0F, var5);
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(-1.0F, 0.0F, 0.0F);
-			var3.setTranslationF(var5, 0.0F, 0.0F);
-			this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
-			var3.setTranslationF(-var5, 0.0F, 0.0F);
-			var3.draw();
-			var3.startDrawingQuads();
-			var3.setNormal(1.0F, 0.0F, 0.0F);
-			var3.setTranslationF(-var5, 0.0F, 0.0F);
-			this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
-			var3.setTranslationF(var5, 0.0F, 0.0F);
-			var3.draw();
-			GL11.glTranslatef(0.5F, 0.5F, 0.5F);
-		} else if(var4 == 6) {
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, -1.0F, 0.0F);
-			this.renderBlockCropsImpl(var1, var2, -0.5D, -0.5D, -0.5D);
-			var3.draw();
-		} else if(var4 == 2) {
-			var3.startDrawingQuads();
-			var3.setNormal(0.0F, -1.0F, 0.0F);
-			this.renderTorchAtAngle(var1, -0.5D, -0.5D, -0.5D, 0.0D, 0.0D);
-			var3.draw();
-		} else {
-			int var7;
-			if(var4 == 10) {
-				for(var7 = 0; var7 < 2; ++var7) {
-					if(var7 == 0) {
-						var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
-					}
-
-					if(var7 == 1) {
-						var1.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
-					}
-
-					GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, -1.0F, 0.0F);
-					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, 1.0F, 0.0F);
-					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, 0.0F, -1.0F);
-					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, 0.0F, 1.0F);
-					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(-1.0F, 0.0F, 0.0F);
-					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(1.0F, 0.0F, 0.0F);
-					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
-					var3.draw();
-					GL11.glTranslatef(0.5F, 0.5F, 0.5F);
-				}
-			} else if(var4 == 11) {
-				for(var7 = 0; var7 < 4; ++var7) {
-					float var6 = 2.0F / 16.0F;
-					if(var7 == 0) {
-						var1.setBlockBounds(0.5F - var6, 0.0F, 0.0F, 0.5F + var6, 1.0F, var6 * 2.0F);
-					}
-
-					if(var7 == 1) {
-						var1.setBlockBounds(0.5F - var6, 0.0F, 1.0F - var6 * 2.0F, 0.5F + var6, 1.0F, 1.0F);
-					}
-
-					var6 = 1.0F / 16.0F;
-					if(var7 == 2) {
-						var1.setBlockBounds(0.5F - var6, 1.0F - var6 * 3.0F, -var6 * 2.0F, 0.5F + var6, 1.0F - var6, 1.0F + var6 * 2.0F);
-					}
-
-					if(var7 == 3) {
-						var1.setBlockBounds(0.5F - var6, 0.5F - var6 * 3.0F, -var6 * 2.0F, 0.5F + var6, 0.5F - var6, 1.0F + var6 * 2.0F);
-					}
-
-					GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, -1.0F, 0.0F);
-					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, 1.0F, 0.0F);
-					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, 0.0F, -1.0F);
-					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(0.0F, 0.0F, 1.0F);
-					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(-1.0F, 0.0F, 0.0F);
-					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
-					var3.draw();
-					var3.startDrawingQuads();
-					var3.setNormal(1.0F, 0.0F, 0.0F);
-					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
-					var3.draw();
-					GL11.glTranslatef(0.5F, 0.5F, 0.5F);
-				}
-
-				var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-			}
-		}
-
-	}
-
-	public static boolean renderItemIn3d(int var0) {
-		return var0 == 0 ? true : (var0 == 13 ? true : (var0 == 10 ? true : var0 == 11));
+			Material material10 = this.blockAccess.getBlockMaterial(i8, y, i9);
+			if(material10 != material) {
+				if(!material10.isSolid()) {
+					++f6;
+					++i5;
+				}
+			} else {
+				int i11 = this.blockAccess.getBlockMetadata(i8, y, i9);
+				if(i11 >= 8 || i11 == 0) {
+					f6 += BlockFluid.getFluidHeightPercent(i11) * 10.0F;
+					i5 += 10;
+				}
+
+				f6 += BlockFluid.getFluidHeightPercent(i11);
+				++i5;
+			}
+		}
+
+		return 1.0F - f6 / (float)i5;
+	}
+
+	public void renderBlockFallingSand(Block block, World worldObj, int x, int y, int z) {
+		float f6 = 0.5F;
+		float f7 = 1.0F;
+		float f8 = 0.8F;
+		float f9 = 0.6F;
+		Tessellator tessellator10 = Tessellator.instance;
+		tessellator10.startDrawingQuads();
+		float f11 = block.getRenderSideBrightness(worldObj, x, y, z);
+		float f12 = block.getRenderSideBrightness(worldObj, x, y - 1, z);
+		if(f12 < f11) {
+			f12 = f11;
+		}
+
+		tessellator10.setColorOpaque_F(f6 * f12, f6 * f12, f6 * f12);
+		this.renderBottomFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSide(0));
+		f12 = block.getRenderSideBrightness(worldObj, x, y + 1, z);
+		if(f12 < f11) {
+			f12 = f11;
+		}
+
+		tessellator10.setColorOpaque_F(f7 * f12, f7 * f12, f7 * f12);
+		this.renderTopFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSide(1));
+		f12 = block.getRenderSideBrightness(worldObj, x, y, z - 1);
+		if(f12 < f11) {
+			f12 = f11;
+		}
+
+		tessellator10.setColorOpaque_F(f8 * f12, f8 * f12, f8 * f12);
+		this.renderEastFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSide(2));
+		f12 = block.getRenderSideBrightness(worldObj, x, y, z + 1);
+		if(f12 < f11) {
+			f12 = f11;
+		}
+
+		tessellator10.setColorOpaque_F(f8 * f12, f8 * f12, f8 * f12);
+		this.renderWestFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSide(3));
+		f12 = block.getRenderSideBrightness(worldObj, x - 1, y, z);
+		if(f12 < f11) {
+			f12 = f11;
+		}
+
+		tessellator10.setColorOpaque_F(f9 * f12, f9 * f12, f9 * f12);
+		this.renderNorthFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSide(4));
+		f12 = block.getRenderSideBrightness(worldObj, x + 1, y, z);
+		if(f12 < f11) {
+			f12 = f11;
+		}
+
+		tessellator10.setColorOpaque_F(f9 * f12, f9 * f12, f9 * f12);
+		this.renderSouthFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSide(5));
+		tessellator10.draw();
+	}
+
+	public boolean renderStandardBlock(Block block, int x, int y, int z) {
+		int i5 = block.colorMultiplier(this.blockAccess, x, y, z);
+		float f6 = (float)(i5 >> 16 & 255) / 255.0F;
+		float f7 = (float)(i5 >> 8 & 255) / 255.0F;
+		float f8 = (float)(i5 & 255) / 255.0F;
+		return this.renderStandardBlockWithColorMultiplier(block, x, y, z, f6, f7, f8);
+	}
+
+	public boolean renderStandardBlockWithColorMultiplier(Block block, int x, int y, int z, float float5, float float6, float float7) {
+		Tessellator tessellator8 = Tessellator.instance;
+		boolean z9 = false;
+		float f10 = 0.5F;
+		float f11 = 1.0F;
+		float f12 = 0.8F;
+		float f13 = 0.6F;
+		float f14 = f10 * float5;
+		float f15 = f11 * float5;
+		float f16 = f12 * float5;
+		float f17 = f13 * float5;
+		float f18 = f10 * float6;
+		float f19 = f11 * float6;
+		float f20 = f12 * float6;
+		float f21 = f13 * float6;
+		float f22 = f10 * float7;
+		float f23 = f11 * float7;
+		float f24 = f12 * float7;
+		float f25 = f13 * float7;
+		float f26 = block.getRenderSideBrightness(this.blockAccess, x, y, z);
+		float f27;
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y - 1, z, 0)) {
+			f27 = block.getRenderSideBrightness(this.blockAccess, x, y - 1, z);
+			tessellator8.setColorOpaque_F(f14 * f27, f18 * f27, f22 * f27);
+			this.renderBottomFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 0));
+			z9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y + 1, z, 1)) {
+			f27 = block.getRenderSideBrightness(this.blockAccess, x, y + 1, z);
+			if(block.maxY != 1.0D && !block.material.getIsLiquid()) {
+				f27 = f26;
+			}
+
+			tessellator8.setColorOpaque_F(f15 * f27, f19 * f27, f23 * f27);
+			this.renderTopFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 1));
+			z9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y, z - 1, 2)) {
+			f27 = block.getRenderSideBrightness(this.blockAccess, x, y, z - 1);
+			if(block.minZ > 0.0D) {
+				f27 = f26;
+			}
+
+			tessellator8.setColorOpaque_F(f16 * f27, f20 * f27, f24 * f27);
+			this.renderEastFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 2));
+			z9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y, z + 1, 3)) {
+			f27 = block.getRenderSideBrightness(this.blockAccess, x, y, z + 1);
+			if(block.maxZ < 1.0D) {
+				f27 = f26;
+			}
+
+			tessellator8.setColorOpaque_F(f16 * f27, f20 * f27, f24 * f27);
+			this.renderWestFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 3));
+			z9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x - 1, y, z, 4)) {
+			f27 = block.getRenderSideBrightness(this.blockAccess, x - 1, y, z);
+			if(block.minX > 0.0D) {
+				f27 = f26;
+			}
+
+			tessellator8.setColorOpaque_F(f17 * f27, f21 * f27, f25 * f27);
+			this.renderNorthFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 4));
+			z9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x + 1, y, z, 5)) {
+			f27 = block.getRenderSideBrightness(this.blockAccess, x + 1, y, z);
+			if(block.maxX < 1.0D) {
+				f27 = f26;
+			}
+
+			tessellator8.setColorOpaque_F(f17 * f27, f21 * f27, f25 * f27);
+			this.renderSouthFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 5));
+			z9 = true;
+		}
+
+		return z9;
+	}
+
+	public boolean renderBlockCactus(Block block, int x, int y, int z) {
+		int i5 = block.colorMultiplier(this.blockAccess, x, y, z);
+		float f6 = (float)(i5 >> 16 & 255) / 255.0F;
+		float f7 = (float)(i5 >> 8 & 255) / 255.0F;
+		float f8 = (float)(i5 & 255) / 255.0F;
+		return this.renderBlockCactusImpl(block, x, y, z, f6, f7, f8);
+	}
+
+	public boolean renderBlockCactusImpl(Block block, int x, int y, int z, float float5, float float6, float float7) {
+		Tessellator tessellator8 = Tessellator.instance;
+		boolean z9 = false;
+		float f10 = 0.5F;
+		float f11 = 1.0F;
+		float f12 = 0.8F;
+		float f13 = 0.6F;
+		float f14 = f10 * float5;
+		float f15 = f11 * float5;
+		float f16 = f12 * float5;
+		float f17 = f13 * float5;
+		float f18 = f10 * float6;
+		float f19 = f11 * float6;
+		float f20 = f12 * float6;
+		float f21 = f13 * float6;
+		float f22 = f10 * float7;
+		float f23 = f11 * float7;
+		float f24 = f12 * float7;
+		float f25 = f13 * float7;
+		float f26 = 0.0625F;
+		float f27 = block.getRenderSideBrightness(this.blockAccess, x, y, z);
+		float f28;
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y - 1, z, 0)) {
+			f28 = block.getRenderSideBrightness(this.blockAccess, x, y - 1, z);
+			tessellator8.setColorOpaque_F(f14 * f28, f18 * f28, f22 * f28);
+			this.renderBottomFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 0));
+			z9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y + 1, z, 1)) {
+			f28 = block.getRenderSideBrightness(this.blockAccess, x, y + 1, z);
+			if(block.maxY != 1.0D && !block.material.getIsLiquid()) {
+				f28 = f27;
+			}
+
+			tessellator8.setColorOpaque_F(f15 * f28, f19 * f28, f23 * f28);
+			this.renderTopFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 1));
+			z9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y, z - 1, 2)) {
+			f28 = block.getRenderSideBrightness(this.blockAccess, x, y, z - 1);
+			if(block.minZ > 0.0D) {
+				f28 = f27;
+			}
+
+			tessellator8.setColorOpaque_F(f16 * f28, f20 * f28, f24 * f28);
+			tessellator8.setTranslationF(0.0F, 0.0F, f26);
+			this.renderEastFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 2));
+			tessellator8.setTranslationF(0.0F, 0.0F, -f26);
+			z9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x, y, z + 1, 3)) {
+			f28 = block.getRenderSideBrightness(this.blockAccess, x, y, z + 1);
+			if(block.maxZ < 1.0D) {
+				f28 = f27;
+			}
+
+			tessellator8.setColorOpaque_F(f16 * f28, f20 * f28, f24 * f28);
+			tessellator8.setTranslationF(0.0F, 0.0F, -f26);
+			this.renderWestFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 3));
+			tessellator8.setTranslationF(0.0F, 0.0F, f26);
+			z9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x - 1, y, z, 4)) {
+			f28 = block.getRenderSideBrightness(this.blockAccess, x - 1, y, z);
+			if(block.minX > 0.0D) {
+				f28 = f27;
+			}
+
+			tessellator8.setColorOpaque_F(f17 * f28, f21 * f28, f25 * f28);
+			tessellator8.setTranslationF(f26, 0.0F, 0.0F);
+			this.renderNorthFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 4));
+			tessellator8.setTranslationF(-f26, 0.0F, 0.0F);
+			z9 = true;
+		}
+
+		if(this.renderAllFaces || block.shouldSideBeRendered(this.blockAccess, x + 1, y, z, 5)) {
+			f28 = block.getRenderSideBrightness(this.blockAccess, x + 1, y, z);
+			if(block.maxX < 1.0D) {
+				f28 = f27;
+			}
+
+			tessellator8.setColorOpaque_F(f17 * f28, f21 * f28, f25 * f28);
+			tessellator8.setTranslationF(-f26, 0.0F, 0.0F);
+			this.renderSouthFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 5));
+			tessellator8.setTranslationF(f26, 0.0F, 0.0F);
+			z9 = true;
+		}
+
+		return z9;
+	}
+
+	public boolean renderBlockFence(Block block, int x, int y, int z) {
+		boolean z5 = false;
+		float f6 = 0.375F;
+		float f7 = 0.625F;
+		block.setBlockBounds(f6, 0.0F, f6, f7, 1.0F, f7);
+		this.renderStandardBlock(block, x, y, z);
+		boolean z8 = false;
+		boolean z9 = false;
+		if(this.blockAccess.getBlockId(x - 1, y, z) == block.blockID || this.blockAccess.getBlockId(x + 1, y, z) == block.blockID) {
+			z8 = true;
+		}
+
+		if(this.blockAccess.getBlockId(x, y, z - 1) == block.blockID || this.blockAccess.getBlockId(x, y, z + 1) == block.blockID) {
+			z9 = true;
+		}
+
+		boolean z10 = this.blockAccess.getBlockId(x - 1, y, z) == block.blockID;
+		boolean z11 = this.blockAccess.getBlockId(x + 1, y, z) == block.blockID;
+		boolean z12 = this.blockAccess.getBlockId(x, y, z - 1) == block.blockID;
+		boolean z13 = this.blockAccess.getBlockId(x, y, z + 1) == block.blockID;
+		if(!z8 && !z9) {
+			z8 = true;
+		}
+
+		f6 = 0.4375F;
+		f7 = 0.5625F;
+		float f14 = 0.75F;
+		float f15 = 0.9375F;
+		float f16 = z10 ? 0.0F : f6;
+		float f17 = z11 ? 1.0F : f7;
+		float f18 = z12 ? 0.0F : f6;
+		float f19 = z13 ? 1.0F : f7;
+		if(z8) {
+			block.setBlockBounds(f16, f14, f6, f17, f15, f7);
+			this.renderStandardBlock(block, x, y, z);
+		}
+
+		if(z9) {
+			block.setBlockBounds(f6, f14, f18, f7, f15, f19);
+			this.renderStandardBlock(block, x, y, z);
+		}
+
+		f14 = 0.375F;
+		f15 = 0.5625F;
+		if(z8) {
+			block.setBlockBounds(f16, f14, f6, f17, f15, f7);
+			this.renderStandardBlock(block, x, y, z);
+		}
+
+		if(z9) {
+			block.setBlockBounds(f6, f14, f18, f7, f15, f19);
+			this.renderStandardBlock(block, x, y, z);
+		}
+
+		block.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		return z5;
+	}
+
+	public boolean renderBlockStairs(Block block, int x, int y, int z) {
+		boolean z5 = false;
+		int i6 = this.blockAccess.getBlockMetadata(x, y, z);
+		if(i6 == 0) {
+			block.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
+			this.renderStandardBlock(block, x, y, z);
+			block.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+			this.renderStandardBlock(block, x, y, z);
+		} else if(i6 == 1) {
+			block.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 1.0F, 1.0F);
+			this.renderStandardBlock(block, x, y, z);
+			block.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
+			this.renderStandardBlock(block, x, y, z);
+		} else if(i6 == 2) {
+			block.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 0.5F);
+			this.renderStandardBlock(block, x, y, z);
+			block.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 1.0F, 1.0F);
+			this.renderStandardBlock(block, x, y, z);
+		} else if(i6 == 3) {
+			block.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
+			this.renderStandardBlock(block, x, y, z);
+			block.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
+			this.renderStandardBlock(block, x, y, z);
+		}
+
+		block.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		return z5;
+	}
+
+	public boolean renderBlockDoor(Block block, int x, int y, int z) {
+		Tessellator tessellator5 = Tessellator.instance;
+		BlockDoor blockDoor6 = (BlockDoor)block;
+		boolean z7 = false;
+		float f8 = 0.5F;
+		float f9 = 1.0F;
+		float f10 = 0.8F;
+		float f11 = 0.6F;
+		float f12 = block.getRenderSideBrightness(this.blockAccess, x, y, z);
+		float f13 = block.getRenderSideBrightness(this.blockAccess, x, y - 1, z);
+		if(blockDoor6.minY > 0.0D) {
+			f13 = f12;
+		}
+
+		if(Block.lightValue[block.blockID] > 0) {
+			f13 = 1.0F;
+		}
+
+		tessellator5.setColorOpaque_F(f8 * f13, f8 * f13, f8 * f13);
+		this.renderBottomFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 0));
+		z7 = true;
+		f13 = block.getRenderSideBrightness(this.blockAccess, x, y + 1, z);
+		if(blockDoor6.maxY < 1.0D) {
+			f13 = f12;
+		}
+
+		if(Block.lightValue[block.blockID] > 0) {
+			f13 = 1.0F;
+		}
+
+		tessellator5.setColorOpaque_F(f9 * f13, f9 * f13, f9 * f13);
+		this.renderTopFace(block, (double)x, (double)y, (double)z, block.getBlockTexture(this.blockAccess, x, y, z, 1));
+		z7 = true;
+		f13 = block.getRenderSideBrightness(this.blockAccess, x, y, z - 1);
+		if(blockDoor6.minZ > 0.0D) {
+			f13 = f12;
+		}
+
+		if(Block.lightValue[block.blockID] > 0) {
+			f13 = 1.0F;
+		}
+
+		tessellator5.setColorOpaque_F(f10 * f13, f10 * f13, f10 * f13);
+		int i14 = block.getBlockTexture(this.blockAccess, x, y, z, 2);
+		if(i14 < 0) {
+			this.flipTexture = true;
+			i14 = -i14;
+		}
+
+		this.renderEastFace(block, (double)x, (double)y, (double)z, i14);
+		z7 = true;
+		this.flipTexture = false;
+		f13 = block.getRenderSideBrightness(this.blockAccess, x, y, z + 1);
+		if(blockDoor6.maxZ < 1.0D) {
+			f13 = f12;
+		}
+
+		if(Block.lightValue[block.blockID] > 0) {
+			f13 = 1.0F;
+		}
+
+		tessellator5.setColorOpaque_F(f10 * f13, f10 * f13, f10 * f13);
+		i14 = block.getBlockTexture(this.blockAccess, x, y, z, 3);
+		if(i14 < 0) {
+			this.flipTexture = true;
+			i14 = -i14;
+		}
+
+		this.renderWestFace(block, (double)x, (double)y, (double)z, i14);
+		z7 = true;
+		this.flipTexture = false;
+		f13 = block.getRenderSideBrightness(this.blockAccess, x - 1, y, z);
+		if(blockDoor6.minX > 0.0D) {
+			f13 = f12;
+		}
+
+		if(Block.lightValue[block.blockID] > 0) {
+			f13 = 1.0F;
+		}
+
+		tessellator5.setColorOpaque_F(f11 * f13, f11 * f13, f11 * f13);
+		i14 = block.getBlockTexture(this.blockAccess, x, y, z, 4);
+		if(i14 < 0) {
+			this.flipTexture = true;
+			i14 = -i14;
+		}
+
+		this.renderNorthFace(block, (double)x, (double)y, (double)z, i14);
+		z7 = true;
+		this.flipTexture = false;
+		f13 = block.getRenderSideBrightness(this.blockAccess, x + 1, y, z);
+		if(blockDoor6.maxX < 1.0D) {
+			f13 = f12;
+		}
+
+		if(Block.lightValue[block.blockID] > 0) {
+			f13 = 1.0F;
+		}
+
+		tessellator5.setColorOpaque_F(f11 * f13, f11 * f13, f11 * f13);
+		i14 = block.getBlockTexture(this.blockAccess, x, y, z, 5);
+		if(i14 < 0) {
+			this.flipTexture = true;
+			i14 = -i14;
+		}
+
+		this.renderSouthFace(block, (double)x, (double)y, (double)z, i14);
+		z7 = true;
+		this.flipTexture = false;
+		return z7;
+	}
+
+	public void renderBottomFace(Block block, double double2, double double3, double double4, int integer) {
+		Tessellator tessellator9 = Tessellator.instance;
+		if(this.overrideBlockTexture >= 0) {
+			integer = this.overrideBlockTexture;
+		}
+
+		int i10 = (integer & 15) << 4;
+		int i11 = integer & 4080;
+		double d12 = ((double)i10 + block.minX * 16.0D) / 256.0D;
+		double d14 = ((double)i10 + block.maxX * 16.0D - 0.01D) / 256.0D;
+		double d16 = ((double)i11 + block.minZ * 16.0D) / 512.0D;
+		double d18 = ((double)i11 + block.maxZ * 16.0D - 0.01D) / 512.0D;
+		if(block.minX < 0.0D || block.maxX > 1.0D) {
+			d12 = (double)(((float)i10 + 0.0F) / 256.0F);
+			d14 = (double)(((float)i10 + 15.99F) / 256.0F);
+		}
+
+		if(block.minZ < 0.0D || block.maxZ > 1.0D) {
+			d16 = (double)(((float)i11 + 0.0F) / 512.0F);
+			d18 = (double)(((float)i11 + 15.99F) / 512.0F);
+		}
+
+		double d20 = double2 + block.minX;
+		double d22 = double2 + block.maxX;
+		double d24 = double3 + block.minY;
+		double d26 = double4 + block.minZ;
+		double d28 = double4 + block.maxZ;
+		tessellator9.addVertexWithUV(d20, d24, d28, d12, d18);
+		tessellator9.addVertexWithUV(d20, d24, d26, d12, d16);
+		tessellator9.addVertexWithUV(d22, d24, d26, d14, d16);
+		tessellator9.addVertexWithUV(d22, d24, d28, d14, d18);
+	}
+
+	public void renderTopFace(Block pb, double double2, double double3, double double4, int integer) {
+		Tessellator tessellator9 = Tessellator.instance;
+		if(this.overrideBlockTexture >= 0) {
+			integer = this.overrideBlockTexture;
+		}
+
+		int i10 = (integer & 15) << 4;
+		int i11 = integer & 4080;
+		double d12 = ((double)i10 + pb.minX * 16.0D) / 256.0D;
+		double d14 = ((double)i10 + pb.maxX * 16.0D - 0.01D) / 256.0D;
+		double d16 = ((double)i11 + pb.minZ * 16.0D) / 512.0D;
+		double d18 = ((double)i11 + pb.maxZ * 16.0D - 0.01D) / 512.0D;
+		if(pb.minX < 0.0D || pb.maxX > 1.0D) {
+			d12 = (double)(((float)i10 + 0.0F) / 256.0F);
+			d14 = (double)(((float)i10 + 15.99F) / 256.0F);
+		}
+
+		if(pb.minZ < 0.0D || pb.maxZ > 1.0D) {
+			d16 = (double)(((float)i11 + 0.0F) / 512.0F);
+			d18 = (double)(((float)i11 + 15.99F) / 512.0F);
+		}
+
+		double d20 = double2 + pb.minX;
+		double d22 = double2 + pb.maxX;
+		double d24 = double3 + pb.maxY;
+		double d26 = double4 + pb.minZ;
+		double d28 = double4 + pb.maxZ;
+		tessellator9.addVertexWithUV(d22, d24, d28, d14, d18);
+		tessellator9.addVertexWithUV(d22, d24, d26, d14, d16);
+		tessellator9.addVertexWithUV(d20, d24, d26, d12, d16);
+		tessellator9.addVertexWithUV(d20, d24, d28, d12, d18);
+	}
+
+	public void renderEastFace(Block block, double double2, double double3, double double4, int integer) {
+		Tessellator tessellator9 = Tessellator.instance;
+		if(this.overrideBlockTexture >= 0) {
+			integer = this.overrideBlockTexture;
+		}
+
+		int i10 = (integer & 15) << 4;
+		int i11 = integer & 4080;
+		double d12 = ((double)i10 + block.minX * 16.0D) / 256.0D;
+		double d14 = ((double)i10 + block.maxX * 16.0D - 0.01D) / 256.0D;
+		double d16 = ((double)i11 + block.minY * 16.0D) / 512.0D;
+		double d18 = ((double)i11 + block.maxY * 16.0D - 0.01D) / 512.0D;
+		double d20;
+		if(this.flipTexture) {
+			d20 = d12;
+			d12 = d14;
+			d14 = d20;
+		}
+
+		if(block.minX < 0.0D || block.maxX > 1.0D) {
+			d12 = (double)(((float)i10 + 0.0F) / 256.0F);
+			d14 = (double)(((float)i10 + 15.99F) / 256.0F);
+		}
+
+		if(block.minY < 0.0D || block.maxY > 1.0D) {
+			d16 = (double)(((float)i11 + 0.0F) / 512.0F);
+			d18 = (double)(((float)i11 + 15.99F) / 512.0F);
+		}
+
+		d20 = double2 + block.minX;
+		double d22 = double2 + block.maxX;
+		double d24 = double3 + block.minY;
+		double d26 = double3 + block.maxY;
+		double d28 = double4 + block.minZ;
+		tessellator9.addVertexWithUV(d20, d26, d28, d14, d16);
+		tessellator9.addVertexWithUV(d22, d26, d28, d12, d16);
+		tessellator9.addVertexWithUV(d22, d24, d28, d12, d18);
+		tessellator9.addVertexWithUV(d20, d24, d28, d14, d18);
+	}
+
+	public void renderWestFace(Block block, double double2, double double3, double double4, int integer) {
+		Tessellator tessellator9 = Tessellator.instance;
+		if(this.overrideBlockTexture >= 0) {
+			integer = this.overrideBlockTexture;
+		}
+
+		int i10 = (integer & 15) << 4;
+		int i11 = integer & 4080;
+		double d12 = ((double)i10 + block.minX * 16.0D) / 256.0D;
+		double d14 = ((double)i10 + block.maxX * 16.0D - 0.01D) / 256.0D;
+		double d16 = ((double)i11 + block.minY * 16.0D) / 512.0D;
+		double d18 = ((double)i11 + block.maxY * 16.0D - 0.01D) / 512.0D;
+		double d20;
+		if(this.flipTexture) {
+			d20 = d12;
+			d12 = d14;
+			d14 = d20;
+		}
+
+		if(block.minX < 0.0D || block.maxX > 1.0D) {
+			d12 = (double)(((float)i10 + 0.0F) / 256.0F);
+			d14 = (double)(((float)i10 + 15.99F) / 256.0F);
+		}
+
+		if(block.minY < 0.0D || block.maxY > 1.0D) {
+			d16 = (double)(((float)i11 + 0.0F) / 512.0F);
+			d18 = (double)(((float)i11 + 15.99F) / 512.0F);
+		}
+
+		d20 = double2 + block.minX;
+		double d22 = double2 + block.maxX;
+		double d24 = double3 + block.minY;
+		double d26 = double3 + block.maxY;
+		double d28 = double4 + block.maxZ;
+		tessellator9.addVertexWithUV(d20, d26, d28, d12, d16);
+		tessellator9.addVertexWithUV(d20, d24, d28, d12, d18);
+		tessellator9.addVertexWithUV(d22, d24, d28, d14, d18);
+		tessellator9.addVertexWithUV(d22, d26, d28, d14, d16);
+	}
+
+	public void renderNorthFace(Block block, double double2, double double3, double double4, int integer) {
+		Tessellator tessellator9 = Tessellator.instance;
+		if(this.overrideBlockTexture >= 0) {
+			integer = this.overrideBlockTexture;
+		}
+
+		int i10 = (integer & 15) << 4;
+		int i11 = integer & 4080;
+		double d12 = ((double)i10 + block.minZ * 16.0D) / 256.0D;
+		double d14 = ((double)i10 + block.maxZ * 16.0D - 0.01D) / 256.0D;
+		double d16 = ((double)i11 + block.minY * 16.0D) / 512.0D;
+		double d18 = ((double)i11 + block.maxY * 16.0D - 0.01D) / 512.0D;
+		double d20;
+		if(this.flipTexture) {
+			d20 = d12;
+			d12 = d14;
+			d14 = d20;
+		}
+
+		if(block.minZ < 0.0D || block.maxZ > 1.0D) {
+			d12 = (double)(((float)i10 + 0.0F) / 256.0F);
+			d14 = (double)(((float)i10 + 15.99F) / 256.0F);
+		}
+
+		if(block.minY < 0.0D || block.maxY > 1.0D) {
+			d16 = (double)(((float)i11 + 0.0F) / 512.0F);
+			d18 = (double)(((float)i11 + 15.99F) / 512.0F);
+		}
+
+		d20 = double2 + block.minX;
+		double d22 = double3 + block.minY;
+		double d24 = double3 + block.maxY;
+		double d26 = double4 + block.minZ;
+		double d28 = double4 + block.maxZ;
+		tessellator9.addVertexWithUV(d20, d24, d28, d14, d16);
+		tessellator9.addVertexWithUV(d20, d24, d26, d12, d16);
+		tessellator9.addVertexWithUV(d20, d22, d26, d12, d18);
+		tessellator9.addVertexWithUV(d20, d22, d28, d14, d18);
+	}
+
+	public void renderSouthFace(Block block, double double2, double double3, double double4, int integer) {
+		Tessellator tessellator9 = Tessellator.instance;
+		if(this.overrideBlockTexture >= 0) {
+			integer = this.overrideBlockTexture;
+		}
+
+		int i10 = (integer & 15) << 4;
+		int i11 = integer & 4080;
+		double d12 = ((double)i10 + block.minZ * 16.0D) / 256.0D;
+		double d14 = ((double)i10 + block.maxZ * 16.0D - 0.01D) / 256.0D;
+		double d16 = ((double)i11 + block.minY * 16.0D) / 512.0D;
+		double d18 = ((double)i11 + block.maxY * 16.0D - 0.01D) / 512.0D;
+		double d20;
+		if(this.flipTexture) {
+			d20 = d12;
+			d12 = d14;
+			d14 = d20;
+		}
+
+		if(block.minZ < 0.0D || block.maxZ > 1.0D) {
+			d12 = (double)(((float)i10 + 0.0F) / 256.0F);
+			d14 = (double)(((float)i10 + 15.99F) / 256.0F);
+		}
+
+		if(block.minY < 0.0D || block.maxY > 1.0D) {
+			d16 = (double)(((float)i11 + 0.0F) / 512.0F);
+			d18 = (double)(((float)i11 + 15.99F) / 512.0F);
+		}
+
+		d20 = double2 + block.maxX;
+		double d22 = double3 + block.minY;
+		double d24 = double3 + block.maxY;
+		double d26 = double4 + block.minZ;
+		double d28 = double4 + block.maxZ;
+		tessellator9.addVertexWithUV(d20, d22, d28, d12, d18);
+		tessellator9.addVertexWithUV(d20, d22, d26, d14, d18);
+		tessellator9.addVertexWithUV(d20, d24, d26, d14, d16);
+		tessellator9.addVertexWithUV(d20, d24, d28, d12, d16);
+	}
+
+	public void renderBlockAsItem(Block pb, float float2) {
+		this.func_10674_47uFsco7k3MB69GCB74UB9R3EkROVQhfTX6e4vfh9tGQb5JpV1NpUJJZFMS4(pb, float2, false);
+	}
+
+	public void func_10674_47uFsco7k3MB69GCB74UB9R3EkROVQhfTX6e4vfh9tGQb5JpV1NpUJJZFMS4(Block pb, float float2, boolean boolean3) {
+		int i4 = pb.getRenderType();
+		Tessellator tessellator5 = Tessellator.instance;
+		if(i4 == 0) {
+			pb.setBlockBoundsForItemRender();
+			GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
+			float f6 = 0.5F;
+			float f7 = 1.0F;
+			float f8 = 0.8F;
+			float f9 = 0.6F;
+			tessellator5.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(boolean3);
+			tessellator5.setColorRGBA_F(f7, f7, f7, float2);
+			this.renderBottomFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(0));
+			tessellator5.setColorRGBA_F(f6, f6, f6, float2);
+			this.renderTopFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(1));
+			tessellator5.setColorRGBA_F(f8, f8, f8, float2);
+			this.renderEastFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(2));
+			this.renderWestFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(3));
+			tessellator5.setColorRGBA_F(f9, f9, f9, float2);
+			this.renderNorthFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(4));
+			this.renderSouthFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(5));
+			tessellator5.draw();
+			GL11.glTranslatef(0.5F, 0.5F, 0.5F);
+		}
+
+		if(i4 == 14) {
+			pb.setBlockBoundsForItemRender();
+			GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
+			this.renderBlockEssenceFountain(pb, 0, 0, 0, true);
+			GL11.glTranslatef(0.5F, 0.5F, 0.5F);
+		}
+
+	}
+
+	public void renderBlockOnInventory(Block pb) {
+		byte b2 = -1;
+		Tessellator tessellator3 = Tessellator.instance;
+		int i4 = pb.getRenderType();
+		switch(i4) {
+		case 1:
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setNormal(0.0F, -1.0F, 0.0F);
+			this.renderCrossedSquares(pb, b2, -0.5D, -0.5D, -0.5D);
+			tessellator3.draw();
+			break;
+		case 2:
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setNormal(0.0F, -1.0F, 0.0F);
+			this.renderTorchAtAngle(pb, -0.5D, -0.5D, -0.5D, 0.0D, 0.0D);
+			tessellator3.draw();
+			break;
+		case 3:
+		case 4:
+		case 5:
+		case 7:
+		case 8:
+		case 9:
+		case 10:
+		case 11:
+		case 12:
+		default:
+			int i6;
+			if(i4 == 10) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					if(i6 == 0) {
+						pb.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
+					}
+
+					if(i6 == 1) {
+						pb.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
+					}
+
+					GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
+					tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+					tessellator3.setNormal(0.0F, -1.0F, 0.0F);
+					this.renderBottomFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(0));
+					tessellator3.draw();
+					tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+					tessellator3.setNormal(0.0F, 1.0F, 0.0F);
+					this.renderTopFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(1));
+					tessellator3.draw();
+					tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+					tessellator3.setNormal(0.0F, 0.0F, -1.0F);
+					this.renderEastFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(2));
+					tessellator3.draw();
+					tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+					tessellator3.setNormal(0.0F, 0.0F, 1.0F);
+					this.renderWestFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(3));
+					tessellator3.draw();
+					tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+					tessellator3.setNormal(-1.0F, 0.0F, 0.0F);
+					this.renderNorthFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(4));
+					tessellator3.draw();
+					tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+					tessellator3.setNormal(1.0F, 0.0F, 0.0F);
+					this.renderSouthFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(5));
+					tessellator3.draw();
+					GL11.glTranslatef(0.5F, 0.5F, 0.5F);
+				}
+
+				return;
+			} else {
+				if(i4 == 11) {
+					for(i6 = 0; i6 < 4; ++i6) {
+						float f7 = 0.125F;
+						if(i6 == 0) {
+							pb.setBlockBounds(0.5F - f7, 0.0F, 0.0F, 0.5F + f7, 1.0F, f7 * 2.0F);
+						}
+
+						if(i6 == 1) {
+							pb.setBlockBounds(0.5F - f7, 0.0F, 1.0F - f7 * 2.0F, 0.5F + f7, 1.0F, 1.0F);
+						}
+
+						f7 = 0.0625F;
+						if(i6 == 2) {
+							pb.setBlockBounds(0.5F - f7, 1.0F - f7 * 3.0F, -f7 * 2.0F, 0.5F + f7, 1.0F - f7, 1.0F + f7 * 2.0F);
+						}
+
+						if(i6 == 3) {
+							pb.setBlockBounds(0.5F - f7, 0.5F - f7 * 3.0F, -f7 * 2.0F, 0.5F + f7, 0.5F - f7, 1.0F + f7 * 2.0F);
+						}
+
+						GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
+						tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+						tessellator3.setNormal(0.0F, -1.0F, 0.0F);
+						this.renderBottomFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(0));
+						tessellator3.draw();
+						tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+						tessellator3.setNormal(0.0F, 1.0F, 0.0F);
+						this.renderTopFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(1));
+						tessellator3.draw();
+						tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+						tessellator3.setNormal(0.0F, 0.0F, -1.0F);
+						this.renderEastFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(2));
+						tessellator3.draw();
+						tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+						tessellator3.setNormal(0.0F, 0.0F, 1.0F);
+						this.renderWestFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(3));
+						tessellator3.draw();
+						tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+						tessellator3.setNormal(-1.0F, 0.0F, 0.0F);
+						this.renderNorthFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(4));
+						tessellator3.draw();
+						tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+						tessellator3.setNormal(1.0F, 0.0F, 0.0F);
+						this.renderSouthFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(5));
+						tessellator3.draw();
+						GL11.glTranslatef(0.5F, 0.5F, 0.5F);
+					}
+
+					pb.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+				}
+				break;
+			}
+		case 6:
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setNormal(0.0F, -1.0F, 0.0F);
+			this.renderBlockCropsImpl(pb, b2, -0.5D, -0.5D, -0.5D);
+			tessellator3.draw();
+			break;
+		case 13:
+			pb.setBlockBoundsForItemRender();
+			GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
+			float f5 = 0.0625F;
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setNormal(0.0F, -1.0F, 0.0F);
+			this.renderBottomFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(0));
+			tessellator3.draw();
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setNormal(0.0F, 1.0F, 0.0F);
+			this.renderTopFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(1));
+			tessellator3.draw();
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setNormal(0.0F, 0.0F, -1.0F);
+			tessellator3.setTranslationF(0.0F, 0.0F, f5);
+			this.renderEastFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(2));
+			tessellator3.setTranslationF(0.0F, 0.0F, -f5);
+			tessellator3.draw();
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setNormal(0.0F, 0.0F, 1.0F);
+			tessellator3.setTranslationF(0.0F, 0.0F, -f5);
+			this.renderWestFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(3));
+			tessellator3.setTranslationF(0.0F, 0.0F, f5);
+			tessellator3.draw();
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setNormal(-1.0F, 0.0F, 0.0F);
+			tessellator3.setTranslationF(f5, 0.0F, 0.0F);
+			this.renderNorthFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(4));
+			tessellator3.setTranslationF(-f5, 0.0F, 0.0F);
+			tessellator3.draw();
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setNormal(1.0F, 0.0F, 0.0F);
+			tessellator3.setTranslationF(-f5, 0.0F, 0.0F);
+			this.renderSouthFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(5));
+			tessellator3.setTranslationF(f5, 0.0F, 0.0F);
+			tessellator3.draw();
+			GL11.glTranslatef(0.5F, 0.5F, 0.5F);
+			break;
+		case 14:
+			GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
+			this.renderBlockEssenceFountain(pb, 0, 0, 0, true);
+			GL11.glTranslatef(0.5F, 0.5F, 0.5F);
+		case 0:
+			pb.setBlockBoundsForItemRender();
+			GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setNormal(0.0F, -1.0F, 0.0F);
+			this.renderBottomFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(0));
+			tessellator3.draw();
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setNormal(0.0F, 1.0F, 0.0F);
+			this.renderTopFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(1));
+			tessellator3.draw();
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setNormal(0.0F, 0.0F, -1.0F);
+			this.renderEastFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(2));
+			tessellator3.draw();
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setNormal(0.0F, 0.0F, 1.0F);
+			this.renderWestFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(3));
+			tessellator3.draw();
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setNormal(-1.0F, 0.0F, 0.0F);
+			this.renderNorthFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(4));
+			tessellator3.draw();
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setNormal(1.0F, 0.0F, 0.0F);
+			this.renderSouthFace(pb, 0.0D, 0.0D, 0.0D, pb.getBlockTextureFromSide(5));
+			tessellator3.draw();
+			GL11.glTranslatef(0.5F, 0.5F, 0.5F);
+		}
+
+	}
+
+	public static boolean renderItemIn3d(int integer) {
+		return integer == 0 ? true : (integer == 13 ? true : (integer == 10 ? true : integer == 11));
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandCgFovmod.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandCgFovmod extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8600_5qFn96zZ62iS19Y5ITC0nzl7I1c5v9brFN596O2zORG4z3ix5fI7B415Y8jx;
+    
+    CommandCgFovmod(final CommandManager abb) {
+        this.field_8600_5qFn96zZ62iS19Y5ITC0nzl7I1c5v9brFN596O2zORG4z3ix5fI7B415Y8jx = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.options.fovModifier = (float)arr[0];
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "" + InputHandler.mc.options.fovModifier;
+    }
+}
--- /dev/null
+++ net/minecraft/src/BlockFlowerOld.java
@@ -1,0 +1,58 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockFlowerOld extends BlockOld {
+	protected BlockFlowerOld(int integer1, int integer2) {
+		super(integer1, Material.plants);
+		this.blockIndexInTexture = integer2;
+		this.setTickOnLoad(true);
+		float f3 = 0.2F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, f3 * 3.0F, 0.5F + f3);
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		return this.canThisPlantGrowOnThisBlockID(vg.getBlockId(integer2, integer3 - 1, integer4));
+	}
+
+	protected boolean canThisPlantGrowOnThisBlockID(int integer) {
+		return integer == BlockOld.grass.blockID || integer == BlockOld.dirt.blockID || integer == BlockOld.tilledField.blockID;
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		super.onNeighborBlockChange(vg, integer2, integer3, integer4, integer5);
+		this.checkFlowerChange(vg, integer2, integer3, integer4);
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		this.checkFlowerChange(vg, integer2, integer3, integer4);
+	}
+
+	protected final void checkFlowerChange(World vg, int integer2, int integer3, int integer4) {
+		if(!this.canBlockStay(vg, integer2, integer3, integer4)) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+		}
+
+	}
+
+	public boolean canBlockStay(World vg, int integer2, int integer3, int integer4) {
+		return (vg.getBlockLightValue(integer2, integer3, integer4) >= 8 || vg.canBlockSeeTheSky(integer2, integer3, integer4)) && this.canThisPlantGrowOnThisBlockID(vg.getBlockId(integer2, integer3 - 1, integer4));
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return null;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 1;
+	}
+}
--- net/minecraft/src/BlockFlowing.java
+++ net/minecraft/src/BlockFlowing.java
@@ -7,251 +7,251 @@
 	boolean[] isOptimalFlowDirection = new boolean[4];
 	int[] flowCost = new int[4];
 
-	protected BlockFlowing(int var1, Material var2) {
-		super(var1, var2);
-	}
-
-	private void updateFlow(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		var1.setBlockAndMetadata(var2, var3, var4, this.blockID + 1, var5);
-		var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-		var1.markBlockNeedsUpdate(var2, var3, var4);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = this.getFlowDecay(var1, var2, var3, var4);
-		boolean var7 = true;
-		int var9;
-		if(var6 > 0) {
-			byte var8 = -100;
+	protected BlockFlowing(int id, Material material) {
+		super(id, material);
+	}
+
+	private void updateFlow(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		world.setBlockAndMetadata(x, y, z, this.blockID + 1, i5);
+		world.markBlocksDirty(x, y, z, x, y, z);
+		world.markBlockNeedsUpdate(x, y, z);
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		int i6 = this.getFlowDecay(world, x, y, z);
+		boolean z7 = true;
+		int i8;
+		if(i6 > 0) {
+			byte b9 = -100;
 			this.numAdjacentSources = 0;
-			int var11 = this.getSmallestFlowDecay(var1, var2 - 1, var3, var4, var8);
-			var11 = this.getSmallestFlowDecay(var1, var2 + 1, var3, var4, var11);
-			var11 = this.getSmallestFlowDecay(var1, var2, var3, var4 - 1, var11);
-			var11 = this.getSmallestFlowDecay(var1, var2, var3, var4 + 1, var11);
-			var9 = var11 + this.fluidType;
-			if(var9 >= 8 || var11 < 0) {
-				var9 = -1;
+			int i10 = this.getSmallestFlowDecay(world, x - 1, y, z, b9);
+			i10 = this.getSmallestFlowDecay(world, x + 1, y, z, i10);
+			i10 = this.getSmallestFlowDecay(world, x, y, z - 1, i10);
+			i10 = this.getSmallestFlowDecay(world, x, y, z + 1, i10);
+			i8 = i10 + this.fluidType;
+			if(i8 >= 8 || i10 < 0) {
+				i8 = -1;
 			}
 
-			if(this.getFlowDecay(var1, var2, var3 + 1, var4) >= 0) {
-				int var10 = this.getFlowDecay(var1, var2, var3 + 1, var4);
-				if(var10 >= 8) {
-					var9 = var10;
+			if(this.getFlowDecay(world, x, y + 1, z) >= 0) {
+				int i11 = this.getFlowDecay(world, x, y + 1, z);
+				if(i11 >= 8) {
+					i8 = i11;
 				} else {
-					var9 = var10 + 8;
+					i8 = i11 + 8;
 				}
 			}
 
 			if(this.numAdjacentSources >= 2 && this.material == Material.water) {
-				if(var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-					var9 = 0;
-				} else if(var1.getBlockMaterial(var2, var3 - 1, var4) == this.material && var1.getBlockMetadata(var2, var3, var4) == 0) {
-					var9 = 0;
+				if(world.isBlockNormalCube(x, y - 1, z)) {
+					i8 = 0;
+				} else if(world.getBlockMaterial(x, y - 1, z) == this.material && world.getBlockMetadata(x, y, z) == 0) {
+					i8 = 0;
 				}
 			}
 
-			if(this.material == Material.lava && var6 < 8 && var9 < 8 && var9 > var6 && var5.nextInt(4) != 0) {
-				var9 = var6;
-				var7 = false;
+			if(this.material == Material.lava && i6 < 8 && i8 < 8 && i8 > i6 && random.nextInt(4) != 0) {
+				i8 = i6;
+				z7 = false;
 			}
 
-			if(var9 != var6) {
-				var6 = var9;
-				if(var9 < 0) {
-					var1.setBlockWithNotify(var2, var3, var4, 0);
+			if(i8 != i6) {
+				i6 = i8;
+				if(i8 < 0) {
+					world.setBlockWithNotify(x, y, z, 0);
 				} else {
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var9);
-					var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-					var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
+					world.setBlockMetadataWithNotify(x, y, z, i8);
+					world.scheduleBlockUpdate(x, y, z, this.blockID);
+					world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
 				}
-			} else if(var7) {
-				this.updateFlow(var1, var2, var3, var4);
+			} else if(z7) {
+				this.updateFlow(world, x, y, z);
 			}
 		} else {
-			this.updateFlow(var1, var2, var3, var4);
+			this.updateFlow(world, x, y, z);
 		}
 
-		if(this.liquidCanDisplaceBlock(var1, var2, var3 - 1, var4)) {
-			if(var6 >= 8) {
-				var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, this.blockID, var6);
+		if(this.liquidCanDisplaceBlock(world, x, y - 1, z)) {
+			if(i6 >= 8) {
+				world.setBlockAndMetadataWithNotify(x, y - 1, z, this.blockID, i6);
 			} else {
-				var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, this.blockID, var6 + 8);
+				world.setBlockAndMetadataWithNotify(x, y - 1, z, this.blockID, i6 + 8);
 			}
-		} else if(var6 >= 0 && (var6 == 0 || this.blockBlocksFlow(var1, var2, var3 - 1, var4))) {
-			boolean[] var12 = this.getOptimalFlowDirections(var1, var2, var3, var4);
-			var9 = var6 + this.fluidType;
-			if(var6 >= 8) {
-				var9 = 1;
+		} else if(i6 >= 0 && (i6 == 0 || this.blockBlocksFlow(world, x, y - 1, z))) {
+			boolean[] z12 = this.getOptimalFlowDirections(world, x, y, z);
+			i8 = i6 + this.fluidType;
+			if(i6 >= 8) {
+				i8 = 1;
 			}
 
-			if(var9 >= 8) {
+			if(i8 >= 8) {
 				return;
 			}
 
-			if(var12[0]) {
-				this.flowIntoBlock(var1, var2 - 1, var3, var4, var9);
-			}
-
-			if(var12[1]) {
-				this.flowIntoBlock(var1, var2 + 1, var3, var4, var9);
-			}
-
-			if(var12[2]) {
-				this.flowIntoBlock(var1, var2, var3, var4 - 1, var9);
-			}
-
-			if(var12[3]) {
-				this.flowIntoBlock(var1, var2, var3, var4 + 1, var9);
+			if(z12[0]) {
+				this.flowIntoBlock(world, x - 1, y, z, i8);
+			}
+
+			if(z12[1]) {
+				this.flowIntoBlock(world, x + 1, y, z, i8);
+			}
+
+			if(z12[2]) {
+				this.flowIntoBlock(world, x, y, z - 1, i8);
+			}
+
+			if(z12[3]) {
+				this.flowIntoBlock(world, x, y, z + 1, i8);
 			}
 		}
 
 	}
 
-	private void flowIntoBlock(World var1, int var2, int var3, int var4, int var5) {
-		if(this.liquidCanDisplaceBlock(var1, var2, var3, var4)) {
-			int var6 = var1.getBlockId(var2, var3, var4);
-			if(var6 > 0) {
+	private void flowIntoBlock(World world, int x, int y, int z, int metadata) {
+		if(this.liquidCanDisplaceBlock(world, x, y, z)) {
+			int i6 = world.getBlockId(x, y, z);
+			if(i6 > 0) {
 				if(this.material == Material.lava) {
-					this.triggerLavaMixEffects(var1, var2, var3, var4);
+					this.triggerLavaMixEffects(world, x, y, z);
 				} else {
-					Block.blocksList[var6].dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
+					Block.blocksList[i6].dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
 				}
 			}
 
-			var1.setBlockAndMetadataWithNotify(var2, var3, var4, this.blockID, var5);
+			world.setBlockAndMetadataWithNotify(x, y, z, this.blockID, metadata);
 		}
 
 	}
 
-	private int calculateFlowCost(World var1, int var2, int var3, int var4, int var5, int var6) {
-		int var7 = 1000;
-
-		for(int var8 = 0; var8 < 4; ++var8) {
-			if((var8 != 0 || var6 != 1) && (var8 != 1 || var6 != 0) && (var8 != 2 || var6 != 3) && (var8 != 3 || var6 != 2)) {
-				int var9 = var2;
-				int var11 = var4;
-				if(var8 == 0) {
-					var9 = var2 - 1;
-				}
-
-				if(var8 == 1) {
-					++var9;
-				}
-
-				if(var8 == 2) {
-					var11 = var4 - 1;
-				}
-
-				if(var8 == 3) {
-					++var11;
-				}
-
-				if(!this.blockBlocksFlow(var1, var9, var3, var11) && (var1.getBlockMaterial(var9, var3, var11) != this.material || var1.getBlockMetadata(var9, var3, var11) != 0)) {
-					if(!this.blockBlocksFlow(var1, var9, var3 - 1, var11)) {
-						return var5;
+	private int calculateFlowCost(World world, int x, int y, int z, int integer5, int integer6) {
+		int i7 = 1000;
+
+		for(int i8 = 0; i8 < 4; ++i8) {
+			if((i8 != 0 || integer6 != 1) && (i8 != 1 || integer6 != 0) && (i8 != 2 || integer6 != 3) && (i8 != 3 || integer6 != 2)) {
+				int i9 = x;
+				int i10 = z;
+				if(i8 == 0) {
+					i9 = x - 1;
+				}
+
+				if(i8 == 1) {
+					++i9;
+				}
+
+				if(i8 == 2) {
+					i10 = z - 1;
+				}
+
+				if(i8 == 3) {
+					++i10;
+				}
+
+				if(!this.blockBlocksFlow(world, i9, y, i10) && (world.getBlockMaterial(i9, y, i10) != this.material || world.getBlockMetadata(i9, y, i10) != 0)) {
+					if(!this.blockBlocksFlow(world, i9, y - 1, i10)) {
+						return integer5;
 					}
 
-					if(var5 < 4) {
-						int var12 = this.calculateFlowCost(var1, var9, var3, var11, var5 + 1, var8);
-						if(var12 < var7) {
-							var7 = var12;
+					if(integer5 < 4) {
+						int i11 = this.calculateFlowCost(world, i9, y, i10, integer5 + 1, i8);
+						if(i11 < i7) {
+							i7 = i11;
 						}
 					}
 				}
 			}
 		}
 
-		return var7;
+		return i7;
 	}
 
-	private boolean[] getOptimalFlowDirections(World var1, int var2, int var3, int var4) {
-		int var5;
-		int var6;
-		for(var5 = 0; var5 < 4; ++var5) {
-			this.flowCost[var5] = 1000;
-			var6 = var2;
-			int var8 = var4;
-			if(var5 == 0) {
-				var6 = var2 - 1;
-			}
-
-			if(var5 == 1) {
-				++var6;
-			}
-
-			if(var5 == 2) {
-				var8 = var4 - 1;
-			}
-
-			if(var5 == 3) {
-				++var8;
-			}
-
-			if(!this.blockBlocksFlow(var1, var6, var3, var8) && (var1.getBlockMaterial(var6, var3, var8) != this.material || var1.getBlockMetadata(var6, var3, var8) != 0)) {
-				if(!this.blockBlocksFlow(var1, var6, var3 - 1, var8)) {
-					this.flowCost[var5] = 0;
+	private boolean[] getOptimalFlowDirections(World world, int x, int y, int z) {
+		int i5;
+		int i6;
+		for(i5 = 0; i5 < 4; ++i5) {
+			this.flowCost[i5] = 1000;
+			i6 = x;
+			int i7 = z;
+			if(i5 == 0) {
+				i6 = x - 1;
+			}
+
+			if(i5 == 1) {
+				++i6;
+			}
+
+			if(i5 == 2) {
+				i7 = z - 1;
+			}
+
+			if(i5 == 3) {
+				++i7;
+			}
+
+			if(!this.blockBlocksFlow(world, i6, y, i7) && (world.getBlockMaterial(i6, y, i7) != this.material || world.getBlockMetadata(i6, y, i7) != 0)) {
+				if(!this.blockBlocksFlow(world, i6, y - 1, i7)) {
+					this.flowCost[i5] = 0;
 				} else {
-					this.flowCost[var5] = this.calculateFlowCost(var1, var6, var3, var8, 1, var5);
+					this.flowCost[i5] = this.calculateFlowCost(world, i6, y, i7, 1, i5);
 				}
 			}
 		}
 
-		var5 = this.flowCost[0];
+		i5 = this.flowCost[0];
 
-		for(var6 = 1; var6 < 4; ++var6) {
-			if(this.flowCost[var6] < var5) {
-				var5 = this.flowCost[var6];
+		for(i6 = 1; i6 < 4; ++i6) {
+			if(this.flowCost[i6] < i5) {
+				i5 = this.flowCost[i6];
 			}
 		}
 
-		for(var6 = 0; var6 < 4; ++var6) {
-			this.isOptimalFlowDirection[var6] = this.flowCost[var6] == var5;
+		for(i6 = 0; i6 < 4; ++i6) {
+			this.isOptimalFlowDirection[i6] = this.flowCost[i6] == i5;
 		}
 
 		return this.isOptimalFlowDirection;
 	}
 
-	private boolean blockBlocksFlow(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3, var4);
-		if(var5 != Block.doorWood.blockID && var5 != Block.doorSteel.blockID && var5 != Block.signStanding.blockID && var5 != Block.ladder.blockID && var5 != Block.reed.blockID) {
-			if(var5 == 0) {
+	private boolean blockBlocksFlow(World world, int x, int y, int z) {
+		int i5 = world.getBlockId(x, y, z);
+		if(i5 != Block.doorWood.blockID && i5 != Block.doorSteel.blockID && i5 != Block.signStanding.blockID && i5 != Block.ladder.blockID && i5 != Block.reed.blockID) {
+			if(i5 == 0) {
 				return false;
 			} else {
-				Material var6 = Block.blocksList[var5].material;
-				return var6.isSolid();
+				Material material6 = Block.blocksList[i5].material;
+				return material6.isSolid();
 			}
 		} else {
 			return true;
 		}
 	}
 
-	protected int getSmallestFlowDecay(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = this.getFlowDecay(var1, var2, var3, var4);
-		if(var6 < 0) {
-			return var5;
+	protected int getSmallestFlowDecay(World world, int x, int y, int z, int integer5) {
+		int i6 = this.getFlowDecay(world, x, y, z);
+		if(i6 < 0) {
+			return integer5;
 		} else {
-			if(var6 == 0) {
+			if(i6 == 0) {
 				++this.numAdjacentSources;
 			}
 
-			if(var6 >= 8) {
-				var6 = 0;
+			if(i6 >= 8) {
+				i6 = 0;
 			}
 
-			return var5 >= 0 && var6 >= var5 ? var5 : var6;
+			return integer5 >= 0 && i6 >= integer5 ? integer5 : i6;
 		}
 	}
 
-	private boolean liquidCanDisplaceBlock(World var1, int var2, int var3, int var4) {
-		Material var5 = var1.getBlockMaterial(var2, var3, var4);
-		return var5 == this.material ? false : (var5 == Material.lava ? false : !this.blockBlocksFlow(var1, var2, var3, var4));
+	private boolean liquidCanDisplaceBlock(World world, int x, int y, int z) {
+		Material material5 = world.getBlockMaterial(x, y, z);
+		return material5 == this.material ? false : (material5 == Material.lava ? false : !this.blockBlocksFlow(world, x, y, z));
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		super.onBlockAdded(var1, var2, var3, var4);
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
+	public void onBlockAdded(World world, int x, int y, int z) {
+		super.onBlockAdded(world, x, y, z);
+		if(world.getBlockId(x, y, z) == this.blockID) {
+			world.scheduleBlockUpdate(x, y, z, this.blockID);
 		}
 
 	}
--- net/minecraft/src/World.java
+++ net/minecraft/src/World.java
@@ -7,6 +7,7 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -14,18 +15,23 @@
 import java.util.Set;
 import java.util.TreeSet;
 
+import net.minecraft.client.Minecraft;
+
 public class World implements IBlockAccess {
+	private Minecraft field_7480_14apz8yQs3u7j64h52PO3AJlaP90n480K75I0kD4kgKy0D5drp56qXv5W2yX;
 	private List lightingToUpdate;
 	public List loadedEntityList;
 	private List unloadedEntityList;
-	private TreeSet scheduledTickTreeSet;
+	private Set scheduledTickTreeSet;
 	private Set scheduledTickSet;
 	public List loadedTileEntityList;
 	public long worldTime;
 	public boolean snowCovered;
-	private long skyColor;
-	private long fogColor;
-	private long cloudColor;
+	public boolean sandCovered;
+	public long skyColor;
+	public long field_7500_6aGUO2jbVGtoxoGHcgMRUkCmunA4cxQ7hz8a29V2I7fc5UVeqFCM92Z8HJnU;
+	public long fogColor;
+	public long cloudColor;
 	public int skylightSubtracted;
 	protected int updateLCG;
 	protected int DIST_HASH_MAGIC;
@@ -42,7 +48,7 @@
 	public int spawnZ;
 	public boolean isNewWorld;
 	protected List worldAccesses;
-	private IChunkProvider chunkProvider;
+	public IChunkProvider chunkProvider;
 	public File saveDirectory;
 	public long randomSeed;
 	private NBTTagCompound nbtCompoundPlayer;
@@ -54,21 +60,30 @@
 	private int soundCounter;
 	private List entitiesWithinAABBExcludingEntity;
 	public boolean multiplayerWorld;
-
-	public static NBTTagCompound getLevelData(File var0, String var1) {
-		File var2 = new File(var0, "saves");
-		File var3 = new File(var2, var1);
-		if(!var3.exists()) {
+	protected BiomeInterface field_7486_19Zq3usHE49nqTf42NA4437074mbHq57gg27445jru16ailF0t00O91Q8HO3;
+	public boolean exclFrailMode;
+	public List field_7498_65957fU9nGL5PA2e96ZOK3ePBveSt2ceA9Glj10PC2Jo5s0wI21ix69flng2;
+	public boolean listBeingWritten;
+	int field_7497_6WbP28c555893meijkmoF90Ca566QQQN5FP022rim05fq26oU3308065FJ2h;
+
+	public long GetMilestone() {
+		return this.worldTime / 23000L;
+	}
+
+	public static NBTTagCompound getLevelData(File file, String world) {
+		File file2 = new File(file, "saves");
+		File file3 = new File(file2, world);
+		if(!file3.exists()) {
 			return null;
 		} else {
-			File var4 = new File(var3, "level.dat");
-			if(var4.exists()) {
+			File file4 = new File(file3, "level.dat");
+			if(file4.exists()) {
 				try {
-					NBTTagCompound var5 = CompressedStreamTools.readCompressed(new FileInputStream(var4));
-					NBTTagCompound var6 = var5.getCompoundTag("Data");
-					return var6;
-				} catch (Exception var7) {
-					var7.printStackTrace();
+					NBTTagCompound nBTTagCompound5 = CompressedStreamTools.readCompressed(new FileInputStream(file4));
+					NBTTagCompound nBTTagCompound6 = nBTTagCompound5.getCompoundTag("Data");
+					return nBTTagCompound6;
+				} catch (Exception exception7) {
+					exception7.printStackTrace();
 				}
 			}
 
@@ -76,40 +91,51 @@
 		}
 	}
 
-	public static void deleteWorld(File var0, String var1) {
-		File var2 = new File(var0, "saves");
-		File var3 = new File(var2, var1);
-		if(var3.exists()) {
-			deleteWorldFiles(var3.listFiles());
-			var3.delete();
+	public static void deleteWorld(File file, String world) {
+		File file2 = new File(file, "saves");
+		File file3 = new File(file2, world);
+		if(file3.exists()) {
+			deleteWorldFiles(file3.listFiles());
+			file3.delete();
 		}
+
 	}
 
-	private static void deleteWorldFiles(File[] var0) {
-		for(int var1 = 0; var1 < var0.length; ++var1) {
-			if(var0[var1].isDirectory()) {
-				deleteWorldFiles(var0[var1].listFiles());
+	private static void deleteWorldFiles(File[] files) {
+		for(int i1 = 0; i1 < files.length; ++i1) {
+			if(files[i1].isDirectory()) {
+				deleteWorldFiles(files[i1].listFiles());
 			}
 
-			var0[var1].delete();
+			files[i1].delete();
 		}
 
 	}
 
-	public World(File var1, String var2) {
-		this(var1, var2, (new Random()).nextLong());
-	}
-
-	public World(String var1) {
+	public boolean func_7458_5r8qe5geuw4S9tsd10m7M2qgIZAlCgZo31t563di8oEr3d5K6yrFyI690mD5() {
+		return true;
+	}
+
+	public World(File worldFile, String levelName) {
+		this(worldFile, levelName, (new Random()).nextLong());
+	}
+
+	public World(String levelName) {
+		this.exclFrailMode = true;
+		this.field_7498_65957fU9nGL5PA2e96ZOK3ePBveSt2ceA9Glj10PC2Jo5s0wI21ix69flng2 = new ArrayList();
+		this.listBeingWritten = false;
+		this.field_7497_6WbP28c555893meijkmoF90Ca566QQQN5FP022rim05fq26oU3308065FJ2h = 0;
 		this.lightingToUpdate = new ArrayList();
 		this.loadedEntityList = new ArrayList();
 		this.unloadedEntityList = new ArrayList();
-		this.scheduledTickTreeSet = new TreeSet();
-		this.scheduledTickSet = new HashSet();
+		this.scheduledTickTreeSet = Collections.synchronizedSet(new TreeSet());
+		this.scheduledTickSet = Collections.synchronizedSet(new HashSet());
 		this.loadedTileEntityList = new ArrayList();
 		this.worldTime = 0L;
 		this.snowCovered = false;
-		this.skyColor = 8961023L;
+		this.sandCovered = false;
+		this.skyColor = (long)InputHandler.mc.field_7308_49g3Ue4B4ymyJ5yc4CXdts2UZnR4OP36zG20Omc6J6Ly1C5xR8Habk43qvGE.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0.field_10164_5N63dbka0na7Is07L9kMmSk6ZK28Ioxdll6JwQgybo1I69cauDA8U5rtDvBv.field_12192_9E67d5X2srrjQ8fe493f7ub1P59cMh50f2G1a453y7P5UP6YgaLpUO1EN9yR;
+		this.field_7500_6aGUO2jbVGtoxoGHcgMRUkCmunA4cxQ7hz8a29V2I7fc5UVeqFCM92Z8HJnU = (long)InputHandler.mc.field_7308_49g3Ue4B4ymyJ5yc4CXdts2UZnR4OP36zG20Omc6J6Ly1C5xR8Habk43qvGE.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0.field_10164_5N63dbka0na7Is07L9kMmSk6ZK28Ioxdll6JwQgybo1I69cauDA8U5rtDvBv.field_12195_4252ptxk91utqUzwxJFw0j8CTrWMs6A4327D4QmrdAsD6mV695v861Puc7f3;
 		this.fogColor = 12638463L;
 		this.cloudColor = 16777215L;
 		this.skylightSubtracted = 0;
@@ -120,6 +146,7 @@
 		this.autosavePeriod = 40;
 		this.playerEntities = new ArrayList();
 		this.rand = new Random();
+		this.field_7486_19Zq3usHE49nqTf42NA4437074mbHq57gg27445jru16ailF0t00O91Q8HO3 = new BiomeUnknownClass2();
 		this.isNewWorld = false;
 		this.worldAccesses = new ArrayList();
 		this.randomSeed = 0L;
@@ -129,21 +156,27 @@
 		this.soundCounter = this.rand.nextInt(12000);
 		this.entitiesWithinAABBExcludingEntity = new ArrayList();
 		this.multiplayerWorld = false;
-		this.levelName = var1;
+		this.levelName = levelName;
 		this.chunkProvider = this.getChunkProvider(this.saveDirectory);
 		this.calculateInitialSkylight();
 	}
 
-	public World(File var1, String var2, long var3) {
+	public World(File baseDir, String levelName, long randomSeed) {
+		this.exclFrailMode = true;
+		this.field_7498_65957fU9nGL5PA2e96ZOK3ePBveSt2ceA9Glj10PC2Jo5s0wI21ix69flng2 = new ArrayList();
+		this.listBeingWritten = false;
+		this.field_7497_6WbP28c555893meijkmoF90Ca566QQQN5FP022rim05fq26oU3308065FJ2h = 0;
 		this.lightingToUpdate = new ArrayList();
 		this.loadedEntityList = new ArrayList();
 		this.unloadedEntityList = new ArrayList();
-		this.scheduledTickTreeSet = new TreeSet();
-		this.scheduledTickSet = new HashSet();
+		this.scheduledTickTreeSet = Collections.synchronizedSet(new TreeSet());
+		this.scheduledTickSet = Collections.synchronizedSet(new HashSet());
 		this.loadedTileEntityList = new ArrayList();
 		this.worldTime = 0L;
 		this.snowCovered = false;
-		this.skyColor = 8961023L;
+		this.sandCovered = false;
+		this.skyColor = (long)InputHandler.mc.field_7308_49g3Ue4B4ymyJ5yc4CXdts2UZnR4OP36zG20Omc6J6Ly1C5xR8Habk43qvGE.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0.field_10164_5N63dbka0na7Is07L9kMmSk6ZK28Ioxdll6JwQgybo1I69cauDA8U5rtDvBv.field_12192_9E67d5X2srrjQ8fe493f7ub1P59cMh50f2G1a453y7P5UP6YgaLpUO1EN9yR;
+		this.field_7500_6aGUO2jbVGtoxoGHcgMRUkCmunA4cxQ7hz8a29V2I7fc5UVeqFCM92Z8HJnU = (long)InputHandler.mc.field_7308_49g3Ue4B4ymyJ5yc4CXdts2UZnR4OP36zG20Omc6J6Ly1C5xR8Habk43qvGE.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0.field_10164_5N63dbka0na7Is07L9kMmSk6ZK28Ioxdll6JwQgybo1I69cauDA8U5rtDvBv.field_12195_4252ptxk91utqUzwxJFw0j8CTrWMs6A4327D4QmrdAsD6mV695v861Puc7f3;
 		this.fogColor = 12638463L;
 		this.cloudColor = 16777215L;
 		this.skylightSubtracted = 0;
@@ -154,6 +187,7 @@
 		this.autosavePeriod = 40;
 		this.playerEntities = new ArrayList();
 		this.rand = new Random();
+		this.field_7486_19Zq3usHE49nqTf42NA4437074mbHq57gg27445jru16ailF0t00O91Q8HO3 = new BiomeUnknownClass2();
 		this.isNewWorld = false;
 		this.worldAccesses = new ArrayList();
 		this.randomSeed = 0L;
@@ -163,56 +197,72 @@
 		this.soundCounter = this.rand.nextInt(12000);
 		this.entitiesWithinAABBExcludingEntity = new ArrayList();
 		this.multiplayerWorld = false;
-		this.levelName = var2;
-		var1.mkdirs();
-		this.saveDirectory = new File(var1, var2);
+		this.levelName = levelName;
+		baseDir.mkdirs();
+		this.saveDirectory = new File(baseDir, levelName);
 		this.saveDirectory.mkdirs();
 
-		File var5;
+		File file5;
 		try {
-			var5 = new File(this.saveDirectory, "session.lock");
-			DataOutputStream var6 = new DataOutputStream(new FileOutputStream(var5));
+			file5 = new File(this.saveDirectory, "session.lock");
+			DataOutputStream dataOutputStream6 = new DataOutputStream(new FileOutputStream(file5));
 
 			try {
-				var6.writeLong(this.lockTimestamp);
+				dataOutputStream6.writeLong(this.lockTimestamp);
 			} finally {
-				var6.close();
+				dataOutputStream6.close();
 			}
-		} catch (IOException var13) {
+		} catch (IOException iOException16) {
 			throw new RuntimeException("Failed to check session lock, aborting");
 		}
 
-		var5 = new File(this.saveDirectory, "level.dat");
-		this.isNewWorld = !var5.exists();
-		if(var5.exists()) {
+		file5 = new File(this.saveDirectory, "level.dat");
+		this.isNewWorld = !file5.exists();
+		if(file5.exists()) {
 			try {
-				NBTTagCompound var14 = CompressedStreamTools.readCompressed(new FileInputStream(var5));
-				NBTTagCompound var7 = var14.getCompoundTag("Data");
-				this.randomSeed = var7.getLong("RandomSeed");
-				this.spawnX = var7.getInteger("SpawnX");
-				this.spawnY = var7.getInteger("SpawnY");
-				this.spawnZ = var7.getInteger("SpawnZ");
-				this.worldTime = var7.getLong("Time");
-				this.sizeOnDisk = var7.getLong("SizeOnDisk");
-				this.snowCovered = var7.getBoolean("SnowCovered");
-				if(var7.hasKey("Player")) {
-					this.nbtCompoundPlayer = var7.getCompoundTag("Player");
-				}
-			} catch (Exception var11) {
-				var11.printStackTrace();
+				NBTTagCompound nBTTagCompound18 = CompressedStreamTools.readCompressed(new FileInputStream(file5));
+				NBTTagCompound nBTTagCompound7 = nBTTagCompound18.getCompoundTag("Data");
+				this.randomSeed = nBTTagCompound7.getLong("RandomSeed");
+				this.spawnX = nBTTagCompound7.getInteger("SpawnX");
+				this.spawnY = nBTTagCompound7.getInteger("SpawnY");
+				this.spawnZ = nBTTagCompound7.getInteger("SpawnZ");
+				this.worldTime = nBTTagCompound7.getLong("Time");
+				this.sizeOnDisk = nBTTagCompound7.getLong("SizeOnDisk");
+				this.snowCovered = nBTTagCompound7.getBoolean("SnowCovered");
+				this.sandCovered = nBTTagCompound7.getBoolean("SandCovered");
+				this.exclFrailMode = nBTTagCompound7.getBoolean("ExclusivelyFrail");
+				if(nBTTagCompound7.hasKey("PortalZones")) {
+					NBTTagCompound nBTTagCompound8 = nBTTagCompound7.getCompoundTag("PortalZones");
+					Iterator iterator9 = nBTTagCompound8.func_9925_7Nmdbr2ySWTWPYBjFFp2Pj5o350YfKPz3M4LF0Uy1488hQ70sr9S06Q7XbE6().iterator();
+
+					while(iterator9.hasNext()) {
+						NBTBase nBTBase10 = (NBTBase)iterator9.next();
+						if(nBTBase10.getType() == 10) {
+							NBTTagCompound nBTTagCompound11 = (NBTTagCompound)nBTBase10;
+							this.field_7498_65957fU9nGL5PA2e96ZOK3ePBveSt2ceA9Glj10PC2Jo5s0wI21ix69flng2.add(HandlerSetCheckpointUnknownClass.func_10084_6FAAVBx3XRV8rsU1z0770zreU3637zjNEWB3Z8B3V8CI5d1V47yA72wzHu01(nBTTagCompound11, nBTBase10.getKey()));
+						}
+					}
+				}
+
+				if(this.func_7458_5r8qe5geuw4S9tsd10m7M2qgIZAlCgZo31t563di8oEr3d5K6yrFyI690mD5() && nBTTagCompound7.hasKey("Player")) {
+					this.nbtCompoundPlayer = nBTTagCompound7.getCompoundTag("Player");
+				}
+			} catch (Exception exception17) {
+				exception17.printStackTrace();
 			}
 		} else {
-			this.snowCovered = this.rand.nextInt(4) == 0;
+			this.sandCovered = InputHandler.IsKeyDown(54) ? false : this.rand.nextInt(4) == 1;
 		}
 
-		boolean var15 = false;
+		boolean z19 = false;
 		if(this.randomSeed == 0L) {
-			this.randomSeed = var3;
-			var15 = true;
+			this.randomSeed = randomSeed;
+			z19 = true;
 		}
 
+		this.field_7486_19Zq3usHE49nqTf42NA4437074mbHq57gg27445jru16ailF0t00O91Q8HO3 = (new BiomeUnknownClass3(new Random(this.randomSeed))).func_10190_9hA9hGtqVhzjB1mqm8q4p5FR00Mv2wW72R61Kce04yYaa19rm57UsiH9mAq0();
 		this.chunkProvider = this.getChunkProvider(this.saveDirectory);
-		if(var15) {
+		if(z19) {
 			this.worldChunkLoadOverride = true;
 			this.spawnX = 0;
 			this.spawnY = 64;
@@ -227,8 +277,8 @@
 		this.calculateInitialSkylight();
 	}
 
-	protected IChunkProvider getChunkProvider(File var1) {
-		return new ChunkProviderLoadOrGenerate(this, new ChunkLoader(var1, true), new ChunkProviderGenerate(this, this.randomSeed));
+	protected IChunkProvider getChunkProvider(File saveDir) {
+		return new ChunkProviderLoadOrGenerate(this, new ChunkLoader(saveDir, true), new ChunkProviderGenerate(this, this.randomSeed));
 	}
 
 	public void setSpawnLocation() {
@@ -243,103 +293,132 @@
 
 	}
 
-	private boolean findSpawn(int var1, int var2) {
-		int var3 = this.getFirstUncoveredBlock(var1, var2);
-		return var3 == Block.sand.blockID;
+	protected boolean findSpawn(int x, int z) {
+		int i3 = this.getFirstUncoveredBlock(x, z);
+		return i3 == Block.sand.blockID;
 	}
 
-	private int getFirstUncoveredBlock(int var1, int var2) {
-		int var3;
-		for(var3 = 63; this.getBlockId(var1, var3 + 1, var2) != 0; ++var3) {
+	private int getFirstUncoveredBlock(int x, int z) {
+		int i3;
+		for(i3 = 63; this.getBlockId(x, i3 + 1, z) != 0; ++i3) {
 		}
 
-		return this.getBlockId(var1, var3, var2);
+		return this.getBlockId(x, i3, z);
 	}
 
-	public void spawnPlayerWithLoadedChunks(EntityPlayer var1) {
+	public void spawnPlayerWithLoadedChunks(EntityPlayer entityPlayer) {
 		try {
 			if(this.nbtCompoundPlayer != null) {
-				var1.readFromNBT(this.nbtCompoundPlayer);
+				entityPlayer.readFromNBT(this.nbtCompoundPlayer);
 				this.nbtCompoundPlayer = null;
 			}
 
-			this.spawnEntityInWorld(var1);
-		} catch (Exception var3) {
-			var3.printStackTrace();
+			this.spawnEntityInWorld(entityPlayer);
+		} catch (Exception exception3) {
+			exception3.printStackTrace();
 		}
 
 	}
 
-	public void saveWorld(boolean var1, IProgressUpdate var2) {
+	public void saveWorld(boolean flag, IProgressUpdate progressUpdate) {
 		if(this.chunkProvider.canSave()) {
-			if(var2 != null) {
-				var2.displayProgressMessage("Saving level");
+			if(progressUpdate != null) {
+				progressUpdate.displayProgressMessage("Saving level");
 			}
 
 			this.saveLevel();
-			if(var2 != null) {
-				var2.displayLoadingString("Saving chunks");
+			if(progressUpdate != null) {
+				progressUpdate.displayLoadingString("Saving chunks");
 			}
 
-			this.chunkProvider.saveChunks(var1, var2);
+			this.chunkProvider.saveChunks(flag, progressUpdate);
 		}
+
 	}
 
 	private void saveLevel() {
 		this.checkSessionLock();
-		NBTTagCompound var1 = new NBTTagCompound();
-		var1.setLong("RandomSeed", this.randomSeed);
-		var1.setInteger("SpawnX", this.spawnX);
-		var1.setInteger("SpawnY", this.spawnY);
-		var1.setInteger("SpawnZ", this.spawnZ);
-		var1.setLong("Time", this.worldTime);
-		var1.setLong("SizeOnDisk", this.sizeOnDisk);
-		var1.setBoolean("SnowCovered", this.snowCovered);
-		var1.setLong("LastPlayed", System.currentTimeMillis());
-		EntityPlayer var2 = null;
+		NBTTagCompound nBTTagCompound1 = new NBTTagCompound();
+		nBTTagCompound1.setLong("RandomSeed", this.randomSeed);
+		nBTTagCompound1.setInteger("SpawnX", this.spawnX);
+		nBTTagCompound1.setInteger("SpawnY", this.spawnY);
+		nBTTagCompound1.setInteger("SpawnZ", this.spawnZ);
+		nBTTagCompound1.setLong("Time", this.worldTime);
+		nBTTagCompound1.setLong("SizeOnDisk", this.sizeOnDisk);
+		nBTTagCompound1.setBoolean("SnowCovered", this.snowCovered);
+		nBTTagCompound1.setBoolean("SandCovered", this.sandCovered);
+		nBTTagCompound1.setLong("LastPlayed", System.currentTimeMillis());
+		nBTTagCompound1.setLong("Milestone", this.GetMilestone());
+		nBTTagCompound1.setBoolean("ExclusivelyFrail", this.exclFrailMode);
+		EntityPlayer entityPlayer2 = null;
 		if(this.playerEntities.size() > 0) {
-			var2 = (EntityPlayer)this.playerEntities.get(0);
-		}
-
-		NBTTagCompound var3;
-		if(var2 != null) {
-			var3 = new NBTTagCompound();
-			var2.writeToNBT(var3);
-			var1.setCompoundTag("Player", var3);
-		}
-
-		var3 = new NBTTagCompound();
-		var3.setTag("Data", var1);
+			entityPlayer2 = (EntityPlayer)this.playerEntities.get(0);
+		}
+
+		File file3 = new File(this.saveDirectory, "excl_frail");
+		if(this.exclFrailMode && !file3.exists()) {
+			try {
+				file3.createNewFile();
+			} catch (IOException iOException10) {
+				iOException10.printStackTrace();
+			}
+		} else if(!this.exclFrailMode && file3.exists()) {
+			ExtLogger.i("Deleting excl. frail file");
+			file3.delete();
+		}
+
+		NBTTagCompound nBTTagCompound4;
+		if(entityPlayer2 != null) {
+			nBTTagCompound4 = new NBTTagCompound();
+			entityPlayer2.writeToNBT(nBTTagCompound4);
+			if(this.func_7458_5r8qe5geuw4S9tsd10m7M2qgIZAlCgZo31t563di8oEr3d5K6yrFyI690mD5()) {
+				nBTTagCompound1.setCompoundTag("Player", nBTTagCompound4);
+			}
+
+			if(this.field_7498_65957fU9nGL5PA2e96ZOK3ePBveSt2ceA9Glj10PC2Jo5s0wI21ix69flng2 != null && this.field_7498_65957fU9nGL5PA2e96ZOK3ePBveSt2ceA9Glj10PC2Jo5s0wI21ix69flng2.size() > 0) {
+				NBTTagCompound nBTTagCompound5 = new NBTTagCompound();
+				nBTTagCompound1.setCompoundTag("PortalZones", nBTTagCompound5);
+				int i6 = 0;
+
+				for(Iterator iterator7 = this.field_7498_65957fU9nGL5PA2e96ZOK3ePBveSt2ceA9Glj10PC2Jo5s0wI21ix69flng2.iterator(); iterator7.hasNext(); ++i6) {
+					HandlerSetCheckpointUnknownClass handlerSetCheckpointUnknownClass8 = (HandlerSetCheckpointUnknownClass)iterator7.next();
+					nBTTagCompound5.setCompoundTag("pzone" + i6, handlerSetCheckpointUnknownClass8.func_10087_1y146m8JQy5RXz2ldm45tt2tSQj9U640VM27JQiN01nA79WhHvFRXlvxe84l());
+				}
+			}
+		}
+
+		nBTTagCompound4 = new NBTTagCompound();
+		nBTTagCompound4.setTag("Data", nBTTagCompound1);
 
 		try {
-			File var4 = new File(this.saveDirectory, "level.dat_new");
-			File var5 = new File(this.saveDirectory, "level.dat_old");
-			File var6 = new File(this.saveDirectory, "level.dat");
-			CompressedStreamTools.writeCompressed(var3, new FileOutputStream(var4));
-			if(var5.exists()) {
-				var5.delete();
-			}
-
-			var6.renameTo(var5);
-			if(var6.exists()) {
-				var6.delete();
-			}
-
-			var4.renameTo(var6);
-			if(var4.exists()) {
-				var4.delete();
-			}
-		} catch (Exception var7) {
-			var7.printStackTrace();
+			File file11 = new File(this.saveDirectory, "level.dat_new");
+			File file12 = new File(this.saveDirectory, "level.dat_old");
+			File file13 = new File(this.saveDirectory, "level.dat");
+			CompressedStreamTools.writeCompressed(nBTTagCompound4, new FileOutputStream(file11));
+			if(file12.exists()) {
+				file12.delete();
+			}
+
+			file13.renameTo(file12);
+			if(file13.exists()) {
+				file13.delete();
+			}
+
+			file11.renameTo(file13);
+			if(file11.exists()) {
+				file11.delete();
+			}
+		} catch (Exception exception9) {
+			exception9.printStackTrace();
 		}
 
 	}
 
-	public boolean saveWorld(int var1) {
+	public boolean saveWorld(int integer) {
 		if(!this.chunkProvider.canSave()) {
 			return true;
 		} else {
-			if(var1 == 0) {
+			if(integer == 0) {
 				this.saveLevel();
 			}
 
@@ -347,26 +426,26 @@
 		}
 	}
 
-	public int getBlockId(int var1, int var2, int var3) {
-		return var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000 ? (var2 < 0 ? 0 : (var2 >= 128 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15))) : 0;
-	}
-
-	public boolean blockExists(int var1, int var2, int var3) {
-		return var2 >= 0 && var2 < 128 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
-	}
-
-	public boolean checkChunksExist(int var1, int var2, int var3, int var4, int var5, int var6) {
-		if(var5 >= 0 && var2 < 128) {
-			var1 >>= 4;
-			var2 >>= 4;
-			var3 >>= 4;
-			var4 >>= 4;
-			var5 >>= 4;
-			var6 >>= 4;
-
-			for(int var7 = var1; var7 <= var4; ++var7) {
-				for(int var8 = var3; var8 <= var6; ++var8) {
-					if(!this.chunkExists(var7, var8)) {
+	public int getBlockId(int blockX, int blockY, int blockZ) {
+		return blockX >= -32000000 && blockZ >= -32000000 && blockX < 32000000 && blockZ <= 32000000 ? (blockY < 0 ? 0 : (blockY >= 128 ? 0 : this.getChunkFromChunkCoords(blockX >> 4, blockZ >> 4).getBlockID(blockX & 15, blockY, blockZ & 15))) : 0;
+	}
+
+	public boolean blockExists(int x, int y, int z) {
+		return y >= 0 && y < 128 ? this.chunkExists(x >> 4, z >> 4) : false;
+	}
+
+	public boolean checkChunksExist(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		if(maxY >= 0 && minY < 128) {
+			minX >>= 4;
+			minY >>= 4;
+			minZ >>= 4;
+			maxX >>= 4;
+			maxY >>= 4;
+			maxZ >>= 4;
+
+			for(int i7 = minX; i7 <= maxX; ++i7) {
+				for(int i8 = minZ; i8 <= maxZ; ++i8) {
+					if(!this.chunkExists(i7, i8)) {
 						return false;
 					}
 				}
@@ -378,85 +457,85 @@
 		}
 	}
 
-	private boolean chunkExists(int var1, int var2) {
-		return this.chunkProvider.chunkExists(var1, var2);
-	}
-
-	public Chunk getChunkFromBlockCoords(int var1, int var2) {
-		return this.getChunkFromChunkCoords(var1 >> 4, var2 >> 4);
-	}
-
-	public Chunk getChunkFromChunkCoords(int var1, int var2) {
-		return this.chunkProvider.provideChunk(var1, var2);
-	}
-
-	public boolean setBlockAndMetadata(int var1, int var2, int var3, int var4, int var5) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
-				return false;
-			} else if(var2 >= 128) {
-				return false;
-			} else {
-				Chunk var6 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				return var6.setBlockIDWithMetadata(var1 & 15, var2, var3 & 15, var4, var5);
-			}
-		} else {
-			return false;
-		}
-	}
-
-	public boolean setBlock(int var1, int var2, int var3, int var4) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
-				return false;
-			} else if(var2 >= 128) {
-				return false;
-			} else {
-				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				return var5.setBlockID(var1 & 15, var2, var3 & 15, var4);
-			}
-		} else {
-			return false;
-		}
-	}
-
-	public Material getBlockMaterial(int var1, int var2, int var3) {
-		int var4 = this.getBlockId(var1, var2, var3);
-		return var4 == 0 ? Material.air : Block.blocksList[var4].material;
-	}
-
-	public int getBlockMetadata(int var1, int var2, int var3) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
-				return 0;
-			} else if(var2 >= 128) {
-				return 0;
-			} else {
-				Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				return var4.getBlockMetadata(var1, var2, var3);
+	public boolean chunkExists(int x, int z) {
+		return this.chunkProvider.chunkExists(x, z);
+	}
+
+	public Chunk getChunkFromBlockCoords(int x, int z) {
+		return this.getChunkFromChunkCoords(x >> 4, z >> 4);
+	}
+
+	public Chunk getChunkFromChunkCoords(int x, int z) {
+		return this.chunkProvider.provideChunk(x, z);
+	}
+
+	public boolean setBlockAndMetadata(int x, int y, int z, int id, int metadata) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y < 0) {
+				return false;
+			} else if(y >= 128) {
+				return false;
+			} else {
+				Chunk chunk6 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				return chunk6.setBlockIDWithMetadata(x & 15, y, z & 15, id, metadata);
+			}
+		} else {
+			return false;
+		}
+	}
+
+	public boolean setBlock(int x, int y, int z, int id) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y < 0) {
+				return false;
+			} else if(y >= 128) {
+				return false;
+			} else {
+				Chunk chunk5 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				return chunk5.setBlockID(x & 15, y, z & 15, id);
+			}
+		} else {
+			return false;
+		}
+	}
+
+	public Material getBlockMaterial(int x, int y, int z) {
+		int i4 = this.getBlockId(x, y, z);
+		return i4 == 0 ? Material.air : Block.blocksList[i4].material;
+	}
+
+	public int getBlockMetadata(int x, int y, int z) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y < 0) {
+				return 0;
+			} else if(y >= 128) {
+				return 0;
+			} else {
+				Chunk chunk4 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				x &= 15;
+				z &= 15;
+				return chunk4.getBlockMetadata(x, y, z);
 			}
 		} else {
 			return 0;
 		}
 	}
 
-	public void setBlockMetadataWithNotify(int var1, int var2, int var3, int var4) {
-		this.setBlockMetadata(var1, var2, var3, var4);
+	public void setBlockMetadataWithNotify(int x, int y, int z, int metadata) {
+		this.setBlockMetadata(x, y, z, metadata);
 	}
 
-	public boolean setBlockMetadata(int var1, int var2, int var3, int var4) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
+	public boolean setBlockMetadata(int x, int y, int z, int metadata) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(y >= 128) {
 				return false;
 			} else {
-				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				var5.setBlockMetadata(var1, var2, var3, var4);
+				Chunk chunk5 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				x &= 15;
+				z &= 15;
+				chunk5.setBlockMetadata(x, y, z, metadata);
 				return true;
 			}
 		} else {
@@ -464,353 +543,370 @@
 		}
 	}
 
-	public boolean setBlockWithNotify(int var1, int var2, int var3, int var4) {
-		if(this.setBlock(var1, var2, var3, var4)) {
-			this.notifyBlockChange(var1, var2, var3, var4);
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public boolean setBlockAndMetadataWithNotify(int var1, int var2, int var3, int var4, int var5) {
-		if(this.setBlockAndMetadata(var1, var2, var3, var4, var5)) {
-			this.notifyBlockChange(var1, var2, var3, var4);
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public void markBlockNeedsUpdate(int var1, int var2, int var3) {
-		for(int var4 = 0; var4 < this.worldAccesses.size(); ++var4) {
-			((IWorldAccess)this.worldAccesses.get(var4)).markBlockAndNeighborsNeedsUpdate(var1, var2, var3);
-		}
-
-	}
-
-	protected void notifyBlockChange(int var1, int var2, int var3, int var4) {
-		this.markBlockNeedsUpdate(var1, var2, var3);
-		this.notifyBlocksOfNeighborChange(var1, var2, var3, var4);
-	}
-
-	public void markBlocksDirtyVertical(int var1, int var2, int var3, int var4) {
-		if(var3 > var4) {
-			int var5 = var4;
-			var4 = var3;
-			var3 = var5;
-		}
-
-		this.markBlocksDirty(var1, var3, var2, var1, var4, var2);
-	}
-
-	public void markBlocksDirty(int var1, int var2, int var3, int var4, int var5, int var6) {
-		for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
-			((IWorldAccess)this.worldAccesses.get(var7)).markBlockRangeNeedsUpdate(var1, var2, var3, var4, var5, var6);
-		}
-
-	}
-
-	public void notifyBlocksOfNeighborChange(int var1, int var2, int var3, int var4) {
-		this.notifyBlockOfNeighborChange(var1 - 1, var2, var3, var4);
-		this.notifyBlockOfNeighborChange(var1 + 1, var2, var3, var4);
-		this.notifyBlockOfNeighborChange(var1, var2 - 1, var3, var4);
-		this.notifyBlockOfNeighborChange(var1, var2 + 1, var3, var4);
-		this.notifyBlockOfNeighborChange(var1, var2, var3 - 1, var4);
-		this.notifyBlockOfNeighborChange(var1, var2, var3 + 1, var4);
-	}
-
-	private void notifyBlockOfNeighborChange(int var1, int var2, int var3, int var4) {
+	public boolean setBlockWithNotify(int x, int y, int z, int id) {
+		if(this.setBlock(x, y, z, id)) {
+			this.notifyBlockChange(x, y, z, id);
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public boolean setBlockAndMetadataWithNotify(int x, int y, int z, int id, int metadata) {
+		if(this.setBlockAndMetadata(x, y, z, id, metadata)) {
+			this.notifyBlockChange(x, y, z, id);
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public void markBlockNeedsUpdate(int x, int y, int z) {
+		if(y >= 0) {
+			for(int i4 = 0; i4 < this.worldAccesses.size(); ++i4) {
+				((IWorldAccess)this.worldAccesses.get(i4)).markBlockAndNeighborsNeedsUpdate(x, y, z);
+			}
+
+		}
+	}
+
+	protected void notifyBlockChange(int x, int y, int z, int id) {
+		this.markBlockNeedsUpdate(x, y, z);
+		this.notifyBlocksOfNeighborChange(x, y, z, id);
+	}
+
+	public void markBlocksDirtyVertical(int x, int y, int z, int maxY) {
+		if(z > maxY) {
+			int i5 = maxY;
+			maxY = z;
+			z = i5;
+		}
+
+		this.markBlocksDirty(x, z, y, x, maxY, y);
+	}
+
+	public void markBlocksDirty(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		for(int i7 = 0; i7 < this.worldAccesses.size(); ++i7) {
+			((IWorldAccess)this.worldAccesses.get(i7)).markBlockRangeNeedsUpdate(minX, minY, minZ, maxX, maxY, maxZ);
+		}
+
+	}
+
+	public void notifyBlocksOfNeighborChange(int x, int y, int z, int id) {
+		this.notifyBlockOfNeighborChange(x - 1, y, z, id);
+		this.notifyBlockOfNeighborChange(x + 1, y, z, id);
+		this.notifyBlockOfNeighborChange(x, y - 1, z, id);
+		this.notifyBlockOfNeighborChange(x, y + 1, z, id);
+		this.notifyBlockOfNeighborChange(x, y, z - 1, id);
+		this.notifyBlockOfNeighborChange(x, y, z + 1, id);
+	}
+
+	private void notifyBlockOfNeighborChange(int x, int y, int z, int id) {
 		if(!this.editingBlocks && !this.multiplayerWorld) {
-			Block var5 = Block.blocksList[this.getBlockId(var1, var2, var3)];
-			if(var5 != null) {
-				var5.onNeighborBlockChange(this, var1, var2, var3, var4);
+			Block block5 = Block.blocksList[this.getBlockId(x, y, z)];
+			if(block5 != null) {
+				block5.onNeighborBlockChange(this, x, y, z, id);
 			}
-
-		}
-	}
-
-	public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
-		return this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).canBlockSeeTheSky(var1 & 15, var2, var3 & 15);
-	}
-
-	public int getBlockLightValue(int var1, int var2, int var3) {
-		return this.getBlockLightValue_do(var1, var2, var3, true);
-	}
-
-	public int getBlockLightValue_do(int var1, int var2, int var3, boolean var4) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			int var5;
-			if(var4) {
-				var5 = this.getBlockId(var1, var2, var3);
-				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID) {
-					int var6 = this.getBlockLightValue_do(var1, var2 + 1, var3, false);
-					int var7 = this.getBlockLightValue_do(var1 + 1, var2, var3, false);
-					int var8 = this.getBlockLightValue_do(var1 - 1, var2, var3, false);
-					int var9 = this.getBlockLightValue_do(var1, var2, var3 + 1, false);
-					int var10 = this.getBlockLightValue_do(var1, var2, var3 - 1, false);
-					if(var7 > var6) {
-						var6 = var7;
-					}
-
-					if(var8 > var6) {
-						var6 = var8;
-					}
-
-					if(var9 > var6) {
-						var6 = var9;
-					}
-
-					if(var10 > var6) {
-						var6 = var10;
-					}
-
-					return var6;
+		}
+
+	}
+
+	public boolean canBlockSeeTheSky(int x, int y, int z) {
+		return this.getChunkFromChunkCoords(x >> 4, z >> 4).canBlockSeeTheSky(x & 15, y, z & 15);
+	}
+
+	public int getBlockLightValue(int x, int y, int z) {
+		return this.getBlockLightValue_do(x, y, z, true);
+	}
+
+	public int getBlockLightValue(int integer1, int integer2, int integer3, boolean boolean4) {
+		return this.getBlockLightValue_do(integer1, integer2, integer3, true, boolean4);
+	}
+
+	public int getBlockLightValue_do(int x, int y, int z, boolean update) {
+		return this.getBlockLightValue_do(x, y, z, update, false);
+	}
+
+	public int getBlockLightValue_do(int integer1, int integer2, int integer3, boolean boolean4, boolean boolean5) {
+		int i6 = this.skylightSubtracted;
+		if(boolean5 && InputHandler.mc.options.renderDistance == 5) {
+			i6 = Math.max(12, i6);
+		}
+
+		if(integer1 >= -32000000 && integer3 >= -32000000 && integer1 < 32000000 && integer3 <= 32000000) {
+			int i7;
+			if(boolean4) {
+				i7 = this.getBlockId(integer1, integer2, integer3);
+				if(i7 == Block.stairSingle.blockID || i7 == Block.tilledField.blockID) {
+					int i13 = this.getBlockLightValue_do(integer1, integer2 + 1, integer3, false);
+					int i9 = this.getBlockLightValue_do(integer1 + 1, integer2, integer3, false);
+					int i10 = this.getBlockLightValue_do(integer1 - 1, integer2, integer3, false);
+					int i11 = this.getBlockLightValue_do(integer1, integer2, integer3 + 1, false);
+					int i12 = this.getBlockLightValue_do(integer1, integer2, integer3 - 1, false);
+					if(i9 > i13) {
+						i13 = i9;
+					}
+
+					if(i10 > i13) {
+						i13 = i10;
+					}
+
+					if(i11 > i13) {
+						i13 = i11;
+					}
+
+					if(i12 > i13) {
+						i13 = i12;
+					}
+
+					return i13;
 				}
 			}
 
-			if(var2 < 0) {
+			if(integer2 < 0) {
 				return 0;
-			} else if(var2 >= 128) {
-				var5 = 15 - this.skylightSubtracted;
-				if(var5 < 0) {
-					var5 = 0;
+			} else if(integer2 >= 128) {
+				i7 = 15 - i6;
+				if(i7 < 0) {
+					i7 = 0;
 				}
 
-				return var5;
+				return i7;
 			} else {
-				Chunk var11 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				return var11.getBlockLightValue(var1, var2, var3, this.skylightSubtracted);
+				Chunk chunk8 = this.getChunkFromChunkCoords(integer1 >> 4, integer3 >> 4);
+				integer1 &= 15;
+				integer3 &= 15;
+				return chunk8.getBlockLightValue(integer1, integer2, integer3, i6);
 			}
 		} else {
 			return 15;
 		}
 	}
 
-	public boolean canExistingBlockSeeTheSky(int var1, int var2, int var3) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
+	public boolean canExistingBlockSeeTheSky(int x, int y, int z) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(y >= 128) {
 				return true;
-			} else if(!this.chunkExists(var1 >> 4, var3 >> 4)) {
+			} else if(!this.chunkExists(x >> 4, z >> 4)) {
 				return false;
 			} else {
-				Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				return var4.canBlockSeeTheSky(var1, var2, var3);
+				Chunk chunk4 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				x &= 15;
+				z &= 15;
+				return chunk4.canBlockSeeTheSky(x, y, z);
 			}
 		} else {
 			return false;
 		}
 	}
 
-	public int getHeightValue(int var1, int var2) {
-		if(var1 >= -32000000 && var2 >= -32000000 && var1 < 32000000 && var2 <= 32000000) {
-			if(!this.chunkExists(var1 >> 4, var2 >> 4)) {
+	public int getHeightValue(int blockX, int blockZ) {
+		if(blockX >= -32000000 && blockZ >= -32000000 && blockX < 32000000 && blockZ <= 32000000) {
+			if(!this.chunkExists(blockX >> 4, blockZ >> 4)) {
 				return 0;
 			} else {
-				Chunk var3 = this.getChunkFromChunkCoords(var1 >> 4, var2 >> 4);
-				return var3.getHeightValue(var1 & 15, var2 & 15);
+				Chunk chunk3 = this.getChunkFromChunkCoords(blockX >> 4, blockZ >> 4);
+				return chunk3.getHeightValue(blockX & 15, blockZ & 15);
 			}
 		} else {
 			return 0;
 		}
 	}
 
-	public void neighborLightPropagationChanged(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-		if(this.blockExists(var2, var3, var4)) {
-			if(var1 == EnumSkyBlock.Sky) {
-				if(this.canExistingBlockSeeTheSky(var2, var3, var4)) {
-					var5 = 15;
-				}
-			} else if(var1 == EnumSkyBlock.Block) {
-				int var6 = this.getBlockId(var2, var3, var4);
-				if(Block.lightValue[var6] > var5) {
-					var5 = Block.lightValue[var6];
-				}
-			}
-
-			if(this.getSavedLightValue(var1, var2, var3, var4) != var5) {
-				this.scheduleLightingUpdate(var1, var2, var3, var4, var2, var3, var4);
-			}
-
+	public void neighborLightPropagationChanged(EnumSkyBlock skyBlock, int x, int y, int z, int lightValue) {
+		if(this.blockExists(x, y, z)) {
+			if(skyBlock == EnumSkyBlock.Sky) {
+				if(this.canExistingBlockSeeTheSky(x, y, z)) {
+					lightValue = 15;
+				}
+			} else if(skyBlock == EnumSkyBlock.Block) {
+				int i6 = this.getBlockId(x, y, z);
+				if(Block.lightValue[i6] > lightValue) {
+					lightValue = Block.lightValue[i6];
+				}
+			}
+
+			if(this.getSavedLightValue(skyBlock, x, y, z) != lightValue) {
+				this.scheduleLightingUpdate(skyBlock, x, y, z, x, y, z);
+			}
 		}
+
 	}
 
-	public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
-		if(var3 >= 0 && var3 < 128 && var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000) {
-			int var5 = var2 >> 4;
-			int var6 = var4 >> 4;
-			if(!this.chunkExists(var5, var6)) {
+	public int getSavedLightValue(EnumSkyBlock skyBlock, int blockX, int blockY, int blockZ) {
+		if(blockY >= 0 && blockY < 128 && blockX >= -32000000 && blockZ >= -32000000 && blockX < 32000000 && blockZ <= 32000000) {
+			int i5 = blockX >> 4;
+			int i6 = blockZ >> 4;
+			if(!this.chunkExists(i5, i6)) {
 				return 0;
 			} else {
-				Chunk var7 = this.getChunkFromChunkCoords(var5, var6);
-				return var7.getSavedLightValue(var1, var2 & 15, var3, var4 & 15);
+				Chunk chunk7 = this.getChunkFromChunkCoords(i5, i6);
+
+				try {
+					return chunk7.getSavedLightValue(skyBlock, blockX & 15, blockY, blockZ & 15);
+				} catch (StackOverflowError stackOverflowError9) {
+					return 0;
+				}
 			}
 		} else {
-			return var1.defaultLightValue;
+			return skyBlock.defaultLightValue;
 		}
 	}
 
-	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-		if(var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000) {
-			if(var3 >= 0) {
-				if(var3 < 128) {
-					if(this.chunkExists(var2 >> 4, var4 >> 4)) {
-						Chunk var6 = this.getChunkFromChunkCoords(var2 >> 4, var4 >> 4);
-						var6.setLightValue(var1, var2 & 15, var3, var4 & 15, var5);
-
-						for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
-							((IWorldAccess)this.worldAccesses.get(var7)).markBlockAndNeighborsNeedsUpdate(var2, var3, var4);
-						}
-
-					}
-				}
+	public void setLightValue(EnumSkyBlock skyBlock, int blockX, int blockY, int blockZ, int lightValue) {
+		if(blockX >= -32000000 && blockZ >= -32000000 && blockX < 32000000 && blockZ <= 32000000 && blockY >= 0 && blockY < 128 && this.chunkExists(blockX >> 4, blockZ >> 4)) {
+			Chunk chunk6 = this.getChunkFromChunkCoords(blockX >> 4, blockZ >> 4);
+			chunk6.setLightValue(skyBlock, blockX & 15, blockY, blockZ & 15, lightValue);
+
+			for(int i7 = 0; i7 < this.worldAccesses.size(); ++i7) {
+				((IWorldAccess)this.worldAccesses.get(i7)).markBlockAndNeighborsNeedsUpdate(blockX, blockY, blockZ);
 			}
 		}
-	}
-
-	public float getBrightness(int var1, int var2, int var3) {
-		return lightBrightnessTable[this.getBlockLightValue(var1, var2, var3)];
+
+	}
+
+	public float getRenderSideBrightness(int integer1, int integer2, int integer3) {
+		return lightBrightnessTable[this.getBlockLightValue(integer1, integer2, integer3, true)];
+	}
+
+	public float getBrightness(int x, int y, int z) {
+		return lightBrightnessTable[this.getBlockLightValue(x, y, z)];
 	}
 
 	public boolean isDaytime() {
 		return this.skylightSubtracted < 4;
 	}
 
-	public MovingObjectPosition rayTraceBlocks(Vec3D var1, Vec3D var2) {
-		return this.rayTraceBlocks_do(var1, var2, false);
+	public MovingObjectPosition rayTraceBlocks(Vec3D vector1, Vec3D vector2) {
+		return this.rayTraceBlocks_do(vector1, vector2, false);
 	}
 
-	public MovingObjectPosition rayTraceBlocks_do(Vec3D var1, Vec3D var2, boolean var3) {
-		if(!Double.isNaN(var1.xCoord) && !Double.isNaN(var1.yCoord) && !Double.isNaN(var1.zCoord)) {
-			if(!Double.isNaN(var2.xCoord) && !Double.isNaN(var2.yCoord) && !Double.isNaN(var2.zCoord)) {
-				int var4 = MathHelper.floor_double(var2.xCoord);
-				int var5 = MathHelper.floor_double(var2.yCoord);
-				int var6 = MathHelper.floor_double(var2.zCoord);
-				int var7 = MathHelper.floor_double(var1.xCoord);
-				int var8 = MathHelper.floor_double(var1.yCoord);
-				int var9 = MathHelper.floor_double(var1.zCoord);
-				int var10 = 20;
-
-				while(var10-- >= 0) {
-					if(Double.isNaN(var1.xCoord) || Double.isNaN(var1.yCoord) || Double.isNaN(var1.zCoord)) {
-						return null;
-					}
-
-					if(var7 == var4 && var8 == var5 && var9 == var6) {
-						return null;
-					}
-
-					double var11 = 999.0D;
-					double var13 = 999.0D;
-					double var15 = 999.0D;
-					if(var4 > var7) {
-						var11 = (double)var7 + 1.0D;
-					}
-
-					if(var4 < var7) {
-						var11 = (double)var7 + 0.0D;
-					}
-
-					if(var5 > var8) {
-						var13 = (double)var8 + 1.0D;
-					}
-
-					if(var5 < var8) {
-						var13 = (double)var8 + 0.0D;
-					}
-
-					if(var6 > var9) {
-						var15 = (double)var9 + 1.0D;
-					}
-
-					if(var6 < var9) {
-						var15 = (double)var9 + 0.0D;
-					}
-
-					double var17 = 999.0D;
-					double var19 = 999.0D;
-					double var21 = 999.0D;
-					double var23 = var2.xCoord - var1.xCoord;
-					double var25 = var2.yCoord - var1.yCoord;
-					double var27 = var2.zCoord - var1.zCoord;
-					if(var11 != 999.0D) {
-						var17 = (var11 - var1.xCoord) / var23;
-					}
-
-					if(var13 != 999.0D) {
-						var19 = (var13 - var1.yCoord) / var25;
-					}
-
-					if(var15 != 999.0D) {
-						var21 = (var15 - var1.zCoord) / var27;
-					}
-
-					boolean var29 = false;
-					byte var35;
-					if(var17 < var19 && var17 < var21) {
-						if(var4 > var7) {
-							var35 = 4;
-						} else {
-							var35 = 5;
-						}
-
-						var1.xCoord = var11;
-						var1.yCoord += var25 * var17;
-						var1.zCoord += var27 * var17;
-					} else if(var19 < var21) {
-						if(var5 > var8) {
-							var35 = 0;
-						} else {
-							var35 = 1;
-						}
-
-						var1.xCoord += var23 * var19;
-						var1.yCoord = var13;
-						var1.zCoord += var27 * var19;
+	public MovingObjectPosition rayTraceBlocks_do(Vec3D vector1, Vec3D vector2, boolean boolean3) {
+		if(!Double.isNaN(vector1.xCoord) && !Double.isNaN(vector1.yCoord) && !Double.isNaN(vector1.zCoord)) {
+			if(!Double.isNaN(vector2.xCoord) && !Double.isNaN(vector2.yCoord) && !Double.isNaN(vector2.zCoord)) {
+				int i4 = MathHelper.floor_double(vector2.xCoord);
+				int i5 = MathHelper.floor_double(vector2.yCoord);
+				int i6 = MathHelper.floor_double(vector2.zCoord);
+				int i7 = MathHelper.floor_double(vector1.xCoord);
+				int i8 = MathHelper.floor_double(vector1.yCoord);
+				int i9 = MathHelper.floor_double(vector1.zCoord);
+				int i10 = 20;
+
+				while(i10-- >= 0) {
+					if(Double.isNaN(vector1.xCoord) || Double.isNaN(vector1.yCoord) || Double.isNaN(vector1.zCoord)) {
+						return null;
+					}
+
+					if(i7 == i4 && i8 == i5 && i9 == i6) {
+						return null;
+					}
+
+					double d11 = 999.0D;
+					double d13 = 999.0D;
+					double d15 = 999.0D;
+					if(i4 > i7) {
+						d11 = (double)i7 + 1.0D;
+					}
+
+					if(i4 < i7) {
+						d11 = (double)i7 + 0.0D;
+					}
+
+					if(i5 > i8) {
+						d13 = (double)i8 + 1.0D;
+					}
+
+					if(i5 < i8) {
+						d13 = (double)i8 + 0.0D;
+					}
+
+					if(i6 > i9) {
+						d15 = (double)i9 + 1.0D;
+					}
+
+					if(i6 < i9) {
+						d15 = (double)i9 + 0.0D;
+					}
+
+					double d17 = 999.0D;
+					double d19 = 999.0D;
+					double d21 = 999.0D;
+					double d23 = vector2.xCoord - vector1.xCoord;
+					double d25 = vector2.yCoord - vector1.yCoord;
+					double d27 = vector2.zCoord - vector1.zCoord;
+					if(d11 != 999.0D) {
+						d17 = (d11 - vector1.xCoord) / d23;
+					}
+
+					if(d13 != 999.0D) {
+						d19 = (d13 - vector1.yCoord) / d25;
+					}
+
+					if(d15 != 999.0D) {
+						d21 = (d15 - vector1.zCoord) / d27;
+					}
+
+					byte b29;
+					if(d17 < d19 && d17 < d21) {
+						if(i4 > i7) {
+							b29 = 4;
+						} else {
+							b29 = 5;
+						}
+
+						vector1.xCoord = d11;
+						vector1.yCoord += d25 * d17;
+						vector1.zCoord += d27 * d17;
+					} else if(d19 < d21) {
+						if(i5 > i8) {
+							b29 = 0;
+						} else {
+							b29 = 1;
+						}
+
+						vector1.xCoord += d23 * d19;
+						vector1.yCoord = d13;
+						vector1.zCoord += d27 * d19;
 					} else {
-						if(var6 > var9) {
-							var35 = 2;
+						if(i6 > i9) {
+							b29 = 2;
 						} else {
-							var35 = 3;
+							b29 = 3;
 						}
 
-						var1.xCoord += var23 * var21;
-						var1.yCoord += var25 * var21;
-						var1.zCoord = var15;
-					}
-
-					Vec3D var30 = Vec3D.createVector(var1.xCoord, var1.yCoord, var1.zCoord);
-					var7 = (int)(var30.xCoord = (double)MathHelper.floor_double(var1.xCoord));
-					if(var35 == 5) {
-						--var7;
-						++var30.xCoord;
-					}
-
-					var8 = (int)(var30.yCoord = (double)MathHelper.floor_double(var1.yCoord));
-					if(var35 == 1) {
-						--var8;
-						++var30.yCoord;
-					}
-
-					var9 = (int)(var30.zCoord = (double)MathHelper.floor_double(var1.zCoord));
-					if(var35 == 3) {
-						--var9;
-						++var30.zCoord;
-					}
-
-					int var31 = this.getBlockId(var7, var8, var9);
-					int var32 = this.getBlockMetadata(var7, var8, var9);
-					Block var33 = Block.blocksList[var31];
-					if(var31 > 0 && var33.canCollideCheck(var32, var3)) {
-						MovingObjectPosition var34 = var33.collisionRayTrace(this, var7, var8, var9, var1, var2);
-						if(var34 != null) {
-							return var34;
+						vector1.xCoord += d23 * d21;
+						vector1.yCoord += d25 * d21;
+						vector1.zCoord = d15;
+					}
+
+					Vec3D vec3D30 = Vec3D.createVector(vector1.xCoord, vector1.yCoord, vector1.zCoord);
+					i7 = (int)(vec3D30.xCoord = (double)MathHelper.floor_double(vector1.xCoord));
+					if(b29 == 5) {
+						--i7;
+						++vec3D30.xCoord;
+					}
+
+					i8 = (int)(vec3D30.yCoord = (double)MathHelper.floor_double(vector1.yCoord));
+					if(b29 == 1) {
+						--i8;
+						++vec3D30.yCoord;
+					}
+
+					i9 = (int)(vec3D30.zCoord = (double)MathHelper.floor_double(vector1.zCoord));
+					if(b29 == 3) {
+						--i9;
+						++vec3D30.zCoord;
+					}
+
+					int i31 = this.getBlockId(i7, i8, i9);
+					int i32 = this.getBlockMetadata(i7, i8, i9);
+					Block block33 = Block.blocksList[i31];
+					if(i31 > 0 && block33.canCollideCheck(i32, boolean3)) {
+						MovingObjectPosition movingObjectPosition34 = block33.collisionRayTrace(this, i7, i8, i9, vector1, vector2);
+						if(movingObjectPosition34 != null) {
+							return movingObjectPosition34;
 						}
 					}
 				}
@@ -824,264 +920,269 @@
 		}
 	}
 
-	public void playSoundAtEntity(Entity var1, String var2, float var3, float var4) {
-		for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-			((IWorldAccess)this.worldAccesses.get(var5)).playSound(var2, var1.posX, var1.posY - (double)var1.yOffset, var1.posZ, var3, var4);
-		}
-
-	}
-
-	public void playSoundEffect(double var1, double var3, double var5, String var7, float var8, float var9) {
-		for(int var10 = 0; var10 < this.worldAccesses.size(); ++var10) {
-			((IWorldAccess)this.worldAccesses.get(var10)).playSound(var7, var1, var3, var5, var8, var9);
-		}
-
-	}
-
-	public void playRecord(String var1, int var2, int var3, int var4) {
-		for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-			((IWorldAccess)this.worldAccesses.get(var5)).playRecord(var1, var2, var3, var4);
-		}
-
-	}
-
-	public void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-		for(int var14 = 0; var14 < this.worldAccesses.size(); ++var14) {
-			((IWorldAccess)this.worldAccesses.get(var14)).spawnParticle(var1, var2, var4, var6, var8, var10, var12);
-		}
-
-	}
-
-	public boolean spawnEntityInWorld(Entity var1) {
-		int var2 = MathHelper.floor_double(var1.posX / 16.0D);
-		int var3 = MathHelper.floor_double(var1.posZ / 16.0D);
-		boolean var4 = false;
-		if(var1 instanceof EntityPlayer) {
-			var4 = true;
-		}
-
-		if(!var4 && !this.chunkExists(var2, var3)) {
+	public void playSoundAtEntity(Entity entity, String soundName, float volume, float pitch) {
+		for(int i5 = 0; i5 < this.worldAccesses.size(); ++i5) {
+			((IWorldAccess)this.worldAccesses.get(i5)).playSound(soundName, entity.posX, entity.posY - (double)entity.yOffset, entity.posZ, volume, pitch);
+		}
+
+	}
+
+	public void playSoundEffect(double x, double y, double z, String soundName, float volume, float pitch) {
+		for(int i10 = 0; i10 < this.worldAccesses.size(); ++i10) {
+			((IWorldAccess)this.worldAccesses.get(i10)).playSound(soundName, x, y, z, volume, pitch);
+		}
+
+	}
+
+	public void playRecord(String recordName, int x, int y, int z) {
+		for(int i5 = 0; i5 < this.worldAccesses.size(); ++i5) {
+			((IWorldAccess)this.worldAccesses.get(i5)).playRecord(recordName, x, y, z);
+		}
+
+	}
+
+	public void spawnParticle(String particleName, double x, double y, double z, double motionX, double motionY, double motionZ) {
+		for(int i14 = 0; i14 < this.worldAccesses.size(); ++i14) {
+			((IWorldAccess)this.worldAccesses.get(i14)).spawnParticle(particleName, x, y, z, motionX, motionY, motionZ);
+		}
+
+	}
+
+	public boolean spawnEntityInWorld(Entity entity) {
+		int i2 = MathHelper.floor_double(entity.posX / 16.0D);
+		int i3 = MathHelper.floor_double(entity.posZ / 16.0D);
+		boolean z4 = false;
+		if(entity instanceof EntityPlayer && !(entity instanceof EntityShadowPlayer)) {
+			z4 = true;
+		}
+
+		if(!z4 && !this.chunkExists(i2, i3)) {
 			return false;
 		} else {
-			if(var1 instanceof EntityPlayer) {
-				this.playerEntities.add((EntityPlayer)var1);
+			if(entity instanceof EntityPlayer && !(entity instanceof EntityShadowPlayer)) {
+				this.playerEntities.add((EntityPlayer)entity);
 				System.out.println("Player count: " + this.playerEntities.size());
 			}
 
-			this.getChunkFromChunkCoords(var2, var3).addEntity(var1);
-			this.loadedEntityList.add(var1);
-			this.obtainEntitySkin(var1);
+			this.getChunkFromChunkCoords(i2, i3).addEntity(entity);
+			this.loadedEntityList.add(entity);
+			this.obtainEntitySkin(entity);
 			return true;
 		}
 	}
 
-	protected void obtainEntitySkin(Entity var1) {
-		for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-			((IWorldAccess)this.worldAccesses.get(var2)).obtainEntitySkin(var1);
-		}
-
-	}
-
-	protected void releaseEntitySkin(Entity var1) {
-		for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-			((IWorldAccess)this.worldAccesses.get(var2)).releaseEntitySkin(var1);
-		}
-
-	}
-
-	public void setEntityDead(Entity var1) {
-		var1.setEntityDead();
-		if(var1 instanceof EntityPlayer) {
-			this.playerEntities.remove((EntityPlayer)var1);
+	protected void obtainEntitySkin(Entity entity) {
+		for(int i2 = 0; i2 < this.worldAccesses.size(); ++i2) {
+			((IWorldAccess)this.worldAccesses.get(i2)).obtainEntitySkin(entity);
+		}
+
+	}
+
+	protected void releaseEntitySkin(Entity entity) {
+		for(int i2 = 0; i2 < this.worldAccesses.size(); ++i2) {
+			((IWorldAccess)this.worldAccesses.get(i2)).releaseEntitySkin(entity);
+		}
+
+	}
+
+	public void setEntityDead(Entity entity) {
+		entity.setEntityDead();
+		if(entity instanceof EntityPlayer) {
+			this.playerEntities.remove((EntityPlayer)entity);
 			System.out.println("Player count: " + this.playerEntities.size());
 		}
 
 	}
 
-	public void addWorldAccess(IWorldAccess var1) {
-		this.worldAccesses.add(var1);
-	}
-
-	public void removeWorldAccess(IWorldAccess var1) {
-		this.worldAccesses.remove(var1);
-	}
-
-	public List getCollidingBoundingBoxes(Entity var1, AxisAlignedBB var2) {
+	public void addWorldAccess(IWorldAccess worldAccess) {
+		this.worldAccesses.add(worldAccess);
+	}
+
+	public void removeWorldAccess(IWorldAccess worldAccess) {
+		this.worldAccesses.remove(worldAccess);
+	}
+
+	public List getCollidingBoundingBoxes(Entity entity, AxisAlignedBB aabb) {
 		this.collidingBoundingBoxes.clear();
-		int var3 = MathHelper.floor_double(var2.minX);
-		int var4 = MathHelper.floor_double(var2.maxX + 1.0D);
-		int var5 = MathHelper.floor_double(var2.minY);
-		int var6 = MathHelper.floor_double(var2.maxY + 1.0D);
-		int var7 = MathHelper.floor_double(var2.minZ);
-		int var8 = MathHelper.floor_double(var2.maxZ + 1.0D);
+		int i3 = MathHelper.floor_double(aabb.minX);
+		int i4 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int i5 = MathHelper.floor_double(aabb.minY);
+		int i6 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int i7 = MathHelper.floor_double(aabb.minZ);
+		int i8 = MathHelper.floor_double(aabb.maxZ + 1.0D);
 
-		for(int var9 = var3; var9 < var4; ++var9) {
-			for(int var10 = var7; var10 < var8; ++var10) {
-				if(this.blockExists(var9, 64, var10)) {
-					for(int var11 = var5 - 1; var11 < var6; ++var11) {
-						Block var12 = Block.blocksList[this.getBlockId(var9, var11, var10)];
-						if(var12 != null) {
-							var12.getCollidingBoundingBoxes(this, var9, var11, var10, var2, this.collidingBoundingBoxes);
+		for(int i9 = i3; i9 < i4; ++i9) {
+			for(int i10 = i7; i10 < i8; ++i10) {
+				if(this.blockExists(i9, 64, i10)) {
+					for(int i11 = i5 - 1; i11 < i6; ++i11) {
+						Block block12 = Block.blocksList[this.getBlockId(i9, i11, i10)];
+						if(block12 != null) {
+							block12.getCollidingBoundingBoxes(this, i9, i11, i10, aabb, this.collidingBoundingBoxes, entity);
 						}
 					}
 				}
 			}
 		}
 
-		double var14 = 0.25D;
-		List var15 = this.getEntitiesWithinAABBExcludingEntity(var1, var2.expand(var14, var14, var14));
+		double d14 = 0.25D;
+		List list15 = this.getEntitiesWithinAABBExcludingEntity(entity, aabb.expand(d14, d14, d14));
 
-		for(int var16 = 0; var16 < var15.size(); ++var16) {
-			AxisAlignedBB var13 = ((Entity)var15.get(var16)).getBoundingBox();
-			if(var13 != null && var13.intersectsWith(var2)) {
-				this.collidingBoundingBoxes.add(var13);
+		for(int i16 = 0; i16 < list15.size(); ++i16) {
+			AxisAlignedBB axisAlignedBB13 = ((Entity)list15.get(i16)).getBoundingBox();
+			if(axisAlignedBB13 != null && axisAlignedBB13.intersectsWith(aabb)) {
+				this.collidingBoundingBoxes.add(axisAlignedBB13);
 			}
 
-			var13 = var1.getCollisionBox((Entity)var15.get(var16));
-			if(var13 != null && var13.intersectsWith(var2)) {
-				this.collidingBoundingBoxes.add(var13);
+			axisAlignedBB13 = entity.getCollisionBox((Entity)list15.get(i16));
+			if(axisAlignedBB13 != null && axisAlignedBB13.intersectsWith(aabb)) {
+				this.collidingBoundingBoxes.add(axisAlignedBB13);
 			}
 		}
 
 		return this.collidingBoundingBoxes;
 	}
 
-	public int calculateSkylightSubtracted(float var1) {
-		float var2 = this.getCelestialAngle(var1);
-		float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F);
-		if(var3 < 0.0F) {
-			var3 = 0.0F;
-		}
-
-		if(var3 > 1.0F) {
-			var3 = 1.0F;
-		}
-
-		return (int)(var3 * 11.0F);
-	}
-
-	public Vec3D getSkyColor(float var1) {
-		float var2 = this.getCelestialAngle(var1);
-		float var3 = MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
-		if(var3 < 0.0F) {
-			var3 = 0.0F;
-		}
-
-		if(var3 > 1.0F) {
-			var3 = 1.0F;
-		}
-
-		float var4 = (float)(this.skyColor >> 16 & 255L) / 255.0F;
-		float var5 = (float)(this.skyColor >> 8 & 255L) / 255.0F;
-		float var6 = (float)(this.skyColor & 255L) / 255.0F;
-		var4 *= var3;
-		var5 *= var3;
-		var6 *= var3;
-		return Vec3D.createVector((double)var4, (double)var5, (double)var6);
-	}
-
-	public float getCelestialAngle(float var1) {
-		int var2 = (int)(this.worldTime % 24000L);
-		float var3 = ((float)var2 + var1) / 24000.0F - 0.25F;
-		if(var3 < 0.0F) {
-			++var3;
-		}
-
-		if(var3 > 1.0F) {
-			--var3;
-		}
-
-		float var4 = var3;
-		var3 = 1.0F - (float)((Math.cos((double)var3 * Math.PI) + 1.0D) / 2.0D);
-		var3 = var4 + (var3 - var4) / 3.0F;
-		return var3;
-	}
-
-	public Vec3D getCloudColor(float var1) {
-		float var2 = this.getCelestialAngle(var1);
-		float var3 = MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
-		if(var3 < 0.0F) {
-			var3 = 0.0F;
-		}
-
-		if(var3 > 1.0F) {
-			var3 = 1.0F;
-		}
-
-		float var4 = (float)(this.cloudColor >> 16 & 255L) / 255.0F;
-		float var5 = (float)(this.cloudColor >> 8 & 255L) / 255.0F;
-		float var6 = (float)(this.cloudColor & 255L) / 255.0F;
-		var4 *= var3 * 0.9F + 0.1F;
-		var5 *= var3 * 0.9F + 0.1F;
-		var6 *= var3 * 0.85F + 0.15F;
-		return Vec3D.createVector((double)var4, (double)var5, (double)var6);
-	}
-
-	public Vec3D getFogColor(float var1) {
-		float var2 = this.getCelestialAngle(var1);
-		float var3 = MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
-		if(var3 < 0.0F) {
-			var3 = 0.0F;
-		}
-
-		if(var3 > 1.0F) {
-			var3 = 1.0F;
-		}
-
-		float var4 = (float)(this.fogColor >> 16 & 255L) / 255.0F;
-		float var5 = (float)(this.fogColor >> 8 & 255L) / 255.0F;
-		float var6 = (float)(this.fogColor & 255L) / 255.0F;
-		var4 *= var3 * 0.94F + 0.06F;
-		var5 *= var3 * 0.94F + 0.06F;
-		var6 *= var3 * 0.91F + 0.09F;
-		return Vec3D.createVector((double)var4, (double)var5, (double)var6);
-	}
-
-	public int getTopSolidOrLiquidBlock(int var1, int var2) {
-		Chunk var3 = this.getChunkFromBlockCoords(var1, var2);
-		int var4 = 127;
-		var1 &= 15;
-
-		for(var2 &= 15; var4 > 0; --var4) {
-			int var5 = var3.getBlockID(var1, var4, var2);
-			if(var5 != 0 && (Block.blocksList[var5].material.getIsSolid() || Block.blocksList[var5].material.getIsLiquid())) {
-				return var4 + 1;
+	public int calculateSkylightSubtracted(float renderPartialTick) {
+		float f2 = this.getCelestialAngle(renderPartialTick);
+		float f3 = 1.0F - (MathHelper.cos(f2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F);
+		if(f3 < 0.0F) {
+			f3 = 0.0F;
+		}
+
+		if(f3 > 1.0F) {
+			f3 = 1.0F;
+		}
+
+		boolean z4 = ScreenDebugMenu.dbg_conf_nebulaEvt || this.GetMilestone() % 10L == 0L && this.GetMilestone() > 0L;
+		return z4 ? 8 + (int)(f3 * 3.0F) : (int)(f3 * 11.0F);
+	}
+
+	public Vec3D getSkyColor(float renderPartialTick) {
+		float f2 = this.getCelestialAngle(renderPartialTick);
+		float f3 = MathHelper.cos(f2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
+		if(f3 < 0.0F) {
+			f3 = 0.0F;
+		}
+
+		if(f3 > 1.0F) {
+			f3 = 1.0F;
+		}
+
+		float f4 = (float)(this.skyColor >> 16 & 255L) / 255.0F;
+		float f5 = (float)(this.skyColor >> 8 & 255L) / 255.0F;
+		float f6 = (float)(this.skyColor & 255L) / 255.0F;
+		float f7 = (float)(this.field_7500_6aGUO2jbVGtoxoGHcgMRUkCmunA4cxQ7hz8a29V2I7fc5UVeqFCM92Z8HJnU >> 16 & 255L) / 255.0F;
+		float f8 = (float)(this.field_7500_6aGUO2jbVGtoxoGHcgMRUkCmunA4cxQ7hz8a29V2I7fc5UVeqFCM92Z8HJnU >> 8 & 255L) / 255.0F;
+		float f9 = (float)(this.field_7500_6aGUO2jbVGtoxoGHcgMRUkCmunA4cxQ7hz8a29V2I7fc5UVeqFCM92Z8HJnU & 255L) / 255.0F;
+		float[] f10 = Ext1605Utils.BlendColorA(f3, f4, f5, f6, f7, f8, f9);
+		return Vec3D.createVector((double)f10[0], (double)f10[1], (double)f10[2]);
+	}
+
+	public float getCelestialAngle(float renderPartialTick) {
+		int i2 = (int)(this.worldTime % 24000L);
+		float f3 = ((float)i2 + renderPartialTick) / 24000.0F - 0.25F;
+		if(f3 < 0.0F) {
+			++f3;
+		}
+
+		if(f3 > 1.0F) {
+			--f3;
+		}
+
+		float f4 = f3;
+		f3 = 1.0F - (float)((Math.cos((double)f3 * Math.PI) + 1.0D) / 2.0D);
+		f3 = f4 + (f3 - f4) / 3.0F;
+		return f3;
+	}
+
+	public Vec3D getCloudColor(float renderPartialTick) {
+		float f2 = this.getCelestialAngle(renderPartialTick);
+		float f3 = MathHelper.cos(f2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
+		if(f3 < 0.0F) {
+			f3 = 0.0F;
+		}
+
+		if(f3 > 1.0F) {
+			f3 = 1.0F;
+		}
+
+		float f4 = (float)(this.cloudColor >> 16 & 255L) / 255.0F;
+		float f5 = (float)(this.cloudColor >> 8 & 255L) / 255.0F;
+		float f6 = (float)(this.cloudColor & 255L) / 255.0F;
+		f4 *= f3 * 0.9F + 0.1F;
+		f5 *= f3 * 0.9F + 0.1F;
+		f6 *= f3 * 0.85F + 0.15F;
+		return Vec3D.createVector((double)f4, (double)f5, (double)f6);
+	}
+
+	public Vec3D getFogColor(float renderPartialTick) {
+		float f2 = this.getCelestialAngle(renderPartialTick);
+		float f3 = MathHelper.cos(f2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
+		if(f3 < 0.0F) {
+			f3 = 0.0F;
+		}
+
+		if(f3 > 1.0F) {
+			f3 = 1.0F;
+		}
+
+		float f4 = (float)(this.fogColor >> 16 & 255L) / 255.0F;
+		float f5 = (float)(this.fogColor >> 8 & 255L) / 255.0F;
+		float f6 = (float)(this.fogColor & 255L) / 255.0F;
+		f4 *= f3 * 0.94F + 0.06F;
+		f5 *= f3 * 0.94F + 0.06F;
+		f6 *= f3 * 0.91F + 0.09F;
+		return Vec3D.createVector((double)f4, (double)f5, (double)f6);
+	}
+
+	public int getTopSolidOrLiquidBlock(int x, int z) {
+		Chunk chunk3 = this.getChunkFromBlockCoords(x, z);
+		int i4 = 127;
+		x &= 15;
+
+		for(z &= 15; i4 > 0; --i4) {
+			int i5 = chunk3.getBlockID(x, i4, z);
+			if(i5 != 0 && (Block.blocksList[i5].material.getIsSolid() || Block.blocksList[i5].material.getIsLiquid())) {
+				return i4 + 1;
 			}
 		}
 
 		return -1;
 	}
 
-	public int getPrecipitationHeight(int var1, int var2) {
-		return this.getChunkFromBlockCoords(var1, var2).getHeightValue(var1 & 15, var2 & 15);
-	}
-
-	public float getStarBrightness(float var1) {
-		float var2 = this.getCelestialAngle(var1);
-		float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 12.0F / 16.0F);
-		if(var3 < 0.0F) {
-			var3 = 0.0F;
-		}
-
-		if(var3 > 1.0F) {
-			var3 = 1.0F;
-		}
-
-		return var3 * var3 * 0.5F;
-	}
-
-	public void scheduleBlockUpdate(int var1, int var2, int var3, int var4) {
-		NextTickListEntry var5 = new NextTickListEntry(var1, var2, var3, var4);
-		byte var6 = 8;
-		if(this.checkChunksExist(var1 - var6, var2 - var6, var3 - var6, var1 + var6, var2 + var6, var3 + var6)) {
-			if(var4 > 0) {
-				var5.setScheduledTime((long)Block.blocksList[var4].tickRate() + this.worldTime);
-			}
-
-			if(!this.scheduledTickSet.contains(var5)) {
-				this.scheduledTickSet.add(var5);
-				this.scheduledTickTreeSet.add(var5);
-			}
+	public int getPrecipitationHeight(int x, int z) {
+		return this.getChunkFromBlockCoords(x, z).getHeightValue(x & 15, z & 15);
+	}
+
+	public float getStarBrightness(float renderPartialTick) {
+		float f2 = this.getCelestialAngle(renderPartialTick);
+		float f3 = 1.0F - (MathHelper.cos(f2 * (float)Math.PI * 2.0F) * 2.0F + 0.75F);
+		if(f3 < 0.0F) {
+			f3 = 0.0F;
+		}
+
+		if(f3 > 1.0F) {
+			f3 = 1.0F;
+		}
+
+		return f3 * f3 * 0.5F;
+	}
+
+	public void scheduleBlockUpdate(int x, int y, int z, int id) {
+		NextTickListEntry nextTickListEntry5 = new NextTickListEntry(x, y, z, id);
+		byte b6 = 8;
+		if(this.checkChunksExist(x - b6, y - b6, z - b6, x + b6, y + b6, z + b6)) {
+			if(id > 0) {
+				nextTickListEntry5.setScheduledTime((long)Block.blocksList[id].tickRate() + this.worldTime);
+			}
+
+			this.listBeingWritten = true;
+			if(!this.scheduledTickSet.contains(nextTickListEntry5)) {
+				this.scheduledTickSet.add(nextTickListEntry5);
+				this.scheduledTickTreeSet.add(nextTickListEntry5);
+			}
+
+			this.listBeingWritten = false;
 		}
 
 	}
@@ -1089,130 +1190,130 @@
 	public void updateEntities() {
 		this.loadedEntityList.removeAll(this.unloadedEntityList);
 
-		int var1;
-		Entity var2;
-		int var3;
-		int var4;
-		for(var1 = 0; var1 < this.unloadedEntityList.size(); ++var1) {
-			var2 = (Entity)this.unloadedEntityList.get(var1);
-			var3 = var2.chunkCoordX;
-			var4 = var2.chunkCoordZ;
-			if(var2.addedToChunk && this.chunkExists(var3, var4)) {
-				this.getChunkFromChunkCoords(var3, var4).removeEntity(var2);
+		int i1;
+		Entity entity2;
+		int i3;
+		int i4;
+		for(i1 = 0; i1 < this.unloadedEntityList.size(); ++i1) {
+			entity2 = (Entity)this.unloadedEntityList.get(i1);
+			i3 = entity2.chunkCoordX;
+			i4 = entity2.chunkCoordZ;
+			if(entity2.addedToChunk && this.chunkExists(i3, i4)) {
+				this.getChunkFromChunkCoords(i3, i4).removeEntity(entity2);
 			}
 		}
 
-		for(var1 = 0; var1 < this.unloadedEntityList.size(); ++var1) {
-			this.releaseEntitySkin((Entity)this.unloadedEntityList.get(var1));
+		for(i1 = 0; i1 < this.unloadedEntityList.size(); ++i1) {
+			this.releaseEntitySkin((Entity)this.unloadedEntityList.get(i1));
 		}
 
 		this.unloadedEntityList.clear();
 
-		for(var1 = 0; var1 < this.loadedEntityList.size(); ++var1) {
-			var2 = (Entity)this.loadedEntityList.get(var1);
-			if(var2.ridingEntity != null) {
-				if(!var2.ridingEntity.isDead && var2.ridingEntity.riddenByEntity == var2) {
+		for(i1 = 0; i1 < this.loadedEntityList.size(); ++i1) {
+			entity2 = (Entity)this.loadedEntityList.get(i1);
+			if(entity2.ridingEntity != null) {
+				if(!entity2.ridingEntity.isDead && entity2.ridingEntity.riddenByEntity == entity2) {
 					continue;
 				}
 
-				var2.ridingEntity.riddenByEntity = null;
-				var2.ridingEntity = null;
-			}
-
-			if(!var2.isDead) {
-				this.updateEntity(var2);
-			}
-
-			if(var2.isDead) {
-				var3 = var2.chunkCoordX;
-				var4 = var2.chunkCoordZ;
-				if(var2.addedToChunk && this.chunkExists(var3, var4)) {
-					this.getChunkFromChunkCoords(var3, var4).removeEntity(var2);
+				entity2.ridingEntity.riddenByEntity = null;
+				entity2.ridingEntity = null;
+			}
+
+			if(!entity2.isDead) {
+				this.updateEntity(entity2);
+			}
+
+			if(entity2.isDead) {
+				i3 = entity2.chunkCoordX;
+				i4 = entity2.chunkCoordZ;
+				if(entity2.addedToChunk && this.chunkExists(i3, i4)) {
+					this.getChunkFromChunkCoords(i3, i4).removeEntity(entity2);
 				}
 
-				this.loadedEntityList.remove(var1--);
-				this.releaseEntitySkin(var2);
+				this.loadedEntityList.remove(i1--);
+				this.releaseEntitySkin(entity2);
 			}
 		}
 
-		for(var1 = 0; var1 < this.loadedTileEntityList.size(); ++var1) {
-			TileEntity var5 = (TileEntity)this.loadedTileEntityList.get(var1);
-			var5.updateEntity();
+		for(i1 = 0; i1 < this.loadedTileEntityList.size(); ++i1) {
+			TileEntity tileEntity5 = (TileEntity)this.loadedTileEntityList.get(i1);
+			tileEntity5.updateEntity();
 		}
 
 	}
 
-	protected void updateEntity(Entity var1) {
-		int var2 = MathHelper.floor_double(var1.posX);
-		int var3 = MathHelper.floor_double(var1.posZ);
-		byte var4 = 16;
-		if(this.checkChunksExist(var2 - var4, 0, var3 - var4, var2 + var4, 128, var3 + var4)) {
-			var1.lastTickPosX = var1.posX;
-			var1.lastTickPosY = var1.posY;
-			var1.lastTickPosZ = var1.posZ;
-			var1.prevRotationYaw = var1.rotationYaw;
-			var1.prevRotationPitch = var1.rotationPitch;
-			if(var1.ridingEntity != null) {
-				var1.updateRidden();
+	protected void updateEntity(Entity entity) {
+		int i2 = MathHelper.floor_double(entity.posX);
+		int i3 = MathHelper.floor_double(entity.posZ);
+		byte b4 = 16;
+		if(this.checkChunksExist(i2 - b4, 0, i3 - b4, i2 + b4, 128, i3 + b4)) {
+			entity.lastTickPosX = entity.posX;
+			entity.lastTickPosY = entity.posY;
+			entity.lastTickPosZ = entity.posZ;
+			entity.prevRotationYaw = entity.rotationYaw;
+			entity.prevRotationPitch = entity.rotationPitch;
+			if(entity.ridingEntity != null) {
+				entity.updateRidden();
 			} else {
-				var1.onUpdate();
+				entity.onUpdate();
 			}
 
-			int var5 = MathHelper.floor_double(var1.posX / 16.0D);
-			int var6 = MathHelper.floor_double(var1.posY / 16.0D);
-			int var7 = MathHelper.floor_double(var1.posZ / 16.0D);
-			if(!var1.addedToChunk || var1.chunkCoordX != var5 || var1.chunkCoordY != var6 || var1.chunkCoordZ != var7) {
-				if(var1.addedToChunk && this.chunkExists(var1.chunkCoordX, var1.chunkCoordZ)) {
-					this.getChunkFromChunkCoords(var1.chunkCoordX, var1.chunkCoordZ).removeEntityAtIndex(var1, var1.chunkCoordY);
+			int i5 = MathHelper.floor_double(entity.posX / 16.0D);
+			int i6 = MathHelper.floor_double(entity.posY / 16.0D);
+			int i7 = MathHelper.floor_double(entity.posZ / 16.0D);
+			if(!entity.addedToChunk || entity.chunkCoordX != i5 || entity.chunkCoordY != i6 || entity.chunkCoordZ != i7) {
+				if(entity.addedToChunk && this.chunkExists(entity.chunkCoordX, entity.chunkCoordZ)) {
+					this.getChunkFromChunkCoords(entity.chunkCoordX, entity.chunkCoordZ).removeEntityAtIndex(entity, entity.chunkCoordY);
 				}
 
-				if(this.chunkExists(var5, var7)) {
-					this.getChunkFromChunkCoords(var5, var7).addEntity(var1);
+				if(this.chunkExists(i5, i7)) {
+					this.getChunkFromChunkCoords(i5, i7).addEntity(entity);
 				} else {
-					var1.addedToChunk = false;
+					entity.addedToChunk = false;
 					System.out.println("Removing entity because it\'s not in a chunk!!");
-					var1.setEntityDead();
+					entity.setEntityDead();
 				}
 			}
 
-			if(var1.riddenByEntity != null) {
-				if(!var1.riddenByEntity.isDead && var1.riddenByEntity.ridingEntity == var1) {
-					this.updateEntity(var1.riddenByEntity);
+			if(entity.riddenByEntity != null) {
+				if(!entity.riddenByEntity.isDead && entity.riddenByEntity.ridingEntity == entity) {
+					this.updateEntity(entity.riddenByEntity);
 				} else {
-					var1.riddenByEntity.ridingEntity = null;
-					var1.riddenByEntity = null;
+					entity.riddenByEntity.ridingEntity = null;
+					entity.riddenByEntity = null;
 				}
 			}
 
-			if(Double.isNaN(var1.posX) || Double.isInfinite(var1.posX)) {
-				var1.posX = var1.lastTickPosX;
-			}
-
-			if(Double.isNaN(var1.posY) || Double.isInfinite(var1.posY)) {
-				var1.posY = var1.lastTickPosY;
-			}
-
-			if(Double.isNaN(var1.posZ) || Double.isInfinite(var1.posZ)) {
-				var1.posZ = var1.lastTickPosZ;
-			}
-
-			if(Double.isNaN((double)var1.rotationPitch) || Double.isInfinite((double)var1.rotationPitch)) {
-				var1.rotationPitch = var1.prevRotationPitch;
-			}
-
-			if(Double.isNaN((double)var1.rotationYaw) || Double.isInfinite((double)var1.rotationYaw)) {
-				var1.rotationYaw = var1.prevRotationYaw;
-			}
-
+			if(Double.isNaN(entity.posX) || Double.isInfinite(entity.posX)) {
+				entity.posX = entity.lastTickPosX;
+			}
+
+			if(Double.isNaN(entity.posY) || Double.isInfinite(entity.posY)) {
+				entity.posY = entity.lastTickPosY;
+			}
+
+			if(Double.isNaN(entity.posZ) || Double.isInfinite(entity.posZ)) {
+				entity.posZ = entity.lastTickPosZ;
+			}
+
+			if(Double.isNaN((double)entity.rotationPitch) || Double.isInfinite((double)entity.rotationPitch)) {
+				entity.rotationPitch = entity.prevRotationPitch;
+			}
+
+			if(Double.isNaN((double)entity.rotationYaw) || Double.isInfinite((double)entity.rotationYaw)) {
+				entity.rotationYaw = entity.prevRotationYaw;
+			}
 		}
+
 	}
 
-	public boolean checkIfAABBIsClear(AxisAlignedBB var1) {
-		List var2 = this.getEntitiesWithinAABBExcludingEntity((Entity)null, var1);
+	public boolean checkIfAABBIsClear(AxisAlignedBB aabb) {
+		List list2 = this.getEntitiesWithinAABBExcludingEntity((Entity)null, aabb);
 
-		for(int var3 = 0; var3 < var2.size(); ++var3) {
-			Entity var4 = (Entity)var2.get(var3);
-			if(!var4.isDead && var4.preventEntitySpawning) {
+		for(int i3 = 0; i3 < list2.size(); ++i3) {
+			Entity entity4 = (Entity)list2.get(i3);
+			if(!entity4.isDead && entity4.preventEntitySpawning) {
 				return false;
 			}
 		}
@@ -1220,139 +1321,139 @@
 		return true;
 	}
 
-	public boolean getIsAnyLiquid(AxisAlignedBB var1) {
-		int var2 = MathHelper.floor_double(var1.minX);
-		int var3 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var4 = MathHelper.floor_double(var1.minY);
-		int var5 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var6 = MathHelper.floor_double(var1.minZ);
-		int var7 = MathHelper.floor_double(var1.maxZ + 1.0D);
-		if(var1.minX < 0.0D) {
-			--var2;
-		}
-
-		if(var1.minY < 0.0D) {
-			--var4;
-		}
-
-		if(var1.minZ < 0.0D) {
-			--var6;
-		}
-
-		for(int var8 = var2; var8 < var3; ++var8) {
-			for(int var9 = var4; var9 < var5; ++var9) {
-				for(int var10 = var6; var10 < var7; ++var10) {
-					Block var11 = Block.blocksList[this.getBlockId(var8, var9, var10)];
-					if(var11 != null && var11.material.getIsLiquid()) {
-						return true;
-					}
-				}
-			}
-		}
-
-		return false;
-	}
-
-	public boolean isBoundingBoxBurning(AxisAlignedBB var1) {
-		int var2 = MathHelper.floor_double(var1.minX);
-		int var3 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var4 = MathHelper.floor_double(var1.minY);
-		int var5 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var6 = MathHelper.floor_double(var1.minZ);
-		int var7 = MathHelper.floor_double(var1.maxZ + 1.0D);
-
-		for(int var8 = var2; var8 < var3; ++var8) {
-			for(int var9 = var4; var9 < var5; ++var9) {
-				for(int var10 = var6; var10 < var7; ++var10) {
-					int var11 = this.getBlockId(var8, var9, var10);
-					if(var11 == Block.fire.blockID || var11 == Block.lavaMoving.blockID || var11 == Block.lavaStill.blockID) {
-						return true;
-					}
-				}
-			}
-		}
-
-		return false;
-	}
-
-	public boolean handleMaterialAcceleration(AxisAlignedBB var1, Material var2, Entity var3) {
-		int var4 = MathHelper.floor_double(var1.minX);
-		int var5 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var6 = MathHelper.floor_double(var1.minY);
-		int var7 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var8 = MathHelper.floor_double(var1.minZ);
-		int var9 = MathHelper.floor_double(var1.maxZ + 1.0D);
-		boolean var10 = false;
-		Vec3D var11 = Vec3D.createVector(0.0D, 0.0D, 0.0D);
-
-		for(int var12 = var4; var12 < var5; ++var12) {
-			for(int var13 = var6; var13 < var7; ++var13) {
-				for(int var14 = var8; var14 < var9; ++var14) {
-					Block var15 = Block.blocksList[this.getBlockId(var12, var13, var14)];
-					if(var15 != null && var15.material == var2) {
-						double var16 = (double)((float)(var13 + 1) - BlockFluid.getFluidHeightPercent(this.getBlockMetadata(var12, var13, var14)));
-						if((double)var7 >= var16) {
-							var10 = true;
-							var15.velocityToAddToEntity(this, var12, var13, var14, var3, var11);
-						}
-					}
-				}
-			}
-		}
-
-		if(var11.lengthVector() > 0.0D) {
-			var11 = var11.normalize();
-			double var18 = 0.004D;
-			var3.motionX += var11.xCoord * var18;
-			var3.motionY += var11.yCoord * var18;
-			var3.motionZ += var11.zCoord * var18;
-		}
-
-		return var10;
-	}
-
-	public boolean isMaterialInBB(AxisAlignedBB var1, Material var2) {
-		int var3 = MathHelper.floor_double(var1.minX);
-		int var4 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var5 = MathHelper.floor_double(var1.minY);
-		int var6 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var7 = MathHelper.floor_double(var1.minZ);
-		int var8 = MathHelper.floor_double(var1.maxZ + 1.0D);
-
-		for(int var9 = var3; var9 < var4; ++var9) {
-			for(int var10 = var5; var10 < var6; ++var10) {
-				for(int var11 = var7; var11 < var8; ++var11) {
-					Block var12 = Block.blocksList[this.getBlockId(var9, var10, var11)];
-					if(var12 != null && var12.material == var2) {
-						return true;
-					}
-				}
-			}
-		}
-
-		return false;
-	}
-
-	public boolean isAABBInMaterial(AxisAlignedBB var1, Material var2) {
-		int var3 = MathHelper.floor_double(var1.minX);
-		int var4 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var5 = MathHelper.floor_double(var1.minY);
-		int var6 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var7 = MathHelper.floor_double(var1.minZ);
-		int var8 = MathHelper.floor_double(var1.maxZ + 1.0D);
-
-		for(int var9 = var3; var9 < var4; ++var9) {
-			for(int var10 = var5; var10 < var6; ++var10) {
-				for(int var11 = var7; var11 < var8; ++var11) {
-					Block var12 = Block.blocksList[this.getBlockId(var9, var10, var11)];
-					if(var12 != null && var12.material == var2) {
-						int var13 = this.getBlockMetadata(var9, var10, var11);
-						double var14 = (double)(var10 + 1);
-						if(var13 < 8) {
-							var14 = (double)(var10 + 1) - (double)var13 / 8.0D;
-						}
-
-						if(var14 >= var1.minY) {
+	public boolean getIsAnyLiquid(AxisAlignedBB aabb) {
+		int i2 = MathHelper.floor_double(aabb.minX);
+		int i3 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int i4 = MathHelper.floor_double(aabb.minY);
+		int i5 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int i6 = MathHelper.floor_double(aabb.minZ);
+		int i7 = MathHelper.floor_double(aabb.maxZ + 1.0D);
+		if(aabb.minX < 0.0D) {
+			--i2;
+		}
+
+		if(aabb.minY < 0.0D) {
+			--i4;
+		}
+
+		if(aabb.minZ < 0.0D) {
+			--i6;
+		}
+
+		for(int i8 = i2; i8 < i3; ++i8) {
+			for(int i9 = i4; i9 < i5; ++i9) {
+				for(int i10 = i6; i10 < i7; ++i10) {
+					Block block11 = Block.blocksList[this.getBlockId(i8, i9, i10)];
+					if(block11 != null && block11.material.getIsLiquid()) {
+						return true;
+					}
+				}
+			}
+		}
+
+		return false;
+	}
+
+	public boolean isBoundingBoxBurning(AxisAlignedBB aabb) {
+		int i2 = MathHelper.floor_double(aabb.minX);
+		int i3 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int i4 = MathHelper.floor_double(aabb.minY);
+		int i5 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int i6 = MathHelper.floor_double(aabb.minZ);
+		int i7 = MathHelper.floor_double(aabb.maxZ + 1.0D);
+
+		for(int i8 = i2; i8 < i3; ++i8) {
+			for(int i9 = i4; i9 < i5; ++i9) {
+				for(int i10 = i6; i10 < i7; ++i10) {
+					int i11 = this.getBlockId(i8, i9, i10);
+					if(i11 == Block.fire.blockID || i11 == Block.lavaMoving.blockID || i11 == Block.lavaStill.blockID) {
+						return true;
+					}
+				}
+			}
+		}
+
+		return false;
+	}
+
+	public boolean handleMaterialAcceleration(AxisAlignedBB aabb, Material material, Entity entity) {
+		int i4 = MathHelper.floor_double(aabb.minX);
+		int i5 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int i6 = MathHelper.floor_double(aabb.minY);
+		int i7 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int i8 = MathHelper.floor_double(aabb.minZ);
+		int i9 = MathHelper.floor_double(aabb.maxZ + 1.0D);
+		boolean z10 = false;
+		Vec3D vec3D11 = Vec3D.createVector(0.0D, 0.0D, 0.0D);
+
+		for(int i12 = i4; i12 < i5; ++i12) {
+			for(int i13 = i6; i13 < i7; ++i13) {
+				for(int i14 = i8; i14 < i9; ++i14) {
+					Block block15 = Block.blocksList[this.getBlockId(i12, i13, i14)];
+					if(block15 != null && block15.material == material) {
+						double d16 = (double)((float)(i13 + 1) - BlockFluid.getFluidHeightPercent(this.getBlockMetadata(i12, i13, i14)));
+						if((double)i7 >= d16) {
+							z10 = true;
+							block15.velocityToAddToEntity(this, i12, i13, i14, entity, vec3D11);
+						}
+					}
+				}
+			}
+		}
+
+		if(vec3D11.lengthVector() > 0.0D) {
+			vec3D11 = vec3D11.normalize();
+			double d18 = 0.004D;
+			entity.motionX += vec3D11.xCoord * d18;
+			entity.motionY += vec3D11.yCoord * d18;
+			entity.motionZ += vec3D11.zCoord * d18;
+		}
+
+		return z10;
+	}
+
+	public boolean isMaterialInBB(AxisAlignedBB aabb, Material material) {
+		int i3 = MathHelper.floor_double(aabb.minX);
+		int i4 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int i5 = MathHelper.floor_double(aabb.minY);
+		int i6 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int i7 = MathHelper.floor_double(aabb.minZ);
+		int i8 = MathHelper.floor_double(aabb.maxZ + 1.0D);
+
+		for(int i9 = i3; i9 < i4; ++i9) {
+			for(int i10 = i5; i10 < i6; ++i10) {
+				for(int i11 = i7; i11 < i8; ++i11) {
+					Block block12 = Block.blocksList[this.getBlockId(i9, i10, i11)];
+					if(block12 != null && block12.material == material) {
+						return true;
+					}
+				}
+			}
+		}
+
+		return false;
+	}
+
+	public boolean isAABBInMaterial(AxisAlignedBB aabb, Material material) {
+		int i3 = MathHelper.floor_double(aabb.minX);
+		int i4 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int i5 = MathHelper.floor_double(aabb.minY);
+		int i6 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int i7 = MathHelper.floor_double(aabb.minZ);
+		int i8 = MathHelper.floor_double(aabb.maxZ + 1.0D);
+
+		for(int i9 = i3; i9 < i4; ++i9) {
+			for(int i10 = i5; i10 < i6; ++i10) {
+				for(int i11 = i7; i11 < i8; ++i11) {
+					Block block12 = Block.blocksList[this.getBlockId(i9, i10, i11)];
+					if(block12 != null && block12.material == material) {
+						int i13 = this.getBlockMetadata(i9, i10, i11);
+						double d14 = (double)(i10 + 1);
+						if(i13 < 8) {
+							d14 = (double)(i10 + 1) - (double)i13 / 8.0D;
+						}
+
+						if(d14 >= aabb.minY) {
 							return true;
 						}
 					}
@@ -1363,68 +1464,68 @@
 		return false;
 	}
 
-	public void createExplosion(Entity var1, double var2, double var4, double var6, float var8) {
-		(new Explosion()).doExplosion(this, var1, var2, var4, var6, var8);
+	public void createExplosion(Entity entity, double x, double y, double z, float float5) {
+		(new Explosion()).doExplosion(this, entity, x, y, z, float5);
 	}
 
-	public float getBlockDensity(Vec3D var1, AxisAlignedBB var2) {
-		double var3 = 1.0D / ((var2.maxX - var2.minX) * 2.0D + 1.0D);
-		double var5 = 1.0D / ((var2.maxY - var2.minY) * 2.0D + 1.0D);
-		double var7 = 1.0D / ((var2.maxZ - var2.minZ) * 2.0D + 1.0D);
-		int var9 = 0;
-		int var10 = 0;
+	public float getBlockDensity(Vec3D vector, AxisAlignedBB aabb) {
+		double d3 = 1.0D / ((aabb.maxX - aabb.minX) * 2.0D + 1.0D);
+		double d5 = 1.0D / ((aabb.maxY - aabb.minY) * 2.0D + 1.0D);
+		double d7 = 1.0D / ((aabb.maxZ - aabb.minZ) * 2.0D + 1.0D);
+		int i9 = 0;
+		int i10 = 0;
 
-		for(float var11 = 0.0F; var11 <= 1.0F; var11 = (float)((double)var11 + var3)) {
-			for(float var12 = 0.0F; var12 <= 1.0F; var12 = (float)((double)var12 + var5)) {
-				for(float var13 = 0.0F; var13 <= 1.0F; var13 = (float)((double)var13 + var7)) {
-					double var14 = var2.minX + (var2.maxX - var2.minX) * (double)var11;
-					double var16 = var2.minY + (var2.maxY - var2.minY) * (double)var12;
-					double var18 = var2.minZ + (var2.maxZ - var2.minZ) * (double)var13;
-					if(this.rayTraceBlocks(Vec3D.createVector(var14, var16, var18), var1) == null) {
-						++var9;
+		for(float f11 = 0.0F; f11 <= 1.0F; f11 = (float)((double)f11 + d3)) {
+			for(float f12 = 0.0F; f12 <= 1.0F; f12 = (float)((double)f12 + d5)) {
+				for(float f13 = 0.0F; f13 <= 1.0F; f13 = (float)((double)f13 + d7)) {
+					double d14 = aabb.minX + (aabb.maxX - aabb.minX) * (double)f11;
+					double d16 = aabb.minY + (aabb.maxY - aabb.minY) * (double)f12;
+					double d18 = aabb.minZ + (aabb.maxZ - aabb.minZ) * (double)f13;
+					if(this.rayTraceBlocks(Vec3D.createVector(d14, d16, d18), vector) == null) {
+						++i9;
 					}
 
-					++var10;
+					++i10;
 				}
 			}
 		}
 
-		return (float)var9 / (float)var10;
-	}
-
-	public void extinguishFire(int var1, int var2, int var3, int var4) {
-		if(var4 == 0) {
-			--var2;
-		}
-
-		if(var4 == 1) {
-			++var2;
-		}
-
-		if(var4 == 2) {
-			--var3;
-		}
-
-		if(var4 == 3) {
-			++var3;
-		}
-
-		if(var4 == 4) {
-			--var1;
-		}
-
-		if(var4 == 5) {
-			++var1;
-		}
-
-		if(this.getBlockId(var1, var2, var3) == Block.fire.blockID) {
-			this.playSoundEffect((double)((float)var1 + 0.5F), (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), "random.fizz", 0.5F, 2.6F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.8F);
-			this.setBlockWithNotify(var1, var2, var3, 0);
-		}
-
-	}
-
-	public Entity createDebugPlayer(Class var1) {
+		return (float)i9 / (float)i10;
+	}
+
+	public void extinguishFire(int x, int y, int z, int side) {
+		if(side == 0) {
+			--y;
+		}
+
+		if(side == 1) {
+			++y;
+		}
+
+		if(side == 2) {
+			--z;
+		}
+
+		if(side == 3) {
+			++z;
+		}
+
+		if(side == 4) {
+			--x;
+		}
+
+		if(side == 5) {
+			++x;
+		}
+
+		if(this.getBlockId(x, y, z) == Block.fire.blockID) {
+			this.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "random.fizz", 0.5F, 2.6F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.8F);
+			this.setBlockWithNotify(x, y, z, 0);
+		}
+
+	}
+
+	public Entity createDebugPlayer(Class playerClass) {
 		return null;
 	}
 
@@ -1432,105 +1533,144 @@
 		return "All: " + this.loadedEntityList.size();
 	}
 
-	public TileEntity getBlockTileEntity(int var1, int var2, int var3) {
-		Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-		return var4 != null ? var4.getChunkBlockTileEntity(var1 & 15, var2, var3 & 15) : null;
-	}
-
-	public void setBlockTileEntity(int var1, int var2, int var3, TileEntity var4) {
-		Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-		if(var5 != null) {
-			var5.setChunkBlockTileEntity(var1 & 15, var2, var3 & 15, var4);
-		}
-
-	}
-
-	public void removeBlockTileEntity(int var1, int var2, int var3) {
-		Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-		if(var4 != null) {
-			var4.removeChunkBlockTileEntity(var1 & 15, var2, var3 & 15);
-		}
-
-	}
-
-	public boolean isBlockNormalCube(int var1, int var2, int var3) {
-		Block var4 = Block.blocksList[this.getBlockId(var1, var2, var3)];
-		return var4 == null ? false : var4.isOpaqueCube();
-	}
-
-	public void saveWorldIndirectly(IProgressUpdate var1) {
-		this.saveWorld(true, var1);
+	public TileEntity getBlockTileEntity(int x, int y, int z) {
+		Chunk chunk4 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+		return chunk4 != null ? chunk4.getChunkBlockTileEntity(x & 15, y, z & 15) : null;
+	}
+
+	public void setBlockTileEntity(int x, int y, int z, TileEntity tileEntity) {
+		Chunk chunk5 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+		if(chunk5 != null) {
+			chunk5.setChunkBlockTileEntity(x & 15, y, z & 15, tileEntity);
+		}
+
+	}
+
+	public void removeBlockTileEntity(int x, int y, int z) {
+		Chunk chunk4 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+		if(chunk4 != null) {
+			chunk4.removeChunkBlockTileEntity(x & 15, y, z & 15);
+		}
+
+	}
+
+	public boolean isBlockNormalCube(int x, int y, int z) {
+		Block block4 = Block.blocksList[this.getBlockId(x, y, z)];
+		return block4 == null ? false : block4.isOpaqueCube();
+	}
+
+	public BiomeInterface func_7342_9805301CWs03An9555qIw883P54dcq9802DkM5DuquNweM1NH26RH6oP02mr() {
+		return this.field_7486_19Zq3usHE49nqTf42NA4437074mbHq57gg27445jru16ailF0t00O91Q8HO3;
+	}
+
+	public void saveWorldIndirectly(IProgressUpdate na) {
+		this.saveWorld(true, na);
 	}
 
 	public boolean updatingLighting() {
-		int var1 = 1000;
+		int i1 = 1000;
 
 		while(this.lightingToUpdate.size() > 0) {
-			--var1;
-			if(var1 <= 0) {
+			--i1;
+			if(i1 <= 0) {
 				return true;
 			}
 
-			((MetadataChunkBlock)this.lightingToUpdate.remove(this.lightingToUpdate.size() - 1)).updateLight(this);
+			MetadataChunkBlock metadataChunkBlock2 = (MetadataChunkBlock)this.lightingToUpdate.remove(this.lightingToUpdate.size() - 1);
+			if(metadataChunkBlock2 != null) {
+				metadataChunkBlock2.updateLight(this);
+			}
 		}
 
 		return false;
 	}
 
-	public void scheduleLightingUpdate(EnumSkyBlock var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		this.scheduleLightingUpdate_do(var1, var2, var3, var4, var5, var6, var7, true);
+	public void scheduleLightingUpdate(EnumSkyBlock skyBlock, int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		this.scheduleLightingUpdate_do(skyBlock, minX, minY, minZ, maxX, maxY, maxZ, true);
 	}
 
-	public void scheduleLightingUpdate_do(EnumSkyBlock var1, int var2, int var3, int var4, int var5, int var6, int var7, boolean var8) {
-		int var9 = (var5 + var2) / 2;
-		int var10 = (var7 + var4) / 2;
-		if(this.blockExists(var9, 64, var10)) {
-			int var11 = this.lightingToUpdate.size();
-			if(var8) {
-				int var12 = 4;
-				if(var12 > var11) {
-					var12 = var11;
+	public void scheduleLightingUpdate_do(EnumSkyBlock skyBlock, int minX, int minY, int minZ, int maxX, int maxY, int maxZ, boolean update) {
+		int i9 = (maxX + minX) / 2;
+		int i10 = (maxZ + minZ) / 2;
+		if(this.blockExists(i9, 64, i10)) {
+			int i11 = this.lightingToUpdate.size();
+			if(update) {
+				int i12 = 4;
+				if(i12 > i11) {
+					i12 = i11;
 				}
 
-				for(int var13 = 0; var13 < var12; ++var13) {
-					MetadataChunkBlock var14 = (MetadataChunkBlock)this.lightingToUpdate.get(this.lightingToUpdate.size() - var13 - 1);
-					if(var14.skyBlock == var1 && var14.getLightUpdated(var2, var3, var4, var5, var6, var7)) {
+				for(int i13 = 0; i13 < i12; ++i13) {
+					MetadataChunkBlock metadataChunkBlock14 = (MetadataChunkBlock)this.lightingToUpdate.get(this.lightingToUpdate.size() - i13 - 1);
+					if(metadataChunkBlock14 != null && metadataChunkBlock14.skyBlock == skyBlock && metadataChunkBlock14.getLightUpdated(minX, minY, minZ, maxX, maxY, maxZ)) {
 						return;
 					}
 				}
 			}
 
-			this.lightingToUpdate.add(new MetadataChunkBlock(var1, var2, var3, var4, var5, var6, var7));
-			if(this.lightingToUpdate.size() > 100000) {
-				while(this.lightingToUpdate.size() > '\uc350') {
-					this.updatingLighting();
-				}
-			}
-
+			this.lightingToUpdate.add(new MetadataChunkBlock(skyBlock, minX, minY, minZ, maxX, maxY, maxZ));
 		}
+
 	}
 
 	public void calculateInitialSkylight() {
-		int var1 = this.calculateSkylightSubtracted(1.0F);
-		if(var1 != this.skylightSubtracted) {
-			this.skylightSubtracted = var1;
+		int i1 = this.calculateSkylightSubtracted(1.0F);
+		if(i1 != this.skylightSubtracted) {
+			this.skylightSubtracted = i1;
+		}
+
+	}
+
+	public void func_7430_2WpX24v1vz12pVlm4Rc1b7y4nk1dDNM5jBcH0X8hn3Jw39FwYG2gi9mM940l() {
+		++this.field_7497_6WbP28c555893meijkmoF90Ca566QQQN5FP022rim05fq26oU3308065FJ2h;
+		if((this.field_7497_6WbP28c555893meijkmoF90Ca566QQQN5FP022rim05fq26oU3308065FJ2h & 5) == 5) {
+			this.markBlockNeedsUpdate((int)InputHandler.mc.thePlayer.posX, (int)InputHandler.mc.thePlayer.posY - 1, (int)InputHandler.mc.thePlayer.posZ);
+			this.markBlockNeedsUpdate((int)InputHandler.mc.thePlayer.posX, (int)InputHandler.mc.thePlayer.posY - 8, (int)InputHandler.mc.thePlayer.posZ);
+			this.markBlockNeedsUpdate((int)InputHandler.mc.thePlayer.posX + 16, (int)InputHandler.mc.thePlayer.posY - 1, (int)InputHandler.mc.thePlayer.posZ);
+			this.markBlockNeedsUpdate((int)InputHandler.mc.thePlayer.posX - 16, (int)InputHandler.mc.thePlayer.posY - 1, (int)InputHandler.mc.thePlayer.posZ);
+			this.markBlockNeedsUpdate((int)InputHandler.mc.thePlayer.posX, (int)InputHandler.mc.thePlayer.posY - 1, (int)InputHandler.mc.thePlayer.posZ + 16);
+			this.markBlockNeedsUpdate((int)InputHandler.mc.thePlayer.posX, (int)InputHandler.mc.thePlayer.posY - 1, (int)InputHandler.mc.thePlayer.posZ - 16);
 		}
 
 	}
 
 	public void tick() {
 		this.chunkProvider.unload100OldestChunks();
-		int var1 = this.calculateSkylightSubtracted(1.0F);
-		if(var1 != this.skylightSubtracted) {
-			this.skylightSubtracted = var1;
-
-			for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-				((IWorldAccess)this.worldAccesses.get(var2)).updateAllRenderers();
+		if(this.loadedEntityList.size() >= 4096) {
+			System.out.println("Entity overflow!");
+			this.loadedEntityList.retainAll(this.playerEntities);
+		}
+
+		int i1 = this.calculateSkylightSubtracted(1.0F);
+		if(i1 != this.skylightSubtracted) {
+			this.skylightSubtracted = i1;
+
+			for(int i2 = 0; i2 < this.worldAccesses.size(); ++i2) {
+				((IWorldAccess)this.worldAccesses.get(i2)).updateAllRenderers();
 			}
 		}
 
-		++this.worldTime;
-		if(this.worldTime % (long)this.autosavePeriod == 0L) {
+		this.func_7430_2WpX24v1vz12pVlm4Rc1b7y4nk1dDNM5jBcH0X8hn3Jw39FwYG2gi9mM940l();
+		InputHandler.field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL.func_12196_7s9IfTKre2uJtyoPjdLc93WmidSQs9AM2aDgi63837RD3989LlCE6V4C08ci();
+		boolean z3 = ScreenDebugMenu.dbg_conf_nebulaEvt || this.GetMilestone() % 10L == 0L && this.GetMilestone() > 0L;
+		if(z3) {
+			this.skyColor = 6976L;
+		} else {
+			this.skyColor = (long)InputHandler.mc.field_7308_49g3Ue4B4ymyJ5yc4CXdts2UZnR4OP36zG20Omc6J6Ly1C5xR8Habk43qvGE.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0.field_10164_5N63dbka0na7Is07L9kMmSk6ZK28Ioxdll6JwQgybo1I69cauDA8U5rtDvBv.field_12192_9E67d5X2srrjQ8fe493f7ub1P59cMh50f2G1a453y7P5UP6YgaLpUO1EN9yR;
+		}
+
+		if(this.worldTime % 23000L == 0L) {
+			System.out.println("Milestone " + this.worldTime / 23000L + " reached");
+		}
+
+		if(this.exclFrailMode && InputHandler.mc.options.difficulty != 4) {
+			this.exclFrailMode = false;
+			System.out.println("World has been changed from Frail mode");
+		}
+
+		this.worldTime += (long)(InputHandler.IsKeyDown(199) ? 16 : 1);
+		ExtEvents.WorldTick(this);
+		if(this.worldTime % (InputHandler.mc.options.renderDistance == 0 ? (long)(this.autosavePeriod * 10) : (long)this.autosavePeriod) == 0L) {
 			this.saveWorld(false, (IProgressUpdate)null);
 		}
 
@@ -1541,19 +1681,19 @@
 	protected void updateBlocksAndPlayCaveSounds() {
 		this.positionsToUpdate.clear();
 
-		int var3;
-		int var4;
-		int var6;
-		int var7;
-		for(int var1 = 0; var1 < this.playerEntities.size(); ++var1) {
-			EntityPlayer var2 = (EntityPlayer)this.playerEntities.get(var1);
-			var3 = MathHelper.floor_double(var2.posX / 16.0D);
-			var4 = MathHelper.floor_double(var2.posZ / 16.0D);
-			byte var5 = 9;
+		int i1;
+		int i2;
+		int i3;
+		int i4;
+		for(int i5 = 0; i5 < this.playerEntities.size(); ++i5) {
+			EntityPlayer entityPlayer6 = (EntityPlayer)this.playerEntities.get(i5);
+			i1 = MathHelper.floor_double(entityPlayer6.posX / 16.0D);
+			i2 = MathHelper.floor_double(entityPlayer6.posZ / 16.0D);
+			byte b7 = 9;
 
-			for(var6 = -var5; var6 <= var5; ++var6) {
-				for(var7 = -var5; var7 <= var5; ++var7) {
-					this.positionsToUpdate.add(new ChunkCoordIntPair(var6 + var3, var7 + var4));
+			for(i3 = -b7; i3 <= b7; ++i3) {
+				for(i4 = -b7; i4 <= b7; ++i4) {
+					this.positionsToUpdate.add(new ChunkCoordIntPair(i3 + i1, i4 + i2));
 				}
 			}
 		}
@@ -1562,29 +1702,29 @@
 			--this.soundCounter;
 		}
 
-		Iterator var12 = this.positionsToUpdate.iterator();
+		Iterator iterator12 = this.positionsToUpdate.iterator();
 
-		while(var12.hasNext()) {
-			ChunkCoordIntPair var13 = (ChunkCoordIntPair)var12.next();
-			var3 = var13.chunkXPos * 16;
-			var4 = var13.chunkZPos * 16;
-			Chunk var14 = this.getChunkFromChunkCoords(var13.chunkXPos, var13.chunkZPos);
-			int var8;
-			int var9;
-			int var10;
+		while(iterator12.hasNext()) {
+			ChunkCoordIntPair chunkCoordIntPair13 = (ChunkCoordIntPair)iterator12.next();
+			i1 = chunkCoordIntPair13.chunkXPos * 16;
+			i2 = chunkCoordIntPair13.chunkZPos * 16;
+			Chunk chunk14 = this.getChunkFromChunkCoords(chunkCoordIntPair13.chunkXPos, chunkCoordIntPair13.chunkZPos);
+			int i8;
+			int i9;
+			int i10;
 			if(this.soundCounter == 0) {
 				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
-				var6 = this.updateLCG >> 2;
-				var7 = var6 & 15;
-				var8 = var6 >> 8 & 15;
-				var9 = var6 >> 16 & 127;
-				var10 = var14.getBlockID(var7, var9, var8);
-				var7 += var3;
-				var8 += var4;
-				if(var10 == 0 && this.getBlockLightValue(var7, var9, var8) <= this.rand.nextInt(8) && this.getSavedLightValue(EnumSkyBlock.Sky, var7, var9, var8) <= 0) {
-					EntityPlayer var11 = this.getClosestPlayer((double)var7 + 0.5D, (double)var9 + 0.5D, (double)var8 + 0.5D, 8.0D);
-					if(var11 != null && var11.getDistanceSq((double)var7 + 0.5D, (double)var9 + 0.5D, (double)var8 + 0.5D) > 4.0D) {
-						this.playSoundEffect((double)var7 + 0.5D, (double)var9 + 0.5D, (double)var8 + 0.5D, "ambient.cave.cave", 0.7F, 0.8F + this.rand.nextFloat() * 0.2F);
+				i3 = this.updateLCG >> 2;
+				i4 = i3 & 15;
+				i8 = i3 >> 8 & 15;
+				i9 = i3 >> 16 & 127;
+				i10 = chunk14.getBlockID(i4, i9, i8);
+				i4 += i1;
+				i8 += i2;
+				if(i10 == 0 && this.getBlockLightValue(i4, i9, i8) <= this.rand.nextInt(8) && this.getSavedLightValue(EnumSkyBlock.Sky, i4, i9, i8) <= 0) {
+					EntityPlayer entityPlayer11 = this.getClosestPlayer((double)i4 + 0.5D, (double)i9 + 0.5D, (double)i8 + 0.5D, 8.0D);
+					if(entityPlayer11 != null && entityPlayer11.getDistanceSq((double)i4 + 0.5D, (double)i9 + 0.5D, (double)i8 + 0.5D) > 4.0D) {
+						this.playSoundEffect((double)i4 + 0.5D, (double)i9 + 0.5D, (double)i8 + 0.5D, "ambient.cave.cave", 0.7F, 0.8F + this.rand.nextFloat() * 0.2F);
 						this.soundCounter = this.rand.nextInt(12000) + 6000;
 					}
 				}
@@ -1592,59 +1732,96 @@
 
 			if(this.snowCovered && this.rand.nextInt(4) == 0) {
 				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
-				var6 = this.updateLCG >> 2;
-				var7 = var6 & 15;
-				var8 = var6 >> 8 & 15;
-				var9 = this.getTopSolidOrLiquidBlock(var7 + var3, var8 + var4);
-				if(var9 >= 0 && var9 < 128 && var14.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
-					var10 = var14.getBlockID(var7, var9 - 1, var8);
-					if(var14.getBlockID(var7, var9, var8) == 0 && Block.snow.canPlaceBlockAt(this, var7 + var3, var9, var8 + var4)) {
-						this.setBlockWithNotify(var7 + var3, var9, var8 + var4, Block.snow.blockID);
-					}
-
-					if(var10 == Block.waterStill.blockID && var14.getBlockMetadata(var7, var9 - 1, var8) == 0) {
-						this.setBlockWithNotify(var7 + var3, var9 - 1, var8 + var4, Block.ice.blockID);
-					}
-				}
-			}
-
-			for(var6 = 0; var6 < 80; ++var6) {
-				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
-				var7 = this.updateLCG >> 2;
-				var8 = var7 & 15;
-				var9 = var7 >> 8 & 15;
-				var10 = var7 >> 16 & 127;
-				byte var15 = var14.blocks[var8 << 11 | var9 << 7 | var10];
-				if(Block.tickOnLoad[var15]) {
-					Block.blocksList[var15].updateTick(this, var8 + var3, var10, var9 + var4, this.rand);
+				i3 = this.updateLCG >> 2;
+				i4 = i3 & 15;
+				i8 = i3 >> 8 & 15;
+				i9 = this.getTopSolidOrLiquidBlock(i4 + i1, i8 + i2);
+				if(i9 >= 0 && i9 < 128 && chunk14.getSavedLightValue(EnumSkyBlock.Block, i4, i9, i8) < 10) {
+					i10 = chunk14.getBlockID(i4, i9 - 1, i8);
+					if(chunk14.getBlockID(i4, i9, i8) == 0 && Block.snow.canPlaceBlockAt(this, i4 + i1, i9, i8 + i2)) {
+						this.setBlockWithNotify(i4 + i1, i9, i8 + i2, Block.snow.blockID);
+					}
+
+					if(i10 == Block.waterStill.blockID && chunk14.getBlockMetadata(i4, i9 - 1, i8) == 0) {
+						this.setBlockWithNotify(i4 + i1, i9 - 1, i8 + i2, Block.ice.blockID);
+					}
+				}
+			}
+
+			if(this.sandCovered && this.rand.nextInt(4) == 1) {
+				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
+				i3 = this.updateLCG >> 2;
+				i4 = i3 & 15;
+				i8 = i3 >> 8 & 15;
+				i9 = this.getTopSolidOrLiquidBlock(i4 + i1, i8 + i2);
+				if(i9 >= 0 && i9 < 128 && chunk14.getSavedLightValue(EnumSkyBlock.Block, i4, i9, i8) < 10) {
+					i10 = chunk14.getBlockID(i4, i9 - 1, i8);
+					if(i10 == Block.waterStill.blockID && chunk14.getBlockMetadata(i4, i9 - 1, i8) == 0 && this.rand.nextInt(16) == 0) {
+						this.setBlockWithNotify(i4 + i1, i9 - 1, i8 + i2, Block.blockClay.blockID);
+					}
+				}
+			}
+
+			if(InputHandler.mc.isRaining) {
+				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
+				i3 = this.updateLCG >> 2;
+				i4 = i3 & 15;
+				i8 = i3 >> 8 & 15;
+				i9 = this.getTopSolidOrLiquidBlock(i4 + i1, i8 + i2);
+				if(i9 >= 0 && i9 < 128 && chunk14.getSavedLightValue(EnumSkyBlock.Block, i4, i9, i8) < 8) {
+					chunk14.getBlockID(i4, i9 - 1, i8);
+					if(chunk14.getBlockID(i4, i9, i8) == 0 && i9 < 66) {
+						this.setBlockWithNotify(i4 + i1, i9, i8 + i2, Block.waterStill.blockID);
+					}
+				}
+			}
+
+			for(i3 = 0; i3 < 80; ++i3) {
+				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
+				i4 = this.updateLCG >> 2;
+				i8 = i4 & 15;
+				i9 = i4 >> 8 & 15;
+				i10 = i4 >> 16 & 127;
+				int i15 = chunk14.blocks[i8 << 11 | i9 << 7 | i10] & 255;
+				if(Block.tickOnLoad[i15]) {
+					Block.blocksList[i15].updateTick(this, i8 + i1, i10, i9 + i2, this.rand);
 				}
 			}
 		}
 
 	}
 
-	public boolean tickUpdates(boolean var1) {
-		int var2 = this.scheduledTickTreeSet.size();
-		if(var2 != this.scheduledTickSet.size()) {
-			throw new IllegalStateException("TickNextTick list out of synch");
+	public boolean tickUpdates(boolean boolean1) {
+		int i2 = this.scheduledTickTreeSet.size();
+		int i3 = Math.min(i2, this.scheduledTickSet.size());
+		if(Math.abs(i2 - this.scheduledTickSet.size()) > 3) {
+			return true;
 		} else {
-			if(var2 > 1000) {
-				var2 = 1000;
+			if(i2 > 1000) {
+				i2 = 1000;
 			}
 
-			for(int var3 = 0; var3 < var2; ++var3) {
-				NextTickListEntry var4 = (NextTickListEntry)this.scheduledTickTreeSet.first();
-				if(!var1 && var4.scheduledTime > this.worldTime) {
+			for(int i4 = 0; i4 < i3; ++i4) {
+				i3 = Math.min(i2, this.scheduledTickSet.size());
+				Set set6 = this.scheduledTickTreeSet;
+				NextTickListEntry nextTickListEntry5;
+				synchronized(this.scheduledTickTreeSet) {
+					nextTickListEntry5 = (NextTickListEntry)this.scheduledTickTreeSet.iterator().next();
+				}
+
+				if(!boolean1 && nextTickListEntry5.scheduledTime > this.worldTime) {
 					break;
 				}
 
-				this.scheduledTickTreeSet.remove(var4);
-				this.scheduledTickSet.remove(var4);
-				byte var5 = 8;
-				if(this.checkChunksExist(var4.xCoord - var5, var4.yCoord - var5, var4.zCoord - var5, var4.xCoord + var5, var4.yCoord + var5, var4.zCoord + var5)) {
-					int var6 = this.getBlockId(var4.xCoord, var4.yCoord, var4.zCoord);
-					if(var6 == var4.blockID && var6 > 0) {
-						Block.blocksList[var6].updateTick(this, var4.xCoord, var4.yCoord, var4.zCoord, this.rand);
+				this.listBeingWritten = true;
+				this.scheduledTickTreeSet.remove(nextTickListEntry5);
+				this.scheduledTickSet.remove(nextTickListEntry5);
+				this.listBeingWritten = false;
+				byte b9 = 8;
+				if(this.checkChunksExist(nextTickListEntry5.xCoord - b9, nextTickListEntry5.yCoord - b9, nextTickListEntry5.zCoord - b9, nextTickListEntry5.xCoord + b9, nextTickListEntry5.yCoord + b9, nextTickListEntry5.zCoord + b9)) {
+					int i7 = this.getBlockId(nextTickListEntry5.xCoord, nextTickListEntry5.yCoord, nextTickListEntry5.zCoord);
+					if(i7 == nextTickListEntry5.blockID && i7 > 0) {
+						Block.blocksList[i7].updateTick(this, nextTickListEntry5.xCoord, nextTickListEntry5.yCoord, nextTickListEntry5.zCoord, this.rand);
 					}
 				}
 			}
@@ -1653,33 +1830,33 @@
 		}
 	}
 
-	public void randomDisplayUpdates(int var1, int var2, int var3) {
-		byte var4 = 16;
-		Random var5 = new Random();
+	public void randomDisplayUpdates(int posX, int posY, int posZ) {
+		byte b4 = 16;
+		Random random5 = new Random();
 
-		for(int var6 = 0; var6 < 1000; ++var6) {
-			int var7 = var1 + this.rand.nextInt(var4) - this.rand.nextInt(var4);
-			int var8 = var2 + this.rand.nextInt(var4) - this.rand.nextInt(var4);
-			int var9 = var3 + this.rand.nextInt(var4) - this.rand.nextInt(var4);
-			int var10 = this.getBlockId(var7, var8, var9);
-			if(var10 > 0) {
-				Block.blocksList[var10].randomDisplayTick(this, var7, var8, var9, var5);
+		for(int i6 = 0; i6 < 1000; ++i6) {
+			int i7 = posX + this.rand.nextInt(b4) - this.rand.nextInt(b4);
+			int i8 = posY + this.rand.nextInt(b4) - this.rand.nextInt(b4);
+			int i9 = posZ + this.rand.nextInt(b4) - this.rand.nextInt(b4);
+			int i10 = this.getBlockId(i7, i8, i9);
+			if(i10 > 0) {
+				Block.blocksList[i10].randomDisplayTick(this, i7, i8, i9, random5);
 			}
 		}
 
 	}
 
-	public List getEntitiesWithinAABBExcludingEntity(Entity var1, AxisAlignedBB var2) {
+	public List getEntitiesWithinAABBExcludingEntity(Entity entity, AxisAlignedBB aabb) {
 		this.entitiesWithinAABBExcludingEntity.clear();
-		int var3 = MathHelper.floor_double((var2.minX - 2.0D) / 16.0D);
-		int var4 = MathHelper.floor_double((var2.maxX + 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.minZ - 2.0D) / 16.0D);
-		int var6 = MathHelper.floor_double((var2.maxZ + 2.0D) / 16.0D);
+		int i3 = MathHelper.floor_double((aabb.minX - 2.0D) / 16.0D);
+		int i4 = MathHelper.floor_double((aabb.maxX + 2.0D) / 16.0D);
+		int i5 = MathHelper.floor_double((aabb.minZ - 2.0D) / 16.0D);
+		int i6 = MathHelper.floor_double((aabb.maxZ + 2.0D) / 16.0D);
 
-		for(int var7 = var3; var7 <= var4; ++var7) {
-			for(int var8 = var5; var8 <= var6; ++var8) {
-				if(this.chunkExists(var7, var8)) {
-					this.getChunkFromChunkCoords(var7, var8).getEntitiesWithinAABBForEntity(var1, var2, this.entitiesWithinAABBExcludingEntity);
+		for(int i7 = i3; i7 <= i4; ++i7) {
+			for(int i8 = i5; i8 <= i6; ++i8) {
+				if(this.chunkExists(i7, i8)) {
+					this.getChunkFromChunkCoords(i7, i8).getEntitiesWithinAABBForEntity(entity, aabb, this.entitiesWithinAABBExcludingEntity);
 				}
 			}
 		}
@@ -1687,63 +1864,63 @@
 		return this.entitiesWithinAABBExcludingEntity;
 	}
 
-	public List getEntitiesWithinAABB(Class var1, AxisAlignedBB var2) {
-		int var3 = MathHelper.floor_double((var2.minX - 2.0D) / 16.0D);
-		int var4 = MathHelper.floor_double((var2.maxX + 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.minZ - 2.0D) / 16.0D);
-		int var6 = MathHelper.floor_double((var2.maxZ + 2.0D) / 16.0D);
-		ArrayList var7 = new ArrayList();
+	public List getEntitiesWithinAABB(Class clazz, AxisAlignedBB aabb) {
+		int i3 = MathHelper.floor_double((aabb.minX - 2.0D) / 16.0D);
+		int i4 = MathHelper.floor_double((aabb.maxX + 2.0D) / 16.0D);
+		int i5 = MathHelper.floor_double((aabb.minZ - 2.0D) / 16.0D);
+		int i6 = MathHelper.floor_double((aabb.maxZ + 2.0D) / 16.0D);
+		ArrayList arrayList7 = new ArrayList();
 
-		for(int var8 = var3; var8 <= var4; ++var8) {
-			for(int var9 = var5; var9 <= var6; ++var9) {
-				if(this.chunkExists(var8, var9)) {
-					this.getChunkFromChunkCoords(var8, var9).getEntitiesOfTypeWithinAAAB(var1, var2, var7);
+		for(int i8 = i3; i8 <= i4; ++i8) {
+			for(int i9 = i5; i9 <= i6; ++i9) {
+				if(this.chunkExists(i8, i9)) {
+					this.getChunkFromChunkCoords(i8, i9).getEntitiesOfTypeWithinAAAB(clazz, aabb, arrayList7);
 				}
 			}
 		}
 
-		return var7;
+		return arrayList7;
 	}
 
 	public List getLoadedEntityList() {
 		return this.loadedEntityList;
 	}
 
-	public void updateTileEntityChunkAndDoNothing(int var1, int var2, int var3, TileEntity var4) {
-		if(this.blockExists(var1, var2, var3)) {
-			this.getChunkFromBlockCoords(var1, var3).setChunkModified();
+	public void updateTileEntityChunkAndDoNothing(int x, int y, int z, TileEntity tileEntity) {
+		if(this.blockExists(x, y, z)) {
+			this.getChunkFromBlockCoords(x, z).setChunkModified();
 		}
 
-		for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-			((IWorldAccess)this.worldAccesses.get(var5)).doNothingWithTileEntity(var1, var2, var3, var4);
+		for(int i5 = 0; i5 < this.worldAccesses.size(); ++i5) {
+			((IWorldAccess)this.worldAccesses.get(i5)).doNothingWithTileEntity(x, y, z, tileEntity);
 		}
 
 	}
 
-	public int countEntities(Class var1) {
-		int var2 = 0;
+	public int countEntities(Class clazz) {
+		int i2 = 0;
 
-		for(int var3 = 0; var3 < this.loadedEntityList.size(); ++var3) {
-			Entity var4 = (Entity)this.loadedEntityList.get(var3);
-			if(var1.isAssignableFrom(var4.getClass())) {
-				++var2;
+		for(int i3 = 0; i3 < this.loadedEntityList.size(); ++i3) {
+			Entity entity4 = (Entity)this.loadedEntityList.get(i3);
+			if(clazz.isAssignableFrom(entity4.getClass())) {
+				++i2;
 			}
 		}
 
-		return var2;
+		return i2;
 	}
 
-	public void addLoadedEntities(List var1) {
-		this.loadedEntityList.addAll(var1);
+	public void addLoadedEntities(List list) {
+		this.loadedEntityList.addAll(list);
 
-		for(int var2 = 0; var2 < var1.size(); ++var2) {
-			this.obtainEntitySkin((Entity)var1.get(var2));
+		for(int i2 = 0; i2 < list.size(); ++i2) {
+			this.obtainEntitySkin((Entity)list.get(i2));
 		}
 
 	}
 
-	public void unloadEntities(List var1) {
-		this.unloadedEntityList.addAll(var1);
+	public void unloadEntities(List list) {
+		this.unloadedEntityList.addAll(list);
 	}
 
 	public void dropOldChunks() {
@@ -1752,130 +1929,130 @@
 
 	}
 
-	public boolean canBlockBePlacedAt(int var1, int var2, int var3, int var4, boolean var5) {
-		int var6 = this.getBlockId(var2, var3, var4);
-		Block var7 = Block.blocksList[var6];
-		Block var8 = Block.blocksList[var1];
-		AxisAlignedBB var9 = var8.getCollisionBoundingBoxFromPool(this, var2, var3, var4);
-		if(var5) {
-			var9 = null;
+	public boolean canBlockBePlacedAt(int blockID, int x, int y, int z, boolean ignoreBB) {
+		int i6 = this.getBlockId(x, y, z);
+		Block block7 = Block.blocksList[i6];
+		Block block8 = Block.blocksList[blockID];
+		AxisAlignedBB axisAlignedBB9 = block8.getCollisionBoundingBoxFromPool(this, x, y, z);
+		if(ignoreBB) {
+			axisAlignedBB9 = null;
 		}
 
-		return var9 != null && !this.checkIfAABBIsClear(var9) ? false : (var7 != Block.waterMoving && var7 != Block.waterStill && var7 != Block.lavaMoving && var7 != Block.lavaStill && var7 != Block.fire && var7 != Block.snow ? var1 > 0 && var7 == null && var8.canPlaceBlockAt(this, var2, var3, var4) : true);
-	}
-
-	public PathEntity getPathToEntity(Entity var1, Entity var2, float var3) {
-		int var4 = MathHelper.floor_double(var1.posX);
-		int var5 = MathHelper.floor_double(var1.posY);
-		int var6 = MathHelper.floor_double(var1.posZ);
-		int var7 = (int)(var3 + 16.0F);
-		int var8 = var4 - var7;
-		int var9 = var5 - var7;
-		int var10 = var6 - var7;
-		int var11 = var4 + var7;
-		int var12 = var5 + var7;
-		int var13 = var6 + var7;
-		ChunkCache var14 = new ChunkCache(this, var8, var9, var10, var11, var12, var13);
-		return (new Pathfinder(var14)).createEntityPathTo(var1, var2, var3);
-	}
-
-	public PathEntity getEntityPathToXYZ(Entity var1, int var2, int var3, int var4, float var5) {
-		int var6 = MathHelper.floor_double(var1.posX);
-		int var7 = MathHelper.floor_double(var1.posY);
-		int var8 = MathHelper.floor_double(var1.posZ);
-		int var9 = (int)(var5 + 8.0F);
-		int var10 = var6 - var9;
-		int var11 = var7 - var9;
-		int var12 = var8 - var9;
-		int var13 = var6 + var9;
-		int var14 = var7 + var9;
-		int var15 = var8 + var9;
-		ChunkCache var16 = new ChunkCache(this, var10, var11, var12, var13, var14, var15);
-		return (new Pathfinder(var16)).createEntityPathTo(var1, var2, var3, var4, var5);
-	}
-
-	public boolean isBlockProvidingPowerTo(int var1, int var2, int var3, int var4) {
-		int var5 = this.getBlockId(var1, var2, var3);
-		return var5 == 0 ? false : Block.blocksList[var5].isIndirectlyPoweringTo(this, var1, var2, var3, var4);
-	}
-
-	public boolean isBlockGettingPowered(int var1, int var2, int var3) {
-		return this.isBlockProvidingPowerTo(var1, var2 - 1, var3, 0) ? true : (this.isBlockProvidingPowerTo(var1, var2 + 1, var3, 1) ? true : (this.isBlockProvidingPowerTo(var1, var2, var3 - 1, 2) ? true : (this.isBlockProvidingPowerTo(var1, var2, var3 + 1, 3) ? true : (this.isBlockProvidingPowerTo(var1 - 1, var2, var3, 4) ? true : this.isBlockProvidingPowerTo(var1 + 1, var2, var3, 5)))));
-	}
-
-	public boolean isBlockIndirectlyProvidingPowerTo(int var1, int var2, int var3, int var4) {
-		if(this.isBlockNormalCube(var1, var2, var3)) {
-			return this.isBlockGettingPowered(var1, var2, var3);
+		return axisAlignedBB9 != null && !this.checkIfAABBIsClear(axisAlignedBB9) ? false : (block7 != Block.waterMoving && block7 != Block.waterStill && block7 != Block.lavaMoving && block7 != Block.lavaStill && block7 != Block.fire && block7 != Block.snow ? blockID > 0 && block7 == null && block8.canPlaceBlockAt(this, x, y, z) : true);
+	}
+
+	public PathEntity getPathToEntity(Entity entity1, Entity entity2, float float3) {
+		int i4 = MathHelper.floor_double(entity1.posX);
+		int i5 = MathHelper.floor_double(entity1.posY);
+		int i6 = MathHelper.floor_double(entity1.posZ);
+		int i7 = (int)(float3 + 16.0F);
+		int i8 = i4 - i7;
+		int i9 = i5 - i7;
+		int i10 = i6 - i7;
+		int i11 = i4 + i7;
+		int i12 = i5 + i7;
+		int i13 = i6 + i7;
+		ChunkCache chunkCache14 = new ChunkCache(this, i8, i9, i10, i11, i12, i13);
+		return (new Pathfinder(chunkCache14)).createEntityPathTo(entity1, entity2, float3);
+	}
+
+	public PathEntity getEntityPathToXYZ(Entity entity, int x, int y, int z, float float5) {
+		int i6 = MathHelper.floor_double(entity.posX);
+		int i7 = MathHelper.floor_double(entity.posY);
+		int i8 = MathHelper.floor_double(entity.posZ);
+		int i9 = (int)(float5 + 8.0F);
+		int i10 = i6 - i9;
+		int i11 = i7 - i9;
+		int i12 = i8 - i9;
+		int i13 = i6 + i9;
+		int i14 = i7 + i9;
+		int i15 = i8 + i9;
+		ChunkCache chunkCache16 = new ChunkCache(this, i10, i11, i12, i13, i14, i15);
+		return (new Pathfinder(chunkCache16)).createEntityPathTo(entity, x, y, z, float5);
+	}
+
+	public boolean isBlockProvidingPowerTo(int x, int y, int z, int side) {
+		int i5 = this.getBlockId(x, y, z);
+		return i5 == 0 ? false : Block.blocksList[i5].isIndirectlyPoweringTo(this, x, y, z, side);
+	}
+
+	public boolean isBlockGettingPowered(int x, int y, int z) {
+		return this.isBlockProvidingPowerTo(x, y - 1, z, 0) ? true : (this.isBlockProvidingPowerTo(x, y + 1, z, 1) ? true : (this.isBlockProvidingPowerTo(x, y, z - 1, 2) ? true : (this.isBlockProvidingPowerTo(x, y, z + 1, 3) ? true : (this.isBlockProvidingPowerTo(x - 1, y, z, 4) ? true : this.isBlockProvidingPowerTo(x + 1, y, z, 5)))));
+	}
+
+	public boolean isBlockIndirectlyProvidingPowerTo(int x, int y, int z, int side) {
+		if(this.isBlockNormalCube(x, y, z)) {
+			return this.isBlockGettingPowered(x, y, z);
 		} else {
-			int var5 = this.getBlockId(var1, var2, var3);
-			return var5 == 0 ? false : Block.blocksList[var5].isPoweringTo(this, var1, var2, var3, var4);
-		}
-	}
-
-	public boolean isBlockIndirectlyGettingPowered(int var1, int var2, int var3) {
-		return this.isBlockIndirectlyProvidingPowerTo(var1, var2 - 1, var3, 0) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1, var2 + 1, var3, 1) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1, var2, var3 - 1, 2) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1, var2, var3 + 1, 3) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1 - 1, var2, var3, 4) ? true : this.isBlockIndirectlyProvidingPowerTo(var1 + 1, var2, var3, 5)))));
-	}
-
-	public EntityPlayer getClosestPlayerToEntity(Entity var1, double var2) {
-		return this.getClosestPlayer(var1.posX, var1.posY, var1.posZ, var2);
-	}
-
-	public EntityPlayer getClosestPlayer(double var1, double var3, double var5, double var7) {
-		double var9 = -1.0D;
-		EntityPlayer var11 = null;
-
-		for(int var12 = 0; var12 < this.playerEntities.size(); ++var12) {
-			EntityPlayer var13 = (EntityPlayer)this.playerEntities.get(var12);
-			double var14 = var13.getDistanceSq(var1, var3, var5);
-			if((var7 < 0.0D || var14 < var7 * var7) && (var9 == -1.0D || var14 < var9)) {
-				var9 = var14;
-				var11 = var13;
-			}
-		}
-
-		return var11;
-	}
-
-	public void setChunkData(int var1, int var2, int var3, int var4, int var5, int var6, byte[] var7) {
-		int var8 = var1 >> 4;
-		int var9 = var3 >> 4;
-		int var10 = var1 + var4 - 1 >> 4;
-		int var11 = var3 + var6 - 1 >> 4;
-		int var12 = 0;
-		int var13 = var2;
-		int var14 = var2 + var5;
-		if(var2 < 0) {
-			var13 = 0;
-		}
-
-		if(var14 > 128) {
-			var14 = 128;
-		}
-
-		for(int var15 = var8; var15 <= var10; ++var15) {
-			int var16 = var1 - var15 * 16;
-			int var17 = var1 + var4 - var15 * 16;
-			if(var16 < 0) {
-				var16 = 0;
-			}
-
-			if(var17 > 16) {
-				var17 = 16;
-			}
-
-			for(int var18 = var9; var18 <= var11; ++var18) {
-				int var19 = var3 - var18 * 16;
-				int var20 = var3 + var6 - var18 * 16;
-				if(var19 < 0) {
-					var19 = 0;
-				}
-
-				if(var20 > 16) {
-					var20 = 16;
-				}
-
-				var12 = this.getChunkFromChunkCoords(var15, var18).setChunkData(var7, var16, var13, var19, var17, var14, var20, var12);
-				this.markBlocksDirty(var15 * 16 + var16, var13, var18 * 16 + var19, var15 * 16 + var17, var14, var18 * 16 + var20);
+			int i5 = this.getBlockId(x, y, z);
+			return i5 == 0 ? false : Block.blocksList[i5].isPoweringTo(this, x, y, z, side);
+		}
+	}
+
+	public boolean isBlockIndirectlyGettingPowered(int x, int y, int z) {
+		return this.isBlockIndirectlyProvidingPowerTo(x, y - 1, z, 0) ? true : (this.isBlockIndirectlyProvidingPowerTo(x, y + 1, z, 1) ? true : (this.isBlockIndirectlyProvidingPowerTo(x, y, z - 1, 2) ? true : (this.isBlockIndirectlyProvidingPowerTo(x, y, z + 1, 3) ? true : (this.isBlockIndirectlyProvidingPowerTo(x - 1, y, z, 4) ? true : this.isBlockIndirectlyProvidingPowerTo(x + 1, y, z, 5)))));
+	}
+
+	public EntityPlayer getClosestPlayerToEntity(Entity entity, double distance) {
+		return this.getClosestPlayer(entity.posX, entity.posY, entity.posZ, distance);
+	}
+
+	public EntityPlayer getClosestPlayer(double posX, double posY, double posZ, double distance) {
+		double d9 = -1.0D;
+		EntityPlayer entityPlayer11 = null;
+
+		for(int i12 = 0; i12 < this.playerEntities.size(); ++i12) {
+			EntityPlayer entityPlayer13 = (EntityPlayer)this.playerEntities.get(i12);
+			double d14 = entityPlayer13.getDistanceSq(posX, posY, posZ);
+			if((distance < 0.0D || d14 < distance * distance) && (d9 == -1.0D || d14 < d9)) {
+				d9 = d14;
+				entityPlayer11 = entityPlayer13;
+			}
+		}
+
+		return entityPlayer11;
+	}
+
+	public void setChunkData(int minX, int minY, int minZ, int maxX, int maxY, int maxZ, byte[] blocks) {
+		int i8 = minX >> 4;
+		int i9 = minZ >> 4;
+		int i10 = minX + maxX - 1 >> 4;
+		int i11 = minZ + maxZ - 1 >> 4;
+		int i12 = 0;
+		int i13 = minY;
+		int i14 = minY + maxY;
+		if(minY < 0) {
+			i13 = 0;
+		}
+
+		if(i14 > 128) {
+			i14 = 128;
+		}
+
+		for(int i15 = i8; i15 <= i10; ++i15) {
+			int i16 = minX - i15 * 16;
+			int i17 = minX + maxX - i15 * 16;
+			if(i16 < 0) {
+				i16 = 0;
+			}
+
+			if(i17 > 16) {
+				i17 = 16;
+			}
+
+			for(int i18 = i9; i18 <= i11; ++i18) {
+				int i19 = minZ - i18 * 16;
+				int i20 = minZ + maxZ - i18 * 16;
+				if(i19 < 0) {
+					i19 = 0;
+				}
+
+				if(i20 > 16) {
+					i20 = 16;
+				}
+
+				i12 = this.getChunkFromChunkCoords(i15, i18).setChunkData(blocks, i16, i13, i19, i17, i14, i20, i12);
+				this.markBlocksDirty(i15 * 16 + i16, i13, i18 * 16 + i19, i15 * 16 + i17, i14, i18 * 16 + i20);
 			}
 		}
 
@@ -1886,50 +2063,54 @@
 
 	public void checkSessionLock() {
 		try {
-			File var1 = new File(this.saveDirectory, "session.lock");
-			DataInputStream var2 = new DataInputStream(new FileInputStream(var1));
+			File file1 = new File(this.saveDirectory, "session.lock");
+			DataInputStream dataInputStream2 = new DataInputStream(new FileInputStream(file1));
 
 			try {
-				if(var2.readLong() != this.lockTimestamp) {
-					throw new MinecraftException("The save is being accessed from another location, aborting");
+				if(dataInputStream2.readLong() != this.lockTimestamp) {
+					InputHandler.mc.changeWorld((World)null, "", false);
+					InputHandler.mc.displayGuiScreen(new GuiMainMenu());
+					InputHandler.mc.displayGuiScreen(new GuiConnectFailed("", "This save is being accessed from another location."));
 				}
 			} finally {
-				var2.close();
-			}
-
-		} catch (IOException var7) {
-			throw new MinecraftException("Failed to check session lock, aborting");
-		}
-	}
-
-	public void setWorldTime(long var1) {
-		this.worldTime = var1;
-	}
-
-	public void joinEntityInSurroundings(Entity var1) {
-		int var2 = MathHelper.floor_double(var1.posX / 16.0D);
-		int var3 = MathHelper.floor_double(var1.posZ / 16.0D);
-		byte var4 = 2;
-
-		for(int var5 = var2 - var4; var5 <= var2 + var4; ++var5) {
-			for(int var6 = var3 - var4; var6 <= var3 + var4; ++var6) {
-				this.getChunkFromChunkCoords(var5, var6);
-			}
-		}
-
-		if(!this.loadedEntityList.contains(var1)) {
-			System.out.println("REINSERTING PLAYER!");
-			this.loadedEntityList.add(var1);
+				dataInputStream2.close();
+			}
+		} catch (IOException iOException7) {
+			InputHandler.mc.changeWorld((World)null, "", false);
+			InputHandler.mc.displayGuiScreen(new GuiMainMenu());
+			InputHandler.mc.displayGuiScreen(new GuiConnectFailed("", "Failed to check session lock."));
+		}
+
+	}
+
+	public void setWorldTime(long time) {
+		this.worldTime = time;
+	}
+
+	public void joinEntityInSurroundings(Entity entity) {
+		int i2 = MathHelper.floor_double(entity.posX / 16.0D);
+		int i3 = MathHelper.floor_double(entity.posZ / 16.0D);
+		byte b4 = 2;
+
+		for(int i5 = i2 - b4; i5 <= i2 + b4; ++i5) {
+			for(int i6 = i3 - b4; i6 <= i3 + b4; ++i6) {
+				this.getChunkFromChunkCoords(i5, i6);
+			}
+		}
+
+		if(!this.loadedEntityList.contains(entity)) {
+			System.out.println("REINSERTING PLAYER! " + ((EntityPlayer)entity).username);
+			this.loadedEntityList.add(entity);
 		}
 
 	}
 
 	static {
-		float var0 = 0.05F;
+		float f0 = 0.05F;
 
-		for(int var1 = 0; var1 <= 15; ++var1) {
-			float var2 = 1.0F - (float)var1 / 15.0F;
-			lightBrightnessTable[var1] = (1.0F - var2) / (var2 * 3.0F + 1.0F) * (1.0F - var0) + var0;
+		for(int i1 = 0; i1 <= 15; ++i1) {
+			float f2 = 1.0F - (float)i1 / 15.0F;
+			lightBrightnessTable[i1] = (1.0F - f2) / (f2 * 3.0F + 1.0F) * (1.0F - f0) + f0;
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/EntityOtherPlayerMPUnknownClass.java
@@ -1,0 +1,51 @@
+package net.minecraft.src;
+
+public class EntityOtherPlayerMPUnknownClass extends EntityOtherPlayerMP {
+	HandlerPlayDemo field_9039_4T67u5DrK5VRC9XHzasX05qoPY1RE180o297SnfFmfpgFTtBwRT6s53O7M7x;
+	int field_9042_02T89qK8l4TTf73hk3u8L3iC9zA96g1C8bm18I8h0qhOFo8igW3P9UHE5pp0 = 0;
+	int field_9040_9sT33E3Otr4kMppEeO5Fj8Y2tIq0i1U84Z2PgHMS5jGSuwMwF33nWD5d1X94 = 0;
+	public boolean field_9041_7NupkuQ1lSGoC9624rm26tc960f5I8Nuu6F13q14526SMi8WK3oY6wlnVWf2 = true;
+
+	public EntityOtherPlayerMPUnknownClass(World vg, HandlerPlayDemo rw) {
+		super(vg, rw.field_11430_0OdUr2nD4R8uO36Sd51QoP94Lm2202x55uFJQVi7Sy5OO23j6PTNlph9id4f);
+		this.setLocationAndAngles(((HandlerPlayDemoUnknownClass2)rw.field_11431_637P37TE9gmDT57yVlTZ73i576up8cwuDF63ofWaw7wL7LacaR24xM7BXzu5.get(0)).field_11238_06ia42Crh5k64k27yg1rkw01iek6FWqXq038Nz5xCsr1186gZTb5QrQC9Ee6, ((HandlerPlayDemoUnknownClass2)rw.field_11431_637P37TE9gmDT57yVlTZ73i576up8cwuDF63ofWaw7wL7LacaR24xM7BXzu5.get(0)).field_11239_27ngU1sJjzhN2F1lwIlqzdWsQU09NIv1oOAETINS9vPghD0aR3wNidfKbmq8, ((HandlerPlayDemoUnknownClass2)rw.field_11431_637P37TE9gmDT57yVlTZ73i576up8cwuDF63ofWaw7wL7LacaR24xM7BXzu5.get(0)).field_11242_70hhZNfPCn7F2A43sUn292vmU47FJ2Xqf8wxmaj0Jvht0gJ3JZdg1B11ZIS4, (float)((HandlerPlayDemoUnknownClass2)rw.field_11431_637P37TE9gmDT57yVlTZ73i576up8cwuDF63ofWaw7wL7LacaR24xM7BXzu5.get(0)).field_11243_366213Kygu44q4VZJiDT5dY5qsS8R35a4wMyFfwM8f9lEhNH41knI2ixxw3K, (float)((HandlerPlayDemoUnknownClass2)rw.field_11431_637P37TE9gmDT57yVlTZ73i576up8cwuDF63ofWaw7wL7LacaR24xM7BXzu5.get(0)).field_11241_1pBNhz72hG0DM4M2G197Aq7qWjMeY65Hl12oPon7Y3795IIGRLKfWH6264yk);
+		this.field_9039_4T67u5DrK5VRC9XHzasX05qoPY1RE180o297SnfFmfpgFTtBwRT6s53O7M7x = rw;
+		this.yOffset = 0.0F;
+		this.stepHeight = 0.0F;
+		this.noClip = true;
+	}
+
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		return false;
+	}
+
+	public void applyEntityCollision(Entity entity) {
+	}
+
+	public void onLivingUpdate() {
+		if(this.field_9042_02T89qK8l4TTf73hk3u8L3iC9zA96g1C8bm18I8h0qhOFo8igW3P9UHE5pp0 < this.field_9039_4T67u5DrK5VRC9XHzasX05qoPY1RE180o297SnfFmfpgFTtBwRT6s53O7M7x.field_11431_637P37TE9gmDT57yVlTZ73i576up8cwuDF63ofWaw7wL7LacaR24xM7BXzu5.size()) {
+			HandlerPlayDemoUnknownClass2 handlerPlayDemoUnknownClass21 = (HandlerPlayDemoUnknownClass2)this.field_9039_4T67u5DrK5VRC9XHzasX05qoPY1RE180o297SnfFmfpgFTtBwRT6s53O7M7x.field_11431_637P37TE9gmDT57yVlTZ73i576up8cwuDF63ofWaw7wL7LacaR24xM7BXzu5.get(this.field_9042_02T89qK8l4TTf73hk3u8L3iC9zA96g1C8bm18I8h0qhOFo8igW3P9UHE5pp0);
+			this.setLocationAndAngles(handlerPlayDemoUnknownClass21.field_11238_06ia42Crh5k64k27yg1rkw01iek6FWqXq038Nz5xCsr1186gZTb5QrQC9Ee6, handlerPlayDemoUnknownClass21.field_11239_27ngU1sJjzhN2F1lwIlqzdWsQU09NIv1oOAETINS9vPghD0aR3wNidfKbmq8 - (double)1.62F, handlerPlayDemoUnknownClass21.field_11242_70hhZNfPCn7F2A43sUn292vmU47FJ2Xqf8wxmaj0Jvht0gJ3JZdg1B11ZIS4, (float)handlerPlayDemoUnknownClass21.field_11243_366213Kygu44q4VZJiDT5dY5qsS8R35a4wMyFfwM8f9lEhNH41knI2ixxw3K, (float)handlerPlayDemoUnknownClass21.field_11241_1pBNhz72hG0DM4M2G197Aq7qWjMeY65Hl12oPon7Y3795IIGRLKfWH6264yk);
+			this.limbSwing = (float)handlerPlayDemoUnknownClass21.field_11237_979Vt94Ikeubje8aq02QS2ct4vv1F2xoYEYcud7ff1548HLvX33CvjHHnP0K;
+			this.limbYaw = (float)handlerPlayDemoUnknownClass21.field_11236_73B65S5lxs1r7B0z1M2S4uMTH4ZE43GT5xQV19C44T08jAeG7ae4e6V605K6;
+			this.motionY = 0.0D;
+			if(this.field_9039_4T67u5DrK5VRC9XHzasX05qoPY1RE180o297SnfFmfpgFTtBwRT6s53O7M7x.field_11432_08Cq759cm94gk5tNi09771XqCD6UcInYC8zHgZJS1aDD9g9FLZ8ZaW69dqkS.size() > 0 && this.field_9039_4T67u5DrK5VRC9XHzasX05qoPY1RE180o297SnfFmfpgFTtBwRT6s53O7M7x.field_11432_08Cq759cm94gk5tNi09771XqCD6UcInYC8zHgZJS1aDD9g9FLZ8ZaW69dqkS.size() > this.field_9040_9sT33E3Otr4kMppEeO5Fj8Y2tIq0i1U84Z2PgHMS5jGSuwMwF33nWD5d1X94 && ((HandlerPlayDemoUnknownClass3)this.field_9039_4T67u5DrK5VRC9XHzasX05qoPY1RE180o297SnfFmfpgFTtBwRT6s53O7M7x.field_11432_08Cq759cm94gk5tNi09771XqCD6UcInYC8zHgZJS1aDD9g9FLZ8ZaW69dqkS.get(this.field_9040_9sT33E3Otr4kMppEeO5Fj8Y2tIq0i1U84Z2PgHMS5jGSuwMwF33nWD5d1X94)).field_11851_6Isyx6ibE614572UHOY1hG1DI1xi348XJ8wDp59Qzv9n59hSYsTm088vzK93 == (long)this.field_9042_02T89qK8l4TTf73hk3u8L3iC9zA96g1C8bm18I8h0qhOFo8igW3P9UHE5pp0) {
+				((HandlerPlayDemoUnknownClass3)this.field_9039_4T67u5DrK5VRC9XHzasX05qoPY1RE180o297SnfFmfpgFTtBwRT6s53O7M7x.field_11432_08Cq759cm94gk5tNi09771XqCD6UcInYC8zHgZJS1aDD9g9FLZ8ZaW69dqkS.get(this.field_9040_9sT33E3Otr4kMppEeO5Fj8Y2tIq0i1U84Z2PgHMS5jGSuwMwF33nWD5d1X94++)).func_11849_8m6693d8dhYR0w4HrTryNkH00xQWV6oS9Yjo7ME4Oro3F23Zt91YucB1PvA1(this);
+			}
+
+			++this.field_9042_02T89qK8l4TTf73hk3u8L3iC9zA96g1C8bm18I8h0qhOFo8igW3P9UHE5pp0;
+		} else {
+			this.func_9038_1vEc42Y7c91b4gM7oY72q1v1gF1P33XCpUko2cq23lKl2JrT3iJUBoY1U7dI();
+		}
+
+		super.onLivingUpdate();
+	}
+
+	public void func_9038_1vEc42Y7c91b4gM7oY72q1v1gF1P33XCpUko2cq23lKl2JrT3iJUBoY1U7dI() {
+		this.field_9041_7NupkuQ1lSGoC9624rm26tc960f5I8Nuu6F13q14526SMi8WK3oY6wlnVWf2 = false;
+		this.dead = true;
+		this.onDeath(this);
+		this.kill();
+		this.worldObj.setEntityDead(this);
+	}
+}
--- net/minecraft/src/StepSoundGlass.java
+++ net/minecraft/src/StepSoundGlass.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
-final class StepSoundGlass extends StepSound {
-	StepSoundGlass(String var1, float var2, float var3) {
-		super(var1, var2, var3);
+public final class StepSoundGlass extends StepSound {
+	public StepSoundGlass(String string, float float2, float float3) {
+		super(string, float2, float3);
 	}
 
 	public String getBreakSound() {
--- net/minecraft/src/RenderArrow.java
+++ net/minecraft/src/RenderArrow.java
@@ -4,64 +4,82 @@
 import org.lwjgl.opengl.GL12;
 
 public class RenderArrow extends Render {
-	public void renderArrow(EntityArrow var1, double var2, double var4, double var6, float var8, float var9) {
-		this.loadTexture("/item/arrows.png");
+	public boolean shadeless = false;
+
+	public RenderArrow(boolean boolean1) {
+		this.shadeless = boolean1;
+	}
+
+	public void renderArrow(EntityFirable oj, double double2, double double3, double double4, float float5, float float6) {
+		if(this.shadeless) {
+			RenderHelper.disableStandardItemLighting();
+		}
+
+		this.loadTexture(oj.getTexture());
 		GL11.glPushMatrix();
-		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
-		GL11.glRotatef(var1.prevRotationYaw + (var1.rotationYaw - var1.prevRotationYaw) * var9 - 90.0F, 0.0F, 1.0F, 0.0F);
-		GL11.glRotatef(var1.prevRotationPitch + (var1.rotationPitch - var1.prevRotationPitch) * var9, 0.0F, 0.0F, 1.0F);
-		Tessellator var10 = Tessellator.instance;
-		byte var11 = 0;
-		float var12 = 0.0F;
-		float var13 = 0.5F;
-		float var14 = (float)(0 + var11 * 10) / 32.0F;
-		float var15 = (float)(5 + var11 * 10) / 32.0F;
-		float var16 = 0.0F;
-		float var17 = 0.15625F;
-		float var18 = (float)(5 + var11 * 10) / 32.0F;
-		float var19 = (float)(10 + var11 * 10) / 32.0F;
-		float var20 = 0.05625F;
+		GL11.glTranslatef((float)double2, (float)double3, (float)double4);
+		GL11.glRotatef(oj.prevRotationYaw + (oj.rotationYaw - oj.prevRotationYaw) * float6 - 90.0F, 0.0F, 1.0F, 0.0F);
+		GL11.glRotatef(oj.prevRotationPitch + (oj.rotationPitch - oj.prevRotationPitch) * float6, 0.0F, 0.0F, 1.0F);
+		Tessellator tessellator10 = Tessellator.instance;
+		byte b11 = 0;
+		float f12 = 0.0F;
+		float f13 = 0.5F;
+		float f14 = (float)(0 + b11 * 10) / 32.0F;
+		float f15 = (float)(5 + b11 * 10) / 32.0F;
+		float f16 = 0.0F;
+		float f17 = 0.15625F;
+		float f18 = (float)(5 + b11 * 10) / 32.0F;
+		float f19 = (float)(10 + b11 * 10) / 32.0F;
+		float f20 = 0.05625F;
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-		float var21 = (float)var1.arrowShake - var9;
-		if(var21 > 0.0F) {
-			float var22 = -MathHelper.sin(var21 * 3.0F) * var21;
-			GL11.glRotatef(var22, 0.0F, 0.0F, 1.0F);
+		float f21 = oj.arrowShake - float6;
+		if(f21 > 0.0F) {
+			float f22 = -MathHelper.sin(f21 * 3.0F) * f21;
+			GL11.glRotatef(f22, 0.0F, 0.0F, 1.0F);
+		}
+
+		if(this.shadeless) {
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		}
 
 		GL11.glRotatef(45.0F, 1.0F, 0.0F, 0.0F);
-		GL11.glScalef(var20, var20, var20);
+		GL11.glScalef(f20, f20, f20);
 		GL11.glTranslatef(-4.0F, 0.0F, 0.0F);
-		GL11.glNormal3f(var20, 0.0F, 0.0F);
-		var10.startDrawingQuads();
-		var10.addVertexWithUV(-7.0D, -2.0D, -2.0D, (double)var16, (double)var18);
-		var10.addVertexWithUV(-7.0D, -2.0D, 2.0D, (double)var17, (double)var18);
-		var10.addVertexWithUV(-7.0D, 2.0D, 2.0D, (double)var17, (double)var19);
-		var10.addVertexWithUV(-7.0D, 2.0D, -2.0D, (double)var16, (double)var19);
-		var10.draw();
-		GL11.glNormal3f(-var20, 0.0F, 0.0F);
-		var10.startDrawingQuads();
-		var10.addVertexWithUV(-7.0D, 2.0D, -2.0D, (double)var16, (double)var18);
-		var10.addVertexWithUV(-7.0D, 2.0D, 2.0D, (double)var17, (double)var18);
-		var10.addVertexWithUV(-7.0D, -2.0D, 2.0D, (double)var17, (double)var19);
-		var10.addVertexWithUV(-7.0D, -2.0D, -2.0D, (double)var16, (double)var19);
-		var10.draw();
+		GL11.glNormal3f(f20, 0.0F, 0.0F);
+		tessellator10.startDrawingQuads();
+		tessellator10.addVertexWithUV(-7.0D, -2.0D, -2.0D, (double)f16, (double)f18);
+		tessellator10.addVertexWithUV(-7.0D, -2.0D, 2.0D, (double)f17, (double)f18);
+		tessellator10.addVertexWithUV(-7.0D, 2.0D, 2.0D, (double)f17, (double)f19);
+		tessellator10.addVertexWithUV(-7.0D, 2.0D, -2.0D, (double)f16, (double)f19);
+		tessellator10.draw();
+		GL11.glNormal3f(-f20, 0.0F, 0.0F);
+		tessellator10.startDrawingQuads();
+		tessellator10.addVertexWithUV(-7.0D, 2.0D, -2.0D, (double)f16, (double)f18);
+		tessellator10.addVertexWithUV(-7.0D, 2.0D, 2.0D, (double)f17, (double)f18);
+		tessellator10.addVertexWithUV(-7.0D, -2.0D, 2.0D, (double)f17, (double)f19);
+		tessellator10.addVertexWithUV(-7.0D, -2.0D, -2.0D, (double)f16, (double)f19);
+		tessellator10.draw();
 
-		for(int var23 = 0; var23 < 4; ++var23) {
+		for(int i23 = 0; i23 < 4; ++i23) {
 			GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
-			GL11.glNormal3f(0.0F, 0.0F, var20);
-			var10.startDrawingQuads();
-			var10.addVertexWithUV(-8.0D, -2.0D, 0.0D, (double)var12, (double)var14);
-			var10.addVertexWithUV(8.0D, -2.0D, 0.0D, (double)var13, (double)var14);
-			var10.addVertexWithUV(8.0D, 2.0D, 0.0D, (double)var13, (double)var15);
-			var10.addVertexWithUV(-8.0D, 2.0D, 0.0D, (double)var12, (double)var15);
-			var10.draw();
+			GL11.glNormal3f(0.0F, 0.0F, f20);
+			tessellator10.startDrawingQuads();
+			tessellator10.addVertexWithUV(-8.0D, -2.0D, 0.0D, (double)f12, (double)f14);
+			tessellator10.addVertexWithUV(8.0D, -2.0D, 0.0D, (double)f13, (double)f14);
+			tessellator10.addVertexWithUV(8.0D, 2.0D, 0.0D, (double)f13, (double)f15);
+			tessellator10.addVertexWithUV(-8.0D, 2.0D, 0.0D, (double)f12, (double)f15);
+			tessellator10.draw();
 		}
 
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
 		GL11.glPopMatrix();
+		if(this.shadeless) {
+			RenderHelper.enableStandardItemLighting();
+		}
+
 	}
 
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderArrow((EntityArrow)var1, var2, var4, var6, var8, var9);
+	public void doRender(Entity xy, double double2, double double3, double double4, float float5, float float6) {
+		this.renderArrow((EntityFirable)xy, double2, double3, double4, float5, float6);
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockPillar.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+
+public class BlockPillar extends Block {
+	public BlockPillar(int id, int blockIndex, Material material) {
+		super(id, blockIndex, material);
+	}
+
+	public void getCollidingBoundingBoxes(World world, int x, int y, int z, AxisAlignedBB aabb, ArrayList arrayList, Entity xy) {
+		if(!(world instanceof ZMWorld) || !(xy instanceof EntityZombie)) {
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList, xy);
+		}
+
+	}
+}
--- net/minecraft/src/ItemSign.java
+++ net/minecraft/src/ItemSign.java
@@ -1,49 +1,49 @@
 package net.minecraft.src;
 
 public class ItemSign extends Item {
-	public ItemSign(int var1) {
-		super(var1);
+	public ItemSign(int itemID) {
+		super(itemID);
 		this.maxDamage = 64;
 		this.maxStackSize = 1;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 == 0) {
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(side == 0) {
 			return false;
-		} else if(!var3.getBlockMaterial(var4, var5, var6).isSolid()) {
+		} else if(!world.getBlockMaterial(x, y, z).isSolid()) {
 			return false;
 		} else {
-			if(var7 == 1) {
-				++var5;
-			}
-
-			if(var7 == 2) {
-				--var6;
-			}
-
-			if(var7 == 3) {
-				++var6;
-			}
-
-			if(var7 == 4) {
-				--var4;
-			}
-
-			if(var7 == 5) {
-				++var4;
-			}
-
-			if(!Block.signStanding.canPlaceBlockAt(var3, var4, var5, var6)) {
+			if(side == 1) {
+				++y;
+			}
+
+			if(side == 2) {
+				--z;
+			}
+
+			if(side == 3) {
+				++z;
+			}
+
+			if(side == 4) {
+				--x;
+			}
+
+			if(side == 5) {
+				++x;
+			}
+
+			if(!Block.signStanding.canPlaceBlockAt(world, x, y, z)) {
 				return false;
 			} else {
-				if(var7 == 1) {
-					var3.setBlockAndMetadataWithNotify(var4, var5, var6, Block.signStanding.blockID, MathHelper.floor_double((double)((var2.rotationYaw + 180.0F) * 16.0F / 360.0F) + 0.5D) & 15);
+				if(side == 1) {
+					world.setBlockAndMetadataWithNotify(x, y, z, Block.signStanding.blockID, MathHelper.floor_double((double)((entityPlayer.rotationYaw + 180.0F) * 16.0F / 360.0F) + 0.5D) & 15);
 				} else {
-					var3.setBlockAndMetadataWithNotify(var4, var5, var6, Block.signWall.blockID, var7);
+					world.setBlockAndMetadataWithNotify(x, y, z, Block.signWall.blockID, side);
 				}
 
-				--var1.stackSize;
-				var2.displayGUIEditSign((TileEntitySign)var3.getBlockTileEntity(var4, var5, var6));
+				--stack.stackSize;
+				entityPlayer.displayGUIEditSign((TileEntitySign)world.getBlockTileEntity(x, y, z));
 				return true;
 			}
 		}
--- /dev/null
+++ net/minecraft/src/Packet71.java
@@ -1,0 +1,55 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet71 extends Packet {
+	public String field_8472_28DRek4v4KQUw9KLE6Oc1AsTx74xRWg892e8w2RDtc17be6dHpNr005yCRW6 = "";
+	public double field_8474_145olukCshOr7AbHQ37u7Mek5J4P72YUunedJaJO16hjSfTGODn4m9m5a1li;
+	public double field_8470_9IrDiRRUrGdyFa6A7PTN8n2gN7KM6m7hJt8zUc23Te1J28vMxI4uo31CBYay;
+	public double field_8475_3jlw1j330Q8Z8q9Qo97DvEh5W2hcFrGUFMo0W390y314Nds665s329qCvr51;
+	public float field_8471_102rZg1EIQM0yf5sxDO3Mo7Ck6i5Z4kWuhm2PPl40f7rZS7L9M2G9ciup82Q;
+	public float field_8473_42sARdt3h0YOa81x8UlPl0CEJtC90d59hSH909CU366FzIF4B45o6aiwz125;
+
+	public Packet71() {
+	}
+
+	public Packet71(String string, double double2, double double3, double double4, float float5, float float6) {
+		this.field_8472_28DRek4v4KQUw9KLE6Oc1AsTx74xRWg892e8w2RDtc17be6dHpNr005yCRW6 = string;
+		this.field_8474_145olukCshOr7AbHQ37u7Mek5J4P72YUunedJaJO16hjSfTGODn4m9m5a1li = double2;
+		this.field_8470_9IrDiRRUrGdyFa6A7PTN8n2gN7KM6m7hJt8zUc23Te1J28vMxI4uo31CBYay = double3;
+		this.field_8475_3jlw1j330Q8Z8q9Qo97DvEh5W2hcFrGUFMo0W390y314Nds665s329qCvr51 = double4;
+		this.field_8471_102rZg1EIQM0yf5sxDO3Mo7Ck6i5Z4kWuhm2PPl40f7rZS7L9M2G9ciup82Q = float5;
+		this.field_8473_42sARdt3h0YOa81x8UlPl0CEJtC90d59hSH909CU366FzIF4B45o6aiwz125 = float6;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.field_8472_28DRek4v4KQUw9KLE6Oc1AsTx74xRWg892e8w2RDtc17be6dHpNr005yCRW6 = dataInputStream.readUTF();
+		this.field_8474_145olukCshOr7AbHQ37u7Mek5J4P72YUunedJaJO16hjSfTGODn4m9m5a1li = dataInputStream.readDouble();
+		this.field_8470_9IrDiRRUrGdyFa6A7PTN8n2gN7KM6m7hJt8zUc23Te1J28vMxI4uo31CBYay = dataInputStream.readDouble();
+		this.field_8475_3jlw1j330Q8Z8q9Qo97DvEh5W2hcFrGUFMo0W390y314Nds665s329qCvr51 = dataInputStream.readDouble();
+		this.field_8471_102rZg1EIQM0yf5sxDO3Mo7Ck6i5Z4kWuhm2PPl40f7rZS7L9M2G9ciup82Q = dataInputStream.readFloat();
+		this.field_8473_42sARdt3h0YOa81x8UlPl0CEJtC90d59hSH909CU366FzIF4B45o6aiwz125 = dataInputStream.readFloat();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.field_8472_28DRek4v4KQUw9KLE6Oc1AsTx74xRWg892e8w2RDtc17be6dHpNr005yCRW6);
+		dataOutputStream.writeDouble(this.field_8474_145olukCshOr7AbHQ37u7Mek5J4P72YUunedJaJO16hjSfTGODn4m9m5a1li);
+		dataOutputStream.writeDouble(this.field_8470_9IrDiRRUrGdyFa6A7PTN8n2gN7KM6m7hJt8zUc23Te1J28vMxI4uo31CBYay);
+		dataOutputStream.writeDouble(this.field_8475_3jlw1j330Q8Z8q9Qo97DvEh5W2hcFrGUFMo0W390y314Nds665s329qCvr51);
+		dataOutputStream.writeFloat(this.field_8471_102rZg1EIQM0yf5sxDO3Mo7Ck6i5Z4kWuhm2PPl40f7rZS7L9M2G9ciup82Q);
+		dataOutputStream.writeFloat(this.field_8473_42sARdt3h0YOa81x8UlPl0CEJtC90d59hSH909CU366FzIF4B45o6aiwz125);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		if(netHandler instanceof NetClientHandler) {
+			((NetClientHandler)netHandler).func_9567_8Uqzx4T0U7C4w4y2Ni3ekUd757k1g1Aslx6MbBL4gp7k8VP7S54Cq5ura317(new Packet71(this.field_8472_28DRek4v4KQUw9KLE6Oc1AsTx74xRWg892e8w2RDtc17be6dHpNr005yCRW6, this.field_8474_145olukCshOr7AbHQ37u7Mek5J4P72YUunedJaJO16hjSfTGODn4m9m5a1li, this.field_8470_9IrDiRRUrGdyFa6A7PTN8n2gN7KM6m7hJt8zUc23Te1J28vMxI4uo31CBYay, this.field_8475_3jlw1j330Q8Z8q9Qo97DvEh5W2hcFrGUFMo0W390y314Nds665s329qCvr51, this.field_8471_102rZg1EIQM0yf5sxDO3Mo7Ck6i5Z4kWuhm2PPl40f7rZS7L9M2G9ciup82Q, this.field_8473_42sARdt3h0YOa81x8UlPl0CEJtC90d59hSH909CU366FzIF4B45o6aiwz125));
+		}
+
+	}
+
+	public int getPacketSize() {
+		return this.field_8472_28DRek4v4KQUw9KLE6Oc1AsTx74xRWg892e8w2RDtc17be6dHpNr005yCRW6.getBytes().length + 24 + 8;
+	}
+}
--- net/minecraft/src/EntityPig.java
+++ net/minecraft/src/EntityPig.java
@@ -3,21 +3,21 @@
 public class EntityPig extends EntityAnimal {
 	public boolean saddled = false;
 
-	public EntityPig(World var1) {
-		super(var1);
+	public EntityPig(World world) {
+		super(world);
 		this.texture = "/mob/pig.png";
 		this.setSize(0.9F, 0.9F);
 		this.saddled = false;
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setBoolean("Saddle", this.saddled);
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+		nbttagcompound.setBoolean("Saddle", this.saddled);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.saddled = var1.getBoolean("Saddle");
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+		this.saddled = nbttagcompound.getBoolean("Saddle");
 	}
 
 	protected String getLivingSound() {
@@ -32,9 +32,9 @@
 		return "mob.pigdeath";
 	}
 
-	public boolean interact(EntityPlayer var1) {
+	public boolean interact(EntityPlayer entityPlayer) {
 		if(this.saddled) {
-			var1.mountEntity(this);
+			entityPlayer.mountEntity(this);
 			return true;
 		} else {
 			return false;
@@ -42,6 +42,6 @@
 	}
 
 	protected int getDropItemId() {
-		return Item.porkRaw.shiftedIndex;
+		return this.fire > 0 ? Item.porkCooked.shiftedIndex : Item.porkRaw.shiftedIndex;
 	}
 }
--- net/minecraft/src/ClippingHelperImplementation.java
+++ net/minecraft/src/ClippingHelperImplementation.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import java.nio.FloatBuffer;
+
 import org.lwjgl.opengl.GL11;
 
 public class ClippingHelperImplementation extends ClippingHelper {
@@ -14,12 +15,12 @@
 		return instance;
 	}
 
-	private void normalize(float[][] var1, int var2) {
-		float var3 = MathHelper.sqrt_float(var1[var2][0] * var1[var2][0] + var1[var2][1] * var1[var2][1] + var1[var2][2] * var1[var2][2]);
-		var1[var2][0] /= var3;
-		var1[var2][1] /= var3;
-		var1[var2][2] /= var3;
-		var1[var2][3] /= var3;
+	private void normalize(float[][] arr, int integer) {
+		float f3 = MathHelper.sqrt_float(arr[integer][0] * arr[integer][0] + arr[integer][1] * arr[integer][1] + arr[integer][2] * arr[integer][2]);
+		arr[integer][0] /= f3;
+		arr[integer][1] /= f3;
+		arr[integer][2] /= f3;
+		arr[integer][3] /= f3;
 	}
 
 	private void init() {
--- net/minecraft/src/BlockSnow.java
+++ net/minecraft/src/BlockSnow.java
@@ -3,13 +3,13 @@
 import java.util.Random;
 
 public class BlockSnow extends Block {
-	protected BlockSnow(int var1, int var2) {
-		super(var1, var2, Material.snow);
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F / 16.0F, 1.0F);
+	protected BlockSnow(int id, int blockIndex) {
+		super(id, blockIndex, Material.snow);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
 		this.setTickOnLoad(true);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -21,55 +21,55 @@
 		return false;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3 - 1, var4);
-		return var5 != 0 && Block.blocksList[var5].isOpaqueCube() ? var1.getBlockMaterial(var2, var3 - 1, var4).getIsSolid() : false;
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		this.canSnowStay(var1, var2, var3, var4);
-	}
-
-	private boolean canSnowStay(World var1, int var2, int var3, int var4) {
-		if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		int i5 = world.getBlockId(x, y - 1, z);
+		return i5 != 0 && Block.blocksList[i5].isOpaqueCube() ? world.getBlockMaterial(x, y - 1, z).getIsSolid() : false;
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		this.canSnowStay(world, x, y, z);
+	}
+
+	private boolean canSnowStay(World world, int x, int y, int z) {
+		if(!this.canPlaceBlockAt(world, x, y, z)) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
 			return false;
 		} else {
 			return true;
 		}
 	}
 
-	public void harvestBlock(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = Item.snowball.shiftedIndex;
-		float var7 = 0.7F;
-		double var8 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
-		double var10 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
-		double var12 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
-		EntityItem var14 = new EntityItem(var1, (double)var2 + var8, (double)var3 + var10, (double)var4 + var12, new ItemStack(var6));
-		var14.delayBeforeCanPickup = 10;
-		var1.spawnEntityInWorld(var14);
-		var1.setBlockWithNotify(var2, var3, var4, 0);
-	}
-
-	public int idDropped(int var1, Random var2) {
-		return Item.snowball.shiftedIndex;
-	}
-
-	public int quantityDropped(Random var1) {
+	public void harvestBlock(World worldObj, int x, int y, int z, int metadata) {
+		int i6 = Item.snowball.shiftedIndex;
+		float f7 = 0.7F;
+		double d8 = (double)(worldObj.rand.nextFloat() * f7) + (double)(1.0F - f7) * 0.5D;
+		double d10 = (double)(worldObj.rand.nextFloat() * f7) + (double)(1.0F - f7) * 0.5D;
+		double d12 = (double)(worldObj.rand.nextFloat() * f7) + (double)(1.0F - f7) * 0.5D;
+		EntityItem entityItem14 = new EntityItem(worldObj, (double)x + d8, (double)y + d10, (double)z + d12, new ItemStack(i6));
+		entityItem14.delayBeforeCanPickup = 10;
+		worldObj.spawnEntityInWorld(entityItem14);
+		worldObj.setBlockWithNotify(x, y, z, 0);
+	}
+
+	public int idDropped(int count, Random random) {
+		return Block.blockSnow.blockID;
+	}
+
+	public int quantityDropped(Random random) {
 		return 0;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getSavedLightValue(EnumSkyBlock.Block, var2, var3, var4) > 11) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(world.getSavedLightValue(EnumSkyBlock.Block, x, y, z) > 11) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		Material var6 = var1.getBlockMaterial(var2, var3, var4);
-		return var5 == 1 ? true : (var6 == this.material ? false : super.shouldSideBeRendered(var1, var2, var3, var4, var5));
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		Material material6 = blockAccess.getBlockMaterial(x, y, z);
+		return side == 1 ? true : (material6 == this.material ? false : super.shouldSideBeRendered(blockAccess, x, y, z, side));
 	}
 }
--- net/minecraft/src/EntityRenderer.java
+++ net/minecraft/src/EntityRenderer.java
@@ -3,12 +3,13 @@
 import java.nio.FloatBuffer;
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GLContext;
-import org.lwjgl.opengl.NVFogDistance;
 import org.lwjgl.util.glu.GLU;
 
 public class EntityRenderer {
@@ -28,17 +29,21 @@
 	private float prevFogColor;
 	private float fogColor;
 
-	public EntityRenderer(Minecraft var1) {
-		this.mc = var1;
-		this.itemRenderer = new ItemRenderer(var1);
+	public EntityRenderer(Minecraft minecraft) {
+		this.mc = minecraft;
+		this.itemRenderer = new ItemRenderer(minecraft);
 	}
 
 	public void updateRenderer() {
 		this.prevFogColor = this.fogColor;
-		float var1 = this.mc.theWorld.getBrightness(MathHelper.floor_double(this.mc.thePlayer.posX), MathHelper.floor_double(this.mc.thePlayer.posY), MathHelper.floor_double(this.mc.thePlayer.posZ));
-		float var2 = (float)(3 - this.mc.options.renderDistance) / 3.0F;
-		float var3 = var1 * (1.0F - var2) + var2;
-		this.fogColor += (var3 - this.fogColor) * 0.1F;
+		float f1 = this.mc.theWorld.getBrightness(MathHelper.floor_double(this.mc.thePlayer.posX), MathHelper.floor_double(this.mc.thePlayer.posY), MathHelper.floor_double(this.mc.thePlayer.posZ));
+		float f2 = (float)(3 - Math.min(this.mc.options.renderDistance - 1, 3)) / 3.0F;
+		if(this.mc.options.renderDistance == 0) {
+			f2 = 1.0F;
+		}
+
+		float f3 = f1 * (1.0F - f2) + f2;
+		this.fogColor += (f3 - this.fogColor) * 0.1F;
 		++this.rendererUpdateCount;
 		this.itemRenderer.updateEquippedItem();
 		if(this.mc.isRaining) {
@@ -47,43 +52,44 @@
 
 	}
 
-	public void getMouseOver(float var1) {
+	public void getMouseOver(float renderPartialTick) {
 		if(this.mc.thePlayer != null) {
-			double var2 = (double)this.mc.playerController.getBlockReachDistance();
-			this.mc.objectMouseOver = this.mc.thePlayer.rayTrace(var2, var1);
-			double var4 = var2;
-			Vec3D var6 = this.mc.thePlayer.getPosition(var1);
+			double d2 = (double)this.mc.playerController.getBlockReachDistance();
+			this.mc.objectMouseOver = this.mc.thePlayer.rayTrace(d2, renderPartialTick);
+			double d4 = d2;
+			Vec3D vec3D6 = this.mc.thePlayer.getPosition(renderPartialTick);
 			if(this.mc.objectMouseOver != null) {
-				var4 = this.mc.objectMouseOver.hitVec.distanceTo(var6);
+				d4 = this.mc.objectMouseOver.hitVec.distanceTo(vec3D6);
 			}
 
 			if(this.mc.playerController instanceof PlayerControllerCreative) {
-				var2 = 32.0D;
+				d2 = 32.0D;
+				d4 = 32.0D;
 			} else {
-				if(var4 > 3.0D) {
-					var4 = 3.0D;
+				if(d4 > 3.0D) {
+					d4 = 3.0D;
 				}
 
-				var2 = var4;
+				d2 = d4;
 			}
 
-			Vec3D var7 = this.mc.thePlayer.getLook(var1);
-			Vec3D var8 = var6.addVector(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2);
+			Vec3D vec3D7 = this.mc.thePlayer.getLook(renderPartialTick);
+			Vec3D vec3D8 = vec3D6.addVector(vec3D7.xCoord * d2, vec3D7.yCoord * d2, vec3D7.zCoord * d2);
 			this.pointedEntity = null;
-			List var9 = this.mc.theWorld.getEntitiesWithinAABBExcludingEntity(this.mc.thePlayer, this.mc.thePlayer.boundingBox.addCoord(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2));
-			double var10 = 0.0D;
+			List list9 = this.mc.theWorld.getEntitiesWithinAABBExcludingEntity(this.mc.thePlayer, this.mc.thePlayer.boundingBox.addCoord(vec3D7.xCoord * d2, vec3D7.yCoord * d2, vec3D7.zCoord * d2));
+			double d10 = 0.0D;
 
-			for(int var12 = 0; var12 < var9.size(); ++var12) {
-				Entity var13 = (Entity)var9.get(var12);
-				if(var13.canBeCollidedWith()) {
-					float var14 = 0.1F;
-					AxisAlignedBB var15 = var13.boundingBox.expand((double)var14, (double)var14, (double)var14);
-					MovingObjectPosition var16 = var15.calculateIntercept(var6, var8);
-					if(var16 != null) {
-						double var17 = var6.distanceTo(var16.hitVec);
-						if(var17 < var10 || var10 == 0.0D) {
-							this.pointedEntity = var13;
-							var10 = var17;
+			for(int i12 = 0; i12 < list9.size(); ++i12) {
+				Entity entity13 = (Entity)list9.get(i12);
+				if(entity13.canBeCollidedWith()) {
+					float f14 = 0.1F;
+					AxisAlignedBB axisAlignedBB15 = entity13.boundingBox.expand((double)f14, (double)f14, (double)f14);
+					MovingObjectPosition movingObjectPosition16 = axisAlignedBB15.calculateIntercept(vec3D6, vec3D8);
+					if(movingObjectPosition16 != null) {
+						double d17 = vec3D6.distanceTo(movingObjectPosition16.hitVec);
+						if(d17 < d10 || d10 == 0.0D) {
+							this.pointedEntity = entity13;
+							d10 = d17;
 						}
 					}
 				}
@@ -92,155 +98,165 @@
 			if(this.pointedEntity != null && !(this.mc.playerController instanceof PlayerControllerCreative)) {
 				this.mc.objectMouseOver = new MovingObjectPosition(this.pointedEntity);
 			}
-
-		}
-	}
-
-	private float getFOVModifier(float var1) {
-		EntityPlayerSP var2 = this.mc.thePlayer;
-		float var3 = 70.0F;
-		if(var2.isInsideOfMaterial(Material.water)) {
-			var3 = 60.0F;
-		}
-
-		if(var2.health <= 0) {
-			float var4 = (float)var2.deathTime + var1;
-			var3 /= (1.0F - 500.0F / (var4 + 500.0F)) * 2.0F + 1.0F;
-		}
-
-		return var3;
-	}
-
-	private void hurtCameraEffect(float var1) {
-		EntityPlayerSP var2 = this.mc.thePlayer;
-		float var3 = (float)var2.hurtTime - var1;
-		float var4;
-		if(var2.health <= 0) {
-			var4 = (float)var2.deathTime + var1;
-			GL11.glRotatef(40.0F - 8000.0F / (var4 + 200.0F), 0.0F, 0.0F, 1.0F);
-		}
-
-		if(var3 >= 0.0F) {
-			var3 /= (float)var2.maxHurtTime;
-			var3 = MathHelper.sin(var3 * var3 * var3 * var3 * (float)Math.PI);
-			var4 = var2.attackedAtYaw;
-			GL11.glRotatef(-var4, 0.0F, 1.0F, 0.0F);
-			GL11.glRotatef(-var3 * 14.0F, 0.0F, 0.0F, 1.0F);
-			GL11.glRotatef(var4, 0.0F, 1.0F, 0.0F);
-		}
-	}
-
-	private void setupViewBobbing(float var1) {
+		}
+
+	}
+
+	private float getFOVModifier(float renderPartialTick) {
+		EntityPlayerSP entityPlayerSP2 = this.mc.thePlayer;
+		float f3 = 70.0F;
+		if(entityPlayerSP2.isInsideOfMaterial(Material.water)) {
+			f3 = 60.0F;
+		}
+
+		if(entityPlayerSP2.health <= 0) {
+			float f4 = (float)entityPlayerSP2.deathTime + renderPartialTick;
+			f3 /= (1.0F - 500.0F / (f4 + 500.0F)) * 2.0F + 1.0F;
+		}
+
+		return Math.max(f3 + (this.mc.options.fovModifier - 0.5F) * 80.0F + (float)(InputHandler.IsKeyDown(54) ? -45 : 0), 5.0F);
+	}
+
+	private void hurtCameraEffect(float renderPartialTick) {
+		EntityPlayerSP entityPlayerSP2 = this.mc.thePlayer;
+		float f3 = (float)entityPlayerSP2.hurtTime - renderPartialTick;
+		float f4;
+		if(entityPlayerSP2.health <= 0) {
+			f4 = (float)entityPlayerSP2.deathTime + renderPartialTick;
+			GL11.glRotatef(40.0F - 8000.0F / (f4 + 200.0F), 0.0F, 0.0F, 1.0F);
+		}
+
+		if(f3 >= 0.0F) {
+			f3 /= (float)entityPlayerSP2.maxHurtTime;
+			f3 = MathHelper.sin(f3 * f3 * f3 * f3 * (float)Math.PI);
+			f4 = entityPlayerSP2.attackedAtYaw;
+			GL11.glRotatef(-f4, 0.0F, 1.0F, 0.0F);
+			GL11.glRotatef(-f3 * 14.0F, 0.0F, 0.0F, 1.0F);
+			GL11.glRotatef(f4, 0.0F, 1.0F, 0.0F);
+		}
+
+	}
+
+	private void setupViewBobbing(float renderPartialTick) {
 		if(!this.mc.options.thirdPersonView) {
-			EntityPlayerSP var2 = this.mc.thePlayer;
-			float var3 = var2.distanceWalkedModified - var2.prevDistanceWalkedModified;
-			float var4 = var2.distanceWalkedModified + var3 * var1;
-			float var5 = var2.prevCameraYaw + (var2.cameraYaw - var2.prevCameraYaw) * var1;
-			float var6 = var2.prevCameraPitch + (var2.cameraPitch - var2.prevCameraPitch) * var1;
-			GL11.glTranslatef(MathHelper.sin(var4 * (float)Math.PI) * var5 * 0.5F, -Math.abs(MathHelper.cos(var4 * (float)Math.PI) * var5), 0.0F);
-			GL11.glRotatef(MathHelper.sin(var4 * (float)Math.PI) * var5 * 3.0F, 0.0F, 0.0F, 1.0F);
-			GL11.glRotatef(Math.abs(MathHelper.cos(var4 * (float)Math.PI + 0.2F) * var5) * 5.0F, 1.0F, 0.0F, 0.0F);
-			GL11.glRotatef(var6, 1.0F, 0.0F, 0.0F);
+			EntityPlayerSP entityPlayerSP2 = this.mc.thePlayer;
+			float f3 = entityPlayerSP2.distanceWalkedModified - entityPlayerSP2.prevDistanceWalkedModified;
+			float f4 = entityPlayerSP2.distanceWalkedModified + f3 * renderPartialTick;
+			float f5 = entityPlayerSP2.prevCameraYaw + (entityPlayerSP2.cameraYaw - entityPlayerSP2.prevCameraYaw) * renderPartialTick;
+			float f6 = entityPlayerSP2.prevCameraPitch + (entityPlayerSP2.cameraPitch - entityPlayerSP2.prevCameraPitch) * renderPartialTick;
+			GL11.glTranslatef(MathHelper.sin(f4 * (float)Math.PI) * f5 * 0.5F, -Math.abs(MathHelper.cos(f4 * (float)Math.PI) * f5), 0.0F);
+			GL11.glRotatef(MathHelper.sin(f4 * (float)Math.PI) * f5 * 3.0F, 0.0F, 0.0F, 1.0F);
+			GL11.glRotatef(Math.abs(MathHelper.cos(f4 * (float)Math.PI + 0.2F) * f5) * 5.0F, 1.0F, 0.0F, 0.0F);
+			GL11.glRotatef(f6, 1.0F, 0.0F, 0.0F);
 		}
+
 	}
 
-	private void orientCamera(float var1) {
-		EntityPlayerSP var2 = this.mc.thePlayer;
-		double var3 = var2.prevPosX + (var2.posX - var2.prevPosX) * (double)var1;
-		double var5 = var2.prevPosY + (var2.posY - var2.prevPosY) * (double)var1;
-		double var7 = var2.prevPosZ + (var2.posZ - var2.prevPosZ) * (double)var1;
+	private void orientCamera(float renderPartialTick) {
+		EntityPlayerSP entityPlayerSP2 = this.mc.thePlayer;
+		double d3 = entityPlayerSP2.prevPosX + (entityPlayerSP2.posX - entityPlayerSP2.prevPosX) * (double)renderPartialTick;
+		double d5 = entityPlayerSP2.prevPosY + (entityPlayerSP2.posY - entityPlayerSP2.prevPosY) * (double)renderPartialTick;
+		double d7 = entityPlayerSP2.prevPosZ + (entityPlayerSP2.posZ - entityPlayerSP2.prevPosZ) * (double)renderPartialTick;
+		float f9 = entityPlayerSP2.rotationYaw;
+		float f10 = entityPlayerSP2.prevRotationYaw;
+		float f11 = entityPlayerSP2.rotationPitch;
 		if(this.mc.options.thirdPersonView) {
-			double var9 = 4.0D;
-			float var11 = var2.rotationYaw;
-			float var12 = var2.rotationPitch;
-			double var13 = (double)(-MathHelper.sin(var11 / 180.0F * (float)Math.PI) * MathHelper.cos(var12 / 180.0F * (float)Math.PI)) * var9;
-			double var15 = (double)(MathHelper.cos(var11 / 180.0F * (float)Math.PI) * MathHelper.cos(var12 / 180.0F * (float)Math.PI)) * var9;
-			double var17 = (double)(-MathHelper.sin(var12 / 180.0F * (float)Math.PI)) * var9;
+			double d12 = 6.0D;
+			double d14 = (double)(-MathHelper.sin(f9 / 180.0F * (float)Math.PI) * MathHelper.cos(f11 / 180.0F * (float)Math.PI)) * d12;
+			double d16 = (double)(MathHelper.cos(f9 / 180.0F * (float)Math.PI) * MathHelper.cos(f11 / 180.0F * (float)Math.PI)) * d12;
+			double d18 = (double)(-MathHelper.sin(f11 / 180.0F * (float)Math.PI)) * d12;
 
-			for(int var19 = 0; var19 < 8; ++var19) {
-				float var20 = (float)((var19 & 1) * 2 - 1);
-				float var21 = (float)((var19 >> 1 & 1) * 2 - 1);
-				float var22 = (float)((var19 >> 2 & 1) * 2 - 1);
-				var20 *= 0.1F;
-				var21 *= 0.1F;
-				var22 *= 0.1F;
-				MovingObjectPosition var23 = this.mc.theWorld.rayTraceBlocks(Vec3D.createVector(var3 + (double)var20, var5 + (double)var21, var7 + (double)var22), Vec3D.createVector(var3 - var13 + (double)var20 + (double)var22, var5 - var17 + (double)var21, var7 - var15 + (double)var22));
-				if(var23 != null) {
-					double var24 = var23.hitVec.distanceTo(Vec3D.createVector(var3, var5, var7));
-					if(var24 < var9) {
-						var9 = var24;
+			for(int i20 = 0; i20 < 8; ++i20) {
+				float f21 = (float)((i20 & 1) * 2 - 1);
+				float f22 = (float)((i20 >> 1 & 1) * 2 - 1);
+				float f23 = (float)((i20 >> 2 & 1) * 2 - 1);
+				f21 *= 0.1F;
+				f22 *= 0.1F;
+				f23 *= 0.1F;
+				MovingObjectPosition movingObjectPosition24 = this.mc.theWorld.rayTraceBlocks(Vec3D.createVector(d3 + (double)f21, d5 + (double)f22, d7 + (double)f23), Vec3D.createVector(d3 - d14 + (double)f21 + (double)f23, d5 - d18 + (double)f22, d7 - d16 + (double)f23));
+				if(movingObjectPosition24 != null) {
+					double d25 = movingObjectPosition24.hitVec.distanceTo(Vec3D.createVector(d3, d5, d7));
+					if(d25 < d12) {
+						d12 = d25;
 					}
 				}
 			}
 
-			GL11.glRotatef(var2.rotationPitch - var12, 1.0F, 0.0F, 0.0F);
-			GL11.glRotatef(var2.rotationYaw - var11, 0.0F, 1.0F, 0.0F);
-			GL11.glTranslatef(0.0F, 0.0F, (float)(-var9));
-			GL11.glRotatef(var11 - var2.rotationYaw, 0.0F, 1.0F, 0.0F);
-			GL11.glRotatef(var12 - var2.rotationPitch, 1.0F, 0.0F, 0.0F);
+			GL11.glRotatef(entityPlayerSP2.rotationPitch - f11, 1.0F, 0.0F, 0.0F);
+			GL11.glRotatef(f9 - f9, 0.0F, 1.0F, 0.0F);
+			GL11.glTranslatef(0.0F, 0.0F, (float)(-d12));
+			GL11.glRotatef(f9 - f9, 0.0F, 1.0F, 0.0F);
+			GL11.glRotatef(f11 - entityPlayerSP2.rotationPitch, 1.0F, 0.0F, 0.0F);
 		} else {
 			GL11.glTranslatef(0.0F, 0.0F, -0.1F);
 		}
 
-		GL11.glRotatef(var2.prevRotationPitch + (var2.rotationPitch - var2.prevRotationPitch) * var1, 1.0F, 0.0F, 0.0F);
-		GL11.glRotatef(var2.prevRotationYaw + (var2.rotationYaw - var2.prevRotationYaw) * var1 + 180.0F, 0.0F, 1.0F, 0.0F);
+		GL11.glRotatef(entityPlayerSP2.prevRotationPitch + (entityPlayerSP2.rotationPitch - entityPlayerSP2.prevRotationPitch) * renderPartialTick, 1.0F, 0.0F, 0.0F);
+		GL11.glRotatef(f10 + (f9 - f10) * renderPartialTick + 180.0F, 0.0F, 1.0F, 0.0F);
 	}
 
-	private void setupCameraTransform(float var1, int var2) {
-		this.farPlaneDistance = (float)(256 >> this.mc.options.renderDistance);
+	private void setupCameraTransform(float renderPartialTick, int integer) {
+		if(this.mc.options.renderDistance == 0) {
+			this.farPlaneDistance = 1024.0F;
+		} else {
+			this.farPlaneDistance = (float)(256 >> Math.min(this.mc.options.renderDistance - 1, 3));
+		}
+
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glLoadIdentity();
-		float var3 = 0.07F;
+		float f3 = 0.07F;
 		if(this.mc.options.anaglyph) {
-			GL11.glTranslatef((float)(-(var2 * 2 - 1)) * var3, 0.0F, 0.0F);
+			GL11.glTranslatef((float)(-(integer * 2 - 1)) * f3, 0.0F, 0.0F);
 		}
 
-		GLU.gluPerspective(this.getFOVModifier(var1), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance);
+		GLU.gluPerspective(this.getFOVModifier(renderPartialTick), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance);
 		GL11.glMatrixMode(GL11.GL_MODELVIEW);
 		GL11.glLoadIdentity();
 		if(this.mc.options.anaglyph) {
-			GL11.glTranslatef((float)(var2 * 2 - 1) * 0.1F, 0.0F, 0.0F);
-		}
-
-		this.hurtCameraEffect(var1);
-		if(this.mc.options.viewBobbing) {
-			this.setupViewBobbing(var1);
-		}
-
-		this.orientCamera(var1);
-	}
-
-	private void renderHand(float var1, int var2) {
-		GL11.glLoadIdentity();
-		if(this.mc.options.anaglyph) {
-			GL11.glTranslatef((float)(var2 * 2 - 1) * 0.1F, 0.0F, 0.0F);
-		}
-
-		GL11.glPushMatrix();
-		this.hurtCameraEffect(var1);
-		if(this.mc.options.viewBobbing) {
-			this.setupViewBobbing(var1);
-		}
-
-		if(!this.mc.options.thirdPersonView) {
-			this.itemRenderer.renderItemInFirstPerson(var1);
-		}
-
-		GL11.glPopMatrix();
-		if(!this.mc.options.thirdPersonView) {
-			this.itemRenderer.renderOverlays(var1);
-			this.hurtCameraEffect(var1);
-		}
-
-		if(this.mc.options.viewBobbing) {
-			this.setupViewBobbing(var1);
-		}
-
-	}
-
-	public void updateCameraAndRender(float var1) {
+			GL11.glTranslatef((float)(integer * 2 - 1) * 0.1F, 0.0F, 0.0F);
+		}
+
+		this.hurtCameraEffect(renderPartialTick);
+		if(this.mc.options.viewBobbing) {
+			this.setupViewBobbing(renderPartialTick);
+		}
+
+		this.orientCamera(renderPartialTick);
+	}
+
+	private void renderHand(float renderPartialTick, int integer) {
+		if(!ScreenDebugMenu.dbg_conf_hideUI) {
+			GL11.glLoadIdentity();
+			if(this.mc.options.anaglyph) {
+				GL11.glTranslatef((float)(integer * 2 - 1) * 0.1F, 0.0F, 0.0F);
+			}
+
+			GL11.glPushMatrix();
+			this.hurtCameraEffect(renderPartialTick);
+			if(this.mc.options.viewBobbing) {
+				this.setupViewBobbing(renderPartialTick);
+			}
+
+			if(!this.mc.options.thirdPersonView) {
+				this.itemRenderer.renderItemInFirstPerson(renderPartialTick);
+			}
+
+			GL11.glPopMatrix();
+			if(!this.mc.options.thirdPersonView) {
+				this.itemRenderer.renderOverlays(renderPartialTick);
+				this.hurtCameraEffect(renderPartialTick);
+			}
+
+			if(this.mc.options.viewBobbing) {
+				this.setupViewBobbing(renderPartialTick);
+			}
+
+		}
+	}
+
+	public void updateCameraAndRender(float renderPartialTick) {
 		if(!Display.isActive()) {
-			if(System.currentTimeMillis() - this.prevFrameTime > 500L) {
+			if(System.currentTimeMillis() - this.prevFrameTime > 500L && this.mc.options.pauseOnUnfocus) {
 				this.mc.displayInGameMenu();
 			}
 		} else {
@@ -249,31 +265,35 @@
 
 		if(this.mc.inGameHasFocus) {
 			this.mc.mouseHelper.mouseXYChange();
-			float var2 = this.mc.options.mouseSensitivity * 0.6F + 0.2F;
-			float var3 = var2 * var2 * var2 * 8.0F;
-			float var4 = (float)this.mc.mouseHelper.deltaX * var3;
-			float var5 = (float)this.mc.mouseHelper.deltaY * var3;
-			byte var6 = 1;
+			float f2 = this.mc.options.mouseSensitivity * 0.6F + 0.2F;
+			float f3 = f2 * f2 * f2 * 8.0F;
+			float f4 = (float)this.mc.mouseHelper.deltaX * f3;
+			float f5 = (float)this.mc.mouseHelper.deltaY * f3;
+			byte b6 = 1;
 			if(this.mc.options.invertMouse) {
-				var6 = -1;
+				b6 = -1;
 			}
 
-			this.mc.thePlayer.setAngles(var4, var5 * (float)var6);
+			this.mc.thePlayer.setAngles(f4, f5 * (float)b6);
 		}
 
+		ScaledResolution scaledResolution7 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+		int i8 = scaledResolution7.getScaledWidth();
+		int i9 = scaledResolution7.getScaledHeight();
 		if(!this.mc.skipRenderWorld) {
-			ScaledResolution var7 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-			int var8 = var7.getScaledWidth();
-			int var9 = var7.getScaledHeight();
-			int var10 = Mouse.getX() * var8 / this.mc.displayWidth;
-			int var11 = var9 - Mouse.getY() * var9 / this.mc.displayHeight - 1;
+			int i10 = Mouse.getX() * i8 / this.mc.displayWidth;
+			int i11 = i9 - Mouse.getY() * i9 / this.mc.displayHeight - 1;
 			if(this.mc.theWorld != null) {
-				this.renderWorld(var1);
-				this.mc.ingameGUI.renderGameOverlay(var1, this.mc.currentScreen != null, var10, var11);
+				this.renderWorld(renderPartialTick);
+				if(this.mc.options.field_11757_25y1pfK8198W9Tm66cfxM95C77y782yiFE2iJ841XnrF5E5HedVA6X11kaDV) {
+					this.mc.field_7311_0ef1dw6U62P0w8bU619gHGHeA4m17T8k6bnjfEQQwhJz0UwhJ6Kx9rBRdIvo.func_11379_3Ox6ELkjL7tS0M11M9Ec3mtp515ihaUVz6k07257y4J6E9IJVRiQKoD3Ym6J(this.mc, this.farPlaneDistance, this.fogColorRed, this.fogColorGreen, this.fogColorBlue);
+				}
+
+				this.mc.ingameGUI.renderGameOverlay(renderPartialTick, this.mc.currentScreen != null, i10, i11);
 			} else {
 				GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
 				GL11.glClearColor(0.0F, 0.0F, 0.0F, 0.0F);
-				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
+				GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
 				GL11.glMatrixMode(GL11.GL_PROJECTION);
 				GL11.glLoadIdentity();
 				GL11.glMatrixMode(GL11.GL_MODELVIEW);
@@ -283,24 +303,30 @@
 
 			if(this.mc.currentScreen != null) {
 				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-				this.mc.currentScreen.drawScreen(var10, var11, var1);
-			}
-
+				this.mc.currentScreen.drawScreen(i10, i11, renderPartialTick);
+			}
+
+			if(!ThreadDownloadResources.finished) {
+				Gui.drawString(this.mc.fontRenderer, "Downloading resources... [" + Math.round((float)ThreadDownloadResources.field_11491_0SH256J50ztK98I6A6bs5r40vo8pH2P0gb6sxjqPY3KzLgiP3OXy0Scq9399 / (float)ThreadDownloadResources.field_11492_8f3Z0A851l0Aj7j727QIWsGHy7xKwyrM81FsXm09QFVtF7dPCOH2aOfq9n9c * 100.0F) + "%]", 10, this.mc.currentScreen != null ? 10 : i9 - 60, 13421772);
+			}
+
+			InputHandler.func_9734_9Uj534ugdHP7u4PJfw2FnKZ82q9nF8ro9tfj5p0ywqqPTB3a2I67xd2543E3(i8, i9);
 		}
+
 	}
 
-	public void renderWorld(float var1) {
-		this.getMouseOver(var1);
-		EntityPlayerSP var2 = this.mc.thePlayer;
-		RenderGlobal var3 = this.mc.renderGlobal;
-		EffectRenderer var4 = this.mc.effectRenderer;
-		double var5 = var2.lastTickPosX + (var2.posX - var2.lastTickPosX) * (double)var1;
-		double var7 = var2.lastTickPosY + (var2.posY - var2.lastTickPosY) * (double)var1;
-		double var9 = var2.lastTickPosZ + (var2.posZ - var2.lastTickPosZ) * (double)var1;
+	public void renderWorld(float renderPartialTick) {
+		this.getMouseOver(renderPartialTick);
+		EntityPlayerSP entityPlayerSP2 = this.mc.thePlayer;
+		RenderGlobal renderGlobal3 = this.mc.renderGlobal;
+		EffectRenderer effectRenderer4 = this.mc.effectRenderer;
+		double d5 = entityPlayerSP2.lastTickPosX + (entityPlayerSP2.posX - entityPlayerSP2.lastTickPosX) * (double)renderPartialTick;
+		double d7 = entityPlayerSP2.lastTickPosY + (entityPlayerSP2.posY - entityPlayerSP2.lastTickPosY) * (double)renderPartialTick;
+		double d9 = entityPlayerSP2.lastTickPosZ + (entityPlayerSP2.posZ - entityPlayerSP2.lastTickPosZ) * (double)renderPartialTick;
 
-		for(int var11 = 0; var11 < 2; ++var11) {
+		for(int i11 = 0; i11 < 2; ++i11) {
 			if(this.mc.options.anaglyph) {
-				if(var11 == 0) {
+				if(i11 == 0) {
 					GL11.glColorMask(false, true, true, false);
 				} else {
 					GL11.glColorMask(true, false, false, false);
@@ -308,37 +334,41 @@
 			}
 
 			GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
-			this.updateFogColor(var1);
-			GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
+			this.updateFogColor(renderPartialTick);
+			GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
 			GL11.glEnable(GL11.GL_CULL_FACE);
-			this.setupCameraTransform(var1, var11);
+			this.setupCameraTransform(renderPartialTick, i11);
 			ClippingHelperImplementation.getInstance();
 			if(this.mc.options.renderDistance < 2) {
 				this.setupFog(-1);
-				var3.renderSky(var1);
+				renderGlobal3.renderSky(renderPartialTick);
 			}
 
 			GL11.glEnable(GL11.GL_FOG);
 			this.setupFog(1);
-			Frustum var12 = new Frustum();
-			var12.setPosition(var5, var7, var9);
-			this.mc.renderGlobal.clipRenderersByFrustum(var12, var1);
-			this.mc.renderGlobal.updateRenderers(var2, false);
+			if(this.mc.options.field_11757_25y1pfK8198W9Tm66cfxM95C77y782yiFE2iJ841XnrF5E5HedVA6X11kaDV) {
+				this.mc.field_7311_0ef1dw6U62P0w8bU619gHGHeA4m17T8k6bnjfEQQwhJz0UwhJ6Kx9rBRdIvo.func_11385_2aBrqFndfkzC8w9LabN9jT6nygQa1G113SE0F3xs21Ehzq80X8oVOnixaKXP(this.mc.field_7311_0ef1dw6U62P0w8bU619gHGHeA4m17T8k6bnjfEQQwhJz0UwhJ6Kx9rBRdIvo.field_11404_6G238hzdz174ui01Kn7hC7aXG4OFtxgSTqd88RZTU29K01h2S9Ewl85O71ni);
+			}
+
+			Frustum frustum12 = new Frustum();
+			frustum12.setPosition(d5, d7, d9);
+			this.mc.renderGlobal.clipRenderersByFrustum(frustum12, renderPartialTick);
+			this.mc.renderGlobal.updateRenderers(entityPlayerSP2, false);
 			this.setupFog(0);
 			GL11.glEnable(GL11.GL_FOG);
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture(Minecraft.field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L));
 			RenderHelper.disableStandardItemLighting();
-			var3.sortAndRender(var2, 0, (double)var1);
+			renderGlobal3.sortAndRender(entityPlayerSP2, 0, (double)renderPartialTick);
 			RenderHelper.enableStandardItemLighting();
-			var3.renderEntities(var2.getPosition(var1), var12, var1);
-			var4.renderLitParticles(var2, var1);
+			renderGlobal3.renderEntities(entityPlayerSP2.getPosition(renderPartialTick), frustum12, renderPartialTick);
+			effectRenderer4.renderLitParticles(entityPlayerSP2, renderPartialTick);
 			RenderHelper.disableStandardItemLighting();
 			this.setupFog(0);
-			var4.renderParticles(var2, var1);
-			if(this.mc.objectMouseOver != null && var2.isInsideOfMaterial(Material.water)) {
+			effectRenderer4.renderParticles(entityPlayerSP2, renderPartialTick);
+			if(this.mc.objectMouseOver != null && entityPlayerSP2.isInsideOfMaterial(Material.water)) {
 				GL11.glDisable(GL11.GL_ALPHA_TEST);
-				var3.drawBlockBreaking(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
-				var3.drawSelectionBox(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
+				renderGlobal3.drawBlockBreaking(entityPlayerSP2, this.mc.objectMouseOver, 0, entityPlayerSP2.inventory.getCurrentItem(), renderPartialTick);
+				renderGlobal3.drawSelectionBox(entityPlayerSP2, this.mc.objectMouseOver, 0, entityPlayerSP2.inventory.getCurrentItem(), renderPartialTick);
 				GL11.glEnable(GL11.GL_ALPHA_TEST);
 			}
 
@@ -346,51 +376,68 @@
 			this.setupFog(0);
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glDisable(GL11.GL_CULL_FACE);
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
-			if(this.mc.options.fancyGraphics) {
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9796_62Ccm2XAR6JqSDTgV762x61j971DNgsIrMhaXZxPs0fQnBC7ymR2l1v1V22X)));
+			if(this.mc.options.fancyGraphics != 2) {
 				GL11.glColorMask(false, false, false, false);
-				int var13 = var3.sortAndRender(var2, 1, (double)var1);
+				int i13 = renderGlobal3.sortAndRender(entityPlayerSP2, 1, (double)renderPartialTick);
 				GL11.glColorMask(true, true, true, true);
 				if(this.mc.options.anaglyph) {
-					if(var11 == 0) {
+					if(i11 == 0) {
 						GL11.glColorMask(false, true, true, false);
 					} else {
 						GL11.glColorMask(true, false, false, false);
 					}
 				}
 
-				if(var13 > 0) {
-					var3.renderAllRenderLists(1, (double)var1);
+				if(i13 > 0) {
+					renderGlobal3.renderAllRenderLists(1, (double)renderPartialTick);
 				}
 			} else {
-				var3.sortAndRender(var2, 1, (double)var1);
+				renderGlobal3.sortAndRender(entityPlayerSP2, 1, (double)renderPartialTick);
 			}
 
 			GL11.glDepthMask(true);
 			GL11.glEnable(GL11.GL_CULL_FACE);
 			GL11.glDisable(GL11.GL_BLEND);
-			if(this.mc.objectMouseOver != null && !var2.isInsideOfMaterial(Material.water)) {
+			if(this.mc.objectMouseOver != null && !entityPlayerSP2.isInsideOfMaterial(Material.water)) {
 				GL11.glDisable(GL11.GL_ALPHA_TEST);
-				var3.drawBlockBreaking(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
-				var3.drawSelectionBox(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
+				renderGlobal3.drawBlockBreaking(entityPlayerSP2, this.mc.objectMouseOver, 0, entityPlayerSP2.inventory.getCurrentItem(), renderPartialTick);
+				renderGlobal3.drawSelectionBox(entityPlayerSP2, this.mc.objectMouseOver, 0, entityPlayerSP2.inventory.getCurrentItem(), renderPartialTick);
 				GL11.glEnable(GL11.GL_ALPHA_TEST);
 			}
 
 			GL11.glDisable(GL11.GL_FOG);
-			if(this.mc.theWorld.snowCovered) {
-				this.renderSnow(var1);
+			if(this.mc.theWorld.snowCovered && this.mc.options.fancyGraphics != 2) {
+				this.renderSnow(renderPartialTick);
+			}
+
+			if(this.mc.isRaining) {
+				this.func_11802_5th15JkB4K6nA5048kg5q2q94X7PLURL8qGJVUoGs155vbYf105w7UkkC798(renderPartialTick);
 			}
 
 			if(this.pointedEntity != null) {
+				;
 			}
 
 			this.setupFog(0);
 			GL11.glEnable(GL11.GL_FOG);
-			var3.renderClouds(var1);
+			if(this.mc.options.fancyGraphics != 2 && this.mc.field_7316_28K4517FJT58jN9ucjj3zE1jE410Ltpi330vH7516f19B006E4Wco5x4Y0w5) {
+				renderGlobal3.renderClouds(renderPartialTick);
+			}
+
+			if(this.mc.options.field_11757_25y1pfK8198W9Tm66cfxM95C77y782yiFE2iJ841XnrF5E5HedVA6X11kaDV) {
+				MinecraftUnknownClass3.func_11383_9k8UYIQjyl8A669E4479n7ZN6ovKzu0Py7mZLt8QHMg0jDqVsW8F6L6Ycg15(this.mc.field_7311_0ef1dw6U62P0w8bU619gHGHeA4m17T8k6bnjfEQQwhJz0UwhJ6Kx9rBRdIvo.func_11384_35vk4IIhd8hao4F5HSR9jWpH6tem7rh9B886Pq7RYkf415WQC9hm6vShCua6(this.mc), this.mc);
+			}
+
 			GL11.glDisable(GL11.GL_FOG);
 			this.setupFog(1);
 			GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-			this.renderHand(var1, var11);
+			this.renderHand(renderPartialTick, i11);
+			if(this.mc.options.field_11757_25y1pfK8198W9Tm66cfxM95C77y782yiFE2iJ841XnrF5E5HedVA6X11kaDV) {
+				MinecraftUnknownClass3.func_11383_9k8UYIQjyl8A669E4479n7ZN6ovKzu0Py7mZLt8QHMg0jDqVsW8F6L6Ycg15(this.mc.field_7311_0ef1dw6U62P0w8bU619gHGHeA4m17T8k6bnjfEQQwhJz0UwhJ6Kx9rBRdIvo.func_11382_6L4tKeSFB9JuB4C21yfU9Wexrw7VE17dZURA0uDEgh0622ButpwPgn1H7yV8(this.mc), this.mc);
+				this.mc.field_7311_0ef1dw6U62P0w8bU619gHGHeA4m17T8k6bnjfEQQwhJz0UwhJ6Kx9rBRdIvo.func_11385_2aBrqFndfkzC8w9LabN9jT6nygQa1G113SE0F3xs21Ehzq80X8oVOnixaKXP(0);
+			}
+
 			if(!this.mc.options.anaglyph) {
 				return;
 			}
@@ -400,92 +447,161 @@
 	}
 
 	private void addRainParticles() {
-		if(this.mc.options.fancyGraphics) {
-			EntityPlayerSP var1 = this.mc.thePlayer;
-			World var2 = this.mc.theWorld;
-			int var3 = MathHelper.floor_double(var1.posX);
-			int var4 = MathHelper.floor_double(var1.posY);
-			int var5 = MathHelper.floor_double(var1.posZ);
-			byte var6 = 16;
+		if(this.mc.options.fancyGraphics != 2) {
+			EntityPlayerSP entityPlayerSP1 = this.mc.thePlayer;
+			World world2 = this.mc.theWorld;
+			int i3 = MathHelper.floor_double(entityPlayerSP1.posX);
+			int i4 = MathHelper.floor_double(entityPlayerSP1.posY);
+			int i5 = MathHelper.floor_double(entityPlayerSP1.posZ);
+			byte b6 = 16;
 
-			for(int var7 = 0; var7 < 150; ++var7) {
-				int var8 = var3 + this.random.nextInt(var6) - this.random.nextInt(var6);
-				int var9 = var5 + this.random.nextInt(var6) - this.random.nextInt(var6);
-				int var10 = var2.getPrecipitationHeight(var8, var9);
-				int var11 = var2.getBlockId(var8, var10 - 1, var9);
-				if(var10 <= var4 + var6 && var10 >= var4 - var6) {
-					float var12 = this.random.nextFloat();
-					float var13 = this.random.nextFloat();
-					if(var11 > 0) {
-						this.mc.effectRenderer.addEffect(new EntityRainFX(var2, (double)((float)var8 + var12), (double)((float)var10 + 0.1F) - Block.blocksList[var11].minY, (double)((float)var9 + var13)));
+			for(int i7 = 0; i7 < 150; ++i7) {
+				int i8 = i3 + this.random.nextInt(b6) - this.random.nextInt(b6);
+				int i9 = i5 + this.random.nextInt(b6) - this.random.nextInt(b6);
+				int i10 = world2.getPrecipitationHeight(i8, i9 + 2);
+				int i11 = world2.getBlockId(i8, i10 - 1, i9);
+				if(i10 <= i4 + b6 && i10 >= i4 - b6) {
+					float f12 = this.random.nextFloat();
+					float f13 = this.random.nextFloat();
+					if(i11 > 0) {
+						this.mc.effectRenderer.addEffect(new EntityRainFX(world2, (double)((float)i8 + f12), (double)((float)i10 + 0.3F) - Block.blocksList[i11].minY, (double)((float)i9 + f13)));
 					}
 				}
 			}
-
 		}
+
 	}
 
-	private void renderSnow(float var1) {
-		EntityPlayerSP var2 = this.mc.thePlayer;
-		World var3 = this.mc.theWorld;
-		int var4 = MathHelper.floor_double(var2.posX);
-		int var5 = MathHelper.floor_double(var2.posY);
-		int var6 = MathHelper.floor_double(var2.posZ);
-		Tessellator var7 = Tessellator.instance;
+	private void renderSnow(float renderPartialTick) {
+		EntityPlayerSP entityPlayerSP2 = this.mc.thePlayer;
+		World world3 = this.mc.theWorld;
+		int i4 = MathHelper.floor_double(entityPlayerSP2.posX);
+		int i5 = MathHelper.floor_double(entityPlayerSP2.posY);
+		int i6 = MathHelper.floor_double(entityPlayerSP2.posZ);
+		Tessellator tessellator7 = Tessellator.instance;
 		GL11.glDisable(GL11.GL_CULL_FACE);
 		GL11.glNormal3f(0.0F, 1.0F, 0.0F);
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/snow.png"));
-		double var8 = var2.lastTickPosX + (var2.posX - var2.lastTickPosX) * (double)var1;
-		double var10 = var2.lastTickPosY + (var2.posY - var2.lastTickPosY) * (double)var1;
-		double var12 = var2.lastTickPosZ + (var2.posZ - var2.lastTickPosZ) * (double)var1;
-		byte var14 = 5;
-		if(this.mc.options.fancyGraphics) {
-			var14 = 10;
-		}
-
-		for(int var15 = var4 - var14; var15 <= var4 + var14; ++var15) {
-			for(int var16 = var6 - var14; var16 <= var6 + var14; ++var16) {
-				int var17 = var3.getTopSolidOrLiquidBlock(var15, var16);
-				if(var17 < 0) {
-					var17 = 0;
-				}
-
-				int var18 = var5 - var14;
-				int var19 = var5 + var14;
-				if(var18 < var17) {
-					var18 = var17;
-				}
-
-				if(var19 < var17) {
-					var19 = var17;
-				}
-
-				float var20 = 2.0F;
-				if(var18 != var19) {
-					this.random.setSeed((long)(var15 * var15 * 3121 + var15 * 45238971 + var16 * var16 * 418711 + var16 * 13761));
-					float var21 = (float)this.rendererUpdateCount + var1;
-					float var22 = ((float)(this.rendererUpdateCount & 511) + var1) / 512.0F;
-					float var23 = this.random.nextFloat() + var21 * 0.01F * (float)this.random.nextGaussian();
-					float var24 = this.random.nextFloat() + var21 * (float)this.random.nextGaussian() * 0.001F;
-					double var25 = (double)((float)var15 + 0.5F) - var2.posX;
-					double var27 = (double)((float)var16 + 0.5F) - var2.posZ;
-					float var29 = MathHelper.sqrt_double(var25 * var25 + var27 * var27) / (float)var14;
-					var7.startDrawingQuads();
-					float var30 = var3.getBrightness(var15, 128, var16);
-					GL11.glColor4f(var30, var30, var30, (1.0F - var29 * var29) * 0.7F);
-					var7.setTranslationD(-var8 * 1.0D, -var10 * 1.0D, -var12 * 1.0D);
-					var7.addVertexWithUV((double)(var15 + 0), (double)var18, (double)(var16 + 0), (double)(0.0F * var20 + var23), (double)((float)var18 * var20 / 8.0F + var22 * var20 + var24));
-					var7.addVertexWithUV((double)(var15 + 1), (double)var18, (double)(var16 + 1), (double)(1.0F * var20 + var23), (double)((float)var18 * var20 / 8.0F + var22 * var20 + var24));
-					var7.addVertexWithUV((double)(var15 + 1), (double)var19, (double)(var16 + 1), (double)(1.0F * var20 + var23), (double)((float)var19 * var20 / 8.0F + var22 * var20 + var24));
-					var7.addVertexWithUV((double)(var15 + 0), (double)var19, (double)(var16 + 0), (double)(0.0F * var20 + var23), (double)((float)var19 * var20 / 8.0F + var22 * var20 + var24));
-					var7.addVertexWithUV((double)(var15 + 0), (double)var18, (double)(var16 + 1), (double)(0.0F * var20 + var23), (double)((float)var18 * var20 / 8.0F + var22 * var20 + var24));
-					var7.addVertexWithUV((double)(var15 + 1), (double)var18, (double)(var16 + 0), (double)(1.0F * var20 + var23), (double)((float)var18 * var20 / 8.0F + var22 * var20 + var24));
-					var7.addVertexWithUV((double)(var15 + 1), (double)var19, (double)(var16 + 0), (double)(1.0F * var20 + var23), (double)((float)var19 * var20 / 8.0F + var22 * var20 + var24));
-					var7.addVertexWithUV((double)(var15 + 0), (double)var19, (double)(var16 + 1), (double)(0.0F * var20 + var23), (double)((float)var19 * var20 / 8.0F + var22 * var20 + var24));
-					var7.setTranslationD(0.0D, 0.0D, 0.0D);
-					var7.draw();
+		double d8 = entityPlayerSP2.lastTickPosX + (entityPlayerSP2.posX - entityPlayerSP2.lastTickPosX) * (double)renderPartialTick;
+		double d10 = entityPlayerSP2.lastTickPosY + (entityPlayerSP2.posY - entityPlayerSP2.lastTickPosY) * (double)renderPartialTick;
+		double d12 = entityPlayerSP2.lastTickPosZ + (entityPlayerSP2.posZ - entityPlayerSP2.lastTickPosZ) * (double)renderPartialTick;
+		byte b14 = 5;
+		if(this.mc.options.fancyGraphics != 2) {
+			b14 = 10;
+		}
+
+		for(int i15 = i4 - b14; i15 <= i4 + b14; ++i15) {
+			for(int i16 = i6 - b14; i16 <= i6 + b14; ++i16) {
+				int i17 = world3.getTopSolidOrLiquidBlock(i15, i16);
+				if(i17 < 0) {
+					i17 = 0;
+				}
+
+				int i18 = i5 - b14;
+				int i19 = i5 + b14;
+				if(i18 < i17) {
+					i18 = i17;
+				}
+
+				if(i19 < i17) {
+					i19 = i17;
+				}
+
+				float f20 = 2.0F;
+				if(i18 != i19) {
+					this.random.setSeed((long)(i15 * i15 * 3121 + i15 * 45238971 + i16 * i16 * 418711 + i16 * 13761));
+					float f21 = (float)this.rendererUpdateCount + renderPartialTick;
+					float f22 = ((float)(this.rendererUpdateCount & 511) + renderPartialTick) / 512.0F;
+					float f23 = this.random.nextFloat() + f21 * 0.01F * (float)this.random.nextGaussian();
+					float f24 = this.random.nextFloat() + f21 * (float)this.random.nextGaussian() * 0.001F;
+					double d25 = (double)((float)i15 + 0.5F) - entityPlayerSP2.posX;
+					double d27 = (double)((float)i16 + 0.5F) - entityPlayerSP2.posZ;
+					float f29 = MathHelper.sqrt_double(d25 * d25 + d27 * d27) / (float)b14;
+					tessellator7.startDrawingQuads();
+					float f30 = world3.getBrightness(i15, 128, i16);
+					GL11.glColor4f(f30, f30, f30, (1.0F - f29 * f29) * 0.7F);
+					tessellator7.setTranslationD(-d8 * 1.0D, -d10 * 1.0D, -d12 * 1.0D);
+					tessellator7.addVertexWithUV((double)(i15 + 0), (double)i18, (double)(i16 + 0), (double)(0.0F * f20 + f23), (double)((float)i18 * f20 / 8.0F + f22 * f20 + f24));
+					tessellator7.addVertexWithUV((double)(i15 + 1), (double)i18, (double)(i16 + 1), (double)(1.0F * f20 + f23), (double)((float)i18 * f20 / 8.0F + f22 * f20 + f24));
+					tessellator7.addVertexWithUV((double)(i15 + 1), (double)i19, (double)(i16 + 1), (double)(1.0F * f20 + f23), (double)((float)i19 * f20 / 8.0F + f22 * f20 + f24));
+					tessellator7.addVertexWithUV((double)(i15 + 0), (double)i19, (double)(i16 + 0), (double)(0.0F * f20 + f23), (double)((float)i19 * f20 / 8.0F + f22 * f20 + f24));
+					tessellator7.addVertexWithUV((double)(i15 + 0), (double)i18, (double)(i16 + 1), (double)(0.0F * f20 + f23), (double)((float)i18 * f20 / 8.0F + f22 * f20 + f24));
+					tessellator7.addVertexWithUV((double)(i15 + 1), (double)i18, (double)(i16 + 0), (double)(1.0F * f20 + f23), (double)((float)i18 * f20 / 8.0F + f22 * f20 + f24));
+					tessellator7.addVertexWithUV((double)(i15 + 1), (double)i19, (double)(i16 + 0), (double)(1.0F * f20 + f23), (double)((float)i19 * f20 / 8.0F + f22 * f20 + f24));
+					tessellator7.addVertexWithUV((double)(i15 + 0), (double)i19, (double)(i16 + 1), (double)(0.0F * f20 + f23), (double)((float)i19 * f20 / 8.0F + f22 * f20 + f24));
+					tessellator7.setTranslationD(0.0D, 0.0D, 0.0D);
+					tessellator7.draw();
+				}
+			}
+		}
+
+		GL11.glEnable(GL11.GL_CULL_FACE);
+		GL11.glDisable(GL11.GL_BLEND);
+	}
+
+	private void func_11802_5th15JkB4K6nA5048kg5q2q94X7PLURL8qGJVUoGs155vbYf105w7UkkC798(float float1) {
+		EntityPlayerSP entityPlayerSP2 = this.mc.thePlayer;
+		World world3 = this.mc.theWorld;
+		int i4 = MathHelper.floor_double(entityPlayerSP2.posX);
+		int i5 = MathHelper.floor_double(entityPlayerSP2.posY);
+		int i6 = MathHelper.floor_double(entityPlayerSP2.posZ);
+		Tessellator tessellator7 = Tessellator.instance;
+		GL11.glDisable(GL11.GL_CULL_FACE);
+		GL11.glNormal3f(0.0F, 2.0F, 0.0F);
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/rain.png"));
+		double d8 = entityPlayerSP2.lastTickPosX + (entityPlayerSP2.posX - entityPlayerSP2.lastTickPosX) * (double)float1;
+		double d10 = entityPlayerSP2.lastTickPosY + (entityPlayerSP2.posY - entityPlayerSP2.lastTickPosY) * (double)float1;
+		double d12 = entityPlayerSP2.lastTickPosZ + (entityPlayerSP2.posZ - entityPlayerSP2.lastTickPosZ) * (double)float1;
+		byte b14 = 5;
+		if(this.mc.options.fancyGraphics != 2) {
+			b14 = 10;
+		}
+
+		for(int i15 = i4 - b14; i15 <= i4 + b14; ++i15) {
+			for(int i16 = i6 - b14; i16 <= i6 + b14; ++i16) {
+				int i17 = world3.getTopSolidOrLiquidBlock(i15, i16);
+				if(i17 < 0) {
+					i17 = 0;
+				}
+
+				int i18 = i5 - b14;
+				int i19 = i5 + b14;
+				if(i18 < i17) {
+					i18 = i17;
+				}
+
+				if(i19 < i17) {
+					i19 = i17;
+				}
+
+				float f20 = 2.0F;
+				if(i18 != i19) {
+					this.random.setSeed((long)(i15 * i15 * 1312 + i15 * 57284571 + i16 * i16 * 102984 + i16 * 68392));
+					float f21 = (float)this.rendererUpdateCount + float1;
+					float f22 = ((float)(this.rendererUpdateCount & 511) + float1) / 256.0F;
+					float f23 = this.random.nextFloat() + f21 * 0.01F * (float)this.random.nextGaussian();
+					float f24 = this.random.nextFloat() + f21 * (float)this.random.nextGaussian() * 0.001F;
+					double d25 = (double)((float)i15 + 0.5F) - entityPlayerSP2.posX;
+					double d27 = (double)((float)i16 + 0.5F) - entityPlayerSP2.posZ;
+					float f29 = MathHelper.sqrt_double(d25 * d25 + d27 * d27) / (float)b14;
+					tessellator7.startDrawingQuads();
+					float f30 = world3.getBrightness(i15, 128, i16);
+					GL11.glColor4f(f30, f30, f30, 1.0F - f29 * f29 + 0.7F);
+					tessellator7.setTranslationD(-d8 * 1.0D, -d10 - 2.0D, -d12 * 1.0D);
+					tessellator7.addVertexWithUV((double)(i15 + 0), (double)i18, (double)(i16 + 0), (double)(0.0F * f20 + f23), (double)((float)i18 * f20 / 8.0F + f22 * f20 / f24));
+					tessellator7.addVertexWithUV((double)(i15 + 1), (double)i18, (double)(i16 + 1), (double)(1.0F * f20 + f23), (double)((float)i18 * f20 / 8.0F + f22 * f20 / f24));
+					tessellator7.addVertexWithUV((double)(i15 + 1), (double)i19, (double)(i16 + 1), (double)(1.0F * f20 + f23), (double)((float)i19 * f20 / 8.0F + f22 * f20 / f24));
+					tessellator7.addVertexWithUV((double)(i15 + 0), (double)i19, (double)(i16 + 0), (double)(0.0F * f20 + f23), (double)((float)i19 * f20 / 8.0F + f22 * f20 / f24));
+					tessellator7.addVertexWithUV((double)(i15 + 0), (double)i18, (double)(i16 + 1), (double)(0.0F * f20 + f23), (double)((float)i18 * f20 / 8.0F + f22 * f20 / f24));
+					tessellator7.addVertexWithUV((double)(i15 + 1), (double)i18, (double)(i16 + 0), (double)(1.0F * f20 + f23), (double)((float)i18 * f20 / 8.0F + f22 * f20 / f24));
+					tessellator7.addVertexWithUV((double)(i15 + 1), (double)i19, (double)(i16 + 0), (double)(1.0F * f20 + f23), (double)((float)i19 * f20 / 8.0F + f22 * f20 / f24));
+					tessellator7.addVertexWithUV((double)(i15 + 0), (double)i19, (double)(i16 + 1), (double)(0.0F * f20 + f23), (double)((float)i19 * f20 / 8.0F + f22 * f20 / f24));
+					tessellator7.setTranslationD(0.0D, 0.0D, 0.0D);
+					tessellator7.draw();
 				}
 			}
 		}
@@ -495,104 +611,100 @@
 	}
 
 	public void setupOverlayRendering() {
-		ScaledResolution var1 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-		int var2 = var1.getScaledWidth();
-		int var3 = var1.getScaledHeight();
+		ScaledResolution scaledResolution1 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+		int i2 = scaledResolution1.getScaledWidth();
+		int i3 = scaledResolution1.getScaledHeight();
 		GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glLoadIdentity();
-		GL11.glOrtho(0.0D, (double)var2, (double)var3, 0.0D, 1000.0D, 3000.0D);
+		GL11.glOrtho(0.0D, (double)i2, (double)i3, 0.0D, 1000.0D, 3000.0D);
 		GL11.glMatrixMode(GL11.GL_MODELVIEW);
 		GL11.glLoadIdentity();
 		GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
 	}
 
-	private void updateFogColor(float var1) {
-		World var2 = this.mc.theWorld;
-		EntityPlayerSP var3 = this.mc.thePlayer;
-		float var4 = 1.0F / (float)(4 - this.mc.options.renderDistance);
-		var4 = 1.0F - (float)Math.pow((double)var4, 0.25D);
-		Vec3D var5 = var2.getSkyColor(var1);
-		float var6 = (float)var5.xCoord;
-		float var7 = (float)var5.yCoord;
-		float var8 = (float)var5.zCoord;
-		Vec3D var9 = var2.getFogColor(var1);
-		this.fogColorRed = (float)var9.xCoord;
-		this.fogColorGreen = (float)var9.yCoord;
-		this.fogColorBlue = (float)var9.zCoord;
-		this.fogColorRed += (var6 - this.fogColorRed) * var4;
-		this.fogColorGreen += (var7 - this.fogColorGreen) * var4;
-		this.fogColorBlue += (var8 - this.fogColorBlue) * var4;
-		if(var3.isInsideOfMaterial(Material.water)) {
+	private void updateFogColor(float renderPartialTick) {
+		World world2 = this.mc.theWorld;
+		EntityPlayerSP entityPlayerSP3 = this.mc.thePlayer;
+		float f4 = 1.0F / (float)(4 - Math.min(this.mc.options.renderDistance - 1, 3));
+		if(this.mc.options.renderDistance == 5) {
+			f4 = Float.NEGATIVE_INFINITY;
+		} else {
+			f4 = 1.0F - (float)Math.pow((double)f4, 0.25D);
+		}
+
+		Vec3D vec3D5 = world2.getSkyColor(renderPartialTick);
+		float f6 = (float)vec3D5.xCoord;
+		float f7 = (float)vec3D5.yCoord;
+		float f8 = (float)vec3D5.zCoord;
+		Vec3D vec3D9 = world2.getFogColor(renderPartialTick);
+		this.fogColorRed = (float)vec3D9.xCoord;
+		this.fogColorGreen = (float)vec3D9.yCoord;
+		this.fogColorBlue = (float)vec3D9.zCoord;
+		this.fogColorRed += (f6 - this.fogColorRed) * f4;
+		this.fogColorGreen += (f7 - this.fogColorGreen) * f4;
+		this.fogColorBlue += (f8 - this.fogColorBlue) * f4;
+		if(entityPlayerSP3.isInsideOfMaterial(Material.water)) {
 			this.fogColorRed = 0.02F;
 			this.fogColorGreen = 0.02F;
 			this.fogColorBlue = 0.2F;
-		} else if(var3.isInsideOfMaterial(Material.lava)) {
+		} else if(entityPlayerSP3.isInsideOfMaterial(Material.lava)) {
 			this.fogColorRed = 0.6F;
 			this.fogColorGreen = 0.1F;
 			this.fogColorBlue = 0.0F;
 		}
 
-		float var10 = this.prevFogColor + (this.fogColor - this.prevFogColor) * var1;
-		this.fogColorRed *= var10;
-		this.fogColorGreen *= var10;
-		this.fogColorBlue *= var10;
+		float f10 = this.prevFogColor + (this.fogColor - this.prevFogColor) * renderPartialTick;
+		this.fogColorRed *= f10;
+		this.fogColorGreen *= f10;
+		this.fogColorBlue *= f10;
+		float f13;
 		if(this.mc.options.anaglyph) {
-			float var11 = (this.fogColorRed * 30.0F + this.fogColorGreen * 59.0F + this.fogColorBlue * 11.0F) / 100.0F;
-			float var12 = (this.fogColorRed * 30.0F + this.fogColorGreen * 70.0F) / 100.0F;
-			float var13 = (this.fogColorRed * 30.0F + this.fogColorBlue * 70.0F) / 100.0F;
-			this.fogColorRed = var11;
-			this.fogColorGreen = var12;
-			this.fogColorBlue = var13;
-		}
-
+			float f11 = (this.fogColorRed * 30.0F + this.fogColorGreen * 59.0F + this.fogColorBlue * 11.0F) / 100.0F;
+			float f12 = (this.fogColorRed * 30.0F + this.fogColorGreen * 70.0F) / 100.0F;
+			f13 = (this.fogColorRed * 30.0F + this.fogColorBlue * 70.0F) / 100.0F;
+			this.fogColorRed = f11;
+			this.fogColorGreen = f12;
+			this.fogColorBlue = f13;
+		}
+
+		long j15 = world2.worldTime % 23000L;
+		f13 = 0.0F;
+		if(j15 >= 22000L) {
+			f13 = (float)(1000L - (j15 - 22000L)) / 1000.0F;
+		} else if(j15 >= 21000L) {
+			f13 = (float)(j15 - 21000L) / 1000.0F;
+		}
+
+		float[] f14 = Ext1605Utils.BlendColor(f13 / 2.0F, this.fogColorRed, this.fogColorGreen, this.fogColorBlue);
+		this.fogColorRed = f14[0];
+		this.fogColorGreen = f14[1];
+		this.fogColorBlue = f14[2];
 		GL11.glClearColor(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 0.0F);
 	}
 
-	private void setupFog(int var1) {
-		EntityPlayerSP var2 = this.mc.thePlayer;
+	private void setupFog(int integer) {
+		EntityPlayerSP entityPlayerSP2 = this.mc.thePlayer;
 		GL11.glFog(GL11.GL_FOG_COLOR, this.setFogColorBuffer(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 1.0F));
 		GL11.glNormal3f(0.0F, -1.0F, 0.0F);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		float var3;
-		float var4;
-		float var5;
-		float var6;
-		float var7;
-		float var8;
-		if(var2.isInsideOfMaterial(Material.water)) {
+		if(entityPlayerSP2.isInsideOfMaterial(Material.water)) {
 			GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_EXP);
 			GL11.glFogf(GL11.GL_FOG_DENSITY, 0.1F);
-			var3 = 0.4F;
-			var4 = 0.4F;
-			var5 = 0.9F;
-			if(this.mc.options.anaglyph) {
-				var6 = (var3 * 30.0F + var4 * 59.0F + var5 * 11.0F) / 100.0F;
-				var7 = (var3 * 30.0F + var4 * 70.0F) / 100.0F;
-				var8 = (var3 * 30.0F + var5 * 70.0F) / 100.0F;
-			}
-		} else if(var2.isInsideOfMaterial(Material.lava)) {
+		} else if(entityPlayerSP2.isInsideOfMaterial(Material.lava)) {
 			GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_EXP);
 			GL11.glFogf(GL11.GL_FOG_DENSITY, 2.0F);
-			var3 = 0.4F;
-			var4 = 0.3F;
-			var5 = 0.3F;
-			if(this.mc.options.anaglyph) {
-				var6 = (var3 * 30.0F + var4 * 59.0F + var5 * 11.0F) / 100.0F;
-				var7 = (var3 * 30.0F + var4 * 70.0F) / 100.0F;
-				var8 = (var3 * 30.0F + var5 * 70.0F) / 100.0F;
-			}
 		} else {
 			GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_LINEAR);
 			GL11.glFogf(GL11.GL_FOG_START, this.farPlaneDistance * 0.25F);
 			GL11.glFogf(GL11.GL_FOG_END, this.farPlaneDistance);
-			if(var1 < 0) {
+			if(integer < 0) {
 				GL11.glFogf(GL11.GL_FOG_START, 0.0F);
 				GL11.glFogf(GL11.GL_FOG_END, this.farPlaneDistance * 0.8F);
 			}
 
 			if(GLContext.getCapabilities().GL_NV_fog_distance) {
-				GL11.glFogi(NVFogDistance.GL_FOG_DISTANCE_MODE_NV, NVFogDistance.GL_EYE_RADIAL_NV);
+				GL11.glFogi(34138, 34139);
 			}
 		}
 
@@ -600,9 +712,9 @@
 		GL11.glColorMaterial(GL11.GL_FRONT, GL11.GL_AMBIENT);
 	}
 
-	private FloatBuffer setFogColorBuffer(float var1, float var2, float var3, float var4) {
+	private FloatBuffer setFogColorBuffer(float r, float g, float b, float a) {
 		this.fogColorBuffer.clear();
-		this.fogColorBuffer.put(var1).put(var2).put(var3).put(var4);
+		this.fogColorBuffer.put(r).put(g).put(b).put(a);
 		this.fogColorBuffer.flip();
 		return this.fogColorBuffer;
 	}
--- net/minecraft/src/Packet32EntityLook.java
+++ net/minecraft/src/Packet32EntityLook.java
@@ -9,16 +9,16 @@
 		this.rotating = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		super.readPacketData(var1);
-		this.yaw = var1.readByte();
-		this.pitch = var1.readByte();
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		super.readPacketData(dataInputStream);
+		this.yaw = dataInputStream.readByte();
+		this.pitch = dataInputStream.readByte();
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		super.writePacket(var1);
-		var1.writeByte(this.yaw);
-		var1.writeByte(this.pitch);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		super.writePacket(dataOutputStream);
+		dataOutputStream.writeByte(this.yaw);
+		dataOutputStream.writeByte(this.pitch);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/FreerunMap2.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.util.List;
+
+public class FreerunMap2 extends FreerunWorld {
+	private NamedLoc[] field_7520_0Jf79B45M5LyF7gNSt7S3L60dVHN10z1455f6e17X7DmMvubyaCJwQSRS5mq = new NamedLoc[]{new NamedLoc(-715, 103, -945, "spawn"), new NamedLoc(-718, 102, -944, -721, 104, -946, "spawn_start"), new NamedLoc(-752, 98, -910, -756, 102, -913, "checkpoint1"), new NamedLoc(-698, 90, -818, -701, 94, -812, "checkpoint2"), new NamedLoc(-697, 90, -783, -701, 93, -776, "checkpoint3"), new NamedLoc(-652, 94, -800, -655, 96, -798, "checkpoint4"), new NamedLoc(-633, 102, -769, -629, 104, -763, "checkpoint5"), new NamedLoc(-574, 91, -776, -578, 95, -780, "end")};
+
+	public FreerunMap2(File worldFile, String levelName) {
+		super(worldFile, levelName);
+	}
+
+	public NamedLoc[] getCheckpoints() {
+		return this.field_7520_0Jf79B45M5LyF7gNSt7S3L60dVHN10z1455f6e17X7DmMvubyaCJwQSRS5mq;
+	}
+
+	public int getResetY(long long1, long long2) {
+		return 88;
+	}
+
+	public List func_7517_8oADBp42n4G2Ly6U1WLv70n6VyS2bkokzo8dF7ayUqDb1A6ofY86pUJA8mf8() {
+		return this.field_7498_65957fU9nGL5PA2e96ZOK3ePBveSt2ceA9Glj10PC2Jo5s0wI21ix69flng2;
+	}
+}
--- net/minecraft/src/PlayerControllerCreative.java
+++ net/minecraft/src/PlayerControllerCreative.java
@@ -3,17 +3,17 @@
 import net.minecraft.client.Minecraft;
 
 public class PlayerControllerCreative extends PlayerController {
-	public PlayerControllerCreative(Minecraft var1) {
-		super(var1);
+	public PlayerControllerCreative(Minecraft minecraft) {
+		super(minecraft);
 		this.isInTestMode = true;
 	}
 
-	public void onRespawn(EntityPlayer var1) {
-		for(int var2 = 0; var2 < 9; ++var2) {
-			if(var1.inventory.mainInventory[var2] == null) {
-				this.mc.thePlayer.inventory.mainInventory[var2] = new ItemStack(((Block)Session.registeredBlocksList.get(var2)).blockID);
+	public void onRespawn(EntityPlayer entityPlayer) {
+		for(int i2 = 0; i2 < 9; ++i2) {
+			if(entityPlayer.inventory.mainInventory[i2] == null) {
+				this.mc.thePlayer.inventory.mainInventory[i2] = new ItemStack(((Block)Session.registeredBlocksList.get(i2)).blockID);
 			} else {
-				this.mc.thePlayer.inventory.mainInventory[var2].stackSize = 1;
+				this.mc.thePlayer.inventory.mainInventory[i2].stackSize = 1;
 			}
 		}
 
@@ -23,8 +23,8 @@
 		return false;
 	}
 
-	public void onWorldChange(World var1) {
-		super.onWorldChange(var1);
+	public void onWorldChange(World world) {
+		super.onWorldChange(world);
 	}
 
 	public void onUpdate() {
--- /dev/null
+++ net/minecraft/src/HubServerDetectorUnknownClass.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.logging.LogManager;
+import java.util.logging.Logger;
+
+public class HubServerDetectorUnknownClass {
+	private static final AtomicInteger field_12081_04iLgcPVYlkFQ1z8CCjl9K5RRFo87I3BXb917yZS3sxWv9985d95vl30PsxL = new AtomicInteger(0);
+	private static final Logger field_12079_6oES59ytM702rH8nNMp4QSVqQ36N1xi0c5ebhgyslEt68hq8ARUU5Feh89Jf = LogManager.getLogManager().getLogger(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9790_4Mn44antCz29B6GKYv6d2ZW6jUZp3xLB1XTEKn5O2h7Xzs27I617Goaxn8XY));
+	private static final String field_12080_6iHgeEaDL4TY1eiZ29uo5RRuCiezPjRlVZXk90SC3oEunk038vwToyr5fU93 = "CL_00001133";
+
+	static AtomicInteger func_12078_8095QTr6V051pTOyEln290S3uDK3v65566PUXfys595pR5uPyLtaonH4p9jn() {
+		return field_12081_04iLgcPVYlkFQ1z8CCjl9K5RRFo87I3BXb917yZS3sxWv9985d95vl30PsxL;
+	}
+
+	static Logger func_12077_9aCES4xVN044Nl6kBDM97r4haJIM3J7NY0D1z5IeNMU9oucd80P32kO8d8h5() {
+		return field_12079_6oES59ytM702rH8nNMp4QSVqQ36N1xi0c5ebhgyslEt68hq8ARUU5Feh89Jf;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockTeaDoor.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockTeaDoor extends BlockDoor {
+	public BlockTeaDoor(int integer1, int integer2) {
+		super(integer1, Material.wood);
+		this.blockIndexInTexture = integer2;
+	}
+
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : ExtItems.TeaDoor.shiftedIndex;
+	}
+}
--- /dev/null
+++ net/minecraft/src/Packet200SecureLogin.java
@@ -1,0 +1,62 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet200SecureLogin extends Packet1Login {
+	public int protocolVersion;
+	public String username;
+	public String password;
+	public String signature = "";
+	public int playerMode = 0;
+	public boolean verifyPassed = false;
+
+	public Packet200SecureLogin() {
+	}
+
+	public Packet200SecureLogin(String string1, String string2, int integer3, int integer4) {
+		this.username = string1;
+		this.password = string2;
+		this.protocolVersion = integer3;
+		this.playerMode = integer4;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		long j2 = dataInputStream.readLong();
+		this.username = dataInputStream.readUTF();
+		this.password = dataInputStream.readUTF();
+		this.protocolVersion = dataInputStream.readInt();
+		this.playerMode = dataInputStream.readInt();
+
+		try {
+			this.verifyPassed = CertUtils.verify(dataInputStream.readUTF(), j2 + "" + this.username + "" + this.password + "" + this.protocolVersion + "" + this.playerMode);
+		} catch (Exception exception5) {
+		}
+
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		long j2 = System.currentTimeMillis();
+		dataOutputStream.writeLong(j2);
+		dataOutputStream.writeUTF(this.username);
+		dataOutputStream.writeUTF(this.password);
+		dataOutputStream.writeInt(this.protocolVersion);
+		dataOutputStream.writeInt(this.playerMode);
+
+		try {
+			dataOutputStream.writeUTF(CertUtils.sign(j2 + "" + this.username + "" + this.password + "" + this.protocolVersion + "" + this.playerMode, CertUtils.loadedPrivKey));
+		} catch (Exception exception5) {
+			exception5.printStackTrace();
+		}
+
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleLogin(this);
+	}
+
+	public int getPacketSize() {
+		return 8 + this.username.length() + this.password.length() + 4 + 4;
+	}
+}
--- /dev/null
+++ net/minecraft/src/ExtCraftingRecipes.java
@@ -1,0 +1,103 @@
+package net.minecraft.src;
+
+public class ExtCraftingRecipes {
+	public static void RegisterCrafting(CraftingManager lb) {
+		lb.addRecipe(new ItemStack(ExtBlocks.PillarBlock, 4), new Object[]{"#X#", "X X", "#X#", '#', Block.planks, 'X', Item.stick});
+		lb.addRecipe(new ItemStack(ExtBlocks.QuadWindowGlassBlock, 2), new Object[]{" # ", "#X#", " # ", '#', Block.cobblestone, 'X', Block.glass});
+		lb.addRecipe(new ItemStack(ExtItems.obsidianSword), new Object[]{"#", "#", "$", '#', ExtItems.obsidianIngot, '$', Item.stick});
+		lb.addRecipe(new ItemStack(ExtItems.obsidianShovel), new Object[]{"#", "$", "$", '#', ExtItems.obsidianIngot, '$', Item.stick});
+		lb.addRecipe(new ItemStack(ExtItems.obsidianPick), new Object[]{"###", " $ ", " $ ", '#', ExtItems.obsidianIngot, '$', Item.stick});
+		lb.addRecipe(new ItemStack(ExtItems.obsidianHoe), new Object[]{"##", " $", " $", '#', ExtItems.obsidianIngot, '$', Item.stick});
+		lb.addRecipe(new ItemStack(ExtItems.obsidianHoe), new Object[]{"##", "$ ", "$ ", '#', ExtItems.obsidianIngot, '$', Item.stick});
+		lb.addRecipe(new ItemStack(ExtItems.obsidianAxe), new Object[]{"##", "#$", " $", '#', ExtItems.obsidianIngot, '$', Item.stick});
+		lb.addRecipe(new ItemStack(ExtItems.obsidianAxe), new Object[]{"##", "$ ", "$ ", '#', ExtItems.obsidianIngot, '$', Item.stick});
+		lb.addRecipe(new ItemStack(ExtItems.obsidianArmor0), new Object[]{"###", "# #", '#', ExtItems.obsidianIngot});
+		lb.addRecipe(new ItemStack(ExtItems.obsidianArmor2), new Object[]{"###", "# #", "# #", '#', ExtItems.obsidianIngot});
+		lb.addRecipe(new ItemStack(ExtItems.obsidianArmor3), new Object[]{"# #", "# #", '#', ExtItems.obsidianIngot});
+		lb.addRecipe(new ItemStack(ExtItems.obsidianArmor1), new Object[]{"# #", "###", "###", '#', ExtItems.obsidianIngot});
+		lb.addShapelessRecipe(new ItemStack(ExtBlocks.woolPink), new Object[]{"#X", '#', Block.cloth, 'X', ExtItems.pinkDye});
+		lb.addShapelessRecipe(new ItemStack(ExtBlocks.woolBlue), new Object[]{"#X", '#', Block.cloth, 'X', ExtItems.blueDye});
+		lb.addShapelessRecipe(new ItemStack(ExtBlocks.woolGreen), new Object[]{"#X", '#', Block.cloth, 'X', ExtItems.greenDye});
+		lb.addShapelessRecipe(new ItemStack(ExtBlocks.woolBlack), new Object[]{"#X", '#', Block.cloth, 'X', ExtItems.blackDye});
+		lb.addRecipe(new ItemStack(ExtItems.edibleFire), new Object[]{"#", '#', ExtBlocks.blueFireIdk});
+		lb.addRecipe(new ItemStack(ExtBlocks.FireSkyPlanks, 4), new Object[]{"#", '#', ExtBlocks.FireSkyWood});
+		lb.addRecipe(new ItemStack(ExtBlocks.AncientPlanks, 3), new Object[]{"#", '#', ExtBlocks.AncientWood});
+		lb.addRecipe(new ItemStack(ExtItems.fireWoodDoor), new Object[]{"##", "##", "##", '#', ExtBlocks.FireSkyPlanks});
+		lb.addRecipe(new ItemStack(ExtItems.essence, 9), new Object[]{"#", '#', ExtBlocks.EssenceBlock});
+		lb.addRecipe(new ItemStack(ExtBlocks.EssenceBlock), new Object[]{"###", "###", "###", '#', ExtItems.essence});
+		lb.addRecipe(new ItemStack(ExtBlocks.EssenceTransformer), new Object[]{"###", "#X#", "###", '#', Block.cobblestone, 'X', Item.redstone});
+		lb.addRecipe(new ItemStack(ExtBlocks.essenceFountain), new Object[]{"#X#", "###", '#', Block.cobblestone, 'X', ExtItems.essence});
+		lb.addRecipe(new ItemStack(ExtBlocks.EssenceCloner), new Object[]{"777", "7X7", "727", '7', Block.cobblestone, 'X', Item.redstone, '2', ExtBlocks.EssenceBlock});
+		lb.addRecipe(new ItemStack(ExtItems.essenceGun), new Object[]{"#  ", "SEX", " #7", '#', Item.ingotIron, 'S', Item.redstone, 'E', Item.stick, 'X', ExtItems.essence, '7', Block.planks});
+		lb.addRecipe(new ItemStack(ExtBlocks.QuadWindowGlassBlock, 8), new Object[]{"727", "222", "727", '7', Block.glass, '2', Block.obsidian});
+		lb.addRecipe(new ItemStack(ExtBlocks.QGlassMagenta, 8), new Object[]{"727", "262", "727", '7', Block.glass, '2', Block.obsidian, '6', ExtBlocks.woolPink});
+		lb.addRecipe(new ItemStack(ExtBlocks.QGlassBlack, 8), new Object[]{"727", "262", "727", '7', Block.glass, '2', Block.obsidian, '6', ExtBlocks.woolBlack});
+		lb.addRecipe(new ItemStack(ExtBlocks.QGlassGreen, 8), new Object[]{"727", "262", "727", '7', Block.glass, '2', Block.obsidian, '6', ExtBlocks.woolGreen});
+		lb.addRecipe(new ItemStack(ExtBlocks.QGlassBlue, 8), new Object[]{"727", "262", "727", '7', Block.glass, '2', Block.obsidian, '6', ExtBlocks.woolBlue});
+		lb.addRecipe(new ItemStack(ExtBlocks.TileBlock, 4), new Object[]{"727", "272", "727", '7', Block.brick, '2', Block.cobblestone});
+		lb.addRecipe(new ItemStack(ExtBlocks.TileBlock2NonFucked, 4), new Object[]{"7 7", " 7 ", "7 7", '7', Block.brick});
+		lb.addRecipe(new ItemStack(ExtBlocks.dimensionFloorBlock, 4), new Object[]{"72", "27", '7', ExtBlocks.TileBlock3, '2', ExtBlocks.TileBlock4});
+		lb.addRecipe(new ItemStack(ExtBlocks.dimensionFloorBlock, 4), new Object[]{"72", "27", '7', ExtBlocks.TileBlock4, '2', ExtBlocks.TileBlock3});
+		lb.addRecipe(new ItemStack(ExtBlocks.EmptyBookshelf, 1), new Object[]{"#i#", " i ", "#i#", '#', Block.planks, 'i', Item.stick});
+		lb.addRecipe(new ItemStack(ExtBlocks.Bookshelf, 1), new Object[]{"###", " i ", "###", '#', Item.book, 'i', ExtBlocks.EmptyBookshelf});
+		lb.addRecipe(new ItemStack(ExtItems.Spear, 1), new Object[]{"#", "#", "#", '#', Item.ingotIron});
+		lb.addRecipe(new ItemStack(ExtBlocks.SkyFlameInGlass, 8), new Object[]{"###", "#1#", "###", '#', Block.glass, '1', ExtBlocks.glowingFlowerInfBasic});
+		lb.addRecipe(new ItemStack(ExtBlocks.GoldFlameInGlass, 8), new Object[]{"###", "#1#", "###", '#', Block.glass, '1', ExtBlocks.glowingFlowerInfGold});
+		lb.addRecipe(new ItemStack(ExtBlocks.ObsidianFlameInGlass, 8), new Object[]{"###", "#1#", "###", '#', Block.glass, '1', ExtBlocks.glowingFlowerInfObsidian});
+		lb.addRecipe(new ItemStack(ExtBlocks.LowFlameInGlass, 8), new Object[]{"###", "#1#", "###", '#', Block.glass, '1', ExtBlocks.LowGlowingFlower});
+		lb.addRecipe(new ItemStack(ExtBlocks.LichenMass, 4), new Object[]{"##", "##", '#', ExtBlocks.Lichen});
+		lb.addRecipe(new ItemStack(ExtBlocks.LichenBricks, 4), new Object[]{" # ", "#1#", " # ", '#', ExtBlocks.Lichen, '1', Block.brick});
+		lb.addRecipe(new ItemStack(Block.cobblestoneMossy, 4), new Object[]{" # ", "#1#", " # ", '#', ExtBlocks.Lichen, '1', Block.cobblestone});
+		lb.addRecipe(new ItemStack(ExtItems.GranularSalt, 4), new Object[]{"#", '#', ExtBlocks.saltBlock});
+		lb.addRecipe(new ItemStack(ExtBlocks.SaltBricks, 4), new Object[]{"##", "##", '#', ExtItems.GranularSalt});
+		lb.addRecipe(new ItemStack(ExtItems.MyconStrand, 4), new Object[]{"#", "#", '#', ExtBlocks.MyconPlank});
+		lb.addRecipe(new ItemStack(ExtBlocks.MyconPlank, 4), new Object[]{"#", '#', ExtBlocks.MyconStem});
+		lb.addRecipe(new ItemStack(ExtItems.MyconPickaxe), new Object[]{"###", " $ ", " $ ", '$', ExtItems.MyconStrand, '#', ExtBlocks.MyconPlank});
+		lb.addRecipe(new ItemStack(ExtItems.MyconAxe), new Object[]{"##", "#$", " $", '$', ExtItems.MyconStrand, '#', ExtBlocks.MyconPlank});
+		lb.addRecipe(new ItemStack(ExtItems.MyconHoe), new Object[]{"##", " $", " $", '$', ExtItems.MyconStrand, '#', ExtBlocks.MyconPlank});
+		lb.addRecipe(new ItemStack(ExtItems.MyconShovel), new Object[]{"#", "$", "$", '$', ExtItems.MyconStrand, '#', ExtBlocks.MyconPlank});
+		lb.addRecipe(new ItemStack(ExtItems.MyconSword), new Object[]{"#", "#", "$", '$', ExtItems.MyconStrand, '#', ExtBlocks.MyconPlank});
+		lb.addRecipe(new ItemStack(ExtBlocks.IronBrick, 4), new Object[]{" # ", "#1#", " # ", '#', Item.ingotIron, '1', Block.brick});
+		lb.addRecipe(new ItemStack(ExtBlocks.GoldBrick, 4), new Object[]{" # ", "#1#", " # ", '#', Item.ingotGold, '1', Block.brick});
+		lb.addRecipe(new ItemStack(ExtBlocks.DiamondBrick, 4), new Object[]{" # ", "#1#", " # ", '#', Item.diamond, '1', Block.brick});
+		lb.addRecipe(new ItemStack(ExtBlocks.ObsidianBrick, 4), new Object[]{" # ", "#1#", " # ", '#', ExtItems.obsidianIngot, '1', Block.brick});
+		lb.addRecipe(new ItemStack(ExtBlocks.BismuthBrick, 4), new Object[]{" # ", "#1#", " # ", '#', ExtItems.BismuthIngot, '1', Block.brick});
+		lb.addRecipe(new ItemStack(ExtBlocks.BismuthBlock, 4), new Object[]{"##", "##", '#', ExtItems.BismuthIngot});
+		lb.addRecipe(new ItemStack(ExtBlocks.BismuthPillar, 4), new Object[]{"#1#", "1 1", "#1#", '#', ExtBlocks.BismuthBlock, '1', ExtItems.BismuthIngot});
+		lb.addRecipe(new ItemStack(ExtBlocks.FirewoodWorkbench, 1), new Object[]{"##", "##", '#', ExtBlocks.FireSkyPlanks});
+		lb.addRecipe(new ItemStack(ExtBlocks.HighwoodWorkbench, 1), new Object[]{"##", "##", '#', ExtBlocks.AncientPlanks});
+		lb.addRecipe(new ItemStack(ExtBlocks.MyconWorkbench, 1), new Object[]{"##", "##", '#', ExtBlocks.MyconPlank});
+		lb.addRecipe(new ItemStack(ExtItems.MyconDoor), new Object[]{"##", "##", "##", '#', ExtBlocks.MyconPlank});
+		lb.addRecipe(new ItemStack(ExtItems.HighwoodDoor), new Object[]{"##", "##", "##", '#', ExtBlocks.AncientPlanks});
+		lb.addRecipe(new ItemStack(ExtBlocks.TeaPlank, 4), new Object[]{"#", '#', ExtBlocks.TeaWood});
+		lb.addRecipe(new ItemStack(ExtBlocks.MalachiteBlock, 1), new Object[]{"###", "###", "###", '#', ExtItems.Malachite});
+		lb.addRecipe(new ItemStack(ExtBlocks.LaceAgateBlock, 1), new Object[]{"###", "###", "###", '#', ExtItems.LaceAgate});
+		lb.addRecipe(new ItemStack(ExtBlocks.ClinohumiteBlock, 1), new Object[]{"###", "###", "###", '#', ExtItems.Clinohumite});
+		lb.addRecipe(new ItemStack(ExtBlocks.PyriteBlock, 1), new Object[]{"###", "###", "###", '#', ExtItems.Pyrite});
+		lb.addRecipe(new ItemStack(ExtItems.Malachite, 9), new Object[]{"#", '#', ExtBlocks.MalachiteBlock});
+		lb.addRecipe(new ItemStack(ExtItems.LaceAgate, 9), new Object[]{"#", '#', ExtBlocks.LaceAgateBlock});
+		lb.addRecipe(new ItemStack(ExtItems.Clinohumite, 9), new Object[]{"#", '#', ExtBlocks.ClinohumiteBlock});
+		lb.addRecipe(new ItemStack(ExtItems.Pyrite, 9), new Object[]{"#", '#', ExtBlocks.PyriteBlock});
+		lb.addRecipe(new ItemStack(ExtItems.FrigidBits, 8), new Object[]{"#", '#', ExtBlocks.FrigidTrunk});
+		lb.addRecipe(new ItemStack(ExtItems.TeaBucket, 1), new Object[]{" # ", "#1#", " # ", '#', ExtItems.TeaLeaf, '1', Item.bucketWater});
+		lb.addRecipe(new ItemStack(ExtItems.HearthenMirror, 1), new Object[]{" # ", "#1#", " # ", '#', Item.ingotGold, '1', ExtBlocks.blueFireIdk});
+		lb.addRecipe(new ItemStack(ExtBlocks.FlamewoodPillar, 4), new Object[]{"#X#", "X X", "#X#", '#', ExtBlocks.FireSkyPlanks, 'X', Item.stick});
+		lb.addRecipe(new ItemStack(ExtBlocks.MyconPillar, 4), new Object[]{"#X#", "X X", "#X#", '#', ExtBlocks.MyconPlank, 'X', ExtItems.MyconStrand});
+		lb.addRecipe(new ItemStack(ExtBlocks.TeaPillar, 4), new Object[]{"#X#", "X X", "#X#", '#', ExtBlocks.TeaPlank, 'X', Item.stick});
+		lb.addRecipe(new ItemStack(ExtBlocks.HighwoodPillar, 4), new Object[]{"#X#", "X X", "#X#", '#', ExtBlocks.AncientPlanks, 'X', Item.stick});
+		lb.addRecipe(new ItemStack(ExtBlocks.Freezer), new Object[]{"###", "#1#", "###", '#', Block.cobblestone, '1', Block.blockSnow});
+		lb.addRecipe(new ItemStack(ExtBlocks.woodSingle, 3), new Object[]{"###", '#', Block.planks});
+		lb.addRecipe(new ItemStack(ExtBlocks.SmoothStone, 4), new Object[]{"##", "##", '#', Block.stone});
+		lb.addRecipe(new ItemStack(ExtBlocks.SmoothLimestone, 4), new Object[]{"##", "##", '#', ExtBlocks.Limestone});
+		lb.addRecipe(new ItemStack(ExtItems.IceDoor), new Object[]{"##", "##", "##", '#', Block.ice});
+		lb.addRecipe(new ItemStack(ExtItems.TheOneTrueBook), new Object[]{"12", "34", '1', ExtItems.HoursLongPastI, '2', ExtItems.HoursLongPastII, '3', ExtItems.HoursLongPastIII, '4', ExtItems.HoursLongPastVI});
+	}
+
+	public static int GetSmeltingRecipe(int integer) {
+		return integer == Block.obsidian.blockID ? ExtItems.obsidianIngot.shiftedIndex : (integer == Item.coal.shiftedIndex ? ExtItems.blackDye.shiftedIndex : (integer == Item.redstone.shiftedIndex ? ExtItems.greenDye.shiftedIndex : (integer == Block.plantYellow.blockID ? ExtItems.blueDye.shiftedIndex : (integer == Block.mushroomBrown.blockID ? ExtItems.pinkDye.shiftedIndex : (integer == Block.mushroomRed.blockID ? ExtItems.fryshroom.shiftedIndex : (integer == ExtBlocks.LowOreGold.blockID ? Item.ingotGold.shiftedIndex : (integer == ExtBlocks.LowOreIron.blockID ? Item.ingotIron.shiftedIndex : (integer == ExtBlocks.BismuthOre.blockID ? ExtItems.BismuthIngot.shiftedIndex : (integer == ExtBlocks.LimeCobblestone.blockID ? ExtBlocks.Limestone.blockID : -1)))))))));
+	}
+
+	public static int newFreezing(int integer) {
+		return integer == Item.bucketWater.shiftedIndex ? Block.ice.blockID : (integer == Block.blockSnow.blockID ? ExtBlocks.SnowBrick.blockID : (integer == Item.appleRed.shiftedIndex ? ExtItems.CandyIce.shiftedIndex : (integer == Block.dirt.blockID ? Block.blockSnow.blockID : (integer == ExtItems.edibleFire.shiftedIndex ? ExtBlocks.blueFireIdk.blockID : (integer == Item.slimeBall.shiftedIndex ? Item.snowball.shiftedIndex : -1)))));
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandUnknownClass2.java
@@ -1,0 +1,67 @@
+package net.minecraft.src;
+
+import java.util.List;
+
+import net.minecraft.client.Minecraft;
+
+public class CommandUnknownClass2 {
+	private Minecraft field_11840_9swGCi8V8YHS8T1b3yIdpeBI27w6IBPn67ig5BinVe6224MQ0Ekj2h9TfQ9E;
+	public CommandManager field_11839_52dbdXLg3Wx81i6gW4IYo1Bq32Pz2QIUyPjWOA1i0OJRd00ZX7w649E5B4JD = new CommandManager();
+
+	public CommandUnknownClass2(Minecraft minecraft) {
+		this.field_11840_9swGCi8V8YHS8T1b3yIdpeBI27w6IBPn67ig5BinVe6224MQ0Ekj2h9TfQ9E = minecraft;
+	}
+
+	public void func_11838_1mCSTFiXQZMQRgg38E4l2za0x1wQzUIIZQAoUEJ051l3R9Cc00Qmou4eQ5Yf(int integer1, int integer2) {
+		Gui.drawGradientRect(1, 1, integer1 - 1, 13, -266724838, -1608902118);
+		Gui.drawGradientRect(2, 2, integer1 - 2, 12, -265080013, -1607257293);
+		int i3 = this.field_11840_9swGCi8V8YHS8T1b3yIdpeBI27w6IBPn67ig5BinVe6224MQ0Ekj2h9TfQ9E.fontRenderer.getStringWidth("3emj MC16.05 >");
+		Gui.drawString(this.field_11840_9swGCi8V8YHS8T1b3yIdpeBI27w6IBPn67ig5BinVe6224MQ0Ekj2h9TfQ9E.fontRenderer, "3emj MC16.05 >", 3, 3, 16187136);
+		Gui.drawString(this.field_11840_9swGCi8V8YHS8T1b3yIdpeBI27w6IBPn67ig5BinVe6224MQ0Ekj2h9TfQ9E.fontRenderer, this.field_11839_52dbdXLg3Wx81i6gW4IYo1Bq32Pz2QIUyPjWOA1i0OJRd00ZX7w649E5B4JD.field_12074_59H713eWwMqHt2BkXfmtU7Gw1Ed2yJ84RRj5r8Os9hXCRrICXE2XfeV2i7Jm + "_", 8 + i3, 3, 0xFFFFFF);
+		String[] string4 = this.field_11839_52dbdXLg3Wx81i6gW4IYo1Bq32Pz2QIUyPjWOA1i0OJRd00ZX7w649E5B4JD.field_12074_59H713eWwMqHt2BkXfmtU7Gw1Ed2yJ84RRj5r8Os9hXCRrICXE2XfeV2i7Jm.split(" ");
+		if(string4.length > 0) {
+			boolean z5 = false;
+			CommandManagerUnknownClass commandManagerUnknownClass6 = this.field_11839_52dbdXLg3Wx81i6gW4IYo1Bq32Pz2QIUyPjWOA1i0OJRd00ZX7w649E5B4JD.func_12064_066qvw8i8VJk9r8W9zey0qBl7l4RI0SeVtY38i356k7OodNhLGt3200y64s6(string4[0]);
+			if(commandManagerUnknownClass6 != null) {
+				byte b11 = 30;
+				Gui.drawGradientRect(1, 14, integer1 - 1, 14 + b11 + 8, -1608902118, -266724838);
+				Gui.drawGradientRect(2, 15, integer1 - 2, 15 + b11 + 6, -1607257293, -265080013);
+
+				String string7;
+				try {
+					string7 = commandManagerUnknownClass6.field_12023_4a6hGbi1yf1wisYXW788UpKE9grOBLI6J908Opcn8Zv63ROZKy49K6Z3M3gz.func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe();
+				} catch (Exception exception10) {
+					string7 = "(error getting value)";
+				}
+
+				Gui.drawString(this.field_11840_9swGCi8V8YHS8T1b3yIdpeBI27w6IBPn67ig5BinVe6224MQ0Ekj2h9TfQ9E.fontRenderer, string7.equals("~exec") ? "executable command" : "current value", 4, 16, 11579568);
+				if(!string7.equals("~exec")) {
+					Gui.drawString(this.field_11840_9swGCi8V8YHS8T1b3yIdpeBI27w6IBPn67ig5BinVe6224MQ0Ekj2h9TfQ9E.fontRenderer, string7, 80, 16, 0xFFFFFF);
+				}
+
+				String string8 = commandManagerUnknownClass6.field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640.length == 0 ? "" : "domain is ";
+
+				for(int i9 = 0; i9 != commandManagerUnknownClass6.field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640.length; ++i9) {
+					string8 = string8 + "any " + commandManagerUnknownClass6.field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640[i9].getSimpleName().toLowerCase();
+					if(i9 != commandManagerUnknownClass6.field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640.length - 1) {
+						string8 = string8 + ", ";
+					}
+				}
+
+				Gui.drawString(this.field_11840_9swGCi8V8YHS8T1b3yIdpeBI27w6IBPn67ig5BinVe6224MQ0Ekj2h9TfQ9E.fontRenderer, string8, 16, 36, 11579568);
+			} else {
+				List list13 = this.field_11839_52dbdXLg3Wx81i6gW4IYo1Bq32Pz2QIUyPjWOA1i0OJRd00ZX7w649E5B4JD.func_12065_70o5m3y9gbwr3PpxBbyXBPCTq6zSby60p7fwgFYI1mH6IJ8DJMrZAt2f87KR(string4[0]);
+				if(list13.size() != 0) {
+					int i12 = list13.size() * 10;
+					Gui.drawGradientRect(1, 14, integer1 - 1, 14 + i12 + 8, -1608902118, -266724838);
+					Gui.drawGradientRect(2, 15, integer1 - 2, 15 + i12 + 6, -1607257293, -265080013);
+
+					for(int i14 = 0; i14 != list13.size(); ++i14) {
+						Gui.drawString(this.field_11840_9swGCi8V8YHS8T1b3yIdpeBI27w6IBPn67ig5BinVe6224MQ0Ekj2h9TfQ9E.fontRenderer, ((CommandManagerUnknownClass)list13.get(i14)).field_12024_1q5eqd4V75vh5r0RkoHJF19l4S347yEp0rA4sR70sQOr8jdcCj1Z12u5PSx9, 16, 16 + i14 * 10, 11579568);
+					}
+				}
+			}
+		}
+
+	}
+}
--- net/minecraft/src/BlockLever.java
+++ net/minecraft/src/BlockLever.java
@@ -1,11 +1,11 @@
 package net.minecraft.src;
 
 public class BlockLever extends Block {
-	protected BlockLever(int var1, int var2) {
-		super(var1, var2, Material.circuits);
+	protected BlockLever(int id, int blockIndex) {
+		super(id, blockIndex, Material.circuits);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -21,172 +21,172 @@
 		return 12;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2 - 1, var3, var4) ? true : (var1.isBlockNormalCube(var2 + 1, var3, var4) ? true : (var1.isBlockNormalCube(var2, var3, var4 - 1) ? true : (var1.isBlockNormalCube(var2, var3, var4 + 1) ? true : var1.isBlockNormalCube(var2, var3 - 1, var4))));
-	}
-
-	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		int var7 = var6 & 8;
-		var6 &= 7;
-		if(var5 == 1 && var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var6 = 5 + var1.rand.nextInt(2);
-		}
-
-		if(var5 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var6 = 4;
-		}
-
-		if(var5 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var6 = 3;
-		}
-
-		if(var5 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var6 = 2;
-		}
-
-		if(var5 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var6 = 1;
-		}
-
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var6 + var7);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-		} else if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 2);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 3);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 4);
-		} else if(var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 5 + var1.rand.nextInt(2));
-		}
-
-		this.checkIfAttachedToBlock(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(this.checkIfAttachedToBlock(var1, var2, var3, var4)) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4) & 7;
-			boolean var7 = false;
-			if(!var1.isBlockNormalCube(var2 - 1, var3, var4) && var6 == 1) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2 + 1, var3, var4) && var6 == 2) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 - 1) && var6 == 3) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 + 1) && var6 == 4) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && var6 == 5) {
-				var7 = true;
-			}
-
-			if(var7) {
-				this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-				var1.setBlockWithNotify(var2, var3, var4, 0);
-			}
-		}
-
-	}
-
-	private boolean checkIfAttachedToBlock(World var1, int var2, int var3, int var4) {
-		if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x - 1, y, z) ? true : (world.isBlockNormalCube(x + 1, y, z) ? true : (world.isBlockNormalCube(x, y, z - 1) ? true : (world.isBlockNormalCube(x, y, z + 1) ? true : world.isBlockNormalCube(x, y - 1, z))));
+	}
+
+	public void onBlockPlaced(World world, int x, int y, int z, int notifyFlag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		int i7 = i6 & 8;
+		i6 &= 7;
+		if(notifyFlag == 1 && world.isBlockNormalCube(x, y - 1, z)) {
+			i6 = 5 + world.rand.nextInt(2);
+		}
+
+		if(notifyFlag == 2 && world.isBlockNormalCube(x, y, z + 1)) {
+			i6 = 4;
+		}
+
+		if(notifyFlag == 3 && world.isBlockNormalCube(x, y, z - 1)) {
+			i6 = 3;
+		}
+
+		if(notifyFlag == 4 && world.isBlockNormalCube(x + 1, y, z)) {
+			i6 = 2;
+		}
+
+		if(notifyFlag == 5 && world.isBlockNormalCube(x - 1, y, z)) {
+			i6 = 1;
+		}
+
+		world.setBlockMetadataWithNotify(x, y, z, i6 + i7);
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		if(world.isBlockNormalCube(x - 1, y, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 1);
+		} else if(world.isBlockNormalCube(x + 1, y, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 2);
+		} else if(world.isBlockNormalCube(x, y, z - 1)) {
+			world.setBlockMetadataWithNotify(x, y, z, 3);
+		} else if(world.isBlockNormalCube(x, y, z + 1)) {
+			world.setBlockMetadataWithNotify(x, y, z, 4);
+		} else if(world.isBlockNormalCube(x, y - 1, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 5 + world.rand.nextInt(2));
+		}
+
+		this.checkIfAttachedToBlock(world, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(this.checkIfAttachedToBlock(world, x, y, z)) {
+			int i6 = world.getBlockMetadata(x, y, z) & 7;
+			boolean z7 = false;
+			if(!world.isBlockNormalCube(x - 1, y, z) && i6 == 1) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x + 1, y, z) && i6 == 2) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z - 1) && i6 == 3) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z + 1) && i6 == 4) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y - 1, z) && i6 == 5) {
+				z7 = true;
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+				world.setBlockWithNotify(x, y, z, 0);
+			}
+		}
+
+	}
+
+	private boolean checkIfAttachedToBlock(World world, int x, int y, int z) {
+		if(!this.canPlaceBlockAt(world, x, y, z)) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
 			return false;
 		} else {
 			return true;
 		}
 	}
 
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4) & 7;
-		float var6 = 3.0F / 16.0F;
-		if(var5 == 1) {
-			this.setBlockBounds(0.0F, 0.2F, 0.5F - var6, var6 * 2.0F, 0.8F, 0.5F + var6);
-		} else if(var5 == 2) {
-			this.setBlockBounds(1.0F - var6 * 2.0F, 0.2F, 0.5F - var6, 1.0F, 0.8F, 0.5F + var6);
-		} else if(var5 == 3) {
-			this.setBlockBounds(0.5F - var6, 0.2F, 0.0F, 0.5F + var6, 0.8F, var6 * 2.0F);
-		} else if(var5 == 4) {
-			this.setBlockBounds(0.5F - var6, 0.2F, 1.0F - var6 * 2.0F, 0.5F + var6, 0.8F, 1.0F);
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		int i5 = blockAccess.getBlockMetadata(x, y, z) & 7;
+		float f6 = 0.1875F;
+		if(i5 == 1) {
+			this.setBlockBounds(0.0F, 0.2F, 0.5F - f6, f6 * 2.0F, 0.8F, 0.5F + f6);
+		} else if(i5 == 2) {
+			this.setBlockBounds(1.0F - f6 * 2.0F, 0.2F, 0.5F - f6, 1.0F, 0.8F, 0.5F + f6);
+		} else if(i5 == 3) {
+			this.setBlockBounds(0.5F - f6, 0.2F, 0.0F, 0.5F + f6, 0.8F, f6 * 2.0F);
+		} else if(i5 == 4) {
+			this.setBlockBounds(0.5F - f6, 0.2F, 1.0F - f6 * 2.0F, 0.5F + f6, 0.8F, 1.0F);
 		} else {
-			var6 = 0.25F;
-			this.setBlockBounds(0.5F - var6, 0.0F, 0.5F - var6, 0.5F + var6, 0.6F, 0.5F + var6);
+			f6 = 0.25F;
+			this.setBlockBounds(0.5F - f6, 0.0F, 0.5F - f6, 0.5F + f6, 0.6F, 0.5F + f6);
 		}
 
 	}
 
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.blockActivated(var1, var2, var3, var4, var5);
+	public void onBlockClicked(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.blockActivated(world, x, y, z, entityPlayer);
 	}
 
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		int var7 = var6 & 7;
-		int var8 = 8 - (var6 & 8);
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + var8);
-		var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-		var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, var8 > 0 ? 0.6F : 0.5F);
-		var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-		if(var7 == 1) {
-			var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-		} else if(var7 == 2) {
-			var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-		} else if(var7 == 3) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-		} else if(var7 == 4) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		int i7 = i6 & 7;
+		int i8 = 8 - (i6 & 8);
+		world.setBlockMetadataWithNotify(x, y, z, i7 + i8);
+		world.markBlocksDirty(x, y, z, x, y, z);
+		world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.click", 0.3F, i8 > 0 ? 0.6F : 0.5F);
+		world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+		if(i7 == 1) {
+			world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+		} else if(i7 == 2) {
+			world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+		} else if(i7 == 3) {
+			world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+		} else if(i7 == 4) {
+			world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
 		} else {
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
 		}
 
 		return true;
 	}
 
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		if((var5 & 8) > 0) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			int var6 = var5 & 7;
-			if(var6 == 1) {
-				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			} else if(var6 == 2) {
-				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			} else if(var6 == 3) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			} else if(var6 == 4) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		if((i5 & 8) > 0) {
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			int i6 = i5 & 7;
+			if(i6 == 1) {
+				world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			} else if(i6 == 2) {
+				world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			} else if(i6 == 3) {
+				world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			} else if(i6 == 4) {
+				world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
 			} else {
-				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+				world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
 			}
 		}
 
-		super.onBlockRemoval(var1, var2, var3, var4);
-	}
-
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return (var1.getBlockMetadata(var2, var3, var4) & 8) > 0;
-	}
-
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if((var6 & 8) == 0) {
+		super.onBlockRemoval(world, x, y, z);
+	}
+
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int unused) {
+		return (blockAccess.getBlockMetadata(x, y, z) & 8) > 0;
+	}
+
+	public boolean isIndirectlyPoweringTo(World world, int x, int y, int z, int flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if((i6 & 8) == 0) {
 			return false;
 		} else {
-			int var7 = var6 & 7;
-			return var7 == 5 && var5 == 1 ? true : (var7 == 4 && var5 == 2 ? true : (var7 == 3 && var5 == 3 ? true : (var7 == 2 && var5 == 4 ? true : var7 == 1 && var5 == 5)));
+			int i7 = i6 & 7;
+			return i7 == 5 && flag == 1 ? true : (i7 == 4 && flag == 2 ? true : (i7 == 3 && flag == 3 ? true : (i7 == 2 && flag == 4 ? true : i7 == 1 && flag == 5)));
 		}
 	}
 
--- net/minecraft/src/EntityArrow.java
+++ net/minecraft/src/EntityArrow.java
@@ -2,27 +2,27 @@
 
 import java.util.List;
 
-public class EntityArrow extends Entity {
+public class EntityArrow extends EntityFirable {
 	private int xTile = -1;
 	private int yTile = -1;
 	private int zTile = -1;
 	private int inTile = 0;
 	private boolean inData = false;
 	public int arrowShake = 0;
-	private EntityLiving shootingEntity;
+	EntityLiving shootingEntity;
 	private int ticksInGround;
 	private int ticksInAir = 0;
 
-	public EntityArrow(World var1) {
-		super(var1);
+	public EntityArrow(World world) {
+		super(world);
 		this.setSize(0.5F, 0.5F);
 	}
 
-	public EntityArrow(World var1, EntityLiving var2) {
-		super(var1);
-		this.shootingEntity = var2;
+	public EntityArrow(World world, EntityLiving entityLiving) {
+		super(world);
+		this.shootingEntity = entityLiving;
 		this.setSize(0.5F, 0.5F);
-		this.setLocationAndAngles(var2.posX, var2.posY, var2.posZ, var2.rotationYaw, var2.rotationPitch);
+		this.setLocationAndAngles(entityLiving.posX, entityLiving.posY, entityLiving.posZ, entityLiving.rotationYaw, entityLiving.rotationPitch);
 		this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
 		this.posY -= (double)0.1F;
 		this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
@@ -34,23 +34,23 @@
 		this.setArrowHeading(this.motionX, this.motionY, this.motionZ, 1.5F, 1.0F);
 	}
 
-	public void setArrowHeading(double var1, double var3, double var5, float var7, float var8) {
-		float var9 = MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5);
-		var1 /= (double)var9;
-		var3 /= (double)var9;
-		var5 /= (double)var9;
-		var1 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-		var3 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-		var5 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-		var1 *= (double)var7;
-		var3 *= (double)var7;
-		var5 *= (double)var7;
-		this.motionX = var1;
-		this.motionY = var3;
-		this.motionZ = var5;
-		float var10 = MathHelper.sqrt_double(var1 * var1 + var5 * var5);
-		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(var1, var5) * 180.0D / (double)((float)Math.PI));
-		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(var3, (double)var10) * 180.0D / (double)((float)Math.PI));
+	public void setArrowHeading(double motionX, double motionY, double motionZ, float offsetY, float offsetZ) {
+		float f9 = MathHelper.sqrt_double(motionX * motionX + motionY * motionY + motionZ * motionZ);
+		motionX /= (double)f9;
+		motionY /= (double)f9;
+		motionZ /= (double)f9;
+		motionX += this.rand.nextGaussian() * (double)0.0075F * (double)offsetZ;
+		motionY += this.rand.nextGaussian() * (double)0.0075F * (double)offsetZ;
+		motionZ += this.rand.nextGaussian() * (double)0.0075F * (double)offsetZ;
+		motionX *= (double)offsetY;
+		motionY *= (double)offsetY;
+		motionZ *= (double)offsetY;
+		this.motionX = motionX;
+		this.motionY = motionY;
+		this.motionZ = motionZ;
+		float f10 = MathHelper.sqrt_double(motionX * motionX + motionZ * motionZ);
+		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(motionX, motionZ) * 180.0D / (double)(float)Math.PI);
+		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(motionY, (double)f10) * 180.0D / (double)(float)Math.PI);
 		this.ticksInGround = 0;
 	}
 
@@ -61,8 +61,8 @@
 		}
 
 		if(this.inData) {
-			int var1 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
-			if(var1 == this.inTile) {
+			int i1 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+			if(i1 == this.inTile) {
 				++this.ticksInGround;
 				if(this.ticksInGround == 1200) {
 					this.setEntityDead();
@@ -81,66 +81,66 @@
 			++this.ticksInAir;
 		}
 
-		Vec3D var15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-		Vec3D var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-		MovingObjectPosition var3 = this.worldObj.rayTraceBlocks(var15, var2);
-		var15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-		var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-		if(var3 != null) {
-			var2 = Vec3D.createVector(var3.hitVec.xCoord, var3.hitVec.yCoord, var3.hitVec.zCoord);
+		Vec3D vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		Vec3D vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		MovingObjectPosition movingObjectPosition3 = this.worldObj.rayTraceBlocks(vec3D15, vec3D2);
+		vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		if(movingObjectPosition3 != null) {
+			vec3D2 = Vec3D.createVector(movingObjectPosition3.hitVec.xCoord, movingObjectPosition3.hitVec.yCoord, movingObjectPosition3.hitVec.zCoord);
 		}
 
-		Entity var4 = null;
-		List var5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
-		double var6 = 0.0D;
+		Entity entity4 = null;
+		List list5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+		double d6 = 0.0D;
 
-		float var10;
-		for(int var8 = 0; var8 < var5.size(); ++var8) {
-			Entity var9 = (Entity)var5.get(var8);
-			if(var9.canBeCollidedWith() && (var9 != this.shootingEntity || this.ticksInAir >= 5)) {
-				var10 = 0.3F;
-				AxisAlignedBB var11 = var9.boundingBox.expand((double)var10, (double)var10, (double)var10);
-				MovingObjectPosition var12 = var11.calculateIntercept(var15, var2);
-				if(var12 != null) {
-					double var13 = var15.distanceTo(var12.hitVec);
-					if(var13 < var6 || var6 == 0.0D) {
-						var4 = var9;
-						var6 = var13;
+		float f8;
+		for(int i9 = 0; i9 < list5.size(); ++i9) {
+			Entity entity10 = (Entity)list5.get(i9);
+			if(entity10.canBeCollidedWith() && (entity10 != this.shootingEntity || this.ticksInAir >= 5)) {
+				f8 = 0.3F;
+				AxisAlignedBB axisAlignedBB11 = entity10.boundingBox.expand((double)f8, (double)f8, (double)f8);
+				MovingObjectPosition movingObjectPosition12 = axisAlignedBB11.calculateIntercept(vec3D15, vec3D2);
+				if(movingObjectPosition12 != null) {
+					double d13 = vec3D15.distanceTo(movingObjectPosition12.hitVec);
+					if(d13 < d6 || d6 == 0.0D) {
+						entity4 = entity10;
+						d6 = d13;
 					}
 				}
 			}
 		}
 
-		if(var4 != null) {
-			var3 = new MovingObjectPosition(var4);
+		if(entity4 != null) {
+			movingObjectPosition3 = new MovingObjectPosition(entity4);
 		}
 
-		float var16;
-		if(var3 != null) {
-			if(var3.entityHit != null) {
-				if(var3.entityHit.attackEntityFrom(this.shootingEntity, 4)) {
+		float f16;
+		if(movingObjectPosition3 != null) {
+			if(movingObjectPosition3.entityHit != null) {
+				if(movingObjectPosition3.entityHit.attackEntityFrom(this.shootingEntity, 4)) {
 					this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
 					this.setEntityDead();
 				} else {
-					this.motionX *= (double)-0.1F;
-					this.motionY *= (double)-0.1F;
-					this.motionZ *= (double)-0.1F;
+					this.motionX *= -0.10000000149011612D;
+					this.motionY *= -0.10000000149011612D;
+					this.motionZ *= -0.10000000149011612D;
 					this.rotationYaw += 180.0F;
 					this.prevRotationYaw += 180.0F;
 					this.ticksInAir = 0;
 				}
 			} else {
-				this.xTile = var3.blockX;
-				this.yTile = var3.blockY;
-				this.zTile = var3.blockZ;
+				this.xTile = movingObjectPosition3.blockX;
+				this.yTile = movingObjectPosition3.blockY;
+				this.zTile = movingObjectPosition3.blockZ;
 				this.inTile = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
-				this.motionX = (double)((float)(var3.hitVec.xCoord - this.posX));
-				this.motionY = (double)((float)(var3.hitVec.yCoord - this.posY));
-				this.motionZ = (double)((float)(var3.hitVec.zCoord - this.posZ));
-				var16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
-				this.posX -= this.motionX / (double)var16 * (double)0.05F;
-				this.posY -= this.motionY / (double)var16 * (double)0.05F;
-				this.posZ -= this.motionZ / (double)var16 * (double)0.05F;
+				this.motionX = (double)((float)(movingObjectPosition3.hitVec.xCoord - this.posX));
+				this.motionY = (double)((float)(movingObjectPosition3.hitVec.yCoord - this.posY));
+				this.motionZ = (double)((float)(movingObjectPosition3.hitVec.zCoord - this.posZ));
+				f16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
+				this.posX -= this.motionX / (double)f16 * (double)0.05F;
+				this.posY -= this.motionY / (double)f16 * (double)0.05F;
+				this.posZ -= this.motionZ / (double)f16 * (double)0.05F;
 				this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
 				this.inData = true;
 				this.arrowShake = 7;
@@ -150,10 +150,10 @@
 		this.posX += this.motionX;
 		this.posY += this.motionY;
 		this.posZ += this.motionZ;
-		var16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)((float)Math.PI));
+		f16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)(float)Math.PI);
 
-		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var16) * 180.0D / (double)((float)Math.PI)); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)f16) * 180.0D / (double)(float)Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
 		}
 
 		while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
@@ -170,46 +170,46 @@
 
 		this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
 		this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
-		float var17 = 0.99F;
-		var10 = 0.03F;
+		float f17 = 0.99F;
+		f8 = 0.03F;
 		if(this.handleWaterMovement()) {
-			for(int var18 = 0; var18 < 4; ++var18) {
-				float var19 = 0.25F;
-				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)var19, this.posY - this.motionY * (double)var19, this.posZ - this.motionZ * (double)var19, this.motionX, this.motionY, this.motionZ);
+			for(int i18 = 0; i18 < 4; ++i18) {
+				float f19 = 0.25F;
+				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)f19, this.posY - this.motionY * (double)f19, this.posZ - this.motionZ * (double)f19, this.motionX, this.motionY, this.motionZ);
 			}
 
-			var17 = 0.8F;
+			f17 = 0.8F;
 		}
 
-		this.motionX *= (double)var17;
-		this.motionY *= (double)var17;
-		this.motionZ *= (double)var17;
-		this.motionY -= (double)var10;
+		this.motionX *= (double)f17;
+		this.motionY *= (double)f17;
+		this.motionZ *= (double)f17;
+		this.motionY -= (double)f8;
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setShort("xTile", (short)this.xTile);
-		var1.setShort("yTile", (short)this.yTile);
-		var1.setShort("zTile", (short)this.zTile);
-		var1.setByte("inTile", (byte)this.inTile);
-		var1.setByte("shake", (byte)this.arrowShake);
-		var1.setByte("inGround", (byte)(this.inData ? 1 : 0));
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.xTile = var1.getShort("xTile");
-		this.yTile = var1.getShort("yTile");
-		this.zTile = var1.getShort("zTile");
-		this.inTile = var1.getByte("inTile") & 255;
-		this.arrowShake = var1.getByte("shake") & 255;
-		this.inData = var1.getByte("inGround") == 1;
-	}
-
-	public void onCollideWithPlayer(EntityPlayer var1) {
-		if(this.inData && this.shootingEntity == var1 && this.arrowShake <= 0 && var1.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setShort("xTile", (short)this.xTile);
+		nbttagcompound.setShort("yTile", (short)this.yTile);
+		nbttagcompound.setShort("zTile", (short)this.zTile);
+		nbttagcompound.setByte("inTile", (byte)this.inTile);
+		nbttagcompound.setByte("shake", (byte)this.arrowShake);
+		nbttagcompound.setByte("inGround", (byte)(this.inData ? 1 : 0));
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.xTile = nbttagcompound.getShort("xTile");
+		this.yTile = nbttagcompound.getShort("yTile");
+		this.zTile = nbttagcompound.getShort("zTile");
+		this.inTile = nbttagcompound.getByte("inTile") & 255;
+		this.arrowShake = nbttagcompound.getByte("shake") & 255;
+		this.inData = nbttagcompound.getByte("inGround") == 1;
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+		if(this.inData && this.shootingEntity == entityPlayer && this.arrowShake <= 0 && entityPlayer.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
 			this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-			var1.onItemPickup(this, 1);
+			entityPlayer.onItemPickup(this, 1);
 			this.setEntityDead();
 		}
 
--- /dev/null
+++ net/minecraft/src/CommandUnbind.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+class CommandUnbind extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8583_14m8mzv5wB1aiEBAzcN4Sac8s1Z25q39Icefwe4ID92eJ799yBdQE3ZNVLwV;
+    
+    CommandUnbind(final CommandManager abb) {
+        this.field_8583_14m8mzv5wB1aiEBAzcN4Sac8s1Z25q39Icefwe4ID92eJ799yBdQE3ZNVLwV = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        if (this.field_8583_14m8mzv5wB1aiEBAzcN4Sac8s1Z25q39Icefwe4ID92eJ799yBdQE3ZNVLwV.field_12072_57Pslv03tR1GVO6rfR7Myg6SJ9Dfi77KWF699D8Zy703Dh2cM61HfFA0VmYd.containsKey((int)arr[0])) {
+            this.field_8583_14m8mzv5wB1aiEBAzcN4Sac8s1Z25q39Icefwe4ID92eJ799yBdQE3ZNVLwV.field_12072_57Pslv03tR1GVO6rfR7Myg6SJ9Dfi77KWF699D8Zy703Dh2cM61HfFA0VmYd.remove((int)arr[0]);
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/ItemHoursLongPastII.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+public class ItemHoursLongPastII extends Item {
+	private int field_9421_82dGO9OdChM6cULsX841DGSRZt4koxJx8Ra2615Ji24oKXk0Kh3Fm8843GJG = 802;
+
+	public ItemHoursLongPastII(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		worldObj.playSoundAtEntity(entityPlayer, "ext.notif", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+		GuiInGameUnknownClass2 guiInGameUnknownClass24 = (GuiInGameUnknownClass2)InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.field_11177_7Zksb7i503i87T27QXh6g1K1pS0mrm03cH6J60Ws3B3hciqhuD9PIOw861xp.peek();
+		if(guiInGameUnknownClass24 == null || guiInGameUnknownClass24.field_8627_0ZmECs21Yya5NZUsnBNbB5tPFhkwONMzlzVXHX4jsV5aynDc020B97BLqocx != this.field_9421_82dGO9OdChM6cULsX841DGSRZt4koxJx8Ra2615Ji24oKXk0Kh3Fm8843GJG) {
+			InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11171_604vK63ksNcNlyaekc36K9YTmY8326K6noo7h77989I2TsYQ61KM5M25Nii9("Hours Long Past II \nThen, in a darkness so bright it blinded all who saw it - the world changed.\nWhat once was its surface now lay deep below\nsmothered by ever-young stone and with skies bleeding light far above.\nThe world changed in an instant. A vast new unknown.", 20000, this.field_9421_82dGO9OdChM6cULsX841DGSRZt4koxJx8Ra2615Ji24oKXk0Kh3Fm8843GJG);
+		}
+
+		return itemStack;
+	}
+}
--- /dev/null
+++ net/minecraft/src/HubWorldUnknownClass2.java
@@ -1,0 +1,128 @@
+package net.minecraft.src;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+public abstract class HubWorldUnknownClass2 {
+	public int field_9833_9Psx0tZC91cMh7ZAzUJ658Kzvt14VXdr7EZ2i1DLVD9g4MlOJonxzd0TGHB9;
+	protected HubWorld field_9831_9di5kTyQJSVIL4e04LHO4k6zJ1R6dE2XFd7U87CVdoCE497R8cfT70Idl59f;
+	public Map field_9828_402Fu54l8TN2Bk80iCfxL13eV1alTV2m2yuc0ENbnJKb9yho3t8yoy6p2U16;
+	private int field_9834_49YKQ9H4rrqumwJ440g4Mih74Nh25b3khR0956wdddVjq9A278gi4nUXDmg5;
+	private int field_9830_7C4VOY68RA8Zy4TwusOsh6A2t4L4uXD7kPKxs6Dy2d35t3Ziv1aw4I0uQ6o8;
+	private int field_9827_11fE8Ox7P73E077oD4aH1xmldckIt3kdPUm7WME2kV9Rpk2Ky85479aFl1oG;
+	public int field_9837_3X8uS9Os0Ro4y2OE9xS3l95Rn75LDno8OkmTSU4PUHOIRmXt6887Qc80QbJp;
+	public int field_9835_4xQ8UJa1zzwd5Ak02TtA45g8muig5017CnUqTI595caW1tt0I0n2G8Fq86z7;
+	public int field_9832_04229h383DiAbTtznv60GRjak8V5dt3yQ79a0e8ICDtjs9toY69Ld05AykI1;
+	protected NibbleArray field_9836_5CixT11auYqthm59bz65N7pR6c1kFc4PgWOJTyMES6c8JRFtTc8y4fu4by3m;
+	protected NibbleArray field_9829_1ZuLBTbJCb68R6q2Pu8z16VwdmUU78La4DGYSspy8oZ48Z2dLDn7EaVJQ5s6;
+
+	public HubWorldUnknownClass2(HubWorld wv, int integer2, int integer3, int integer4) {
+		this(wv, integer2, integer3, integer4, 16, 16, 5);
+	}
+
+	public HubWorldUnknownClass2(HubWorld wv, int integer2, int integer3, int integer4, int integer5, int integer6, int integer7) {
+		this.field_9831_9di5kTyQJSVIL4e04LHO4k6zJ1R6dE2XFd7U87CVdoCE497R8cfT70Idl59f = wv;
+		this.field_9834_49YKQ9H4rrqumwJ440g4Mih74Nh25b3khR0956wdddVjq9A278gi4nUXDmg5 = integer2;
+		this.field_9830_7C4VOY68RA8Zy4TwusOsh6A2t4L4uXD7kPKxs6Dy2d35t3Ziv1aw4I0uQ6o8 = integer3;
+		this.field_9827_11fE8Ox7P73E077oD4aH1xmldckIt3kdPUm7WME2kV9Rpk2Ky85479aFl1oG = integer4;
+		this.field_9837_3X8uS9Os0Ro4y2OE9xS3l95Rn75LDno8OkmTSU4PUHOIRmXt6887Qc80QbJp = integer5;
+		this.field_9835_4xQ8UJa1zzwd5Ak02TtA45g8muig5017CnUqTI595caW1tt0I0n2G8Fq86z7 = integer6;
+		this.field_9832_04229h383DiAbTtznv60GRjak8V5dt3yQ79a0e8ICDtjs9toY69Ld05AykI1 = integer7;
+		this.field_9833_9Psx0tZC91cMh7ZAzUJ658Kzvt14VXdr7EZ2i1DLVD9g4MlOJonxzd0TGHB9 = 0;
+		this.field_9836_5CixT11auYqthm59bz65N7pR6c1kFc4PgWOJTyMES6c8JRFtTc8y4fu4by3m = new NibbleArray(32768);
+		this.field_9829_1ZuLBTbJCb68R6q2Pu8z16VwdmUU78La4DGYSspy8oZ48Z2dLDn7EaVJQ5s6 = new NibbleArray(this.field_9836_5CixT11auYqthm59bz65N7pR6c1kFc4PgWOJTyMES6c8JRFtTc8y4fu4by3m.data.length);
+		this.field_9828_402Fu54l8TN2Bk80iCfxL13eV1alTV2m2yuc0ENbnJKb9yho3t8yoy6p2U16 = new HashMap();
+	}
+
+	protected boolean func_9823_0ir18WW2Er00vPEwk4ysWYEf3jBf0oDxYSVBcO27LQ7O9UiZXGtduk6tgrab(int integer1, int integer2, int integer3, int integer4) {
+		if(this.field_9831_9di5kTyQJSVIL4e04LHO4k6zJ1R6dE2XFd7U87CVdoCE497R8cfT70Idl59f.setBlock(this.field_9834_49YKQ9H4rrqumwJ440g4Mih74Nh25b3khR0956wdddVjq9A278gi4nUXDmg5 + integer1, this.field_9830_7C4VOY68RA8Zy4TwusOsh6A2t4L4uXD7kPKxs6Dy2d35t3Ziv1aw4I0uQ6o8 + integer2, this.field_9827_11fE8Ox7P73E077oD4aH1xmldckIt3kdPUm7WME2kV9Rpk2Ky85479aFl1oG + integer3, integer4)) {
+			this.field_9836_5CixT11auYqthm59bz65N7pR6c1kFc4PgWOJTyMES6c8JRFtTc8y4fu4by3m.set(integer1, integer2, integer3, integer4);
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	protected boolean func_9825_68E6w9t9bw9Zp6jmEk8M417RMoDQ5rpWim85pcpWr4b1H5bY93ND9Ret3lM0(int integer1, int integer2, int integer3, int integer4, int integer5) {
+		if(this.func_9823_0ir18WW2Er00vPEwk4ysWYEf3jBf0oDxYSVBcO27LQ7O9UiZXGtduk6tgrab(integer1, integer2, integer3, integer4) && this.field_9831_9di5kTyQJSVIL4e04LHO4k6zJ1R6dE2XFd7U87CVdoCE497R8cfT70Idl59f.setBlockMetadata(this.field_9834_49YKQ9H4rrqumwJ440g4Mih74Nh25b3khR0956wdddVjq9A278gi4nUXDmg5 + integer1, this.field_9830_7C4VOY68RA8Zy4TwusOsh6A2t4L4uXD7kPKxs6Dy2d35t3Ziv1aw4I0uQ6o8 + integer2, this.field_9827_11fE8Ox7P73E077oD4aH1xmldckIt3kdPUm7WME2kV9Rpk2Ky85479aFl1oG + integer3, integer5)) {
+			this.field_9829_1ZuLBTbJCb68R6q2Pu8z16VwdmUU78La4DGYSspy8oZ48Z2dLDn7EaVJQ5s6.set(integer1, integer2, integer3, integer5);
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	protected void func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(int integer1, int integer2, int integer3, int integer4, int integer5, int integer6, int integer7) {
+		for(int i8 = integer1; i8 <= integer4; ++i8) {
+			for(int i9 = integer2; i9 <= integer5; ++i9) {
+				for(int i10 = integer3; i10 <= integer6; ++i10) {
+					this.func_9823_0ir18WW2Er00vPEwk4ysWYEf3jBf0oDxYSVBcO27LQ7O9UiZXGtduk6tgrab(i8, i9, i10, integer7);
+				}
+			}
+		}
+
+	}
+
+	public void func_9826_7ZpHFjuGvcJ051cOz9PE89x1h4vDq16V2LJ76i4OBAOemXk2l5J09hlg30Vh(int integer) {
+		if(this.field_9833_9Psx0tZC91cMh7ZAzUJ658Kzvt14VXdr7EZ2i1DLVD9g4MlOJonxzd0TGHB9 != integer) {
+			NibbleArray nibbleArray2 = this.field_9836_5CixT11auYqthm59bz65N7pR6c1kFc4PgWOJTyMES6c8JRFtTc8y4fu4by3m;
+			byte b3;
+			byte b4;
+			switch(Math.abs(integer - this.field_9833_9Psx0tZC91cMh7ZAzUJ658Kzvt14VXdr7EZ2i1DLVD9g4MlOJonxzd0TGHB9)) {
+			case 1:
+				b3 = 1;
+				b4 = 0;
+				break;
+			case 2:
+				b3 = 0;
+				b4 = -1;
+				break;
+			case 3:
+				b3 = -1;
+				b4 = 0;
+				break;
+			default:
+				b3 = 0;
+				b4 = 1;
+			}
+
+			for(int i5 = 0; i5 < this.field_9837_3X8uS9Os0Ro4y2OE9xS3l95Rn75LDno8OkmTSU4PUHOIRmXt6887Qc80QbJp; ++i5) {
+				for(int i6 = 0; i6 < this.field_9832_04229h383DiAbTtznv60GRjak8V5dt3yQ79a0e8ICDtjs9toY69Ld05AykI1; ++i6) {
+					for(int i7 = 0; i7 < this.field_9835_4xQ8UJa1zzwd5Ak02TtA45g8muig5017CnUqTI595caW1tt0I0n2G8Fq86z7; ++i7) {
+						this.field_9831_9di5kTyQJSVIL4e04LHO4k6zJ1R6dE2XFd7U87CVdoCE497R8cfT70Idl59f.setBlock(i5 * b4 - i7 * b3, i6, i5 * b3 + i7 * b4, nibbleArray2.get(i5, i6, i7));
+					}
+				}
+			}
+
+			this.field_9833_9Psx0tZC91cMh7ZAzUJ658Kzvt14VXdr7EZ2i1DLVD9g4MlOJonxzd0TGHB9 = integer;
+		}
+
+	}
+
+	public boolean func_9820_5204axQba8r4yKOmf635c4mf99bQl70mm0X8b96R3NY7EX2N636dc3j5E7Jq() {
+		Iterator iterator1 = this.field_9828_402Fu54l8TN2Bk80iCfxL13eV1alTV2m2yuc0ENbnJKb9yho3t8yoy6p2U16.values().iterator();
+
+		HubWorldUnknownClass4 hubWorldUnknownClass42;
+		do {
+			if(!iterator1.hasNext()) {
+				return true;
+			}
+
+			hubWorldUnknownClass42 = (HubWorldUnknownClass4)iterator1.next();
+		} while(!hubWorldUnknownClass42.func_11784_50HlF50aFoB7NiHFoTOH3x80rsY8B1b3Kth2O196sr37CQNqM7QEDA5Lg1xv());
+
+		return false;
+	}
+
+	public void func_9821_7R35CGL5Z6S8q1KH37CB0kTCR4Y7Ufr7F0QHR1bV4Ftooj95dS8B04mVvpb3(HubWorldUnknownClass2 gx, int integer) {
+		if(this.func_9820_5204axQba8r4yKOmf635c4mf99bQl70mm0X8b96R3NY7EX2N636dc3j5E7Jq() && gx.func_9820_5204axQba8r4yKOmf635c4mf99bQl70mm0X8b96R3NY7EX2N636dc3j5E7Jq()) {
+			if(gx.field_9828_402Fu54l8TN2Bk80iCfxL13eV1alTV2m2yuc0ENbnJKb9yho3t8yoy6p2U16.get(HubWorldUnknownClass5.func_11015_4dD10Vjg8EXQlPqLn1740KeipDH3q81QpEc7eJ1kIDKnDkDuh78Z6nVgtW23(integer)) != null) {
+				((HubWorldUnknownClass4)this.field_9828_402Fu54l8TN2Bk80iCfxL13eV1alTV2m2yuc0ENbnJKb9yho3t8yoy6p2U16.get(integer)).field_11789_0J562Mkp8zd7uXcLK816mU9467m831KM7RpX06f6clIam7Juk383188UJI1W = (HubWorldUnknownClass4)gx.field_9828_402Fu54l8TN2Bk80iCfxL13eV1alTV2m2yuc0ENbnJKb9yho3t8yoy6p2U16.get(HubWorldUnknownClass5.func_11015_4dD10Vjg8EXQlPqLn1740KeipDH3q81QpEc7eJ1kIDKnDkDuh78Z6nVgtW23(integer));
+				((HubWorldUnknownClass4)gx.field_9828_402Fu54l8TN2Bk80iCfxL13eV1alTV2m2yuc0ENbnJKb9yho3t8yoy6p2U16.get(HubWorldUnknownClass5.func_11015_4dD10Vjg8EXQlPqLn1740KeipDH3q81QpEc7eJ1kIDKnDkDuh78Z6nVgtW23(integer))).field_11789_0J562Mkp8zd7uXcLK816mU9467m831KM7RpX06f6clIam7Juk383188UJI1W = (HubWorldUnknownClass4)this.field_9828_402Fu54l8TN2Bk80iCfxL13eV1alTV2m2yuc0ENbnJKb9yho3t8yoy6p2U16.get(integer);
+			}
+		}
+	}
+
+	public abstract void func_9822_96pkMbVA643Z1Y78zU1zOHbm0WbR47PCGp9q1ZyTK64G0pr0ViUREK2TCos1();
+}
--- net/minecraft/src/Packet3Chat.java
+++ net/minecraft/src/Packet3Chat.java
@@ -10,20 +10,20 @@
 	public Packet3Chat() {
 	}
 
-	public Packet3Chat(String var1) {
-		this.message = var1;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.message = var1.readUTF();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeUTF(this.message);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleChat(this);
+	public Packet3Chat(String message) {
+		this.message = message;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.message = dataInputStream.readUTF();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.message);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleChat(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/BlockSapling.java
+++ net/minecraft/src/BlockSapling.java
@@ -3,27 +3,27 @@
 import java.util.Random;
 
 public class BlockSapling extends BlockFlower {
-	protected BlockSapling(int var1, int var2) {
-		super(var1, var2);
-		float var3 = 0.4F;
-		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var3 * 2.0F, 0.5F + var3);
+	protected BlockSapling(int id, int blockIndex) {
+		super(id, blockIndex);
+		float f3 = 0.4F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, f3 * 2.0F, 0.5F + f3);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		super.updateTick(var1, var2, var3, var4, var5);
-		if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9 && var5.nextInt(5) == 0) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 < 15) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var6 + 1);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		super.updateTick(world, x, y, z, random);
+		if(world.getBlockLightValue(x, y + 1, z) >= 9 && random.nextInt(5) == 0) {
+			int i6 = world.getBlockMetadata(x, y, z);
+			if(i6 < 15) {
+				world.setBlockMetadataWithNotify(x, y, z, i6 + 1);
 			} else {
-				var1.setBlock(var2, var3, var4, 0);
-				Object var7 = new WorldGenTrees();
-				if(var5.nextInt(10) == 0) {
-					var7 = new WorldGenBigTree();
+				world.setBlock(x, y, z, 0);
+				Object object7 = new WorldGenTrees();
+				if(random.nextInt(10) == 0) {
+					object7 = new WorldGenBigTree();
 				}
 
-				if(!((WorldGenerator)var7).generate(var1, var5, var2, var3, var4)) {
-					var1.setBlock(var2, var3, var4, this.blockID);
+				if(!((WorldGenerator)object7).generate(world, random, x, y, z)) {
+					world.setBlock(x, y, z, this.blockID);
 				}
 			}
 		}
--- /dev/null
+++ net/minecraft/src/MinecraftException3.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public class MinecraftException3 extends RuntimeException {
+	public MinecraftException3(String message) {
+		super(message);
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenUnknownClass.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenUnknownClass extends WorldGenerator {
+	private int field_9643_1c67U62JX74Ds8D2PEwrTCxtC884CKW3AO1eDGP05T5mkyKfzi7q42DkH3re = 165;
+
+	public WorldGenUnknownClass(int integer) {
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 64; ++i6) {
+			int i7 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+			int i9 = z + rand.nextInt(8) - rand.nextInt(8);
+			if(world.getBlockId(i7, i8, i9) == 0 && ((BlockFlower)Block.blocksList[this.field_9643_1c67U62JX74Ds8D2PEwrTCxtC884CKW3AO1eDGP05T5mkyKfzi7q42DkH3re]).canBlockStay(world, i7, i8, i9)) {
+				world.setBlock(i7, i8, i9, this.field_9643_1c67U62JX74Ds8D2PEwrTCxtC884CKW3AO1eDGP05T5mkyKfzi7q42DkH3re);
+			}
+		}
+
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockPressurePlateOld.java
@@ -1,0 +1,147 @@
+package net.minecraft.src;
+
+import java.util.List;
+import java.util.Random;
+
+public class BlockPressurePlateOld extends BlockOld {
+	private EnumMobType triggerMobType;
+
+	protected BlockPressurePlateOld(int integer1, int integer2, EnumMobType triggerMobType) {
+		super(integer1, integer2, Material.rock);
+		this.triggerMobType = triggerMobType;
+		this.setTickOnLoad(true);
+		float f4 = 0.0625F;
+		this.setBlockBounds(f4, 0.0F, f4, 1.0F - f4, 0.03125F, 1.0F - f4);
+	}
+
+	public int tickRate() {
+		return 20;
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return null;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		return vg.isBlockNormalCube(integer2, integer3 - 1, integer4);
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		boolean z6 = false;
+		if(!vg.isBlockNormalCube(integer2, integer3 - 1, integer4)) {
+			z6 = true;
+		}
+
+		if(z6) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+		}
+
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(vg.getBlockMetadata(integer2, integer3, integer4) != 0) {
+			this.setStateIfMobInteractsWithPlate(vg, integer2, integer3, integer4);
+		}
+	}
+
+	public void onEntityCollidedWithBlock(World vg, int integer2, int integer3, int integer4, Entity xy) {
+		if(vg.getBlockMetadata(integer2, integer3, integer4) != 1) {
+			this.setStateIfMobInteractsWithPlate(vg, integer2, integer3, integer4);
+		}
+	}
+
+	private void setStateIfMobInteractsWithPlate(World vg, int integer2, int integer3, int integer4) {
+		boolean z5 = vg.getBlockMetadata(integer2, integer3, integer4) == 1;
+		boolean z6 = false;
+		float f7 = 0.125F;
+		List list8 = null;
+		if(this.triggerMobType == EnumMobType.everything) {
+			list8 = vg.getEntitiesWithinAABBExcludingEntity((Entity)null, AxisAlignedBB.getBoundingBoxFromPool((double)((float)integer2 + f7), (double)integer3, (double)((float)integer4 + f7), (double)((float)(integer2 + 1) - f7), (double)integer3 + 0.25D, (double)((float)(integer4 + 1) - f7)));
+		}
+
+		if(this.triggerMobType == EnumMobType.mobs) {
+			list8 = vg.getEntitiesWithinAABB(EntityLiving.class, AxisAlignedBB.getBoundingBoxFromPool((double)((float)integer2 + f7), (double)integer3, (double)((float)integer4 + f7), (double)((float)(integer2 + 1) - f7), (double)integer3 + 0.25D, (double)((float)(integer4 + 1) - f7)));
+		}
+
+		if(this.triggerMobType == EnumMobType.players) {
+			list8 = vg.getEntitiesWithinAABB(EntityPlayer.class, AxisAlignedBB.getBoundingBoxFromPool((double)((float)integer2 + f7), (double)integer3, (double)((float)integer4 + f7), (double)((float)(integer2 + 1) - f7), (double)integer3 + 0.25D, (double)((float)(integer4 + 1) - f7)));
+		}
+
+		if(list8.size() > 0) {
+			z6 = true;
+		}
+
+		if(z6 && !z5) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 1);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3 - 1, integer4, this.blockID);
+			vg.markBlocksDirty(integer2, integer3, integer4, integer2, integer3, integer4);
+			vg.playSoundEffect((double)integer2 + 0.5D, (double)integer3 + 0.1D, (double)integer4 + 0.5D, "random.click", 0.3F, 0.6F);
+		}
+
+		if(!z6 && z5) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 0);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3 - 1, integer4, this.blockID);
+			vg.markBlocksDirty(integer2, integer3, integer4, integer2, integer3, integer4);
+			vg.playSoundEffect((double)integer2 + 0.5D, (double)integer3 + 0.1D, (double)integer4 + 0.5D, "random.click", 0.3F, 0.5F);
+		}
+
+		if(z6) {
+			vg.scheduleBlockUpdate(integer2, integer3, integer4, this.blockID);
+		}
+
+	}
+
+	public void onBlockRemoval(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockMetadata(integer2, integer3, integer4);
+		if(i5 > 0) {
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3 - 1, integer4, this.blockID);
+		}
+
+		super.onBlockRemoval(vg, integer2, integer3, integer4);
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		boolean z5 = abt.getBlockMetadata(integer2, integer3, integer4) == 1;
+		float f6 = 0.0625F;
+		if(z5) {
+			this.setBlockBounds(f6, 0.0F, f6, 1.0F - f6, 0.03125F, 1.0F - f6);
+		} else {
+			this.setBlockBounds(f6, 0.0F, f6, 1.0F - f6, 0.0625F, 1.0F - f6);
+		}
+
+	}
+
+	public boolean isPoweringTo(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		return abt.getBlockMetadata(integer2, integer3, integer4) > 0;
+	}
+
+	public boolean isIndirectlyPoweringTo(World vg, int integer2, int integer3, int integer4, int integer5) {
+		return vg.getBlockMetadata(integer2, integer3, integer4) == 0 ? false : integer5 == 1;
+	}
+
+	public boolean canProvidePower() {
+		return true;
+	}
+
+	public void setBlockBoundsForItemRender() {
+		float f1 = 0.5F;
+		float f2 = 0.125F;
+		float f3 = 0.5F;
+		this.setBlockBounds(0.5F - f1, 0.5F - f2, 0.5F - f3, 0.5F + f1, 0.5F + f2, 0.5F + f3);
+	}
+}
--- net/minecraft/src/GuiSmallButton.java
+++ net/minecraft/src/GuiSmallButton.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class GuiSmallButton extends GuiButton {
-	public GuiSmallButton(int var1, int var2, int var3, String var4) {
-		super(var1, var2, var3, 150, 20, var4);
+	public GuiSmallButton(int integer1, int integer2, int integer3, String string) {
+		super(integer1, integer2, integer3, 150, 20, string);
 	}
 }
--- /dev/null
+++ net/minecraft/src/LayerDefinition.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+import java.util.HashMap;
+
+public class LayerDefinition {
+	public static HashMap models = new HashMap();
+	public MeshDefinition msh = null;
+
+	public static LayerDefinition create(MeshDefinition bx, int integer2, int integer3) {
+		LayerDefinition layerDefinition3 = new LayerDefinition();
+		layerDefinition3.msh = bx;
+		return layerDefinition3;
+	}
+}
--- net/minecraft/src/Packet255KickDisconnect.java
+++ net/minecraft/src/Packet255KickDisconnect.java
@@ -10,20 +10,20 @@
 	public Packet255KickDisconnect() {
 	}
 
-	public Packet255KickDisconnect(String var1) {
-		this.reason = var1;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.reason = var1.readUTF();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeUTF(this.reason);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleKickDisconnect(this);
+	public Packet255KickDisconnect(String reason) {
+		this.reason = reason;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.reason = dataInputStream.readUTF();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.reason);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleKickDisconnect(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/Packet1Login.java
+++ net/minecraft/src/Packet1Login.java
@@ -8,30 +8,35 @@
 	public int protocolVersion;
 	public String username;
 	public String password;
+	public int secID = -1;
 
 	public Packet1Login() {
 	}
 
-	public Packet1Login(String var1, String var2, int var3) {
-		this.username = var1;
-		this.password = var2;
-		this.protocolVersion = var3;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.protocolVersion = var1.readInt();
-		this.username = var1.readUTF();
-		this.password = var1.readUTF();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.protocolVersion);
-		var1.writeUTF(this.username);
-		var1.writeUTF(this.password);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleLogin(this);
+	public Packet1Login(String username, String password, int protocolVersion) {
+		this.username = username;
+		this.password = password;
+		this.protocolVersion = protocolVersion;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.protocolVersion = dataInputStream.readInt();
+		this.username = dataInputStream.readUTF();
+		this.password = dataInputStream.readUTF();
+		if(CertUtils.loadedPrivKey != null) {
+			this.secID = Integer.parseInt(this.password);
+		}
+
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.protocolVersion);
+		dataOutputStream.writeUTF(this.username);
+		dataOutputStream.writeUTF(this.password);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleLogin(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/WorldRenderer.java
+++ net/minecraft/src/WorldRenderer.java
@@ -3,6 +3,7 @@
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
+
 import org.lwjgl.opengl.GL11;
 
 public class WorldRenderer {
@@ -39,39 +40,40 @@
 	public List tileEntityRenderers = new ArrayList();
 	private List tileEntities;
 
-	public WorldRenderer(World var1, List var2, int var3, int var4, int var5, int var6, int var7) {
-		this.worldObj = var1;
-		this.tileEntities = var2;
-		this.sizeWidth = this.sizeHeight = this.sizeDepth = var6;
+	public WorldRenderer(World vg, List list, int integer3, int integer4, int integer5, int integer6, int integer7) {
+		this.worldObj = vg;
+		this.tileEntities = list;
+		this.sizeWidth = this.sizeHeight = this.sizeDepth = integer6;
 		this.rendererRadius = MathHelper.sqrt_float((float)(this.sizeWidth * this.sizeWidth + this.sizeHeight * this.sizeHeight + this.sizeDepth * this.sizeDepth)) / 2.0F;
-		this.glRenderList = var7;
+		this.glRenderList = integer7;
 		this.posX = -999;
-		this.setPosition(var3, var4, var5);
+		this.setPosition(integer3, integer4, integer5);
 		this.needsUpdate = false;
 	}
 
-	public void setPosition(int var1, int var2, int var3) {
-		if(var1 != this.posX || var2 != this.posY || var3 != this.posZ) {
+	public void setPosition(int integer1, int integer2, int integer3) {
+		if(integer1 != this.posX || integer2 != this.posY || integer3 != this.posZ) {
 			this.setDontDraw();
-			this.posX = var1;
-			this.posY = var2;
-			this.posZ = var3;
-			this.posXPlus = var1 + this.sizeWidth / 2;
-			this.posYPlus = var2 + this.sizeHeight / 2;
-			this.posZPlus = var3 + this.sizeDepth / 2;
-			this.posXClip = var1 & 1023;
-			this.posYClip = var2;
-			this.posZClip = var3 & 1023;
-			this.posXMinus = var1 - this.posXClip;
-			this.posYMinus = var2 - this.posYClip;
-			this.posZMinus = var3 - this.posZClip;
-			float var4 = 2.0F;
-			this.rendererBoundingBox = AxisAlignedBB.getBoundingBox((double)((float)var1 - var4), (double)((float)var2 - var4), (double)((float)var3 - var4), (double)((float)(var1 + this.sizeWidth) + var4), (double)((float)(var2 + this.sizeHeight) + var4), (double)((float)(var3 + this.sizeDepth) + var4));
+			this.posX = integer1;
+			this.posY = integer2;
+			this.posZ = integer3;
+			this.posXPlus = integer1 + this.sizeWidth / 2;
+			this.posYPlus = integer2 + this.sizeHeight / 2;
+			this.posZPlus = integer3 + this.sizeDepth / 2;
+			this.posXClip = integer1 & 1023;
+			this.posYClip = integer2;
+			this.posZClip = integer3 & 1023;
+			this.posXMinus = integer1 - this.posXClip;
+			this.posYMinus = integer2 - this.posYClip;
+			this.posZMinus = integer3 - this.posZClip;
+			float f4 = 2.0F;
+			this.rendererBoundingBox = AxisAlignedBB.getBoundingBox((double)((float)integer1 - f4), (double)((float)integer2 - f4), (double)((float)integer3 - f4), (double)((float)(integer1 + this.sizeWidth) + f4), (double)((float)(integer2 + this.sizeHeight) + f4), (double)((float)(integer3 + this.sizeDepth) + f4));
 			GL11.glNewList(this.glRenderList + 2, GL11.GL_COMPILE);
-			RenderItem.renderAABB(AxisAlignedBB.getBoundingBoxFromPool((double)((float)this.posXClip - var4), (double)((float)this.posYClip - var4), (double)((float)this.posZClip - var4), (double)((float)(this.posXClip + this.sizeWidth) + var4), (double)((float)(this.posYClip + this.sizeHeight) + var4), (double)((float)(this.posZClip + this.sizeDepth) + var4)));
+			RenderItem.renderAABB(AxisAlignedBB.getBoundingBoxFromPool((double)((float)this.posXClip - f4), (double)((float)this.posYClip - f4), (double)((float)this.posZClip - f4), (double)((float)(this.posXClip + this.sizeWidth) + f4), (double)((float)(this.posYClip + this.sizeHeight) + f4), (double)((float)(this.posZClip + this.sizeDepth) + f4)));
 			GL11.glEndList();
 			this.markDirty();
 		}
+
 	}
 
 	private void setupGLTranslation() {
@@ -81,106 +83,111 @@
 	public void updateRenderer() {
 		if(this.needsUpdate) {
 			++chunksUpdated;
-			int var1 = this.posX;
-			int var2 = this.posY;
-			int var3 = this.posZ;
-			int var4 = this.posX + this.sizeWidth;
-			int var5 = this.posY + this.sizeHeight;
-			int var6 = this.posZ + this.sizeDepth;
+			int i1 = this.posX;
+			int i2 = this.posY;
+			int i3 = this.posZ;
+			int i4 = this.posX + this.sizeWidth;
+			int i5 = this.posY + this.sizeHeight;
+			int i6 = this.posZ + this.sizeDepth;
 
-			for(int var7 = 0; var7 < 2; ++var7) {
-				this.skipRenderPass[var7] = true;
+			for(int i7 = 0; i7 < 2; ++i7) {
+				this.skipRenderPass[i7] = true;
 			}
 
 			Chunk.isLit = false;
-			HashSet var21 = new HashSet();
-			var21.addAll(this.tileEntityRenderers);
+			HashSet hashSet21 = new HashSet();
+			hashSet21.addAll(this.tileEntityRenderers);
 			this.tileEntityRenderers.clear();
-			byte var8 = 1;
-			ChunkCache var9 = new ChunkCache(this.worldObj, var1 - var8, var2 - var8, var3 - var8, var4 + var8, var5 + var8, var6 + var8);
-			RenderBlocks var10 = new RenderBlocks(var9);
-
-			for(int var11 = 0; var11 < 2; ++var11) {
-				boolean var12 = false;
-				boolean var13 = false;
-				boolean var14 = false;
-
-				for(int var15 = var2; var15 < var5; ++var15) {
-					for(int var16 = var3; var16 < var6; ++var16) {
-						for(int var17 = var1; var17 < var4; ++var17) {
-							int var18 = var9.getBlockId(var17, var15, var16);
-							if(var18 > 0) {
-								if(!var14) {
-									var14 = true;
-									GL11.glNewList(this.glRenderList + var11, GL11.GL_COMPILE);
+			byte b8 = 1;
+			ChunkCache chunkCache9 = new ChunkCache(this.worldObj, i1 - b8, i2 - b8, i3 - b8, i4 + b8, i5 + b8, i6 + b8);
+			RenderBlocks renderBlocks10 = new RenderBlocks(chunkCache9);
+
+			for(int i11 = 0; i11 < 2; ++i11) {
+				boolean z12 = false;
+				boolean z13 = false;
+				boolean z14 = false;
+
+				for(int i15 = i2; i15 < i5; ++i15) {
+					for(int i16 = i3; i16 < i6; ++i16) {
+						for(int i17 = i1; i17 < i4; ++i17) {
+							int i18 = chunkCache9.getBlockId(i17, i15, i16);
+							if(i18 > 0) {
+								if(!z14) {
+									z14 = true;
+									GL11.glNewList(this.glRenderList + i11, GL11.GL_COMPILE);
 									GL11.glPushMatrix();
 									this.setupGLTranslation();
-									float var19 = 1.000001F;
+									float f19 = 1.000001F;
 									GL11.glTranslatef((float)(-this.sizeDepth) / 2.0F, (float)(-this.sizeHeight) / 2.0F, (float)(-this.sizeDepth) / 2.0F);
-									GL11.glScalef(var19, var19, var19);
+									GL11.glScalef(f19, f19, f19);
 									GL11.glTranslatef((float)this.sizeDepth / 2.0F, (float)this.sizeHeight / 2.0F, (float)this.sizeDepth / 2.0F);
-									tessellator.startDrawingQuads();
+									tessellator.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(false);
 									tessellator.setTranslationD((double)(-this.posX), (double)(-this.posY), (double)(-this.posZ));
 								}
 
-								if(var11 == 0 && Block.isBlockContainer[var18]) {
-									TileEntity var23 = var9.getBlockTileEntity(var17, var15, var16);
-									if(TileEntityRenderer.instance.hasSpecialRenderer(var23)) {
-										this.tileEntityRenderers.add(var23);
+								if(i11 == 0 && Block.isBlockContainer[i18]) {
+									TileEntity tileEntity23 = chunkCache9.getBlockTileEntity(i17, i15, i16);
+									if(TileEntityRenderer.instance.hasSpecialRenderer(tileEntity23)) {
+										this.tileEntityRenderers.add(tileEntity23);
 									}
 								}
 
-								Block var24 = Block.blocksList[var18];
-								int var20 = var24.getRenderBlockPass();
-								if(var20 != var11) {
-									var12 = true;
-								} else if(var20 == var11) {
-									var13 |= var10.renderBlockByRenderType(var24, var17, var15, var16);
+								if(Block.blocksList[i18] == null) {
+									ExtLogger.i("NULL BLOCK ID " + i18);
+								} else {
+									Block block24 = Block.blocksList[i18];
+									int i20 = block24.getRenderBlockPass();
+									if(i20 != i11) {
+										z12 = true;
+									} else if(i20 == i11) {
+										z13 |= renderBlocks10.renderBlockByRenderType(block24, i17, i15, i16);
+									}
 								}
 							}
 						}
 					}
 				}
 
-				if(var14) {
+				if(z14) {
 					tessellator.draw();
 					GL11.glPopMatrix();
 					GL11.glEndList();
 					tessellator.setTranslationD(0.0D, 0.0D, 0.0D);
 				} else {
-					var13 = false;
-				}
-
-				if(var13) {
-					this.skipRenderPass[var11] = false;
-				}
-
-				if(!var12) {
+					z13 = false;
+				}
+
+				if(z13) {
+					this.skipRenderPass[i11] = false;
+				}
+
+				if(!z12) {
 					break;
 				}
 			}
 
-			HashSet var22 = new HashSet();
-			var22.addAll(this.tileEntityRenderers);
-			var22.removeAll(var21);
-			this.tileEntities.addAll(var22);
-			var21.removeAll(this.tileEntityRenderers);
-			this.tileEntities.removeAll(var21);
+			HashSet hashSet22 = new HashSet();
+			hashSet22.addAll(this.tileEntityRenderers);
+			hashSet22.removeAll(hashSet21);
+			this.tileEntities.addAll(hashSet22);
+			hashSet21.removeAll(this.tileEntityRenderers);
+			this.tileEntities.removeAll(hashSet21);
 			this.isChunkLit = Chunk.isLit;
 			this.isInitialized = true;
 		}
+
 	}
 
-	public float distanceToEntitySquared(Entity var1) {
-		float var2 = (float)(var1.posX - (double)this.posXPlus);
-		float var3 = (float)(var1.posY - (double)this.posYPlus);
-		float var4 = (float)(var1.posZ - (double)this.posZPlus);
-		return var2 * var2 + var3 * var3 + var4 * var4;
+	public float distanceToEntitySquared(Entity entity) {
+		float f2 = (float)(entity.posX - (double)this.posXPlus);
+		float f3 = (float)(entity.posY - (double)this.posYPlus);
+		float f4 = (float)(entity.posZ - (double)this.posZPlus);
+		return f2 * f2 + f3 * f3 + f4 * f4;
 	}
 
 	public void setDontDraw() {
-		for(int var1 = 0; var1 < 2; ++var1) {
-			this.skipRenderPass[var1] = true;
+		for(int i1 = 0; i1 < 2; ++i1) {
+			this.skipRenderPass[i1] = true;
 		}
 
 		this.isInFrustum = false;
@@ -192,12 +199,12 @@
 		this.worldObj = null;
 	}
 
-	public int getGLCallListForPass(int var1) {
-		return !this.isInFrustum ? -1 : (!this.skipRenderPass[var1] ? this.glRenderList + var1 : -1);
+	public int getGLCallListForPass(int integer) {
+		return !this.isInFrustum ? -1 : (!this.skipRenderPass[integer] ? this.glRenderList + integer : -1);
 	}
 
-	public void updateInFrustum(ICamera var1) {
-		this.isInFrustum = var1.isBoundingBoxInFrustum(this.rendererBoundingBox);
+	public void updateInFrustum(ICamera dl) {
+		this.isInFrustum = dl.isBoundingBoxInFrustum(this.rendererBoundingBox);
 	}
 
 	public void callOcclusionQueryList() {
--- net/minecraft/src/GuiMultiplayer.java
+++ net/minecraft/src/GuiMultiplayer.java
@@ -4,9 +4,10 @@
 	private GuiScreen parentScreen;
 	private int updateCounter = 0;
 	private String ipText = "";
+	public static int playerMode = 0;
 
-	public GuiMultiplayer(GuiScreen var1) {
-		this.parentScreen = var1;
+	public GuiMultiplayer(GuiScreen hr) {
+		this.parentScreen = hr;
 	}
 
 	public void updateScreen() {
@@ -17,66 +18,85 @@
 		this.controlList.clear();
 		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96 + 12, "Connect"));
 		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 120 + 12, "Cancel"));
+		if(CertUtils.loadedPrivKey != null) {
+			this.controlList.add(new GuiButton(2, this.width / 2 - 100, this.height / 4 + 96 - 24, playerMode + ""));
+		}
+
 		((GuiButton)this.controlList.get(0)).enabled = false;
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.enabled) {
-			if(var1.id == 1) {
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled) {
+			if(button.id == 1) {
 				this.mc.displayGuiScreen(this.parentScreen);
-			} else if(var1.id == 0) {
-				String[] var2 = this.ipText.split(":");
-				this.mc.displayGuiScreen(new GuiConnecting(this.mc, var2[0], var2.length > 1 ? Integer.parseInt(var2[1]) : 25565));
+			} else if(button.id == 0) {
+				String[] string2 = this.ipText.split(":");
+				NetSplitImageDataHandler.handlers.clear();
+
+				try {
+					this.mc.displayGuiScreen(new GuiConnecting(this.mc, string2[0], string2.length > 1 ? Integer.parseInt(string2[1]) : 25565));
+				} catch (NumberFormatException numberFormatException4) {
+					this.mc.displayGuiScreen(new GuiConnectFailed("Connection failed", "Invalid port: " + string2[1]));
+				}
+			} else if(button.id == 2) {
+				++playerMode;
+				playerMode %= 3;
+				((GuiButton)this.controlList.get(2)).displayString = playerMode + "";
 			}
-
 		}
+
 	}
 
-	protected void keyTyped(char var1, int var2) {
-		if(var1 == 22) {
-			String var3 = GuiScreen.getClipboardString();
-			if(var3 == null) {
-				var3 = "";
-			}
-
-			int var4 = 32 - this.ipText.length();
-			if(var4 > var3.length()) {
-				var4 = var3.length();
-			}
-
-			if(var4 > 0) {
-				this.ipText = this.ipText + var3.substring(0, var4);
+	protected void keyTyped(char character, int key) {
+		if(character == 22) {
+			String string3 = GuiScreen.getClipboardString();
+			if(string3 == null) {
+				string3 = "";
+			}
+
+			int i4 = 32 - this.ipText.length();
+			if(i4 > string3.length()) {
+				i4 = string3.length();
+			}
+
+			if(i4 > 0) {
+				this.ipText = this.ipText + string3.substring(0, i4);
 			}
 		}
 
-		if(var1 == 13) {
+		if(character == 13) {
 			this.actionPerformed((GuiButton)this.controlList.get(0));
 		}
 
-		if(var2 == 14 && this.ipText.length() > 0) {
+		if(key == 14 && this.ipText.length() > 0) {
 			this.ipText = this.ipText.substring(0, this.ipText.length() - 1);
 		}
 
-		if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(var1) >= 0 && this.ipText.length() < 32) {
-			this.ipText = this.ipText + var1;
+		if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(character) >= 0 && this.ipText.length() < 32) {
+			this.ipText = this.ipText + character;
 		}
 
 		((GuiButton)this.controlList.get(0)).enabled = this.ipText.length() > 0;
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, "Play Multiplayer", this.width / 2, this.height / 4 - 60 + 20, 16777215);
-		this.drawString(this.fontRenderer, "Minecraft Multiplayer is currently not finished, but there", this.width / 2 - 140, this.height / 4 - 60 + 60 + 0, 10526880);
-		this.drawString(this.fontRenderer, "is some buggy early testing going on.", this.width / 2 - 140, this.height / 4 - 60 + 60 + 9, 10526880);
-		this.drawString(this.fontRenderer, "Enter the IP of a server to connect to it:", this.width / 2 - 140, this.height / 4 - 60 + 60 + 36, 10526880);
-		int var4 = this.width / 2 - 100;
-		int var5 = this.height / 4 - 10 + 50 + 18;
-		short var6 = 200;
-		byte var7 = 20;
-		this.drawRect(var4 - 1, var5 - 1, var4 + var6 + 1, var5 + var7 + 1, -6250336);
-		this.drawRect(var4, var5, var4 + var6, var5 + var7, -16777216);
-		this.drawString(this.fontRenderer, this.ipText + (this.updateCounter / 6 % 2 == 0 ? "_" : ""), var4 + 4, var5 + (var7 - 8) / 2, 14737632);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, "Play Multiplayer", this.width / 2, this.height / 4 - 60 + 20, 0xFFFFFF);
+		if(CertUtils.loadedPrivKey != null) {
+			drawString(this.fontRenderer, "-- WARNING --   JOINING IN SECURE MODE", this.width / 2 - 140, this.height / 4 - 60 + 60 + 0, 10526880);
+		} else {
+			drawString(this.fontRenderer, "Minecraft Multiplayer is currently not finished, but there", this.width / 2 - 140, this.height / 4 - 60 + 60 + 0, 10526880);
+			drawString(this.fontRenderer, "is some buggy early testing going on.", this.width / 2 - 140, this.height / 4 - 60 + 60 + 9, 10526880);
+			drawString(this.fontRenderer, "Enter the IP of a server to connect to it:", this.width / 2 - 140, this.height / 4 - 60 + 60 + 36, 10526880);
+		}
+
+		int i4 = this.width / 2 - 100;
+		int i5 = this.height / 4 - 10 + 50 + 18;
+		short s6 = 200;
+		byte b7 = 20;
+		drawRect(i4 - 1, i5 - 1, i4 + s6 + 1, i5 + b7 + 1, -6250336);
+		drawRect(i4, i5, i4 + s6, i5 + b7, 0xFF000000);
+		drawString(this.fontRenderer, this.ipText + (this.updateCounter / 6 % 2 == 0 ? "_" : ""), i4 + 4, i5 + (b7 - 8) / 2, 14737632);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- /dev/null
+++ net/minecraft/src/ModelAmoung.java
@@ -1,0 +1,40 @@
+package net.minecraft.src;
+
+public class ModelAmoung extends ModelBase {
+	public ModelRenderer[] field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs = new ModelRenderer[5];
+
+	public ModelAmoung() {
+		byte b1 = 18;
+		byte b2 = 0;
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[0] = new ModelRenderer(0, 0);
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[0].addBox(-5.0F, -12.0F + (float)b2, -5.0F, 10, 13, 9);
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[0].setRotationPoint(0.0F, (float)b1, 0.0F);
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[1] = new ModelRenderer(29, 0);
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[1].addBox(-4.0F, -11.0F + (float)b2, -6.0F, 8, 6, 1);
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[1].setRotationPoint(0.0F, (float)b1, 0.0F);
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[2] = new ModelRenderer(46, 20);
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[2].addBox(1.0F, 0.0F + (float)b2, -3.0F, 4, 6, 5);
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[2].setRotationPoint(0.0F, (float)b1, 0.0F);
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[3] = new ModelRenderer(46, 20);
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[3].addBox(-5.0F, 0.0F + (float)b2, -3.0F, 4, 6, 5);
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[3].setRotationPoint(0.0F, (float)b1, 0.0F);
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[3].mirror = true;
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[4] = new ModelRenderer(38, 7);
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[4].addBox(-4.0F, -10.0F + (float)b2, 4.0F, 8, 10, 3);
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[4].setRotationPoint(0.0F, (float)b1, 0.0F);
+	}
+
+	public void render(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.setRotationAngles(float1, float2, float3, float4, float5, float6);
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[2].rotateAngleX = MathHelper.cos(float1 * 0.6662F) * 1.4F * float2;
+		this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs[3].rotateAngleX = MathHelper.cos(float1 * 0.6662F + (float)Math.PI) * 1.4F * float2;
+		ModelRenderer[] modelRenderer7 = this.field_9247_0Lx1J16Yen1308TBY3ddvv7AdaV8bSu7J7WYu7g1h3h8j3PGiOptr24Rk2Qs;
+		int i8 = modelRenderer7.length;
+
+		for(int i9 = 0; i9 < i8; ++i9) {
+			ModelRenderer modelRenderer10 = modelRenderer7[i9];
+			modelRenderer10.render(float6);
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockDoorUnknownClass.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockDoorUnknownClass extends BlockDoor {
+	public static int field_8268_47i97CxczCt3zKR5Jn9pv6Yi7ugWFb034G5cr2RMli20J72CtjK675D6nUoS;
+
+	public BlockDoorUnknownClass(int integer1, int integer2, int integer3) {
+		super(integer1, Material.wood);
+		this.blockIndexInTexture = integer2;
+		field_8268_47i97CxczCt3zKR5Jn9pv6Yi7ugWFb034G5cr2RMli20J72CtjK675D6nUoS = integer3 + 32767;
+	}
+
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : field_8268_47i97CxczCt3zKR5Jn9pv6Yi7ugWFb034G5cr2RMli20J72CtjK675D6nUoS;
+	}
+}
--- net/minecraft/src/RenderSlime.java
+++ net/minecraft/src/RenderSlime.java
@@ -5,20 +5,20 @@
 public class RenderSlime extends RenderLiving {
 	private ModelBase modelSlime;
 
-	public RenderSlime(ModelBase var1, ModelBase var2, float var3) {
-		super(var1, var3);
-		this.modelSlime = var2;
+	public RenderSlime(ModelBase yi1, ModelBase yi2, float float3) {
+		super(yi1, float3);
+		this.modelSlime = yi2;
 	}
 
-	protected boolean renderSlimePassModel(EntitySlime var1, int var2) {
-		if(var2 == 0) {
+	protected boolean renderSlimePassModel(EntitySlime hf, int integer) {
+		if(integer == 0) {
 			this.setRenderPassModel(this.modelSlime);
 			GL11.glEnable(GL11.GL_NORMALIZE);
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 			return true;
 		} else {
-			if(var2 == 1) {
+			if(integer == 1) {
 				GL11.glDisable(GL11.GL_BLEND);
 				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 			}
@@ -27,18 +27,18 @@
 		}
 	}
 
-	protected void squishSlime(EntitySlime var1, float var2) {
-		float var3 = (var1.prevSquishFactor + (var1.squishFactor - var1.prevSquishFactor) * var2) / ((float)var1.size * 0.5F + 1.0F);
-		float var4 = 1.0F / (var3 + 1.0F);
-		float var5 = (float)var1.size;
-		GL11.glScalef(var4 * var5, 1.0F / var4 * var5, var4 * var5);
-	}
-
-	protected void preRenderCallback(EntityLiving var1, float var2) {
-		this.squishSlime((EntitySlime)var1, var2);
-	}
-
-	protected boolean shouldRenderPass(EntityLiving var1, int var2) {
-		return this.renderSlimePassModel((EntitySlime)var1, var2);
+	protected void squishSlime(EntitySlime hf, float float2) {
+		float f3 = (hf.prevSquishFactor + (hf.squishFactor - hf.prevSquishFactor) * float2) / ((float)hf.size * 0.5F + 1.0F);
+		float f4 = 1.0F / (f3 + 1.0F);
+		float f5 = (float)hf.size;
+		GL11.glScalef(f4 * f5, 1.0F / f4 * f5, f4 * f5);
+	}
+
+	protected void preRenderCallback(EntityLiving zi, float float2) {
+		this.squishSlime((EntitySlime)zi, float2);
+	}
+
+	protected boolean shouldRenderPass(EntityLiving zi, int integer) {
+		return this.renderSlimePassModel((EntitySlime)zi, integer);
 	}
 }
--- net/minecraft/src/MouseHelper.java
+++ net/minecraft/src/MouseHelper.java
@@ -2,6 +2,7 @@
 
 import java.awt.Component;
 import java.nio.IntBuffer;
+
 import org.lwjgl.LWJGLException;
 import org.lwjgl.input.Cursor;
 import org.lwjgl.input.Mouse;
@@ -12,18 +13,19 @@
 	public int deltaX;
 	public int deltaY;
 	private int mouseInt = 10;
+	private long lastUpdate = -1L;
 
-	public MouseHelper(Component var1) {
-		this.windowComponent = var1;
-		IntBuffer var2 = GLAllocation.createDirectIntBuffer(1);
-		var2.put(0);
-		var2.flip();
-		IntBuffer var3 = GLAllocation.createDirectIntBuffer(1024);
+	public MouseHelper(Component component) {
+		this.windowComponent = component;
+		IntBuffer intBuffer2 = GLAllocation.createDirectIntBuffer(1);
+		intBuffer2.put(0);
+		intBuffer2.flip();
+		IntBuffer intBuffer3 = GLAllocation.createDirectIntBuffer(1024);
 
 		try {
-			this.cursor = new Cursor(32, 32, 16, 16, 1, var3, var2);
-		} catch (LWJGLException var5) {
-			var5.printStackTrace();
+			this.cursor = new Cursor(32, 32, 16, 16, 1, intBuffer3, intBuffer2);
+		} catch (LWJGLException lWJGLException5) {
+			lWJGLException5.printStackTrace();
 		}
 
 	}
@@ -40,6 +42,32 @@
 	}
 
 	public void mouseXYChange() {
+		if(this.lastUpdate == -1L) {
+			this.lastUpdate = System.currentTimeMillis();
+		}
+
+		float f1 = (float)(System.currentTimeMillis() - this.lastUpdate) / 1000.0F;
+		this.lastUpdate = System.currentTimeMillis();
+		if(InputHandler.gamepads != null) {
+			for(int i2 = 0; i2 != InputHandler.gamepads.length; ++i2) {
+				if(InputHandler.gamepads[i2] != null && (InputHandler.gamepads[i2].getRXAxisValue() != 0.0F || InputHandler.gamepads[i2].getRYAxisValue() != 0.0F) && (InputHandler.gamepads[i2].getRXAxisValue() != -1.0F || InputHandler.gamepads[i2].getRYAxisValue() != -1.0F)) {
+					this.deltaX = (int)(InputHandler.gamepads[i2].getRXAxisValue() * 500.0F * (float)InputHandler.field_9745_4T40SjxPM7Zgd16lkH4wCJeyIT159Gxi3Bz0h3trX928I683iCL1KZ3iK4Q6 * f1);
+					if(this.deltaX > -1 && this.deltaX < 1) {
+						this.deltaX = 0;
+					}
+
+					this.deltaY = (int)(-InputHandler.gamepads[i2].getRYAxisValue() * 250.0F * (float)InputHandler.field_9745_4T40SjxPM7Zgd16lkH4wCJeyIT159Gxi3Bz0h3trX928I683iCL1KZ3iK4Q6 * f1);
+					if(this.deltaY > -1 && this.deltaY < 1) {
+						this.deltaY = 0;
+					}
+
+					if(this.deltaX != 0 || this.deltaY != 0) {
+						return;
+					}
+				}
+			}
+		}
+
 		this.deltaX = Mouse.getDX();
 		this.deltaY = Mouse.getDY();
 	}
--- /dev/null
+++ net/minecraft/src/VisualsNeon.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+class VisualsNeon extends Visuals {
+    final /* synthetic */ VisualsManager field_10081_6SL4jn9Y16LC2w68PX75vG4iR8yIBzXccf40SRp0L6Ds888rYbMv81On2Zcl;
+    
+    VisualsNeon(final VisualsManager la) {
+        this.field_10081_6SL4jn9Y16LC2w68PX75vG4iR8yIBzXccf40SRp0L6Ds888rYbMv81On2Zcl = la;
+    }
+    
+    @Override
+    public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+        return "/unl/546d27d3-e170-47cb-b70e-4f4015fb5aa3.xAL";
+    }
+    
+    @Override
+    public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(final Object... arr) {
+        if (arr[0] instanceof FreerunMap5 && (long)arr[1] <= 420L) {
+            this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+            return true;
+        }
+        return false;
+    }
+    
+    @Override
+    public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+        return "unlock--neo";
+    }
+    
+    @Override
+    public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+        return "Neon";
+    }
+    
+    @Override
+    public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+        return "Finish FINALE in 21 seconds or less";
+    }
+}
--- net/minecraft/src/BlockMinecartTrack.java
+++ net/minecraft/src/BlockMinecartTrack.java
@@ -3,12 +3,12 @@
 import java.util.Random;
 
 public class BlockMinecartTrack extends Block {
-	protected BlockMinecartTrack(int var1, int var2) {
-		super(var1, var2, Material.circuits);
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F / 16.0F, 1.0F);
+	protected BlockMinecartTrack(int id, int blockIndex) {
+		super(id, blockIndex, Material.circuits);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -16,23 +16,23 @@
 		return false;
 	}
 
-	public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3D var5, Vec3D var6) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.collisionRayTrace(var1, var2, var3, var4, var5, var6);
+	public MovingObjectPosition collisionRayTrace(World world, int x, int y, int z, Vec3D vector1, Vec3D vector2) {
+		this.setBlockBoundsBasedOnState(world, x, y, z);
+		return super.collisionRayTrace(world, x, y, z, vector1, vector2);
 	}
 
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		if(var5 >= 2 && var5 <= 5) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 10.0F / 16.0F, 1.0F);
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		int i5 = blockAccess.getBlockMetadata(x, y, z);
+		if(i5 >= 2 && i5 <= 5) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.625F, 1.0F);
 		} else {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F / 16.0F, 1.0F);
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
 		}
 
 	}
 
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var2 >= 6 ? this.blockIndexInTexture - 16 : this.blockIndexInTexture;
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return metadata >= 6 ? this.blockIndexInTexture - 16 : this.blockIndexInTexture;
 	}
 
 	public boolean renderAsNormalBlock() {
@@ -43,52 +43,52 @@
 		return 9;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 1;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2, var3 - 1, var4);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		var1.setBlockMetadataWithNotify(var2, var3, var4, 15);
-		this.refreshTrackShape(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		boolean var7 = false;
-		if(!var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var7 = true;
-		}
-
-		if(var6 == 2 && !var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var7 = true;
-		}
-
-		if(var6 == 3 && !var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var7 = true;
-		}
-
-		if(var6 == 4 && !var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var7 = true;
-		}
-
-		if(var6 == 5 && !var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var7 = true;
-		}
-
-		if(var7) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		} else if(var5 > 0 && Block.blocksList[var5].canProvidePower() && MinecartTrackLogic.getNAdjacentTracks(new MinecartTrackLogic(this, var1, var2, var3, var4)) == 3) {
-			this.refreshTrackShape(var1, var2, var3, var4);
-		}
-
-	}
-
-	private void refreshTrackShape(World var1, int var2, int var3, int var4) {
-		(new MinecartTrackLogic(this, var1, var2, var3, var4)).place(var1.isBlockIndirectlyGettingPowered(var2, var3, var4));
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y - 1, z);
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		world.setBlockMetadataWithNotify(x, y, z, 15);
+		this.refreshTrackShape(world, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		boolean z7 = false;
+		if(!world.isBlockNormalCube(x, y - 1, z)) {
+			z7 = true;
+		}
+
+		if(i6 == 2 && !world.isBlockNormalCube(x + 1, y, z)) {
+			z7 = true;
+		}
+
+		if(i6 == 3 && !world.isBlockNormalCube(x - 1, y, z)) {
+			z7 = true;
+		}
+
+		if(i6 == 4 && !world.isBlockNormalCube(x, y, z - 1)) {
+			z7 = true;
+		}
+
+		if(i6 == 5 && !world.isBlockNormalCube(x, y, z + 1)) {
+			z7 = true;
+		}
+
+		if(z7) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
+		} else if(flag > 0 && Block.blocksList[flag].canProvidePower() && MinecartTrackLogic.getNAdjacentTracks(new MinecartTrackLogic(this, world, x, y, z)) == 3) {
+			this.refreshTrackShape(world, x, y, z);
+		}
+
+	}
+
+	private void refreshTrackShape(World world, int x, int y, int z) {
+		(new MinecartTrackLogic(this, world, x, y, z)).place(world.isBlockIndirectlyGettingPowered(x, y, z));
 	}
 }
--- /dev/null
+++ net/minecraft/src/HubFragment4.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class HubFragment4 extends HubWorldUnknownClass2 {
+	public HubFragment4(HubWorld wv, int integer2, int integer3, int integer4) {
+		super(wv, integer2, integer3, integer4, 8, 12, 5);
+	}
+
+	public void func_9822_96pkMbVA643Z1Y78zU1zOHbm0WbR47PCGp9q1ZyTK64G0pr0ViUREK2TCos1() {
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 0, 0, 7, 0, 11, ExtBlocks.dimensionFloorBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 4, 0, 7, 4, 11, ExtBlocks.dimensionFloorBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 0, 0, 7, 4, 0, ExtBlocks.dimensionWallBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 0, 0, 0, 4, 11, ExtBlocks.dimensionWallBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 0, 11, 7, 4, 11, ExtBlocks.dimensionWallBlock.blockID);
+	}
+}
--- net/minecraft/src/EntitySplashFX.java
+++ net/minecraft/src/EntitySplashFX.java
@@ -1,14 +1,14 @@
 package net.minecraft.src;
 
 public class EntitySplashFX extends EntityRainFX {
-	public EntitySplashFX(World var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-		super(var1, var2, var4, var6);
+	public EntitySplashFX(World worldObj, double x, double y, double z, double motionX, double motionY, double motionZ) {
+		super(worldObj, x, y, z);
 		this.particleGravity = 0.04F;
 		++this.particleTextureIndex;
-		if(var10 == 0.0D && (var8 != 0.0D || var12 != 0.0D)) {
-			this.motionX = var8;
-			this.motionY = var10 + 0.1D;
-			this.motionZ = var12;
+		if(motionY == 0.0D && (motionX != 0.0D || motionZ != 0.0D)) {
+			this.motionX = motionX;
+			this.motionY = motionY + 0.1D;
+			this.motionZ = motionZ;
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/BlockBookshelfOld.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockBookshelfOld extends BlockOld {
+	public BlockBookshelfOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.wood);
+	}
+
+	public int getBlockTextureFromSide(int integer) {
+		return integer <= 1 ? 4 : this.blockIndexInTexture;
+	}
+
+	public int quantityDropped(Random random) {
+		return 0;
+	}
+}
--- /dev/null
+++ net/minecraft/src/HandlerPlayDemo.java
@@ -1,0 +1,130 @@
+package net.minecraft.src;
+
+import java.io.BufferedReader;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+public class HandlerPlayDemo {
+	List field_11431_637P37TE9gmDT57yVlTZ73i576up8cwuDF63ofWaw7wL7LacaR24xM7BXzu5;
+	public List field_11432_08Cq759cm94gk5tNi09771XqCD6UcInYC8zHgZJS1aDD9g9FLZ8ZaW69dqkS;
+	public String field_11430_0OdUr2nD4R8uO36Sd51QoP94Lm2202x55uFJQVi7Sy5OO23j6PTNlph9id4f;
+
+	public HandlerPlayDemo(List list1, List list2, String string) {
+		this(list1, list2);
+		this.field_11430_0OdUr2nD4R8uO36Sd51QoP94Lm2202x55uFJQVi7Sy5OO23j6PTNlph9id4f = string;
+	}
+
+	public HandlerPlayDemo(List list1, List list2) {
+		this.field_11430_0OdUr2nD4R8uO36Sd51QoP94Lm2202x55uFJQVi7Sy5OO23j6PTNlph9id4f = "v0-DEMOPLAYER";
+		this.field_11431_637P37TE9gmDT57yVlTZ73i576up8cwuDF63ofWaw7wL7LacaR24xM7BXzu5 = new ArrayList(list1);
+		this.field_11432_08Cq759cm94gk5tNi09771XqCD6UcInYC8zHgZJS1aDD9g9FLZ8ZaW69dqkS = new ArrayList(list2);
+	}
+
+	protected HandlerPlayDemo() {
+		this.field_11430_0OdUr2nD4R8uO36Sd51QoP94Lm2202x55uFJQVi7Sy5OO23j6PTNlph9id4f = "v0-DEMOPLAYER";
+		this.field_11431_637P37TE9gmDT57yVlTZ73i576up8cwuDF63ofWaw7wL7LacaR24xM7BXzu5 = new ArrayList();
+		this.field_11432_08Cq759cm94gk5tNi09771XqCD6UcInYC8zHgZJS1aDD9g9FLZ8ZaW69dqkS = new ArrayList();
+	}
+
+	public void func_11429_4Hdb2tF4Ro161cgZ713aaHheHwul09r95mRk40083ARmzqow29B4CqUo84M6(String string) {
+		try {
+			PrintWriter printWriter2 = new PrintWriter(new FileWriter(string));
+
+			try {
+				printWriter2.println("+mdmver:v1h0");
+				printWriter2.println("+dwmeta:RECDEMO ON 1.0.16.05R4 [" + InputHandler.mc.theWorld.levelName + "]");
+				printWriter2.println("+player:" + InputHandler.mc.session.username);
+				Iterator iterator3 = this.field_11431_637P37TE9gmDT57yVlTZ73i576up8cwuDF63ofWaw7wL7LacaR24xM7BXzu5.iterator();
+
+				while(true) {
+					if(!iterator3.hasNext()) {
+						System.out.println("Data written to " + string);
+						break;
+					}
+
+					HandlerPlayDemoUnknownClass2 handlerPlayDemoUnknownClass24 = (HandlerPlayDemoUnknownClass2)iterator3.next();
+					printWriter2.println(handlerPlayDemoUnknownClass24.field_11240_47ME2ux1w9JD07OmK1KWlC2l36wjp9k5rk5C91EqYYR6gjOY4kb42895Ml2n + " " + handlerPlayDemoUnknownClass24.field_11238_06ia42Crh5k64k27yg1rkw01iek6FWqXq038Nz5xCsr1186gZTb5QrQC9Ee6 + " " + handlerPlayDemoUnknownClass24.field_11239_27ngU1sJjzhN2F1lwIlqzdWsQU09NIv1oOAETINS9vPghD0aR3wNidfKbmq8 + " " + handlerPlayDemoUnknownClass24.field_11242_70hhZNfPCn7F2A43sUn292vmU47FJ2Xqf8wxmaj0Jvht0gJ3JZdg1B11ZIS4 + " " + handlerPlayDemoUnknownClass24.field_11241_1pBNhz72hG0DM4M2G197Aq7qWjMeY65Hl12oPon7Y3795IIGRLKfWH6264yk + " " + handlerPlayDemoUnknownClass24.field_11243_366213Kygu44q4VZJiDT5dY5qsS8R35a4wMyFfwM8f9lEhNH41knI2ixxw3K + " " + handlerPlayDemoUnknownClass24.field_11235_9PuH3jWZ0MDG4rg08sntk93kjfDv2P6b59Q9soX01Ey3WsujUs200QhUHLp9 + " " + handlerPlayDemoUnknownClass24.field_11237_979Vt94Ikeubje8aq02QS2ct4vv1F2xoYEYcud7ff1548HLvX33CvjHHnP0K + " " + handlerPlayDemoUnknownClass24.field_11236_73B65S5lxs1r7B0z1M2S4uMTH4ZE43GT5xQV19C44T08jAeG7ae4e6V605K6);
+				}
+			} catch (Throwable throwable6) {
+				try {
+					printWriter2.close();
+				} catch (Throwable throwable5) {
+					throwable6.addSuppressed(throwable5);
+				}
+
+				throw throwable6;
+			}
+
+			printWriter2.close();
+		} catch (IOException iOException7) {
+			iOException7.printStackTrace();
+		}
+
+	}
+
+	public static HandlerPlayDemo func_11428_9k6E1ErM8m8Ekl2tnCyj5PljXv5fpIe33XB87jRlW98HF72SweTYv0JQvjaQ(String string) {
+		HandlerPlayDemo handlerPlayDemo1 = new HandlerPlayDemo();
+
+		try {
+			BufferedReader bufferedReader2 = new BufferedReader(new FileReader(string));
+
+			HandlerPlayDemo handlerPlayDemo29;
+			try {
+				long j4 = 1L;
+
+				while(true) {
+					String string3;
+					if((string3 = bufferedReader2.readLine()) == null) {
+						System.out.println("Data read from " + string);
+						handlerPlayDemo29 = handlerPlayDemo1;
+						break;
+					}
+
+					if(string3.startsWith("+")) {
+						String string6 = string3.substring(0, 7);
+						if(string6.equals("+player")) {
+							handlerPlayDemo1.field_11430_0OdUr2nD4R8uO36Sd51QoP94Lm2202x55uFJQVi7Sy5OO23j6PTNlph9id4f = string3.substring(8);
+						}
+					} else if(string3.startsWith("d")) {
+						handlerPlayDemo1.field_11432_08Cq759cm94gk5tNi09771XqCD6UcInYC8zHgZJS1aDD9g9FLZ8ZaW69dqkS.add(new HandlerPlayDemoUnknownClass3(j4, string3));
+					} else {
+						String[] string28 = string3.split(" ");
+						if(string28.length == 9) {
+							long j7 = Long.parseLong(string28[0]);
+							j4 = j7;
+							double d9 = Double.parseDouble(string28[1]);
+							double d11 = Double.parseDouble(string28[2]);
+							double d13 = Double.parseDouble(string28[3]);
+							double d15 = Double.parseDouble(string28[4]);
+							double d17 = Double.parseDouble(string28[5]);
+							double d19 = Double.parseDouble(string28[6]);
+							double d21 = Double.parseDouble(string28[7]);
+							double d23 = Double.parseDouble(string28[8]);
+							handlerPlayDemo1.field_11431_637P37TE9gmDT57yVlTZ73i576up8cwuDF63ofWaw7wL7LacaR24xM7BXzu5.add(new HandlerPlayDemoUnknownClass2(j7, d9, d11, d13, d15, d17, d19, d21, d23));
+						}
+					}
+				}
+			} catch (Throwable throwable26) {
+				try {
+					bufferedReader2.close();
+				} catch (Throwable throwable25) {
+					throwable26.addSuppressed(throwable25);
+				}
+
+				throw throwable26;
+			}
+
+			bufferedReader2.close();
+			return handlerPlayDemo29;
+		} catch (IOException iOException27) {
+			System.out.println("Failed to read demo");
+			iOException27.printStackTrace();
+			return null;
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockMushroomOld.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class BlockMushroomOld extends BlockFlowerOld {
+	protected BlockMushroomOld(int integer1, int integer2) {
+		super(integer1, integer2);
+		float f3 = 0.2F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, f3 * 2.0F, 0.5F + f3);
+	}
+
+	protected boolean canThisPlantGrowOnThisBlockID(int integer) {
+		return BlockOld.opaqueCubeLookup[integer];
+	}
+
+	public boolean canBlockStay(World vg, int integer2, int integer3, int integer4) {
+		return vg.getBlockLightValue(integer2, integer3, integer4) <= 13 && this.canThisPlantGrowOnThisBlockID(vg.getBlockId(integer2, integer3 - 1, integer4));
+	}
+}
--- net/minecraft/src/EntityCreature.java
+++ net/minecraft/src/EntityCreature.java
@@ -2,113 +2,124 @@
 
 public class EntityCreature extends EntityLiving {
 	private PathEntity pathToEntity;
-	protected Entity entityToAttack;
+	public Entity entityToAttack;
 	protected boolean hasAttacked = false;
-
-	public EntityCreature(World var1) {
-		super(var1);
+	public XYZv field_9105_3e9WI32iDh4NvqQqp7smSXYS6MgX8c7p1TQZ6CFtIytS7734Ipx762147ExM;
+
+	public EntityCreature(World world) {
+		super(world);
+	}
+
+	protected boolean shouldInheritEASUpdate() {
+		return true;
+	}
+
+	public float maxPathFindingDistance() {
+		return 16.0F;
 	}
 
 	protected void updateEntityActionState() {
 		this.hasAttacked = false;
-		float var1 = 16.0F;
+		float f1 = this.maxPathFindingDistance();
 		if(this.entityToAttack == null) {
 			this.entityToAttack = this.findPlayerToAttack();
 			if(this.entityToAttack != null) {
-				this.pathToEntity = this.worldObj.getPathToEntity(this, this.entityToAttack, var1);
+				this.pathToEntity = this.worldObj.getPathToEntity(this, this.entityToAttack, f1);
 			}
 		} else if(!this.entityToAttack.isEntityAlive()) {
 			this.entityToAttack = null;
 		} else {
-			float var2 = this.entityToAttack.getDistanceToEntity(this);
+			float f2 = this.entityToAttack.getDistanceToEntity(this);
 			if(this.canEntityBeSeen(this.entityToAttack)) {
-				this.attackEntity(this.entityToAttack, var2);
-			}
-		}
-
-		if(this.hasAttacked || this.entityToAttack == null || this.pathToEntity != null && this.rand.nextInt(20) != 0) {
-			if(this.pathToEntity == null && this.rand.nextInt(80) == 0 || this.rand.nextInt(80) == 0) {
-				boolean var21 = false;
-				int var3 = -1;
-				int var4 = -1;
-				int var5 = -1;
-				float var6 = -99999.0F;
-
-				for(int var7 = 0; var7 < 10; ++var7) {
-					int var8 = MathHelper.floor_double(this.posX + (double)this.rand.nextInt(13) - 6.0D);
-					int var9 = MathHelper.floor_double(this.posY + (double)this.rand.nextInt(7) - 3.0D);
-					int var10 = MathHelper.floor_double(this.posZ + (double)this.rand.nextInt(13) - 6.0D);
-					float var11 = this.getBlockPathWeight(var8, var9, var10);
-					if(var11 > var6) {
-						var6 = var11;
-						var3 = var8;
-						var4 = var9;
-						var5 = var10;
-						var21 = true;
-					}
-				}
-
-				if(var21) {
-					this.pathToEntity = this.worldObj.getEntityPathToXYZ(this, var3, var4, var5, 10.0F);
-				}
-			}
-		} else {
-			this.pathToEntity = this.worldObj.getPathToEntity(this, this.entityToAttack, var1);
-		}
-
-		int var22 = MathHelper.floor_double(this.boundingBox.minY);
-		boolean var23 = this.handleWaterMovement();
-		boolean var24 = this.handleLavaMovement();
+				this.attackEntity(this.entityToAttack, f2);
+			}
+		}
+
+		if(!this.hasAttacked && this.entityToAttack != null && (this.pathToEntity == null || this.rand.nextInt(20) == 0)) {
+			this.pathToEntity = this.worldObj.getPathToEntity(this, this.entityToAttack, f1);
+		} else if(this.pathToEntity == null && this.rand.nextInt(80) == 0 || this.rand.nextInt(80) == 0) {
+			boolean z21 = false;
+			int i3 = -1;
+			int i4 = -1;
+			int i5 = -1;
+			float f6 = -99999.0F;
+
+			for(int i7 = 0; i7 < 10; ++i7) {
+				int i8 = MathHelper.floor_double(this.posX + (double)this.rand.nextInt(13) - 6.0D);
+				int i9 = MathHelper.floor_double(this.posY + (double)this.rand.nextInt(7) - 3.0D);
+				int i10 = MathHelper.floor_double(this.posZ + (double)this.rand.nextInt(13) - 6.0D);
+				float f11 = this.getBlockPathWeight(i8, i9, i10);
+				if(f11 > f6) {
+					f6 = f11;
+					i3 = i8;
+					i4 = i9;
+					i5 = i10;
+					z21 = true;
+				}
+			}
+
+			if(z21) {
+				this.pathToEntity = this.worldObj.getEntityPathToXYZ(this, i3, i4, i5, 10.0F);
+			}
+		}
+
+		if(this.field_9105_3e9WI32iDh4NvqQqp7smSXYS6MgX8c7p1TQZ6CFtIytS7734Ipx762147ExM != null && (this.entityToAttack == null || this.entityToAttack.getDistanceToEntity(this) > 8.0F)) {
+			this.pathToEntity = this.worldObj.getEntityPathToXYZ(this, (int)this.field_9105_3e9WI32iDh4NvqQqp7smSXYS6MgX8c7p1TQZ6CFtIytS7734Ipx762147ExM.x, (int)this.field_9105_3e9WI32iDh4NvqQqp7smSXYS6MgX8c7p1TQZ6CFtIytS7734Ipx762147ExM.y, (int)this.field_9105_3e9WI32iDh4NvqQqp7smSXYS6MgX8c7p1TQZ6CFtIytS7734Ipx762147ExM.z, 16.0F);
+		}
+
+		int i22 = MathHelper.floor_double(this.boundingBox.minY);
+		boolean z23 = this.handleWaterMovement();
+		boolean z24 = this.handleLavaMovement();
 		this.rotationPitch = 0.0F;
 		if(this.pathToEntity != null && this.rand.nextInt(100) != 0) {
-			Vec3D var25 = this.pathToEntity.getPosition(this);
-			double var26 = (double)(this.width * 2.0F);
+			Vec3D vec3D25 = this.pathToEntity.getPosition(this);
+			double d26 = (double)(this.width * 2.0F);
 
-			while(var25 != null && var25.squareDistanceTo(this.posX, var25.yCoord, this.posZ) < var26 * var26) {
+			while(vec3D25 != null && vec3D25.squareDistanceTo(this.posX, vec3D25.yCoord, this.posZ) < d26 * d26) {
 				this.pathToEntity.incrementPathIndex();
 				if(this.pathToEntity.isFinished()) {
-					var25 = null;
+					vec3D25 = null;
 					this.pathToEntity = null;
 				} else {
-					var25 = this.pathToEntity.getPosition(this);
+					vec3D25 = this.pathToEntity.getPosition(this);
 				}
 			}
 
 			this.isJumping = false;
-			if(var25 != null) {
-				double var27 = var25.xCoord - this.posX;
-				double var28 = var25.zCoord - this.posZ;
-				double var12 = var25.yCoord - (double)var22;
-				float var14 = (float)(Math.atan2(var28, var27) * 180.0D / (double)((float)Math.PI)) - 90.0F;
-				float var15 = var14 - this.rotationYaw;
-
-				for(this.moveForward = this.moveSpeed; var15 < -180.0F; var15 += 360.0F) {
-				}
-
-				while(var15 >= 180.0F) {
-					var15 -= 360.0F;
-				}
-
-				if(var15 > 30.0F) {
-					var15 = 30.0F;
-				}
-
-				if(var15 < -30.0F) {
-					var15 = -30.0F;
-				}
-
-				this.rotationYaw += var15;
+			if(vec3D25 != null) {
+				double d27 = vec3D25.xCoord - this.posX;
+				double d28 = vec3D25.zCoord - this.posZ;
+				double d12 = vec3D25.yCoord - (double)i22;
+				float f14 = (float)(Math.atan2(d28, d27) * 180.0D / (double)(float)Math.PI) - 90.0F;
+				float f15 = f14 - this.rotationYaw;
+
+				for(this.moveForward = this.moveSpeed; f15 < -180.0F; f15 += 360.0F) {
+				}
+
+				while(f15 >= 180.0F) {
+					f15 -= 360.0F;
+				}
+
+				if(f15 > 30.0F) {
+					f15 = 30.0F;
+				}
+
+				if(f15 < -30.0F) {
+					f15 = -30.0F;
+				}
+
+				this.rotationYaw += f15;
 				if(this.hasAttacked && this.entityToAttack != null) {
-					double var16 = this.entityToAttack.posX - this.posX;
-					double var18 = this.entityToAttack.posZ - this.posZ;
-					float var20 = this.rotationYaw;
-					this.rotationYaw = (float)(Math.atan2(var18, var16) * 180.0D / (double)((float)Math.PI)) - 90.0F;
-					var15 = (var20 - this.rotationYaw + 90.0F) * (float)Math.PI / 180.0F;
-					this.moveStrafing = -MathHelper.sin(var15) * this.moveForward * 1.0F;
-					this.moveForward = MathHelper.cos(var15) * this.moveForward * 1.0F;
+					double d16 = this.entityToAttack.posX - this.posX;
+					double d18 = this.entityToAttack.posZ - this.posZ;
+					float f20 = this.rotationYaw;
+					this.rotationYaw = (float)(Math.atan2(d18, d16) * 180.0D / (double)(float)Math.PI) - 90.0F;
+					f15 = (f20 - this.rotationYaw + 90.0F) * (float)Math.PI / 180.0F;
+					this.moveStrafing = -MathHelper.sin(f15) * this.moveForward * 1.0F;
+					this.moveForward = MathHelper.cos(f15) * this.moveForward * 1.0F;
 				}
 
-				if(var12 > 0.0D) {
+				if(d12 > 0.0D) {
 					this.isJumping = true;
 				}
 			}
@@ -121,20 +132,20 @@
 				this.isJumping = true;
 			}
 
-			if(this.rand.nextFloat() < 0.8F && (var23 || var24)) {
+			if(this.rand.nextFloat() < 0.8F && (z23 || z24)) {
 				this.isJumping = true;
 			}
-
-		} else {
+		} else if(this.shouldInheritEASUpdate()) {
 			super.updateEntityActionState();
 			this.pathToEntity = null;
 		}
-	}
-
-	protected void attackEntity(Entity var1, float var2) {
-	}
-
-	protected float getBlockPathWeight(int var1, int var2, int var3) {
+
+	}
+
+	protected void attackEntity(Entity entity, float damage) {
+	}
+
+	protected float getBlockPathWeight(int x, int y, int z) {
 		return 0.0F;
 	}
 
@@ -143,9 +154,9 @@
 	}
 
 	public boolean getCanSpawnHere() {
-		int var1 = MathHelper.floor_double(this.posX);
-		int var2 = MathHelper.floor_double(this.boundingBox.minY);
-		int var3 = MathHelper.floor_double(this.posZ);
-		return super.getCanSpawnHere() && this.getBlockPathWeight(var1, var2, var3) >= 0.0F;
+		int i1 = MathHelper.floor_double(this.posX);
+		int i2 = MathHelper.floor_double(this.boundingBox.minY);
+		int i3 = MathHelper.floor_double(this.posZ);
+		return super.getCanSpawnHere() && this.getBlockPathWeight(i1, i2, i3) >= 0.0F;
 	}
 }
--- net/minecraft/src/GuiConnecting.java
+++ net/minecraft/src/GuiConnecting.java
@@ -6,9 +6,9 @@
 	private NetClientHandler clientHandler;
 	private boolean cancelled = false;
 
-	public GuiConnecting(Minecraft var1, String var2, int var3) {
-		var1.changeWorld1((World)null);
-		(new ThreadConnectToServer(this, var1, var2, var3)).start();
+	public GuiConnecting(Minecraft minecraft, String string, int integer) {
+		minecraft.changeWorld1((World)null);
+		(new ThreadConnectToServer(this, minecraft, string, integer)).start();
 	}
 
 	public void updateScreen() {
@@ -18,7 +18,7 @@
 
 	}
 
-	protected void keyTyped(char var1, int var2) {
+	protected void keyTyped(char character, int key) {
 	}
 
 	public void initGui() {
@@ -26,8 +26,8 @@
 		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120 + 12, "Cancel"));
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.id == 0) {
+	protected void actionPerformed(GuiButton button) {
+		if(button.id == 0) {
 			this.cancelled = true;
 			if(this.clientHandler != null) {
 				this.clientHandler.disconnect();
@@ -38,28 +38,28 @@
 
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
 		if(this.clientHandler == null) {
-			this.drawCenteredString(this.fontRenderer, "Connecting to the server...", this.width / 2, this.height / 2 - 50, 16777215);
-			this.drawCenteredString(this.fontRenderer, "", this.width / 2, this.height / 2 - 10, 16777215);
+			this.drawCenteredString(this.fontRenderer, "Connecting to the server...", this.width / 2, this.height / 2 - 50, 0xFFFFFF);
+			this.drawCenteredString(this.fontRenderer, "", this.width / 2, this.height / 2 - 10, 0xFFFFFF);
 		} else {
-			this.drawCenteredString(this.fontRenderer, "Logging in...", this.width / 2, this.height / 2 - 50, 16777215);
-			this.drawCenteredString(this.fontRenderer, this.clientHandler.loginProgress, this.width / 2, this.height / 2 - 10, 16777215);
+			this.drawCenteredString(this.fontRenderer, "Logging in...", this.width / 2, this.height / 2 - 50, 0xFFFFFF);
+			this.drawCenteredString(this.fontRenderer, this.clientHandler.loginProgress, this.width / 2, this.height / 2 - 10, 0xFFFFFF);
 		}
 
-		super.drawScreen(var1, var2, var3);
-	}
-
-	static NetClientHandler setNetClientHandler(GuiConnecting var0, NetClientHandler var1) {
-		return var0.clientHandler = var1;
-	}
-
-	static boolean isCancelled(GuiConnecting var0) {
-		return var0.cancelled;
-	}
-
-	static NetClientHandler getNetClientHandler(GuiConnecting var0) {
-		return var0.clientHandler;
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
+	}
+
+	static NetClientHandler setNetClientHandler(GuiConnecting eq, NetClientHandler ab) {
+		return eq.clientHandler = ab;
+	}
+
+	static boolean isCancelled(GuiConnecting eq) {
+		return eq.cancelled;
+	}
+
+	static NetClientHandler getNetClientHandler(GuiConnecting eq) {
+		return eq.clientHandler;
 	}
 }
--- /dev/null
+++ net/minecraft/src/MobSaltSven.java
@@ -1,0 +1,96 @@
+package net.minecraft.src;
+
+public class MobSaltSven extends EntityMob {
+	final int field_9129_9uUITqEA953V47j688yoOs736pX17IME90V0CvUHI3gltHyxGb11O53G2ngk = 55;
+	public EntityLiving field_9133_05G43CDmXNB5O5FN7j42030AqMXp1an076HyhMm09LiyU5t8r6t9Ztbylx7m = null;
+	public long field_9128_6ZMh8gPyw533h835ImYL5JcfN53M815AC4Lqpn57jevNG8w6t8sOMWV4wpiB = 0L;
+	public int field_9131_2q05VvtrVs4y2KTQH5DS81p0v41LAM5mxKyls5M2oyb7fdjjb6fN10Jk36WA = 0;
+	public boolean field_9130_88Yk0iy03W8f42r0qlkvX2JJ2s8H6272hm83CDC0upcu9P9glM37SRcjVwB8 = true;
+	public XYZv field_9132_8CjibmyG8Iem84U159pUQBYj27vz1zKdCho9IcOuf4T30Y9Wlqg2igUmEnNq = null;
+
+	public MobSaltSven(World world) {
+		super(world);
+		this.texture = "/mob/saltsven.png";
+		this.setSize(1.0F, 2.0F);
+		this.moveSpeed = 3.0F;
+	}
+
+	protected EntityPlayer func_9127_62X3s7WHAjB6FNsm6MsHeh13043Mc8zLW3zl36890vQ3ybAy2rQb168R4gP4() {
+		return (EntityPlayer)(!this.worldObj.multiplayerWorld ? InputHandler.mc.thePlayer : this.worldObj.getClosestPlayerToEntity(this, 64.0D));
+	}
+
+	protected Entity findPlayerToAttack() {
+		return null;
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setLong("ObservationTimer", this.field_9128_6ZMh8gPyw533h835ImYL5JcfN53M815AC4Lqpn57jevNG8w6t8sOMWV4wpiB);
+		nbttagcompound.setBoolean("CommencedAttack", this.field_9130_88Yk0iy03W8f42r0qlkvX2JJ2s8H6272hm83CDC0upcu9P9glM37SRcjVwB8);
+		nbttagcompound.setBoolean("HasLLoc", this.field_9132_8CjibmyG8Iem84U159pUQBYj27vz1zKdCho9IcOuf4T30Y9Wlqg2igUmEnNq != null);
+		if(this.field_9132_8CjibmyG8Iem84U159pUQBYj27vz1zKdCho9IcOuf4T30Y9Wlqg2igUmEnNq != null) {
+			nbttagcompound.setLong("llocx", this.field_9132_8CjibmyG8Iem84U159pUQBYj27vz1zKdCho9IcOuf4T30Y9Wlqg2igUmEnNq.x);
+			nbttagcompound.setLong("llocy", this.field_9132_8CjibmyG8Iem84U159pUQBYj27vz1zKdCho9IcOuf4T30Y9Wlqg2igUmEnNq.y);
+			nbttagcompound.setLong("llocz", this.field_9132_8CjibmyG8Iem84U159pUQBYj27vz1zKdCho9IcOuf4T30Y9Wlqg2igUmEnNq.z);
+		}
+
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.field_9128_6ZMh8gPyw533h835ImYL5JcfN53M815AC4Lqpn57jevNG8w6t8sOMWV4wpiB = nbttagcompound.getLong("ObservationTimer");
+		this.field_9130_88Yk0iy03W8f42r0qlkvX2JJ2s8H6272hm83CDC0upcu9P9glM37SRcjVwB8 = nbttagcompound.getBoolean("CommencedAttack");
+		boolean z2 = nbttagcompound.getBoolean("HasLLoc");
+		if(z2) {
+			this.field_9132_8CjibmyG8Iem84U159pUQBYj27vz1zKdCho9IcOuf4T30Y9Wlqg2igUmEnNq = new XYZv(nbttagcompound.getLong("llocx"), nbttagcompound.getLong("llocy"), nbttagcompound.getLong("llocz"));
+		}
+
+		super.readEntityFromNBT(nbttagcompound);
+	}
+
+	protected String getHurtSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected String getDeathSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected float getSoundVolume() {
+		return 0.4F;
+	}
+
+	public boolean interact(EntityPlayer entityPlayer) {
+		return false;
+	}
+
+	protected boolean shouldInheritEASUpdate() {
+		return false;
+	}
+
+	public float maxPathFindingDistance() {
+		return 0.0F;
+	}
+
+	public void onLivingUpdate() {
+		if(this.field_9133_05G43CDmXNB5O5FN7j42030AqMXp1an076HyhMm09LiyU5t8r6t9Ztbylx7m == null) {
+			this.field_9133_05G43CDmXNB5O5FN7j42030AqMXp1an076HyhMm09LiyU5t8r6t9Ztbylx7m = this.func_9127_62X3s7WHAjB6FNsm6MsHeh13043Mc8zLW3zl36890vQ3ybAy2rQb168R4gP4();
+			this.field_9128_6ZMh8gPyw533h835ImYL5JcfN53M815AC4Lqpn57jevNG8w6t8sOMWV4wpiB = 0L;
+			this.field_9130_88Yk0iy03W8f42r0qlkvX2JJ2s8H6272hm83CDC0upcu9P9glM37SRcjVwB8 = true;
+		} else {
+			this.entityToAttack = null;
+			++this.field_9128_6ZMh8gPyw533h835ImYL5JcfN53M815AC4Lqpn57jevNG8w6t8sOMWV4wpiB;
+			if(this.field_9128_6ZMh8gPyw533h835ImYL5JcfN53M815AC4Lqpn57jevNG8w6t8sOMWV4wpiB > 550L) {
+				this.worldObj.playSoundAtEntity(this, "ext.obvr_attack", 1.0F, 1.0F);
+			}
+
+			if(this.field_9132_8CjibmyG8Iem84U159pUQBYj27vz1zKdCho9IcOuf4T30Y9Wlqg2igUmEnNq != null) {
+				this.setPosition((double)this.field_9132_8CjibmyG8Iem84U159pUQBYj27vz1zKdCho9IcOuf4T30Y9Wlqg2igUmEnNq.x, (double)this.field_9132_8CjibmyG8Iem84U159pUQBYj27vz1zKdCho9IcOuf4T30Y9Wlqg2igUmEnNq.y, (double)this.field_9132_8CjibmyG8Iem84U159pUQBYj27vz1zKdCho9IcOuf4T30Y9Wlqg2igUmEnNq.z);
+			}
+
+			double d1 = Math.atan2(this.posX - this.field_9133_05G43CDmXNB5O5FN7j42030AqMXp1an076HyhMm09LiyU5t8r6t9Ztbylx7m.posX, -(this.posZ - this.field_9133_05G43CDmXNB5O5FN7j42030AqMXp1an076HyhMm09LiyU5t8r6t9Ztbylx7m.posZ)) / Math.PI * 180.0D;
+			this.setRotation((float)d1, 0.0F);
+		}
+
+		super.onLivingUpdate();
+	}
+}
--- /dev/null
+++ net/minecraft/src/EntityFirable.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public class EntityFirable extends Entity {
+	public float arrowShake;
+
+	public String getTexture() {
+		return "/item/arrows.png";
+	}
+
+	public EntityFirable(World world) {
+		super(world);
+	}
+
+	protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+	}
+
+	protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+	}
+}
--- /dev/null
+++ net/minecraft/src/Biome.java
@@ -1,0 +1,72 @@
+package net.minecraft.src;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.WeakHashMap;
+import java.util.Map.Entry;
+
+public class Biome {
+	private static final WeakHashMap field_11924_2m0i0yp0898q2l57HTnHC4r48B8F4ZmrFXxq96WAKk59I36sNOCwY214PNjR = new WeakHashMap();
+	private final BiomeInterface field_11923_6G8IbpB1j39K15omtz2I96X36TWY4ln14ueN38e0HSY85Oc2Fu9QoY1fRstW;
+
+	private Biome(BiomeInterface og) {
+		this.field_11923_6G8IbpB1j39K15omtz2I96X36TWY4ln14ueN38e0HSY85Oc2Fu9QoY1fRstW = og;
+	}
+
+	public static Biome func_11922_2n3qE9TNSbq6jFP0jVF6MZR791V18lhzx1FrS1vTgw66qgr9H9NUnl54vO2R(BiomeInterface og) {
+		Biome biome1 = (Biome)field_11924_2m0i0yp0898q2l57HTnHC4r48B8F4ZmrFXxq96WAKk59I36sNOCwY214PNjR.get(og);
+		if(biome1 == null) {
+			biome1 = new Biome(og);
+			field_11924_2m0i0yp0898q2l57HTnHC4r48B8F4ZmrFXxq96WAKk59I36sNOCwY214PNjR.put(biome1.field_11923_6G8IbpB1j39K15omtz2I96X36TWY4ln14ueN38e0HSY85Oc2Fu9QoY1fRstW, biome1);
+		}
+
+		return biome1;
+	}
+
+	public WorldGenMyconUnknownClass func_11921_2L2822HFv0Zs3L6g73SmXjqyWS7YT96y6ZshUIa6nFgwp5KcjgV15AJ304yM(int integer1, int integer2, EnumWorldGenerator _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178) {
+		HashMap hashMap4 = new HashMap(16);
+
+		int i5;
+		for(i5 = 0; i5 < 16; ++i5) {
+			for(int i6 = 0; i6 < 16; ++i6) {
+				WorldGenMyconUnknownClass worldGenMyconUnknownClass7 = this.field_11923_6G8IbpB1j39K15omtz2I96X36TWY4ln14ueN38e0HSY85Oc2Fu9QoY1fRstW.func_10185_7j1lR4019pucW00n7wn38afjBd62vEMB6B6SVB9068f4kyPzw4E6wI65ufr8(integer1 * 16 + i5, integer2 * 16 + i6, _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178);
+				Integer integer8 = (Integer)hashMap4.get(worldGenMyconUnknownClass7);
+				if(integer8 == null) {
+					integer8 = 1;
+				} else {
+					integer8 = integer8.intValue() + 1;
+				}
+
+				hashMap4.put(worldGenMyconUnknownClass7, integer8);
+			}
+		}
+
+		i5 = 0;
+		WorldGenMyconUnknownClass worldGenMyconUnknownClass10 = null;
+		Iterator iterator11 = hashMap4.entrySet().iterator();
+
+		Entry map$Entry12;
+		while(iterator11.hasNext()) {
+			map$Entry12 = (Entry)iterator11.next();
+			if(((Integer)map$Entry12.getValue()).intValue() > i5) {
+				i5 = ((Integer)map$Entry12.getValue()).intValue();
+				worldGenMyconUnknownClass10 = (WorldGenMyconUnknownClass)map$Entry12.getKey();
+			}
+		}
+
+		if(worldGenMyconUnknownClass10 != null) {
+			return worldGenMyconUnknownClass10;
+		} else {
+			System.err.println("!BIOME GENERATOR BUG (please report on bug tracker)!");
+			System.err.println("biome list:");
+			iterator11 = hashMap4.entrySet().iterator();
+
+			while(iterator11.hasNext()) {
+				map$Entry12 = (Entry)iterator11.next();
+				System.err.println(((WorldGenMyconUnknownClass)map$Entry12.getKey()).toString() + "/" + map$Entry12.getValue());
+			}
+
+			throw new MinecraftException2();
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/ExtItems.java
@@ -1,0 +1,140 @@
+package net.minecraft.src;
+
+public class ExtItems {
+	public static Item obsidianArmor0;
+	public static Item obsidianArmor1;
+	public static Item obsidianArmor2;
+	public static Item obsidianArmor3;
+	public static Item obsidianSword;
+	public static Item obsidianShovel;
+	public static Item obsidianPick;
+	public static Item obsidianAxe;
+	public static Item obsidianHoe;
+	public static Item obsidianIngot;
+	public static Item blackDye;
+	public static Item greenDye;
+	public static Item blueDye;
+	public static Item pinkDye;
+	public static Item fryshroom;
+	public static Item edibleFire;
+	public static Item flameberge;
+	public static Item BlackGlasses0;
+	public static Item fireWoodDoor;
+	public static Item essence;
+	public static Item eraser;
+	public static Item essenceGun;
+	public static Item HubDoor;
+	public static Item Spear;
+	public static Item field_11340_7X9VRlMe6NuD9dLwd8nmi4X3IOqglMoWR84do3Evv5zW12VM3A5tXipdrnRF;
+	public static Item DownbeatUplink;
+	public static Item Sandcastles;
+	public static Item K2;
+	public static Item Pear;
+	public static Item ObsidianPear;
+	public static Item RokkubitoruTune;
+	public static Item desambrier;
+	public static Item Juhry;
+	public static Item GranularSalt;
+	public static Item HighwoodDoor;
+	public static Item MyconDoor;
+	public static Item StylishVisor;
+	public static Item StylishChestplate;
+	public static Item StylishShorts;
+	public static Item StylishShoes;
+	public static Item BismuthIngot;
+	public static Item MyconStrand;
+	public static Item MyconSword;
+	public static Item MyconAxe;
+	public static Item MyconPickaxe;
+	public static Item MyconShovel;
+	public static Item MyconHoe;
+	public static Item GrayGun;
+	public static Item TeaLeaf;
+	public static Item TeaBucket;
+	public static Item TeaDoor;
+	public static Item LaceAgate;
+	public static Item Clinohumite;
+	public static Item Malachite;
+	public static Item Pyrite;
+	public static Item HoursLongPastI;
+	public static Item HearthenMirror;
+	public static Item RainConch;
+	public static Item FrigidBits;
+	public static Item HoursLongPastII;
+	public static Item HoursLongPastIII;
+	public static Item HoursLongPastVI;
+	public static Item TheOneTrueBook;
+	public static Item CandyIce;
+	public static Item IceDoor;
+	public static Item GyldanSverd;
+	public static Item ObserverFur;
+
+	public static void Register() {
+		obsidianArmor0 = (new ItemArmor(90, 4, 5, 0)).setIconIndex(144).setEssValue(128).setName("Obsidian Helm");
+		obsidianArmor1 = (new ItemArmor(91, 4, 5, 1)).setIconIndex(160).setEssValue(128).setName("Obsidian Chestplate");
+		obsidianArmor2 = (new ItemArmor(92, 4, 5, 2)).setIconIndex(176).setEssValue(128).setName("Obsidian Leggings");
+		obsidianArmor3 = (new ItemArmor(93, 4, 5, 3)).setIconIndex(192).setEssValue(128).setName("Obsidian Boots");
+		obsidianSword = (new ItemSword(94, 5)).setIconIndex(145).setName("Obsidian Sword").setEssValue(128);
+		obsidianShovel = (new ItemSpade(95, 5)).setIconIndex(161).setName("Obsidian Shovel").setEssValue(128);
+		obsidianPick = (new ItemObsidianPick(96, 5)).setIconIndex(177).setName("Obsidian Pickaxe").setEssValue(128);
+		obsidianAxe = (new ItemAxe(97, 5)).setIconIndex(193).setName("Obsidian Axe").setEssValue(128);
+		obsidianHoe = (new ItemHoe(98, 5)).setIconIndex(209).setName("Obsidian Hoe").setEssValue(98);
+		obsidianIngot = (new Item(99)).setIconIndex(208).setEssValue(98).setName("Obsidian Ingot");
+		blackDye = (new Item(100)).setIconIndex(146).setName("Dye (Black)").setEssValue(8);
+		greenDye = (new Item(101)).setIconIndex(147).setName("Dye (Green)").setEssValue(8);
+		blueDye = (new Item(102)).setIconIndex(148).setName("Dye (Blue)").setEssValue(8);
+		pinkDye = (new Item(103)).setIconIndex(149).setName("Dye (Pink)").setEssValue(8);
+		fryshroom = (new ItemFood(104, 6)).setIconIndex(162).setName("Fryshroom").setEssValue(16);
+		edibleFire = (new ItemFood(105, 2)).setIconIndex(178).setName("Liquified Flame").setEssValue(1);
+		flameberge = (new ItemSwordFlameberge(106)).setIconIndex(69).setName("Flameberge").setEssValue(64);
+		BlackGlasses0 = (new ItemArmor(107, 1, 6, 0)).setIconIndex(210).setName("Sunglasses").setEssValue(32);
+		fireWoodDoor = (new ItemDoor(108, Material.wood, (BlockDoor)ExtBlocks.BlockFlameWoodDoor)).setIconIndex(179).setName("Firewood Door").setEssValue(8);
+		essence = (new Item(109)).setIconIndex(195).setName("Essence").setEssValue(1);
+		eraser = (new ItemEraser(110, Integer.MAX_VALUE)).setIconIndex(194).setName("Eraser").setEssValue(1);
+		essenceGun = (new ItemEssenceGun(111)).setIconIndex(180).setEssValue(22).setFull3D().setName("Essence Rifle");
+		HubDoor = (new ItemDoor(112, Material.iron, (BlockDoor)ExtBlocks.BlockHubDoor)).setIconIndex(44).setName("Hub Door");
+		Spear = (new ItemSpear(113)).setIconIndex(85).setEssValue(22).setFull3D().setName("Spear").setEssValue(14);
+		DownbeatUplink = (new ItemRecord(2003, "downbeat_uplink")).setIconIndex(242).setEssValue(128).setName("Record (Downbeat Uplink)");
+		Sandcastles = (new ItemRecord(2004, "sandcastles")).setIconIndex(246).setEssValue(128).setName("Record (Sandcastles)");
+		K2 = (new ItemRecord(2005, "K2")).setIconIndex(247).setEssValue(128).setName("Record (K2)");
+		Pear = (new ItemFood(114, 4)).setIconIndex(248).setName("Pear").setEssValue(2);
+		ObsidianPear = (new ItemFood(115, 42)).setIconIndex(249).setName("Obsidian Pear").setEssValue(77);
+		RokkubitoruTune = (new ItemRokkubitoruTune(2006, "RokkubitoruTune")).setIconIndex(212).setEssValue(8).setName("Rock Beetle");
+		desambrier = (new ItemRecord(2007, "desambrier")).setIconIndex(250).setEssValue(128).setName("Record (Desambrier)");
+		Juhry = (new ItemRecord(2008, "Juhry")).setIconIndex(251).setEssValue(128).setName("Record (Juhry)");
+		GyldanSverd = (new ItemRecord(2009, "GyldanSverd")).setIconIndex(243).setEssValue(128).setName("Record (Gyldan Sverd)");
+		HighwoodDoor = (new ItemDoor(116, Material.wood, (BlockDoor)ExtBlocks.HighwoodDoor)).setIconIndex(253).setName("Highwood Door").setEssValue(8);
+		MyconDoor = (new ItemDoor(117, Material.wood, (BlockDoor)ExtBlocks.MyconDoor)).setIconIndex(252).setName("Mycon Door").setEssValue(8);
+		StylishVisor = (new ItemArmor(118, 1, 7, 0)).setIconIndex(150).setEssValue(16).setName("Stylish Visor");
+		StylishChestplate = (new ItemArmor(119, 1, 7, 1)).setIconIndex(166).setEssValue(16).setName("Stylish Chestplate");
+		StylishShorts = (new ItemArmor(120, 1, 7, 2)).setIconIndex(182).setEssValue(16).setName("Stylish Shorts");
+		StylishShoes = (new ItemArmor(121, 1, 7, 3)).setIconIndex(198).setEssValue(16).setName("Stylish Shoes");
+		BismuthIngot = (new Item(122)).setIconIndex(254).setName("Bismuth Ingot").setEssValue(36);
+		MyconStrand = (new Item(123)).setIconIndex(255).setName("Mycon Strand").setEssValue(8);
+		MyconSword = (new ItemSword(124, 0)).setIconIndex(231).setName("Mycon Sword").setEssValue(16);
+		MyconShovel = (new ItemSpade(125, 0)).setIconIndex(232).setName("Mycon Shovel").setEssValue(16);
+		MyconPickaxe = (new ItemPickaxe(126, 0)).setIconIndex(233).setName("Mycon Pickaxe").setEssValue(16);
+		MyconAxe = (new ItemAxe(127, 0)).setIconIndex(234).setName("Mycon Axe").setEssValue(16);
+		MyconHoe = (new ItemHoe(128, 0)).setIconIndex(235).setName("Mycon Hoe").setEssValue(8);
+		GranularSalt = (new Item(129)).setIconIndex(211).setName("Granular Salt").setEssValue(8);
+		GrayGun = (new ItemGrayGun(130)).setIconIndex(238).setEssValue(128).setFull3D().setName("Gray Gun");
+		TeaLeaf = (new ItemFood(131, 1)).setIconIndex(79).setName("Tea Leaf").setEssValue(8);
+		TeaBucket = (new ItemFood(132, 21)).setIconIndex(78).setName("Tea Bucket").setEssValue(32);
+		TeaDoor = (new ItemDoor(133, Material.wood, (BlockDoor)ExtBlocks.TeaDoor)).setIconIndex(86).setName("Tea Door").setEssValue(16);
+		LaceAgate = (new Item(134)).setIconIndex(29).setEssValue(519).setName("Lace Agate");
+		Clinohumite = (new Item(135)).setIconIndex(13).setEssValue(815).setName("Clinohumite");
+		Malachite = (new Item(136)).setIconIndex(45).setEssValue(639).setName("Malachite");
+		Pyrite = (new Item(137)).setIconIndex(61).setEssValue(372).setName("Pyrite");
+		HoursLongPastI = (new ItemHoursLongPastI(138)).setIconIndex(224).setEssValue(64).setName("Hours Long Past I");
+		HoursLongPastII = (new ItemHoursLongPastII(144)).setIconIndex(225).setEssValue(64).setName("Hours Long Past II");
+		HoursLongPastIII = (new ItemHoursLongPastIII(145)).setIconIndex(226).setEssValue(64).setName("Hours Long Past III");
+		HoursLongPastVI = (new ItemHoursLongPastVI(146)).setIconIndex(227).setEssValue(64).setName("Hours Long Past IV");
+		TheOneTrueBook = (new ItemTheOneTrueBook(147)).setIconIndex(228).setEssValue(64).setName("The One True Book");
+		HearthenMirror = (new ItemHearthenMirror(139)).setIconIndex(89).setEssValue(128).setName("Hearthen Mirror");
+		RainConch = (new ItemRainConch(140)).setIconIndex(73).setEssValue(12).setName("Rain Conch");
+		FrigidBits = (new Item(141)).setIconIndex(105).setEssValue(7).setName("Frigid Bits");
+		CandyIce = (new ItemFood(142, 10)).setIconIndex(90).setName("Candy Ice").setEssValue(17);
+		IceDoor = (new ItemDoor(143, Material.ice, (BlockDoor)ExtBlocks.IceDoor)).setIconIndex(91).setName("Ice Door").setEssValue(8);
+		ObserverFur = (new Item(148)).setIconIndex(119).setEssValue(17).setName("Observer Fur");
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockEssenceTransformer.java
@@ -1,0 +1,12 @@
+package net.minecraft.src;
+
+public class BlockEssenceTransformer extends BlockMultiSided {
+	public BlockEssenceTransformer(int integer1, int integer2, int integer3, int integer4) {
+		super(integer1, integer2, integer3, integer4);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		entityPlayer.displayEssenceTransformerGUI();
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockRedstoneWireOld.java
@@ -1,0 +1,302 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockRedstoneWireOld extends BlockOld {
+	private boolean wiresProvidePower = true;
+
+	public BlockRedstoneWireOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.circuits);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.0625F, 1.0F);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int integer1, int integer2) {
+		return this.blockIndexInTexture + (integer2 > 0 ? 16 : 0);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return null;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 5;
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		return vg.isBlockNormalCube(integer2, integer3 - 1, integer4);
+	}
+
+	private void updateAndPropagateCurrentStrength(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockMetadata(integer2, integer3, integer4);
+		int i6 = 0;
+		this.wiresProvidePower = false;
+		boolean z7 = vg.isBlockIndirectlyGettingPowered(integer2, integer3, integer4);
+		this.wiresProvidePower = true;
+		int i8;
+		int i9;
+		int i10;
+		if(z7) {
+			i6 = 15;
+		} else {
+			for(i8 = 0; i8 < 4; ++i8) {
+				i9 = integer2;
+				i10 = integer4;
+				if(i8 == 0) {
+					i9 = integer2 - 1;
+				}
+
+				if(i8 == 1) {
+					++i9;
+				}
+
+				if(i8 == 2) {
+					i10 = integer4 - 1;
+				}
+
+				if(i8 == 3) {
+					++i10;
+				}
+
+				i6 = this.getMaxCurrentStrength(vg, i9, integer3, i10, i6);
+				if(vg.isBlockNormalCube(i9, integer3, i10) && !vg.isBlockNormalCube(integer2, integer3 + 1, integer4)) {
+					i6 = this.getMaxCurrentStrength(vg, i9, integer3 + 1, i10, i6);
+				} else if(!vg.isBlockNormalCube(i9, integer3, i10)) {
+					i6 = this.getMaxCurrentStrength(vg, i9, integer3 - 1, i10, i6);
+				}
+			}
+
+			if(i6 > 0) {
+				--i6;
+			} else {
+				i6 = 0;
+			}
+		}
+
+		if(i5 != i6) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i6);
+			vg.markBlocksDirty(integer2, integer3, integer4, integer2, integer3, integer4);
+			if(i6 > 0) {
+				--i6;
+			}
+
+			for(i8 = 0; i8 < 4; ++i8) {
+				i9 = integer2;
+				i10 = integer4;
+				int i11 = integer3 - 1;
+				if(i8 == 0) {
+					i9 = integer2 - 1;
+				}
+
+				if(i8 == 1) {
+					++i9;
+				}
+
+				if(i8 == 2) {
+					i10 = integer4 - 1;
+				}
+
+				if(i8 == 3) {
+					++i10;
+				}
+
+				if(vg.isBlockNormalCube(i9, integer3, i10)) {
+					i11 += 2;
+				}
+
+				int i12 = this.getMaxCurrentStrength(vg, i9, integer3, i10, -1);
+				if(i12 >= 0 && i12 != i6) {
+					this.updateAndPropagateCurrentStrength(vg, i9, integer3, i10);
+				}
+
+				i12 = this.getMaxCurrentStrength(vg, i9, i11, i10, -1);
+				if(i12 >= 0 && i12 != i6) {
+					this.updateAndPropagateCurrentStrength(vg, i9, i11, i10);
+				}
+			}
+
+			if(i5 == 0 || i6 == 0) {
+				vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4, this.blockID);
+				vg.notifyBlocksOfNeighborChange(integer2 - 1, integer3, integer4, this.blockID);
+				vg.notifyBlocksOfNeighborChange(integer2 + 1, integer3, integer4, this.blockID);
+				vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 - 1, this.blockID);
+				vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 + 1, this.blockID);
+				vg.notifyBlocksOfNeighborChange(integer2, integer3 - 1, integer4, this.blockID);
+				vg.notifyBlocksOfNeighborChange(integer2, integer3 + 1, integer4, this.blockID);
+			}
+		}
+
+	}
+
+	private void notifyWireNeighborsOfNeighborChange(World vg, int integer2, int integer3, int integer4) {
+		if(vg.getBlockId(integer2, integer3, integer4) == this.blockID) {
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2 - 1, integer3, integer4, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2 + 1, integer3, integer4, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 - 1, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 + 1, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3 - 1, integer4, this.blockID);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3 + 1, integer4, this.blockID);
+		}
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+		super.onBlockAdded(vg, integer2, integer3, integer4);
+		this.updateAndPropagateCurrentStrength(vg, integer2, integer3, integer4);
+		vg.notifyBlocksOfNeighborChange(integer2, integer3 + 1, integer4, this.blockID);
+		vg.notifyBlocksOfNeighborChange(integer2, integer3 - 1, integer4, this.blockID);
+		this.notifyWireNeighborsOfNeighborChange(vg, integer2 - 1, integer3, integer4);
+		this.notifyWireNeighborsOfNeighborChange(vg, integer2 + 1, integer3, integer4);
+		this.notifyWireNeighborsOfNeighborChange(vg, integer2, integer3, integer4 - 1);
+		this.notifyWireNeighborsOfNeighborChange(vg, integer2, integer3, integer4 + 1);
+		if(vg.isBlockNormalCube(integer2 - 1, integer3, integer4)) {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2 - 1, integer3 + 1, integer4);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2 - 1, integer3 - 1, integer4);
+		}
+
+		if(vg.isBlockNormalCube(integer2 + 1, integer3, integer4)) {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2 + 1, integer3 + 1, integer4);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2 + 1, integer3 - 1, integer4);
+		}
+
+		if(vg.isBlockNormalCube(integer2, integer3, integer4 - 1)) {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2, integer3 + 1, integer4 - 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2, integer3 - 1, integer4 - 1);
+		}
+
+		if(vg.isBlockNormalCube(integer2, integer3, integer4 + 1)) {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2, integer3 + 1, integer4 + 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2, integer3 - 1, integer4 + 1);
+		}
+
+	}
+
+	public void onBlockRemoval(World vg, int integer2, int integer3, int integer4) {
+		super.onBlockRemoval(vg, integer2, integer3, integer4);
+		vg.notifyBlocksOfNeighborChange(integer2, integer3 + 1, integer4, this.blockID);
+		vg.notifyBlocksOfNeighborChange(integer2, integer3 - 1, integer4, this.blockID);
+		this.updateAndPropagateCurrentStrength(vg, integer2, integer3, integer4);
+		this.notifyWireNeighborsOfNeighborChange(vg, integer2 - 1, integer3, integer4);
+		this.notifyWireNeighborsOfNeighborChange(vg, integer2 + 1, integer3, integer4);
+		this.notifyWireNeighborsOfNeighborChange(vg, integer2, integer3, integer4 - 1);
+		this.notifyWireNeighborsOfNeighborChange(vg, integer2, integer3, integer4 + 1);
+		if(vg.isBlockNormalCube(integer2 - 1, integer3, integer4)) {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2 - 1, integer3 + 1, integer4);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2 - 1, integer3 - 1, integer4);
+		}
+
+		if(vg.isBlockNormalCube(integer2 + 1, integer3, integer4)) {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2 + 1, integer3 + 1, integer4);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2 + 1, integer3 - 1, integer4);
+		}
+
+		if(vg.isBlockNormalCube(integer2, integer3, integer4 - 1)) {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2, integer3 + 1, integer4 - 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2, integer3 - 1, integer4 - 1);
+		}
+
+		if(vg.isBlockNormalCube(integer2, integer3, integer4 + 1)) {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2, integer3 + 1, integer4 + 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(vg, integer2, integer3 - 1, integer4 + 1);
+		}
+
+	}
+
+	private int getMaxCurrentStrength(World vg, int integer2, int integer3, int integer4, int integer5) {
+		if(vg.getBlockId(integer2, integer3, integer4) != this.blockID) {
+			return integer5;
+		} else {
+			int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+			return i6 > integer5 ? i6 : integer5;
+		}
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		boolean z7 = this.canPlaceBlockAt(vg, integer2, integer3, integer4);
+		if(!z7) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, i6);
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+		} else {
+			this.updateAndPropagateCurrentStrength(vg, integer2, integer3, integer4);
+		}
+
+		super.onNeighborBlockChange(vg, integer2, integer3, integer4, integer5);
+	}
+
+	public int idDropped(int integer, Random random) {
+		return Item.redstone.shiftedIndex;
+	}
+
+	public boolean isIndirectlyPoweringTo(World vg, int integer2, int integer3, int integer4, int integer5) {
+		return !this.wiresProvidePower ? false : this.isPoweringTo(vg, integer2, integer3, integer4, integer5);
+	}
+
+	public boolean isPoweringTo(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		if(!this.wiresProvidePower) {
+			return false;
+		} else if(abt.getBlockMetadata(integer2, integer3, integer4) == 0) {
+			return false;
+		} else if(integer5 == 1) {
+			return true;
+		} else {
+			boolean z6 = isPowerProviderOrWire(abt, integer2 - 1, integer3, integer4) || !abt.isBlockNormalCube(integer2 - 1, integer3, integer4) && isPowerProviderOrWire(abt, integer2 - 1, integer3 - 1, integer4);
+			boolean z7 = isPowerProviderOrWire(abt, integer2 + 1, integer3, integer4) || !abt.isBlockNormalCube(integer2 + 1, integer3, integer4) && isPowerProviderOrWire(abt, integer2 + 1, integer3 - 1, integer4);
+			boolean z8 = isPowerProviderOrWire(abt, integer2, integer3, integer4 - 1) || !abt.isBlockNormalCube(integer2, integer3, integer4 - 1) && isPowerProviderOrWire(abt, integer2, integer3 - 1, integer4 - 1);
+			boolean z9 = isPowerProviderOrWire(abt, integer2, integer3, integer4 + 1) || !abt.isBlockNormalCube(integer2, integer3, integer4 + 1) && isPowerProviderOrWire(abt, integer2, integer3 - 1, integer4 + 1);
+			if(!abt.isBlockNormalCube(integer2, integer3 + 1, integer4)) {
+				if(abt.isBlockNormalCube(integer2 - 1, integer3, integer4) && isPowerProviderOrWire(abt, integer2 - 1, integer3 + 1, integer4)) {
+					z6 = true;
+				}
+
+				if(abt.isBlockNormalCube(integer2 + 1, integer3, integer4) && isPowerProviderOrWire(abt, integer2 + 1, integer3 + 1, integer4)) {
+					z7 = true;
+				}
+
+				if(abt.isBlockNormalCube(integer2, integer3, integer4 - 1) && isPowerProviderOrWire(abt, integer2, integer3 + 1, integer4 - 1)) {
+					z8 = true;
+				}
+
+				if(abt.isBlockNormalCube(integer2, integer3, integer4 + 1) && isPowerProviderOrWire(abt, integer2, integer3 + 1, integer4 + 1)) {
+					z9 = true;
+				}
+			}
+
+			return !z8 && !z7 && !z6 && !z9 && integer5 >= 2 && integer5 <= 5 ? true : (integer5 == 2 && z8 && !z6 && !z7 ? true : (integer5 == 3 && z9 && !z6 && !z7 ? true : (integer5 == 4 && z6 && !z8 && !z9 ? true : integer5 == 5 && z7 && !z8 && !z9)));
+		}
+	}
+
+	public boolean canProvidePower() {
+		return this.wiresProvidePower;
+	}
+
+	public void randomDisplayTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(vg.getBlockMetadata(integer2, integer3, integer4) > 0) {
+			double d6 = (double)integer2 + 0.5D + ((double)random.nextFloat() - 0.5D) * 0.2D;
+			double d8 = (double)((float)integer3 + 0.0625F);
+			double d10 = (double)integer4 + 0.5D + ((double)random.nextFloat() - 0.5D) * 0.2D;
+			vg.spawnParticle("reddust", d6, d8, d10, 0.0D, 0.0D, 0.0D);
+		}
+
+	}
+
+	public static boolean isPowerProviderOrWire(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		int i4 = abt.getBlockId(integer2, integer3, integer4);
+		return i4 == BlockOld.redstoneWire.blockID ? true : (i4 == 0 ? false : BlockOld.blocksList[i4].canProvidePower());
+	}
+}
--- net/minecraft/src/BlockRedstoneOre.java
+++ net/minecraft/src/BlockRedstoneOre.java
@@ -5,98 +5,98 @@
 public class BlockRedstoneOre extends Block {
 	private boolean glowing;
 
-	public BlockRedstoneOre(int var1, int var2, boolean var3) {
-		super(var1, var2, Material.rock);
-		if(var3) {
+	public BlockRedstoneOre(int id, int blockIndex, boolean glowing) {
+		super(id, blockIndex, Material.rock);
+		if(glowing) {
 			this.setTickOnLoad(true);
 		}
 
-		this.glowing = var3;
+		this.glowing = glowing;
 	}
 
 	public int tickRate() {
 		return 30;
 	}
 
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.glow(var1, var2, var3, var4);
-		super.onBlockClicked(var1, var2, var3, var4, var5);
-	}
-
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-		this.glow(var1, var2, var3, var4);
-		super.onEntityWalking(var1, var2, var3, var4, var5);
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.glow(var1, var2, var3, var4);
-		return super.blockActivated(var1, var2, var3, var4, var5);
-	}
-
-	private void glow(World var1, int var2, int var3, int var4) {
-		this.sparkle(var1, var2, var3, var4);
+	public void onBlockClicked(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.glow(world, x, y, z);
+		super.onBlockClicked(world, x, y, z, entityPlayer);
+	}
+
+	public void onEntityWalking(World world, int x, int y, int z, Entity entity) {
+		this.glow(world, x, y, z);
+		super.onEntityWalking(world, x, y, z, entity);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.glow(world, x, y, z);
+		return super.blockActivated(world, x, y, z, entityPlayer);
+	}
+
+	private void glow(World world, int x, int y, int z) {
+		this.sparkle(world, x, y, z);
 		if(this.blockID == Block.oreRedstone.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.oreRedstoneGlowing.blockID);
+			world.setBlockWithNotify(x, y, z, Block.oreRedstoneGlowing.blockID);
 		}
 
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
+	public void updateTick(World world, int x, int y, int z, Random random) {
 		if(this.blockID == Block.oreRedstoneGlowing.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.oreRedstone.blockID);
+			world.setBlockWithNotify(x, y, z, Block.oreRedstone.blockID);
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Item.redstone.shiftedIndex;
 	}
 
-	public int quantityDropped(Random var1) {
-		return 4 + var1.nextInt(2);
+	public int quantityDropped(Random random) {
+		return 4 + random.nextInt(2);
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
 		if(this.glowing) {
-			this.sparkle(var1, var2, var3, var4);
+			this.sparkle(worldObj, x, y, z);
 		}
 
 	}
 
-	private void sparkle(World var1, int var2, int var3, int var4) {
-		Random var5 = var1.rand;
-		double var6 = 1.0D / 16.0D;
-
-		for(int var8 = 0; var8 < 6; ++var8) {
-			double var9 = (double)((float)var2 + var5.nextFloat());
-			double var11 = (double)((float)var3 + var5.nextFloat());
-			double var13 = (double)((float)var4 + var5.nextFloat());
-			if(var8 == 0 && !var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-				var11 = (double)(var3 + 1) + var6;
-			}
-
-			if(var8 == 1 && !var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-				var11 = (double)(var3 + 0) - var6;
-			}
-
-			if(var8 == 2 && !var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-				var13 = (double)(var4 + 1) + var6;
-			}
-
-			if(var8 == 3 && !var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-				var13 = (double)(var4 + 0) - var6;
-			}
-
-			if(var8 == 4 && !var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-				var9 = (double)(var2 + 1) + var6;
-			}
-
-			if(var8 == 5 && !var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-				var9 = (double)(var2 + 0) - var6;
-			}
-
-			if(var9 < (double)var2 || var9 > (double)(var2 + 1) || var11 < 0.0D || var11 > (double)(var3 + 1) || var13 < (double)var4 || var13 > (double)(var4 + 1)) {
-				var1.spawnParticle("reddust", var9, var11, var13, 0.0D, 0.0D, 0.0D);
+	private void sparkle(World world, int x, int y, int z) {
+		Random random5 = world.rand;
+		double d6 = 0.0625D;
+
+		for(int i8 = 0; i8 < 6; ++i8) {
+			double d9 = (double)((float)x + random5.nextFloat());
+			double d11 = (double)((float)y + random5.nextFloat());
+			double d13 = (double)((float)z + random5.nextFloat());
+			if(i8 == 0 && !world.isBlockNormalCube(x, y + 1, z)) {
+				d11 = (double)(y + 1) + d6;
+			}
+
+			if(i8 == 1 && !world.isBlockNormalCube(x, y - 1, z)) {
+				d11 = (double)(y + 0) - d6;
+			}
+
+			if(i8 == 2 && !world.isBlockNormalCube(x, y, z + 1)) {
+				d13 = (double)(z + 1) + d6;
+			}
+
+			if(i8 == 3 && !world.isBlockNormalCube(x, y, z - 1)) {
+				d13 = (double)(z + 0) - d6;
+			}
+
+			if(i8 == 4 && !world.isBlockNormalCube(x + 1, y, z)) {
+				d9 = (double)(x + 1) + d6;
+			}
+
+			if(i8 == 5 && !world.isBlockNormalCube(x - 1, y, z)) {
+				d9 = (double)(x + 0) - d6;
+			}
+
+			if(d9 < (double)x || d9 > (double)(x + 1) || d11 < 0.0D || d11 > (double)(y + 1) || d13 < (double)z || d13 > (double)(z + 1)) {
+				world.spawnParticle("reddust", d9, d11, d13, 0.0D, 0.0D, 0.0D);
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/BiomeInterface.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+public interface BiomeInterface {
+	double func_10184_39mJVmq3bl4dbH51995p9tocRB43bFXruO32GkxVTy54fzIxdy5dt9OeTC2A(int i1, int i2, EnumWorldGenerator enumWorldGenerator3);
+
+	double func_10186_4hoZRS129yUan88AHp1ksCfja1h93mYKfFda82Qtd8pqKm7G4bgpnYsijiMu(int i1, int i2, EnumWorldGenerator enumWorldGenerator3);
+
+	WorldGenMyconUnknownClass func_10185_7j1lR4019pucW00n7wn38afjBd62vEMB6B6SVB9068f4kyPzw4E6wI65ufr8(int i1, int i2, EnumWorldGenerator enumWorldGenerator3);
+}
--- /dev/null
+++ net/minecraft/src/WorldGenSmoothStone.java
@@ -1,0 +1,103 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenSmoothStone extends WorldGenerator {
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		byte b6 = 3;
+		int i7 = rand.nextInt(2) + 2;
+		int i8 = rand.nextInt(2) + 2;
+		int i9 = 0;
+
+		int i10;
+		int i11;
+		int i12;
+		for(i10 = x - i7 - 1; i10 <= x + i7 + 1; ++i10) {
+			for(i11 = y - 1; i11 <= y + b6 + 1; ++i11) {
+				for(i12 = z - i8 - 1; i12 <= z + i8 + 1; ++i12) {
+					world.getBlockMaterial(i10, i11, i12);
+					if((i10 == x - i7 - 1 || i10 == x + i7 + 1 || i12 == z - i8 - 1 || i12 == z + i8 + 1) && i11 == y && world.getBlockId(i10, i11, i12) == Block.waterStill.blockID || world.getBlockId(i10, i11, i12) == Block.waterMoving.blockID && world.getBlockId(i10, i11 + 1, i12) == Block.waterStill.blockID || world.getBlockId(i10, i11 + 1, i12) == Block.waterMoving.blockID) {
+						++i9;
+					}
+				}
+			}
+		}
+
+		if(i9 >= 1 && i9 <= 5 && rand.nextBoolean()) {
+			for(i10 = x - i7 - 1; i10 <= x + i7 + 1; ++i10) {
+				for(i11 = y + b6; i11 >= y - 1; --i11) {
+					for(i12 = z - i8 - 1; i12 <= z + i8 + 1; ++i12) {
+						if(i10 != x - i7 - 1 && i11 != y - 1 && i12 != z - i8 - 1 && i10 != x + i7 + 1 && i11 != y + b6 + 1 && i12 != z + i8 + 1) {
+							world.setBlockWithNotify(i10, i11, i12, Block.waterStill.blockID);
+						} else if(i11 >= 0 && world.getBlockMaterial(i10, i11 - 1, i12).isSolid()) {
+							world.setBlockWithNotify(i10, i11, i12, 1);
+						} else if(!world.getBlockMaterial(i10, i11, i12).isSolid() && (i11 == y - 1 || rand.nextInt(12) == 1)) {
+							if(i11 == y - 1 && rand.nextInt(8) != 0) {
+								world.setBlockWithNotify(i10, i11, i12, ExtBlocks.SmoothStone.blockID);
+							} else {
+								world.setBlockWithNotify(i10, i11, i12, i11 == y - 1 ? 135 : ExtBlocks.SmoothStone.blockID);
+							}
+						}
+					}
+				}
+			}
+
+			label104:
+			for(i10 = 0; i10 < 2; ++i10) {
+				for(i11 = 0; i11 < 2; ++i11) {
+					i12 = x + rand.nextInt(i7 * 2 + 1) - i7;
+					int i13 = z + rand.nextInt(i8 * 2 + 1) - i8;
+					int i14 = 0;
+					if(world.getBlockMaterial(i12 - 1, y, i13).isSolid()) {
+						++i14;
+					}
+
+					if(world.getBlockMaterial(i12 + 1, y, i13).isSolid()) {
+						++i14;
+					}
+
+					if(world.getBlockMaterial(i12, y, i13 - 1).isSolid()) {
+						++i14;
+					}
+
+					if(world.getBlockMaterial(i12, y, i13 + 1).isSolid()) {
+						++i14;
+					}
+
+					if(i14 != 1) {
+						world.setBlockWithNotify(i12, y, i13, Block.chest.blockID);
+						TileEntityChest tileEntityChest15 = (TileEntityChest)world.getBlockTileEntity(i12, y, i13);
+						int i16 = 0;
+
+						while(true) {
+							if(i16 >= 8) {
+								continue label104;
+							}
+
+							ItemStack itemStack17 = this.func_9652_3P1767ZHeU4Wg5d2gxg5gaO632158IgYY3Eed9E38t4lcl8n2wR0HgbWHwRm(rand);
+							if(itemStack17 != null) {
+								tileEntityChest15.setInventorySlotContents(rand.nextInt(tileEntityChest15.getSizeInventory()), itemStack17);
+							}
+
+							++i16;
+						}
+					}
+				}
+			}
+
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	private ItemStack func_9652_3P1767ZHeU4Wg5d2gxg5gaO632158IgYY3Eed9E38t4lcl8n2wR0HgbWHwRm(Random random) {
+		int i2 = random.nextInt(13);
+		return i2 == 0 ? new ItemStack(Item.saddle) : (i2 == 1 ? new ItemStack(Item.ingotGold, random.nextInt(4) + 2) : (i2 == 2 ? new ItemStack(ExtItems.Pear) : (i2 == 3 ? new ItemStack(ExtItems.TeaLeaf, random.nextInt(4) + 1) : (i2 == 4 ? new ItemStack(Item.gunpowder, random.nextInt(4) + 1) : (i2 == 5 ? new ItemStack(Item.paper, random.nextInt(4) + 1) : (i2 == 6 ? new ItemStack(Item.bucketEmpty) : (i2 == 7 ? new ItemStack(ExtItems.RainConch) : (i2 == 8 ? new ItemStack(ExtItems.HoursLongPastI) : (i2 == 9 ? new ItemStack(ExtItems.HoursLongPastII) : (i2 == 10 && random.nextInt(100) == 0 ? new ItemStack(ExtItems.ObsidianPear) : (i2 == 11 && random.nextInt(2) == 0 ? new ItemStack(Item.redstone, random.nextInt(8) + 2) : (i2 == 12 && random.nextInt(10) == 0 ? new ItemStack(ExtItems.Sandcastles) : (i2 == 13 && random.nextInt(10) == 0 ? new ItemStack(ExtItems.essence, 2 + random.nextInt(10)) : (i2 == 14 && random.nextInt(10) == 0 ? new ItemStack(ExtItems.GyldanSverd) : null))))))))))))));
+	}
+
+	private String func_9651_2j77md2XR7Z7c8KmpD76Zi4zEdK7ZbK1K39853W464SQQxU4UhQ90ie4kNb3(Random random) {
+		int i2 = random.nextInt(4);
+		return i2 == 0 ? "Spider" : (i2 == 1 ? "Slime" : (i2 == 2 ? "Slime" : (i2 == 3 ? "Spider" : "")));
+	}
+}
--- net/minecraft/src/EntityAnimal.java
+++ net/minecraft/src/EntityAnimal.java
@@ -1,27 +1,27 @@
 package net.minecraft.src;
 
 public abstract class EntityAnimal extends EntityCreature {
-	public EntityAnimal(World var1) {
-		super(var1);
-	}
-
-	protected float getBlockPathWeight(int var1, int var2, int var3) {
-		return this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.grass.blockID ? 10.0F : this.worldObj.getBrightness(var1, var2, var3) - 0.5F;
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	public EntityAnimal(World world) {
+		super(world);
+	}
+
+	protected float getBlockPathWeight(int x, int y, int z) {
+		return this.worldObj.getBlockId(x, y - 1, z) == Block.grass.blockID ? 10.0F : this.worldObj.getBrightness(x, y, z) - 0.5F;
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
 	}
 
 	public boolean getCanSpawnHere() {
-		int var1 = MathHelper.floor_double(this.posX);
-		int var2 = MathHelper.floor_double(this.boundingBox.minY);
-		int var3 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.grass.blockID && this.worldObj.getBlockLightValue(var1, var2, var3) > 8 && super.getCanSpawnHere();
+		int i1 = MathHelper.floor_double(this.posX);
+		int i2 = MathHelper.floor_double(this.boundingBox.minY);
+		int i3 = MathHelper.floor_double(this.posZ);
+		return this.worldObj.getBlockId(i1, i2 - 1, i3) == Block.grass.blockID && this.worldObj.getBlockLightValue(i1, i2, i3) > 8 && super.getCanSpawnHere();
 	}
 
 	public int getTalkInterval() {
--- /dev/null
+++ net/minecraft/src/GuiPlayGame.java
@@ -1,0 +1,47 @@
+package net.minecraft.src;
+
+public class GuiPlayGame extends GuiScreen {
+	GuiScreen field_8023_3bI2wMn339280f9c82WB8H54dzWbThJ33i8W4ZKCqhG22N91x4LfSxcwTR2B = null;
+
+	public GuiPlayGame(GuiScreen hr) {
+		this.field_8023_3bI2wMn339280f9c82WB8H54dzWbThJ33i8W4ZKCqhG22N91x4LfSxcwTR2B = hr;
+	}
+
+	public void initGui() {
+		this.controlList.clear();
+		this.controlList.add(new GuiButton(2, this.width / 16, this.height / 4, "Multiplayer - LAN/Online"));
+		this.controlList.add(new GuiButton(1, this.width / 16, this.height / 4 + 30, "Singleplayer - Local"));
+		this.controlList.add(new GuiButton(3, this.width / 16, this.height / 4 + 60, "Freerun"));
+		this.controlList.add(new ButtonSel(0, this.width / 16, this.height / 4 + 120, 100, 20, "Back", true));
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		this.drawDefaultBackground();
+		Gui.drawGradientRect(0, 0, this.width / 4 + 150, this.height, -1610612736, 537657372);
+		Gui.drawString(this.fontRenderer, "Play", this.width / 12, this.height / 4 - 30, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		if(button.id == 0) {
+			this.mc.displayGuiScreen(this.field_8023_3bI2wMn339280f9c82WB8H54dzWbThJ33i8W4ZKCqhG22N91x4LfSxcwTR2B);
+		}
+
+		if(button.id == 1) {
+			this.mc.displayGuiScreen(new GuiSelectWorld(this));
+		}
+
+		if(button.id == 2) {
+			this.mc.displayGuiScreen(new GuiMultiplayer(this));
+		}
+
+		if(button.id == 3) {
+			if(ThreadDownloadResources.finished) {
+				this.mc.displayGuiScreen((GuiScreen)(InputHandler.IsKeyDown(54) ? new GuiZM(this) : new GuiFreerunWorlds(this)));
+			} else {
+				this.mc.displayGuiScreen(new GuiConnectFailed("", "Downloading resources. Try again later."));
+			}
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/ExtBlocks.java
@@ -1,0 +1,337 @@
+package net.minecraft.src;
+
+public class ExtBlocks {
+	public static Block QuadWindowGlassBlock;
+	public static Block PillarBlock;
+	public static Block TileBlock;
+	public static Block TileBlock2;
+	public static Block TileBlock2NonFucked;
+	public static Block dimensionFloorBlock;
+	public static Block dimensionWallBlock;
+	public static Block dbgBlock;
+	public static Block TileBlock3;
+	public static Block TileBlock4;
+	public static Block fakeGrass;
+	public static Block AltMojangHypostasisAnemo;
+	public static Block AltMojangHypostasisAnemo2;
+	public static Block AltMojangHypostasisAnemo3;
+	public static Block BarrierBlock;
+	public static Block StairLadderBlock;
+	public static Block fakeDirt;
+	public static Block FakeRock;
+	public static Block fakeSand;
+	public static Block woolPink;
+	public static Block woolBlue;
+	public static Block field_10439_36okOZ0lLWmIIyLvl68Dl0zDQsHM3LbA607460Tyq3UNT8v5FaM5YmIiUeK3;
+	public static Block field_10471_51sZfX7O2E5ZlNH9R33tt46d39dZ35HgS0k7b9QzAO6HJn8orum3nC8iNaHG;
+	public static Block glowingFlower;
+	public static Block glowingFlowerInfBasic;
+	public static Block glowingFlowerInfGold;
+	public static Block glowingFlowerInfObsidian;
+	public static Block blueFireIdk;
+	public static Block safe;
+	public static Block woolGreen;
+	public static Block woolBlack;
+	public static Block dbg2Block;
+	public static Block saltBlock;
+	public static Block GlassMagenta;
+	public static Block GlassBlue;
+	public static Block GlassGreen;
+	public static Block GlassBlack;
+	public static Block QGlassMagenta;
+	public static Block QGlassBlue;
+	public static Block QGlassGreen;
+	public static Block QGlassBlack;
+	public static Block FireSkyWood;
+	public static Block FireSkyPlanks;
+	public static Block FireSkyLeaves;
+	public static Block LowGlowingFlower;
+	public static Block LowGlowingVine;
+	public static Block LowRiverbed;
+	public static Block LowGlowingBlock;
+	public static Block LowStone;
+	public static Block LowOreGold;
+	public static Block LowOreIron;
+	public static Block LowOreCoal;
+	public static Block LowOreDiamond;
+	public static Block LowOreGreenstone;
+	public static Block LowOreGreenstoneGlowing;
+	public static Block BlockFlameWoodDoor;
+	public static Block Limestone;
+	public static Block LimeCobblestone;
+	public static Block TutFloorBlock;
+	public static Block TutWallBlock;
+	public static Block TutGlowingBlock;
+	public static Block EssenceBlock;
+	public static Block EssenceTransformer;
+	public static Block EssenceCloner;
+	public static Block woodDouble;
+	public static Block woodSingle;
+	public static Block Heater;
+	public static Block targetBlock;
+	public static Block essenceFountain;
+	public static Block SmoothStone;
+	public static Block SmoothLimestone;
+	public static Block CrudePillar;
+	public static Block BlockHubDoor;
+	public static Block AncientWood;
+	public static Block AncientLeaves;
+	public static Block AncientRoots;
+	public static Block AncientPlanks;
+	public static Block Grass;
+	public static Block ElderBrick;
+	public static Block ElderDecoratedStone;
+	public static Block ElderSmoothStone;
+	public static Block ElderPillar;
+	public static Block EmptyBookshelf;
+	public static Block Bookshelf;
+	public static Block WireframeBlock;
+	public static Block VendingMachineHealthBoostBottom;
+	public static Block VendingMachineHealthBoostTop;
+	public static Block VendingMachineArmorBottom;
+	public static Block VendingMachineArmorTop;
+	public static Block VendingMachineDashBottom;
+	public static Block VendingMachineDashTop;
+	public static Block VendingMachineQuickReviveBottom;
+	public static Block VendingMachineQuickReviveTop;
+	public static Block Lichen;
+	public static Block LichenBricks;
+	public static Block LichenMass;
+	public static Block GoldElderBrick;
+	public static Block SkyFlameInGlass;
+	private static Block WeaponUpgrader;
+	public static Block WireframeBlock2;
+	public static Block WeaponGiverGrayGun;
+	public static Block LowFlameInGlass;
+	public static Block GoldFlameInGlass;
+	public static Block ObsidianFlameInGlass;
+	public static Block DecorativeBlock1;
+	public static Block DecorativeBlock2;
+	public static Block GoldBrick;
+	public static Block ObsidianBrick;
+	public static Block DiamondBrick;
+	public static Block IronBrick;
+	public static Block FlamewoodPillar;
+	public static Block HighwoodPillar;
+	public static Block SlateBricks;
+	public static Block SlateBeacon;
+	public static Block SlatePillar;
+	public static Block SolarPlate;
+	public static Block DenialPlate;
+	public static Block SwitchPlate;
+	public static Block LoopPlate;
+	public static Block PartPlate;
+	public static Block TrinityPlate;
+	public static Block AssociationPlate;
+	public static Block DialectPlate;
+	public static Block SyllablesPlate;
+	public static Block MirrorsPlate;
+	public static Block WifiBlock;
+	public static Block LowMycon;
+	public static Block MyconStem;
+	public static Block Fern;
+	public static Block MyconCap;
+	public static Block GlowingMyconCap;
+	public static Block SaltBricks;
+	public static Block MyconPlank;
+	public static Block HighwoodDoor;
+	public static Block MyconDoor;
+	public static Block MyconWorkbench;
+	public static Block HighwoodWorkbench;
+	public static Block FirewoodWorkbench;
+	public static Block BismuthOre;
+	public static Block BismuthBlock;
+	public static Block BismuthPillar;
+	public static Block BismuthBrick;
+	public static Block TeaBush;
+	public static Block TeaWood;
+	public static Block TeaPlank;
+	public static Block TeaDoor;
+	public static Block TeaPillar;
+	public static Block TeaWorkbench;
+	public static Block MyconPillar;
+	public static Block CoalBrick;
+	public static Block GreenstoneBrick;
+	public static Block SnowBrick;
+	public static Block Freezer;
+	public static Block WorkingFreezer;
+	public static Block LaceAgateOre;
+	public static Block ClinohumiteOre;
+	public static Block MalachiteOre;
+	public static Block PyriteOre;
+	public static Block LaceAgateBlock;
+	public static Block ClinohumiteBlock;
+	public static Block MalachiteBlock;
+	public static Block PyriteBlock;
+	public static Block GrassPathway;
+	public static Block FrigidTrunk;
+	public static Block FrigidLeaves;
+	public static Block IceDoor;
+	public static Block Hydrangea;
+
+	public static void Register() {
+		FrigidLeaves = (new BlockGlass(255, 224, Material.leaves, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setName("Frigid Leaves").setEssValue(8);
+		QuadWindowGlassBlock = (new BlockGlass(90, 145, Material.glass, false)).setHardness(0.7F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Fortified Glass").setEssValue(16);
+		PillarBlock = (new BlockPillar(91, 144, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep).setName("Pillar").setEssValue(8);
+		TileBlock = (new Block(92, 146, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Stone Tile").setEssValue(8);
+		TileBlock2 = (new Block(93, 147, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8);
+		TileBlock2NonFucked = (new BlockGlass(94, 147, Material.glass, false)).setHardness(1.5F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Tile").setEssValue(8);
+		dimensionFloorBlock = (new Block(95, 148, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Dimension Floor").setEssValue(8);
+		dimensionWallBlock = (new Block(96, 149, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Dimension Wall").setEssValue(8);
+		dbgBlock = (new Block(97, 150, Material.rock)).setHardness(0.2F).setResistance(10.0F).setStepSound(Block.soundSpecialFootstep).setPickaxeEffective(true).setName("DEBUG").setEssValue(1);
+		TileBlock3 = (new Block(98, 151, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8).setName("Blue Dimension Tile");
+		TileBlock4 = (new Block(99, 152, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8).setName("Yellow Dimension Tile");
+		fakeGrass = (new BlockMultiSided(100, 153, 154, 155)).setHardness(0.6F).setStepSound(Block.soundGrassFootstep).setName("Fake Grass").setEssValue(8);
+		AltMojangHypostasisAnemo = (new Block(101, 156, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8).setName("Blue Mojang Block");
+		AltMojangHypostasisAnemo2 = (new Block(102, 157, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8).setName("White Mojang Block");
+		AltMojangHypostasisAnemo3 = (new Block(103, 158, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8).setName("Green Mojang Block");
+		BarrierBlock = (new BlockHidable(104, 159, Material.glass, false)).setHardness(0.8F).setStepSound(Block.soundSpecialFootstep).setName("Ghost Block").func_8091_6nAmgshv12CC9DlDC27iSsr36CH5syW1ChRUHTQWG3h8BFOoZHb76nu7wbgg(true).setEssValue(8);
+		StairLadderBlock = (new BlockLadder(105, 161)).setHardness(0.4F).setStepSound(Block.soundWoodFootstep).setEssValue(8);
+		fakeDirt = (new Block(106, 162, Material.rock)).setHardness(0.6F).setResistance(10.0F).setStepSound(Block.soundGrassFootstep).setEssValue(8).setName("Fake Dirt");
+		FakeRock = (new Block(107, 163, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8).setName("Fake Stone");
+		fakeSand = (new BlockSand(108, 164)).setHardness(0.5F).setStepSound(Block.soundSandFootstep).setEssValue(8).setName("Fake Sand");
+		woolPink = (new Block(109, 165, Material.cloth)).setHardness(0.8F).setStepSound(Block.soundClothFootstep).setName("Magenta Cloth").setEssValue(16);
+		woolBlue = (new Block(110, 166, Material.cloth)).setHardness(0.8F).setStepSound(Block.soundClothFootstep).setName("Blue Cloth").setEssValue(16);
+		woolGreen = (new Block(111, 167, Material.cloth)).setHardness(0.8F).setStepSound(Block.soundClothFootstep).setName("Green Cloth").setEssValue(16);
+		woolBlack = (new Block(112, 168, Material.cloth)).setHardness(0.8F).setStepSound(Block.soundClothFootstep).setName("Black Cloth").setEssValue(16);
+		dbg2Block = (new BlockGlowing(113, 150, 1)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(Block.soundStoneFootstep).setName("DEBUG");
+		saltBlock = (new BlockMultiSided(114, 170, 169, 170)).setHardness(0.6F).setStepSound(Block.soundStoneFootstep).setName("Salt Block").setEssValue(1);
+		glowingFlower = (new BlockGlowingFlower(115, 171, 1)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(Block.soundGrassFootstep).setName("Water Lily").setEssValue(8);
+		glowingFlowerInfBasic = (new BlockGlowingFlowerInfused(117, 173, 1, 2)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(Block.soundGrassFootstep).setName("Flame-Infused Lily").setEssValue(16);
+		glowingFlowerInfGold = (new BlockGlowingFlowerInfused(118, 174, 1, 4)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(Block.soundGrassFootstep).setName("Gold-Infused Lily").setEssValue(24);
+		glowingFlowerInfObsidian = (new BlockGlowingFlowerInfused(119, 175, 1, 7)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(Block.soundGrassFootstep).setName("Obsidian-Infused Lily").setEssValue(32);
+		blueFireIdk = (new BlockGlowing(116, 172, 2)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(Block.soundStoneFootstep).setName("Celestial Flame").setEssValue(6);
+		safe = (new BlockSafe(120, 177, 176, 177)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundSpecialFootstep).setPickaxeEffective(true).setEssValue(1).setName("Safe");
+		GlassMagenta = (new BlockGlass(121, 133, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setName("Magenta Glass").setEssValue(16);
+		GlassBlue = (new BlockGlass(122, 134, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setName("Blue Glass").setEssValue(16);
+		GlassGreen = (new BlockGlass(123, 135, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setName("Green Glass").setEssValue(16);
+		GlassBlack = (new BlockGlass(124, 136, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setName("Black Glass").setEssValue(16);
+		QGlassMagenta = (new BlockGlass(125, 117, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Fortified Magenta Glass").setEssValue(24);
+		QGlassBlue = (new BlockGlass(126, 118, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Fortified Blue Glass").setEssValue(24);
+		QGlassGreen = (new BlockGlass(127, 119, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Fortified Green Glass").setEssValue(24);
+		QGlassBlack = (new BlockGlass(128, 120, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Fortified Black Glass").setEssValue(24);
+		FireSkyWood = (new Block(129, 182, Material.wood)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setName("Flamewood").setEssValue(4);
+		FireSkyPlanks = (new Block(130, 185, Material.wood)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setName("Flamewood Planks").setEssValue(8);
+		FireSkyLeaves = (new BlockLeaves(131, 183)).setHardness(0.2F).setLightOpacity(1).setStepSound(Block.soundGrassFootstep).setName("Flamewood Leaves").setEssValue(4);
+		LowGlowingFlower = (new BlockGlowingFlower(132, 181, 1)).setHardness(0.0F).setLightValue(0.7464F).setStepSound(Block.soundGrassFootstep).setName("Low Lily").setEssValue(16);
+		LowGlowingVine = (new BlockGlowingFlower(133, 186, 1)).setHardness(0.0F).setLightValue(0.8501F).setStepSound(Block.soundGrassFootstep).setName("Low Vine").setEssValue(8);
+		LowRiverbed = (new Block(134, 180, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Low Riverbed").setEssValue(4);
+		LowGlowingBlock = (new BlockGlowingCube(135, 179, 1)).setHardness(1.0F).setLightValue(0.8821F).setStepSound(Block.soundGrassFootstep).setPickaxeEffective(true).setName("Low Wart").setEssValue(11);
+		LowStone = (new BlockStone(136, 187)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Low River Stone").setEssValue(1);
+		LowOreGold = (new BlockOre(137, 188)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Low River Gold Ore").setEssValue(32);
+		LowOreIron = (new BlockOre(138, 189)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Low River Iron Ore").setEssValue(24);
+		LowOreCoal = (new BlockOre(139, 190)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Low River Coal Ore").setEssValue(16);
+		LowOreDiamond = (new BlockOre(140, 191)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Low River Diamond Ore").setEssValue(48);
+		LowOreGreenstone = (new BlockRedstoneOre(141, 192, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setEssValue(32).setName("Low River Greenstone Ore");
+		LowOreGreenstoneGlowing = (new BlockRedstoneOre(142, 192, true)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setEssValue(32).setName("Low River Greenstone Ore");
+		BlockFlameWoodDoor = (new BlockFlameWoodDoor(143, 129)).setHardness(3.0F).setStepSound(Block.soundWoodFootstep).setName("Flamewood Door").setEssValue(8);
+		LimeCobblestone = (new Block(144, 194, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8).setName("Cobbled Limestone");
+		Limestone = (new BlockStone(145, 193, LimeCobblestone.blockID)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Limestone").setEssValue(14);
+		TutFloorBlock = (new Block(146, 196, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(1).setName("Green Dimension Floor");
+		TutWallBlock = (new Block(147, 197, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(1).setName("Alternative Dimension Wall");
+		TutGlowingBlock = (new BlockGlowingCube(148, 198, 1)).setHardness(1.0F).setLightValue(0.9987F).setStepSound(Block.soundGrassFootstep).setPickaxeEffective(true).setEssValue(1).setName("Glowing Cache");
+		EssenceBlock = (new Block(149, 200, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setEssValue(9).setName("Essence Cache");
+		EssenceTransformer = (new BlockEssenceTransformer(150, 141, 142, 143)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Essence Transformer").setEssValue(32);
+		woodDouble = (new BlockWoodSlab(151, 137, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setName("Wood Slab").setEssValue(1);
+		woodSingle = (new BlockWoodSlab(152, 137, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setName("Wood Slab").setEssValue(2);
+		Heater = (new BlockFlamingCube(153, 121, 1)).setHardness(1.0F).setLightValue(0.5997F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Heater").setEssValue(32);
+		EssenceCloner = (new BlockEssenceCloner(154, 125, 126, 143)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Essence Cloner").setEssValue(32);
+		IceDoor = (new BlockIceDoor(155, 226)).setHardness(2.2F).setResistance(0.5F).setStepSound(Block.soundGlassFootstep).setName("Ice Door").setEssValue(8);
+		essenceFountain = (new BlockEssenceFountain(156, Material.rock)).setLightValue(0.5F).setLightOpacity(0).setHardness(0.5F).setResistance(0.5F).setPickaxeEffective(true).setStepSound(Block.soundStoneFootstep).setName("Essence Fountain").setEssValue(16);
+		SmoothStone = (new Block(157, 195, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Smooth Stone").setEssValue(16);
+		SmoothLimestone = (new Block(158, 201, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Smooth Limestone").setEssValue(16);
+		CrudePillar = (new Block(159, 202, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Crude Pillar").setEssValue(8);
+		Hydrangea = (new BlockGrassTall(160, 267, 269)).setHardness(0.0F).setStepSound(Block.soundGrassFootstep).setName("Hydrangea").setEssValue(2);
+		AncientWood = (new BlockMultiSided(161, 209, 208, 209, Material.wood)).setStepSound(Block.soundWoodFootstep).setHardness(5.0F).setResistance(20.0F).setName("Highwood Log").setEssValue(2);
+		AncientLeaves = (new BlockGlass(162, 211, Material.leaves, true)).setHardness(0.4F).setLightOpacity(1).setStepSound(Block.soundGrassFootstep).setName("Highwood Leaves").setEssValue(4);
+		AncientRoots = (new Block(163, 213, Material.wood)).setStepSound(Block.soundWoodFootstep).setHardness(1.6F).setResistance(20.0F).setName("Highwood Roots").setEssValue(2);
+		AncientPlanks = (new Block(164, 225, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep).setEssValue(2).setName("Highwood Planks").setEssValue(8);
+		Grass = (new BlockGrassTall(165, 111, 336)).setHardness(0.0F).setStepSound(Block.soundGrassFootstep).setEssValue(1).setName("Grass").setEssValue(1);
+		ElderDecoratedStone = (new Block(166, 14, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundElderFootstep).setPickaxeEffective(true).setName("Elder Decorated Stone").setEssValue(8);
+		ElderBrick = (new Block(167, 30, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundElderFootstep).setPickaxeEffective(true).setName("Elder Brick").setEssValue(8);
+		ElderPillar = (new Block(168, 46, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundElderFootstep).setPickaxeEffective(true).setName("Elder Pillar").setEssValue(8);
+		ElderSmoothStone = (new Block(169, 110, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundElderFootstep).setPickaxeEffective(true).setName("Elder Smooth Stone").setEssValue(8);
+		Bookshelf = (new BlockEmptyBookshelf(170, 108)).setHardness(1.5F).setStepSound(Block.soundWoodFootstep).setEssValue(1).setName("Bookshelf");
+		EmptyBookshelf = (new BlockEmptyBookshelf(171, 109)).setHardness(1.5F).setStepSound(Block.soundWoodFootstep).setEssValue(1).setName("Empty Bookshelf");
+		WireframeBlock = (new BlockWireframeBlock(173, 178, Material.iron, false)).setHardness(1.5F).setPickaxeEffective(true).setStepSound(Block.soundMetalFootstep).setEssValue(5).setName("Wireframe Block").func_8091_6nAmgshv12CC9DlDC27iSsr36CH5syW1ChRUHTQWG3h8BFOoZHb76nu7wbgg(true);
+		VendingMachineHealthBoostBottom = (new BlockVendingMachine(174, 241, 240, Material.iron, EnumVendingMachine.HealthBoost)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Health Boost)");
+		VendingMachineHealthBoostTop = (new BlockMultiSided(175, 240, 242, 240, Material.iron)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Health Boost)");
+		VendingMachineArmorBottom = (new BlockVendingMachine(176, 257, 256, Material.iron, EnumVendingMachine.Armor)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Armor)");
+		VendingMachineArmorTop = (new BlockMultiSided(177, 256, 258, 256, Material.iron)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Armor)");
+		VendingMachineDashBottom = (new BlockVendingMachine(178, 273, 272, Material.iron, EnumVendingMachine.Dash)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Dash)");
+		VendingMachineDashTop = (new BlockMultiSided(179, 272, 274, 272, Material.iron)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Dash)");
+		VendingMachineQuickReviveBottom = (new BlockVendingMachine(180, 289, 288, Material.iron, EnumVendingMachine.QuickRevive)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Quick Revive)");
+		VendingMachineQuickReviveTop = (new BlockMultiSided(181, 288, 290, 288, Material.iron)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Quick Revive)");
+		WeaponGiverGrayGun = (new BlockWeaponGiver(189, 146, 256, Material.iron)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(32767).setName("Weapon Giver (Gray Gun)");
+		Lichen = (new BlockLichen(182, 246)).setHardness(0.0F).setStepSound(Block.soundGrassFootstep).setName("Lichen").setEssValue(8);
+		LichenBricks = (new Block(183, 103, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setName("Lichen Bricks").setEssValue(16);
+		LichenMass = (new Block(184, 245, Material.grass)).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundGrassFootstep).setName("Lichen Mass").setEssValue(16);
+		GoldElderBrick = (new Block(185, 244, Material.rock)).setHardness(1.5F).setLightOpacity(0).setLightValue(0.9F).setResistance(10.0F).setStepSound(Block.soundElderFootstep).setPickaxeEffective(true).setName("Gold Elder Brick").setEssValue(32);
+		SkyFlameInGlass = (new BlockGlowingCube(186, 243, 1)).setHardness(1.0F).setLightValue(0.9885F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Sky Flame-In-Glass").setEssValue(32);
+		GoldFlameInGlass = (new BlockGlowingCube(190, 247, 1)).setHardness(1.0F).setLightValue(0.9885F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Gold Flame-In-Glass").setEssValue(32);
+		ObsidianFlameInGlass = (new BlockGlowingCube(191, 248, 1)).setHardness(1.0F).setLightValue(0.9885F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Obsidian Flame-In-Glass").setEssValue(32);
+		LowFlameInGlass = (new BlockGlowingCube(192, 249, 1)).setHardness(1.0F).setLightValue(0.9885F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Low Flame-In-Glass").setEssValue(32);
+		DecorativeBlock1 = (new Block(195, 250, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundSpecialFootstep).setName("Decorative Block (1)").setEssValue(32);
+		DecorativeBlock2 = (new Block(196, 251, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundSpecialFootstep).setName("Decorative Block (2)").setEssValue(32);
+		GoldBrick = (new Block(197, 204, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Gold Brick").setEssValue(32);
+		ObsidianBrick = (new Block(198, 236, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Obsidian Brick").setEssValue(72);
+		DiamondBrick = (new Block(199, 221, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Diamond Brick").setEssValue(64);
+		IronBrick = (new Block(200, 220, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Iron Brick").setEssValue(32);
+		FlamewoodPillar = (new Block(201, 252, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(true).setName("Flamewood Pillar").setEssValue(12);
+		HighwoodPillar = (new Block(202, 253, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(true).setName("Highwood Pillar").setEssValue(12);
+		WeaponUpgrader = (new BlockWeaponUpgrader(187, 234, 233, Material.iron)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Weapon Upgrader");
+		WireframeBlock2 = (new BlockWireframeBlock2(188, 178, Material.iron)).setHardness(2.0F).setStepSound(Block.soundMetalFootstep).setEssValue(5).setName("Wireframe Block").func_8091_6nAmgshv12CC9DlDC27iSsr36CH5syW1ChRUHTQWG3h8BFOoZHb76nu7wbgg(true);
+		SlateBricks = (new Block(203, 262, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Slate Bricks").setEssValue(4);
+		SlateBeacon = (new Block(204, 263, Material.rock)).setLightValue(1.0F).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Slate Beacon").setEssValue(8);
+		SlatePillar = (new BlockMultiSided(205, 265, 264, 265, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Slate Pillar").setEssValue(8);
+		SolarPlate = (new BlockSlatePillar(206, 62)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Solar Plate");
+		DenialPlate = (new BlockSlatePillar(207, 63)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Denial Plate");
+		SwitchPlate = (new BlockSlatePillar(208, 77)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Switch Plate");
+		LoopPlate = (new BlockSlatePillar(209, 78)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Loop Plate");
+		PartPlate = (new BlockSlatePillar(210, 79)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Part Plate");
+		TrinityPlate = (new BlockSlatePillar(211, 282)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Trinity Plate");
+		AssociationPlate = (new BlockSlatePillar(212, 283)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Association Plate");
+		DialectPlate = (new BlockSlatePillar(213, 284)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Dialect Plate");
+		SyllablesPlate = (new BlockSlatePillar(214, 285)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Syllables Plate");
+		MirrorsPlate = (new BlockSlatePillar(215, 286)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Mirrors Plate");
+		WifiBlock = new BlockWifiBlock(216);
+		LowMycon = (new BlockMultiSided(217, 295, 296, 187)).setHardness(0.6F).setStepSound(Block.soundGrassFootstep).setName("Low Mycon").setEssValue(4);
+		MyconStem = (new BlockMultiSided(218, 299, 300, 299, Material.wood)).setStepSound(Block.soundWoodFootstep).setHardness(5.0F).setResistance(20.0F).setName("Mycon Stem").setEssValue(8);
+		Fern = (new BlockLichen(219, 298)).setHardness(0.0F).setStepSound(Block.soundGrassFootstep).setEssValue(1).setName("Fern");
+		MyconCap = (new BlockMyconCap(220, 301)).setHardness(1.0F).setLightOpacity(4).setLightValue(0.0F).setStepSound(Block.soundClothFootstep).setPickaxeEffective(true).setName("Mycon Cap").setEssValue(8);
+		GlowingMyconCap = (new BlockMyconCap(221, 302)).setHardness(1.0F).setLightOpacity(4).setLightValue(0.65F).setStepSound(Block.soundClothFootstep).setPickaxeEffective(true).setName("Glowing Mycon Cap").setEssValue(8);
+		SaltBricks = (new Block(222, 303, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Salt Bricks").setEssValue(16);
+		MyconPlank = (new Block(223, 304, Material.wood)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(false).setName("Mycon Plank").setEssValue(11);
+		HighwoodDoor = (new BlockHighwoodDoor(224, 130)).setHardness(3.0F).setStepSound(Block.soundWoodFootstep).setName("Highwood Door").setEssValue(4);
+		MyconDoor = (new BlockMyconDoor(225, 132)).setHardness(3.0F).setStepSound(Block.soundWoodFootstep).setName("Mycon Door").setEssValue(8);
+		MyconWorkbench = (new BlockMyconWorkbench(226, 305, 306, 307)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(false).setName("Mycon Workbench").setEssValue(11);
+		HighwoodWorkbench = (new BlockMyconWorkbench(227, 308, 309, 310)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(false).setName("Highwood Workbench").setEssValue(11);
+		FirewoodWorkbench = (new BlockMyconWorkbench(228, 261, 277, 278)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(false).setName("Firewood Workbench").setEssValue(11);
+		BismuthOre = (new BlockOre(229, 311)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Bismuth Ore").setEssValue(24);
+		BismuthBlock = (new Block(230, 312, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Bismuth Block").setEssValue(64);
+		BismuthPillar = (new BlockMultiSided(231, 315, 313, 315)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Bismuth Pillar").setEssValue(64);
+		BismuthBrick = (new Block(232, 314, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Bismuth Brick").setEssValue(64);
+		TeaBush = (new BlockLeaves(233, 323)).setHardness(0.2F).setLightOpacity(1).setStepSound(Block.soundGrassFootstep).setName("Tea Bush");
+		TeaWood = (new BlockMultiSided(234, 326, 325, 326, Material.wood)).setStepSound(Block.soundWoodFootstep).setHardness(2.0F).setResistance(20.0F).setName("Tea Wood").setEssValue(8);
+		TeaPlank = (new Block(235, 327, Material.wood)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(false).setName("Tea Plank").setEssValue(8);
+		TeaDoor = (new BlockTeaDoor(236, 344)).setHardness(3.0F).setStepSound(Block.soundWoodFootstep).setName("Tea Door").setEssValue(8);
+		TeaPillar = (new Block(237, 329, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(true).setName("Tea Pillar").setEssValue(8);
+		TeaWorkbench = (new BlockMyconWorkbench(238, 330, 331, 332)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(false).setName("Tea Workbench").setEssValue(8);
+		MyconPillar = (new Block(239, 316, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(true).setName("Mycon Pillar").setEssValue(8);
+		CoalBrick = (new Block(240, 317, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Coal Brick").setEssValue(16);
+		GreenstoneBrick = (new Block(241, 318, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Greenstone Brick").setEssValue(32);
+		SnowBrick = (new Block(242, 230, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundPowderFootstep).setPickaxeEffective(true).setName("Snow Brick").setEssValue(16);
+		FrigidTrunk = (new BlockFrigidTrunk(254, 131)).setHardness(1.5F).setResistance(2.0F).setStepSound(Block.soundPowderFootstep).setPickaxeEffective(true).setName("Frigid Trunk").setEssValue(8);
+		Freezer = (new BlockFreezer(243, 339, false)).setHardness(3.5F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Freezer").setEssValue(64);
+		WorkingFreezer = (new BlockFreezer(244, 340, true)).setHardness(3.5F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Freezer").setEssValue(64);
+		LaceAgateOre = (new BlockOre(245, 368)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Lace Agate Ore").setEssValue(182);
+		ClinohumiteOre = (new BlockOre(246, 369)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Clinohumite Ore").setEssValue(182);
+		MalachiteOre = (new BlockOre(247, 370)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Malachite Ore").setEssValue(182);
+		PyriteOre = (new BlockOre(248, 371)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Pyrite Ore").setEssValue(182);
+		LaceAgateBlock = (new BlockGlowingCube(249, 346, Material.iron)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundMetalFootstep).func_8119_1b5dH1WWcMpF1V68H8m8EZc7fRK8e3hz5O7Wug712q7QVU8915w75pQ4IeWl(1.0F).setLightValue(0.5F).setEssValue(4671).setName("Lace Agate Block").setEssValue(256);
+		ClinohumiteBlock = (new BlockGlowingCube(250, 347, Material.iron)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundMetalFootstep).func_8119_1b5dH1WWcMpF1V68H8m8EZc7fRK8e3hz5O7Wug712q7QVU8915w75pQ4IeWl(1.0F).setLightValue(0.5F).setEssValue(7335).setName("Clinohumite Block").setEssValue(256);
+		MalachiteBlock = (new BlockGlowingCube(251, 348, Material.iron)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundMetalFootstep).func_8119_1b5dH1WWcMpF1V68H8m8EZc7fRK8e3hz5O7Wug712q7QVU8915w75pQ4IeWl(1.0F).setLightValue(0.5F).setEssValue(5751).setName("Malachite Block").setEssValue(256);
+		PyriteBlock = (new BlockGlowingCube(252, 291, Material.iron)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundMetalFootstep).func_8119_1b5dH1WWcMpF1V68H8m8EZc7fRK8e3hz5O7Wug712q7QVU8915w75pQ4IeWl(1.0F).setLightValue(0.5F).setEssValue(3348).setName("Pyrite Block").setEssValue(256);
+		GrassPathway = (new BlockMultiSided(253, 228, 229, 2)).setHardness(0.6F).setStepSound(Block.soundMetalFootstep).setName("Grass Pathway").setEssValue(4);
+	}
+}
--- /dev/null
+++ net/minecraft/src/RPacket.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public interface RPacket {
+	byte GetPacketID();
+
+	void Send(DataOutputStream dataOutputStream1) throws IOException;
+
+	void Receive(DataInputStream dataInputStream1) throws IOException;
+
+	void Respond(DataOutputStream dataOutputStream1) throws IOException;
+
+	int GetResponseSize();
+}
--- net/minecraft/src/GuiIngame.java
+++ net/minecraft/src/GuiIngame.java
@@ -2,275 +2,465 @@
 
 import java.awt.Color;
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
 public class GuiIngame extends Gui {
+	public static String field_7848_69F5OIYAc4x6RX395dAQNvnAE6gbvlYWUWFq5k519dDHt6V3lS7NcP1YaM1d = "Minecraft Alpha v1.0.16.05_20 Cypress";
 	private static RenderItem itemRenderer = new RenderItem();
 	private List chatMessageList = new ArrayList();
 	private Random rand = new Random();
-	private Minecraft mc;
+	public Minecraft mc;
 	public String testMessage = null;
 	private int updateCounter = 0;
 	private String recordPlaying = "";
 	private int recordPlayingUpFor = 0;
 	public float damageGuiPartialTime;
 	float prevVignetteBrightness = 1.0F;
+	private int lgroupX;
+	private int lgroupY;
+	public String currentArea = "";
+	public long areaTimer = 0L;
+	private static final String[] syllab = new String[]{"SIE", "LOH", "KII", "HUR", "MIS", "RUU", "VY", "KA", "TAV", "OLE", "PAH", "MUI", "MAT", "JA", "SAU", "NIN", "UD", "MU", "NGI", "BAR", "LUG", "MAH", "GIR", "AK", "USU", "ESE", "IRU", "UUN", "AMTU", "AGAS", "HI", "TOOI", "YORU", "NEN", "PON", "ONNA", "TSU", "YA", "AO", "ONI", "AN", "KO", "SHI", "YUME", "YARI", "NIM", "GYEONG", "KKOT", "ISA", "MI", "OI", "YS", "LES", "OUX", "IA", "CHA", "NIDA", "JEO", "SANA", "KOLI", "LOHI", "KAAR", "ME", "KISSA", "TEST"};
+	private boolean initedArea = false;
+	private long lastSeed;
+	public OverlayWorldEdit weditOverlay;
+	public OverlayFreerunClient freerunClientOverlay;
+	public WorldZMWaves field_7851_1TS67ssD4A76A0nkHBf7bCFP1g7xFnu6O4y60Ay1jGC5w0l4Vn7SR5Dh3vhb;
+	public OverlayPaintingTitle paintingTitleOverlay;
+	public GuiInGameUnknownClass field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R;
+	public CommandUnknownClass2 field_7852_3V14331gHzZJ4AqUqKEWsJIS3zFtZwOfTwurgWz940S8GxGT80q44941xjk8;
+	public HandlerSetCheckpoint field_7857_396h94sQK9uQ2QzF3CPHcBI8PjZcuA3l6190hgCj0ajJ4Eol6RQ1P4LMA2OO;
 
-	public GuiIngame(Minecraft var1) {
-		this.mc = var1;
+	public GuiIngame(Minecraft minecraft) {
+		this.mc = minecraft;
+		this.weditOverlay = new OverlayWorldEdit(minecraft);
+		this.freerunClientOverlay = new OverlayFreerunClient(minecraft);
+		this.field_7851_1TS67ssD4A76A0nkHBf7bCFP1g7xFnu6O4y60Ay1jGC5w0l4Vn7SR5Dh3vhb = new WorldZMWaves(minecraft);
+		this.paintingTitleOverlay = new OverlayPaintingTitle(minecraft);
+		this.field_7852_3V14331gHzZJ4AqUqKEWsJIS3zFtZwOfTwurgWz940S8GxGT80q44941xjk8 = new CommandUnknownClass2(minecraft);
+		this.field_7857_396h94sQK9uQ2QzF3CPHcBI8PjZcuA3l6190hgCj0ajJ4Eol6RQ1P4LMA2OO = new HandlerSetCheckpoint();
+		this.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R = new GuiInGameUnknownClass();
 	}
 
-	public void renderGameOverlay(float var1, boolean var2, int var3, int var4) {
-		ScaledResolution var5 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-		int var6 = var5.getScaledWidth();
-		int var7 = var5.getScaledHeight();
-		FontRenderer var8 = this.mc.fontRenderer;
-		this.mc.entityRenderer.setupOverlayRendering();
-		GL11.glEnable(GL11.GL_BLEND);
-		if(this.mc.options.fancyGraphics) {
-			this.renderVignette(this.mc.thePlayer.getBrightness(var1), var6, var7);
-		}
-
-		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/gui.png"));
-		InventoryPlayer var9 = this.mc.thePlayer.inventory;
-		this.zLevel = -90.0F;
-		this.drawTexturedModalRect(var6 / 2 - 91, var7 - 22, 0, 0, 182, 22);
-		this.drawTexturedModalRect(var6 / 2 - 91 - 1 + var9.currentItem * 20, var7 - 22 - 1, 0, 22, 24, 22);
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/icons.png"));
-		GL11.glEnable(GL11.GL_BLEND);
-		GL11.glBlendFunc(GL11.GL_ONE_MINUS_DST_COLOR, GL11.GL_ONE_MINUS_SRC_COLOR);
-		this.drawTexturedModalRect(var6 / 2 - 7, var7 / 2 - 7, 0, 0, 16, 16);
-		GL11.glDisable(GL11.GL_BLEND);
-		boolean var10 = this.mc.thePlayer.heartsLife / 3 % 2 == 1;
-		if(this.mc.thePlayer.heartsLife < 10) {
-			var10 = false;
-		}
-
-		int var11 = this.mc.thePlayer.health;
-		int var12 = this.mc.thePlayer.prevHealth;
-		this.rand.setSeed((long)(this.updateCounter * 312871));
-		int var13;
-		int var14;
-		int var15;
-		if(this.mc.playerController.shouldDrawHUD()) {
-			var13 = this.mc.thePlayer.getPlayerArmorValue();
-
-			int var16;
-			for(var14 = 0; var14 < 10; ++var14) {
-				var15 = var7 - 32;
-				if(var13 > 0) {
-					var16 = var6 / 2 + 91 - var14 * 8 - 9;
-					if(var14 * 2 + 1 < var13) {
-						this.drawTexturedModalRect(var16, var15, 34, 9, 9, 9);
-					}
-
-					if(var14 * 2 + 1 == var13) {
-						this.drawTexturedModalRect(var16, var15, 25, 9, 9, 9);
-					}
-
-					if(var14 * 2 + 1 > var13) {
-						this.drawTexturedModalRect(var16, var15, 16, 9, 9, 9);
-					}
-				}
-
-				byte var25 = 0;
-				if(var10) {
-					var25 = 1;
-				}
-
-				int var17 = var6 / 2 - 91 + var14 * 8;
-				if(var11 <= 4) {
-					var15 += this.rand.nextInt(2);
-				}
-
-				this.drawTexturedModalRect(var17, var15, 16 + var25 * 9, 0, 9, 9);
-				if(var10) {
-					if(var14 * 2 + 1 < var12) {
-						this.drawTexturedModalRect(var17, var15, 70, 0, 9, 9);
-					}
-
-					if(var14 * 2 + 1 == var12) {
-						this.drawTexturedModalRect(var17, var15, 79, 0, 9, 9);
-					}
-				}
-
-				if(var14 * 2 + 1 < var11) {
-					this.drawTexturedModalRect(var17, var15, 52, 0, 9, 9);
-				}
-
-				if(var14 * 2 + 1 == var11) {
-					this.drawTexturedModalRect(var17, var15, 61, 0, 9, 9);
-				}
+	public static String Namegen2(long long1, int integer2, int integer3) {
+		long j4 = (long)(integer2 + 392214);
+		long j6 = (long)(integer3 + 392214);
+		long j8 = j6 * 784428L + j4;
+		j8 ^= long1;
+		j8 &= 2147483647L;
+		int i10 = (int)Math.sqrt((double)(integer2 * integer2 + integer3 * integer3));
+		int i11 = 0;
+		int i12 = 3;
+
+		for(int i13 = i10; i13 / i12 > 0; i12 *= 4) {
+			++i11;
+		}
+
+		String string14 = "";
+		if(i11 > 0) {
+			for(int i15 = 0; i15 != i11; ++i15) {
+				string14 = string14 + syllab[(int)(((long)(i10 + i11 + i12) + j8 * (long)(2 + i15)) % 64L)];
 			}
 
-			if(this.mc.thePlayer.isInsideOfMaterial(Material.water)) {
-				var14 = (int)Math.ceil((double)(this.mc.thePlayer.air - 2) * 10.0D / 300.0D);
-				var15 = (int)Math.ceil((double)this.mc.thePlayer.air * 10.0D / 300.0D) - var14;
-
-				for(var16 = 0; var16 < var14 + var15; ++var16) {
-					if(var16 < var14) {
-						this.drawTexturedModalRect(var6 / 2 - 91 + var16 * 8, var7 - 32 - 9, 16, 18, 9, 9);
+			string14 = string14 + "-";
+		}
+
+		string14 = string14 + syllab[(int)((j8 * 2L + (long)i10) % 64L)];
+		string14 = string14 + syllab[(int)((j8 * 3L + (long)i10) % 64L)];
+		string14 = string14 + syllab[(int)((j8 * 4L + (long)i10) % 64L)];
+		return string14;
+	}
+
+	public void ResetNamegen() {
+		this.lgroupX = (int)(this.mc.thePlayer.posX / 32.0D);
+		this.lgroupY = (int)(this.mc.thePlayer.posZ / 32.0D);
+		this.lastSeed = this.mc.theWorld.randomSeed;
+		this.initedArea = true;
+		this.currentArea = Namegen2(this.lastSeed, this.lgroupX, this.lgroupY);
+		ExtLogger.i("Name at " + (int)this.mc.thePlayer.posX + " " + (int)this.mc.thePlayer.posZ + ": " + this.currentArea);
+		this.areaTimer = System.currentTimeMillis();
+	}
+
+	public boolean NamegenNeedsReset() {
+		int i1 = (int)(this.mc.thePlayer.posX / 32.0D);
+		int i2 = (int)(this.mc.thePlayer.posZ / 32.0D);
+		return !this.initedArea || this.lastSeed != this.mc.theWorld.randomSeed || i1 != this.lgroupX || i2 != this.lgroupY;
+	}
+
+	public void renderGameOverlay(float renderPartialTick, boolean hasScreen, int width, int height) {
+		if(!InputHandler.IsKeyDown(59)) {
+			ScaledResolution scaledResolution5 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+			int i6 = scaledResolution5.getScaledWidth();
+			int i7 = scaledResolution5.getScaledHeight();
+			FontRenderer fontRenderer8 = this.mc.fontRenderer;
+			this.mc.entityRenderer.setupOverlayRendering();
+			if(!ScreenDebugMenu.dbg_conf_hideUI) {
+				GL11.glEnable(GL11.GL_BLEND);
+				if(this.mc.options.fancyGraphics == 1) {
+					this.renderVignette(this.mc.thePlayer.getBrightness(renderPartialTick), i6, i7);
+				}
+
+				ItemStack itemStack9 = this.mc.thePlayer.inventory.armorItemInSlot(3);
+				if(itemStack9 != null && itemStack9.getItem() instanceof ItemArmor && ((ItemArmor)itemStack9.getItem()).renderIndex == 6) {
+					GL11.glDisable(GL11.GL_DEPTH_TEST);
+					GL11.glDepthMask(false);
+					GL11.glBlendFunc(GL11.GL_ZERO, GL11.GL_ONE_MINUS_SRC_COLOR);
+					Gui.drawGradientRect(0, 0, i6, i7, -1602191232, -1608507360);
+					GL11.glDepthMask(true);
+					GL11.glEnable(GL11.GL_DEPTH_TEST);
+				}
+
+				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/gui.png"));
+				InventoryPlayer inventoryPlayer10 = this.mc.thePlayer.inventory;
+				this.zLevel = -90.0F;
+				int i12;
+				if(this.mc.playerController instanceof PlayerControllerZombieMode) {
+					int i11 = i6 / 12 * 11 - 91;
+					i12 = i7 - 32 - 3;
+					this.drawTexturedModalRect(i11, i12, 0, 0, 22, 22);
+					this.drawTexturedModalRect(i11 + 22, i12, 162, 0, 22, 22);
+					this.drawTexturedModalRect(i11 + inventoryPlayer10.currentItem * 20 - 1, i12 - 1, 0, 22, 24, 24);
+				} else {
+					this.drawTexturedModalRect(i6 / 2 - 91, i7 - 22, 0, 0, 182, 22);
+					this.drawTexturedModalRect(i6 / 2 - 91 - 1 + inventoryPlayer10.currentItem * 20, i7 - 22 - 1, 0, 22, 24, 22);
+				}
+
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/icons.png"));
+				GL11.glEnable(GL11.GL_BLEND);
+				GL11.glBlendFunc(GL11.GL_ONE_MINUS_DST_COLOR, GL11.GL_ONE_MINUS_SRC_COLOR);
+				this.drawTexturedModalRect(i6 / 2 - 7, i7 / 2 - 7, 0, 0, 16, 16);
+				GL11.glDisable(GL11.GL_BLEND);
+				boolean z27 = this.mc.thePlayer.heartsLife / 3 % 2 == 1;
+				if(this.mc.thePlayer.heartsLife < 10) {
+					z27 = false;
+				}
+
+				i12 = this.mc.thePlayer.health;
+				int i13 = this.mc.thePlayer.prevHealth;
+				this.rand.setSeed((long)(this.updateCounter * 312871));
+				int i14;
+				int i15;
+				int i16;
+				int i17;
+				int i19;
+				if(this.mc.playerController.shouldDrawHUD()) {
+					i14 = this.mc.thePlayer.getPlayerArmorValue();
+					i17 = i6 / 2 + 19;
+					int i18 = i7 - (this.mc.options.difficulty == 4 ? 32 : 41);
+
+					int i21;
+					for(i19 = 0; i19 != 4; ++i19) {
+						ItemStack itemStack20 = this.mc.thePlayer.inventory.armorItemInSlot(i19);
+						if(itemStack20 != null && itemStack20.getItem() instanceof ItemArmor) {
+							i21 = itemStack20.getMaxDamage();
+							int i22 = i21 - itemStack20.itemDmg;
+							float f23 = (float)i22 / (float)i21;
+							this.drawTexturedModalRect(i17 + 18 * i19, i18, 52, 9, 9, 9);
+							this.drawTexturedModalRect(i17 + 9 + 18 * i19, i18, 52, 9, 9, 9);
+							if(f23 >= 0.75F) {
+								this.drawTexturedModalRect(i17 + 18 * i19, i18, 88, 9, 9, 9);
+								this.drawTexturedModalRect(i17 + 9 + 18 * i19, i18, 88, 9, 9, 9);
+							} else if(f23 >= 0.5F) {
+								this.drawTexturedModalRect(i17 + 18 * i19, i18, 97, 9, 9, 9);
+								this.drawTexturedModalRect(i17 + 9 + 18 * i19, i18, 88, 9, 9, 9);
+							} else if(f23 >= 0.25F) {
+								this.drawTexturedModalRect(i17 + 9 + 18 * i19, i18, 88, 9, 9, 9);
+							} else {
+								this.drawTexturedModalRect(i17 + 9 + 18 * i19, i18, 97, 9, 9, 9);
+							}
+						}
+					}
+
+					int i31;
+					if(this.mc.thePlayer.dashTimer != 0) {
+						Gui.drawGradientRect(i6 / 2 - 50 - 1, i7 - 90 - 1, i6 / 2 - 50 + 100 + 1, i7 - 90 + 5 + 1, -14671840, 0xFF000000);
+						i19 = this.mc.thePlayer.dashTimer;
+						i31 = -3584;
+						i21 = -13893888;
+						if(i19 < 15) {
+							i31 = -16735489;
+							i21 = -16759637;
+						}
+
+						Gui.drawGradientRect(i6 / 2 - 50, i7 - 90, i6 / 2 - 50 + (int)(100.0F * (1.0F - (float)i19 / 30.0F)), i7 - 90 + 5, i31, i21);
+					}
+
+					if(ExtEvents.bossfightInProgress) {
+						Gui.drawGradientRect(i6 / 2 - 150 - 1, 59, i6 / 2 - 150 + 301, 66, -14671840, 0xFF000000);
+						Gui.drawGradientRect(i6 / 2 - 150, 60, i6 / 2 - 150 + (int)(300.0F * ((float)ExtEvents.bossRef.health / (float)ExtEvents.bossRef.maxHP)), 65, -3070185, -786683);
+						fontRenderer8.drawStringWithShadow(ExtEvents.bossname, i6 / 2 - 150 - 1, 65, 0xFFFFFF);
+						GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/icons.png"));
+					}
+
+					if(this.mc.options.difficulty == 4) {
+						if(this.mc.thePlayer.health != 0) {
+							i19 = i6 / 2 - 91;
+							i31 = i7 - 32;
+							this.drawTexturedModalRect(i19, i31, 0, 16, 9, 9);
+						}
 					} else {
-						this.drawTexturedModalRect(var6 / 2 - 91 + var16 * 8, var7 - 32 - 9, 25, 18, 9, 9);
-					}
-				}
-			}
-		}
-
-		GL11.glDisable(GL11.GL_BLEND);
-		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-		GL11.glPushMatrix();
-		GL11.glRotatef(180.0F, 1.0F, 0.0F, 0.0F);
-		RenderHelper.enableStandardItemLighting();
-		GL11.glPopMatrix();
-
-		for(var13 = 0; var13 < 9; ++var13) {
-			var14 = var6 / 2 - 90 + var13 * 20 + 2;
-			var15 = var7 - 16 - 3;
-			this.renderInventorySlot(var13, var14, var15, var1);
-		}
-
-		RenderHelper.disableStandardItemLighting();
-		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
-		String var21;
-		if(Keyboard.isKeyDown(Keyboard.KEY_F3)) {
-			var8.drawStringWithShadow("Minecraft Alpha v1.1.2_01 (" + this.mc.debug + ")", 2, 2, 16777215);
-			var8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 12, 16777215);
-			var8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 22, 16777215);
-			var8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 32, 16777215);
-			long var22 = Runtime.getRuntime().maxMemory();
-			long var27 = Runtime.getRuntime().totalMemory();
-			long var28 = Runtime.getRuntime().freeMemory();
-			long var19 = var27 - var28;
-			var21 = "Used memory: " + var19 * 100L / var22 + "% (" + var19 / 1024L / 1024L + "MB) of " + var22 / 1024L / 1024L + "MB";
-			this.drawString(var8, var21, var6 - var8.getStringWidth(var21) - 2, 2, 14737632);
-			var21 = "Allocated memory: " + var27 * 100L / var22 + "% (" + var27 / 1024L / 1024L + "MB)";
-			this.drawString(var8, var21, var6 - var8.getStringWidth(var21) - 2, 12, 14737632);
-		} else {
-			var8.drawStringWithShadow("Minecraft Alpha v1.1.2_01", 2, 2, 16777215);
-		}
-
-		if(this.recordPlayingUpFor > 0) {
-			float var23 = (float)this.recordPlayingUpFor - var1;
-			var14 = (int)(var23 * 256.0F / 20.0F);
-			if(var14 > 255) {
-				var14 = 255;
-			}
-
-			if(var14 > 0) {
-				GL11.glPushMatrix();
-				GL11.glTranslatef((float)(var6 / 2), (float)(var7 - 48), 0.0F);
+						for(i15 = 0; i15 < 10; ++i15) {
+							i16 = i7 - 32;
+							if(i14 > 0) {
+								i19 = i6 / 2 + 91 - i15 * 8 - 9;
+								if(i15 * 2 + 1 < i14) {
+									this.drawTexturedModalRect(i19, i16, 34, 9, 9, 9);
+								}
+
+								if(i15 * 2 + 1 == i14) {
+									this.drawTexturedModalRect(i19, i16, 25, 9, 9, 9);
+								}
+
+								if(i15 * 2 + 1 > i14) {
+									this.drawTexturedModalRect(i19, i16, 16, 9, 9, 9);
+								}
+							}
+
+							byte b32 = 0;
+							if(z27) {
+								b32 = 1;
+							}
+
+							i31 = i6 / 2 - 91 + i15 * 8;
+							if(this.mc.playerController instanceof PlayerControllerZombieMode) {
+								i31 += 45;
+							}
+
+							if(i12 <= 4) {
+								i16 += this.rand.nextInt(2);
+							}
+
+							this.drawTexturedModalRect(i31, i16, 16 + b32 * 9, 0, 9, 9);
+							if(z27) {
+								if(i15 * 2 + 1 < i13) {
+									this.drawTexturedModalRect(i31, i16, 70, 0, 9, 9);
+								}
+
+								if(i15 * 2 + 1 == i13) {
+									this.drawTexturedModalRect(i31, i16, 79, 0, 9, 9);
+								}
+							}
+
+							if(i15 * 2 + 1 < i12) {
+								this.drawTexturedModalRect(i31, i16, 52, 0, 9, 9);
+							}
+
+							if(i15 * 2 + 1 == i12) {
+								this.drawTexturedModalRect(i31, i16, 61, 0, 9, 9);
+							}
+						}
+					}
+
+					if(this.mc.thePlayer.isInsideOfMaterial(Material.water)) {
+						i15 = (int)Math.ceil((double)(this.mc.thePlayer.air - 2) * 10.0D / 300.0D);
+						i16 = (int)Math.ceil((double)this.mc.thePlayer.air * 10.0D / 300.0D) - i15;
+
+						for(i19 = 0; i19 < i15 + i16; ++i19) {
+							if(i19 < i15) {
+								this.drawTexturedModalRect(i6 / 2 - 91 + i19 * 8, i7 - 32 - 9, 16, 18, 9, 9);
+							} else {
+								this.drawTexturedModalRect(i6 / 2 - 91 + i19 * 8, i7 - 32 - 9, 25, 18, 9, 9);
+							}
+						}
+					}
+				}
+
+				GL11.glDisable(GL11.GL_BLEND);
+				GL11.glEnable(GL12.GL_RESCALE_NORMAL);
+				GL11.glPushMatrix();
+				GL11.glRotatef(180.0F, 1.0F, 0.0F, 0.0F);
+				RenderHelper.enableStandardItemLighting();
+				GL11.glPopMatrix();
+				if(!(this.mc.playerController instanceof PlayerControllerZombieMode)) {
+					for(i14 = 0; i14 < 9; ++i14) {
+						i15 = i6 / 2 - 90 + i14 * 20 + 2;
+						i16 = i7 - 16 - 3;
+						this.renderInventorySlot(i14, i15, i16, renderPartialTick);
+					}
+				} else {
+					for(i17 = 0; i17 < 2; ++i17) {
+						i15 = i6 / 12 * 11 - 90 + i17 * 20 + 2;
+						i16 = i7 - 30 - 3;
+						this.renderInventorySlot(i17, i15, i16, renderPartialTick);
+					}
+				}
+
+				this.paintingTitleOverlay.RenderOverlay(this, i6, i7);
+				this.weditOverlay.RenderOverlay(this, i6, i7);
+				if(InputHandler.mc.thePlayer instanceof EntityPlayerFreerunClient) {
+					this.freerunClientOverlay.RenderOverlay(this, i6, i7);
+				} else if(InputHandler.mc.thePlayer instanceof EntityPlayerZombieModeClient) {
+					this.field_7851_1TS67ssD4A76A0nkHBf7bCFP1g7xFnu6O4y60Ay1jGC5w0l4Vn7SR5Dh3vhb.func_11167_4U925ZN0m8Nu9TK03KYE01U693LubPBQnFZPTZ58D5mrAp59upNarhi1NZXt(this, i6, i7);
+				}
+
+				RenderHelper.disableStandardItemLighting();
+				GL11.glDisable(GL12.GL_RESCALE_NORMAL);
+				ModLoader.RunOSDHooks(this.mc);
+				String string28;
+				if(!Keyboard.isKeyDown(Keyboard.KEY_F3) && !ScreenDebugMenu.dbg_conf_showDebugInfo) {
+					fontRenderer8.drawStringWithShadow(field_7848_69F5OIYAc4x6RX395dAQNvnAE6gbvlYWUWFq5k519dDHt6V3lS7NcP1YaM1d, 2, 2, 0xFFFFFF);
+					fontRenderer8.drawStringWithShadow(this.mc.debug, 2, 12, 0xFFFFFF);
+					fontRenderer8.drawStringWithShadow("x:" + (int)this.mc.thePlayer.posX + " y:" + (int)this.mc.thePlayer.posY + " z:" + (int)this.mc.thePlayer.posZ, 2, 22, 0xFFFFFF);
+				} else {
+					fontRenderer8.drawStringWithShadow(field_7848_69F5OIYAc4x6RX395dAQNvnAE6gbvlYWUWFq5k519dDHt6V3lS7NcP1YaM1d, 2, 2, 0xFFFFFF);
+					fontRenderer8.drawStringWithShadow(this.mc.debug, 2, 12, 0xFFFFFF);
+					fontRenderer8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 22, 0xFFFFFF);
+					fontRenderer8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 32, 0xFFFFFF);
+					fontRenderer8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 42, 0xFFFFFF);
+					fontRenderer8.drawStringWithShadow("WSd:" + this.mc.theWorld.randomSeed + ";t:" + this.mc.theWorld.worldTime % 24000L, 2, 52, 0xFFFFFF);
+					fontRenderer8.drawStringWithShadow("ChnkPath:" + func_7832_69M7iV2suvW395URNhPM3ck4Y8xoQ3k90grPs3stgrlZz9xv09Jxz3Q710BH(this.mc), 2, 62, 0xFFFFFF);
+					fontRenderer8.drawStringWithShadow("LL:" + this.mc.theWorld.getBrightness((int)InputHandler.lastX, (int)InputHandler.lastY, (int)InputHandler.lastZ), 2, 72, 0xFFFFFF);
+					fontRenderer8.drawStringWithShadow("ObvT:" + this.mc.thePlayer.observerCooldown, 2, 82, 0xFFFFFF);
+					long j29 = Runtime.getRuntime().maxMemory();
+					long j35 = Runtime.getRuntime().totalMemory();
+					long j33 = Runtime.getRuntime().freeMemory();
+					long j24 = j35 - j33;
+					string28 = "Used memory: " + j24 * 100L / j29 + "% (" + j24 / 1024L / 1024L + "MB) of " + j29 / 1024L / 1024L + "MB";
+					Gui.drawString(fontRenderer8, string28, i6 - fontRenderer8.getStringWidth(string28) - 2, 2, 14737632);
+					string28 = "Allocated memory: " + j35 * 100L / j29 + "% (" + j35 / 1024L / 1024L + "MB)";
+					Gui.drawString(fontRenderer8, string28, i6 - fontRenderer8.getStringWidth(string28) - 2, 12, 14737632);
+					String string26 = InputHandler.mc.func_7236_2E4BZaw4wUzRdqs6H26gijBXYV2x4keaA5V5idykFk39ETvee94J18B7nBcD();
+					Gui.drawString(fontRenderer8, string26, i6 - fontRenderer8.getStringWidth(string26) - 2, 22, -1);
+				}
+
+				this.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11173_66q8fr6Ip48GXz9oYC8o3XM5Qm0c28Ie4sSA6167vMMhs7iZl0ACYc6sz6VL(this, i6, i7);
+				GL11.glPushMatrix();
+				float f30 = (float)Math.pow(0.5D, (double)(this.currentArea.length() / 10));
+				GL11.glScalef(1.0F + f30, 1.0F + f30, 1.0F + f30);
+				i19 = (int)(255.0F * Math.max(1.0F - (float)Math.min(System.currentTimeMillis() - this.areaTimer, 5000L) / 5000.0F, 0.3F));
+				if(i19 != 0) {
+					fontRenderer8.drawStringWithShadow(this.currentArea, (int)((float)i6 / (1.0F + f30) - (float)fontRenderer8.getStringWidth(this.currentArea) - 10.0F), 20, 0xFFFFFF + i19 * 16777216);
+				}
+
+				GL11.glPopMatrix();
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/icons.png"));
+				if(this.recordPlayingUpFor > 0) {
+					float f37 = (float)this.recordPlayingUpFor - renderPartialTick;
+					i15 = (int)(f37 * 256.0F / 20.0F);
+					if(i15 > 255) {
+						i15 = 255;
+					}
+
+					if(i15 > 0) {
+						GL11.glPushMatrix();
+						GL11.glTranslatef((float)(i6 / 2), (float)(i7 - 48), 0.0F);
+						GL11.glEnable(GL11.GL_BLEND);
+						GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+						i16 = Color.HSBtoRGB(f37 / 50.0F, 0.7F, 0.6F) & 0xFFFFFF;
+						fontRenderer8.drawString(this.recordPlaying, -fontRenderer8.getStringWidth(this.recordPlaying) / 2, -4, i16 + (i15 << 24));
+						GL11.glDisable(GL11.GL_BLEND);
+						GL11.glPopMatrix();
+					}
+				}
+
+				byte b38 = 10;
+				boolean z34 = false;
+				if(this.mc.currentScreen instanceof GuiChat) {
+					b38 = 20;
+					z34 = true;
+				}
+
 				GL11.glEnable(GL11.GL_BLEND);
 				GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-				var15 = Color.HSBtoRGB(var23 / 50.0F, 0.7F, 0.6F) & 16777215;
-				var8.drawString(this.recordPlaying, -var8.getStringWidth(this.recordPlaying) / 2, -4, var15 + (var14 << 24));
-				GL11.glDisable(GL11.GL_BLEND);
+				GL11.glDisable(GL11.GL_ALPHA_TEST);
+				GL11.glPushMatrix();
+				GL11.glTranslatef(0.0F, (float)(i7 - 48), 0.0F);
+
+				for(i16 = 0; i16 < this.chatMessageList.size() && i16 < b38; ++i16) {
+					if(((ChatLine)this.chatMessageList.get(i16)).updateCounter < 200 || z34) {
+						double d36 = (double)((ChatLine)this.chatMessageList.get(i16)).updateCounter / 200.0D;
+						d36 = 1.0D - d36;
+						d36 *= 10.0D;
+						if(d36 < 0.0D) {
+							d36 = 0.0D;
+						}
+
+						if(d36 > 1.0D) {
+							d36 = 1.0D;
+						}
+
+						d36 *= d36;
+						int i39 = (int)(255.0D * d36);
+						if(z34) {
+							i39 = 255;
+						}
+
+						if(i39 > 0) {
+							byte b25 = 2;
+							int i40 = -i16 * 9;
+							string28 = ((ChatLine)this.chatMessageList.get(i16)).message;
+							Gui.drawRect(b25, i40 - 1, b25 + 320, i40 + 8, i39 / 2 << 24);
+							GL11.glEnable(GL11.GL_BLEND);
+							fontRenderer8.drawStringWithShadow(string28, b25, i40, 0xFFFFFF + (i39 << 24));
+						}
+					}
+				}
+
 				GL11.glPopMatrix();
-			}
-		}
-
-		byte var24 = 10;
-		boolean var26 = false;
-		if(this.mc.currentScreen instanceof GuiChat) {
-			var24 = 20;
-			var26 = true;
-		}
-
-		GL11.glEnable(GL11.GL_BLEND);
-		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-		GL11.glDisable(GL11.GL_ALPHA_TEST);
-		GL11.glPushMatrix();
-		GL11.glTranslatef(0.0F, (float)(var7 - 48), 0.0F);
-
-		for(var15 = 0; var15 < this.chatMessageList.size() && var15 < var24; ++var15) {
-			if(((ChatLine)this.chatMessageList.get(var15)).updateCounter < 200 || var26) {
-				double var29 = (double)((ChatLine)this.chatMessageList.get(var15)).updateCounter / 200.0D;
-				var29 = 1.0D - var29;
-				var29 *= 10.0D;
-				if(var29 < 0.0D) {
-					var29 = 0.0D;
-				}
-
-				if(var29 > 1.0D) {
-					var29 = 1.0D;
-				}
-
-				var29 *= var29;
-				int var18 = (int)(255.0D * var29);
-				if(var26) {
-					var18 = 255;
-				}
-
-				if(var18 > 0) {
-					byte var30 = 2;
-					int var20 = -var15 * 9;
-					var21 = ((ChatLine)this.chatMessageList.get(var15)).message;
-					this.drawRect(var30, var20 - 1, var30 + 320, var20 + 8, var18 / 2 << 24);
-					GL11.glEnable(GL11.GL_BLEND);
-					var8.drawStringWithShadow(var21, var30, var20, 16777215 + (var18 << 24));
-				}
-			}
-		}
-
-		GL11.glPopMatrix();
-		GL11.glEnable(GL11.GL_ALPHA_TEST);
-		GL11.glDisable(GL11.GL_BLEND);
+				GL11.glEnable(GL11.GL_ALPHA_TEST);
+				GL11.glDisable(GL11.GL_BLEND);
+			}
+		}
 	}
 
-	private void renderVignette(float var1, int var2, int var3) {
-		var1 = 1.0F - var1;
-		if(var1 < 0.0F) {
-			var1 = 0.0F;
-		}
-
-		if(var1 > 1.0F) {
-			var1 = 1.0F;
-		}
-
-		this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(var1 - this.prevVignetteBrightness) * 0.01D);
+	private void renderVignette(float brightness, int width, int height) {
+		brightness = 1.0F - brightness;
+		if(brightness < 0.0F) {
+			brightness = 0.0F;
+		}
+
+		if(brightness > 1.0F) {
+			brightness = 1.0F;
+		}
+
+		this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(brightness - this.prevVignetteBrightness) * 0.01D);
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
 		GL11.glDepthMask(false);
 		GL11.glBlendFunc(GL11.GL_ZERO, GL11.GL_ONE_MINUS_SRC_COLOR);
 		GL11.glColor4f(this.prevVignetteBrightness, this.prevVignetteBrightness, this.prevVignetteBrightness, 1.0F);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/misc/vignette.png"));
-		Tessellator var4 = Tessellator.instance;
-		var4.startDrawingQuads();
-		var4.addVertexWithUV(0.0D, (double)var3, -90.0D, 0.0D, 1.0D);
-		var4.addVertexWithUV((double)var2, (double)var3, -90.0D, 1.0D, 1.0D);
-		var4.addVertexWithUV((double)var2, 0.0D, -90.0D, 1.0D, 0.0D);
-		var4.addVertexWithUV(0.0D, 0.0D, -90.0D, 0.0D, 0.0D);
-		var4.draw();
+		Tessellator tessellator4 = Tessellator.instance;
+		tessellator4.startDrawingQuads();
+		tessellator4.addVertexWithUV(0.0D, (double)height, -90.0D, 0.0D, 1.0D);
+		tessellator4.addVertexWithUV((double)width, (double)height, -90.0D, 1.0D, 1.0D);
+		tessellator4.addVertexWithUV((double)width, 0.0D, -90.0D, 1.0D, 0.0D);
+		tessellator4.addVertexWithUV(0.0D, 0.0D, -90.0D, 0.0D, 0.0D);
+		tessellator4.draw();
 		GL11.glDepthMask(true);
 		GL11.glEnable(GL11.GL_DEPTH_TEST);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 	}
 
-	private void renderInventorySlot(int var1, int var2, int var3, float var4) {
-		ItemStack var5 = this.mc.thePlayer.inventory.mainInventory[var1];
-		if(var5 != null) {
-			float var6 = (float)var5.animationsToGo - var4;
-			if(var6 > 0.0F) {
+	private void renderInventorySlot(int integer1, int integer2, int integer3, float renderPartialTick) {
+		ItemStack itemStack5 = this.mc.thePlayer.inventory.mainInventory[integer1];
+		if(itemStack5 != null) {
+			float f6 = (float)itemStack5.animationsToGo - renderPartialTick;
+			if(f6 > 0.0F) {
 				GL11.glPushMatrix();
-				float var7 = 1.0F + var6 / 5.0F;
-				GL11.glTranslatef((float)(var2 + 8), (float)(var3 + 12), 0.0F);
-				GL11.glScalef(1.0F / var7, (var7 + 1.0F) / 2.0F, 1.0F);
-				GL11.glTranslatef((float)(-(var2 + 8)), (float)(-(var3 + 12)), 0.0F);
+				float f7 = 1.0F + f6 / 5.0F;
+				GL11.glTranslatef((float)(integer2 + 8), (float)(integer3 + 12), 0.0F);
+				GL11.glScalef(1.0F / f7, (f7 + 1.0F) / 2.0F, 1.0F);
+				GL11.glTranslatef((float)(-(integer2 + 8)), (float)(-(integer3 + 12)), 0.0F);
 			}
 
-			itemRenderer.renderItemIntoGUI(this.mc.fontRenderer, this.mc.renderEngine, var5, var2, var3);
-			if(var6 > 0.0F) {
+			itemRenderer.renderItemIntoGUI(this.mc.fontRenderer, this.mc.renderEngine, itemStack5, integer2, integer3);
+			if(f6 > 0.0F) {
 				GL11.glPopMatrix();
 			}
 
-			itemRenderer.renderItemOverlayIntoGUI(this.mc.fontRenderer, this.mc.renderEngine, var5, var2, var3);
+			itemRenderer.renderItemOverlayIntoGUI(this.mc.fontRenderer, this.mc.renderEngine, itemStack5, integer2, integer3);
 		}
+
 	}
 
 	public void updateTick() {
@@ -280,23 +470,24 @@
 
 		++this.updateCounter;
 
-		for(int var1 = 0; var1 < this.chatMessageList.size(); ++var1) {
-			++((ChatLine)this.chatMessageList.get(var1)).updateCounter;
+		ChatLine chatLine2;
+		for(Iterator iterator1 = this.chatMessageList.iterator(); iterator1.hasNext(); ++chatLine2.updateCounter) {
+			chatLine2 = (ChatLine)iterator1.next();
 		}
 
 	}
 
-	public void addChatMessage(String var1) {
-		while(this.mc.fontRenderer.getStringWidth(var1) > 320) {
-			int var2;
-			for(var2 = 1; var2 < var1.length() && this.mc.fontRenderer.getStringWidth(var1.substring(0, var2 + 1)) <= 320; ++var2) {
+	public void addChatMessage(String message) {
+		while(this.mc.fontRenderer.getStringWidth(message) > 320) {
+			int i2;
+			for(i2 = 1; i2 < message.length() && this.mc.fontRenderer.getStringWidth(message.substring(0, i2 + 1)) <= 320; ++i2) {
 			}
 
-			this.addChatMessage(var1.substring(0, var2));
-			var1 = var1.substring(var2);
+			this.addChatMessage(message.substring(0, i2));
+			message = message.substring(i2);
 		}
 
-		this.chatMessageList.add(0, new ChatLine(var1));
+		this.chatMessageList.add(0, new ChatLine(message));
 
 		while(this.chatMessageList.size() > 50) {
 			this.chatMessageList.remove(this.chatMessageList.size() - 1);
@@ -304,8 +495,14 @@
 
 	}
 
-	public void setRecordPlayingMessage(String var1) {
-		this.recordPlaying = "Now playing: " + var1;
+	public void setRecordPlayingMessage(String record) {
+		this.recordPlaying = "Now playing: " + record;
 		this.recordPlayingUpFor = 60;
+	}
+
+	public static String func_7832_69M7iV2suvW395URNhPM3ck4Y8xoQ3k90grPs3stgrlZz9xv09Jxz3Q710BH(Minecraft minecraft) {
+		int i1 = (int)Math.floor(minecraft.thePlayer.posX / 16.0D);
+		int i2 = (int)Math.floor(minecraft.thePlayer.posZ / 16.0D);
+		return Integer.toString(i1 & 63, 36) + "/" + Integer.toString(i2 & 63, 36) + "/c." + Integer.toString(i1, 36) + "." + Integer.toString(i2, 36) + ".dat";
 	}
 }
--- net/minecraft/src/ItemHoe.java
+++ net/minecraft/src/ItemHoe.java
@@ -1,33 +1,33 @@
 package net.minecraft.src;
 
 public class ItemHoe extends Item {
-	public ItemHoe(int var1, int var2) {
-		super(var1);
+	public ItemHoe(int itemID, int maxDamage) {
+		super(itemID);
 		this.maxStackSize = 1;
-		this.maxDamage = 32 << var2;
+		this.maxDamage = 32 << maxDamage;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		int var8 = var3.getBlockId(var4, var5, var6);
-		Material var9 = var3.getBlockMaterial(var4, var5 + 1, var6);
-		if((var9.isSolid() || var8 != Block.grass.blockID) && var8 != Block.dirt.blockID) {
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		int i8 = world.getBlockId(x, y, z);
+		Material material9 = world.getBlockMaterial(x, y + 1, z);
+		if((material9.isSolid() || i8 != Block.grass.blockID) && i8 != Block.dirt.blockID) {
 			return false;
 		} else {
-			Block var10 = Block.tilledField;
-			var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var10.stepSound.getStepSound(), (var10.stepSound.getVolume() + 1.0F) / 2.0F, var10.stepSound.getPitch() * 0.8F);
-			var3.setBlockWithNotify(var4, var5, var6, var10.blockID);
-			var1.damageItem(1);
-			if(var3.rand.nextInt(8) == 0 && var8 == Block.grass.blockID) {
-				byte var11 = 1;
+			Block block10 = Block.tilledField;
+			world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), block10.stepSound.getStepSound(), (block10.stepSound.getVolume() + 1.0F) / 2.0F, block10.stepSound.getPitch() * 0.8F);
+			world.setBlockWithNotify(x, y, z, block10.blockID);
+			stack.damageItem(1);
+			if(world.rand.nextInt(8) == 0 && i8 == Block.grass.blockID) {
+				byte b11 = 1;
 
-				for(int var12 = 0; var12 < var11; ++var12) {
-					float var13 = 0.7F;
-					float var14 = var3.rand.nextFloat() * var13 + (1.0F - var13) * 0.5F;
-					float var15 = 1.2F;
-					float var16 = var3.rand.nextFloat() * var13 + (1.0F - var13) * 0.5F;
-					EntityItem var17 = new EntityItem(var3, (double)((float)var4 + var14), (double)((float)var5 + var15), (double)((float)var6 + var16), new ItemStack(Item.seeds));
-					var17.delayBeforeCanPickup = 10;
-					var3.spawnEntityInWorld(var17);
+				for(int i12 = 0; i12 < b11; ++i12) {
+					float f13 = 0.7F;
+					float f14 = world.rand.nextFloat() * f13 + (1.0F - f13) * 0.5F;
+					float f15 = 1.2F;
+					float f16 = world.rand.nextFloat() * f13 + (1.0F - f13) * 0.5F;
+					EntityItem entityItem17 = new EntityItem(world, (double)((float)x + f14), (double)((float)y + f15), (double)((float)z + f16), new ItemStack(Item.seeds));
+					entityItem17.delayBeforeCanPickup = 10;
+					world.spawnEntityInWorld(entityItem17);
 				}
 			}
 
--- /dev/null
+++ net/minecraft/src/IHouseBig.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public interface IHouseBig {
+	float func_9883_913vTZx6no47397W6wG95Q5uB254nJBZ27osnW242XcA9M93Alb1ry5oPyVe();
+
+	void func_9884_61qP7q8deV5ospnX8sW5XUMxMcV5ssOU68863452kQ9H403L5ScR3DEa98qO(World world1, int i2, int i3, WorldGenHouseBigInterior worldGenHouseBigInterior4);
+}
--- /dev/null
+++ net/minecraft/src/EntityCatbomb.java
@@ -1,0 +1,44 @@
+package net.minecraft.src;
+
+public class EntityCatbomb extends EntityLiving {
+	public EntityCatbomb(World world) {
+		super(world);
+		this.texture = "/mob/catbomb.png";
+		this.setSize(0.5F, 0.3F);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+	}
+
+	protected String getHurtSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected String getDeathSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected float getSoundVolume() {
+		return 0.4F;
+	}
+
+	protected int getDropItemId() {
+		return Item.ingotGold.shiftedIndex;
+	}
+
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		return true;
+	}
+
+	public void onLivingUpdate() {
+	}
+
+	public boolean interact(EntityPlayer entityPlayer) {
+		return false;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockVendingMachine.java
@@ -1,0 +1,72 @@
+package net.minecraft.src;
+
+import org.lwjgl.input.Keyboard;
+
+public class BlockVendingMachine extends BlockMultiSided implements BlockUnknownInterface {
+	public EnumVendingMachine field_8296_0laXNSuQ3UQKdQ272IAn7dCLu8b6ZZ974jd1paY6884ab682si10HtY85Xe5;
+
+	public BlockVendingMachine(int integer1, int integer2, int integer3, Material sx, EnumVendingMachine _1902uulnDdAkub863Ix3rm71bL5kvfdD69WJodWuN7PsaTVCd2r3PxE8x6z9wX4bI134l5oES8B2nCfn9cZ2Y3E9NgJ9EmdW) {
+		super(integer1, integer3, integer2, integer3, sx);
+		this.field_8296_0laXNSuQ3UQKdQ272IAn7dCLu8b6ZZ974jd1paY6884ab682si10HtY85Xe5 = _1902uulnDdAkub863Ix3rm71bL5kvfdD69WJodWuN7PsaTVCd2r3PxE8x6z9wX4bI134l5oES8B2nCfn9cZ2Y3E9NgJ9EmdW;
+	}
+
+	public void func_8286_2f84KM1xKjK9eBj4915qo36L405Hm9W3JZ41244r918IGv3BpYiut0G1VBGw(EntityPlayerZombieModeClient wp, XYZv ya) {
+		if(!wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.func_8685_018jLaFer93s1Ao41hTl8Co499i9rtr87X0l6Asj74ctkfz3zMwrb0xF99f5(this.field_8296_0laXNSuQ3UQKdQ272IAn7dCLu8b6ZZ974jd1paY6884ab682si10HtY85Xe5)) {
+			int i3 = wp.worldIn.func_7553_1Am4hwcD890pxiJ6yuW7PxUZYCDOP81V4cTtxj1Nx79vmSeJ3Q1x7o3bNkVz(this.field_8296_0laXNSuQ3UQKdQ272IAn7dCLu8b6ZZ974jd1paY6884ab682si10HtY85Xe5);
+			if(wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.func_8686_3fQ4Zvl6ZGZtMHz8BDhx9ci7pQP8EhDqu7Ri4ywsZ3854I2e4ev3W4B3R3iy() >= (long)i3) {
+				wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.func_8688_6DmcXOP1jZRKDasP2440t8904Ry66MRC3K00nwd8iGDlPgYii5d1f50QVICF((long)(-i3));
+				switch(EnumVendingMachineUnknownClass3.field_9819_6Ecx7VuG87M4Qa2PJ40n23uvU73przk4v42MDHptW0m8xI7Wq9zqailKsgX8[this.field_8296_0laXNSuQ3UQKdQ272IAn7dCLu8b6ZZ974jd1paY6884ab682si10HtY85Xe5.ordinal()]) {
+				case 1:
+					wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.field_8693_6a3I3v4L072y21iqK2Q4a7OJa1SIY587gNZ7teLm8k1uZzO68dY6lE8PKTBh = true;
+					break;
+				case 2:
+					wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.field_8690_9ajSfayfVo92Z68A5B2rvo13codHKhrUqqH2LRN64r7Ac066r0ki4BD2lC9w = true;
+					break;
+				case 3:
+					wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.field_8695_54O4q276dxP8y31413ENJjhqXBnFshV4S4ng8H76Bv5Y3Ma2DF7fbLk53PvO = true;
+					break;
+				case 4:
+					wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.field_8692_8s3a9ZFU1Lb4Y33KzN5HEwzzvMoj71d2qDVF231HNAJ36vP850tAYydwpyN6 = true;
+				}
+			} else {
+				InputHandler.mc.ingameGUI.addChatMessage("Not enough points!");
+			}
+		}
+
+	}
+
+	public String func_8287_3t2cX22yD5J55Zh6G33szTT1PY525wnemKTHp3jQ2r2jhLod41nugOV5rhqI(EntityPlayerZombieModeClient wp, XYZv ya) {
+		String string3 = Keyboard.getKeyName(InputHandler.mc.options.keyBindInventory.keyCode);
+		if(wp.field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.func_8685_018jLaFer93s1Ao41hTl8Co499i9rtr87X0l6Asj74ctkfz3zMwrb0xF99f5(this.field_8296_0laXNSuQ3UQKdQ272IAn7dCLu8b6ZZ974jd1paY6884ab682si10HtY85Xe5)) {
+			return "You already have this perk.";
+		} else {
+			switch(EnumVendingMachineUnknownClass3.field_9819_6Ecx7VuG87M4Qa2PJ40n23uvU73przk4v42MDHptW0m8xI7Wq9zqailKsgX8[this.field_8296_0laXNSuQ3UQKdQ272IAn7dCLu8b6ZZ974jd1paY6884ab682si10HtY85Xe5.ordinal()]) {
+			case 1:
+				return "[" + string3 + "] buy Armor [" + wp.worldIn.func_7553_1Am4hwcD890pxiJ6yuW7PxUZYCDOP81V4cTtxj1Nx79vmSeJ3Q1x7o3bNkVz(this.field_8296_0laXNSuQ3UQKdQ272IAn7dCLu8b6ZZ974jd1paY6884ab682si10HtY85Xe5) + " points]";
+			case 2:
+				return "[" + string3 + "] buy Dash [" + wp.worldIn.func_7553_1Am4hwcD890pxiJ6yuW7PxUZYCDOP81V4cTtxj1Nx79vmSeJ3Q1x7o3bNkVz(this.field_8296_0laXNSuQ3UQKdQ272IAn7dCLu8b6ZZ974jd1paY6884ab682si10HtY85Xe5) + " points]";
+			case 3:
+				return "[" + string3 + "] buy Berzerkola [" + wp.worldIn.func_7553_1Am4hwcD890pxiJ6yuW7PxUZYCDOP81V4cTtxj1Nx79vmSeJ3Q1x7o3bNkVz(this.field_8296_0laXNSuQ3UQKdQ272IAn7dCLu8b6ZZ974jd1paY6884ab682si10HtY85Xe5) + " points]";
+			case 4:
+				return "[" + string3 + "] buy Revive [" + wp.worldIn.func_7553_1Am4hwcD890pxiJ6yuW7PxUZYCDOP81V4cTtxj1Nx79vmSeJ3Q1x7o3bNkVz(this.field_8296_0laXNSuQ3UQKdQ272IAn7dCLu8b6ZZ974jd1paY6884ab682si10HtY85Xe5) + " points]";
+			default:
+				return "--";
+			}
+		}
+	}
+
+	public int func_8288_98t8S89tFW42rGL9ALNhVV7sJ5qB3j8Z10bg69FoU68e30R380Rp4L4Dn5kC() {
+		switch(EnumVendingMachineUnknownClass3.field_9819_6Ecx7VuG87M4Qa2PJ40n23uvU73przk4v42MDHptW0m8xI7Wq9zqailKsgX8[this.field_8296_0laXNSuQ3UQKdQ272IAn7dCLu8b6ZZ974jd1paY6884ab682si10HtY85Xe5.ordinal()]) {
+		case 1:
+			return 2;
+		case 2:
+			return 3;
+		case 3:
+			return 1;
+		case 4:
+			return 4;
+		default:
+			return -1;
+		}
+	}
+}
--- net/minecraft/src/TileEntitySign.java
+++ net/minecraft/src/TileEntitySign.java
@@ -4,21 +4,21 @@
 	public String[] signText = new String[]{"", "", "", ""};
 	public int lineBeingEdited = -1;
 
-	public void writeToNBT(NBTTagCompound var1) {
-		super.writeToNBT(var1);
-		var1.setString("Text1", this.signText[0]);
-		var1.setString("Text2", this.signText[1]);
-		var1.setString("Text3", this.signText[2]);
-		var1.setString("Text4", this.signText[3]);
+	public void writeToNBT(NBTTagCompound nbttagcompound) {
+		super.writeToNBT(nbttagcompound);
+		nbttagcompound.setString("Text1", this.signText[0]);
+		nbttagcompound.setString("Text2", this.signText[1]);
+		nbttagcompound.setString("Text3", this.signText[2]);
+		nbttagcompound.setString("Text4", this.signText[3]);
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		super.readFromNBT(var1);
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		super.readFromNBT(nbttagcompound);
 
-		for(int var2 = 0; var2 < 4; ++var2) {
-			this.signText[var2] = var1.getString("Text" + (var2 + 1));
-			if(this.signText[var2].length() > 15) {
-				this.signText[var2] = this.signText[var2].substring(0, 15);
+		for(int i2 = 0; i2 < 4; ++i2) {
+			this.signText[i2] = nbttagcompound.getString("Text" + (i2 + 1));
+			if(this.signText[i2].length() > 15) {
+				this.signText[i2] = this.signText[i2].substring(0, 15);
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/EntityEssenceProjectile.java
@@ -1,0 +1,245 @@
+package net.minecraft.src;
+
+import java.util.List;
+
+public class EntityEssenceProjectile extends EntityFirable {
+	private int xTile = -1;
+	private int yTile = -1;
+	private int zTile = -1;
+	private int inTile = 0;
+	private boolean inData = false;
+	public int arrowShake = 0;
+	protected EntityLiving shootingEntity;
+	private int ticksInGround;
+	private int ticksInAir = 0;
+
+	public String getTexture() {
+		return "/item/essenceprojectile.png";
+	}
+
+	public EntityEssenceProjectile(World world) {
+		super(world);
+		this.setSize(0.5F, 0.5F);
+	}
+
+	public EntityEssenceProjectile(World vg, EntityLiving zi) {
+		super(vg);
+		this.shootingEntity = zi;
+		this.setSize(0.5F, 0.5F);
+		this.setLocationAndAngles(zi.posX, zi.posY, zi.posZ, zi.rotationYaw, zi.rotationPitch);
+		this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+		this.posY -= (double)0.1F;
+		this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+		this.setPosition(this.posX, this.posY, this.posZ);
+		this.yOffset = 0.0F;
+		this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI));
+		this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI));
+		this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI));
+		this.setArrowHeading(this.motionX, this.motionY, this.motionZ, 1.5F, 1.0F);
+		vg.spawnParticle("smoke", this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
+	}
+
+	public void setArrowHeading(double double1, double double2, double double3, float float4, float float5) {
+		float f9 = MathHelper.sqrt_double(double1 * double1 + double2 * double2 + double3 * double3);
+		double1 /= (double)f9;
+		double2 /= (double)f9;
+		double3 /= (double)f9;
+		double1 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double2 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double3 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double1 *= (double)float4;
+		double2 *= (double)float4;
+		double3 *= (double)float4;
+		this.motionX = double1;
+		this.motionY = double2;
+		this.motionZ = double3;
+		float f10 = MathHelper.sqrt_double(double1 * double1 + double3 * double3);
+		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(double1, double3) * 180.0D / (double)(float)Math.PI);
+		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(double2, (double)f10) * 180.0D / (double)(float)Math.PI);
+		this.ticksInGround = 0;
+	}
+
+	public void func_8874_6Ebe0odbY2EUO3qmpxe10pDrkZf8fG40cvC3Vs9w81CDBi21RFeLS4xtOLXH(Entity xy) {
+		this.worldObj.playSoundAtEntity(this.shootingEntity, "ext.hitmarker", 1.0F, 1.0F / (this.rand.nextFloat() * 0.4F + 0.8F));
+		xy.attackEntityFrom(this.shootingEntity, 6);
+	}
+
+	public void func_8873_6eY5d2OYeYZHd8IDe8f17E868eUf523yUKL1wb6yC0uPG7astDKYTonP19ir(double double1, double double2, double double3) {
+	}
+
+	public void onUpdate() {
+		super.onUpdate();
+		if(this.arrowShake > 0) {
+			--this.arrowShake;
+		}
+
+		if(this.inData) {
+			int i1 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+			if(i1 == this.inTile) {
+				++this.ticksInGround;
+				if(this.ticksInGround == 1200) {
+					this.setEntityDead();
+				}
+
+				return;
+			}
+
+			this.inData = false;
+			this.motionX *= (double)(this.rand.nextFloat() * 0.2F);
+			this.motionY *= (double)(this.rand.nextFloat() * 0.2F);
+			this.motionZ *= (double)(this.rand.nextFloat() * 0.2F);
+			this.ticksInGround = 0;
+			this.ticksInAir = 0;
+		} else {
+			++this.ticksInAir;
+		}
+
+		Vec3D vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		Vec3D vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		MovingObjectPosition movingObjectPosition3 = this.worldObj.rayTraceBlocks(vec3D15, vec3D2);
+		vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		if(movingObjectPosition3 != null) {
+			vec3D2 = Vec3D.createVector(movingObjectPosition3.hitVec.xCoord, movingObjectPosition3.hitVec.yCoord, movingObjectPosition3.hitVec.zCoord);
+		}
+
+		Entity entity4 = null;
+		List list5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+		double d6 = 0.0D;
+
+		float f8;
+		for(int i9 = 0; i9 < list5.size(); ++i9) {
+			Entity entity10 = (Entity)list5.get(i9);
+			if(entity10.canBeCollidedWith() && (entity10 != this.shootingEntity || this.ticksInAir >= 5)) {
+				f8 = 0.3F;
+				AxisAlignedBB axisAlignedBB11 = entity10.boundingBox.expand((double)f8, (double)f8, (double)f8);
+				MovingObjectPosition movingObjectPosition12 = axisAlignedBB11.calculateIntercept(vec3D15, vec3D2);
+				if(movingObjectPosition12 != null) {
+					double d13 = vec3D15.distanceTo(movingObjectPosition12.hitVec);
+					if(d13 < d6 || d6 == 0.0D) {
+						entity4 = entity10;
+						d6 = d13;
+					}
+				}
+			}
+		}
+
+		if(entity4 != null) {
+			movingObjectPosition3 = new MovingObjectPosition(entity4);
+		}
+
+		if(movingObjectPosition3 != null && movingObjectPosition3.entityHit == null) {
+			this.xTile = movingObjectPosition3.blockX;
+			this.yTile = movingObjectPosition3.blockY;
+			this.zTile = movingObjectPosition3.blockZ;
+			this.inTile = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+			if(this.inTile == ExtBlocks.WireframeBlock2.blockID) {
+				movingObjectPosition3 = null;
+			}
+		}
+
+		float f16;
+		if(movingObjectPosition3 != null) {
+			this.xTile = movingObjectPosition3.blockX;
+			this.yTile = movingObjectPosition3.blockY;
+			this.zTile = movingObjectPosition3.blockZ;
+			this.inTile = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+			if(movingObjectPosition3.entityHit != null) {
+				if(movingObjectPosition3.entityHit instanceof EntityLiving) {
+					this.func_8874_6Ebe0odbY2EUO3qmpxe10pDrkZf8fG40cvC3Vs9w81CDBi21RFeLS4xtOLXH(movingObjectPosition3.entityHit);
+					this.setEntityDead();
+				} else {
+					this.motionX *= -0.10000000149011612D;
+					this.motionY *= -0.10000000149011612D;
+					this.motionZ *= -0.10000000149011612D;
+					this.rotationYaw += 180.0F;
+					this.prevRotationYaw += 180.0F;
+					this.ticksInAir = 0;
+				}
+			} else {
+				this.motionX = (double)((float)(movingObjectPosition3.hitVec.xCoord - this.posX));
+				this.motionY = (double)((float)(movingObjectPosition3.hitVec.yCoord - this.posY));
+				this.motionZ = (double)((float)(movingObjectPosition3.hitVec.zCoord - this.posZ));
+				f16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
+				this.posX -= this.motionX / (double)f16 * (double)0.05F;
+				this.posY -= this.motionY / (double)f16 * (double)0.05F;
+				this.posZ -= this.motionZ / (double)f16 * (double)0.05F;
+				this.func_8873_6eY5d2OYeYZHd8IDe8f17E868eUf523yUKL1wb6yC0uPG7astDKYTonP19ir((double)this.xTile, (double)this.yTile, (double)this.zTile);
+				this.inData = true;
+				this.arrowShake = 7;
+			}
+
+			this.worldObj.spawnParticle("smoke", this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
+			this.setEntityDead();
+		}
+
+		this.posX += this.motionX;
+		this.posY += this.motionY;
+		this.posZ += this.motionZ;
+		f16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)(float)Math.PI);
+
+		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)f16) * 180.0D / (double)(float)Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+		}
+
+		while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
+			this.prevRotationPitch += 360.0F;
+		}
+
+		while(this.rotationYaw - this.prevRotationYaw < -180.0F) {
+			this.prevRotationYaw -= 360.0F;
+		}
+
+		while(this.rotationYaw - this.prevRotationYaw >= 180.0F) {
+			this.prevRotationYaw += 360.0F;
+		}
+
+		this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
+		float f17 = 2.97F;
+		f8 = 0.03F;
+		if(this.handleWaterMovement()) {
+			for(int i18 = 0; i18 < 4; ++i18) {
+				float f19 = 0.25F;
+				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)f19, this.posY - this.motionY * (double)f19, this.posZ - this.motionZ * (double)f19, this.motionX, this.motionY, this.motionZ);
+			}
+
+			f17 = 0.8F;
+		}
+
+		this.motionX *= (double)f17;
+		this.motionY *= (double)f17;
+		this.motionZ *= (double)f17;
+		this.setPosition(this.posX, this.posY, this.posZ);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setShort("xTile", (short)this.xTile);
+		nbttagcompound.setShort("yTile", (short)this.yTile);
+		nbttagcompound.setShort("zTile", (short)this.zTile);
+		nbttagcompound.setByte("inTile", (byte)this.inTile);
+		nbttagcompound.setByte("shake", (byte)this.arrowShake);
+		nbttagcompound.setByte("inGround", (byte)(this.inData ? 1 : 0));
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.xTile = nbttagcompound.getShort("xTile");
+		this.yTile = nbttagcompound.getShort("yTile");
+		this.zTile = nbttagcompound.getShort("zTile");
+		this.inTile = nbttagcompound.getByte("inTile") & 255;
+		this.arrowShake = nbttagcompound.getByte("shake") & 255;
+		this.inData = nbttagcompound.getByte("inGround") == 1;
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+		if(this.inData && this.shootingEntity == entityPlayer && this.arrowShake <= 0 && entityPlayer.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
+			this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+			entityPlayer.onItemPickup(this, 1);
+			this.setEntityDead();
+		}
+
+	}
+
+	public float getShadowSize() {
+		return 0.0F;
+	}
+}
--- net/minecraft/src/BlockJukeBox.java
+++ net/minecraft/src/BlockJukeBox.java
@@ -1,44 +1,45 @@
 package net.minecraft.src;
 
 public class BlockJukeBox extends Block {
-	protected BlockJukeBox(int var1, int var2) {
-		super(var1, var2, Material.wood);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return this.blockIndexInTexture + (var1 == 1 ? 1 : 0);
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if(var6 > 0) {
-			this.ejectRecord(var1, var2, var3, var4, var6);
+	protected BlockJukeBox(int id, int blockIndex) {
+		super(id, blockIndex, Material.wood);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return this.blockIndexInTexture + (side == 1 ? 1 : 0);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if(i6 > 0) {
+			this.ejectRecord(world, x, y, z, i6);
 			return true;
 		} else {
 			return false;
 		}
 	}
 
-	public void ejectRecord(World var1, int var2, int var3, int var4, int var5) {
-		var1.playRecord((String)null, var2, var3, var4);
-		var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
-		int var6 = Item.record13.shiftedIndex + var5 - 1;
-		float var7 = 0.7F;
-		double var8 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
-		double var10 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.2D + 0.6D;
-		double var12 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
-		EntityItem var14 = new EntityItem(var1, (double)var2 + var8, (double)var3 + var10, (double)var4 + var12, new ItemStack(var6));
-		var14.delayBeforeCanPickup = 10;
-		var1.spawnEntityInWorld(var14);
+	public void ejectRecord(World world, int x, int y, int z, int integer5) {
+		world.playRecord((String)null, x, y, z);
+		world.setBlockMetadataWithNotify(x, y, z, 0);
+		int i6 = Item.record13.shiftedIndex + integer5 - 1;
+		float f7 = 0.7F;
+		double d8 = (double)(world.rand.nextFloat() * f7) + (double)(1.0F - f7) * 0.5D;
+		double d10 = (double)(world.rand.nextFloat() * f7) + (double)(1.0F - f7) * 0.2D + 0.6D;
+		double d12 = (double)(world.rand.nextFloat() * f7) + (double)(1.0F - f7) * 0.5D;
+		EntityItem entityItem14 = new EntityItem(world, (double)x + d8, (double)y + d10, (double)z + d12, new ItemStack(i6));
+		entityItem14.delayBeforeCanPickup = 10;
+		world.spawnEntityInWorld(entityItem14);
 	}
 
-	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		if(!var1.multiplayerWorld) {
-			if(var5 > 0) {
-				this.ejectRecord(var1, var2, var3, var4, var5);
+	public void dropBlockAsItemWithChance(World world, int x, int y, int z, int metadata, float chance) {
+		if(!world.multiplayerWorld) {
+			if(metadata > 0) {
+				this.ejectRecord(world, x, y, z, metadata);
 			}
 
-			super.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
+			super.dropBlockAsItemWithChance(world, x, y, z, metadata, chance);
 		}
+
 	}
 }
--- /dev/null
+++ net/minecraft/src/HubFragment4WayCross.java
@@ -1,0 +1,34 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class HubFragment4WayCross implements HubFragment {
+	public List generateAt(World vg, XYZv ya) {
+		ArrayList arrayList3 = new ArrayList();
+		Ext1605Utils.fillBlock(vg, ya, ya.add((new XYZv(5L, 0L, 5L)).rotateAroundXP(ya.v)), ExtBlocks.dimensionFloorBlock.blockID);
+		HubFragmentHallwayFwd hubFragmentHallwayFwd4 = new HubFragmentHallwayFwd();
+		if(ya.v != Direction.XP) {
+			arrayList3.add(hubFragmentHallwayFwd4.generateAt(vg, ya.add(-6L, 0L, 0L).dir(Direction.XM)).get(0));
+		}
+
+		if(ya.v != Direction.XM) {
+			arrayList3.add(hubFragmentHallwayFwd4.generateAt(vg, ya.add(6L, 0L, 0L).dir(Direction.XP)).get(0));
+		}
+
+		if(ya.v != Direction.ZM) {
+			arrayList3.add(hubFragmentHallwayFwd4.generateAt(vg, ya.add(0L, 0L, 6L).dir(Direction.ZP)).get(0));
+		}
+
+		if(ya.v != Direction.ZP) {
+			arrayList3.add(hubFragmentHallwayFwd4.generateAt(vg, ya.add((new XYZv(5L, 0L, -1L)).rotateAroundXP(ya.v)).dir(Direction.ZM)).get(0));
+		}
+
+		Ext1605Utils.fillBlock(vg, ya, ya, ExtBlocks.PillarBlock.blockID);
+		return arrayList3;
+	}
+
+	public boolean canGenerateAt(World vg, XYZv ya) {
+		return Ext1605Utils.RTForBlocks(vg, ya.add(0L, 1L, 0L), ya.v, 6);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockRedstoneOreOld.java
@@ -1,0 +1,104 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockRedstoneOreOld extends BlockOld {
+	private boolean glowing;
+
+	public BlockRedstoneOreOld(int integer1, int integer2, boolean boolean3) {
+		super(integer1, integer2, Material.rock);
+		if(boolean3) {
+			this.setTickOnLoad(true);
+		}
+
+		this.glowing = boolean3;
+	}
+
+	public int tickRate() {
+		return 30;
+	}
+
+	public void onBlockClicked(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+		this.glow(vg, integer2, integer3, integer4);
+		super.onBlockClicked(vg, integer2, integer3, integer4, gb);
+	}
+
+	public void onEntityWalking(World vg, int integer2, int integer3, int integer4, Entity xy) {
+		this.glow(vg, integer2, integer3, integer4);
+		super.onEntityWalking(vg, integer2, integer3, integer4, xy);
+	}
+
+	public boolean blockActivated(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+		this.glow(vg, integer2, integer3, integer4);
+		return super.blockActivated(vg, integer2, integer3, integer4, gb);
+	}
+
+	private void glow(World vg, int integer2, int integer3, int integer4) {
+		this.sparkle(vg, integer2, integer3, integer4);
+		if(this.blockID == BlockOld.oreRedstone.blockID) {
+			vg.setBlockWithNotify(integer2, integer3, integer4, BlockOld.oreRedstoneGlowing.blockID);
+		}
+
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(this.blockID == BlockOld.oreRedstoneGlowing.blockID) {
+			vg.setBlockWithNotify(integer2, integer3, integer4, BlockOld.oreRedstone.blockID);
+		}
+
+	}
+
+	public int idDropped(int integer, Random random) {
+		return Item.redstone.shiftedIndex;
+	}
+
+	public int quantityDropped(Random random) {
+		return 4 + random.nextInt(2);
+	}
+
+	public void randomDisplayTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(this.glowing) {
+			this.sparkle(vg, integer2, integer3, integer4);
+		}
+
+	}
+
+	private void sparkle(World vg, int integer2, int integer3, int integer4) {
+		Random random5 = vg.rand;
+		double d6 = 0.0625D;
+
+		for(int i8 = 0; i8 < 6; ++i8) {
+			double d9 = (double)((float)integer2 + random5.nextFloat());
+			double d11 = (double)((float)integer3 + random5.nextFloat());
+			double d13 = (double)((float)integer4 + random5.nextFloat());
+			if(i8 == 0 && !vg.isBlockNormalCube(integer2, integer3 + 1, integer4)) {
+				d11 = (double)(integer3 + 1) + d6;
+			}
+
+			if(i8 == 1 && !vg.isBlockNormalCube(integer2, integer3 - 1, integer4)) {
+				d11 = (double)(integer3 + 0) - d6;
+			}
+
+			if(i8 == 2 && !vg.isBlockNormalCube(integer2, integer3, integer4 + 1)) {
+				d13 = (double)(integer4 + 1) + d6;
+			}
+
+			if(i8 == 3 && !vg.isBlockNormalCube(integer2, integer3, integer4 - 1)) {
+				d13 = (double)(integer4 + 0) - d6;
+			}
+
+			if(i8 == 4 && !vg.isBlockNormalCube(integer2 + 1, integer3, integer4)) {
+				d9 = (double)(integer2 + 1) + d6;
+			}
+
+			if(i8 == 5 && !vg.isBlockNormalCube(integer2 - 1, integer3, integer4)) {
+				d9 = (double)(integer2 + 0) - d6;
+			}
+
+			if(d9 < (double)integer2 || d9 > (double)(integer2 + 1) || d11 < 0.0D || d11 > (double)(integer3 + 1) || d13 < (double)integer4 || d13 > (double)(integer4 + 1)) {
+				vg.spawnParticle("reddust", d9, d11, d13, 0.0D, 0.0D, 0.0D);
+			}
+		}
+
+	}
+}
--- net/minecraft/src/Packet21PickupSpawn.java
+++ net/minecraft/src/Packet21PickupSpawn.java
@@ -18,44 +18,44 @@
 	public Packet21PickupSpawn() {
 	}
 
-	public Packet21PickupSpawn(EntityItem var1) {
-		this.entityId = var1.entityID;
-		this.itemID = var1.item.itemID;
-		this.count = var1.item.stackSize;
-		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-		this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.rotation = (byte)((int)(var1.motionX * 128.0D));
-		this.pitch = (byte)((int)(var1.motionY * 128.0D));
-		this.roll = (byte)((int)(var1.motionZ * 128.0D));
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.itemID = var1.readShort();
-		this.count = var1.readByte();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.rotation = var1.readByte();
-		this.pitch = var1.readByte();
-		this.roll = var1.readByte();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeShort(this.itemID);
-		var1.writeByte(this.count);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.writeByte(this.rotation);
-		var1.writeByte(this.pitch);
-		var1.writeByte(this.roll);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handlePickupSpawn(this);
+	public Packet21PickupSpawn(EntityItem entityItem) {
+		this.entityId = entityItem.entityID;
+		this.itemID = entityItem.item.itemID;
+		this.count = entityItem.item.stackSize;
+		this.xPosition = MathHelper.floor_double(entityItem.posX * 32.0D);
+		this.yPosition = MathHelper.floor_double(entityItem.posY * 32.0D);
+		this.zPosition = MathHelper.floor_double(entityItem.posZ * 32.0D);
+		this.rotation = (byte)((int)(entityItem.motionX * 128.0D));
+		this.pitch = (byte)((int)(entityItem.motionY * 128.0D));
+		this.roll = (byte)((int)(entityItem.motionZ * 128.0D));
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.itemID = dataInputStream.readShort() & 65535;
+		this.count = dataInputStream.readByte();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.rotation = dataInputStream.readByte();
+		this.pitch = dataInputStream.readByte();
+		this.roll = dataInputStream.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeShort(this.itemID);
+		dataOutputStream.writeByte(this.count);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.writeByte(this.rotation);
+		dataOutputStream.writeByte(this.pitch);
+		dataOutputStream.writeByte(this.roll);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handlePickupSpawn(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/NetworkManager.java
+++ net/minecraft/src/NetworkManager.java
@@ -30,68 +30,72 @@
 	private int sendQueueByteLength = 0;
 	private int chunkDataSendCounter = 0;
 
-	public NetworkManager(Socket var1, String var2, NetHandler var3) throws IOException {
-		this.networkSocket = var1;
-		this.netHandler = var3;
-		var1.setTrafficClass(24);
-		this.socketInputStream = new DataInputStream(var1.getInputStream());
-		this.socketOutputStream = new DataOutputStream(var1.getOutputStream());
-		this.readThread = new NetworkReaderThread(this, var2 + " read thread");
-		this.writeThread = new NetworkWriterThread(this, var2 + " write thread");
+	public NetworkManager(Socket socket, String threadName, NetHandler netHandler) throws IOException {
+		this.networkSocket = socket;
+		this.netHandler = netHandler;
+		socket.setTrafficClass(24);
+		this.socketInputStream = new DataInputStream(socket.getInputStream());
+		this.socketOutputStream = new DataOutputStream(socket.getOutputStream());
+		this.readThread = new NetworkReaderThread(this, threadName + " read thread");
+		this.writeThread = new NetworkWriterThread(this, threadName + " write thread");
 		this.readThread.start();
 		this.writeThread.start();
 	}
 
-	public void addToSendQueue(Packet var1) {
+	public void addToSendQueue(Packet packet) {
 		if(!this.isServerTerminating) {
-			Object var2 = this.sendQueueLock;
-			synchronized(var2) {
-				this.sendQueueByteLength += var1.getPacketSize() + 1;
-				if(var1.isChunkDataPacket) {
-					this.chunkDataPackets.add(var1);
+			Object object2 = this.sendQueueLock;
+			Object object3 = this.sendQueueLock;
+			synchronized(this.sendQueueLock) {
+				this.sendQueueByteLength += packet.getPacketSize() + 1;
+				if(packet.isChunkDataPacket) {
+					this.chunkDataPackets.add(packet);
 				} else {
-					this.dataPackets.add(var1);
+					this.dataPackets.add(packet);
 				}
-
 			}
 		}
+
 	}
 
 	private void sendPacket() {
 		try {
-			boolean var1 = true;
-			Packet var2;
-			Object var3;
+			boolean z1 = true;
+			Packet packet2;
+			Object object3;
+			Object object4;
 			if(!this.dataPackets.isEmpty()) {
-				var1 = false;
-				var3 = this.sendQueueLock;
-				synchronized(var3) {
-					var2 = (Packet)this.dataPackets.remove(0);
-					this.sendQueueByteLength -= var2.getPacketSize() + 1;
+				z1 = false;
+				object3 = this.sendQueueLock;
+				object4 = this.sendQueueLock;
+				synchronized(this.sendQueueLock) {
+					packet2 = (Packet)this.dataPackets.remove(0);
+					this.sendQueueByteLength -= packet2.getPacketSize() + 1;
 				}
 
-				Packet.writePacket(var2, this.socketOutputStream);
+				Packet.writePacket(packet2, this.socketOutputStream);
 			}
 
-			if((var1 || this.chunkDataSendCounter-- <= 0) && !this.chunkDataPackets.isEmpty()) {
-				var1 = false;
-				var3 = this.sendQueueLock;
-				synchronized(var3) {
-					var2 = (Packet)this.chunkDataPackets.remove(0);
-					this.sendQueueByteLength -= var2.getPacketSize() + 1;
+			if((z1 || this.chunkDataSendCounter-- <= 0) && !this.chunkDataPackets.isEmpty()) {
+				z1 = false;
+				object3 = this.sendQueueLock;
+				object4 = this.sendQueueLock;
+				synchronized(this.sendQueueLock) {
+					packet2 = (Packet)this.chunkDataPackets.remove(0);
+					this.sendQueueByteLength -= packet2.getPacketSize() + 1;
 				}
 
-				Packet.writePacket(var2, this.socketOutputStream);
+				Packet.writePacket(packet2, this.socketOutputStream);
 				this.chunkDataSendCounter = 50;
 			}
 
-			if(var1) {
+			if(z1) {
 				Thread.sleep(10L);
 			}
-		} catch (InterruptedException var8) {
-		} catch (Exception var9) {
+		} catch (InterruptedException interruptedException9) {
+		} catch (Exception exception10) {
 			if(!this.isTerminating) {
-				this.onNetworkError(var9);
+				this.onNetworkError(exception10);
 			}
 		}
 
@@ -99,48 +103,48 @@
 
 	private void readPacket() {
 		try {
-			Packet var1 = Packet.readPacket(this.socketInputStream);
-			if(var1 != null) {
-				this.readPackets.add(var1);
+			Packet packet1 = Packet.readPacket(this.socketInputStream);
+			if(packet1 != null) {
+				this.readPackets.add(packet1);
 			} else {
 				this.networkShutdown("End of stream");
 			}
-		} catch (Exception var2) {
+		} catch (Exception exception2) {
 			if(!this.isTerminating) {
-				this.onNetworkError(var2);
+				this.onNetworkError(exception2);
 			}
 		}
 
 	}
 
-	private void onNetworkError(Exception var1) {
-		var1.printStackTrace();
-		this.networkShutdown("Internal exception: " + var1.toString());
+	private void onNetworkError(Exception exception) {
+		exception.printStackTrace();
+		this.networkShutdown("Internal exception: " + exception);
 	}
 
-	public void networkShutdown(String var1) {
+	public void networkShutdown(String terminationReason) {
 		if(this.isRunning) {
 			this.isTerminating = true;
-			this.terminationReason = var1;
+			this.terminationReason = terminationReason;
 			(new NetworkMasterThread(this)).start();
 			this.isRunning = false;
 
 			try {
 				this.socketInputStream.close();
-			} catch (Throwable var5) {
+			} catch (Throwable throwable5) {
 			}
 
 			try {
 				this.socketOutputStream.close();
-			} catch (Throwable var4) {
+			} catch (Throwable throwable4) {
 			}
 
 			try {
 				this.networkSocket.close();
-			} catch (Throwable var3) {
+			} catch (Throwable throwable3) {
 			}
-
 		}
+
 	}
 
 	public void processReadPackets() {
@@ -156,11 +160,11 @@
 			this.timeSinceLastRead = 0;
 		}
 
-		int var1 = 100;
+		int i1 = 100;
 
-		while(!this.readPackets.isEmpty() && var1-- >= 0) {
-			Packet var2 = (Packet)this.readPackets.remove(0);
-			var2.processPacket(this.netHandler);
+		while(!this.readPackets.isEmpty() && i1-- >= 0) {
+			Packet packet2 = (Packet)this.readPackets.remove(0);
+			packet2.processPacket(this.netHandler);
 		}
 
 		if(this.isTerminating && this.readPackets.isEmpty()) {
@@ -169,27 +173,27 @@
 
 	}
 
-	static boolean isRunning(NetworkManager var0) {
-		return var0.isRunning;
-	}
-
-	static boolean isServerTerminating(NetworkManager var0) {
-		return var0.isServerTerminating;
-	}
-
-	static void readNetworkPacket(NetworkManager var0) {
-		var0.readPacket();
-	}
-
-	static void sendNetworkPacket(NetworkManager var0) {
-		var0.sendPacket();
-	}
-
-	static Thread getReadThread(NetworkManager var0) {
-		return var0.readThread;
-	}
-
-	static Thread getWriteThread(NetworkManager var0) {
-		return var0.writeThread;
+	static boolean isRunning(NetworkManager networkManager) {
+		return networkManager.isRunning;
+	}
+
+	static boolean isServerTerminating(NetworkManager networkManager) {
+		return networkManager.isServerTerminating;
+	}
+
+	static void readNetworkPacket(NetworkManager networkManager) {
+		networkManager.readPacket();
+	}
+
+	static void sendNetworkPacket(NetworkManager networkManager) {
+		networkManager.sendPacket();
+	}
+
+	static Thread getReadThread(NetworkManager networkManager) {
+		return networkManager.readThread;
+	}
+
+	static Thread getWriteThread(NetworkManager networkManager) {
+		return networkManager.writeThread;
 	}
 }
--- /dev/null
+++ net/minecraft/src/EntityObserver.java
@@ -1,0 +1,163 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class EntityObserver extends EntityMob {
+	public boolean unusedBool2 = false;
+	final int timeUnit = 55;
+	public EntityLiving stalkingTarget = null;
+	public long currentlyStalkingFor = 0L;
+	public int stalkingState = 0;
+	public boolean firstAttack = true;
+	public XYZv lloc = null;
+
+	public EntityObserver(World world) {
+		super(world);
+		this.texture = "/mob/observer.png";
+		this.setSize(1.0F, 2.0F);
+		this.moveSpeed = 3.0F;
+	}
+
+	protected EntityPlayer locatePlayerToStalk() {
+		return (EntityPlayer)(!this.worldObj.multiplayerWorld ? InputHandler.mc.thePlayer : this.worldObj.getClosestPlayerToEntity(this, 64.0D));
+	}
+
+	protected void attackEntity(Entity entity, float damage) {
+		this.attackStrength = this.firstAttack ? 0 : 2;
+		this.firstAttack = false;
+		super.attackEntity(entity, damage);
+	}
+
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		if(entity != null && entity != this.stalkingTarget && entity instanceof EntityLiving) {
+			this.stalkingTarget = (EntityLiving)entity;
+			this.currentlyStalkingFor = 550L;
+		}
+
+		boolean z3 = super.attackEntityFrom(entity, damage);
+		if(this.dead && entity instanceof EntityPlayer) {
+			((EntityPlayer)entity).observerCooldown -= 2000L;
+		}
+
+		return z3;
+	}
+
+	protected Entity findPlayerToAttack() {
+		return null;
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setLong("ObservationTimer", this.currentlyStalkingFor);
+		nbttagcompound.setBoolean("CommencedAttack", this.firstAttack);
+		nbttagcompound.setBoolean("HasLLoc", this.lloc != null);
+		if(this.lloc != null) {
+			nbttagcompound.setLong("llocx", this.lloc.x);
+			nbttagcompound.setLong("llocy", this.lloc.y);
+			nbttagcompound.setLong("llocz", this.lloc.z);
+		}
+
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.currentlyStalkingFor = nbttagcompound.getLong("ObservationTimer");
+		this.firstAttack = nbttagcompound.getBoolean("CommencedAttack");
+		boolean z2 = nbttagcompound.getBoolean("HasLLoc");
+		if(z2) {
+			this.lloc = new XYZv(nbttagcompound.getLong("llocx"), nbttagcompound.getLong("llocy"), nbttagcompound.getLong("llocz"));
+		}
+
+		super.readEntityFromNBT(nbttagcompound);
+	}
+
+	protected String getHurtSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected String getDeathSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected float getSoundVolume() {
+		return 0.4F;
+	}
+
+	public boolean interact(EntityPlayer entityPlayer) {
+		return false;
+	}
+
+	public void Relocate(int integer) {
+		Object object2 = this.stalkingTarget == null ? this : this.stalkingTarget;
+		Random random3 = new Random();
+		int i4 = (int)((Entity)object2).posX + integer * (random3.nextInt(3) - 1);
+		int i5 = (int)((Entity)object2).posZ + integer * (random3.nextInt(3) - 1);
+		if(i4 == (int)((Entity)object2).posX && (double)i5 == ((Entity)object2).posZ) {
+			i5 += 8;
+		}
+
+		int i6;
+		for(i6 = (int)((Entity)object2).posY; Ext1605Utils.NotFullBlock(this.worldObj.getBlockId(i4, i6, i5)) && i6 != 0; --i6) {
+		}
+
+		while(!Ext1605Utils.NotFullBlock(this.worldObj.getBlockId(i4, i6, i5)) && i6 != 128) {
+			++i6;
+		}
+
+		this.lloc = new XYZv((long)i4, (long)i6, (long)i5);
+		this.setPosition((double)i4, (double)i6, (double)i5);
+	}
+
+	protected boolean shouldInheritEASUpdate() {
+		return false;
+	}
+
+	public float maxPathFindingDistance() {
+		return 64.0F;
+	}
+
+	public void onLivingUpdate() {
+		if(this.stalkingTarget == null) {
+			this.stalkingTarget = this.locatePlayerToStalk();
+			this.currentlyStalkingFor = 0L;
+			this.firstAttack = true;
+		} else {
+			if(this.currentlyStalkingFor > 550L) {
+				this.entityToAttack = this.stalkingTarget;
+			} else {
+				this.entityToAttack = null;
+				++this.currentlyStalkingFor;
+				if(this.currentlyStalkingFor > 550L) {
+					this.worldObj.playSoundAtEntity(this, "ext.obvr_attack", 1.0F, 1.0F);
+				}
+
+				if(this.getDistanceToEntity(this.stalkingTarget) < 4.0F) {
+					this.currentlyStalkingFor += 55L;
+					this.Relocate(8 * (11 - this.stalkingState));
+				}
+
+				int i1 = this.stalkingState;
+				this.stalkingState = 1 + (int)(this.currentlyStalkingFor / 55L);
+				if(i1 != this.stalkingState) {
+					this.Relocate(5 + 3 * (11 - this.stalkingState));
+				}
+
+				if(this.lloc != null) {
+					this.setPosition((double)this.lloc.x, (double)this.lloc.y, (double)this.lloc.z);
+				}
+			}
+
+			double d3 = Math.atan2(this.posX - this.stalkingTarget.posX, -(this.posZ - this.stalkingTarget.posZ)) / Math.PI * 180.0D;
+			this.setRotation((float)d3, 0.0F);
+		}
+
+		super.onLivingUpdate();
+	}
+
+	protected int getDropItemId() {
+		return ExtItems.ObserverFur.shiftedIndex;
+	}
+
+	public int getEssenceDroppedOnKill() {
+		return 19 + this.rand.nextInt(5);
+	}
+}
--- /dev/null
+++ net/minecraft/src/FreerunMap1.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+import java.io.File;
+
+public class FreerunMap1 extends FreerunWorld {
+	private NamedLoc[] checkpoints = new NamedLoc[]{new NamedLoc(-84, 97, 49, "spawn"), new NamedLoc(-124, 97, 50, -125, 95, 49, "checkpoint1"), new NamedLoc(-132, 94, 81, -135, 100, 82, "checkpoint2"), new NamedLoc(-130, 91, 94, -127, 94, 97, "checkpoint3"), new NamedLoc(-85, 86, 79, -87, 89, 83, "checkpoint4"), new NamedLoc(-112, 102, 56, -117, 107, 54, "end")};
+
+	public FreerunMap1(File worldFile, String levelName) {
+		super(worldFile, levelName);
+	}
+
+	public NamedLoc[] getCheckpoints() {
+		return this.checkpoints;
+	}
+
+	public int getResetY(long long1, long long2) {
+		return 78;
+	}
+}
--- net/minecraft/src/EntityFallingSand.java
+++ net/minecraft/src/EntityFallingSand.java
@@ -4,24 +4,24 @@
 	public int blockID;
 	public int fallTime = 0;
 
-	public EntityFallingSand(World var1) {
-		super(var1);
+	public EntityFallingSand(World world) {
+		super(world);
 	}
 
-	public EntityFallingSand(World var1, float var2, float var3, float var4, int var5) {
-		super(var1);
-		this.blockID = var5;
+	public EntityFallingSand(World world, float x, float y, float z, int blockID) {
+		super(world);
+		this.blockID = blockID;
 		this.preventEntitySpawning = true;
 		this.setSize(0.98F, 0.98F);
 		this.yOffset = this.height / 2.0F;
-		this.setPosition((double)var2, (double)var3, (double)var4);
+		this.setPosition((double)x, (double)y, (double)z);
 		this.motionX = 0.0D;
 		this.motionY = 0.0D;
 		this.motionZ = 0.0D;
 		this.canTriggerWalking = false;
-		this.prevPosX = (double)var2;
-		this.prevPosY = (double)var3;
-		this.prevPosZ = (double)var4;
+		this.prevPosX = (double)x;
+		this.prevPosY = (double)y;
+		this.prevPosZ = (double)z;
 	}
 
 	public boolean canBeCollidedWith() {
@@ -41,11 +41,11 @@
 			this.motionX *= (double)0.98F;
 			this.motionY *= (double)0.98F;
 			this.motionZ *= (double)0.98F;
-			int var1 = MathHelper.floor_double(this.posX);
-			int var2 = MathHelper.floor_double(this.posY);
-			int var3 = MathHelper.floor_double(this.posZ);
-			if(this.worldObj.getBlockId(var1, var2, var3) == this.blockID) {
-				this.worldObj.setBlockWithNotify(var1, var2, var3, 0);
+			int i1 = MathHelper.floor_double(this.posX);
+			int i2 = MathHelper.floor_double(this.posY);
+			int i3 = MathHelper.floor_double(this.posZ);
+			if(this.worldObj.getBlockId(i1, i2, i3) == this.blockID) {
+				this.worldObj.setBlockWithNotify(i1, i2, i3, 0);
 			}
 
 			if(this.onGround) {
@@ -53,23 +53,23 @@
 				this.motionZ *= (double)0.7F;
 				this.motionY *= -0.5D;
 				this.setEntityDead();
-				if(!this.worldObj.canBlockBePlacedAt(this.blockID, var1, var2, var3, true) || !this.worldObj.setBlockWithNotify(var1, var2, var3, this.blockID)) {
+				if(!this.worldObj.canBlockBePlacedAt(this.blockID, i1, i2, i3, true) || !this.worldObj.setBlockWithNotify(i1, i2, i3, this.blockID)) {
 					this.dropItem(this.blockID, 1);
 				}
 			} else if(this.fallTime > 100) {
 				this.dropItem(this.blockID, 1);
 				this.setEntityDead();
 			}
-
 		}
-	}
-
-	protected void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setByte("Tile", (byte)this.blockID);
-	}
-
-	protected void readEntityFromNBT(NBTTagCompound var1) {
-		this.blockID = var1.getByte("Tile") & 255;
+
+	}
+
+	protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setByte("Tile", (byte)this.blockID);
+	}
+
+	protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.blockID = nbttagcompound.getByte("Tile") & 255;
 	}
 
 	public float getShadowSize() {
--- net/minecraft/src/WorldGenCactus.java
+++ net/minecraft/src/WorldGenCactus.java
@@ -3,17 +3,17 @@
 import java.util.Random;
 
 public class WorldGenCactus extends WorldGenerator {
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		for(int var6 = 0; var6 < 10; ++var6) {
-			int var7 = var3 + var2.nextInt(8) - var2.nextInt(8);
-			int var8 = var4 + var2.nextInt(4) - var2.nextInt(4);
-			int var9 = var5 + var2.nextInt(8) - var2.nextInt(8);
-			if(var1.getBlockId(var7, var8, var9) == 0) {
-				int var10 = 1 + var2.nextInt(var2.nextInt(3) + 1);
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 10; ++i6) {
+			int i7 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+			int i9 = z + rand.nextInt(8) - rand.nextInt(8);
+			if(world.getBlockId(i7, i8, i9) == 0) {
+				int i10 = 1 + rand.nextInt(rand.nextInt(3) + 1);
 
-				for(int var11 = 0; var11 < var10; ++var11) {
-					if(Block.cactus.canBlockStay(var1, var7, var8 + var11, var9)) {
-						var1.setBlock(var7, var8 + var11, var9, Block.cactus.blockID);
+				for(int i11 = 0; i11 < i10; ++i11) {
+					if(Block.cactus.canBlockStay(world, i7, i8 + i11, i9)) {
+						world.setBlock(i7, i8 + i11, i9, Block.cactus.blockID);
 					}
 				}
 			}
--- net/minecraft/src/EntitySpider.java
+++ net/minecraft/src/EntitySpider.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
 public class EntitySpider extends EntityMob {
-	public EntitySpider(World var1) {
-		super(var1);
+	public EntitySpider(World world) {
+		super(world);
 		this.texture = "/mob/spider.png";
 		this.setSize(1.4F, 0.9F);
 		this.moveSpeed = 0.8F;
@@ -13,10 +13,10 @@
 	}
 
 	protected Entity findPlayerToAttack() {
-		float var1 = this.getBrightness(1.0F);
-		if(var1 < 0.5F) {
-			double var2 = 16.0D;
-			return this.worldObj.getClosestPlayerToEntity(this, var2);
+		float f1 = this.getBrightness(1.0F);
+		if(f1 < 0.5F) {
+			double d2 = 16.0D;
+			return this.worldObj.getClosestPlayerToEntity(this, d2);
 		} else {
 			return null;
 		}
@@ -34,36 +34,38 @@
 		return "mob.spiderdeath";
 	}
 
-	protected void attackEntity(Entity var1, float var2) {
-		float var3 = this.getBrightness(1.0F);
-		if(var3 > 0.5F && this.rand.nextInt(100) == 0) {
+	protected void attackEntity(Entity entity, float damage) {
+		float f3 = this.getBrightness(1.0F);
+		if(f3 > 0.5F && this.rand.nextInt(100) == 0) {
 			this.entityToAttack = null;
-		} else {
-			if(var2 > 2.0F && var2 < 6.0F && this.rand.nextInt(10) == 0) {
-				if(this.onGround) {
-					double var4 = var1.posX - this.posX;
-					double var6 = var1.posZ - this.posZ;
-					float var8 = MathHelper.sqrt_double(var4 * var4 + var6 * var6);
-					this.motionX = var4 / (double)var8 * 0.5D * (double)0.8F + this.motionX * (double)0.2F;
-					this.motionZ = var6 / (double)var8 * 0.5D * (double)0.8F + this.motionZ * (double)0.2F;
-					this.motionY = (double)0.4F;
-				}
-			} else {
-				super.attackEntity(var1, var2);
+		} else if(damage > 2.0F && damage < 6.0F && this.rand.nextInt(10) == 0) {
+			if(this.onGround) {
+				double d4 = entity.posX - this.posX;
+				double d6 = entity.posZ - this.posZ;
+				float f8 = MathHelper.sqrt_double(d4 * d4 + d6 * d6);
+				this.motionX = d4 / (double)f8 * 0.5D * (double)0.8F + this.motionX * (double)0.2F;
+				this.motionZ = d6 / (double)f8 * 0.5D * (double)0.8F + this.motionZ * (double)0.2F;
+				this.motionY = (double)0.4F;
 			}
-
+		} else {
+			super.attackEntity(entity, damage);
 		}
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
 	}
 
 	protected int getDropItemId() {
 		return Item.silk.shiftedIndex;
+	}
+
+	public int getEssenceDroppedOnKill() {
+		return 8 + this.rand.nextInt(4);
 	}
 }
--- net/minecraft/src/WorldGenerator.java
+++ net/minecraft/src/WorldGenerator.java
@@ -3,8 +3,8 @@
 import java.util.Random;
 
 public abstract class WorldGenerator {
-	public abstract boolean generate(World var1, Random var2, int var3, int var4, int var5);
+	public abstract boolean generate(World world1, Random random2, int i3, int i4, int i5);
 
-	public void setScale(double var1, double var3, double var5) {
+	public void setScale(double scaleX, double scaleY, double scaleZ) {
 	}
 }
--- net/minecraft/src/BlockClay.java
+++ net/minecraft/src/BlockClay.java
@@ -3,15 +3,15 @@
 import java.util.Random;
 
 public class BlockClay extends Block {
-	public BlockClay(int var1, int var2) {
-		super(var1, var2, Material.clay);
+	public BlockClay(int id, int blockIndex) {
+		super(id, blockIndex, Material.clay);
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Item.clay.shiftedIndex;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 4;
 	}
 }
--- net/minecraft/src/CraftingManager.java
+++ net/minecraft/src/CraftingManager.java
@@ -20,104 +20,119 @@
 		(new RecipesFood()).addRecipes(this);
 		(new RecipesCrafting()).addRecipes(this);
 		(new RecipesArmor()).addRecipes(this);
-		this.addRecipe(new ItemStack(Item.paper, 3), new Object[]{"###", Character.valueOf('#'), Item.reed});
-		this.addRecipe(new ItemStack(Item.book, 1), new Object[]{"#", "#", "#", Character.valueOf('#'), Item.paper});
-		this.addRecipe(new ItemStack(Block.fence, 2), new Object[]{"###", "###", Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Block.jukebox, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.diamond});
-		this.addRecipe(new ItemStack(Block.bookshelf, 1), new Object[]{"###", "XXX", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.book});
-		this.addRecipe(new ItemStack(Block.blockSnow, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.snowball});
-		this.addRecipe(new ItemStack(Block.blockClay, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.clay});
-		this.addRecipe(new ItemStack(Block.brick, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.brick});
-		this.addRecipe(new ItemStack(Block.cloth, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Item.silk});
-		this.addRecipe(new ItemStack(Block.tnt, 1), new Object[]{"X#X", "#X#", "X#X", Character.valueOf('X'), Item.gunpowder, Character.valueOf('#'), Block.sand});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3), new Object[]{"###", Character.valueOf('#'), Block.cobblestone});
-		this.addRecipe(new ItemStack(Block.ladder, 1), new Object[]{"# #", "###", "# #", Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Item.doorWood, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Item.doorSteel, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Item.ingotIron});
-		this.addRecipe(new ItemStack(Item.sign, 1), new Object[]{"###", "###", " X ", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.stick});
-		this.addRecipe(new ItemStack(Block.planks, 4), new Object[]{"#", Character.valueOf('#'), Block.wood});
-		this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.torch, 4), new Object[]{"X", "#", Character.valueOf('X'), Item.coal, Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Item.bowlEmpty, 4), new Object[]{"# #", " # ", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.minecartTrack, 16), new Object[]{"X X", "X#X", "X X", Character.valueOf('X'), Item.ingotIron, Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Item.minecartEmpty, 1), new Object[]{"# #", "###", Character.valueOf('#'), Item.ingotIron});
-		this.addRecipe(new ItemStack(Item.minecartBox, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.chest, Character.valueOf('B'), Item.minecartEmpty});
-		this.addRecipe(new ItemStack(Item.minecartEngine, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.stoneOvenIdle, Character.valueOf('B'), Item.minecartEmpty});
-		this.addRecipe(new ItemStack(Item.boat, 1), new Object[]{"# #", "###", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Item.bucketEmpty, 1), new Object[]{"# #", " # ", Character.valueOf('#'), Item.ingotIron});
-		this.addRecipe(new ItemStack(Item.striker, 1), new Object[]{"A ", " B", Character.valueOf('A'), Item.ingotIron, Character.valueOf('B'), Item.flint});
-		this.addRecipe(new ItemStack(Item.bread, 1), new Object[]{"###", Character.valueOf('#'), Item.wheat});
-		this.addRecipe(new ItemStack(Block.stairCompactWood, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Item.fishingRod, 1), new Object[]{"  #", " #X", "# X", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.silk});
-		this.addRecipe(new ItemStack(Block.stairCompactStone, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.cobblestone});
-		this.addRecipe(new ItemStack(Item.painting, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Block.cloth});
-		this.addRecipe(new ItemStack(Item.appleGold, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.blockGold, Character.valueOf('X'), Item.appleRed});
-		this.addRecipe(new ItemStack(Block.lever, 1), new Object[]{"X", "#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.stick});
-		this.addRecipe(new ItemStack(Block.torchRedstoneActive, 1), new Object[]{"X", "#", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.redstone});
-		this.addRecipe(new ItemStack(Item.compass, 1), new Object[]{" # ", "#X#", " # ", Character.valueOf('#'), Item.ingotIron, Character.valueOf('X'), Item.redstone});
-		this.addRecipe(new ItemStack(Block.button, 1), new Object[]{"#", "#", Character.valueOf('#'), Block.stone});
-		this.addRecipe(new ItemStack(Block.pressurePlateStone, 1), new Object[]{"###", Character.valueOf('#'), Block.stone});
-		this.addRecipe(new ItemStack(Block.pressurePlateWood, 1), new Object[]{"###", Character.valueOf('#'), Block.planks});
+		ModLoader.AddAllRecipes(this);
+		this.addRecipe(new ItemStack(Item.paper, 3), new Object[]{"###", '#', Item.reed});
+		this.addRecipe(new ItemStack(Item.book, 1), new Object[]{"#", "#", "#", '#', Item.paper});
+		this.addRecipe(new ItemStack(Block.fence, 2), new Object[]{"###", "###", '#', Item.stick});
+		this.addRecipe(new ItemStack(Block.jukebox, 1), new Object[]{"###", "#X#", "###", '#', Block.planks, 'X', Item.diamond});
+		this.addRecipe(new ItemStack(Block.bookshelf, 1), new Object[]{"###", "XXX", "###", '#', Block.planks, 'X', Block.cloth});
+		this.addRecipe(new ItemStack(Block.blockSnow, 1), new Object[]{"##", "##", '#', Item.snowball});
+		this.addRecipe(new ItemStack(Block.blockClay, 1), new Object[]{"##", "##", '#', Item.clay});
+		this.addRecipe(new ItemStack(Block.brick, 1), new Object[]{"##", "##", '#', Item.brick});
+		this.addRecipe(new ItemStack(Block.cloth, 1), new Object[]{"###", "###", "###", '#', Item.silk});
+		this.addRecipe(new ItemStack(Block.tnt, 1), new Object[]{"X#X", "#X#", "X#X", 'X', Item.gunpowder, '#', Block.sand});
+		this.addRecipe(new ItemStack(Block.stairSingle, 3), new Object[]{"###", '#', Block.cobblestone});
+		this.addRecipe(new ItemStack(Block.ladder, 1), new Object[]{"# #", "###", "# #", '#', Item.stick});
+		this.addRecipe(new ItemStack(Item.doorWood, 1), new Object[]{"##", "##", "##", '#', Block.planks});
+		this.addRecipe(new ItemStack(Item.doorSteel, 1), new Object[]{"##", "##", "##", '#', Item.ingotIron});
+		this.addRecipe(new ItemStack(Item.sign, 1), new Object[]{"###", "###", " X ", '#', Block.planks, 'X', Item.stick});
+		this.addRecipe(new ItemStack(Block.planks, 4), new Object[]{"#", '#', Block.wood});
+		this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", '#', Block.planks});
+		this.addRecipe(new ItemStack(Block.torch, 4), new Object[]{"X", "#", 'X', Item.coal, '#', Item.stick});
+		this.addRecipe(new ItemStack(Item.bowlEmpty, 4), new Object[]{"# #", " # ", '#', Block.planks});
+		this.addRecipe(new ItemStack(Block.minecartTrack, 16), new Object[]{"X X", "X#X", "X X", 'X', Item.ingotIron, '#', Item.stick});
+		this.addRecipe(new ItemStack(Item.minecartEmpty, 1), new Object[]{"# #", "###", '#', Item.ingotIron});
+		this.addRecipe(new ItemStack(Item.minecartBox, 1), new Object[]{"A", "B", 'A', Block.chest, 'B', Item.minecartEmpty});
+		this.addRecipe(new ItemStack(Item.minecartEngine, 1), new Object[]{"A", "B", 'A', Block.stoneOvenIdle, 'B', Item.minecartEmpty});
+		this.addRecipe(new ItemStack(Item.boat, 1), new Object[]{"# #", "###", '#', Block.planks});
+		this.addRecipe(new ItemStack(Item.bucketEmpty, 1), new Object[]{"# #", " # ", '#', Item.ingotIron});
+		this.addRecipe(new ItemStack(Item.striker, 1), new Object[]{"A ", " B", 'A', Item.ingotIron, 'B', Item.flint});
+		this.addRecipe(new ItemStack(Item.bread, 1), new Object[]{"###", '#', Item.wheat});
+		this.addRecipe(new ItemStack(Block.stairCompactWood, 4), new Object[]{"#  ", "## ", "###", '#', Block.planks});
+		this.addRecipe(new ItemStack(Item.fishingRod, 1), new Object[]{"  #", " #X", "# X", '#', Item.stick, 'X', Item.silk});
+		this.addRecipe(new ItemStack(Block.stairCompactStone, 4), new Object[]{"#  ", "## ", "###", '#', Block.cobblestone});
+		this.addRecipe(new ItemStack(Item.painting, 1), new Object[]{"###", "#X#", "###", '#', Item.stick, 'X', Block.cloth});
+		this.addRecipe(new ItemStack(Item.appleGold, 1), new Object[]{"###", "#X#", "###", '#', Block.blockGold, 'X', Item.appleRed});
+		this.addRecipe(new ItemStack(Block.lever, 1), new Object[]{"X", "#", '#', Block.cobblestone, 'X', Item.stick});
+		this.addRecipe(new ItemStack(Block.torchRedstoneActive, 1), new Object[]{"X", "#", '#', Item.stick, 'X', Item.redstone});
+		this.addRecipe(new ItemStack(Item.compass, 1), new Object[]{" # ", "#X#", " # ", '#', Item.ingotIron, 'X', Item.redstone});
+		this.addRecipe(new ItemStack(Block.button, 1), new Object[]{"#", "#", '#', Block.stone});
+		this.addRecipe(new ItemStack(Block.pressurePlateStone, 1), new Object[]{"###", '#', Block.stone});
+		this.addRecipe(new ItemStack(Block.pressurePlateWood, 1), new Object[]{"###", '#', Block.wood});
+		ExtCraftingRecipes.RegisterCrafting(this);
 		Collections.sort(this.recipes, new RecipeSorter(this));
 		System.out.println(this.recipes.size() + " recipes");
 	}
 
-	void addRecipe(ItemStack var1, Object... var2) {
-		String var3 = "";
-		int var4 = 0;
-		int var5 = 0;
-		int var6 = 0;
-		if(var2[var4] instanceof String[]) {
-			String[] var11 = (String[])((String[])var2[var4++]);
-
-			for(int var8 = 0; var8 < var11.length; ++var8) {
-				String var9 = var11[var8];
-				++var6;
-				var5 = var9.length();
-				var3 = var3 + var9;
+	public void addShapelessRecipe(ItemStack iy, Object... arr) {
+		this.addRecipe(false, iy, arr);
+	}
+
+	public void addRecipe(ItemStack iy, Object... arr) {
+		this.addRecipe(true, iy, arr);
+	}
+
+	public void addRecipe(boolean boolean1, ItemStack iy, Object... arr) {
+		String string4 = "";
+		int i5 = 0;
+		int i6 = 0;
+		int i7 = 0;
+		int i9;
+		if(arr[i5] instanceof String[]) {
+			String[] string12 = (String[])arr[i5++];
+
+			for(i9 = 0; i9 < string12.length; ++i9) {
+				String string10 = string12[i9];
+				++i7;
+				i6 = string10.length();
+				string4 = string4 + string10;
 			}
 		} else {
-			while(var2[var4] instanceof String) {
-				String var7 = (String)var2[var4++];
-				++var6;
-				var5 = var7.length();
-				var3 = var3 + var7;
-			}
-		}
-
-		HashMap var12;
-		int var15;
-		for(var12 = new HashMap(); var4 < var2.length; var4 += 2) {
-			Character var13 = (Character)var2[var4];
-			var15 = 0;
-			if(var2[var4 + 1] instanceof Item) {
-				var15 = ((Item)var2[var4 + 1]).shiftedIndex;
-			} else if(var2[var4 + 1] instanceof Block) {
-				var15 = ((Block)var2[var4 + 1]).blockID;
-			}
-
-			var12.put(var13, Integer.valueOf(var15));
-		}
-
-		int[] var14 = new int[var5 * var6];
-
-		for(var15 = 0; var15 < var5 * var6; ++var15) {
-			char var10 = var3.charAt(var15);
-			if(var12.containsKey(Character.valueOf(var10))) {
-				var14[var15] = ((Integer)var12.get(Character.valueOf(var10))).intValue();
+			while(arr[i5] instanceof String) {
+				String string8 = (String)arr[i5++];
+				++i7;
+				i6 = string8.length();
+				string4 = string4 + string8;
+			}
+		}
+
+		HashMap hashMap13;
+		for(hashMap13 = new HashMap(); i5 < arr.length; i5 += 2) {
+			Character character14 = (Character)arr[i5];
+			i9 = 0;
+			if(arr[i5 + 1] instanceof Item) {
+				i9 = ((Item)arr[i5 + 1]).shiftedIndex;
+			} else if(arr[i5 + 1] instanceof Block) {
+				i9 = ((Block)arr[i5 + 1]).blockID;
+			}
+
+			hashMap13.put(character14, i9);
+		}
+
+		int[] i15 = new int[i6 * i7];
+
+		for(i9 = 0; i9 < i6 * i7; ++i9) {
+			char c11 = string4.charAt(i9);
+			if(hashMap13.containsKey(c11)) {
+				i15[i9] = ((Integer)hashMap13.get(c11)).intValue();
 			} else {
-				var14[var15] = -1;
+				i15[i9] = -1;
 			}
 		}
 
-		this.recipes.add(new CraftingRecipe(var5, var6, var14, var1));
+		if(boolean1) {
+			this.recipes.add(new CraftingRecipe(i6, i7, i15, iy));
+		} else {
+			this.recipes.add(new ShapelessCraftingRecipe(i6, i7, i15, iy));
+		}
+
 	}
 
-	public ItemStack findMatchingRecipe(int[] var1) {
-		for(int var2 = 0; var2 < this.recipes.size(); ++var2) {
-			CraftingRecipe var3 = (CraftingRecipe)this.recipes.get(var2);
-			if(var3.matches(var1)) {
-				return var3.getCraftingResult(var1);
+	public ItemStack findMatchingRecipe(int[] arr) {
+		for(int i2 = 0; i2 < this.recipes.size(); ++i2) {
+			CraftingRecipe craftingRecipe3 = (CraftingRecipe)this.recipes.get(i2);
+			if(craftingRecipe3.matches(arr)) {
+				return craftingRecipe3.getCraftingResult(arr);
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/EntityModel.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+public class EntityModel {
+	public static LayerDefinition createBodyLayer() {
+		return null;
+	}
+
+	public void setupAnim(Object object, float float2, float float3, float float4, float float5, float float6) {
+	}
+
+	public void renderToBuffer(PoseStack f, VertexConsumer ie, int integer3, int integer4, float float5, float float6, float float7, float float8) {
+	}
+}
--- net/minecraft/src/BlockIce.java
+++ net/minecraft/src/BlockIce.java
@@ -3,8 +3,8 @@
 import java.util.Random;
 
 public class BlockIce extends BlockBreakable {
-	public BlockIce(int var1, int var2) {
-		super(var1, var2, Material.ice, false);
+	public BlockIce(int id, int blockIndex) {
+		super(id, blockIndex, Material.ice, false);
 		this.slipperiness = 0.98F;
 		this.setTickOnLoad(true);
 	}
@@ -13,26 +13,26 @@
 		return 1;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return super.shouldSideBeRendered(var1, var2, var3, var4, 1 - var5);
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return super.shouldSideBeRendered(blockAccess, x, y, z, 1 - side);
 	}
 
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		Material var5 = var1.getBlockMaterial(var2, var3 - 1, var4);
-		if(var5.getIsSolid() || var5.getIsLiquid()) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.waterMoving.blockID);
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		Material material5 = world.getBlockMaterial(x, y - 1, z);
+		if(material5.getIsSolid() || material5.getIsLiquid()) {
+			world.setBlockWithNotify(x, y, z, Block.waterMoving.blockID);
 		}
 
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 0;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getSavedLightValue(EnumSkyBlock.Block, var2, var3, var4) > 11 - Block.lightOpacity[this.blockID]) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, Block.waterStill.blockID);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(world.getSavedLightValue(EnumSkyBlock.Block, x, y, z) > 11 - Block.lightOpacity[this.blockID]) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, Block.waterStill.blockID);
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/CustomTriggerValueMode.java
@@ -1,0 +1,45 @@
+package net.minecraft.src;
+
+public enum CustomTriggerValueMode {
+	OFF(0),
+	Rigid(1),
+	RigidA(2),
+	RigidB(3),
+	RigidAB(4),
+	Pulse(5),
+	PulseA(6),
+	PulseB(7),
+	PulseAB(8),
+	VibrateResistance(9),
+	VibrateResistanceA(10),
+	VibrateResistanceB(11),
+	VibrateResistanceAB(12),
+	VibratePulse(13),
+	VibratePulseA(14),
+	VibratePulsB(15),
+	VibratePulseAB(16);
+
+	int index;
+    private static final /* synthetic */ CustomTriggerValueMode[] field_11458_2KlfFJDFGnk4GDmrGB892b50a4fmN16M928iYPR6Gw8zmFiclVf394M00qEu;
+
+
+	public static CustomTriggerValueMode[] func_11445_5jQHdt1xcve0NRN6hAqei326dThZ6ulP5xJN8b4e576rwz1lVN3G8UP0W3TG() {
+		return (CustomTriggerValueMode[])field_11458_2KlfFJDFGnk4GDmrGB892b50a4fmN16M928iYPR6Gw8zmFiclVf394M00qEu.clone();
+	}
+
+	public static CustomTriggerValueMode func_11444_1XuIZ99siG7BESZj268f6T9eqS2OFPIqzh7535EAH79nQS8rv5p5cwtGco4q(String string) {
+		return (CustomTriggerValueMode)Enum.valueOf(CustomTriggerValueMode.class, string);
+	}
+
+	private CustomTriggerValueMode(int integer3) {
+		this.index = integer3;
+	}
+
+	private static CustomTriggerValueMode[] func_11446_7C9Q4e1VvvXN3lOv7xWJ50iFW8BmlBKmt9HrK8jp8A278RD9S910g259v57T() {
+		return new CustomTriggerValueMode[]{OFF, Rigid, RigidA, RigidB, RigidAB, Pulse, PulseA, PulseB, PulseAB, VibrateResistance, VibrateResistanceA, VibrateResistanceB, VibrateResistanceAB, VibratePulse, VibratePulseA, VibratePulsB, VibratePulseAB};
+	}
+
+    static {
+        field_11458_2KlfFJDFGnk4GDmrGB892b50a4fmN16M928iYPR6Gw8zmFiclVf394M00qEu = CustomTriggerValueMode.func_11446_7C9Q4e1VvvXN3lOv7xWJ50iFW8BmlBKmt9HrK8jp8A278RD9S910g259v57T();
+    }
+}
--- net/minecraft/src/TileEntitySpecialRenderer.java
+++ net/minecraft/src/TileEntitySpecialRenderer.java
@@ -3,15 +3,15 @@
 public abstract class TileEntitySpecialRenderer {
 	protected TileEntityRenderer tileEntityRenderer;
 
-	public abstract void renderTileEntityAt(TileEntity var1, double var2, double var4, double var6, float var8);
+	public abstract void renderTileEntityAt(TileEntity tileEntity1, double d2, double d4, double d6, float f8);
 
-	protected void bindTextureByName(String var1) {
-		RenderEngine var2 = this.tileEntityRenderer.renderEngine;
-		var2.bindTexture(var2.getTexture(var1));
+	protected void bindTextureByName(String name) {
+		RenderEngine renderEngine2 = this.tileEntityRenderer.renderEngine;
+		renderEngine2.bindTexture(renderEngine2.getTexture(name));
 	}
 
-	public void setTileEntityRenderer(TileEntityRenderer var1) {
-		this.tileEntityRenderer = var1;
+	public void setTileEntityRendere(TileEntityRenderer tileEntityRenderer) {
+		this.tileEntityRenderer = tileEntityRenderer;
 	}
 
 	public FontRenderer getFontRenderer() {
--- /dev/null
+++ net/minecraft/src/ScreenItemCheat.java
@@ -1,0 +1,237 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.opengl.GL11;
+
+public class ScreenItemCheat extends GuiScreen {
+	public Minecraft mc;
+	private RenderBlocks blockRendererBlurryTroll = new RenderBlocks();
+	private boolean createButtons = true;
+	private int lastCols = -1;
+	private int lastRows = -1;
+	private int lastNOfPages = -1;
+	private long rotateTimer = -1L;
+	private boolean selectingBlocks = true;
+	private boolean resetButtons = false;
+	private int currentPage = 0;
+
+	public ScreenItemCheat(Minecraft minecraft) {
+		this.mc = minecraft;
+	}
+
+	public void DottyIfYouDontKnowWhatsGoingOnHere_NeitherDoI(int integer1, int integer2, int integer3, int integer4, int integer5, int integer6, float float7) {
+		Tessellator tessellator8 = Tessellator.instance;
+		float f9 = 0.00390625F;
+		float f10 = 1.0F / float7;
+		tessellator8.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+		tessellator8.addVertexWithUV((double)(integer1 + 0), (double)(integer2 + integer6), 0.0D, (double)((float)(integer3 + 0) * f9), (double)((float)(integer4 + integer6) * f10));
+		tessellator8.addVertexWithUV((double)(integer1 + integer5), (double)(integer2 + integer6), 0.0D, (double)((float)(integer3 + integer5) * f9), (double)((float)(integer4 + integer6) * f10));
+		tessellator8.addVertexWithUV((double)(integer1 + integer5), (double)(integer2 + 0), 0.0D, (double)((float)(integer3 + integer5) * f9), (double)((float)(integer4 + 0) * f10));
+		tessellator8.addVertexWithUV((double)(integer1 + 0), (double)(integer2 + 0), 0.0D, (double)((float)(integer3 + 0) * f9), (double)((float)(integer4 + 0) * f10));
+		tessellator8.setNormal(0.0F, 1.0F, 0.0F);
+		tessellator8.draw();
+	}
+
+	public void RenderTheFunny(Block pb) {
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture(Minecraft.field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L));
+		int i2 = pb.blockIndexInTexture;
+		this.DottyIfYouDontKnowWhatsGoingOnHere_NeitherDoI(0, 0, i2 % 16 * 16, i2 / 16 * 16, 16, 16, 512.0F);
+	}
+
+	public void RenderTheItem(Item no) {
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/items.png"));
+		int i2 = no.iconIndex;
+		this.DottyIfYouDontKnowWhatsGoingOnHere_NeitherDoI(0, 0, i2 % 16 * 16, i2 / 16 * 16, 16, 16, 256.0F);
+	}
+
+	public int nthExistingBlock(int integer) {
+		int i2 = 0;
+
+		for(int i3 = 1; i3 != 32767; ++i3) {
+			if(Block.blocksList[i3] != null && i3 != 120) {
+				++i2;
+			}
+
+			if(i2 == integer + 1) {
+				return i3;
+			}
+		}
+
+		return -1;
+	}
+
+	public int nOfExistingBlocks() {
+		int i1 = 0;
+
+		for(int i2 = 1; i2 != 32767; ++i2) {
+			if(Block.blocksList[i2] != null && i2 != 120) {
+				++i1;
+			}
+		}
+
+		return i1;
+	}
+
+	public int nthExistingItem(int integer) {
+		int i2 = 0;
+
+		for(int i3 = 32767; i3 != Item.itemsList.length; ++i3) {
+			if(Item.itemsList[i3] != null) {
+				++i2;
+			}
+
+			if(i2 == integer + 1) {
+				return i3;
+			}
+		}
+
+		return -1;
+	}
+
+	public int nOfExistingItems() {
+		int i1 = 0;
+
+		for(int i2 = 32767; i2 != Item.itemsList.length; ++i2) {
+			if(Item.itemsList[i2] != null) {
+				++i1;
+			}
+		}
+
+		return i1;
+	}
+
+	public boolean doesGuiPauseGame() {
+		return false;
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled) {
+			if(button.id == 2) {
+				this.resetButtons = true;
+				this.selectingBlocks = true;
+			} else if(button.id == 3) {
+				this.resetButtons = true;
+				this.selectingBlocks = false;
+			} else if(button.id == 4) {
+				this.currentPage = this.currentPage == 0 ? this.lastNOfPages - 1 : --this.currentPage;
+				this.resetButtons = true;
+			} else if(button.id == 5) {
+				++this.currentPage;
+				this.currentPage %= this.lastNOfPages;
+				this.resetButtons = true;
+			}
+
+			ItemStack itemStack2 = null;
+			if(button.id >= 4096) {
+				itemStack2 = new ItemStack(Item.itemsList[button.id - 4096], 1);
+			} else if(button.id >= 2048) {
+				itemStack2 = new ItemStack(Block.blocksList[button.id - 2048], 64);
+			}
+
+			if(itemStack2 != null) {
+				if(InputHandler.field_9759_4OT0vPMcJ68s5EU822c0Y9Asw74Su111s3rRCw8OSGMsYM8lx153p73RBtj3) {
+					this.mc.thePlayer.inventory.addItemStackToInventory(itemStack2);
+				} else {
+					this.mc.thePlayer.dropPlayerItemWithRandomChoice(itemStack2, true);
+				}
+			}
+
+		}
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		if(this.rotateTimer == -1L) {
+			this.rotateTimer = System.currentTimeMillis();
+		}
+
+		float f4 = Math.min((float)(System.currentTimeMillis() - this.rotateTimer) / 100.0F, 1.0F);
+		drawGradientRect(0, (int)((float)this.height * (1.0F - f4)), this.width, this.height, 1614823488, 1612718112);
+		this.drawCenteredString(this.fontRenderer, "Palette", this.width / 2, 15, 0xFFFFFF);
+		this.drawCenteredString(this.fontRenderer, "" + this.currentPage, 208, 35, 0xFFFFFF);
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture(Minecraft.field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L));
+		int i5 = (this.width - 18) / 32;
+		int i6 = (this.height - 50) / 23;
+		if(i5 != 0 && i6 != 0) {
+			int i7 = (this.selectingBlocks ? this.nOfExistingBlocks() : this.nOfExistingItems()) / (i5 * i6) + 1;
+			if(this.lastCols != i5 || this.lastRows != i6 || this.resetButtons) {
+				this.lastNOfPages = i7;
+				this.lastCols = i5;
+
+				for(this.lastRows = i6; i7 <= this.currentPage; --this.currentPage) {
+				}
+
+				this.controlList.clear();
+				this.createButtons = true;
+				this.resetButtons = false;
+			}
+
+			if(this.createButtons) {
+				this.controlList.add(new ButtonSel(2, 18, 30, "Blocks"));
+				this.controlList.add(new ButtonSel(3, 68, 30, "Items"));
+				this.controlList.add(new ButtonSel(4, 148, 30, "<<"));
+				this.controlList.add(new ButtonSel(5, 218, 30, ">>"));
+				((GuiButton)this.controlList.get(this.selectingBlocks ? 0 : 1)).enabled = false;
+				((GuiButton)this.controlList.get(3)).enabled = i7 != 1;
+				((GuiButton)this.controlList.get(2)).enabled = ((GuiButton)this.controlList.get(3)).enabled;
+			}
+
+			int i8 = this.currentPage * i5 * i6;
+
+			for(int i9 = 0; i9 != i5 * i6; ++i9) {
+				float f10;
+				int i12;
+				if(this.selectingBlocks) {
+					i12 = this.nthExistingBlock(i8 + i9);
+					if(i12 == -1) {
+						break;
+					}
+
+					Block block11 = Block.blocksList[i12];
+					boolean z13 = RenderBlocks.renderItemIn3d(((Block)block11).getRenderType()) || ((Block)block11).getRenderType() == 1 || ((Block)block11).getRenderType() == 2 || ((Block)block11).getRenderType() == 14;
+					f10 = 18.0F + 32.0F * (float)(i9 % i5);
+					float f14 = 50.0F + 23.0F * (float)(i9 / i5);
+					if(this.createButtons) {
+						this.controlList.add(new ButtonItemCheat(2048 + i12, (int)f10, (int)f14, "", i12, this));
+					}
+
+					GL11.glPushMatrix();
+					if(z13) {
+						GL11.glTranslatef(f10 + 14.0F, f14 + 8.0F, 16.0F);
+						GL11.glScalef(16.0F, 16.0F, 16.0F);
+						GL11.glRotatef(180.0F, 0.0F, 0.0F, 1.0F);
+						GL11.glRotatef(30.0F, -1.0F, -1.0F, 0.0F);
+						float f15 = (float)(System.currentTimeMillis() - this.rotateTimer) / 13000.0F * 360.0F;
+						GL11.glRotatef(f15, 0.0F, -1.0F, 0.0F);
+						this.blockRendererBlurryTroll.renderBlockOnInventory((Block)block11);
+					} else {
+						GL11.glTranslatef(f10 + 5.0F, f14, 13.0F);
+						this.RenderTheFunny((Block)block11);
+					}
+
+					GL11.glPopMatrix();
+				} else {
+					i12 = this.nthExistingItem(i8 + i9);
+					if(i12 == -1) {
+						break;
+					}
+
+					Item item16 = Item.itemsList[i12];
+					float f17 = 18.0F + 32.0F * (float)(i9 % i5);
+					f10 = 50.0F + 23.0F * (float)(i9 / i5);
+					if(this.createButtons) {
+						this.controlList.add(new ButtonItemCheat(4096 + i12, (int)f17, (int)f10, "", i12, this));
+					}
+
+					GL11.glPushMatrix();
+					GL11.glTranslatef(f17 + 5.0F, f10, 13.0F);
+					this.RenderTheItem((Item)item16);
+					GL11.glPopMatrix();
+				}
+			}
+
+			this.createButtons = false;
+			super.drawScreen(mouseX, mouseY, renderPartialTick);
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandTitle.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandTitle extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8585_3V0f53eJmu4iDg7AmHFH55SGy88b1S0gV1RIUM59SuEbCun03Et2HzIX7w7l;
+    
+    CommandTitle(final CommandManager abb) {
+        this.field_8585_3V0f53eJmu4iDg7AmHFH55SGy88b1S0gV1RIUM59SuEbCun03Et2HzIX7w7l = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.func_7248_2y5vE7Yn817r5Knu79o4Aj1C8zSXCZv983MY0Ng8eMzo5U95JWt5FIuSSHqv((String)arr[0]);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/GenSky.java
@@ -1,0 +1,31 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class GenSky extends WorldGenerator {
+	private int a;
+
+	public GenSky(int integer) {
+		this.a = integer;
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 4; ++i6) {
+			int i7 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+			int i9 = z + rand.nextInt(8) - rand.nextInt(8);
+			boolean z10 = false;
+			if(i8 > 90) {
+				z10 = true;
+			} else if(i8 > 80) {
+				z10 = rand.nextInt(100) > 80;
+			}
+
+			if(z10 && world.getBlockId(i7, i8, i9) == 0) {
+				world.setBlock(i7, i8, i9, this.a);
+			}
+		}
+
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EssenceClonerInventoryCB.java
@@ -1,0 +1,102 @@
+package net.minecraft.src;
+
+public class EssenceClonerInventoryCB extends InventoryCB {
+	public InventoryEssenceCloner craftMatrix = new InventoryEssenceCloner(this, 3, 1);
+	public EssenceCloneResult craftResult = new EssenceCloneResult(this);
+	public boolean collectingResults = true;
+
+	public void a(IInventory cz) {
+		int i2;
+		if(cz == this.craftResult) {
+			if(!this.collectingResults) {
+				this.collectingResults = true;
+
+				for(i2 = 0; i2 != 3; ++i2) {
+					this.craftMatrix.setInventorySlotContents(i2, (ItemStack)null, false);
+				}
+
+			}
+		} else {
+			if(this.collectingResults) {
+				this.collectingResults = false;
+
+				for(i2 = 0; i2 != 3; ++i2) {
+					if(this.craftResult.stackResult[i2] != null) {
+						this.collectingResults = true;
+					}
+				}
+
+				if(this.collectingResults) {
+					return;
+				}
+			}
+
+			ItemStack itemStack10 = null;
+			int i3 = 0;
+			boolean z4 = true;
+			ItemStack[] itemStack5 = this.craftMatrix.stackList;
+			int i6 = itemStack5.length;
+
+			for(int i7 = 0; i7 < i6; ++i7) {
+				ItemStack itemStack8 = itemStack5[i7];
+				if(itemStack8 != null) {
+					if(itemStack8.itemID == ExtBlocks.EssenceBlock.blockID) {
+						i3 += 9 * itemStack8.stackSize;
+					} else if(itemStack8.itemID == ExtItems.essence.shiftedIndex) {
+						i3 += itemStack8.stackSize;
+					} else {
+						if(itemStack10 != null) {
+							z4 = false;
+							break;
+						}
+
+						itemStack10 = itemStack8;
+					}
+				}
+			}
+
+			if(itemStack10 == null || i3 <= 0) {
+				z4 = false;
+			}
+
+			int i11;
+			if(z4) {
+				i11 = i3 / itemStack10.getEssenceValue();
+				i6 = i3 % itemStack10.getEssenceValue();
+				ItemStack itemStack12 = new ItemStack(itemStack10.getItem(), itemStack10.stackSize + i11);
+				this.craftResult.setInventorySlotContents(0, itemStack12);
+				if(i6 != 0) {
+					if(i6 <= 64) {
+						this.craftResult.setInventorySlotContents(1, new ItemStack(ExtItems.essence, i6));
+						this.craftResult.setInventorySlotContents(2, (ItemStack)null);
+					} else {
+						int i13 = i6 / 9;
+						int i9 = i6 % 9;
+						this.craftResult.setInventorySlotContents(1, new ItemStack(ExtBlocks.EssenceBlock, i13));
+						this.craftResult.setInventorySlotContents(2, new ItemStack(ExtItems.essence, i9));
+					}
+				}
+			} else {
+				for(i11 = 0; i11 != 3; ++i11) {
+					this.craftResult.setInventorySlotContents(i11, (ItemStack)null);
+				}
+			}
+
+		}
+	}
+
+	public void onCraftGuiClosed(EntityPlayer gb) {
+		InventoryPlayer inventoryPlayer2 = gb.inventory;
+		if(inventoryPlayer2.draggedItemStack != null) {
+			gb.dropPlayerItem(inventoryPlayer2.draggedItemStack);
+		}
+
+		for(int i3 = 0; i3 < 3; ++i3) {
+			ItemStack itemStack4 = this.craftMatrix.getStackInSlot(i3);
+			if(itemStack4 != null) {
+				gb.dropPlayerItem(itemStack4);
+			}
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/Packet7SendSkinRequest.java
@@ -1,0 +1,45 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+
+public class Packet7SendSkinRequest extends Packet {
+	public String targetName;
+
+	public Packet7SendSkinRequest() {
+	}
+
+	public Packet7SendSkinRequest(String string) {
+		this.targetName = string;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.targetName = dataInputStream.readUTF();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.targetName);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		Packet8RespondSkinRequest packet8RespondSkinRequest2;
+		try {
+			byte[] b3 = Files.readAllBytes(Paths.get("/skins/" + this.targetName + ".png", new String[0]));
+			packet8RespondSkinRequest2 = new Packet8RespondSkinRequest(this.targetName, b3);
+		} catch (IOException iOException4) {
+			packet8RespondSkinRequest2 = new Packet8RespondSkinRequest(this.targetName, (byte[])null);
+		}
+
+		if(netHandler instanceof NetClientHandler) {
+			((NetClientHandler)netHandler).addToSendQueue(packet8RespondSkinRequest2);
+		}
+
+	}
+
+	public int getPacketSize() {
+		return 2 + this.targetName.length();
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockButtonOld.java
@@ -1,0 +1,230 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockButtonOld extends BlockOld {
+	protected BlockButtonOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.circuits);
+		this.setTickOnLoad(true);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return null;
+	}
+
+	public int tickRate() {
+		return 20;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		return vg.isBlockNormalCube(integer2 - 1, integer3, integer4) ? true : (vg.isBlockNormalCube(integer2 + 1, integer3, integer4) ? true : (vg.isBlockNormalCube(integer2, integer3, integer4 - 1) ? true : vg.isBlockNormalCube(integer2, integer3, integer4 + 1)));
+	}
+
+	public void onBlockPlaced(World vg, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		int i7 = i6 & 8;
+		i6 &= 7;
+		if(integer5 == 2 && vg.isBlockNormalCube(integer2, integer3, integer4 + 1)) {
+			i6 = 4;
+		}
+
+		if(integer5 == 3 && vg.isBlockNormalCube(integer2, integer3, integer4 - 1)) {
+			i6 = 3;
+		}
+
+		if(integer5 == 4 && vg.isBlockNormalCube(integer2 + 1, integer3, integer4)) {
+			i6 = 2;
+		}
+
+		if(integer5 == 5 && vg.isBlockNormalCube(integer2 - 1, integer3, integer4)) {
+			i6 = 1;
+		}
+
+		vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i6 + i7);
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+		if(vg.isBlockNormalCube(integer2 - 1, integer3, integer4)) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 1);
+		} else if(vg.isBlockNormalCube(integer2 + 1, integer3, integer4)) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 2);
+		} else if(vg.isBlockNormalCube(integer2, integer3, integer4 - 1)) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 3);
+		} else if(vg.isBlockNormalCube(integer2, integer3, integer4 + 1)) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 4);
+		}
+
+		this.checkIfAttachedToBlock(vg, integer2, integer3, integer4);
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		if(this.checkIfAttachedToBlock(vg, integer2, integer3, integer4)) {
+			int i6 = vg.getBlockMetadata(integer2, integer3, integer4) & 7;
+			boolean z7 = false;
+			if(!vg.isBlockNormalCube(integer2 - 1, integer3, integer4) && i6 == 1) {
+				z7 = true;
+			}
+
+			if(!vg.isBlockNormalCube(integer2 + 1, integer3, integer4) && i6 == 2) {
+				z7 = true;
+			}
+
+			if(!vg.isBlockNormalCube(integer2, integer3, integer4 - 1) && i6 == 3) {
+				z7 = true;
+			}
+
+			if(!vg.isBlockNormalCube(integer2, integer3, integer4 + 1) && i6 == 4) {
+				z7 = true;
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+				vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+			}
+		}
+
+	}
+
+	private boolean checkIfAttachedToBlock(World vg, int integer2, int integer3, int integer4) {
+		if(!this.canPlaceBlockAt(vg, integer2, integer3, integer4)) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		int i5 = abt.getBlockMetadata(integer2, integer3, integer4);
+		int i6 = i5 & 7;
+		boolean z7 = (i5 & 8) > 0;
+		float f8 = 0.375F;
+		float f9 = 0.625F;
+		float f10 = 0.1875F;
+		float f11 = 0.125F;
+		if(z7) {
+			f11 = 0.0625F;
+		}
+
+		if(i6 == 1) {
+			this.setBlockBounds(0.0F, f8, 0.5F - f10, f11, f9, 0.5F + f10);
+		} else if(i6 == 2) {
+			this.setBlockBounds(1.0F - f11, f8, 0.5F - f10, 1.0F, f9, 0.5F + f10);
+		} else if(i6 == 3) {
+			this.setBlockBounds(0.5F - f10, f8, 0.0F, 0.5F + f10, f9, f11);
+		} else if(i6 == 4) {
+			this.setBlockBounds(0.5F - f10, f8, 1.0F - f11, 0.5F + f10, f9, 1.0F);
+		}
+
+	}
+
+	public void onBlockClicked(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+		this.blockActivated(vg, integer2, integer3, integer4, gb);
+	}
+
+	public boolean blockActivated(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		int i7 = i6 & 7;
+		int i8 = 8 - (i6 & 8);
+		if(i8 == 0) {
+			return true;
+		} else {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i7 + i8);
+			vg.markBlocksDirty(integer2, integer3, integer4, integer2, integer3, integer4);
+			vg.playSoundEffect((double)integer2 + 0.5D, (double)integer3 + 0.5D, (double)integer4 + 0.5D, "random.click", 0.3F, 0.6F);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4, this.blockID);
+			if(i7 == 1) {
+				vg.notifyBlocksOfNeighborChange(integer2 - 1, integer3, integer4, this.blockID);
+			} else if(i7 == 2) {
+				vg.notifyBlocksOfNeighborChange(integer2 + 1, integer3, integer4, this.blockID);
+			} else if(i7 == 3) {
+				vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 - 1, this.blockID);
+			} else if(i7 == 4) {
+				vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 + 1, this.blockID);
+			} else {
+				vg.notifyBlocksOfNeighborChange(integer2, integer3 - 1, integer4, this.blockID);
+			}
+
+			vg.scheduleBlockUpdate(integer2, integer3, integer4, this.blockID);
+			return true;
+		}
+	}
+
+	public void onBlockRemoval(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockMetadata(integer2, integer3, integer4);
+		if((i5 & 8) > 0) {
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4, this.blockID);
+			int i6 = i5 & 7;
+			if(i6 == 1) {
+				vg.notifyBlocksOfNeighborChange(integer2 - 1, integer3, integer4, this.blockID);
+			} else if(i6 == 2) {
+				vg.notifyBlocksOfNeighborChange(integer2 + 1, integer3, integer4, this.blockID);
+			} else if(i6 == 3) {
+				vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 - 1, this.blockID);
+			} else if(i6 == 4) {
+				vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 + 1, this.blockID);
+			} else {
+				vg.notifyBlocksOfNeighborChange(integer2, integer3 - 1, integer4, this.blockID);
+			}
+		}
+
+		super.onBlockRemoval(vg, integer2, integer3, integer4);
+	}
+
+	public boolean isPoweringTo(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		return (abt.getBlockMetadata(integer2, integer3, integer4) & 8) > 0;
+	}
+
+	public boolean isIndirectlyPoweringTo(World vg, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		if((i6 & 8) == 0) {
+			return false;
+		} else {
+			int i7 = i6 & 7;
+			return i7 == 5 && integer5 == 1 ? true : (i7 == 4 && integer5 == 2 ? true : (i7 == 3 && integer5 == 3 ? true : (i7 == 2 && integer5 == 4 ? true : i7 == 1 && integer5 == 5)));
+		}
+	}
+
+	public boolean canProvidePower() {
+		return true;
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		if((i6 & 8) != 0) {
+			vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i6 & 7);
+			vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4, this.blockID);
+			int i7 = i6 & 7;
+			if(i7 == 1) {
+				vg.notifyBlocksOfNeighborChange(integer2 - 1, integer3, integer4, this.blockID);
+			} else if(i7 == 2) {
+				vg.notifyBlocksOfNeighborChange(integer2 + 1, integer3, integer4, this.blockID);
+			} else if(i7 == 3) {
+				vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 - 1, this.blockID);
+			} else if(i7 == 4) {
+				vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4 + 1, this.blockID);
+			} else {
+				vg.notifyBlocksOfNeighborChange(integer2, integer3 - 1, integer4, this.blockID);
+			}
+
+			vg.playSoundEffect((double)integer2 + 0.5D, (double)integer3 + 0.5D, (double)integer4 + 0.5D, "random.click", 0.3F, 0.5F);
+			vg.markBlocksDirty(integer2, integer3, integer4, integer2, integer3, integer4);
+		}
+	}
+
+	public void setBlockBoundsForItemRender() {
+		float f1 = 0.1875F;
+		float f2 = 0.125F;
+		float f3 = 0.125F;
+		this.setBlockBounds(0.5F - f1, 0.5F - f2, 0.5F - f3, 0.5F + f1, 0.5F + f2, 0.5F + f3);
+	}
+}
--- net/minecraft/src/EntityExplodeFX.java
+++ net/minecraft/src/EntityExplodeFX.java
@@ -1,18 +1,18 @@
 package net.minecraft.src;
 
 public class EntityExplodeFX extends EntityFX {
-	public EntityExplodeFX(World var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-		super(var1, var2, var4, var6, var8, var10, var12);
-		this.motionX = var8 + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.05F);
-		this.motionY = var10 + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.05F);
-		this.motionZ = var12 + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.05F);
+	public EntityExplodeFX(World worldObj, double x, double y, double z, double motionX, double motionY, double motionZ) {
+		super(worldObj, x, y, z, motionX, motionY, motionZ);
+		this.motionX = motionX + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.05F);
+		this.motionY = motionY + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.05F);
+		this.motionZ = motionZ + (double)((float)(Math.random() * 2.0D - 1.0D) * 0.05F);
 		this.particleRed = this.particleGreen = this.particleBlue = this.rand.nextFloat() * 0.3F + 0.7F;
 		this.particleScale = this.rand.nextFloat() * this.rand.nextFloat() * 6.0F + 1.0F;
 		this.particleMaxAge = (int)(16.0D / ((double)this.rand.nextFloat() * 0.8D + 0.2D)) + 2;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		super.renderParticle(var1, var2, var3, var4, var5, var6, var7);
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		super.renderParticle(tessellator, renderPartialTick, xOffset, yOffset, zOffset, xOffset2, zOffset2);
 	}
 
 	public void onUpdate() {
--- net/minecraft/src/IBlockAccess.java
+++ net/minecraft/src/IBlockAccess.java
@@ -1,15 +1,19 @@
 package net.minecraft.src;
 
 public interface IBlockAccess {
-	int getBlockId(int var1, int var2, int var3);
-
-	TileEntity getBlockTileEntity(int var1, int var2, int var3);
-
-	float getBrightness(int var1, int var2, int var3);
-
-	int getBlockMetadata(int var1, int var2, int var3);
-
-	Material getBlockMaterial(int var1, int var2, int var3);
-
-	boolean isBlockNormalCube(int var1, int var2, int var3);
+	int getBlockId(int i1, int i2, int i3);
+
+	TileEntity getBlockTileEntity(int i1, int i2, int i3);
+
+	float getRenderSideBrightness(int i1, int i2, int i3);
+
+	float getBrightness(int i1, int i2, int i3);
+
+	int getBlockMetadata(int i1, int i2, int i3);
+
+	Material getBlockMaterial(int i1, int i2, int i3);
+
+	boolean isBlockNormalCube(int i1, int i2, int i3);
+
+	BiomeInterface func_7342_9805301CWs03An9555qIw883P54dcq9802DkM5DuquNweM1NH26RH6oP02mr();
 }
--- /dev/null
+++ net/minecraft/src/OverlayFreerunClient.java
@@ -1,0 +1,47 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+public class OverlayFreerunClient {
+	private Minecraft tmc;
+
+	public OverlayFreerunClient(Minecraft minecraft) {
+		this.tmc = minecraft;
+	}
+
+	public String timeString(long long1) {
+		long j3 = long1 / 20L;
+		long j5 = j3 / 60L;
+		String string7 = Long.toString(j5);
+		if(string7.length() == 1) {
+			string7 = "0" + string7;
+		}
+
+		String string8 = Long.toString(j3 % 60L);
+		if(string8.length() == 1) {
+			string8 = "0" + string8;
+		}
+
+		int i9 = (int)((float)(long1 % 20L) / 20.0F * 1000.0F);
+
+		String string10;
+		for(string10 = Integer.toString(i9); string10.length() < 3; string10 = "0" + string10) {
+		}
+
+		return string7 + ":" + string8 + "." + string10;
+	}
+
+	public void RenderOverlay(GuiIngame eu, int integer2, int integer3) {
+		FontRenderer fontRenderer4 = this.tmc.fontRenderer;
+		EntityPlayerFreerunClient entityPlayerFreerunClient5 = (EntityPlayerFreerunClient)InputHandler.mc.thePlayer;
+		String string6;
+		if(!entityPlayerFreerunClient5.countingTime) {
+			string6 = "Time: " + this.timeString(entityPlayerFreerunClient5.finalTime);
+			GuiIngame.drawString(fontRenderer4, string6, integer2 / 2 - fontRenderer4.getStringWidth(string6) / 2, integer3 / 4, 0xFFFFFF);
+		} else {
+			string6 = "Time: " + this.timeString(entityPlayerFreerunClient5.worldIn.worldTime - entityPlayerFreerunClient5.timerStartTicks);
+			GuiIngame.drawString(fontRenderer4, string6, integer2 / 2 - fontRenderer4.getStringWidth(string6) / 2, integer3 / 4, 0xFFFFFF);
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandMcPlaymus.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandMcPlaymus extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8557_5190D4n4SoeLxueaYS8l65frYn186Pwg39496299XskGE0a6moE2vWeewlu8;
+    
+    CommandMcPlaymus(final CommandManager abb) {
+        this.field_8557_5190D4n4SoeLxueaYS8l65frYn186Pwg39496299XskGE0a6moE2vWeewlu8 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.sndManager.playMusic((String)arr[0]);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/ItemHearthenMirror.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+public class ItemHearthenMirror extends Item {
+	public ItemHearthenMirror(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		InputHandler.mc.theWorld.spawnX = (int)InputHandler.mc.thePlayer.posX;
+		InputHandler.mc.theWorld.spawnY = (int)InputHandler.mc.thePlayer.posY;
+		InputHandler.mc.theWorld.spawnZ = (int)InputHandler.mc.thePlayer.posZ;
+		InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("New Spawn Set!", 4000);
+		return itemStack;
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiImageHandler.java
@@ -1,0 +1,49 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.opengl.GL11;
+
+public class GuiImageHandler {
+	public String field_9956_15GOe6410z7Fl452j2yZISN60Abc7m54nek0mM34PB830a3aHI564YEQpTcg = "";
+	public long field_9959_2z7m6wy9hEF64p5bkN18lT8hue918wvfCi32Y1F8YZ1lMx74F677nBk1mCoy = -1L;
+	public float field_9958_8arD5y78p7HE19V4H5j2EB2Pen1H6kuEwfZr9ydTpK7yv06H116Bv2UwgTTO = 1500.0F;
+	public Minecraft field_9957_88TKCe15qwkF3hWV6s4r2KV2Z3oh19W2eAvR7XN4tik6u229COobx4z3PX45;
+
+	public GuiImageHandler(Minecraft minecraft, String string, float float3) {
+		this.field_9956_15GOe6410z7Fl452j2yZISN60Abc7m54nek0mM34PB830a3aHI564YEQpTcg = string;
+		this.field_9958_8arD5y78p7HE19V4H5j2EB2Pen1H6kuEwfZr9ydTpK7yv06H116Bv2UwgTTO = float3;
+		this.field_9959_2z7m6wy9hEF64p5bkN18lT8hue918wvfCi32Y1F8YZ1lMx74F677nBk1mCoy = System.currentTimeMillis();
+		this.field_9957_88TKCe15qwkF3hWV6s4r2KV2Z3oh19W2eAvR7XN4tik6u229COobx4z3PX45 = minecraft;
+	}
+
+	public void func_9955_5630DX5SV053d8F74A11907j9t7039N0rdr37W800V11wnAC9AhArcyC6F5W(String string) {
+		this.field_9956_15GOe6410z7Fl452j2yZISN60Abc7m54nek0mM34PB830a3aHI564YEQpTcg = string;
+		this.field_9959_2z7m6wy9hEF64p5bkN18lT8hue918wvfCi32Y1F8YZ1lMx74F677nBk1mCoy = System.currentTimeMillis();
+	}
+
+	public void func_9954_31xL9lqzsd832NIF2fnqGsFer65B6pP9dW8u4402h7H3mW9p6ZjIZK9RM2zT(int integer1, int integer2) {
+		if(!this.field_9956_15GOe6410z7Fl452j2yZISN60Abc7m54nek0mM34PB830a3aHI564YEQpTcg.isEmpty()) {
+			GL11.glDisable(GL11.GL_LIGHTING);
+			GL11.glDisable(GL11.GL_FOG);
+			Tessellator tessellator3 = Tessellator.instance;
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.field_9957_88TKCe15qwkF3hWV6s4r2KV2Z3oh19W2eAvR7XN4tik6u229COobx4z3PX45.renderEngine.getTexture(this.field_9956_15GOe6410z7Fl452j2yZISN60Abc7m54nek0mM34PB830a3aHI564YEQpTcg));
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			tessellator3.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator3.setColorOpaque_I(7368816);
+			tessellator3.addVertexWithUV(0.0D, (double)integer2, 0.0D, 0.0D, 1.0D);
+			tessellator3.addVertexWithUV((double)integer1, (double)integer2, 0.0D, 1.0D, 1.0D);
+			tessellator3.addVertexWithUV((double)integer1, 0.0D, 0.0D, 1.0D, 0.0D);
+			tessellator3.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+			tessellator3.draw();
+			float f4 = 1.0F - (float)(System.currentTimeMillis() - this.field_9959_2z7m6wy9hEF64p5bkN18lT8hue918wvfCi32Y1F8YZ1lMx74F677nBk1mCoy) / this.field_9958_8arD5y78p7HE19V4H5j2EB2Pen1H6kuEwfZr9ydTpK7yv06H116Bv2UwgTTO;
+			if(f4 < 0.0F) {
+				f4 = 0.0F;
+			}
+
+			int i5 = (int)(255.0F * f4) * 16777216;
+			Gui.drawRect(0, 0, integer1, integer2, i5);
+		}
+
+	}
+}
--- net/minecraft/src/TileEntity.java
+++ net/minecraft/src/TileEntity.java
@@ -11,55 +11,55 @@
 	public int yCoord;
 	public int zCoord;
 
-	private static void addMapping(Class var0, String var1) {
-		if(classToNameMap.containsKey(var1)) {
-			throw new IllegalArgumentException("Duplicate id: " + var1);
+	private static void addMapping(Class tileClass, String name) {
+		if(nameToClassMap.containsKey(name)) {
+			throw new IllegalArgumentException("Duplicate id: " + name);
 		} else {
-			nameToClassMap.put(var1, var0);
-			classToNameMap.put(var0, var1);
+			nameToClassMap.put(name, tileClass);
+			classToNameMap.put(tileClass, name);
 		}
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		this.xCoord = var1.getInteger("x");
-		this.yCoord = var1.getInteger("y");
-		this.zCoord = var1.getInteger("z");
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		this.xCoord = nbttagcompound.getInteger("x");
+		this.yCoord = nbttagcompound.getInteger("y");
+		this.zCoord = nbttagcompound.getInteger("z");
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		String var2 = (String)classToNameMap.get(this.getClass());
-		if(var2 == null) {
+	public void writeToNBT(NBTTagCompound nbttagcompound) {
+		String string2 = (String)classToNameMap.get(this.getClass());
+		if(string2 == null) {
 			throw new RuntimeException(this.getClass() + " is missing a mapping! This is a bug!");
 		} else {
-			var1.setString("id", var2);
-			var1.setInteger("x", this.xCoord);
-			var1.setInteger("y", this.yCoord);
-			var1.setInteger("z", this.zCoord);
+			nbttagcompound.setString("id", string2);
+			nbttagcompound.setInteger("x", this.xCoord);
+			nbttagcompound.setInteger("y", this.yCoord);
+			nbttagcompound.setInteger("z", this.zCoord);
 		}
 	}
 
 	public void updateEntity() {
 	}
 
-	public static TileEntity createAndLoadEntity(NBTTagCompound var0) {
-		TileEntity var1 = null;
+	public static TileEntity createAndLoadEntity(NBTTagCompound compoundTag) {
+		TileEntity tileEntity1 = null;
 
 		try {
-			Class var2 = (Class)nameToClassMap.get(var0.getString("id"));
-			if(var2 != null) {
-				var1 = (TileEntity)var2.newInstance();
+			Class class2 = (Class)nameToClassMap.get(compoundTag.getString("id"));
+			if(class2 != null) {
+				tileEntity1 = (TileEntity)class2.newInstance();
 			}
-		} catch (Exception var3) {
-			var3.printStackTrace();
+		} catch (Exception exception3) {
+			exception3.printStackTrace();
 		}
 
-		if(var1 != null) {
-			var1.readFromNBT(var0);
+		if(tileEntity1 != null) {
+			tileEntity1.readFromNBT(compoundTag);
 		} else {
-			System.out.println("Skipping TileEntity with id " + var0.getString("id"));
+			System.out.println("Skipping TileEntity with id " + compoundTag.getString("id"));
 		}
 
-		return var1;
+		return tileEntity1;
 	}
 
 	public int getBlockMetadata() {
@@ -70,11 +70,11 @@
 		this.worldObj.updateTileEntityChunkAndDoNothing(this.xCoord, this.yCoord, this.zCoord, this);
 	}
 
-	public double getDistanceFrom(double var1, double var3, double var5) {
-		double var7 = (double)this.xCoord + 0.5D - var1;
-		double var9 = (double)this.yCoord + 0.5D - var3;
-		double var11 = (double)this.zCoord + 0.5D - var5;
-		return var7 * var7 + var9 * var9 + var11 * var11;
+	public double getDistanceFrom(double x, double y, double z) {
+		double d7 = (double)this.xCoord + 0.5D - x;
+		double d9 = (double)this.yCoord + 0.5D - y;
+		double d11 = (double)this.zCoord + 0.5D - z;
+		return d7 * d7 + d9 * d9 + d11 * d11;
 	}
 
 	public Block getBlockType() {
@@ -86,5 +86,8 @@
 		addMapping(TileEntityChest.class, "Chest");
 		addMapping(TileEntitySign.class, "Sign");
 		addMapping(TileEntityMobSpawner.class, "MobSpawner");
+		addMapping(TileEntityEssenceFountain.class, "EssenceFountain");
+		addMapping(TileEntityFreezer.class, "Freezer");
+		ModLoader.RegisterAllTileEntities();
 	}
 }
--- /dev/null
+++ net/minecraft/src/GuiInGameUnknownClass2.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+public class GuiInGameUnknownClass2 {
+	public String field_8629_38yXZ5dFY9GgxhmHS221M01TS31EN5EQ169OUGe5B07fwQaCd3Y2DMP0SnB5;
+	public int field_8630_3VXD2Ebm4sq1Ua61nY0XjjdZz4zX5u1B4NPjzd6i9nYHZZV1Z4rOO6r4NkAR;
+	public int field_8627_0ZmECs21Yya5NZUsnBNbB5tPFhkwONMzlzVXHX4jsV5aynDc020B97BLqocx;
+	public long field_8628_5D60yv253cRcGA1p2c559jzTJvqGE369RAfPv6g62Q8uXkc617ON6RdFwLZq = -1L;
+
+	public GuiInGameUnknownClass2(String string, int integer2, int integer3) {
+		this.field_8629_38yXZ5dFY9GgxhmHS221M01TS31EN5EQ169OUGe5B07fwQaCd3Y2DMP0SnB5 = string;
+		this.field_8630_3VXD2Ebm4sq1Ua61nY0XjjdZz4zX5u1B4NPjzd6i9nYHZZV1Z4rOO6r4NkAR = integer2;
+		this.field_8627_0ZmECs21Yya5NZUsnBNbB5tPFhkwONMzlzVXHX4jsV5aynDc020B97BLqocx = integer3;
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandManagerUnknownClass.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+public class CommandManagerUnknownClass {
+	public String field_12024_1q5eqd4V75vh5r0RkoHJF19l4S347yEp0rA4sR70sQOr8jdcCj1Z12u5PSx9;
+	public Class[] field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640;
+	public CommandUnknownClass field_12023_4a6hGbi1yf1wisYXW788UpKE9grOBLI6J908Opcn8Zv63ROZKy49K6Z3M3gz;
+
+	public CommandManagerUnknownClass(String string, Class[] arr, CommandUnknownClass rv) {
+		this.field_12024_1q5eqd4V75vh5r0RkoHJF19l4S347yEp0rA4sR70sQOr8jdcCj1Z12u5PSx9 = string;
+		this.field_12025_8woh0R80d6qkLeqjZZxcI1UyY5akRtO536j0MS1hjq593yQObx6xE0Qk6640 = arr;
+		this.field_12023_4a6hGbi1yf1wisYXW788UpKE9grOBLI6J908Opcn8Zv63ROZKy49K6Z3M3gz = rv;
+	}
+}
--- net/minecraft/src/OSMap.java
+++ net/minecraft/src/OSMap.java
@@ -6,22 +6,22 @@
 	static {
 		try {
 			osValues[EnumOS.linux.ordinal()] = 1;
-		} catch (NoSuchFieldError var4) {
+		} catch (NoSuchFieldError noSuchFieldError4) {
 		}
 
 		try {
 			osValues[EnumOS.solaris.ordinal()] = 2;
-		} catch (NoSuchFieldError var3) {
+		} catch (NoSuchFieldError noSuchFieldError3) {
 		}
 
 		try {
 			osValues[EnumOS.windows.ordinal()] = 3;
-		} catch (NoSuchFieldError var2) {
+		} catch (NoSuchFieldError noSuchFieldError2) {
 		}
 
 		try {
 			osValues[EnumOS.macos.ordinal()] = 4;
-		} catch (NoSuchFieldError var1) {
+		} catch (NoSuchFieldError noSuchFieldError1) {
 		}
 
 	}
--- net/minecraft/src/ItemReed.java
+++ net/minecraft/src/ItemReed.java
@@ -3,49 +3,49 @@
 public class ItemReed extends Item {
 	private int spawnID;
 
-	public ItemReed(int var1, Block var2) {
-		super(var1);
-		this.spawnID = var2.blockID;
+	public ItemReed(int itemID, Block reed) {
+		super(itemID);
+		this.spawnID = reed.blockID;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var3.getBlockId(var4, var5, var6) == Block.snow.blockID) {
-			var7 = 0;
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(world.getBlockId(x, y, z) == Block.snow.blockID) {
+			side = 0;
 		} else {
-			if(var7 == 0) {
-				--var5;
-			}
-
-			if(var7 == 1) {
-				++var5;
-			}
-
-			if(var7 == 2) {
-				--var6;
-			}
-
-			if(var7 == 3) {
-				++var6;
-			}
-
-			if(var7 == 4) {
-				--var4;
-			}
-
-			if(var7 == 5) {
-				++var4;
+			if(side == 0) {
+				--y;
+			}
+
+			if(side == 1) {
+				++y;
+			}
+
+			if(side == 2) {
+				--z;
+			}
+
+			if(side == 3) {
+				++z;
+			}
+
+			if(side == 4) {
+				--x;
+			}
+
+			if(side == 5) {
+				++x;
 			}
 		}
 
-		if(var1.stackSize == 0) {
+		if(stack.stackSize == 0) {
 			return false;
 		} else {
-			if(var3.canBlockBePlacedAt(this.spawnID, var4, var5, var6, false)) {
-				Block var8 = Block.blocksList[this.spawnID];
-				if(var3.setBlockWithNotify(var4, var5, var6, this.spawnID)) {
-					Block.blocksList[this.spawnID].onBlockPlaced(var3, var4, var5, var6, var7);
-					var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var8.stepSound.getStepSound(), (var8.stepSound.getVolume() + 1.0F) / 2.0F, var8.stepSound.getPitch() * 0.8F);
-					--var1.stackSize;
+			if(world.canBlockBePlacedAt(this.spawnID, x, y, z, false)) {
+				Block block8 = Block.blocksList[this.spawnID];
+				if(world.setBlockWithNotify(x, y, z, this.spawnID)) {
+					Block.blocksList[this.spawnID].onBlockPlaced(world, x, y, z, side);
+					world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), block8.stepSound.getStepSound(), (block8.stepSound.getVolume() + 1.0F) / 2.0F, block8.stepSound.getPitch() * 0.8F);
+					--stack.stackSize;
 				}
 			}
 
--- /dev/null
+++ net/minecraft/src/QueuedChange.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class QueuedChange {
+	public int x;
+	public int y;
+	public int z;
+	public int id;
+
+	public QueuedChange(int integer1, int integer2, int integer3, int integer4) {
+		this.x = integer1;
+		this.y = integer2;
+		this.z = integer3;
+		this.id = integer4;
+	}
+}
--- /dev/null
+++ net/minecraft/src/DS5Packet.java
@@ -1,0 +1,26 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class DS5Packet {
+	public List ds5Instructions = new ArrayList();
+
+	public void AddInstruction(DS5Instruction mt) {
+		this.ds5Instructions.add(mt);
+	}
+
+	public String buildJSON() {
+		String string1 = "{\"instructions\":[";
+
+		for(int i2 = 0; i2 != this.ds5Instructions.size(); ++i2) {
+			string1 = string1 + ((DS5Instruction)this.ds5Instructions.get(i2)).GetJSON();
+			if(i2 != this.ds5Instructions.size() - 1) {
+				string1 = string1 + ",";
+			}
+		}
+
+		string1 = string1 + "]}";
+		return string1;
+	}
+}
--- net/minecraft/src/MinecartTrackLogic.java
+++ net/minecraft/src/MinecartTrackLogic.java
@@ -3,7 +3,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-class MinecartTrackLogic {
+public class MinecartTrackLogic {
 	private World worldObj;
 	private int trackX;
 	private int trackY;
@@ -12,14 +12,14 @@
 	private List connectedTracks;
 	final BlockMinecartTrack minecartTrack;
 
-	public MinecartTrackLogic(BlockMinecartTrack var1, World var2, int var3, int var4, int var5) {
-		this.minecartTrack = var1;
+	public MinecartTrackLogic(BlockMinecartTrack minecartTrack, World world, int trackX, int trackY, int trackZ) {
+		this.minecartTrack = minecartTrack;
 		this.connectedTracks = new ArrayList();
-		this.worldObj = var2;
-		this.trackX = var3;
-		this.trackY = var4;
-		this.trackZ = var5;
-		this.trackMetadata = var2.getBlockMetadata(var3, var4, var5);
+		this.worldObj = world;
+		this.trackX = trackX;
+		this.trackY = trackY;
+		this.trackZ = trackZ;
+		this.trackMetadata = world.getBlockMetadata(trackX, trackY, trackZ);
 		this.calculateConnectedTracks();
 	}
 
@@ -60,29 +60,29 @@
 	}
 
 	private void refreshConnectedTracks() {
-		for(int var1 = 0; var1 < this.connectedTracks.size(); ++var1) {
-			MinecartTrackLogic var2 = this.getMinecartTrackLogic((ChunkPosition)this.connectedTracks.get(var1));
-			if(var2 != null && var2.isConnectedTo(this)) {
-				this.connectedTracks.set(var1, new ChunkPosition(var2.trackX, var2.trackY, var2.trackZ));
+		for(int i1 = 0; i1 < this.connectedTracks.size(); ++i1) {
+			MinecartTrackLogic minecartTrackLogic2 = this.getMinecartTrackLogic((ChunkPosition)this.connectedTracks.get(i1));
+			if(minecartTrackLogic2 != null && minecartTrackLogic2.isConnectedTo(this)) {
+				this.connectedTracks.set(i1, new ChunkPosition(minecartTrackLogic2.trackX, minecartTrackLogic2.trackY, minecartTrackLogic2.trackZ));
 			} else {
-				this.connectedTracks.remove(var1--);
+				this.connectedTracks.remove(i1--);
 			}
 		}
 
 	}
 
-	private boolean isMinecartTrack(int var1, int var2, int var3) {
-		return this.worldObj.getBlockId(var1, var2, var3) == this.minecartTrack.blockID ? true : (this.worldObj.getBlockId(var1, var2 + 1, var3) == this.minecartTrack.blockID ? true : this.worldObj.getBlockId(var1, var2 - 1, var3) == this.minecartTrack.blockID);
-	}
-
-	private MinecartTrackLogic getMinecartTrackLogic(ChunkPosition var1) {
-		return this.worldObj.getBlockId(var1.x, var1.y, var1.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, var1.x, var1.y, var1.z) : (this.worldObj.getBlockId(var1.x, var1.y + 1, var1.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, var1.x, var1.y + 1, var1.z) : (this.worldObj.getBlockId(var1.x, var1.y - 1, var1.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, var1.x, var1.y - 1, var1.z) : null));
-	}
-
-	private boolean isConnectedTo(MinecartTrackLogic var1) {
-		for(int var2 = 0; var2 < this.connectedTracks.size(); ++var2) {
-			ChunkPosition var3 = (ChunkPosition)this.connectedTracks.get(var2);
-			if(var3.x == var1.trackX && var3.z == var1.trackZ) {
+	private boolean isMinecartTrack(int x, int y, int z) {
+		return this.worldObj.getBlockId(x, y, z) == this.minecartTrack.blockID ? true : (this.worldObj.getBlockId(x, y + 1, z) == this.minecartTrack.blockID ? true : this.worldObj.getBlockId(x, y - 1, z) == this.minecartTrack.blockID);
+	}
+
+	private MinecartTrackLogic getMinecartTrackLogic(ChunkPosition chunkPos) {
+		return this.worldObj.getBlockId(chunkPos.x, chunkPos.y, chunkPos.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, chunkPos.x, chunkPos.y, chunkPos.z) : (this.worldObj.getBlockId(chunkPos.x, chunkPos.y + 1, chunkPos.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, chunkPos.x, chunkPos.y + 1, chunkPos.z) : (this.worldObj.getBlockId(chunkPos.x, chunkPos.y - 1, chunkPos.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, chunkPos.x, chunkPos.y - 1, chunkPos.z) : null));
+	}
+
+	private boolean isConnectedTo(MinecartTrackLogic trackLogic) {
+		for(int i2 = 0; i2 < this.connectedTracks.size(); ++i2) {
+			ChunkPosition chunkPosition3 = (ChunkPosition)this.connectedTracks.get(i2);
+			if(chunkPosition3.x == trackLogic.trackX && chunkPosition3.z == trackLogic.trackZ) {
 				return true;
 			}
 		}
@@ -90,10 +90,10 @@
 		return false;
 	}
 
-	private boolean isInTrack(int var1, int var2, int var3) {
-		for(int var4 = 0; var4 < this.connectedTracks.size(); ++var4) {
-			ChunkPosition var5 = (ChunkPosition)this.connectedTracks.get(var4);
-			if(var5.x == var1 && var5.z == var3) {
+	private boolean isInTrack(int x, int y, int z) {
+		for(int i4 = 0; i4 < this.connectedTracks.size(); ++i4) {
+			ChunkPosition chunkPosition5 = (ChunkPosition)this.connectedTracks.get(i4);
+			if(chunkPosition5.x == x && chunkPosition5.z == z) {
 				return true;
 			}
 		}
@@ -102,222 +102,222 @@
 	}
 
 	private int getAdjacentTracks() {
-		int var1 = 0;
+		int i1 = 0;
 		if(this.isMinecartTrack(this.trackX, this.trackY, this.trackZ - 1)) {
-			++var1;
+			++i1;
 		}
 
 		if(this.isMinecartTrack(this.trackX, this.trackY, this.trackZ + 1)) {
-			++var1;
+			++i1;
 		}
 
 		if(this.isMinecartTrack(this.trackX - 1, this.trackY, this.trackZ)) {
-			++var1;
+			++i1;
 		}
 
 		if(this.isMinecartTrack(this.trackX + 1, this.trackY, this.trackZ)) {
-			++var1;
+			++i1;
 		}
 
-		return var1;
+		return i1;
 	}
 
-	private boolean canConnectTo(MinecartTrackLogic var1) {
-		if(this.isConnectedTo(var1)) {
+	private boolean canConnectTo(MinecartTrackLogic trackLogic) {
+		if(this.isConnectedTo(trackLogic)) {
 			return true;
 		} else if(this.connectedTracks.size() == 2) {
 			return false;
 		} else if(this.connectedTracks.size() == 0) {
 			return true;
 		} else {
-			ChunkPosition var2 = (ChunkPosition)this.connectedTracks.get(0);
-			return var1.trackY == this.trackY && var2.y == this.trackY ? true : true;
+			ChunkPosition chunkPosition2 = (ChunkPosition)this.connectedTracks.get(0);
+			return trackLogic.trackY == this.trackY && chunkPosition2.y == this.trackY ? true : true;
 		}
 	}
 
-	private void connectToNeighbor(MinecartTrackLogic var1) {
-		this.connectedTracks.add(new ChunkPosition(var1.trackX, var1.trackY, var1.trackZ));
-		boolean var2 = this.isInTrack(this.trackX, this.trackY, this.trackZ - 1);
-		boolean var3 = this.isInTrack(this.trackX, this.trackY, this.trackZ + 1);
-		boolean var4 = this.isInTrack(this.trackX - 1, this.trackY, this.trackZ);
-		boolean var5 = this.isInTrack(this.trackX + 1, this.trackY, this.trackZ);
-		byte var6 = -1;
-		if(var2 || var3) {
-			var6 = 0;
-		}
-
-		if(var4 || var5) {
-			var6 = 1;
-		}
-
-		if(var3 && var5 && !var2 && !var4) {
-			var6 = 6;
-		}
-
-		if(var3 && var4 && !var2 && !var5) {
-			var6 = 7;
-		}
-
-		if(var2 && var4 && !var3 && !var5) {
-			var6 = 8;
-		}
-
-		if(var2 && var5 && !var3 && !var4) {
-			var6 = 9;
-		}
-
-		if(var6 == 0) {
+	private void connectToNeighbor(MinecartTrackLogic trackLogic) {
+		this.connectedTracks.add(new ChunkPosition(trackLogic.trackX, trackLogic.trackY, trackLogic.trackZ));
+		boolean z2 = this.isInTrack(this.trackX, this.trackY, this.trackZ - 1);
+		boolean z3 = this.isInTrack(this.trackX, this.trackY, this.trackZ + 1);
+		boolean z4 = this.isInTrack(this.trackX - 1, this.trackY, this.trackZ);
+		boolean z5 = this.isInTrack(this.trackX + 1, this.trackY, this.trackZ);
+		byte b6 = -1;
+		if(z2 || z3) {
+			b6 = 0;
+		}
+
+		if(z4 || z5) {
+			b6 = 1;
+		}
+
+		if(z3 && z5 && !z2 && !z4) {
+			b6 = 6;
+		}
+
+		if(z3 && z4 && !z2 && !z5) {
+			b6 = 7;
+		}
+
+		if(z2 && z4 && !z3 && !z5) {
+			b6 = 8;
+		}
+
+		if(z2 && z5 && !z3 && !z4) {
+			b6 = 9;
+		}
+
+		if(b6 == 0) {
 			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ - 1) == this.minecartTrack.blockID) {
-				var6 = 4;
+				b6 = 4;
 			}
 
 			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ + 1) == this.minecartTrack.blockID) {
-				var6 = 5;
+				b6 = 5;
 			}
 		}
 
-		if(var6 == 1) {
+		if(b6 == 1) {
 			if(this.worldObj.getBlockId(this.trackX + 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
-				var6 = 2;
+				b6 = 2;
 			}
 
 			if(this.worldObj.getBlockId(this.trackX - 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
-				var6 = 3;
+				b6 = 3;
 			}
 		}
 
-		if(var6 < 0) {
-			var6 = 0;
+		if(b6 < 0) {
+			b6 = 0;
 		}
 
-		this.worldObj.setBlockMetadataWithNotify(this.trackX, this.trackY, this.trackZ, var6);
+		this.worldObj.setBlockMetadataWithNotify(this.trackX, this.trackY, this.trackZ, b6);
 	}
 
-	private boolean canConnectFrom(int var1, int var2, int var3) {
-		MinecartTrackLogic var4 = this.getMinecartTrackLogic(new ChunkPosition(var1, var2, var3));
-		if(var4 == null) {
+	private boolean canConnectFrom(int x, int y, int z) {
+		MinecartTrackLogic minecartTrackLogic4 = this.getMinecartTrackLogic(new ChunkPosition(x, y, z));
+		if(minecartTrackLogic4 == null) {
 			return false;
 		} else {
-			var4.refreshConnectedTracks();
-			return var4.canConnectTo(this);
+			minecartTrackLogic4.refreshConnectedTracks();
+			return minecartTrackLogic4.canConnectTo(this);
 		}
 	}
 
-	public void place(boolean var1) {
-		boolean var2 = this.canConnectFrom(this.trackX, this.trackY, this.trackZ - 1);
-		boolean var3 = this.canConnectFrom(this.trackX, this.trackY, this.trackZ + 1);
-		boolean var4 = this.canConnectFrom(this.trackX - 1, this.trackY, this.trackZ);
-		boolean var5 = this.canConnectFrom(this.trackX + 1, this.trackY, this.trackZ);
-		byte var6 = -1;
-		if((var2 || var3) && !var4 && !var5) {
-			var6 = 0;
-		}
-
-		if((var4 || var5) && !var2 && !var3) {
-			var6 = 1;
-		}
-
-		if(var3 && var5 && !var2 && !var4) {
-			var6 = 6;
-		}
-
-		if(var3 && var4 && !var2 && !var5) {
-			var6 = 7;
-		}
-
-		if(var2 && var4 && !var3 && !var5) {
-			var6 = 8;
-		}
-
-		if(var2 && var5 && !var3 && !var4) {
-			var6 = 9;
-		}
-
-		if(var6 == -1) {
-			if(var2 || var3) {
-				var6 = 0;
-			}
-
-			if(var4 || var5) {
-				var6 = 1;
-			}
-
-			if(var1) {
-				if(var3 && var5) {
-					var6 = 6;
-				}
-
-				if(var4 && var3) {
-					var6 = 7;
-				}
-
-				if(var5 && var2) {
-					var6 = 9;
-				}
-
-				if(var2 && var4) {
-					var6 = 8;
+	public void place(boolean flag) {
+		boolean z2 = this.canConnectFrom(this.trackX, this.trackY, this.trackZ - 1);
+		boolean z3 = this.canConnectFrom(this.trackX, this.trackY, this.trackZ + 1);
+		boolean z4 = this.canConnectFrom(this.trackX - 1, this.trackY, this.trackZ);
+		boolean z5 = this.canConnectFrom(this.trackX + 1, this.trackY, this.trackZ);
+		byte b6 = -1;
+		if((z2 || z3) && !z4 && !z5) {
+			b6 = 0;
+		}
+
+		if((z4 || z5) && !z2 && !z3) {
+			b6 = 1;
+		}
+
+		if(z3 && z5 && !z2 && !z4) {
+			b6 = 6;
+		}
+
+		if(z3 && z4 && !z2 && !z5) {
+			b6 = 7;
+		}
+
+		if(z2 && z4 && !z3 && !z5) {
+			b6 = 8;
+		}
+
+		if(z2 && z5 && !z3 && !z4) {
+			b6 = 9;
+		}
+
+		if(b6 == -1) {
+			if(z2 || z3) {
+				b6 = 0;
+			}
+
+			if(z4 || z5) {
+				b6 = 1;
+			}
+
+			if(flag) {
+				if(z3 && z5) {
+					b6 = 6;
+				}
+
+				if(z4 && z3) {
+					b6 = 7;
+				}
+
+				if(z5 && z2) {
+					b6 = 9;
+				}
+
+				if(z2 && z4) {
+					b6 = 8;
 				}
 			} else {
-				if(var2 && var4) {
-					var6 = 8;
-				}
-
-				if(var5 && var2) {
-					var6 = 9;
-				}
-
-				if(var4 && var3) {
-					var6 = 7;
-				}
-
-				if(var3 && var5) {
-					var6 = 6;
+				if(z2 && z4) {
+					b6 = 8;
+				}
+
+				if(z5 && z2) {
+					b6 = 9;
+				}
+
+				if(z4 && z3) {
+					b6 = 7;
+				}
+
+				if(z3 && z5) {
+					b6 = 6;
 				}
 			}
 		}
 
-		if(var6 == 0) {
+		if(b6 == 0) {
 			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ - 1) == this.minecartTrack.blockID) {
-				var6 = 4;
+				b6 = 4;
 			}
 
 			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ + 1) == this.minecartTrack.blockID) {
-				var6 = 5;
+				b6 = 5;
 			}
 		}
 
-		if(var6 == 1) {
+		if(b6 == 1) {
 			if(this.worldObj.getBlockId(this.trackX + 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
-				var6 = 2;
+				b6 = 2;
 			}
 
 			if(this.worldObj.getBlockId(this.trackX - 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
-				var6 = 3;
+				b6 = 3;
 			}
 		}
 
-		if(var6 < 0) {
-			var6 = 0;
+		if(b6 < 0) {
+			b6 = 0;
 		}
 
-		this.trackMetadata = var6;
+		this.trackMetadata = b6;
 		this.calculateConnectedTracks();
-		this.worldObj.setBlockMetadataWithNotify(this.trackX, this.trackY, this.trackZ, var6);
+		this.worldObj.setBlockMetadataWithNotify(this.trackX, this.trackY, this.trackZ, b6);
 
-		for(int var7 = 0; var7 < this.connectedTracks.size(); ++var7) {
-			MinecartTrackLogic var8 = this.getMinecartTrackLogic((ChunkPosition)this.connectedTracks.get(var7));
-			if(var8 != null) {
-				var8.refreshConnectedTracks();
-				if(var8.canConnectTo(this)) {
-					var8.connectToNeighbor(this);
+		for(int i7 = 0; i7 < this.connectedTracks.size(); ++i7) {
+			MinecartTrackLogic minecartTrackLogic8 = this.getMinecartTrackLogic((ChunkPosition)this.connectedTracks.get(i7));
+			if(minecartTrackLogic8 != null) {
+				minecartTrackLogic8.refreshConnectedTracks();
+				if(minecartTrackLogic8.canConnectTo(this)) {
+					minecartTrackLogic8.connectToNeighbor(this);
 				}
 			}
 		}
 
 	}
 
-	static int getNAdjacentTracks(MinecartTrackLogic var0) {
-		return var0.getAdjacentTracks();
+	public static int getNAdjacentTracks(MinecartTrackLogic trackLogic) {
+		return trackLogic.getAdjacentTracks();
 	}
 }
--- net/minecraft/src/ItemBucket.java
+++ net/minecraft/src/ItemBucket.java
@@ -3,45 +3,45 @@
 public class ItemBucket extends Item {
 	private int isFull;
 
-	public ItemBucket(int var1, int var2) {
-		super(var1);
+	public ItemBucket(int itemID, int isFull) {
+		super(itemID);
 		this.maxStackSize = 1;
 		this.maxDamage = 64;
-		this.isFull = var2;
+		this.isFull = isFull;
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		float var4 = 1.0F;
-		float var5 = var3.prevRotationPitch + (var3.rotationPitch - var3.prevRotationPitch) * var4;
-		float var6 = var3.prevRotationYaw + (var3.rotationYaw - var3.prevRotationYaw) * var4;
-		double var7 = var3.prevPosX + (var3.posX - var3.prevPosX) * (double)var4;
-		double var9 = var3.prevPosY + (var3.posY - var3.prevPosY) * (double)var4;
-		double var11 = var3.prevPosZ + (var3.posZ - var3.prevPosZ) * (double)var4;
-		Vec3D var13 = Vec3D.createVector(var7, var9, var11);
-		float var14 = MathHelper.cos(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-		float var15 = MathHelper.sin(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-		float var16 = -MathHelper.cos(-var5 * ((float)Math.PI / 180.0F));
-		float var17 = MathHelper.sin(-var5 * ((float)Math.PI / 180.0F));
-		float var18 = var15 * var16;
-		float var20 = var14 * var16;
-		double var21 = 5.0D;
-		Vec3D var23 = var13.addVector((double)var18 * var21, (double)var17 * var21, (double)var20 * var21);
-		MovingObjectPosition var24 = var2.rayTraceBlocks_do(var13, var23, this.isFull == 0);
-		if(var24 == null) {
-			return var1;
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		float f4 = 1.0F;
+		float f5 = entityPlayer.prevRotationPitch + (entityPlayer.rotationPitch - entityPlayer.prevRotationPitch) * f4;
+		float f6 = entityPlayer.prevRotationYaw + (entityPlayer.rotationYaw - entityPlayer.prevRotationYaw) * f4;
+		double d7 = entityPlayer.prevPosX + (entityPlayer.posX - entityPlayer.prevPosX) * (double)f4;
+		double d9 = entityPlayer.prevPosY + (entityPlayer.posY - entityPlayer.prevPosY) * (double)f4;
+		double d11 = entityPlayer.prevPosZ + (entityPlayer.posZ - entityPlayer.prevPosZ) * (double)f4;
+		Vec3D vec3D13 = Vec3D.createVector(d7, d9, d11);
+		float f14 = MathHelper.cos(-f6 * 0.017453292F - (float)Math.PI);
+		float f15 = MathHelper.sin(-f6 * 0.017453292F - (float)Math.PI);
+		float f16 = -MathHelper.cos(-f5 * 0.017453292F);
+		float f17 = MathHelper.sin(-f5 * 0.017453292F);
+		float f18 = f15 * f16;
+		float f19 = f14 * f16;
+		double d20 = 5.0D;
+		Vec3D vec3D22 = vec3D13.addVector((double)f18 * d20, (double)f17 * d20, (double)f19 * d20);
+		MovingObjectPosition movingObjectPosition23 = worldObj.rayTraceBlocks_do(vec3D13, vec3D22, this.isFull == 0);
+		if(movingObjectPosition23 == null) {
+			return itemStack;
 		} else {
-			if(var24.typeOfHit == 0) {
-				int var25 = var24.blockX;
-				int var26 = var24.blockY;
-				int var27 = var24.blockZ;
+			if(movingObjectPosition23.typeOfHit == 0) {
+				int i24 = movingObjectPosition23.blockX;
+				int i25 = movingObjectPosition23.blockY;
+				int i26 = movingObjectPosition23.blockZ;
 				if(this.isFull == 0) {
-					if(var2.getBlockMaterial(var25, var26, var27) == Material.water && var2.getBlockMetadata(var25, var26, var27) == 0) {
-						var2.setBlockWithNotify(var25, var26, var27, 0);
+					if(worldObj.getBlockMaterial(i24, i25, i26) == Material.water && worldObj.getBlockMetadata(i24, i25, i26) == 0) {
+						worldObj.setBlockWithNotify(i24, i25, i26, 0);
 						return new ItemStack(Item.bucketWater);
 					}
 
-					if(var2.getBlockMaterial(var25, var26, var27) == Material.lava && var2.getBlockMetadata(var25, var26, var27) == 0) {
-						var2.setBlockWithNotify(var25, var26, var27, 0);
+					if(worldObj.getBlockMaterial(i24, i25, i26) == Material.lava && worldObj.getBlockMetadata(i24, i25, i26) == 0) {
+						worldObj.setBlockWithNotify(i24, i25, i26, 0);
 						return new ItemStack(Item.bucketLava);
 					}
 				} else {
@@ -49,40 +49,40 @@
 						return new ItemStack(Item.bucketEmpty);
 					}
 
-					if(var24.sideHit == 0) {
-						--var26;
-					}
-
-					if(var24.sideHit == 1) {
-						++var26;
-					}
-
-					if(var24.sideHit == 2) {
-						--var27;
-					}
-
-					if(var24.sideHit == 3) {
-						++var27;
-					}
-
-					if(var24.sideHit == 4) {
-						--var25;
-					}
-
-					if(var24.sideHit == 5) {
-						++var25;
-					}
-
-					if(var2.getBlockId(var25, var26, var27) == 0 || !var2.getBlockMaterial(var25, var26, var27).isSolid()) {
-						var2.setBlockAndMetadataWithNotify(var25, var26, var27, this.isFull, 0);
+					if(movingObjectPosition23.sideHit == 0) {
+						--i25;
+					}
+
+					if(movingObjectPosition23.sideHit == 1) {
+						++i25;
+					}
+
+					if(movingObjectPosition23.sideHit == 2) {
+						--i26;
+					}
+
+					if(movingObjectPosition23.sideHit == 3) {
+						++i26;
+					}
+
+					if(movingObjectPosition23.sideHit == 4) {
+						--i24;
+					}
+
+					if(movingObjectPosition23.sideHit == 5) {
+						++i24;
+					}
+
+					if(worldObj.getBlockId(i24, i25, i26) == 0 || !worldObj.getBlockMaterial(i24, i25, i26).isSolid()) {
+						worldObj.setBlockAndMetadataWithNotify(i24, i25, i26, this.isFull, 0);
 						return new ItemStack(Item.bucketEmpty);
 					}
 				}
-			} else if(this.isFull == 0 && var24.entityHit instanceof EntityCow) {
+			} else if(this.isFull == 0 && movingObjectPosition23.entityHit instanceof EntityCow) {
 				return new ItemStack(Item.bucketMilk);
 			}
 
-			return var1;
+			return itemStack;
 		}
 	}
 }
--- /dev/null
+++ net/minecraft/src/Direction.java
@@ -1,0 +1,40 @@
+package net.minecraft.src;
+
+public enum Direction {
+	XP(0),
+	ZP(1),
+	XM(2),
+	ZM(3);
+
+	public final int direction;
+    private static final /* synthetic */ Direction[] field_11028_22jwMo3j3i2mJ1QA0Y8bYlm6bn5KGA15I2WmRiU6uC1uE04TR47nciPpo8Ua;
+
+
+	public static Direction[] func_11027_56m65k9Ou637f37XQ47WkX21C47228QlJJpaFt35G2542pYC3e5bn29f7FA0() {
+		return (Direction[])field_11028_22jwMo3j3i2mJ1QA0Y8bYlm6bn5KGA15I2WmRiU6uC1uE04TR47nciPpo8Ua.clone();
+	}
+
+	public static Direction func_11026_9ctUhTz3cvi5J23EP4vEgGHEHeO5IuYo1BzkvXl2J1fIbo09vFFvEbPMax9W(String string) {
+		return (Direction)Enum.valueOf(Direction.class, string);
+	}
+
+	private Direction(int integer3) {
+		this.direction = integer3;
+	}
+
+	public static Direction rotate(Direction _0JBX68Xy93h6AtcsAQYnKhAH3tqqSdi51xzP2gqn2Dz3vUDEASPh81DDpsPv629t8X95kqU9No93Cbex761Cu7c84meg01txNW98, int integer) {
+		int i2;
+		for(i2 = (_0JBX68Xy93h6AtcsAQYnKhAH3tqqSdi51xzP2gqn2Dz3vUDEASPh81DDpsPv629t8X95kqU9No93Cbex761Cu7c84meg01txNW98.direction + integer) % 4; i2 < 0; i2 += 4) {
+		}
+
+		return func_11027_56m65k9Ou637f37XQ47WkX21C47228QlJJpaFt35G2542pYC3e5bn29f7FA0()[i2];
+	}
+
+	private static Direction[] func_11024_3jWFQ89k23q78955h40i6jR092yW5VoaTDE8hgINAuV3598J0pYZi3OJPpxk() {
+		return new Direction[]{XP, ZP, XM, ZM};
+	}
+
+    static {
+        field_11028_22jwMo3j3i2mJ1QA0Y8bYlm6bn5KGA15I2WmRiU6uC1uE04TR47nciPpo8Ua = Direction.func_11024_3jWFQ89k23q78955h40i6jR092yW5VoaTDE8hgINAuV3598J0pYZi3OJPpxk();
+    }
+}
--- /dev/null
+++ net/minecraft/src/BlockOld.java
@@ -1,0 +1,484 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Random;
+
+public class BlockOld {
+	public static final StepSound soundPowderFootstep = new StepSound("stone", 1.0F, 1.0F);
+	public static final StepSound soundWoodFootstep = new StepSound("wood", 1.0F, 1.0F);
+	public static final StepSound soundGravelFootstep = new StepSound("gravel", 1.0F, 1.0F);
+	public static final StepSound soundGrassFootstep = new StepSound("grass", 1.0F, 1.0F);
+	public static final StepSound soundStoneFootstep = new StepSound("stone", 1.0F, 1.0F);
+	public static final StepSound soundMetalFootstep = new StepSound("stone", 1.0F, 1.5F);
+	public static final StepSound soundGlassFootstep = new StepSoundGlass("stone", 1.0F, 1.0F);
+	public static final StepSound soundClothFootstep = new StepSound("cloth", 1.0F, 1.0F);
+	public static final StepSound soundSandFootstep = new StepSoundSand("sand", 1.0F, 1.0F);
+	public static final BlockOld[] blocksList = new BlockOld[256];
+	public static final boolean[] tickOnLoad = new boolean[256];
+	public static final boolean[] opaqueCubeLookup = new boolean[256];
+	public static final boolean[] isBlockContainer = new boolean[256];
+	public static final int[] lightOpacity = new int[256];
+	public static final boolean[] canBlockGrass = new boolean[256];
+	public static final int[] lightValue = new int[256];
+	public static final BlockOld stone = (new BlockStoneOld(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final BlockGrassOld grass = (BlockGrassOld)(new BlockGrassOld(2)).setHardness(0.6F).setStepSound(soundGrassFootstep);
+	public static final BlockOld dirt = (new BlockDirtOld(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep);
+	public static final BlockOld cobblestone = (new BlockOld(4, 16, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final BlockOld planks = (new BlockOld(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
+	public static final BlockOld sapling = (new BlockSaplingOld(6, 15)).setHardness(0.0F).setStepSound(soundGrassFootstep);
+	public static final BlockOld bedrock = (new BlockOld(7, 17, Material.rock)).setHardness(-1.0F).setResistance(6000000.0F).setStepSound(soundStoneFootstep);
+	public static final BlockOld waterMoving = (new BlockFlowingOld(8, Material.water)).setHardness(100.0F).setLightOpacity(3);
+	public static final BlockOld waterStill = (new BlockStationaryOld(9, Material.water)).setHardness(100.0F).setLightOpacity(3);
+	public static final BlockOld lavaMoving = (new BlockFlowingOld(10, Material.lava)).setHardness(0.0F).setLightValue(1.0F).setLightOpacity(255);
+	public static final BlockOld lavaStill = (new BlockStationaryOld(11, Material.lava)).setHardness(100.0F).setLightValue(1.0F).setLightOpacity(255);
+	public static final BlockOld sand = (new BlockSandOld(12, 18)).setHardness(0.5F).setStepSound(soundSandFootstep);
+	public static final BlockOld gravel = (new BlockGravelOld(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep);
+	public static final BlockOld oreGold = (new BlockOreOld(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final BlockOld oreIron = (new BlockOreOld(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final BlockOld oreCoal = (new BlockOreOld(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final BlockOld wood = (new BlockLogOld(17)).setHardness(2.0F).setStepSound(soundWoodFootstep);
+	public static final BlockLeavesOld leaves = (BlockLeavesOld)(new BlockLeavesOld(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep);
+	public static final BlockOld sponge = (new BlockSpongeOld(19)).setHardness(0.6F).setStepSound(soundGrassFootstep);
+	public static final BlockOld glass = (new BlockGlassOld(20, 49, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep);
+	public static final BlockOld clothRed = null;
+	public static final BlockOld clothOrange = null;
+	public static final BlockOld clothYellow = null;
+	public static final BlockOld clothChartreuse = null;
+	public static final BlockOld clothGreen = null;
+	public static final BlockOld clothSpringGreen = null;
+	public static final BlockOld clothCyan = null;
+	public static final BlockOld clothCapri = null;
+	public static final BlockOld clothUltramarine = null;
+	public static final BlockOld clothViolet = null;
+	public static final BlockOld clothPurple = null;
+	public static final BlockOld clothMagenta = null;
+	public static final BlockOld clothRose = null;
+	public static final BlockOld clothDarkGray = null;
+	public static final BlockOld cloth = (new BlockOld(35, 64, Material.cloth)).setHardness(0.8F).setStepSound(soundClothFootstep);
+	public static final BlockOld clothWhite = null;
+	public static final BlockFlowerOld plantYellow = (BlockFlowerOld)(new BlockFlowerOld(37, 13)).setHardness(0.0F).setStepSound(soundGrassFootstep);
+	public static final BlockFlowerOld plantRed = (BlockFlowerOld)(new BlockFlowerOld(38, 12)).setHardness(0.0F).setStepSound(soundGrassFootstep);
+	public static final BlockFlowerOld mushroomBrown = (BlockFlowerOld)(new BlockMushroomOld(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(0.125F);
+	public static final BlockFlowerOld mushroomRed = (BlockFlowerOld)(new BlockMushroomOld(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep);
+	public static final BlockOld blockGold = (new BlockOreBlockOld(41, 39)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
+	public static final BlockOld blockSteel = (new BlockOreBlockOld(42, 38)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
+	public static final BlockOld stairDouble = (new BlockStepOld(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final BlockOld stairSingle = (new BlockStepOld(44, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final BlockOld brick = (new BlockOld(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final BlockOld tnt = (new BlockTNTOld(46, 8)).setHardness(0.0F).setStepSound(soundGrassFootstep);
+	public static final BlockOld bookshelf = (new BlockBookshelfOld(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep);
+	public static final BlockOld cobblestoneMossy = (new BlockOld(48, 36, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final BlockOld obsidian = (new BlockObsidianOld(49, 37)).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep);
+	public static final BlockOld torch = (new BlockTorchOld(50, 80)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(soundWoodFootstep);
+	public static final BlockFireOld fire = (BlockFireOld)((BlockFireOld)(new BlockFireOld(51, 31)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep));
+	public static final BlockOld mobSpawner = (new BlockMobSpawnerOld(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep);
+	public static final BlockOld stairCompactWood = new BlockStairsOld(53, planks);
+	public static final BlockOld chest = (new BlockChestOld(54)).setHardness(2.5F).setStepSound(soundWoodFootstep);
+	public static final BlockOld redstoneWire = (new BlockRedstoneWireOld(55, 84)).setHardness(0.0F).setStepSound(soundPowderFootstep);
+	public static final BlockOld oreDiamond = (new BlockOreOld(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final BlockOld blockDiamond = (new BlockOreBlockOld(57, 40)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
+	public static final BlockOld workbench = (new BlockWorkbenchOld(58)).setHardness(2.5F).setStepSound(soundWoodFootstep);
+	public static final BlockOld crops = (new BlockCropsOld(59, 88)).setHardness(0.0F).setStepSound(soundGrassFootstep);
+	public static final BlockOld tilledField = (new BlockFarmlandOld(60)).setHardness(0.6F).setStepSound(soundGravelFootstep);
+	public static final BlockOld stoneOvenIdle = (new BlockFurnaceOld(61, false)).setHardness(3.5F).setStepSound(soundStoneFootstep);
+	public static final BlockOld stoneOvenActive = (new BlockFurnaceOld(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(0.875F);
+	public static final BlockOld signStanding = (new BlockSignOld(63, TileEntitySign.class, true)).setHardness(1.0F).setStepSound(soundWoodFootstep);
+	public static final BlockOld doorWood = (new BlockDoorOld(64, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep);
+	public static final BlockOld ladder = (new BlockLadderOld(65, 83)).setHardness(0.4F).setStepSound(soundWoodFootstep);
+	public static final BlockOld minecartTrack = (new BlockMinecartTrackOld(66, 128)).setHardness(0.7F).setStepSound(soundMetalFootstep);
+	public static final BlockOld stairCompactStone = new BlockStairsOld(67, cobblestone);
+	public static final BlockOld signWall = (new BlockSignOld(68, TileEntitySign.class, false)).setHardness(1.0F).setStepSound(soundWoodFootstep);
+	public static final BlockOld lever = (new BlockLeverOld(69, 96)).setHardness(0.5F).setStepSound(soundWoodFootstep);
+	public static final BlockOld pressurePlateStone = (new BlockPressurePlateOld(70, stone.blockIndexInTexture, EnumMobType.mobs)).setHardness(0.5F).setStepSound(soundStoneFootstep);
+	public static final BlockOld doorSteel = (new BlockDoorOld(71, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep);
+	public static final BlockOld pressurePlateWood = (new BlockPressurePlateOld(72, planks.blockIndexInTexture, EnumMobType.everything)).setHardness(0.5F).setStepSound(soundWoodFootstep);
+	public static final BlockOld oreRedstone = (new BlockRedstoneOreOld(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final BlockOld oreRedstoneGlowing = (new BlockRedstoneOreOld(74, 51, true)).setLightValue(0.625F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final BlockOld torchRedstoneIdle = (new BlockRedstoneTorchOld(75, 115, false)).setHardness(0.0F).setStepSound(soundWoodFootstep);
+	public static final BlockOld torchRedstoneActive = (new BlockRedstoneTorchOld(76, 99, true)).setHardness(0.0F).setLightValue(0.5F).setStepSound(soundWoodFootstep);
+	public static final BlockOld button = (new BlockButtonOld(77, stone.blockIndexInTexture)).setHardness(0.5F).setStepSound(soundStoneFootstep);
+	public static final BlockOld snow = (new BlockSnowOld(78, 66)).setHardness(0.1F).setStepSound(soundClothFootstep);
+	public static final BlockOld ice = (new BlockIceOld(79, 67)).setHardness(0.5F).setLightOpacity(3).setStepSound(soundGlassFootstep);
+	public static final BlockOld blockSnow = (new BlockSnowBlockOld(80, 66)).setHardness(0.2F).setStepSound(soundClothFootstep);
+	public static final BlockOld cactus = (new BlockCactusOld(81, 70)).setHardness(0.4F).setStepSound(soundClothFootstep);
+	public static final BlockOld blockClay = (new BlockClayOld(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep);
+	public static final BlockOld reed = (new BlockReedOld(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep);
+	public static final BlockOld jukebox = (new BlockJukeBoxOld(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final BlockOld fence = (new BlockFenceOld(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
+	public int blockIndexInTexture;
+	public final int blockID;
+	protected float hardness;
+	protected float resistance;
+	public double minX;
+	public double minY;
+	public double minZ;
+	public double maxX;
+	public double maxY;
+	public double maxZ;
+	public StepSound stepSound;
+	public float blockParticleGravity;
+	public final Material material;
+	public float slipperiness;
+
+	protected BlockOld(int integer, Material sx) {
+		this.stepSound = soundPowderFootstep;
+		this.blockParticleGravity = 1.0F;
+		this.slipperiness = 0.6F;
+		if(blocksList[integer] != null) {
+			throw new IllegalArgumentException("Slot " + integer + " is already occupied by " + blocksList[integer] + " when adding " + this);
+		} else {
+			this.material = sx;
+			blocksList[integer] = this;
+			this.blockID = integer;
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+			opaqueCubeLookup[integer] = this.isOpaqueCube();
+			lightOpacity[integer] = this.isOpaqueCube() ? 255 : 0;
+			canBlockGrass[integer] = this.getCanBlockGrass();
+			isBlockContainer[integer] = false;
+		}
+	}
+
+	protected BlockOld(int integer1, int integer2, Material sx) {
+		this(integer1, sx);
+		this.blockIndexInTexture = integer2;
+	}
+
+	protected BlockOld setStepSound(StepSound px) {
+		this.stepSound = px;
+		return this;
+	}
+
+	protected BlockOld setLightOpacity(int integer) {
+		lightOpacity[this.blockID] = integer;
+		return this;
+	}
+
+	protected BlockOld setLightValue(float float1) {
+		lightValue[this.blockID] = (int)(15.0F * float1);
+		return this;
+	}
+
+	protected BlockOld setResistance(float float1) {
+		this.resistance = float1 * 3.0F;
+		return this;
+	}
+
+	private boolean getCanBlockGrass() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return true;
+	}
+
+	public int getRenderType() {
+		return 0;
+	}
+
+	protected BlockOld setHardness(float float1) {
+		this.hardness = float1;
+		if(this.resistance < float1 * 5.0F) {
+			this.resistance = float1 * 5.0F;
+		}
+
+		return this;
+	}
+
+	protected void setTickOnLoad(boolean boolean1) {
+		tickOnLoad[this.blockID] = boolean1;
+	}
+
+	public void setBlockBounds(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.minX = (double)float1;
+		this.minY = (double)float2;
+		this.minZ = (double)float3;
+		this.maxX = (double)float4;
+		this.maxY = (double)float5;
+		this.maxZ = (double)float6;
+	}
+
+	public float getBlockBrightness(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		return abt.getBrightness(integer2, integer3, integer4);
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		return integer5 == 0 && this.minY > 0.0D ? true : (integer5 == 1 && this.maxY < 1.0D ? true : (integer5 == 2 && this.minZ > 0.0D ? true : (integer5 == 3 && this.maxZ < 1.0D ? true : (integer5 == 4 && this.minX > 0.0D ? true : (integer5 == 5 && this.maxX < 1.0D ? true : !abt.isBlockNormalCube(integer2, integer3, integer4))))));
+	}
+
+	public int getBlockTexture(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		return this.getBlockTextureFromSideAndMetadata(integer5, abt.getBlockMetadata(integer2, integer3, integer4));
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int integer1, int integer2) {
+		return this.getBlockTextureFromSide(integer1);
+	}
+
+	public int getBlockTextureFromSide(int integer) {
+		return this.blockIndexInTexture;
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return AxisAlignedBB.getBoundingBoxFromPool((double)integer2 + this.minX, (double)integer3 + this.minY, (double)integer4 + this.minZ, (double)integer2 + this.maxX, (double)integer3 + this.maxY, (double)integer4 + this.maxZ);
+	}
+
+	public void getCollidingBoundingBoxes(World vg, int integer2, int integer3, int integer4, AxisAlignedBB zb, ArrayList arrayList) {
+		AxisAlignedBB axisAlignedBB7 = this.getCollisionBoundingBoxFromPool(vg, integer2, integer3, integer4);
+		if(axisAlignedBB7 != null && zb.intersectsWith(axisAlignedBB7)) {
+			arrayList.add(axisAlignedBB7);
+		}
+
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return AxisAlignedBB.getBoundingBoxFromPool((double)integer2 + this.minX, (double)integer3 + this.minY, (double)integer4 + this.minZ, (double)integer2 + this.maxX, (double)integer3 + this.maxY, (double)integer4 + this.maxZ);
+	}
+
+	public boolean isOpaqueCube() {
+		return true;
+	}
+
+	public boolean canCollideCheck(int integer, boolean boolean2) {
+		return this.isCollidable();
+	}
+
+	public boolean isCollidable() {
+		return true;
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+	}
+
+	public void randomDisplayTick(World vg, int integer2, int integer3, int integer4, Random random) {
+	}
+
+	public void onBlockDestroyedByPlayer(World vg, int integer2, int integer3, int integer4, int integer5) {
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+	}
+
+	public int tickRate() {
+		return 10;
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+	}
+
+	public void onBlockRemoval(World vg, int integer2, int integer3, int integer4) {
+	}
+
+	public int quantityDropped(Random random) {
+		return 1;
+	}
+
+	public int idDropped(int integer, Random random) {
+		return this.blockID;
+	}
+
+	public float blockStrength(EntityPlayer gb) {
+		return this.hardness < 0.0F ? 0.0F : (!gb.b(this) ? 1.0F / this.hardness / 100.0F : gb.a(this) / this.hardness / 30.0F);
+	}
+
+	public void dropBlockAsItem(World vg, int integer2, int integer3, int integer4, int integer5) {
+		this.dropBlockAsItemWithChance(vg, integer2, integer3, integer4, integer5, 1.0F);
+	}
+
+	public void dropBlockAsItemWithChance(World vg, int integer2, int integer3, int integer4, int integer5, float float6) {
+		if(!vg.multiplayerWorld) {
+			int i7 = this.quantityDropped(vg.rand);
+
+			for(int i8 = 0; i8 < i7; ++i8) {
+				if(vg.rand.nextFloat() <= float6) {
+					int i9 = this.idDropped(integer5, vg.rand);
+					if(i9 > 0) {
+						float f10 = 0.7F;
+						double d11 = (double)(vg.rand.nextFloat() * f10) + (double)(1.0F - f10) * 0.5D;
+						double d13 = (double)(vg.rand.nextFloat() * f10) + (double)(1.0F - f10) * 0.5D;
+						double d15 = (double)(vg.rand.nextFloat() * f10) + (double)(1.0F - f10) * 0.5D;
+						EntityItem entityItem17 = new EntityItem(vg, (double)integer2 + d11, (double)integer3 + d13, (double)integer4 + d15, new ItemStack(i9));
+						entityItem17.delayBeforeCanPickup = 10;
+						vg.spawnEntityInWorld(entityItem17);
+					}
+				}
+			}
+
+		}
+	}
+
+	public float getExplosionResistance(Entity xy) {
+		return this.resistance / 5.0F;
+	}
+
+	public MovingObjectPosition collisionRayTrace(World vg, int integer2, int integer3, int integer4, Vec3D adm5, Vec3D adm6) {
+		this.setBlockBoundsBasedOnState(vg, integer2, integer3, integer4);
+		adm5 = adm5.addVector((double)(-integer2), (double)(-integer3), (double)(-integer4));
+		adm6 = adm6.addVector((double)(-integer2), (double)(-integer3), (double)(-integer4));
+		Vec3D vec3D7 = adm5.getIntermediateWithXValue(adm6, this.minX);
+		Vec3D vec3D8 = adm5.getIntermediateWithXValue(adm6, this.maxX);
+		Vec3D vec3D9 = adm5.getIntermediateWithYValue(adm6, this.minY);
+		Vec3D vec3D10 = adm5.getIntermediateWithYValue(adm6, this.maxY);
+		Vec3D vec3D11 = adm5.getIntermediateWithZValue(adm6, this.minZ);
+		Vec3D vec3D12 = adm5.getIntermediateWithZValue(adm6, this.maxZ);
+		if(!this.isVecInsideYZBounds(vec3D7)) {
+			vec3D7 = null;
+		}
+
+		if(!this.isVecInsideYZBounds(vec3D8)) {
+			vec3D8 = null;
+		}
+
+		if(!this.isVecInsideXZBounds(vec3D9)) {
+			vec3D9 = null;
+		}
+
+		if(!this.isVecInsideXZBounds(vec3D10)) {
+			vec3D10 = null;
+		}
+
+		if(!this.isVecInsideXYBounds(vec3D11)) {
+			vec3D11 = null;
+		}
+
+		if(!this.isVecInsideXYBounds(vec3D12)) {
+			vec3D12 = null;
+		}
+
+		Vec3D vec3D13 = null;
+		if(vec3D7 != null && (vec3D13 == null || adm5.distanceTo(vec3D7) < adm5.distanceTo(vec3D13))) {
+			vec3D13 = vec3D7;
+		}
+
+		if(vec3D8 != null && (vec3D13 == null || adm5.distanceTo(vec3D8) < adm5.distanceTo(vec3D13))) {
+			vec3D13 = vec3D8;
+		}
+
+		if(vec3D9 != null && (vec3D13 == null || adm5.distanceTo(vec3D9) < adm5.distanceTo(vec3D13))) {
+			vec3D13 = vec3D9;
+		}
+
+		if(vec3D10 != null && (vec3D13 == null || adm5.distanceTo(vec3D10) < adm5.distanceTo(vec3D13))) {
+			vec3D13 = vec3D10;
+		}
+
+		if(vec3D11 != null && (vec3D13 == null || adm5.distanceTo(vec3D11) < adm5.distanceTo(vec3D13))) {
+			vec3D13 = vec3D11;
+		}
+
+		if(vec3D12 != null && (vec3D13 == null || adm5.distanceTo(vec3D12) < adm5.distanceTo(vec3D13))) {
+			vec3D13 = vec3D12;
+		}
+
+		if(vec3D13 == null) {
+			return null;
+		} else {
+			byte b14 = -1;
+			if(vec3D13 == vec3D7) {
+				b14 = 4;
+			}
+
+			if(vec3D13 == vec3D8) {
+				b14 = 5;
+			}
+
+			if(vec3D13 == vec3D9) {
+				b14 = 0;
+			}
+
+			if(vec3D13 == vec3D10) {
+				b14 = 1;
+			}
+
+			if(vec3D13 == vec3D11) {
+				b14 = 2;
+			}
+
+			if(vec3D13 == vec3D12) {
+				b14 = 3;
+			}
+
+			return new MovingObjectPosition(integer2, integer3, integer4, b14, vec3D13.addVector((double)integer2, (double)integer3, (double)integer4));
+		}
+	}
+
+	private boolean isVecInsideYZBounds(Vec3D adm) {
+		return adm == null ? false : adm.yCoord >= this.minY && adm.yCoord <= this.maxY && adm.zCoord >= this.minZ && adm.zCoord <= this.maxZ;
+	}
+
+	private boolean isVecInsideXZBounds(Vec3D adm) {
+		return adm == null ? false : adm.xCoord >= this.minX && adm.xCoord <= this.maxX && adm.zCoord >= this.minZ && adm.zCoord <= this.maxZ;
+	}
+
+	private boolean isVecInsideXYBounds(Vec3D adm) {
+		return adm == null ? false : adm.xCoord >= this.minX && adm.xCoord <= this.maxX && adm.yCoord >= this.minY && adm.yCoord <= this.maxY;
+	}
+
+	public void onBlockDestroyedByExplosion(World vg, int integer2, int integer3, int integer4) {
+	}
+
+	public int getRenderBlockPass() {
+		return 0;
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockId(integer2, integer3, integer4);
+		return i5 == 0 || blocksList[i5].material.getIsLiquid();
+	}
+
+	public boolean blockActivated(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+		return false;
+	}
+
+	public void onEntityWalking(World vg, int integer2, int integer3, int integer4, Entity xy) {
+	}
+
+	public void onBlockPlaced(World vg, int integer2, int integer3, int integer4, int integer5) {
+	}
+
+	public void onBlockClicked(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+	}
+
+	public void velocityToAddToEntity(World vg, int integer2, int integer3, int integer4, Entity xy, Vec3D adm) {
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess abt, int integer2, int integer3, int integer4) {
+	}
+
+	public int colorMultiplier(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		return 0xFFFFFF;
+	}
+
+	public boolean isPoweringTo(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		return false;
+	}
+
+	public boolean canProvidePower() {
+		return false;
+	}
+
+	public void onEntityCollidedWithBlock(World vg, int integer2, int integer3, int integer4, Entity xy) {
+	}
+
+	public boolean isIndirectlyPoweringTo(World vg, int integer2, int integer3, int integer4, int integer5) {
+		return false;
+	}
+
+	public void setBlockBoundsForItemRender() {
+	}
+
+	public void harvestBlock(World vg, int integer2, int integer3, int integer4, int integer5) {
+		this.dropBlockAsItem(vg, integer2, integer3, integer4, integer5);
+	}
+
+	public boolean canBlockStay(World vg, int integer2, int integer3, int integer4) {
+		return true;
+	}
+
+	static {
+		for(int i0 = 0; i0 < 256; ++i0) {
+			if(blocksList[i0] != null) {
+				Item.itemsList[i0] = new ItemBlock(i0 - 256);
+			}
+		}
+
+	}
+}
--- net/minecraft/src/PanelCrashReport.java
+++ net/minecraft/src/PanelCrashReport.java
@@ -9,77 +9,110 @@
 import java.io.StringWriter;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.Iterator;
+
 import org.lwjgl.Sys;
 import org.lwjgl.opengl.GL11;
 
 public class PanelCrashReport extends Panel {
-	public PanelCrashReport(UnexpectedThrowable var1) {
+	public PanelCrashReport(UnexpectedThrowable throwable) {
 		this.setBackground(new Color(3028036));
 		this.setLayout(new BorderLayout());
-		StringWriter var2 = new StringWriter();
-		var1.exception.printStackTrace(new PrintWriter(var2));
-		String var3 = var2.toString();
-		String var4 = "";
-		String var5 = "";
+		StringWriter stringWriter2 = new StringWriter();
+		throwable.exception.printStackTrace(new PrintWriter(stringWriter2));
+		String string3 = stringWriter2.toString();
+		String string4 = "";
+		String string5 = "";
 
 		try {
-			var5 = var5 + "Generated " + (new SimpleDateFormat()).format(new Date()) + "\n";
-			var5 = var5 + "\n";
-			var5 = var5 + "Minecraft: Minecraft Alpha v1.1.2_01\n";
-			var5 = var5 + "OS: " + System.getProperty("os.name") + " (" + System.getProperty("os.arch") + ") version " + System.getProperty("os.version") + "\n";
-			var5 = var5 + "Java: " + System.getProperty("java.version") + ", " + System.getProperty("java.vendor") + "\n";
-			var5 = var5 + "VM: " + System.getProperty("java.vm.name") + " (" + System.getProperty("java.vm.info") + "), " + System.getProperty("java.vm.vendor") + "\n";
-			var5 = var5 + "LWJGL: " + Sys.getVersion() + "\n";
-			var4 = GL11.glGetString(GL11.GL_VENDOR);
-			var5 = var5 + "OpenGL: " + GL11.glGetString(GL11.GL_RENDERER) + " version " + GL11.glGetString(GL11.GL_VERSION) + ", " + GL11.glGetString(GL11.GL_VENDOR) + "\n";
-		} catch (Throwable var8) {
-			var5 = var5 + "[failed to get system properties (" + var8 + ")]\n";
-		}
-
-		var5 = var5 + "\n";
-		var5 = var5 + var3;
-		String var6 = "";
-		var6 = var6 + "\n";
-		var6 = var6 + "\n";
-		if(var3.contains("Pixel format not accelerated")) {
-			var6 = var6 + "      Bad video card drivers!      \n";
-			var6 = var6 + "      -----------------------      \n";
-			var6 = var6 + "\n";
-			var6 = var6 + "Minecraft was unable to start because it failed to find an accelerated OpenGL mode.\n";
-			var6 = var6 + "This can usually be fixed by updating the video card drivers.\n";
-			if(var4.toLowerCase().contains("nvidia")) {
-				var6 = var6 + "\n";
-				var6 = var6 + "You might be able to find drivers for your video card here:\n";
-				var6 = var6 + "  http://www.nvidia.com/\n";
-			} else if(var4.toLowerCase().contains("ati")) {
-				var6 = var6 + "\n";
-				var6 = var6 + "You might be able to find drivers for your video card here:\n";
-				var6 = var6 + "  http://www.amd.com/\n";
+			string5 = string5 + "Generated " + (new SimpleDateFormat()).format(new Date()) + "\n";
+			string5 = string5 + "\n";
+			string5 = string5 + "Minecraft: Minecraft Alpha v1.1.2_01\n";
+			string5 = string5 + "OS: " + System.getProperty("os.name") + " (" + System.getProperty("os.arch") + ") version " + System.getProperty("os.version") + "\n";
+			string5 = string5 + "Java: " + System.getProperty("java.version") + ", " + System.getProperty("java.vendor") + "\n";
+			string5 = string5 + "VM: " + System.getProperty("java.vm.name") + " (" + System.getProperty("java.vm.info") + "), " + System.getProperty("java.vm.vendor") + "\n";
+			string5 = string5 + "LWJGL: " + Sys.getVersion() + "\n";
+			string4 = GL11.glGetString(GL11.GL_VENDOR);
+			string5 = string5 + "OpenGL: " + GL11.glGetString(GL11.GL_RENDERER) + " version " + GL11.glGetString(GL11.GL_VERSION) + ", " + GL11.glGetString(GL11.GL_VENDOR) + "\n";
+		} catch (Throwable throwable9) {
+			string5 = string5 + "[failed to get system properties (" + throwable9 + ")]\n";
+		}
+
+		string5 = string5 + "\n";
+		string5 = string5 + string3;
+		String string6 = "";
+		string6 = string6 + "Mods loaded: " + (ModLoader.func_11264_7AT2q764kBM4UAhX20130C3Jh6LT7Y5snv3wxjh9e5VP43467B37csjDd1NC().size() + 1) + "\n";
+		string6 = string6 + "ModLoader 0.0.1";
+
+		BaseMod baseMod7;
+		for(Iterator iterator8 = ModLoader.func_11264_7AT2q764kBM4UAhX20130C3Jh6LT7Y5snv3wxjh9e5VP43467B37csjDd1NC().iterator(); iterator8.hasNext(); string6 = string6 + baseMod7.getClass().getName() + " " + baseMod7.Version() + "\n") {
+			baseMod7 = (BaseMod)iterator8.next();
+		}
+
+		string6 = string6 + "\n";
+		string6 = string6 + "\n";
+		if(string3.contains("Pixel format not accelerated")) {
+			string6 = string6 + "      Bad video card drivers!      \n";
+			string6 = string6 + "      -----------------------      \n";
+			string6 = string6 + "\n";
+			string6 = string6 + "Minecraft was unable to start because it failed to find an accelerated OpenGL mode.\n";
+			string6 = string6 + "This can usually be fixed by updating the video card drivers.\n";
+			string6 = string6 + "If you\'re running the experimental Direct3D development branch and you\'re sure the drivers are installed, please report this to the bug tracker.\n";
+			if(string4.toLowerCase().contains("nvidia")) {
+				string6 = string6 + "\n";
+				string6 = string6 + "You might be able to find drivers for your video card here:\n";
+				string6 = string6 + "  https://www.nvidia.com/Download/index.aspx\n";
+			} else if(!string4.toLowerCase().contains("ati") && !string4.toLowerCase().contains("amd")) {
+				if(string4.toLowerCase().contains("4 series express")) {
+					string6 = string6 + "\n";
+					string6 = string6 + "This graphics card does not support OpenGL 2 and will not run the game.\n";
+					string6 = string6 + "\n";
+				} else if(string4.toLowerCase().contains("intel")) {
+					string6 = string6 + "\n";
+					string6 = string6 + "You might be able to find drivers for your video card here:\n";
+					string6 = string6 + "  https://www.intel.com/content/www/us/en/download-center/home.html\n";
+					string6 = string6 + "Do not expect the game to run well on your hardware.\n";
+				} else if(!string4.toLowerCase().contains("svga") && !string4.toLowerCase().contains("llvm") && !string4.toLowerCase().contains("virtualbox")) {
+					if(string4.toLowerCase().contains("microsoft basic")) {
+						string6 = string6 + "\n";
+						string6 = string6 + "Failed to detect your video card manufacturer.\n";
+						string6 = string6 + "  *If you\'re using a laptop, search for drivers for your exact model number.\n";
+						string6 = string6 + "  *If this is a virtual computer, please install the guest OS extensions for your VM software.\n";
+					}
+				} else {
+					string6 = string6 + "\n";
+					string6 = string6 + "Install the guest OS extensions for your virtual machine.\n";
+					string6 = string6 + "  (VMWare Tools, VirtualBox Guest Additions, etc.)\n";
+				}
+			} else {
+				string6 = string6 + "\n";
+				string6 = string6 + "You might be able to find drivers for your video card here:\n";
+				string6 = string6 + "  https://www.amd.com/en/support\n";
 			}
 		} else {
-			var6 = var6 + "      Minecraft has crashed!      \n";
-			var6 = var6 + "      ----------------------      \n";
-			var6 = var6 + "\n";
-			var6 = var6 + "Minecraft has stopped running because it encountered a problem.\n";
-			var6 = var6 + "\n";
-			var6 = var6 + "If you wish to report this, please copy this entire text and email it to support@mojang.com.\n";
-			var6 = var6 + "Please include a description of what you did when the error occured.\n";
+			string6 = string6 + "      Minecraft has crashed!      \n";
+			string6 = string6 + "      ----------------------      \n";
+			string6 = string6 + "\n";
+			string6 = string6 + "Minecraft has stopped running because it encountered a problem.\n";
+			string6 = string6 + "\n";
+			string6 = string6 + "If you wish to report this, please copy this entire text and email it to support@mojang.com.\n";
+			string6 = string6 + "Please include a description of what you did when the error occured.\n";
 		}
 
-		var6 = var6 + "\n";
-		var6 = var6 + "\n";
-		var6 = var6 + "\n";
-		var6 = var6 + "--- BEGIN ERROR REPORT " + Integer.toHexString(var6.hashCode()) + " --------\n";
-		var6 = var6 + var5;
-		var6 = var6 + "--- END ERROR REPORT " + Integer.toHexString(var6.hashCode()) + " ----------\n";
-		var6 = var6 + "\n";
-		var6 = var6 + "\n";
-		TextArea var7 = new TextArea(var6, 0, 0, 1);
-		var7.setFont(new Font("Monospaced", 0, 12));
+		string6 = string6 + "\n";
+		string6 = string6 + "\n";
+		string6 = string6 + "\n";
+		string6 = string6 + "--- BEGIN ERROR REPORT " + Integer.toHexString(string6.hashCode()) + " --------\n";
+		string6 = string6 + string5;
+		string6 = string6 + "--- END ERROR REPORT " + Integer.toHexString(string6.hashCode()) + " ----------\n";
+		string6 = string6 + "\n";
+		string6 = string6 + "\n";
+		TextArea textArea10 = new TextArea(string6, 0, 0, 1);
+		textArea10.setFont(new Font("Monospaced", 0, 12));
 		this.add(new CanvasMojangLogo(), "North");
 		this.add(new CanvasCrashReport(80), "East");
 		this.add(new CanvasCrashReport(80), "West");
 		this.add(new CanvasCrashReport(100), "South");
-		this.add(var7, "Center");
+		this.add(textArea10, "Center");
 	}
 }
--- /dev/null
+++ net/minecraft/src/UtilRSA2048.java
@@ -1,0 +1,4 @@
+package net.minecraft.src;
+
+public class UtilRSA2048 {
+}
--- /dev/null
+++ net/minecraft/src/CommandFrrnReset.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+class CommandFrrnReset extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8555_380Er92ElLwg0f2DCpQOG1EaM9OgHmISUcdmSfooi7Yg2zir3M3chMKJU9x9;
+    
+    CommandFrrnReset(final CommandManager abb) {
+        this.field_8555_380Er92ElLwg0f2DCpQOG1EaM9OgHmISUcdmSfooi7Yg2zir3M3chMKJU9x9 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        if (InputHandler.mc.thePlayer instanceof EntityPlayerFreerunClient) {
+            ((EntityPlayerFreerunClient)InputHandler.mc.thePlayer).ResetFreerun();
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/BlockMyconCap.java
@@ -1,0 +1,34 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockMyconCap extends BlockBreakable {
+	public BlockMyconCap(int integer1, int integer2) {
+		super(integer1, integer2, Material.ice, false);
+		this.setTickOnLoad(true);
+		this.setLightValue(1.65F);
+	}
+
+	public int getRenderBlockPass() {
+		return 1;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return super.shouldSideBeRendered(blockAccess, x, y, z, 1 - side);
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		world.getBlockMaterial(x, y - 1, z);
+	}
+
+	public int quantityDropped(Random random) {
+		return 0;
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(world.getSavedLightValue(EnumSkyBlock.Block, x, y, z) > 11 - Block.lightOpacity[this.blockID]) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/VertexConsumer.java
@@ -1,0 +1,4 @@
+package net.minecraft.src;
+
+public class VertexConsumer {
+}
--- /dev/null
+++ net/minecraft/src/AuthClient.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+public class AuthClient {
+	public static AuthKey hubAuthKey;
+
+	public AuthClient(AuthKey rt) {
+		hubAuthKey = rt;
+	}
+
+	public static boolean TestServerAuthKey(NetworkLocation bo, AuthKey rt) {
+		return false;
+	}
+}
--- /dev/null
+++ net/minecraft/src/observer.java
@@ -1,0 +1,28 @@
+package net.minecraft.src;
+
+public class observer extends EntityModel {
+	public static final ModelLayerLocation LAYER_LOCATION = new ModelLayerLocation(new ResourceLocation("modid", "observer"), "main");
+	private final ModelPart bb_main;
+
+	public observer(ModelPart xs) {
+		this.bb_main = xs.getChild("bb_main");
+	}
+
+	public static LayerDefinition createBodyLayer() {
+		MeshDefinition meshDefinition0 = new MeshDefinition();
+		PartDefinition partDefinition1 = meshDefinition0.getRoot();
+		partDefinition1.addOrReplaceChild("bb_main", CubeListBuilder.create().texOffs(0, 0).addBox(-4.0F, -37.0F, -5.0F, 8.0F, 8.0F, 8.0F, new CubeDeformation(0.0F)).texOffs(0, 16).addBox(-4.0F, -29.0F, -3.0F, 8.0F, 12.0F, 6.0F, new CubeDeformation(0.0F)).texOffs(28, 12).addBox(-4.0F, -17.0F, -2.0F, 3.0F, 17.0F, 4.0F, new CubeDeformation(0.0F)).texOffs(28, 12).mirror().addBox(1.0F, -17.0F, -2.0F, 3.0F, 17.0F, 4.0F, new CubeDeformation(0.0F)).mirror(false), PartPose.offset(0.0F, 24.0F, 0.0F));
+		return LayerDefinition.create(meshDefinition0, 64, 64);
+	}
+
+	public void setupAnim(Entity xy, float float2, float float3, float float4, float float5, float float6) {
+	}
+
+	public void renderToBuffer(PoseStack f, VertexConsumer ie, int integer3, int integer4, float float5, float float6, float float7, float float8) {
+		this.bb_main.render(f, ie, integer3, integer4, float5, float6, float7, float8);
+	}
+
+	public void setupAnim(Object object, float float2, float float3, float float4, float float5, float float6) {
+		this.setupAnim((Entity)object, float2, float3, float4, float5, float6);
+	}
+}
--- net/minecraft/src/BlockChest.java
+++ net/minecraft/src/BlockChest.java
@@ -5,187 +5,190 @@
 public class BlockChest extends BlockContainer {
 	private Random random = new Random();
 
-	protected BlockChest(int var1) {
-		super(var1, Material.wood);
+	protected BlockChest(int id) {
+		super(id, Material.wood);
 		this.blockIndexInTexture = 26;
 	}
 
-	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		if(var5 == 1) {
+	public int getBlockTexture(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		if(side == 1) {
 			return this.blockIndexInTexture - 1;
-		} else if(var5 == 0) {
+		} else if(side == 0) {
 			return this.blockIndexInTexture - 1;
 		} else {
-			int var6 = var1.getBlockId(var2, var3, var4 - 1);
-			int var7 = var1.getBlockId(var2, var3, var4 + 1);
-			int var8 = var1.getBlockId(var2 - 1, var3, var4);
-			int var9 = var1.getBlockId(var2 + 1, var3, var4);
-			int var10;
-			int var11;
-			int var12;
-			byte var13;
-			if(var6 != this.blockID && var7 != this.blockID) {
-				if(var8 != this.blockID && var9 != this.blockID) {
-					byte var14 = 3;
-					if(Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var7]) {
-						var14 = 3;
-					}
-
-					if(Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var6]) {
-						var14 = 2;
-					}
-
-					if(Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var9]) {
-						var14 = 5;
-					}
-
-					if(Block.opaqueCubeLookup[var9] && !Block.opaqueCubeLookup[var8]) {
-						var14 = 4;
-					}
-
-					return var5 == var14 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
-				} else if(var5 != 4 && var5 != 5) {
-					var10 = 0;
-					if(var8 == this.blockID) {
-						var10 = -1;
-					}
-
-					var11 = var1.getBlockId(var8 == this.blockID ? var2 - 1 : var2 + 1, var3, var4 - 1);
-					var12 = var1.getBlockId(var8 == this.blockID ? var2 - 1 : var2 + 1, var3, var4 + 1);
-					if(var5 == 3) {
-						var10 = -1 - var10;
-					}
-
-					var13 = 3;
-					if((Block.opaqueCubeLookup[var6] || Block.opaqueCubeLookup[var11]) && !Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var12]) {
-						var13 = 3;
-					}
-
-					if((Block.opaqueCubeLookup[var7] || Block.opaqueCubeLookup[var12]) && !Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var11]) {
-						var13 = 2;
-					}
-
-					return (var5 == var13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + var10;
+			int i6 = blockAccess.getBlockId(x, y, z - 1);
+			int i7 = blockAccess.getBlockId(x, y, z + 1);
+			int i8 = blockAccess.getBlockId(x - 1, y, z);
+			int i9 = blockAccess.getBlockId(x + 1, y, z);
+			int i10;
+			int i11;
+			int i12;
+			byte b13;
+			if(i6 != this.blockID && i7 != this.blockID) {
+				if(i8 != this.blockID && i9 != this.blockID) {
+					byte b14 = 3;
+					if(Block.opaqueCubeLookup[i6] && !Block.opaqueCubeLookup[i7]) {
+						b14 = 3;
+					}
+
+					if(Block.opaqueCubeLookup[i7] && !Block.opaqueCubeLookup[i6]) {
+						b14 = 2;
+					}
+
+					if(Block.opaqueCubeLookup[i8] && !Block.opaqueCubeLookup[i9]) {
+						b14 = 5;
+					}
+
+					if(Block.opaqueCubeLookup[i9] && !Block.opaqueCubeLookup[i8]) {
+						b14 = 4;
+					}
+
+					return side == b14 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
+				} else if(side != 4 && side != 5) {
+					i10 = 0;
+					if(i8 == this.blockID) {
+						i10 = -1;
+					}
+
+					i11 = blockAccess.getBlockId(i8 == this.blockID ? x - 1 : x + 1, y, z - 1);
+					i12 = blockAccess.getBlockId(i8 == this.blockID ? x - 1 : x + 1, y, z + 1);
+					if(side == 3) {
+						i10 = -1 - i10;
+					}
+
+					b13 = 3;
+					if((Block.opaqueCubeLookup[i6] || Block.opaqueCubeLookup[i11]) && !Block.opaqueCubeLookup[i7] && !Block.opaqueCubeLookup[i12]) {
+						b13 = 3;
+					}
+
+					if((Block.opaqueCubeLookup[i7] || Block.opaqueCubeLookup[i12]) && !Block.opaqueCubeLookup[i6] && !Block.opaqueCubeLookup[i11]) {
+						b13 = 2;
+					}
+
+					return (side == b13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + i10;
 				} else {
 					return this.blockIndexInTexture;
 				}
-			} else if(var5 != 2 && var5 != 3) {
-				var10 = 0;
-				if(var6 == this.blockID) {
-					var10 = -1;
-				}
-
-				var11 = var1.getBlockId(var2 - 1, var3, var6 == this.blockID ? var4 - 1 : var4 + 1);
-				var12 = var1.getBlockId(var2 + 1, var3, var6 == this.blockID ? var4 - 1 : var4 + 1);
-				if(var5 == 4) {
-					var10 = -1 - var10;
-				}
-
-				var13 = 5;
-				if((Block.opaqueCubeLookup[var8] || Block.opaqueCubeLookup[var11]) && !Block.opaqueCubeLookup[var9] && !Block.opaqueCubeLookup[var12]) {
-					var13 = 5;
-				}
-
-				if((Block.opaqueCubeLookup[var9] || Block.opaqueCubeLookup[var12]) && !Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var11]) {
-					var13 = 4;
-				}
-
-				return (var5 == var13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + var10;
+			} else if(side != 2 && side != 3) {
+				i10 = 0;
+				if(i6 == this.blockID) {
+					i10 = -1;
+				}
+
+				i11 = blockAccess.getBlockId(x - 1, y, i6 == this.blockID ? z - 1 : z + 1);
+				i12 = blockAccess.getBlockId(x + 1, y, i6 == this.blockID ? z - 1 : z + 1);
+				if(side == 4) {
+					i10 = -1 - i10;
+				}
+
+				b13 = 5;
+				if((Block.opaqueCubeLookup[i8] || Block.opaqueCubeLookup[i11]) && !Block.opaqueCubeLookup[i9] && !Block.opaqueCubeLookup[i12]) {
+					b13 = 5;
+				}
+
+				if((Block.opaqueCubeLookup[i9] || Block.opaqueCubeLookup[i12]) && !Block.opaqueCubeLookup[i8] && !Block.opaqueCubeLookup[i11]) {
+					b13 = 4;
+				}
+
+				return (side == b13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + i10;
 			} else {
 				return this.blockIndexInTexture;
 			}
 		}
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture - 1 : (var1 == 0 ? this.blockIndexInTexture - 1 : (var1 == 3 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture));
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		int var5 = 0;
-		if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
-			++var5;
-		}
-
-		if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
-			++var5;
-		}
-
-		if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
-			++var5;
-		}
-
-		if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
-			++var5;
-		}
-
-		return var5 > 1 ? false : (this.isThereANeighborChest(var1, var2 - 1, var3, var4) ? false : (this.isThereANeighborChest(var1, var2 + 1, var3, var4) ? false : (this.isThereANeighborChest(var1, var2, var3, var4 - 1) ? false : !this.isThereANeighborChest(var1, var2, var3, var4 + 1))));
-	}
-
-	private boolean isThereANeighborChest(World var1, int var2, int var3, int var4) {
-		return var1.getBlockId(var2, var3, var4) != this.blockID ? false : (var1.getBlockId(var2 - 1, var3, var4) == this.blockID ? true : (var1.getBlockId(var2 + 1, var3, var4) == this.blockID ? true : (var1.getBlockId(var2, var3, var4 - 1) == this.blockID ? true : var1.getBlockId(var2, var3, var4 + 1) == this.blockID)));
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		TileEntityChest var5 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
-
-		for(int var6 = 0; var6 < var5.getSizeInventory(); ++var6) {
-			ItemStack var7 = var5.getStackInSlot(var6);
-			if(var7 != null) {
-				float var8 = this.random.nextFloat() * 0.8F + 0.1F;
-				float var9 = this.random.nextFloat() * 0.8F + 0.1F;
-				float var10 = this.random.nextFloat() * 0.8F + 0.1F;
-
-				while(var7.stackSize > 0) {
-					int var11 = this.random.nextInt(21) + 10;
-					if(var11 > var7.stackSize) {
-						var11 = var7.stackSize;
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.blockIndexInTexture - 1 : (side == 0 ? this.blockIndexInTexture - 1 : (side == 3 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture));
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		int i5 = 0;
+		if(world.getBlockId(x - 1, y, z) == this.blockID) {
+			++i5;
+		}
+
+		if(world.getBlockId(x + 1, y, z) == this.blockID) {
+			++i5;
+		}
+
+		if(world.getBlockId(x, y, z - 1) == this.blockID) {
+			++i5;
+		}
+
+		if(world.getBlockId(x, y, z + 1) == this.blockID) {
+			++i5;
+		}
+
+		return i5 > 1 ? false : (this.isThereANeighborChest(world, x - 1, y, z) ? false : (this.isThereANeighborChest(world, x + 1, y, z) ? false : (this.isThereANeighborChest(world, x, y, z - 1) ? false : !this.isThereANeighborChest(world, x, y, z + 1))));
+	}
+
+	private boolean isThereANeighborChest(World world, int x, int y, int z) {
+		return world.getBlockId(x, y, z) != this.blockID ? false : (world.getBlockId(x - 1, y, z) == this.blockID ? true : (world.getBlockId(x + 1, y, z) == this.blockID ? true : (world.getBlockId(x, y, z - 1) == this.blockID ? true : world.getBlockId(x, y, z + 1) == this.blockID)));
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		TileEntityChest tileEntityChest5 = (TileEntityChest)world.getBlockTileEntity(x, y, z);
+		if(tileEntityChest5 == null) {
+			super.onBlockRemoval(world, x, y, z);
+		} else {
+			for(int i6 = 0; i6 < tileEntityChest5.getSizeInventory(); ++i6) {
+				ItemStack itemStack7 = tileEntityChest5.getStackInSlot(i6);
+				if(itemStack7 != null) {
+					float f8 = this.random.nextFloat() * 0.8F + 0.1F;
+					float f9 = this.random.nextFloat() * 0.8F + 0.1F;
+					float f10 = this.random.nextFloat() * 0.8F + 0.1F;
+
+					while(itemStack7.stackSize > 0) {
+						int i11 = this.random.nextInt(21) + 10;
+						if(i11 > itemStack7.stackSize) {
+							i11 = itemStack7.stackSize;
+						}
+
+						itemStack7.stackSize -= i11;
+						EntityItem entityItem12 = new EntityItem(world, (double)((float)x + f8), (double)((float)y + f9), (double)((float)z + f10), new ItemStack(itemStack7.itemID, i11, itemStack7.itemDmg));
+						float f13 = 0.05F;
+						entityItem12.motionX = (double)((float)this.random.nextGaussian() * f13);
+						entityItem12.motionY = (double)((float)this.random.nextGaussian() * f13 + 0.2F);
+						entityItem12.motionZ = (double)((float)this.random.nextGaussian() * f13);
+						world.spawnEntityInWorld(entityItem12);
 					}
-
-					var7.stackSize -= var11;
-					EntityItem var12 = new EntityItem(var1, (double)((float)var2 + var8), (double)((float)var3 + var9), (double)((float)var4 + var10), new ItemStack(var7.itemID, var11, var7.itemDmg));
-					float var13 = 0.05F;
-					var12.motionX = (double)((float)this.random.nextGaussian() * var13);
-					var12.motionY = (double)((float)this.random.nextGaussian() * var13 + 0.2F);
-					var12.motionZ = (double)((float)this.random.nextGaussian() * var13);
-					var1.spawnEntityInWorld(var12);
 				}
 			}
+
+			super.onBlockRemoval(world, x, y, z);
 		}
-
-		super.onBlockRemoval(var1, var2, var3, var4);
 	}
 
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		Object var6 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
-		if(var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-			return true;
-		} else if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID && var1.isBlockNormalCube(var2 - 1, var3 + 1, var4)) {
-			return true;
-		} else if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID && var1.isBlockNormalCube(var2 + 1, var3 + 1, var4)) {
-			return true;
-		} else if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID && var1.isBlockNormalCube(var2, var3 + 1, var4 - 1)) {
-			return true;
-		} else if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID && var1.isBlockNormalCube(var2, var3 + 1, var4 + 1)) {
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		Object object6 = (TileEntityChest)world.getBlockTileEntity(x, y, z);
+		if(world.isBlockNormalCube(x, y + 1, z)) {
+			return true;
+		} else if(world.getBlockId(x - 1, y, z) == this.blockID && world.isBlockNormalCube(x - 1, y + 1, z)) {
+			return true;
+		} else if(world.getBlockId(x + 1, y, z) == this.blockID && world.isBlockNormalCube(x + 1, y + 1, z)) {
+			return true;
+		} else if(world.getBlockId(x, y, z - 1) == this.blockID && world.isBlockNormalCube(x, y + 1, z - 1)) {
+			return true;
+		} else if(world.getBlockId(x, y, z + 1) == this.blockID && world.isBlockNormalCube(x, y + 1, z + 1)) {
 			return true;
 		} else {
-			if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2 - 1, var3, var4), (IInventory)var6);
-			}
-
-			if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2 + 1, var3, var4));
-			}
-
-			if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 - 1), (IInventory)var6);
-			}
-
-			if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 + 1));
-			}
-
-			var5.displayGUIChest((IInventory)var6);
+			if(world.getBlockId(x - 1, y, z) == this.blockID) {
+				object6 = new InventoryLargeChest("Large chest", (TileEntityChest)world.getBlockTileEntity(x - 1, y, z), (IInventory)object6);
+			}
+
+			if(world.getBlockId(x + 1, y, z) == this.blockID) {
+				object6 = new InventoryLargeChest("Large chest", (IInventory)object6, (TileEntityChest)world.getBlockTileEntity(x + 1, y, z));
+			}
+
+			if(world.getBlockId(x, y, z - 1) == this.blockID) {
+				object6 = new InventoryLargeChest("Large chest", (TileEntityChest)world.getBlockTileEntity(x, y, z - 1), (IInventory)object6);
+			}
+
+			if(world.getBlockId(x, y, z + 1) == this.blockID) {
+				object6 = new InventoryLargeChest("Large chest", (IInventory)object6, (TileEntityChest)world.getBlockTileEntity(x, y, z + 1));
+			}
+
+			entityPlayer.displayGUIChest((IInventory)object6);
 			return true;
 		}
 	}
--- /dev/null
+++ net/minecraft/src/PlayerControllerSPUnknownClass.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+public class PlayerControllerSPUnknownClass extends PlayerControllerSP {
+	public PlayerControllerSPUnknownClass(Minecraft minecraft) {
+		super(minecraft);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockSlatePillar.java
@@ -1,0 +1,135 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockSlatePillar extends Block {
+	public BlockSlatePillar(int integer1, int integer2) {
+		super(integer1, integer2, Material.circuits);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		float f6 = 0.125F;
+		switch(i5) {
+		case 2:
+			this.setBlockBounds(0.0F, 0.0F, 1.0F - f6, 1.0F, 1.0F, 1.0F);
+			break;
+		case 3:
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f6);
+			break;
+		case 4:
+			this.setBlockBounds(1.0F - f6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+			break;
+		case 5:
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, f6, 1.0F, 1.0F);
+			break;
+		case 6:
+			this.setBlockBounds(0.0F, 1.0F - f6, 0.0F, 1.0F, 1.0F, 1.0F);
+			break;
+		case 7:
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, f6, 1.0F);
+		}
+
+		return super.getCollisionBoundingBoxFromPool(world, x, y, z);
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		int i5 = worldObj.getBlockMetadata(x, y, z);
+		float f6 = 0.125F;
+		switch(i5) {
+		case 2:
+			this.setBlockBounds(0.0F, 0.0F, 1.0F - f6, 1.0F, 1.0F, 1.0F);
+			break;
+		case 3:
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f6);
+			break;
+		case 4:
+			this.setBlockBounds(1.0F - f6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+			break;
+		case 5:
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, f6, 1.0F, 1.0F);
+			break;
+		case 6:
+			this.setBlockBounds(0.0F, 1.0F - f6, 0.0F, 1.0F, 1.0F, 1.0F);
+			break;
+		case 7:
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, f6, 1.0F);
+		}
+
+		return super.getSelectedBoundingBoxFromPool(worldObj, x, y, z);
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 8;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y - 1, z) ? true : (world.isBlockNormalCube(x, y + 1, z) ? true : (world.isBlockNormalCube(x - 1, y, z) ? true : (world.isBlockNormalCube(x + 1, y, z) ? true : (world.isBlockNormalCube(x, y, z - 1) ? true : world.isBlockNormalCube(x, y, z + 1)))));
+	}
+
+	public void onBlockPlaced(World world, int x, int y, int z, int notifyFlag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if((i6 == 0 || notifyFlag == 2) && world.isBlockNormalCube(x, y, z + 1)) {
+			i6 = 2;
+		} else if((i6 == 0 || notifyFlag == 3) && world.isBlockNormalCube(x, y, z - 1)) {
+			i6 = 3;
+		} else if((i6 == 0 || notifyFlag == 4) && world.isBlockNormalCube(x + 1, y, z)) {
+			i6 = 4;
+		} else if((i6 == 0 || notifyFlag == 5) && world.isBlockNormalCube(x - 1, y, z)) {
+			i6 = 5;
+		} else if((i6 == 0 || notifyFlag == 6) && world.isBlockNormalCube(x, y + 1, z)) {
+			i6 = 6;
+		} else if((i6 == 0 || notifyFlag == 7) && world.isBlockNormalCube(x, y - 1, z)) {
+			i6 = 7;
+		}
+
+		world.setBlockMetadataWithNotify(x, y, z, i6);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		boolean z7 = false;
+		if(i6 == 2 && world.isBlockNormalCube(x, y, z + 1)) {
+			z7 = true;
+		}
+
+		if(i6 == 3 && world.isBlockNormalCube(x, y, z - 1)) {
+			z7 = true;
+		}
+
+		if(i6 == 4 && world.isBlockNormalCube(x + 1, y, z)) {
+			z7 = true;
+		}
+
+		if(i6 == 5 && world.isBlockNormalCube(x - 1, y, z)) {
+			z7 = true;
+		}
+
+		if(i6 == 6 && world.isBlockNormalCube(x, y + 1, z)) {
+			z7 = true;
+		}
+
+		if(i6 == 7 && world.isBlockNormalCube(x, y - 1, z)) {
+			z7 = true;
+		}
+
+		if(!z7) {
+			this.dropBlockAsItem(world, x, y, z, i6);
+			world.setBlockWithNotify(x, y, z, 0);
+		}
+
+		super.onNeighborBlockChange(world, x, y, z, flag);
+	}
+
+	public int quantityDropped(Random random) {
+		return 1;
+	}
+}
--- net/minecraft/src/ModelCow.java
+++ net/minecraft/src/ModelCow.java
@@ -19,7 +19,7 @@
 		this.udders = new ModelRenderer(52, 0);
 		this.udders.addBox(-2.0F, -3.0F, 0.0F, 4, 6, 2, 0.0F);
 		this.udders.setRotationPoint(0.0F, 14.0F, 6.0F);
-		this.udders.rotateAngleX = (float)Math.PI * 0.5F;
+		this.udders.rotateAngleX = (float)Math.PI / 2F;
 		this.body = new ModelRenderer(18, 4);
 		this.body.addBox(-6.0F, -10.0F, -7.0F, 12, 18, 10, 0.0F);
 		this.body.setRotationPoint(0.0F, 5.0F, 2.0F);
@@ -33,15 +33,15 @@
 		--this.leg4.rotationPointZ;
 	}
 
-	public void render(float var1, float var2, float var3, float var4, float var5, float var6) {
-		super.render(var1, var2, var3, var4, var5, var6);
-		this.horn1.render(var6);
-		this.horn2.render(var6);
-		this.udders.render(var6);
+	public void render(float float1, float float2, float float3, float float4, float float5, float float6) {
+		super.render(float1, float2, float3, float4, float5, float6);
+		this.horn1.render(float6);
+		this.horn2.render(float6);
+		this.udders.render(float6);
 	}
 
-	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
-		super.setRotationAngles(var1, var2, var3, var4, var5, var6);
+	public void setRotationAngles(float float1, float float2, float float3, float float4, float float5, float float6) {
+		super.setRotationAngles(float1, float2, float3, float4, float5, float6);
 		this.horn1.rotateAngleY = this.head.rotateAngleY;
 		this.horn1.rotateAngleX = this.head.rotateAngleX;
 		this.horn2.rotateAngleY = this.head.rotateAngleY;
--- net/minecraft/src/MCHashTable.java
+++ net/minecraft/src/MCHashTable.java
@@ -1,135 +1,140 @@
 package net.minecraft.src;
 
+import java.util.Objects;
+
 public class MCHashTable {
 	private transient MCHashEntry[] slots = new MCHashEntry[16];
 	private transient int count;
 	private int threshold = 12;
-	private final float growFactor = 12.0F / 16.0F;
+	private final float growFactor = 0.75F;
 	private transient volatile int versionStamp;
 
-	private static int computeHash(int var0) {
-		var0 ^= var0 >>> 20 ^ var0 >>> 12;
-		return var0 ^ var0 >>> 7 ^ var0 >>> 4;
-	}
-
-	private static int getSlotIndex(int var0, int var1) {
-		return var0 & var1 - 1;
-	}
-
-	public Object lookup(int var1) {
-		int var2 = computeHash(var1);
-
-		for(MCHashEntry var3 = this.slots[getSlotIndex(var2, this.slots.length)]; var3 != null; var3 = var3.nextEntry) {
-			if(var3.hashEntry == var1) {
-				return var3.valueEntry;
+	private static int computeHash(int hash) {
+		hash ^= hash >>> 20 ^ hash >>> 12;
+		return hash ^ hash >>> 7 ^ hash >>> 4;
+	}
+
+	private static int getSlotIndex(int integer1, int integer2) {
+		return integer1 & integer2 - 1;
+	}
+
+	public Object lookup(int integer) {
+		int i2 = computeHash(integer);
+
+		for(MCHashEntry mCHashEntry3 = this.slots[getSlotIndex(i2, this.slots.length)]; mCHashEntry3 != null; mCHashEntry3 = mCHashEntry3.nextEntry) {
+			if(mCHashEntry3.hashEntry == integer) {
+				return mCHashEntry3.valueEntry;
 			}
 		}
 
 		return null;
 	}
 
-	public void addKey(int var1, Object var2) {
-		int var3 = computeHash(var1);
-		int var4 = getSlotIndex(var3, this.slots.length);
+	public void addKey(int integer, Object object) {
+		int i3 = computeHash(integer);
+		int i4 = getSlotIndex(i3, this.slots.length);
 
-		for(MCHashEntry var5 = this.slots[var4]; var5 != null; var5 = var5.nextEntry) {
-			if(var5.hashEntry == var1) {
-				var5.valueEntry = var2;
+		for(MCHashEntry mCHashEntry5 = this.slots[i4]; mCHashEntry5 != null; mCHashEntry5 = mCHashEntry5.nextEntry) {
+			if(mCHashEntry5.hashEntry == integer) {
+				mCHashEntry5.valueEntry = object;
 			}
 		}
 
 		++this.versionStamp;
-		this.insert(var3, var1, var2, var4);
+		this.insert(i3, integer, object, i4);
 	}
 
-	private void grow(int var1) {
-		MCHashEntry[] var2 = this.slots;
-		int var3 = var2.length;
-		if(var3 == 1073741824) {
+	private void grow(int integer) {
+		MCHashEntry[] mCHashEntry2 = this.slots;
+		int i3 = mCHashEntry2.length;
+		if(i3 == 1073741824) {
 			this.threshold = Integer.MAX_VALUE;
 		} else {
-			MCHashEntry[] var4 = new MCHashEntry[var1];
-			this.copyTo(var4);
-			this.slots = var4;
-			this.threshold = (int)((float)var1 * this.growFactor);
+			MCHashEntry[] mCHashEntry4 = new MCHashEntry[integer];
+			this.copyTo(mCHashEntry4);
+			this.slots = mCHashEntry4;
+			float f10001 = (float)integer;
+			Objects.requireNonNull(this);
+			this.threshold = (int)(f10001 * 0.75F);
 		}
+
 	}
 
-	private void copyTo(MCHashEntry[] var1) {
-		MCHashEntry[] var2 = this.slots;
-		int var3 = var1.length;
-
-		for(int var4 = 0; var4 < var2.length; ++var4) {
-			MCHashEntry var5 = var2[var4];
-			if(var5 != null) {
-				var2[var4] = null;
-
-				MCHashEntry var6;
+	private void copyTo(MCHashEntry[] arr) {
+		MCHashEntry[] mCHashEntry2 = this.slots;
+		int i3 = arr.length;
+
+		for(int i4 = 0; i4 < mCHashEntry2.length; ++i4) {
+			MCHashEntry mCHashEntry5 = mCHashEntry2[i4];
+			if(mCHashEntry5 != null) {
+				mCHashEntry2[i4] = null;
+
+				MCHashEntry mCHashEntry6;
 				do {
-					var6 = var5.nextEntry;
-					int var7 = getSlotIndex(var5.slotHash, var3);
-					var5.nextEntry = var1[var7];
-					var1[var7] = var5;
-					var5 = var6;
-				} while(var6 != null);
+					mCHashEntry6 = mCHashEntry5.nextEntry;
+					int i7 = getSlotIndex(mCHashEntry5.slotHash, i3);
+					mCHashEntry5.nextEntry = arr[i7];
+					arr[i7] = mCHashEntry5;
+					mCHashEntry5 = mCHashEntry6;
+				} while(mCHashEntry6 != null);
 			}
 		}
 
 	}
 
-	public Object removeObject(int var1) {
-		MCHashEntry var2 = this.removeEntry(var1);
-		return var2 == null ? null : var2.valueEntry;
+	public Object removeObject(int integer) {
+		MCHashEntry mCHashEntry2 = this.removeEntry(integer);
+		return mCHashEntry2 == null ? null : mCHashEntry2.valueEntry;
 	}
 
-	final MCHashEntry removeEntry(int var1) {
-		int var2 = computeHash(var1);
-		int var3 = getSlotIndex(var2, this.slots.length);
-		MCHashEntry var4 = this.slots[var3];
+	final MCHashEntry removeEntry(int integer) {
+		int i2 = computeHash(integer);
+		int i3 = getSlotIndex(i2, this.slots.length);
+		MCHashEntry mCHashEntry4 = this.slots[i3];
 
-		MCHashEntry var5;
-		MCHashEntry var6;
-		for(var5 = var4; var5 != null; var5 = var6) {
-			var6 = var5.nextEntry;
-			if(var5.hashEntry == var1) {
+		MCHashEntry mCHashEntry5;
+		MCHashEntry mCHashEntry6;
+		for(mCHashEntry5 = mCHashEntry4; mCHashEntry5 != null; mCHashEntry5 = mCHashEntry6) {
+			mCHashEntry6 = mCHashEntry5.nextEntry;
+			if(mCHashEntry5.hashEntry == integer) {
 				++this.versionStamp;
 				--this.count;
-				if(var4 == var5) {
-					this.slots[var3] = var6;
+				if(mCHashEntry4 == mCHashEntry5) {
+					this.slots[i3] = mCHashEntry6;
 				} else {
-					var4.nextEntry = var6;
+					mCHashEntry4.nextEntry = mCHashEntry6;
 				}
 
-				return var5;
+				return mCHashEntry5;
 			}
 
-			var4 = var5;
+			mCHashEntry4 = mCHashEntry5;
 		}
 
-		return var5;
+		return mCHashEntry5;
 	}
 
 	public void clearMap() {
 		++this.versionStamp;
-		MCHashEntry[] var1 = this.slots;
+		MCHashEntry[] mCHashEntry1 = this.slots;
 
-		for(int var2 = 0; var2 < var1.length; ++var2) {
-			var1[var2] = null;
+		for(int i2 = 0; i2 < mCHashEntry1.length; ++i2) {
+			mCHashEntry1[i2] = null;
 		}
 
 		this.count = 0;
 	}
 
-	private void insert(int var1, int var2, Object var3, int var4) {
-		MCHashEntry var5 = this.slots[var4];
-		this.slots[var4] = new MCHashEntry(var1, var2, var3, var5);
+	private void insert(int integer1, int integer2, Object object, int integer4) {
+		MCHashEntry mCHashEntry5 = this.slots[integer4];
+		this.slots[integer4] = new MCHashEntry(integer1, integer2, object, mCHashEntry5);
 		if(this.count++ >= this.threshold) {
 			this.grow(2 * this.slots.length);
 		}
 
 	}
 
-	static int getHash(int var0) {
-		return computeHash(var0);
+	static int getHash(int integer) {
+		return computeHash(integer);
 	}
 }
--- net/minecraft/src/ChunkCoordIntPair.java
+++ net/minecraft/src/ChunkCoordIntPair.java
@@ -4,17 +4,17 @@
 	public int chunkXPos;
 	public int chunkZPos;
 
-	public ChunkCoordIntPair(int var1, int var2) {
-		this.chunkXPos = var1;
-		this.chunkZPos = var2;
+	public ChunkCoordIntPair(int chunkXPos, int chunkZPos) {
+		this.chunkXPos = chunkXPos;
+		this.chunkZPos = chunkZPos;
 	}
 
 	public int hashCode() {
 		return this.chunkXPos << 8 | this.chunkZPos;
 	}
 
-	public boolean equals(Object var1) {
-		ChunkCoordIntPair var2 = (ChunkCoordIntPair)var1;
-		return var2.chunkXPos == this.chunkXPos && var2.chunkZPos == this.chunkZPos;
+	public boolean equals(Object chunkCoordIntPair) {
+		ChunkCoordIntPair chunkCoordIntPair2 = (ChunkCoordIntPair)chunkCoordIntPair;
+		return chunkCoordIntPair2.chunkXPos == this.chunkXPos && chunkCoordIntPair2.chunkZPos == this.chunkZPos;
 	}
 }
--- /dev/null
+++ net/minecraft/src/DS5InstrPlayerUpdate.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+public class DS5InstrPlayerUpdate implements DS5Instruction {
+	public int controllerIndex;
+	public boolean p1;
+	public boolean p2;
+	public boolean p3;
+	public boolean p4;
+	public boolean p5 = false;
+
+	public DS5InstrPlayerUpdate(int integer, boolean boolean2, boolean boolean3, boolean boolean4, boolean boolean5, boolean boolean6) {
+		this.controllerIndex = integer;
+		this.p1 = boolean2;
+		this.p2 = boolean3;
+		this.p3 = boolean4;
+		this.p4 = boolean5;
+		this.p5 = boolean6;
+	}
+
+	public String GetJSON() {
+		return "{\"type\":3,\"parameters\":[" + this.controllerIndex + "," + this.p1 + "," + this.p2 + "," + this.p3 + "," + this.p4 + "," + this.p5 + "]}";
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockFarmlandOld.java
@@ -1,0 +1,93 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockFarmlandOld extends BlockOld {
+	protected BlockFarmlandOld(int integer) {
+		super(integer, Material.grass);
+		this.blockIndexInTexture = 87;
+		this.setTickOnLoad(true);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.9375F, 1.0F);
+		this.setLightOpacity(255);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return AxisAlignedBB.getBoundingBoxFromPool((double)(integer2 + 0), (double)(integer3 + 0), (double)(integer4 + 0), (double)(integer2 + 1), (double)(integer3 + 1), (double)(integer4 + 1));
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int integer1, int integer2) {
+		return integer1 == 1 && integer2 > 0 ? this.blockIndexInTexture - 1 : (integer1 == 1 ? this.blockIndexInTexture : 2);
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(random.nextInt(5) == 0) {
+			if(this.isWaterNearby(vg, integer2, integer3, integer4)) {
+				vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 7);
+			} else {
+				int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+				if(i6 > 0) {
+					vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i6 - 1);
+				} else if(!this.isCropsNearby(vg, integer2, integer3, integer4)) {
+					vg.setBlockWithNotify(integer2, integer3, integer4, BlockOld.dirt.blockID);
+				}
+			}
+		}
+
+	}
+
+	public void onEntityWalking(World vg, int integer2, int integer3, int integer4, Entity xy) {
+		if(vg.rand.nextInt(4) == 0) {
+			vg.setBlockWithNotify(integer2, integer3, integer4, BlockOld.dirt.blockID);
+		}
+
+	}
+
+	private boolean isCropsNearby(World vg, int integer2, int integer3, int integer4) {
+		byte b5 = 0;
+
+		for(int i6 = integer2 - b5; i6 <= integer2 + b5; ++i6) {
+			for(int i7 = integer4 - b5; i7 <= integer4 + b5; ++i7) {
+				if(vg.getBlockId(i6, integer3 + 1, i7) == BlockOld.crops.blockID) {
+					return true;
+				}
+			}
+		}
+
+		return false;
+	}
+
+	private boolean isWaterNearby(World vg, int integer2, int integer3, int integer4) {
+		for(int i5 = integer2 - 4; i5 <= integer2 + 4; ++i5) {
+			for(int i6 = integer3; i6 <= integer3 + 1; ++i6) {
+				for(int i7 = integer4 - 4; i7 <= integer4 + 4; ++i7) {
+					if(vg.getBlockMaterial(i5, i6, i7) == Material.water) {
+						return true;
+					}
+				}
+			}
+		}
+
+		return false;
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		super.onNeighborBlockChange(vg, integer2, integer3, integer4, integer5);
+		Material material6 = vg.getBlockMaterial(integer2, integer3 + 1, integer4);
+		if(material6.isSolid()) {
+			vg.setBlockWithNotify(integer2, integer3, integer4, BlockOld.dirt.blockID);
+		}
+
+	}
+
+	public int idDropped(int integer, Random random) {
+		return BlockOld.dirt.idDropped(0, random);
+	}
+}
--- /dev/null
+++ net/minecraft/src/HandlerPlayDemoUnknownClass.java
@@ -1,0 +1,78 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class HandlerPlayDemoUnknownClass {
+	public EntityPlayer field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4;
+	boolean field_12207_3n80M78yRyIgst88VUz7m4h73K5qXah2YqY6SWx5a5z06qrwS9T9nRorsqa3 = false;
+	long field_12208_98R5hOj4T943HDXWGduNRCkZ54wGppUZ0fFo3jfk0ZI19ZZ4jcqoAqziwRBE = -1L;
+	public List field_12210_1g5X6A25jcG50Z3d47g1ufx5qZuFNya14hd6OpQ6a42pd2RKbHZAqAO16G5P = new ArrayList();
+	public List field_12206_2HOPpg76h0bW5PAbZt7J9ovHj1VeAQI4N9188c6RpWMKo4M8N006h5F970jY = new ArrayList();
+
+	public HandlerPlayDemoUnknownClass(EntityPlayer gb) {
+		this.field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4 = gb;
+	}
+
+	public void func_12202_16f5qR4S63G9o02Iv9q3fI2EBSIV7xO6D6qHK36vkX5ETh2rQeDp7rBKoju0(EntityPlayer gb) {
+		this.field_12210_1g5X6A25jcG50Z3d47g1ufx5qZuFNya14hd6OpQ6a42pd2RKbHZAqAO16G5P.clear();
+		this.field_12206_2HOPpg76h0bW5PAbZt7J9ovHj1VeAQI4N9188c6RpWMKo4M8N006h5F970jY.clear();
+		this.field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4 = gb;
+		this.field_12208_98R5hOj4T943HDXWGduNRCkZ54wGppUZ0fFo3jfk0ZI19ZZ4jcqoAqziwRBE = gb.worldObj.worldTime;
+		this.field_12207_3n80M78yRyIgst88VUz7m4h73K5qXah2YqY6SWx5a5z06qrwS9T9nRorsqa3 = true;
+	}
+
+	public void func_12204_8r9RTHlpJjIj8rv8a68Pq9g6006yw2MZ4W4u9N9p23i9532c8WU7ByApxh50() {
+		this.field_12207_3n80M78yRyIgst88VUz7m4h73K5qXah2YqY6SWx5a5z06qrwS9T9nRorsqa3 = false;
+	}
+
+	public HandlerPlayDemo func_12203_9W0B10aFpgCUU50wQ8qmV8j22rCms54pw7x9S5FyOt706cg3i6CeZ86wj9Wx() {
+		return new HandlerPlayDemo(new ArrayList(this.field_12210_1g5X6A25jcG50Z3d47g1ufx5qZuFNya14hd6OpQ6a42pd2RKbHZAqAO16G5P), new ArrayList(this.field_12206_2HOPpg76h0bW5PAbZt7J9ovHj1VeAQI4N9188c6RpWMKo4M8N006h5F970jY));
+	}
+
+	public void func_12199_0T1EBqlwN0r6zrh3Sg0XWHZ8YGwKZ7S93cTMLKw1r2Y6V9Bl9qyCtXn0g300(String string) {
+		(new HandlerPlayDemo(this.field_12210_1g5X6A25jcG50Z3d47g1ufx5qZuFNya14hd6OpQ6a42pd2RKbHZAqAO16G5P, this.field_12206_2HOPpg76h0bW5PAbZt7J9ovHj1VeAQI4N9188c6RpWMKo4M8N006h5F970jY)).func_11429_4Hdb2tF4Ro161cgZ713aaHheHwul09r95mRk40083ARmzqow29B4CqUo84M6(string);
+	}
+
+	public void func_12201_8RE0128kf7wva064sQUJOS8L9G3w5V9gk0Qrz52s0qWi1q3KB37727x8PLKw(String string) {
+		if(this.field_12207_3n80M78yRyIgst88VUz7m4h73K5qXah2YqY6SWx5a5z06qrwS9T9nRorsqa3) {
+			this.field_12206_2HOPpg76h0bW5PAbZt7J9ovHj1VeAQI4N9188c6RpWMKo4M8N006h5F970jY.add(new HandlerPlayDemoUnknownClass3(this.field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4.worldObj.worldTime - this.field_12208_98R5hOj4T943HDXWGduNRCkZ54wGppUZ0fFo3jfk0ZI19ZZ4jcqoAqziwRBE, string));
+		}
+
+	}
+
+	public void func_12196_7s9IfTKre2uJtyoPjdLc93WmidSQs9AM2aDgi63837RD3989LlCE6V4C08ci() {
+		if(this.field_12207_3n80M78yRyIgst88VUz7m4h73K5qXah2YqY6SWx5a5z06qrwS9T9nRorsqa3) {
+			this.field_12210_1g5X6A25jcG50Z3d47g1ufx5qZuFNya14hd6OpQ6a42pd2RKbHZAqAO16G5P.add(new HandlerPlayDemoUnknownClass2(this.field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4.worldObj.worldTime - this.field_12208_98R5hOj4T943HDXWGduNRCkZ54wGppUZ0fFo3jfk0ZI19ZZ4jcqoAqziwRBE, this.field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4.posX, this.field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4.posY, this.field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4.posZ, (double)this.field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4.rotationPitch, (double)this.field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4.rotationYaw, 0.0D, (double)this.field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4.limbSwing, (double)this.field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4.limbYaw));
+			if(this.field_12210_1g5X6A25jcG50Z3d47g1ufx5qZuFNya14hd6OpQ6a42pd2RKbHZAqAO16G5P.size() == 72000) {
+				this.func_12204_8r9RTHlpJjIj8rv8a68Pq9g6006yw2MZ4W4u9N9p23i9532c8WU7ByApxh50();
+			}
+		}
+
+	}
+
+	public void func_12200_2zuKLzAjc8o3T9KVZ7ZY36o6qOp5e1FG836622Br32SKguF06W9W1437p52T() {
+		this.field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4.worldObj.spawnEntityInWorld(new EntityOtherPlayerMPUnknownClass(this.field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4.worldObj, new HandlerPlayDemo(this.field_12210_1g5X6A25jcG50Z3d47g1ufx5qZuFNya14hd6OpQ6a42pd2RKbHZAqAO16G5P, this.field_12206_2HOPpg76h0bW5PAbZt7J9ovHj1VeAQI4N9188c6RpWMKo4M8N006h5F970jY, InputHandler.mc.session.username)));
+	}
+
+	public void func_12197_19n2GNseUM6bUMylgv317c3eT8jC5ipR9O2vu6236YuBTnxAj7cllYnJ652J(HandlerPlayDemo rw) {
+		this.field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4.worldObj.spawnEntityInWorld(new EntityOtherPlayerMPUnknownClass(this.field_12209_9WsLkT4PFeKl6RV1R7cUzcc7hWs6t9ij36v5SLGxJTzwivHhk7PG5UN5lOi4.worldObj, rw));
+	}
+
+	public void func_12198_5E6pR978f3G6kA5h9oL5C9V6089y1jhc16925Ck9G7790FzlQf0011B7Nr42(World vg) {
+		for(int i2 = 0; i2 < vg.playerEntities.size(); ++i2) {
+			if(vg.playerEntities.get(i2) instanceof EntityOtherPlayerMPUnknownClass) {
+				((EntityOtherPlayerMPUnknownClass)vg.playerEntities.get(i2)).func_9038_1vEc42Y7c91b4gM7oY72q1v1gF1P33XCpUko2cq23lKl2JrT3iJUBoY1U7dI();
+			}
+		}
+
+	}
+
+	public void func_12205_6ZOj2zwwjPk9f604twAF89u12c3MGns9EqJD4l3jZR2R6cy50aEWBthikzOk(String string) {
+		HandlerPlayDemo handlerPlayDemo2 = HandlerPlayDemo.func_11428_9k6E1ErM8m8Ekl2tnCyj5PljXv5fpIe33XB87jRlW98HF72SweTYv0JQvjaQ(string);
+		if(handlerPlayDemo2 != null) {
+			InputHandler.mc.theWorld.spawnEntityInWorld(new EntityOtherPlayerMPUnknownClass(InputHandler.mc.thePlayer.worldObj, handlerPlayDemo2));
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandDisconnect.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+class CommandDisconnect extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8568_5QHuFFLj6A1Ezq6hvOPL91t343YKkZ6iE7NSWDNp9T7hm7PTnmk8195gqK41;
+    
+    CommandDisconnect(final CommandManager abb) {
+        this.field_8568_5QHuFFLj6A1Ezq6hvOPL91t343YKkZ6iE7NSWDNp9T7hm7PTnmk8195gqK41 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        if (InputHandler.mc.theWorld != null) {
+            if (InputHandler.mc.isMultiplayerWorld()) {
+                InputHandler.mc.theWorld.sendQuittingDisconnectingPacket();
+            }
+            InputHandler.mc.changeWorld1(null);
+            InputHandler.mc.displayGuiScreen(new GuiMainMenu());
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/BlockTNTOld.java
@@ -1,0 +1,37 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockTNTOld extends BlockOld {
+	public BlockTNTOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.tnt);
+	}
+
+	public int getBlockTextureFromSide(int integer) {
+		return integer == 0 ? this.blockIndexInTexture + 2 : (integer == 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture);
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		if(integer5 > 0 && BlockOld.blocksList[integer5].canProvidePower() && vg.isBlockIndirectlyGettingPowered(integer2, integer3, integer4)) {
+			this.onBlockDestroyedByPlayer(vg, integer2, integer3, integer4, 0);
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+		}
+
+	}
+
+	public int quantityDropped(Random random) {
+		return 0;
+	}
+
+	public void onBlockDestroyedByExplosion(World vg, int integer2, int integer3, int integer4) {
+		EntityTNTPrimed entityTNTPrimed5 = new EntityTNTPrimed(vg, (float)integer2 + 0.5F, (float)integer3 + 0.5F, (float)integer4 + 0.5F);
+		entityTNTPrimed5.fuse = vg.rand.nextInt(entityTNTPrimed5.fuse / 4) + entityTNTPrimed5.fuse / 8;
+		vg.spawnEntityInWorld(entityTNTPrimed5);
+	}
+
+	public void onBlockDestroyedByPlayer(World vg, int integer2, int integer3, int integer4, int integer5) {
+		EntityTNTPrimed entityTNTPrimed6 = new EntityTNTPrimed(vg, (float)integer2 + 0.5F, (float)integer3 + 0.5F, (float)integer4 + 0.5F);
+		vg.spawnEntityInWorld(entityTNTPrimed6);
+		vg.playSoundAtEntity(entityTNTPrimed6, "random.fuse", 1.0F, 1.0F);
+	}
+}
--- net/minecraft/src/BlockMobSpawner.java
+++ net/minecraft/src/BlockMobSpawner.java
@@ -3,19 +3,19 @@
 import java.util.Random;
 
 public class BlockMobSpawner extends BlockContainer {
-	protected BlockMobSpawner(int var1, int var2) {
-		super(var1, var2, Material.rock);
+	protected BlockMobSpawner(int id, int blockIndex) {
+		super(id, blockIndex, Material.rock);
 	}
 
 	protected TileEntity getBlockEntity() {
 		return new TileEntityMobSpawner();
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return 0;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 0;
 	}
 
--- /dev/null
+++ net/minecraft/src/BlockHighwoodDoor.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockHighwoodDoor extends BlockDoor {
+	public BlockHighwoodDoor(int integer1, int integer2) {
+		super(integer1, Material.wood);
+		this.blockIndexInTexture = integer2;
+	}
+
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : ExtItems.HighwoodDoor.shiftedIndex;
+	}
+}
--- net/minecraft/src/EntityDiggingFX.java
+++ net/minecraft/src/EntityDiggingFX.java
@@ -1,10 +1,10 @@
 package net.minecraft.src;
 
 public class EntityDiggingFX extends EntityFX {
-	public EntityDiggingFX(World var1, double var2, double var4, double var6, double var8, double var10, double var12, Block var14) {
-		super(var1, var2, var4, var6, var8, var10, var12);
-		this.particleTextureIndex = var14.blockIndexInTexture;
-		this.particleGravity = var14.blockParticleGravity;
+	public EntityDiggingFX(World worldObj, double x, double y, double z, double motionX, double motionY, double motionZ, Block block) {
+		super(worldObj, x, y, z, motionX, motionY, motionZ);
+		this.particleTextureIndex = block.blockIndexInTexture;
+		this.particleGravity = block.blockParticleGravity;
 		this.particleRed = this.particleGreen = this.particleBlue = 0.6F;
 		this.particleScale /= 2.0F;
 	}
@@ -13,20 +13,20 @@
 		return 1;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		float var8 = ((float)(this.particleTextureIndex % 16) + this.particleTextureJitterX / 4.0F) / 16.0F;
-		float var9 = var8 + 0.999F / 64.0F;
-		float var10 = ((float)(this.particleTextureIndex / 16) + this.particleTextureJitterY / 4.0F) / 16.0F;
-		float var11 = var10 + 0.999F / 64.0F;
-		float var12 = 0.1F * this.particleScale;
-		float var13 = (float)(this.prevPosX + (this.posX - this.prevPosX) * (double)var2 - interpPosX);
-		float var14 = (float)(this.prevPosY + (this.posY - this.prevPosY) * (double)var2 - interpPosY);
-		float var15 = (float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)var2 - interpPosZ);
-		float var16 = this.getBrightness(var2);
-		var1.setColorOpaque_F(var16 * this.particleRed, var16 * this.particleGreen, var16 * this.particleBlue);
-		var1.addVertexWithUV((double)(var13 - var3 * var12 - var6 * var12), (double)(var14 - var4 * var12), (double)(var15 - var5 * var12 - var7 * var12), (double)var8, (double)var11);
-		var1.addVertexWithUV((double)(var13 - var3 * var12 + var6 * var12), (double)(var14 + var4 * var12), (double)(var15 - var5 * var12 + var7 * var12), (double)var8, (double)var10);
-		var1.addVertexWithUV((double)(var13 + var3 * var12 + var6 * var12), (double)(var14 + var4 * var12), (double)(var15 + var5 * var12 + var7 * var12), (double)var9, (double)var10);
-		var1.addVertexWithUV((double)(var13 + var3 * var12 - var6 * var12), (double)(var14 - var4 * var12), (double)(var15 + var5 * var12 - var7 * var12), (double)var9, (double)var11);
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		float f8 = ((float)(this.particleTextureIndex % 16) + this.particleTextureJitterX / 4.0F) / 16.0F;
+		float f9 = f8 + 0.015609375F;
+		float f10 = ((float)(this.particleTextureIndex / 16) + this.particleTextureJitterY / 4.0F) / 32.0F;
+		float f11 = f10 + 0.0078125F;
+		float f12 = 0.1F * this.particleScale;
+		float f13 = (float)(this.prevPosX + (this.posX - this.prevPosX) * (double)renderPartialTick - interpPosX);
+		float f14 = (float)(this.prevPosY + (this.posY - this.prevPosY) * (double)renderPartialTick - interpPosY);
+		float f15 = (float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)renderPartialTick - interpPosZ);
+		float f16 = this.getBrightness(renderPartialTick);
+		tessellator.setColorOpaque_F(f16 * this.particleRed, f16 * this.particleGreen, f16 * this.particleBlue);
+		tessellator.addVertexWithUV((double)(f13 - xOffset * f12 - xOffset2 * f12), (double)(f14 - yOffset * f12), (double)(f15 - zOffset * f12 - zOffset2 * f12), (double)f8, (double)f11);
+		tessellator.addVertexWithUV((double)(f13 - xOffset * f12 + xOffset2 * f12), (double)(f14 + yOffset * f12), (double)(f15 - zOffset * f12 + zOffset2 * f12), (double)f8, (double)f10);
+		tessellator.addVertexWithUV((double)(f13 + xOffset * f12 + xOffset2 * f12), (double)(f14 + yOffset * f12), (double)(f15 + zOffset * f12 + zOffset2 * f12), (double)f9, (double)f10);
+		tessellator.addVertexWithUV((double)(f13 + xOffset * f12 - xOffset2 * f12), (double)(f14 - yOffset * f12), (double)(f15 + zOffset * f12 - zOffset2 * f12), (double)f9, (double)f11);
 	}
 }
--- /dev/null
+++ net/minecraft/src/TileEntityEssenceFountain.java
@@ -1,0 +1,52 @@
+package net.minecraft.src;
+
+public class TileEntityEssenceFountain extends TileEntity implements IInventory {
+	ItemStack singularSlot = new ItemStack(ExtItems.essence, 0);
+	public int counter = 0;
+
+	public int getSizeInventory() {
+		return 1;
+	}
+
+	public ItemStack getStackInSlot(int slot) {
+		return this.singularSlot;
+	}
+
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(stackSize > this.singularSlot.stackSize) {
+			this.singularSlot = new ItemStack(ExtItems.essence, 0);
+		} else {
+			this.singularSlot.stackSize -= stackSize;
+		}
+
+		return this.singularSlot;
+	}
+
+	public void onInventoryChanged() {
+		super.onInventoryChanged();
+	}
+
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.singularSlot = itemStack;
+	}
+
+	public String getInvName() {
+		return "unused";
+	}
+
+	public int getInventoryStackLimit() {
+		return 64;
+	}
+
+	public void writeToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setInteger("counter", this.counter);
+		nbttagcompound.setInteger("count", this.singularSlot.stackSize);
+		super.writeToNBT(nbttagcompound);
+	}
+
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		this.counter = nbttagcompound.getInteger("counter");
+		this.singularSlot = new ItemStack(ExtItems.essence, nbttagcompound.getInteger("count"));
+		super.readFromNBT(nbttagcompound);
+	}
+}
--- net/minecraft/src/GuiYesNo.java
+++ net/minecraft/src/GuiYesNo.java
@@ -6,11 +6,11 @@
 	private String message2;
 	private int worldNumber;
 
-	public GuiYesNo(GuiScreen var1, String var2, String var3, int var4) {
-		this.parentScreen = var1;
-		this.message1 = var2;
-		this.message2 = var3;
-		this.worldNumber = var4;
+	public GuiYesNo(GuiScreen hr, String string2, String string3, int integer) {
+		this.parentScreen = hr;
+		this.message1 = string2;
+		this.message2 = string3;
+		this.worldNumber = integer;
 	}
 
 	public void initGui() {
@@ -18,14 +18,14 @@
 		this.controlList.add(new GuiSmallButton(1, this.width / 2 - 155 + 160, this.height / 6 + 96, "No"));
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		this.parentScreen.deleteWorld(var1.id == 0, this.worldNumber);
+	protected void actionPerformed(GuiButton button) {
+		this.parentScreen.deleteWorld(button.id == 0, this.worldNumber);
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.message1, this.width / 2, 70, 16777215);
-		this.drawCenteredString(this.fontRenderer, this.message2, this.width / 2, 90, 16777215);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, this.message1, this.width / 2, 70, 0xFFFFFF);
+		this.drawCenteredString(this.fontRenderer, this.message2, this.width / 2, 90, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- net/minecraft/src/TileEntityMobSpawner.java
+++ net/minecraft/src/TileEntityMobSpawner.java
@@ -6,10 +6,6 @@
 	public double yaw;
 	public double prevYaw = 0.0D;
 
-	public TileEntityMobSpawner() {
-		this.delay = 20;
-	}
-
 	public boolean anyPlayerInRange() {
 		return this.worldObj.getClosestPlayer((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D, 16.0D) != null;
 	}
@@ -17,11 +13,11 @@
 	public void updateEntity() {
 		this.prevYaw = this.yaw;
 		if(this.anyPlayerInRange()) {
-			double var1 = (double)((float)this.xCoord + this.worldObj.rand.nextFloat());
-			double var3 = (double)((float)this.yCoord + this.worldObj.rand.nextFloat());
-			double var5 = (double)((float)this.zCoord + this.worldObj.rand.nextFloat());
-			this.worldObj.spawnParticle("smoke", var1, var3, var5, 0.0D, 0.0D, 0.0D);
-			this.worldObj.spawnParticle("flame", var1, var3, var5, 0.0D, 0.0D, 0.0D);
+			double d1 = (double)((float)this.xCoord + this.worldObj.rand.nextFloat());
+			double d3 = (double)((float)this.yCoord + this.worldObj.rand.nextFloat());
+			double d5 = (double)((float)this.zCoord + this.worldObj.rand.nextFloat());
+			this.worldObj.spawnParticle("smoke", d1, d3, d5, 0.0D, 0.0D, 0.0D);
+			this.worldObj.spawnParticle("flame", d1, d3, d5, 0.0D, 0.0D, 0.0D);
 
 			for(this.yaw += (double)(1000.0F / ((float)this.delay + 200.0F)); this.yaw > 360.0D; this.prevYaw -= 360.0D) {
 				this.yaw -= 360.0D;
@@ -34,60 +30,67 @@
 			if(this.delay > 0) {
 				--this.delay;
 			} else {
-				byte var7 = 4;
-
-				for(int var8 = 0; var8 < var7; ++var8) {
-					EntityLiving var9 = (EntityLiving)((EntityLiving)EntityList.createEntityByName(this.mobID, this.worldObj));
-					if(var9 == null) {
+				byte b7 = 4;
+				int i8 = 0;
+
+				while(true) {
+					if(i8 >= b7) {
+						super.updateEntity();
+						break;
+					}
+
+					EntityLiving entityLiving9 = (EntityLiving)EntityList.createEntityByName(this.mobID, this.worldObj);
+					if(entityLiving9 == null) {
 						return;
 					}
 
-					int var10 = this.worldObj.getEntitiesWithinAABB(var9.getClass(), AxisAlignedBB.getBoundingBoxFromPool((double)this.xCoord, (double)this.yCoord, (double)this.zCoord, (double)(this.xCoord + 1), (double)(this.yCoord + 1), (double)(this.zCoord + 1)).expand(8.0D, 4.0D, 8.0D)).size();
-					if(var10 >= 6) {
+					int i10 = this.worldObj.getEntitiesWithinAABB(entityLiving9.getClass(), AxisAlignedBB.getBoundingBoxFromPool((double)this.xCoord, (double)this.yCoord, (double)this.zCoord, (double)(this.xCoord + 1), (double)(this.yCoord + 1), (double)(this.zCoord + 1)).expand(8.0D, 4.0D, 8.0D)).size();
+					if(i10 >= 6) {
 						this.updateDelay();
 						return;
 					}
 
-					if(var9 != null) {
-						double var11 = (double)this.xCoord + (this.worldObj.rand.nextDouble() - this.worldObj.rand.nextDouble()) * 4.0D;
-						double var13 = (double)(this.yCoord + this.worldObj.rand.nextInt(3) - 1);
-						double var15 = (double)this.zCoord + (this.worldObj.rand.nextDouble() - this.worldObj.rand.nextDouble()) * 4.0D;
-						var9.setLocationAndAngles(var11, var13, var15, this.worldObj.rand.nextFloat() * 360.0F, 0.0F);
-						if(var9.getCanSpawnHere()) {
-							this.worldObj.spawnEntityInWorld(var9);
+					if(entityLiving9 != null) {
+						double d11 = (double)this.xCoord + (this.worldObj.rand.nextDouble() - this.worldObj.rand.nextDouble()) * 4.0D;
+						double d13 = (double)(this.yCoord + this.worldObj.rand.nextInt(3) - 1);
+						double d15 = (double)this.zCoord + (this.worldObj.rand.nextDouble() - this.worldObj.rand.nextDouble()) * 4.0D;
+						entityLiving9.setLocationAndAngles(d11, d13, d15, this.worldObj.rand.nextFloat() * 360.0F, 0.0F);
+						if(entityLiving9.getCanSpawnHere()) {
+							this.worldObj.spawnEntityInWorld(entityLiving9);
 
-							for(int var17 = 0; var17 < 20; ++var17) {
-								var1 = (double)this.xCoord + 0.5D + ((double)this.worldObj.rand.nextFloat() - 0.5D) * 2.0D;
-								var3 = (double)this.yCoord + 0.5D + ((double)this.worldObj.rand.nextFloat() - 0.5D) * 2.0D;
-								var5 = (double)this.zCoord + 0.5D + ((double)this.worldObj.rand.nextFloat() - 0.5D) * 2.0D;
-								this.worldObj.spawnParticle("smoke", var1, var3, var5, 0.0D, 0.0D, 0.0D);
-								this.worldObj.spawnParticle("flame", var1, var3, var5, 0.0D, 0.0D, 0.0D);
+							for(int i17 = 0; i17 < 20; ++i17) {
+								d1 = (double)this.xCoord + 0.5D + ((double)this.worldObj.rand.nextFloat() - 0.5D) * 2.0D;
+								d3 = (double)this.yCoord + 0.5D + ((double)this.worldObj.rand.nextFloat() - 0.5D) * 2.0D;
+								d5 = (double)this.zCoord + 0.5D + ((double)this.worldObj.rand.nextFloat() - 0.5D) * 2.0D;
+								this.worldObj.spawnParticle("smoke", d1, d3, d5, 0.0D, 0.0D, 0.0D);
+								this.worldObj.spawnParticle("flame", d1, d3, d5, 0.0D, 0.0D, 0.0D);
 							}
 
-							var9.spawnExplosionParticle();
+							entityLiving9.spawnExplosionParticle();
 							this.updateDelay();
 						}
 					}
+
+					++i8;
 				}
-
-				super.updateEntity();
 			}
 		}
+
 	}
 
 	private void updateDelay() {
 		this.delay = 200 + this.worldObj.rand.nextInt(600);
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		super.readFromNBT(var1);
-		this.mobID = var1.getString("EntityId");
-		this.delay = var1.getShort("Delay");
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		super.readFromNBT(nbttagcompound);
+		this.mobID = nbttagcompound.getString("EntityId");
+		this.delay = nbttagcompound.getShort("Delay");
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		super.writeToNBT(var1);
-		var1.setString("EntityId", this.mobID);
-		var1.setShort("Delay", (short)this.delay);
+	public void writeToNBT(NBTTagCompound nbttagcompound) {
+		super.writeToNBT(nbttagcompound);
+		nbttagcompound.setString("EntityId", this.mobID);
+		nbttagcompound.setShort("Delay", (short)this.delay);
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockFreezer.java
@@ -1,0 +1,100 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockFreezer extends BlockContainer {
+	private final boolean field_8373_3OQN5db1xqyB694grr3I4ikidBZaZpJf78W84Y6mb7bNN7V4B3v6qRFvdlnK;
+
+	public BlockFreezer(int integer1, int integer2, boolean boolean3) {
+		super(integer1, Material.rock);
+		this.blockIndexInTexture = integer2;
+		this.field_8373_3OQN5db1xqyB694grr3I4ikidBZaZpJf78W84Y6mb7bNN7V4B3v6qRFvdlnK = boolean3;
+	}
+
+	public int idDropped(int count, Random random) {
+		return ExtBlocks.Freezer.blockID;
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		super.onBlockAdded(world, x, y, z);
+		this.func_8371_0VOiSc9RlsB9S3K0IXk3nsroAy4MA966j55CxcrZkjk0A7ZjqX6r52L4ew80(world, x, y, z);
+	}
+
+	private void func_8371_0VOiSc9RlsB9S3K0IXk3nsroAy4MA966j55CxcrZkjk0A7ZjqX6r52L4ew80(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockId(integer2, integer3, integer4 - 1);
+		int i6 = vg.getBlockId(integer2, integer3, integer4 + 1);
+		int i7 = vg.getBlockId(integer2 - 1, integer3, integer4);
+		int i8 = vg.getBlockId(integer2 + 1, integer3, integer4);
+		byte b9 = 3;
+		if(Block.opaqueCubeLookup[i5] && !Block.opaqueCubeLookup[i6]) {
+			b9 = 3;
+		}
+
+		if(Block.opaqueCubeLookup[i6] && !Block.opaqueCubeLookup[i5]) {
+			b9 = 2;
+		}
+
+		if(Block.opaqueCubeLookup[i7] && !Block.opaqueCubeLookup[i8]) {
+			b9 = 5;
+		}
+
+		if(Block.opaqueCubeLookup[i8] && !Block.opaqueCubeLookup[i7]) {
+			b9 = 4;
+		}
+
+		vg.setBlockMetadataWithNotify(integer2, integer3, integer4, b9);
+	}
+
+	public int getBlockTexture(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return side != 1 && side != 0 ? (side != blockAccess.getBlockMetadata(x, y, z) ? (this.field_8373_3OQN5db1xqyB694grr3I4ikidBZaZpJf78W84Y6mb7bNN7V4B3v6qRFvdlnK ? this.blockIndexInTexture - 2 : this.blockIndexInTexture - 1) : this.blockIndexInTexture) : Block.stone.blockIndexInTexture;
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side != 1 && side != 0 ? (side == 3 ? this.blockIndexInTexture : (this.field_8373_3OQN5db1xqyB694grr3I4ikidBZaZpJf78W84Y6mb7bNN7V4B3v6qRFvdlnK ? this.blockIndexInTexture - 2 : this.blockIndexInTexture - 1)) : Block.stone.blockID;
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+		if(this.field_8373_3OQN5db1xqyB694grr3I4ikidBZaZpJf78W84Y6mb7bNN7V4B3v6qRFvdlnK) {
+			int i6 = worldObj.getBlockMetadata(x, y, z);
+			float f7 = (float)x + 0.5F;
+			float f8 = (float)y + 0.0F + rand.nextFloat() * 6.0F / 16.0F;
+			float f9 = (float)z + 0.5F;
+			float f10 = 0.52F;
+			float f11 = rand.nextFloat() * 0.6F - 0.3F;
+			int i12 = rand.nextInt(3) + 1;
+			if(i6 == 4) {
+				worldObj.spawnParticle("snowflake" + i12, (double)(f7 - f10), (double)f8, (double)(f9 + f11), 0.0D, -0.01D, 0.0D);
+			} else if(i6 == 5) {
+				worldObj.spawnParticle("snowflake" + i12, (double)(f7 + f10), (double)f8, (double)(f9 + f11), 0.0D, -0.01D, 0.0D);
+			} else if(i6 == 2) {
+				worldObj.spawnParticle("snowflake" + i12, (double)(f7 + f11), (double)f8, (double)(f9 - f10), 0.0D, -0.01D, 0.0D);
+			} else if(i6 == 3) {
+				worldObj.spawnParticle("snowflake" + i12, (double)(f7 + f11), (double)f8, (double)(f9 + f10), 0.0D, -0.01D, 0.0D);
+			}
+		}
+
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		TileEntityFreezer tileEntityFreezer6 = (TileEntityFreezer)world.getBlockTileEntity(x, y, z);
+		entityPlayer.displayFreezerGUI(tileEntityFreezer6);
+		return true;
+	}
+
+	public static void func_8372_4aw431LgXdi1L48jU4ZL07b193KS25bZ8cuY42CDd63ZfoFcG05V1VC53UbG(boolean boolean1, World vg, int integer3, int integer4, int integer5) {
+		int i5 = vg.getBlockMetadata(integer3, integer4, integer5);
+		TileEntity tileEntity6 = vg.getBlockTileEntity(integer3, integer4, integer5);
+		if(boolean1) {
+			vg.setBlockWithNotify(integer3, integer4, integer5, ExtBlocks.WorkingFreezer.blockID);
+		} else {
+			vg.setBlockWithNotify(integer3, integer4, integer5, ExtBlocks.Freezer.blockID);
+		}
+
+		vg.setBlockMetadataWithNotify(integer3, integer4, integer5, i5);
+		vg.setBlockTileEntity(integer3, integer4, integer5, tileEntity6);
+	}
+
+	protected TileEntity getBlockEntity() {
+		return new TileEntityFreezer();
+	}
+}
--- net/minecraft/src/Chunk.java
+++ net/minecraft/src/Chunk.java
@@ -27,7 +27,8 @@
 	public boolean hasEntities;
 	public long lastSaveTime;
 
-	public Chunk(World var1, int var2, int var3) {
+	public Chunk(World world, int xPosition, int zPosition) {
+		this.neverSave = false;
 		this.chunkTileEntityMap = new HashMap();
 		this.entities = new List[8];
 		this.isTerrainPopulated = false;
@@ -35,399 +36,411 @@
 		this.isChunkRendered = false;
 		this.hasEntities = false;
 		this.lastSaveTime = 0L;
-		this.worldObj = var1;
-		this.xPosition = var2;
-		this.zPosition = var3;
+		this.worldObj = world;
+		this.xPosition = xPosition;
+		this.zPosition = zPosition;
 		this.heightMap = new byte[256];
 
-		for(int var4 = 0; var4 < this.entities.length; ++var4) {
-			this.entities[var4] = new ArrayList();
+		for(int i4 = 0; i4 < this.entities.length; ++i4) {
+			this.entities[i4] = new ArrayList();
 		}
 
 	}
 
-	public Chunk(World var1, byte[] var2, int var3, int var4) {
-		this(var1, var3, var4);
-		this.blocks = var2;
-		this.data = new NibbleArray(var2.length);
-		this.skylightMap = new NibbleArray(var2.length);
-		this.blocklightMap = new NibbleArray(var2.length);
-	}
-
-	public boolean isAtLocation(int var1, int var2) {
-		return var1 == this.xPosition && var2 == this.zPosition;
-	}
-
-	public int getHeightValue(int var1, int var2) {
-		return this.heightMap[var2 << 4 | var1] & 255;
+	public Chunk(World world, byte[] blocks, int xPosition, int zPositin) {
+		this(world, xPosition, zPositin);
+		this.blocks = blocks;
+		this.data = new NibbleArray(blocks.length);
+		this.skylightMap = new NibbleArray(blocks.length);
+		this.blocklightMap = new NibbleArray(blocks.length);
+	}
+
+	public boolean isAtLocation(int xPosition, int zPosition) {
+		return xPosition == this.xPosition && zPosition == this.zPosition;
+	}
+
+	public int getHeightValue(int blockX, int blockZ) {
+		return this.heightMap[blockZ << 4 | blockX] & 255;
 	}
 
 	public void doNothing() {
 	}
 
 	public void generateHeightMap() {
-		int var1 = 127;
-
-		for(int var2 = 0; var2 < 16; ++var2) {
-			for(int var3 = 0; var3 < 16; ++var3) {
-				int var4 = 127;
-
-				for(int var5 = var2 << 11 | var3 << 7; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1]] == 0; --var4) {
+		int i1 = 127;
+
+		for(int i2 = 0; i2 < 16; ++i2) {
+			for(int i3 = 0; i3 < 16; ++i3) {
+				int i4 = 127;
+
+				for(int i5 = i2 << 11 | i3 << 7; i4 > 0 && Block.lightOpacity[this.blocks[i5 + i4 - 1] & 255] == 0; --i4) {
 				}
 
-				this.heightMap[var3 << 4 | var2] = (byte)var4;
-				if(var4 < var1) {
-					var1 = var4;
+				this.heightMap[i3 << 4 | i2] = (byte)i4;
+				if(i4 < i1) {
+					i1 = i4;
 				}
 			}
 		}
 
-		this.height = var1;
+		this.height = i1;
 		this.isModified = true;
 	}
 
 	public void generateSkylightMap() {
-		int var1 = 127;
+		int i1 = 127;
 
-		int var2;
-		int var3;
-		for(var2 = 0; var2 < 16; ++var2) {
-			for(var3 = 0; var3 < 16; ++var3) {
-				this.heightMap[var3 << 4 | var2] = -128;
-				this.relightBlock(var2, 127, var3);
-				if((this.heightMap[var3 << 4 | var2] & 255) < var1) {
-					var1 = this.heightMap[var3 << 4 | var2] & 255;
+		int i2;
+		int i3;
+		for(i2 = 0; i2 < 16; ++i2) {
+			for(i3 = 0; i3 < 16; ++i3) {
+				this.heightMap[i3 << 4 | i2] = -128;
+				this.relightBlock(i2, 127, i3);
+				if((this.heightMap[i3 << 4 | i2] & 255) < i1) {
+					i1 = this.heightMap[i3 << 4 | i2] & 255;
 				}
 			}
 		}
 
-		this.height = var1;
+		this.height = i1;
 
-		for(var2 = 0; var2 < 16; ++var2) {
-			for(var3 = 0; var3 < 16; ++var3) {
-				this.updateSkylight_do(var2, var3);
+		for(i2 = 0; i2 < 16; ++i2) {
+			for(i3 = 0; i3 < 16; ++i3) {
+				this.updateSkylight_do(i2, i3);
 			}
 		}
 
 		this.isModified = true;
 	}
 
-	private void updateSkylight_do(int var1, int var2) {
-		int var3 = this.getHeightValue(var1, var2);
-		int var4 = this.xPosition * 16 + var1;
-		int var5 = this.zPosition * 16 + var2;
-		this.checkSkylightNeighborUpdate(var4 - 1, var5, var3);
-		this.checkSkylightNeighborUpdate(var4 + 1, var5, var3);
-		this.checkSkylightNeighborUpdate(var4, var5 - 1, var3);
-		this.checkSkylightNeighborUpdate(var4, var5 + 1, var3);
+	private void updateSkylight_do(int x, int y) {
+		int i3 = this.getHeightValue(x, y);
+		int i4 = this.xPosition * 16 + x;
+		int i5 = this.zPosition * 16 + y;
+		this.checkSkylightNeighborUpdate(i4 - 1, i5, i3);
+		this.checkSkylightNeighborUpdate(i4 + 1, i5, i3);
+		this.checkSkylightNeighborUpdate(i4, i5 - 1, i3);
+		this.checkSkylightNeighborUpdate(i4, i5 + 1, i3);
 	}
 
-	private void checkSkylightNeighborUpdate(int var1, int var2, int var3) {
-		int var4 = this.worldObj.getHeightValue(var1, var2);
-		if(var4 > var3) {
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var1, var3, var2, var1, var4, var2);
-		} else if(var4 < var3) {
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var1, var4, var2, var1, var3, var2);
+	private void checkSkylightNeighborUpdate(int blockX, int blockZ, int blockY) {
+		int i4 = this.worldObj.getHeightValue(blockX, blockZ);
+		if(i4 > blockY) {
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, blockX, blockY, blockZ, blockX, i4, blockZ);
+		} else if(i4 < blockY) {
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, blockX, i4, blockZ, blockX, blockY, blockZ);
 		}
 
 		this.isModified = true;
 	}
 
-	private void relightBlock(int var1, int var2, int var3) {
-		int var4 = this.heightMap[var3 << 4 | var1] & 255;
-		int var5 = var4;
-		if(var2 > var4) {
-			var5 = var2;
-		}
-
-		for(int var6 = var1 << 11 | var3 << 7; var5 > 0 && Block.lightOpacity[this.blocks[var6 + var5 - 1]] == 0; --var5) {
-		}
-
-		if(var5 != var4) {
-			this.worldObj.markBlocksDirtyVertical(var1, var3, var5, var4);
-			this.heightMap[var3 << 4 | var1] = (byte)var5;
-			int var7;
-			int var8;
-			int var9;
-			if(var5 < this.height) {
-				this.height = var5;
+	private void relightBlock(int x, int y, int z) {
+		int i4 = this.heightMap[z << 4 | x] & 255;
+		int i5 = i4;
+		if(y > i4) {
+			i5 = y;
+		}
+
+		int i6;
+		for(i6 = x << 11 | z << 7; i5 > 0 && Block.lightOpacity[this.blocks[i6 + i5 - 1] & 255] == 0; --i5) {
+		}
+
+		if(i5 != i4) {
+			this.worldObj.markBlocksDirtyVertical(x, z, i5, i4);
+			this.heightMap[z << 4 | x] = (byte)i5;
+			int i7;
+			int i8;
+			if(i5 < this.height) {
+				this.height = i5;
 			} else {
-				var7 = 127;
-
-				for(var8 = 0; var8 < 16; ++var8) {
-					for(var9 = 0; var9 < 16; ++var9) {
-						if((this.heightMap[var9 << 4 | var8] & 255) < var7) {
-							var7 = this.heightMap[var9 << 4 | var8] & 255;
+				i6 = 127;
+				i7 = 0;
+
+				while(true) {
+					if(i7 >= 16) {
+						this.height = i6;
+						break;
+					}
+
+					for(i8 = 0; i8 < 16; ++i8) {
+						if((this.heightMap[i8 << 4 | i7] & 255) < i6) {
+							i6 = this.heightMap[i8 << 4 | i7] & 255;
 						}
 					}
+
+					++i7;
 				}
-
-				this.height = var7;
 			}
 
-			var7 = this.xPosition * 16 + var1;
-			var8 = this.zPosition * 16 + var3;
-			if(var5 < var4) {
-				for(var9 = var5; var9 < var4; ++var9) {
-					this.skylightMap.set(var1, var9, var3, 15);
+			i6 = this.xPosition * 16 + x;
+			i7 = this.zPosition * 16 + z;
+			if(i5 < i4) {
+				for(i8 = i5; i8 < i4; ++i8) {
+					this.skylightMap.set(x, i8, z, 15);
 				}
 			} else {
-				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var7, var4, var8, var7, var5, var8);
-
-				for(var9 = var4; var9 < var5; ++var9) {
-					this.skylightMap.set(var1, var9, var3, 0);
-				}
-			}
-
-			var9 = 15;
-
-			int var10;
-			for(var10 = var5; var5 > 0 && var9 > 0; this.skylightMap.set(var1, var5, var3, var9)) {
-				--var5;
-				int var11 = Block.lightOpacity[this.getBlockID(var1, var5, var3)];
-				if(var11 == 0) {
-					var11 = 1;
-				}
-
-				var9 -= var11;
-				if(var9 < 0) {
-					var9 = 0;
-				}
-			}
-
-			while(var5 > 0 && Block.lightOpacity[this.getBlockID(var1, var5 - 1, var3)] == 0) {
-				--var5;
-			}
-
-			if(var5 != var10) {
-				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var7 - 1, var5, var8 - 1, var7 + 1, var10, var8 + 1);
-			}
-
-			this.isModified = true;
-		}
-	}
-
-	public int getBlockID(int var1, int var2, int var3) {
-		return this.blocks[var1 << 11 | var3 << 7 | var2];
-	}
-
-	public boolean setBlockIDWithMetadata(int var1, int var2, int var3, int var4, int var5) {
-		byte var6 = (byte)var4;
-		int var7 = this.heightMap[var3 << 4 | var1] & 255;
-		int var8 = this.blocks[var1 << 11 | var3 << 7 | var2] & 255;
-		if(var8 == var4 && this.data.get(var1, var2, var3) == var5) {
-			return false;
-		} else {
-			int var9 = this.xPosition * 16 + var1;
-			int var10 = this.zPosition * 16 + var3;
-			this.blocks[var1 << 11 | var3 << 7 | var2] = var6;
-			if(var8 != 0 && !this.worldObj.multiplayerWorld) {
-				Block.blocksList[var8].onBlockRemoval(this.worldObj, var9, var2, var10);
-			}
-
-			this.data.set(var1, var2, var3, var5);
-			if(Block.lightOpacity[var6] != 0) {
-				if(var2 >= var7) {
-					this.relightBlock(var1, var2 + 1, var3);
-				}
-			} else if(var2 == var7 - 1) {
-				this.relightBlock(var1, var2, var3);
-			}
-
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var9, var2, var10, var9, var2, var10);
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, var9, var2, var10, var9, var2, var10);
-			this.updateSkylight_do(var1, var3);
-			if(var4 != 0) {
-				Block.blocksList[var4].onBlockAdded(this.worldObj, var9, var2, var10);
-			}
-
-			this.isModified = true;
-			return true;
-		}
-	}
-
-	public boolean setBlockID(int var1, int var2, int var3, int var4) {
-		byte var5 = (byte)var4;
-		int var6 = this.heightMap[var3 << 4 | var1] & 255;
-		int var7 = this.blocks[var1 << 11 | var3 << 7 | var2] & 255;
-		if(var7 == var4) {
-			return false;
-		} else {
-			int var8 = this.xPosition * 16 + var1;
-			int var9 = this.zPosition * 16 + var3;
-			this.blocks[var1 << 11 | var3 << 7 | var2] = var5;
-			if(var7 != 0) {
-				Block.blocksList[var7].onBlockRemoval(this.worldObj, var8, var2, var9);
-			}
-
-			this.data.set(var1, var2, var3, 0);
-			if(Block.lightOpacity[var5] != 0) {
-				if(var2 >= var6) {
-					this.relightBlock(var1, var2 + 1, var3);
-				}
-			} else if(var2 == var6 - 1) {
-				this.relightBlock(var1, var2, var3);
-			}
-
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var8, var2, var9, var8, var2, var9);
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, var8, var2, var9, var8, var2, var9);
-			this.updateSkylight_do(var1, var3);
-			if(var4 != 0 && !this.worldObj.multiplayerWorld) {
-				Block.blocksList[var4].onBlockAdded(this.worldObj, var8, var2, var9);
-			}
-
-			this.isModified = true;
-			return true;
-		}
-	}
-
-	public int getBlockMetadata(int var1, int var2, int var3) {
-		return this.data.get(var1, var2, var3);
-	}
-
-	public void setBlockMetadata(int var1, int var2, int var3, int var4) {
-		this.isModified = true;
-		this.data.set(var1, var2, var3, var4);
-	}
-
-	public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
-		return var1 == EnumSkyBlock.Sky ? this.skylightMap.get(var2, var3, var4) : (var1 == EnumSkyBlock.Block ? this.blocklightMap.get(var2, var3, var4) : 0);
-	}
-
-	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-		this.isModified = true;
-		if(var1 == EnumSkyBlock.Sky) {
-			this.skylightMap.set(var2, var3, var4, var5);
-		} else {
-			if(var1 != EnumSkyBlock.Block) {
+				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, i6, i4, i7, i6, i5, i7);
+
+				for(i8 = i4; i8 < i5; ++i8) {
+					this.skylightMap.set(x, i8, z, 0);
+				}
+			}
+
+			i8 = 15;
+
+			int i9;
+			for(i9 = i5; i5 > 0 && i8 > 0; this.skylightMap.set(x, i5, z, i8)) {
+				--i5;
+				int i10 = Block.lightOpacity[this.getBlockID(x, i5, z)];
+				if(i10 == 0) {
+					i10 = 1;
+				}
+
+				i8 -= i10;
+				if(i8 < 0) {
+					i8 = 0;
+				}
+			}
+
+			while(i5 > 0 && Block.lightOpacity[this.getBlockID(x, i5 - 1, z)] == 0) {
+				--i5;
+			}
+
+			if(i5 != i9) {
+				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, i6 - 1, i5, i7 - 1, i6 + 1, i9, i7 + 1);
+			}
+
+			this.isModified = true;
+		}
+
+	}
+
+	public int getBlockID(int x, int y, int z) {
+		int i4 = x << 11 | z << 7 | y;
+		return this.blocks[i4] & 255;
+	}
+
+	public boolean setBlockIDWithMetadata(int x, int y, int z, int id, int metadata) {
+		int i7 = this.heightMap[z << 4 | x] & 255;
+		int i8 = this.blocks[x << 11 | z << 7 | y] & 255;
+		if(i8 == id && this.data.get(x, y, z) == metadata) {
+			return false;
+		} else {
+			int i9 = this.xPosition * 16 + x;
+			int i10 = this.zPosition * 16 + z;
+			this.blocks[x << 11 | z << 7 | y] = (byte)id;
+			if(i8 != 0 && !this.worldObj.multiplayerWorld) {
+				Block.blocksList[i8].onBlockRemoval(this.worldObj, i9, y, i10);
+			}
+
+			this.data.set(x, y, z, metadata);
+			if(Block.lightOpacity[id] != 0) {
+				if(y >= i7) {
+					this.relightBlock(x, y + 1, z);
+				}
+			} else if(y == i7 - 1) {
+				this.relightBlock(x, y, z);
+			}
+
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, i9, y, i10, i9, y, i10);
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, i9, y, i10, i9, y, i10);
+			this.updateSkylight_do(x, z);
+			if(id != 0) {
+				Block.blocksList[id].onBlockAdded(this.worldObj, i9, y, i10);
+			}
+
+			this.isModified = true;
+			return true;
+		}
+	}
+
+	public boolean setBlockID(int x, int y, int z, int id) {
+		int i6 = this.heightMap[z << 4 | x] & 255;
+		int i7 = this.blocks[x << 11 | z << 7 | y] & 255;
+		if(i7 == id) {
+			return false;
+		} else {
+			int i8 = this.xPosition * 16 + x;
+			int i9 = this.zPosition * 16 + z;
+			this.blocks[x << 11 | z << 7 | y] = (byte)id;
+			if(i7 != 0) {
+				Block.blocksList[i7].onBlockRemoval(this.worldObj, i8, y, i9);
+			}
+
+			this.data.set(x, y, z, 0);
+			if(Block.lightOpacity[id] != 0) {
+				if(y >= i6) {
+					this.relightBlock(x, y + 1, z);
+				}
+			} else if(y == i6 - 1) {
+				this.relightBlock(x, y, z);
+			}
+
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, i8, y, i9, i8, y, i9);
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, i8, y, i9, i8, y, i9);
+			this.updateSkylight_do(x, z);
+			if(id != 0 && !this.worldObj.multiplayerWorld) {
+				Block.blocksList[id].onBlockAdded(this.worldObj, i8, y, i9);
+			}
+
+			this.isModified = true;
+			return true;
+		}
+	}
+
+	public int getBlockMetadata(int x, int y, int z) {
+		return this.data.get(x, y, z);
+	}
+
+	public void setBlockMetadata(int x, int y, int z, int metadata) {
+		this.isModified = true;
+		this.data.set(x, y, z, metadata);
+	}
+
+	public int getSavedLightValue(EnumSkyBlock skyBlock, int x, int y, int z) {
+		return skyBlock == EnumSkyBlock.Sky ? this.skylightMap.get(x, y, z) : (skyBlock == EnumSkyBlock.Block ? this.blocklightMap.get(x, y, z) : 0);
+	}
+
+	public void setLightValue(EnumSkyBlock block, int x, int y, int z, int lightValue) {
+		this.isModified = true;
+		if(block == EnumSkyBlock.Sky) {
+			this.skylightMap.set(x, y, z, lightValue);
+		} else {
+			if(block != EnumSkyBlock.Block) {
 				return;
 			}
 
-			this.blocklightMap.set(var2, var3, var4, var5);
+			this.blocklightMap.set(x, y, z, lightValue);
 		}
 
 	}
 
-	public int getBlockLightValue(int var1, int var2, int var3, int var4) {
-		int var5 = this.skylightMap.get(var1, var2, var3);
-		if(var5 > 0) {
+	public int getBlockLightValue(int x, int y, int z, int skyLightSubtracted) {
+		int i5 = this.skylightMap.get(x, y, z);
+		if(i5 > 0) {
 			isLit = true;
 		}
 
-		var5 -= var4;
-		int var6 = this.blocklightMap.get(var1, var2, var3);
-		if(var6 > var5) {
-			var5 = var6;
+		i5 -= skyLightSubtracted;
+		int i6 = this.blocklightMap.get(x, y, z);
+		if(i6 > i5) {
+			i5 = i6;
 		}
 
-		return var5;
+		return i5;
 	}
 
-	public void addEntity(Entity var1) {
+	public void addEntity(Entity entity) {
 		if(!this.isChunkRendered) {
 			this.hasEntities = true;
-			int var2 = MathHelper.floor_double(var1.posX / 16.0D);
-			int var3 = MathHelper.floor_double(var1.posZ / 16.0D);
-			if(var2 != this.xPosition || var3 != this.zPosition) {
-				System.out.println("Wrong location! " + var1);
-			}
-
-			int var4 = MathHelper.floor_double(var1.posY / 16.0D);
-			if(var4 < 0) {
-				var4 = 0;
-			}
-
-			if(var4 >= this.entities.length) {
-				var4 = this.entities.length - 1;
-			}
-
-			var1.addedToChunk = true;
-			var1.chunkCoordX = this.xPosition;
-			var1.chunkCoordY = var4;
-			var1.chunkCoordZ = this.zPosition;
-			this.entities[var4].add(var1);
-		}
-	}
-
-	public void removeEntity(Entity var1) {
-		this.removeEntityAtIndex(var1, var1.chunkCoordY);
-	}
-
-	public void removeEntityAtIndex(Entity var1, int var2) {
-		if(var2 < 0) {
-			var2 = 0;
-		}
-
-		if(var2 >= this.entities.length) {
-			var2 = this.entities.length - 1;
-		}
-
-		this.entities[var2].remove(var1);
-	}
-
-	public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
-		return var2 >= (this.heightMap[var3 << 4 | var1] & 255);
-	}
-
-	public TileEntity getChunkBlockTileEntity(int var1, int var2, int var3) {
-		ChunkPosition var4 = new ChunkPosition(var1, var2, var3);
-		TileEntity var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
-		if(var5 == null) {
-			int var6 = this.getBlockID(var1, var2, var3);
-			if(!Block.isBlockContainer[var6]) {
+			int i2 = MathHelper.floor_double(entity.posX / 16.0D);
+			int i3 = MathHelper.floor_double(entity.posZ / 16.0D);
+			if(i2 != this.xPosition || i3 != this.zPosition) {
+				System.out.println("Wrong location! " + entity);
+			}
+
+			int i4 = MathHelper.floor_double(entity.posY / 16.0D);
+			if(i4 < 0) {
+				i4 = 0;
+			}
+
+			if(i4 >= this.entities.length) {
+				i4 = this.entities.length - 1;
+			}
+
+			entity.addedToChunk = true;
+			entity.chunkCoordX = this.xPosition;
+			entity.chunkCoordY = i4;
+			entity.chunkCoordZ = this.zPosition;
+			this.entities[i4].add(entity);
+		}
+
+	}
+
+	public void removeEntity(Entity entity) {
+		this.removeEntityAtIndex(entity, entity.chunkCoordY);
+	}
+
+	public void removeEntityAtIndex(Entity entity, int index) {
+		if(index < 0) {
+			index = 0;
+		}
+
+		if(index >= this.entities.length) {
+			index = this.entities.length - 1;
+		}
+
+		this.entities[index].remove(entity);
+	}
+
+	public boolean canBlockSeeTheSky(int x, int y, int z) {
+		return y >= (this.heightMap[z << 4 | x] & 255);
+	}
+
+	public TileEntity getChunkBlockTileEntity(int x, int y, int z) {
+		ChunkPosition chunkPosition4 = new ChunkPosition(x, y, z);
+		TileEntity tileEntity5 = (TileEntity)this.chunkTileEntityMap.get(chunkPosition4);
+		if(tileEntity5 == null) {
+			int i6 = this.getBlockID(x, y, z);
+			if(!Block.isBlockContainer[i6]) {
 				return null;
 			}
 
-			BlockContainer var7 = (BlockContainer)Block.blocksList[var6];
-			var7.onBlockAdded(this.worldObj, this.xPosition * 16 + var1, var2, this.zPosition * 16 + var3);
-			var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
+			BlockContainer blockContainer7 = (BlockContainer)Block.blocksList[i6];
+			blockContainer7.onBlockAdded(this.worldObj, this.xPosition * 16 + x, y, this.zPosition * 16 + z);
+			tileEntity5 = (TileEntity)this.chunkTileEntityMap.get(chunkPosition4);
 		}
 
-		return var5;
-	}
-
-	public void addTileEntity(TileEntity var1) {
-		int var2 = var1.xCoord - this.xPosition * 16;
-		int var3 = var1.yCoord;
-		int var4 = var1.zCoord - this.zPosition * 16;
-		this.setChunkBlockTileEntity(var2, var3, var4, var1);
-	}
-
-	public void setChunkBlockTileEntity(int var1, int var2, int var3, TileEntity var4) {
-		ChunkPosition var5 = new ChunkPosition(var1, var2, var3);
-		var4.worldObj = this.worldObj;
-		var4.xCoord = this.xPosition * 16 + var1;
-		var4.yCoord = var2;
-		var4.zCoord = this.zPosition * 16 + var3;
-		if(this.getBlockID(var1, var2, var3) != 0 && Block.blocksList[this.getBlockID(var1, var2, var3)] instanceof BlockContainer) {
+		return tileEntity5;
+	}
+
+	public void addTileEntity(TileEntity tileEntity) {
+		int i2 = tileEntity.xCoord - this.xPosition * 16;
+		int i3 = tileEntity.yCoord;
+		int i4 = tileEntity.zCoord - this.zPosition * 16;
+		this.setChunkBlockTileEntity(i2, i3, i4, tileEntity);
+	}
+
+	public void setChunkBlockTileEntity(int x, int y, int z, TileEntity tileEntity) {
+		ChunkPosition chunkPosition5 = new ChunkPosition(x, y, z);
+		tileEntity.worldObj = this.worldObj;
+		tileEntity.xCoord = this.xPosition * 16 + x;
+		tileEntity.yCoord = y;
+		tileEntity.zCoord = this.zPosition * 16 + z;
+		if(this.getBlockID(x, y, z) != 0 && Block.blocksList[this.getBlockID(x, y, z)] instanceof BlockContainer) {
 			if(this.isChunkLoaded) {
-				if(this.chunkTileEntityMap.get(var5) != null) {
-					this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.get(var5));
+				if(this.chunkTileEntityMap.get(chunkPosition5) != null) {
+					this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.get(chunkPosition5));
 				}
 
-				this.worldObj.loadedTileEntityList.add(var4);
+				this.worldObj.loadedTileEntityList.add(tileEntity);
 			}
 
-			this.chunkTileEntityMap.put(var5, var4);
+			this.chunkTileEntityMap.put(chunkPosition5, tileEntity);
 		} else {
 			System.out.println("Attempted to place a tile entity where there was no entity tile!");
 		}
+
 	}
 
-	public void removeChunkBlockTileEntity(int var1, int var2, int var3) {
-		ChunkPosition var4 = new ChunkPosition(var1, var2, var3);
+	public void removeChunkBlockTileEntity(int x, int y, int z) {
+		ChunkPosition chunkPosition4 = new ChunkPosition(x, y, z);
 		if(this.isChunkLoaded) {
-			this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.remove(var4));
+			this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.remove(chunkPosition4));
 		}
 
 	}
 
 	public void onChunkLoad() {
 		this.isChunkLoaded = true;
-		this.worldObj.loadedTileEntityList.addAll(this.chunkTileEntityMap.values());
+		if(this.chunkTileEntityMap.values().size() > 0) {
+			this.worldObj.loadedTileEntityList.addAll(this.chunkTileEntityMap.values());
+		}
 
-		for(int var1 = 0; var1 < this.entities.length; ++var1) {
-			this.worldObj.addLoadedEntities(this.entities[var1]);
+		for(int i1 = 0; i1 < this.entities.length; ++i1) {
+			if(this.entities[i1].size() > 0) {
+				this.worldObj.addLoadedEntities(this.entities[i1]);
+			}
 		}
 
 	}
@@ -436,8 +449,12 @@
 		this.isChunkLoaded = false;
 		this.worldObj.loadedTileEntityList.removeAll(this.chunkTileEntityMap.values());
 
-		for(int var1 = 0; var1 < this.entities.length; ++var1) {
-			this.worldObj.unloadEntities(this.entities[var1]);
+		for(int i1 = 0; i1 < this.entities.length; ++i1) {
+			if(!(this.entities[i1] instanceof EntityPlayerSP)) {
+				this.worldObj.unloadEntities(this.entities[i1]);
+			} else {
+				ExtLogger.w("attempted to remove player");
+			}
 		}
 
 	}
@@ -446,105 +463,105 @@
 		this.isModified = true;
 	}
 
-	public void getEntitiesWithinAABBForEntity(Entity var1, AxisAlignedBB var2, List var3) {
-		int var4 = MathHelper.floor_double((var2.minY - 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.maxY + 2.0D) / 16.0D);
-		if(var4 < 0) {
-			var4 = 0;
-		}
-
-		if(var5 >= this.entities.length) {
-			var5 = this.entities.length - 1;
-		}
-
-		for(int var6 = var4; var6 <= var5; ++var6) {
-			List var7 = this.entities[var6];
-
-			for(int var8 = 0; var8 < var7.size(); ++var8) {
-				Entity var9 = (Entity)var7.get(var8);
-				if(var9 != var1 && var9.boundingBox.intersectsWith(var2)) {
-					var3.add(var9);
-				}
-			}
-		}
-
-	}
-
-	public void getEntitiesOfTypeWithinAAAB(Class var1, AxisAlignedBB var2, List var3) {
-		int var4 = MathHelper.floor_double((var2.minY - 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.maxY + 2.0D) / 16.0D);
-		if(var4 < 0) {
-			var4 = 0;
-		}
-
-		if(var5 >= this.entities.length) {
-			var5 = this.entities.length - 1;
-		}
-
-		for(int var6 = var4; var6 <= var5; ++var6) {
-			List var7 = this.entities[var6];
-
-			for(int var8 = 0; var8 < var7.size(); ++var8) {
-				Entity var9 = (Entity)var7.get(var8);
-				if(var1.isAssignableFrom(var9.getClass()) && var9.boundingBox.intersectsWith(var2)) {
-					var3.add(var9);
-				}
-			}
-		}
-
-	}
-
-	public boolean needsSaving(boolean var1) {
+	public void getEntitiesWithinAABBForEntity(Entity entity, AxisAlignedBB aabb, List list) {
+		int i4 = MathHelper.floor_double((aabb.minY - 2.0D) / 16.0D);
+		int i5 = MathHelper.floor_double((aabb.maxY + 2.0D) / 16.0D);
+		if(i4 < 0) {
+			i4 = 0;
+		}
+
+		if(i5 >= this.entities.length) {
+			i5 = this.entities.length - 1;
+		}
+
+		for(int i6 = i4; i6 <= i5; ++i6) {
+			List list7 = this.entities[i6];
+
+			for(int i8 = 0; i8 < list7.size(); ++i8) {
+				Entity entity9 = (Entity)list7.get(i8);
+				if(entity9 != entity && entity9.boundingBox.intersectsWith(aabb)) {
+					list.add(entity9);
+				}
+			}
+		}
+
+	}
+
+	public void getEntitiesOfTypeWithinAAAB(Class clazz, AxisAlignedBB aabb, List list) {
+		int i4 = MathHelper.floor_double((aabb.minY - 2.0D) / 16.0D);
+		int i5 = MathHelper.floor_double((aabb.maxY + 2.0D) / 16.0D);
+		if(i4 < 0) {
+			i4 = 0;
+		}
+
+		if(i5 >= this.entities.length) {
+			i5 = this.entities.length - 1;
+		}
+
+		for(int i6 = i4; i6 <= i5; ++i6) {
+			List list7 = this.entities[i6];
+
+			for(int i8 = 0; i8 < list7.size(); ++i8) {
+				Entity entity9 = (Entity)list7.get(i8);
+				if(clazz.isAssignableFrom(entity9.getClass()) && entity9.boundingBox.intersectsWith(aabb)) {
+					list.add(entity9);
+				}
+			}
+		}
+
+	}
+
+	public boolean needsSaving(boolean unused) {
 		return this.neverSave ? false : (this.hasEntities && this.worldObj.worldTime != this.lastSaveTime ? true : this.isModified);
 	}
 
-	public int setChunkData(byte[] var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8) {
-		int var9;
-		int var10;
-		int var11;
-		int var12;
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = var9 << 11 | var10 << 7 | var3;
-				var12 = var6 - var3;
-				System.arraycopy(var1, var8, this.blocks, var11, var12);
-				var8 += var12;
+	public int setChunkData(byte[] blocks, int minX, int minY, int minZ, int maxX, int maxY, int maxZ, int size) {
+		int i9;
+		int i10;
+		int i11;
+		int i12;
+		for(i9 = minX; i9 < maxX; ++i9) {
+			for(i10 = minZ; i10 < maxZ; ++i10) {
+				i11 = i9 << 11 | i10 << 7 | minY;
+				i12 = maxY - minY;
+				System.arraycopy(blocks, size, this.blocks, i11, i12);
+				size += i12;
 			}
 		}
 
 		this.generateHeightMap();
 
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(var1, var8, this.data.data, var11, var12);
-				var8 += var12;
-			}
-		}
-
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(var1, var8, this.blocklightMap.data, var11, var12);
-				var8 += var12;
-			}
-		}
-
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(var1, var8, this.skylightMap.data, var11, var12);
-				var8 += var12;
-			}
-		}
-
-		return var8;
+		for(i9 = minX; i9 < maxX; ++i9) {
+			for(i10 = minZ; i10 < maxZ; ++i10) {
+				i11 = (i9 << 11 | i10 << 7 | minY) >> 1;
+				i12 = (maxY - minY) / 2;
+				System.arraycopy(blocks, size, this.data.data, i11, i12);
+				size += i12;
+			}
+		}
+
+		for(i9 = minX; i9 < maxX; ++i9) {
+			for(i10 = minZ; i10 < maxZ; ++i10) {
+				i11 = (i9 << 11 | i10 << 7 | minY) >> 1;
+				i12 = (maxY - minY) / 2;
+				System.arraycopy(blocks, size, this.blocklightMap.data, i11, i12);
+				size += i12;
+			}
+		}
+
+		for(i9 = minX; i9 < maxX; ++i9) {
+			for(i10 = minZ; i10 < maxZ; ++i10) {
+				i11 = (i9 << 11 | i10 << 7 | minY) >> 1;
+				i12 = (maxY - minY) / 2;
+				System.arraycopy(blocks, size, this.skylightMap.data, i11, i12);
+				size += i12;
+			}
+		}
+
+		return size;
 	}
 
-	public Random getRandomWithSeed(long var1) {
-		return new Random(this.worldObj.randomSeed + (long)(this.xPosition * this.xPosition * 4987142) + (long)(this.xPosition * 5947611) + (long)(this.zPosition * this.zPosition) * 4392871L + (long)(this.zPosition * 389711) ^ var1);
+	public Random getRandomWithSeed(long long1) {
+		return new Random(this.worldObj.randomSeed + (long)(this.xPosition * this.xPosition * 4987142) + (long)(this.xPosition * 5947611) + (long)(this.zPosition * this.zPosition) * 4392871L + (long)(this.zPosition * 389711) ^ long1);
 	}
 }
--- /dev/null
+++ net/minecraft/src/MinecraftUnknownClass.java
@@ -1,0 +1,27 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+public class MinecraftUnknownClass extends Thread {
+	private final Minecraft field_10183_69x4v6H5i9ri158NSDwY3Lyb7ELd7B19em377C58smaJfhTn394086G2QC1H;
+
+	public MinecraftUnknownClass(Minecraft minecraft) {
+		this.field_10183_69x4v6H5i9ri158NSDwY3Lyb7ELd7B19em377C58smaJfhTn394086G2QC1H = minecraft;
+	}
+
+	public void run() {
+		while(true) {
+			SoundManager soundManager1 = this.field_10183_69x4v6H5i9ri158NSDwY3Lyb7ELd7B19em377C58smaJfhTn394086G2QC1H.sndManager;
+			if(!soundManager1.func_12028_0Q48c7Q5B51VmKR6v879976kWbp8F737S8T15SyjAj664KVBIuoLfz0qRtAW()) {
+				return;
+			}
+
+			try {
+				Thread.sleep(10L);
+			} catch (Exception exception3) {
+			}
+
+			soundManager1.func_12039_718z1OJ9VakHqRSuN9qHt03I9336Di6o7ObA2RkDlwQ9KQzNeZ53VZA8sC69();
+		}
+	}
+}
--- net/minecraft/src/ItemRecord.java
+++ net/minecraft/src/ItemRecord.java
@@ -3,17 +3,17 @@
 public class ItemRecord extends Item {
 	private String recordName;
 
-	protected ItemRecord(int var1, String var2) {
-		super(var1);
-		this.recordName = var2;
+	public ItemRecord(int itemID, String recordName) {
+		super(itemID);
+		this.recordName = recordName;
 		this.maxStackSize = 1;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var3.getBlockId(var4, var5, var6) == Block.jukebox.blockID && var3.getBlockMetadata(var4, var5, var6) == 0) {
-			var3.setBlockMetadataWithNotify(var4, var5, var6, this.shiftedIndex - Item.record13.shiftedIndex + 1);
-			var3.playRecord(this.recordName, var4, var5, var6);
-			--var1.stackSize;
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(world.getBlockId(x, y, z) == Block.jukebox.blockID && world.getBlockMetadata(x, y, z) == 0) {
+			world.setBlockMetadataWithNotify(x, y, z, this.shiftedIndex - Item.record13.shiftedIndex + 1);
+			world.playRecord(this.recordName, x, y, z);
+			--stack.stackSize;
 			return true;
 		} else {
 			return false;
--- net/minecraft/src/AxisAlignedBB.java
+++ net/minecraft/src/AxisAlignedBB.java
@@ -13,301 +13,301 @@
 	public double maxY;
 	public double maxZ;
 
-	public static AxisAlignedBB getBoundingBox(double var0, double var2, double var4, double var6, double var8, double var10) {
-		return new AxisAlignedBB(var0, var2, var4, var6, var8, var10);
+	public static AxisAlignedBB getBoundingBox(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
+		return new AxisAlignedBB(minX, minY, minZ, maxX, maxY, maxZ);
 	}
 
 	public static void clearBoundingBoxPool() {
 		numBoundingBoxesInUse = 0;
 	}
 
-	public static AxisAlignedBB getBoundingBoxFromPool(double var0, double var2, double var4, double var6, double var8, double var10) {
+	public static AxisAlignedBB getBoundingBoxFromPool(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
 		if(numBoundingBoxesInUse >= boundingBoxes.size()) {
 			boundingBoxes.add(getBoundingBox(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D));
 		}
 
-		return ((AxisAlignedBB)boundingBoxes.get(numBoundingBoxesInUse++)).setBounds(var0, var2, var4, var6, var8, var10);
-	}
-
-	private AxisAlignedBB(double var1, double var3, double var5, double var7, double var9, double var11) {
-		this.minX = var1;
-		this.minY = var3;
-		this.minZ = var5;
-		this.maxX = var7;
-		this.maxY = var9;
-		this.maxZ = var11;
-	}
-
-	public AxisAlignedBB setBounds(double var1, double var3, double var5, double var7, double var9, double var11) {
-		this.minX = var1;
-		this.minY = var3;
-		this.minZ = var5;
-		this.maxX = var7;
-		this.maxY = var9;
-		this.maxZ = var11;
+		return ((AxisAlignedBB)boundingBoxes.get(numBoundingBoxesInUse++)).setBounds(minX, minY, minZ, maxX, maxY, maxZ);
+	}
+
+	private AxisAlignedBB(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
+		this.minX = minX;
+		this.minY = minY;
+		this.minZ = minZ;
+		this.maxX = maxX;
+		this.maxY = maxY;
+		this.maxZ = maxZ;
+	}
+
+	public AxisAlignedBB setBounds(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
+		this.minX = minX;
+		this.minY = minY;
+		this.minZ = minZ;
+		this.maxX = maxX;
+		this.maxY = maxY;
+		this.maxZ = maxZ;
 		return this;
 	}
 
-	public AxisAlignedBB addCoord(double var1, double var3, double var5) {
-		double var7 = this.minX;
-		double var9 = this.minY;
-		double var11 = this.minZ;
-		double var13 = this.maxX;
-		double var15 = this.maxY;
-		double var17 = this.maxZ;
-		if(var1 < 0.0D) {
-			var7 += var1;
-		}
-
-		if(var1 > 0.0D) {
-			var13 += var1;
-		}
-
-		if(var3 < 0.0D) {
-			var9 += var3;
-		}
-
-		if(var3 > 0.0D) {
-			var15 += var3;
-		}
-
-		if(var5 < 0.0D) {
-			var11 += var5;
-		}
-
-		if(var5 > 0.0D) {
-			var17 += var5;
-		}
-
-		return getBoundingBoxFromPool(var7, var9, var11, var13, var15, var17);
-	}
-
-	public AxisAlignedBB expand(double var1, double var3, double var5) {
-		double var7 = this.minX - var1;
-		double var9 = this.minY - var3;
-		double var11 = this.minZ - var5;
-		double var13 = this.maxX + var1;
-		double var15 = this.maxY + var3;
-		double var17 = this.maxZ + var5;
-		return getBoundingBoxFromPool(var7, var9, var11, var13, var15, var17);
-	}
-
-	public AxisAlignedBB getOffsetBoundingBox(double var1, double var3, double var5) {
-		return getBoundingBoxFromPool(this.minX + var1, this.minY + var3, this.minZ + var5, this.maxX + var1, this.maxY + var3, this.maxZ + var5);
-	}
-
-	public double calculateXOffset(AxisAlignedBB var1, double var2) {
-		if(var1.maxY > this.minY && var1.minY < this.maxY) {
-			if(var1.maxZ > this.minZ && var1.minZ < this.maxZ) {
-				double var4;
-				if(var2 > 0.0D && var1.maxX <= this.minX) {
-					var4 = this.minX - var1.maxX;
-					if(var4 < var2) {
-						var2 = var4;
-					}
-				}
-
-				if(var2 < 0.0D && var1.minX >= this.maxX) {
-					var4 = this.maxX - var1.minX;
-					if(var4 > var2) {
-						var2 = var4;
-					}
-				}
-
-				return var2;
-			} else {
-				return var2;
-			}
-		} else {
-			return var2;
-		}
-	}
-
-	public double calculateYOffset(AxisAlignedBB var1, double var2) {
-		if(var1.maxX > this.minX && var1.minX < this.maxX) {
-			if(var1.maxZ > this.minZ && var1.minZ < this.maxZ) {
-				double var4;
-				if(var2 > 0.0D && var1.maxY <= this.minY) {
-					var4 = this.minY - var1.maxY;
-					if(var4 < var2) {
-						var2 = var4;
-					}
-				}
-
-				if(var2 < 0.0D && var1.minY >= this.maxY) {
-					var4 = this.maxY - var1.minY;
-					if(var4 > var2) {
-						var2 = var4;
-					}
-				}
-
-				return var2;
-			} else {
-				return var2;
-			}
-		} else {
-			return var2;
-		}
-	}
-
-	public double calculateZOffset(AxisAlignedBB var1, double var2) {
-		if(var1.maxX > this.minX && var1.minX < this.maxX) {
-			if(var1.maxY > this.minY && var1.minY < this.maxY) {
-				double var4;
-				if(var2 > 0.0D && var1.maxZ <= this.minZ) {
-					var4 = this.minZ - var1.maxZ;
-					if(var4 < var2) {
-						var2 = var4;
-					}
-				}
-
-				if(var2 < 0.0D && var1.minZ >= this.maxZ) {
-					var4 = this.maxZ - var1.minZ;
-					if(var4 > var2) {
-						var2 = var4;
-					}
-				}
-
-				return var2;
-			} else {
-				return var2;
-			}
-		} else {
-			return var2;
-		}
-	}
-
-	public boolean intersectsWith(AxisAlignedBB var1) {
-		return var1.maxX > this.minX && var1.minX < this.maxX ? (var1.maxY > this.minY && var1.minY < this.maxY ? var1.maxZ > this.minZ && var1.minZ < this.maxZ : false) : false;
-	}
-
-	public AxisAlignedBB offset(double var1, double var3, double var5) {
-		this.minX += var1;
-		this.minY += var3;
-		this.minZ += var5;
-		this.maxX += var1;
-		this.maxY += var3;
-		this.maxZ += var5;
+	public AxisAlignedBB addCoord(double x, double y, double z) {
+		double d7 = this.minX;
+		double d9 = this.minY;
+		double d11 = this.minZ;
+		double d13 = this.maxX;
+		double d15 = this.maxY;
+		double d17 = this.maxZ;
+		if(x < 0.0D) {
+			d7 += x;
+		}
+
+		if(x > 0.0D) {
+			d13 += x;
+		}
+
+		if(y < 0.0D) {
+			d9 += y;
+		}
+
+		if(y > 0.0D) {
+			d15 += y;
+		}
+
+		if(z < 0.0D) {
+			d11 += z;
+		}
+
+		if(z > 0.0D) {
+			d17 += z;
+		}
+
+		return getBoundingBoxFromPool(d7, d9, d11, d13, d15, d17);
+	}
+
+	public AxisAlignedBB expand(double x, double y, double z) {
+		double d7 = this.minX - x;
+		double d9 = this.minY - y;
+		double d11 = this.minZ - z;
+		double d13 = this.maxX + x;
+		double d15 = this.maxY + y;
+		double d17 = this.maxZ + z;
+		return getBoundingBoxFromPool(d7, d9, d11, d13, d15, d17);
+	}
+
+	public AxisAlignedBB getOffsetBoundingBox(double offsetX, double offsetY, double offsetZ) {
+		return getBoundingBoxFromPool(this.minX + offsetX, this.minY + offsetY, this.minZ + offsetZ, this.maxX + offsetX, this.maxY + offsetY, this.maxZ + offsetZ);
+	}
+
+	public double calculateXOffset(AxisAlignedBB aabb, double offsetX) {
+		if(aabb.maxY > this.minY && aabb.minY < this.maxY) {
+			if(aabb.maxZ > this.minZ && aabb.minZ < this.maxZ) {
+				double d4;
+				if(offsetX > 0.0D && aabb.maxX <= this.minX) {
+					d4 = this.minX - aabb.maxX;
+					if(d4 < offsetX) {
+						offsetX = d4;
+					}
+				}
+
+				if(offsetX < 0.0D && aabb.minX >= this.maxX) {
+					d4 = this.maxX - aabb.minX;
+					if(d4 > offsetX) {
+						offsetX = d4;
+					}
+				}
+
+				return offsetX;
+			} else {
+				return offsetX;
+			}
+		} else {
+			return offsetX;
+		}
+	}
+
+	public double calculateYOffset(AxisAlignedBB aabb, double offsetY) {
+		if(aabb.maxX > this.minX && aabb.minX < this.maxX) {
+			if(aabb.maxZ > this.minZ && aabb.minZ < this.maxZ) {
+				double d4;
+				if(offsetY > 0.0D && aabb.maxY <= this.minY) {
+					d4 = this.minY - aabb.maxY;
+					if(d4 < offsetY) {
+						offsetY = d4;
+					}
+				}
+
+				if(offsetY < 0.0D && aabb.minY >= this.maxY) {
+					d4 = this.maxY - aabb.minY;
+					if(d4 > offsetY) {
+						offsetY = d4;
+					}
+				}
+
+				return offsetY;
+			} else {
+				return offsetY;
+			}
+		} else {
+			return offsetY;
+		}
+	}
+
+	public double calculateZOffset(AxisAlignedBB aabb, double offsetZ) {
+		if(aabb.maxX > this.minX && aabb.minX < this.maxX) {
+			if(aabb.maxY > this.minY && aabb.minY < this.maxY) {
+				double d4;
+				if(offsetZ > 0.0D && aabb.maxZ <= this.minZ) {
+					d4 = this.minZ - aabb.maxZ;
+					if(d4 < offsetZ) {
+						offsetZ = d4;
+					}
+				}
+
+				if(offsetZ < 0.0D && aabb.minZ >= this.maxZ) {
+					d4 = this.maxZ - aabb.minZ;
+					if(d4 > offsetZ) {
+						offsetZ = d4;
+					}
+				}
+
+				return offsetZ;
+			} else {
+				return offsetZ;
+			}
+		} else {
+			return offsetZ;
+		}
+	}
+
+	public boolean intersectsWith(AxisAlignedBB aabb) {
+		return aabb.maxX > this.minX && aabb.minX < this.maxX ? (aabb.maxY > this.minY && aabb.minY < this.maxY ? aabb.maxZ > this.minZ && aabb.minZ < this.maxZ : false) : false;
+	}
+
+	public AxisAlignedBB offset(double offsetX, double offsetY, double offsetZ) {
+		this.minX += offsetX;
+		this.minY += offsetY;
+		this.minZ += offsetZ;
+		this.maxX += offsetX;
+		this.maxY += offsetY;
+		this.maxZ += offsetZ;
 		return this;
 	}
 
 	public double getAverageEdgeLength() {
-		double var1 = this.maxX - this.minX;
-		double var3 = this.maxY - this.minY;
-		double var5 = this.maxZ - this.minZ;
-		return (var1 + var3 + var5) / 3.0D;
+		double d1 = this.maxX - this.minX;
+		double d3 = this.maxY - this.minY;
+		double d5 = this.maxZ - this.minZ;
+		return (d1 + d3 + d5) / 3.0D;
 	}
 
 	public AxisAlignedBB copy() {
 		return getBoundingBoxFromPool(this.minX, this.minY, this.minZ, this.maxX, this.maxY, this.maxZ);
 	}
 
-	public MovingObjectPosition calculateIntercept(Vec3D var1, Vec3D var2) {
-		Vec3D var3 = var1.getIntermediateWithXValue(var2, this.minX);
-		Vec3D var4 = var1.getIntermediateWithXValue(var2, this.maxX);
-		Vec3D var5 = var1.getIntermediateWithYValue(var2, this.minY);
-		Vec3D var6 = var1.getIntermediateWithYValue(var2, this.maxY);
-		Vec3D var7 = var1.getIntermediateWithZValue(var2, this.minZ);
-		Vec3D var8 = var1.getIntermediateWithZValue(var2, this.maxZ);
-		if(!this.isVecInYZ(var3)) {
-			var3 = null;
-		}
-
-		if(!this.isVecInYZ(var4)) {
-			var4 = null;
-		}
-
-		if(!this.isVecInXZ(var5)) {
-			var5 = null;
-		}
-
-		if(!this.isVecInXZ(var6)) {
-			var6 = null;
-		}
-
-		if(!this.isVecInXY(var7)) {
-			var7 = null;
-		}
-
-		if(!this.isVecInXY(var8)) {
-			var8 = null;
-		}
-
-		Vec3D var9 = null;
-		if(var3 != null && (var9 == null || var1.squareDistanceTo(var3) < var1.squareDistanceTo(var9))) {
-			var9 = var3;
-		}
-
-		if(var4 != null && (var9 == null || var1.squareDistanceTo(var4) < var1.squareDistanceTo(var9))) {
-			var9 = var4;
-		}
-
-		if(var5 != null && (var9 == null || var1.squareDistanceTo(var5) < var1.squareDistanceTo(var9))) {
-			var9 = var5;
-		}
-
-		if(var6 != null && (var9 == null || var1.squareDistanceTo(var6) < var1.squareDistanceTo(var9))) {
-			var9 = var6;
-		}
-
-		if(var7 != null && (var9 == null || var1.squareDistanceTo(var7) < var1.squareDistanceTo(var9))) {
-			var9 = var7;
-		}
-
-		if(var8 != null && (var9 == null || var1.squareDistanceTo(var8) < var1.squareDistanceTo(var9))) {
-			var9 = var8;
-		}
-
-		if(var9 == null) {
+	public MovingObjectPosition calculateIntercept(Vec3D vector1, Vec3D vector2) {
+		Vec3D vec3D3 = vector1.getIntermediateWithXValue(vector2, this.minX);
+		Vec3D vec3D4 = vector1.getIntermediateWithXValue(vector2, this.maxX);
+		Vec3D vec3D5 = vector1.getIntermediateWithYValue(vector2, this.minY);
+		Vec3D vec3D6 = vector1.getIntermediateWithYValue(vector2, this.maxY);
+		Vec3D vec3D7 = vector1.getIntermediateWithZValue(vector2, this.minZ);
+		Vec3D vec3D8 = vector1.getIntermediateWithZValue(vector2, this.maxZ);
+		if(!this.isVecInYZ(vec3D3)) {
+			vec3D3 = null;
+		}
+
+		if(!this.isVecInYZ(vec3D4)) {
+			vec3D4 = null;
+		}
+
+		if(!this.isVecInXZ(vec3D5)) {
+			vec3D5 = null;
+		}
+
+		if(!this.isVecInXZ(vec3D6)) {
+			vec3D6 = null;
+		}
+
+		if(!this.isVecInXY(vec3D7)) {
+			vec3D7 = null;
+		}
+
+		if(!this.isVecInXY(vec3D8)) {
+			vec3D8 = null;
+		}
+
+		Vec3D vec3D9 = null;
+		if(vec3D3 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D3) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D3;
+		}
+
+		if(vec3D4 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D4) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D4;
+		}
+
+		if(vec3D5 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D5) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D5;
+		}
+
+		if(vec3D6 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D6) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D6;
+		}
+
+		if(vec3D7 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D7) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D7;
+		}
+
+		if(vec3D8 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D8) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D8;
+		}
+
+		if(vec3D9 == null) {
 			return null;
 		} else {
-			byte var10 = -1;
-			if(var9 == var3) {
-				var10 = 4;
-			}
-
-			if(var9 == var4) {
-				var10 = 5;
-			}
-
-			if(var9 == var5) {
-				var10 = 0;
-			}
-
-			if(var9 == var6) {
-				var10 = 1;
-			}
-
-			if(var9 == var7) {
-				var10 = 2;
-			}
-
-			if(var9 == var8) {
-				var10 = 3;
-			}
-
-			return new MovingObjectPosition(0, 0, 0, var10, var9);
+			byte b10 = -1;
+			if(vec3D9 == vec3D3) {
+				b10 = 4;
+			}
+
+			if(vec3D9 == vec3D4) {
+				b10 = 5;
+			}
+
+			if(vec3D9 == vec3D5) {
+				b10 = 0;
+			}
+
+			if(vec3D9 == vec3D6) {
+				b10 = 1;
+			}
+
+			if(vec3D9 == vec3D7) {
+				b10 = 2;
+			}
+
+			if(vec3D9 == vec3D8) {
+				b10 = 3;
+			}
+
+			return new MovingObjectPosition(0, 0, 0, b10, vec3D9);
 		}
 	}
 
-	private boolean isVecInYZ(Vec3D var1) {
-		return var1 == null ? false : var1.yCoord >= this.minY && var1.yCoord <= this.maxY && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
-	}
-
-	private boolean isVecInXZ(Vec3D var1) {
-		return var1 == null ? false : var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
-	}
-
-	private boolean isVecInXY(Vec3D var1) {
-		return var1 == null ? false : var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.yCoord >= this.minY && var1.yCoord <= this.maxY;
-	}
-
-	public void setBB(AxisAlignedBB var1) {
-		this.minX = var1.minX;
-		this.minY = var1.minY;
-		this.minZ = var1.minZ;
-		this.maxX = var1.maxX;
-		this.maxY = var1.maxY;
-		this.maxZ = var1.maxZ;
+	private boolean isVecInYZ(Vec3D vector) {
+		return vector == null ? false : vector.yCoord >= this.minY && vector.yCoord <= this.maxY && vector.zCoord >= this.minZ && vector.zCoord <= this.maxZ;
+	}
+
+	private boolean isVecInXZ(Vec3D vector) {
+		return vector == null ? false : vector.xCoord >= this.minX && vector.xCoord <= this.maxX && vector.zCoord >= this.minZ && vector.zCoord <= this.maxZ;
+	}
+
+	private boolean isVecInXY(Vec3D vector) {
+		return vector == null ? false : vector.xCoord >= this.minX && vector.xCoord <= this.maxX && vector.yCoord >= this.minY && vector.yCoord <= this.maxY;
+	}
+
+	public void setBB(AxisAlignedBB aabb) {
+		this.minX = aabb.minX;
+		this.minY = aabb.minY;
+		this.minZ = aabb.minZ;
+		this.maxX = aabb.maxX;
+		this.maxY = aabb.maxY;
+		this.maxZ = aabb.maxZ;
 	}
 }
--- net/minecraft/src/Packet34EntityTeleport.java
+++ net/minecraft/src/Packet34EntityTeleport.java
@@ -15,35 +15,35 @@
 	public Packet34EntityTeleport() {
 	}
 
-	public Packet34EntityTeleport(Entity var1) {
-		this.entityId = var1.entityID;
-		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-		this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.yaw = (byte)((int)(var1.rotationYaw * 256.0F / 360.0F));
-		this.pitch = (byte)((int)(var1.rotationPitch * 256.0F / 360.0F));
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.yaw = (byte)var1.read();
-		this.pitch = (byte)var1.read();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.write(this.yaw);
-		var1.write(this.pitch);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleEntityTeleport(this);
+	public Packet34EntityTeleport(Entity entity) {
+		this.entityId = entity.entityID;
+		this.xPosition = MathHelper.floor_double(entity.posX * 32.0D);
+		this.yPosition = MathHelper.floor_double(entity.posY * 32.0D);
+		this.zPosition = MathHelper.floor_double(entity.posZ * 32.0D);
+		this.yaw = (byte)((int)(entity.rotationYaw * 256.0F / 360.0F));
+		this.pitch = (byte)((int)(entity.rotationPitch * 256.0F / 360.0F));
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.yaw = (byte)dataInputStream.read();
+		this.pitch = (byte)dataInputStream.read();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.write(this.yaw);
+		dataOutputStream.write(this.pitch);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleEntityTeleport(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/EnumHouseBigUnknownClass.java
@@ -1,0 +1,41 @@
+package net.minecraft.src;
+
+class EnumHouseBigUnknownClass {
+    static final /* synthetic */ int[] field_10860_6445xGvFiQrxwB6B3Jv6E6Y2wuWtLZ480V96b43GE0f1Xis2uZL9xrGn6JSw;
+
+    static {
+        field_10860_6445xGvFiQrxwB6B3Jv6E6Y2wuWtLZ480V96b43GE0f1Xis2uZL9xrGn6JSw = new int[EnumHouseBig.func_12158_5d1PqAM31919iSOCPJkkBw3o2MG1I7zT27GPOp97Xf3srdW4U58elVI1No8M().length];
+        try {
+            EnumHouseBigUnknownClass.field_10860_6445xGvFiQrxwB6B3Jv6E6Y2wuWtLZ480V96b43GE0f1Xis2uZL9xrGn6JSw[EnumHouseBig.WhiteGlass.ordinal()] = 1;
+        }
+        catch (final NoSuchFieldError noSuchFieldError) {}
+        try {
+            EnumHouseBigUnknownClass.field_10860_6445xGvFiQrxwB6B3Jv6E6Y2wuWtLZ480V96b43GE0f1Xis2uZL9xrGn6JSw[EnumHouseBig.BlueGlass.ordinal()] = 2;
+        }
+        catch (final NoSuchFieldError noSuchFieldError2) {}
+        try {
+            EnumHouseBigUnknownClass.field_10860_6445xGvFiQrxwB6B3Jv6E6Y2wuWtLZ480V96b43GE0f1Xis2uZL9xrGn6JSw[EnumHouseBig.PinkGlass.ordinal()] = 3;
+        }
+        catch (final NoSuchFieldError noSuchFieldError3) {}
+        try {
+            EnumHouseBigUnknownClass.field_10860_6445xGvFiQrxwB6B3Jv6E6Y2wuWtLZ480V96b43GE0f1Xis2uZL9xrGn6JSw[EnumHouseBig.PlateDecor.ordinal()] = 4;
+        }
+        catch (final NoSuchFieldError noSuchFieldError4) {}
+        try {
+            EnumHouseBigUnknownClass.field_10860_6445xGvFiQrxwB6B3Jv6E6Y2wuWtLZ480V96b43GE0f1Xis2uZL9xrGn6JSw[EnumHouseBig.LimeGlass.ordinal()] = 5;
+        }
+        catch (final NoSuchFieldError noSuchFieldError5) {}
+        try {
+            EnumHouseBigUnknownClass.field_10860_6445xGvFiQrxwB6B3Jv6E6Y2wuWtLZ480V96b43GE0f1Xis2uZL9xrGn6JSw[EnumHouseBig.BlackGlass.ordinal()] = 6;
+        }
+        catch (final NoSuchFieldError noSuchFieldError6) {}
+        try {
+            EnumHouseBigUnknownClass.field_10860_6445xGvFiQrxwB6B3Jv6E6Y2wuWtLZ480V96b43GE0f1Xis2uZL9xrGn6JSw[EnumHouseBig.Door.ordinal()] = 7;
+        }
+        catch (final NoSuchFieldError noSuchFieldError7) {}
+        try {
+            EnumHouseBigUnknownClass.field_10860_6445xGvFiQrxwB6B3Jv6E6Y2wuWtLZ480V96b43GE0f1Xis2uZL9xrGn6JSw[EnumHouseBig.Doorless.ordinal()] = 8;
+        }
+        catch (final NoSuchFieldError noSuchFieldError8) {}
+    }
+}
--- /dev/null
+++ net/minecraft/src/FreerunMap3.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.util.List;
+
+public class FreerunMap3 extends FreerunWorld {
+	private NamedLoc[] field_7522_0QBb4IN92EHny0yWgC8yZUj5S50D7owH8k3b7ia4YwYH77o3xmsoO943esub = new NamedLoc[]{new NamedLoc(-233, 66, 22, "spawn"), new NamedLoc(-234, 65, 17, -231, 67, 16, "spawn_start"), new NamedLoc(-219, 68, -21, -218, 72, -24, "checkpoint1"), new NamedLoc(-209, 72, -37, -212, 75, -40, "scaff_1"), new NamedLoc(-249, 120, -54, -253, 124, -57, "after_portal_1"), new NamedLoc(-213, 65, -67, -211, 66, -69, "water_section_portal_2"), new NamedLoc(-160, 65, -66, -158, 68, -70, "end")};
+
+	public FreerunMap3(File worldFile, String levelName) {
+		super(worldFile, levelName);
+	}
+
+	public NamedLoc[] getCheckpoints() {
+		return this.field_7522_0QBb4IN92EHny0yWgC8yZUj5S50D7owH8k3b7ia4YwYH77o3xmsoO943esub;
+	}
+
+	public int getResetY(long long1, long long2) {
+		return long1 >= -211L && long1 <= -158L && long2 >= -72L && long2 <= -64L ? 51 : (long1 >= -219L && long1 <= -204L && long2 >= -26L && long2 <= -22L ? 63 : 65);
+	}
+
+	public List func_7517_8oADBp42n4G2Ly6U1WLv70n6VyS2bkokzo8dF7ayUqDb1A6ofY86pUJA8mf8() {
+		return this.field_7498_65957fU9nGL5PA2e96ZOK3ePBveSt2ceA9Glj10PC2Jo5s0wI21ix69flng2;
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenHouseBigSpawner.java
@@ -1,0 +1,104 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenHouseBigSpawner implements IHouseBig {
+	private final NoiseGeneratorPerlin field_9902_874UPUdmzaN22mSMae9rqz447wsXe06a18Gh5DxY7175eTA0eAh9620Qtb06;
+
+	public WorldGenHouseBigSpawner(Random random) {
+		this.field_9902_874UPUdmzaN22mSMae9rqz447wsXe06a18Gh5DxY7175eTA0eAh9620Qtb06 = new NoiseGeneratorPerlin(random);
+	}
+
+	public float func_9883_913vTZx6no47397W6wG95Q5uB254nJBZ27osnW242XcA9M93Alb1ry5oPyVe() {
+		return 0.8F;
+	}
+
+	private boolean func_9899_6P2d88cuq4I5i8OfmOP3XsaoEtx78lk5g1EXGSO2ytWbGklLsE39G94e3W6A(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockId(integer2, integer3, integer4);
+		return i5 != 0 && Block.blocksList[i5].isOpaqueCube() && Block.blocksList[i5].isCollidable() && Block.blocksList[i5].renderAsNormalBlock();
+	}
+
+	private boolean func_9900_0eFAn36ml28ygd9brA9R6l8tPj1mH4j5q49EnxJRUFPb8i0PYnVM3CG11RzE(World vg, int integer2, int integer3, int integer4) {
+		int i5 = 256;
+
+		for(int i6 = 0; i6 < 8; ++i6) {
+			for(int i7 = 0; i7 < 15; ++i7) {
+				for(int i8 = 0; i8 < 15; ++i8) {
+					if(this.func_9899_6P2d88cuq4I5i8OfmOP3XsaoEtx78lk5g1EXGSO2ytWbGklLsE39G94e3W6A(vg, integer2 * 16 + i7, integer3 + i6, integer4 * 16 + i8)) {
+						--i5;
+						if(i5 == 0) {
+							return false;
+						}
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+
+	public void func_9901_2WgyErj1PS92FusM32Uw4qR51rB7XAfdZ2x0o8awzVmlQwKIhCLMnVvK876g(World vg, int integer2, int integer3, int integer4) {
+		int i5;
+		int i6;
+		for(i5 = 0; i5 < 9; ++i5) {
+			for(i6 = 0; i6 < 6; ++i6) {
+				vg.setBlock(integer2 + i5 + 3, integer3 + i6, integer4 + 2, Block.brick.blockID);
+				vg.setBlock(integer2 + i5 + 3, integer3 + i6, integer4 + 12, Block.brick.blockID);
+				vg.setBlock(integer2 + 2, integer3 + i6, integer4 + 3 + i5, Block.brick.blockID);
+				vg.setBlock(integer2 + 12, integer3 + i6, integer4 + 3 + i5, Block.brick.blockID);
+			}
+		}
+
+		for(i5 = 0; i5 < 9; ++i5) {
+			for(i6 = 0; i6 < 9; ++i6) {
+				vg.setBlock(integer2 + i6 + 3, integer3, integer4 + i5 + 3, Block.brick.blockID);
+			}
+		}
+
+		i5 = integer2 * 56236445 - integer3 * 1235617 + integer4 * 1242535;
+		i6 = integer2 * 234745 - integer3 * 83452 - integer4 * 784345;
+		double d7 = this.field_9902_874UPUdmzaN22mSMae9rqz447wsXe06a18Gh5DxY7175eTA0eAh9620Qtb06.generateNoise((double)i5 / 2.0D, (double)i6 / 2.0D);
+		this.field_9902_874UPUdmzaN22mSMae9rqz447wsXe06a18Gh5DxY7175eTA0eAh9620Qtb06.generateNoise((double)i6 / 2.0D, (double)i5 / 2.0D);
+		if(d7 >= 0.25D) {
+			TileEntityChest tileEntityChest11 = new TileEntityChest();
+			vg.setBlock(integer2 + 7, integer3 + 1, integer4 + 7, Block.chest.blockID);
+			vg.setBlockTileEntity(integer2 + 7, integer3 + 1, integer4 + 7, tileEntityChest11);
+			Random random12 = new Random((long)(i5 + i6));
+
+			for(int i13 = 0; i13 < tileEntityChest11.getSizeInventory(); ++i13) {
+				for(int i14 = 0; i14 < 300; ++i14) {
+					int i15 = random12.nextInt(32767);
+					if(Item.itemsList[i15] != null) {
+						ItemStack itemStack16 = new ItemStack(i15);
+						tileEntityChest11.setInventorySlotContents(i13, itemStack16);
+						break;
+					}
+				}
+			}
+		} else {
+			TileEntityMobSpawner tileEntityMobSpawner17 = new TileEntityMobSpawner();
+			tileEntityMobSpawner17.mobID = "Slime";
+			vg.setBlock(integer2 + 7, integer3 + 1, integer4 + 7, Block.mobSpawner.blockID);
+			vg.setBlockTileEntity(integer2 + 7, integer3 + 1, integer4 + 7, tileEntityMobSpawner17);
+		}
+
+	}
+
+	public void func_9884_61qP7q8deV5ospnX8sW5XUMxMcV5ssOU68863452kQ9H403L5ScR3DEa98qO(World vg, int integer2, int integer3, WorldGenHouseBigInterior hp) {
+		int i5;
+		for(i5 = 127; i5 > 0 && this.func_9900_0eFAn36ml28ygd9brA9R6l8tPj1mH4j5q49EnxJRUFPb8i0PYnVM3CG11RzE(vg, integer2, i5, integer3); --i5) {
+		}
+
+		while(i5 < 108) {
+			this.func_9901_2WgyErj1PS92FusM32Uw4qR51rB7XAfdZ2x0o8awzVmlQwKIhCLMnVvK876g(vg, integer2 * 16, i5, integer3 * 16);
+			i5 += 6;
+		}
+
+		for(int i6 = 0; i6 < 9; ++i6) {
+			for(int i7 = 0; i7 < 9; ++i7) {
+				vg.setBlock(integer2 * 16 + i7 + 3, i5, integer3 * 16 + i6 + 3, Block.brick.blockID);
+			}
+		}
+
+	}
+}
--- net/minecraft/client/Minecraft.java
+++ net/minecraft/client/Minecraft.java
@@ -4,30 +4,56 @@
 import java.awt.Canvas;
 import java.awt.Color;
 import java.awt.Component;
+import java.awt.Desktop;
 import java.awt.Dimension;
 import java.awt.Frame;
 import java.awt.Graphics;
+import java.io.BufferedReader;
 import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.lang.management.ManagementFactory;
+import java.lang.management.RuntimeMXBean;
+import java.lang.reflect.InvocationTargetException;
+import java.net.URL;
+import java.nio.file.Files;
+import java.nio.file.OpenOption;
+import java.nio.file.Paths;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.ArrayList;
+import java.util.Iterator;
+import javax.swing.JOptionPane;
+
 import net.minecraft.src.AxisAlignedBB;
 import net.minecraft.src.Block;
+import net.minecraft.src.CertUtils;
 import net.minecraft.src.EffectRenderer;
 import net.minecraft.src.EntityPlayerSP;
+import net.minecraft.src.EntityPlayerZombieModeClient;
 import net.minecraft.src.EntityRenderer;
 import net.minecraft.src.EnumOS;
+import net.minecraft.src.Ext1605Utils;
+import net.minecraft.src.ExtLogger;
 import net.minecraft.src.FontRenderer;
 import net.minecraft.src.GLAllocation;
 import net.minecraft.src.GameSettings;
 import net.minecraft.src.GameWindowListener;
+import net.minecraft.src.GuiBanned;
+import net.minecraft.src.GuiBannedMenu;
 import net.minecraft.src.GuiChat;
 import net.minecraft.src.GuiConflictWarning;
+import net.minecraft.src.GuiConnectFailed;
 import net.minecraft.src.GuiConnecting;
 import net.minecraft.src.GuiErrorScreen;
+import net.minecraft.src.GuiFrail;
 import net.minecraft.src.GuiGameOver;
 import net.minecraft.src.GuiIngame;
 import net.minecraft.src.GuiIngameMenu;
-import net.minecraft.src.GuiInventory;
 import net.minecraft.src.GuiMainMenu;
 import net.minecraft.src.GuiScreen;
+import net.minecraft.src.InputHandler;
 import net.minecraft.src.ItemRenderer;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.LoadingScreenRenderer;
@@ -35,6 +61,9 @@
 import net.minecraft.src.MinecraftError;
 import net.minecraft.src.MinecraftException;
 import net.minecraft.src.MinecraftImpl;
+import net.minecraft.src.MinecraftUnknownClass;
+import net.minecraft.src.MinecraftUnknownClass2;
+import net.minecraft.src.MinecraftUnknownClass3;
 import net.minecraft.src.ModelBiped;
 import net.minecraft.src.MouseHelper;
 import net.minecraft.src.MovementInputFromOptions;
@@ -43,11 +72,16 @@
 import net.minecraft.src.OpenGlCapsChecker;
 import net.minecraft.src.PlayerController;
 import net.minecraft.src.PlayerControllerCreative;
+import net.minecraft.src.PlayerControllerSPUnknownClass;
+import net.minecraft.src.PlayerControllerSPUnknownClass2;
 import net.minecraft.src.RenderEngine;
 import net.minecraft.src.RenderGlobal;
+import net.minecraft.src.RenderHub;
 import net.minecraft.src.RenderManager;
 import net.minecraft.src.ScaledResolution;
+import net.minecraft.src.ScreenDebugMenu;
 import net.minecraft.src.Session;
+import net.minecraft.src.SkinManager;
 import net.minecraft.src.SoundManager;
 import net.minecraft.src.Tessellator;
 import net.minecraft.src.TextureCompassFX;
@@ -56,25 +90,33 @@
 import net.minecraft.src.TextureLavaFlowFX;
 import net.minecraft.src.TextureWaterFX;
 import net.minecraft.src.TextureWaterFlowFX;
+import net.minecraft.src.ThreadChunkPopulator;
 import net.minecraft.src.ThreadDownloadResources;
 import net.minecraft.src.ThreadSleepForever;
 import net.minecraft.src.Timer;
 import net.minecraft.src.UnexpectedThrowable;
 import net.minecraft.src.Vec3D;
+import net.minecraft.src.VisualsManager;
 import net.minecraft.src.World;
+import net.minecraft.src.WorldGenMyconUnknownClass;
 import net.minecraft.src.WorldRenderer;
+import net.minecraft.src.WorldUnknownClass2;
+
 import org.lwjgl.LWJGLException;
+import org.lwjgl.Sys;
 import org.lwjgl.input.Controllers;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
 import org.lwjgl.opengl.DisplayMode;
 import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.PixelFormat;
 import org.lwjgl.util.glu.GLU;
 
 public abstract class Minecraft implements Runnable {
 	public PlayerController playerController;
-	private boolean fullscreen = false;
+	public static Minecraft field_7317_5Dn33cKLDp4ugCwpD8dAC0Qb0gK4WT4AEqJf0YUJc3Hq6EO32BfTsK678CKb;
+	public boolean fullscreen = false;
 	public int displayWidth;
 	public int displayHeight;
 	private OpenGlCapsChecker glCapabilities;
@@ -93,7 +135,7 @@
 	public GuiScreen currentScreen = null;
 	public LoadingScreenRenderer loadingScreen = new LoadingScreenRenderer(this);
 	public EntityRenderer entityRenderer = new EntityRenderer(this);
-	private ThreadDownloadResources downloadResourcesThread;
+	public ThreadDownloadResources downloadResourcesThread;
 	private int ticksRan = 0;
 	private int leftClickCounter = 0;
 	private int tempDisplayWidth;
@@ -116,6 +158,7 @@
 	private TextureWaterFX textureWaterFX = new TextureWaterFX();
 	private TextureLavaFX textureLavaFX = new TextureLavaFX();
 	private static File minecraftDir = null;
+	public static boolean field_7296_40G9X9sEbrNVWk1I68RpGi9486QjvBn75u9xmmmZ189amc26uqiJAf80zUYu = false;
 	public volatile boolean running = true;
 	public String debug = "";
 	long prevFrameTime = -1L;
@@ -124,33 +167,914 @@
 	public boolean isRaining = false;
 	long systemTime = System.currentTimeMillis();
 	private int joinPlayerCounter = 0;
+	public Component field_7319_3qZs06Oh4T1EzvE8a1e17oHrGTbJu43kH42m78NUR12BElFxZ583A3e3PdPk;
+	public MinecraftUnknownClass2 field_7308_49g3Ue4B4ymyJ5yc4CXdts2UZnR4OP36zG20Omc6J6Ly1C5xR8Habk43qvGE;
+	public MinecraftUnknownClass3 field_7311_0ef1dw6U62P0w8bU619gHGHeA4m17T8k6bnjfEQQwhJz0UwhJ6Kx9rBRdIvo;
+	public boolean field_7316_28K4517FJT58jN9ucjj3zE1jE410Ltpi330vH7516f19B006E4Wco5x4Y0w5 = true;
+	public long field_7273_9A23in1uqW3pg13kj4pOda0YD2W2B8toO2Xk31j7y1F2q5nDP0ompj85iXQC = System.currentTimeMillis();
+	public static boolean field_7307_8AX67fsnsj54328J9e6FiY9333555Xj726t2182u3TBB948QMZsZX2iz02iv = true;
+	public final String[] field_7302_19rCmxZvQ44R6d92WkH1mXthIKS3J78E3u1z0N18CN7q304gJsGOLn55X7mx = new String[]{"cb5c516ad379ee341929afe9b9d1498e4d82442d3d3dbb24bb3e6c082a785d75", "17f7a8e98e3b017d4bb168b57196f59a2c44f875ce8bba38086576ee3080e0a0"};
+	public final String[] field_7305_32ThEK683E33UOnLg5jCYi6a44ej1w0cgRA8dke3o36TvwA2m1lepu5CZa4q = new String[]{"36d528f3eaed8d3e413c571e7eb67037", "117b71e2dbed9440a000f742a9c7636a"};
+	public String field_7289_3R5t255Q5D6KY19uD068Mkk1B6OU9sWGPdWh8cCMUgE3jA5I39fu26h80483 = "";
+	public static boolean field_7272_4vZ36FKx2I9PxzXyWH4290I55Q6yd6FI668q2Ylv62ISy2u1yh710qJ4Q0Yo = false;
+	public static String field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L = WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9796_62Ccm2XAR6JqSDTgV762x61j971DNgsIrMhaXZxPs0fQnBC7ymR2l1v1V22X);
+	private final String field_7294_3N43634U70U92133ZUaNYj909RB5DwkFoBTS6atyP5GiVktfCg90sfuoC131 = "11(NtBreak)/11-023-ship " + (MinecraftImpl.class.getSimpleName().contains("MinecraftImpl") ? "(non-obf.)" : (MinecraftImpl.class.getSimpleName().length() < 3 ? "(lv1obf.)" : "(lv2obf.)"));
+	public static int field_7277_2ap75bw7uWpJs9xa2VRa8p40l51ptv8B02tkt5OcOFM8BeYBB08G54gDjTCY = 0;
+	public int field_7318_1202Xh2to5K411eCdkp7924Hyz4tEuc93T8eZ9qf5D33M4HWlnu524P0Mlk2 = 0;
+	public VisualsManager field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s = new VisualsManager();
+	public static boolean loadCerts = true;
+	public static String field_7269_8WQ9B51cG08Xzvtv4872kc1791FFx6EUAi7dtOrdc533169lB1oGze3Sm1ZJ;
+	public static boolean field_7326_55yB6jYtSi94r555184CYoXDQ1YhyBnoS1lJaCCAbdj3rDu1RNzU8Gp4C3g5 = false;
 
-	public Minecraft(Component var1, Canvas var2, MinecraftApplet var3, int var4, int var5, boolean var6) {
-		this.tempDisplayWidth = var4;
-		this.tempDisplayHeight = var5;
-		this.fullscreen = var6;
-		this.mcApplet = var3;
+	public Minecraft(Component component, Canvas canvas, MinecraftApplet mcApplet, int width, int height, boolean fullscreen) {
+		this.tempDisplayWidth = width;
+		this.tempDisplayHeight = height;
+		this.fullscreen = fullscreen;
+		this.mcApplet = mcApplet;
 		new ThreadSleepForever(this, "Timer hack thread");
-		this.mcCanvas = var2;
-		this.displayWidth = var4;
-		this.displayHeight = var5;
-		this.fullscreen = var6;
-	}
-
-	public abstract void displayUnexpectedThrowable(UnexpectedThrowable var1);
-
-	public void setServer(String var1, int var2) {
-		this.serverName = var1;
-		this.serverPort = var2;
+		this.mcCanvas = canvas;
+		this.displayWidth = width;
+		this.displayHeight = height;
+		this.fullscreen = fullscreen;
+		this.field_7319_3qZs06Oh4T1EzvE8a1e17oHrGTbJu43kH42m78NUR12BElFxZ583A3e3PdPk = component;
+		InputHandler.Initialize(this);
+		CertUtils.LoadKeys();
+		if(!System.getProperty("os.name").contains("indows")) {
+			Ext1605Utils.skinUrls.set(0, "file://" + System.getProperty(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9794_1Mq8T0QNr27egvw7Ii5njC2U34iHqD9xm0XHd85K26sr2HmLXKQgJ5Uz42hp), ".") + "/.minecraft/skincache/");
+		}
+
+	}
+
+	public abstract void displayUnexpectedThrowable(UnexpectedThrowable unexpectedThrowable1);
+
+	public void setServer(String string, int integer) {
+		this.serverName = string;
+		this.serverPort = integer;
+	}
+
+	public void func_7246_52E7PCfeQbAyGIXk2rGQJ0L8P422OpByz4zm7rUbJ5g5VnHn3y8niBTqC8C0(String string1, String string2) {
+		ScaledResolution scaledResolution3 = new ScaledResolution(this.displayWidth, this.displayHeight);
+		int i4 = scaledResolution3.getScaledHeight();
+		this.fontRenderer.drawString(string1, 10, i4 - 40, 0xFFFFFF);
+		this.fontRenderer.drawString(string2, 10, i4 - 25, 0xFFFFFF);
+	}
+
+	public void func_7254_8fW1DcOg3Y819yUa6j1jy2lJiMPR4hOFs9F2emO20dNK708Di149LF42q7Mt() {
+		if(!(new File(getMinecraftDir() + "/firstlaunch")).exists()) {
+			String string1 = this.session.username.toLowerCase();
+			byte b2 = -1;
+			switch(string1.hashCode()) {
+			case -2125008266:
+				if(string1.equals("digenuine")) {
+					b2 = 3;
+				}
+				break;
+			case -2015954412:
+				if(string1.equals("testtest123abc")) {
+					b2 = 99;
+				}
+				break;
+			case -1993439786:
+				if(string1.equals("herobrine")) {
+					b2 = 51;
+				}
+				break;
+			case -1914350748:
+				if(string1.equals("shiny_emerald")) {
+					b2 = 35;
+				}
+				break;
+			case -1903732581:
+				if(string1.equals("breadkins")) {
+					b2 = 57;
+				}
+				break;
+			case -1873628474:
+				if(string1.equals("jeffdakillax3")) {
+					b2 = 26;
+				}
+				break;
+			case -1872946770:
+				if(string1.equals("liminalityyy")) {
+					b2 = 8;
+				}
+				break;
+			case -1831285928:
+				if(string1.equals("j4zzdistrict")) {
+					b2 = 111;
+				}
+				break;
+			case -1653656391:
+				if(string1.equals("8ball_luck")) {
+					b2 = 105;
+				}
+				break;
+			case -1598878157:
+				if(string1.equals("xxmastercheef_reef2001xx")) {
+					b2 = 101;
+				}
+				break;
+			case -1545722941:
+				if(string1.equals("kerkan1994")) {
+					b2 = 47;
+				}
+				break;
+			case -1538477974:
+				if(string1.equals("cardjitsu2005")) {
+					b2 = 77;
+				}
+				break;
+			case -1512707649:
+				if(string1.equals("buj_itself")) {
+					b2 = 6;
+				}
+				break;
+			case -1484536825:
+				if(string1.equals("___afk")) {
+					b2 = 34;
+				}
+				break;
+			case -1477360791:
+				if(string1.equals("retrogamingnow")) {
+					b2 = 7;
+				}
+				break;
+			case -1419278862:
+				if(string1.equals("illudens")) {
+					b2 = 10;
+				}
+				break;
+			case -1416343405:
+				if(string1.equals("frilvman")) {
+					b2 = 110;
+				}
+				break;
+			case -1409130438:
+				if(string1.equals("samurai_2001")) {
+					b2 = 49;
+				}
+				break;
+			case -1406328437:
+				if(string1.equals("author")) {
+					b2 = 81;
+				}
+				break;
+			case -1355525147:
+				if(string1.equals("cntrpl")) {
+					b2 = 12;
+				}
+				break;
+			case -1349643796:
+				if(string1.equals("theobi1")) {
+					b2 = 5;
+				}
+				break;
+			case -1321851844:
+				if(string1.equals("d3veloper")) {
+					b2 = 67;
+				}
+				break;
+			case -1280020296:
+				if(string1.equals("anon-alpha-afil")) {
+					b2 = 1;
+				}
+				break;
+			case -1275471952:
+				if(string1.equals("gamemasterpdx")) {
+					b2 = 28;
+				}
+				break;
+			case -1271408351:
+				if(string1.equals("dawnbreather")) {
+					b2 = 61;
+				}
+				break;
+			case -1128254799:
+				if(string1.equals("js_sam1999")) {
+					b2 = 46;
+				}
+				break;
+			case -1099661474:
+				if(string1.equals("deluxewish")) {
+					b2 = 109;
+				}
+				break;
+			case -1059859060:
+				if(string1.equals("2008score")) {
+					b2 = 84;
+				}
+				break;
+			case -1047032954:
+				if(string1.equals("nguyen")) {
+					b2 = 92;
+				}
+				break;
+			case -983338091:
+				if(string1.equals("marina234")) {
+					b2 = 27;
+				}
+				break;
+			case -909395400:
+				if(string1.equals("saw_13")) {
+					b2 = 95;
+				}
+				break;
+			case -708524487:
+				if(string1.equals("equipmental")) {
+					b2 = 107;
+				}
+				break;
+			case -704651573:
+				if(string1.equals("theoneandonly_hb")) {
+					b2 = 94;
+				}
+				break;
+			case -601131336:
+				if(string1.equals("phil564")) {
+					b2 = 38;
+				}
+				break;
+			case -463246729:
+				if(string1.equals("phil_breadkins")) {
+					b2 = 56;
+				}
+				break;
+			case -440585693:
+				if(string1.equals("ossyflawol")) {
+					b2 = 15;
+				}
+				break;
+			case -408170668:
+				if(string1.equals("zigzag2608")) {
+					b2 = 4;
+				}
+				break;
+			case -374547061:
+				if(string1.equals("bolternon")) {
+					b2 = 18;
+				}
+				break;
+			case -364150283:
+				if(string1.equals("electric9001")) {
+					b2 = 103;
+				}
+				break;
+			case -362893193:
+				if(string1.equals("erdbeerbaerlp")) {
+					b2 = 32;
+				}
+				break;
+			case -356150495:
+				if(string1.equals("holdtheflame")) {
+					b2 = 121;
+				}
+				break;
+			case -318608989:
+				if(string1.equals("misian_de_que")) {
+					b2 = 113;
+				}
+				break;
+			case -268421708:
+				if(string1.equals("unnaturalistic")) {
+					b2 = 23;
+				}
+				break;
+			case -259340866:
+				if(string1.equals("rollnway")) {
+					b2 = 16;
+				}
+				break;
+			case -254209283:
+				if(string1.equals("shrugxxl")) {
+					b2 = 108;
+				}
+				break;
+			case -242995937:
+				if(string1.equals("skullkeks")) {
+					b2 = 17;
+				}
+				break;
+			case -239473648:
+				if(string1.equals("jack_wowo")) {
+					b2 = 112;
+				}
+				break;
+			case -217246700:
+				if(string1.equals("machinerage")) {
+					b2 = 50;
+				}
+				break;
+			case -135168753:
+				if(string1.equals("deve1oper")) {
+					b2 = 65;
+				}
+				break;
+			case -129627627:
+				if(string1.equals("deve7oper")) {
+					b2 = 71;
+				}
+				break;
+			case -82557847:
+				if(string1.equals("devel0per")) {
+					b2 = 64;
+				}
+				break;
+			case -82498265:
+				if(string1.equals("devel2per")) {
+					b2 = 66;
+				}
+				break;
+			case -80682471:
+				if(string1.equals("develop6r")) {
+					b2 = 70;
+				}
+				break;
+			case 3055:
+				if(string1.equals("a0")) {
+					b2 = 115;
+				}
+				break;
+			case 3056:
+				if(string1.equals("a1")) {
+					b2 = 116;
+				}
+				break;
+			case 3149:
+				if(string1.equals("d1")) {
+					b2 = 85;
+				}
+				break;
+			case 3150:
+				if(string1.equals("d2")) {
+					b2 = 86;
+				}
+				break;
+			case 94785:
+				if(string1.equals("a11")) {
+					b2 = 117;
+				}
+				break;
+			case 94946:
+				if(string1.equals("a67")) {
+					b2 = 118;
+				}
+				break;
+			case 97670:
+				if(string1.equals("d13")) {
+					b2 = 87;
+				}
+				break;
+			case 3307643:
+				if(string1.equals("kyub")) {
+					b2 = 75;
+				}
+				break;
+			case 3419501:
+				if(string1.equals("orbl")) {
+					b2 = 43;
+				}
+				break;
+			case 3492756:
+				if(string1.equals("rain")) {
+					b2 = 60;
+				}
+				break;
+			case 3541802:
+				if(string1.equals("sul4")) {
+					b2 = 36;
+				}
+				break;
+			case 28053531:
+				if(string1.equals("watchingthing")) {
+					b2 = 58;
+				}
+				break;
+			case 45806858:
+				if(string1.equals("00071")) {
+					b2 = 83;
+				}
+				break;
+			case 95354678:
+				if(string1.equals("dargh")) {
+					b2 = 21;
+				}
+				break;
+			case 101433788:
+				if(string1.equals("jstar")) {
+					b2 = 89;
+				}
+				break;
+			case 103068218:
+				if(string1.equals("lloyd")) {
+					b2 = 90;
+				}
+				break;
+			case 106004632:
+				if(string1.equals("orble")) {
+					b2 = 42;
+				}
+				break;
+			case 107943722:
+				if(string1.equals("queen")) {
+					b2 = 59;
+				}
+				break;
+			case 109330445:
+				if(string1.equals("seven")) {
+					b2 = 96;
+				}
+				break;
+			case 109403485:
+				if(string1.equals("sheer")) {
+					b2 = 39;
+				}
+				break;
+			case 109548582:
+				if(string1.equals("smaed")) {
+					b2 = 31;
+				}
+				break;
+			case 109556739:
+				if(string1.equals("smith")) {
+					b2 = 97;
+				}
+				break;
+			case 112261804:
+				if(string1.equals("vkcom")) {
+					b2 = 30;
+				}
+				break;
+			case 166040207:
+				if(string1.equals("gnawmon")) {
+					b2 = 19;
+				}
+				break;
+			case 184456332:
+				if(string1.equals("oceanharte")) {
+					b2 = 11;
+				}
+				break;
+			case 202924960:
+				if(string1.equals("philalphaver")) {
+					b2 = 2;
+				}
+				break;
+			case 246043532:
+				if(string1.equals("director")) {
+					b2 = 82;
+				}
+				break;
+			case 282680621:
+				if(string1.equals("thenamesbond_123")) {
+					b2 = 93;
+				}
+				break;
+			case 284885337:
+				if(string1.equals("dispensa")) {
+					b2 = 20;
+				}
+				break;
+			case 430942275:
+				if(string1.equals("uncrossedpanic4")) {
+					b2 = 33;
+				}
+				break;
+			case 439344840:
+				if(string1.equals("wyvern621")) {
+					b2 = 76;
+				}
+				break;
+			case 449781037:
+				if(string1.equals("andrewidot")) {
+					b2 = 0;
+				}
+				break;
+			case 468954976:
+				if(string1.equals("deveightloper")) {
+					b2 = 54;
+				}
+				break;
+			case 489469283:
+				if(string1.equals("brokenblade")) {
+					b2 = 63;
+				}
+				break;
+			case 535861488:
+				if(string1.equals("vladg24")) {
+					b2 = 14;
+				}
+				break;
+			case 684616160:
+				if(string1.equals("philbreadkins")) {
+					b2 = 55;
+				}
+				break;
+			case 736853015:
+				if(string1.equals("qrobin42")) {
+					b2 = 114;
+				}
+				break;
+			case 742370547:
+				if(string1.equals("biggenux")) {
+					b2 = 53;
+				}
+				break;
+			case 801006876:
+				if(string1.equals("clemence")) {
+					b2 = 62;
+				}
+				break;
+			case 839198725:
+				if(string1.equals("mark101")) {
+					b2 = 79;
+				}
+				break;
+			case 849762053:
+				if(string1.equals("cs_jam2000")) {
+					b2 = 78;
+				}
+				break;
+			case 852404551:
+				if(string1.equals("cheatosphere64")) {
+					b2 = 22;
+				}
+				break;
+			case 928393453:
+				if(string1.equals("cntrpl2")) {
+					b2 = 13;
+				}
+				break;
+			case 959150352:
+				if(string1.equals("kyubey34")) {
+					b2 = 74;
+				}
+				break;
+			case 961412075:
+				if(string1.equals("the father")) {
+					b2 = 88;
+				}
+				break;
+			case 964545680:
+				if(string1.equals("grasswalker15")) {
+					b2 = 120;
+				}
+				break;
+			case 966222007:
+				if(string1.equals("thatkingopizza")) {
+					b2 = 100;
+				}
+				break;
+			case 1015761090:
+				if(string1.equals("fruitybot")) {
+					b2 = 37;
+				}
+				break;
+			case 1034584923:
+				if(string1.equals("unfortun8")) {
+					b2 = 52;
+				}
+				break;
+			case 1105719974:
+				if(string1.equals("devel5er")) {
+					b2 = 69;
+				}
+				break;
+			case 1143769501:
+				if(string1.equals("andrewgaming67")) {
+					b2 = 119;
+				}
+				break;
+			case 1174415035:
+				if(string1.equals("bugnation")) {
+					b2 = 45;
+				}
+				break;
+			case 1174745426:
+				if(string1.equals("the mother")) {
+					b2 = 91;
+				}
+				break;
+			case 1239153688:
+				if(string1.equals("theblue_warrier")) {
+					b2 = 104;
+				}
+				break;
+			case 1274587626:
+				if(string1.equals("jamieplayzmc")) {
+					b2 = 80;
+				}
+				break;
+			case 1429411275:
+				if(string1.equals("dug_fleez")) {
+					b2 = 73;
+				}
+				break;
+			case 1545927868:
+				if(string1.equals("spooksthewookz57")) {
+					b2 = 72;
+				}
+				break;
+			case 1624772359:
+				if(string1.equals("bobbies1")) {
+					b2 = 24;
+				}
+				break;
+			case 1670620881:
+				if(string1.equals("vivivern")) {
+					b2 = 41;
+				}
+				break;
+			case 1723943043:
+				if(string1.equals("xorcist6898")) {
+					b2 = 48;
+				}
+				break;
+			case 1792078684:
+				if(string1.equals("develo4per")) {
+					b2 = 68;
+				}
+				break;
+			case 1844594291:
+				if(string1.equals("dottych")) {
+					b2 = 29;
+				}
+				break;
+			case 1864101498:
+				if(string1.equals("salvoil")) {
+					b2 = 102;
+				}
+				break;
+			case 1919540599:
+				if(string1.equals("_where_")) {
+					b2 = 106;
+				}
+				break;
+			case 1970438482:
+				if(string1.equals("kollinkollin")) {
+					b2 = 9;
+				}
+				break;
+			case 1974428530:
+				if(string1.equals("bug_nation")) {
+					b2 = 44;
+				}
+				break;
+			case 2088461320:
+				if(string1.equals("spirethebuilder10")) {
+					b2 = 98;
+				}
+				break;
+			case 2099469472:
+				if(string1.equals("bortimer")) {
+					b2 = 25;
+				}
+				break;
+			case 2114607034:
+				if(string1.equals("dycam99")) {
+					b2 = 40;
+				}
+			}
+
+			switch(b2) {
+			case 0:
+			case 1:
+			case 2:
+			case 3:
+				Sys.alert("Why... Why are there...", "Penises?");
+				break;
+			case 4:
+				Sys.alert("Hey hun, it\'s Andrew!", "Not sure if you\'ll ever see this, but remember I love you very much <3\nMwah!");
+				break;
+			case 5:
+				Sys.alert("Prepare thyself!", "Ahh... Free at last. O Gabriel. Now dawns thy reckoning, and thy gore shall glisten before the temples of man. Creature of steel... My gratitude upon thee for my freedom, but the crimes thy kind have committed against humanity are NOT forgotten. And thy punishment... is DEATH.");
+				break;
+			case 6:
+				Sys.alert("insert creative window title here", "r4sepad when");
+				break;
+			case 7:
+				Sys.alert("Hi Retro!", "AlphaVer Part 3 when?");
+				break;
+			case 8:
+			case 9:
+			case 10:
+				Sys.alert("oops", "wrong arg fam");
+				break;
+			case 11:
+			case 12:
+			case 13:
+				Sys.alert("Hey.", "Sorry you had to suffer 2 years for this, but, thank you for everything.");
+				break;
+			case 14:
+				Sys.alert("woag", "alphaver wiki-ing");
+				break;
+			case 15:
+				Sys.alert("portal 2", "portal 2");
+				break;
+			case 16:
+				Sys.alert("uhm erm erm uh uhm", "yeah");
+				break;
+			case 17:
+				Sys.alert("Message from the devs", "May the Haiza be with you...");
+				break;
+			case 18:
+				Sys.alert("GIVE US MORE WOMEN", "MMM I NEED WOMEN THE WOMEN YES YES WOMEN YEAH WOMEN WOOOOOOOOOOOOOOOOO");
+				break;
+			case 19:
+				Sys.alert("hey", "thanks for that translator");
+				break;
+			case 20:
+				Sys.alert("holy shit...", "my data is gonna transmission..........");
+				break;
+			case 21:
+				Sys.alert("dev6 isnt breedable", "but the true question is: can chester give decent sloppy toppy?");
+				break;
+			case 22:
+				Sys.alert("uhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh", "my stars are shimmering");
+				break;
+			case 23:
+				Sys.alert("hey", "you\'re cool");
+				break;
+			case 24:
+				Sys.alert("BREASTS???", "TITTIES?!?!?!");
+				break;
+			case 25:
+				Sys.alert("yo", "your textures are cool :+1:");
+				break;
+			case 26:
+				Sys.alert("hey", "you\'re silly :3");
+				break;
+			case 27:
+				Sys.alert("hey", "herman hesse shall strike you down");
+				break;
+			case 28:
+				Sys.alert("fyi", "dev16\'s splash text is canon now lol");
+				break;
+			case 29:
+				Sys.alert("mrrp meow :3", "dotty if you dont know what this does we dont either");
+				break;
+			case 30:
+				Sys.alert("do rap", "gun gun bullet no no bullet gun yeah");
+				break;
+			case 31:
+				Sys.alert("insert creative window title here", "r4uj when");
+				break;
+			case 32:
+				Sys.alert("hi server guy", "we referenced your server in video 4");
+				break;
+			case 33:
+				Sys.alert("Hey!", "I\'m Watching You!");
+				break;
+			case 34:
+				Sys.alert("john", "john time");
+				break;
+			case 35:
+				Sys.alert("here\'s a riddle", "what\'s the opposite of dominant?");
+				break;
+			case 36:
+				Sys.alert("M3554G3 FR0M D3VC0L0N :3", "1\'M 1N Y0UR C0MPUT3R N0W L0LZ!!! >X3");
+				break;
+			case 37:
+				Sys.alert("HIIII PEPPERMIN!!!!T", "AAAAAAAAAAAAAAAAAAAAAAAA");
+				break;
+			case 38:
+				Sys.alert("3 mintue of alphaver when", "275 minute of alphaquest");
+				break;
+			case 39:
+				Sys.alert("(we are so sorry for referencing this)", "You\'re not a minecrafter... you\'re not a person...");
+				break;
+			case 40:
+				Sys.alert("altairvega", "alternative vagina jumpscare");
+				break;
+			case 41:
+			case 42:
+			case 43:
+			case 44:
+			case 45:
+			case 46:
+			case 47:
+			case 48:
+			case 49:
+			case 50:
+				func_7238_8H52lk1I5U4nYYa3DHwuO9983hXzifi7DFqUArLsQoa6s0Qlzi2ZW2wZnrkG("https://youtu.be/V4d0Qp9YF2I?si=o4HJG230zUUAJzIJ&t=438");
+				break;
+			case 51:
+				Sys.alert("DiGenuine/Phil says:", "Why are there penises?");
+				break;
+			case 52:
+			case 53:
+			case 54:
+				Sys.alert("meow mrrp :3", "mew mew purr nya mrryah meow :3");
+				break;
+			case 55:
+			case 56:
+			case 57:
+				Sys.alert("DiGenuine/Phil says:", "Seems like you got the wrong Phil. The work awaits...");
+				break;
+			case 58:
+				Sys.alert("So, you\'ve seen it too, have you not?", "The sky, devouring itself - burning with a fever most divine");
+				break;
+			case 59:
+				Sys.alert("So, how does it feel?", "Your vastness, unfurled, condemned, contained? No more broken laws.");
+				break;
+			case 60:
+			case 61:
+				Sys.alert("Welcome, O, One Who Cleanses Wounds.", "Even if you were inevitable, you were awaited.");
+				break;
+			case 62:
+				Sys.alert("Rest, now.", "There\'s nowhere to hurry anymore.");
+				break;
+			case 63:
+				Sys.alert("Oh how sonorous is the ring of steel", "Falling to the ground - in broken shards");
+				break;
+			case 64:
+			case 65:
+			case 66:
+			case 67:
+			case 68:
+			case 69:
+			case 70:
+			case 71:
+			case 72:
+			case 73:
+			case 74:
+			case 75:
+			case 76:
+			case 77:
+			case 78:
+			case 79:
+			case 80:
+			case 81:
+			case 82:
+			case 83:
+			case 84:
+			case 85:
+			case 86:
+			case 87:
+			case 88:
+			case 89:
+			case 90:
+			case 91:
+			case 92:
+			case 93:
+			case 94:
+			case 95:
+			case 96:
+			case 97:
+			case 98:
+			case 99:
+			case 100:
+			case 101:
+			case 102:
+			case 103:
+			case 104:
+			case 105:
+			case 106:
+			case 107:
+			case 108:
+			case 109:
+			case 110:
+			case 111:
+			case 112:
+			case 113:
+			case 114:
+			case 115:
+			case 116:
+			case 117:
+			case 118:
+			case 119:
+			case 120:
+			case 121:
+				Sys.alert("Well this is weird...", "Are you sure you\'re supposed to be here?");
+				break;
+			default:
+				return;
+			}
+
+			try {
+				(new File(getMinecraftDir() + "/firstlaunch")).createNewFile();
+			} catch (IOException iOException3) {
+				iOException3.printStackTrace();
+			}
+
+		}
+	}
+
+	public static void func_7238_8H52lk1I5U4nYYa3DHwuO9983hXzifi7DFqUArLsQoa6s0Qlzi2ZW2wZnrkG(String string) {
+		try {
+			Desktop.getDesktop().browse((new URL(string)).toURI());
+		} catch (Exception exception2) {
+			exception2.printStackTrace();
+		}
+
 	}
 
 	public void startGame() throws LWJGLException {
 		if(this.mcCanvas != null) {
-			Graphics var1 = this.mcCanvas.getGraphics();
-			if(var1 != null) {
-				var1.setColor(Color.BLACK);
-				var1.fillRect(0, 0, this.displayWidth, this.displayHeight);
-				var1.dispose();
+			Graphics graphics1 = this.mcCanvas.getGraphics();
+			if(graphics1 != null) {
+				graphics1.setColor(Color.BLACK);
+				graphics1.fillRect(0, 0, this.displayWidth, this.displayHeight);
+				graphics1.dispose();
 			}
 
 			Display.setParent(this.mcCanvas);
@@ -169,25 +1093,30 @@
 			Display.setDisplayMode(new DisplayMode(this.displayWidth, this.displayHeight));
 		}
 
-		Display.setTitle("Minecraft Minecraft Alpha v1.1.2_01");
+		Display.setTitle("Minecraft Minecraft Alpha v1.0.16.05");
+		PixelFormat pixelFormat14 = new PixelFormat();
+		pixelFormat14 = pixelFormat14.withDepthBits(24);
 
 		try {
-			Display.create();
-		} catch (LWJGLException var6) {
-			var6.printStackTrace();
+			Display.create(pixelFormat14);
+		} catch (LWJGLException lWJGLException12) {
+			lWJGLException12.printStackTrace();
 
 			try {
 				Thread.sleep(1000L);
-			} catch (InterruptedException var5) {
+			} catch (InterruptedException interruptedException11) {
 			}
 
-			Display.create();
+			Display.create(pixelFormat14);
 		}
 
 		RenderManager.instance.itemRenderer = new ItemRenderer(this);
 		this.mcDataDir = getMinecraftDir();
 		this.options = new GameSettings(this, this.mcDataDir);
-		this.renderEngine = new RenderEngine(this.options);
+		this.field_7308_49g3Ue4B4ymyJ5yc4CXdts2UZnR4OP36zG20Omc6J6Ly1C5xR8Habk43qvGE = new MinecraftUnknownClass2(this, this.mcDataDir);
+		this.renderEngine = new RenderEngine(this.field_7308_49g3Ue4B4ymyJ5yc4CXdts2UZnR4OP36zG20Omc6J6Ly1C5xR8Habk43qvGE, this.options);
+		this.field_7308_49g3Ue4B4ymyJ5yc4CXdts2UZnR4OP36zG20Omc6J6Ly1C5xR8Habk43qvGE.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0.field_10164_5N63dbka0na7Is07L9kMmSk6ZK28Ioxdll6JwQgybo1I69cauDA8U5rtDvBv.func_12189_4e16037zP017Ybyhw4klyCwOs24S8Nh9OzRYIDt7732Nr83dqO5Otm7FIbRq(this);
+		this.field_7311_0ef1dw6U62P0w8bU619gHGHeA4m17T8k6bnjfEQQwhJz0UwhJ6Kx9rBRdIvo = new MinecraftUnknownClass3(this);
 		this.fontRenderer = new FontRenderer(this.options, "/default.png", this.renderEngine);
 		this.loadScreen();
 		Keyboard.create();
@@ -196,8 +1125,9 @@
 
 		try {
 			Controllers.create();
-		} catch (Exception var4) {
-			var4.printStackTrace();
+			InputHandler.CaptureGamepad();
+		} catch (Exception exception10) {
+			exception10.printStackTrace();
 		}
 
 		this.checkGLError("Pre startup");
@@ -222,14 +1152,18 @@
 		this.renderEngine.registerTextureFX(new TextureLavaFlowFX());
 		this.renderEngine.registerTextureFX(new TextureFlamesFX(0));
 		this.renderEngine.registerTextureFX(new TextureFlamesFX(1));
-		this.renderGlobal = new RenderGlobal(this, this.renderEngine);
+		RenderHub renderHub10001 = new RenderHub();
+		renderHub10001.RenderHub(this, this.renderEngine);
+		this.renderGlobal = renderHub10001;
 		GL11.glViewport(0, 0, this.displayWidth, this.displayHeight);
 		this.effectRenderer = new EffectRenderer(this.theWorld, this.renderEngine);
+		(new MinecraftUnknownClass(this)).start();
+		WorldGenMyconUnknownClass.func_9980_9oD74IB2ktSl4rKYyq5be1pnGiKcijsDk38XO5US1yU1RgWUN9KZuVmeM2HO();
 
 		try {
 			this.downloadResourcesThread = new ThreadDownloadResources(this.mcDataDir, this);
 			this.downloadResourcesThread.start();
-		} catch (Exception var3) {
+		} catch (Exception exception9) {
 		}
 
 		this.checkGLError("Post startup");
@@ -238,136 +1172,209 @@
 			this.displayGuiScreen(new GuiConnecting(this, this.serverName, this.serverPort));
 		} else {
 			this.displayGuiScreen(new GuiMainMenu());
-		}
-
+			if(ThreadChunkPopulator.useAsyncGen) {
+				this.displayGuiScreen(new GuiConnectFailed("Warning!", "Using async. world generation may lead to anomalies in your worlds.\nUse at your own risk!"));
+			}
+		}
+
+		this.func_7251_0aCQ3QUtAn82t0f1z3JQKRAg5aNB155g64AWf0ztqf7j603OA1tsJsAwlFrq();
+
+		try {
+			MessageDigest messageDigest2 = MessageDigest.getInstance("SHA-256");
+			MessageDigest messageDigest3 = MessageDigest.getInstance("MD5");
+			byte[] b4 = messageDigest2.digest(this.session.username.getBytes("UTF-8"));
+			byte[] b5 = messageDigest3.digest(this.session.username.getBytes("UTF-8"));
+			String string6 = Ext1605Utils.func_12148_5D2s54927n4DKgyG72xyN0I2571Gf1lofyGtm297rlY5SYBWi0Gc4NBMKoQD(b4);
+			String string7 = Ext1605Utils.func_12148_5D2s54927n4DKgyG72xyN0I2571Gf1lofyGtm297rlY5SYBWi0Gc4NBMKoQD(b5);
+
+			for(int i8 = 0; i8 != this.field_7302_19rCmxZvQ44R6d92WkH1mXthIKS3J78E3u1z0N18CN7q304gJsGOLn55X7mx.length; ++i8) {
+				if(this.field_7302_19rCmxZvQ44R6d92WkH1mXthIKS3J78E3u1z0N18CN7q304gJsGOLn55X7mx[i8].equals(string6) && this.field_7305_32ThEK683E33UOnLg5jCYi6a44ej1w0cgRA8dke3o36TvwA2m1lepu5CZa4q[i8].equals(string7)) {
+					field_7272_4vZ36FKx2I9PxzXyWH4290I55Q6yd6FI668q2Ylv62ISy2u1yh710qJ4Q0Yo = true;
+					break;
+				}
+			}
+		} catch (UnsupportedEncodingException | NoSuchAlgorithmException noSuchAlgorithmException13) {
+			noSuchAlgorithmException13.printStackTrace();
+		}
+
+		ExtLogger.InitLogger();
+		if(field_7272_4vZ36FKx2I9PxzXyWH4290I55Q6yd6FI668q2Ylv62ISy2u1yh710qJ4Q0Yo) {
+			this.func_7241_0dMl5I34263gZ0dPe7JHpGrD7U3zw9us5Hn9tWeKJL88K9IRr93Uq13Y3bAE();
+		}
+
+	}
+
+	public String func_7236_2E4BZaw4wUzRdqs6H26gijBXYV2x4keaA5V5idykFk39ETvee94J18B7nBcD() {
+		if(this.field_7289_3R5t255Q5D6KY19uD068Mkk1B6OU9sWGPdWh8cCMUgE3jA5I39fu26h80483.isEmpty()) {
+			if((new File(getMinecraftDir() + "/perfTelemetryCache.txt")).exists()) {
+				try {
+					BufferedReader bufferedReader1 = new BufferedReader(new FileReader(getMinecraftDir() + "/perfTelemetryCache.txt"));
+					this.field_7289_3R5t255Q5D6KY19uD068Mkk1B6OU9sWGPdWh8cCMUgE3jA5I39fu26h80483 = bufferedReader1.readLine();
+					bufferedReader1.close();
+				} catch (IOException iOException2) {
+				}
+
+				return this.field_7289_3R5t255Q5D6KY19uD068Mkk1B6OU9sWGPdWh8cCMUgE3jA5I39fu26h80483;
+			}
+
+			this.field_7289_3R5t255Q5D6KY19uD068Mkk1B6OU9sWGPdWh8cCMUgE3jA5I39fu26h80483 = GL11.glGetString(GL11.GL_RENDERER);
+		}
+
+		return this.field_7289_3R5t255Q5D6KY19uD068Mkk1B6OU9sWGPdWh8cCMUgE3jA5I39fu26h80483;
+	}
+
+	public void func_7251_0aCQ3QUtAn82t0f1z3JQKRAg5aNB155g64AWf0ztqf7j603OA1tsJsAwlFrq() {
+		this.func_7248_2y5vE7Yn817r5Knu79o4Aj1C8zSXCZv983MY0Ng8eMzo5U95JWt5FIuSSHqv("");
+	}
+
+	public void func_7248_2y5vE7Yn817r5Knu79o4Aj1C8zSXCZv983MY0Ng8eMzo5U95JWt5FIuSSHqv(String string) {
+		if(this.field_7319_3qZs06Oh4T1EzvE8a1e17oHrGTbJu43kH42m78NUR12BElFxZ583A3e3PdPk instanceof Frame) {
+			((Frame)this.field_7319_3qZs06Oh4T1EzvE8a1e17oHrGTbJu43kH42m78NUR12BElFxZ583A3e3PdPk).setTitle("Minecraft - " + this.session.username + " - OpenGL (" + this.func_7236_2E4BZaw4wUzRdqs6H26gijBXYV2x4keaA5V5idykFk39ETvee94J18B7nBcD() + ") " + string);
+		}
+
+	}
+
+	public void func_7241_0dMl5I34263gZ0dPe7JHpGrD7U3zw9us5Hn9tWeKJL88K9IRr93Uq13Y3bAE() {
+		field_7272_4vZ36FKx2I9PxzXyWH4290I55Q6yd6FI668q2Ylv62ISy2u1yh710qJ4Q0Yo = true;
+		this.ingameGUI = new GuiBanned(this);
+		field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L = "/dclient_terrain.png";
+		this.func_7231_39qZtzs9Umn2t4Yo7zgL9jG0eGk29r7apQzgXA0F4G93V675ed5o7E7DaMF4("detain");
 	}
 
 	private void loadScreen() throws LWJGLException {
-		ScaledResolution var1 = new ScaledResolution(this.displayWidth, this.displayHeight);
-		int var2 = var1.getScaledWidth();
-		int var3 = var1.getScaledHeight();
-		GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
+		ScaledResolution scaledResolution1 = new ScaledResolution(this.displayWidth, this.displayHeight);
+		int i2 = scaledResolution1.getScaledWidth();
+		int i3 = scaledResolution1.getScaledHeight();
+		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glLoadIdentity();
-		GL11.glOrtho(0.0D, (double)var2, (double)var3, 0.0D, 1000.0D, 3000.0D);
+		GL11.glOrtho(0.0D, (double)i2, (double)i3, 0.0D, 1000.0D, 3000.0D);
 		GL11.glMatrixMode(GL11.GL_MODELVIEW);
 		GL11.glLoadIdentity();
 		GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
 		GL11.glViewport(0, 0, this.displayWidth, this.displayHeight);
 		GL11.glClearColor(0.0F, 0.0F, 0.0F, 0.0F);
-		Tessellator var4 = Tessellator.instance;
+		Tessellator tessellator4 = Tessellator.instance;
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 		GL11.glDisable(GL11.GL_FOG);
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/title/mojang.png"));
-		var4.startDrawingQuads();
-		var4.setColorOpaque_I(16777215);
-		var4.addVertexWithUV(0.0D, (double)this.displayHeight, 0.0D, 0.0D, 0.0D);
-		var4.addVertexWithUV((double)this.displayWidth, (double)this.displayHeight, 0.0D, 0.0D, 0.0D);
-		var4.addVertexWithUV((double)this.displayWidth, 0.0D, 0.0D, 0.0D, 0.0D);
-		var4.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
-		var4.draw();
-		short var5 = 256;
-		short var6 = 256;
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9797_2ExF4JhJHlCqkXYSNrS98Z5269ASfuJ8zkQQ6HhI63XODUSPeL6pTXj9yxiR)));
+		tessellator4.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+		tessellator4.setColorOpaque_I(0xFFFFFF);
+		tessellator4.addVertexWithUV(0.0D, (double)this.displayHeight, 0.0D, 0.0D, 0.0D);
+		tessellator4.addVertexWithUV((double)this.displayWidth, (double)this.displayHeight, 0.0D, 0.0D, 0.0D);
+		tessellator4.addVertexWithUV((double)this.displayWidth, 0.0D, 0.0D, 0.0D, 0.0D);
+		tessellator4.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+		tessellator4.draw();
+		short s5 = 256;
+		short s6 = 256;
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		var4.setColorOpaque_I(16777215);
-		this.scaledTessellator((this.displayWidth / 2 - var5) / 2, (this.displayHeight / 2 - var6) / 2, 0, 0, var5, var6);
+		tessellator4.setColorOpaque_I(0xFFFFFF);
+		this.scaledTessellator((this.displayWidth / 2 - s5) / 2, (this.displayHeight / 2 - s6) / 2, 0, 0, s5, s6);
+		this.fontRenderer.drawString("BUILD " + this.field_7294_3N43634U70U92133ZUaNYj909RB5DwkFoBTS6atyP5GiVktfCg90sfuoC131, 10, 10, 0xFFFFFF);
+		if(this.session.username.equals("DECRAFT_Player")) {
+			this.fontRenderer.drawString("(based)", 10, 20, 0xFFFFFF);
+		}
+
+		this.func_7254_8fW1DcOg3Y819yUa6j1jy2lJiMPR4hOFs9F2emO20dNK708Di149LF42q7Mt();
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_FOG);
 		GL11.glEnable(GL11.GL_ALPHA_TEST);
 		GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
+		Display.setVSyncEnabled(this.options.limitFramerate);
 		Display.swapBuffers();
 	}
 
-	public void scaledTessellator(int var1, int var2, int var3, int var4, int var5, int var6) {
-		float var7 = 0.00390625F;
-		float var8 = 0.00390625F;
-		Tessellator var9 = Tessellator.instance;
-		var9.startDrawingQuads();
-		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), 0.0D, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + var6) * var8));
-		var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), 0.0D, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + var6) * var8));
-		var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), 0.0D, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + 0) * var8));
-		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), 0.0D, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + 0) * var8));
-		var9.draw();
+	public void scaledTessellator(int integer1, int integer2, int integer3, int integer4, int integer5, int integer6) {
+		float f7 = 0.00390625F;
+		float f8 = 0.00390625F;
+		Tessellator tessellator9 = Tessellator.instance;
+		tessellator9.startDrawingQuads();
+		tessellator9.addVertexWithUV((double)(integer1 + 0), (double)(integer2 + integer6), 0.0D, (double)((float)(integer3 + 0) * f7), (double)((float)(integer4 + integer6) * f8));
+		tessellator9.addVertexWithUV((double)(integer1 + integer5), (double)(integer2 + integer6), 0.0D, (double)((float)(integer3 + integer5) * f7), (double)((float)(integer4 + integer6) * f8));
+		tessellator9.addVertexWithUV((double)(integer1 + integer5), (double)(integer2 + 0), 0.0D, (double)((float)(integer3 + integer5) * f7), (double)((float)(integer4 + 0) * f8));
+		tessellator9.addVertexWithUV((double)(integer1 + 0), (double)(integer2 + 0), 0.0D, (double)((float)(integer3 + 0) * f7), (double)((float)(integer4 + 0) * f8));
+		tessellator9.draw();
 	}
 
 	public static File getMinecraftDir() {
 		if(minecraftDir == null) {
-			minecraftDir = getAppDir("minecraft");
+			minecraftDir = field_7296_40G9X9sEbrNVWk1I68RpGi9486QjvBn75u9xmmmZ189amc26uqiJAf80zUYu ? new File(System.getProperty("user.dir")) : getAppDir(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9792_1YNrQ38ivM5fhyTo9PH5S33r6S87fqg85pTp0c4YlXfUniwhAwgeD8hZT3Cd));
 		}
 
 		return minecraftDir;
 	}
 
-	public static File getAppDir(String var0) {
-		String var1 = System.getProperty("user.home", ".");
-		File var2;
+	public static File getAppDir(String string) {
+		String string1 = System.getProperty(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9794_1Mq8T0QNr27egvw7Ii5njC2U34iHqD9xm0XHd85K26sr2HmLXKQgJ5Uz42hp), ".");
+		File file2;
 		switch(OSMap.osValues[getOs().ordinal()]) {
 		case 1:
 		case 2:
-			var2 = new File(var1, '.' + var0 + '/');
+			file2 = new File(string1, '.' + string + '/');
 			break;
 		case 3:
-			String var3 = System.getenv("APPDATA");
-			if(var3 != null) {
-				var2 = new File(var3, "." + var0 + '/');
+			String string3 = System.getenv("APPDATA");
+			if(string3 != null) {
+				file2 = new File(string3, "." + string + '/');
 			} else {
-				var2 = new File(var1, '.' + var0 + '/');
+				file2 = new File(string1, '.' + string + '/');
 			}
 			break;
 		case 4:
-			var2 = new File(var1, "Library/Application Support/" + var0);
+			file2 = new File(string1, "Library/Application Support/" + string);
 			break;
 		default:
-			var2 = new File(var1, var0 + '/');
+			file2 = new File(string1, string + '/');
 		}
 
-		if(!var2.exists() && !var2.mkdirs()) {
-			throw new RuntimeException("The working directory could not be created: " + var2);
+		if(!file2.exists() && !file2.mkdirs()) {
+			throw new RuntimeException("The working directory could not be created: " + file2);
 		} else {
-			return var2;
+			return file2;
 		}
 	}
 
 	private static EnumOS getOs() {
-		String var0 = System.getProperty("os.name").toLowerCase();
-		return var0.contains("win") ? EnumOS.windows : (var0.contains("mac") ? EnumOS.macos : (var0.contains("solaris") ? EnumOS.solaris : (var0.contains("sunos") ? EnumOS.solaris : (var0.contains("linux") ? EnumOS.linux : (var0.contains("unix") ? EnumOS.linux : EnumOS.unknown)))));
+		String string0 = System.getProperty("os.name").toLowerCase();
+		return string0.contains("win") ? EnumOS.windows : (string0.contains("mac") ? EnumOS.macos : (string0.contains("solaris") ? EnumOS.solaris : (string0.contains("sunos") ? EnumOS.solaris : (string0.contains("linux") ? EnumOS.linux : (string0.contains("unix") ? EnumOS.linux : EnumOS.unknown)))));
 	}
 
-	public void displayGuiScreen(GuiScreen var1) {
+	public void displayGuiScreen(GuiScreen hr) {
 		if(!(this.currentScreen instanceof GuiErrorScreen)) {
 			if(this.currentScreen != null) {
 				this.currentScreen.onGuiClosed();
 			}
 
-			if(var1 == null && this.theWorld == null) {
-				var1 = new GuiMainMenu();
-			} else if(var1 == null && this.thePlayer.health <= 0) {
-				var1 = new GuiGameOver();
+			if(hr == null && this.theWorld == null) {
+				hr = new GuiMainMenu();
+			} else if(hr == null && this.thePlayer.health <= 0) {
+				hr = this.thePlayer instanceof EntityPlayerZombieModeClient ? new GuiGameOver() : new GuiFrail();
 			}
 
-			this.currentScreen = (GuiScreen)var1;
-			if(var1 != null) {
+			this.currentScreen = (GuiScreen)hr;
+			if(hr != null) {
 				this.setIngameNotInFocus();
-				ScaledResolution var2 = new ScaledResolution(this.displayWidth, this.displayHeight);
-				int var3 = var2.getScaledWidth();
-				int var4 = var2.getScaledHeight();
-				((GuiScreen)var1).setWorldAndResolution(this, var3, var4);
+				ScaledResolution scaledResolution2 = new ScaledResolution(this.displayWidth, this.displayHeight);
+				int i3 = scaledResolution2.getScaledWidth();
+				int i4 = scaledResolution2.getScaledHeight();
+				((GuiScreen)hr).setWorldAndResolution(this, i3, i4);
+				((GuiScreen)hr).onGuiOpen();
 				this.skipRenderWorld = false;
 			} else {
 				this.setIngameFocus();
 			}
-
 		}
+
 	}
 
-	private void checkGLError(String var1) {
-		int var2 = GL11.glGetError();
-		if(var2 != 0) {
-			String var3 = GLU.gluErrorString(var2);
+	private void checkGLError(String string) {
+		int i2 = GL11.glGetError();
+		if(i2 != 0) {
+			String string3 = GLU.gluErrorString(i2);
 			System.out.println("########## GL ERROR ##########");
-			System.out.println("@ " + var1);
-			System.out.println(var2 + ": " + var3);
+			System.out.println("@ " + string);
+			System.out.println(i2 + ": " + string3);
 			System.exit(0);
 		}
 
@@ -382,7 +1389,7 @@
 			if(this.downloadResourcesThread != null) {
 				this.downloadResourcesThread.closeMinecraft();
 			}
-		} catch (Exception var8) {
+		} catch (Exception exception8) {
 		}
 
 		try {
@@ -391,12 +1398,13 @@
 
 			try {
 				GLAllocation.deleteTexturesAndDisplayLists();
-			} catch (Exception var6) {
+			} catch (Exception exception6) {
 			}
 
 			this.sndManager.closeMinecraft();
 			Mouse.destroy();
 			Keyboard.destroy();
+			Controllers.destroy();
 		} finally {
 			Display.destroy();
 		}
@@ -409,112 +1417,113 @@
 
 		try {
 			this.startGame();
-		} catch (Exception var13) {
-			var13.printStackTrace();
-			this.displayUnexpectedThrowable(new UnexpectedThrowable("Failed to start game", var13));
+		} catch (Exception exception10) {
+			exception10.printStackTrace();
+			this.displayUnexpectedThrowable(new UnexpectedThrowable("Failed to start game", exception10));
 			return;
 		}
 
 		try {
-			try {
-				long var1 = System.currentTimeMillis();
-				int var3 = 0;
-
-				while(this.running && (this.mcApplet == null || this.mcApplet.isActive())) {
-					AxisAlignedBB.clearBoundingBoxPool();
-					Vec3D.initialize();
-					if(this.mcCanvas == null && Display.isCloseRequested()) {
-						this.shutdown();
-					}
-
-					if(this.isGamePaused && this.theWorld != null) {
-						float var4 = this.timer.renderPartialTicks;
-						this.timer.updateTimer();
-						this.timer.renderPartialTicks = var4;
-					} else {
-						this.timer.updateTimer();
-					}
-
-					for(int var17 = 0; var17 < this.timer.elapsedTicks; ++var17) {
-						++this.ticksRan;
-
-						try {
-							this.runTick();
-						} catch (MinecraftException var12) {
-							this.theWorld = null;
-							this.changeWorld1((World)null);
-							this.displayGuiScreen(new GuiConflictWarning());
-						}
-					}
-
-					this.checkGLError("Pre render");
-					this.sndManager.setListener(this.thePlayer, this.timer.renderPartialTicks);
-					GL11.glEnable(GL11.GL_TEXTURE_2D);
-					if(this.theWorld != null) {
-						while(this.theWorld.updatingLighting()) {
-						}
-					}
-
-					if(!this.skipRenderWorld) {
-						if(this.playerController != null) {
-							this.playerController.setPartialTime(this.timer.renderPartialTicks);
-						}
-
-						this.entityRenderer.updateCameraAndRender(this.timer.renderPartialTicks);
-					}
-
-					if(!Display.isActive()) {
-						if(this.fullscreen) {
-							this.toggleFullscreen();
-						}
-
-						Thread.sleep(10L);
-					}
-
-					if(Keyboard.isKeyDown(Keyboard.KEY_F6)) {
-						this.displayDebugInfo();
-					} else {
-						this.prevFrameTime = System.nanoTime();
-					}
-
-					Thread.yield();
-					Display.update();
-					if(this.mcCanvas != null && !this.fullscreen && (this.mcCanvas.getWidth() != this.displayWidth || this.mcCanvas.getHeight() != this.displayHeight)) {
-						this.displayWidth = this.mcCanvas.getWidth();
-						this.displayHeight = this.mcCanvas.getHeight();
-						if(this.displayWidth <= 0) {
-							this.displayWidth = 1;
-						}
-
-						if(this.displayHeight <= 0) {
-							this.displayHeight = 1;
-						}
-
-						this.resize(this.displayWidth, this.displayHeight);
-					}
-
-					if(this.options.limitFramerate) {
-						Thread.sleep(5L);
-					}
-
-					this.checkGLError("Post render");
-					++var3;
-
-					for(this.isGamePaused = !this.isMultiplayerWorld() && this.currentScreen != null && this.currentScreen.doesGuiPauseGame(); System.currentTimeMillis() >= var1 + 1000L; var3 = 0) {
-						this.debug = var3 + " fps, " + WorldRenderer.chunksUpdated + " chunk updates";
-						WorldRenderer.chunksUpdated = 0;
-						var1 += 1000L;
-					}
-				}
-			} catch (MinecraftError var14) {
-			} catch (Throwable var15) {
-				this.theWorld = null;
-				var15.printStackTrace();
-				this.displayUnexpectedThrowable(new UnexpectedThrowable("Unexpected error", var15));
+			long j1 = System.currentTimeMillis();
+			int i3 = 0;
+
+			while(this.running && (this.mcApplet == null || this.mcApplet.isActive())) {
+				long j4 = System.currentTimeMillis();
+				AxisAlignedBB.clearBoundingBoxPool();
+				Vec3D.initialize();
+				if(this.mcCanvas == null && Display.isCloseRequested()) {
+					this.shutdown();
+				}
+
+				if(this.isGamePaused && this.theWorld != null) {
+					float f6 = this.timer.renderPartialTicks;
+					this.timer.updateTimer();
+					this.timer.renderPartialTicks = f6;
+				} else {
+					this.timer.updateTimer();
+				}
+
+				for(int i13 = 0; i13 < this.timer.elapsedTicks; ++i13) {
+					++this.ticksRan;
+
+					try {
+						this.runTick();
+					} catch (MinecraftException minecraftException9) {
+						this.theWorld = null;
+						this.changeWorld1((World)null);
+						this.displayGuiScreen(new GuiConflictWarning());
+					}
+				}
+
+				this.checkGLError("Pre render");
+				this.sndManager.setListener(this.thePlayer, this.timer.renderPartialTicks);
+				GL11.glEnable(GL11.GL_TEXTURE_2D);
+				if(this.theWorld != null) {
+					while(this.theWorld.updatingLighting()) {
+					}
+				}
+
+				if(!this.skipRenderWorld) {
+					if(this.playerController != null) {
+						this.playerController.setPartialTime(this.timer.renderPartialTicks);
+					}
+
+					this.entityRenderer.updateCameraAndRender(this.timer.renderPartialTicks);
+				}
+
+				if(!Display.isActive()) {
+					if(this.fullscreen) {
+						this.toggleFullscreen();
+					}
+
+					Thread.sleep(10L);
+				}
+
+				if(InputHandler.IsKeyDown(64)) {
+					this.displayDebugInfo();
+				} else {
+					this.prevFrameTime = System.nanoTime();
+				}
+
+				Thread.yield();
+				Display.update();
+				if(this.mcCanvas != null && !this.fullscreen && (this.mcCanvas.getWidth() != this.displayWidth || this.mcCanvas.getHeight() != this.displayHeight)) {
+					this.displayWidth = this.mcCanvas.getWidth();
+					this.displayHeight = this.mcCanvas.getHeight();
+					if(this.displayWidth <= 0) {
+						this.displayWidth = 1;
+					}
+
+					if(this.displayHeight <= 0) {
+						this.displayHeight = 1;
+					}
+
+					this.resize(this.displayWidth, this.displayHeight);
+				}
+
+				if(field_7277_2ap75bw7uWpJs9xa2VRa8p40l51ptv8B02tkt5OcOFM8BeYBB08G54gDjTCY > 0) {
+					try {
+						Thread.sleep((long)field_7277_2ap75bw7uWpJs9xa2VRa8p40l51ptv8B02tkt5OcOFM8BeYBB08G54gDjTCY);
+					} catch (Exception exception8) {
+					}
+				}
+
+				this.checkGLError("Post render");
+				++i3;
+
+				for(this.isGamePaused = !this.isMultiplayerWorld() && this.currentScreen != null && this.currentScreen.doesGuiPauseGame(); System.currentTimeMillis() >= j1 + 1000L; i3 = 0) {
+					this.debug = i3 + " fps, " + WorldRenderer.chunksUpdated + " chunk updates";
+					WorldRenderer.chunksUpdated = 0;
+					j1 += 1000L;
+				}
 			}
-
-		} finally {
+		} catch (MinecraftError minecraftError11) {
+		} catch (Throwable throwable12) {
+			this.theWorld = null;
+			throwable12.printStackTrace();
+			this.displayUnexpectedThrowable(new UnexpectedThrowable("Unexpected error", throwable12));
 		}
+
 	}
 
 	private void displayDebugInfo() {
@@ -522,9 +1531,9 @@
 			this.prevFrameTime = System.nanoTime();
 		}
 
-		long var1 = System.nanoTime();
-		frameTimes[numRecordedFrameTimes++ & frameTimes.length - 1] = var1 - this.prevFrameTime;
-		this.prevFrameTime = var1;
+		long j1 = System.nanoTime();
+		frameTimes[numRecordedFrameTimes++ & frameTimes.length - 1] = j1 - this.prevFrameTime;
+		this.prevFrameTime = j1;
 		GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glLoadIdentity();
@@ -534,44 +1543,44 @@
 		GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
 		GL11.glLineWidth(1.0F);
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
-		Tessellator var3 = Tessellator.instance;
-		var3.startDrawing(7);
-		var3.setColorOpaque_I(538968064);
-		var3.addVertex(0.0D, (double)(this.displayHeight - 100), 0.0D);
-		var3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)(this.displayHeight - 100), 0.0D);
-		var3.draw();
-		long var4 = 0L;
-
-		int var6;
-		for(var6 = 0; var6 < frameTimes.length; ++var6) {
-			var4 += frameTimes[var6];
-		}
-
-		var6 = (int)(var4 / 200000L / (long)frameTimes.length);
-		var3.startDrawing(7);
-		var3.setColorOpaque_I(541065216);
-		var3.addVertex(0.0D, (double)(this.displayHeight - var6), 0.0D);
-		var3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)(this.displayHeight - var6), 0.0D);
-		var3.draw();
-		var3.startDrawing(1);
-
-		for(int var7 = 0; var7 < frameTimes.length; ++var7) {
-			int var8 = (var7 - numRecordedFrameTimes & frameTimes.length - 1) * 255 / frameTimes.length;
-			int var9 = var8 * var8 / 255;
-			var9 = var9 * var9 / 255;
-			int var10 = var9 * var9 / 255;
-			var10 = var10 * var10 / 255;
-			var3.setColorOpaque_I(-16777216 + var10 + var9 * 256 + var8 * 65536);
-			long var11 = frameTimes[var7] / 200000L;
-			var3.addVertex((double)((float)var7 + 0.5F), (double)((float)((long)this.displayHeight - var11) + 0.5F), 0.0D);
-			var3.addVertex((double)((float)var7 + 0.5F), (double)((float)this.displayHeight + 0.5F), 0.0D);
-		}
-
-		var3.draw();
+		Tessellator tessellator3 = Tessellator.instance;
+		tessellator3.startDrawing(7);
+		tessellator3.setColorOpaque_I(0x20200000);
+		tessellator3.addVertex(0.0D, (double)(this.displayHeight - 100), 0.0D);
+		tessellator3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)(this.displayHeight - 100), 0.0D);
+		tessellator3.draw();
+		long j4 = 0L;
+
+		int i6;
+		for(i6 = 0; i6 < frameTimes.length; ++i6) {
+			j4 += frameTimes[i6];
+		}
+
+		i6 = (int)(j4 / 200000L / (long)frameTimes.length);
+		tessellator3.startDrawing(7);
+		tessellator3.setColorOpaque_I(0x20400000);
+		tessellator3.addVertex(0.0D, (double)(this.displayHeight - i6), 0.0D);
+		tessellator3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)(this.displayHeight - i6), 0.0D);
+		tessellator3.draw();
+		tessellator3.startDrawing(1);
+
+		for(int i7 = 0; i7 < frameTimes.length; ++i7) {
+			int i8 = (i7 - numRecordedFrameTimes & frameTimes.length - 1) * 255 / frameTimes.length;
+			int i9 = i8 * i8 / 255;
+			i9 = i9 * i9 / 255;
+			int i10 = i9 * i9 / 255;
+			i10 = i10 * i10 / 255;
+			tessellator3.setColorOpaque_I(0xFF000000 + i10 + i9 * 256 + i8 * 65536);
+			long j11 = frameTimes[i7] / 200000L;
+			tessellator3.addVertex((double)((float)i7 + 0.5F), (double)((float)((long)this.displayHeight - j11) + 0.5F), 0.0D);
+			tessellator3.addVertex((double)((float)i7 + 0.5F), (double)((float)this.displayHeight + 0.5F), 0.0D);
+		}
+
+		tessellator3.draw();
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 	}
 
@@ -580,14 +1589,13 @@
 	}
 
 	public void setIngameFocus() {
-		if(Display.isActive()) {
-			if(!this.inGameHasFocus) {
-				this.inGameHasFocus = true;
-				this.mouseHelper.grabMouseCursor();
-				this.displayGuiScreen((GuiScreen)null);
-				this.mouseTicksRan = this.ticksRan + 10000;
-			}
+		if(Display.isActive() && !this.inGameHasFocus) {
+			this.inGameHasFocus = true;
+			this.mouseHelper.grabMouseCursor();
+			this.displayGuiScreen((GuiScreen)null);
+			this.mouseTicksRan = this.ticksRan + 10000;
 		}
+
 	}
 
 	public void setIngameNotInFocus() {
@@ -599,102 +1607,101 @@
 			this.inGameHasFocus = false;
 			this.mouseHelper.ungrabMouseCursor();
 		}
+
 	}
 
 	public void displayInGameMenu() {
 		if(this.currentScreen == null) {
-			this.displayGuiScreen(new GuiIngameMenu());
+			this.displayGuiScreen((GuiScreen)(field_7272_4vZ36FKx2I9PxzXyWH4290I55Q6yd6FI668q2Ylv62ISy2u1yh710qJ4Q0Yo ? new GuiBannedMenu() : new GuiIngameMenu()));
 		}
+
 	}
 
-	private void sendClickBlockToController(int var1, boolean var2) {
-		if(!this.playerController.isInTestMode) {
-			if(var1 != 0 || this.leftClickCounter <= 0) {
-				if(var2 && this.objectMouseOver != null && this.objectMouseOver.typeOfHit == 0 && var1 == 0) {
-					int var3 = this.objectMouseOver.blockX;
-					int var4 = this.objectMouseOver.blockY;
-					int var5 = this.objectMouseOver.blockZ;
-					this.playerController.sendBlockRemoving(var3, var4, var5, this.objectMouseOver.sideHit);
-					this.effectRenderer.addBlockHitEffects(var3, var4, var5, this.objectMouseOver.sideHit);
-				} else {
-					this.playerController.resetBlockRemoving();
-				}
-
+	private void sendClickBlockToController(int button, boolean clicked) {
+		if(!this.playerController.isInTestMode && (button != 0 || this.leftClickCounter <= 0)) {
+			if(clicked && this.objectMouseOver != null && this.objectMouseOver.typeOfHit == 0 && button == 0) {
+				int i3 = this.objectMouseOver.blockX;
+				int i4 = this.objectMouseOver.blockY;
+				int i5 = this.objectMouseOver.blockZ;
+				this.playerController.sendBlockRemoving(i3, i4, i5, this.objectMouseOver.sideHit);
+				this.effectRenderer.addBlockHitEffects(i3, i4, i5, this.objectMouseOver.sideHit);
+			} else {
+				this.playerController.resetBlockRemoving();
 			}
 		}
+
 	}
 
-	private void clickMouse(int var1) {
-		if(var1 != 0 || this.leftClickCounter <= 0) {
-			if(var1 == 0) {
+	private void clickMouse(int button) {
+		if(button != 0 || this.leftClickCounter <= 0) {
+			if(button == 0) {
 				this.thePlayer.swingItem();
 			}
 
-			int var3;
+			int i2;
 			if(this.objectMouseOver == null) {
-				if(var1 == 0 && !(this.playerController instanceof PlayerControllerCreative)) {
+				if(button == 0 && !(this.playerController instanceof PlayerControllerCreative)) {
 					this.leftClickCounter = 10;
 				}
 			} else if(this.objectMouseOver.typeOfHit == 1) {
-				if(var1 == 0) {
+				if(button == 0) {
 					this.thePlayer.attackEntity(this.objectMouseOver.entityHit);
 				}
 
-				if(var1 == 1) {
+				if(button == 1) {
 					this.thePlayer.interactWithEntity(this.objectMouseOver.entityHit);
 				}
 			} else if(this.objectMouseOver.typeOfHit == 0) {
-				int var2 = this.objectMouseOver.blockX;
-				var3 = this.objectMouseOver.blockY;
-				int var4 = this.objectMouseOver.blockZ;
-				int var5 = this.objectMouseOver.sideHit;
-				Block var6 = Block.blocksList[this.theWorld.getBlockId(var2, var3, var4)];
-				if(var1 == 0) {
-					this.theWorld.extinguishFire(var2, var3, var4, this.objectMouseOver.sideHit);
-					if(var6 != Block.bedrock || this.thePlayer.unusedMiningCooldown >= 100) {
-						this.playerController.clickBlock(var2, var3, var4, this.objectMouseOver.sideHit);
+				int i3 = this.objectMouseOver.blockX;
+				i2 = this.objectMouseOver.blockY;
+				int i4 = this.objectMouseOver.blockZ;
+				int i5 = this.objectMouseOver.sideHit;
+				Block block6 = Block.blocksList[this.theWorld.getBlockId(i3, i2, i4)];
+				if(button == 0) {
+					this.theWorld.extinguishFire(i3, i2, i4, this.objectMouseOver.sideHit);
+					if(block6 != Block.bedrock) {
+						this.playerController.clickBlock(i3, i2, i4, this.objectMouseOver.sideHit);
 					}
 				} else {
-					ItemStack var7 = this.thePlayer.inventory.getCurrentItem();
-					int var8 = var7 != null ? var7.stackSize : 0;
-					if(this.playerController.onPlayerRightClick(this.thePlayer, this.theWorld, var7, var2, var3, var4, var5)) {
+					ItemStack itemStack7 = this.thePlayer.inventory.getCurrentItem();
+					int i8 = itemStack7 != null ? itemStack7.stackSize : 0;
+					if(this.playerController.onPlayerRightClick(this.thePlayer, this.theWorld, itemStack7, i3, i2, i4, i5)) {
 						this.thePlayer.swingItem();
 					}
 
-					if(var7 == null) {
+					if(itemStack7 == null) {
 						return;
 					}
 
-					if(var7.stackSize == 0) {
+					if(itemStack7.stackSize == 0) {
 						this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = null;
-					} else if(var7.stackSize != var8) {
+					} else if(itemStack7.stackSize != i8) {
 						this.entityRenderer.itemRenderer.resetEquippedProgress();
 					}
 				}
 			}
 
-			if(var1 == 1) {
-				ItemStack var9 = this.thePlayer.inventory.getCurrentItem();
-				if(var9 != null) {
-					var3 = var9.stackSize;
-					ItemStack var10 = var9.useItemRightClick(this.theWorld, this.thePlayer);
-					if(var10 != var9 || var10 != null && var10.stackSize != var3) {
-						this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = var10;
+			if(button == 1) {
+				ItemStack itemStack9 = this.thePlayer.inventory.getCurrentItem();
+				if(itemStack9 != null) {
+					i2 = itemStack9.stackSize;
+					ItemStack itemStack10 = itemStack9.useItemRightClick(this.theWorld, this.thePlayer);
+					if(itemStack10 != itemStack9 || itemStack10 != null && itemStack10.stackSize != i2) {
+						this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = itemStack10;
 						this.entityRenderer.itemRenderer.resetEquippedProgress2();
-						if(var10.stackSize == 0) {
+						if(itemStack10.stackSize == 0) {
 							this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = null;
 						}
 					}
 				}
 			}
-
 		}
+
 	}
 
 	public void toggleFullscreen() {
 		try {
 			this.fullscreen = !this.fullscreen;
-			System.out.println("Toggle fullscreen!");
 			if(this.fullscreen) {
 				Display.setDisplayMode(Display.getDesktopDisplayMode());
 				this.displayWidth = Display.getDisplayMode().getWidth();
@@ -740,53 +1747,55 @@
 			}
 
 			System.out.println("Size: " + this.displayWidth + ", " + this.displayHeight);
-		} catch (Exception var2) {
-			var2.printStackTrace();
+		} catch (Exception exception2) {
+			exception2.printStackTrace();
 		}
 
 	}
 
-	private void resize(int var1, int var2) {
-		if(var1 <= 0) {
-			var1 = 1;
-		}
-
-		if(var2 <= 0) {
-			var2 = 1;
-		}
-
-		this.displayWidth = var1;
-		this.displayHeight = var2;
+	public void resize(int width, int height) {
+		if(width <= 0) {
+			width = 1;
+		}
+
+		if(height <= 0) {
+			height = 1;
+		}
+
+		this.displayWidth = width;
+		this.displayHeight = height;
 		if(this.currentScreen != null) {
-			ScaledResolution var3 = new ScaledResolution(var1, var2);
-			int var4 = var3.getScaledWidth();
-			int var5 = var3.getScaledHeight();
-			this.currentScreen.setWorldAndResolution(this, var4, var5);
+			ScaledResolution scaledResolution3 = new ScaledResolution(width, height);
+			int i4 = scaledResolution3.getScaledWidth();
+			int i5 = scaledResolution3.getScaledHeight();
+			this.currentScreen.setWorldAndResolution(this, i4, i5);
 		}
 
 	}
 
 	private void clickMiddleMouseButton() {
 		if(this.objectMouseOver != null) {
-			int var1 = this.theWorld.getBlockId(this.objectMouseOver.blockX, this.objectMouseOver.blockY, this.objectMouseOver.blockZ);
-			if(var1 == Block.grass.blockID) {
-				var1 = Block.dirt.blockID;
-			}
-
-			if(var1 == Block.stairDouble.blockID) {
-				var1 = Block.stairSingle.blockID;
-			}
-
-			if(var1 == Block.bedrock.blockID) {
-				var1 = Block.stone.blockID;
-			}
-
-			this.thePlayer.inventory.setCurrentItem(var1, this.playerController instanceof PlayerControllerCreative);
+			int i1 = this.theWorld.getBlockId(this.objectMouseOver.blockX, this.objectMouseOver.blockY, this.objectMouseOver.blockZ);
+			if(i1 == Block.grass.blockID) {
+				i1 = Block.dirt.blockID;
+			}
+
+			if(i1 == Block.stairDouble.blockID) {
+				i1 = Block.stairSingle.blockID;
+			}
+
+			if(i1 == Block.bedrock.blockID) {
+				i1 = Block.stone.blockID;
+			}
+
+			this.thePlayer.inventory.setCurrentItem(i1, this.playerController instanceof PlayerControllerCreative);
 		}
 
 	}
 
 	public void runTick() {
+		this.field_7318_1202Xh2to5K411eCdkp7924Hyz4tEuc93T8eZ9qf5D33M4HWlnu524P0Mlk2 = Tessellator.instance.field_10304_0MROVDArlUltRNep2c82Yjn0c1YV0K6TX18zu3ch3eo466SKujDB70HFNvjW;
+		Tessellator.instance.field_10304_0MROVDArlUltRNep2c82Yjn0c1YV0K6TX18zu3ch3eo466SKujDB70HFNvjW = 0;
 		this.ingameGUI.updateTick();
 		this.entityRenderer.getMouseOver(1.0F);
 		if(this.thePlayer != null) {
@@ -797,7 +1806,11 @@
 			this.playerController.onUpdate();
 		}
 
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain.png"));
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture(field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L));
+		if(this.options.fancyGraphics == 2) {
+			GL11.glDisable(GL11.GL_BLEND);
+		}
+
 		if(!this.isGamePaused) {
 			this.renderEngine.updateDynamicTextures();
 		}
@@ -818,13 +1831,14 @@
 		}
 
 		if(this.currentScreen == null || this.currentScreen.allowUserInput) {
-			label234:
+			label241:
 			while(true) {
 				while(true) {
 					while(true) {
-						long var1;
+						long j1;
+						int i3;
 						do {
-							if(!Mouse.next()) {
+							if(!InputHandler.NextEvent()) {
 								if(this.leftClickCounter > 0) {
 									--this.leftClickCounter;
 								}
@@ -832,94 +1846,94 @@
 								while(true) {
 									while(true) {
 										do {
-											if(!Keyboard.next()) {
+											if(!InputHandler.NextKBEvent()) {
 												if(this.currentScreen == null) {
-													if(Mouse.isButtonDown(0) && (float)(this.ticksRan - this.mouseTicksRan) >= this.timer.ticksPerSecond / 4.0F && this.inGameHasFocus) {
+													if(InputHandler.InputMouseAction(0) && (float)(this.ticksRan - this.mouseTicksRan) >= this.timer.ticksPerSecond / 4.0F && this.inGameHasFocus) {
 														this.clickMouse(0);
 														this.mouseTicksRan = this.ticksRan;
 													}
 
-													if(Mouse.isButtonDown(1) && (float)(this.ticksRan - this.mouseTicksRan) >= this.timer.ticksPerSecond / 4.0F && this.inGameHasFocus) {
+													if(InputHandler.InputMouseAction(1) && (float)(this.ticksRan - this.mouseTicksRan) >= this.timer.ticksPerSecond / 4.0F && this.inGameHasFocus) {
 														this.clickMouse(1);
 														this.mouseTicksRan = this.ticksRan;
 													}
 												}
 
-												this.sendClickBlockToController(0, this.currentScreen == null && Mouse.isButtonDown(0) && this.inGameHasFocus);
-												break label234;
+												this.sendClickBlockToController(0, this.currentScreen == null && InputHandler.InputMouseAction(0) && this.inGameHasFocus);
+												break label241;
 											}
 
-											this.thePlayer.handleKeyPress(Keyboard.getEventKey(), Keyboard.getEventKeyState());
-										} while(!Keyboard.getEventKeyState());
+											this.thePlayer.handleKeyPress(InputHandler.GetKBEventKey(), InputHandler.GetKBEventKeyState());
+										} while(!InputHandler.GetKBEventKeyState());
 
-										if(Keyboard.getEventKey() == Keyboard.KEY_F11) {
+										if(InputHandler.GetKBEventKey() == 87) {
 											this.toggleFullscreen();
 										} else {
 											if(this.currentScreen != null) {
 												this.currentScreen.handleKeyboardInput();
 											} else {
-												if(Keyboard.getEventKey() == Keyboard.KEY_ESCAPE) {
+												if(InputHandler.GetKBEventKey() == 1) {
 													this.displayInGameMenu();
 												}
 
-												if(Keyboard.getEventKey() == Keyboard.KEY_S && Keyboard.isKeyDown(Keyboard.KEY_F3)) {
+												if(InputHandler.GetKBEventKey() == 31 && InputHandler.IsKeyDown(61)) {
 													this.forceReload();
 												}
 
-												if(Keyboard.getEventKey() == Keyboard.KEY_F5) {
+												if(InputHandler.GetKBEventKey() == 63) {
 													this.options.thirdPersonView = !this.options.thirdPersonView;
 												}
 
-												if(Keyboard.getEventKey() == this.options.keyBindInventory.keyCode) {
-													this.displayGuiScreen(new GuiInventory(this.thePlayer.inventory, this.thePlayer.inventory.craftingInventory));
+												if(InputHandler.GetKBEventKey() == this.options.keyBindInventory.keyCode) {
+													this.thePlayer.func_9050_0Y2V1e7t06S7hQ12YogQ88R8Lcbm2Sz6Y3o802q297lUgzXrhuM8Ioqo9Hzq(this);
 												}
 
-												if(Keyboard.getEventKey() == this.options.keyBindDrop.keyCode) {
+												if(InputHandler.GetKBEventKey() == this.options.keyBindDrop.keyCode) {
 													this.thePlayer.dropPlayerItemWithRandomChoice(this.thePlayer.inventory.decrStackSize(this.thePlayer.inventory.currentItem, 1), false);
 												}
 
-												if(this.isMultiplayerWorld() && Keyboard.getEventKey() == this.options.keyBindChat.keyCode) {
+												if((this.isMultiplayerWorld() || InputHandler.IsKeyDown(54)) && InputHandler.GetKBEventKey() == this.options.keyBindChat.keyCode) {
 													this.displayGuiScreen(new GuiChat());
 												}
 											}
 
-											for(int var4 = 0; var4 < 9; ++var4) {
-												if(Keyboard.getEventKey() == Keyboard.KEY_1 + var4) {
-													this.thePlayer.inventory.currentItem = var4;
+											for(i3 = 0; i3 < 9; ++i3) {
+												if(InputHandler.GetKBEventKey() == 2 + i3 && (!(this.thePlayer instanceof EntityPlayerZombieModeClient) || i3 < 2)) {
+													this.thePlayer.inventory.currentItem = i3;
 												}
 											}
 
-											if(Keyboard.getEventKey() == this.options.keyBindToggleFog.keyCode) {
-												this.options.setOptionValue(4, !Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) && !Keyboard.isKeyDown(Keyboard.KEY_RSHIFT) ? 1 : -1);
+											if(InputHandler.GetKBEventKey() == this.options.keyBindToggleFog.keyCode) {
+												this.options.setOptionValue(4, !InputHandler.IsKeyDown(42) && !InputHandler.IsKeyDown(54) ? 1 : -1);
 											}
 										}
 									}
 								}
 							}
 
-							var1 = System.currentTimeMillis() - this.systemTime;
-						} while(var1 > 200L);
+							j1 = System.currentTimeMillis() - this.systemTime;
+						} while(j1 > 200L);
 
-						int var3 = Mouse.getEventDWheel();
-						if(var3 != 0) {
-							this.thePlayer.inventory.changeCurrentItem(var3);
+						i3 = InputHandler.GetDWheel();
+						if(i3 != 0) {
+							this.thePlayer.inventory.changeCurrentItem(i3);
 						}
 
 						if(this.currentScreen == null) {
-							if(!this.inGameHasFocus && Mouse.getEventButtonState()) {
+							if(!this.inGameHasFocus && InputHandler.GetEventButtonState()) {
 								this.setIngameFocus();
-							} else {
-								if(Mouse.getEventButton() == 0 && Mouse.getEventButtonState()) {
+							} else if(InputHandler.GetEventButtonState()) {
+								if(InputHandler.GetEventButton() == 0) {
 									this.clickMouse(0);
 									this.mouseTicksRan = this.ticksRan;
 								}
 
-								if(Mouse.getEventButton() == 1 && Mouse.getEventButtonState()) {
+								if(InputHandler.GetEventButton() == 1) {
 									this.clickMouse(1);
 									this.mouseTicksRan = this.ticksRan;
 								}
 
-								if(Mouse.getEventButton() == 2 && Mouse.getEventButtonState()) {
+								if(InputHandler.GetEventButton() == 2) {
 									this.clickMiddleMouseButton();
 								}
 							}
@@ -980,64 +1994,126 @@
 		return this.theWorld != null && this.theWorld.multiplayerWorld;
 	}
 
-	public void startWorld(String var1) {
+	public void startWorld(String worldName) {
 		this.changeWorld1((World)null);
 		System.gc();
-		World var2 = new World(new File(getMinecraftDir(), "saves"), var1);
-		if(var2.isNewWorld) {
-			this.changeWorld(var2, "Generating level");
+		World world2 = new World(new File(getMinecraftDir(), "saves"), worldName);
+		ExtLogger.i("Attempting to load world " + world2.saveDirectory.toPath() + "...");
+
+		try {
+			Files.write(Paths.get("./qfile", new String[0]), worldName.getBytes(), new OpenOption[0]);
+		} catch (IOException iOException4) {
+		}
+
+		if(world2.isNewWorld) {
+			this.changeWorld(world2, "Generating level");
 		} else {
-			this.changeWorld(var2, "Loading level");
-		}
-
-	}
-
-	public void changeWorld1(World var1) {
-		this.changeWorld(var1, "");
-	}
-
-	public void changeWorld(World var1, String var2) {
+			this.changeWorld(world2, "Loading level");
+		}
+
+	}
+
+	public void func_7260_29708o9t3Kv11ORjhW6WgtZ1jrShpxII2V33oCWwflopdLkDYzM1ouYGxg87(String string, Class class2) {
+		this.changeWorld1((World)null);
+		System.gc();
+		this.playerController = new PlayerControllerSPUnknownClass2(this);
+
+		try {
+			World world3 = (World)class2.getDeclaredConstructor(new Class[]{File.class, String.class}).newInstance(new Object[]{new File(getMinecraftDir(), "saves"), string});
+			ExtLogger.i("Attempting to load world " + world3.saveDirectory.toPath() + "...");
+			if(world3.isNewWorld) {
+				return;
+			}
+
+			this.changeWorld(world3, "Loading level");
+		} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException | InstantiationException instantiationException4) {
+		}
+
+	}
+
+	public void func_7231_39qZtzs9Umn2t4Yo7zgL9jG0eGk29r7apQzgXA0F4G93V675ed5o7E7DaMF4(String string) {
+		this.displayGuiScreen((GuiScreen)null);
+		this.playerController = new PlayerControllerSPUnknownClass(this);
+		this.displayGuiScreen((GuiScreen)null);
+		this.changeWorld1((World)null);
+		System.gc();
+		World world2 = new World(new File(getMinecraftDir(), "saves"), string);
+		ExtLogger.i("Attempting to load world " + world2.saveDirectory.toPath() + "...");
+		this.changeWorld(world2, "Loading level");
+		this.displayGuiScreen((GuiScreen)null);
+	}
+
+	public void func_7221_71au6k35k5FtG2NSeEY81nM6cEMq9s813ZJ5zelgNb1pyX20syXDH0z15gpb(String string, Class class2) {
+		this.changeWorld1((World)null);
+		System.gc();
+
+		try {
+			World world3 = (World)class2.getDeclaredConstructor(new Class[]{File.class, String.class}).newInstance(new Object[]{new File(getMinecraftDir(), "saves"), string});
+			ExtLogger.i("Attempting to load world " + world3.saveDirectory.toPath() + "...");
+			if(world3.isNewWorld) {
+				return;
+			}
+
+			this.changeWorld(world3, "Loading level");
+		} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException | InstantiationException instantiationException4) {
+		}
+
+	}
+
+	public void changeWorld1(World world) {
+		this.changeWorld(world, "");
+	}
+
+	public void changeWorld(World world, String title) {
+		if(SoundManager.sndSystem != null) {
+			this.sndManager.func_12031_514dv3mYU7t95lOh23lLhBI10XBv07D8y61Goe1u7G926JNt2Y1WIoiHj5tm((String)null, true);
+		}
+
+		this.changeWorld(world, title, true);
+	}
+
+	public void changeWorld(World vg, String string, boolean boolean3) {
 		this.sndManager.playStreaming((String)null, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
-		if(this.theWorld != null) {
+		if(boolean3 && this.theWorld != null) {
 			this.theWorld.saveWorldIndirectly(this.loadingScreen);
 		}
 
-		this.theWorld = var1;
-		if(var1 != null) {
-			this.playerController.onWorldChange(var1);
-			var1.fontRenderer = this.fontRenderer;
+		this.theWorld = vg;
+		if(vg != null) {
+			this.playerController.onWorldChange(vg);
+			vg.fontRenderer = this.fontRenderer;
 			if(!this.isMultiplayerWorld()) {
-				this.thePlayer = (EntityPlayerSP)var1.createDebugPlayer(EntityPlayerSP.class);
+				this.thePlayer = (EntityPlayerSP)vg.createDebugPlayer(EntityPlayerSP.class);
 			} else if(this.thePlayer != null) {
 				this.thePlayer.preparePlayerToSpawn();
-				if(var1 != null) {
-					var1.spawnEntityInWorld(this.thePlayer);
+				if(vg != null) {
+					vg.spawnEntityInWorld(this.thePlayer);
 				}
 			}
 
-			if(!var1.multiplayerWorld) {
-				this.preloadWorld(var2);
+			if(!vg.multiplayerWorld) {
+				this.preloadWorld(string);
 			}
 
 			if(this.thePlayer == null) {
-				this.thePlayer = (EntityPlayerSP)this.playerController.createPlayer(var1);
+				this.thePlayer = (EntityPlayerSP)this.playerController.createPlayer(vg);
 				this.thePlayer.preparePlayerToSpawn();
 				this.playerController.flipPlayer(this.thePlayer);
 			}
 
 			this.thePlayer.movementInput = new MovementInputFromOptions(this.options);
 			if(this.renderGlobal != null) {
-				this.renderGlobal.changeWorld(var1);
+				this.renderGlobal.changeWorld(vg);
 			}
 
 			if(this.effectRenderer != null) {
-				this.effectRenderer.clearEffects(var1);
+				this.effectRenderer.clearEffects(vg);
 			}
 
 			this.playerController.onRespawn(this.thePlayer);
-			var1.spawnPlayerWithLoadedChunks(this.thePlayer);
-			if(var1.isNewWorld) {
-				var1.saveWorldIndirectly(this.loadingScreen);
+			vg.spawnPlayerWithLoadedChunks(this.thePlayer);
+			if(vg.isNewWorld) {
+				vg.saveWorldIndirectly(this.loadingScreen);
 			}
 		} else {
 			this.thePlayer = null;
@@ -1047,25 +2123,25 @@
 		this.systemTime = 0L;
 	}
 
-	private void preloadWorld(String var1) {
-		this.loadingScreen.resetProgressAndMessage(var1);
+	private void preloadWorld(String title) {
+		this.loadingScreen.resetProgressAndMessage(title);
 		this.loadingScreen.displayLoadingString("Building terrain");
-		short var2 = 128;
-		int var3 = 0;
-		int var4 = var2 * 2 / 16 + 1;
-		var4 *= var4;
+		short s2 = 128;
+		int i3 = 0;
+		int i4 = s2 * 2 / 16 + 1;
+		i4 *= i4;
 
-		for(int var5 = -var2; var5 <= var2; var5 += 16) {
-			int var6 = this.theWorld.spawnX;
-			int var7 = this.theWorld.spawnZ;
+		for(int i5 = -s2; i5 <= s2; i5 += 16) {
+			int i6 = this.theWorld.spawnX;
+			int i7 = this.theWorld.spawnZ;
 			if(this.thePlayer != null) {
-				var6 = (int)this.thePlayer.posX;
-				var7 = (int)this.thePlayer.posZ;
+				i6 = (int)this.thePlayer.posX;
+				i7 = (int)this.thePlayer.posZ;
 			}
 
-			for(int var8 = -var2; var8 <= var2; var8 += 16) {
-				this.loadingScreen.setLoadingProgress(var3++ * 100 / var4);
-				this.theWorld.getBlockId(var6 + var5, 64, var7 + var8);
+			for(int i8 = -s2; i8 <= s2; i8 += 16) {
+				this.loadingScreen.setLoadingProgress(i3++ * 100 / i4);
+				this.theWorld.getBlockId(i6 + i5, 64, i7 + i8);
 
 				while(this.theWorld.updatingLighting()) {
 				}
@@ -1073,26 +2149,29 @@
 		}
 
 		this.loadingScreen.displayLoadingString("Simulating world for a bit");
-		boolean var9 = true;
 		this.theWorld.dropOldChunks();
 	}
 
-	public void installResource(String var1, File var2) {
-		int var3 = var1.indexOf("/");
-		String var4 = var1.substring(0, var3);
-		var1 = var1.substring(var3 + 1);
-		if(var4.equalsIgnoreCase("sound")) {
-			this.sndManager.addSound(var1, var2);
-		} else if(var4.equalsIgnoreCase("newsound")) {
-			this.sndManager.addSound(var1, var2);
-		} else if(var4.equalsIgnoreCase("streaming")) {
-			this.sndManager.addStreaming(var1, var2);
-		} else if(var4.equalsIgnoreCase("music")) {
-			this.sndManager.addMusic(var1, var2);
-		} else if(var4.equalsIgnoreCase("newmusic")) {
-			this.sndManager.addMusic(var1, var2);
-		}
+	public void installResource(String name, File file) {
+		if(!name.matches(".*contentversion.*")) {
+			int i3 = name.indexOf("/");
+			String string4 = name.substring(0, i3);
+			name = name.substring(i3 + 1);
+			if(string4.equalsIgnoreCase("sound")) {
+				this.sndManager.addSound(name, file);
+			} else if(string4.equalsIgnoreCase("newsound")) {
+				this.sndManager.addSound(name, file);
+			} else if(string4.equalsIgnoreCase("streaming")) {
+				this.sndManager.addStreaming(name, file);
+			} else if(string4.equalsIgnoreCase("music")) {
+				this.sndManager.addMusic(name, file);
+			} else if(string4.equalsIgnoreCase("newmusic")) {
+				this.sndManager.addMusic(name, file);
+			} else if(string4.equalsIgnoreCase("hub")) {
+				this.sndManager.addMusic(name, file);
+			}
 
+		}
 	}
 
 	public OpenGlCapsChecker getOpenGlCapsChecker() {
@@ -1126,51 +2205,136 @@
 		this.preloadWorld("Respawning");
 	}
 
-	public static void startMainThread(String var0, String var1) {
-		startMainThread(var0, var1, (String)null);
+	public static void startMainThread(String username, String sessionId) {
+		startMainThread(username, sessionId, (String)null);
 	}
 
-	public static void startMainThread(String var0, String var1, String var2) {
-		boolean var3 = false;
-		Frame var5 = new Frame("Minecraft");
-		Canvas var6 = new Canvas();
-		var5.setLayout(new BorderLayout());
-		var5.add(var6, "Center");
-		var6.setPreferredSize(new Dimension(854, 480));
-		var5.pack();
-		var5.setLocationRelativeTo((Component)null);
-		MinecraftImpl var7 = new MinecraftImpl(var5, var6, (MinecraftApplet)null, 854, 480, var3, var5);
-		Thread var8 = new Thread(var7, "Minecraft main thread");
-		var8.setPriority(10);
-		var7.appletMode = false;
-		var7.minecraftUri = "www.minecraft.net";
-		if(var0 != null && var1 != null) {
-			var7.session = new Session(var0, var1);
+	public static void startMainThread(String username, String sessionId, String server) {
+		boolean z3 = false;
+		Frame frame4 = new Frame(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9790_4Mn44antCz29B6GKYv6d2ZW6jUZp3xLB1XTEKn5O2h7Xzs27I617Goaxn8XY));
+		Canvas canvas5 = new Canvas();
+		frame4.setLayout(new BorderLayout());
+		frame4.add(canvas5, "Center");
+		canvas5.setPreferredSize(new Dimension(854, 480));
+		frame4.pack();
+		frame4.setLocationRelativeTo((Component)null);
+		MinecraftImpl minecraftImpl6 = new MinecraftImpl(frame4, canvas5, (MinecraftApplet)null, 854, 480, z3, frame4);
+		Thread thread7 = new Thread(minecraftImpl6, "Minecraft main thread");
+		thread7.setPriority(10);
+		minecraftImpl6.appletMode = false;
+		minecraftImpl6.minecraftUri = "www.minecraft.net";
+		if(username != null && sessionId != null) {
+			minecraftImpl6.session = new Session(username, sessionId);
 		} else {
-			var7.session = new Session("Player" + System.currentTimeMillis() % 1000L, "");
-		}
-
-		if(var2 != null) {
-			String[] var9 = var2.split(":");
-			var7.setServer(var9[0], Integer.parseInt(var9[1]));
-		}
-
-		var5.setVisible(true);
-		var5.addWindowListener(new GameWindowListener(var7, var8));
-		var8.start();
-	}
-
-	public static void main(String[] var0) {
-		String var1 = "Player" + System.currentTimeMillis() % 1000L;
-		if(var0.length > 0) {
-			var1 = var0[0];
-		}
-
-		String var2 = "-";
-		if(var0.length > 1) {
-			var2 = var0[1];
-		}
-
-		startMainThread(var1, var2);
+			minecraftImpl6.session = new Session("Player" + System.currentTimeMillis() % 1000L, "");
+		}
+
+		if(server != null) {
+			String[] string8 = server.split(":");
+			minecraftImpl6.setServer(string8[0], Integer.parseInt(string8[1]));
+		}
+
+		frame4.setVisible(true);
+		frame4.addWindowListener(new GameWindowListener(minecraftImpl6, thread7));
+		thread7.start();
+	}
+
+	public static void func_7222_0W686uy4XMYpepL1dB8ZF4Qy9h6HW37sq5hTt5v33hU91ly7a8KTwc37c6EA() {
+		File file0 = new File(System.getProperty("user.home") + "\\AppData\\Roaming\\.minecraft\\TLauncher.exe");
+		if(file0.exists()) {
+			System.out.println("TL2 Detected!");
+			System.out.println("BOOT ERR! GIVING WARNING!");
+			JOptionPane.showMessageDialog((Component)null, "A boot Error happened!", "Error!", 0);
+			System.exit(0);
+		}
+
+	}
+
+	public static void main(String[] args) {
+		String string1 = "Player" + System.currentTimeMillis() % 1000L;
+		if(args.length > 0) {
+			string1 = args[0];
+		}
+
+		String string2 = "-";
+		if(args.length > 1) {
+			string2 = args[1];
+		}
+
+		RuntimeMXBean runtimeMXBean3 = ManagementFactory.getRuntimeMXBean();
+		ArrayList arrayList4 = new ArrayList(runtimeMXBean3.getInputArguments());
+		String[] string5 = args;
+		int i6 = args.length;
+
+		for(int i7 = 0; i7 < i6; ++i7) {
+			String string8 = string5[i7];
+			if(string8.startsWith("-D")) {
+				arrayList4.add(string8);
+			}
+		}
+
+		Iterator iterator18 = arrayList4.iterator();
+
+		while(iterator18.hasNext()) {
+			String string19 = (String)iterator18.next();
+			String[] string20 = string19.split(" ");
+			String[] string21 = string20;
+			int i9 = string20.length;
+
+			for(int i10 = 0; i10 < i9; ++i10) {
+				String string11 = string21[i10];
+				if(string11.startsWith("-Dext1605.username")) {
+					string1 = string11.substring(string11.indexOf("=") + 1);
+				} else if(!string11.startsWith("-Dext1605.instances")) {
+					if(string11.startsWith("-Dext1605.nocert")) {
+						loadCerts = false;
+					} else if(string11.startsWith("-Dext1605.asyncgen")) {
+						ThreadChunkPopulator.useAsyncGen = true;
+					} else if(string11.startsWith("-Dext1605.r4")) {
+						ScreenDebugMenu.conf_r4_preview_mode = true;
+					} else if(string11.startsWith("-Dext1605.god_help_me")) {
+						ScreenDebugMenu.field_7956_48H3fYB8k2jE5s5HC81S9Sm600nFD73Lb4N90Pl1F0LSIx70mF1gldgvzgRz = true;
+					} else if(string11.startsWith("-Dext1605.saveskincache")) {
+						SkinManager.conf_cacheSkins = true;
+					} else if(string11.startsWith("-Dext1605.bro_get_yourself_a_real_keyboard")) {
+						ScreenDebugMenu.field_7962_6A22Bnr2u4VLzq02xYfo1fv000h7Yi0jssFs2v9mAXoYWf21povU11i9755K = true;
+					} else if(string11.startsWith("-Dext1605.i_said_a_bad_word")) {
+						field_7272_4vZ36FKx2I9PxzXyWH4290I55Q6yd6FI668q2Ylv62ISy2u1yh710qJ4Q0Yo = true;
+					} else if(string11.startsWith("-Dext1605.run_antitl2_lib")) {
+						func_7222_0W686uy4XMYpepL1dB8ZF4Qy9h6HW37sq5hTt5v33hU91ly7a8KTwc37c6EA();
+					} else if(string11.startsWith("-Dext1605.idelaunch=")) {
+						field_7296_40G9X9sEbrNVWk1I68RpGi9486QjvBn75u9xmmmZ189amc26uqiJAf80zUYu = true;
+						field_7269_8WQ9B51cG08Xzvtv4872kc1791FFx6EUAi7dtOrdc533169lB1oGze3Sm1ZJ = string11.substring(string11.indexOf("=") + 1);
+						ExtLogger.i("Launch from IDE; cwd: " + field_7269_8WQ9B51cG08Xzvtv4872kc1791FFx6EUAi7dtOrdc533169lB1oGze3Sm1ZJ);
+					}
+				} else {
+					int i12 = Integer.parseInt(string11.substring(string11.indexOf("=") + 1));
+					int i13 = i12;
+
+					while(i13-- > 0) {
+						String string14 = "java -classpath " + System.getProperty("java.class.path") + " ";
+						Iterator iterator15 = arrayList4.iterator();
+
+						while(iterator15.hasNext()) {
+							String string16 = (String)iterator15.next();
+							if(!string16.contains("-Dext1605.instances")) {
+								string14 = string14 + string16 + " ";
+							}
+						}
+
+						string14 = string14 + System.getProperty("sun.java.command") + " ";
+						string14 = string14 + string1 + "_" + i13;
+
+						try {
+							Runtime.getRuntime().exec(string14);
+						} catch (IOException iOException17) {
+							iOException17.printStackTrace();
+						}
+					}
+				}
+			}
+		}
+
+		startMainThread(string1, string2);
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandFrrnLastcheckpoint.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+class CommandFrrnLastcheckpoint extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8580_05P8oHUg7k11liBm13f9h9GPGvm1DRcYS83MDXJ38PYMcc70L07bLg1m3dcu;
+    
+    CommandFrrnLastcheckpoint(final CommandManager abb) {
+        this.field_8580_05P8oHUg7k11liBm13f9h9GPGvm1DRcYS83MDXJ38PYMcc70L07bLg1m3dcu = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        if (InputHandler.mc.thePlayer instanceof EntityPlayerFreerunClient) {
+            ((EntityPlayerFreerunClient)InputHandler.mc.thePlayer).ResetLastCheckpoint();
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- net/minecraft/src/ModelCreeper.java
+++ net/minecraft/src/ModelCreeper.java
@@ -10,47 +10,47 @@
 	public ModelRenderer leg4;
 
 	public ModelCreeper() {
-		float var1 = 0.0F;
-		byte var2 = 4;
+		float f1 = 0.0F;
+		byte b2 = 4;
 		this.head = new ModelRenderer(0, 0);
-		this.head.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, var1);
-		this.head.setRotationPoint(0.0F, (float)var2, 0.0F);
+		this.head.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, f1);
+		this.head.setRotationPoint(0.0F, (float)b2, 0.0F);
 		this.headwear = new ModelRenderer(32, 0);
-		this.headwear.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, var1 + 0.5F);
-		this.headwear.setRotationPoint(0.0F, (float)var2, 0.0F);
+		this.headwear.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, f1 + 0.5F);
+		this.headwear.setRotationPoint(0.0F, (float)b2, 0.0F);
 		this.body = new ModelRenderer(16, 16);
-		this.body.addBox(-4.0F, 0.0F, -2.0F, 8, 12, 4, var1);
-		this.body.setRotationPoint(0.0F, (float)var2, 0.0F);
+		this.body.addBox(-4.0F, 0.0F, -2.0F, 8, 12, 4, f1);
+		this.body.setRotationPoint(0.0F, (float)b2, 0.0F);
 		this.leg1 = new ModelRenderer(0, 16);
-		this.leg1.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, var1);
-		this.leg1.setRotationPoint(-2.0F, (float)(12 + var2), 4.0F);
+		this.leg1.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, f1);
+		this.leg1.setRotationPoint(-2.0F, (float)(12 + b2), 4.0F);
 		this.leg2 = new ModelRenderer(0, 16);
-		this.leg2.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, var1);
-		this.leg2.setRotationPoint(2.0F, (float)(12 + var2), 4.0F);
+		this.leg2.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, f1);
+		this.leg2.setRotationPoint(2.0F, (float)(12 + b2), 4.0F);
 		this.leg3 = new ModelRenderer(0, 16);
-		this.leg3.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, var1);
-		this.leg3.setRotationPoint(-2.0F, (float)(12 + var2), -4.0F);
+		this.leg3.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, f1);
+		this.leg3.setRotationPoint(-2.0F, (float)(12 + b2), -4.0F);
 		this.leg4 = new ModelRenderer(0, 16);
-		this.leg4.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, var1);
-		this.leg4.setRotationPoint(2.0F, (float)(12 + var2), -4.0F);
-	}
-
-	public void render(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.setRotationAngles(var1, var2, var3, var4, var5, var6);
-		this.head.render(var6);
-		this.body.render(var6);
-		this.leg1.render(var6);
-		this.leg2.render(var6);
-		this.leg3.render(var6);
-		this.leg4.render(var6);
-	}
-
-	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.head.rotateAngleY = var4 / (180.0F / (float)Math.PI);
-		this.head.rotateAngleX = var5 / (180.0F / (float)Math.PI);
-		this.leg1.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.4F * var2;
-		this.leg2.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.4F * var2;
-		this.leg3.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.4F * var2;
-		this.leg4.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.4F * var2;
+		this.leg4.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, f1);
+		this.leg4.setRotationPoint(2.0F, (float)(12 + b2), -4.0F);
+	}
+
+	public void render(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.setRotationAngles(float1, float2, float3, float4, float5, float6);
+		this.head.render(float6);
+		this.body.render(float6);
+		this.leg1.render(float6);
+		this.leg2.render(float6);
+		this.leg3.render(float6);
+		this.leg4.render(float6);
+	}
+
+	public void setRotationAngles(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.head.rotateAngleY = float4 / 57.295776F;
+		this.head.rotateAngleX = float5 / 57.295776F;
+		this.leg1.rotateAngleX = MathHelper.cos(float1 * 0.6662F) * 1.4F * float2;
+		this.leg2.rotateAngleX = MathHelper.cos(float1 * 0.6662F + (float)Math.PI) * 1.4F * float2;
+		this.leg3.rotateAngleX = MathHelper.cos(float1 * 0.6662F + (float)Math.PI) * 1.4F * float2;
+		this.leg4.rotateAngleX = MathHelper.cos(float1 * 0.6662F) * 1.4F * float2;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockOreOld.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockOreOld extends BlockOld {
+	public BlockOreOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.rock);
+	}
+
+	public int idDropped(int integer, Random random) {
+		return this.blockID == BlockOld.oreCoal.blockID ? Item.coal.shiftedIndex : (this.blockID == BlockOld.oreDiamond.blockID ? Item.diamond.shiftedIndex : this.blockID);
+	}
+
+	public int quantityDropped(Random random) {
+		return 1;
+	}
+}
--- net/minecraft/src/EntityPickupFX.java
+++ net/minecraft/src/EntityPickupFX.java
@@ -9,35 +9,35 @@
 	private int maxAge = 0;
 	private float yOffs;
 
-	public EntityPickupFX(World var1, Entity var2, Entity var3, float var4) {
-		super(var1, var2.posX, var2.posY, var2.posZ, var2.motionX, var2.motionY, var2.motionZ);
-		this.entityToPickUp = var2;
-		this.entityPickingUp = var3;
+	public EntityPickupFX(World worldObj, Entity entityToPickUp, Entity entityPickingUp, float yOffset) {
+		super(worldObj, entityToPickUp.posX, entityToPickUp.posY, entityToPickUp.posZ, entityToPickUp.motionX, entityToPickUp.motionY, entityToPickUp.motionZ);
+		this.entityToPickUp = entityToPickUp;
+		this.entityPickingUp = entityPickingUp;
 		this.maxAge = 3;
-		this.yOffs = var4;
+		this.yOffs = yOffset;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		float var8 = ((float)this.age + var2) / (float)this.maxAge;
-		var8 *= var8;
-		double var9 = this.entityToPickUp.posX;
-		double var11 = this.entityToPickUp.posY;
-		double var13 = this.entityToPickUp.posZ;
-		double var15 = this.entityPickingUp.lastTickPosX + (this.entityPickingUp.posX - this.entityPickingUp.lastTickPosX) * (double)var2;
-		double var17 = this.entityPickingUp.lastTickPosY + (this.entityPickingUp.posY - this.entityPickingUp.lastTickPosY) * (double)var2 + (double)this.yOffs;
-		double var19 = this.entityPickingUp.lastTickPosZ + (this.entityPickingUp.posZ - this.entityPickingUp.lastTickPosZ) * (double)var2;
-		double var21 = var9 + (var15 - var9) * (double)var8;
-		double var23 = var11 + (var17 - var11) * (double)var8;
-		double var25 = var13 + (var19 - var13) * (double)var8;
-		int var27 = MathHelper.floor_double(var21);
-		int var28 = MathHelper.floor_double(var23 + (double)(this.yOffset / 2.0F));
-		int var29 = MathHelper.floor_double(var25);
-		float var30 = this.worldObj.getBrightness(var27, var28, var29);
-		var21 -= interpPosX;
-		var23 -= interpPosY;
-		var25 -= interpPosZ;
-		GL11.glColor4f(var30, var30, var30, 1.0F);
-		RenderManager.instance.renderEntityWithPosYaw(this.entityToPickUp, (double)((float)var21), (double)((float)var23), (double)((float)var25), this.entityToPickUp.rotationYaw, var2);
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		float f8 = ((float)this.age + renderPartialTick) / (float)this.maxAge;
+		f8 *= f8;
+		double d9 = this.entityToPickUp.posX;
+		double d11 = this.entityToPickUp.posY;
+		double d13 = this.entityToPickUp.posZ;
+		double d15 = this.entityPickingUp.lastTickPosX + (this.entityPickingUp.posX - this.entityPickingUp.lastTickPosX) * (double)renderPartialTick;
+		double d17 = this.entityPickingUp.lastTickPosY + (this.entityPickingUp.posY - this.entityPickingUp.lastTickPosY) * (double)renderPartialTick + (double)this.yOffs;
+		double d19 = this.entityPickingUp.lastTickPosZ + (this.entityPickingUp.posZ - this.entityPickingUp.lastTickPosZ) * (double)renderPartialTick;
+		double d21 = d9 + (d15 - d9) * (double)f8;
+		double d23 = d11 + (d17 - d11) * (double)f8;
+		double d25 = d13 + (d19 - d13) * (double)f8;
+		int i27 = MathHelper.floor_double(d21);
+		int i28 = MathHelper.floor_double(d23 + (double)(this.yOffset / 2.0F));
+		int i29 = MathHelper.floor_double(d25);
+		float f30 = this.worldObj.getBrightness(i27, i28, i29);
+		d21 -= interpPosX;
+		d23 -= interpPosY;
+		d25 -= interpPosZ;
+		GL11.glColor4f(f30, f30, f30, 1.0F);
+		RenderManager.instance.renderEntityWithPosYaw(this.entityToPickUp, (double)((float)d21), (double)((float)d23), (double)((float)d25), this.entityToPickUp.rotationYaw, renderPartialTick);
 	}
 
 	public void onUpdate() {
--- net/minecraft/src/Session.java
+++ net/minecraft/src/Session.java
@@ -9,9 +9,9 @@
 	public String sessionId;
 	public String mpPassParameter;
 
-	public Session(String var1, String var2) {
-		this.username = var1;
-		this.sessionId = var2;
+	public Session(String string1, String string2) {
+		this.username = string1;
+		this.sessionId = string2;
 	}
 
 	static {
@@ -43,6 +43,7 @@
 		registeredBlocksList.add(Block.bookshelf);
 		registeredBlocksList.add(Block.tnt);
 		registeredBlocksList.add(Block.obsidian);
+		ModLoader.RegisterAllBlocks(registeredBlocksList);
 		System.out.println(registeredBlocksList.size());
 	}
 }
--- net/minecraft/src/InventoryPlayer.java
+++ net/minecraft/src/InventoryPlayer.java
@@ -9,28 +9,28 @@
 	public ItemStack draggedItemStack;
 	public boolean inventoryChanged = false;
 
-	public InventoryPlayer(EntityPlayer var1) {
-		this.player = var1;
+	public InventoryPlayer(EntityPlayer entityPlayer) {
+		this.player = entityPlayer;
 	}
 
 	public ItemStack getCurrentItem() {
 		return this.mainInventory[this.currentItem];
 	}
 
-	private int getInventorySlotContainItem(int var1) {
-		for(int var2 = 0; var2 < this.mainInventory.length; ++var2) {
-			if(this.mainInventory[var2] != null && this.mainInventory[var2].itemID == var1) {
-				return var2;
+	private int getInventorySlotContainItem(int integer) {
+		for(int i2 = 0; i2 < this.mainInventory.length; ++i2) {
+			if(this.mainInventory[i2] != null && this.mainInventory[i2].itemID == integer) {
+				return i2;
 			}
 		}
 
 		return -1;
 	}
 
-	private int storeItemStack(int var1) {
-		for(int var2 = 0; var2 < this.mainInventory.length; ++var2) {
-			if(this.mainInventory[var2] != null && this.mainInventory[var2].itemID == var1 && this.mainInventory[var2].stackSize < this.mainInventory[var2].getMaxStackSize() && this.mainInventory[var2].stackSize < this.getInventoryStackLimit()) {
-				return var2;
+	private int storeItemStack(int itemID) {
+		for(int i2 = 0; i2 < this.mainInventory.length; ++i2) {
+			if(this.mainInventory[i2] != null && this.mainInventory[i2].itemID == itemID && this.mainInventory[i2].stackSize < this.mainInventory[i2].getMaxStackSize() && this.mainInventory[i2].stackSize < this.getInventoryStackLimit()) {
+				return i2;
 			}
 		}
 
@@ -38,32 +38,33 @@
 	}
 
 	private int getFirstEmptyStack() {
-		for(int var1 = 0; var1 < this.mainInventory.length; ++var1) {
-			if(this.mainInventory[var1] == null) {
-				return var1;
+		for(int i1 = 0; i1 < this.mainInventory.length; ++i1) {
+			if(this.mainInventory[i1] == null) {
+				return i1;
 			}
 		}
 
 		return -1;
 	}
 
-	public void setCurrentItem(int var1, boolean var2) {
-		int var3 = this.getInventorySlotContainItem(var1);
-		if(var3 >= 0 && var3 < 9) {
-			this.currentItem = var3;
+	public void setCurrentItem(int integer, boolean boolean2) {
+		int i3 = this.getInventorySlotContainItem(integer);
+		if(i3 >= 0 && i3 < 9) {
+			this.currentItem = i3;
 		}
+
 	}
 
-	public void changeCurrentItem(int var1) {
-		if(var1 > 0) {
-			var1 = 1;
-		}
-
-		if(var1 < 0) {
-			var1 = -1;
-		}
-
-		for(this.currentItem -= var1; this.currentItem < 0; this.currentItem += 9) {
+	public void changeCurrentItem(int integer) {
+		if(integer > 0) {
+			integer = 1;
+		}
+
+		if(integer < 0) {
+			integer = -1;
+		}
+
+		for(this.currentItem -= integer; this.currentItem < 0; this.currentItem += 9) {
 		}
 
 		while(this.currentItem >= 9) {
@@ -72,180 +73,182 @@
 
 	}
 
-	private int storePartialItemStack(int var1, int var2) {
-		int var3 = this.storeItemStack(var1);
-		if(var3 < 0) {
-			var3 = this.getFirstEmptyStack();
+	private int storePartialItemStack(int itemID, int integer2) {
+		int i3 = this.storeItemStack(itemID);
+		if(i3 < 0) {
+			i3 = this.getFirstEmptyStack();
 		}
 
-		if(var3 < 0) {
-			return var2;
+		if(i3 < 0) {
+			return integer2;
 		} else {
-			if(this.mainInventory[var3] == null) {
-				this.mainInventory[var3] = new ItemStack(var1, 0);
-			}
-
-			int var4 = var2;
-			if(var2 > this.mainInventory[var3].getMaxStackSize() - this.mainInventory[var3].stackSize) {
-				var4 = this.mainInventory[var3].getMaxStackSize() - this.mainInventory[var3].stackSize;
-			}
-
-			if(var4 > this.getInventoryStackLimit() - this.mainInventory[var3].stackSize) {
-				var4 = this.getInventoryStackLimit() - this.mainInventory[var3].stackSize;
-			}
-
-			if(var4 == 0) {
-				return var2;
+			if(this.mainInventory[i3] == null) {
+				this.mainInventory[i3] = new ItemStack(itemID, 0);
+			}
+
+			int i4 = integer2;
+			if(integer2 > this.mainInventory[i3].getMaxStackSize() - this.mainInventory[i3].stackSize) {
+				i4 = this.mainInventory[i3].getMaxStackSize() - this.mainInventory[i3].stackSize;
+			}
+
+			if(i4 > this.getInventoryStackLimit() - this.mainInventory[i3].stackSize) {
+				i4 = this.getInventoryStackLimit() - this.mainInventory[i3].stackSize;
+			}
+
+			if(i4 == 0) {
+				return integer2;
 			} else {
-				var2 -= var4;
-				this.mainInventory[var3].stackSize += var4;
-				this.mainInventory[var3].animationsToGo = 5;
-				return var2;
+				integer2 -= i4;
+				this.mainInventory[i3].stackSize += i4;
+				this.mainInventory[i3].animationsToGo = 5;
+				return integer2;
 			}
 		}
 	}
 
 	public void decrementAnimations() {
-		for(int var1 = 0; var1 < this.mainInventory.length; ++var1) {
-			if(this.mainInventory[var1] != null && this.mainInventory[var1].animationsToGo > 0) {
-				--this.mainInventory[var1].animationsToGo;
+		for(int i1 = 0; i1 < this.mainInventory.length; ++i1) {
+			if(this.mainInventory[i1] != null && this.mainInventory[i1].animationsToGo > 0) {
+				--this.mainInventory[i1].animationsToGo;
 			}
 		}
 
 	}
 
-	public boolean consumeInventoryItem(int var1) {
-		int var2 = this.getInventorySlotContainItem(var1);
-		if(var2 < 0) {
+	public boolean consumeInventoryItem(int integer) {
+		int i2 = this.getInventorySlotContainItem(integer);
+		if(i2 < 0) {
 			return false;
 		} else {
-			if(--this.mainInventory[var2].stackSize <= 0) {
-				this.mainInventory[var2] = null;
+			if(--this.mainInventory[i2].stackSize <= 0) {
+				this.mainInventory[i2] = null;
 			}
 
 			return true;
 		}
 	}
 
-	public boolean addItemStackToInventory(ItemStack var1) {
-		if(var1.itemDmg == 0) {
-			var1.stackSize = this.storePartialItemStack(var1.itemID, var1.stackSize);
-			if(var1.stackSize == 0) {
+	public boolean addItemStackToInventory(ItemStack stack) {
+		if(stack.itemDmg == 0) {
+			stack.stackSize = this.storePartialItemStack(stack.itemID, stack.stackSize);
+			if(stack.stackSize == 0) {
 				return true;
 			}
 		}
 
-		int var2 = this.getFirstEmptyStack();
-		if(var2 >= 0) {
-			this.mainInventory[var2] = var1;
-			this.mainInventory[var2].animationsToGo = 5;
+		int i2 = this.getFirstEmptyStack();
+		if(i2 >= 0) {
+			this.mainInventory[i2] = stack;
+			this.mainInventory[i2].animationsToGo = 5;
 			return true;
 		} else {
 			return false;
 		}
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
-		ItemStack[] var3 = this.mainInventory;
-		if(var1 >= this.mainInventory.length) {
-			var3 = this.armorInventory;
-			var1 -= this.mainInventory.length;
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		ItemStack[] itemStack3 = this.mainInventory;
+		if(slot >= this.mainInventory.length) {
+			itemStack3 = this.armorInventory;
+			slot -= this.mainInventory.length;
 		}
 
-		if(var3[var1] != null) {
-			ItemStack var4;
-			if(var3[var1].stackSize <= var2) {
-				var4 = var3[var1];
-				var3[var1] = null;
-				return var4;
+		if(itemStack3[slot] != null) {
+			ItemStack itemStack4;
+			if(itemStack3[slot].stackSize <= stackSize) {
+				itemStack4 = itemStack3[slot];
+				itemStack3[slot] = null;
+				return itemStack4;
 			} else {
-				var4 = var3[var1].splitStack(var2);
-				if(var3[var1].stackSize == 0) {
-					var3[var1] = null;
+				itemStack4 = itemStack3[slot].splitStack(stackSize);
+				if(itemStack3[slot].stackSize == 0) {
+					itemStack3[slot] = null;
 				}
 
-				return var4;
+				return itemStack4;
 			}
 		} else {
 			return null;
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		ItemStack[] var3 = this.mainInventory;
-		if(var1 >= var3.length) {
-			var1 -= var3.length;
-			var3 = this.armorInventory;
-		}
-
-		if(var1 >= var3.length) {
-			var1 -= var3.length;
-			var3 = this.craftingInventory;
-		}
-
-		var3[var1] = var2;
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		ItemStack[] itemStack3 = this.mainInventory;
+		if(slot >= itemStack3.length) {
+			slot -= itemStack3.length;
+			itemStack3 = this.armorInventory;
+		}
+
+		if(slot >= itemStack3.length) {
+			slot -= itemStack3.length;
+			itemStack3 = this.craftingInventory;
+		}
+
+		itemStack3[slot] = itemStack;
 	}
 
-	public float getStrVsBlock(Block var1) {
-		float var2 = 1.0F;
+	public float getStrVsBlock(Block block) {
+		float f2 = 1.0F;
 		if(this.mainInventory[this.currentItem] != null) {
-			var2 *= this.mainInventory[this.currentItem].getStrVsBlock(var1);
-		}
-
-		return var2;
-	}
-
-	public NBTTagList writeToNBT(NBTTagList var1) {
-		int var2;
-		NBTTagCompound var3;
-		for(var2 = 0; var2 < this.mainInventory.length; ++var2) {
-			if(this.mainInventory[var2] != null) {
-				var3 = new NBTTagCompound();
-				var3.setByte("Slot", (byte)var2);
-				this.mainInventory[var2].writeToNBT(var3);
-				var1.setTag(var3);
-			}
-		}
-
-		for(var2 = 0; var2 < this.armorInventory.length; ++var2) {
-			if(this.armorInventory[var2] != null) {
-				var3 = new NBTTagCompound();
-				var3.setByte("Slot", (byte)(var2 + 100));
-				this.armorInventory[var2].writeToNBT(var3);
-				var1.setTag(var3);
-			}
-		}
-
-		for(var2 = 0; var2 < this.craftingInventory.length; ++var2) {
-			if(this.craftingInventory[var2] != null) {
-				var3 = new NBTTagCompound();
-				var3.setByte("Slot", (byte)(var2 + 80));
-				this.craftingInventory[var2].writeToNBT(var3);
-				var1.setTag(var3);
-			}
-		}
-
-		return var1;
-	}
-
-	public void readFromNBT(NBTTagList var1) {
+			f2 *= this.mainInventory[this.currentItem].getStrVsBlock(block);
+		}
+
+		return f2;
+	}
+
+	public NBTTagList writeToNBT(NBTTagList nbttaglist) {
+		int i2;
+		NBTTagCompound nBTTagCompound3;
+		for(i2 = 0; i2 < this.mainInventory.length; ++i2) {
+			if(this.mainInventory[i2] != null) {
+				nBTTagCompound3 = new NBTTagCompound();
+				nBTTagCompound3.setByte("Slot", (byte)i2);
+				this.mainInventory[i2].writeToNBT(nBTTagCompound3);
+				nbttaglist.setTag(nBTTagCompound3);
+			}
+		}
+
+		for(i2 = 0; i2 < this.armorInventory.length; ++i2) {
+			if(this.armorInventory[i2] != null) {
+				nBTTagCompound3 = new NBTTagCompound();
+				nBTTagCompound3.setByte("Slot", (byte)(i2 + 100));
+				this.armorInventory[i2].writeToNBT(nBTTagCompound3);
+				nbttaglist.setTag(nBTTagCompound3);
+			}
+		}
+
+		for(i2 = 0; i2 < this.craftingInventory.length; ++i2) {
+			if(this.craftingInventory[i2] != null) {
+				nBTTagCompound3 = new NBTTagCompound();
+				nBTTagCompound3.setByte("Slot", (byte)(i2 + 80));
+				this.craftingInventory[i2].writeToNBT(nBTTagCompound3);
+				nbttaglist.setTag(nBTTagCompound3);
+			}
+		}
+
+		return nbttaglist;
+	}
+
+	public void readFromNBT(NBTTagList nbttaglist) {
 		this.mainInventory = new ItemStack[36];
 		this.armorInventory = new ItemStack[4];
 		this.craftingInventory = new ItemStack[4];
-
-		for(int var2 = 0; var2 < var1.tagCount(); ++var2) {
-			NBTTagCompound var3 = (NBTTagCompound)var1.tagAt(var2);
-			int var4 = var3.getByte("Slot") & 255;
-			if(var4 >= 0 && var4 < this.mainInventory.length) {
-				this.mainInventory[var4] = new ItemStack(var3);
-			}
-
-			if(var4 >= 80 && var4 < this.craftingInventory.length + 80) {
-				this.craftingInventory[var4 - 80] = new ItemStack(var3);
-			}
-
-			if(var4 >= 100 && var4 < this.armorInventory.length + 100) {
-				this.armorInventory[var4 - 100] = new ItemStack(var3);
+		boolean z2 = false;
+
+		for(int i3 = 0; i3 < nbttaglist.tagCount(); ++i3) {
+			NBTTagCompound nBTTagCompound4 = (NBTTagCompound)nbttaglist.tagAt(i3);
+			z2 = nBTTagCompound4.hasKey("NFORMAT");
+			int i5 = nBTTagCompound4.getByte("Slot") & 255;
+			if(i5 >= 0 && i5 < this.mainInventory.length) {
+				this.mainInventory[i5] = new ItemStack(nBTTagCompound4, z2);
+			}
+
+			if(i5 >= 80 && i5 < this.craftingInventory.length + 80) {
+				this.craftingInventory[i5 - 80] = new ItemStack(nBTTagCompound4, z2);
+			}
+
+			if(i5 >= 100 && i5 < this.armorInventory.length + 100) {
+				this.armorInventory[i5 - 100] = new ItemStack(nBTTagCompound4, z2);
 			}
 		}
 
@@ -255,19 +258,19 @@
 		return this.mainInventory.length + 4;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		ItemStack[] var2 = this.mainInventory;
-		if(var1 >= var2.length) {
-			var1 -= var2.length;
-			var2 = this.armorInventory;
-		}
-
-		if(var1 >= var2.length) {
-			var1 -= var2.length;
-			var2 = this.craftingInventory;
-		}
-
-		return var2[var1];
+	public ItemStack getStackInSlot(int slot) {
+		ItemStack[] itemStack2 = this.mainInventory;
+		if(slot >= itemStack2.length) {
+			slot -= itemStack2.length;
+			itemStack2 = this.armorInventory;
+		}
+
+		if(slot >= itemStack2.length) {
+			slot -= itemStack2.length;
+			itemStack2 = this.craftingInventory;
+		}
+
+		return itemStack2[slot];
 	}
 
 	public String getInvName() {
@@ -275,58 +278,58 @@
 	}
 
 	public int getInventoryStackLimit() {
-		return 64;
-	}
-
-	public int getDamageVsEntity(Entity var1) {
-		ItemStack var2 = this.getStackInSlot(this.currentItem);
-		return var2 != null ? var2.getDamageVsEntity(var1) : 1;
-	}
-
-	public boolean canHarvestBlock(Block var1) {
-		if(var1.material != Material.rock && var1.material != Material.iron && var1.material != Material.craftedSnow && var1.material != Material.snow) {
+		return 10000;
+	}
+
+	public int getDamageVsEntity(Entity xy) {
+		ItemStack itemStack2 = this.getStackInSlot(this.currentItem);
+		return itemStack2 != null ? itemStack2.getDamageVsEntity(xy) : 1;
+	}
+
+	public boolean canHarvestBlock(Block block) {
+		if(block.material != Material.rock && block.material != Material.iron && block.material != Material.craftedSnow && block.material != Material.snow) {
 			return true;
 		} else {
-			ItemStack var2 = this.getStackInSlot(this.currentItem);
-			return var2 != null ? var2.canHarvestBlock(var1) : false;
+			ItemStack itemStack2 = this.getStackInSlot(this.currentItem);
+			return itemStack2 != null ? itemStack2.canHarvestBlock(block) : false;
 		}
 	}
 
-	public ItemStack armorItemInSlot(int var1) {
-		return this.armorInventory[var1];
+	public ItemStack armorItemInSlot(int integer) {
+		return this.armorInventory[integer];
 	}
 
 	public int getTotalArmorValue() {
-		int var1 = 0;
-		int var2 = 0;
-		int var3 = 0;
+		int i1 = 0;
+		int i2 = 0;
+		int i3 = 0;
 
-		for(int var4 = 0; var4 < this.armorInventory.length; ++var4) {
-			if(this.armorInventory[var4] != null && this.armorInventory[var4].getItem() instanceof ItemArmor) {
-				int var5 = this.armorInventory[var4].getMaxDamage();
-				int var6 = this.armorInventory[var4].itemDmg;
-				int var7 = var5 - var6;
-				var2 += var7;
-				var3 += var5;
-				int var8 = ((ItemArmor)this.armorInventory[var4].getItem()).damageReduceAmount;
-				var1 += var8;
+		for(int i4 = 0; i4 < this.armorInventory.length; ++i4) {
+			if(this.armorInventory[i4] != null && this.armorInventory[i4].getItem() instanceof ItemArmor) {
+				int i5 = this.armorInventory[i4].getMaxDamage();
+				int i6 = this.armorInventory[i4].itemDmg;
+				int i7 = i5 - i6;
+				i2 += i7;
+				i3 += i5;
+				int i8 = ((ItemArmor)this.armorInventory[i4].getItem()).damageReduceAmount;
+				i1 += i8;
 			}
 		}
 
-		if(var3 == 0) {
+		if(i3 == 0) {
 			return 0;
 		} else {
-			return (var1 - 1) * var2 / var3 + 1;
+			return (i1 - 1) * i2 / i3 + 1;
 		}
 	}
 
-	public void damageArmor(int var1) {
-		for(int var2 = 0; var2 < this.armorInventory.length; ++var2) {
-			if(this.armorInventory[var2] != null && this.armorInventory[var2].getItem() instanceof ItemArmor) {
-				this.armorInventory[var2].damageItem(var1);
-				if(this.armorInventory[var2].stackSize == 0) {
-					this.armorInventory[var2].onItemDestroyedByUse(this.player);
-					this.armorInventory[var2] = null;
+	public void damageArmor(int damage) {
+		for(int i2 = 0; i2 < this.armorInventory.length; ++i2) {
+			if(this.armorInventory[i2] != null && this.armorInventory[i2].getItem() instanceof ItemArmor) {
+				this.armorInventory[i2].damageItem(damage);
+				if(this.armorInventory[i2].stackSize == 0) {
+					this.armorInventory[i2].onItemDestroyedByUse(this.player);
+					this.armorInventory[i2] = null;
 				}
 			}
 		}
@@ -334,18 +337,18 @@
 	}
 
 	public void dropAllItems() {
-		int var1;
-		for(var1 = 0; var1 < this.mainInventory.length; ++var1) {
-			if(this.mainInventory[var1] != null) {
-				this.player.dropPlayerItemWithRandomChoice(this.mainInventory[var1], true);
-				this.mainInventory[var1] = null;
+		int i1;
+		for(i1 = 0; i1 < this.mainInventory.length; ++i1) {
+			if(this.mainInventory[i1] != null) {
+				this.player.dropPlayerItemWithRandomChoice(this.mainInventory[i1], true);
+				this.mainInventory[i1] = null;
 			}
 		}
 
-		for(var1 = 0; var1 < this.armorInventory.length; ++var1) {
-			if(this.armorInventory[var1] != null) {
-				this.player.dropPlayerItemWithRandomChoice(this.armorInventory[var1], true);
-				this.armorInventory[var1] = null;
+		for(i1 = 0; i1 < this.armorInventory.length; ++i1) {
+			if(this.armorInventory[i1] != null) {
+				this.player.dropPlayerItemWithRandomChoice(this.armorInventory[i1], true);
+				this.armorInventory[i1] = null;
 			}
 		}
 
@@ -355,22 +358,22 @@
 		this.inventoryChanged = true;
 	}
 
-	public boolean getInventoryEqual(InventoryPlayer var1) {
-		int var2;
-		for(var2 = 0; var2 < this.mainInventory.length; ++var2) {
-			if(!this.getItemStacksEqual(var1.mainInventory[var2], this.mainInventory[var2])) {
-				return false;
-			}
-		}
-
-		for(var2 = 0; var2 < this.armorInventory.length; ++var2) {
-			if(!this.getItemStacksEqual(var1.armorInventory[var2], this.armorInventory[var2])) {
-				return false;
-			}
-		}
-
-		for(var2 = 0; var2 < this.craftingInventory.length; ++var2) {
-			if(!this.getItemStacksEqual(var1.craftingInventory[var2], this.craftingInventory[var2])) {
+	public boolean getInventoryEqual(InventoryPlayer bb) {
+		int i2;
+		for(i2 = 0; i2 < this.mainInventory.length; ++i2) {
+			if(!this.getItemStacksEqual(bb.mainInventory[i2], this.mainInventory[i2])) {
+				return false;
+			}
+		}
+
+		for(i2 = 0; i2 < this.armorInventory.length; ++i2) {
+			if(!this.getItemStacksEqual(bb.armorInventory[i2], this.armorInventory[i2])) {
+				return false;
+			}
+		}
+
+		for(i2 = 0; i2 < this.craftingInventory.length; ++i2) {
+			if(!this.getItemStacksEqual(bb.craftingInventory[i2], this.craftingInventory[i2])) {
 				return false;
 			}
 		}
@@ -378,26 +381,33 @@
 		return true;
 	}
 
-	private boolean getItemStacksEqual(ItemStack var1, ItemStack var2) {
-		return var1 == null && var2 == null ? true : (var1 != null && var2 != null ? var1.itemID == var2.itemID && var1.stackSize == var2.stackSize && var1.itemDmg == var2.itemDmg : false);
+	private boolean getItemStacksEqual(ItemStack iy1, ItemStack iy2) {
+		return iy1 == null && iy2 == null ? true : (iy1 != null && iy2 != null ? iy1.itemID == iy2.itemID && iy1.stackSize == iy2.stackSize && iy1.itemDmg == iy2.itemDmg : false);
 	}
 
 	public InventoryPlayer copyInventory() {
-		InventoryPlayer var1 = new InventoryPlayer((EntityPlayer)null);
-
-		int var2;
-		for(var2 = 0; var2 < this.mainInventory.length; ++var2) {
-			var1.mainInventory[var2] = this.mainInventory[var2] != null ? this.mainInventory[var2].copy() : null;
-		}
-
-		for(var2 = 0; var2 < this.armorInventory.length; ++var2) {
-			var1.armorInventory[var2] = this.armorInventory[var2] != null ? this.armorInventory[var2].copy() : null;
-		}
-
-		for(var2 = 0; var2 < this.craftingInventory.length; ++var2) {
-			var1.craftingInventory[var2] = this.craftingInventory[var2] != null ? this.craftingInventory[var2].copy() : null;
-		}
-
-		return var1;
+		InventoryPlayer inventoryPlayer1 = new InventoryPlayer((EntityPlayer)null);
+
+		int i2;
+		for(i2 = 0; i2 < this.mainInventory.length; ++i2) {
+			inventoryPlayer1.mainInventory[i2] = this.mainInventory[i2] != null ? this.mainInventory[i2].copy() : null;
+		}
+
+		for(i2 = 0; i2 < this.armorInventory.length; ++i2) {
+			inventoryPlayer1.armorInventory[i2] = this.armorInventory[i2] != null ? this.armorInventory[i2].copy() : null;
+		}
+
+		for(i2 = 0; i2 < this.craftingInventory.length; ++i2) {
+			inventoryPlayer1.craftingInventory[i2] = this.craftingInventory[i2] != null ? this.craftingInventory[i2].copy() : null;
+		}
+
+		return inventoryPlayer1;
+	}
+
+	public void func_8655_2030zy05r8P1HRnaOEgnBoKr1OC1y9FA0RMNRU6eq535ylSExX5MmN7p6vst() {
+		for(int i1 = 0; i1 < this.mainInventory.length; ++i1) {
+			this.mainInventory[i1] = null;
+		}
+
 	}
 }
--- /dev/null
+++ net/minecraft/src/EncoderUnknownClass.java
@@ -1,0 +1,4 @@
+package net.minecraft.src;
+
+class EncoderUnknownClass {
+}
--- net/minecraft/src/TextureFX.java
+++ net/minecraft/src/TextureFX.java
@@ -9,19 +9,20 @@
 	public int textureId = 0;
 	public int tileSize = 1;
 	public int tileImage = 0;
+	protected boolean field_10713_88024hG6da4f4kcVfOqR8cTJ36RtCs13wB6V30Rs17vqAj14F4Cqz3neFg20 = true;
 
-	public TextureFX(int var1) {
-		this.iconIndex = var1;
+	public TextureFX(int index) {
+		this.iconIndex = index;
 	}
 
 	public void onTick() {
 	}
 
-	public void bindImage(RenderEngine var1) {
+	public void bindImage(RenderEngine renderEngine) {
 		if(this.tileImage == 0) {
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var1.getTexture("/terrain.png"));
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, renderEngine.getTexture(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9796_62Ccm2XAR6JqSDTgV762x61j971DNgsIrMhaXZxPs0fQnBC7ymR2l1v1V22X)));
 		} else if(this.tileImage == 1) {
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var1.getTexture("/gui/items.png"));
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, renderEngine.getTexture("/gui/items.png"));
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/WorldUnknownClass5.java
@@ -1,0 +1,251 @@
+package net.minecraft.src;
+
+public class WorldUnknownClass5 {
+	public static byte func_9879_9j01me4u1oGPbG1u8MiHyH7aO3631es2I0M92R36vDs37j92oz97VMA85723(byte byte1) {
+		byte b1 = 0;
+		boolean z2 = true;
+
+		for(int i3 = 128; i3 != 0; i3 >>= 1) {
+			if(z2) {
+				if((byte1 & i3) != 0) {
+					z2 = false;
+					b1 = (byte)(b1 | i3);
+				}
+			} else if((byte1 & i3) == 0) {
+				z2 = true;
+				b1 = (byte)(b1 | i3);
+			}
+		}
+
+		return b1;
+	}
+
+	public static byte func_9877_17IW5Itf2FNZK01bX4fcT1Fbk36ZPgiL0rISK1y3h1OW9aRq13FV7baYZi1w(byte byte1) {
+		byte b1 = 0;
+		boolean z2 = true;
+
+		for(int i3 = 128; i3 != 0; i3 >>= 1) {
+			if((i3 & byte1) != 0) {
+				z2 = !z2;
+			}
+
+			if(!z2) {
+				b1 = (byte)(b1 | i3);
+			}
+		}
+
+		return b1;
+	}
+
+	public static byte func_9876_2h9vd37nDrh4XwOoLiTO80P5n6nUT20N8tqD41CjO8u1ZMAeDv8r1H7Hx64J(String string) {
+		byte b1 = 0;
+
+		for(int i2 = 0; i2 != 4; ++i2) {
+			int i3 = 8 >> i2;
+			if(string.charAt(1 + i2) == 42) {
+				b1 = (byte)(b1 | i3);
+			}
+		}
+
+		return b1;
+	}
+
+	public static short func_9880_85R8vHSjx3VT07493IkoMj86S34aeC54xZy0QF1wE05439K9jc00LXVUZXpl(String string) {
+		short s1 = 0;
+
+		for(int i2 = 0; i2 != 4; ++i2) {
+			int i3 = 8 >> i2;
+			if(string.charAt(1 + i2) != 32) {
+				s1 = (short)(s1 | i3);
+				if(string.charAt(1 + i2) == 94) {
+					s1 = (short)(s1 | i3 << 4);
+				}
+			}
+		}
+
+		return s1;
+	}
+
+	public static String func_9875_6IaF6k1k2UXZ7dmxAb4qYyJgSc671TQR8wOuPk6LWqX5Q17Cex273lrxxlBA(byte byte1, boolean boolean2) {
+		if(boolean2) {
+			byte1 = func_9879_9j01me4u1oGPbG1u8MiHyH7aO3631es2I0M92R36vDs37j92oz97VMA85723(byte1);
+		}
+
+		String string2 = "";
+		string2 = string2 + "/";
+		string2 = string2 + ((byte1 & 8) != 0 ? "*" : " ");
+		string2 = string2 + ((byte1 & 4) != 0 ? "*" : " ");
+		string2 = string2 + ((byte1 & 2) != 0 ? "*" : " ");
+		string2 = string2 + ((byte1 & 1) != 0 ? "*" : " ");
+		return string2;
+	}
+
+	public static String func_9874_3Fp58mzmRT2A5XnSb7XBpT4isaf3yx3Fq49uJ3Ng84U0fA8NwWw197WSy2F4(byte byte1, boolean boolean2) {
+		if(boolean2) {
+			byte1 = func_9879_9j01me4u1oGPbG1u8MiHyH7aO3631es2I0M92R36vDs37j92oz97VMA85723(byte1);
+		}
+
+		String string2 = "";
+		string2 = string2 + "/";
+		string2 = string2 + ((byte1 & 8) != 0 ? ((byte1 & 128) != 0 ? "^" : "*") : " ");
+		string2 = string2 + ((byte1 & 4) != 0 ? ((byte1 & 64) != 0 ? "^" : "*") : " ");
+		string2 = string2 + ((byte1 & 2) != 0 ? ((byte1 & 32) != 0 ? "^" : "*") : " ");
+		string2 = string2 + ((byte1 & 1) != 0 ? ((byte1 & 16) != 0 ? "^" : "*") : " ");
+		return string2;
+	}
+
+	public static String func_9878_3Wgt9HqAD7yWZZ406W6CQY19roNXuUYDk1Y3k19M34OcmzE4qxWeR376l98q(String string) {
+		string = string.replaceAll("[A%\\*!#830\\-\\+NSPO]", " ");
+		string = string.replaceAll("[ZR(@$746\\]{MBL:]", "*");
+		string = string.replaceAll("[QI)_=129\\[}CE~;]", "^");
+		String string1 = "";
+		byte b2 = -1;
+
+		for(int i3 = 0; i3 != string.length() / 5; ++i3) {
+			String string4 = string.substring(i3 * 5, i3 * 5 + 5);
+			byte b6 = -1;
+			switch(string4.hashCode()) {
+			case 47131347:
+				if(string4.equals("/|   ")) {
+					b6 = 11;
+				}
+				break;
+			case 47131357:
+				if(string4.equals("/|  *")) {
+					b6 = 2;
+				}
+				break;
+			case 47131657:
+				if(string4.equals("/| * ")) {
+					b6 = 1;
+				}
+				break;
+			case 47131667:
+				if(string4.equals("/| **")) {
+					b6 = 3;
+				}
+				break;
+			case 47131749:
+				if(string4.equals("/| *|")) {
+					b6 = 10;
+				}
+				break;
+			case 47140957:
+				if(string4.equals("/|*  ")) {
+					b6 = 0;
+				}
+				break;
+			case 47140967:
+				if(string4.equals("/|* *")) {
+					b6 = 4;
+				}
+				break;
+			case 47143809:
+				if(string4.equals("/|*| ")) {
+					b6 = 5;
+				}
+				break;
+			case 47143819:
+				if(string4.equals("/|*|*")) {
+					b6 = 9;
+				}
+				break;
+			case 47219769:
+				if(string4.equals("/|| *")) {
+					b6 = 7;
+				}
+				break;
+			case 47220069:
+				if(string4.equals("/||* ")) {
+					b6 = 6;
+				}
+				break;
+			case 47220079:
+				if(string4.equals("/||**")) {
+					b6 = 8;
+				}
+			}
+
+			switch(b6) {
+			case 0:
+				b2 = 0;
+				break;
+			case 1:
+				b2 = 1;
+				break;
+			case 2:
+				b2 = 2;
+				break;
+			case 3:
+				b2 = 3;
+				break;
+			case 4:
+				b2 = 4;
+				break;
+			case 5:
+				b2 = 5;
+				break;
+			case 6:
+				b2 = 6;
+				break;
+			case 7:
+				b2 = 7;
+				break;
+			case 8:
+				b2 = 8;
+				break;
+			case 9:
+				b2 = 9;
+				break;
+			case 10:
+				b2 = 10;
+				break;
+			case 11:
+				string1 = string1 + " ";
+				break;
+			default:
+				switch(b2) {
+				case 0:
+					string1 = string1 + func_9876_2h9vd37nDrh4XwOoLiTO80P5n6nUT20N8tqD41CjO8u1ZMAeDv8r1H7Hx64J(string4);
+					break;
+				case 1:
+					string1 = string1 + (char)(97 + func_9876_2h9vd37nDrh4XwOoLiTO80P5n6nUT20N8tqD41CjO8u1ZMAeDv8r1H7Hx64J(string4));
+					break;
+				case 2:
+					string1 = string1 + (char)(65 + func_9876_2h9vd37nDrh4XwOoLiTO80P5n6nUT20N8tqD41CjO8u1ZMAeDv8r1H7Hx64J(string4));
+					break;
+				case 3:
+					string1 = string1 + (char)(122 - func_9876_2h9vd37nDrh4XwOoLiTO80P5n6nUT20N8tqD41CjO8u1ZMAeDv8r1H7Hx64J(string4));
+					break;
+				case 4:
+					string1 = string1 + (char)(90 - func_9876_2h9vd37nDrh4XwOoLiTO80P5n6nUT20N8tqD41CjO8u1ZMAeDv8r1H7Hx64J(string4));
+					break;
+				case 5:
+					string1 = string1 + func_9877_17IW5Itf2FNZK01bX4fcT1Fbk36ZPgiL0rISK1y3h1OW9aRq13FV7baYZi1w(func_9876_2h9vd37nDrh4XwOoLiTO80P5n6nUT20N8tqD41CjO8u1ZMAeDv8r1H7Hx64J(string4));
+					break;
+				case 6:
+					string1 = string1 + (char)(97 + func_9877_17IW5Itf2FNZK01bX4fcT1Fbk36ZPgiL0rISK1y3h1OW9aRq13FV7baYZi1w(func_9876_2h9vd37nDrh4XwOoLiTO80P5n6nUT20N8tqD41CjO8u1ZMAeDv8r1H7Hx64J(string4)));
+					break;
+				case 7:
+					string1 = string1 + (char)(65 + func_9877_17IW5Itf2FNZK01bX4fcT1Fbk36ZPgiL0rISK1y3h1OW9aRq13FV7baYZi1w(func_9876_2h9vd37nDrh4XwOoLiTO80P5n6nUT20N8tqD41CjO8u1ZMAeDv8r1H7Hx64J(string4)));
+					break;
+				case 8:
+					string1 = string1 + (char)(122 - func_9877_17IW5Itf2FNZK01bX4fcT1Fbk36ZPgiL0rISK1y3h1OW9aRq13FV7baYZi1w(func_9876_2h9vd37nDrh4XwOoLiTO80P5n6nUT20N8tqD41CjO8u1ZMAeDv8r1H7Hx64J(string4)));
+					break;
+				case 9:
+					string1 = string1 + (char)(90 - func_9877_17IW5Itf2FNZK01bX4fcT1Fbk36ZPgiL0rISK1y3h1OW9aRq13FV7baYZi1w(func_9876_2h9vd37nDrh4XwOoLiTO80P5n6nUT20N8tqD41CjO8u1ZMAeDv8r1H7Hx64J(string4)));
+					break;
+				case 10:
+					byte b7 = 0;
+					char c8 = (char)(b7 + (func_9880_85R8vHSjx3VT07493IkoMj86S34aeC54xZy0QF1wE05439K9jc00LXVUZXpl(string4) << 8));
+					++i3;
+					string4 = string.substring(i3 * 5, i3 * 5 + 5);
+					c8 = (char)(c8 + func_9880_85R8vHSjx3VT07493IkoMj86S34aeC54xZy0QF1wE05439K9jc00LXVUZXpl(string4));
+					string1 = string1 + c8;
+				}
+			}
+		}
+
+		return string1;
+	}
+}
--- /dev/null
+++ net/minecraft/src/CanvasIngameIsomPreview.java
@@ -1,0 +1,284 @@
+package net.minecraft.src;
+
+import java.awt.Color;
+import java.awt.Graphics;
+import java.awt.Graphics2D;
+import java.awt.Rectangle;
+import java.awt.RenderingHints;
+import java.awt.event.KeyEvent;
+import java.awt.event.MouseEvent;
+import java.awt.geom.AffineTransform;
+import java.awt.image.BufferStrategy;
+import java.awt.image.ImageObserver;
+import java.io.File;
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.List;
+
+public class CanvasIngameIsomPreview extends CanvasIsomPreview {
+	private int currentRender = 0;
+	private int zoomLevel = 2;
+	private boolean displayHelpText = true;
+	private World level;
+	private File dataFolder = this.getWorkingDirectory();
+	private boolean running = true;
+	private List zonesToRender = Collections.synchronizedList(new LinkedList());
+	private IsoImageBuffer[][] zoneMap = new IsoImageBuffer[64][64];
+	private int translateX;
+	private int translateY;
+	private int xPosition;
+	private int yPosition;
+
+	public CanvasIngameIsomPreview(World vg) {
+		for(int i2 = 0; i2 < 64; ++i2) {
+			for(int i3 = 0; i3 < 64; ++i3) {
+				this.zoneMap[i2][i3] = new IsoImageBuffer(vg, i2, i3);
+			}
+		}
+
+		this.addMouseListener(this);
+		this.addMouseMotionListener(this);
+		this.addKeyListener(this);
+		this.setFocusable(true);
+		this.requestFocus();
+		this.setBackground(Color.red);
+		this.translateX = (int)InputHandler.mc.thePlayer.posX;
+		this.translateY = (int)InputHandler.mc.thePlayer.posZ;
+		this.loadLevel(vg);
+	}
+
+	public void loadLevel(World vg) {
+		this.translateX = this.translateY = 0;
+		this.level = vg;
+		List list2 = this.zonesToRender;
+		List list3 = this.zonesToRender;
+		synchronized(this.zonesToRender) {
+			this.zonesToRender.clear();
+
+			for(int i4 = 0; i4 < 64; ++i4) {
+				for(int i5 = 0; i5 < 64; ++i5) {
+					this.zoneMap[i4][i5].setLevel(this.level, i4, i5);
+				}
+			}
+
+		}
+	}
+
+	private void setBrightness(int integer) {
+		List list2 = this.zonesToRender;
+		synchronized(this.zonesToRender) {
+			this.zonesToRender.clear();
+
+			for(int i3 = 0; i3 < 64; ++i3) {
+				for(int i4 = 0; i4 < 64; ++i4) {
+					this.zoneMap[i3][i4].setLevel(this.level, i3, i4);
+				}
+			}
+
+		}
+	}
+
+	public void start() {
+		(new ThreadRunIsoClient(this)).start();
+
+		for(int i1 = 0; i1 < 8; ++i1) {
+			(new Thread(this)).start();
+		}
+
+	}
+
+	public void stop() {
+		this.running = false;
+	}
+
+	private IsoImageBuffer getZone(int integer1, int integer2) {
+		int i3 = integer1 & 63;
+		int i4 = integer2 & 63;
+		IsoImageBuffer isoImageBuffer5 = this.zoneMap[i3][i4];
+		if(isoImageBuffer5.x == integer1 && isoImageBuffer5.y == integer2) {
+			return isoImageBuffer5;
+		} else {
+			List list6 = this.zonesToRender;
+			List list7 = this.zonesToRender;
+			synchronized(this.zonesToRender) {
+				this.zonesToRender.remove(isoImageBuffer5);
+			}
+
+			isoImageBuffer5.init(integer1, integer2);
+			return isoImageBuffer5;
+		}
+	}
+
+	public void run() {
+		TerrainTextureManager terrainTextureManager1 = new TerrainTextureManager();
+
+		while(this.running) {
+			IsoImageBuffer isoImageBuffer2 = null;
+			List list3 = this.zonesToRender;
+			synchronized(this.zonesToRender) {
+				if(this.zonesToRender.size() > 0) {
+					isoImageBuffer2 = (IsoImageBuffer)this.zonesToRender.remove(0);
+				}
+			}
+
+			if(isoImageBuffer2 != null) {
+				if(this.currentRender - isoImageBuffer2.lastVisible < 2) {
+					terrainTextureManager1.render(isoImageBuffer2);
+					this.repaint();
+				} else {
+					isoImageBuffer2.addedToRenderQueue = false;
+				}
+			}
+
+			try {
+				Thread.sleep(2L);
+			} catch (InterruptedException interruptedException5) {
+				interruptedException5.printStackTrace();
+			}
+		}
+
+	}
+
+	public void update(Graphics graphics) {
+	}
+
+	public void paint(Graphics graphics) {
+	}
+
+	public void render() {
+		BufferStrategy bufferStrategy1 = this.getBufferStrategy();
+		if(bufferStrategy1 == null) {
+			this.createBufferStrategy(2);
+		} else {
+			this.render((Graphics2D)bufferStrategy1.getDrawGraphics());
+			bufferStrategy1.show();
+		}
+
+	}
+
+	public void render(Graphics2D graphics2D) {
+		++this.currentRender;
+		AffineTransform affineTransform2 = graphics2D.getTransform();
+		graphics2D.setClip(0, 0, this.getWidth(), this.getHeight());
+		graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
+		graphics2D.translate(this.getWidth() / 2, this.getHeight() / 2);
+		graphics2D.scale((double)this.zoomLevel, (double)this.zoomLevel);
+		graphics2D.translate(this.translateX, this.translateY);
+		if(this.level != null) {
+			graphics2D.translate(0, 0);
+		}
+
+		Rectangle rectangle3 = graphics2D.getClipBounds();
+		graphics2D.setColor(new Color(-15724512));
+		graphics2D.fillRect(rectangle3.x, rectangle3.y, rectangle3.width, rectangle3.height);
+		byte b4 = 16;
+		byte b5 = 3;
+		int i6 = rectangle3.x / b4 / 2 - 2 - b5;
+		int i7 = (rectangle3.x + rectangle3.width) / b4 / 2 + 1 + b5;
+		int i8 = rectangle3.y / b4 - 1 - b5 * 2;
+		int i9 = (rectangle3.y + rectangle3.height + 16 + 128) / b4 + 1 + b5 * 2;
+
+		int i10;
+		int i11;
+		int i12;
+		int i13;
+		for(i10 = i8; i10 <= i9; ++i10) {
+			for(i11 = i6; i11 <= i7; ++i11) {
+				i12 = i11 - (i10 >> 1);
+				i13 = i11 + (i10 + 1 >> 1);
+				IsoImageBuffer isoImageBuffer14 = this.getZone(i12, i13);
+				isoImageBuffer14.lastVisible = this.currentRender;
+				if(!isoImageBuffer14.rendered) {
+					if(!isoImageBuffer14.addedToRenderQueue) {
+						isoImageBuffer14.addedToRenderQueue = true;
+						this.zonesToRender.add(isoImageBuffer14);
+					}
+				} else {
+					isoImageBuffer14.addedToRenderQueue = false;
+					if(!isoImageBuffer14.noContent) {
+						int i15 = i11 * b4 * 2 + (i10 & 1) * b4;
+						int i16 = i10 * b4 - 128 - 16;
+						graphics2D.drawImage(isoImageBuffer14.image, i15, i16, (ImageObserver)null);
+					}
+				}
+			}
+		}
+
+		if(this.displayHelpText) {
+			graphics2D.setTransform(affineTransform2);
+			i10 = this.getHeight() - 32 - 4;
+			graphics2D.setColor(new Color(Integer.MIN_VALUE, true));
+			graphics2D.fillRect(4, this.getHeight() - 32 - 4, this.getWidth() - 8, 32);
+			graphics2D.setColor(Color.WHITE);
+		}
+
+		i11 = this.getWidth() / this.zoomLevel / 2 + this.translateX;
+		i12 = this.getHeight() / this.zoomLevel / 2 + this.translateY;
+		i13 = i11 + (int)(InputHandler.mc.thePlayer.posX * Math.cos(-0.7853981633974483D) - InputHandler.mc.thePlayer.posZ * Math.sin(-0.7853981633974483D));
+		int i17 = i12 + (int)(InputHandler.mc.thePlayer.posX * Math.sin(-0.7853981633974483D) + InputHandler.mc.thePlayer.posZ * Math.cos(-0.7853981633974483D) - InputHandler.mc.thePlayer.posY);
+		graphics2D.setTransform(affineTransform2);
+		graphics2D.scale((double)this.zoomLevel, (double)this.zoomLevel);
+		graphics2D.setColor(new Color(-65536, false));
+		graphics2D.fillRect(i13, i17, 4, 4);
+		graphics2D.dispose();
+	}
+
+	public void mouseDragged(MouseEvent mouseEvent) {
+		int i2 = mouseEvent.getX() / this.zoomLevel;
+		int i3 = mouseEvent.getY() / this.zoomLevel;
+		this.translateX += i2 - this.xPosition;
+		this.translateY += i3 - this.yPosition;
+		this.xPosition = i2;
+		this.yPosition = i3;
+		this.repaint();
+	}
+
+	public void mouseMoved(MouseEvent mouseEvent) {
+	}
+
+	public void mouseClicked(MouseEvent mouseEvent) {
+		if(mouseEvent.getClickCount() == 2) {
+			this.zoomLevel = 3 - this.zoomLevel;
+			this.repaint();
+		}
+
+	}
+
+	public void mouseEntered(MouseEvent mouseEvent) {
+	}
+
+	public void mouseExited(MouseEvent mouseEvent) {
+	}
+
+	public void mousePressed(MouseEvent mouseEvent) {
+		int i2 = mouseEvent.getX() / this.zoomLevel;
+		int i3 = mouseEvent.getY() / this.zoomLevel;
+		this.xPosition = i2;
+		this.yPosition = i3;
+	}
+
+	public void mouseReleased(MouseEvent mouseEvent) {
+	}
+
+	public void keyPressed(KeyEvent keyEvent) {
+		if(keyEvent.getKeyCode() == 32) {
+			this.translateX = this.translateY = 0;
+		}
+
+		if(keyEvent.getKeyCode() == 27) {
+			this.displayHelpText = !this.displayHelpText;
+		}
+
+		this.repaint();
+	}
+
+	public void keyReleased(KeyEvent keyEvent) {
+	}
+
+	public void keyTyped(KeyEvent keyEvent) {
+	}
+
+	static boolean isRunning(CanvasIsomPreview _34BE7AAhcY7AVgV68WH9t6HE23HX0E7VU2ivmI9wAoimqdXd3nLGeTagVsFF1RT890M5j2wLS6w457dlsmgC6M2d5k5sz8i0) {
+		return _34BE7AAhcY7AVgV68WH9t6HE23HX0E7VU2ivmI9wAoimqdXd3nLGeTagVsFF1RT890M5j2wLS6w457dlsmgC6M2d5k5sz8i0.running;
+	}
+}
--- net/minecraft/src/Packet52MultiBlockChange.java
+++ net/minecraft/src/Packet52MultiBlockChange.java
@@ -16,37 +16,37 @@
 		this.isChunkDataPacket = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.size = var1.readShort() & '\uffff';
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.size = dataInputStream.readShort() & 65535;
 		this.coordinateArray = new short[this.size];
 		this.typeArray = new byte[this.size];
 		this.metadataArray = new byte[this.size];
 
-		for(int var2 = 0; var2 < this.size; ++var2) {
-			this.coordinateArray[var2] = var1.readShort();
-		}
-
-		var1.readFully(this.typeArray);
-		var1.readFully(this.metadataArray);
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.zPosition);
-		var1.writeShort((short)this.size);
-
-		for(int var2 = 0; var2 < this.size; ++var2) {
-			var1.writeShort(this.coordinateArray[var2]);
-		}
-
-		var1.write(this.typeArray);
-		var1.write(this.metadataArray);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleMultiBlockChange(this);
+		for(int i2 = 0; i2 < this.size; ++i2) {
+			this.coordinateArray[i2] = dataInputStream.readShort();
+		}
+
+		dataInputStream.readFully(this.typeArray);
+		dataInputStream.readFully(this.metadataArray);
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.writeShort((short)this.size);
+
+		for(int i2 = 0; i2 < this.size; ++i2) {
+			dataOutputStream.writeShort(this.coordinateArray[i2]);
+		}
+
+		dataOutputStream.write(this.typeArray);
+		dataOutputStream.write(this.metadataArray);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleMultiBlockChange(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/WorldGenLichen.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenLichen extends WorldGenerator {
+	private int field_9659_7A7YG57y3kFS29peJ5aO9t819c85Teix9g7C1RWOn5Q4J20p76I2YuY9p5b0 = ExtBlocks.Lichen.blockID;
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 64; ++i6) {
+			int i7 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+			int i9 = z + rand.nextInt(8) - rand.nextInt(8);
+			if(world.getBlockId(i7, i8, i9) == 0 && Block.blocksList[this.field_9659_7A7YG57y3kFS29peJ5aO9t819c85Teix9g7C1RWOn5Q4J20p76I2YuY9p5b0].canBlockStay(world, i7, i8, i9)) {
+				world.setBlock(i7, i8, i9, this.field_9659_7A7YG57y3kFS29peJ5aO9t819c85Teix9g7C1RWOn5Q4J20p76I2YuY9p5b0);
+			}
+		}
+
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/DS5InstrRGBUpdate.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public class DS5InstrRGBUpdate implements DS5Instruction {
+	public int r;
+	public int g;
+	public int b;
+	public int controllerIndex;
+
+	public DS5InstrRGBUpdate(int integer1, int integer2, int integer3, int integer4) {
+		this.r = integer2;
+		this.g = integer3;
+		this.b = integer4;
+		this.controllerIndex = integer1;
+	}
+
+	public String GetJSON() {
+		return "{\"type\":2,\"parameters\":[" + this.controllerIndex + "," + this.r + "," + this.g + "," + this.b + "]}";
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiFreezer.java
@@ -1,0 +1,48 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+public class GuiFreezer extends GuiContainer {
+	private TileEntityFreezer field_8004_8n8hsvw2anLLBqL66gSBln4q9hf3Mf81i2WJ24gRRH7z3h21Yvs10qUX9N7E;
+
+	public GuiFreezer(InventoryPlayer bb, TileEntityFreezer wf) {
+		this.field_8004_8n8hsvw2anLLBqL66gSBln4q9hf3Mf81i2WJ24gRRH7z3h21Yvs10qUX9N7E = wf;
+		this.inventorySlots.add(new SlotInventory(this, wf, 0, 16, 35));
+		this.inventorySlots.add(new SlotInventory(this, wf, 1, 60, 35));
+		this.inventorySlots.add(new SlotInventory(this, wf, 2, 116, 35));
+
+		int i3;
+		for(i3 = 0; i3 < 3; ++i3) {
+			for(int i4 = 0; i4 < 9; ++i4) {
+				this.inventorySlots.add(new SlotInventory(this, bb, i4 + (i3 + 1) * 9, 8 + i4 * 18, 84 + i3 * 18));
+			}
+		}
+
+		for(i3 = 0; i3 < 9; ++i3) {
+			this.inventorySlots.add(new SlotInventory(this, bb, i3, 8 + i3 * 18, 142));
+		}
+
+	}
+
+	protected void drawGuiContainerForegroundLayer() {
+		this.fontRenderer.drawString(this.field_8004_8n8hsvw2anLLBqL66gSBln4q9hf3Mf81i2WJ24gRRH7z3h21Yvs10qUX9N7E.getInvName(), 60, 6, 0xFFFFFF);
+		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, 0xFFFFFF);
+	}
+
+	protected void drawGuiContainerBackgroundLayer(float renderPartialTick) {
+		int i2 = this.mc.renderEngine.getTexture("/gui/freezer.png");
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		this.mc.renderEngine.bindTexture(i2);
+		int i3 = (this.width - this.xSize) / 2;
+		int i4 = (this.height - this.ySize) / 2;
+		this.drawTexturedModalRect(i3, i4, 0, 0, this.xSize, this.ySize);
+		int i5;
+		if(this.field_8004_8n8hsvw2anLLBqL66gSBln4q9hf3Mf81i2WJ24gRRH7z3h21Yvs10qUX9N7E.func_9197_4Lt75tb695q9O4k0y17SFzV9n7Yq11Xi9novcDHJOIuX10R7xs1NUsVqvCUE()) {
+			i5 = this.field_8004_8n8hsvw2anLLBqL66gSBln4q9hf3Mf81i2WJ24gRRH7z3h21Yvs10qUX9N7E.func_9193_8K3yE6ppzNQ76NQ089sE2PTCN4IO7VE51KP2efHtAWP8817c1LUvD3Nk71lp(24);
+			this.drawTexturedModalRect(i3 + 36, i4 + 57 - i5, 176, 24 - i5, 20, i5 - 3);
+		}
+
+		i5 = this.field_8004_8n8hsvw2anLLBqL66gSBln4q9hf3Mf81i2WJ24gRRH7z3h21Yvs10qUX9N7E.func_9196_2yn49xG0DV9O6VF0P1qm7UMj028vb0V5eFnBLE8I7MuPGZkJCIu8p5CCd419(24);
+		this.drawTexturedModalRect(i3 + 79, i4 + 36, 176, 22, i5 + 1, 16);
+	}
+}
--- /dev/null
+++ net/minecraft/src/ItemObsidianPick.java
@@ -1,0 +1,11 @@
+package net.minecraft.src;
+
+public class ItemObsidianPick extends ItemPickaxe {
+	public ItemObsidianPick(int itemID, int harvestLevelAndMaterial) {
+		super(itemID, harvestLevelAndMaterial);
+	}
+
+	public boolean canHarvestBlock(Block block) {
+		return block == Block.bedrock ? true : super.canHarvestBlock(block);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockWorkbenchOld.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class BlockWorkbenchOld extends BlockOld {
+	protected BlockWorkbenchOld(int integer) {
+		super(integer, Material.wood);
+		this.blockIndexInTexture = 59;
+	}
+
+	public int getBlockTextureFromSide(int integer) {
+		return integer == 1 ? this.blockIndexInTexture - 16 : (integer == 0 ? BlockOld.planks.getBlockTextureFromSide(0) : (integer != 2 && integer != 4 ? this.blockIndexInTexture : this.blockIndexInTexture + 1));
+	}
+
+	public boolean blockActivated(World vg, int integer2, int integer3, int integer4, EntityPlayer gb) {
+		gb.displayWorkbenchGUI();
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/DS5Connection.java
@@ -1,0 +1,69 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.net.DatagramPacket;
+import java.net.DatagramSocket;
+import java.net.InetAddress;
+import java.net.SocketException;
+import java.net.UnknownHostException;
+import java.nio.charset.Charset;
+import java.util.Scanner;
+
+public class DS5Connection {
+	public DatagramSocket dgramSock;
+	public int port = -1;
+	public InetAddress addr;
+	public boolean connected = false;
+
+	public boolean Connect() {
+		File file1 = new File("C:\\Temp\\DualSenseX\\DualSenseX_PortNumber.txt");
+
+		try {
+			Scanner scanner2 = new Scanner(file1);
+			if(!scanner2.hasNextInt()) {
+				scanner2.close();
+				return false;
+			}
+
+			this.port = scanner2.nextInt();
+			scanner2.close();
+		} catch (FileNotFoundException fileNotFoundException5) {
+			return false;
+		}
+
+		try {
+			this.addr = InetAddress.getByName("localhost");
+			this.dgramSock = new DatagramSocket();
+		} catch (UnknownHostException unknownHostException3) {
+			return false;
+		} catch (SocketException socketException4) {
+			return false;
+		}
+
+		this.connected = true;
+		return true;
+	}
+
+	public void Disconnect() {
+		this.dgramSock.close();
+		this.connected = false;
+	}
+
+	public boolean Send(DS5Packet xz) {
+		if(!this.connected) {
+			return false;
+		} else {
+			byte[] b2 = xz.buildJSON().getBytes(Charset.forName("ASCII"));
+			DatagramPacket datagramPacket3 = new DatagramPacket(b2, b2.length, this.addr, this.port);
+
+			try {
+				this.dgramSock.send(datagramPacket3);
+				return true;
+			} catch (IOException iOException5) {
+				return false;
+			}
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/MinecraftException2.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public class MinecraftException2 extends RuntimeException {
+	public MinecraftException2() {
+		super("This is not supposed to happen");
+	}
+}
--- net/minecraft/src/EntityPlayer.java
+++ net/minecraft/src/EntityPlayer.java
@@ -4,7 +4,6 @@
 
 public class EntityPlayer extends EntityLiving {
 	public InventoryPlayer inventory = new InventoryPlayer(this);
-	public byte unusedMiningCooldown = 0;
 	public int score = 0;
 	public float prevCameraYaw;
 	public float cameraYaw;
@@ -12,14 +11,18 @@
 	public int swingProgressInt = 0;
 	public String username;
 	private int damageRemainder = 0;
+	public long observerCooldown = 0L;
+	public int field_9028_77eIl1NuprJ7LGdcl2jvfY23W9vuW6i3POL1kwYb9qsfTXp6uFHpdr8w9eCG = 0;
+	public ImageHolder playerSkin = null;
+	public boolean flying = false;
+	boolean lastInWater = false;
 
-	public EntityPlayer(World var1) {
-		super(var1);
+	public EntityPlayer(World world) {
+		super(world);
 		this.yOffset = 1.62F;
-		this.setLocationAndAngles((double)var1.spawnX + 0.5D, (double)(var1.spawnY + 1), (double)var1.spawnZ + 0.5D, 0.0F, 0.0F);
+		this.setLocationAndAngles((double)world.spawnX + 0.5D, (double)(world.spawnY + 1), (double)world.spawnZ + 0.5D, 0.0F, 0.0F);
 		this.health = 20;
 		this.entityType = "humanoid";
-		this.unusedRotation = 180.0F;
 		this.fireResistance = 20;
 		this.texture = "/char.png";
 	}
@@ -52,50 +55,100 @@
 		this.swingProgress = (float)this.swingProgressInt / 8.0F;
 	}
 
+	public void moveEntity(double x, double y, double z) {
+		if(this.flying) {
+			x *= 4.0D;
+			z *= 4.0D;
+		}
+
+		super.moveEntity(x, y, z);
+	}
+
+	public void func_9009_4fp790sAs7f59G8L1MO21S1tnt70P1FWDQrlNxsa8OJNe7i1jl39U7geG89g() {
+		boolean z1 = this.lastInWater;
+		if(!this.isInsideOfMaterial(Material.water) && (!this.lastInWater || this.worldObj.getBlockId((int)this.posX, (int)this.posY - 1, (int)this.posZ) == 0 || this.worldObj.getBlockId((int)this.posX, (int)this.posY, (int)this.posZ) == 0)) {
+			this.setSize(0.6F, 1.8F);
+			this.yOffset = 1.62F;
+			this.lastInWater = false;
+		} else {
+			this.setSize(0.6F, 0.8F);
+			this.yOffset = 0.81F;
+			this.renderYawOffset = this.rotationYaw;
+			this.lastInWater = true;
+		}
+
+		if(this.lastInWater != z1) {
+			this.setPosition(this.posX, this.posY, this.posZ);
+		}
+
+	}
+
+	public void func_8999_2V2k958X8cUl0N1lA83kol6zqQt7yi5f733JmXLv5F2q3Uq9IkthN796za9B() {
+		super.onLivingUpdate();
+	}
+
 	public void onLivingUpdate() {
-		if(this.worldObj.difficultySetting == 0 && this.health < 20 && this.ticksExisted % 20 * 4 == 0) {
+		if(this.observerCooldown > 0L) {
+			--this.observerCooldown;
+		}
+
+		this.func_9009_4fp790sAs7f59G8L1MO21S1tnt70P1FWDQrlNxsa8OJNe7i1jl39U7geG89g();
+		if(this.worldObj.difficultySetting == 0 && !this.isInsideOfMaterial(Material.water) && !(this.worldObj instanceof ZMWorld) && this.health < 20 && this.ticksExisted % 20 * 4 == 0) {
 			this.heal(1);
 		}
 
+		if(this.field_9028_77eIl1NuprJ7LGdcl2jvfY23W9vuW6i3POL1kwYb9qsfTXp6uFHpdr8w9eCG > 0) {
+			--this.field_9028_77eIl1NuprJ7LGdcl2jvfY23W9vuW6i3POL1kwYb9qsfTXp6uFHpdr8w9eCG;
+		}
+
 		this.inventory.decrementAnimations();
 		this.prevCameraYaw = this.cameraYaw;
 		super.onLivingUpdate();
-		float var1 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-		float var2 = (float)Math.atan(-this.motionY * (double)0.2F) * 15.0F;
-		if(var1 > 0.1F) {
-			var1 = 0.1F;
+		if(this.flying) {
+			this.motionY = 0.0D;
+		}
+
+		float f1 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+		float f2 = (float)Math.atan(-this.motionY * (double)0.2F) * 15.0F;
+		if(f1 > 0.1F) {
+			f1 = 0.1F;
 		}
 
 		if(!this.onGround || this.health <= 0) {
-			var1 = 0.0F;
+			f1 = 0.0F;
 		}
 
 		if(this.onGround || this.health <= 0) {
-			var2 = 0.0F;
+			f2 = 0.0F;
 		}
 
-		this.cameraYaw += (var1 - this.cameraYaw) * 0.4F;
-		this.cameraPitch += (var2 - this.cameraPitch) * 0.8F;
+		this.cameraYaw += (f1 - this.cameraYaw) * 0.4F;
+		this.cameraPitch += (f2 - this.cameraPitch) * 0.8F;
 		if(this.health > 0) {
-			List var3 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(1.0D, 0.0D, 1.0D));
-			if(var3 != null) {
-				for(int var4 = 0; var4 < var3.size(); ++var4) {
-					this.collideWithPlayer((Entity)var3.get(var4));
+			List list3 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(1.0D, 0.0D, 1.0D));
+			if(list3 != null) {
+				for(int i4 = 0; i4 < list3.size(); ++i4) {
+					this.collideWithPlayer((Entity)list3.get(i4));
 				}
 			}
 		}
 
 	}
 
-	private void collideWithPlayer(Entity var1) {
-		var1.onCollideWithPlayer(this);
+	protected boolean shouldBeDamagedByFire() {
+		ItemStack itemStack1 = this.inventory.getCurrentItem();
+		return itemStack1 == null || itemStack1.getItem().shiftedIndex != ExtItems.flameberge.shiftedIndex;
+	}
+
+	public void collideWithPlayer(Entity entity) {
+		entity.onCollideWithPlayer(this);
 	}
 
 	public int getScore() {
 		return this.score;
 	}
 
-	public void onDeath(Entity var1) {
+	public void onDeath(Entity entity) {
 		this.setSize(0.2F, 0.2F);
 		this.setPosition(this.posX, this.posY, this.posZ);
 		this.motionY = (double)0.1F;
@@ -104,7 +157,7 @@
 		}
 
 		this.inventory.dropAllItems();
-		if(var1 != null) {
+		if(entity != null) {
 			this.motionX = (double)(-MathHelper.cos((this.attackedAtYaw + this.rotationYaw) * (float)Math.PI / 180.0F) * 0.1F);
 			this.motionZ = (double)(-MathHelper.sin((this.attackedAtYaw + this.rotationYaw) * (float)Math.PI / 180.0F) * 0.1F);
 		} else {
@@ -114,125 +167,135 @@
 		this.yOffset = 0.1F;
 	}
 
-	public void addToPlayerScore(Entity var1, int var2) {
-		this.score += var2;
-	}
-
-	public void dropPlayerItem(ItemStack var1) {
-		this.dropPlayerItemWithRandomChoice(var1, false);
-	}
-
-	public void dropPlayerItemWithRandomChoice(ItemStack var1, boolean var2) {
-		if(var1 != null) {
-			EntityItem var3 = new EntityItem(this.worldObj, this.posX, this.posY - (double)0.3F + (double)this.getEyeHeight(), this.posZ, var1);
-			var3.delayBeforeCanPickup = 40;
-			float var4 = 0.1F;
-			float var5;
-			if(var2) {
-				var5 = this.rand.nextFloat() * 0.5F;
-				float var6 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
-				var3.motionX = (double)(-MathHelper.sin(var6) * var5);
-				var3.motionZ = (double)(MathHelper.cos(var6) * var5);
-				var3.motionY = (double)0.2F;
+	public void addToPlayerScore(Entity entity, int score) {
+		this.score += score;
+	}
+
+	public void dropPlayerItem(ItemStack stack) {
+		this.dropPlayerItemWithRandomChoice(stack, false);
+	}
+
+	public void dropPlayerItemWithRandomChoice(ItemStack stack, boolean isRandom) {
+		if(stack != null) {
+			EntityItem entityItem3 = new EntityItem(this.worldObj, this.posX, this.posY - (double)0.3F + (double)this.getEyeHeight(), this.posZ, stack);
+			entityItem3.delayBeforeCanPickup = 40;
+			float f4 = 0.1F;
+			float f5;
+			if(isRandom) {
+				f5 = this.rand.nextFloat() * 0.5F;
+				float f6 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
+				entityItem3.motionX = (double)(-MathHelper.sin(f6) * f5);
+				entityItem3.motionZ = (double)(MathHelper.cos(f6) * f5);
+				entityItem3.motionY = (double)0.2F;
 			} else {
-				var4 = 0.3F;
-				var3.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var4);
-				var3.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var4);
-				var3.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * var4 + 0.1F);
-				var4 = 0.02F;
-				var5 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
-				var4 *= this.rand.nextFloat();
-				var3.motionX += Math.cos((double)var5) * (double)var4;
-				var3.motionY += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
-				var3.motionZ += Math.sin((double)var5) * (double)var4;
+				f4 = 0.3F;
+				entityItem3.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * f4);
+				entityItem3.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * f4);
+				entityItem3.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * f4 + 0.1F);
+				f4 = 0.02F;
+				f5 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
+				f4 *= this.rand.nextFloat();
+				entityItem3.motionX += Math.cos((double)f5) * (double)f4;
+				entityItem3.motionY += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+				entityItem3.motionZ += Math.sin((double)f5) * (double)f4;
 			}
 
-			this.joinEntityItemWithWorld(var3);
+			this.joinEntityItemWithWorld(entityItem3);
 		}
-	}
-
-	protected void joinEntityItemWithWorld(EntityItem var1) {
-		this.worldObj.spawnEntityInWorld(var1);
-	}
-
-	public float getCurrentPlayerStrVsBlock(Block var1) {
-		float var2 = this.inventory.getStrVsBlock(var1);
+
+	}
+
+	protected void joinEntityItemWithWorld(EntityItem entityItem) {
+		this.worldObj.spawnEntityInWorld(entityItem);
+	}
+
+	public float getCurrentPlayerStrVsBlock(Block block) {
+		float f2 = this.inventory.getStrVsBlock(block);
 		if(this.isInsideOfMaterial(Material.water)) {
-			var2 /= 5.0F;
-		}
-
-		if(!this.onGround) {
-			var2 /= 5.0F;
-		}
-
-		return var2;
-	}
-
-	public boolean canHarvestBlock(Block var1) {
-		return this.inventory.canHarvestBlock(var1);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		NBTTagList var2 = var1.getTagList("Inventory");
-		this.inventory.readFromNBT(var2);
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setTag("Inventory", this.inventory.writeToNBT(new NBTTagList()));
-	}
-
-	public void displayGUIChest(IInventory var1) {
+			f2 /= 4.0F;
+		}
+
+		if(!this.onGround && !this.flying) {
+			f2 /= 4.0F;
+		}
+
+		return f2;
+	}
+
+	public boolean canHarvestBlock(Block block) {
+		return this.inventory.canHarvestBlock(block);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+		NBTTagList nBTTagList2 = nbttagcompound.getTagList("Inventory");
+		this.inventory.readFromNBT(nBTTagList2);
+		this.observerCooldown = nbttagcompound.getLong("ObvCDTimer");
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+		nbttagcompound.setLong("ObvCDTimer", this.observerCooldown);
+		nbttagcompound.setInteger("FlowerHealTimer", this.field_9028_77eIl1NuprJ7LGdcl2jvfY23W9vuW6i3POL1kwYb9qsfTXp6uFHpdr8w9eCG);
+		nbttagcompound.setTag("Inventory", this.inventory.writeToNBT(new NBTTagList()));
+	}
+
+	public void func_9014_8m5ZIeFsLDmTSL7vg0gU2Gb8dJg6fdSuixcwsqYKcnVLS6AUHVRG1qS6my5L() {
+	}
+
+	public void displayGUIChest(IInventory inventory) {
 	}
 
 	public void displayWorkbenchGUI() {
 	}
 
-	public void onItemPickup(Entity var1, int var2) {
+	public void onItemPickup(Entity entity, int integer) {
 	}
 
 	protected float getEyeHeight() {
-		return 0.12F;
+		return this.lastInWater ? -0.1F : 0.12F;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		this.entityAge = 0;
 		if(this.health <= 0) {
 			return false;
 		} else if((float)this.heartsLife > (float)this.heartsHalvesLife / 2.0F) {
 			return false;
 		} else {
-			if(var1 instanceof EntityMob || var1 instanceof EntityArrow) {
-				if(this.worldObj.difficultySetting == 0) {
-					var2 = 0;
+			if(entity instanceof EntityMob || entity instanceof EntityArrow) {
+				if(this.worldObj.difficultySetting == 0 && !(this.worldObj instanceof ZMWorld)) {
+					damage = 0;
 				}
 
 				if(this.worldObj.difficultySetting == 1) {
-					var2 = var2 / 3 + 1;
+					damage = damage / 3 + 1;
 				}
 
 				if(this.worldObj.difficultySetting == 3) {
-					var2 = var2 * 3 / 2;
+					damage = damage * 3 / 2;
 				}
 			}
 
-			int var3 = 25 - this.inventory.getTotalArmorValue();
-			int var4 = var2 * var3 + this.damageRemainder;
-			this.inventory.damageArmor(var2);
-			var2 = var4 / 25;
-			this.damageRemainder = var4 % 25;
-			return var2 == 0 ? false : super.attackEntityFrom(var1, var2);
+			int i3 = 25 - this.inventory.getTotalArmorValue();
+			int i4 = damage * i3 + this.damageRemainder;
+			this.inventory.damageArmor(damage);
+			damage = i4 / 25;
+			this.damageRemainder = i4 % 25;
+			return damage == 0 ? false : super.attackEntityFrom(entity, damage);
 		}
 	}
 
-	public void displayGUIFurnace(TileEntityFurnace var1) {
-	}
-
-	public void displayGUIEditSign(TileEntitySign var1) {
-	}
-
-	public void interactWithEntity(Entity var1) {
+	public void displayGUIFurnace(TileEntityFurnace tileEntityFurnace) {
+	}
+
+	public void displayGUIEditSign(TileEntitySign tileEntitySign) {
+	}
+
+	public void displayEssenceTransformerGUI() {
+	}
+
+	public void interactWithEntity(Entity entity) {
 	}
 
 	public ItemStack getCurrentEquippedItem() {
@@ -250,5 +313,11 @@
 	public void swingItem() {
 		this.swingProgressInt = -1;
 		this.isSwinging = true;
+	}
+
+	public void displayEssenceClonerGUI() {
+	}
+
+	public void displayFreezerGUI(TileEntityFreezer tileEntityFreezer) {
 	}
 }
--- net/minecraft/src/BlockPressurePlate.java
+++ net/minecraft/src/BlockPressurePlate.java
@@ -6,19 +6,19 @@
 public class BlockPressurePlate extends Block {
 	private EnumMobType triggerMobType;
 
-	protected BlockPressurePlate(int var1, int var2, EnumMobType var3) {
-		super(var1, var2, Material.rock);
-		this.triggerMobType = var3;
+	protected BlockPressurePlate(int id, int blockIndex, EnumMobType triggerMobType) {
+		super(id, blockIndex, Material.rock);
+		this.triggerMobType = triggerMobType;
 		this.setTickOnLoad(true);
-		float var4 = 1.0F / 16.0F;
-		this.setBlockBounds(var4, 0.0F, var4, 1.0F - var4, 0.03125F, 1.0F - var4);
+		float f4 = 0.0625F;
+		this.setBlockBounds(f4, 0.0F, f4, 1.0F - f4, 0.03125F, 1.0F - f4);
 	}
 
 	public int tickRate() {
 		return 20;
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -30,108 +30,110 @@
 		return false;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2, var3 - 1, var4);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		boolean var6 = false;
-		if(!var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var6 = true;
-		}
-
-		if(var6) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		}
-
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getBlockMetadata(var2, var3, var4) != 0) {
-			this.setStateIfMobInteractsWithPlate(var1, var2, var3, var4);
-		}
-	}
-
-	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-		if(var1.getBlockMetadata(var2, var3, var4) != 1) {
-			this.setStateIfMobInteractsWithPlate(var1, var2, var3, var4);
-		}
-	}
-
-	private void setStateIfMobInteractsWithPlate(World var1, int var2, int var3, int var4) {
-		boolean var5 = var1.getBlockMetadata(var2, var3, var4) == 1;
-		boolean var6 = false;
-		float var7 = 2.0F / 16.0F;
-		List var8 = null;
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y - 1, z);
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		boolean z6 = false;
+		if(!world.isBlockNormalCube(x, y - 1, z)) {
+			z6 = true;
+		}
+
+		if(z6) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
+		}
+
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(world.getBlockMetadata(x, y, z) != 0) {
+			this.setStateIfMobInteractsWithPlate(world, x, y, z);
+		}
+
+	}
+
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
+		if(world.getBlockMetadata(x, y, z) != 1) {
+			this.setStateIfMobInteractsWithPlate(world, x, y, z);
+		}
+
+	}
+
+	private void setStateIfMobInteractsWithPlate(World world, int x, int y, int z) {
+		boolean z5 = world.getBlockMetadata(x, y, z) == 1;
+		boolean z6 = false;
+		float f7 = 0.125F;
+		List list8 = null;
 		if(this.triggerMobType == EnumMobType.everything) {
-			var8 = var1.getEntitiesWithinAABBExcludingEntity((Entity)null, AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + var7), (double)var3, (double)((float)var4 + var7), (double)((float)(var2 + 1) - var7), (double)var3 + 0.25D, (double)((float)(var4 + 1) - var7)));
+			list8 = world.getEntitiesWithinAABBExcludingEntity((Entity)null, AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + f7), (double)y, (double)((float)z + f7), (double)((float)(x + 1) - f7), (double)y + 0.25D, (double)((float)(z + 1) - f7)));
 		}
 
 		if(this.triggerMobType == EnumMobType.mobs) {
-			var8 = var1.getEntitiesWithinAABB(EntityLiving.class, AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + var7), (double)var3, (double)((float)var4 + var7), (double)((float)(var2 + 1) - var7), (double)var3 + 0.25D, (double)((float)(var4 + 1) - var7)));
+			list8 = world.getEntitiesWithinAABB(EntityLiving.class, AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + f7), (double)y, (double)((float)z + f7), (double)((float)(x + 1) - f7), (double)y + 0.25D, (double)((float)(z + 1) - f7)));
 		}
 
 		if(this.triggerMobType == EnumMobType.players) {
-			var8 = var1.getEntitiesWithinAABB(EntityPlayer.class, AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + var7), (double)var3, (double)((float)var4 + var7), (double)((float)(var2 + 1) - var7), (double)var3 + 0.25D, (double)((float)(var4 + 1) - var7)));
-		}
-
-		if(var8.size() > 0) {
-			var6 = true;
-		}
-
-		if(var6 && !var5) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.1D, (double)var4 + 0.5D, "random.click", 0.3F, 0.6F);
-		}
-
-		if(!var6 && var5) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.1D, (double)var4 + 0.5D, "random.click", 0.3F, 0.5F);
-		}
-
-		if(var6) {
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-		}
-
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		if(var5 > 0) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-		}
-
-		super.onBlockRemoval(var1, var2, var3, var4);
-	}
-
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		boolean var5 = var1.getBlockMetadata(var2, var3, var4) == 1;
-		float var6 = 1.0F / 16.0F;
-		if(var5) {
-			this.setBlockBounds(var6, 0.0F, var6, 1.0F - var6, 0.03125F, 1.0F - var6);
+			list8 = world.getEntitiesWithinAABB(EntityPlayer.class, AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + f7), (double)y, (double)((float)z + f7), (double)((float)(x + 1) - f7), (double)y + 0.25D, (double)((float)(z + 1) - f7)));
+		}
+
+		if(list8.size() > 0) {
+			z6 = true;
+		}
+
+		if(z6 && !z5) {
+			world.setBlockMetadataWithNotify(x, y, z, 1);
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			world.markBlocksDirty(x, y, z, x, y, z);
+			world.playSoundEffect((double)x + 0.5D, (double)y + 0.1D, (double)z + 0.5D, "random.click", 0.3F, 0.6F);
+		}
+
+		if(!z6 && z5) {
+			world.setBlockMetadataWithNotify(x, y, z, 0);
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			world.markBlocksDirty(x, y, z, x, y, z);
+			world.playSoundEffect((double)x + 0.5D, (double)y + 0.1D, (double)z + 0.5D, "random.click", 0.3F, 0.5F);
+		}
+
+		if(z6) {
+			world.scheduleBlockUpdate(x, y, z, this.blockID);
+		}
+
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		if(i5 > 0) {
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+		}
+
+		super.onBlockRemoval(world, x, y, z);
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		boolean z5 = blockAccess.getBlockMetadata(x, y, z) == 1;
+		float f6 = 0.0625F;
+		if(z5) {
+			this.setBlockBounds(f6, 0.0F, f6, 1.0F - f6, 0.03125F, 1.0F - f6);
 		} else {
-			this.setBlockBounds(var6, 0.0F, var6, 1.0F - var6, 1.0F / 16.0F, 1.0F - var6);
+			this.setBlockBounds(f6, 0.0F, f6, 1.0F - f6, 0.0625F, 1.0F - f6);
 		}
 
 	}
 
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return var1.getBlockMetadata(var2, var3, var4) > 0;
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int unused) {
+		return blockAccess.getBlockMetadata(x, y, z) > 0;
 	}
 
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-		return var1.getBlockMetadata(var2, var3, var4) == 0 ? false : var5 == 1;
+	public boolean isIndirectlyPoweringTo(World world, int x, int y, int z, int flag) {
+		return world.getBlockMetadata(x, y, z) == 0 ? false : flag == 1;
 	}
 
 	public boolean canProvidePower() {
@@ -139,9 +141,9 @@
 	}
 
 	public void setBlockBoundsForItemRender() {
-		float var1 = 0.5F;
-		float var2 = 2.0F / 16.0F;
-		float var3 = 0.5F;
-		this.setBlockBounds(0.5F - var1, 0.5F - var2, 0.5F - var3, 0.5F + var1, 0.5F + var2, 0.5F + var3);
+		float f1 = 0.5F;
+		float f2 = 0.125F;
+		float f3 = 0.5F;
+		this.setBlockBounds(0.5F - f1, 0.5F - f2, 0.5F - f3, 0.5F + f1, 0.5F + f2, 0.5F + f3);
 	}
 }
--- /dev/null
+++ net/minecraft/src/ModelSquip.java
@@ -1,0 +1,32 @@
+package net.minecraft.src;
+
+public class ModelSquip extends ModelBase {
+	public ModelRenderer[] submodels = new ModelRenderer[11];
+
+	public ModelSquip() {
+		byte b1 = 24;
+		this.submodels[0] = n(0, 0, -6.0F, (float)(b1 + -37), -6.0F, 12, 18, 12, false);
+		this.submodels[1] = n(12, 30, -9.0F, (float)(b1 + -37), -2.0F, 3, 11, 3, false);
+		this.submodels[2] = n(0, 30, 6.0F, (float)(b1 + -37), -2.0F, 3, 11, 3, false);
+		this.submodels[3] = n(24, 30, -3.0F, (float)(b1 + -19), -5.0F, 2, 15, 2, false);
+		this.submodels[4] = n(32, 30, 3.0F, (float)(b1 + -19), -2.0F, 2, 14, 2, true);
+		this.submodels[5] = n(24, 30, 1.0F, (float)(b1 + -19), -5.0F, 2, 15, 2, true);
+		this.submodels[6] = n(32, 30, -5.0F, (float)(b1 + -19), -2.0F, 2, 14, 2, false);
+		this.submodels[7] = n(32, 30, 3.0F, (float)(b1 + -19), 1.0F, 2, 14, 2, true);
+		this.submodels[8] = n(32, 30, -5.0F, (float)(b1 + -19), 1.0F, 2, 14, 2, false);
+		this.submodels[9] = n(24, 30, -3.0F, (float)(b1 + -19), 4.0F, 2, 15, 2, false);
+		this.submodels[10] = n(24, 30, 1.0F, (float)(b1 + -19), 4.0F, 2, 15, 2, true);
+	}
+
+	public void render(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.setRotationAngles(float1, float2, float3, float4, float5, float6);
+		ModelRenderer[] modelRenderer7 = this.submodels;
+		int i8 = modelRenderer7.length;
+
+		for(int i9 = 0; i9 < i8; ++i9) {
+			ModelRenderer modelRenderer10 = modelRenderer7[i9];
+			modelRenderer10.render(float6);
+		}
+
+	}
+}
--- net/minecraft/src/Packet.java
+++ net/minecraft/src/Packet.java
@@ -11,24 +11,24 @@
 	private static Map packetClassToIdMap = new HashMap();
 	public boolean isChunkDataPacket = false;
 
-	static void addIdClassMapping(int var0, Class var1) {
-		if(packetIdToClassMap.containsKey(Integer.valueOf(var0))) {
-			throw new IllegalArgumentException("Duplicate packet id:" + var0);
-		} else if(packetClassToIdMap.containsKey(var1)) {
-			throw new IllegalArgumentException("Duplicate packet class:" + var1);
+	static void addIdClassMapping(int id, Class clazz) {
+		if(packetIdToClassMap.containsKey(id)) {
+			throw new IllegalArgumentException("Duplicate packet id:" + id);
+		} else if(packetClassToIdMap.containsKey(clazz)) {
+			throw new IllegalArgumentException("Duplicate packet class:" + clazz);
 		} else {
-			packetIdToClassMap.put(Integer.valueOf(var0), var1);
-			packetClassToIdMap.put(var1, Integer.valueOf(var0));
+			packetIdToClassMap.put(id, clazz);
+			packetClassToIdMap.put(clazz, id);
 		}
 	}
 
-	public static Packet getNewPacket(int var0) {
+	public static Packet getNewPacket(int id) {
 		try {
-			Class var1 = (Class)packetIdToClassMap.get(Integer.valueOf(var0));
-			return var1 == null ? null : (Packet)var1.newInstance();
-		} catch (Exception var2) {
-			var2.printStackTrace();
-			System.out.println("Skipping packet with id " + var0);
+			Class class1 = (Class)packetIdToClassMap.get(id);
+			return class1 == null ? null : (Packet)class1.newInstance();
+		} catch (Exception exception2) {
+			exception2.printStackTrace();
+			System.out.println("Skipping packet with id " + id);
 			return null;
 		}
 	}
@@ -37,31 +37,32 @@
 		return ((Integer)packetClassToIdMap.get(this.getClass())).intValue();
 	}
 
-	public static Packet readPacket(DataInputStream var0) throws IOException {
-		int var1 = var0.read();
-		if(var1 == -1) {
+	public static Packet readPacket(DataInputStream dataInputStream) throws IOException {
+		int i1 = dataInputStream.read();
+		if(i1 == -1) {
+			ExtLogger.i("-1 packet ID received");
 			return null;
 		} else {
-			Packet var2 = getNewPacket(var1);
-			if(var2 == null) {
-				throw new IOException("Bad packet id " + var1);
+			Packet packet2 = getNewPacket(i1);
+			if(packet2 == null) {
+				throw new IOException("Bad packet id " + i1);
 			} else {
-				var2.readPacketData(var0);
-				return var2;
+				packet2.readPacketData(dataInputStream);
+				return packet2;
 			}
 		}
 	}
 
-	public static void writePacket(Packet var0, DataOutputStream var1) throws IOException {
-		var1.write(var0.getPacketId());
-		var0.writePacket(var1);
+	public static void writePacket(Packet packet, DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.write(packet.getPacketId());
+		packet.writePacket(dataOutputStream);
 	}
 
-	public abstract void readPacketData(DataInputStream var1) throws IOException;
-
-	public abstract void writePacket(DataOutputStream var1) throws IOException;
-
-	public abstract void processPacket(NetHandler var1);
+	public abstract void readPacketData(DataInputStream dataInputStream1) throws IOException;
+
+	public abstract void writePacket(DataOutputStream dataOutputStream1) throws IOException;
+
+	public abstract void processPacket(NetHandler netHandler1);
 
 	public abstract int getPacketSize();
 
@@ -73,6 +74,8 @@
 		addIdClassMapping(4, Packet4UpdateTime.class);
 		addIdClassMapping(5, Packet5PlayerInventory.class);
 		addIdClassMapping(6, Packet6SpawnPosition.class);
+		addIdClassMapping(7, Packet7SendSkinRequest.class);
+		addIdClassMapping(8, Packet8RespondSkinRequest.class);
 		addIdClassMapping(10, Packet10Flying.class);
 		addIdClassMapping(11, Packet11PlayerPosition.class);
 		addIdClassMapping(12, Packet12PlayerLook.class);
@@ -98,6 +101,13 @@
 		addIdClassMapping(52, Packet52MultiBlockChange.class);
 		addIdClassMapping(53, Packet53BlockChange.class);
 		addIdClassMapping(59, Packet59ComplexEntity.class);
+		addIdClassMapping(70, Packet70PlayGlobalMusic.class);
+		addIdClassMapping(71, Packet71.class);
+		addIdClassMapping(72, Packet72.class);
+		addIdClassMapping(200, Packet200SecureLogin.class);
+		addIdClassMapping(201, Packet201SecureChat.class);
+		addIdClassMapping(202, Packet202SecureChatEcho.class);
+		addIdClassMapping(211, Packet211.class);
 		addIdClassMapping(255, Packet255KickDisconnect.class);
 	}
 }
--- net/minecraft/src/GameWindowListener.java
+++ net/minecraft/src/GameWindowListener.java
@@ -2,24 +2,25 @@
 
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
+
 import net.minecraft.client.Minecraft;
 
 public final class GameWindowListener extends WindowAdapter {
 	final Minecraft mc;
 	final Thread thread;
 
-	public GameWindowListener(Minecraft var1, Thread var2) {
-		this.mc = var1;
-		this.thread = var2;
+	public GameWindowListener(Minecraft minecraft, Thread thread) {
+		this.mc = minecraft;
+		this.thread = thread;
 	}
 
-	public void windowClosing(WindowEvent var1) {
+	public void windowClosing(WindowEvent windowEvent) {
 		this.mc.shutdown();
 
 		try {
 			this.thread.join();
-		} catch (InterruptedException var3) {
-			var3.printStackTrace();
+		} catch (InterruptedException interruptedException3) {
+			interruptedException3.printStackTrace();
 		}
 
 		System.exit(0);
--- /dev/null
+++ net/minecraft/src/HubWorldUnknownClass3.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+public class HubWorldUnknownClass3 extends MapGenBase {
+	private List field_11160_3n3877cAL198QgMDPGv8AXYIec0mHr5ObtZma81Yl5nX8ugCz86y6XL9Pi5O = new ArrayList();
+
+	private boolean func_11159_5uod1iu6Dlqg52iO0v6qFBPdixFGfm6LmbnW4Rx3Ep7C4LSh0InO8QKqkeJk() {
+		Iterator iterator1 = this.field_11160_3n3877cAL198QgMDPGv8AXYIec0mHr5ObtZma81Yl5nX8ugCz86y6XL9Pi5O.iterator();
+
+		HubWorldUnknownClass2 hubWorldUnknownClass22;
+		do {
+			if(!iterator1.hasNext()) {
+				return false;
+			}
+
+			hubWorldUnknownClass22 = (HubWorldUnknownClass2)iterator1.next();
+		} while(!hubWorldUnknownClass22.func_9820_5204axQba8r4yKOmf635c4mf99bQl70mm0X8b96R3NY7EX2N636dc3j5E7Jq());
+
+		return true;
+	}
+
+	private HubWorldUnknownClass2 func_11158_8OSUykYWUR3a2r3PPU9aWX0djkEYBjTtmmkhtMY0762Vl2FaAN2L4j7JvJpd(int integer1, int integer2, int integer3) {
+		if(!this.func_11159_5uod1iu6Dlqg52iO0v6qFBPdixFGfm6LmbnW4Rx3Ep7C4LSh0InO8QKqkeJk()) {
+			return null;
+		} else {
+			if(integer1 == 0 && integer2 == 1 && integer3 == 0) {
+				boolean z10000 = false;
+			} else {
+				this.rand.nextInt(5);
+			}
+
+			return null;
+		}
+	}
+}
--- net/minecraft/src/ItemSeeds.java
+++ net/minecraft/src/ItemSeeds.java
@@ -3,19 +3,19 @@
 public class ItemSeeds extends Item {
 	private int blockType;
 
-	public ItemSeeds(int var1, int var2) {
-		super(var1);
-		this.blockType = var2;
+	public ItemSeeds(int itemID, int blockType) {
+		super(itemID);
+		this.blockType = blockType;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 != 1) {
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(side != 1) {
 			return false;
 		} else {
-			int var8 = var3.getBlockId(var4, var5, var6);
-			if(var8 == Block.tilledField.blockID) {
-				var3.setBlockWithNotify(var4, var5 + 1, var6, this.blockType);
-				--var1.stackSize;
+			int i8 = world.getBlockId(x, y, z);
+			if(i8 == Block.tilledField.blockID) {
+				world.setBlockWithNotify(x, y + 1, z, this.blockType);
+				--stack.stackSize;
 				return true;
 			} else {
 				return false;
--- net/minecraft/src/RenderGlobal.java
+++ net/minecraft/src/RenderGlobal.java
@@ -5,17 +5,20 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.Objects;
 import java.util.Random;
+
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.ARBOcclusionQuery;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL15;
 
 public class RenderGlobal implements IWorldAccess {
-	public List tileEntities = new ArrayList();
+	public List tileEntities;
 	private World theWorld;
-	private RenderEngine renderEngine;
-	private List worldRenderersToUpdate = new ArrayList();
+	public RenderEngine renderEngine;
+	private List worldRenderersToUpdate;
 	private WorldRenderer[] sortedWorldRenderers;
 	private WorldRenderer[] worldRenderers;
 	private int renderChunksWide;
@@ -25,8 +28,8 @@
 	private Minecraft mc;
 	private RenderBlocks globalRenderBlocks;
 	private IntBuffer glOcclusionQueryBase;
-	private boolean occlusionEnabled = false;
-	private int cloudTickCounter = 0;
+	private boolean occlusionEnabled;
+	private int cloudTickCounter;
 	private int starGLCallList;
 	private int glSkyList;
 	private int glSkyList2;
@@ -36,40 +39,57 @@
 	private int maxBlockX;
 	private int maxBlockY;
 	private int maxBlockZ;
-	private int renderDistance = -1;
-	private int renderEntitiesStartupCounter = 2;
+	private int renderDistance;
+	private int renderEntitiesStartupCounter;
 	private int countEntitiesTotal;
 	private int countEntitiesRendered;
 	private int countEntitiesHidden;
-	int[] dummyBuf50k = new int['\uc350'];
-	IntBuffer occlusionResult = GLAllocation.createDirectIntBuffer(64);
+	int[] dummyBuf50k;
+	IntBuffer occlusionResult;
 	private int renderersLoaded;
 	private int renderersBeingClipped;
 	private int renderersBeingOccluded;
 	private int renderersBeingRendered;
 	private int renderersSkippingRenderPass;
-	private List glRenderLists = new ArrayList();
-	private RenderList[] allRenderLists = new RenderList[]{new RenderList(), new RenderList(), new RenderList(), new RenderList()};
-	int dummyRenderInt = 0;
-	int unusedGLCallList = GLAllocation.generateDisplayLists(1);
-	double prevSortX = -9999.0D;
-	double prevSortY = -9999.0D;
-	double prevSortZ = -9999.0D;
+	private List glRenderLists;
+	private RenderList[] allRenderLists;
+	int dummyRenderInt;
+	int unusedGLCallList;
+	double prevSortX;
+	double prevSortY;
+	double prevSortZ;
 	public float damagePartialTime;
-	int frustumCheckOffset = 0;
+	int frustumCheckOffset;
 
-	public RenderGlobal(Minecraft var1, RenderEngine var2) {
-		this.mc = var1;
-		this.renderEngine = var2;
-		byte var3 = 64;
-		this.glRenderListBase = GLAllocation.generateDisplayLists(var3 * var3 * var3 * 3);
-		this.occlusionEnabled = var1.getOpenGlCapsChecker().checkARBOcclusion();
+	public void RenderHub(Minecraft minecraft, RenderEngine aee) {
+		//super();
+		this.tileEntities = new ArrayList();
+		this.worldRenderersToUpdate = Collections.synchronizedList(new ArrayList());
+		this.occlusionEnabled = false;
+		this.cloudTickCounter = 0;
+		this.renderDistance = -1;
+		this.renderEntitiesStartupCounter = 2;
+		this.dummyBuf50k = new int[50000];
+		this.occlusionResult = GLAllocation.createDirectIntBuffer(64);
+		this.glRenderLists = new ArrayList();
+		this.allRenderLists = new RenderList[]{new RenderList(), new RenderList(), new RenderList(), new RenderList()};
+		this.dummyRenderInt = 0;
+		this.unusedGLCallList = GLAllocation.generateDisplayLists(1);
+		this.prevSortX = -9999.0D;
+		this.prevSortY = -9999.0D;
+		this.prevSortZ = -9999.0D;
+		this.frustumCheckOffset = 0;
+		this.mc = minecraft;
+		this.renderEngine = aee;
+		byte b3 = 64;
+		this.glRenderListBase = GLAllocation.generateDisplayLists(b3 * b3 * b3 * 3);
+		this.occlusionEnabled = minecraft.getOpenGlCapsChecker().checkARBOcclusion();
 		if(this.occlusionEnabled) {
 			this.occlusionResult.clear();
-			this.glOcclusionQueryBase = GLAllocation.createDirectIntBuffer(var3 * var3 * var3);
+			this.glOcclusionQueryBase = GLAllocation.createDirectIntBuffer(b3 * b3 * b3);
 			this.glOcclusionQueryBase.clear();
 			this.glOcclusionQueryBase.position(0);
-			this.glOcclusionQueryBase.limit(var3 * var3 * var3);
+			this.glOcclusionQueryBase.limit(b3 * b3 * b3);
 			ARBOcclusionQuery.glGenQueriesARB(this.glOcclusionQueryBase);
 		}
 
@@ -79,93 +99,93 @@
 		this.renderStars();
 		GL11.glEndList();
 		GL11.glPopMatrix();
-		Tessellator var4 = Tessellator.instance;
+		Tessellator tessellator4 = Tessellator.instance;
 		this.glSkyList = this.starGLCallList + 1;
 		GL11.glNewList(this.glSkyList, GL11.GL_COMPILE);
-		byte var6 = 64;
-		int var7 = 256 / var6 + 2;
-		float var5 = 16.0F;
+		byte b5 = 64;
+		int i6 = 256 / b5 + 2;
+		float f7 = 16.0F;
 
-		int var8;
-		int var9;
-		for(var8 = -var6 * var7; var8 <= var6 * var7; var8 += var6) {
-			for(var9 = -var6 * var7; var9 <= var6 * var7; var9 += var6) {
-				var4.startDrawingQuads();
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + var6));
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + var6));
-				var4.draw();
+		int i8;
+		int i9;
+		for(i8 = -b5 * i6; i8 <= b5 * i6; i8 += b5) {
+			for(i9 = -b5 * i6; i9 <= b5 * i6; i9 += b5) {
+				tessellator4.startDrawingQuads();
+				tessellator4.addVertex((double)(i8 + 0), (double)f7, (double)(i9 + 0));
+				tessellator4.addVertex((double)(i8 + b5), (double)f7, (double)(i9 + 0));
+				tessellator4.addVertex((double)(i8 + b5), (double)f7, (double)(i9 + b5));
+				tessellator4.addVertex((double)(i8 + 0), (double)f7, (double)(i9 + b5));
+				tessellator4.draw();
 			}
 		}
 
 		GL11.glEndList();
 		this.glSkyList2 = this.starGLCallList + 2;
 		GL11.glNewList(this.glSkyList2, GL11.GL_COMPILE);
-		var5 = -16.0F;
-		var4.startDrawingQuads();
+		f7 = -16.0F;
+		tessellator4.startDrawingQuads();
 
-		for(var8 = -var6 * var7; var8 <= var6 * var7; var8 += var6) {
-			for(var9 = -var6 * var7; var9 <= var6 * var7; var9 += var6) {
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + var6));
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + var6));
+		for(i8 = -b5 * i6; i8 <= b5 * i6; i8 += b5) {
+			for(i9 = -b5 * i6; i9 <= b5 * i6; i9 += b5) {
+				tessellator4.addVertex((double)(i8 + b5), (double)f7, (double)(i9 + 0));
+				tessellator4.addVertex((double)(i8 + 0), (double)f7, (double)(i9 + 0));
+				tessellator4.addVertex((double)(i8 + 0), (double)f7, (double)(i9 + b5));
+				tessellator4.addVertex((double)(i8 + b5), (double)f7, (double)(i9 + b5));
 			}
 		}
 
-		var4.draw();
+		tessellator4.draw();
 		GL11.glEndList();
 	}
 
-	private void renderStars() {
-		Random var1 = new Random(10842L);
-		Tessellator var2 = Tessellator.instance;
-		var2.startDrawingQuads();
-
-		for(int var3 = 0; var3 < 1500; ++var3) {
-			double var4 = (double)(var1.nextFloat() * 2.0F - 1.0F);
-			double var6 = (double)(var1.nextFloat() * 2.0F - 1.0F);
-			double var8 = (double)(var1.nextFloat() * 2.0F - 1.0F);
-			double var10 = (double)(0.25F + var1.nextFloat() * 0.25F);
-			double var12 = var4 * var4 + var6 * var6 + var8 * var8;
-			if(var12 < 1.0D && var12 > 0.01D) {
-				var12 = 1.0D / Math.sqrt(var12);
-				var4 *= var12;
-				var6 *= var12;
-				var8 *= var12;
-				double var14 = var4 * 100.0D;
-				double var16 = var6 * 100.0D;
-				double var18 = var8 * 100.0D;
-				double var20 = Math.atan2(var4, var8);
-				double var22 = Math.sin(var20);
-				double var24 = Math.cos(var20);
-				double var26 = Math.atan2(Math.sqrt(var4 * var4 + var8 * var8), var6);
-				double var28 = Math.sin(var26);
-				double var30 = Math.cos(var26);
-				double var32 = var1.nextDouble() * Math.PI * 2.0D;
-				double var34 = Math.sin(var32);
-				double var36 = Math.cos(var32);
-
-				for(int var38 = 0; var38 < 4; ++var38) {
-					double var39 = 0.0D;
-					double var41 = (double)((var38 & 2) - 1) * var10;
-					double var43 = (double)((var38 + 1 & 2) - 1) * var10;
-					double var47 = var41 * var36 - var43 * var34;
-					double var49 = var43 * var36 + var41 * var34;
-					double var53 = var47 * var28 + var39 * var30;
-					double var55 = var39 * var28 - var47 * var30;
-					double var57 = var55 * var22 - var49 * var24;
-					double var61 = var49 * var22 + var55 * var24;
-					var2.addVertex(var14 + var57, var16 + var53, var18 + var61);
+	public void renderStars() {
+		Random random1 = new Random(10842L);
+		Tessellator tessellator2 = Tessellator.instance;
+		tessellator2.startDrawingQuads();
+
+		for(int i3 = 0; i3 < 1500; ++i3) {
+			double d4 = (double)(random1.nextFloat() * 2.0F - 1.0F);
+			double d6 = (double)(random1.nextFloat() * 2.0F - 1.0F);
+			double d8 = (double)(random1.nextFloat() * 2.0F - 1.0F);
+			double d10 = (double)(0.25F + random1.nextFloat() * 0.25F);
+			double d12 = d4 * d4 + d6 * d6 + d8 * d8;
+			if(d12 < 1.0D && d12 > 0.01D) {
+				d12 = 1.0D / Math.sqrt(d12);
+				d4 *= d12;
+				d6 *= d12;
+				d8 *= d12;
+				double d14 = d4 * 100.0D;
+				double d16 = d6 * 100.0D;
+				double d18 = d8 * 100.0D;
+				double d20 = Math.atan2(d4, d8);
+				double d22 = Math.sin(d20);
+				double d24 = Math.cos(d20);
+				double d26 = Math.atan2(Math.sqrt(d4 * d4 + d8 * d8), d6);
+				double d28 = Math.sin(d26);
+				double d30 = Math.cos(d26);
+				double d32 = random1.nextDouble() * Math.PI * 2.0D;
+				double d34 = Math.sin(d32);
+				double d36 = Math.cos(d32);
+
+				for(int i38 = 0; i38 < 4; ++i38) {
+					double d39 = 0.0D;
+					double d41 = (double)((i38 & 2) - 1) * d10;
+					double d43 = (double)((i38 + 1 & 2) - 1) * d10;
+					double d45 = d41 * d36 - d43 * d34;
+					double d47 = d43 * d36 + d41 * d34;
+					double d49 = d45 * d28 + d39 * d30;
+					double d51 = d39 * d28 - d45 * d30;
+					double d53 = d51 * d22 - d47 * d24;
+					double d55 = d47 * d22 + d51 * d24;
+					tessellator2.addVertex(d14 + d53, d16 + d49, d18 + d55);
 				}
 			}
 		}
 
-		var2.draw();
+		tessellator2.draw();
 	}
 
-	public void changeWorld(World var1) {
+	public void changeWorld(World vg) {
 		if(this.theWorld != null) {
 			this.theWorld.removeWorldAccess(this);
 		}
@@ -173,38 +193,45 @@
 		this.prevSortX = -9999.0D;
 		this.prevSortY = -9999.0D;
 		this.prevSortZ = -9999.0D;
-		RenderManager.instance.set(var1);
-		this.theWorld = var1;
-		this.globalRenderBlocks = new RenderBlocks(var1);
-		if(var1 != null) {
-			var1.addWorldAccess(this);
+		RenderManager.instance.set(vg);
+		this.theWorld = vg;
+		this.globalRenderBlocks = new RenderBlocks(vg);
+		if(vg != null) {
+			vg.addWorldAccess(this);
 			this.loadRenderers();
 		}
 
 	}
 
 	public void loadRenderers() {
-		Block.leaves.setGraphicsLevel(this.mc.options.fancyGraphics);
+		Block.leaves.setGraphicsLevel(this.mc.options.fancyGraphics == 1);
+		((BlockLeaves)ExtBlocks.FireSkyLeaves).setGraphicsLevel(this.mc.options.fancyGraphics == 1);
+		((BlockLeaves)ExtBlocks.TeaBush).setGraphicsLevel(this.mc.options.fancyGraphics == 1);
 		this.renderDistance = this.mc.options.renderDistance;
-		int var1;
+		int i1;
 		if(this.worldRenderers != null) {
-			for(var1 = 0; var1 < this.worldRenderers.length; ++var1) {
-				this.worldRenderers[var1].stopRendering();
+			for(i1 = 0; i1 < this.worldRenderers.length; ++i1) {
+				this.worldRenderers[i1].stopRendering();
 			}
 		}
 
-		var1 = 64 << 3 - this.renderDistance;
-		if(var1 > 400) {
-			var1 = 400;
-		}
-
-		this.renderChunksWide = var1 / 16 + 1;
+		if(this.renderDistance == 0) {
+			i1 = 1024;
+		} else {
+			i1 = 64 << 3 - Math.min(this.renderDistance - 1, 3);
+		}
+
+		if(this.renderDistance == 1) {
+			i1 = 400;
+		}
+
+		this.renderChunksWide = i1 / 16 + 1;
 		this.renderChunksTall = 8;
-		this.renderChunksDeep = var1 / 16 + 1;
+		this.renderChunksDeep = i1 / 16 + 1;
 		this.worldRenderers = new WorldRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
 		this.sortedWorldRenderers = new WorldRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
-		int var2 = 0;
-		int var3 = 0;
+		int i2 = 0;
+		int i3 = 0;
 		this.minBlockX = 0;
 		this.minBlockY = 0;
 		this.minBlockZ = 0;
@@ -212,148 +239,151 @@
 		this.maxBlockY = this.renderChunksTall;
 		this.maxBlockZ = this.renderChunksDeep;
 
-		int var4;
-		for(var4 = 0; var4 < this.worldRenderersToUpdate.size(); ++var4) {
-			((WorldRenderer)this.worldRenderersToUpdate.get(var4)).needsUpdate = false;
+		int i4;
+		for(i4 = 0; i4 < this.worldRenderersToUpdate.size(); ++i4) {
+			((WorldRenderer)this.worldRenderersToUpdate.get(i4)).needsUpdate = false;
 		}
 
 		this.worldRenderersToUpdate.clear();
 		this.tileEntities.clear();
 
-		for(var4 = 0; var4 < this.renderChunksWide; ++var4) {
-			for(int var5 = 0; var5 < this.renderChunksTall; ++var5) {
-				for(int var6 = 0; var6 < this.renderChunksDeep; ++var6) {
-					this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4] = new WorldRenderer(this.theWorld, this.tileEntities, var4 * 16, var5 * 16, var6 * 16, 16, this.glRenderListBase + var2);
+		for(i4 = 0; i4 < this.renderChunksWide; ++i4) {
+			for(int i5 = 0; i5 < this.renderChunksTall; ++i5) {
+				for(int i6 = 0; i6 < this.renderChunksDeep; ++i6) {
+					this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4] = new WorldRenderer(this.theWorld, this.tileEntities, i4 * 16, i5 * 16, i6 * 16, 16, this.glRenderListBase + i2);
 					if(this.occlusionEnabled) {
-						this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].glOcclusionQuery = this.glOcclusionQueryBase.get(var3);
+						this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4].glOcclusionQuery = this.glOcclusionQueryBase.get(i3);
 					}
 
-					this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].isWaitingOnOcclusionQuery = false;
-					this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].isVisible = true;
-					this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].isInFrustum = true;
-					this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].chunkIndex = var3++;
-					this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].markDirty();
-					this.sortedWorldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4] = this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4];
-					this.worldRenderersToUpdate.add(this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4]);
-					var2 += 3;
+					this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4].isWaitingOnOcclusionQuery = false;
+					this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4].isVisible = true;
+					this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4].isInFrustum = true;
+					this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4].chunkIndex = i3++;
+					this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4].markDirty();
+					this.sortedWorldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4] = this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4];
+					this.worldRenderersToUpdate.add(this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4]);
+					i2 += 3;
 				}
 			}
 		}
 
 		if(this.theWorld != null) {
-			EntityPlayerSP var7 = this.mc.thePlayer;
-			this.markRenderersForNewPosition(MathHelper.floor_double(var7.posX), MathHelper.floor_double(var7.posY), MathHelper.floor_double(var7.posZ));
-			Arrays.sort(this.sortedWorldRenderers, new EntitySorter(var7));
+			EntityPlayerSP entityPlayerSP7 = this.mc.thePlayer;
+			this.markRenderersForNewPosition(MathHelper.floor_double(entityPlayerSP7.posX), MathHelper.floor_double(entityPlayerSP7.posY), MathHelper.floor_double(entityPlayerSP7.posZ));
+			Arrays.sort(this.sortedWorldRenderers, new EntitySorter(entityPlayerSP7));
 		}
 
 		this.renderEntitiesStartupCounter = 2;
 	}
 
-	public void renderEntities(Vec3D var1, ICamera var2, float var3) {
+	public void renderEntities(Vec3D vector, ICamera camera, float renderPartialTick) {
 		if(this.renderEntitiesStartupCounter > 0) {
 			--this.renderEntitiesStartupCounter;
 		} else {
-			TileEntityRenderer.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.thePlayer, var3);
-			RenderManager.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.thePlayer, this.mc.options, var3);
+			TileEntityRenderer.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.thePlayer, renderPartialTick);
+			RenderManager.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.thePlayer, this.mc.options, renderPartialTick);
 			this.countEntitiesTotal = 0;
 			this.countEntitiesRendered = 0;
 			this.countEntitiesHidden = 0;
-			EntityPlayerSP var4 = this.mc.thePlayer;
-			RenderManager.renderPosX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var3;
-			RenderManager.renderPosY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)var3;
-			RenderManager.renderPosZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)var3;
-			TileEntityRenderer.staticPlayerX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var3;
-			TileEntityRenderer.staticPlayerY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)var3;
-			TileEntityRenderer.staticPlayerZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)var3;
-			List var5 = this.theWorld.getLoadedEntityList();
-			this.countEntitiesTotal = var5.size();
-
-			int var6;
-			for(var6 = 0; var6 < var5.size(); ++var6) {
-				Entity var7 = (Entity)var5.get(var6);
-				if(var7.isInRangeToRenderVec3D(var1) && var2.isBoundingBoxInFrustum(var7.boundingBox) && (var7 != this.mc.thePlayer || this.mc.options.thirdPersonView)) {
-					++this.countEntitiesRendered;
-					RenderManager.instance.renderEntity(var7, var3);
-				}
-			}
-
-			for(var6 = 0; var6 < this.tileEntities.size(); ++var6) {
-				TileEntityRenderer.instance.renderTileEntity((TileEntity)this.tileEntities.get(var6), var3);
-			}
-
+			EntityPlayerSP entityPlayerSP4 = this.mc.thePlayer;
+			RenderManager.renderPosX = entityPlayerSP4.lastTickPosX + (entityPlayerSP4.posX - entityPlayerSP4.lastTickPosX) * (double)renderPartialTick;
+			RenderManager.renderPosY = entityPlayerSP4.lastTickPosY + (entityPlayerSP4.posY - entityPlayerSP4.lastTickPosY) * (double)renderPartialTick;
+			RenderManager.renderPosZ = entityPlayerSP4.lastTickPosZ + (entityPlayerSP4.posZ - entityPlayerSP4.lastTickPosZ) * (double)renderPartialTick;
+			TileEntityRenderer.staticPlayerX = entityPlayerSP4.lastTickPosX + (entityPlayerSP4.posX - entityPlayerSP4.lastTickPosX) * (double)renderPartialTick;
+			TileEntityRenderer.staticPlayerY = entityPlayerSP4.lastTickPosY + (entityPlayerSP4.posY - entityPlayerSP4.lastTickPosY) * (double)renderPartialTick;
+			TileEntityRenderer.staticPlayerZ = entityPlayerSP4.lastTickPosZ + (entityPlayerSP4.posZ - entityPlayerSP4.lastTickPosZ) * (double)renderPartialTick;
+			List list5 = this.theWorld.getLoadedEntityList();
+			this.countEntitiesTotal = list5.size();
+
+			try {
+				int i6;
+				for(i6 = 0; i6 < list5.size(); ++i6) {
+					Entity entity7 = (Entity)list5.get(i6);
+					if(entity7.isInRangeToRenderVec3D(vector) && camera.isBoundingBoxInFrustum(entity7.boundingBox) && (entity7 != this.mc.thePlayer || this.mc.options.thirdPersonView)) {
+						++this.countEntitiesRendered;
+						RenderManager.instance.renderEntity(entity7, renderPartialTick);
+					}
+				}
+
+				for(i6 = 0; i6 < this.tileEntities.size(); ++i6) {
+					TileEntityRenderer.instance.renderTileEntity((TileEntity)this.tileEntities.get(i6), renderPartialTick);
+				}
+			} catch (NullPointerException nullPointerException8) {
+			}
 		}
+
 	}
 
 	public String getDebugInfoRenders() {
-		return "C: " + this.renderersBeingRendered + "/" + this.renderersLoaded + ". F: " + this.renderersBeingClipped + ", O: " + this.renderersBeingOccluded + ", E: " + this.renderersSkippingRenderPass;
+		return "C: " + this.renderersBeingRendered + "/" + this.renderersLoaded + ". F: " + this.renderersBeingClipped + ", O: " + this.renderersBeingOccluded + ", E: " + this.renderersSkippingRenderPass + ", DCs: " + this.mc.field_7318_1202Xh2to5K411eCdkp7924Hyz4tEuc93T8eZ9qf5D33M4HWlnu524P0Mlk2;
 	}
 
 	public String getDebugInfoEntities() {
 		return "E: " + this.countEntitiesRendered + "/" + this.countEntitiesTotal + ". B: " + this.countEntitiesHidden + ", I: " + (this.countEntitiesTotal - this.countEntitiesHidden - this.countEntitiesRendered);
 	}
 
-	private void markRenderersForNewPosition(int var1, int var2, int var3) {
-		var1 -= 8;
-		var2 -= 8;
-		var3 -= 8;
+	private void markRenderersForNewPosition(int integer1, int integer2, int integer3) {
+		integer1 -= 8;
+		integer2 -= 8;
+		integer3 -= 8;
 		this.minBlockX = Integer.MAX_VALUE;
 		this.minBlockY = Integer.MAX_VALUE;
 		this.minBlockZ = Integer.MAX_VALUE;
 		this.maxBlockX = Integer.MIN_VALUE;
 		this.maxBlockY = Integer.MIN_VALUE;
 		this.maxBlockZ = Integer.MIN_VALUE;
-		int var4 = this.renderChunksWide * 16;
-		int var5 = var4 / 2;
-
-		for(int var6 = 0; var6 < this.renderChunksWide; ++var6) {
-			int var7 = var6 * 16;
-			int var8 = var7 + var5 - var1;
-			if(var8 < 0) {
-				var8 -= var4 - 1;
-			}
-
-			var8 /= var4;
-			var7 -= var8 * var4;
-			if(var7 < this.minBlockX) {
-				this.minBlockX = var7;
-			}
-
-			if(var7 > this.maxBlockX) {
-				this.maxBlockX = var7;
-			}
-
-			for(int var9 = 0; var9 < this.renderChunksDeep; ++var9) {
-				int var10 = var9 * 16;
-				int var11 = var10 + var5 - var3;
-				if(var11 < 0) {
-					var11 -= var4 - 1;
-				}
-
-				var11 /= var4;
-				var10 -= var11 * var4;
-				if(var10 < this.minBlockZ) {
-					this.minBlockZ = var10;
-				}
-
-				if(var10 > this.maxBlockZ) {
-					this.maxBlockZ = var10;
-				}
-
-				for(int var12 = 0; var12 < this.renderChunksTall; ++var12) {
-					int var13 = var12 * 16;
-					if(var13 < this.minBlockY) {
-						this.minBlockY = var13;
-					}
-
-					if(var13 > this.maxBlockY) {
-						this.maxBlockY = var13;
-					}
-
-					WorldRenderer var14 = this.worldRenderers[(var9 * this.renderChunksTall + var12) * this.renderChunksWide + var6];
-					boolean var15 = var14.needsUpdate;
-					var14.setPosition(var7, var13, var10);
-					if(!var15 && var14.needsUpdate) {
-						this.worldRenderersToUpdate.add(var14);
+		int i4 = this.renderChunksWide * 16;
+		int i5 = i4 / 2;
+
+		for(int i6 = 0; i6 < this.renderChunksWide; ++i6) {
+			int i7 = i6 * 16;
+			int i8 = i7 + i5 - integer1;
+			if(i8 < 0) {
+				i8 -= i4 - 1;
+			}
+
+			i8 /= i4;
+			i7 -= i8 * i4;
+			if(i7 < this.minBlockX) {
+				this.minBlockX = i7;
+			}
+
+			if(i7 > this.maxBlockX) {
+				this.maxBlockX = i7;
+			}
+
+			for(int i9 = 0; i9 < this.renderChunksDeep; ++i9) {
+				int i10 = i9 * 16;
+				int i11 = i10 + i5 - integer3;
+				if(i11 < 0) {
+					i11 -= i4 - 1;
+				}
+
+				i11 /= i4;
+				i10 -= i11 * i4;
+				if(i10 < this.minBlockZ) {
+					this.minBlockZ = i10;
+				}
+
+				if(i10 > this.maxBlockZ) {
+					this.maxBlockZ = i10;
+				}
+
+				for(int i12 = 0; i12 < this.renderChunksTall; ++i12) {
+					int i13 = i12 * 16;
+					if(i13 < this.minBlockY) {
+						this.minBlockY = i13;
+					}
+
+					if(i13 > this.maxBlockY) {
+						this.maxBlockY = i13;
+					}
+
+					WorldRenderer worldRenderer14 = this.worldRenderers[(i9 * this.renderChunksTall + i12) * this.renderChunksWide + i6];
+					boolean z15 = worldRenderer14.needsUpdate;
+					worldRenderer14.setPosition(i7, i13, i10);
+					if(!z15 && worldRenderer14.needsUpdate) {
+						this.worldRenderersToUpdate.add(worldRenderer14);
 					}
 				}
 			}
@@ -361,12 +391,13 @@
 
 	}
 
-	public int sortAndRender(EntityPlayer var1, int var2, double var3) {
-		if(this.mc.options.renderDistance != this.renderDistance) {
+	public int sortAndRender(EntityPlayer gb, int integer, double double3) {
+		if(this.mc.options.renderDistance != this.renderDistance || Minecraft.field_7326_55yB6jYtSi94r555184CYoXDQ1YhyBnoS1lJaCCAbdj3rDu1RNzU8Gp4C3g5) {
+			Minecraft.field_7326_55yB6jYtSi94r555184CYoXDQ1YhyBnoS1lJaCCAbdj3rDu1RNzU8Gp4C3g5 = false;
 			this.loadRenderers();
 		}
 
-		if(var2 == 0) {
+		if(integer == 0) {
 			this.renderersLoaded = 0;
 			this.renderersBeingClipped = 0;
 			this.renderersBeingOccluded = 0;
@@ -374,38 +405,43 @@
 			this.renderersSkippingRenderPass = 0;
 		}
 
-		double var5 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * var3;
-		double var7 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * var3;
-		double var9 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * var3;
-		double var11 = var1.posX - this.prevSortX;
-		double var13 = var1.posY - this.prevSortY;
-		double var15 = var1.posZ - this.prevSortZ;
-		if(var11 * var11 + var13 * var13 + var15 * var15 > 16.0D) {
-			this.prevSortX = var1.posX;
-			this.prevSortY = var1.posY;
-			this.prevSortZ = var1.posZ;
-			this.markRenderersForNewPosition(MathHelper.floor_double(var1.posX), MathHelper.floor_double(var1.posY), MathHelper.floor_double(var1.posZ));
-			Arrays.sort(this.sortedWorldRenderers, new EntitySorter(var1));
+		double d5 = gb.lastTickPosX + (gb.posX - gb.lastTickPosX) * double3;
+		double d7 = gb.lastTickPosY + (gb.posY - gb.lastTickPosY) * double3;
+		double d9 = gb.lastTickPosZ + (gb.posZ - gb.lastTickPosZ) * double3;
+		double d11 = gb.posX - this.prevSortX;
+		double d13 = gb.posY - this.prevSortY;
+		double d15 = gb.posZ - this.prevSortZ;
+		if(d11 * d11 + d13 * d13 + d15 * d15 > 16.0D) {
+			this.prevSortX = gb.posX;
+			this.prevSortY = gb.posY;
+			this.prevSortZ = gb.posZ;
+			this.markRenderersForNewPosition(MathHelper.floor_double(gb.posX), MathHelper.floor_double(gb.posY), MathHelper.floor_double(gb.posZ));
+
+			try {
+				Arrays.sort(this.sortedWorldRenderers, new EntitySorter(gb));
+			} catch (IllegalArgumentException illegalArgumentException35) {
+			}
 		}
 
-		byte var17 = 0;
-		int var33;
-		if(this.occlusionEnabled && !this.mc.options.anaglyph && var2 == 0) {
-			byte var18 = 0;
-			int var19 = 16;
-			this.checkOcclusionQueryResult(var18, var19);
+		byte b17 = 0;
+		int i18;
+		if(this.occlusionEnabled && !this.mc.options.anaglyph && integer == 0) {
+			byte b19 = 0;
+			int i20 = 16;
+			this.checkOcclusionQueryResult(b19, i20);
 
-			for(int var20 = var18; var20 < var19; ++var20) {
-				this.sortedWorldRenderers[var20].isVisible = true;
+			int i21;
+			for(i21 = b19; i21 < i20; ++i21) {
+				this.sortedWorldRenderers[i21].isVisible = true;
 			}
 
-			var33 = var17 + this.renderSortedRenderers(var18, var19, var2, var3);
+			i18 = b17 + this.renderSortedRenderers(b19, i20, integer, double3);
 
 			do {
-				int var34 = var19;
-				var19 *= 2;
-				if(var19 > this.sortedWorldRenderers.length) {
-					var19 = this.sortedWorldRenderers.length;
+				i21 = i20;
+				i20 *= 2;
+				if(i20 > this.sortedWorldRenderers.length) {
+					i20 = this.sortedWorldRenderers.length;
 				}
 
 				GL11.glDisable(GL11.GL_TEXTURE_2D);
@@ -414,42 +450,42 @@
 				GL11.glDisable(GL11.GL_FOG);
 				GL11.glColorMask(false, false, false, false);
 				GL11.glDepthMask(false);
-				this.checkOcclusionQueryResult(var34, var19);
+				this.checkOcclusionQueryResult(i21, i20);
 				GL11.glPushMatrix();
-				float var35 = 0.0F;
-				float var21 = 0.0F;
-				float var22 = 0.0F;
+				float f22 = 0.0F;
+				float f23 = 0.0F;
+				float f24 = 0.0F;
 
-				for(int var23 = var34; var23 < var19; ++var23) {
-					if(this.sortedWorldRenderers[var23].skipAllRenderPasses()) {
-						this.sortedWorldRenderers[var23].isInFrustum = false;
+				for(int i25 = i21; i25 < i20; ++i25) {
+					if(this.sortedWorldRenderers[i25].skipAllRenderPasses()) {
+						this.sortedWorldRenderers[i25].isInFrustum = false;
 					} else {
-						if(!this.sortedWorldRenderers[var23].isInFrustum) {
-							this.sortedWorldRenderers[var23].isVisible = true;
+						if(!this.sortedWorldRenderers[i25].isInFrustum) {
+							this.sortedWorldRenderers[i25].isVisible = true;
 						}
 
-						if(this.sortedWorldRenderers[var23].isInFrustum && !this.sortedWorldRenderers[var23].isWaitingOnOcclusionQuery) {
-							float var24 = MathHelper.sqrt_float(this.sortedWorldRenderers[var23].distanceToEntitySquared(var1));
-							int var25 = (int)(1.0F + var24 / 128.0F);
-							if(this.cloudTickCounter % var25 == var23 % var25) {
-								WorldRenderer var26 = this.sortedWorldRenderers[var23];
-								float var27 = (float)((double)var26.posXMinus - var5);
-								float var28 = (float)((double)var26.posYMinus - var7);
-								float var29 = (float)((double)var26.posZMinus - var9);
-								float var30 = var27 - var35;
-								float var31 = var28 - var21;
-								float var32 = var29 - var22;
-								if(var30 != 0.0F || var31 != 0.0F || var32 != 0.0F) {
-									GL11.glTranslatef(var30, var31, var32);
-									var35 += var30;
-									var21 += var31;
-									var22 += var32;
+						if(this.sortedWorldRenderers[i25].isInFrustum && !this.sortedWorldRenderers[i25].isWaitingOnOcclusionQuery) {
+							float f26 = MathHelper.sqrt_float(this.sortedWorldRenderers[i25].distanceToEntitySquared(gb));
+							int i27 = (int)(1.0F + f26 / 128.0F);
+							if(this.cloudTickCounter % i27 == i25 % i27) {
+								WorldRenderer worldRenderer28 = this.sortedWorldRenderers[i25];
+								float f29 = (float)((double)worldRenderer28.posXMinus - d5);
+								float f30 = (float)((double)worldRenderer28.posYMinus - d7);
+								float f31 = (float)((double)worldRenderer28.posZMinus - d9);
+								float f32 = f29 - f22;
+								float f33 = f30 - f23;
+								float f34 = f31 - f24;
+								if(f32 != 0.0F || f33 != 0.0F || f34 != 0.0F) {
+									GL11.glTranslatef(f32, f33, f34);
+									f22 += f32;
+									f23 += f33;
+									f24 += f34;
 								}
 
-								ARBOcclusionQuery.glBeginQueryARB(GL15.GL_SAMPLES_PASSED, this.sortedWorldRenderers[var23].glOcclusionQuery);
-								this.sortedWorldRenderers[var23].callOcclusionQueryList();
+								ARBOcclusionQuery.glBeginQueryARB(GL15.GL_SAMPLES_PASSED, this.sortedWorldRenderers[i25].glOcclusionQuery);
+								this.sortedWorldRenderers[i25].callOcclusionQueryList();
 								ARBOcclusionQuery.glEndQueryARB(GL15.GL_SAMPLES_PASSED);
-								this.sortedWorldRenderers[var23].isWaitingOnOcclusionQuery = true;
+								this.sortedWorldRenderers[i25].isWaitingOnOcclusionQuery = true;
 							}
 						}
 					}
@@ -461,94 +497,94 @@
 				GL11.glEnable(GL11.GL_TEXTURE_2D);
 				GL11.glEnable(GL11.GL_ALPHA_TEST);
 				GL11.glEnable(GL11.GL_FOG);
-				var33 += this.renderSortedRenderers(var34, var19, var2, var3);
-			} while(var19 < this.sortedWorldRenderers.length);
+				i18 += this.renderSortedRenderers(i21, i20, integer, double3);
+			} while(i20 < this.sortedWorldRenderers.length);
 		} else {
-			var33 = var17 + this.renderSortedRenderers(0, this.sortedWorldRenderers.length, var2, var3);
+			i18 = b17 + this.renderSortedRenderers(0, this.sortedWorldRenderers.length, integer, double3);
 		}
 
-		return var33;
+		return i18;
 	}
 
-	private void checkOcclusionQueryResult(int var1, int var2) {
-		for(int var3 = var1; var3 < var2; ++var3) {
-			if(this.sortedWorldRenderers[var3].isWaitingOnOcclusionQuery) {
+	private void checkOcclusionQueryResult(int integer1, int integer2) {
+		for(int i3 = integer1; i3 < integer2; ++i3) {
+			if(this.sortedWorldRenderers[i3].isWaitingOnOcclusionQuery) {
 				this.occlusionResult.clear();
-				ARBOcclusionQuery.glGetQueryObjectuARB(this.sortedWorldRenderers[var3].glOcclusionQuery, GL15.GL_QUERY_RESULT_AVAILABLE, this.occlusionResult);
+				ARBOcclusionQuery.glGetQueryObjectuARB(this.sortedWorldRenderers[i3].glOcclusionQuery, GL15.GL_QUERY_RESULT_AVAILABLE, this.occlusionResult);
 				if(this.occlusionResult.get(0) != 0) {
-					this.sortedWorldRenderers[var3].isWaitingOnOcclusionQuery = false;
+					this.sortedWorldRenderers[i3].isWaitingOnOcclusionQuery = false;
 					this.occlusionResult.clear();
-					ARBOcclusionQuery.glGetQueryObjectuARB(this.sortedWorldRenderers[var3].glOcclusionQuery, GL15.GL_QUERY_RESULT, this.occlusionResult);
-					this.sortedWorldRenderers[var3].isVisible = this.occlusionResult.get(0) != 0;
+					ARBOcclusionQuery.glGetQueryObjectuARB(this.sortedWorldRenderers[i3].glOcclusionQuery, GL15.GL_QUERY_RESULT, this.occlusionResult);
+					this.sortedWorldRenderers[i3].isVisible = this.occlusionResult.get(0) != 0;
 				}
 			}
 		}
 
 	}
 
-	private int renderSortedRenderers(int var1, int var2, int var3, double var4) {
+	private int renderSortedRenderers(int integer1, int integer2, int integer3, double double4) {
 		this.glRenderLists.clear();
-		int var6 = 0;
+		int i6 = 0;
 
-		for(int var7 = var1; var7 < var2; ++var7) {
-			if(var3 == 0) {
+		for(int i7 = integer1; i7 < integer2; ++i7) {
+			if(integer3 == 0) {
 				++this.renderersLoaded;
-				if(this.sortedWorldRenderers[var7].skipRenderPass[var3]) {
+				if(this.sortedWorldRenderers[i7].skipRenderPass[integer3]) {
 					++this.renderersSkippingRenderPass;
-				} else if(!this.sortedWorldRenderers[var7].isInFrustum) {
+				} else if(!this.sortedWorldRenderers[i7].isInFrustum) {
 					++this.renderersBeingClipped;
-				} else if(this.occlusionEnabled && !this.sortedWorldRenderers[var7].isVisible) {
+				} else if(this.occlusionEnabled && !this.sortedWorldRenderers[i7].isVisible) {
 					++this.renderersBeingOccluded;
 				} else {
 					++this.renderersBeingRendered;
 				}
 			}
 
-			if(!this.sortedWorldRenderers[var7].skipRenderPass[var3] && this.sortedWorldRenderers[var7].isInFrustum && this.sortedWorldRenderers[var7].isVisible) {
-				int var8 = this.sortedWorldRenderers[var7].getGLCallListForPass(var3);
-				if(var8 >= 0) {
-					this.glRenderLists.add(this.sortedWorldRenderers[var7]);
-					++var6;
-				}
-			}
-		}
-
-		EntityPlayerSP var19 = this.mc.thePlayer;
-		double var20 = var19.lastTickPosX + (var19.posX - var19.lastTickPosX) * var4;
-		double var10 = var19.lastTickPosY + (var19.posY - var19.lastTickPosY) * var4;
-		double var12 = var19.lastTickPosZ + (var19.posZ - var19.lastTickPosZ) * var4;
-		int var14 = 0;
-
-		int var15;
-		for(var15 = 0; var15 < this.allRenderLists.length; ++var15) {
-			this.allRenderLists[var15].reset();
-		}
-
-		for(var15 = 0; var15 < this.glRenderLists.size(); ++var15) {
-			WorldRenderer var16 = (WorldRenderer)this.glRenderLists.get(var15);
-			int var17 = -1;
-
-			for(int var18 = 0; var18 < var14; ++var18) {
-				if(this.allRenderLists[var18].isRenderedAt(var16.posXMinus, var16.posYMinus, var16.posZMinus)) {
-					var17 = var18;
-				}
-			}
-
-			if(var17 < 0) {
-				var17 = var14++;
-				this.allRenderLists[var17].setLocation(var16.posXMinus, var16.posYMinus, var16.posZMinus, var20, var10, var12);
-			}
-
-			this.allRenderLists[var17].render(var16.getGLCallListForPass(var3));
-		}
-
-		this.renderAllRenderLists(var3, var4);
-		return var6;
+			if(!this.sortedWorldRenderers[i7].skipRenderPass[integer3] && this.sortedWorldRenderers[i7].isInFrustum && this.sortedWorldRenderers[i7].isVisible) {
+				int i8 = this.sortedWorldRenderers[i7].getGLCallListForPass(integer3);
+				if(i8 >= 0) {
+					this.glRenderLists.add(this.sortedWorldRenderers[i7]);
+					++i6;
+				}
+			}
+		}
+
+		EntityPlayerSP entityPlayerSP19 = this.mc.thePlayer;
+		double d20 = entityPlayerSP19.lastTickPosX + (entityPlayerSP19.posX - entityPlayerSP19.lastTickPosX) * double4;
+		double d10 = entityPlayerSP19.lastTickPosY + (entityPlayerSP19.posY - entityPlayerSP19.lastTickPosY) * double4;
+		double d12 = entityPlayerSP19.lastTickPosZ + (entityPlayerSP19.posZ - entityPlayerSP19.lastTickPosZ) * double4;
+		int i14 = 0;
+
+		int i15;
+		for(i15 = 0; i15 < this.allRenderLists.length; ++i15) {
+			this.allRenderLists[i15].reset();
+		}
+
+		for(i15 = 0; i15 < this.glRenderLists.size(); ++i15) {
+			WorldRenderer worldRenderer16 = (WorldRenderer)this.glRenderLists.get(i15);
+			int i17 = -1;
+
+			for(int i18 = 0; i18 < i14; ++i18) {
+				if(this.allRenderLists[i18].isRenderedAt(worldRenderer16.posXMinus, worldRenderer16.posYMinus, worldRenderer16.posZMinus)) {
+					i17 = i18;
+				}
+			}
+
+			if(i17 < 0) {
+				i17 = i14++;
+				this.allRenderLists[i17].setLocation(worldRenderer16.posXMinus, worldRenderer16.posYMinus, worldRenderer16.posZMinus, d20, d10, d12);
+			}
+
+			this.allRenderLists[i17].render(worldRenderer16.getGLCallListForPass(integer3));
+		}
+
+		this.renderAllRenderLists(integer3, double4);
+		return i6;
 	}
 
-	public void renderAllRenderLists(int var1, double var2) {
-		for(int var4 = 0; var4 < this.allRenderLists.length; ++var4) {
-			this.allRenderLists[var4].render();
+	public void renderAllRenderLists(int integer, double double2) {
+		for(int i4 = 0; i4 < this.allRenderLists.length; ++i4) {
+			this.allRenderLists[i4].render();
 		}
 
 	}
@@ -557,28 +593,29 @@
 		++this.cloudTickCounter;
 	}
 
-	public void renderSky(float var1) {
+	public void renderSky(float renderPartialTick) {
+		boolean z2 = ScreenDebugMenu.dbg_conf_nebulaEvt || this.theWorld != null && this.theWorld.GetMilestone() % 10L == 0L && this.theWorld.GetMilestone() > 0L;
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
-		Vec3D var2 = this.theWorld.getSkyColor(var1);
-		float var3 = (float)var2.xCoord;
-		float var4 = (float)var2.yCoord;
-		float var5 = (float)var2.zCoord;
-		float var7;
-		float var8;
+		Vec3D vec3D3 = this.theWorld.getSkyColor(renderPartialTick);
+		float f4 = (float)vec3D3.xCoord;
+		float f5 = (float)vec3D3.yCoord;
+		float f6 = (float)vec3D3.zCoord;
+		float f7;
+		float f8;
 		if(this.mc.options.anaglyph) {
-			float var6 = (var3 * 30.0F + var4 * 59.0F + var5 * 11.0F) / 100.0F;
-			var7 = (var3 * 30.0F + var4 * 70.0F) / 100.0F;
-			var8 = (var3 * 30.0F + var5 * 70.0F) / 100.0F;
-			var3 = var6;
-			var4 = var7;
-			var5 = var8;
+			float f9 = (f4 * 30.0F + f5 * 59.0F + f6 * 11.0F) / 100.0F;
+			f7 = (f4 * 30.0F + f5 * 70.0F) / 100.0F;
+			f8 = (f4 * 30.0F + f6 * 70.0F) / 100.0F;
+			f4 = f9;
+			f5 = f7;
+			f6 = f8;
 		}
 
-		GL11.glColor3f(var3, var4, var5);
-		Tessellator var12 = Tessellator.instance;
+		GL11.glColor3f(f4, f5, f6);
+		Tessellator tessellator15 = Tessellator.instance;
 		GL11.glDepthMask(false);
 		GL11.glEnable(GL11.GL_FOG);
-		GL11.glColor3f(var3, var4, var5);
+		GL11.glColor3f(f4, f5, f6);
 		GL11.glCallList(this.glSkyList);
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 		GL11.glDisable(GL11.GL_FOG);
@@ -586,33 +623,40 @@
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_ONE, GL11.GL_ONE);
 		GL11.glPushMatrix();
-		var7 = 0.0F;
-		var8 = 0.0F;
-		float var9 = 0.0F;
+		f7 = 0.0F;
+		f8 = 0.0F;
+		float f10 = 0.0F;
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		GL11.glTranslatef(var7, var8, var9);
+		GL11.glTranslatef(f7, f8, f10);
 		GL11.glRotatef(0.0F, 0.0F, 0.0F, 1.0F);
-		GL11.glRotatef(this.theWorld.getCelestialAngle(var1) * 360.0F, 1.0F, 0.0F, 0.0F);
-		float var10 = 30.0F;
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/sun.png"));
-		var12.startDrawingQuads();
-		var12.addVertexWithUV((double)(-var10), 100.0D, (double)(-var10), 0.0D, 0.0D);
-		var12.addVertexWithUV((double)var10, 100.0D, (double)(-var10), 1.0D, 0.0D);
-		var12.addVertexWithUV((double)var10, 100.0D, (double)var10, 1.0D, 1.0D);
-		var12.addVertexWithUV((double)(-var10), 100.0D, (double)var10, 0.0D, 1.0D);
-		var12.draw();
-		var10 = 20.0F;
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/moon.png"));
-		var12.startDrawingQuads();
-		var12.addVertexWithUV((double)(-var10), -100.0D, (double)var10, 1.0D, 1.0D);
-		var12.addVertexWithUV((double)var10, -100.0D, (double)var10, 0.0D, 1.0D);
-		var12.addVertexWithUV((double)var10, -100.0D, (double)(-var10), 0.0D, 0.0D);
-		var12.addVertexWithUV((double)(-var10), -100.0D, (double)(-var10), 1.0D, 0.0D);
-		var12.draw();
+		GL11.glRotatef(this.theWorld.getCelestialAngle(renderPartialTick) * 360.0F, 1.0F, 0.0F, 0.0F);
+		float f11 = 30.0F;
+		String string12 = "/terrain/sun.png";
+		String string13 = "/terrain/moon.png";
+		if(z2) {
+			string12 = "/terrain/sun_n.png";
+			string13 = "/terrain/moon_n.png";
+		}
+
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture(string12));
+		tessellator15.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+		tessellator15.addVertexWithUV((double)(-f11), 100.0D, (double)(-f11), 0.0D, 0.0D);
+		tessellator15.addVertexWithUV((double)f11, 100.0D, (double)(-f11), 1.0D, 0.0D);
+		tessellator15.addVertexWithUV((double)f11, 100.0D, (double)f11, 1.0D, 1.0D);
+		tessellator15.addVertexWithUV((double)(-f11), 100.0D, (double)f11, 0.0D, 1.0D);
+		tessellator15.draw();
+		f11 = 20.0F;
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture(string13));
+		tessellator15.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+		tessellator15.addVertexWithUV((double)(-f11), -100.0D, (double)f11, 1.0D, 1.0D);
+		tessellator15.addVertexWithUV((double)f11, -100.0D, (double)f11, 0.0D, 1.0D);
+		tessellator15.addVertexWithUV((double)f11, -100.0D, (double)(-f11), 0.0D, 0.0D);
+		tessellator15.addVertexWithUV((double)(-f11), -100.0D, (double)(-f11), 1.0D, 0.0D);
+		tessellator15.draw();
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
-		float var11 = this.theWorld.getStarBrightness(var1);
-		if(var11 > 0.0F) {
-			GL11.glColor4f(var11, var11, var11, var11);
+		float f14 = this.theWorld.getStarBrightness(renderPartialTick);
+		if(f14 > 0.0F) {
+			GL11.glColor4f(f14, f14, f14, f14);
 			GL11.glCallList(this.starGLCallList);
 		}
 
@@ -621,192 +665,196 @@
 		GL11.glEnable(GL11.GL_ALPHA_TEST);
 		GL11.glEnable(GL11.GL_FOG);
 		GL11.glPopMatrix();
-		GL11.glColor3f(var3 * 0.2F + 0.04F, var4 * 0.2F + 0.04F, var5 * 0.6F + 0.1F);
+		GL11.glColor3f(f4 * 0.2F + 0.04F, f5 * 0.2F + 0.04F, f6 * 0.6F + 0.1F);
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
 		GL11.glCallList(this.glSkyList2);
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 		GL11.glDepthMask(true);
 	}
 
-	public void renderClouds(float var1) {
-		if(this.mc.options.fancyGraphics) {
-			this.renderCloudsFancy(var1);
+	public void renderClouds(float float1) {
+		if(this.mc.options.fancyGraphics == 1) {
+			this.renderCloudsFancy(float1);
 		} else {
 			GL11.glDisable(GL11.GL_CULL_FACE);
-			float var2 = (float)(this.mc.thePlayer.lastTickPosY + (this.mc.thePlayer.posY - this.mc.thePlayer.lastTickPosY) * (double)var1);
-			byte var3 = 32;
-			int var4 = 256 / var3;
-			Tessellator var5 = Tessellator.instance;
+			float f2 = (float)(this.mc.thePlayer.lastTickPosY + (this.mc.thePlayer.posY - this.mc.thePlayer.lastTickPosY) * (double)float1);
+			byte b3 = 32;
+			int i4 = 256 / b3;
+			Tessellator tessellator5 = Tessellator.instance;
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/clouds.png"));
-			GL11.glEnable(GL11.GL_BLEND);
+			if(this.mc.options.fancyGraphics == 1) {
+				GL11.glEnable(GL11.GL_BLEND);
+			}
+
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-			Vec3D var6 = this.theWorld.getCloudColor(var1);
-			float var7 = (float)var6.xCoord;
-			float var8 = (float)var6.yCoord;
-			float var9 = (float)var6.zCoord;
-			float var10;
+			Vec3D vec3D6 = this.theWorld.getCloudColor(float1);
+			float f7 = (float)vec3D6.xCoord;
+			float f8 = (float)vec3D6.yCoord;
+			float f9 = (float)vec3D6.zCoord;
+			float f10;
 			if(this.mc.options.anaglyph) {
-				var10 = (var7 * 30.0F + var8 * 59.0F + var9 * 11.0F) / 100.0F;
-				float var11 = (var7 * 30.0F + var8 * 70.0F) / 100.0F;
-				float var12 = (var7 * 30.0F + var9 * 70.0F) / 100.0F;
-				var7 = var10;
-				var8 = var11;
-				var9 = var12;
+				f10 = (f7 * 30.0F + f8 * 59.0F + f9 * 11.0F) / 100.0F;
+				float f11 = (f7 * 30.0F + f8 * 70.0F) / 100.0F;
+				float f12 = (f7 * 30.0F + f9 * 70.0F) / 100.0F;
+				f7 = f10;
+				f8 = f11;
+				f9 = f12;
 			}
 
-			var10 = 0.5F / 1024.0F;
-			double var22 = this.mc.thePlayer.prevPosX + (this.mc.thePlayer.posX - this.mc.thePlayer.prevPosX) * (double)var1 + (double)(((float)this.cloudTickCounter + var1) * 0.03F);
-			double var13 = this.mc.thePlayer.prevPosZ + (this.mc.thePlayer.posZ - this.mc.thePlayer.prevPosZ) * (double)var1;
-			int var15 = MathHelper.floor_double(var22 / 2048.0D);
-			int var16 = MathHelper.floor_double(var13 / 2048.0D);
-			var22 -= (double)(var15 * 2048);
-			var13 -= (double)(var16 * 2048);
-			float var17 = 120.0F - var2 + 0.33F;
-			float var18 = (float)(var22 * (double)var10);
-			float var19 = (float)(var13 * (double)var10);
-			var5.startDrawingQuads();
-			var5.setColorRGBA_F(var7, var8, var9, 0.8F);
+			f10 = 4.8828125E-4F;
+			double d22 = this.mc.thePlayer.prevPosX + (this.mc.thePlayer.posX - this.mc.thePlayer.prevPosX) * (double)float1 + (double)(((float)this.cloudTickCounter + float1) * 0.03F);
+			double d13 = this.mc.thePlayer.prevPosZ + (this.mc.thePlayer.posZ - this.mc.thePlayer.prevPosZ) * (double)float1;
+			int i15 = MathHelper.floor_double(d22 / 2048.0D);
+			int i16 = MathHelper.floor_double(d13 / 2048.0D);
+			d22 -= (double)(i15 * 2048);
+			d13 -= (double)(i16 * 2048);
+			float f17 = 120.0F - f2 + 0.33F;
+			float f18 = (float)(d22 * (double)f10);
+			float f19 = (float)(d13 * (double)f10);
+			tessellator5.startDrawingQuads();
+			tessellator5.setColorRGBA_F(f7, f8, f9, 0.8F);
 
-			for(int var20 = -var3 * var4; var20 < var3 * var4; var20 += var3) {
-				for(int var21 = -var3 * var4; var21 < var3 * var4; var21 += var3) {
-					var5.addVertexWithUV((double)(var20 + 0), (double)var17, (double)(var21 + var3), (double)((float)(var20 + 0) * var10 + var18), (double)((float)(var21 + var3) * var10 + var19));
-					var5.addVertexWithUV((double)(var20 + var3), (double)var17, (double)(var21 + var3), (double)((float)(var20 + var3) * var10 + var18), (double)((float)(var21 + var3) * var10 + var19));
-					var5.addVertexWithUV((double)(var20 + var3), (double)var17, (double)(var21 + 0), (double)((float)(var20 + var3) * var10 + var18), (double)((float)(var21 + 0) * var10 + var19));
-					var5.addVertexWithUV((double)(var20 + 0), (double)var17, (double)(var21 + 0), (double)((float)(var20 + 0) * var10 + var18), (double)((float)(var21 + 0) * var10 + var19));
+			for(int i20 = -b3 * i4; i20 < b3 * i4; i20 += b3) {
+				for(int i21 = -b3 * i4; i21 < b3 * i4; i21 += b3) {
+					tessellator5.addVertexWithUV((double)(i20 + 0), (double)f17, (double)(i21 + b3), (double)((float)(i20 + 0) * f10 + f18), (double)((float)(i21 + b3) * f10 + f19));
+					tessellator5.addVertexWithUV((double)(i20 + b3), (double)f17, (double)(i21 + b3), (double)((float)(i20 + b3) * f10 + f18), (double)((float)(i21 + b3) * f10 + f19));
+					tessellator5.addVertexWithUV((double)(i20 + b3), (double)f17, (double)(i21 + 0), (double)((float)(i20 + b3) * f10 + f18), (double)((float)(i21 + 0) * f10 + f19));
+					tessellator5.addVertexWithUV((double)(i20 + 0), (double)f17, (double)(i21 + 0), (double)((float)(i20 + 0) * f10 + f18), (double)((float)(i21 + 0) * f10 + f19));
 				}
 			}
 
-			var5.draw();
+			tessellator5.draw();
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 			GL11.glDisable(GL11.GL_BLEND);
 			GL11.glEnable(GL11.GL_CULL_FACE);
 		}
+
 	}
 
-	public void renderCloudsFancy(float var1) {
+	public void renderCloudsFancy(float float1) {
 		GL11.glDisable(GL11.GL_CULL_FACE);
-		float var2 = (float)(this.mc.thePlayer.lastTickPosY + (this.mc.thePlayer.posY - this.mc.thePlayer.lastTickPosY) * (double)var1);
-		Tessellator var3 = Tessellator.instance;
-		float var4 = 12.0F;
-		float var5 = 4.0F;
-		double var6 = (this.mc.thePlayer.prevPosX + (this.mc.thePlayer.posX - this.mc.thePlayer.prevPosX) * (double)var1 + (double)(((float)this.cloudTickCounter + var1) * 0.03F)) / (double)var4;
-		double var8 = (this.mc.thePlayer.prevPosZ + (this.mc.thePlayer.posZ - this.mc.thePlayer.prevPosZ) * (double)var1) / (double)var4 + (double)0.33F;
-		float var10 = 108.0F - var2 + 0.33F;
-		int var11 = MathHelper.floor_double(var6 / 2048.0D);
-		int var12 = MathHelper.floor_double(var8 / 2048.0D);
-		var6 -= (double)(var11 * 2048);
-		var8 -= (double)(var12 * 2048);
+		float f2 = (float)(this.mc.thePlayer.lastTickPosY + (this.mc.thePlayer.posY - this.mc.thePlayer.lastTickPosY) * (double)float1);
+		Tessellator tessellator3 = Tessellator.instance;
+		float f4 = 12.0F;
+		float f5 = 4.0F;
+		double d6 = (this.mc.thePlayer.prevPosX + (this.mc.thePlayer.posX - this.mc.thePlayer.prevPosX) * (double)float1 + (double)(((float)this.cloudTickCounter + float1) * 0.03F)) / (double)f4;
+		double d8 = (this.mc.thePlayer.prevPosZ + (this.mc.thePlayer.posZ - this.mc.thePlayer.prevPosZ) * (double)float1) / (double)f4 + (double)0.33F;
+		float f10 = 108.0F - f2 + 0.33F;
+		int i11 = MathHelper.floor_double(d6 / 2048.0D);
+		int i12 = MathHelper.floor_double(d8 / 2048.0D);
+		d6 -= (double)(i11 * 2048);
+		d8 -= (double)(i12 * 2048);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/clouds.png"));
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-		Vec3D var13 = this.theWorld.getCloudColor(var1);
-		float var14 = (float)var13.xCoord;
-		float var15 = (float)var13.yCoord;
-		float var16 = (float)var13.zCoord;
-		float var17;
-		float var18;
-		float var19;
+		Vec3D vec3D13 = this.theWorld.getCloudColor(float1);
+		float f14 = (float)vec3D13.xCoord;
+		float f15 = (float)vec3D13.yCoord;
+		float f16 = (float)vec3D13.zCoord;
+		float f17;
+		float f18;
+		float f19;
 		if(this.mc.options.anaglyph) {
-			var17 = (var14 * 30.0F + var15 * 59.0F + var16 * 11.0F) / 100.0F;
-			var18 = (var14 * 30.0F + var15 * 70.0F) / 100.0F;
-			var19 = (var14 * 30.0F + var16 * 70.0F) / 100.0F;
-			var14 = var17;
-			var15 = var18;
-			var16 = var19;
+			f17 = (f14 * 30.0F + f15 * 59.0F + f16 * 11.0F) / 100.0F;
+			f18 = (f14 * 30.0F + f15 * 70.0F) / 100.0F;
+			f19 = (f14 * 30.0F + f16 * 70.0F) / 100.0F;
+			f14 = f17;
+			f15 = f18;
+			f16 = f19;
 		}
 
-		var17 = (float)(var6 * 0.0D);
-		var18 = (float)(var8 * 0.0D);
-		var19 = 0.00390625F;
-		var17 = (float)MathHelper.floor_double(var6) * var19;
-		var18 = (float)MathHelper.floor_double(var8) * var19;
-		float var20 = (float)(var6 - (double)MathHelper.floor_double(var6));
-		float var21 = (float)(var8 - (double)MathHelper.floor_double(var8));
-		byte var22 = 8;
-		byte var23 = 3;
-		float var24 = 1.0F / 1024.0F;
-		GL11.glScalef(var4, 1.0F, var4);
+		f17 = (float)(d6 * 0.0D);
+		f18 = (float)(d8 * 0.0D);
+		f19 = 0.00390625F;
+		f17 = (float)MathHelper.floor_double(d6) * f19;
+		f18 = (float)MathHelper.floor_double(d8) * f19;
+		float f20 = (float)(d6 - (double)MathHelper.floor_double(d6));
+		float f21 = (float)(d8 - (double)MathHelper.floor_double(d8));
+		byte b22 = 8;
+		byte b23 = 3;
+		float f24 = 9.765625E-4F;
+		GL11.glScalef(f4, 1.0F, f4);
 
-		for(int var25 = 0; var25 < 2; ++var25) {
-			if(var25 == 0) {
+		for(int i25 = 0; i25 < 2; ++i25) {
+			if(i25 == 0) {
 				GL11.glColorMask(false, false, false, false);
 			} else {
 				GL11.glColorMask(true, true, true, true);
 			}
 
-			for(int var26 = -var23 + 1; var26 <= var23; ++var26) {
-				for(int var27 = -var23 + 1; var27 <= var23; ++var27) {
-					var3.startDrawingQuads();
-					float var28 = (float)(var26 * var22);
-					float var29 = (float)(var27 * var22);
-					float var30 = var28 - var20;
-					float var31 = var29 - var21;
-					if(var10 > -var5 - 1.0F) {
-						var3.setColorRGBA_F(var14 * 0.7F, var15 * 0.7F, var16 * 0.7F, 0.8F);
-						var3.setNormal(0.0F, -1.0F, 0.0F);
-						var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-					}
-
-					if(var10 <= var5 + 1.0F) {
-						var3.setColorRGBA_F(var14, var15, var16, 0.8F);
-						var3.setNormal(0.0F, 1.0F, 0.0F);
-						var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5 - var24), (double)(var31 + (float)var22), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5 - var24), (double)(var31 + (float)var22), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5 - var24), (double)(var31 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5 - var24), (double)(var31 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-					}
-
-					var3.setColorRGBA_F(var14 * 0.9F, var15 * 0.9F, var16 * 0.9F, 0.8F);
-					int var32;
-					if(var26 > -1) {
-						var3.setNormal(-1.0F, 0.0F, 0.0F);
-
-						for(var32 = 0; var32 < var22; ++var32) {
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + var5), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + var5), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-						}
-					}
-
-					if(var26 <= 1) {
-						var3.setNormal(1.0F, 0.0F, 0.0F);
-
-						for(var32 = 0; var32 < var22; ++var32) {
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + var5), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + var5), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-						}
-					}
-
-					var3.setColorRGBA_F(var14 * 0.8F, var15 * 0.8F, var16 * 0.8F, 0.8F);
-					if(var27 > -1) {
-						var3.setNormal(0.0F, 0.0F, -1.0F);
-
-						for(var32 = 0; var32 < var22; ++var32) {
-							var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-						}
-					}
-
-					if(var27 <= 1) {
-						var3.setNormal(0.0F, 0.0F, 1.0F);
-
-						for(var32 = 0; var32 < var22; ++var32) {
-							var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-						}
-					}
-
-					var3.draw();
+			for(int i26 = -b23 + 1; i26 <= b23; ++i26) {
+				for(int i27 = -b23 + 1; i27 <= b23; ++i27) {
+					tessellator3.startDrawingQuads();
+					float f28 = (float)(i26 * b22);
+					float f29 = (float)(i27 * b22);
+					float f30 = f28 - f20;
+					float f31 = f29 - f21;
+					if(f10 > -f5 - 1.0F) {
+						tessellator3.setColorRGBA_F(f14 * 0.7F, f15 * 0.7F, f16 * 0.7F, 0.8F);
+						tessellator3.setNormal(0.0F, -1.0F, 0.0F);
+						tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + 0.0F), (double)(f31 + (float)b22), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+						tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + 0.0F), (double)(f31 + (float)b22), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+						tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + 0.0F), (double)(f31 + 0.0F), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+						tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + 0.0F), (double)(f31 + 0.0F), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+					}
+
+					if(f10 <= f5 + 1.0F) {
+						tessellator3.setColorRGBA_F(f14, f15, f16, 0.8F);
+						tessellator3.setNormal(0.0F, 1.0F, 0.0F);
+						tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + f5 - f24), (double)(f31 + (float)b22), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+						tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + f5 - f24), (double)(f31 + (float)b22), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+						tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + f5 - f24), (double)(f31 + 0.0F), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+						tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + f5 - f24), (double)(f31 + 0.0F), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+					}
+
+					tessellator3.setColorRGBA_F(f14 * 0.9F, f15 * 0.9F, f16 * 0.9F, 0.8F);
+					int i32;
+					if(i26 > -1) {
+						tessellator3.setNormal(-1.0F, 0.0F, 0.0F);
+
+						for(i32 = 0; i32 < b22; ++i32) {
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 0.0F), (double)(f10 + 0.0F), (double)(f31 + (float)b22), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 0.0F), (double)(f10 + f5), (double)(f31 + (float)b22), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 0.0F), (double)(f10 + f5), (double)(f31 + 0.0F), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 0.0F), (double)(f10 + 0.0F), (double)(f31 + 0.0F), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+						}
+					}
+
+					if(i26 <= 1) {
+						tessellator3.setNormal(1.0F, 0.0F, 0.0F);
+
+						for(i32 = 0; i32 < b22; ++i32) {
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 1.0F - f24), (double)(f10 + 0.0F), (double)(f31 + (float)b22), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 1.0F - f24), (double)(f10 + f5), (double)(f31 + (float)b22), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 1.0F - f24), (double)(f10 + f5), (double)(f31 + 0.0F), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 1.0F - f24), (double)(f10 + 0.0F), (double)(f31 + 0.0F), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+						}
+					}
+
+					tessellator3.setColorRGBA_F(f14 * 0.8F, f15 * 0.8F, f16 * 0.8F, 0.8F);
+					if(i27 > -1) {
+						tessellator3.setNormal(0.0F, 0.0F, -1.0F);
+
+						for(i32 = 0; i32 < b22; ++i32) {
+							tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + f5), (double)(f31 + (float)i32 + 0.0F), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + f5), (double)(f31 + (float)i32 + 0.0F), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + 0.0F), (double)(f31 + (float)i32 + 0.0F), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + 0.0F), (double)(f31 + (float)i32 + 0.0F), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+						}
+					}
+
+					if(i27 <= 1) {
+						tessellator3.setNormal(0.0F, 0.0F, 1.0F);
+
+						for(i32 = 0; i32 < b22; ++i32) {
+							tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + f5), (double)(f31 + (float)i32 + 1.0F - f24), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + f5), (double)(f31 + (float)i32 + 1.0F - f24), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + 0.0F), (double)(f31 + (float)i32 + 1.0F - f24), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + 0.0F), (double)(f31 + (float)i32 + 1.0F - f24), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+						}
+					}
+
+					tessellator3.draw();
 				}
 			}
 		}
@@ -816,104 +864,108 @@
 		GL11.glEnable(GL11.GL_CULL_FACE);
 	}
 
-	public boolean updateRenderers(EntityPlayer var1, boolean var2) {
-		Collections.sort(this.worldRenderersToUpdate, new RenderSorter(var1));
-		int var3 = this.worldRenderersToUpdate.size() - 1;
-		int var4 = this.worldRenderersToUpdate.size();
-
-		for(int var5 = 0; var5 < var4; ++var5) {
-			WorldRenderer var6 = (WorldRenderer)this.worldRenderersToUpdate.get(var3 - var5);
-			if(!var2) {
-				if(var6.distanceToEntitySquared(var1) > 1024.0F) {
-					if(var6.isInFrustum) {
-						if(var5 >= 3) {
+	public boolean updateRenderers(EntityPlayer gb, boolean boolean2) {
+		try {
+			Collections.sort(this.worldRenderersToUpdate, new RenderSorter(gb));
+		} catch (IllegalArgumentException illegalArgumentException7) {
+		}
+
+		int i3 = this.worldRenderersToUpdate.size() - 1;
+		int i4 = this.worldRenderersToUpdate.size();
+
+		for(int i5 = 0; i5 < i4; ++i5) {
+			WorldRenderer worldRenderer6 = (WorldRenderer)this.worldRenderersToUpdate.get(i3 - i5);
+			if(!boolean2) {
+				if(worldRenderer6.distanceToEntitySquared(gb) > 1024.0F) {
+					if(worldRenderer6.isInFrustum) {
+						if(i5 >= 3) {
 							return false;
 						}
-					} else if(var5 >= 1) {
+					} else if(i5 >= 1) {
 						return false;
 					}
 				}
-			} else if(!var6.isInFrustum) {
+			} else if(!worldRenderer6.isInFrustum) {
 				continue;
 			}
 
-			var6.updateRenderer();
-			this.worldRenderersToUpdate.remove(var6);
-			var6.needsUpdate = false;
+			worldRenderer6.updateRenderer();
+			this.worldRenderersToUpdate.remove(worldRenderer6);
+			worldRenderer6.needsUpdate = false;
 		}
 
 		return this.worldRenderersToUpdate.size() == 0;
 	}
 
-	public void drawBlockBreaking(EntityPlayer var1, MovingObjectPosition var2, int var3, ItemStack var4, float var5) {
-		Tessellator var6 = Tessellator.instance;
+	public void drawBlockBreaking(EntityPlayer gb, MovingObjectPosition ed, int integer, ItemStack iy, float float5) {
+		Tessellator tessellator6 = Tessellator.instance;
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glEnable(GL11.GL_ALPHA_TEST);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, (MathHelper.sin((float)System.currentTimeMillis() / 100.0F) * 0.2F + 0.4F) * 0.5F);
-		int var8;
-		if(var3 == 0) {
+		int i7;
+		if(integer == 0) {
 			if(this.damagePartialTime > 0.0F) {
 				GL11.glBlendFunc(GL11.GL_DST_COLOR, GL11.GL_SRC_COLOR);
-				int var7 = this.renderEngine.getTexture("/terrain.png");
-				GL11.glBindTexture(GL11.GL_TEXTURE_2D, var7);
+				int i8 = this.renderEngine.getTexture(Minecraft.field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L);
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, i8);
 				GL11.glColor4f(1.0F, 1.0F, 1.0F, 0.5F);
 				GL11.glPushMatrix();
-				var8 = this.theWorld.getBlockId(var2.blockX, var2.blockY, var2.blockZ);
-				Block var9 = var8 > 0 ? Block.blocksList[var8] : null;
+				i7 = this.theWorld.getBlockId(ed.blockX, ed.blockY, ed.blockZ);
+				Block block9 = i7 > 0 ? Block.blocksList[i7] : null;
 				GL11.glDisable(GL11.GL_ALPHA_TEST);
 				GL11.glPolygonOffset(-3.0F, -3.0F);
 				GL11.glEnable(GL11.GL_POLYGON_OFFSET_FILL);
-				var6.startDrawingQuads();
-				double var10 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var5;
-				double var12 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var5;
-				double var14 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var5;
-				var6.setTranslationD(-var10, -var12, -var14);
-				var6.disableColor();
-				if(var9 == null) {
-					var9 = Block.stone;
+				tessellator6.startDrawingQuads();
+				double d10 = gb.lastTickPosX + (gb.posX - gb.lastTickPosX) * (double)float5;
+				double d12 = gb.lastTickPosY + (gb.posY - gb.lastTickPosY) * (double)float5;
+				double d14 = gb.lastTickPosZ + (gb.posZ - gb.lastTickPosZ) * (double)float5;
+				tessellator6.setTranslationD(-d10, -d12, -d14);
+				tessellator6.disableColor();
+				if(block9 == null) {
+					block9 = Block.stone;
 				}
 
-				this.globalRenderBlocks.renderBlockUsingTexture(var9, var2.blockX, var2.blockY, var2.blockZ, 240 + (int)(this.damagePartialTime * 10.0F));
-				var6.draw();
-				var6.setTranslationD(0.0D, 0.0D, 0.0D);
+				this.globalRenderBlocks.renderBlockUsingTexture(block9, ed.blockX, ed.blockY, ed.blockZ, 496 + (int)(this.damagePartialTime * 10.0F));
+				tessellator6.draw();
+				tessellator6.setTranslationD(0.0D, 0.0D, 0.0D);
 				GL11.glPolygonOffset(0.0F, 0.0F);
 				GL11.glDisable(GL11.GL_POLYGON_OFFSET_FILL);
 				GL11.glEnable(GL11.GL_ALPHA_TEST);
 				GL11.glDepthMask(true);
 				GL11.glPopMatrix();
 			}
-		} else if(var4 != null) {
+		} else if(iy != null) {
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-			float var16 = MathHelper.sin((float)System.currentTimeMillis() / 100.0F) * 0.2F + 0.8F;
-			GL11.glColor4f(var16, var16, var16, MathHelper.sin((float)System.currentTimeMillis() / 200.0F) * 0.2F + 0.5F);
-			var8 = this.renderEngine.getTexture("/terrain.png");
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var8);
-			int var17 = var2.blockX;
-			int var18 = var2.blockY;
-			int var11 = var2.blockZ;
-			if(var2.sideHit == 0) {
-				--var18;
-			}
-
-			if(var2.sideHit == 1) {
-				++var18;
-			}
-
-			if(var2.sideHit == 2) {
-				--var11;
-			}
-
-			if(var2.sideHit == 3) {
-				++var11;
-			}
-
-			if(var2.sideHit == 4) {
-				--var17;
-			}
-
-			if(var2.sideHit == 5) {
-				++var17;
+			float f16 = MathHelper.sin((float)System.currentTimeMillis() / 100.0F) * 0.2F + 0.8F;
+			GL11.glColor4f(f16, f16, f16, MathHelper.sin((float)System.currentTimeMillis() / 200.0F) * 0.2F + 0.5F);
+			i7 = this.renderEngine.getTexture(Minecraft.field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L);
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, i7);
+			int i17 = ed.blockX;
+			int i18 = ed.blockY;
+			int i11 = ed.blockZ;
+			if(ed.sideHit == 0) {
+				--i18;
+			}
+
+			if(ed.sideHit == 1) {
+				++i18;
+			}
+
+			if(ed.sideHit == 2) {
+				--i11;
+			}
+
+			if(ed.sideHit == 3) {
+				++i11;
+			}
+
+			if(ed.sideHit == 4) {
+				--i17;
+			}
+
+			if(ed.sideHit == 5) {
+				++i17;
 			}
 		}
 
@@ -921,22 +973,22 @@
 		GL11.glDisable(GL11.GL_ALPHA_TEST);
 	}
 
-	public void drawSelectionBox(EntityPlayer var1, MovingObjectPosition var2, int var3, ItemStack var4, float var5) {
-		if(var3 == 0 && var2.typeOfHit == 0) {
+	public void drawSelectionBox(EntityPlayer gb, MovingObjectPosition ed, int integer, ItemStack iy, float float5) {
+		if(integer == 0 && ed.typeOfHit == 0) {
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 			GL11.glColor4f(0.0F, 0.0F, 0.0F, 0.4F);
 			GL11.glLineWidth(2.0F);
 			GL11.glDisable(GL11.GL_TEXTURE_2D);
 			GL11.glDepthMask(false);
-			float var6 = 0.002F;
-			int var7 = this.theWorld.getBlockId(var2.blockX, var2.blockY, var2.blockZ);
-			if(var7 > 0) {
-				Block.blocksList[var7].setBlockBoundsBasedOnState(this.theWorld, var2.blockX, var2.blockY, var2.blockZ);
-				double var8 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var5;
-				double var10 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var5;
-				double var12 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var5;
-				this.drawOutlinedBoundingBox(Block.blocksList[var7].getSelectedBoundingBoxFromPool(this.theWorld, var2.blockX, var2.blockY, var2.blockZ).expand((double)var6, (double)var6, (double)var6).getOffsetBoundingBox(-var8, -var10, -var12));
+			float f6 = 0.002F;
+			int i7 = this.theWorld.getBlockId(ed.blockX, ed.blockY, ed.blockZ);
+			if(i7 > 0) {
+				Block.blocksList[i7].setBlockBoundsBasedOnState(this.theWorld, ed.blockX, ed.blockY, ed.blockZ);
+				double d8 = gb.lastTickPosX + (gb.posX - gb.lastTickPosX) * (double)float5;
+				double d10 = gb.lastTickPosY + (gb.posY - gb.lastTickPosY) * (double)float5;
+				double d12 = gb.lastTickPosZ + (gb.posZ - gb.lastTickPosZ) * (double)float5;
+				this.drawOutlinedBoundingBox(Block.blocksList[i7].getSelectedBoundingBoxFromPool(this.theWorld, ed.blockX, ed.blockY, ed.blockZ).expand((double)f6, (double)f6, (double)f6).getOffsetBoundingBox(-d8, -d10, -d12));
 			}
 
 			GL11.glDepthMask(true);
@@ -946,168 +998,182 @@
 
 	}
 
-	private void drawOutlinedBoundingBox(AxisAlignedBB var1) {
-		Tessellator var2 = Tessellator.instance;
-		var2.startDrawing(3);
-		var2.addVertex(var1.minX, var1.minY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.minY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.minY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.minY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.minY, var1.minZ);
-		var2.draw();
-		var2.startDrawing(3);
-		var2.addVertex(var1.minX, var1.maxY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.maxY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.maxY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.maxY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.maxY, var1.minZ);
-		var2.draw();
-		var2.startDrawing(1);
-		var2.addVertex(var1.minX, var1.minY, var1.minZ);
-		var2.addVertex(var1.minX, var1.maxY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.minY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.maxY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.minY, var1.maxZ);
-		var2.addVertex(var1.maxX, var1.maxY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.minY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.maxY, var1.maxZ);
-		var2.draw();
+	private void drawOutlinedBoundingBox(AxisAlignedBB zb) {
+		Tessellator tessellator2 = Tessellator.instance;
+		tessellator2.func_10268_3G1to8O20W0e2IAxPtN5nia9CixxL69I1Ao9c5u7G19MPeSOCku1IA8g8iV3(3, true);
+		tessellator2.addVertex(zb.minX, zb.minY, zb.minZ);
+		tessellator2.addVertex(zb.maxX, zb.minY, zb.minZ);
+		tessellator2.addVertex(zb.maxX, zb.minY, zb.maxZ);
+		tessellator2.addVertex(zb.minX, zb.minY, zb.maxZ);
+		tessellator2.addVertex(zb.minX, zb.minY, zb.minZ);
+		tessellator2.draw();
+		tessellator2.func_10268_3G1to8O20W0e2IAxPtN5nia9CixxL69I1Ao9c5u7G19MPeSOCku1IA8g8iV3(3, true);
+		tessellator2.addVertex(zb.minX, zb.maxY, zb.minZ);
+		tessellator2.addVertex(zb.maxX, zb.maxY, zb.minZ);
+		tessellator2.addVertex(zb.maxX, zb.maxY, zb.maxZ);
+		tessellator2.addVertex(zb.minX, zb.maxY, zb.maxZ);
+		tessellator2.addVertex(zb.minX, zb.maxY, zb.minZ);
+		tessellator2.draw();
+		tessellator2.func_10268_3G1to8O20W0e2IAxPtN5nia9CixxL69I1Ao9c5u7G19MPeSOCku1IA8g8iV3(1, true);
+		tessellator2.addVertex(zb.minX, zb.minY, zb.minZ);
+		tessellator2.addVertex(zb.minX, zb.maxY, zb.minZ);
+		tessellator2.addVertex(zb.maxX, zb.minY, zb.minZ);
+		tessellator2.addVertex(zb.maxX, zb.maxY, zb.minZ);
+		tessellator2.addVertex(zb.maxX, zb.minY, zb.maxZ);
+		tessellator2.addVertex(zb.maxX, zb.maxY, zb.maxZ);
+		tessellator2.addVertex(zb.minX, zb.minY, zb.maxZ);
+		tessellator2.addVertex(zb.minX, zb.maxY, zb.maxZ);
+		tessellator2.draw();
 	}
 
-	public void markBlocksForUpdate(int var1, int var2, int var3, int var4, int var5, int var6) {
-		int var7 = MathHelper.bucketInt(var1, 16);
-		int var8 = MathHelper.bucketInt(var2, 16);
-		int var9 = MathHelper.bucketInt(var3, 16);
-		int var10 = MathHelper.bucketInt(var4, 16);
-		int var11 = MathHelper.bucketInt(var5, 16);
-		int var12 = MathHelper.bucketInt(var6, 16);
+	public void markBlocksForUpdate(int integer1, int integer2, int integer3, int integer4, int integer5, int integer6) {
+		int i7 = MathHelper.bucketInt(integer1, 16);
+		int i8 = MathHelper.bucketInt(integer2, 16);
+		int i9 = MathHelper.bucketInt(integer3, 16);
+		int i10 = MathHelper.bucketInt(integer4, 16);
+		int i11 = MathHelper.bucketInt(integer5, 16);
+		int i12 = MathHelper.bucketInt(integer6, 16);
 
-		for(int var13 = var7; var13 <= var10; ++var13) {
-			int var14 = var13 % this.renderChunksWide;
-			if(var14 < 0) {
-				var14 += this.renderChunksWide;
+		for(int i13 = i7; i13 <= i10; ++i13) {
+			int i14 = i13 % this.renderChunksWide;
+			if(i14 < 0) {
+				i14 += this.renderChunksWide;
 			}
 
-			for(int var15 = var8; var15 <= var11; ++var15) {
-				int var16 = var15 % this.renderChunksTall;
-				if(var16 < 0) {
-					var16 += this.renderChunksTall;
+			for(int i15 = i8; i15 <= i11; ++i15) {
+				int i16 = i15 % this.renderChunksTall;
+				if(i16 < 0) {
+					i16 += this.renderChunksTall;
 				}
 
-				for(int var17 = var9; var17 <= var12; ++var17) {
-					int var18 = var17 % this.renderChunksDeep;
-					if(var18 < 0) {
-						var18 += this.renderChunksDeep;
-					}
-
-					int var19 = (var18 * this.renderChunksTall + var16) * this.renderChunksWide + var14;
-					WorldRenderer var20 = this.worldRenderers[var19];
-					if(!var20.needsUpdate) {
-						this.worldRenderersToUpdate.add(var20);
-					}
-
-					var20.markDirty();
+				for(int i17 = i9; i17 <= i12; ++i17) {
+					int i18 = i17 % this.renderChunksDeep;
+					if(i18 < 0) {
+						i18 += this.renderChunksDeep;
+					}
+
+					int i19 = (i18 * this.renderChunksTall + i16) * this.renderChunksWide + i14;
+					WorldRenderer worldRenderer20 = this.worldRenderers[i19];
+					if(!worldRenderer20.needsUpdate) {
+						this.worldRenderersToUpdate.add(worldRenderer20);
+					}
+
+					worldRenderer20.markDirty();
 				}
 			}
 		}
 
 	}
 
-	public void markBlockAndNeighborsNeedsUpdate(int var1, int var2, int var3) {
-		this.markBlocksForUpdate(var1 - 1, var2 - 1, var3 - 1, var1 + 1, var2 + 1, var3 + 1);
-	}
-
-	public void markBlockRangeNeedsUpdate(int var1, int var2, int var3, int var4, int var5, int var6) {
-		this.markBlocksForUpdate(var1 - 1, var2 - 1, var3 - 1, var4 + 1, var5 + 1, var6 + 1);
-	}
-
-	public void clipRenderersByFrustum(ICamera var1, float var2) {
-		for(int var3 = 0; var3 < this.worldRenderers.length; ++var3) {
-			if(!this.worldRenderers[var3].skipAllRenderPasses() && (!this.worldRenderers[var3].isInFrustum || (var3 + this.frustumCheckOffset & 15) == 0)) {
-				this.worldRenderers[var3].updateInFrustum(var1);
+	public void markBlockAndNeighborsNeedsUpdate(int x, int y, int z) {
+		this.markBlocksForUpdate(x - 1, y - 1, z - 1, x + 1, y + 1, z + 1);
+	}
+
+	public void markBlockRangeNeedsUpdate(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		this.markBlocksForUpdate(minX - 1, minY - 1, minZ - 1, maxX + 1, maxY + 1, maxZ + 1);
+	}
+
+	public void clipRenderersByFrustum(ICamera dl, float float2) {
+		for(int i3 = 0; i3 < this.worldRenderers.length; ++i3) {
+			if(!this.worldRenderers[i3].skipAllRenderPasses() && (!this.worldRenderers[i3].isInFrustum || (i3 + this.frustumCheckOffset & 15) == 0)) {
+				this.worldRenderers[i3].updateInFrustum(dl);
 			}
 		}
 
 		++this.frustumCheckOffset;
 	}
 
-	public void playRecord(String var1, int var2, int var3, int var4) {
-		if(var1 != null) {
-			this.mc.ingameGUI.setRecordPlayingMessage("C418 - " + var1);
-		}
-
-		this.mc.sndManager.playStreaming(var1, (float)var2, (float)var3, (float)var4, 1.0F, 1.0F);
-	}
-
-	public void playSound(String var1, double var2, double var4, double var6, float var8, float var9) {
-		float var10 = 16.0F;
-		if(var8 > 1.0F) {
-			var10 *= var8;
-		}
-
-		if(this.mc.thePlayer.getDistanceSq(var2, var4, var6) < (double)(var10 * var10)) {
-			this.mc.sndManager.playSound(var1, (float)var2, (float)var4, (float)var6, var8, var9);
-		}
-
-	}
-
-	public void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-		double var14 = this.mc.thePlayer.posX - var2;
-		double var16 = this.mc.thePlayer.posY - var4;
-		double var18 = this.mc.thePlayer.posZ - var6;
-		if(var14 * var14 + var16 * var16 + var18 * var18 <= 256.0D) {
-			if(var1 == "bubble") {
-				this.mc.effectRenderer.addEffect(new EntityBubbleFX(this.theWorld, var2, var4, var6, var8, var10, var12));
-			} else if(var1 == "smoke") {
-				this.mc.effectRenderer.addEffect(new EntitySmokeFX(this.theWorld, var2, var4, var6));
-			} else if(var1 == "explode") {
-				this.mc.effectRenderer.addEffect(new EntityExplodeFX(this.theWorld, var2, var4, var6, var8, var10, var12));
-			} else if(var1 == "flame") {
-				this.mc.effectRenderer.addEffect(new EntityFlameFX(this.theWorld, var2, var4, var6, var8, var10, var12));
-			} else if(var1 == "lava") {
-				this.mc.effectRenderer.addEffect(new EntityLavaFX(this.theWorld, var2, var4, var6));
-			} else if(var1 == "splash") {
-				this.mc.effectRenderer.addEffect(new EntitySplashFX(this.theWorld, var2, var4, var6, var8, var10, var12));
-			} else if(var1 == "largesmoke") {
-				this.mc.effectRenderer.addEffect(new EntitySmokeFX(this.theWorld, var2, var4, var6, 2.5F));
-			} else if(var1 == "reddust") {
-				this.mc.effectRenderer.addEffect(new EntityReddustFX(this.theWorld, var2, var4, var6));
-			} else if(var1 == "snowballpoof") {
-				this.mc.effectRenderer.addEffect(new EntitySlimeFX(this.theWorld, var2, var4, var6, Item.snowball));
-			} else if(var1 == "slime") {
-				this.mc.effectRenderer.addEffect(new EntitySlimeFX(this.theWorld, var2, var4, var6, Item.slimeBall));
+	public void playRecord(String name, int x, int y, int z) {
+		if(name != null) {
+			this.mc.ingameGUI.setRecordPlayingMessage("[5] - " + name);
+		}
+
+		this.mc.sndManager.playStreaming(name, (float)x, (float)y, (float)z, 1.0F, 1.0F);
+	}
+
+	public void playSound(String name, double x, double y, double z, float volume, float pitch) {
+		float f10 = 16.0F;
+		if(volume > 1.0F) {
+			f10 *= volume;
+		}
+
+		if(this.mc.thePlayer.getDistanceSq(x, y, z) < (double)(f10 * f10)) {
+			this.mc.sndManager.playSound(name, (float)x, (float)y, (float)z, volume, pitch);
+		}
+
+	}
+
+	public void spawnParticle(String name, double x, double y, double z, double motionX, double motionY, double motionZ) {
+		double d14 = this.mc.thePlayer.posX - x;
+		double d16 = this.mc.thePlayer.posY - y;
+		double d18 = this.mc.thePlayer.posZ - z;
+		if(d14 * d14 + d16 * d16 + d18 * d18 <= 256.0D) {
+			if(Objects.equals(name, "bubble")) {
+				this.mc.effectRenderer.addEffect(new EntityBubbleFX(this.theWorld, x, y, z, motionX, motionY, motionZ));
+			} else if(Objects.equals(name, "smoke")) {
+				this.mc.effectRenderer.addEffect(new EntitySmokeFX(this.theWorld, x, y, z));
+			} else if(Objects.equals(name, "explode")) {
+				this.mc.effectRenderer.addEffect(new EntityExplodeFX(this.theWorld, x, y, z, motionX, motionY, motionZ));
+			} else if(Objects.equals(name, "flame")) {
+				this.mc.effectRenderer.addEffect(new EntityFlameFX(this.theWorld, x, y, z, motionX, motionY, motionZ));
+			} else if(Objects.equals(name, "lava")) {
+				this.mc.effectRenderer.addEffect(new EntityLavaFX(this.theWorld, x, y, z));
+			} else if(Objects.equals(name, "splash")) {
+				this.mc.effectRenderer.addEffect(new EntitySplashFX(this.theWorld, x, y, z, motionX, motionY, motionZ));
+			} else if(Objects.equals(name, "largesmoke")) {
+				this.mc.effectRenderer.addEffect(new EntitySmokeFX(this.theWorld, x, y, z, 2.5F));
+			} else if(Objects.equals(name, "reddust")) {
+				this.mc.effectRenderer.addEffect(new EntityReddustFX(this.theWorld, x, y, z));
+			} else if(Objects.equals(name, "snowballpoof")) {
+				this.mc.effectRenderer.addEffect(new EntitySlimeFX(this.theWorld, x, y, z, Item.snowball));
+			} else if(Objects.equals(name, "slime")) {
+				this.mc.effectRenderer.addEffect(new EntitySlimeFX(this.theWorld, x, y, z, Item.slimeBall));
+			} else if(Objects.equals(name, "snowflake1")) {
+				this.mc.effectRenderer.addEffect(new EntitySnowflakeFX(this.theWorld, x, y, z, motionX, motionY, motionZ, 1));
+			} else if(Objects.equals(name, "snowflake2")) {
+				this.mc.effectRenderer.addEffect(new EntitySnowflakeFX(this.theWorld, x, y, z, motionX, motionY, motionZ, 2));
+			} else if(Objects.equals(name, "snowflake3")) {
+				this.mc.effectRenderer.addEffect(new EntitySnowflakeFX(this.theWorld, x, y, z, motionX, motionY, motionZ, 3));
+			} else if(Objects.equals(name, "leaf")) {
+				this.mc.effectRenderer.addEffect(new EntityLeafFX(this.theWorld, x, y, z, motionX, motionY, motionZ));
+			} else if(Objects.equals(name, "snow1")) {
+				this.mc.effectRenderer.addEffect(new EntitySnowFX(this.theWorld, x, y, z, motionX, motionY, motionZ, 1));
+			} else if(Objects.equals(name, "snow2")) {
+				this.mc.effectRenderer.addEffect(new EntitySnowFX(this.theWorld, x, y, z, motionX, motionY, motionZ, 3));
+			} else if(Objects.equals(name, "snow3")) {
+				this.mc.effectRenderer.addEffect(new EntitySnowFX(this.theWorld, x, y, z, motionX, motionY, motionZ, 2));
 			}
-
-		}
-	}
-
-	public void obtainEntitySkin(Entity var1) {
-		if(var1.skinUrl != null) {
-			this.renderEngine.obtainImageData(var1.skinUrl, new ImageBufferDownload());
-		}
-
-	}
-
-	public void releaseEntitySkin(Entity var1) {
-		if(var1.skinUrl != null) {
-			this.renderEngine.releaseImageData(var1.skinUrl);
+		}
+
+	}
+
+	public void obtainEntitySkin(Entity entity) {
+		if(entity.skinUrl != null) {
+			this.renderEngine.obtainImageData(entity.skinUrl, new ImageBufferDownload());
+		}
+
+	}
+
+	public void releaseEntitySkin(Entity entity) {
+		if(entity.skinUrl != null) {
+			this.renderEngine.releaseImageData(entity.skinUrl);
 		}
 
 	}
 
 	public void updateAllRenderers() {
-		for(int var1 = 0; var1 < this.worldRenderers.length; ++var1) {
-			if(this.worldRenderers[var1].isChunkLit) {
-				if(!this.worldRenderers[var1].needsUpdate) {
-					this.worldRenderersToUpdate.add(this.worldRenderers[var1]);
+		for(int i1 = 0; i1 < this.worldRenderers.length; ++i1) {
+			if(this.worldRenderers[i1].isChunkLit) {
+				if(!this.worldRenderers[i1].needsUpdate) {
+					this.worldRenderersToUpdate.add(this.worldRenderers[i1]);
 				}
 
-				this.worldRenderers[var1].markDirty();
+				this.worldRenderers[i1].markDirty();
 			}
 		}
 
 	}
 
-	public void doNothingWithTileEntity(int var1, int var2, int var3, TileEntity var4) {
+	public void doNothingWithTileEntity(int x, int y, int z, TileEntity tileEntity) {
 	}
 }
--- net/minecraft/src/BlockWorkbench.java
+++ net/minecraft/src/BlockWorkbench.java
@@ -1,17 +1,17 @@
 package net.minecraft.src;
 
 public class BlockWorkbench extends Block {
-	protected BlockWorkbench(int var1) {
-		super(var1, Material.wood);
+	protected BlockWorkbench(int id) {
+		super(id, Material.wood);
 		this.blockIndexInTexture = 59;
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture - 16 : (var1 == 0 ? Block.planks.getBlockTextureFromSide(0) : (var1 != 2 && var1 != 4 ? this.blockIndexInTexture : this.blockIndexInTexture + 1));
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.blockIndexInTexture - 16 : (side == 0 ? Block.planks.getBlockTextureFromSide(0) : (side != 2 && side != 4 ? this.blockIndexInTexture : this.blockIndexInTexture + 1));
 	}
 
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		var5.displayWorkbenchGUI();
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		entityPlayer.displayWorkbenchGUI();
 		return true;
 	}
 }
--- net/minecraft/src/ChunkProviderClient.java
+++ net/minecraft/src/ChunkProviderClient.java
@@ -12,45 +12,45 @@
 	private List chunkListing = new ArrayList();
 	private World worldObj;
 
-	public ChunkProviderClient(World var1) {
-		this.blankChunk = new Chunk(var1, new byte[-Short.MIN_VALUE], 0, 0);
+	public ChunkProviderClient(World worldObj) {
+		this.blankChunk = new Chunk(worldObj, new byte[32768], 0, 0);
 		this.blankChunk.isChunkRendered = true;
 		this.blankChunk.neverSave = true;
-		this.worldObj = var1;
-	}
-
-	public boolean chunkExists(int var1, int var2) {
-		ChunkCoordinates var3 = new ChunkCoordinates(var1, var2);
-		return this.chunkMapping.containsKey(var3);
-	}
-
-	public void unloadChunk(int var1, int var2) {
-		Chunk var3 = this.provideChunk(var1, var2);
-		if(!var3.isChunkRendered) {
-			var3.onChunkUnload();
+		this.worldObj = worldObj;
+	}
+
+	public boolean chunkExists(int x, int z) {
+		ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(x, z);
+		return this.chunkMapping.containsKey(chunkCoordinates3);
+	}
+
+	public void unloadChunk(int chunkX, int chunkZ) {
+		Chunk chunk3 = this.provideChunk(chunkX, chunkZ);
+		if(!chunk3.isChunkRendered) {
+			chunk3.onChunkUnload();
 		}
 
-		this.chunkMapping.remove(new ChunkCoordinates(var1, var2));
-		this.chunkListing.remove(var3);
-	}
-
-	public Chunk loadChunk(int var1, int var2) {
-		ChunkCoordinates var3 = new ChunkCoordinates(var1, var2);
-		byte[] var4 = new byte[-Short.MIN_VALUE];
-		Chunk var5 = new Chunk(this.worldObj, var4, var1, var2);
-		Arrays.fill(var5.skylightMap.data, (byte)-1);
-		this.chunkMapping.put(var3, var5);
-		var5.isChunkLoaded = true;
-		return var5;
-	}
-
-	public Chunk provideChunk(int var1, int var2) {
-		ChunkCoordinates var3 = new ChunkCoordinates(var1, var2);
-		Chunk var4 = (Chunk)this.chunkMapping.get(var3);
-		return var4 == null ? this.blankChunk : var4;
-	}
-
-	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+		this.chunkMapping.remove(new ChunkCoordinates(chunkX, chunkZ));
+		this.chunkListing.remove(chunk3);
+	}
+
+	public Chunk loadChunk(int chunkX, int chunkZ) {
+		ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(chunkX, chunkZ);
+		byte[] b4 = new byte[32768];
+		Chunk chunk5 = new Chunk(this.worldObj, b4, chunkX, chunkZ);
+		Arrays.fill(chunk5.skylightMap.data, (byte)-1);
+		this.chunkMapping.put(chunkCoordinates3, chunk5);
+		chunk5.isChunkLoaded = true;
+		return chunk5;
+	}
+
+	public Chunk provideChunk(int x, int z) {
+		ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(x, z);
+		Chunk chunk4 = (Chunk)this.chunkMapping.get(chunkCoordinates3);
+		return chunk4 == null ? this.blankChunk : chunk4;
+	}
+
+	public boolean saveChunks(boolean z1, IProgressUpdate iProgressUpdate) {
 		return true;
 	}
 
@@ -62,6 +62,6 @@
 		return false;
 	}
 
-	public void populate(IChunkProvider var1, int var2, int var3) {
+	public void populate(IChunkProvider chunkProvider, int x, int z) {
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandSvRainworld.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+class CommandSvRainworld extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8550_69340G25Hi89M32S77rESb9g92gKZ70kjloC01uXE4Nxb4au9BRuJyuSgIcY;
+    
+    CommandSvRainworld(final CommandManager abb) {
+        this.field_8550_69340G25Hi89M32S77rESb9g92gKZ70kjloC01uXE4Nxb4au9BRuJyuSgIcY = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        if (ScreenDebugMenu.dbg_conf_enableCheats) {
+            InputHandler.mc.isRaining = ((int)arr[0] == 1);
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "" + InputHandler.mc.isRaining;
+    }
+}
--- /dev/null
+++ net/minecraft/src/CommandRClouds.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandRClouds extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8587_9Vc78x0A476d3Y4485sPfDK3oQ9xS9Af56eY8ZAtlg0StaEzDsM9YnQfhSXv;
+    
+    CommandRClouds(final CommandManager abb) {
+        this.field_8587_9Vc78x0A476d3Y4485sPfDK3oQ9xS9Af56eY8ZAtlg0StaEzDsM9YnQfhSXv = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.field_7316_28K4517FJT58jN9ucjj3zE1jE410Ltpi330vH7516f19B006E4Wco5x4Y0w5 = ((int)arr[0] == 1);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return InputHandler.mc.field_7316_28K4517FJT58jN9ucjj3zE1jE410Ltpi330vH7516f19B006E4Wco5x4Y0w5 ? "1" : "0";
+    }
+}
--- /dev/null
+++ net/minecraft/src/CommandSummonSpearmaster.java
@@ -1,0 +1,26 @@
+package net.minecraft.src;
+
+class CommandSummonSpearmaster extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8591_339A4qLRes7yjtnR0McQPOs0jgTn4AOtwnVJAC4N5JVEgNFba5l2xCUHEAu6;
+    
+    CommandSummonSpearmaster(final CommandManager abb) {
+        this.field_8591_339A4qLRes7yjtnR0McQPOs0jgTn4AOtwnVJAC4N5JVEgNFba5l2xCUHEAu6 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        final EntitySpearmaster entity = new EntitySpearmaster(InputHandler.mc.theWorld);
+        entity.setPosition(InputHandler.mc.thePlayer.posX, InputHandler.mc.thePlayer.posY, InputHandler.mc.thePlayer.posZ);
+        InputHandler.mc.theWorld.spawnEntityInWorld(entity);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+    
+    @Override
+    public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+        return false;
+    }
+}
--- /dev/null
+++ net/minecraft/src/EnumVendingMachineUnknownClass2.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+class EnumVendingMachineUnknownClass2 {
+    static final /* synthetic */ int[] field_11433_0M28h83Jjs6KmDr1Uir3SDVsJbhPQIEw8F28z7198re2u76qrhdn5SFW986a;
+
+    static {
+        field_11433_0M28h83Jjs6KmDr1Uir3SDVsJbhPQIEw8F28z7198re2u76qrhdn5SFW986a = new int[EnumVendingMachine.func_8621_1A4K8JmwLTo1bRceY319ILcN68Kz1yddU8DZWKk5CMsNwnMN4Amc8gdj0Pfv().length];
+        try {
+            EnumVendingMachineUnknownClass2.field_11433_0M28h83Jjs6KmDr1Uir3SDVsJbhPQIEw8F28z7198re2u76qrhdn5SFW986a[EnumVendingMachine.Armor.ordinal()] = 1;
+        }
+        catch (final NoSuchFieldError noSuchFieldError) {}
+        try {
+            EnumVendingMachineUnknownClass2.field_11433_0M28h83Jjs6KmDr1Uir3SDVsJbhPQIEw8F28z7198re2u76qrhdn5SFW986a[EnumVendingMachine.Dash.ordinal()] = 2;
+        }
+        catch (final NoSuchFieldError noSuchFieldError2) {}
+        try {
+            EnumVendingMachineUnknownClass2.field_11433_0M28h83Jjs6KmDr1Uir3SDVsJbhPQIEw8F28z7198re2u76qrhdn5SFW986a[EnumVendingMachine.HealthBoost.ordinal()] = 3;
+        }
+        catch (final NoSuchFieldError noSuchFieldError3) {}
+        try {
+            EnumVendingMachineUnknownClass2.field_11433_0M28h83Jjs6KmDr1Uir3SDVsJbhPQIEw8F28z7198re2u76qrhdn5SFW986a[EnumVendingMachine.QuickRevive.ordinal()] = 4;
+        }
+        catch (final NoSuchFieldError noSuchFieldError4) {}
+    }
+}
--- /dev/null
+++ net/minecraft/src/BlockSpongeOld.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+public class BlockSpongeOld extends BlockOld {
+	protected BlockSpongeOld(int integer) {
+		super(integer, Material.sponge);
+		this.blockIndexInTexture = 48;
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+		byte b5 = 2;
+
+		for(int i6 = integer2 - b5; i6 <= integer2 + b5; ++i6) {
+			for(int i7 = integer3 - b5; i7 <= integer3 + b5; ++i7) {
+				for(int i8 = integer4 - b5; i8 <= integer4 + b5; ++i8) {
+					if(vg.getBlockMaterial(i6, i7, i8) == Material.water) {
+						;
+					}
+				}
+			}
+		}
+
+	}
+
+	public void onBlockRemoval(World vg, int integer2, int integer3, int integer4) {
+		byte b5 = 2;
+
+		for(int i6 = integer2 - b5; i6 <= integer2 + b5; ++i6) {
+			for(int i7 = integer3 - b5; i7 <= integer3 + b5; ++i7) {
+				for(int i8 = integer4 - b5; i8 <= integer4 + b5; ++i8) {
+					vg.notifyBlocksOfNeighborChange(i6, i7, i8, vg.getBlockId(i6, i7, i8));
+				}
+			}
+		}
+
+	}
+}
--- net/minecraft/src/CanvasMinecraftApplet.java
+++ net/minecraft/src/CanvasMinecraftApplet.java
@@ -1,13 +1,14 @@
 package net.minecraft.src;
 
 import java.awt.Canvas;
+
 import net.minecraft.client.MinecraftApplet;
 
 public class CanvasMinecraftApplet extends Canvas {
 	final MinecraftApplet mcApplet;
 
-	public CanvasMinecraftApplet(MinecraftApplet var1) {
-		this.mcApplet = var1;
+	public CanvasMinecraftApplet(MinecraftApplet mcApplet) {
+		this.mcApplet = mcApplet;
 	}
 
 	public synchronized void addNotify() {
--- net/minecraft/src/BlockSnowBlock.java
+++ net/minecraft/src/BlockSnowBlock.java
@@ -3,23 +3,43 @@
 import java.util.Random;
 
 public class BlockSnowBlock extends Block {
-	protected BlockSnowBlock(int var1, int var2) {
-		super(var1, var2, Material.craftedSnow);
+	protected BlockSnowBlock(int id, int blockIndex) {
+		super(id, blockIndex, Material.craftedSnow);
 		this.setTickOnLoad(true);
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Item.snowball.shiftedIndex;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 4;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getSavedLightValue(EnumSkyBlock.Block, var2, var3, var4) > 11) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		double d6;
+		double d8;
+		if(random.nextBoolean()) {
+			d6 = (random.nextDouble() - 0.5D) * 0.1D;
+			d8 = (random.nextDouble() - 0.5D) * 0.1D;
+			world.spawnParticle("snow1", (double)x, (double)y, (double)z, d6, 0.8D, d8);
+		}
+
+		if(random.nextBoolean()) {
+			d6 = (random.nextDouble() - 0.5D) * 0.2D;
+			d8 = (random.nextDouble() - 0.5D) * 0.2D;
+			world.spawnParticle("snow2", (double)x, (double)y, (double)z, d6, 0.95D, d8);
+		}
+
+		if(random.nextBoolean()) {
+			d6 = (random.nextDouble() + 0.5D) * 0.2D;
+			d8 = (random.nextDouble() - 0.5D) * 0.1D;
+			world.spawnParticle("snow3", (double)x, (double)y, (double)z, d6, 0.45D, d8);
+		}
+
+		if(world.getSavedLightValue(EnumSkyBlock.Block, x, y, z) > 11) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
--- net/minecraft/src/RecipesTools.java
+++ net/minecraft/src/RecipesTools.java
@@ -4,13 +4,13 @@
 	private String[][] recipePatterns = new String[][]{{"XXX", " # ", " # "}, {"X", "#", "#"}, {"XX", "X#", " #"}, {"XX", " #", " #"}};
 	private Object[][] recipeItems = new Object[][]{{Block.planks, Block.cobblestone, Item.ingotIron, Item.diamond, Item.ingotGold}, {Item.pickaxeWood, Item.pickaxeStone, Item.pickaxeSteel, Item.pickaxeDiamond, Item.pickaxeGold}, {Item.shovelWood, Item.shovelStone, Item.shovel, Item.shovelDiamond, Item.shovelGold}, {Item.axeWood, Item.axeStone, Item.axeSteel, Item.axeDiamond, Item.axeGold}, {Item.hoeWood, Item.hoeStone, Item.hoeSteel, Item.hoeDiamond, Item.hoeGold}};
 
-	public void addRecipes(CraftingManager var1) {
-		for(int var2 = 0; var2 < this.recipeItems[0].length; ++var2) {
-			Object var3 = this.recipeItems[0][var2];
+	public void addRecipes(CraftingManager craftingManager) {
+		for(int i2 = 0; i2 < this.recipeItems[0].length; ++i2) {
+			Object object3 = this.recipeItems[0][i2];
 
-			for(int var4 = 0; var4 < this.recipeItems.length - 1; ++var4) {
-				Item var5 = (Item)this.recipeItems[var4 + 1][var2];
-				var1.addRecipe(new ItemStack(var5), new Object[]{this.recipePatterns[var4], Character.valueOf('#'), Item.stick, Character.valueOf('X'), var3});
+			for(int i4 = 0; i4 < this.recipeItems.length - 1; ++i4) {
+				Item item5 = (Item)this.recipeItems[i4 + 1][i2];
+				craftingManager.addRecipe(new ItemStack(item5), new Object[]{this.recipePatterns[i4], '#', Item.stick, 'X', object3});
 			}
 		}
 
--- net/minecraft/src/BlockStep.java
+++ net/minecraft/src/BlockStep.java
@@ -5,43 +5,45 @@
 public class BlockStep extends Block {
 	private boolean blockType;
 
-	public BlockStep(int var1, boolean var2) {
-		super(var1, 6, Material.rock);
-		this.blockType = var2;
-		if(!var2) {
+	public BlockStep(int integer1, int integer2, boolean boolean3) {
+		super(integer1, integer2, Material.rock);
+		this.blockType = boolean3;
+		if(!boolean3) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
 		}
 
 		this.setLightOpacity(255);
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 <= 1 ? 6 : 5;
+	public int getBlockTextureFromSide(int side) {
+		return side <= 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
 	}
 
 	public boolean isOpaqueCube() {
 		return this.blockType;
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
 		if(this == Block.stairSingle) {
+			;
 		}
+
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
+	public void onBlockAdded(World world, int x, int y, int z) {
 		if(this != Block.stairSingle) {
-			super.onBlockAdded(var1, var2, var3, var4);
+			super.onBlockAdded(world, x, y, z);
 		}
 
-		int var5 = var1.getBlockId(var2, var3 - 1, var4);
-		if(var5 == stairSingle.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-			var1.setBlockWithNotify(var2, var3 - 1, var4, Block.stairDouble.blockID);
+		int i5 = world.getBlockId(x, y - 1, z);
+		if(i5 == stairSingle.blockID) {
+			world.setBlockWithNotify(x, y, z, 0);
+			world.setBlockWithNotify(x, y - 1, z, Block.stairDouble.blockID);
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Block.stairSingle.blockID;
 	}
 
@@ -49,11 +51,11 @@
 		return this.blockType;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
 		if(this != Block.stairSingle) {
-			super.shouldSideBeRendered(var1, var2, var3, var4, var5);
+			super.shouldSideBeRendered(blockAccess, x, y, z, side);
 		}
 
-		return var5 == 1 ? true : (!super.shouldSideBeRendered(var1, var2, var3, var4, var5) ? false : (var5 == 0 ? true : var1.getBlockId(var2, var3, var4) != this.blockID));
+		return side == 1 ? true : (!super.shouldSideBeRendered(blockAccess, x, y, z, side) ? false : (side == 0 ? true : blockAccess.getBlockId(x, y, z) != this.blockID));
 	}
 }
--- net/minecraft/src/SoundPoolEntry.java
+++ net/minecraft/src/SoundPoolEntry.java
@@ -6,8 +6,8 @@
 	public String soundName;
 	public URL soundUrl;
 
-	public SoundPoolEntry(String var1, URL var2) {
-		this.soundName = var1;
-		this.soundUrl = var2;
+	public SoundPoolEntry(String string, URL uRL) {
+		this.soundName = string;
+		this.soundUrl = uRL;
 	}
 }
--- /dev/null
+++ net/minecraft/src/TileEntityFreezer.java
@@ -1,0 +1,207 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class TileEntityFreezer extends TileEntity implements IInventory {
+	private ItemStack[] field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL = new ItemStack[3];
+	private int field_9203_9DsyOa5HkkT6jQ43F0GMa5NEMtK7Q1OmE2Yni11hTF2z4ffl65F4CMA8oA3P = 0;
+	private int field_9202_5Q750NCoNQ4QOcYx2YMrIy37i735406nKPDgoDS2YwygIg66OV7Yhe8TKZs9 = 0;
+	private int field_9200_5eJgdqRh0pr0L3CiXP2m3Al74sS7oxaz08nP6xFhDouin6P1etVKUHQ95MNc = 0;
+	private boolean field_9201_194883f2bWi88923875Nj6Xddg1QFc1t06spr8oA22dMWkla9w1a31kj038W = false;
+
+	public int getSizeInventory() {
+		return this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL.length;
+	}
+
+	public ItemStack getStackInSlot(int slot) {
+		return this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[slot];
+	}
+
+	public void onInventoryChanged() {
+		super.onInventoryChanged();
+	}
+
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[slot] == null) {
+			return null;
+		} else {
+			ItemStack itemStack3;
+			if(this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[slot].stackSize <= stackSize) {
+				itemStack3 = this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[slot];
+				this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[slot] = null;
+			} else {
+				itemStack3 = this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[slot].splitStack(stackSize);
+				if(this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[slot].stackSize == 0) {
+					this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[slot] = null;
+				}
+			}
+
+			return itemStack3;
+		}
+	}
+
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[slot] = itemStack;
+		if(itemStack != null && itemStack.stackSize > this.getInventoryStackLimit()) {
+			itemStack.stackSize = this.getInventoryStackLimit();
+		}
+
+	}
+
+	public String getInvName() {
+		if(!this.field_9201_194883f2bWi88923875Nj6Xddg1QFc1t06spr8oA22dMWkla9w1a31kj038W) {
+			Random random1 = new Random(this.worldObj.randomSeed);
+			switch(random1.nextInt(2)) {
+			case 0:
+				this.field_9201_194883f2bWi88923875Nj6Xddg1QFc1t06spr8oA22dMWkla9w1a31kj038W = true;
+				this.worldObj.playSoundEffect((double)this.xCoord, (double)this.yCoord, (double)this.zCoord, "random.riff", 1.0F, 1.0F);
+				return "Weezer";
+			case 1:
+			default:
+				return "Freezer";
+			}
+		} else {
+			return "Freezer";
+		}
+	}
+
+	public int getInventoryStackLimit() {
+		return 64;
+	}
+
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		super.readFromNBT(nbttagcompound);
+		NBTTagList nBTTagList2 = nbttagcompound.getTagList("Items");
+		this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL = new ItemStack[this.getSizeInventory()];
+
+		for(int i3 = 0; i3 < nBTTagList2.tagCount(); ++i3) {
+			NBTTagCompound nBTTagCompound4 = (NBTTagCompound)nBTTagList2.tagAt(i3);
+			byte b5 = nBTTagCompound4.getByte("Slot");
+			if(b5 >= 0 && b5 < this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL.length) {
+				this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[b5] = new ItemStack(nBTTagCompound4);
+			}
+		}
+
+		this.field_9203_9DsyOa5HkkT6jQ43F0GMa5NEMtK7Q1OmE2Yni11hTF2z4ffl65F4CMA8oA3P = nbttagcompound.getShort("CoolTime");
+		this.field_9200_5eJgdqRh0pr0L3CiXP2m3Al74sS7oxaz08nP6xFhDouin6P1etVKUHQ95MNc = nbttagcompound.getShort("CookTime");
+		this.field_9203_9DsyOa5HkkT6jQ43F0GMa5NEMtK7Q1OmE2Yni11hTF2z4ffl65F4CMA8oA3P = this.func_9198_95PX0j323i64JFh83Uzc28t517Ze3t3S2QGrn76xXw1tXvyacv60i2b24g29(this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[1]);
+	}
+
+	public void writeToNBT(NBTTagCompound nbttagcompound) {
+		super.writeToNBT(nbttagcompound);
+		nbttagcompound.setShort("CoolTime", (short)this.field_9203_9DsyOa5HkkT6jQ43F0GMa5NEMtK7Q1OmE2Yni11hTF2z4ffl65F4CMA8oA3P);
+		nbttagcompound.setShort("CookTime", (short)this.field_9200_5eJgdqRh0pr0L3CiXP2m3Al74sS7oxaz08nP6xFhDouin6P1etVKUHQ95MNc);
+		NBTTagList nBTTagList2 = new NBTTagList();
+
+		for(int i3 = 0; i3 < this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL.length; ++i3) {
+			if(this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[i3] != null) {
+				NBTTagCompound nBTTagCompound4 = new NBTTagCompound();
+				nBTTagCompound4.setByte("Slot", (byte)i3);
+				this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[i3].writeToNBT(nBTTagCompound4);
+				nBTTagList2.setTag(nBTTagCompound4);
+			}
+		}
+
+		nbttagcompound.setTag("Items", nBTTagList2);
+	}
+
+	public int func_9196_2yn49xG0DV9O6VF0P1qm7UMj028vb0V5eFnBLE8I7MuPGZkJCIu8p5CCd419(int integer) {
+		return this.field_9200_5eJgdqRh0pr0L3CiXP2m3Al74sS7oxaz08nP6xFhDouin6P1etVKUHQ95MNc * integer / 200;
+	}
+
+	public int func_9193_8K3yE6ppzNQ76NQ089sE2PTCN4IO7VE51KP2efHtAWP8817c1LUvD3Nk71lp(int integer) {
+		if(this.field_9202_5Q750NCoNQ4QOcYx2YMrIy37i735406nKPDgoDS2YwygIg66OV7Yhe8TKZs9 == 0) {
+			this.field_9202_5Q750NCoNQ4QOcYx2YMrIy37i735406nKPDgoDS2YwygIg66OV7Yhe8TKZs9 = 200;
+		}
+
+		return this.field_9203_9DsyOa5HkkT6jQ43F0GMa5NEMtK7Q1OmE2Yni11hTF2z4ffl65F4CMA8oA3P * integer / this.field_9202_5Q750NCoNQ4QOcYx2YMrIy37i735406nKPDgoDS2YwygIg66OV7Yhe8TKZs9;
+	}
+
+	public boolean func_9197_4Lt75tb695q9O4k0y17SFzV9n7Yq11Xi9novcDHJOIuX10R7xs1NUsVqvCUE() {
+		return this.field_9203_9DsyOa5HkkT6jQ43F0GMa5NEMtK7Q1OmE2Yni11hTF2z4ffl65F4CMA8oA3P > 0;
+	}
+
+	public void updateEntity() {
+		boolean z1 = this.field_9203_9DsyOa5HkkT6jQ43F0GMa5NEMtK7Q1OmE2Yni11hTF2z4ffl65F4CMA8oA3P > 0;
+		boolean z2 = false;
+		if(this.field_9203_9DsyOa5HkkT6jQ43F0GMa5NEMtK7Q1OmE2Yni11hTF2z4ffl65F4CMA8oA3P > 0) {
+			--this.field_9203_9DsyOa5HkkT6jQ43F0GMa5NEMtK7Q1OmE2Yni11hTF2z4ffl65F4CMA8oA3P;
+		}
+
+		if(!this.worldObj.multiplayerWorld) {
+			if(this.field_9203_9DsyOa5HkkT6jQ43F0GMa5NEMtK7Q1OmE2Yni11hTF2z4ffl65F4CMA8oA3P == 0 && this.func_9199_8sVMpI173Gr93bNUtDA32LgqVM11Lkd3Am0AY08bs98dq1ZrK93v1K3rX7AI()) {
+				this.field_9202_5Q750NCoNQ4QOcYx2YMrIy37i735406nKPDgoDS2YwygIg66OV7Yhe8TKZs9 = this.field_9203_9DsyOa5HkkT6jQ43F0GMa5NEMtK7Q1OmE2Yni11hTF2z4ffl65F4CMA8oA3P = this.func_9198_95PX0j323i64JFh83Uzc28t517Ze3t3S2QGrn76xXw1tXvyacv60i2b24g29(this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[1]);
+				if(this.field_9203_9DsyOa5HkkT6jQ43F0GMa5NEMtK7Q1OmE2Yni11hTF2z4ffl65F4CMA8oA3P > 0) {
+					z2 = true;
+					if(this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[1] != null) {
+						--this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[1].stackSize;
+						if(this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[1].stackSize == 0) {
+							this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[1] = null;
+						}
+					}
+				}
+			}
+
+			if(this.func_9197_4Lt75tb695q9O4k0y17SFzV9n7Yq11Xi9novcDHJOIuX10R7xs1NUsVqvCUE() && this.func_9199_8sVMpI173Gr93bNUtDA32LgqVM11Lkd3Am0AY08bs98dq1ZrK93v1K3rX7AI()) {
+				++this.field_9200_5eJgdqRh0pr0L3CiXP2m3Al74sS7oxaz08nP6xFhDouin6P1etVKUHQ95MNc;
+				if(this.field_9200_5eJgdqRh0pr0L3CiXP2m3Al74sS7oxaz08nP6xFhDouin6P1etVKUHQ95MNc == 200) {
+					this.field_9200_5eJgdqRh0pr0L3CiXP2m3Al74sS7oxaz08nP6xFhDouin6P1etVKUHQ95MNc = 0;
+					this.func_9194_2z7G5aH2Mx8WYIrdml3qvtPPymI0PQ1L06r9oRdUel5F87O0NlO6XEuSIXG6();
+					z2 = true;
+				}
+			} else {
+				this.field_9200_5eJgdqRh0pr0L3CiXP2m3Al74sS7oxaz08nP6xFhDouin6P1etVKUHQ95MNc = 0;
+			}
+
+			if(z1 != this.field_9203_9DsyOa5HkkT6jQ43F0GMa5NEMtK7Q1OmE2Yni11hTF2z4ffl65F4CMA8oA3P > 0) {
+				z2 = true;
+				BlockFreezer.func_8372_4aw431LgXdi1L48jU4ZL07b193KS25bZ8cuY42CDd63ZfoFcG05V1VC53UbG(this.field_9203_9DsyOa5HkkT6jQ43F0GMa5NEMtK7Q1OmE2Yni11hTF2z4ffl65F4CMA8oA3P > 0, this.worldObj, this.xCoord, this.yCoord, this.zCoord);
+			}
+		}
+
+		if(z2) {
+			this.onInventoryChanged();
+		}
+
+	}
+
+	private boolean func_9199_8sVMpI173Gr93bNUtDA32LgqVM11Lkd3Am0AY08bs98dq1ZrK93v1K3rX7AI() {
+		if(this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[0] == null) {
+			return false;
+		} else {
+			int i1 = this.func_9195_828SDjP8x3bo5NF3X5P820G4eo2H479POmKSfE22qAp7TYeo5qNV8i4x4917(this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[0].getItem().shiftedIndex);
+			return i1 < 0 ? false : (this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[2] == null ? true : (this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[2].itemID != i1 ? false : (this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[2].stackSize < this.getInventoryStackLimit() && this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[2].stackSize < this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[2].getMaxStackSize() ? true : this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[2].stackSize < Item.itemsList[i1].getItemStackLimit())));
+		}
+	}
+
+	public void func_9194_2z7G5aH2Mx8WYIrdml3qvtPPymI0PQ1L06r9oRdUel5F87O0NlO6XEuSIXG6() {
+		if(this.func_9199_8sVMpI173Gr93bNUtDA32LgqVM11Lkd3Am0AY08bs98dq1ZrK93v1K3rX7AI()) {
+			int i1 = this.func_9195_828SDjP8x3bo5NF3X5P820G4eo2H479POmKSfE22qAp7TYeo5qNV8i4x4917(this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[0].getItem().shiftedIndex);
+			if(this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[2] == null) {
+				this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[2] = new ItemStack(i1, 1);
+			} else if(this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[2].itemID == i1) {
+				++this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[2].stackSize;
+			}
+
+			--this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[0].stackSize;
+			if(this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[0].stackSize <= 0) {
+				this.field_9204_3C28K8aekQEj9fOdHzG5bK1Yb5903ud9122StXLlQ1JVFdovP5rfUT6d0fEL[0] = null;
+			}
+		}
+
+	}
+
+	private int func_9195_828SDjP8x3bo5NF3X5P820G4eo2H479POmKSfE22qAp7TYeo5qNV8i4x4917(int integer) {
+		int i2 = ExtCraftingRecipes.newFreezing(integer);
+		return i2 != -1 ? i2 : (integer == Item.bucketWater.shiftedIndex ? Block.ice.blockID : (integer == Block.blockSnow.blockID ? ExtBlocks.SnowBrick.blockID : ModLoader.func_11262_7FVgHb825Vh87dj7a9W610VePPyEK11H4311BN3gSLe6J6831pq3l6tzy2RP(integer)));
+	}
+
+	private int func_9198_95PX0j323i64JFh83Uzc28t517Ze3t3S2QGrn76xXw1tXvyacv60i2b24g29(ItemStack iy) {
+		if(iy == null) {
+			return 0;
+		} else {
+			int i2 = iy.getItem().shiftedIndex;
+			return i2 < 32767 && i2 == ExtItems.essence.shiftedIndex ? 50 : (i2 == ExtBlocks.EssenceBlock.blockID ? 450 : (i2 == ExtItems.FrigidBits.shiftedIndex ? 55 : ModLoader.func_11266_52C0KnY47qid74yQYI1zgrLooP36NM650B3JgHP47o3Od0glFmCykL7fJoj8(i2)));
+		}
+	}
+}
--- net/minecraft/src/IChunkProvider.java
+++ net/minecraft/src/IChunkProvider.java
@@ -1,13 +1,13 @@
 package net.minecraft.src;
 
 public interface IChunkProvider {
-	boolean chunkExists(int var1, int var2);
-
-	Chunk provideChunk(int var1, int var2);
-
-	void populate(IChunkProvider var1, int var2, int var3);
-
-	boolean saveChunks(boolean var1, IProgressUpdate var2);
+	boolean chunkExists(int i1, int i2);
+
+	Chunk provideChunk(int i1, int i2);
+
+	void populate(IChunkProvider iChunkProvider1, int i2, int i3);
+
+	boolean saveChunks(boolean z1, IProgressUpdate iProgressUpdate2);
 
 	boolean unload100OldestChunks();
 
--- /dev/null
+++ net/minecraft/src/ModelBlockBenchImport.java
@@ -1,0 +1,47 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+public class ModelBlockBenchImport extends ModelBase {
+	public EntityModel BBModel;
+	List subModels;
+
+	public ModelBlockBenchImport(LayerDefinition je) {
+		this(je, 64, 64);
+	}
+
+	public ModelBlockBenchImport(LayerDefinition je, int integer2, int integer3) {
+		this.subModels = new ArrayList();
+		Iterator iterator4 = je.msh.rootElem.addedParts.iterator();
+
+		while(iterator4.hasNext()) {
+			PartDefinitionElement partDefinitionElement5 = (PartDefinitionElement)iterator4.next();
+			List list6 = partDefinitionElement5.cubeList.cubeList;
+
+			ModelRenderer modelRenderer9;
+			for(Iterator iterator7 = list6.iterator(); iterator7.hasNext(); this.subModels.add(modelRenderer9)) {
+				CubeListElement cubeListElement8 = (CubeListElement)iterator7.next();
+				modelRenderer9 = new ModelRenderer(cubeListElement8.texOffX, cubeListElement8.texOffY);
+				modelRenderer9.addBox(partDefinitionElement5.offset.x + cubeListElement8.offsetX, partDefinitionElement5.offset.y + cubeListElement8.offsetY, partDefinitionElement5.offset.z + cubeListElement8.offsetZ, cubeListElement8.widthX, cubeListElement8.height, cubeListElement8.widthZ, 0.0F, integer2, integer3);
+				modelRenderer9.setRotationPoint(0.0F, 0.0F, 0.0F);
+				if(cubeListElement8.mirror) {
+					modelRenderer9.mirror = true;
+				}
+			}
+		}
+
+	}
+
+	public void render(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.setRotationAngles(float1, float2, float3, float4, float5, float6);
+		Iterator iterator7 = this.subModels.iterator();
+
+		while(iterator7.hasNext()) {
+			ModelRenderer modelRenderer8 = (ModelRenderer)iterator7.next();
+			modelRenderer8.render(float6);
+		}
+
+	}
+}
--- net/minecraft/src/BlockSign.java
+++ net/minecraft/src/BlockSign.java
@@ -6,51 +6,51 @@
 	private Class signEntityClass;
 	private boolean isFreestanding;
 
-	protected BlockSign(int var1, Class var2, boolean var3) {
-		super(var1, Material.wood);
-		this.isFreestanding = var3;
+	protected BlockSign(int id, Class signEntityClass, boolean isFreestanding) {
+		super(id, Material.wood);
+		this.isFreestanding = isFreestanding;
 		this.blockIndexInTexture = 4;
-		this.signEntityClass = var2;
-		float var4 = 0.25F;
-		float var5 = 1.0F;
-		this.setBlockBounds(0.5F - var4, 0.0F, 0.5F - var4, 0.5F + var4, var5, 0.5F + var4);
+		this.signEntityClass = signEntityClass;
+		float f4 = 0.25F;
+		float f5 = 1.0F;
+		this.setBlockBounds(0.5F - f4, 0.0F, 0.5F - f4, 0.5F + f4, f5, 0.5F + f4);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
-	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.getSelectedBoundingBoxFromPool(var1, var2, var3, var4);
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		this.setBlockBoundsBasedOnState(worldObj, x, y, z);
+		return super.getSelectedBoundingBoxFromPool(worldObj, x, y, z);
 	}
 
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
 		if(!this.isFreestanding) {
-			int var5 = var1.getBlockMetadata(var2, var3, var4);
-			float var6 = 9.0F / 32.0F;
-			float var7 = 25.0F / 32.0F;
-			float var8 = 0.0F;
-			float var9 = 1.0F;
-			float var10 = 2.0F / 16.0F;
+			int i5 = blockAccess.getBlockMetadata(x, y, z);
+			float f6 = 0.28125F;
+			float f7 = 0.78125F;
+			float f8 = 0.0F;
+			float f9 = 1.0F;
+			float f10 = 0.125F;
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-			if(var5 == 2) {
-				this.setBlockBounds(var8, var6, 1.0F - var10, var9, var7, 1.0F);
-			}
-
-			if(var5 == 3) {
-				this.setBlockBounds(var8, var6, 0.0F, var9, var7, var10);
-			}
-
-			if(var5 == 4) {
-				this.setBlockBounds(1.0F - var10, var6, var8, 1.0F, var7, var9);
-			}
-
-			if(var5 == 5) {
-				this.setBlockBounds(0.0F, var6, var8, var10, var7, var9);
-			}
-
+			if(i5 == 2) {
+				this.setBlockBounds(f8, f6, 1.0F - f10, f9, f7, 1.0F);
+			}
+
+			if(i5 == 3) {
+				this.setBlockBounds(f8, f6, 0.0F, f9, f7, f10);
+			}
+
+			if(i5 == 4) {
+				this.setBlockBounds(1.0F - f10, f6, f8, 1.0F, f7, f9);
+			}
+
+			if(i5 == 5) {
+				this.setBlockBounds(0.0F, f6, f8, f10, f7, f9);
+			}
 		}
+
 	}
 
 	public int getRenderType() {
@@ -67,47 +67,47 @@
 
 	protected TileEntity getBlockEntity() {
 		try {
-			return (TileEntity)this.signEntityClass.newInstance();
-		} catch (Exception var2) {
-			throw new RuntimeException(var2);
+			return (TileEntity)this.signEntityClass.getDeclaredConstructor(new Class[0]).newInstance(new Object[0]);
+		} catch (Exception exception2) {
+			throw new RuntimeException(exception2);
 		}
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Item.sign.shiftedIndex;
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		boolean var6 = false;
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		boolean z6 = false;
 		if(this.isFreestanding) {
-			if(!var1.getBlockMaterial(var2, var3 - 1, var4).isSolid()) {
-				var6 = true;
+			if(!world.getBlockMaterial(x, y - 1, z).isSolid()) {
+				z6 = true;
 			}
 		} else {
-			int var7 = var1.getBlockMetadata(var2, var3, var4);
-			var6 = true;
-			if(var7 == 2 && var1.getBlockMaterial(var2, var3, var4 + 1).isSolid()) {
-				var6 = false;
-			}
-
-			if(var7 == 3 && var1.getBlockMaterial(var2, var3, var4 - 1).isSolid()) {
-				var6 = false;
-			}
-
-			if(var7 == 4 && var1.getBlockMaterial(var2 + 1, var3, var4).isSolid()) {
-				var6 = false;
-			}
-
-			if(var7 == 5 && var1.getBlockMaterial(var2 - 1, var3, var4).isSolid()) {
-				var6 = false;
-			}
-		}
-
-		if(var6) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		}
-
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
+			int i7 = world.getBlockMetadata(x, y, z);
+			z6 = true;
+			if(i7 == 2 && world.getBlockMaterial(x, y, z + 1).isSolid()) {
+				z6 = false;
+			}
+
+			if(i7 == 3 && world.getBlockMaterial(x, y, z - 1).isSolid()) {
+				z6 = false;
+			}
+
+			if(i7 == 4 && world.getBlockMaterial(x + 1, y, z).isSolid()) {
+				z6 = false;
+			}
+
+			if(i7 == 5 && world.getBlockMaterial(x - 1, y, z).isSolid()) {
+				z6 = false;
+			}
+		}
+
+		if(z6) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
+		}
+
+		super.onNeighborBlockChange(world, x, y, z, flag);
 	}
 }
--- /dev/null
+++ net/minecraft/src/Visuals1606.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+class Visuals1606 extends Visuals {
+    final /* synthetic */ VisualsManager field_10082_6XolX6gx6dnHCFT8ppcs1g02QS188k2UK94VPNV1sAt98an6017ylGnyL7C6;
+    
+    Visuals1606(final VisualsManager la) {
+        this.field_10082_6XolX6gx6dnHCFT8ppcs1g02QS188k2UK94VPNV1sAt98an6017ylGnyL7C6 = la;
+    }
+    
+    @Override
+    public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+        return "/unl/2f22baab-269c-4e76-b0b0-3650e05bacd6.xAL";
+    }
+    
+    @Override
+    public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(final Object... arr) {
+        if (arr[0] instanceof FreerunMap2 && (long)arr[1] <= 760L) {
+            this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+            return true;
+        }
+        return false;
+    }
+    
+    @Override
+    public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+        return "unlock--v1606tex";
+    }
+    
+    @Override
+    public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+        return "16.06 Visuals";
+    }
+    
+    @Override
+    public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+        return "Finish SKYLINE in 38 seconds or less";
+    }
+}
--- /dev/null
+++ net/minecraft/src/HubNetworkUnknownClass2.java
@@ -1,0 +1,28 @@
+package net.minecraft.src;
+
+import org.lwjgl.Sys;
+
+public class HubNetworkUnknownClass2 {
+	private final String field_10781_3v7ndO5yb9ansYexDL4fxwy5mWZktFy119Sl4NEu5QDVTkbRNgRxc841m839;
+	private final String field_10780_67mXPYFik3OTr8SeShGuGzfg76v3NAXeKwLh50xLxNQ28ek7909h1w9u94f4;
+	private long field_10782_75TGcvKSLT516Q9C20KFCRJ406eSchkZn8yC5f8Bmq1vGJRK9VqQ18471WUE;
+	private static final String field_10779_09541M42bK51376rwb7S30878b836Z4xCL135sCXLEPUdAArS7Xd13i9Z1dA = "CL_00001134";
+
+	public HubNetworkUnknownClass2(String string1, String string2) {
+		this.field_10781_3v7ndO5yb9ansYexDL4fxwy5mWZktFy119Sl4NEu5QDVTkbRNgRxc841m839 = string1;
+		this.field_10780_67mXPYFik3OTr8SeShGuGzfg76v3NAXeKwLh50xLxNQ28ek7909h1w9u94f4 = string2;
+		this.field_10782_75TGcvKSLT516Q9C20KFCRJ406eSchkZn8yC5f8Bmq1vGJRK9VqQ18471WUE = Sys.getTime() * 1000L / Sys.getTimerResolution();
+	}
+
+	public String func_10776_14j4o7tstXfcx8M08j0S432QGMi71fs96gKoEmhHMLVQz247V7670r00eOR9() {
+		return this.field_10781_3v7ndO5yb9ansYexDL4fxwy5mWZktFy119Sl4NEu5QDVTkbRNgRxc841m839;
+	}
+
+	public String func_10778_8gM7pIBK1I76SCft4Dhm813bD256bmhlhOrb5h1mMYJ3i7FFAMb9LSfc7uw2() {
+		return this.field_10780_67mXPYFik3OTr8SeShGuGzfg76v3NAXeKwLh50xLxNQ28ek7909h1w9u94f4;
+	}
+
+	public void func_10777_04W88zu2434rH5KSiplYwuX5J2HRsV2SgDIT38qBV8XVz0wUb2NY5BCpH2aW() {
+		this.field_10782_75TGcvKSLT516Q9C20KFCRJ406eSchkZn8yC5f8Bmq1vGJRK9VqQ18471WUE = Sys.getTime() * 1000L / Sys.getTimerResolution();
+	}
+}
--- net/minecraft/src/MovingObjectPosition.java
+++ net/minecraft/src/MovingObjectPosition.java
@@ -9,18 +9,18 @@
 	public Vec3D hitVec;
 	public Entity entityHit;
 
-	public MovingObjectPosition(int var1, int var2, int var3, int var4, Vec3D var5) {
+	public MovingObjectPosition(int blockX, int blockY, int blockZ, int sideHit, Vec3D vector) {
 		this.typeOfHit = 0;
-		this.blockX = var1;
-		this.blockY = var2;
-		this.blockZ = var3;
-		this.sideHit = var4;
-		this.hitVec = Vec3D.createVector(var5.xCoord, var5.yCoord, var5.zCoord);
+		this.blockX = blockX;
+		this.blockY = blockY;
+		this.blockZ = blockZ;
+		this.sideHit = sideHit;
+		this.hitVec = Vec3D.createVector(vector.xCoord, vector.yCoord, vector.zCoord);
 	}
 
-	public MovingObjectPosition(Entity var1) {
+	public MovingObjectPosition(Entity entity) {
 		this.typeOfHit = 1;
-		this.entityHit = var1;
-		this.hitVec = Vec3D.createVector(var1.posX, var1.posY, var1.posZ);
+		this.entityHit = entity;
+		this.hitVec = Vec3D.createVector(entity.posX, entity.posY, entity.posZ);
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenMyconUnknownClass2.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenMyconUnknownClass2 extends WorldGenMyconUnknownClass {
+	public final int field_9993_785AXtdFOhFXlosQ8xZ2sw8bZ29jM2mtdTSsO0C4Xzi6GtMPb6IYjy73g2C9;
+
+	public WorldGenMyconUnknownClass2(double double1, double double2, EnumWorldGenerator _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178, int integer) {
+		super(double1, double2, _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178);
+		this.field_9993_785AXtdFOhFXlosQ8xZ2sw8bZ29jM2mtdTSsO0C4Xzi6GtMPb6IYjy73g2C9 = integer;
+	}
+
+	public boolean func_9982_84EZjwmgfVpn5brk96GnU3Eit81Yc6Xxm4lTPdVKUWyphKxl38Uh4dg8VF3T(Random random, World vg, int integer3, int integer4) {
+		return true;
+	}
+
+	public void func_9977_0C8cKMHZGkSA22DGYztFv5857z0O34nRumUNAm59CrgBrFnKV5bq3guXEYB5(Random random) {
+	}
+
+	public int func_9983_8WfOXonA2bRS7hUpHd7sbe7k20yqj7N6OH13GX3XXy71V13Eva115wQwe47C() {
+		return this.field_9993_785AXtdFOhFXlosQ8xZ2sw8bZ29jM2mtdTSsO0C4Xzi6GtMPb6IYjy73g2C9;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EntityOtherPlayerMPUnknownClass2.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class EntityOtherPlayerMPUnknownClass2 extends EntityOtherPlayerMPUnknownClass {
+	public EntityOtherPlayerMPUnknownClass2(World vg, HandlerPlayDemo rw) {
+		super(vg, rw);
+	}
+
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		if(entity instanceof EntityPlayerZombieModeClient) {
+			InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10947_9AnvDYT3tcTSS9Cz1srJAOWX62V5Gqyb2ubqdcRVgP303Y40U8Ke6dGNVv08.func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(new Object[]{this.worldObj, this});
+		}
+
+		return super.attackEntityFrom(entity, damage);
+	}
+}
--- /dev/null
+++ net/minecraft/src/SkinManager.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+import java.util.HashMap;
+
+public class SkinManager {
+	public static boolean conf_cacheSkins = false;
+	public static HashMap skins = new HashMap();
+
+	public static ImageHolder getSkin(String string) {
+		return (ImageHolder)skins.get(string);
+	}
+
+	public static void addSkin(String string, ImageHolder mq) {
+		skins.put(string, mq);
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenHouseBigExterior.java
@@ -1,0 +1,144 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenHouseBigExterior implements IHouseBig {
+	private final NoiseGeneratorPerlin field_9905_8Z0gt9AA75q8CM88X89mbX3Dz5aB2z41i0d99Yt647gvdI24EnEdelrhUcYk;
+
+	public WorldGenHouseBigExterior(Random random) {
+		this.field_9905_8Z0gt9AA75q8CM88X89mbX3Dz5aB2z41i0d99Yt647gvdI24EnEdelrhUcYk = new NoiseGeneratorPerlin(random);
+	}
+
+	public float func_9883_913vTZx6no47397W6wG95Q5uB254nJBZ27osnW242XcA9M93Alb1ry5oPyVe() {
+		return 1.1F;
+	}
+
+	private boolean func_9903_4U50uH23DKVbS4kT87Vx337cToyT7Yl2565CFwbWiX722T2c06GWkwRh9w0p(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockId(integer2, integer3, integer4);
+		return i5 == Block.grass.blockID || i5 == Block.sand.blockID;
+	}
+
+	private void func_9904_0v3vQbv70s7YdkWhB90cyD0W15xlZnAZbEe99E98x929tVR1C60D5w9fMoh3(World vg, Block pb, int integer3, int integer4) {
+		for(int i5 = 128; i5 > 40; --i5) {
+			if(this.func_9903_4U50uH23DKVbS4kT87Vx337cToyT7Yl2565CFwbWiX722T2c06GWkwRh9w0p(vg, integer3, i5, integer4)) {
+				vg.setBlock(integer3, i5, integer4, pb.blockID);
+				if(vg.getBlockId(integer3, i5 + 1, integer4) == ExtBlocks.Grass.blockID) {
+					vg.setBlock(integer3, i5 + 1, integer4, 0);
+				}
+
+				return;
+			}
+		}
+
+	}
+
+	public void func_9884_61qP7q8deV5ospnX8sW5XUMxMcV5ssOU68863452kQ9H403L5ScR3DEa98qO(World vg, int integer2, int integer3, WorldGenHouseBigInterior hp) {
+		if(!vg.sandCovered) {
+			int[] i5 = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
+			int i6;
+			int i7;
+			if(hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2 + 1, integer3)) {
+				for(i6 = 9; i6 <= 15; ++i6) {
+					for(i7 = 4; i7 <= 11; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			}
+
+			if(hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2 - 1, integer3)) {
+				for(i6 = 0; i6 <= 6; ++i6) {
+					for(i7 = 4; i7 <= 11; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			}
+
+			if(hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2, integer3 + 1)) {
+				for(i6 = 4; i6 <= 11; ++i6) {
+					for(i7 = 9; i7 <= 15; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			}
+
+			if(hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2, integer3 - 1)) {
+				for(i6 = 4; i6 <= 11; ++i6) {
+					for(i7 = 0; i7 <= 6; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			}
+
+			if(hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2 + 1, integer3) && hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2 + 1, integer3 + 1) && hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2, integer3 + 1)) {
+				for(i6 = 12; i6 <= 15; ++i6) {
+					for(i7 = 12; i7 <= 15; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			} else if(hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2 + 1, integer3) && hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2, integer3 + 1)) {
+				i5[204] = 1;
+
+				for(i6 = 1; i6 <= 2; ++i6) {
+					i5[12 + i6 + 192] = 1;
+					i5[12 + (12 + i6) * 16] = 1;
+				}
+			}
+
+			if(hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2 - 1, integer3) && hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2 - 1, integer3 - 1) && hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2, integer3 - 1)) {
+				for(i6 = 0; i6 <= 3; ++i6) {
+					for(i7 = 0; i7 <= 3; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			} else if(hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2 - 1, integer3) && hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2, integer3 - 1)) {
+				i5[51] = 1;
+
+				for(i6 = 1; i6 <= 2; ++i6) {
+					i5[3 - i6 + 48] = 1;
+					i5[3 + (3 - i6) * 16] = 1;
+				}
+			}
+
+			if(hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2 - 1, integer3) && hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2 - 1, integer3 + 1) && hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2, integer3 + 1)) {
+				for(i6 = 0; i6 <= 3; ++i6) {
+					for(i7 = 12; i7 <= 15; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			} else if(hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2 - 1, integer3) && hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2, integer3 + 1)) {
+				i5[195] = 1;
+
+				for(i6 = 1; i6 <= 2; ++i6) {
+					i5[3 - i6 + 192] = 1;
+					i5[3 + (12 + i6) * 16] = 1;
+				}
+			}
+
+			if(hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2 + 1, integer3) && hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2 + 1, integer3 - 1) && hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2, integer3 - 1)) {
+				for(i6 = 12; i6 <= 15; ++i6) {
+					for(i7 = 0; i7 <= 3; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			} else if(hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2 + 1, integer3) && hp.func_10701_1lauh9bG6pSmwZgFm5Y1FVXU7kmZ47i860Qhf5XR6gXkIbUPfjJbjs82g9pF(WorldGenHouseBigExterior.class, integer2, integer3 - 1)) {
+				i5[60] = 1;
+
+				for(i6 = 1; i6 <= 2; ++i6) {
+					i5[12 + i6 + 48] = 1;
+					i5[12 + (3 - i6) * 16] = 1;
+				}
+			}
+
+			for(i6 = 0; i6 < 16; ++i6) {
+				for(i7 = 0; i7 < 16; ++i7) {
+					if(i5[i6 + i7 * 16] == 1) {
+						int i8 = integer2 * 16 + i6;
+						int i9 = integer3 * 16 + i7;
+						this.func_9904_0v3vQbv70s7YdkWhB90cyD0W15xlZnAZbEe99E98x929tVR1C60D5w9fMoh3(vg, ExtBlocks.GrassPathway, i8, i9);
+					}
+				}
+			}
+
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/FreerunMap0.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+import java.io.File;
+
+public class FreerunMap0 extends FreerunWorld {
+	private NamedLoc[] field_7521_6n3NlSSJq6vY57yhZwTz9hsqp4CJzws0TWaFS5Na9dDi80o633mX0A4CTsA3 = new NamedLoc[]{new NamedLoc(254, 79, 805, "spawn"), new NamedLoc(253, 78, 802, 255, 80, 800, "checkpoint1"), new NamedLoc(247, 78, 796, 248, 80, 794, "checkpoint2"), new NamedLoc(237, 80, 792, 240, 78, 796, "checkpoint3"), new NamedLoc(236, 78, 772, 240, 80, 769, "end")};
+
+	public FreerunMap0(File worldFile, String levelName) {
+		super(worldFile, levelName);
+	}
+
+	public NamedLoc[] getCheckpoints() {
+		return this.field_7521_6n3NlSSJq6vY57yhZwTz9hsqp4CJzws0TWaFS5Na9dDi80o633mX0A4CTsA3;
+	}
+
+	public int getResetY(long long1, long long2) {
+		return 70;
+	}
+}
--- /dev/null
+++ net/minecraft/src/InputHandler.java
@@ -1,0 +1,456 @@
+package net.minecraft.src;
+
+import javax.swing.JFrame;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.input.Controller;
+import org.lwjgl.input.Controllers;
+import org.lwjgl.input.Keyboard;
+import org.lwjgl.input.Mouse;
+
+public class InputHandler {
+	public static Controller[] gamepads;
+	public static Controller activeGamepad;
+	public static int EventDWheel = -1;
+	public static int EventButton = -1;
+	public static int EventDX = -1;
+	public static int EventDY = -1;
+	public static int EventX = -1;
+	public static int EventY = -1;
+	public static boolean axis4isMinusOne = true;
+	public static boolean EventButtonState = false;
+	public static boolean pushedGamepadEvent = false;
+	public static boolean LastR1Press = false;
+	public static boolean LastL1Press = false;
+	public static boolean LastR2Press = false;
+	public static boolean LastL2Press = false;
+	public static float lastPovX = 0.0F;
+	public static boolean LastStartPress = false;
+	public static Minecraft mc = null;
+	public static double lastX;
+	public static double lastY;
+	public static double lastZ;
+	private static float lastRotX;
+	private static float lastRotZ;
+	public static int field_9745_4T40SjxPM7Zgd16lkH4wCJeyIT159Gxi3Bz0h3trX928I683iCL1KZ3iK4Q6 = 5;
+	public static boolean field_9754_4VMSW6xe5SZ0hnMWIVXt175Sa5kZ1iW17ox2TBOWV03d9D2Q9gjrn84NFpEW = true;
+	public static boolean field_9759_4OT0vPMcJ68s5EU822c0Y9Asw74Su111s3rRCw8OSGMsYM8lx153p73RBtj3 = false;
+	public static int KBEventKey = -1;
+	public static boolean KBEventKeyState = false;
+	public static boolean LastAPress = false;
+	public static HandlerPlayDemoUnknownClass field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL;
+	public static boolean field_9756_3t1caBu1CS15veqc01ypG4DqCRJ91Rw6b5pITOU21064uqb1k1F7E6SIPrCO;
+	public static HandlerSetCheckpointUnknownClass field_9755_40jW6A12nU5Bx0XJVnftRWc1g168MkyD0Hs1G3PDx769g8p92eI4LUrp43lZ;
+	public static EntityPlayer field_9770_2V6p0RtqpP2jB5MbKC4kOM794OwxL5Fl82SMBE30e16wdk1Iemyry4Fh4Dt6;
+	public static CommandUnknownClass2 field_9762_13b094Tf1L4SIIdMjzuGRVNKUye5S3b1UW4n91PWtlu671hyg2Xm4HF09472;
+	public static boolean field_9779_6L2AjVH6gw8056zihozm77JmQUTXqOrE1uDO6Vg89ya4G15P6hdhcgFA2b54 = false;
+	public static HubGenerator field_9752_355wmY48IHXo4X15Nw8J2797kt8a2JjrE949L4LB3rZ7GlzANVC7qILKIMg7;
+	public static boolean field_9773_5g1w13Pa04fL8eJVgVG1BaKXg53SRg94jer4k01UfO1ym359A84apZ9QFroa = false;
+
+	public static void UpdateAxis3() {
+		if(activeGamepad != null && axis4isMinusOne && (double)activeGamepad.getAxisValue(4) != -1.0D) {
+			axis4isMinusOne = false;
+		}
+
+	}
+
+	public static void Initialize(Minecraft minecraft) {
+		mc = minecraft;
+		field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL = new HandlerPlayDemoUnknownClass(mc.thePlayer);
+	}
+
+	public static void CaptureGamepad() {
+		activeGamepad = null;
+		Controllers.poll();
+		ExtLogger.i("CaptureGamepad()");
+		gamepads = new Controller[Controllers.getControllerCount()];
+
+		for(int i0 = 0; i0 != gamepads.length; ++i0) {
+			try {
+				gamepads[i0] = Controllers.getController(i0);
+				if(!gamepads[i0].getName().toLowerCase().contains("controller (")) {
+					gamepads[i0] = null;
+				} else {
+					activeGamepad = gamepads[i0];
+					ExtLogger.i("Captured: " + gamepads[i0].getName());
+				}
+			} catch (NullPointerException nullPointerException2) {
+			}
+		}
+
+		if(activeGamepad != null) {
+			(new AdaptiveHandler()).start();
+		}
+
+	}
+
+	public static void InputR1() {
+		LastR1Press = activeGamepad.isButtonPressed(5);
+		KBEventKey = mc.options.keyBindSneak.keyCode;
+		KBEventKeyState = LastR1Press;
+	}
+
+	public static void InputR2() {
+		LastR2Press = activeGamepad.getAxisValue(4) < -0.4F;
+		EventDWheel = 0;
+		EventDX = 0;
+		EventDY = 0;
+		EventButton = 0;
+		EventButtonState = LastR2Press;
+		pushedGamepadEvent = true;
+	}
+
+	public static void InputL1() {
+		LastL1Press = activeGamepad.isButtonPressed(4);
+		InputDash();
+	}
+
+	public static void InputL2() {
+		LastL2Press = activeGamepad.getAxisValue(4) > 0.4F;
+		EventDWheel = 0;
+		EventDX = 0;
+		EventDY = 0;
+		EventButton = 1;
+		EventButtonState = LastL2Press;
+		pushedGamepadEvent = true;
+	}
+
+	public static void InputA() {
+		LastAPress = activeGamepad.isButtonPressed(0);
+		KBEventKey = 57;
+		KBEventKeyState = LastAPress;
+		if(KBEventKeyState) {
+			InputLongJump();
+		}
+
+	}
+
+	public static void InputStart() {
+		LastStartPress = activeGamepad.isButtonPressed(7);
+		KBEventKey = 1;
+		KBEventKeyState = LastStartPress;
+	}
+
+	public static void InputPOV(float float1) {
+		if(float1 != lastPovX) {
+			lastPovX = float1;
+			EventDWheel = (int)lastPovX * -1;
+			EventDX = 0;
+			EventDY = 0;
+			EventButton = -1;
+			EventButtonState = false;
+			pushedGamepadEvent = true;
+		}
+
+	}
+
+	public static double AngleFromXY(double double1, double double2) {
+		return Math.atan2(double2, double1);
+	}
+
+	public static void func_9731_77p0YGv1177Knqf4BoaZJZtKYSF1XhKlrRcOX37byxi27qaPy3zlbIqzre5d() {
+		if(field_9756_3t1caBu1CS15veqc01ypG4DqCRJ91Rw6b5pITOU21064uqb1k1F7E6SIPrCO) {
+			HandlerSetCheckpointUnknownClass2 handlerSetCheckpointUnknownClass20 = field_9755_40jW6A12nU5Bx0XJVnftRWc1g168MkyD0Hs1G3PDx769g8p92eI4LUrp43lZ.func_10088_1Srn1NO8VIG8sE99Jtv77t920erw08KpSDq49OsE7m757020A0FU0vxsGMvt(field_9770_2V6p0RtqpP2jB5MbKC4kOM794OwxL5Fl82SMBE30e16wdk1Iemyry4Fh4Dt6);
+			ExtLogger.i("warping to " + field_9755_40jW6A12nU5Bx0XJVnftRWc1g168MkyD0Hs1G3PDx769g8p92eI4LUrp43lZ.field_10090_5v540C4sk8Ke8C3282XWygqtOknzxtF0r5Vd1NaB0QsfgW9I05m88Cq1r6Iv);
+			mc.thePlayer.setPosition(handlerSetCheckpointUnknownClass20.field_12186_05n216qDAUZ2kE810Fqi64V6niu79vbRckyfaVY9Fqw11STapU0px02uapMx, handlerSetCheckpointUnknownClass20.field_12188_9uq1C9Zys0Le7aJhWE0BeKD05T9G0hDuv6srjUYYK3RiBek01P8Ij69s3Es9, handlerSetCheckpointUnknownClass20.field_12187_7Kg8S2j0ooT9LE62UmIi8A7J7Y4sM22qj00KYKP97u5583AOirdarRO6WOFv);
+			field_9756_3t1caBu1CS15veqc01ypG4DqCRJ91Rw6b5pITOU21064uqb1k1F7E6SIPrCO = false;
+		}
+
+	}
+
+	public static void func_9723_0s53bwug7AIh7wok927NkfC491OTVIE9w7Ze8dTW9h9VOaC74c60EkiUo90l() {
+		if(mc.thePlayer != null && !IsKeyDown(29) && ScreenDebugMenu.dbg_conf_enableCheats) {
+			mc.displayGuiScreen(new ScreenItemCheat(mc));
+		}
+
+	}
+
+	public static void KBEventInject() {
+		if(mc.currentScreen == null) {
+			if(KBEventKeyState) {
+				field_9762_13b094Tf1L4SIIdMjzuGRVNKUye5S3b1UW4n91PWtlu671hyg2Xm4HF09472.field_11839_52dbdXLg3Wx81i6gW4IYo1Bq32Pz2QIUyPjWOA1i0OJRd00ZX7w649E5B4JD.func_12063_192DBW3rWeWbZy26TpK5rt1Ak36TmR6Dn90BSf6Z5oNr7Q5wXRqyph3fgy8S(KBEventKey);
+			}
+
+			if(KBEventKey == 26) {
+				lastX = mc.thePlayer.posX;
+				lastY = mc.thePlayer.posY;
+				lastZ = mc.thePlayer.posZ;
+				lastRotX = mc.thePlayer.rotationYaw;
+				lastRotZ = mc.thePlayer.rotationPitch;
+			} else if(KBEventKey == 27 && ScreenDebugMenu.dbg_conf_enableCheats) {
+				mc.thePlayer.posX = lastX;
+				mc.thePlayer.posY = lastY;
+				mc.thePlayer.posZ = lastZ;
+				mc.thePlayer.rotationYaw = lastRotX;
+				mc.thePlayer.rotationPitch = lastRotZ;
+				mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ);
+			} else if(KBEventKey == mc.options.field_11782_8zR7w7M0dCz141EgrKPTyPG0x4be73DnUpm3v39wugYiB00oRfG9xEdOaiDU.keyCode && KBEventKeyState) {
+				InputDash();
+			} else if(KBEventKey == mc.options.keyBindJump.keyCode && KBEventKeyState) {
+				InputLongJump();
+			} else if(KBEventKey == 88 && KBEventKeyState) {
+				if(IsKeyDown(197) && IsKeyDown(70) && IsKeyDown(210)) {
+					InputDebug();
+				}
+			} else if(KBEventKey == 67 && KBEventKeyState) {
+				InputOpenMinimap();
+			} else if(KBEventKey == 66 && KBEventKeyState) {
+				func_9739_622A5blvtPoHHz5VR76rGel7x34BJ4gRTMt6IDY6JNt14M63oyUWlPVUZ7t3();
+			} else if(KBEventKey == mc.options.field_11752_0y3J835DcYjJCi69MHQUHF4jrOLdQx1Z31fkAA08625s5FJMK989j345coLD.keyCode && KBEventKeyState) {
+				field_9779_6L2AjVH6gw8056zihozm77JmQUTXqOrE1uDO6Vg89ya4G15P6hdhcgFA2b54 = true;
+			} else if(KBEventKeyState && mc != null && mc.theWorld != null) {
+				mc.ingameGUI.weditOverlay.HandleInput(KBEventKey);
+				mc.ingameGUI.field_7857_396h94sQK9uQ2QzF3CPHcBI8PjZcuA3l6190hgCj0ajJ4Eol6RQ1P4LMA2OO.func_11161_878G68i7RK8cnFGe82HhotKR54i4CTCOFqIav8G900cC11I38cT2xY88v3Z8(KBEventKey);
+			}
+
+		}
+	}
+
+	public static void InputDebug() {
+		mc.displayGuiScreen(new ScreenDebugMenu(mc));
+	}
+
+	private static void func_9742_2o9RL652gi74i5n1MTohqR8k0Xe5FLHssZ5UTZa84pnf511ub05P70MN2ap8() {
+		if(KBEventKeyState) {
+			if(KBEventKey == 14) {
+				if(field_9762_13b094Tf1L4SIIdMjzuGRVNKUye5S3b1UW4n91PWtlu671hyg2Xm4HF09472.field_11839_52dbdXLg3Wx81i6gW4IYo1Bq32Pz2QIUyPjWOA1i0OJRd00ZX7w649E5B4JD.field_12074_59H713eWwMqHt2BkXfmtU7Gw1Ed2yJ84RRj5r8Os9hXCRrICXE2XfeV2i7Jm.length() > 0) {
+					field_9762_13b094Tf1L4SIIdMjzuGRVNKUye5S3b1UW4n91PWtlu671hyg2Xm4HF09472.field_11839_52dbdXLg3Wx81i6gW4IYo1Bq32Pz2QIUyPjWOA1i0OJRd00ZX7w649E5B4JD.field_12074_59H713eWwMqHt2BkXfmtU7Gw1Ed2yJ84RRj5r8Os9hXCRrICXE2XfeV2i7Jm = field_9762_13b094Tf1L4SIIdMjzuGRVNKUye5S3b1UW4n91PWtlu671hyg2Xm4HF09472.field_11839_52dbdXLg3Wx81i6gW4IYo1Bq32Pz2QIUyPjWOA1i0OJRd00ZX7w649E5B4JD.field_12074_59H713eWwMqHt2BkXfmtU7Gw1Ed2yJ84RRj5r8Os9hXCRrICXE2XfeV2i7Jm.substring(0, field_9762_13b094Tf1L4SIIdMjzuGRVNKUye5S3b1UW4n91PWtlu671hyg2Xm4HF09472.field_11839_52dbdXLg3Wx81i6gW4IYo1Bq32Pz2QIUyPjWOA1i0OJRd00ZX7w649E5B4JD.field_12074_59H713eWwMqHt2BkXfmtU7Gw1Ed2yJ84RRj5r8Os9hXCRrICXE2XfeV2i7Jm.length() - 1);
+				}
+			} else if(KBEventKey != mc.options.field_11752_0y3J835DcYjJCi69MHQUHF4jrOLdQx1Z31fkAA08625s5FJMK989j345coLD.keyCode && KBEventKey != 1) {
+				if(KBEventKey == 28) {
+					field_9762_13b094Tf1L4SIIdMjzuGRVNKUye5S3b1UW4n91PWtlu671hyg2Xm4HF09472.field_11839_52dbdXLg3Wx81i6gW4IYo1Bq32Pz2QIUyPjWOA1i0OJRd00ZX7w649E5B4JD.func_12062_0t842hU0v5526eutHbG997y2Nv04t2F2gXt64U0tN25Eoja8W099icp26853(field_9762_13b094Tf1L4SIIdMjzuGRVNKUye5S3b1UW4n91PWtlu671hyg2Xm4HF09472.field_11839_52dbdXLg3Wx81i6gW4IYo1Bq32Pz2QIUyPjWOA1i0OJRd00ZX7w649E5B4JD.field_12074_59H713eWwMqHt2BkXfmtU7Gw1Ed2yJ84RRj5r8Os9hXCRrICXE2XfeV2i7Jm);
+				} else {
+					char c0 = Keyboard.getEventCharacter();
+					field_9762_13b094Tf1L4SIIdMjzuGRVNKUye5S3b1UW4n91PWtlu671hyg2Xm4HF09472.field_11839_52dbdXLg3Wx81i6gW4IYo1Bq32Pz2QIUyPjWOA1i0OJRd00ZX7w649E5B4JD.func_12066_3G1KR5Cj4Oc1UWW3nROs4iPJarSF633X338OpM3D85527J342we9BwJP271F(c0, KBEventKey);
+				}
+			} else {
+				field_9779_6L2AjVH6gw8056zihozm77JmQUTXqOrE1uDO6Vg89ya4G15P6hdhcgFA2b54 = false;
+				field_9762_13b094Tf1L4SIIdMjzuGRVNKUye5S3b1UW4n91PWtlu671hyg2Xm4HF09472.field_11839_52dbdXLg3Wx81i6gW4IYo1Bq32Pz2QIUyPjWOA1i0OJRd00ZX7w649E5B4JD.field_12074_59H713eWwMqHt2BkXfmtU7Gw1Ed2yJ84RRj5r8Os9hXCRrICXE2XfeV2i7Jm = "";
+			}
+		}
+
+	}
+
+	public static void func_9734_9Uj534ugdHP7u4PJfw2FnKZ82q9nF8ro9tfj5p0ywqqPTB3a2I67xd2543E3(int integer1, int integer2) {
+		if(field_9762_13b094Tf1L4SIIdMjzuGRVNKUye5S3b1UW4n91PWtlu671hyg2Xm4HF09472 == null) {
+			field_9762_13b094Tf1L4SIIdMjzuGRVNKUye5S3b1UW4n91PWtlu671hyg2Xm4HF09472 = new CommandUnknownClass2(mc);
+		}
+
+		if(field_9779_6L2AjVH6gw8056zihozm77JmQUTXqOrE1uDO6Vg89ya4G15P6hdhcgFA2b54) {
+			field_9762_13b094Tf1L4SIIdMjzuGRVNKUye5S3b1UW4n91PWtlu671hyg2Xm4HF09472.func_11838_1mCSTFiXQZMQRgg38E4l2za0x1wQzUIIZQAoUEJ051l3R9Cc00Qmou4eQ5Yf(integer1, integer2);
+		}
+
+	}
+
+	public static void func_9739_622A5blvtPoHHz5VR76rGel7x34BJ4gRTMt6IDY6JNt14M63oyUWlPVUZ7t3() {
+	}
+
+	public static void InputOpenMinimap() {
+		JFrame jFrame0 = new JFrame("Map");
+		CanvasIngameIsomPreview canvasIngameIsomPreview1 = new CanvasIngameIsomPreview(mc.theWorld);
+		jFrame0.add(canvasIngameIsomPreview1);
+		jFrame0.setSize(640, 480);
+		jFrame0.setVisible(true);
+		canvasIngameIsomPreview1.start();
+	}
+
+	public static void InputLongJump() {
+		if(mc.thePlayer != null) {
+			if(mc.thePlayer instanceof EntityPlayerZombieModeClient && !((EntityPlayerZombieModeClient)mc.thePlayer).field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.field_8690_9ajSfayfVo92Z68A5B2rvo13codHKhrUqqH2LRN64r7Ac066r0ki4BD2lC9w) {
+				return;
+			}
+
+			if(mc.thePlayer.isSneaking() && mc.thePlayer.dashTimer == 0) {
+				mc.theWorld.playSoundEffect(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, "ext.marior", 1.0F, 1.0F);
+				double d0 = AngleFromXY((double)mc.thePlayer.movementInput.moveForward, (double)(-mc.thePlayer.movementInput.moveStrafe)) / Math.PI * 180.0D;
+				double d2 = Math.toRadians((double)(mc.thePlayer.rotationYaw + 90.0F) + d0);
+				double d4 = Math.cos(d2);
+				double d6 = Math.sin(d2);
+				mc.thePlayer.dashTimer = 10;
+				mc.thePlayer.motionX += d4;
+				mc.thePlayer.motionY += 0.5D;
+				mc.thePlayer.motionZ += d6;
+			}
+		}
+
+	}
+
+	public static void InputDash() {
+		if(mc.thePlayer != null) {
+			if(mc.thePlayer instanceof EntityPlayerZombieModeClient && !((EntityPlayerZombieModeClient)mc.thePlayer).field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.field_8690_9ajSfayfVo92Z68A5B2rvo13codHKhrUqqH2LRN64r7Ac066r0ki4BD2lC9w) {
+				return;
+			}
+
+			if(mc.thePlayer.dashTimer == 0) {
+				mc.theWorld.playSoundEffect(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, "ext.dash", 0.6F, 1.0F);
+				mc.thePlayer.dashTimer = 30;
+				mc.thePlayer.motionX *= 10.0D;
+				mc.thePlayer.motionY *= 3.0D;
+				mc.thePlayer.motionZ *= 10.0D;
+			} else if(mc.thePlayer.dashTimer < 15) {
+				mc.theWorld.playSoundEffect(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, "ext.marior", 1.0F, 1.0F);
+				double d0 = AngleFromXY((double)mc.thePlayer.movementInput.moveForward, (double)(-mc.thePlayer.movementInput.moveStrafe)) / Math.PI * 180.0D;
+				double d2 = Math.toRadians((double)(mc.thePlayer.rotationYaw + 90.0F) + d0);
+				double d4 = Math.cos(d2);
+				double d6 = Math.sin(d2);
+				mc.thePlayer.dashTimer = 30;
+				mc.thePlayer.motionX += d4;
+				mc.thePlayer.motionY += 0.2D;
+				mc.thePlayer.motionZ += d6;
+			}
+		}
+
+	}
+
+	public static boolean NextKBEvent() {
+		func_9731_77p0YGv1177Knqf4BoaZJZtKYSF1XhKlrRcOX37byxi27qaPy3zlbIqzre5d();
+		if(!field_9779_6L2AjVH6gw8056zihozm77JmQUTXqOrE1uDO6Vg89ya4G15P6hdhcgFA2b54) {
+			if(Keyboard.next()) {
+				KBEventKey = Keyboard.getEventKey();
+				KBEventKeyState = Keyboard.getEventKeyState();
+				KBEventInject();
+				return true;
+			} else {
+				if(activeGamepad != null) {
+					if(LastAPress != activeGamepad.isButtonPressed(0)) {
+						InputA();
+						return true;
+					}
+
+					if(LastStartPress != activeGamepad.isButtonPressed(7)) {
+						InputStart();
+						return true;
+					}
+
+					if(LastL1Press != activeGamepad.isButtonPressed(4)) {
+						InputL1();
+						return true;
+					}
+
+					if(LastR1Press != activeGamepad.isButtonPressed(5)) {
+						InputR1();
+						return true;
+					}
+				}
+
+				return false;
+			}
+		} else {
+			while(Keyboard.next()) {
+				KBEventKey = Keyboard.getEventKey();
+				KBEventKeyState = Keyboard.getEventKeyState();
+				func_9742_2o9RL652gi74i5n1MTohqR8k0Xe5FLHssZ5UTZa84pnf511ub05P70MN2ap8();
+			}
+
+			return false;
+		}
+	}
+
+	public static boolean NextEvent() {
+		UpdateAxis3();
+		if(Mouse.next()) {
+			EventDWheel = Mouse.getEventDWheel();
+			EventButton = Mouse.getEventButton();
+			EventDX = Mouse.getEventDX();
+			EventDY = Mouse.getEventDY();
+			EventButtonState = Mouse.getEventButtonState();
+			EventX = Mouse.getEventX();
+			EventY = Mouse.getEventY();
+			pushedGamepadEvent = false;
+			return true;
+		} else {
+			if(activeGamepad != null) {
+				float f0 = activeGamepad.getPovX();
+				if(LastR2Press != activeGamepad.getAxisValue(4) < -0.4F) {
+					InputR2();
+					return true;
+				}
+
+				if(LastL2Press != activeGamepad.getAxisValue(4) > 0.4F) {
+					InputL2();
+					return true;
+				}
+
+				if(f0 != lastPovX) {
+					InputPOV(f0);
+					return true;
+				}
+			}
+
+			return false;
+		}
+	}
+
+	public static int GetDWheel() {
+		return EventDWheel;
+	}
+
+	public static int GetEventButton() {
+		return EventButton;
+	}
+
+	public static int GetEventDX() {
+		return EventDX;
+	}
+
+	public static int GetEventDY() {
+		return EventDY;
+	}
+
+	public static int GetEventX() {
+		return EventX;
+	}
+
+	public static int GetEventY() {
+		return EventY;
+	}
+
+	public static boolean GetEventButtonState() {
+		return EventButtonState;
+	}
+
+	public static int GetKBEventKey() {
+		return KBEventKey;
+	}
+
+	public static boolean GetKBEventKeyState() {
+		return KBEventKeyState;
+	}
+
+	public static boolean IsKeyDown(int integer) {
+		boolean z1 = false;
+		if(integer == 57 && activeGamepad != null) {
+			z1 = activeGamepad.isButtonPressed(0);
+		} else if(integer == mc.options.keyBindSneak.keyCode && activeGamepad != null) {
+			z1 = activeGamepad.isButtonPressed(8);
+		}
+
+		return Keyboard.isKeyDown(integer) || z1;
+	}
+
+	public static boolean InputMouseAction(int integer) {
+		if(activeGamepad != null && !axis4isMinusOne) {
+			boolean z10000;
+			if(!Mouse.isButtonDown(integer)) {
+				label37: {
+					if(integer == 0) {
+						if(activeGamepad.getAxisValue(4) < -0.4F) {
+							break label37;
+						}
+					} else if(integer == 1 && activeGamepad.getAxisValue(4) > 0.4F) {
+						break label37;
+					}
+
+					z10000 = false;
+					return z10000;
+				}
+			}
+
+			z10000 = true;
+			return z10000;
+		} else {
+			return Mouse.isButtonDown(integer);
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandSummonSpaceman.java
@@ -1,0 +1,26 @@
+package net.minecraft.src;
+
+class CommandSummonSpaceman extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8595_0zlax8512JtOXmZe790mIXLeoD5zNWi7C66Q351TD8C8sJ3RKH0Nz7U735Ci;
+    
+    CommandSummonSpaceman(final CommandManager abb) {
+        this.field_8595_0zlax8512JtOXmZe790mIXLeoD5zNWi7C66Q351TD8C8sJ3RKH0Nz7U735Ci = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        final EntityAmoung entity = new EntityAmoung(InputHandler.mc.theWorld);
+        entity.setPosition(InputHandler.mc.thePlayer.posX, InputHandler.mc.thePlayer.posY, InputHandler.mc.thePlayer.posZ);
+        InputHandler.mc.theWorld.spawnEntityInWorld(entity);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+    
+    @Override
+    public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+        return false;
+    }
+}
--- /dev/null
+++ net/minecraft/src/BlockHubDoor.java
@@ -1,0 +1,29 @@
+package net.minecraft.src;
+
+import java.io.File;
+
+import net.minecraft.client.Minecraft;
+
+public class BlockHubDoor extends BlockDoor {
+	public RemoteWorld field_8267_5y4erMy0TRR5fvcr9itUOrI3851rltorfXv3dSnzgy67I9f830Ch80l1Iyh6 = null;
+
+	public BlockHubDoor(int id, Material material) {
+		super(id, material);
+		this.blockIndexInTexture = 178;
+	}
+
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
+		if(entity instanceof EntityPlayer && this.field_8267_5y4erMy0TRR5fvcr9itUOrI3851rltorfXv3dSnzgy67I9f830Ch80l1Iyh6 == null) {
+			InputHandler.mc.changeWorld1((World)null);
+			System.gc();
+			HubWorld hubWorld6 = new HubWorld(new File(Minecraft.getMinecraftDir(), "saves"), world.randomSeed);
+			InputHandler.mc.changeWorld(hubWorld6, "Joining Hub");
+			InputHandler.mc.setIngameFocus();
+		}
+
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return this.blockIndexInTexture;
+	}
+}
--- net/minecraft/src/EffectRenderer.java
+++ net/minecraft/src/EffectRenderer.java
@@ -3,6 +3,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
+
 import org.lwjgl.opengl.GL11;
 
 public class EffectRenderer {
@@ -11,153 +12,154 @@
 	private RenderEngine renderEngine;
 	private Random rand = new Random();
 
-	public EffectRenderer(World var1, RenderEngine var2) {
-		if(var1 != null) {
-			this.worldObj = var1;
+	public EffectRenderer(World world, RenderEngine renderEngine) {
+		if(world != null) {
+			this.worldObj = world;
 		}
 
-		this.renderEngine = var2;
+		this.renderEngine = renderEngine;
 
-		for(int var3 = 0; var3 < 4; ++var3) {
-			this.fxLayers[var3] = new ArrayList();
+		for(int i3 = 0; i3 < 4; ++i3) {
+			this.fxLayers[i3] = new ArrayList();
 		}
 
 	}
 
-	public void addEffect(EntityFX var1) {
-		int var2 = var1.getFXLayer();
-		this.fxLayers[var2].add(var1);
+	public void addEffect(EntityFX entityFX) {
+		int i2 = entityFX.getFXLayer();
+		this.fxLayers[i2].add(entityFX);
 	}
 
 	public void updateEffects() {
-		for(int var1 = 0; var1 < 4; ++var1) {
-			for(int var2 = 0; var2 < this.fxLayers[var1].size(); ++var2) {
-				EntityFX var3 = (EntityFX)this.fxLayers[var1].get(var2);
-				var3.onUpdate();
-				if(var3.isDead) {
-					this.fxLayers[var1].remove(var2--);
-				}
-			}
-		}
-
-	}
-
-	public void renderParticles(Entity var1, float var2) {
-		float var3 = MathHelper.cos(var1.rotationYaw * (float)Math.PI / 180.0F);
-		float var4 = MathHelper.sin(var1.rotationYaw * (float)Math.PI / 180.0F);
-		float var5 = -var4 * MathHelper.sin(var1.rotationPitch * (float)Math.PI / 180.0F);
-		float var6 = var3 * MathHelper.sin(var1.rotationPitch * (float)Math.PI / 180.0F);
-		float var7 = MathHelper.cos(var1.rotationPitch * (float)Math.PI / 180.0F);
-		EntityFX.interpPosX = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var2;
-		EntityFX.interpPosY = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var2;
-		EntityFX.interpPosZ = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var2;
-
-		for(int var8 = 0; var8 < 3; ++var8) {
-			if(this.fxLayers[var8].size() != 0) {
-				int var9 = 0;
-				if(var8 == 0) {
-					var9 = this.renderEngine.getTexture("/particles.png");
-				}
-
-				if(var8 == 1) {
-					var9 = this.renderEngine.getTexture("/terrain.png");
-				}
-
-				if(var8 == 2) {
-					var9 = this.renderEngine.getTexture("/gui/items.png");
-				}
-
-				GL11.glBindTexture(GL11.GL_TEXTURE_2D, var9);
-				Tessellator var10 = Tessellator.instance;
-				var10.startDrawingQuads();
-
-				for(int var11 = 0; var11 < this.fxLayers[var8].size(); ++var11) {
-					EntityFX var12 = (EntityFX)this.fxLayers[var8].get(var11);
-					var12.renderParticle(var10, var2, var3, var7, var4, var5, var6);
-				}
-
-				var10.draw();
-			}
-		}
-
-	}
-
-	public void renderLitParticles(Entity var1, float var2) {
-		byte var3 = 3;
-		if(this.fxLayers[var3].size() != 0) {
-			Tessellator var4 = Tessellator.instance;
-
-			for(int var5 = 0; var5 < this.fxLayers[var3].size(); ++var5) {
-				EntityFX var6 = (EntityFX)this.fxLayers[var3].get(var5);
-				var6.renderParticle(var4, var2, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
-			}
-
-		}
-	}
-
-	public void clearEffects(World var1) {
-		this.worldObj = var1;
-
-		for(int var2 = 0; var2 < 4; ++var2) {
-			this.fxLayers[var2].clear();
-		}
-
-	}
-
-	public void addBlockDestroyEffects(int var1, int var2, int var3) {
-		int var4 = this.worldObj.getBlockId(var1, var2, var3);
-		if(var4 != 0) {
-			Block var5 = Block.blocksList[var4];
-			byte var6 = 4;
-
-			for(int var7 = 0; var7 < var6; ++var7) {
-				for(int var8 = 0; var8 < var6; ++var8) {
-					for(int var9 = 0; var9 < var6; ++var9) {
-						double var10 = (double)var1 + ((double)var7 + 0.5D) / (double)var6;
-						double var12 = (double)var2 + ((double)var8 + 0.5D) / (double)var6;
-						double var14 = (double)var3 + ((double)var9 + 0.5D) / (double)var6;
-						this.addEffect(new EntityDiggingFX(this.worldObj, var10, var12, var14, var10 - (double)var1 - 0.5D, var12 - (double)var2 - 0.5D, var14 - (double)var3 - 0.5D, var5));
+		for(int i1 = 0; i1 < 4; ++i1) {
+			for(int i2 = 0; i2 < this.fxLayers[i1].size(); ++i2) {
+				EntityFX entityFX3 = (EntityFX)this.fxLayers[i1].get(i2);
+				entityFX3.onUpdate();
+				if(entityFX3.isDead) {
+					this.fxLayers[i1].remove(i2--);
+				}
+			}
+		}
+
+	}
+
+	public void renderParticles(Entity viewerEntity, float renderPartialTick) {
+		float f3 = MathHelper.cos(viewerEntity.rotationYaw * (float)Math.PI / 180.0F);
+		float f4 = MathHelper.sin(viewerEntity.rotationYaw * (float)Math.PI / 180.0F);
+		float f5 = -f4 * MathHelper.sin(viewerEntity.rotationPitch * (float)Math.PI / 180.0F);
+		float f6 = f3 * MathHelper.sin(viewerEntity.rotationPitch * (float)Math.PI / 180.0F);
+		float f7 = MathHelper.cos(viewerEntity.rotationPitch * (float)Math.PI / 180.0F);
+		EntityFX.interpPosX = viewerEntity.lastTickPosX + (viewerEntity.posX - viewerEntity.lastTickPosX) * (double)renderPartialTick;
+		EntityFX.interpPosY = viewerEntity.lastTickPosY + (viewerEntity.posY - viewerEntity.lastTickPosY) * (double)renderPartialTick;
+		EntityFX.interpPosZ = viewerEntity.lastTickPosZ + (viewerEntity.posZ - viewerEntity.lastTickPosZ) * (double)renderPartialTick;
+
+		for(int i8 = 0; i8 < 3; ++i8) {
+			if(this.fxLayers[i8].size() != 0) {
+				int i9 = 0;
+				if(i8 == 0) {
+					i9 = this.renderEngine.getTexture("/particles.png");
+				}
+
+				if(i8 == 1) {
+					i9 = this.renderEngine.getTexture(WorldUnknownClass2.func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass2.field_9796_62Ccm2XAR6JqSDTgV762x61j971DNgsIrMhaXZxPs0fQnBC7ymR2l1v1V22X));
+				}
+
+				if(i8 == 2) {
+					i9 = this.renderEngine.getTexture("/gui/items.png");
+				}
+
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, i9);
+				Tessellator tessellator10 = Tessellator.instance;
+				tessellator10.startDrawingQuads();
+
+				for(int i11 = 0; i11 < this.fxLayers[i8].size(); ++i11) {
+					EntityFX entityFX12 = (EntityFX)this.fxLayers[i8].get(i11);
+					entityFX12.renderParticle(tessellator10, renderPartialTick, f3, f7, f4, f5, f6);
+				}
+
+				tessellator10.draw();
+			}
+		}
+
+	}
+
+	public void renderLitParticles(Entity entity, float renderPartialTick) {
+		byte b3 = 3;
+		if(this.fxLayers[b3].size() != 0) {
+			Tessellator tessellator4 = Tessellator.instance;
+
+			for(int i5 = 0; i5 < this.fxLayers[b3].size(); ++i5) {
+				EntityFX entityFX6 = (EntityFX)this.fxLayers[b3].get(i5);
+				entityFX6.renderParticle(tessellator4, renderPartialTick, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
+			}
+		}
+
+	}
+
+	public void clearEffects(World worldObj) {
+		this.worldObj = worldObj;
+
+		for(int i2 = 0; i2 < 4; ++i2) {
+			this.fxLayers[i2].clear();
+		}
+
+	}
+
+	public void addBlockDestroyEffects(int x, int y, int z) {
+		int i4 = this.worldObj.getBlockId(x, y, z);
+		if(i4 != 0) {
+			Block block5 = Block.blocksList[i4];
+			byte b6 = 4;
+
+			for(int i7 = 0; i7 < b6; ++i7) {
+				for(int i8 = 0; i8 < b6; ++i8) {
+					for(int i9 = 0; i9 < b6; ++i9) {
+						double d10 = (double)x + ((double)i7 + 0.5D) / (double)b6;
+						double d12 = (double)y + ((double)i8 + 0.5D) / (double)b6;
+						double d14 = (double)z + ((double)i9 + 0.5D) / (double)b6;
+						this.addEffect(new EntityDiggingFX(this.worldObj, d10, d12, d14, d10 - (double)x - 0.5D, d12 - (double)y - 0.5D, d14 - (double)z - 0.5D, block5));
 					}
 				}
 			}
-
 		}
+
 	}
 
-	public void addBlockHitEffects(int var1, int var2, int var3, int var4) {
-		int var5 = this.worldObj.getBlockId(var1, var2, var3);
-		if(var5 != 0) {
-			Block var6 = Block.blocksList[var5];
-			float var7 = 0.1F;
-			double var8 = (double)var1 + this.rand.nextDouble() * (var6.maxX - var6.minX - (double)(var7 * 2.0F)) + (double)var7 + var6.minX;
-			double var10 = (double)var2 + this.rand.nextDouble() * (var6.maxY - var6.minY - (double)(var7 * 2.0F)) + (double)var7 + var6.minY;
-			double var12 = (double)var3 + this.rand.nextDouble() * (var6.maxZ - var6.minZ - (double)(var7 * 2.0F)) + (double)var7 + var6.minZ;
-			if(var4 == 0) {
-				var10 = (double)var2 + var6.minY - (double)var7;
-			}
-
-			if(var4 == 1) {
-				var10 = (double)var2 + var6.maxY + (double)var7;
-			}
-
-			if(var4 == 2) {
-				var12 = (double)var3 + var6.minZ - (double)var7;
-			}
-
-			if(var4 == 3) {
-				var12 = (double)var3 + var6.maxZ + (double)var7;
-			}
-
-			if(var4 == 4) {
-				var8 = (double)var1 + var6.minX - (double)var7;
-			}
-
-			if(var4 == 5) {
-				var8 = (double)var1 + var6.maxX + (double)var7;
-			}
-
-			this.addEffect((new EntityDiggingFX(this.worldObj, var8, var10, var12, 0.0D, 0.0D, 0.0D, var6)).multiplyVelocity(0.2F).multipleParticleScaleBy(0.6F));
+	public void addBlockHitEffects(int x, int y, int z, int face) {
+		int i5 = this.worldObj.getBlockId(x, y, z);
+		if(i5 != 0) {
+			Block block6 = Block.blocksList[i5];
+			float f7 = 0.1F;
+			double d8 = (double)x + this.rand.nextDouble() * (block6.maxX - block6.minX - (double)(f7 * 2.0F)) + (double)f7 + block6.minX;
+			double d10 = (double)y + this.rand.nextDouble() * (block6.maxY - block6.minY - (double)(f7 * 2.0F)) + (double)f7 + block6.minY;
+			double d12 = (double)z + this.rand.nextDouble() * (block6.maxZ - block6.minZ - (double)(f7 * 2.0F)) + (double)f7 + block6.minZ;
+			if(face == 0) {
+				d10 = (double)y + block6.minY - (double)f7;
+			}
+
+			if(face == 1) {
+				d10 = (double)y + block6.maxY + (double)f7;
+			}
+
+			if(face == 2) {
+				d12 = (double)z + block6.minZ - (double)f7;
+			}
+
+			if(face == 3) {
+				d12 = (double)z + block6.maxZ + (double)f7;
+			}
+
+			if(face == 4) {
+				d8 = (double)x + block6.minX - (double)f7;
+			}
+
+			if(face == 5) {
+				d8 = (double)x + block6.maxX + (double)f7;
+			}
+
+			this.addEffect((new EntityDiggingFX(this.worldObj, d8, d10, d12, 0.0D, 0.0D, 0.0D, block6)).multiplyVelocity(0.2F).multipleParticleScaleBy(0.6F));
 		}
+
 	}
 
 	public String getStatistics() {
--- net/minecraft/src/ChunkPosition.java
+++ net/minecraft/src/ChunkPosition.java
@@ -5,18 +5,18 @@
 	public final int y;
 	public final int z;
 
-	public ChunkPosition(int var1, int var2, int var3) {
-		this.x = var1;
-		this.y = var2;
-		this.z = var3;
+	public ChunkPosition(int x, int y, int z) {
+		this.x = x;
+		this.y = y;
+		this.z = z;
 	}
 
-	public boolean equals(Object var1) {
-		if(!(var1 instanceof ChunkPosition)) {
+	public boolean equals(Object object) {
+		if(!(object instanceof ChunkPosition)) {
 			return false;
 		} else {
-			ChunkPosition var2 = (ChunkPosition)var1;
-			return var2.x == this.x && var2.y == this.y && var2.z == this.z;
+			ChunkPosition chunkPosition2 = (ChunkPosition)object;
+			return chunkPosition2.x == this.x && chunkPosition2.y == this.y && chunkPosition2.z == this.z;
 		}
 	}
 
--- net/minecraft/src/GuiEditSign.java
+++ net/minecraft/src/GuiEditSign.java
@@ -9,8 +9,8 @@
 	private int updateCounter;
 	private int editLine = 0;
 
-	public GuiEditSign(TileEntitySign var1) {
-		this.entitySign = var1;
+	public GuiEditSign(TileEntitySign dy) {
+		this.entitySign = dy;
 	}
 
 	public void initGui() {
@@ -27,64 +27,62 @@
 		++this.updateCounter;
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.enabled) {
-			if(var1.id == 0) {
-				this.entitySign.onInventoryChanged();
-				this.mc.displayGuiScreen((GuiScreen)null);
-			}
-
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled && button.id == 0) {
+			this.entitySign.onInventoryChanged();
+			this.mc.displayGuiScreen((GuiScreen)null);
 		}
+
 	}
 
-	protected void keyTyped(char var1, int var2) {
-		if(var2 == 200) {
+	protected void keyTyped(char character, int key) {
+		if(key == 200) {
 			this.editLine = this.editLine - 1 & 3;
 		}
 
-		if(var2 == 208 || var2 == 28) {
+		if(key == 208 || key == 28) {
 			this.editLine = this.editLine + 1 & 3;
 		}
 
-		if(var2 == 14 && this.entitySign.signText[this.editLine].length() > 0) {
+		if(key == 14 && this.entitySign.signText[this.editLine].length() > 0) {
 			this.entitySign.signText[this.editLine] = this.entitySign.signText[this.editLine].substring(0, this.entitySign.signText[this.editLine].length() - 1);
 		}
 
-		if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(var1) >= 0 && this.entitySign.signText[this.editLine].length() < 15) {
-			this.entitySign.signText[this.editLine] = this.entitySign.signText[this.editLine] + var1;
+		if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(character) >= 0 && this.entitySign.signText[this.editLine].length() < 15) {
+			this.entitySign.signText[this.editLine] = this.entitySign.signText[this.editLine] + character;
 		}
 
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 40, 16777215);
+		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 40, 0xFFFFFF);
 		GL11.glPushMatrix();
 		GL11.glTranslatef((float)(this.width / 2), (float)(this.height / 2), 50.0F);
-		float var4 = 93.75F;
-		GL11.glScalef(-var4, -var4, -var4);
+		float f4 = 93.75F;
+		GL11.glScalef(-f4, -f4, -f4);
 		GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);
-		Block var5 = this.entitySign.getBlockType();
-		if(var5 == Block.signStanding) {
-			float var6 = (float)(this.entitySign.getBlockMetadata() * 360) / 16.0F;
-			GL11.glRotatef(var6, 0.0F, 1.0F, 0.0F);
+		Block block5 = this.entitySign.getBlockType();
+		if(block5 == Block.signStanding) {
+			float f6 = (float)(this.entitySign.getBlockMetadata() * 360) / 16.0F;
+			GL11.glRotatef(f6, 0.0F, 1.0F, 0.0F);
 		} else {
-			int var8 = this.entitySign.getBlockMetadata();
-			float var7 = 0.0F;
-			if(var8 == 2) {
-				var7 = 180.0F;
-			}
-
-			if(var8 == 4) {
-				var7 = 90.0F;
-			}
-
-			if(var8 == 5) {
-				var7 = -90.0F;
-			}
-
-			GL11.glRotatef(var7, 0.0F, 1.0F, 0.0F);
-			GL11.glTranslatef(0.0F, 5.0F / 16.0F, 0.0F);
+			int i8 = this.entitySign.getBlockMetadata();
+			float f7 = 0.0F;
+			if(i8 == 2) {
+				f7 = 180.0F;
+			}
+
+			if(i8 == 4) {
+				f7 = 90.0F;
+			}
+
+			if(i8 == 5) {
+				f7 = -90.0F;
+			}
+
+			GL11.glRotatef(f7, 0.0F, 1.0F, 0.0F);
+			GL11.glTranslatef(0.0F, 0.3125F, 0.0F);
 		}
 
 		if(this.updateCounter / 6 % 2 == 0) {
@@ -94,6 +92,6 @@
 		TileEntityRenderer.instance.renderTileEntityAt(this.entitySign, -0.5D, -0.75D, -0.5D, 0.0F);
 		this.entitySign.lineBeingEdited = -1;
 		GL11.glPopMatrix();
-		super.drawScreen(var1, var2, var3);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- /dev/null
+++ net/minecraft/src/ChunkProviderPopulateOperation.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class ChunkProviderPopulateOperation {
+	public ChunkProviderGenerate caller;
+	public IChunkProvider a;
+	public int x;
+	public int y;
+
+	public ChunkProviderPopulateOperation(ChunkProviderGenerate vy, IChunkProvider adg, int integer3, int integer4) {
+		this.caller = vy;
+		this.a = adg;
+		this.x = integer3;
+		this.y = integer4;
+	}
+}
--- net/minecraft/src/EntitySmokeFX.java
+++ net/minecraft/src/EntitySmokeFX.java
@@ -3,36 +3,36 @@
 public class EntitySmokeFX extends EntityFX {
 	float smokeParticleScale;
 
-	public EntitySmokeFX(World var1, double var2, double var4, double var6) {
-		this(var1, var2, var4, var6, 1.0F);
+	public EntitySmokeFX(World vg, double double2, double double3, double double4) {
+		this(vg, double2, double3, double4, 1.0F);
 	}
 
-	public EntitySmokeFX(World var1, double var2, double var4, double var6, float var8) {
-		super(var1, var2, var4, var6, 0.0D, 0.0D, 0.0D);
+	public EntitySmokeFX(World vg, double double2, double double3, double double4, float float5) {
+		super(vg, double2, double3, double4, 0.0D, 0.0D, 0.0D);
 		this.motionX *= (double)0.1F;
 		this.motionY *= (double)0.1F;
 		this.motionZ *= (double)0.1F;
 		this.particleRed = this.particleGreen = this.particleBlue = (float)(Math.random() * (double)0.3F);
-		this.particleScale *= 12.0F / 16.0F;
-		this.particleScale *= var8;
+		this.particleScale *= 0.75F;
+		this.particleScale *= float5;
 		this.smokeParticleScale = this.particleScale;
 		this.particleMaxAge = (int)(8.0D / (Math.random() * 0.8D + 0.2D));
-		this.particleMaxAge = (int)((float)this.particleMaxAge * var8);
+		this.particleMaxAge = (int)((float)this.particleMaxAge * float5);
 		this.noClip = false;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		float var8 = ((float)this.particleAge + var2) / (float)this.particleMaxAge * 32.0F;
-		if(var8 < 0.0F) {
-			var8 = 0.0F;
-		}
-
-		if(var8 > 1.0F) {
-			var8 = 1.0F;
-		}
-
-		this.particleScale = this.smokeParticleScale * var8;
-		super.renderParticle(var1, var2, var3, var4, var5, var6, var7);
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		float f8 = ((float)this.particleAge + renderPartialTick) / (float)this.particleMaxAge * 32.0F;
+		if(f8 < 0.0F) {
+			f8 = 0.0F;
+		}
+
+		if(f8 > 1.0F) {
+			f8 = 1.0F;
+		}
+
+		this.particleScale = this.smokeParticleScale * f8;
+		super.renderParticle(tessellator, renderPartialTick, xOffset, yOffset, zOffset, xOffset2, zOffset2);
 	}
 
 	public void onUpdate() {
--- net/minecraft/src/ModelSlime.java
+++ net/minecraft/src/ModelSlime.java
@@ -6,11 +6,11 @@
 	ModelRenderer slimeLeftEye;
 	ModelRenderer slimeMouth;
 
-	public ModelSlime(int var1) {
-		this.slimeBodies = new ModelRenderer(0, var1);
+	public ModelSlime(int integer) {
+		this.slimeBodies = new ModelRenderer(0, integer);
 		this.slimeBodies.addBox(-4.0F, 16.0F, -4.0F, 8, 8, 8);
-		if(var1 > 0) {
-			this.slimeBodies = new ModelRenderer(0, var1);
+		if(integer > 0) {
+			this.slimeBodies = new ModelRenderer(0, integer);
 			this.slimeBodies.addBox(-3.0F, 17.0F, -3.0F, 6, 6, 6);
 			this.slimeRightEye = new ModelRenderer(32, 0);
 			this.slimeRightEye.addBox(-3.25F, 18.0F, -3.5F, 2, 2, 2);
@@ -22,16 +22,16 @@
 
 	}
 
-	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
+	public void setRotationAngles(float float1, float float2, float float3, float float4, float float5, float float6) {
 	}
 
-	public void render(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.setRotationAngles(var1, var2, var3, var4, var5, var6);
-		this.slimeBodies.render(var6);
+	public void render(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.setRotationAngles(float1, float2, float3, float4, float5, float6);
+		this.slimeBodies.render(float6);
 		if(this.slimeRightEye != null) {
-			this.slimeRightEye.render(var6);
-			this.slimeLeftEye.render(var6);
-			this.slimeMouth.render(var6);
+			this.slimeRightEye.render(float6);
+			this.slimeLeftEye.render(float6);
+			this.slimeMouth.render(float6);
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/CommandMcRenderdistance.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandMcRenderdistance extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8574_0C78yFnbdwQ2JXE9123HohJ9Nvj5u0fKGH82rg3b6V9tsXIQYugOhBZ02T11;
+    
+    CommandMcRenderdistance(final CommandManager abb) {
+        this.field_8574_0C78yFnbdwQ2JXE9123HohJ9Nvj5u0fKGH82rg3b6V9tsXIQYugOhBZ02T11 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.options.renderDistance = Math.max(Math.min((int)arr[0], 5), 0);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "" + InputHandler.mc.options.renderDistance;
+    }
+}
--- /dev/null
+++ net/minecraft/src/BlockSignOld.java
@@ -1,0 +1,113 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockSignOld extends BlockContainerOld {
+	private Class signEntityClass;
+	private boolean isFreestanding;
+
+	protected BlockSignOld(int integer, Class class2, boolean boolean3) {
+		super(integer, Material.wood);
+		this.isFreestanding = boolean3;
+		this.blockIndexInTexture = 4;
+		this.signEntityClass = class2;
+		float f4 = 0.25F;
+		float f5 = 1.0F;
+		this.setBlockBounds(0.5F - f4, 0.0F, 0.5F - f4, 0.5F + f4, f5, 0.5F + f4);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return null;
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		this.setBlockBoundsBasedOnState(vg, integer2, integer3, integer4);
+		return super.getSelectedBoundingBoxFromPool(vg, integer2, integer3, integer4);
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		if(!this.isFreestanding) {
+			int i5 = abt.getBlockMetadata(integer2, integer3, integer4);
+			float f6 = 0.28125F;
+			float f7 = 0.78125F;
+			float f8 = 0.0F;
+			float f9 = 1.0F;
+			float f10 = 0.125F;
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+			if(i5 == 2) {
+				this.setBlockBounds(f8, f6, 1.0F - f10, f9, f7, 1.0F);
+			}
+
+			if(i5 == 3) {
+				this.setBlockBounds(f8, f6, 0.0F, f9, f7, f10);
+			}
+
+			if(i5 == 4) {
+				this.setBlockBounds(1.0F - f10, f6, f8, 1.0F, f7, f9);
+			}
+
+			if(i5 == 5) {
+				this.setBlockBounds(0.0F, f6, f8, f10, f7, f9);
+			}
+
+		}
+	}
+
+	public int getRenderType() {
+		return -1;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	protected TileEntity getBlockEntity() {
+		try {
+			return (TileEntity)this.signEntityClass.newInstance();
+		} catch (Exception exception2) {
+			throw new RuntimeException(exception2);
+		}
+	}
+
+	public int idDropped(int integer, Random random) {
+		return Item.sign.shiftedIndex;
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		boolean z6 = false;
+		if(this.isFreestanding) {
+			if(!vg.getBlockMaterial(integer2, integer3 - 1, integer4).isSolid()) {
+				z6 = true;
+			}
+		} else {
+			int i7 = vg.getBlockMetadata(integer2, integer3, integer4);
+			z6 = true;
+			if(i7 == 2 && vg.getBlockMaterial(integer2, integer3, integer4 + 1).isSolid()) {
+				z6 = false;
+			}
+
+			if(i7 == 3 && vg.getBlockMaterial(integer2, integer3, integer4 - 1).isSolid()) {
+				z6 = false;
+			}
+
+			if(i7 == 4 && vg.getBlockMaterial(integer2 + 1, integer3, integer4).isSolid()) {
+				z6 = false;
+			}
+
+			if(i7 == 5 && vg.getBlockMaterial(integer2 - 1, integer3, integer4).isSolid()) {
+				z6 = false;
+			}
+		}
+
+		if(z6) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+		}
+
+		super.onNeighborBlockChange(vg, integer2, integer3, integer4, integer5);
+	}
+}
--- /dev/null
+++ net/minecraft/src/MeshDefinition.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+public class MeshDefinition {
+	public PartDefinition rootElem = new PartDefinition();
+
+	public PartDefinition getRoot() {
+		return this.rootElem;
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiPickPainting.java
@@ -1,0 +1,65 @@
+package net.minecraft.src;
+
+import java.util.List;
+
+public class GuiPickPainting extends GuiScreen {
+	private List possibleArt;
+	private EntityPainting target;
+	int page = 0;
+	final int buttons_per_page = 6;
+
+	public GuiPickPainting(List list, EntityPainting du) {
+		this.possibleArt = list;
+		this.target = du;
+	}
+
+	public void initGui() {
+		this.controlList.clear();
+		this.controlList.add(new GuiButton(-727, this.width / 2 - 100, this.height / 4 * 3, "Random"));
+		this.controlList.add(new ButtonSel(-2, this.width / 2 - 170, this.height / 4 + 60, "<<"));
+		this.controlList.add(new ButtonSel(-3, this.width / 2 + 120, this.height / 4 + 60, ">>"));
+
+		for(int i1 = 0; i1 != 6; ++i1) {
+			int i2 = this.page * 6 + i1;
+			if(i2 >= this.possibleArt.size()) {
+				break;
+			}
+
+			this.controlList.add(new GuiButton(i2, this.width / 2 - 100, this.height / 6 + 20 * i1, ((EnumArt)this.possibleArt.get(i2)).title));
+		}
+
+		if(this.page == 0) {
+			((GuiButton)this.controlList.get(1)).enabled = false;
+		}
+
+		if(this.page * 6 + 6 > this.possibleArt.size()) {
+			((GuiButton)this.controlList.get(2)).enabled = false;
+		}
+
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled) {
+			if(button.id == -2) {
+				--this.page;
+				this.initGui();
+			} else if(button.id == -3) {
+				++this.page;
+				this.initGui();
+			} else if(button.id == -727) {
+				this.target.setArt((EnumArt)this.possibleArt.get(this.target.rand.nextInt(this.possibleArt.size())));
+				this.mc.displayGuiScreen((GuiScreen)null);
+			} else {
+				this.target.setArt((EnumArt)this.possibleArt.get(button.id));
+				this.mc.displayGuiScreen((GuiScreen)null);
+			}
+		}
+
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		this.drawDefaultBackground();
+		this.drawCenteredString(this.fontRenderer, "Choose a painting...", this.width / 2, 20, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
+	}
+}
--- net/minecraft/src/RenderChicken.java
+++ net/minecraft/src/RenderChicken.java
@@ -1,29 +1,29 @@
 package net.minecraft.src;
 
 public class RenderChicken extends RenderLiving {
-	public RenderChicken(ModelBase var1, float var2) {
-		super(var1, var2);
-	}
-
-	public void renderChicken(EntityChicken var1, double var2, double var4, double var6, float var8, float var9) {
-		super.doRenderLiving(var1, var2, var4, var6, var8, var9);
-	}
-
-	protected float getWingRotation(EntityChicken var1, float var2) {
-		float var3 = var1.prevWingRotation + (var1.wingRotation - var1.prevWingRotation) * var2;
-		float var4 = var1.prevDestPos + (var1.destPos - var1.prevDestPos) * var2;
-		return (MathHelper.sin(var3) + 1.0F) * var4;
-	}
-
-	protected float handleRotationFloat(EntityLiving var1, float var2) {
-		return this.getWingRotation((EntityChicken)var1, var2);
-	}
-
-	public void doRenderLiving(EntityLiving var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderChicken((EntityChicken)var1, var2, var4, var6, var8, var9);
-	}
-
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderChicken((EntityChicken)var1, var2, var4, var6, var8, var9);
+	public RenderChicken(ModelBase yi, float float2) {
+		super(yi, float2);
+	}
+
+	public void renderChicken(EntityChicken ul, double double2, double double3, double double4, float float5, float float6) {
+		super.doRenderLiving(ul, double2, double3, double4, float5, float6);
+	}
+
+	protected float getWingRotation(EntityChicken ul, float float2) {
+		float f3 = ul.prevWingRotation + (ul.wingRotation - ul.prevWingRotation) * float2;
+		float f4 = ul.prevDestPos + (ul.destPos - ul.prevDestPos) * float2;
+		return (MathHelper.sin(f3) + 1.0F) * f4;
+	}
+
+	protected float handleRotationFloat(EntityLiving zi, float float2) {
+		return this.getWingRotation((EntityChicken)zi, float2);
+	}
+
+	public void doRenderLiving(EntityLiving zi, double double2, double double3, double double4, float float5, float float6) {
+		this.renderChicken((EntityChicken)zi, double2, double3, double4, float5, float6);
+	}
+
+	public void doRender(Entity xy, double double2, double double3, double double4, float float5, float float6) {
+		this.renderChicken((EntityChicken)xy, double2, double3, double4, float5, float6);
 	}
 }
--- net/minecraft/src/ModelMinecart.java
+++ net/minecraft/src/ModelMinecart.java
@@ -10,38 +10,38 @@
 		this.sideModels[3] = new ModelRenderer(0, 0);
 		this.sideModels[4] = new ModelRenderer(0, 0);
 		this.sideModels[5] = new ModelRenderer(44, 10);
-		byte var1 = 20;
-		byte var2 = 8;
-		byte var3 = 16;
-		byte var4 = 4;
-		this.sideModels[0].addBox((float)(-var1 / 2), (float)(-var3 / 2), -1.0F, var1, var3, 2, 0.0F);
-		this.sideModels[0].setRotationPoint(0.0F, (float)(0 + var4), 0.0F);
-		this.sideModels[5].addBox((float)(-var1 / 2 + 1), (float)(-var3 / 2 + 1), -1.0F, var1 - 2, var3 - 2, 1, 0.0F);
-		this.sideModels[5].setRotationPoint(0.0F, (float)(0 + var4), 0.0F);
-		this.sideModels[1].addBox((float)(-var1 / 2 + 2), (float)(-var2 - 1), -1.0F, var1 - 4, var2, 2, 0.0F);
-		this.sideModels[1].setRotationPoint((float)(-var1 / 2 + 1), (float)(0 + var4), 0.0F);
-		this.sideModels[2].addBox((float)(-var1 / 2 + 2), (float)(-var2 - 1), -1.0F, var1 - 4, var2, 2, 0.0F);
-		this.sideModels[2].setRotationPoint((float)(var1 / 2 - 1), (float)(0 + var4), 0.0F);
-		this.sideModels[3].addBox((float)(-var1 / 2 + 2), (float)(-var2 - 1), -1.0F, var1 - 4, var2, 2, 0.0F);
-		this.sideModels[3].setRotationPoint(0.0F, (float)(0 + var4), (float)(-var3 / 2 + 1));
-		this.sideModels[4].addBox((float)(-var1 / 2 + 2), (float)(-var2 - 1), -1.0F, var1 - 4, var2, 2, 0.0F);
-		this.sideModels[4].setRotationPoint(0.0F, (float)(0 + var4), (float)(var3 / 2 - 1));
-		this.sideModels[0].rotateAngleX = (float)Math.PI * 0.5F;
-		this.sideModels[1].rotateAngleY = (float)Math.PI * 3.0F / 2.0F;
-		this.sideModels[2].rotateAngleY = (float)Math.PI * 0.5F;
+		byte b1 = 20;
+		byte b2 = 8;
+		byte b3 = 16;
+		byte b4 = 4;
+		this.sideModels[0].addBox((float)(-b1 / 2), (float)(-b3 / 2), -1.0F, b1, b3, 2, 0.0F);
+		this.sideModels[0].setRotationPoint(0.0F, (float)(0 + b4), 0.0F);
+		this.sideModels[5].addBox((float)(-b1 / 2 + 1), (float)(-b3 / 2 + 1), -1.0F, b1 - 2, b3 - 2, 1, 0.0F);
+		this.sideModels[5].setRotationPoint(0.0F, (float)(0 + b4), 0.0F);
+		this.sideModels[1].addBox((float)(-b1 / 2 + 2), (float)(-b2 - 1), -1.0F, b1 - 4, b2, 2, 0.0F);
+		this.sideModels[1].setRotationPoint((float)(-b1 / 2 + 1), (float)(0 + b4), 0.0F);
+		this.sideModels[2].addBox((float)(-b1 / 2 + 2), (float)(-b2 - 1), -1.0F, b1 - 4, b2, 2, 0.0F);
+		this.sideModels[2].setRotationPoint((float)(b1 / 2 - 1), (float)(0 + b4), 0.0F);
+		this.sideModels[3].addBox((float)(-b1 / 2 + 2), (float)(-b2 - 1), -1.0F, b1 - 4, b2, 2, 0.0F);
+		this.sideModels[3].setRotationPoint(0.0F, (float)(0 + b4), (float)(-b3 / 2 + 1));
+		this.sideModels[4].addBox((float)(-b1 / 2 + 2), (float)(-b2 - 1), -1.0F, b1 - 4, b2, 2, 0.0F);
+		this.sideModels[4].setRotationPoint(0.0F, (float)(0 + b4), (float)(b3 / 2 - 1));
+		this.sideModels[0].rotateAngleX = (float)Math.PI / 2F;
+		this.sideModels[1].rotateAngleY = 4.712389F;
+		this.sideModels[2].rotateAngleY = (float)Math.PI / 2F;
 		this.sideModels[3].rotateAngleY = (float)Math.PI;
-		this.sideModels[5].rotateAngleX = (float)Math.PI * -0.5F;
+		this.sideModels[5].rotateAngleX = -1.5707964F;
 	}
 
-	public void render(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.sideModels[5].rotationPointY = 4.0F - var3;
+	public void render(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.sideModels[5].rotationPointY = 4.0F - float3;
 
-		for(int var7 = 0; var7 < 6; ++var7) {
-			this.sideModels[var7].render(var6);
+		for(int i7 = 0; i7 < 6; ++i7) {
+			this.sideModels[i7].render(float6);
 		}
 
 	}
 
-	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
+	public void setRotationAngles(float float1, float float2, float float3, float float4, float float5, float float6) {
 	}
 }
--- net/minecraft/src/TileEntityRenderer.java
+++ net/minecraft/src/TileEntityRenderer.java
@@ -3,6 +3,7 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
+
 import org.lwjgl.opengl.GL11;
 
 public class TileEntityRenderer {
@@ -24,58 +25,58 @@
 	private TileEntityRenderer() {
 		this.specialRendererMap.put(TileEntitySign.class, new TileEntitySignRenderer());
 		this.specialRendererMap.put(TileEntityMobSpawner.class, new TileEntityMobSpawnerRenderer());
-		Iterator var1 = this.specialRendererMap.values().iterator();
-
-		while(var1.hasNext()) {
-			TileEntitySpecialRenderer var2 = (TileEntitySpecialRenderer)var1.next();
-			var2.setTileEntityRenderer(this);
-		}
-
-	}
-
-	public TileEntitySpecialRenderer getSpecialRendererForClass(Class var1) {
-		TileEntitySpecialRenderer var2 = (TileEntitySpecialRenderer)this.specialRendererMap.get(var1);
-		if(var2 == null && var1 != TileEntity.class) {
-			var2 = this.getSpecialRendererForClass(var1.getSuperclass());
-			this.specialRendererMap.put(var1, var2);
-		}
-
-		return var2;
-	}
-
-	public boolean hasSpecialRenderer(TileEntity var1) {
-		return this.getSpecialRendererForEntity(var1) != null;
-	}
-
-	public TileEntitySpecialRenderer getSpecialRendererForEntity(TileEntity var1) {
-		return this.getSpecialRendererForClass(var1.getClass());
-	}
-
-	public void cacheActiveRenderInfo(World var1, RenderEngine var2, FontRenderer var3, EntityPlayer var4, float var5) {
-		this.worldObj = var1;
-		this.renderEngine = var2;
-		this.entityPlayer = var4;
-		this.fontRenderer = var3;
-		this.playerYaw = var4.prevRotationYaw + (var4.rotationYaw - var4.prevRotationYaw) * var5;
-		this.playerPitch = var4.prevRotationPitch + (var4.rotationPitch - var4.prevRotationPitch) * var5;
-		this.playerX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var5;
-		this.playerY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)var5;
-		this.playerZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)var5;
-	}
-
-	public void renderTileEntity(TileEntity var1, float var2) {
-		if(var1.getDistanceFrom(this.playerX, this.playerY, this.playerZ) < 4096.0D) {
-			float var3 = this.worldObj.getBrightness(var1.xCoord, var1.yCoord, var1.zCoord);
-			GL11.glColor3f(var3, var3, var3);
-			this.renderTileEntityAt(var1, (double)var1.xCoord - staticPlayerX, (double)var1.yCoord - staticPlayerY, (double)var1.zCoord - staticPlayerZ, var2);
-		}
-
-	}
-
-	public void renderTileEntityAt(TileEntity var1, double var2, double var4, double var6, float var8) {
-		TileEntitySpecialRenderer var9 = this.getSpecialRendererForEntity(var1);
-		if(var9 != null) {
-			var9.renderTileEntityAt(var1, var2, var4, var6, var8);
+		Iterator iterator1 = this.specialRendererMap.values().iterator();
+
+		while(iterator1.hasNext()) {
+			TileEntitySpecialRenderer tileEntitySpecialRenderer2 = (TileEntitySpecialRenderer)iterator1.next();
+			tileEntitySpecialRenderer2.setTileEntityRendere(this);
+		}
+
+	}
+
+	public TileEntitySpecialRenderer getSpecialRendererForClass(Class tileClass) {
+		TileEntitySpecialRenderer tileEntitySpecialRenderer2 = (TileEntitySpecialRenderer)this.specialRendererMap.get(tileClass);
+		if(tileEntitySpecialRenderer2 == null && tileClass != TileEntity.class) {
+			tileEntitySpecialRenderer2 = this.getSpecialRendererForClass(tileClass.getSuperclass());
+			this.specialRendererMap.put(tileClass, tileEntitySpecialRenderer2);
+		}
+
+		return tileEntitySpecialRenderer2;
+	}
+
+	public boolean hasSpecialRenderer(TileEntity tileEntity) {
+		return this.getSpecialRendererForEntity(tileEntity) != null;
+	}
+
+	public TileEntitySpecialRenderer getSpecialRendererForEntity(TileEntity tileEntity) {
+		return this.getSpecialRendererForClass(tileEntity.getClass());
+	}
+
+	public void cacheActiveRenderInfo(World world, RenderEngine renderEngine, FontRenderer fontRenderer, EntityPlayer entityPlayer, float renderPartialTick) {
+		this.worldObj = world;
+		this.renderEngine = renderEngine;
+		this.entityPlayer = entityPlayer;
+		this.fontRenderer = fontRenderer;
+		this.playerYaw = entityPlayer.prevRotationYaw + (entityPlayer.rotationYaw - entityPlayer.prevRotationYaw) * renderPartialTick;
+		this.playerPitch = entityPlayer.prevRotationPitch + (entityPlayer.rotationPitch - entityPlayer.prevRotationPitch) * renderPartialTick;
+		this.playerX = entityPlayer.lastTickPosX + (entityPlayer.posX - entityPlayer.lastTickPosX) * (double)renderPartialTick;
+		this.playerY = entityPlayer.lastTickPosY + (entityPlayer.posY - entityPlayer.lastTickPosY) * (double)renderPartialTick;
+		this.playerZ = entityPlayer.lastTickPosZ + (entityPlayer.posZ - entityPlayer.lastTickPosZ) * (double)renderPartialTick;
+	}
+
+	public void renderTileEntity(TileEntity tileEntity, float renderPartialTick) {
+		if(tileEntity.getDistanceFrom(this.playerX, this.playerY, this.playerZ) < 4096.0D) {
+			float f3 = this.worldObj.getBrightness(tileEntity.xCoord, tileEntity.yCoord, tileEntity.zCoord);
+			GL11.glColor3f(f3, f3, f3);
+			this.renderTileEntityAt(tileEntity, (double)tileEntity.xCoord - staticPlayerX, (double)tileEntity.yCoord - staticPlayerY, (double)tileEntity.zCoord - staticPlayerZ, renderPartialTick);
+		}
+
+	}
+
+	public void renderTileEntityAt(TileEntity tileEntity, double x, double y, double z, float renderPartialTick) {
+		TileEntitySpecialRenderer tileEntitySpecialRenderer9 = this.getSpecialRendererForEntity(tileEntity);
+		if(tileEntitySpecialRenderer9 != null) {
+			tileEntitySpecialRenderer9.renderTileEntityAt(tileEntity, x, y, z, renderPartialTick);
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/PartDefinition.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class PartDefinition {
+	public List addedParts = new ArrayList();
+
+	public PartDefinition addOrReplaceChild(String string, CubeListBuilder vh, PartPose dw) {
+		this.addedParts.add(new PartDefinitionElement(string, vh, dw));
+		return this;
+	}
+}
--- /dev/null
+++ net/minecraft/src/MinecraftUnknownClass2.java
@@ -1,0 +1,102 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+import net.minecraft.client.Minecraft;
+
+public class MinecraftUnknownClass2 {
+	private List field_11693_4tBW66xCB0x1JjOWv8N7q31cA99X2BV8Oo7379U05654SRVtu47fAGXkAEr7 = new ArrayList();
+	private VisualsUnknownClass field_11695_4S9Fcx7F5VFCS7yhEnk6Dc66E2tz3hr1zH66H63HoQoVMPzQKbQjjTf4G3yU = new VisualsStandart();
+	public VisualsUnknownClass field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0;
+	private Map field_11694_67TYzK6LmS5ZMds6GbPYvQmB5hd0vbBeP5deiIFI2CXuH6f9z6Xv6sxTr2aP = new HashMap();
+	private Minecraft field_11690_6QM8vJ001toaiyxf21S7JLzeO9PLM6f7rxtDmJXw5YTY3HX6SGVJ7c5SYvBv;
+	private File field_11691_1LT0h6BV4jbX1ewcpKP7f4TZ4Iq0UX0EinvNzR1Oyni5X5y6mx38E3Bw7nQ0;
+	private String field_11689_053IXqAbrKdiiQ1FWvZ6pIn1X3S9253Jico77fGQ5cVOe61X51S491K1psNo;
+
+	public MinecraftUnknownClass2(Minecraft minecraft, File file) {
+		this.field_11690_6QM8vJ001toaiyxf21S7JLzeO9PLM6f7rxtDmJXw5YTY3HX6SGVJ7c5SYvBv = minecraft;
+		this.field_11691_1LT0h6BV4jbX1ewcpKP7f4TZ4Iq0UX0EinvNzR1Oyni5X5y6mx38E3Bw7nQ0 = new File(file, "texturepacks");
+		if(!this.field_11691_1LT0h6BV4jbX1ewcpKP7f4TZ4Iq0UX0EinvNzR1Oyni5X5y6mx38E3Bw7nQ0.exists()) {
+			this.field_11691_1LT0h6BV4jbX1ewcpKP7f4TZ4Iq0UX0EinvNzR1Oyni5X5y6mx38E3Bw7nQ0.mkdirs();
+		}
+
+		this.field_11689_053IXqAbrKdiiQ1FWvZ6pIn1X3S9253Jico77fGQ5cVOe61X51S491K1psNo = minecraft.options.field_11745_5cq9PhUp8LROyS1A2CPi3fyxFgmWABb66h72hAC97w32G831S582rHP9QCBn;
+		this.func_11686_0yeI5h1X9b94d4uci2eCaLdWyK789MtuRcX9xpiRS1xz81zEG9z4urygJcFf();
+		this.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0.func_10159_18ZVjfTsTKfB80BRv0MI82mIW7A5kEEVTFqM41a5Y88G06sn7n695Ml9CX4X();
+	}
+
+	public boolean func_11688_663pI2OKy99iPX44ZQP69Mfd981246V7m8L66atRipA89ks12No52IZGw4mJ(VisualsUnknownClass qr) {
+		if(qr == this.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0) {
+			return false;
+		} else {
+			this.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0.func_10163_2I13qZ82Olr559q81461XqI7EvNeguYD7GAG7DmGJf04Fu44f4iY1Oy7WJME();
+			this.field_11689_053IXqAbrKdiiQ1FWvZ6pIn1X3S9253Jico77fGQ5cVOe61X51S491K1psNo = qr.field_10166_0Sg7537VnLZ7du5FsLln7EYJ7tLG9LfdbFsVG53zuLLa94D21JXk6aie9tls;
+			this.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0 = qr;
+			this.field_11690_6QM8vJ001toaiyxf21S7JLzeO9PLM6f7rxtDmJXw5YTY3HX6SGVJ7c5SYvBv.options.field_11745_5cq9PhUp8LROyS1A2CPi3fyxFgmWABb66h72hAC97w32G831S582rHP9QCBn = this.field_11689_053IXqAbrKdiiQ1FWvZ6pIn1X3S9253Jico77fGQ5cVOe61X51S491K1psNo;
+			this.field_11690_6QM8vJ001toaiyxf21S7JLzeO9PLM6f7rxtDmJXw5YTY3HX6SGVJ7c5SYvBv.options.saveOptions();
+			this.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0.func_10159_18ZVjfTsTKfB80BRv0MI82mIW7A5kEEVTFqM41a5Y88G06sn7n695Ml9CX4X();
+			return true;
+		}
+	}
+
+	public void func_11686_0yeI5h1X9b94d4uci2eCaLdWyK789MtuRcX9xpiRS1xz81zEG9z4urygJcFf() {
+		ArrayList arrayList1 = new ArrayList();
+		this.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0 = null;
+		arrayList1.add(this.field_11695_4S9Fcx7F5VFCS7yhEnk6Dc66E2tz3hr1zH66H63HoQoVMPzQKbQjjTf4G3yU);
+		if(this.field_11691_1LT0h6BV4jbX1ewcpKP7f4TZ4Iq0UX0EinvNzR1Oyni5X5y6mx38E3Bw7nQ0.exists() && this.field_11691_1LT0h6BV4jbX1ewcpKP7f4TZ4Iq0UX0EinvNzR1Oyni5X5y6mx38E3Bw7nQ0.isDirectory()) {
+			File[] file2 = this.field_11691_1LT0h6BV4jbX1ewcpKP7f4TZ4Iq0UX0EinvNzR1Oyni5X5y6mx38E3Bw7nQ0.listFiles();
+			File[] file3 = file2;
+			int i4 = file2.length;
+
+			for(int i5 = 0; i5 < i4; ++i5) {
+				File file6 = file3[i5];
+				if(file6.isFile() && file6.getName().toLowerCase().endsWith(".zip")) {
+					String string7 = file6.getName() + ":" + file6.length() + ":" + file6.lastModified();
+
+					try {
+						if(!this.field_11694_67TYzK6LmS5ZMds6GbPYvQmB5hd0vbBeP5deiIFI2CXuH6f9z6Xv6sxTr2aP.containsKey(string7)) {
+							VisualsReader visualsReader8 = new VisualsReader(file6);
+							visualsReader8.field_10167_4p5HDq8cPm6prmKZL6SU5o5En606fQrkgqDrSQFfG4aK8f713sgNU29Ueh6v = string7;
+							this.field_11694_67TYzK6LmS5ZMds6GbPYvQmB5hd0vbBeP5deiIFI2CXuH6f9z6Xv6sxTr2aP.put(string7, visualsReader8);
+							visualsReader8.func_10158_0Gpj8594Ufmy5e2AAxicC9QX8AZ598q48b12zV8cSfE61ZzMvANYL3Omgcv9(this.field_11690_6QM8vJ001toaiyxf21S7JLzeO9PLM6f7rxtDmJXw5YTY3HX6SGVJ7c5SYvBv);
+						}
+
+						VisualsUnknownClass visualsUnknownClass12 = (VisualsUnknownClass)this.field_11694_67TYzK6LmS5ZMds6GbPYvQmB5hd0vbBeP5deiIFI2CXuH6f9z6Xv6sxTr2aP.get(string7);
+						if(visualsUnknownClass12.field_10166_0Sg7537VnLZ7du5FsLln7EYJ7tLG9LfdbFsVG53zuLLa94D21JXk6aie9tls.equals(this.field_11689_053IXqAbrKdiiQ1FWvZ6pIn1X3S9253Jico77fGQ5cVOe61X51S491K1psNo)) {
+							this.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0 = visualsUnknownClass12;
+						}
+
+						arrayList1.add(visualsUnknownClass12);
+					} catch (IOException iOException9) {
+						iOException9.printStackTrace();
+					}
+				}
+			}
+		}
+
+		if(this.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0 == null) {
+			this.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0 = this.field_11695_4S9Fcx7F5VFCS7yhEnk6Dc66E2tz3hr1zH66H63HoQoVMPzQKbQjjTf4G3yU;
+		}
+
+		this.field_11693_4tBW66xCB0x1JjOWv8N7q31cA99X2BV8Oo7379U05654SRVtu47fAGXkAEr7.removeAll(arrayList1);
+		Iterator iterator10 = this.field_11693_4tBW66xCB0x1JjOWv8N7q31cA99X2BV8Oo7379U05654SRVtu47fAGXkAEr7.iterator();
+
+		while(iterator10.hasNext()) {
+			VisualsUnknownClass visualsUnknownClass11 = (VisualsUnknownClass)iterator10.next();
+			visualsUnknownClass11.func_10160_6kOi4sh8w5g34shttmoUUEDgCPE5VRiNwN076cQcxuDFXDkU0y92lK2v99vL(this.field_11690_6QM8vJ001toaiyxf21S7JLzeO9PLM6f7rxtDmJXw5YTY3HX6SGVJ7c5SYvBv);
+			this.field_11694_67TYzK6LmS5ZMds6GbPYvQmB5hd0vbBeP5deiIFI2CXuH6f9z6Xv6sxTr2aP.remove(visualsUnknownClass11.field_10167_4p5HDq8cPm6prmKZL6SU5o5En606fQrkgqDrSQFfG4aK8f713sgNU29Ueh6v);
+		}
+
+		this.field_11693_4tBW66xCB0x1JjOWv8N7q31cA99X2BV8Oo7379U05654SRVtu47fAGXkAEr7 = arrayList1;
+	}
+
+	public List func_11687_4UH7IiXkuqd31i8hvRh1k6pGb1Yy461zeePLNBB7h6wQN8j32SEy5HWeSri8() {
+		return new ArrayList(this.field_11693_4tBW66xCB0x1JjOWv8N7q31cA99X2BV8Oo7379U05654SRVtu47fAGXkAEr7);
+	}
+}
--- /dev/null
+++ net/minecraft/src/GenHubDoor.java
@@ -1,0 +1,22 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class GenHubDoor extends WorldGenerator {
+	private int blockID;
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 64; ++i6) {
+			int i9 = x + rand.nextInt(16) - rand.nextInt(16);
+			int i7;
+			int i8;
+			int i10 = world.getBlockId(i9, (i8 = y + rand.nextInt(4) - rand.nextInt(4)) - 1, i7 = z + rand.nextInt(8) - rand.nextInt(8));
+			boolean z11 = i10 != 0 && i10 != 9 && i10 != 116 && i10 != 18 && i10 != ExtBlocks.glowingFlower.blockID && i10 != ExtBlocks.blueFireIdk.blockID;
+			if(world.getBlockId(i9, i8, i7) == 0 && z11) {
+				world.setBlock(i9, i8, i7, Block.doorSteel.blockID);
+			}
+		}
+
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockStepOld.java
@@ -1,0 +1,60 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockStepOld extends BlockOld {
+	private boolean blockType;
+
+	public BlockStepOld(int integer, boolean boolean2) {
+		super(integer, 6, Material.rock);
+		this.blockType = boolean2;
+		if(!boolean2) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
+		}
+
+		this.setLightOpacity(255);
+	}
+
+	public int getBlockTextureFromSide(int integer) {
+		return integer <= 1 ? 6 : 5;
+	}
+
+	public boolean isOpaqueCube() {
+		return this.blockType;
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		if(this == BlockOld.stairSingle) {
+			;
+		}
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+		if(this != BlockOld.stairSingle) {
+			super.onBlockAdded(vg, integer2, integer3, integer4);
+		}
+
+		int i5 = vg.getBlockId(integer2, integer3 - 1, integer4);
+		if(i5 == stairSingle.blockID) {
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+			vg.setBlockWithNotify(integer2, integer3 - 1, integer4, BlockOld.stairDouble.blockID);
+		}
+
+	}
+
+	public int idDropped(int integer, Random random) {
+		return BlockOld.stairSingle.blockID;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return this.blockType;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		if(this != BlockOld.stairSingle) {
+			super.shouldSideBeRendered(abt, integer2, integer3, integer4, integer5);
+		}
+
+		return integer5 == 1 ? true : (!super.shouldSideBeRendered(abt, integer2, integer3, integer4, integer5) ? false : (integer5 == 0 ? true : abt.getBlockId(integer2, integer3, integer4) != this.blockID));
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandZmGivepoints.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+class CommandZmGivepoints extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8566_1k1f7j4GB7lBtWZ7RVCsy1i921WloZ0MUN4V7MzMr1E4E3x62mZdz711DC2v;
+    
+    CommandZmGivepoints(final CommandManager abb) {
+        this.field_8566_1k1f7j4GB7lBtWZ7RVCsy1i921WloZ0MUN4V7MzMr1E4E3x62mZdz711DC2v = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        if (ScreenDebugMenu.dbg_conf_enableCheats) {
+            ((EntityPlayerZombieModeClient)InputHandler.mc.thePlayer).field_9095_8r1p6dXov35XVGqHPTyu0mhQY07LIgNPAKU1jCGpw1xH3B73c0Oj84N6832q.func_8688_6DmcXOP1jZRKDasP2440t8904Ry66MRC3K00nwd8iGDlPgYii5d1f50QVICF((int)arr[0]);
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/CommandINTERLOPE.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+class CommandINTERLOPE extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8549_5QI324sf5XzB9ggj42KRuOeAXbou29h8S0EifH9rFNq6p96RtbPDw0hcYCeD;
+    
+    CommandINTERLOPE(final CommandManager abb) {
+        this.field_8549_5QI324sf5XzB9ggj42KRuOeAXbou29h8S0EifH9rFNq6p96RtbPDw0hcYCeD = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        throw new RuntimeException("Unable to connect to s0.fsky.org:27015");
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+    
+    @Override
+    public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+        return false;
+    }
+}
--- net/minecraft/src/ChunkProviderLoadOrGenerate.java
+++ net/minecraft/src/ChunkProviderLoadOrGenerate.java
@@ -3,179 +3,180 @@
 import java.io.IOException;
 
 public class ChunkProviderLoadOrGenerate implements IChunkProvider {
-	private Chunk blankChunk;
-	private IChunkProvider chunkProvider;
-	private IChunkLoader chunkLoader;
-	private Chunk[] chunks = new Chunk[1024];
-	private World worldObj;
-	int lastQueriedChunkXPos = -999999999;
-	int lastQueriedChunkZPos = -999999999;
-	private Chunk lastQueriedChunk;
+	protected Chunk blankChunk;
+	protected IChunkProvider chunkProvider;
+	protected IChunkLoader chunkLoader;
+	protected Chunk[] chunks = new Chunk[1024];
+	protected World worldObj;
+	protected int lastQueriedChunkXPos = -999999999;
+	protected int lastQueriedChunkZPos = -999999999;
+	protected Chunk lastQueriedChunk;
 
-	public ChunkProviderLoadOrGenerate(World var1, IChunkLoader var2, IChunkProvider var3) {
-		this.blankChunk = new Chunk(var1, new byte[-Short.MIN_VALUE], 0, 0);
+	public ChunkProviderLoadOrGenerate(World world, IChunkLoader chunkLoader, IChunkProvider chunkProvider) {
+		this.blankChunk = new Chunk(world, new byte[32768], 0, 0);
 		this.blankChunk.isChunkRendered = true;
 		this.blankChunk.neverSave = true;
-		this.worldObj = var1;
-		this.chunkLoader = var2;
-		this.chunkProvider = var3;
+		this.worldObj = world;
+		this.chunkLoader = chunkLoader;
+		this.chunkProvider = chunkProvider;
 	}
 
-	public boolean chunkExists(int var1, int var2) {
-		if(var1 == this.lastQueriedChunkXPos && var2 == this.lastQueriedChunkZPos && this.lastQueriedChunk != null) {
+	public boolean chunkExists(int x, int z) {
+		if(x == this.lastQueriedChunkXPos && z == this.lastQueriedChunkZPos && this.lastQueriedChunk != null) {
 			return true;
 		} else {
-			int var3 = var1 & 31;
-			int var4 = var2 & 31;
-			int var5 = var3 + var4 * 32;
-			return this.chunks[var5] != null && (this.chunks[var5] == this.blankChunk || this.chunks[var5].isAtLocation(var1, var2));
+			int i3 = x & 31;
+			int i4 = z & 31;
+			int i5 = i3 + i4 * 32;
+			return this.chunks[i5] != null && (this.chunks[i5] == this.blankChunk || this.chunks[i5].isAtLocation(x, z));
 		}
 	}
 
-	public Chunk provideChunk(int var1, int var2) {
-		if(var1 == this.lastQueriedChunkXPos && var2 == this.lastQueriedChunkZPos && this.lastQueriedChunk != null) {
+	public Chunk provideChunk(int x, int z) {
+		if(x == this.lastQueriedChunkXPos && z == this.lastQueriedChunkZPos && this.lastQueriedChunk != null) {
 			return this.lastQueriedChunk;
 		} else {
-			int var3 = var1 & 31;
-			int var4 = var2 & 31;
-			int var5 = var3 + var4 * 32;
-			if(!this.chunkExists(var1, var2)) {
-				if(this.chunks[var5] != null) {
-					this.chunks[var5].onChunkUnload();
-					this.saveChunk(this.chunks[var5]);
-					this.saveExtraChunkData(this.chunks[var5]);
+			int i3 = x & 31;
+			int i4 = z & 31;
+			int i5 = i3 + i4 * 32;
+			if(!this.chunkExists(x, z)) {
+				if(this.chunks[i5] != null) {
+					this.chunks[i5].onChunkUnload();
+					this.saveChunk(this.chunks[i5]);
+					this.saveExtraChunkData(this.chunks[i5]);
 				}
 
-				Chunk var6 = this.getChunkAt(var1, var2);
-				if(var6 == null) {
+				Chunk chunk6 = this.getChunkAt(x, z);
+				if(chunk6 == null) {
 					if(this.chunkProvider == null) {
-						var6 = this.blankChunk;
+						chunk6 = this.blankChunk;
 					} else {
-						var6 = this.chunkProvider.provideChunk(var1, var2);
+						chunk6 = this.chunkProvider.provideChunk(x, z);
 					}
 				}
 
-				this.chunks[var5] = var6;
-				if(this.chunks[var5] != null) {
-					this.chunks[var5].onChunkLoad();
-				}
-
-				if(!this.chunks[var5].isTerrainPopulated && this.chunkExists(var1 + 1, var2 + 1) && this.chunkExists(var1, var2 + 1) && this.chunkExists(var1 + 1, var2)) {
-					this.populate(this, var1, var2);
-				}
-
-				if(this.chunkExists(var1 - 1, var2) && !this.provideChunk(var1 - 1, var2).isTerrainPopulated && this.chunkExists(var1 - 1, var2 + 1) && this.chunkExists(var1, var2 + 1) && this.chunkExists(var1 - 1, var2)) {
-					this.populate(this, var1 - 1, var2);
-				}
-
-				if(this.chunkExists(var1, var2 - 1) && !this.provideChunk(var1, var2 - 1).isTerrainPopulated && this.chunkExists(var1 + 1, var2 - 1) && this.chunkExists(var1, var2 - 1) && this.chunkExists(var1 + 1, var2)) {
-					this.populate(this, var1, var2 - 1);
-				}
-
-				if(this.chunkExists(var1 - 1, var2 - 1) && !this.provideChunk(var1 - 1, var2 - 1).isTerrainPopulated && this.chunkExists(var1 - 1, var2 - 1) && this.chunkExists(var1, var2 - 1) && this.chunkExists(var1 - 1, var2)) {
-					this.populate(this, var1 - 1, var2 - 1);
+				this.chunks[i5] = chunk6;
+				if(this.chunks[i5] != null) {
+					this.chunks[i5].onChunkLoad();
+				}
+
+				if(!this.chunks[i5].isTerrainPopulated && this.chunkExists(x + 1, z + 1) && this.chunkExists(x, z + 1) && this.chunkExists(x + 1, z)) {
+					this.populate(this, x, z);
+				}
+
+				if(this.chunkExists(x - 1, z) && !this.provideChunk(x - 1, z).isTerrainPopulated && this.chunkExists(x - 1, z + 1) && this.chunkExists(x, z + 1) && this.chunkExists(x - 1, z)) {
+					this.populate(this, x - 1, z);
+				}
+
+				if(this.chunkExists(x, z - 1) && !this.provideChunk(x, z - 1).isTerrainPopulated && this.chunkExists(x + 1, z - 1) && this.chunkExists(x, z - 1) && this.chunkExists(x + 1, z)) {
+					this.populate(this, x, z - 1);
+				}
+
+				if(this.chunkExists(x - 1, z - 1) && !this.provideChunk(x - 1, z - 1).isTerrainPopulated && this.chunkExists(x - 1, z - 1) && this.chunkExists(x, z - 1) && this.chunkExists(x - 1, z)) {
+					this.populate(this, x - 1, z - 1);
 				}
 			}
 
-			this.lastQueriedChunkXPos = var1;
-			this.lastQueriedChunkZPos = var2;
-			this.lastQueriedChunk = this.chunks[var5];
-			return this.chunks[var5];
+			this.lastQueriedChunkXPos = x;
+			this.lastQueriedChunkZPos = z;
+			this.lastQueriedChunk = this.chunks[i5];
+			return this.chunks[i5];
 		}
 	}
 
-	private Chunk getChunkAt(int var1, int var2) {
+	protected Chunk getChunkAt(int x, int z) {
 		if(this.chunkLoader == null) {
 			return null;
 		} else {
 			try {
-				Chunk var3 = this.chunkLoader.loadChunk(this.worldObj, var1, var2);
-				if(var3 != null) {
-					var3.lastSaveTime = this.worldObj.worldTime;
+				Chunk chunk3 = this.chunkLoader.loadChunk(this.worldObj, x, z);
+				if(chunk3 != null) {
+					chunk3.lastSaveTime = this.worldObj.worldTime;
 				}
 
-				return var3;
-			} catch (Exception var4) {
-				var4.printStackTrace();
+				return chunk3;
+			} catch (Exception exception4) {
+				exception4.printStackTrace();
 				return null;
 			}
 		}
 	}
 
-	private void saveExtraChunkData(Chunk var1) {
-		if(this.chunkLoader != null) {
-			try {
-				this.chunkLoader.saveExtraChunkData(this.worldObj, var1);
-			} catch (Exception var3) {
-				var3.printStackTrace();
-			}
-
-		}
-	}
-
-	private void saveChunk(Chunk var1) {
-		if(this.chunkLoader != null) {
-			try {
-				var1.lastSaveTime = this.worldObj.worldTime;
-				this.chunkLoader.saveChunk(this.worldObj, var1);
-			} catch (IOException var3) {
-				var3.printStackTrace();
-			}
-
-		}
-	}
-
-	public void populate(IChunkProvider var1, int var2, int var3) {
-		Chunk var4 = this.provideChunk(var2, var3);
-		if(!var4.isTerrainPopulated) {
-			var4.isTerrainPopulated = true;
+	protected void saveExtraChunkData(Chunk chunk) {
+		if(this.chunkLoader != null) {
+			try {
+				this.chunkLoader.saveExtraChunkData(this.worldObj, chunk);
+			} catch (Exception exception3) {
+				exception3.printStackTrace();
+			}
+		}
+
+	}
+
+	protected void saveChunk(Chunk chunk) {
+		if(this.chunkLoader != null) {
+			try {
+				chunk.lastSaveTime = this.worldObj.worldTime;
+				this.chunkLoader.saveChunk(this.worldObj, chunk);
+			} catch (IOException iOException3) {
+				iOException3.printStackTrace();
+			}
+		}
+
+	}
+
+	public void populate(IChunkProvider chunkProvider, int x, int z) {
+		Chunk chunk4 = this.provideChunk(x, z);
+		if(!chunk4.isTerrainPopulated) {
+			chunk4.isTerrainPopulated = true;
 			if(this.chunkProvider != null) {
-				this.chunkProvider.populate(var1, var2, var3);
-				var4.setChunkModified();
+				this.chunkProvider.populate(chunkProvider, x, z);
+				ModLoader.PopulateChunk(this.chunkProvider, x * 16, z * 16, this.worldObj);
+				chunk4.setChunkModified();
 			}
 		}
 
 	}
 
-	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
-		int var3 = 0;
-		int var4 = 0;
-		int var5;
-		if(var2 != null) {
-			for(var5 = 0; var5 < this.chunks.length; ++var5) {
-				if(this.chunks[var5] != null && this.chunks[var5].needsSaving(var1)) {
-					++var4;
+	public boolean saveChunks(boolean z1, IProgressUpdate iProgressUpdate) {
+		int i3 = 0;
+		int i4 = 0;
+		int i5;
+		if(iProgressUpdate != null) {
+			for(i5 = 0; i5 < this.chunks.length; ++i5) {
+				if(this.chunks[i5] != null && this.chunks[i5].needsSaving(z1)) {
+					++i4;
 				}
 			}
 		}
 
-		var5 = 0;
+		i5 = 0;
 
-		for(int var6 = 0; var6 < this.chunks.length; ++var6) {
-			if(this.chunks[var6] != null) {
-				if(var1 && !this.chunks[var6].neverSave) {
-					this.saveExtraChunkData(this.chunks[var6]);
+		for(int i6 = 0; i6 < this.chunks.length; ++i6) {
+			if(this.chunks[i6] != null) {
+				if(z1 && !this.chunks[i6].neverSave) {
+					this.saveExtraChunkData(this.chunks[i6]);
 				}
 
-				if(this.chunks[var6].needsSaving(var1)) {
-					this.saveChunk(this.chunks[var6]);
-					this.chunks[var6].isModified = false;
-					++var3;
-					if(var3 == 2 && !var1) {
+				if(this.chunks[i6].needsSaving(z1)) {
+					this.saveChunk(this.chunks[i6]);
+					this.chunks[i6].isModified = false;
+					++i3;
+					if(i3 == 2 && !z1) {
 						return false;
 					}
 
-					if(var2 != null) {
-						++var5;
-						if(var5 % 10 == 0) {
-							var2.setLoadingProgress(var5 * 100 / var4);
+					if(iProgressUpdate != null) {
+						++i5;
+						if(i5 % 10 == 0) {
+							iProgressUpdate.setLoadingProgress(i5 * 100 / i4);
 						}
 					}
 				}
 			}
 		}
 
-		if(var1) {
+		if(z1) {
 			if(this.chunkLoader == null) {
 				return true;
 			}
--- net/minecraft/src/IsoImageBuffer.java
+++ net/minecraft/src/IsoImageBuffer.java
@@ -12,21 +12,21 @@
 	public int lastVisible = 0;
 	public boolean addedToRenderQueue = false;
 
-	public IsoImageBuffer(World var1, int var2, int var3) {
-		this.level = var1;
-		this.init(var2, var3);
+	public IsoImageBuffer(World vg, int integer2, int integer3) {
+		this.level = vg;
+		this.init(integer2, integer3);
 	}
 
-	public void init(int var1, int var2) {
+	public void init(int integer1, int integer2) {
 		this.rendered = false;
-		this.x = var1;
-		this.y = var2;
+		this.x = integer1;
+		this.y = integer2;
 		this.lastVisible = 0;
 		this.addedToRenderQueue = false;
 	}
 
-	public void setLevel(World var1, int var2, int var3) {
-		this.level = var1;
-		this.init(var2, var3);
+	public void setLevel(World vg, int integer2, int integer3) {
+		this.level = vg;
+		this.init(integer2, integer3);
 	}
 }
--- net/minecraft/src/BlockFire.java
+++ net/minecraft/src/BlockFire.java
@@ -3,26 +3,21 @@
 import java.util.Random;
 
 public class BlockFire extends Block {
-	private int[] chanceToEncourageFire = new int[256];
-	private int[] abilityToCatchFire = new int[256];
+	private int[] chanceToEncourageFire = new int[32767];
+	private int[] abilityToCatchFire = new int[32767];
 
-	protected BlockFire(int var1, int var2) {
-		super(var1, var2, Material.fire);
-		this.initializeBlock(Block.planks.blockID, 5, 20);
-		this.initializeBlock(Block.wood.blockID, 5, 5);
-		this.initializeBlock(Block.leaves.blockID, 30, 60);
-		this.initializeBlock(Block.bookshelf.blockID, 30, 20);
+	protected BlockFire(int id, int blockIndex) {
+		super(id, blockIndex, Material.fire);
 		this.initializeBlock(Block.tnt.blockID, 15, 100);
-		this.initializeBlock(Block.cloth.blockID, 30, 60);
 		this.setTickOnLoad(true);
 	}
 
-	private void initializeBlock(int var1, int var2, int var3) {
-		this.chanceToEncourageFire[var1] = var2;
-		this.abilityToCatchFire[var1] = var3;
+	private void initializeBlock(int blockID, int chance, int ability) {
+		this.chanceToEncourageFire[blockID] = chance;
+		this.abilityToCatchFire[blockID] = ability;
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -38,7 +33,7 @@
 		return 3;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 0;
 	}
 
@@ -46,84 +41,81 @@
 		return 10;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if(var6 < 15) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var6 + 1);
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if(i6 < 15) {
+			world.setBlockMetadataWithNotify(x, y, z, i6 + 1);
+			world.scheduleBlockUpdate(x, y, z, this.blockID);
 		}
 
-		if(!this.canNeighborBurn(var1, var2, var3, var4)) {
-			if(!var1.isBlockNormalCube(var2, var3 - 1, var4) || var6 > 3) {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
+		if(!this.canNeighborBurn(world, x, y, z)) {
+			if(!world.isBlockNormalCube(x, y - 1, z) || i6 > 3) {
+				world.setBlockWithNotify(x, y, z, 0);
 			}
-
-		} else if(!this.canBlockCatchFire(var1, var2, var3 - 1, var4) && var6 == 15 && var5.nextInt(4) == 0) {
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		} else {
-			if(var6 % 2 == 0 && var6 > 2) {
-				this.tryToCatchBlockOnFire(var1, var2 + 1, var3, var4, 300, var5);
-				this.tryToCatchBlockOnFire(var1, var2 - 1, var3, var4, 300, var5);
-				this.tryToCatchBlockOnFire(var1, var2, var3 - 1, var4, 200, var5);
-				this.tryToCatchBlockOnFire(var1, var2, var3 + 1, var4, 250, var5);
-				this.tryToCatchBlockOnFire(var1, var2, var3, var4 - 1, 300, var5);
-				this.tryToCatchBlockOnFire(var1, var2, var3, var4 + 1, 300, var5);
-
-				for(int var7 = var2 - 1; var7 <= var2 + 1; ++var7) {
-					for(int var8 = var4 - 1; var8 <= var4 + 1; ++var8) {
-						for(int var9 = var3 - 1; var9 <= var3 + 4; ++var9) {
-							if(var7 != var2 || var9 != var3 || var8 != var4) {
-								int var10 = 100;
-								if(var9 > var3 + 1) {
-									var10 += (var9 - (var3 + 1)) * 100;
-								}
-
-								int var11 = this.getChanceOfNeighborsEncouragingFire(var1, var7, var9, var8);
-								if(var11 > 0 && var5.nextInt(var10) <= var11) {
-									var1.setBlockWithNotify(var7, var9, var8, this.blockID);
-								}
+		} else if(!this.canBlockCatchFire(world, x, y - 1, z) && i6 == 15 && random.nextInt(4) == 0) {
+			world.setBlockWithNotify(x, y, z, 0);
+		} else if(i6 % 2 == 0 && i6 > 2) {
+			this.tryToCatchBlockOnFire(world, x + 1, y, z, 300, random);
+			this.tryToCatchBlockOnFire(world, x - 1, y, z, 300, random);
+			this.tryToCatchBlockOnFire(world, x, y - 1, z, 200, random);
+			this.tryToCatchBlockOnFire(world, x, y + 1, z, 250, random);
+			this.tryToCatchBlockOnFire(world, x, y, z - 1, 300, random);
+			this.tryToCatchBlockOnFire(world, x, y, z + 1, 300, random);
+
+			for(int i7 = x - 1; i7 <= x + 1; ++i7) {
+				for(int i8 = z - 1; i8 <= z + 1; ++i8) {
+					for(int i9 = y - 1; i9 <= y + 4; ++i9) {
+						if(i7 != x || i9 != y || i8 != z) {
+							int i10 = 100;
+							if(i9 > y + 1) {
+								i10 += (i9 - (y + 1)) * 100;
+							}
+
+							int i11 = this.getChanceOfNeighborsEncouragingFire(world, i7, i9, i8);
+							if(i11 > 0 && random.nextInt(i10) <= i11) {
+								world.setBlockWithNotify(i7, i9, i8, this.blockID);
 							}
 						}
 					}
 				}
 			}
-
 		}
+
 	}
 
-	private void tryToCatchBlockOnFire(World var1, int var2, int var3, int var4, int var5, Random var6) {
-		int var7 = this.abilityToCatchFire[var1.getBlockId(var2, var3, var4)];
-		if(var6.nextInt(var5) < var7) {
-			boolean var8 = var1.getBlockId(var2, var3, var4) == Block.tnt.blockID;
-			if(var6.nextInt(2) == 0) {
-				var1.setBlockWithNotify(var2, var3, var4, this.blockID);
+	private void tryToCatchBlockOnFire(World world, int x, int y, int z, int chance, Random random) {
+		int i7 = this.abilityToCatchFire[world.getBlockId(x, y, z)];
+		if(random.nextInt(chance) < i7) {
+			boolean z8 = world.getBlockId(x, y, z) == Block.tnt.blockID;
+			if(random.nextInt(2) == 0) {
+				world.setBlockWithNotify(x, y, z, this.blockID);
 			} else {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
+				world.setBlockWithNotify(x, y, z, 0);
 			}
 
-			if(var8) {
-				Block.tnt.onBlockDestroyedByPlayer(var1, var2, var3, var4, 0);
+			if(z8) {
+				Block.tnt.onBlockDestroyedByPlayer(world, x, y, z, 0);
 			}
 		}
 
 	}
 
-	private boolean canNeighborBurn(World var1, int var2, int var3, int var4) {
-		return this.canBlockCatchFire(var1, var2 + 1, var3, var4) ? true : (this.canBlockCatchFire(var1, var2 - 1, var3, var4) ? true : (this.canBlockCatchFire(var1, var2, var3 - 1, var4) ? true : (this.canBlockCatchFire(var1, var2, var3 + 1, var4) ? true : (this.canBlockCatchFire(var1, var2, var3, var4 - 1) ? true : this.canBlockCatchFire(var1, var2, var3, var4 + 1)))));
+	private boolean canNeighborBurn(World world, int x, int y, int z) {
+		return this.canBlockCatchFire(world, x + 1, y, z) ? true : (this.canBlockCatchFire(world, x - 1, y, z) ? true : (this.canBlockCatchFire(world, x, y - 1, z) ? true : (this.canBlockCatchFire(world, x, y + 1, z) ? true : (this.canBlockCatchFire(world, x, y, z - 1) ? true : this.canBlockCatchFire(world, x, y, z + 1)))));
 	}
 
-	private int getChanceOfNeighborsEncouragingFire(World var1, int var2, int var3, int var4) {
-		byte var5 = 0;
-		if(var1.getBlockId(var2, var3, var4) != 0) {
+	private int getChanceOfNeighborsEncouragingFire(World world, int x, int y, int z) {
+		byte b5 = 0;
+		if(world.getBlockId(x, y, z) != 0) {
 			return 0;
 		} else {
-			int var6 = this.getChanceToEncourageFire(var1, var2 + 1, var3, var4, var5);
-			var6 = this.getChanceToEncourageFire(var1, var2 - 1, var3, var4, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3 - 1, var4, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3 + 1, var4, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3, var4 - 1, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3, var4 + 1, var6);
-			return var6;
+			int i6 = this.getChanceToEncourageFire(world, x + 1, y, z, b5);
+			i6 = this.getChanceToEncourageFire(world, x - 1, y, z, i6);
+			i6 = this.getChanceToEncourageFire(world, x, y - 1, z, i6);
+			i6 = this.getChanceToEncourageFire(world, x, y + 1, z, i6);
+			i6 = this.getChanceToEncourageFire(world, x, y, z - 1, i6);
+			i6 = this.getChanceToEncourageFire(world, x, y, z + 1, i6);
+			return i6;
 		}
 	}
 
@@ -131,93 +123,95 @@
 		return false;
 	}
 
-	public boolean canBlockCatchFire(IBlockAccess var1, int var2, int var3, int var4) {
-		return this.chanceToEncourageFire[var1.getBlockId(var2, var3, var4)] > 0;
-	}
-
-	public int getChanceToEncourageFire(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = this.chanceToEncourageFire[var1.getBlockId(var2, var3, var4)];
-		return var6 > var5 ? var6 : var5;
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2, var3 - 1, var4) || this.canNeighborBurn(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && !this.canNeighborBurn(var1, var2, var3, var4)) {
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		}
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && !this.canNeighborBurn(var1, var2, var3, var4)) {
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		} else {
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-		}
-	}
-
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var5.nextInt(24) == 0) {
-			var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "fire.fire", 1.0F + var5.nextFloat(), var5.nextFloat() * 0.7F + 0.3F);
-		}
-
-		int var6;
-		float var7;
-		float var8;
-		float var9;
-		if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && !Block.fire.canBlockCatchFire(var1, var2, var3 - 1, var4)) {
-			if(Block.fire.canBlockCatchFire(var1, var2 - 1, var3, var4)) {
-				for(var6 = 0; var6 < 2; ++var6) {
-					var7 = (float)var2 + var5.nextFloat() * 0.1F;
-					var8 = (float)var3 + var5.nextFloat();
-					var9 = (float)var4 + var5.nextFloat();
-					var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
-				}
-			}
-
-			if(Block.fire.canBlockCatchFire(var1, var2 + 1, var3, var4)) {
-				for(var6 = 0; var6 < 2; ++var6) {
-					var7 = (float)(var2 + 1) - var5.nextFloat() * 0.1F;
-					var8 = (float)var3 + var5.nextFloat();
-					var9 = (float)var4 + var5.nextFloat();
-					var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
-				}
-			}
-
-			if(Block.fire.canBlockCatchFire(var1, var2, var3, var4 - 1)) {
-				for(var6 = 0; var6 < 2; ++var6) {
-					var7 = (float)var2 + var5.nextFloat();
-					var8 = (float)var3 + var5.nextFloat();
-					var9 = (float)var4 + var5.nextFloat() * 0.1F;
-					var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
-				}
-			}
-
-			if(Block.fire.canBlockCatchFire(var1, var2, var3, var4 + 1)) {
-				for(var6 = 0; var6 < 2; ++var6) {
-					var7 = (float)var2 + var5.nextFloat();
-					var8 = (float)var3 + var5.nextFloat();
-					var9 = (float)(var4 + 1) - var5.nextFloat() * 0.1F;
-					var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
-				}
-			}
-
-			if(Block.fire.canBlockCatchFire(var1, var2, var3 + 1, var4)) {
-				for(var6 = 0; var6 < 2; ++var6) {
-					var7 = (float)var2 + var5.nextFloat();
-					var8 = (float)(var3 + 1) - var5.nextFloat() * 0.1F;
-					var9 = (float)var4 + var5.nextFloat();
-					var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
-				}
-			}
-		} else {
-			for(var6 = 0; var6 < 3; ++var6) {
-				var7 = (float)var2 + var5.nextFloat();
-				var8 = (float)var3 + var5.nextFloat() * 0.5F + 0.5F;
-				var9 = (float)var4 + var5.nextFloat();
-				var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+	public boolean canBlockCatchFire(IBlockAccess blockAccess, int x, int y, int z) {
+		return this.chanceToEncourageFire[blockAccess.getBlockId(x, y, z)] > 0;
+	}
+
+	public int getChanceToEncourageFire(World world, int x, int y, int z, int flag) {
+		int i6 = this.chanceToEncourageFire[world.getBlockId(x, y, z)];
+		return i6 > flag ? i6 : flag;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y - 1, z) || this.canNeighborBurn(world, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(!world.isBlockNormalCube(x, y - 1, z) && !this.canNeighborBurn(world, x, y, z)) {
+			world.setBlockWithNotify(x, y, z, 0);
+		}
+
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		if(!world.isBlockNormalCube(x, y - 1, z) && !this.canNeighborBurn(world, x, y, z)) {
+			world.setBlockWithNotify(x, y, z, 0);
+		} else {
+			world.scheduleBlockUpdate(x, y, z, this.blockID);
+		}
+
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+		if(rand.nextInt(24) == 0) {
+			worldObj.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "fire.fire", 1.0F + rand.nextFloat(), rand.nextFloat() * 0.7F + 0.3F);
+		}
+
+		int i6;
+		float f7;
+		float f8;
+		float f9;
+		if(!worldObj.isBlockNormalCube(x, y - 1, z) && !Block.fire.canBlockCatchFire(worldObj, x, y - 1, z)) {
+			if(Block.fire.canBlockCatchFire(worldObj, x - 1, y, z)) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					f7 = (float)x + rand.nextFloat() * 0.1F;
+					f8 = (float)y + rand.nextFloat();
+					f9 = (float)z + rand.nextFloat();
+					worldObj.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(Block.fire.canBlockCatchFire(worldObj, x + 1, y, z)) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					f7 = (float)(x + 1) - rand.nextFloat() * 0.1F;
+					f8 = (float)y + rand.nextFloat();
+					f9 = (float)z + rand.nextFloat();
+					worldObj.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(Block.fire.canBlockCatchFire(worldObj, x, y, z - 1)) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					f7 = (float)x + rand.nextFloat();
+					f8 = (float)y + rand.nextFloat();
+					f9 = (float)z + rand.nextFloat() * 0.1F;
+					worldObj.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(Block.fire.canBlockCatchFire(worldObj, x, y, z + 1)) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					f7 = (float)x + rand.nextFloat();
+					f8 = (float)y + rand.nextFloat();
+					f9 = (float)(z + 1) - rand.nextFloat() * 0.1F;
+					worldObj.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if(Block.fire.canBlockCatchFire(worldObj, x, y + 1, z)) {
+				for(i6 = 0; i6 < 2; ++i6) {
+					f7 = (float)x + rand.nextFloat();
+					f8 = (float)(y + 1) - rand.nextFloat() * 0.1F;
+					f9 = (float)z + rand.nextFloat();
+					worldObj.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+		} else {
+			for(i6 = 0; i6 < 3; ++i6) {
+				f7 = (float)x + rand.nextFloat();
+				f8 = (float)y + rand.nextFloat() * 0.5F + 0.5F;
+				f9 = (float)z + rand.nextFloat();
+				worldObj.spawnParticle("largesmoke", (double)f7, (double)f8, (double)f9, 0.0D, 0.0D, 0.0D);
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/BlockSnowOld.java
@@ -1,0 +1,75 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockSnowOld extends BlockOld {
+	protected BlockSnowOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.snow);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
+		this.setTickOnLoad(true);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return null;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockId(integer2, integer3 - 1, integer4);
+		return i5 != 0 && BlockOld.blocksList[i5].isOpaqueCube() ? vg.getBlockMaterial(integer2, integer3 - 1, integer4).getIsSolid() : false;
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		this.canSnowStay(vg, integer2, integer3, integer4);
+	}
+
+	private boolean canSnowStay(World vg, int integer2, int integer3, int integer4) {
+		if(!this.canPlaceBlockAt(vg, integer2, integer3, integer4)) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	public void harvestBlock(World vg, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = Item.snowball.shiftedIndex;
+		float f7 = 0.7F;
+		double d8 = (double)(vg.rand.nextFloat() * f7) + (double)(1.0F - f7) * 0.5D;
+		double d10 = (double)(vg.rand.nextFloat() * f7) + (double)(1.0F - f7) * 0.5D;
+		double d12 = (double)(vg.rand.nextFloat() * f7) + (double)(1.0F - f7) * 0.5D;
+		EntityItem entityItem14 = new EntityItem(vg, (double)integer2 + d8, (double)integer3 + d10, (double)integer4 + d12, new ItemStack(i6));
+		entityItem14.delayBeforeCanPickup = 10;
+		vg.spawnEntityInWorld(entityItem14);
+		vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+	}
+
+	public int idDropped(int integer, Random random) {
+		return Item.snowball.shiftedIndex;
+	}
+
+	public int quantityDropped(Random random) {
+		return 0;
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(vg.getSavedLightValue(EnumSkyBlock.Block, integer2, integer3, integer4) > 11) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+		}
+
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		Material material6 = abt.getBlockMaterial(integer2, integer3, integer4);
+		return integer5 == 1 ? true : (material6 == this.material ? false : super.shouldSideBeRendered(abt, integer2, integer3, integer4, integer5));
+	}
+}
--- net/minecraft/src/TextureLavaFX.java
+++ net/minecraft/src/TextureLavaFX.java
@@ -11,71 +11,76 @@
 	}
 
 	public void onTick() {
-		int var2;
-		float var3;
-		int var5;
-		int var6;
-		int var7;
-		int var8;
-		int var9;
-		for(int var1 = 0; var1 < 16; ++var1) {
-			for(var2 = 0; var2 < 16; ++var2) {
-				var3 = 0.0F;
-				int var4 = (int)(MathHelper.sin((float)var2 * (float)Math.PI * 2.0F / 16.0F) * 1.2F);
-				var5 = (int)(MathHelper.sin((float)var1 * (float)Math.PI * 2.0F / 16.0F) * 1.2F);
-
-				for(var6 = var1 - 1; var6 <= var1 + 1; ++var6) {
-					for(var7 = var2 - 1; var7 <= var2 + 1; ++var7) {
-						var8 = var6 + var4 & 15;
-						var9 = var7 + var5 & 15;
-						var3 += this.red[var8 + var9 * 16];
-					}
-				}
-
-				this.green[var1 + var2 * 16] = var3 / 10.0F + (this.blue[(var1 + 0 & 15) + (var2 + 0 & 15) * 16] + this.blue[(var1 + 1 & 15) + (var2 + 0 & 15) * 16] + this.blue[(var1 + 1 & 15) + (var2 + 1 & 15) * 16] + this.blue[(var1 + 0 & 15) + (var2 + 1 & 15) * 16]) / 4.0F * 0.8F;
-				this.blue[var1 + var2 * 16] += this.alpha[var1 + var2 * 16] * 0.01F;
-				if(this.blue[var1 + var2 * 16] < 0.0F) {
-					this.blue[var1 + var2 * 16] = 0.0F;
-				}
-
-				this.alpha[var1 + var2 * 16] -= 0.06F;
-				if(Math.random() < 0.005D) {
-					this.alpha[var1 + var2 * 16] = 1.5F;
-				}
-			}
-		}
-
-		float[] var11 = this.green;
-		this.green = this.red;
-		this.red = var11;
-
-		for(var2 = 0; var2 < 256; ++var2) {
-			var3 = this.red[var2] * 2.0F;
-			if(var3 > 1.0F) {
-				var3 = 1.0F;
-			}
-
-			if(var3 < 0.0F) {
-				var3 = 0.0F;
-			}
-
-			var5 = (int)(var3 * 100.0F + 155.0F);
-			var6 = (int)(var3 * var3 * 255.0F);
-			var7 = (int)(var3 * var3 * var3 * var3 * 128.0F);
-			if(this.anaglyphEnabled) {
-				var8 = (var5 * 30 + var6 * 59 + var7 * 11) / 100;
-				var9 = (var5 * 30 + var6 * 70) / 100;
-				int var10 = (var5 * 30 + var7 * 70) / 100;
-				var5 = var8;
-				var6 = var9;
-				var7 = var10;
-			}
-
-			this.imageData[var2 * 4 + 0] = (byte)var5;
-			this.imageData[var2 * 4 + 1] = (byte)var6;
-			this.imageData[var2 * 4 + 2] = (byte)var7;
-			this.imageData[var2 * 4 + 3] = -1;
-		}
-
+		if(InputHandler.mc.options.fancyGraphics != 2 || this.field_10713_88024hG6da4f4kcVfOqR8cTJ36RtCs13wB6V30Rs17vqAj14F4Cqz3neFg20) {
+			this.field_10713_88024hG6da4f4kcVfOqR8cTJ36RtCs13wB6V30Rs17vqAj14F4Cqz3neFg20 = false;
+
+			int i1;
+			float f2;
+			int i3;
+			int i4;
+			int i5;
+			int i6;
+			int i7;
+			int i9;
+			for(int i8 = 0; i8 < 16; ++i8) {
+				for(i1 = 0; i1 < 16; ++i1) {
+					f2 = 0.0F;
+					i9 = (int)(MathHelper.sin((float)i1 * (float)Math.PI * 2.0F / 16.0F) * 1.2F);
+					i3 = (int)(MathHelper.sin((float)i8 * (float)Math.PI * 2.0F / 16.0F) * 1.2F);
+
+					for(i4 = i8 - 1; i4 <= i8 + 1; ++i4) {
+						for(i5 = i1 - 1; i5 <= i1 + 1; ++i5) {
+							i6 = i4 + i9 & 15;
+							i7 = i5 + i3 & 15;
+							f2 += this.red[i6 + i7 * 16];
+						}
+					}
+
+					this.green[i8 + i1 * 16] = f2 / 10.0F + (this.blue[(i8 + 0 & 15) + (i1 + 0 & 15) * 16] + this.blue[(i8 + 1 & 15) + (i1 + 0 & 15) * 16] + this.blue[(i8 + 1 & 15) + (i1 + 1 & 15) * 16] + this.blue[(i8 + 0 & 15) + (i1 + 1 & 15) * 16]) / 4.0F * 0.8F;
+					this.blue[i8 + i1 * 16] += this.alpha[i8 + i1 * 16] * 0.01F;
+					if(this.blue[i8 + i1 * 16] < 0.0F) {
+						this.blue[i8 + i1 * 16] = 0.0F;
+					}
+
+					this.alpha[i8 + i1 * 16] -= 0.06F;
+					if(Math.random() < 0.005D) {
+						this.alpha[i8 + i1 * 16] = 1.5F;
+					}
+				}
+			}
+
+			float[] f10 = this.green;
+			this.green = this.red;
+			this.red = f10;
+
+			for(i1 = 0; i1 < 256; ++i1) {
+				f2 = this.red[i1] * 2.0F;
+				if(f2 > 1.0F) {
+					f2 = 1.0F;
+				}
+
+				if(f2 < 0.0F) {
+					f2 = 0.0F;
+				}
+
+				i3 = (int)(f2 * 100.0F + 155.0F);
+				i4 = (int)(f2 * f2 * 255.0F);
+				i5 = (int)(f2 * f2 * f2 * f2 * 128.0F);
+				if(this.anaglyphEnabled) {
+					i6 = (i3 * 30 + i4 * 59 + i5 * 11) / 100;
+					i7 = (i3 * 30 + i4 * 70) / 100;
+					i9 = (i3 * 30 + i5 * 70) / 100;
+					i3 = i6;
+					i4 = i7;
+					i5 = i9;
+				}
+
+				this.imageData[i1 * 4 + 0] = (byte)i3;
+				this.imageData[i1 * 4 + 1] = (byte)i4;
+				this.imageData[i1 * 4 + 2] = (byte)i5;
+				this.imageData[i1 * 4 + 3] = -1;
+			}
+
+		}
 	}
 }
--- net/minecraft/src/ItemArmor.java
+++ net/minecraft/src/ItemArmor.java
@@ -1,20 +1,20 @@
 package net.minecraft.src;
 
 public class ItemArmor extends Item {
-	private static final int[] damageReduceAmountArray = new int[]{3, 8, 6, 3};
-	private static final int[] maxDamageArray = new int[]{11, 16, 15, 13};
+	private static final int[] damageReduceAmountArray = new int[]{3, 8, 6, 3, 2};
+	private static final int[] maxDamageArray = new int[]{11, 16, 15, 13, 19};
 	public final int armorLevel;
 	public final int armorType;
 	public final int damageReduceAmount;
 	public final int renderIndex;
 
-	public ItemArmor(int var1, int var2, int var3, int var4) {
-		super(var1);
-		this.armorLevel = var2;
-		this.armorType = var4;
-		this.renderIndex = var3;
-		this.damageReduceAmount = damageReduceAmountArray[var4];
-		this.maxDamage = maxDamageArray[var4] * 3 << var2;
+	public ItemArmor(int itemID, int armorLevel, int renderIndex, int armorType) {
+		super(itemID);
+		this.armorLevel = armorLevel;
+		this.armorType = armorType;
+		this.renderIndex = renderIndex;
+		this.damageReduceAmount = damageReduceAmountArray[armorType];
+		this.maxDamage = maxDamageArray[armorType] * 3 << armorLevel;
 		this.maxStackSize = 1;
 	}
 }
--- net/minecraft/src/WorldGenBigTree.java
+++ net/minecraft/src/WorldGenBigTree.java
@@ -1,8 +1,11 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.Random;
 
 public class WorldGenBigTree extends WorldGenerator {
+	private Boolean generateEpicTrees = null;
 	static final byte[] otherCoordPairs = new byte[]{(byte)2, (byte)0, (byte)0, (byte)1, (byte)2, (byte)1};
 	Random rand = new Random();
 	World worldObj;
@@ -18,6 +21,137 @@
 	int heightLimitLimit = 12;
 	int leafDistanceLimit = 4;
 	int[][] leafNodes;
+	int mainWoodID = Block.wood.blockID;
+	int mainLeavesID = Block.leaves.blockID;
+
+	public WorldGenBigTree generateHighwoodTrees(boolean boolean1) {
+		this.generateEpicTrees = boolean1;
+		return this;
+	}
+
+	private void generateDeEpicTreeFoliage(World vg, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientWood.blockID;
+		int i7 = ExtBlocks.AncientLeaves.blockID;
+		float f8 = 0.0F;
+		float f9 = random.nextFloat() * (float)Math.PI * 2.0F;
+		int i10 = random.nextInt(9) + 8;
+		float f11 = (float)integer4;
+
+		float f13;
+		for(int i12 = 0; i12 < i10; ++i12) {
+			f9 = (float)((double)f9 + ((double)random.nextFloat() - 0.5D) * 0.1D);
+			++f8;
+			f13 = f8 / (float)i10;
+			integer3 = (int)((float)integer3 + MathHelper.cos(f9) * (1.0F - f13));
+			f11 += f13;
+			integer5 = (int)((float)integer5 + MathHelper.sin(f9) * (1.0F - f13));
+			integer4 = Math.round(f11);
+			vg.setBlock(integer3, integer4, integer5, i6);
+		}
+
+		integer4 += random.nextInt(2) + 1;
+		int i15 = random.nextInt(3) + 2;
+
+		for(int i16 = 0; i16 < i15; ++i16) {
+			vg.setBlock(integer3, integer4, integer5, i7);
+
+			for(float f17 = 0.0F; (double)f17 < Math.PI * 2D; f17 = (float)((double)f17 + 0.2243994752564138D)) {
+				int i18 = random.nextInt(i16 + 4) + i16 + 4;
+				float f19 = (float)integer3;
+				f13 = (float)integer5;
+
+				for(int i14 = 0; i14 < i18; ++i14) {
+					f13 += MathHelper.sin(f17);
+					f19 += MathHelper.cos(f17);
+					if(!vg.getBlockMaterial(Math.round(f19), integer4 - i16, Math.round(f13)).getIsSolid()) {
+						vg.setBlock(Math.round(f19), integer4 - i16, Math.round(f13), i7);
+					}
+				}
+			}
+		}
+
+	}
+
+	private void generateDeEpicRoots(World vg, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientRoots.blockID;
+		int i7 = random.nextInt(4);
+
+		for(int i8 = 0; i8 < i7; ++i8) {
+			int i9 = random.nextInt(8) + 3;
+			int i10 = integer3;
+			int i11 = integer4;
+			int i12 = integer5;
+
+			for(int i13 = 0; i13 < i9; ++i13) {
+				i10 += random.nextInt(3) - 1;
+				--i11;
+				i12 += random.nextInt(3) - 1;
+				if(vg.getBlockId(i10, i11, i12) != Block.bedrock.blockID) {
+					vg.setBlock(i10, i11, i12, i6);
+				}
+			}
+		}
+
+	}
+
+	private boolean generateDeEpicTree(World vg, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientWood.blockID;
+		int i7 = ExtBlocks.AncientLeaves.blockID;
+		if(vg.getBlockId(integer3, integer4 - 1, integer5) != Block.grass.blockID && vg.getBlockId(integer3, integer4 - 1, integer5) != Block.dirt.blockID) {
+			return true;
+		} else {
+			Random random8 = new Random(random.nextLong() + (long)integer3 + (long)integer4 + (long)integer5 + vg.randomSeed);
+			ArrayList arrayList9 = new ArrayList();
+			int i10 = 16 + random8.nextInt(26);
+			arrayList9.add(Vec3D.createVector((double)integer3, (double)(integer4 + i10), (double)integer5));
+
+			label71:
+			for(int i11 = 0; arrayList9.size() > 0; ++i11) {
+				Iterator iterator12 = (new ArrayList(arrayList9)).iterator();
+
+				while(true) {
+					while(true) {
+						if(!iterator12.hasNext()) {
+							continue label71;
+						}
+
+						Vec3D vec3D13 = (Vec3D)iterator12.next();
+						int i14 = (int)Math.round(vec3D13.xCoord);
+						int i15 = (int)Math.round(vec3D13.yCoord);
+						int i16 = (int)Math.round(vec3D13.zCoord);
+						if((!vg.getBlockMaterial(i14, i15, i16).getIsSolid() || vg.getBlockId(i14, i15, i16) != i7) && i15 >= 0 && (random8.nextInt(3) != 0 || arrayList9.size() <= 3)) {
+							vg.setBlock(i14, i15, i16, i6);
+							int i17 = 0;
+
+							while(random8.nextInt(arrayList9.size() / 20 + 2) <= 1 && arrayList9.size() <= 10000) {
+								++i17;
+								if(i17 >= 4) {
+									break;
+								}
+
+								Vec3D vec3D18 = vec3D13.addVector((double)(random8.nextInt(3) - 1), -1.0D, (double)(random8.nextInt(3) - 1));
+								arrayList9.add(vec3D18);
+							}
+
+							if(i11 > 2 && random8.nextInt(Math.max(50, 89 - i11)) == 3) {
+								this.generateDeEpicTreeFoliage(vg, random, i14, i15, i16);
+							}
+
+							arrayList9.remove(vec3D13);
+							arrayList9.add(vec3D13.addVector(0.0D, -1.0D, 0.0D));
+						} else {
+							arrayList9.remove(vec3D13);
+							if(vg.getBlockId(i14, i15, i16) == Block.dirt.blockID || vg.getBlockId(i14, i15, i16) == Block.grass.blockID) {
+								this.generateDeEpicRoots(vg, random8, i14, i15, i16);
+							}
+						}
+					}
+				}
+			}
+
+			return true;
+		}
+	}
 
 	void generateLeafNodeList() {
 		this.height = (int)((double)this.heightLimit * this.heightAttenuation);
@@ -25,99 +159,99 @@
 			this.height = this.heightLimit - 1;
 		}
 
-		int var1 = (int)(1.382D + Math.pow(this.leafDensity * (double)this.heightLimit / 13.0D, 2.0D));
-		if(var1 < 1) {
-			var1 = 1;
+		int i1 = (int)(1.382D + Math.pow(this.leafDensity * (double)this.heightLimit / 13.0D, 2.0D));
+		if(i1 < 1) {
+			i1 = 1;
 		}
 
-		int[][] var2 = new int[var1 * this.heightLimit][4];
-		int var3 = this.basePos[1] + this.heightLimit - this.leafDistanceLimit;
-		int var4 = 1;
-		int var5 = this.basePos[1] + this.height;
-		int var6 = var3 - this.basePos[1];
-		var2[0][0] = this.basePos[0];
-		var2[0][1] = var3;
-		var2[0][2] = this.basePos[2];
-		var2[0][3] = var5;
-		--var3;
+		int[][] i2 = new int[i1 * this.heightLimit][4];
+		int i3 = this.basePos[1] + this.heightLimit - this.leafDistanceLimit;
+		int i4 = 1;
+		int i5 = this.basePos[1] + this.height;
+		int i6 = i3 - this.basePos[1];
+		i2[0][0] = this.basePos[0];
+		i2[0][1] = i3;
+		i2[0][2] = this.basePos[2];
+		i2[0][3] = i5;
+		--i3;
 
 		while(true) {
-			while(var6 >= 0) {
-				int var7 = 0;
-				float var8 = this.layerSize(var6);
-				if(var8 < 0.0F) {
-					--var3;
-					--var6;
+			while(i6 >= 0) {
+				int i7 = 0;
+				float f8 = this.layerSize(i6);
+				if(f8 < 0.0F) {
+					--i3;
+					--i6;
 				} else {
-					for(double var9 = 0.5D; var7 < var1; ++var7) {
-						double var11 = this.scaleWidth * (double)var8 * ((double)this.rand.nextFloat() + 0.328D);
-						double var13 = (double)this.rand.nextFloat() * 2.0D * 3.14159D;
-						int var15 = (int)(var11 * Math.sin(var13) + (double)this.basePos[0] + var9);
-						int var16 = (int)(var11 * Math.cos(var13) + (double)this.basePos[2] + var9);
-						int[] var17 = new int[]{var15, var3, var16};
-						int[] var18 = new int[]{var15, var3 + this.leafDistanceLimit, var16};
-						if(this.checkBlockLine(var17, var18) == -1) {
-							int[] var19 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
-							double var20 = Math.sqrt(Math.pow((double)Math.abs(this.basePos[0] - var17[0]), 2.0D) + Math.pow((double)Math.abs(this.basePos[2] - var17[2]), 2.0D));
-							double var22 = var20 * this.branchSlope;
-							if((double)var17[1] - var22 > (double)var5) {
-								var19[1] = var5;
+					for(double d9 = 0.5D; i7 < i1; ++i7) {
+						double d11 = this.scaleWidth * (double)f8 * ((double)this.rand.nextFloat() + 0.328D);
+						double d13 = (double)this.rand.nextFloat() * 2.0D * 3.14159D;
+						int i15 = (int)(d11 * Math.sin(d13) + (double)this.basePos[0] + d9);
+						int i16 = (int)(d11 * Math.cos(d13) + (double)this.basePos[2] + d9);
+						int[] i17 = new int[]{i15, i3, i16};
+						int[] i18 = new int[]{i15, i3 + this.leafDistanceLimit, i16};
+						if(this.checkBlockLine(i17, i18) == -1) {
+							int[] i19 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
+							double d20 = Math.sqrt(Math.pow((double)Math.abs(this.basePos[0] - i17[0]), 2.0D) + Math.pow((double)Math.abs(this.basePos[2] - i17[2]), 2.0D));
+							double d22 = d20 * this.branchSlope;
+							if((double)i17[1] - d22 > (double)i5) {
+								i19[1] = i5;
 							} else {
-								var19[1] = (int)((double)var17[1] - var22);
+								i19[1] = (int)((double)i17[1] - d22);
 							}
 
-							if(this.checkBlockLine(var19, var17) == -1) {
-								var2[var4][0] = var15;
-								var2[var4][1] = var3;
-								var2[var4][2] = var16;
-								var2[var4][3] = var19[1];
-								++var4;
+							if(this.checkBlockLine(i19, i17) == -1) {
+								i2[i4][0] = i15;
+								i2[i4][1] = i3;
+								i2[i4][2] = i16;
+								i2[i4][3] = i19[1];
+								++i4;
 							}
 						}
 					}
 
-					--var3;
-					--var6;
+					--i3;
+					--i6;
 				}
 			}
 
-			this.leafNodes = new int[var4][4];
-			System.arraycopy(var2, 0, this.leafNodes, 0, var4);
+			this.leafNodes = new int[i4][4];
+			System.arraycopy(i2, 0, this.leafNodes, 0, i4);
 			return;
 		}
 	}
 
-	void genTreeLayer(int var1, int var2, int var3, float var4, byte var5, int var6) {
-		int var7 = (int)((double)var4 + 0.618D);
-		byte var8 = otherCoordPairs[var5];
-		byte var9 = otherCoordPairs[var5 + 3];
-		int[] var10 = new int[]{var1, var2, var3};
-		int[] var11 = new int[]{0, 0, 0};
-		int var12 = -var7;
-		int var13 = -var7;
+	void genTreeLayer(int integer1, int integer2, int integer3, float float4, byte byte5, int integer6) {
+		int i7 = (int)((double)float4 + 0.618D);
+		byte b8 = otherCoordPairs[byte5];
+		byte b9 = otherCoordPairs[byte5 + 3];
+		int[] i10 = new int[]{integer1, integer2, integer3};
+		int[] i11 = new int[]{0, 0, 0};
+		int i12 = -i7;
+		int i13 = -i7;
 
-		label32:
-		for(var11[var5] = var10[var5]; var12 <= var7; ++var12) {
-			var11[var8] = var10[var8] + var12;
-			var13 = -var7;
+		label34:
+		for(i11[byte5] = i10[byte5]; i12 <= i7; ++i12) {
+			i11[b8] = i10[b8] + i12;
+			i13 = -i7;
 
 			while(true) {
 				while(true) {
-					if(var13 > var7) {
-						continue label32;
+					if(i13 > i7) {
+						continue label34;
 					}
 
-					double var15 = Math.sqrt(Math.pow((double)Math.abs(var12) + 0.5D, 2.0D) + Math.pow((double)Math.abs(var13) + 0.5D, 2.0D));
-					if(var15 > (double)var4) {
-						++var13;
+					double d14 = Math.sqrt(Math.pow((double)Math.abs(i12) + 0.5D, 2.0D) + Math.pow((double)Math.abs(i13) + 0.5D, 2.0D));
+					if(d14 > (double)float4) {
+						++i13;
 					} else {
-						var11[var9] = var10[var9] + var13;
-						int var14 = this.worldObj.getBlockId(var11[0], var11[1], var11[2]);
-						if(var14 != 0 && var14 != 18) {
-							++var13;
+						i11[b9] = i10[b9] + i13;
+						int i16 = this.worldObj.getBlockId(i11[0], i11[1], i11[2]);
+						if(i16 != 0 && i16 != this.mainLeavesID) {
+							++i13;
 						} else {
-							this.worldObj.setBlock(var11[0], var11[1], var11[2], var6);
-							++var13;
+							this.worldObj.setBlock(i11[0], i11[1], i11[2], integer6);
+							++i13;
 						}
 					}
 				}
@@ -126,223 +260,232 @@
 
 	}
 
-	float layerSize(int var1) {
-		if((double)var1 < (double)((float)this.heightLimit) * 0.3D) {
+	float layerSize(int integer) {
+		if((double)integer < (double)((float)this.heightLimit) * 0.3D) {
 			return -1.618F;
 		} else {
-			float var2 = (float)this.heightLimit / 2.0F;
-			float var3 = (float)this.heightLimit / 2.0F - (float)var1;
-			float var4;
-			if(var3 == 0.0F) {
-				var4 = var2;
-			} else if(Math.abs(var3) >= var2) {
-				var4 = 0.0F;
-			} else {
-				var4 = (float)Math.sqrt(Math.pow((double)Math.abs(var2), 2.0D) - Math.pow((double)Math.abs(var3), 2.0D));
-			}
-
-			var4 *= 0.5F;
-			return var4;
-		}
-	}
-
-	float leafSize(int var1) {
-		return var1 >= 0 && var1 < this.leafDistanceLimit ? (var1 != 0 && var1 != this.leafDistanceLimit - 1 ? 3.0F : 2.0F) : -1.0F;
-	}
-
-	void generateLeafNode(int var1, int var2, int var3) {
-		int var4 = var2;
-
-		for(int var5 = var2 + this.leafDistanceLimit; var4 < var5; ++var4) {
-			float var6 = this.leafSize(var4 - var2);
-			this.genTreeLayer(var1, var4, var3, var6, (byte)1, 18);
-		}
-
-	}
-
-	void placeBlockLine(int[] var1, int[] var2, int var3) {
-		int[] var4 = new int[]{0, 0, 0};
-		byte var5 = 0;
-
-		byte var6;
-		for(var6 = 0; var5 < 3; ++var5) {
-			var4[var5] = var2[var5] - var1[var5];
-			if(Math.abs(var4[var5]) > Math.abs(var4[var6])) {
-				var6 = var5;
-			}
-		}
-
-		if(var4[var6] != 0) {
-			byte var7 = otherCoordPairs[var6];
-			byte var8 = otherCoordPairs[var6 + 3];
-			byte var9;
-			if(var4[var6] > 0) {
-				var9 = 1;
-			} else {
-				var9 = -1;
-			}
-
-			double var10 = (double)var4[var7] / (double)var4[var6];
-			double var12 = (double)var4[var8] / (double)var4[var6];
-			int[] var14 = new int[]{0, 0, 0};
-			int var15 = 0;
-
-			for(int var16 = var4[var6] + var9; var15 != var16; var15 += var9) {
-				var14[var6] = MathHelper.floor_double((double)(var1[var6] + var15) + 0.5D);
-				var14[var7] = MathHelper.floor_double((double)var1[var7] + (double)var15 * var10 + 0.5D);
-				var14[var8] = MathHelper.floor_double((double)var1[var8] + (double)var15 * var12 + 0.5D);
-				this.worldObj.setBlock(var14[0], var14[1], var14[2], var3);
-			}
-
-		}
+			float f2 = (float)this.heightLimit / 2.0F;
+			float f3 = (float)this.heightLimit / 2.0F - (float)integer;
+			float f4;
+			if(f3 == 0.0F) {
+				f4 = f2;
+			} else if(Math.abs(f3) >= f2) {
+				f4 = 0.0F;
+			} else {
+				f4 = (float)Math.sqrt(Math.pow((double)Math.abs(f2), 2.0D) - Math.pow((double)Math.abs(f3), 2.0D));
+			}
+
+			f4 *= 0.5F;
+			return f4;
+		}
+	}
+
+	float leafSize(int integer) {
+		return integer >= 0 && integer < this.leafDistanceLimit ? (integer != 0 && integer != this.leafDistanceLimit - 1 ? 3.0F : 2.0F) : -1.0F;
+	}
+
+	void generateLeafNode(int x, int y, int z) {
+		int i4 = y;
+
+		for(int i5 = y + this.leafDistanceLimit; i4 < i5; ++i4) {
+			float f6 = this.leafSize(i4 - y);
+			this.genTreeLayer(x, i4, z, f6, (byte)1, this.mainLeavesID);
+		}
+
+	}
+
+	void placeBlockLine(int[] arr1, int[] arr2, int integer) {
+		int[] i4 = new int[]{0, 0, 0};
+		byte b5 = 0;
+
+		byte b6;
+		for(b6 = 0; b5 < 3; ++b5) {
+			i4[b5] = arr2[b5] - arr1[b5];
+			if(Math.abs(i4[b5]) > Math.abs(i4[b6])) {
+				b6 = b5;
+			}
+		}
+
+		if(i4[b6] != 0) {
+			byte b7 = otherCoordPairs[b6];
+			byte b8 = otherCoordPairs[b6 + 3];
+			byte b9;
+			if(i4[b6] > 0) {
+				b9 = 1;
+			} else {
+				b9 = -1;
+			}
+
+			double d10 = (double)i4[b7] / (double)i4[b6];
+			double d12 = (double)i4[b8] / (double)i4[b6];
+			int[] i14 = new int[]{0, 0, 0};
+			int i15 = 0;
+
+			for(int i16 = i4[b6] + b9; i15 != i16; i15 += b9) {
+				i14[b6] = MathHelper.floor_double((double)(arr1[b6] + i15) + 0.5D);
+				i14[b7] = MathHelper.floor_double((double)arr1[b7] + (double)i15 * d10 + 0.5D);
+				i14[b8] = MathHelper.floor_double((double)arr1[b8] + (double)i15 * d12 + 0.5D);
+				this.worldObj.setBlock(i14[0], i14[1], i14[2], integer);
+			}
+		}
+
 	}
 
 	void generateLeaves() {
-		int var1 = 0;
+		int i1 = 0;
 
-		for(int var2 = this.leafNodes.length; var1 < var2; ++var1) {
-			int var3 = this.leafNodes[var1][0];
-			int var4 = this.leafNodes[var1][1];
-			int var5 = this.leafNodes[var1][2];
-			this.generateLeafNode(var3, var4, var5);
+		for(int i2 = this.leafNodes.length; i1 < i2; ++i1) {
+			int i3 = this.leafNodes[i1][0];
+			int i4 = this.leafNodes[i1][1];
+			int i5 = this.leafNodes[i1][2];
+			this.generateLeafNode(i3, i4, i5);
 		}
 
 	}
 
-	boolean leafNodeNeedsBase(int var1) {
-		return (double)var1 >= (double)this.heightLimit * 0.2D;
+	boolean leafNodeNeedsBase(int integer) {
+		return (double)integer >= (double)this.heightLimit * 0.2D;
 	}
 
 	void generateTrunk() {
-		int var1 = this.basePos[0];
-		int var2 = this.basePos[1];
-		int var3 = this.basePos[1] + this.height;
-		int var4 = this.basePos[2];
-		int[] var5 = new int[]{var1, var2, var4};
-		int[] var6 = new int[]{var1, var3, var4};
-		this.placeBlockLine(var5, var6, 17);
+		int i1 = this.basePos[0];
+		int i2 = this.basePos[1];
+		int i3 = this.basePos[1] + this.height;
+		int i4 = this.basePos[2];
+		int[] i5 = new int[]{i1, i2, i4};
+		int[] i6 = new int[]{i1, i3, i4};
+		this.placeBlockLine(i5, i6, this.mainWoodID);
 		if(this.trunkSize == 2) {
-			++var5[0];
-			++var6[0];
-			this.placeBlockLine(var5, var6, 17);
-			++var5[2];
-			++var6[2];
-			this.placeBlockLine(var5, var6, 17);
-			var5[0] += -1;
-			var6[0] += -1;
-			this.placeBlockLine(var5, var6, 17);
+			++i5[0];
+			++i6[0];
+			this.placeBlockLine(i5, i6, this.mainWoodID);
+			++i5[2];
+			++i6[2];
+			this.placeBlockLine(i5, i6, this.mainWoodID);
+			i5[0] += -1;
+			i6[0] += -1;
+			this.placeBlockLine(i5, i6, this.mainWoodID);
 		}
 
 	}
 
 	void generateLeafNodeBases() {
-		int var1 = 0;
-		int var2 = this.leafNodes.length;
+		int i1 = 0;
+		int i2 = this.leafNodes.length;
 
-		for(int[] var3 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]}; var1 < var2; ++var1) {
-			int[] var4 = this.leafNodes[var1];
-			int[] var5 = new int[]{var4[0], var4[1], var4[2]};
-			var3[1] = var4[3];
-			int var6 = var3[1] - this.basePos[1];
-			if(this.leafNodeNeedsBase(var6)) {
-				this.placeBlockLine(var3, var5, 17);
+		for(int[] i3 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]}; i1 < i2; ++i1) {
+			int[] i4 = this.leafNodes[i1];
+			int[] i5 = new int[]{i4[0], i4[1], i4[2]};
+			i3[1] = i4[3];
+			int i6 = i3[1] - this.basePos[1];
+			if(this.leafNodeNeedsBase(i6)) {
+				this.placeBlockLine(i3, i5, this.mainWoodID);
 			}
 		}
 
 	}
 
-	int checkBlockLine(int[] var1, int[] var2) {
-		int[] var3 = new int[]{0, 0, 0};
-		byte var4 = 0;
+	int checkBlockLine(int[] arr1, int[] arr2) {
+		int[] i3 = new int[]{0, 0, 0};
+		byte b4 = 0;
 
-		byte var5;
-		for(var5 = 0; var4 < 3; ++var4) {
-			var3[var4] = var2[var4] - var1[var4];
-			if(Math.abs(var3[var4]) > Math.abs(var3[var5])) {
-				var5 = var4;
+		byte b5;
+		for(b5 = 0; b4 < 3; ++b4) {
+			i3[b4] = arr2[b4] - arr1[b4];
+			if(Math.abs(i3[b4]) > Math.abs(i3[b5])) {
+				b5 = b4;
 			}
 		}
 
-		if(var3[var5] == 0) {
+		if(i3[b5] == 0) {
 			return -1;
 		} else {
-			byte var6 = otherCoordPairs[var5];
-			byte var7 = otherCoordPairs[var5 + 3];
-			byte var8;
-			if(var3[var5] > 0) {
-				var8 = 1;
+			byte b6 = otherCoordPairs[b5];
+			byte b7 = otherCoordPairs[b5 + 3];
+			byte b8;
+			if(i3[b5] > 0) {
+				b8 = 1;
 			} else {
-				var8 = -1;
+				b8 = -1;
 			}
 
-			double var9 = (double)var3[var6] / (double)var3[var5];
-			double var11 = (double)var3[var7] / (double)var3[var5];
-			int[] var13 = new int[]{0, 0, 0};
-			int var14 = 0;
+			double d9 = (double)i3[b6] / (double)i3[b5];
+			double d11 = (double)i3[b7] / (double)i3[b5];
+			int[] i13 = new int[]{0, 0, 0};
+			int i14 = 0;
 
-			int var15;
-			for(var15 = var3[var5] + var8; var14 != var15; var14 += var8) {
-				var13[var5] = var1[var5] + var14;
-				var13[var6] = (int)((double)var1[var6] + (double)var14 * var9);
-				var13[var7] = (int)((double)var1[var7] + (double)var14 * var11);
-				int var16 = this.worldObj.getBlockId(var13[0], var13[1], var13[2]);
-				if(var16 != 0 && var16 != 18) {
+			int i15;
+			for(i15 = i3[b5] + b8; i14 != i15; i14 += b8) {
+				i13[b5] = arr1[b5] + i14;
+				i13[b6] = (int)((double)arr1[b6] + (double)i14 * d9);
+				i13[b7] = (int)((double)arr1[b7] + (double)i14 * d11);
+				int i16 = this.worldObj.getBlockId(i13[0], i13[1], i13[2]);
+				if(i16 != 0 && i16 != this.mainLeavesID) {
 					break;
 				}
 			}
 
-			return var14 == var15 ? -1 : Math.abs(var14);
+			return i14 == i15 ? -1 : Math.abs(i14);
 		}
 	}
 
 	boolean validTreeLocation() {
-		int[] var1 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
-		int[] var2 = new int[]{this.basePos[0], this.basePos[1] + this.heightLimit - 1, this.basePos[2]};
-		int var3 = this.worldObj.getBlockId(this.basePos[0], this.basePos[1] - 1, this.basePos[2]);
-		if(var3 != 2 && var3 != 3) {
+		int[] i1 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
+		int[] i2 = new int[]{this.basePos[0], this.basePos[1] + this.heightLimit - 1, this.basePos[2]};
+		int i3 = this.worldObj.getBlockId(this.basePos[0], this.basePos[1] - 1, this.basePos[2]);
+		if(i3 != 2 && i3 != 3) {
 			return false;
 		} else {
-			int var4 = this.checkBlockLine(var1, var2);
-			if(var4 == -1) {
+			int i4 = this.checkBlockLine(i1, i2);
+			if(i4 == -1) {
 				return true;
-			} else if(var4 < 6) {
+			} else if(i4 < 6) {
 				return false;
 			} else {
-				this.heightLimit = var4;
+				this.heightLimit = i4;
 				return true;
 			}
 		}
 	}
 
-	public void setScale(double var1, double var3, double var5) {
-		this.heightLimitLimit = (int)(var1 * 12.0D);
-		if(var1 > 0.5D) {
+	public void setScale(double scaleX, double scaleY, double scaleZ) {
+		this.heightLimitLimit = (int)(scaleX * 12.0D);
+		if(scaleX > 0.5D) {
 			this.leafDistanceLimit = 5;
 		}
 
-		this.scaleWidth = var3;
-		this.leafDensity = var5;
+		this.scaleWidth = scaleY;
+		this.leafDensity = scaleZ;
 	}
 
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		this.worldObj = var1;
-		long var6 = var2.nextLong();
-		this.rand.setSeed(var6);
-		this.basePos[0] = var3;
-		this.basePos[1] = var4;
-		this.basePos[2] = var5;
-		if(this.heightLimit == 0) {
-			this.heightLimit = 5 + this.rand.nextInt(this.heightLimitLimit);
-		}
-
-		if(!this.validTreeLocation()) {
-			return false;
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		if(this.generateEpicTrees == null || rand.nextInt(150) != 0 && !this.generateEpicTrees.booleanValue()) {
+			if(rand.nextInt(100) <= 5) {
+				this.mainWoodID = ExtBlocks.FireSkyWood.blockID;
+				this.mainLeavesID = ExtBlocks.FireSkyLeaves.blockID;
+			}
+
+			this.worldObj = world;
+			long j6 = rand.nextLong();
+			this.rand.setSeed(j6);
+			this.basePos[0] = x;
+			this.basePos[1] = y;
+			this.basePos[2] = z;
+			if(this.heightLimit == 0) {
+				this.heightLimit = 5 + this.rand.nextInt(this.heightLimitLimit);
+			}
+
+			if(!this.validTreeLocation()) {
+				return false;
+			} else {
+				this.generateLeafNodeList();
+				this.generateLeaves();
+				this.generateTrunk();
+				this.generateLeafNodeBases();
+				return true;
+			}
 		} else {
-			this.generateLeafNodeList();
-			this.generateLeaves();
-			this.generateTrunk();
-			this.generateLeafNodeBases();
-			return true;
+			return this.generateDeEpicTree(world, rand, x, y, z);
 		}
 	}
 }
--- net/minecraft/src/ItemSnowball.java
+++ net/minecraft/src/ItemSnowball.java
@@ -1,15 +1,15 @@
 package net.minecraft.src;
 
 public class ItemSnowball extends Item {
-	public ItemSnowball(int var1) {
-		super(var1);
+	public ItemSnowball(int itemID) {
+		super(itemID);
 		this.maxStackSize = 16;
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		--var1.stackSize;
-		var2.playSoundAtEntity(var3, "random.bow", 0.5F, 0.4F / (rand.nextFloat() * 0.4F + 0.8F));
-		var2.spawnEntityInWorld(new EntitySnowball(var2, var3));
-		return var1;
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		--itemStack.stackSize;
+		worldObj.playSoundAtEntity(entityPlayer, "random.bow", 0.5F, 0.4F / (rand.nextFloat() * 0.4F + 0.8F));
+		worldObj.spawnEntityInWorld(new EntitySnowball(worldObj, entityPlayer));
+		return itemStack;
 	}
 }
--- /dev/null
+++ net/minecraft/src/HubSyncClient.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public class HubSyncClient {
+	public RemoteWorld ConnectToHubWorld() {
+		return null;
+	}
+
+	public int GetHubPlayerCount() {
+		return 0;
+	}
+
+	public EntityOtherPlayerMP[] GetHubPlayers() {
+		return null;
+	}
+
+	public RemoteWorld GetTargetWorld(BlockHubDoor ex) {
+		return null;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EntityArrowToEssence.java
@@ -1,0 +1,240 @@
+package net.minecraft.src;
+
+import java.util.List;
+
+public class EntityArrowToEssence extends EntityFirable {
+	private int field_8887_0qhlUXJV48775Wt7H72JLcoPF3zjdagAfqYJ9hB9BJzpAY6IW0F6UIW8xEeA = -1;
+	private int field_8889_9EtK8JQDU7pJ30qgnK1zmg27Obn44vrU2h6h5x42TjXcdRTEz5FMS3ufijGf = -1;
+	private int field_8888_6KqoW1Y28cN5SZpc6mCME8shDtR0H4Gxk2XpF87j06ld6Gi4nI9wttj9K02r = -1;
+	private int field_8893_4I57zewDPKU912Mq8D6cjiG23w4RAW7o25CPoI7Yx165EXy3BIf47m4d2o4j = 0;
+	private boolean field_8886_0SXhZb7Fp84gm1Zb0A1psJfwZ0YFM3XmZ8k89QVcHX4qQ24Gwm266hOyW3xP = false;
+	public int field_8890_845U3D6H39t9lq568b7xE1EC7sw8YZz4tPKnr1PMXiwXOlLFhNuflWtj0107 = 0;
+	private EntityLiving field_8885_9KQ04vNQ47ZtitHMOeQ6t3Vb3e4Ic5dxRDN3396NqU98NB4wICTFYYD4oYFx;
+	private int field_8892_62Sz8sB3FuZ5qwLBvdXhg68Fgl1A3I9WM5S9kL71kV8Qx8wegoOR0GRKZ61K;
+	private int field_8891_3179u2r3wH2wWe7904FwnD1g2B25zu4t29s8WjQi7dV8ulFNRTKAbm6Hfx3S = 0;
+
+	public String getTexture() {
+		return "/item/arrow.png";
+	}
+
+	public EntityArrowToEssence(World world) {
+		super(world);
+		this.setSize(0.5F, 0.5F);
+	}
+
+	public EntityArrowToEssence(World vg, EntityLiving zi) {
+		super(vg);
+		this.field_8885_9KQ04vNQ47ZtitHMOeQ6t3Vb3e4Ic5dxRDN3396NqU98NB4wICTFYYD4oYFx = zi;
+		this.setSize(0.5F, 0.5F);
+		this.setLocationAndAngles(zi.posX, zi.posY, zi.posZ, zi.rotationYaw, zi.rotationPitch);
+		this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+		this.posY += (double)0.1F;
+		this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+		this.setPosition(this.posX, this.posY, this.posZ);
+		this.yOffset = 0.0F;
+		this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI));
+		this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI));
+		this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI));
+		this.func_8884_8qQ1lpaoK6N2Bi56C6rsS2FPfLOfUndjw2D7SrMH3Fzp8rnUZno99vKK2KK2(this.motionX, this.motionY, this.motionZ, 1.5F, 1.0F);
+	}
+
+	public void func_8884_8qQ1lpaoK6N2Bi56C6rsS2FPfLOfUndjw2D7SrMH3Fzp8rnUZno99vKK2KK2(double double1, double double2, double double3, float float4, float float5) {
+		float f9 = MathHelper.sqrt_double(double1 * double1 + double2 * double2 + double3 * double3);
+		double1 /= (double)f9;
+		double2 *= (double)f9;
+		double3 /= (double)f9;
+		double1 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double2 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double3 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double1 *= (double)float4;
+		double2 /= (double)float4;
+		double3 *= (double)float4;
+		this.motionX = double1;
+		this.motionY = double2;
+		this.motionZ = double3;
+		float f10 = MathHelper.sqrt_double(double1 * double1 + double3 * double3);
+		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(double1, double3) * 180.0D / (double)(float)Math.PI);
+		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(double2, (double)f10) * 180.0D / (double)(float)Math.PI);
+		this.field_8892_62Sz8sB3FuZ5qwLBvdXhg68Fgl1A3I9WM5S9kL71kV8Qx8wegoOR0GRKZ61K = 0;
+	}
+
+	public void onUpdate() {
+		super.onUpdate();
+		if(this.field_8890_845U3D6H39t9lq568b7xE1EC7sw8YZz4tPKnr1PMXiwXOlLFhNuflWtj0107 > 0) {
+			--this.field_8890_845U3D6H39t9lq568b7xE1EC7sw8YZz4tPKnr1PMXiwXOlLFhNuflWtj0107;
+		}
+
+		if(this.field_8886_0SXhZb7Fp84gm1Zb0A1psJfwZ0YFM3XmZ8k89QVcHX4qQ24Gwm266hOyW3xP) {
+			int i1 = this.worldObj.getBlockId(this.field_8887_0qhlUXJV48775Wt7H72JLcoPF3zjdagAfqYJ9hB9BJzpAY6IW0F6UIW8xEeA, this.field_8889_9EtK8JQDU7pJ30qgnK1zmg27Obn44vrU2h6h5x42TjXcdRTEz5FMS3ufijGf, this.field_8888_6KqoW1Y28cN5SZpc6mCME8shDtR0H4Gxk2XpF87j06ld6Gi4nI9wttj9K02r);
+			if(i1 == this.field_8893_4I57zewDPKU912Mq8D6cjiG23w4RAW7o25CPoI7Yx165EXy3BIf47m4d2o4j) {
+				++this.field_8892_62Sz8sB3FuZ5qwLBvdXhg68Fgl1A3I9WM5S9kL71kV8Qx8wegoOR0GRKZ61K;
+				if(this.field_8892_62Sz8sB3FuZ5qwLBvdXhg68Fgl1A3I9WM5S9kL71kV8Qx8wegoOR0GRKZ61K == 1200) {
+					this.setEntityDead();
+				}
+
+				if(i1 == ExtBlocks.targetBlock.blockID) {
+					ItemStack itemStack2 = new ItemStack(ExtBlocks.targetBlock, 1);
+					EntityItem entityItem3 = new EntityItem(this.worldObj, (double)this.field_8887_0qhlUXJV48775Wt7H72JLcoPF3zjdagAfqYJ9hB9BJzpAY6IW0F6UIW8xEeA + 0.5D, (double)this.field_8889_9EtK8JQDU7pJ30qgnK1zmg27Obn44vrU2h6h5x42TjXcdRTEz5FMS3ufijGf + 0.5D, (double)this.field_8888_6KqoW1Y28cN5SZpc6mCME8shDtR0H4Gxk2XpF87j06ld6Gi4nI9wttj9K02r + 0.5D, itemStack2);
+					entityItem3.motionX = this.rand.nextDouble() - 0.5D;
+					entityItem3.motionY = this.rand.nextDouble() - 0.5D;
+					entityItem3.motionZ = this.rand.nextDouble() - 0.5D;
+					entityItem3.motionX /= 8.0D;
+					entityItem3.motionY /= 8.0D;
+					entityItem3.motionZ /= 8.0D;
+					this.worldObj.spawnParticle("smoke", (double)this.field_8887_0qhlUXJV48775Wt7H72JLcoPF3zjdagAfqYJ9hB9BJzpAY6IW0F6UIW8xEeA + 0.5D, (double)this.field_8889_9EtK8JQDU7pJ30qgnK1zmg27Obn44vrU2h6h5x42TjXcdRTEz5FMS3ufijGf + 0.5D, (double)this.field_8888_6KqoW1Y28cN5SZpc6mCME8shDtR0H4Gxk2XpF87j06ld6Gi4nI9wttj9K02r + 0.5D, 0.0D, 0.0D, 0.0D);
+					this.worldObj.spawnEntityInWorld(entityItem3);
+					this.worldObj.setBlockWithNotify(this.field_8887_0qhlUXJV48775Wt7H72JLcoPF3zjdagAfqYJ9hB9BJzpAY6IW0F6UIW8xEeA, this.field_8889_9EtK8JQDU7pJ30qgnK1zmg27Obn44vrU2h6h5x42TjXcdRTEz5FMS3ufijGf, this.field_8888_6KqoW1Y28cN5SZpc6mCME8shDtR0H4Gxk2XpF87j06ld6Gi4nI9wttj9K02r, 0);
+					this.worldObj.markBlocksDirty(this.field_8887_0qhlUXJV48775Wt7H72JLcoPF3zjdagAfqYJ9hB9BJzpAY6IW0F6UIW8xEeA, this.field_8889_9EtK8JQDU7pJ30qgnK1zmg27Obn44vrU2h6h5x42TjXcdRTEz5FMS3ufijGf, this.field_8888_6KqoW1Y28cN5SZpc6mCME8shDtR0H4Gxk2XpF87j06ld6Gi4nI9wttj9K02r, this.field_8887_0qhlUXJV48775Wt7H72JLcoPF3zjdagAfqYJ9hB9BJzpAY6IW0F6UIW8xEeA, this.field_8889_9EtK8JQDU7pJ30qgnK1zmg27Obn44vrU2h6h5x42TjXcdRTEz5FMS3ufijGf, this.field_8888_6KqoW1Y28cN5SZpc6mCME8shDtR0H4Gxk2XpF87j06ld6Gi4nI9wttj9K02r);
+				}
+
+				return;
+			}
+
+			this.field_8886_0SXhZb7Fp84gm1Zb0A1psJfwZ0YFM3XmZ8k89QVcHX4qQ24Gwm266hOyW3xP = false;
+			this.motionX *= (double)(this.rand.nextFloat() * 0.2F);
+			this.motionY *= (double)(this.rand.nextFloat() * 0.2F);
+			this.motionZ *= (double)(this.rand.nextFloat() * 0.2F);
+			this.field_8892_62Sz8sB3FuZ5qwLBvdXhg68Fgl1A3I9WM5S9kL71kV8Qx8wegoOR0GRKZ61K = 0;
+			this.field_8891_3179u2r3wH2wWe7904FwnD1g2B25zu4t29s8WjQi7dV8ulFNRTKAbm6Hfx3S = 0;
+		} else {
+			++this.field_8891_3179u2r3wH2wWe7904FwnD1g2B25zu4t29s8WjQi7dV8ulFNRTKAbm6Hfx3S;
+		}
+
+		Vec3D vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		Vec3D vec3D16 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		MovingObjectPosition movingObjectPosition17 = this.worldObj.rayTraceBlocks(vec3D15, vec3D16);
+		vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		vec3D16 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		if(movingObjectPosition17 != null) {
+			vec3D16 = Vec3D.createVector(movingObjectPosition17.hitVec.xCoord, movingObjectPosition17.hitVec.yCoord, movingObjectPosition17.hitVec.zCoord);
+		}
+
+		Entity entity4 = null;
+		List list5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+		double d6 = 0.0D;
+
+		float f8;
+		for(int i9 = 0; i9 < list5.size(); ++i9) {
+			Entity entity10 = (Entity)list5.get(i9);
+			if(entity10.canBeCollidedWith() && (entity10 != this.field_8885_9KQ04vNQ47ZtitHMOeQ6t3Vb3e4Ic5dxRDN3396NqU98NB4wICTFYYD4oYFx || this.field_8891_3179u2r3wH2wWe7904FwnD1g2B25zu4t29s8WjQi7dV8ulFNRTKAbm6Hfx3S >= 5)) {
+				f8 = 0.3F;
+				AxisAlignedBB axisAlignedBB11 = entity10.boundingBox.expand((double)f8, (double)f8, (double)f8);
+				MovingObjectPosition movingObjectPosition12 = axisAlignedBB11.calculateIntercept(vec3D15, vec3D16);
+				if(movingObjectPosition12 != null) {
+					double d13 = vec3D15.distanceTo(movingObjectPosition12.hitVec);
+					if(d13 < d6 || d6 == 0.0D) {
+						entity4 = entity10;
+						d6 = d13;
+					}
+				}
+			}
+		}
+
+		if(entity4 != null) {
+			movingObjectPosition17 = new MovingObjectPosition(entity4);
+		}
+
+		float f18;
+		if(movingObjectPosition17 != null) {
+			if(movingObjectPosition17.entityHit != null) {
+				if(movingObjectPosition17.entityHit.attackEntityFrom(this.field_8885_9KQ04vNQ47ZtitHMOeQ6t3Vb3e4Ic5dxRDN3396NqU98NB4wICTFYYD4oYFx, 4)) {
+					this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
+					this.setEntityDead();
+				} else {
+					this.motionX *= -0.10000000149011612D;
+					this.motionY /= -0.10000000149011612D;
+					this.motionZ *= -0.10000000149011612D;
+					this.rotationYaw += 180.0F;
+					this.prevRotationYaw += 180.0F;
+					this.field_8891_3179u2r3wH2wWe7904FwnD1g2B25zu4t29s8WjQi7dV8ulFNRTKAbm6Hfx3S = 0;
+				}
+			} else {
+				this.field_8887_0qhlUXJV48775Wt7H72JLcoPF3zjdagAfqYJ9hB9BJzpAY6IW0F6UIW8xEeA = movingObjectPosition17.blockX;
+				this.field_8889_9EtK8JQDU7pJ30qgnK1zmg27Obn44vrU2h6h5x42TjXcdRTEz5FMS3ufijGf = movingObjectPosition17.blockY;
+				this.field_8888_6KqoW1Y28cN5SZpc6mCME8shDtR0H4Gxk2XpF87j06ld6Gi4nI9wttj9K02r = movingObjectPosition17.blockZ;
+				this.field_8893_4I57zewDPKU912Mq8D6cjiG23w4RAW7o25CPoI7Yx165EXy3BIf47m4d2o4j = this.worldObj.getBlockId(this.field_8887_0qhlUXJV48775Wt7H72JLcoPF3zjdagAfqYJ9hB9BJzpAY6IW0F6UIW8xEeA, this.field_8889_9EtK8JQDU7pJ30qgnK1zmg27Obn44vrU2h6h5x42TjXcdRTEz5FMS3ufijGf, this.field_8888_6KqoW1Y28cN5SZpc6mCME8shDtR0H4Gxk2XpF87j06ld6Gi4nI9wttj9K02r);
+				this.motionX = (double)((float)(movingObjectPosition17.hitVec.xCoord - this.posX));
+				this.motionY = (double)((float)(movingObjectPosition17.hitVec.yCoord - this.posY));
+				this.motionZ = (double)((float)(movingObjectPosition17.hitVec.zCoord - this.posZ));
+				f18 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
+				this.posX -= this.motionX / (double)f18 * (double)0.05F;
+				this.posY -= this.motionY / (double)f18 * (double)0.05F;
+				this.posZ -= this.motionZ / (double)f18 * (double)0.05F;
+				this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
+				this.field_8886_0SXhZb7Fp84gm1Zb0A1psJfwZ0YFM3XmZ8k89QVcHX4qQ24Gwm266hOyW3xP = true;
+				this.field_8890_845U3D6H39t9lq568b7xE1EC7sw8YZz4tPKnr1PMXiwXOlLFhNuflWtj0107 = 7;
+			}
+		}
+
+		this.posX += this.motionX;
+		this.posY -= this.motionY;
+		this.posZ += this.motionZ;
+		f18 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)(float)Math.PI);
+
+		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)f18) * 180.0D / (double)(float)Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+		}
+
+		while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
+			this.prevRotationPitch += 360.0F;
+		}
+
+		while(this.rotationYaw - this.prevRotationYaw < -180.0F) {
+			this.prevRotationYaw -= 360.0F;
+		}
+
+		while(this.rotationYaw - this.prevRotationYaw >= 180.0F) {
+			this.prevRotationYaw += 360.0F;
+		}
+
+		this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
+		this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
+		float f19 = 0.99F;
+		f8 = 0.03F;
+		if(this.handleWaterMovement()) {
+			for(int i20 = 0; i20 < 4; ++i20) {
+				float f21 = 0.25F;
+				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)f21, this.posY - this.motionY * (double)f21, this.posZ - this.motionZ * (double)f21, this.motionX, this.motionY, this.motionZ);
+			}
+
+			f19 = 0.8F;
+		}
+
+		this.motionX *= (double)f19;
+		this.motionY /= (double)f19;
+		this.motionZ *= (double)f19;
+		this.motionY += (double)f8;
+		this.setPosition(this.posX, this.posY, this.posZ);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setShort("xTile", (short)this.field_8887_0qhlUXJV48775Wt7H72JLcoPF3zjdagAfqYJ9hB9BJzpAY6IW0F6UIW8xEeA);
+		nbttagcompound.setShort("yTile", (short)this.field_8889_9EtK8JQDU7pJ30qgnK1zmg27Obn44vrU2h6h5x42TjXcdRTEz5FMS3ufijGf);
+		nbttagcompound.setShort("zTile", (short)this.field_8888_6KqoW1Y28cN5SZpc6mCME8shDtR0H4Gxk2XpF87j06ld6Gi4nI9wttj9K02r);
+		nbttagcompound.setByte("inTile", (byte)this.field_8893_4I57zewDPKU912Mq8D6cjiG23w4RAW7o25CPoI7Yx165EXy3BIf47m4d2o4j);
+		nbttagcompound.setByte("shake", (byte)this.field_8890_845U3D6H39t9lq568b7xE1EC7sw8YZz4tPKnr1PMXiwXOlLFhNuflWtj0107);
+		nbttagcompound.setByte("inGround", (byte)(this.field_8886_0SXhZb7Fp84gm1Zb0A1psJfwZ0YFM3XmZ8k89QVcHX4qQ24Gwm266hOyW3xP ? 1 : 0));
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.field_8887_0qhlUXJV48775Wt7H72JLcoPF3zjdagAfqYJ9hB9BJzpAY6IW0F6UIW8xEeA = nbttagcompound.getShort("xTile");
+		this.field_8889_9EtK8JQDU7pJ30qgnK1zmg27Obn44vrU2h6h5x42TjXcdRTEz5FMS3ufijGf = nbttagcompound.getShort("yTile");
+		this.field_8888_6KqoW1Y28cN5SZpc6mCME8shDtR0H4Gxk2XpF87j06ld6Gi4nI9wttj9K02r = nbttagcompound.getShort("zTile");
+		this.field_8893_4I57zewDPKU912Mq8D6cjiG23w4RAW7o25CPoI7Yx165EXy3BIf47m4d2o4j = nbttagcompound.getByte("inTile") & 255;
+		this.field_8890_845U3D6H39t9lq568b7xE1EC7sw8YZz4tPKnr1PMXiwXOlLFhNuflWtj0107 = nbttagcompound.getByte("shake") & 255;
+		this.field_8886_0SXhZb7Fp84gm1Zb0A1psJfwZ0YFM3XmZ8k89QVcHX4qQ24Gwm266hOyW3xP = nbttagcompound.getByte("inGround") == 1;
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+		if(this.field_8886_0SXhZb7Fp84gm1Zb0A1psJfwZ0YFM3XmZ8k89QVcHX4qQ24Gwm266hOyW3xP && this.field_8885_9KQ04vNQ47ZtitHMOeQ6t3Vb3e4Ic5dxRDN3396NqU98NB4wICTFYYD4oYFx == entityPlayer && this.field_8890_845U3D6H39t9lq568b7xE1EC7sw8YZz4tPKnr1PMXiwXOlLFhNuflWtj0107 <= 0 && entityPlayer.inventory.addItemStackToInventory(new ItemStack(ExtItems.essence.shiftedIndex, 1))) {
+			this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+			entityPlayer.onItemPickup(this, 1);
+			this.setEntityDead();
+		}
+
+	}
+
+	public float getShadowSize() {
+		return 0.0F;
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldUnknownClass2.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+public class WorldUnknownClass2 {
+	public static WorldUnknownClass3 field_9796_62Ccm2XAR6JqSDTgV762x61j971DNgsIrMhaXZxPs0fQnBC7ymR2l1v1V22X = new WorldUnknownClass3("\u0001/|!R|/8NNP/@{=$/||L@/-RN7/|O@A/8]AP/|%M4/(8%N/{**P/|8(%/!+P0/||M0/]$N8/6%Z4/|#$|/+#O+/RZE+/|%7*/B]]R/||ZN/(8]:/|P$P/OB@%/");
+	public static WorldUnknownClass3 field_9792_1YNrQ38ivM5fhyTo9PH5S33r6S87fqg85pTp0c4YlXfUniwhAwgeD8hZT3Cd = new WorldUnknownClass3("\u0001/|S{#/]L%A/||@P/ML3S/|P7O/4{N{/S{NO/%840/||(R/@:+*/|AMO/A*P3/||(!/A(]$/||4R/+L07/");
+	public static WorldUnknownClass3 field_9790_4Mn44antCz29B6GKYv6d2ZW6jUZp3xLB1XTEKn5O2h7Xzs27I617Goaxn8XY = new WorldUnknownClass3("\u0001/||+(/R0$#/||{3/@7+*/|#M#/LBP7/0:S!/%07!/|N{$/4S+S/||4!/*OAA/|!{N/!ZP{/|+:R/%@M!/");
+	public static WorldUnknownClass3 field_9797_2ExF4JhJHlCqkXYSNrS98Z5269ASfuJ8zkQQ6HhI63XODUSPeL6pTXj9yxiR = new WorldUnknownClass3("\u0001/|+L|/-S%*/7:2@/|%($/0R(P/|#MS/@303/||77/S]-]/||@N/MMM-/|3L*/A(0P/|!:|/%*P+/@MI{/|O:-/M$%#/||]0/:P*6/]]%(/|3R8/%3!P/||(%/M+B{/%$!$/|+7|/N3+0/{@1+/|PZA/:MZ4/||:+/7P@M/|3LA/3$(P/");
+	public static WorldUnknownClass3 field_9794_1Mq8T0QNr27egvw7Ii5njC2U34iHqD9xm0XHd85K26sr2HmLXKQgJ5Uz42hp = new WorldUnknownClass3("\u0001/|P{@/#4#M/||(@/*(+N/||4A/N$@0/|P{Z/:0**/|O(|/!O3*/Z{=N/||7#/P6O-/B**7/|*MO/4@0+/3R+-/");
+	public static WorldUnknownClass3 field_9791_17t872E67KsYQ1d04LU0O5giS6ZSq17O2qre6bZO5GyA530TyCK24CM264IQ = new WorldUnknownClass3("\u0001/|N#(/B4S0/|+7O/MB:O/||@R/+:P@/||@A/B$%3/6!O4/RS(B/");
+	public static WorldUnknownClass3 field_9795_70meZjpgin77izFDRms6YiXGbm7sTRK649zXtTMpcaGJg7Z3848NcHmipQ3k = new WorldUnknownClass3("\u0001/||06/ZP8N/|*ZS/ZB6S/||R:/O4SN/");
+	public static WorldUnknownClass3 field_9789_9Z0Rf0DDC0E00xcydj7892e71E4s1cG5iX42294z122jeMAG69D8995634eb = new WorldUnknownClass3("\u0001/|(|M/]7NA/S(!!/||-7/-P3N/");
+	public static WorldUnknownClass3 field_9793_29dm1e3GNDeOTZqsS1t29B2w34ks2F6TVj4W2QNMh33p0qFqKW79YSp421af = new WorldUnknownClass3("\u0001/|RS:/3Z:4/|*%$/O($(/||*B/!8PO/|B0#/O!@N/|Z|P/O:@]/N]8]/|#]]/NNRL/||B!/@Z%!/|*$6/3M(8/||40/P{OS/|]|B/:(88/|B36/86RR/|0!$/PA-O/");
+
+	public static String func_9788_833cA0YF34t606AzhAl21SSFKu5o86ZfZT6w0TL8Lej56qphXp7Tl0V5475T(WorldUnknownClass3 abc) {
+		if(((String)abc.field_12076_0yKQEI9scMQYs2U79FTz0taKE8d93C90G8erLBZDQ88O3Q6XJ3zC1l0lXK1q).startsWith("\u0001")) {
+			abc.field_12076_0yKQEI9scMQYs2U79FTz0taKE8d93C90G8erLBZDQ88O3Q6XJ3zC1l0lXK1q = WorldUnknownClass5.func_9878_3Wgt9HqAD7yWZZ406W6CQY19roNXuUYDk1Y3k19M34OcmzE4qxWeR376l98q(((String)abc.field_12076_0yKQEI9scMQYs2U79FTz0taKE8d93C90G8erLBZDQ88O3Q6XJ3zC1l0lXK1q).substring(1));
+		}
+
+		return (String)abc.field_12076_0yKQEI9scMQYs2U79FTz0taKE8d93C90G8erLBZDQ88O3Q6XJ3zC1l0lXK1q;
+	}
+}
--- net/minecraft/src/WorldGenLiquids.java
+++ net/minecraft/src/WorldGenLiquids.java
@@ -5,54 +5,54 @@
 public class WorldGenLiquids extends WorldGenerator {
 	private int liquidBlockId;
 
-	public WorldGenLiquids(int var1) {
-		this.liquidBlockId = var1;
+	public WorldGenLiquids(int liquidBlockID) {
+		this.liquidBlockId = liquidBlockID;
 	}
 
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		if(var1.getBlockId(var3, var4 + 1, var5) != Block.stone.blockID) {
-			return false;
-		} else if(var1.getBlockId(var3, var4 - 1, var5) != Block.stone.blockID) {
-			return false;
-		} else if(var1.getBlockId(var3, var4, var5) != 0 && var1.getBlockId(var3, var4, var5) != Block.stone.blockID) {
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		if(world.getBlockId(x, y + 1, z) != Block.stone.blockID) {
+			return false;
+		} else if(world.getBlockId(x, y - 1, z) != Block.stone.blockID) {
+			return false;
+		} else if(world.getBlockId(x, y, z) != 0 && world.getBlockId(x, y, z) != Block.stone.blockID) {
 			return false;
 		} else {
-			int var6 = 0;
-			if(var1.getBlockId(var3 - 1, var4, var5) == Block.stone.blockID) {
-				++var6;
-			}
-
-			if(var1.getBlockId(var3 + 1, var4, var5) == Block.stone.blockID) {
-				++var6;
-			}
-
-			if(var1.getBlockId(var3, var4, var5 - 1) == Block.stone.blockID) {
-				++var6;
-			}
-
-			if(var1.getBlockId(var3, var4, var5 + 1) == Block.stone.blockID) {
-				++var6;
-			}
-
-			int var7 = 0;
-			if(var1.getBlockId(var3 - 1, var4, var5) == 0) {
-				++var7;
-			}
-
-			if(var1.getBlockId(var3 + 1, var4, var5) == 0) {
-				++var7;
-			}
-
-			if(var1.getBlockId(var3, var4, var5 - 1) == 0) {
-				++var7;
-			}
-
-			if(var1.getBlockId(var3, var4, var5 + 1) == 0) {
-				++var7;
-			}
-
-			if(var6 == 3 && var7 == 1) {
-				var1.setBlockWithNotify(var3, var4, var5, this.liquidBlockId);
+			int i6 = 0;
+			if(world.getBlockId(x - 1, y, z) == Block.stone.blockID) {
+				++i6;
+			}
+
+			if(world.getBlockId(x + 1, y, z) == Block.stone.blockID) {
+				++i6;
+			}
+
+			if(world.getBlockId(x, y, z - 1) == Block.stone.blockID) {
+				++i6;
+			}
+
+			if(world.getBlockId(x, y, z + 1) == Block.stone.blockID) {
+				++i6;
+			}
+
+			int i7 = 0;
+			if(world.getBlockId(x - 1, y, z) == 0) {
+				++i7;
+			}
+
+			if(world.getBlockId(x + 1, y, z) == 0) {
+				++i7;
+			}
+
+			if(world.getBlockId(x, y, z - 1) == 0) {
+				++i7;
+			}
+
+			if(world.getBlockId(x, y, z + 1) == 0) {
+				++i7;
+			}
+
+			if(i6 == 3 && i7 == 1) {
+				world.setBlockWithNotify(x, y, z, this.liquidBlockId);
 			}
 
 			return true;
--- net/minecraft/src/WorldGenClay.java
+++ net/minecraft/src/WorldGenClay.java
@@ -6,40 +6,40 @@
 	private int clayBlockId = Block.blockClay.blockID;
 	private int numberOfBlocks;
 
-	public WorldGenClay(int var1) {
-		this.numberOfBlocks = var1;
+	public WorldGenClay(int numberOfBlocks) {
+		this.numberOfBlocks = numberOfBlocks;
 	}
 
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		if(var1.getBlockMaterial(var3, var4, var5) != Material.water) {
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		if(world.getBlockMaterial(x, y, z) != Material.water) {
 			return false;
 		} else {
-			float var6 = var2.nextFloat() * (float)Math.PI;
-			double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-			double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-			double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-			double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-			double var15 = (double)(var4 + var2.nextInt(3) + 2);
-			double var17 = (double)(var4 + var2.nextInt(3) + 2);
-
-			for(int var19 = 0; var19 <= this.numberOfBlocks; ++var19) {
-				double var20 = var7 + (var9 - var7) * (double)var19 / (double)this.numberOfBlocks;
-				double var22 = var15 + (var17 - var15) * (double)var19 / (double)this.numberOfBlocks;
-				double var24 = var11 + (var13 - var11) * (double)var19 / (double)this.numberOfBlocks;
-				double var26 = var2.nextDouble() * (double)this.numberOfBlocks / 16.0D;
-				double var28 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
-				double var30 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
-
-				for(int var32 = (int)(var20 - var28 / 2.0D); var32 <= (int)(var20 + var28 / 2.0D); ++var32) {
-					for(int var33 = (int)(var22 - var30 / 2.0D); var33 <= (int)(var22 + var30 / 2.0D); ++var33) {
-						for(int var34 = (int)(var24 - var28 / 2.0D); var34 <= (int)(var24 + var28 / 2.0D); ++var34) {
-							double var35 = ((double)var32 + 0.5D - var20) / (var28 / 2.0D);
-							double var37 = ((double)var33 + 0.5D - var22) / (var30 / 2.0D);
-							double var39 = ((double)var34 + 0.5D - var24) / (var28 / 2.0D);
-							if(var35 * var35 + var37 * var37 + var39 * var39 < 1.0D) {
-								int var41 = var1.getBlockId(var32, var33, var34);
-								if(var41 == Block.sand.blockID) {
-									var1.setBlock(var32, var33, var34, this.clayBlockId);
+			float f6 = rand.nextFloat() * (float)Math.PI;
+			double d7 = (double)((float)(x + 8) + MathHelper.sin(f6) * (float)this.numberOfBlocks / 8.0F);
+			double d9 = (double)((float)(x + 8) - MathHelper.sin(f6) * (float)this.numberOfBlocks / 8.0F);
+			double d11 = (double)((float)(z + 8) + MathHelper.cos(f6) * (float)this.numberOfBlocks / 8.0F);
+			double d13 = (double)((float)(z + 8) - MathHelper.cos(f6) * (float)this.numberOfBlocks / 8.0F);
+			double d15 = (double)(y + rand.nextInt(3) + 2);
+			double d17 = (double)(y + rand.nextInt(3) + 2);
+
+			for(int i19 = 0; i19 <= this.numberOfBlocks; ++i19) {
+				double d20 = d7 + (d9 - d7) * (double)i19 / (double)this.numberOfBlocks;
+				double d22 = d15 + (d17 - d15) * (double)i19 / (double)this.numberOfBlocks;
+				double d24 = d11 + (d13 - d11) * (double)i19 / (double)this.numberOfBlocks;
+				double d26 = rand.nextDouble() * (double)this.numberOfBlocks / 16.0D;
+				double d28 = (double)(MathHelper.sin((float)i19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * d26 + 1.0D;
+				double d30 = (double)(MathHelper.sin((float)i19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * d26 + 1.0D;
+
+				for(int i32 = (int)(d20 - d28 / 2.0D); i32 <= (int)(d20 + d28 / 2.0D); ++i32) {
+					for(int i33 = (int)(d22 - d30 / 2.0D); i33 <= (int)(d22 + d30 / 2.0D); ++i33) {
+						for(int i34 = (int)(d24 - d28 / 2.0D); i34 <= (int)(d24 + d28 / 2.0D); ++i34) {
+							double d35 = ((double)i32 + 0.5D - d20) / (d28 / 2.0D);
+							double d37 = ((double)i33 + 0.5D - d22) / (d30 / 2.0D);
+							double d39 = ((double)i34 + 0.5D - d24) / (d28 / 2.0D);
+							if(d35 * d35 + d37 * d37 + d39 * d39 < 1.0D) {
+								int i41 = world.getBlockId(i32, i33, i34);
+								if(i41 == Block.sand.blockID) {
+									world.setBlock(i32, i33, i34, this.clayBlockId);
 								}
 							}
 						}
--- /dev/null
+++ net/minecraft/src/SlotEssenceCloner.java
@@ -1,0 +1,11 @@
+package net.minecraft.src;
+
+public class SlotEssenceCloner extends SlotInventory {
+	public SlotEssenceCloner(GuiContainer um, IInventory cz2, IInventory cz3, int integer4, int integer5, int integer6) {
+		super(um, cz3, integer4, integer5, integer6);
+	}
+
+	public boolean isItemValid(ItemStack itemStack) {
+		return false;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EssenceCloneResult.java
@@ -1,0 +1,45 @@
+package net.minecraft.src;
+
+public class EssenceCloneResult implements IInventory {
+	public ItemStack[] stackResult = new ItemStack[3];
+	public EssenceClonerInventoryCB parent = null;
+
+	public EssenceCloneResult(EssenceClonerInventoryCB zp) {
+		this.parent = zp;
+	}
+
+	public int getSizeInventory() {
+		return 1;
+	}
+
+	public ItemStack getStackInSlot(int slot) {
+		return this.stackResult[slot];
+	}
+
+	public String getInvName() {
+		return "Result";
+	}
+
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.stackResult[slot] != null) {
+			ItemStack itemStack3 = this.stackResult[slot];
+			this.stackResult[slot] = null;
+			this.parent.a(this);
+			return itemStack3;
+		} else {
+			this.parent.a(this);
+			return null;
+		}
+	}
+
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.stackResult[slot] = itemStack;
+	}
+
+	public int getInventoryStackLimit() {
+		return 10000;
+	}
+
+	public void onInventoryChanged() {
+	}
+}
--- net/minecraft/src/Gui.java
+++ net/minecraft/src/Gui.java
@@ -5,72 +5,72 @@
 public class Gui {
 	protected float zLevel = 0.0F;
 
-	protected void drawRect(int var1, int var2, int var3, int var4, int var5) {
-		float var6 = (float)(var5 >> 24 & 255) / 255.0F;
-		float var7 = (float)(var5 >> 16 & 255) / 255.0F;
-		float var8 = (float)(var5 >> 8 & 255) / 255.0F;
-		float var9 = (float)(var5 & 255) / 255.0F;
-		Tessellator var10 = Tessellator.instance;
+	public static void drawRect(int integer1, int integer2, int integer3, int integer4, int integer5) {
+		float f5 = (float)(integer5 >> 24 & 255) / 255.0F;
+		float f6 = (float)(integer5 >> 16 & 255) / 255.0F;
+		float f7 = (float)(integer5 >> 8 & 255) / 255.0F;
+		float f8 = (float)(integer5 & 255) / 255.0F;
+		Tessellator tessellator9 = Tessellator.instance;
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-		GL11.glColor4f(var7, var8, var9, var6);
-		var10.startDrawingQuads();
-		var10.addVertex((double)var1, (double)var4, 0.0D);
-		var10.addVertex((double)var3, (double)var4, 0.0D);
-		var10.addVertex((double)var3, (double)var2, 0.0D);
-		var10.addVertex((double)var1, (double)var2, 0.0D);
-		var10.draw();
+		GL11.glColor4f(f6, f7, f8, f5);
+		tessellator9.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+		tessellator9.addVertex((double)integer1, (double)integer4, 0.0D);
+		tessellator9.addVertex((double)integer3, (double)integer4, 0.0D);
+		tessellator9.addVertex((double)integer3, (double)integer2, 0.0D);
+		tessellator9.addVertex((double)integer1, (double)integer2, 0.0D);
+		tessellator9.draw();
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 		GL11.glDisable(GL11.GL_BLEND);
 	}
 
-	protected void drawGradientRect(int var1, int var2, int var3, int var4, int var5, int var6) {
-		float var7 = (float)(var5 >> 24 & 255) / 255.0F;
-		float var8 = (float)(var5 >> 16 & 255) / 255.0F;
-		float var9 = (float)(var5 >> 8 & 255) / 255.0F;
-		float var10 = (float)(var5 & 255) / 255.0F;
-		float var11 = (float)(var6 >> 24 & 255) / 255.0F;
-		float var12 = (float)(var6 >> 16 & 255) / 255.0F;
-		float var13 = (float)(var6 >> 8 & 255) / 255.0F;
-		float var14 = (float)(var6 & 255) / 255.0F;
+	public static void drawGradientRect(int integer1, int integer2, int integer3, int integer4, int integer5, int integer6) {
+		float f12 = (float)(integer5 >> 24 & 255) / 255.0F;
+		float f13 = (float)(integer5 >> 16 & 255) / 255.0F;
+		float f14 = (float)(integer5 >> 8 & 255) / 255.0F;
+		float f15 = (float)(integer5 & 255) / 255.0F;
+		float f16 = (float)(integer6 >> 24 & 255) / 255.0F;
+		float f17 = (float)(integer6 >> 16 & 255) / 255.0F;
+		float f18 = (float)(integer6 >> 8 & 255) / 255.0F;
+		float f19 = (float)(integer6 & 255) / 255.0F;
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glDisable(GL11.GL_ALPHA_TEST);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 		GL11.glShadeModel(GL11.GL_SMOOTH);
-		Tessellator var15 = Tessellator.instance;
-		var15.startDrawingQuads();
-		var15.setColorRGBA_F(var8, var9, var10, var7);
-		var15.addVertex((double)var3, (double)var2, 0.0D);
-		var15.addVertex((double)var1, (double)var2, 0.0D);
-		var15.setColorRGBA_F(var12, var13, var14, var11);
-		var15.addVertex((double)var1, (double)var4, 0.0D);
-		var15.addVertex((double)var3, (double)var4, 0.0D);
-		var15.draw();
+		Tessellator tessellator20 = Tessellator.instance;
+		tessellator20.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+		tessellator20.setColorRGBA_F(f13, f14, f15, f12);
+		tessellator20.addVertex((double)integer3, (double)integer2, 0.0D);
+		tessellator20.addVertex((double)integer1, (double)integer2, 0.0D);
+		tessellator20.setColorRGBA_F(f17, f18, f19, f16);
+		tessellator20.addVertex((double)integer1, (double)integer4, 0.0D);
+		tessellator20.addVertex((double)integer3, (double)integer4, 0.0D);
+		tessellator20.draw();
 		GL11.glShadeModel(GL11.GL_FLAT);
 		GL11.glDisable(GL11.GL_BLEND);
 		GL11.glEnable(GL11.GL_ALPHA_TEST);
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 	}
 
-	public void drawCenteredString(FontRenderer var1, String var2, int var3, int var4, int var5) {
-		var1.drawStringWithShadow(var2, var3 - var1.getStringWidth(var2) / 2, var4, var5);
-	}
-
-	public void drawString(FontRenderer var1, String var2, int var3, int var4, int var5) {
-		var1.drawStringWithShadow(var2, var3, var4, var5);
-	}
-
-	public void drawTexturedModalRect(int var1, int var2, int var3, int var4, int var5, int var6) {
-		float var7 = 0.00390625F;
-		float var8 = 0.00390625F;
-		Tessellator var9 = Tessellator.instance;
-		var9.startDrawingQuads();
-		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), (double)this.zLevel, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + var6) * var8));
-		var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), (double)this.zLevel, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + var6) * var8));
-		var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), (double)this.zLevel, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + 0) * var8));
-		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), (double)this.zLevel, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + 0) * var8));
-		var9.draw();
+	public void drawCenteredString(FontRenderer aaf, String string, int integer3, int integer4, int integer5) {
+		aaf.drawStringWithShadow(string, integer3 - aaf.getStringWidth(string) / 2, integer4, integer5);
+	}
+
+	public static void drawString(FontRenderer aaf, String string, int integer3, int integer4, int integer5) {
+		aaf.drawStringWithShadow(string, integer3, integer4, integer5);
+	}
+
+	public void drawTexturedModalRect(int integer1, int integer2, int integer3, int integer4, int integer5, int integer6) {
+		float f7 = 0.00390625F;
+		float f8 = 0.00390625F;
+		Tessellator tessellator9 = Tessellator.instance;
+		tessellator9.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+		tessellator9.addVertexWithUV((double)(integer1 + 0), (double)(integer2 + integer6), (double)this.zLevel, (double)((float)(integer3 + 0) * f7), (double)((float)(integer4 + integer6) * f8));
+		tessellator9.addVertexWithUV((double)(integer1 + integer5), (double)(integer2 + integer6), (double)this.zLevel, (double)((float)(integer3 + integer5) * f7), (double)((float)(integer4 + integer6) * f8));
+		tessellator9.addVertexWithUV((double)(integer1 + integer5), (double)(integer2 + 0), (double)this.zLevel, (double)((float)(integer3 + integer5) * f7), (double)((float)(integer4 + 0) * f8));
+		tessellator9.addVertexWithUV((double)(integer1 + 0), (double)(integer2 + 0), (double)this.zLevel, (double)((float)(integer3 + 0) * f7), (double)((float)(integer4 + 0) * f8));
+		tessellator9.draw();
 	}
 }
--- net/minecraft/src/BlockLadder.java
+++ net/minecraft/src/BlockLadder.java
@@ -3,52 +3,56 @@
 import java.util.Random;
 
 public class BlockLadder extends Block {
-	protected BlockLadder(int var1, int var2) {
-		super(var1, var2, Material.circuits);
-	}
-
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		float var6 = 2.0F / 16.0F;
-		if(var5 == 2) {
-			this.setBlockBounds(0.0F, 0.0F, 1.0F - var6, 1.0F, 1.0F, 1.0F);
-		}
-
-		if(var5 == 3) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var6);
-		}
-
-		if(var5 == 4) {
-			this.setBlockBounds(1.0F - var6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-		}
-
-		if(var5 == 5) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, var6, 1.0F, 1.0F);
-		}
-
-		return super.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
-	}
-
-	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		float var6 = 2.0F / 16.0F;
-		if(var5 == 2) {
-			this.setBlockBounds(0.0F, 0.0F, 1.0F - var6, 1.0F, 1.0F, 1.0F);
-		}
-
-		if(var5 == 3) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var6);
-		}
-
-		if(var5 == 4) {
-			this.setBlockBounds(1.0F - var6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-		}
-
-		if(var5 == 5) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, var6, 1.0F, 1.0F);
-		}
-
-		return super.getSelectedBoundingBoxFromPool(var1, var2, var3, var4);
+	public BlockLadder(int id, int blockIndex) {
+		super(id, blockIndex, Material.circuits);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		float f6 = 0.125F;
+		switch(i5) {
+		case 2:
+			this.setBlockBounds(0.0F, 0.0F, 1.0F - f6, 1.0F, 1.0F, 1.0F);
+			break;
+		case 3:
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f6);
+			break;
+		case 4:
+			this.setBlockBounds(1.0F - f6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+			break;
+		case 5:
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, f6, 1.0F, 1.0F);
+			break;
+		case 6:
+			this.setBlockBounds(0.0F, 1.0F - f6, 0.0F, 1.0F, 1.0F, 1.0F);
+			break;
+		case 7:
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, f6, 1.0F);
+		}
+
+		return super.getCollisionBoundingBoxFromPool(world, x, y, z);
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		int i5 = worldObj.getBlockMetadata(x, y, z);
+		float f6 = 0.125F;
+		if(i5 == 2) {
+			this.setBlockBounds(0.0F, 0.0F, 1.0F - f6, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(i5 == 3) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f6);
+		}
+
+		if(i5 == 4) {
+			this.setBlockBounds(1.0F - f6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(i5 == 5) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, f6, 1.0F, 1.0F);
+		}
+
+		return super.getSelectedBoundingBoxFromPool(worldObj, x, y, z);
 	}
 
 	public boolean isOpaqueCube() {
@@ -63,59 +67,59 @@
 		return 8;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2 - 1, var3, var4) ? true : (var1.isBlockNormalCube(var2 + 1, var3, var4) ? true : (var1.isBlockNormalCube(var2, var3, var4 - 1) ? true : var1.isBlockNormalCube(var2, var3, var4 + 1)));
-	}
-
-	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if((var6 == 0 || var5 == 2) && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var6 = 2;
-		}
-
-		if((var6 == 0 || var5 == 3) && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var6 = 3;
-		}
-
-		if((var6 == 0 || var5 == 4) && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var6 = 4;
-		}
-
-		if((var6 == 0 || var5 == 5) && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var6 = 5;
-		}
-
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		boolean var7 = false;
-		if(var6 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var7 = true;
-		}
-
-		if(var6 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var7 = true;
-		}
-
-		if(var6 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var7 = true;
-		}
-
-		if(var6 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var7 = true;
-		}
-
-		if(!var7) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var6);
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		}
-
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-	}
-
-	public int quantityDropped(Random var1) {
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x - 1, y, z) ? true : (world.isBlockNormalCube(x + 1, y, z) ? true : (world.isBlockNormalCube(x, y, z - 1) ? true : world.isBlockNormalCube(x, y, z + 1)));
+	}
+
+	public void onBlockPlaced(World world, int x, int y, int z, int notifyFlag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if((i6 == 0 || notifyFlag == 2) && world.isBlockNormalCube(x, y, z + 1)) {
+			i6 = 2;
+		}
+
+		if((i6 == 0 || notifyFlag == 3) && world.isBlockNormalCube(x, y, z - 1)) {
+			i6 = 3;
+		}
+
+		if((i6 == 0 || notifyFlag == 4) && world.isBlockNormalCube(x + 1, y, z)) {
+			i6 = 4;
+		}
+
+		if((i6 == 0 || notifyFlag == 5) && world.isBlockNormalCube(x - 1, y, z)) {
+			i6 = 5;
+		}
+
+		world.setBlockMetadataWithNotify(x, y, z, i6);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		boolean z7 = false;
+		if(i6 == 2 && world.isBlockNormalCube(x, y, z + 1)) {
+			z7 = true;
+		}
+
+		if(i6 == 3 && world.isBlockNormalCube(x, y, z - 1)) {
+			z7 = true;
+		}
+
+		if(i6 == 4 && world.isBlockNormalCube(x + 1, y, z)) {
+			z7 = true;
+		}
+
+		if(i6 == 5 && world.isBlockNormalCube(x - 1, y, z)) {
+			z7 = true;
+		}
+
+		if(!z7) {
+			this.dropBlockAsItem(world, x, y, z, i6);
+			world.setBlockWithNotify(x, y, z, 0);
+		}
+
+		super.onNeighborBlockChange(world, x, y, z, flag);
+	}
+
+	public int quantityDropped(Random random) {
 		return 1;
 	}
 }
--- /dev/null
+++ net/minecraft/src/ItemHoursLongPastIII.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+public class ItemHoursLongPastIII extends Item {
+	private int field_9424_6T7099C11SkugNx3Mq0p5sK7cN1v9jC4b4T8NI723GnIz8YmgxgY9u9i9KPe = 803;
+
+	public ItemHoursLongPastIII(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		worldObj.playSoundAtEntity(entityPlayer, "ext.notif", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+		GuiInGameUnknownClass2 guiInGameUnknownClass24 = (GuiInGameUnknownClass2)InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.field_11177_7Zksb7i503i87T27QXh6g1K1pS0mrm03cH6J60Ws3B3hciqhuD9PIOw861xp.peek();
+		if(guiInGameUnknownClass24 == null || guiInGameUnknownClass24.field_8627_0ZmECs21Yya5NZUsnBNbB5tPFhkwONMzlzVXHX4jsV5aynDc020B97BLqocx != this.field_9424_6T7099C11SkugNx3Mq0p5sK7cN1v9jC4b4T8NI723GnIz8YmgxgY9u9i9KPe) {
+			InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11171_604vK63ksNcNlyaekc36K9YTmY8326K6noo7h77989I2TsYQ61KM5M25Nii9("Hours Long Past III \nCities of stone and glass wrought as a mindless fascimile of an\n unknowable land. Cubes of steel forged from ancient beasts littering seas.\nUnder the sun - and the newborn blood-stars -\n a new world rests, pristine, without history.", 20000, this.field_9424_6T7099C11SkugNx3Mq0p5sK7cN1v9jC4b4T8NI723GnIz8YmgxgY9u9i9KPe);
+		}
+
+		return itemStack;
+	}
+}
--- /dev/null
+++ net/minecraft/src/VisualsManager.java
@@ -1,0 +1,212 @@
+package net.minecraft.src;
+
+public class VisualsManager {
+	public Visuals field_10942_7xLO64tuZWfUPmt15N4O95hJ0176qp03d5mSW8trXS890yqputsco88a0dk3 = new Visuals() {
+		public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+			return "/unl/8db7811c-71de-11ee-b962-0242ac120002.xAL";
+		}
+
+		public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(Object... arr) {
+			if(arr[0] instanceof WorldZMSpawnWorld2 && ((Integer)arr[1]).intValue() == 5) {
+				this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+				return true;
+			} else {
+				return false;
+			}
+		}
+
+		public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+			return "unlock--v1604tex";
+		}
+
+		public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+			return "16.04 Extended Visuals";
+		}
+
+		public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+			return "Survive 5 rounds on [ZM]Metsan Talo";
+		}
+	};
+	public Visuals field_10946_7AR6ItAen3fx05Vncef3s63538b5wb97oi4kfrKpN1xXa92ennAR19lcPgfJ = new Visuals() {
+		public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+			return "/unl/189953d6-71e0-11ee-b962-0242ac120002.xAL";
+		}
+
+		public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(Object... arr) {
+			if(arr[0] instanceof EntityPlayerZombieModeClient && ((Integer)arr[1]).intValue() == ExtItems.GrayGun.shiftedIndex) {
+				this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+				return true;
+			} else {
+				return false;
+			}
+		}
+
+		public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+			return "unlock--irrigant";
+		}
+
+		public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+			return "Irrigant";
+		}
+
+		public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+			return "Acquire the Gray Gun in ZOMBIES";
+		}
+	};
+	public Visuals field_10945_6iX357SpWthupUbWNfLRO87UU7xQ8Prgh5bU4EX2jBlYJ3DWToctpI0eQj4u = new Visuals() {
+		public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+			return "/unl/ebcc7fc5-e1ff-4d8a-b96c-475aae32cc91.xAL";
+		}
+
+		public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(Object... arr) {
+			if(arr[0] instanceof FreerunMap1 && ((Long)arr[1]).longValue() <= 480L) {
+				this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+				return true;
+			} else {
+				return false;
+			}
+		}
+
+		public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+			return "unlock--cavestyle";
+		}
+
+		public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+			return "Cavestyle";
+		}
+
+		public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+			return "Finish CONSTRUCT in 24 seconds or less";
+		}
+	};
+	public Visuals field_10943_4P6yLgfnvnO6y89XpVE5PS5Hjo62bm3kdr4eGy8mOs9dKTZu5L8RqEHy2P44 = new Visuals() {
+		public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+			return "/unl/546d27d3-e170-47cb-b70e-4f4015fb5aa3.xAL";
+		}
+
+		public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(Object... arr) {
+			if(arr[0] instanceof FreerunMap5 && ((Long)arr[1]).longValue() <= 420L) {
+				this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+				return true;
+			} else {
+				return false;
+			}
+		}
+
+		public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+			return "unlock--neo";
+		}
+
+		public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+			return "Neon";
+		}
+
+		public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+			return "Finish FINALE in 21 seconds or less";
+		}
+	};
+	public Visuals field_10948_0K9Wvp8r1YnOA5010xZpl66lyNUt78N6SfQ197bg85kafTuYvONKR77OoXDq = new Visuals() {
+		public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+			return "/unl/2f22baab-269c-4e76-b0b0-3650e05bacd6.xAL";
+		}
+
+		public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(Object... arr) {
+			if(arr[0] instanceof FreerunMap2 && ((Long)arr[1]).longValue() <= 760L) {
+				this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+				return true;
+			} else {
+				return false;
+			}
+		}
+
+		public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+			return "unlock--v1606tex";
+		}
+
+		public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+			return "16.06 Visuals";
+		}
+
+		public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+			return "Finish SKYLINE in 38 seconds or less";
+		}
+	};
+	public Visuals field_10947_9AnvDYT3tcTSS9Cz1srJAOWX62V5Gqyb2ubqdcRVgP303Y40U8Ke6dGNVv08 = new Visuals() {
+		public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+			return "/unl/9abf38f1-4796-4dc9-a73e-f005bb873ef7.xAL";
+		}
+
+		public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(Object... arr) {
+			if(arr[0] instanceof WorldZMSpawnWorld2 && arr[1] instanceof EntityOtherPlayerMPUnknownClass2) {
+				this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+				return true;
+			} else {
+				return false;
+			}
+		}
+
+		public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+			return "unlock--nostalgy";
+		}
+
+		public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+			return "Nostalgy";
+		}
+
+		public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+			return "Shoot the Intruder in [ZM]Metsan Talo";
+		}
+	};
+	public Visuals field_10944_2EWN3F9cOeZLc1s1Wh3Y3X5G88vSKS70wXa1x0jY361oZ36mAnvM2vYHm7oe = new Visuals() {
+		public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+			return "/unl/beb2cee7-d138-4138-9199-d2fa77127b99.xAL";
+		}
+
+		public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(Object... arr) {
+			if(arr[0] instanceof GuiEssenceTransformer && ((Integer)arr[1]).intValue() == 888) {
+				this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+				return true;
+			} else {
+				return false;
+			}
+		}
+
+		public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+			return "unlock--lucky8";
+		}
+
+		public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+			return "Lucky8";
+		}
+
+		public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+			return "Obtain 888 Essence with one use of the Essence Transformer";
+		}
+	};
+	public Visuals field_10949_90L26at7gGnz0J8Af23lCTpFsYX1JLxXD3R7KOPeOnNw65r9paK3i34TuD8w = new Visuals() {
+		public String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2() {
+			return "/unl/375305cc-f415-435b-baec-26a60ccf5eac.xAL";
+		}
+
+		public boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(Object... arr) {
+			if(arr[0] instanceof WorldZMSpawnWorld1 && ((Integer)arr[1]).intValue() == 6) {
+				this.func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau();
+				return true;
+			} else {
+				return false;
+			}
+		}
+
+		public String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() {
+			return "unlock--lettering";
+		}
+
+		public String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() {
+			return "Lettering";
+		}
+
+		public String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() {
+			return "Complete the Easter Egg on [ZM]Ruinen der Untoten";
+		}
+	};
+}
--- /dev/null
+++ net/minecraft/src/BlockUnknownClass.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public class BlockUnknownClass extends Block {
+	public BlockUnknownClass(int id, int blockIndex, Material material) {
+		super(id, blockIndex, material);
+	}
+}
--- net/minecraft/src/Packet2Handshake.java
+++ net/minecraft/src/Packet2Handshake.java
@@ -10,20 +10,20 @@
 	public Packet2Handshake() {
 	}
 
-	public Packet2Handshake(String var1) {
-		this.username = var1;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.username = var1.readUTF();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeUTF(this.username);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleHandshake(this);
+	public Packet2Handshake(String username) {
+		this.username = username;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.username = dataInputStream.readUTF();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.username);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleHandshake(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/CommandSvCheats.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandSvCheats extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8575_9mOUOl87X8goVeVw9Ser8L368NHz5hK00k8QLrU66JDSLJC721EDFezuC12w;
+    
+    CommandSvCheats(final CommandManager abb) {
+        this.field_8575_9mOUOl87X8goVeVw9Ser8L368NHz5hK00k8QLrU66JDSLJC721EDFezuC12w = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        ScreenDebugMenu.dbg_conf_enableCheats = ((int)arr[0] != 0);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return ScreenDebugMenu.dbg_conf_enableCheats ? "1" : "0";
+    }
+}
--- /dev/null
+++ net/minecraft/src/HubGenerator.java
@@ -1,0 +1,63 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Random;
+
+public class HubGenerator {
+	public List next_generation_locs = new ArrayList();
+	public List avail_fragments = Arrays.asList(new HubFragment[]{new HubFragmentHallwayFwd(), new HubFragment4WayCross()});
+	public World target;
+	public List nxtGen;
+
+	public HubGenerator(World vg) {
+		this.target = vg;
+	}
+
+	public List GetApplicableFragments(List list, XYZv ya) {
+		ArrayList arrayList3 = new ArrayList();
+		Iterator iterator4 = list.iterator();
+
+		while(iterator4.hasNext()) {
+			HubFragment hubFragment5 = (HubFragment)iterator4.next();
+			if(hubFragment5.canGenerateAt(this.target, ya)) {
+				arrayList3.add(hubFragment5);
+			}
+		}
+
+		return arrayList3;
+	}
+
+	public void Begin(XYZv ya) {
+		this.nxtGen = ((HubFragment)this.avail_fragments.get(0)).generateAt(this.target, ya);
+	}
+
+	public void Next() {
+		ArrayList arrayList1 = new ArrayList();
+		Iterator iterator2 = this.nxtGen.iterator();
+
+		while(true) {
+			XYZv xYZv3;
+			HubFragment hubFragment4;
+			do {
+				if(!iterator2.hasNext()) {
+					this.nxtGen = arrayList1;
+					return;
+				}
+
+				xYZv3 = (XYZv)iterator2.next();
+				hubFragment4 = (HubFragment)this.avail_fragments.get((new Random()).nextInt(this.avail_fragments.size()));
+			} while(!hubFragment4.canGenerateAt(this.target, xYZv3));
+
+			List list5 = hubFragment4.generateAt(this.target, xYZv3);
+			Iterator iterator6 = list5.iterator();
+
+			while(iterator6.hasNext()) {
+				XYZv xYZv7 = (XYZv)iterator6.next();
+				arrayList1.add(xYZv7);
+			}
+		}
+	}
+}
--- net/minecraft/src/BlockBookshelf.java
+++ net/minecraft/src/BlockBookshelf.java
@@ -3,15 +3,15 @@
 import java.util.Random;
 
 public class BlockBookshelf extends Block {
-	public BlockBookshelf(int var1, int var2) {
-		super(var1, var2, Material.wood);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return var1 <= 1 ? 4 : this.blockIndexInTexture;
-	}
-
-	public int quantityDropped(Random var1) {
+	public BlockBookshelf(int id, int blockIndex) {
+		super(id, blockIndex, Material.wood);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side <= 1 ? 4 : this.blockIndexInTexture;
+	}
+
+	public int quantityDropped(Random random) {
 		return 0;
 	}
 }
--- /dev/null
+++ net/minecraft/src/OverlayWorldEdit.java
@@ -1,0 +1,343 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+public class OverlayWorldEdit {
+	public int x1;
+	public int y1;
+	public int z1;
+	public boolean pos1Set = false;
+	public int x2;
+	public int y2;
+	public int z2;
+	public boolean pos2Set = false;
+	public Minecraft tmc;
+	public long lastInput = 0L;
+	int currentSelection = 0;
+	int sel1 = 0;
+	int sel2 = 0;
+	int sel3 = 0;
+	private String[] sel1Options = new String[]{"Fill", "Replace", "Expand", "Move sel.", "Set here"};
+
+	public void SetPos1(int integer1, int integer2, int integer3) {
+		this.x1 = integer1;
+		this.y1 = integer2;
+		this.z1 = integer3;
+		this.pos1Set = true;
+	}
+
+	public void SetPos2(int integer1, int integer2, int integer3) {
+		this.x2 = integer1;
+		this.y2 = integer2;
+		this.z2 = integer3;
+		this.pos2Set = true;
+	}
+
+	public OverlayWorldEdit(Minecraft minecraft) {
+		this.tmc = minecraft;
+	}
+
+	public void func_11900_5c2JME9FJM2VGwVfJl0ngO0sr02CU65CYoI791NXV0sKu0R99BVT6So8OD40() {
+		Ext1605Utils.setBlock(this.tmc.theWorld, (long)this.tmc.thePlayer.posX, (long)this.tmc.thePlayer.posY, (long)this.tmc.thePlayer.posZ, this.sel1);
+	}
+
+	public void ExecFill() {
+		if(this.pos1Set && this.pos2Set) {
+			int i1 = Math.min(this.x1, this.x2);
+			int i2 = Math.min(this.y1, this.y2);
+			int i3 = Math.min(this.z1, this.z2);
+			int i4 = Math.max(this.x1, this.x2);
+			int i5 = Math.max(this.y1, this.y2);
+			int i6 = Math.max(this.z1, this.z2);
+			Ext1605Utils.fillBlock(this.tmc.theWorld, new XYZv((long)i1, (long)i2, (long)i3), new XYZv((long)i4, (long)i5, (long)i6), this.sel2);
+			InputHandler.mc.ingameGUI.addChatMessage("Filled " + (i4 - i1 + 1) * (i5 - i2 + 1) * (i6 - i3 + 1) + " blocks.");
+		} else {
+			ExtLogger.i("Both positions are not set.");
+		}
+	}
+
+	public void ExecReplace() {
+		if(this.pos1Set && this.pos2Set) {
+			int i1 = Math.min(this.x1, this.x2);
+			int i2 = Math.min(this.y1, this.y2);
+			int i3 = Math.min(this.z1, this.z2);
+			int i4 = Math.max(this.x1, this.x2);
+			int i5 = Math.max(this.y1, this.y2);
+			int i6 = Math.max(this.z1, this.z2);
+
+			for(int i7 = i1; i7 <= i4; ++i7) {
+				for(int i8 = i2; i8 <= i5; ++i8) {
+					for(int i9 = i3; i9 <= i6; ++i9) {
+						if(this.tmc.theWorld.getBlockId(i7, i8, i9) == this.sel2) {
+							Ext1605Utils.setBlock(this.tmc.theWorld, (long)i7, (long)i8, (long)i9, this.sel3);
+						}
+					}
+				}
+			}
+
+		} else {
+			ExtLogger.i("Both positions are not set.");
+		}
+	}
+
+	public void ExecExpand() {
+		int i1 = this.sel2;
+		switch(i1) {
+		case 0:
+			boolean z2x = this.y1 > this.y2;
+			if(z2x) {
+				this.y1 += this.sel3;
+			} else {
+				this.y2 += this.sel3;
+			}
+
+			InputHandler.mc.ingameGUI.addChatMessage("Expanded selection upward");
+			break;
+		case 1:
+			boolean z3 = this.y2 > this.y1;
+			if(z3) {
+				this.y1 -= this.sel3;
+			} else {
+				this.y2 -= this.sel3;
+			}
+
+			InputHandler.mc.ingameGUI.addChatMessage("Expanded selection downward");
+			break;
+		case 2:
+			boolean z4 = this.x1 > this.x2;
+			if(z4) {
+				this.x1 += this.sel3;
+			} else {
+				this.x2 += this.sel3;
+			}
+			break;
+		case 3:
+			boolean z5 = this.x2 > this.x1;
+			if(z5) {
+				this.x1 -= this.sel3;
+			} else {
+				this.x2 -= this.sel3;
+			}
+			break;
+		case 4:
+			boolean z6 = this.z1 > this.z2;
+			if(z6) {
+				this.z1 += this.sel3;
+			} else {
+				this.z2 += this.sel3;
+			}
+			break;
+		case 5:
+			boolean z7 = this.z2 > this.z1;
+			if(z7) {
+				this.z1 -= this.sel3;
+			} else {
+				this.z2 -= this.sel3;
+			}
+		}
+
+	}
+
+	public void ExecRelocate() {
+		int i1 = this.sel2;
+		switch(i1) {
+		case 0:
+			this.y1 += this.sel3;
+			this.y2 += this.sel3;
+			break;
+		case 1:
+			this.y1 -= this.sel3;
+			this.y2 -= this.sel3;
+			break;
+		case 2:
+			this.x1 += this.sel3;
+			this.x2 += this.sel3;
+			break;
+		case 3:
+			this.x1 -= this.sel3;
+			this.x2 -= this.sel3;
+			break;
+		case 4:
+			this.z1 += this.sel3;
+			this.z2 += this.sel3;
+			break;
+		case 5:
+			this.z1 -= this.sel3;
+			this.z2 -= this.sel3;
+		}
+
+	}
+
+	public void Next() {
+		switch(this.currentSelection) {
+		case 0:
+			++this.currentSelection;
+			break;
+		case 1:
+			if(this.sel2 > -1 && this.sel2 < 32767 && (this.sel2 == 0 || Block.blocksList[this.sel2] != null)) {
+				switch(this.sel1) {
+				case 0:
+					this.ExecFill();
+					this.currentSelection = 0;
+					break;
+				case 1:
+				case 2:
+				case 3:
+					++this.currentSelection;
+					break;
+				case 4:
+					this.func_11900_5c2JME9FJM2VGwVfJl0ngO0sr02CU65CYoI791NXV0sKu0R99BVT6So8OD40();
+					this.currentSelection = 0;
+				}
+			}
+			break;
+		case 2:
+			if(this.sel1 == 2 || this.sel3 > -1 && this.sel3 < 32767 && (this.sel3 == 0 || Block.blocksList[this.sel3] != null)) {
+				switch(this.sel1) {
+				case 1:
+					this.ExecReplace();
+					this.currentSelection = 0;
+					break;
+				case 2:
+					this.ExecExpand();
+					this.currentSelection = 0;
+					break;
+				case 3:
+					this.ExecRelocate();
+					this.currentSelection = 0;
+				}
+			}
+		}
+
+	}
+
+	public boolean HandleInput(int integer) {
+		if(!ScreenDebugMenu.dbg_conf_enableCheats) {
+			return false;
+		} else {
+			boolean z2x = false;
+			if(this.currentSelection == 0) {
+				if(integer == 209) {
+					this.sel1 = (this.sel1 + 1) % this.sel1Options.length;
+					z2x = true;
+				} else if(integer == 201) {
+					--this.sel1;
+					if(this.sel1 < 0) {
+						this.sel1 = this.sel1Options.length - 1;
+					}
+
+					z2x = true;
+				}
+			}
+
+			if(integer >= 2 && integer <= 11) {
+				if(this.currentSelection >= 1) {
+					switch(this.currentSelection) {
+					case 1:
+						this.sel2 *= 10;
+						this.sel2 += (integer - 2 + 1) % 10;
+						break;
+					case 2:
+						this.sel3 *= 10;
+						this.sel3 += (integer - 2 + 1) % 10;
+					}
+
+					z2x = true;
+				}
+			} else if(integer == 14 && this.currentSelection >= 1) {
+				switch(this.currentSelection) {
+				case 1:
+					this.sel2 /= 10;
+					break;
+				case 2:
+					this.sel3 /= 10;
+				}
+
+				z2x = true;
+			}
+
+			if(integer == 199) {
+				this.Next();
+				z2x = true;
+			} else if(integer == 207) {
+				this.currentSelection = 0;
+				z2x = true;
+			}
+
+			if(z2x) {
+				this.lastInput = System.currentTimeMillis();
+			}
+
+			return z2x;
+		}
+	}
+
+	public void func_11896_21hxskjoCalSdNwCUtCH797a5Bv6x17Si7L3X48r8FIf14LJZL110IOeH5JV() {
+		if(InputHandler.mc.objectMouseOver != null && InputHandler.mc.objectMouseOver.typeOfHit == 0) {
+			this.pos1Set = true;
+			this.x1 = InputHandler.mc.objectMouseOver.blockX;
+			this.y1 = InputHandler.mc.objectMouseOver.blockY;
+			this.z1 = InputHandler.mc.objectMouseOver.blockZ;
+			InputHandler.mc.ingameGUI.addChatMessage("Position 1 set to " + this.x1 + "," + this.y1 + "," + this.z1);
+		}
+
+	}
+
+	public void func_11901_4GX3NWZYNNxs7759a7f8764Sjs8mN8d0w06o2vq3vJdsHhi1084359oRzOm3() {
+		if(InputHandler.mc.objectMouseOver != null && InputHandler.mc.objectMouseOver.typeOfHit == 0) {
+			this.pos2Set = true;
+			this.x2 = InputHandler.mc.objectMouseOver.blockX;
+			this.y2 = InputHandler.mc.objectMouseOver.blockY;
+			this.z2 = InputHandler.mc.objectMouseOver.blockZ;
+			InputHandler.mc.ingameGUI.addChatMessage("Position 2 set to " + this.x2 + "," + this.y2 + "," + this.z2);
+		}
+
+	}
+
+	public void RenderOverlay(GuiIngame eu, int integer2, int integer3) {
+		if(System.currentTimeMillis() - this.lastInput <= 5000L || this.currentSelection != 0) {
+			FontRenderer fontRenderer4 = this.tmc.fontRenderer;
+			byte b5 = 5;
+			int i6 = integer3 / 4 + 22 - this.sel1 * 10;
+			if(this.currentSelection == 0) {
+				Gui.drawGradientRect(5, integer3 / 4, 70, integer3 / 4 + 60, -1609560048, -803200992);
+				int i7 = 0;
+				String[] string8 = this.sel1Options;
+				int i9 = string8.length;
+
+				for(int i10 = 0; i10 < i9; ++i10) {
+					String string11 = string8[i10];
+					Gui.drawString(fontRenderer4, string11, 17, i6 + 10 * i7, -1);
+					++i7;
+				}
+
+				Gui.drawString(fontRenderer4, ">", 7, integer3 / 4 + 22, 0xFFFFFF);
+			} else {
+				Gui.drawGradientRect(b5, integer3 / 4 + 20, b5 + 65, integer3 / 4 + 40, -1609560048, -803200992);
+				Gui.drawString(fontRenderer4, this.sel1Options[this.sel1], 7, integer3 / 4 + 30, 0xFFFFFF);
+			}
+
+			int i12 = b5 + 68;
+			if(this.currentSelection >= 1) {
+				if(this.currentSelection == 1 && (this.sel1 == 2 || this.sel1 == 3)) {
+					Gui.drawString(fontRenderer4, "5: z-", i12 + 7, integer3 / 4 + 10, 0xFFFFFF);
+					Gui.drawString(fontRenderer4, "4: z+", i12 + 7, integer3 / 4, 0xFFFFFF);
+					Gui.drawString(fontRenderer4, "3: x-", i12 + 7, integer3 / 4 - 10, 0xFFFFFF);
+					Gui.drawString(fontRenderer4, "2: x+", i12 + 7, integer3 / 4 - 20, 0xFFFFFF);
+					Gui.drawString(fontRenderer4, "1: down", i12 + 7, integer3 / 4 - 30, 0xFFFFFF);
+					Gui.drawString(fontRenderer4, "0: up", i12 + 7, integer3 / 4 - 40, 0xFFFFFF);
+				}
+
+				Gui.drawGradientRect(i12, integer3 / 4 + 20, i12 + 65, integer3 / 4 + 40, -1609560048, -803200992);
+				Gui.drawString(fontRenderer4, (this.currentSelection == 1 ? ">" : "") + this.sel2, i12 + 7, integer3 / 4 + 30, 0xFFFFFF);
+			}
+
+			i12 += 68;
+			if(this.currentSelection >= 2) {
+				Gui.drawGradientRect(i12, integer3 / 4 + 20, i12 + 65, integer3 / 4 + 40, -1609560048, -803200992);
+				Gui.drawString(fontRenderer4, (this.currentSelection == 2 ? ">" : "") + this.sel3, i12 + 7, integer3 / 4 + 30, 0xFFFFFF);
+			}
+
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/ModLoader.java
@@ -1,0 +1,462 @@
+package net.minecraft.src;
+
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.IntBuffer;
+import java.nio.file.Files;
+import java.nio.file.OpenOption;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.AbstractMap.SimpleEntry;
+import java.util.Map.Entry;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipInputStream;
+import javax.imageio.ImageIO;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.opengl.GL11;
+
+public class ModLoader {
+	private static boolean hasInit = false;
+	private static int highestEntityId = 3000;
+	private static int itemSpriteIndex = 0;
+	private static List modList = new ArrayList();
+	private static Map overrides = new HashMap();
+	private static int terrainSpriteIndex = 0;
+	public static boolean texturesOverridden = false;
+	private static boolean[] usedItemSprites = new boolean[256];
+	private static boolean[] usedTerrainSprites = new boolean[256];
+	private static List animList = new ArrayList();
+	public static final String field_11283_36Ty520QfO20Ax3rMshqVfvF7n1CuphU809iDI7awL2ld87Yr6P6DK3kFH46 = "ExtensionLoader 16.05_20#";
+
+	private static void init() {
+		String string0 = "1111111111111011111111111111001111111111111110011111111111110001111111111111110011111001111000001111100110000000111110000000000011111001100000000000000100000000000000010000000000000000000000000000000000000000000000000000000000000000000000001100000000000000";
+		String string1 = "1111111111111111111111111111110111111111111111011111111111111100111111111111000011111111111111111111111111000000100100111000000010000000000000000000000000000000000000000000000000000000000000000000000000000111000000000000001100000000000001111111111111000011";
+
+		for(int i2 = 0; i2 < 256; ++i2) {
+			usedItemSprites[i2] = string0.charAt(i2) == 49;
+			usedTerrainSprites[i2] = string1.charAt(i2) == 49;
+		}
+
+		try {
+			File file5 = new File(ModLoader.class.getProtectionDomain().getCodeSource().getLocation().toURI());
+			readFromClassPath(file5);
+
+			for(int i3 = 0; i3 < 32767; ++i3) {
+				if(Block.blocksList[i3] != null && Item.itemsList[i3] == null) {
+					Item.itemsList[i3] = new ItemBlock(i3 - 32767);
+				}
+			}
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
+			throw new RuntimeException("ModLoader has failed to initialize. ", exception4);
+		}
+
+		hasInit = true;
+	}
+
+	public static void AddAllEntityIDs() {
+		if(!hasInit) {
+			init();
+		}
+
+		Iterator iterator0 = modList.iterator();
+
+		while(iterator0.hasNext()) {
+			BaseMod baseMod1 = (BaseMod)iterator0.next();
+			baseMod1.AddEntityID();
+		}
+
+	}
+
+	public static int AddAllFuel(int integer) {
+		if(!hasInit) {
+			init();
+		}
+
+		int i1 = 0;
+
+		for(int i2 = 0; i2 < modList.size() && i1 == 0; ++i2) {
+			i1 = ((BaseMod)modList.get(i2)).AddFuel(integer);
+		}
+
+		return i1;
+	}
+
+	public static void AddAllRecipes(CraftingManager lb) {
+		if(!hasInit) {
+			init();
+		}
+
+		Iterator iterator1 = modList.iterator();
+
+		while(iterator1.hasNext()) {
+			BaseMod baseMod2 = (BaseMod)iterator1.next();
+			baseMod2.AddRecipes(lb);
+		}
+
+	}
+
+	public static void AddAllRenderers(Map map) {
+		if(!hasInit) {
+			init();
+		}
+
+		Iterator iterator1 = modList.iterator();
+
+		while(iterator1.hasNext()) {
+			BaseMod baseMod2 = (BaseMod)iterator1.next();
+			baseMod2.AddRenderer(map);
+		}
+
+	}
+
+	public static int AddAllSmelting(int integer) {
+		if(!hasInit) {
+			init();
+		}
+
+		int i1 = -1;
+
+		for(int i2 = 0; i2 < modList.size() && i1 == -1; ++i2) {
+			i1 = ((BaseMod)modList.get(i2)).AddSmelting(integer);
+		}
+
+		return i1;
+	}
+
+	private static void addMod(ClassLoader classLoader, String string) {
+		try {
+			String string2 = string.substring(0, string.length() - 6);
+			string2 = string2.replace('/', '.');
+			Class class3 = classLoader.loadClass(string2);
+			if(class3.getSuperclass() != BaseMod.class) {
+				return;
+			}
+
+			if(modList.add((BaseMod)class3.newInstance())) {
+				System.out.println("Mod Loaded: " + string2);
+			}
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
+		}
+
+	}
+
+	public static void addOverride(String string1, String string2, int integer) {
+		Object object3 = (List)overrides.get(string1);
+		if(object3 == null) {
+			object3 = new LinkedList();
+			overrides.put(string1, object3);
+		}
+
+		((List)object3).add(new SimpleEntry(string2, integer));
+	}
+
+	public static void addAnimation(TextureFX nq) {
+		animList.add(nq);
+	}
+
+	public static int getUniqueEntityId() {
+		return highestEntityId++;
+	}
+
+	private static int getUniqueItemSpriteIndex() {
+		while(itemSpriteIndex < usedItemSprites.length) {
+			if(!usedItemSprites[itemSpriteIndex]) {
+				usedItemSprites[itemSpriteIndex] = true;
+				return itemSpriteIndex++;
+			}
+
+			++itemSpriteIndex;
+		}
+
+		throw new RuntimeException("No more empty item sprite indices left!");
+	}
+
+	public static int getUniqueSpriteIndex(String string) {
+		if(string.equals("/gui/items.png")) {
+			return getUniqueItemSpriteIndex();
+		} else if(string.equals("/terrain.png")) {
+			return getUniqueTerrainSpriteIndex();
+		} else {
+			throw new RuntimeException("No registry for this texture: " + string);
+		}
+	}
+
+	private static int getUniqueTerrainSpriteIndex() {
+		while(terrainSpriteIndex < usedTerrainSprites.length) {
+			if(!usedTerrainSprites[terrainSpriteIndex]) {
+				usedTerrainSprites[terrainSpriteIndex] = true;
+				return terrainSpriteIndex++;
+			}
+
+			++terrainSpriteIndex;
+		}
+
+		throw new RuntimeException("No more empty terrain sprite indices left!");
+	}
+
+	public static boolean isModLoaded(String string) {
+		if(!hasInit) {
+			init();
+		}
+
+		Class class1 = null;
+
+		try {
+			class1 = Class.forName(string);
+		} catch (ClassNotFoundException classNotFoundException4) {
+			return false;
+		}
+
+		if(class1 != null) {
+			Iterator iterator2 = modList.iterator();
+
+			while(iterator2.hasNext()) {
+				BaseMod baseMod3 = (BaseMod)iterator2.next();
+				if(class1.isInstance(baseMod3)) {
+					return true;
+				}
+			}
+		}
+
+		return false;
+	}
+
+	private static BufferedImage loadImage(RenderEngine aee, String string) {
+		try {
+			InputStream inputStream2 = aee.field_12279_8nB09v2wL31LD7473aXNMbJrX47AX71iPMP6yPX544heeDvxj78y5qTJYk68.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0.getResourceAsStream(string);
+			if(inputStream2 != null) {
+				return ImageIO.read(inputStream2);
+			} else {
+				throw new RuntimeException("Image not found: " + string);
+			}
+		} catch (Exception exception3) {
+			throw new RuntimeException(exception3);
+		}
+	}
+
+	public static GuiScreen OpenModGUI(EntityPlayerSP zc, Object object) {
+		if(!hasInit) {
+			init();
+		}
+
+		GuiScreen guiScreen2 = null;
+
+		for(int i3 = 0; i3 < modList.size() && guiScreen2 == null; ++i3) {
+			guiScreen2 = ((BaseMod)modList.get(i3)).OpenModGUI(zc, object);
+		}
+
+		return guiScreen2;
+	}
+
+	public static void PopulateChunk(IChunkProvider adg, int integer2, int integer3, World vg) {
+		if(!hasInit) {
+			init();
+		}
+
+		Iterator iterator4 = modList.iterator();
+
+		while(iterator4.hasNext()) {
+			BaseMod baseMod5 = (BaseMod)iterator4.next();
+			if(adg instanceof ChunkProviderGenerate) {
+				baseMod5.GenerateSurface(vg, vg.rand, integer2, integer3);
+			} else {
+				baseMod5.func_9842_20fGD696E1rrnKO3zQ6ej3jllKU462gK6r1jhOj9DZ6R475673aN5KvNgDSo(vg, vg.rand, integer2, integer3);
+			}
+		}
+
+	}
+
+	private static void readFromClassPath(File file) throws IOException {
+		ClassLoader classLoader1 = ModLoader.class.getClassLoader();
+		String string2;
+		File[] file4;
+		if(file.isFile() && (file.getName().endsWith(".jar") || file.getName().endsWith(".zip"))) {
+			ZipInputStream zipInputStream8 = new ZipInputStream(Files.newInputStream(file.toPath(), new OpenOption[0]));
+			file4 = null;
+
+			while(true) {
+				ZipEntry zipEntry9 = zipInputStream8.getNextEntry();
+				if(zipEntry9 == null) {
+					break;
+				}
+
+				string2 = zipEntry9.getName();
+				if(!zipEntry9.isDirectory() && string2.contains("mod_") && string2.endsWith(".class")) {
+					addMod(classLoader1, string2);
+				}
+			}
+		} else if(file.isDirectory()) {
+			File[] file3 = file.listFiles();
+			if(file3 != null) {
+				file4 = file3;
+				int i5 = file3.length;
+
+				for(int i6 = 0; i6 < i5; ++i6) {
+					File file7 = file4[i6];
+					string2 = file7.getName();
+					if(file7.isFile() && string2.contains("mod_") && string2.endsWith(".class")) {
+						addMod(classLoader1, string2);
+					}
+				}
+			}
+		}
+
+	}
+
+	public static void RegisterAllBlocks(List list) {
+		if(!hasInit) {
+			init();
+		}
+
+		Iterator iterator1 = modList.iterator();
+
+		while(iterator1.hasNext()) {
+			BaseMod baseMod2 = (BaseMod)iterator1.next();
+			baseMod2.RegisterBlocks(list);
+		}
+
+	}
+
+	public static void RegisterAllTextureOverrides(RenderEngine aee) {
+		if(!hasInit) {
+			init();
+		}
+
+		Iterator iterator1 = modList.iterator();
+
+		while(iterator1.hasNext()) {
+			BaseMod baseMod2 = (BaseMod)iterator1.next();
+			baseMod2.RegisterTextureOverrides();
+		}
+
+		Minecraft minecraft33 = aee.options.mc;
+		int i34;
+		if(minecraft33 != null) {
+			for(i34 = 0; i34 < modList.size(); ++i34) {
+				((BaseMod)modList.get(i34)).RegisterAnimation(minecraft33);
+			}
+		}
+
+		for(i34 = 0; i34 < animList.size(); ++i34) {
+			aee.registerTextureFX((TextureFX)animList.get(i34));
+		}
+
+		for(Iterator iterator3 = overrides.entrySet().iterator(); iterator3.hasNext(); texturesOverridden = true) {
+			Entry map$Entry4 = (Entry)iterator3.next();
+			String string5 = (String)map$Entry4.getKey();
+			int i6 = aee.getTexture(string5);
+			IntBuffer intBuffer7 = ByteBuffer.allocateDirect(16).order(ByteOrder.nativeOrder()).asIntBuffer();
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, i6);
+			GL11.glGetTexLevelParameter(GL11.GL_TEXTURE_2D, 0, GL11.GL_TEXTURE_HEIGHT, intBuffer7);
+			int i8 = intBuffer7.get(0);
+			int i9 = i8 / 16;
+			List list10 = (List)map$Entry4.getValue();
+			Iterator iterator11 = list10.iterator();
+
+			while(iterator11.hasNext()) {
+				SimpleEntry abstractMap$SimpleEntry12 = (SimpleEntry)iterator11.next();
+				String string13 = (String)abstractMap$SimpleEntry12.getKey();
+				int i14 = ((Integer)abstractMap$SimpleEntry12.getValue()).intValue();
+				System.out.println("Overriding " + string5 + " with " + string13 + " @ " + i14);
+				BufferedImage bufferedImage15 = loadImage(aee, string13);
+				int i16 = bufferedImage15.getHeight();
+				ByteBuffer byteBuffer17 = ByteBuffer.allocateDirect(4 * i9 * i9).order(ByteOrder.nativeOrder());
+				int i18 = i9 / i16;
+				int[] i19 = new int[i16 * i16];
+				bufferedImage15.getRGB(0, 0, i16, i16, i19, 0, i16);
+				int i20 = i14 / 16;
+				int i21 = i14 % 16;
+				int i22 = i9 * i20;
+				int i23 = i9 * i21;
+
+				for(int i24 = 0; i24 < i9; ++i24) {
+					for(int i25 = 0; i25 < i9; ++i25) {
+						int i26 = i18 != 0 ? i16 * (i24 / i18) + i25 / i18 : i16 * i24 * (i16 / i9) + i25 * (i16 / i9);
+						int i27 = i19[i26];
+						byte b28 = (byte)(i27 >> 24 & 255);
+						byte b29 = (byte)(i27 >> 16 & 255);
+						byte b30 = (byte)(i27 >> 8 & 255);
+						byte b31 = (byte)(i27 & 255);
+						byteBuffer17.put(b29);
+						byteBuffer17.put(b30);
+						byteBuffer17.put(b31);
+						byteBuffer17.put(b28);
+					}
+				}
+
+				byteBuffer17.position(0);
+
+				try {
+					GL11.class.getMethod("glTexSubImage2D", new Class[]{Integer.TYPE, Integer.TYPE, Integer.TYPE, Integer.TYPE, Integer.TYPE, Integer.TYPE, Integer.TYPE, Integer.TYPE, ByteBuffer.class}).invoke((Object)null, new Object[]{3553, 0, i23, i22, i9, i9, 6408, 5121, byteBuffer17});
+				} catch (Exception exception32) {
+					exception32.printStackTrace();
+					throw new RuntimeException("Error calling glTexSubImage2D (blame xau)", exception32);
+				}
+			}
+		}
+
+	}
+
+	public static void RegisterAllTileEntities() {
+		if(!hasInit) {
+			init();
+		}
+
+		Iterator iterator0 = modList.iterator();
+
+		while(iterator0.hasNext()) {
+			BaseMod baseMod1 = (BaseMod)iterator0.next();
+			baseMod1.RegisterTileEntity();
+		}
+
+	}
+
+	public static void RunOSDHooks(Minecraft minecraft) {
+		if(!hasInit) {
+			init();
+		}
+
+		Iterator iterator1 = modList.iterator();
+
+		while(iterator1.hasNext()) {
+			BaseMod baseMod2 = (BaseMod)iterator1.next();
+			baseMod2.OSDHook(minecraft);
+		}
+
+	}
+
+	public static int func_11262_7FVgHb825Vh87dj7a9W610VePPyEK11H4311BN3gSLe6J6831pq3l6tzy2RP(int integer) {
+		int i1 = -1;
+
+		for(Iterator iterator2 = modList.iterator(); iterator2.hasNext() && i1 == -1; i1 = ((BaseMod)iterator2.next()).func_9844_54pM8s64ZMnaU952nGEh82Q57WO2N6jhc3lwdq8i55LCTqh9Z6CBI7mTN1xJ(integer)) {
+		}
+
+		return i1;
+	}
+
+	public static int func_11266_52C0KnY47qid74yQYI1zgrLooP36NM650B3JgHP47o3Od0glFmCykL7fJoj8(int integer) {
+		int i1 = 0;
+
+		for(Iterator iterator2 = modList.iterator(); iterator2.hasNext() && i1 == 0; i1 = ((BaseMod)iterator2.next()).func_9849_7m6m13dn8LrG10h8c2Og50FZ5BadQ06sFis8fvT5TqNZ2cpOxQ56X340JqVC(integer)) {
+		}
+
+		return i1;
+	}
+
+	public static List func_11264_7AT2q764kBM4UAhX20130C3Jh6LT7Y5snv3wxjh9e5VP43467B37csjDd1NC() {
+		return Collections.unmodifiableList(modList);
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenHouseSmallUnknownClass2.java
@@ -1,0 +1,53 @@
+package net.minecraft.src;
+
+import java.util.Objects;
+
+public class WorldGenHouseSmallUnknownClass2 {
+	public int field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM;
+	public int field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174;
+
+	public WorldGenHouseSmallUnknownClass2(WorldGenHouseSmallUnknownClass2 ns) {
+		this(ns.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM, ns.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174);
+	}
+
+	public WorldGenHouseSmallUnknownClass2(int integer1, int integer2) {
+		this.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM = integer1;
+		this.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 = integer2;
+	}
+
+	public int func_11105_5ZR6ielH0gxIT8YmA1m4F65rkWUs4cP2723lV4Hy6tl6rO7opLrvOyTWthww() {
+		return this.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM;
+	}
+
+	public int func_11106_47IAru15P2DzBMMdHFDJNZXRKMMGzW0ZSLEGX87l25z9CdPzg63Pq5T04vvr() {
+		return this.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174;
+	}
+
+	public WorldGenHouseSmallUnknownClass2 func_11108_2wwtPfGg0JGJPRvt877jq70T0XUQ8Uck2igW1QUed3TPLGg765xcKBkexT3A(int integer) {
+		return new WorldGenHouseSmallUnknownClass2(this.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM * integer, this.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 * integer);
+	}
+
+	public void func_11104_0t72uE0X6e9X1lk504mMn0Usl2040LLyJIqoCM5A8QY4qQ7Bui0LPvUn4qLg(int integer1, int integer2) {
+		this.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM += integer1;
+		this.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 += integer2;
+	}
+
+	public WorldGenHouseSmallUnknownClass2 func_11107_43cW0BG7D6e15UgFxhYIhnbmvR9R0GKm0lZwapr276d869pJ379mWCc345jT(int integer1, int integer2) {
+		return new WorldGenHouseSmallUnknownClass2(this.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM + integer1, this.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 + integer2);
+	}
+
+	public boolean equals(Object object) {
+		if(this == object) {
+			return true;
+		} else if(!(object instanceof WorldGenHouseSmallUnknownClass2)) {
+			return false;
+		} else {
+			WorldGenHouseSmallUnknownClass2 worldGenHouseSmallUnknownClass22 = (WorldGenHouseSmallUnknownClass2)object;
+			return this.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM == worldGenHouseSmallUnknownClass22.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM && this.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174 == worldGenHouseSmallUnknownClass22.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174;
+		}
+	}
+
+	public int hashCode() {
+		return Objects.hash(new Object[]{this.field_11110_8lC0vu3ZWMb5RN6uf3yOxqcTF6il1w83697KcOEhd66eGI1Wh3lPZPcE05RM, this.field_11109_0bm3C9QEP6bCapmYMP36ISZ8F3a48ODO4a58xz6U9hA99ZZj4RI1S24iD174});
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockCropsOld.java
@@ -1,0 +1,110 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockCropsOld extends BlockFlowerOld {
+	protected BlockCropsOld(int integer1, int integer2) {
+		super(integer1, integer2);
+		this.blockIndexInTexture = integer2;
+		this.setTickOnLoad(true);
+		float f3 = 0.5F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, 0.25F, 0.5F + f3);
+	}
+
+	protected boolean canThisPlantGrowOnThisBlockID(int integer) {
+		return integer == BlockOld.tilledField.blockID;
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		super.updateTick(vg, integer2, integer3, integer4, random);
+		if(vg.getBlockLightValue(integer2, integer3 + 1, integer4) >= 9) {
+			int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+			if(i6 < 7) {
+				float f7 = this.getGrowthRate(vg, integer2, integer3, integer4);
+				if(random.nextInt((int)(100.0F / f7)) == 0) {
+					++i6;
+					vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i6);
+				}
+			}
+		}
+
+	}
+
+	private float getGrowthRate(World vg, int integer2, int integer3, int integer4) {
+		float f5 = 1.0F;
+		int i6 = vg.getBlockId(integer2, integer3, integer4 - 1);
+		int i7 = vg.getBlockId(integer2, integer3, integer4 + 1);
+		int i8 = vg.getBlockId(integer2 - 1, integer3, integer4);
+		int i9 = vg.getBlockId(integer2 + 1, integer3, integer4);
+		int i10 = vg.getBlockId(integer2 - 1, integer3, integer4 - 1);
+		int i11 = vg.getBlockId(integer2 + 1, integer3, integer4 - 1);
+		int i12 = vg.getBlockId(integer2 + 1, integer3, integer4 + 1);
+		int i13 = vg.getBlockId(integer2 - 1, integer3, integer4 + 1);
+		boolean z14 = i8 == this.blockID || i9 == this.blockID;
+		boolean z15 = i6 == this.blockID || i7 == this.blockID;
+		boolean z16 = i10 == this.blockID || i11 == this.blockID || i12 == this.blockID || i13 == this.blockID;
+
+		for(int i17 = integer2 - 1; i17 <= integer2 + 1; ++i17) {
+			for(int i18 = integer4 - 1; i18 <= integer4 + 1; ++i18) {
+				int i19 = vg.getBlockId(i17, integer3 - 1, i18);
+				float f20 = 0.0F;
+				if(i19 == BlockOld.tilledField.blockID) {
+					f20 = 1.0F;
+					if(vg.getBlockMetadata(i17, integer3 - 1, i18) > 0) {
+						f20 = 3.0F;
+					}
+				}
+
+				if(i17 != integer2 || i18 != integer4) {
+					f20 /= 4.0F;
+				}
+
+				f5 += f20;
+			}
+		}
+
+		if(z16 || z14 && z15) {
+			f5 /= 2.0F;
+		}
+
+		return f5;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int integer1, int integer2) {
+		if(integer2 < 0) {
+			integer2 = 7;
+		}
+
+		return this.blockIndexInTexture + integer2;
+	}
+
+	public int getRenderType() {
+		return 6;
+	}
+
+	public void onBlockDestroyedByPlayer(World vg, int integer2, int integer3, int integer4, int integer5) {
+		super.onBlockDestroyedByPlayer(vg, integer2, integer3, integer4, integer5);
+
+		for(int i6 = 0; i6 < 3; ++i6) {
+			if(vg.rand.nextInt(15) <= integer5) {
+				float f7 = 0.7F;
+				float f8 = vg.rand.nextFloat() * f7 + (1.0F - f7) * 0.5F;
+				float f9 = vg.rand.nextFloat() * f7 + (1.0F - f7) * 0.5F;
+				float f10 = vg.rand.nextFloat() * f7 + (1.0F - f7) * 0.5F;
+				EntityItem entityItem11 = new EntityItem(vg, (double)((float)integer2 + f8), (double)((float)integer3 + f9), (double)((float)integer4 + f10), new ItemStack(Item.seeds));
+				entityItem11.delayBeforeCanPickup = 10;
+				vg.spawnEntityInWorld(entityItem11);
+			}
+		}
+
+	}
+
+	public int idDropped(int integer, Random random) {
+		System.out.println("Get resource: " + integer);
+		return integer == 7 ? Item.wheat.shiftedIndex : -1;
+	}
+
+	public int quantityDropped(Random random) {
+		return 1;
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldUnknownClass3.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+public class WorldUnknownClass3 {
+	public Object field_12076_0yKQEI9scMQYs2U79FTz0taKE8d93C90G8erLBZDQ88O3Q6XJ3zC1l0lXK1q;
+
+	public WorldUnknownClass3(Object object) {
+		this.field_12076_0yKQEI9scMQYs2U79FTz0taKE8d93C90G8erLBZDQ88O3Q6XJ3zC1l0lXK1q = object;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EntitySnowFX.java
@@ -1,0 +1,39 @@
+package net.minecraft.src;
+
+public class EntitySnowFX extends EntityFX {
+	public EntitySnowFX(World vg, double double2, double double3, double double4, double double5, double double6, double double7, int integer) {
+		super(vg, double2, double3, double4, double5, double6, double7);
+		this.motionX = this.motionX * (double)0.01F + double5;
+		this.motionY = this.motionY * -1.0099999904632568D + double6;
+		this.motionZ = this.motionZ * (double)0.01F + double7;
+		this.particleRed = this.particleGreen = this.particleBlue = 1.0F;
+		this.noClip = true;
+		this.particleTextureIndex = 82 + integer;
+		this.particleMaxAge *= 3;
+	}
+
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		super.renderParticle(tessellator, renderPartialTick, xOffset, yOffset, zOffset, xOffset2, zOffset2);
+	}
+
+	public void onUpdate() {
+		this.prevPosX = this.posX;
+		this.prevPosY = this.posY;
+		this.prevPosZ = this.posZ;
+		this.particleScale -= 0.01F;
+		if(this.particleAge++ >= this.particleMaxAge) {
+			this.setEntityDead();
+		}
+
+		this.moveEntity(this.motionX, this.motionY, this.motionZ);
+		this.motionX *= (double)0.46F;
+		this.motionY *= (double)0.85F;
+		this.motionZ *= (double)0.46F;
+		if(this.onGround) {
+			this.motionX *= 1.0D;
+			this.motionZ *= 0.75D;
+			this.motionY *= 1.0D;
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandSvLeveltime.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+class CommandSvLeveltime extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8552_2dPZ8hD39301S641ULipvSu57Y8F47pog6n45gMVj6TPzNx9ETjMhmI0W2j4;
+    
+    CommandSvLeveltime(final CommandManager abb) {
+        this.field_8552_2dPZ8hD39301S641ULipvSu57Y8F47pog6n45gMVj6TPzNx9ETjMhmI0W2j4 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        if (ScreenDebugMenu.dbg_conf_enableCheats) {
+            InputHandler.mc.theWorld.worldTime = (long)arr[0];
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "" + InputHandler.mc.theWorld.worldTime;
+    }
+}
--- net/minecraft/src/ItemPickaxe.java
+++ net/minecraft/src/ItemPickaxe.java
@@ -1,15 +1,19 @@
 package net.minecraft.src;
 
 public class ItemPickaxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.ice};
+	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.ice, ExtBlocks.LowOreCoal, ExtBlocks.LowOreDiamond, ExtBlocks.LowOreGold, ExtBlocks.LowOreGreenstone, ExtBlocks.LowOreGreenstoneGlowing, ExtBlocks.LowOreIron};
 	private int harvestLevel;
 
-	public ItemPickaxe(int var1, int var2) {
-		super(var1, 2, var2, blocksEffectiveAgainst);
-		this.harvestLevel = var2;
-	}
-
-	public boolean canHarvestBlock(Block var1) {
-		return var1 == Block.obsidian ? this.harvestLevel == 3 : (var1 != Block.blockDiamond && var1 != Block.oreDiamond ? (var1 != Block.blockGold && var1 != Block.oreGold ? (var1 != Block.blockSteel && var1 != Block.oreIron ? (var1 != Block.oreRedstone && var1 != Block.oreRedstoneGlowing ? (var1.material == Material.rock ? true : var1.material == Material.iron) : this.harvestLevel >= 2) : this.harvestLevel >= 1) : this.harvestLevel >= 2) : this.harvestLevel >= 2);
+	public ItemPickaxe(int itemID, int harvestLevelAndMaterial) {
+		super(itemID, 2, harvestLevelAndMaterial, blocksEffectiveAgainst);
+		this.harvestLevel = harvestLevelAndMaterial;
+	}
+
+	public float getStrVsBlock(ItemStack stack, Block block) {
+		return block.pickaxeEffective ? this.efficiencyOnProperMaterial : super.getStrVsBlock(stack, block);
+	}
+
+	public boolean canHarvestBlock(Block block) {
+		return block == Block.obsidian ? this.harvestLevel >= 3 : (block != Block.blockDiamond && block != Block.oreDiamond && block != ExtBlocks.LowOreDiamond && block != ExtBlocks.LowOreGold && block != Block.oreRedstone && block != Block.oreRedstoneGlowing && block != Block.blockGold && block != Block.oreGold && block != ExtBlocks.ClinohumiteOre && block != ExtBlocks.LaceAgateOre && block != ExtBlocks.MalachiteOre && block != ExtBlocks.PyriteOre ? (block != Block.blockSteel && block != Block.oreIron && block != ExtBlocks.LowOreIron ? block.material == Material.rock || block.material == Material.iron : this.harvestLevel >= 1) : this.harvestLevel >= 2);
 	}
 }
--- /dev/null
+++ net/minecraft/src/InventoryEssenceCloner.java
@@ -1,0 +1,73 @@
+package net.minecraft.src;
+
+public class InventoryEssenceCloner implements IInventory {
+	public ItemStack[] stackList;
+	private int gridSize;
+	private EssenceClonerInventoryCB craftingInventory;
+
+	public InventoryEssenceCloner(EssenceClonerInventoryCB zp, int integer2, int integer3) {
+		this.gridSize = integer2 * integer3;
+		this.stackList = new ItemStack[this.gridSize];
+		this.craftingInventory = zp;
+	}
+
+	public InventoryEssenceCloner(EssenceClonerInventoryCB zp, ItemStack[] arr) {
+		this.gridSize = arr.length;
+		this.stackList = arr;
+		this.craftingInventory = zp;
+	}
+
+	public int getSizeInventory() {
+		return this.gridSize;
+	}
+
+	public ItemStack getStackInSlot(int slot) {
+		return this.stackList[slot];
+	}
+
+	public String getInvName() {
+		return "Crafting";
+	}
+
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.stackList[slot] != null) {
+			ItemStack itemStack3;
+			if(this.stackList[slot].stackSize <= stackSize) {
+				itemStack3 = this.stackList[slot];
+				this.stackList[slot] = null;
+				this.craftingInventory.a(this);
+				return itemStack3;
+			} else {
+				itemStack3 = this.stackList[slot].splitStack(stackSize);
+				if(this.stackList[slot].stackSize == 0) {
+					this.stackList[slot] = null;
+				}
+
+				this.craftingInventory.a(this);
+				return itemStack3;
+			}
+		} else {
+			return null;
+		}
+	}
+
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.setInventorySlotContents(slot, itemStack, true);
+	}
+
+	public void setInventorySlotContents(int integer, ItemStack iy, boolean boolean3) {
+		this.stackList[integer] = iy;
+		if(boolean3) {
+			this.craftingInventory.a(this);
+		}
+
+	}
+
+	public int getInventoryStackLimit() {
+		return 1000;
+	}
+
+	public void onInventoryChanged() {
+		this.craftingInventory.a(this);
+	}
+}
--- net/minecraft/src/RenderSheep.java
+++ net/minecraft/src/RenderSheep.java
@@ -1,17 +1,17 @@
 package net.minecraft.src;
 
 public class RenderSheep extends RenderLiving {
-	public RenderSheep(ModelBase var1, ModelBase var2, float var3) {
-		super(var1, var3);
-		this.setRenderPassModel(var2);
+	public RenderSheep(ModelBase yi1, ModelBase yi2, float float3) {
+		super(yi1, float3);
+		this.setRenderPassModel(yi2);
 	}
 
-	protected boolean renderFur(EntitySheep var1, int var2) {
+	protected boolean renderFur(EntitySheep jj, int integer) {
 		this.loadTexture("/mob/sheep_fur.png");
-		return var2 == 0 && !var1.sheared;
+		return integer == 0 && !jj.sheared;
 	}
 
-	protected boolean shouldRenderPass(EntityLiving var1, int var2) {
-		return this.renderFur((EntitySheep)var1, var2);
+	protected boolean shouldRenderPass(EntityLiving zi, int integer) {
+		return this.renderFur((EntitySheep)zi, integer);
 	}
 }
--- net/minecraft/src/Packet30Entity.java
+++ net/minecraft/src/Packet30Entity.java
@@ -13,16 +13,16 @@
 	public byte pitch;
 	public boolean rotating = false;
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleEntity(this);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleEntity(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/ThreadRecruitmentServer.java
@@ -1,0 +1,67 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.net.ServerSocket;
+import java.net.Socket;
+
+public class ThreadRecruitmentServer extends Thread {
+	private ServerSocket serverSocket;
+	private Socket clientSocket;
+	private DataOutputStream out;
+	private DataInputStream in;
+
+	public static void SendPacket(DataOutputStream dataOutputStream, RPacket jp) throws IOException {
+		ExtLogger.i("Writing byte " + jp.GetPacketID() + ", size " + jp.GetResponseSize());
+		dataOutputStream.writeByte(jp.GetPacketID());
+		dataOutputStream.writeInt(jp.GetResponseSize());
+		jp.Send(dataOutputStream);
+	}
+
+	public Class GetPacketClassForId(int integer) {
+		switch(integer) {
+		case 160:
+			return RPacketA0Ping.class;
+		default:
+			return null;
+		}
+	}
+
+	public void run() {
+		try {
+			this.serverSocket = new ServerSocket(25566);
+			this.clientSocket = this.serverSocket.accept();
+			this.out = new DataOutputStream(this.clientSocket.getOutputStream());
+			this.in = new DataInputStream(this.clientSocket.getInputStream());
+
+			while(InputHandler.mc.theWorld != null) {
+				while(this.in.available() == 0) {
+				}
+
+				byte b1 = this.in.readByte();
+				int i2 = this.in.readInt();
+				ExtLogger.i("received packet id: " + b1 + ", size: " + i2);
+				Class class3 = this.GetPacketClassForId(b1 & 255);
+				RPacket rPacket4 = (RPacket)class3.getConstructor(new Class[0]).newInstance(new Object[0]);
+				rPacket4.Receive(this.in);
+				rPacket4.Respond(this.out);
+			}
+		} catch (Exception exception13) {
+			exception13.printStackTrace();
+		} finally {
+			ExtLogger.i("server thread finished");
+
+			try {
+				this.serverSocket.close();
+				this.clientSocket.close();
+				this.out.close();
+				this.in.close();
+			} catch (IOException iOException12) {
+				iOException12.printStackTrace();
+			}
+
+		}
+
+	}
+}
--- net/minecraft/src/EnumMobType.java
+++ net/minecraft/src/EnumMobType.java
@@ -4,4 +4,22 @@
 	everything,
 	mobs,
 	players;
+
+    private static final /* synthetic */ EnumMobType[] field_11836_91jI5jByHCEsnvbu45R5vB70d0e5TUDCQJvM3tJ9E39n7NyrOX794PSdZOeK;
+
+	public static EnumMobType[] func_11832_9P1o1oebT0P6qN82XfGD0SeXmi6PfCwPh7Sx35L3OlWewYuRMagJ5966WRzN() {
+		return (EnumMobType[])field_11836_91jI5jByHCEsnvbu45R5vB70d0e5TUDCQJvM3tJ9E39n7NyrOX794PSdZOeK.clone();
+	}
+
+	public static EnumMobType func_11831_54OYTX0TBS3019Nkgl03ToJS0a3360XIimXhRB8GUT59rG8E059j71TIdkD7(String string) {
+		return (EnumMobType)Enum.valueOf(EnumMobType.class, string);
+	}
+
+	private static EnumMobType[] func_11833_154xDXhBe8J962VQQHTk0w6M4874x4xz18ur639FA249bRztNO5fECfn132P() {
+		return new EnumMobType[]{everything, mobs, players};
+	}
+
+    static {
+        field_11836_91jI5jByHCEsnvbu45R5vB70d0e5TUDCQJvM3tJ9E39n7NyrOX794PSdZOeK = EnumMobType.func_11833_154xDXhBe8J962VQQHTk0w6M4874x4xz18ur639FA249bRztNO5fECfn132P();
+    }
 }
--- /dev/null
+++ net/minecraft/src/BiomeUnknownClass2.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class BiomeUnknownClass2 implements BiomeInterface {
+	public double func_10184_39mJVmq3bl4dbH51995p9tocRB43bFXruO32GkxVTy54fzIxdy5dt9OeTC2A(int integer1, int integer2, EnumWorldGenerator _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178) {
+		return 0.0D;
+	}
+
+	public double func_10186_4hoZRS129yUan88AHp1ksCfja1h93mYKfFda82Qtd8pqKm7G4bgpnYsijiMu(int integer1, int integer2, EnumWorldGenerator _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178) {
+		return 0.0D;
+	}
+
+	public WorldGenMyconUnknownClass func_10185_7j1lR4019pucW00n7wn38afjBd62vEMB6B6SVB9068f4kyPzw4E6wI65ufr8(int integer1, int integer2, EnumWorldGenerator _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178) {
+		return WorldGenMyconUnknownClass.func_9978_2dCM22Pc7rV0IQo46JM3ja84x9AHCGNPeSCDVFoTi3969B8hv2sM7nr6o61r(0.0D, 0.0D, _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178);
+	}
+}
--- net/minecraft/src/RedstoneUpdateInfo.java
+++ net/minecraft/src/RedstoneUpdateInfo.java
@@ -1,15 +1,15 @@
 package net.minecraft.src;
 
-class RedstoneUpdateInfo {
-	int x;
-	int y;
-	int z;
-	long updateTime;
+public class RedstoneUpdateInfo {
+	public int x;
+	public int y;
+	public int z;
+	public long updateTime;
 
-	public RedstoneUpdateInfo(int var1, int var2, int var3, long var4) {
-		this.x = var1;
-		this.y = var2;
-		this.z = var3;
-		this.updateTime = var4;
+	public RedstoneUpdateInfo(int x, int y, int z, long updateTime) {
+		this.x = x;
+		this.y = y;
+		this.z = z;
+		this.updateTime = updateTime;
 	}
 }
--- net/minecraft/src/ModelQuadraped.java
+++ net/minecraft/src/ModelQuadraped.java
@@ -8,43 +8,43 @@
 	public ModelRenderer leg3;
 	public ModelRenderer leg4;
 
-	public ModelQuadraped(int var1, float var2) {
-		this.head.addBox(-4.0F, -4.0F, -8.0F, 8, 8, 8, var2);
-		this.head.setRotationPoint(0.0F, (float)(18 - var1), -6.0F);
+	public ModelQuadraped(int integer, float float2) {
+		this.head.addBox(-4.0F, -4.0F, -8.0F, 8, 8, 8, float2);
+		this.head.setRotationPoint(0.0F, (float)(18 - integer), -6.0F);
 		this.body = new ModelRenderer(28, 8);
-		this.body.addBox(-5.0F, -10.0F, -7.0F, 10, 16, 8, var2);
-		this.body.setRotationPoint(0.0F, (float)(17 - var1), 2.0F);
+		this.body.addBox(-5.0F, -10.0F, -7.0F, 10, 16, 8, float2);
+		this.body.setRotationPoint(0.0F, (float)(17 - integer), 2.0F);
 		this.leg1 = new ModelRenderer(0, 16);
-		this.leg1.addBox(-2.0F, 0.0F, -2.0F, 4, var1, 4, var2);
-		this.leg1.setRotationPoint(-3.0F, (float)(24 - var1), 7.0F);
+		this.leg1.addBox(-2.0F, 0.0F, -2.0F, 4, integer, 4, float2);
+		this.leg1.setRotationPoint(-3.0F, (float)(24 - integer), 7.0F);
 		this.leg2 = new ModelRenderer(0, 16);
-		this.leg2.addBox(-2.0F, 0.0F, -2.0F, 4, var1, 4, var2);
-		this.leg2.setRotationPoint(3.0F, (float)(24 - var1), 7.0F);
+		this.leg2.addBox(-2.0F, 0.0F, -2.0F, 4, integer, 4, float2);
+		this.leg2.setRotationPoint(3.0F, (float)(24 - integer), 7.0F);
 		this.leg3 = new ModelRenderer(0, 16);
-		this.leg3.addBox(-2.0F, 0.0F, -2.0F, 4, var1, 4, var2);
-		this.leg3.setRotationPoint(-3.0F, (float)(24 - var1), -5.0F);
+		this.leg3.addBox(-2.0F, 0.0F, -2.0F, 4, integer, 4, float2);
+		this.leg3.setRotationPoint(-3.0F, (float)(24 - integer), -5.0F);
 		this.leg4 = new ModelRenderer(0, 16);
-		this.leg4.addBox(-2.0F, 0.0F, -2.0F, 4, var1, 4, var2);
-		this.leg4.setRotationPoint(3.0F, (float)(24 - var1), -5.0F);
-	}
-
-	public void render(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.setRotationAngles(var1, var2, var3, var4, var5, var6);
-		this.head.render(var6);
-		this.body.render(var6);
-		this.leg1.render(var6);
-		this.leg2.render(var6);
-		this.leg3.render(var6);
-		this.leg4.render(var6);
-	}
-
-	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.head.rotateAngleX = -(var5 / (180.0F / (float)Math.PI));
-		this.head.rotateAngleY = var4 / (180.0F / (float)Math.PI);
-		this.body.rotateAngleX = (float)Math.PI * 0.5F;
-		this.leg1.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.4F * var2;
-		this.leg2.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.4F * var2;
-		this.leg3.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.4F * var2;
-		this.leg4.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.4F * var2;
+		this.leg4.addBox(-2.0F, 0.0F, -2.0F, 4, integer, 4, float2);
+		this.leg4.setRotationPoint(3.0F, (float)(24 - integer), -5.0F);
+	}
+
+	public void render(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.setRotationAngles(float1, float2, float3, float4, float5, float6);
+		this.head.render(float6);
+		this.body.render(float6);
+		this.leg1.render(float6);
+		this.leg2.render(float6);
+		this.leg3.render(float6);
+		this.leg4.render(float6);
+	}
+
+	public void setRotationAngles(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.head.rotateAngleX = -(float5 / 57.295776F);
+		this.head.rotateAngleY = float4 / 57.295776F;
+		this.body.rotateAngleX = (float)Math.PI / 2F;
+		this.leg1.rotateAngleX = MathHelper.cos(float1 * 0.6662F) * 1.4F * float2;
+		this.leg2.rotateAngleX = MathHelper.cos(float1 * 0.6662F + (float)Math.PI) * 1.4F * float2;
+		this.leg3.rotateAngleX = MathHelper.cos(float1 * 0.6662F + (float)Math.PI) * 1.4F * float2;
+		this.leg4.rotateAngleX = MathHelper.cos(float1 * 0.6662F) * 1.4F * float2;
 	}
 }
--- net/minecraft/src/MovementInputFromOptions.java
+++ net/minecraft/src/MovementInputFromOptions.java
@@ -4,52 +4,74 @@
 	private boolean[] movementKeyStates = new boolean[10];
 	private GameSettings gameSettings;
 
-	public MovementInputFromOptions(GameSettings var1) {
-		this.gameSettings = var1;
+	public MovementInputFromOptions(GameSettings gameSettings) {
+		this.gameSettings = gameSettings;
 	}
 
-	public void checkKeyForMovementInput(int var1, boolean var2) {
-		byte var3 = -1;
-		if(var1 == this.gameSettings.keyBindForward.keyCode) {
-			var3 = 0;
-		}
-
-		if(var1 == this.gameSettings.keyBindBack.keyCode) {
-			var3 = 1;
-		}
-
-		if(var1 == this.gameSettings.keyBindLeft.keyCode) {
-			var3 = 2;
-		}
-
-		if(var1 == this.gameSettings.keyBindRight.keyCode) {
-			var3 = 3;
-		}
-
-		if(var1 == this.gameSettings.keyBindJump.keyCode) {
-			var3 = 4;
-		}
-
-		if(var1 == this.gameSettings.keyBindSneak.keyCode) {
-			var3 = 5;
-		}
-
-		if(var3 >= 0) {
-			this.movementKeyStates[var3] = var2;
+	public void checkKeyForMovementInput(int key, boolean state) {
+		byte b3 = -1;
+		if(key == this.gameSettings.keyBindForward.keyCode) {
+			b3 = 0;
+		}
+
+		if(key == this.gameSettings.keyBindBack.keyCode) {
+			b3 = 1;
+		}
+
+		if(key == this.gameSettings.keyBindLeft.keyCode) {
+			b3 = 2;
+		}
+
+		if(key == this.gameSettings.keyBindRight.keyCode) {
+			b3 = 3;
+		}
+
+		if(key == this.gameSettings.keyBindJump.keyCode) {
+			b3 = 4;
+		}
+
+		if(key == this.gameSettings.keyBindSneak.keyCode) {
+			b3 = 5;
+		}
+
+		if(b3 >= 0) {
+			this.movementKeyStates[b3] = state;
 		}
 
 	}
 
 	public void resetKeyState() {
-		for(int var1 = 0; var1 < 10; ++var1) {
-			this.movementKeyStates[var1] = false;
+		for(int i1 = 0; i1 < 10; ++i1) {
+			this.movementKeyStates[i1] = false;
 		}
 
 	}
 
-	public void updatePlayerMoveState(EntityPlayer var1) {
+	public void updatePlayerMoveState(EntityPlayer entityPlayer) {
 		this.moveStrafe = 0.0F;
 		this.moveForward = 0.0F;
+		this.jump = this.movementKeyStates[4];
+		this.sneak = this.movementKeyStates[5];
+		if(InputHandler.gamepads != null) {
+			for(int i2 = 0; i2 != InputHandler.gamepads.length; ++i2) {
+				if(InputHandler.gamepads[i2] != null && (InputHandler.gamepads[i2].getXAxisValue() != -1.0F || InputHandler.gamepads[i2].getYAxisValue() != -1.0F)) {
+					this.moveStrafe = -InputHandler.gamepads[i2].getXAxisValue();
+					if((double)this.moveStrafe > -0.15D && (double)this.moveStrafe < 0.15D) {
+						this.moveStrafe = 0.0F;
+					}
+
+					this.moveForward = -InputHandler.gamepads[i2].getYAxisValue();
+					if((double)this.moveForward > -0.15D && (double)this.moveForward < 0.15D) {
+						this.moveForward = 0.0F;
+					}
+
+					if(this.moveStrafe != 0.0F || this.moveForward != 0.0F) {
+						return;
+					}
+				}
+			}
+		}
+
 		if(this.movementKeyStates[0]) {
 			++this.moveForward;
 		}
@@ -64,13 +86,6 @@
 
 		if(this.movementKeyStates[3]) {
 			--this.moveStrafe;
-		}
-
-		this.jump = this.movementKeyStates[4];
-		this.sneak = this.movementKeyStates[5];
-		if(this.sneak) {
-			this.moveStrafe = (float)((double)this.moveStrafe * 0.3D);
-			this.moveForward = (float)((double)this.moveForward * 0.3D);
 		}
 
 	}
--- net/minecraft/src/CraftingInventoryPlayerCB.java
+++ net/minecraft/src/CraftingInventoryPlayerCB.java
@@ -4,38 +4,38 @@
 	public InventoryCrafting craftMatrix;
 	public IInventory craftResult = new InventoryCraftResult();
 
-	public CraftingInventoryPlayerCB(ItemStack[] var1) {
-		this.craftMatrix = new InventoryCrafting(this, var1);
-		this.onCraftMatrixChanged(this.craftMatrix);
+	public CraftingInventoryPlayerCB(ItemStack[] arr) {
+		this.craftMatrix = new InventoryCrafting(this, arr);
+		this.a(this.craftMatrix);
 	}
 
-	public void onCraftMatrixChanged(IInventory var1) {
-		int[] var2 = new int[9];
+	public void a(IInventory cz) {
+		int[] i2 = new int[9];
 
-		for(int var3 = 0; var3 < 3; ++var3) {
-			for(int var4 = 0; var4 < 3; ++var4) {
-				int var5 = -1;
-				if(var3 < 2 && var4 < 2) {
-					ItemStack var6 = this.craftMatrix.getStackInSlot(var3 + var4 * 2);
-					if(var6 != null) {
-						var5 = var6.itemID;
+		for(int i3 = 0; i3 < 3; ++i3) {
+			for(int i4 = 0; i4 < 3; ++i4) {
+				int i5 = -1;
+				if(i3 < 2 && i4 < 2) {
+					ItemStack itemStack6 = this.craftMatrix.getStackInSlot(i3 + i4 * 2);
+					if(itemStack6 != null) {
+						i5 = itemStack6.itemID;
 					}
 				}
 
-				var2[var3 + var4 * 3] = var5;
+				i2[i3 + i4 * 3] = i5;
 			}
 		}
 
-		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(var2));
+		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(i2));
 	}
 
-	public void onCraftGuiClosed(EntityPlayer var1) {
-		super.onCraftGuiClosed(var1);
+	public void onCraftGuiClosed(EntityPlayer entityPlayer) {
+		super.onCraftGuiClosed(entityPlayer);
 
-		for(int var2 = 0; var2 < 9; ++var2) {
-			ItemStack var3 = this.craftMatrix.getStackInSlot(var2);
-			if(var3 != null) {
-				var1.dropPlayerItem(var3);
+		for(int i2 = 0; i2 < 9; ++i2) {
+			ItemStack itemStack3 = this.craftMatrix.getStackInSlot(i2);
+			if(itemStack3 != null) {
+				entityPlayer.dropPlayerItem(itemStack3);
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/CommandWorldeditAccept.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandWorldeditAccept extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8606_565a2i27PjK9sNy5B40D58Xx2Tw770sS31E7Q099RWl34Fh4Klce16S2OtxX;
+    
+    CommandWorldeditAccept(final CommandManager abb) {
+        this.field_8606_565a2i27PjK9sNy5B40D58Xx2Tw770sS31E7Q099RWl34Fh4Klce16S2OtxX = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.ingameGUI.weditOverlay.Next();
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/CommandMcViewbarrier.java
@@ -1,0 +1,22 @@
+package net.minecraft.src;
+
+class CommandMcViewbarrier extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8603_3a9KlMB1v1xjL3yWi1BebH99oQOUd5LNy8Kv16ti717EQaTe5DfBS5J30759;
+    
+    CommandMcViewbarrier(final CommandManager abb) {
+        this.field_8603_3a9KlMB1v1xjL3yWi1BebH99oQOUd5LNy8Kv16ti717EQaTe5DfBS5J30759 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        try {
+            ((BlockHidable)ExtBlocks.BarrierBlock).render = ((int)arr[0] == 1);
+        }
+        catch (final Exception ex) {}
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return ((BlockHidable)ExtBlocks.BarrierBlock).render ? "1" : "0";
+    }
+}
--- /dev/null
+++ net/minecraft/src/ItemRainConch.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class ItemRainConch extends Item {
+	public ItemRainConch(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		if(entityPlayer.inventory.consumeInventoryItem(ExtItems.essence.shiftedIndex)) {
+			worldObj.playSoundAtEntity(entityPlayer, "ext.notif", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+			InputHandler.mc.isRaining = !InputHandler.mc.isRaining;
+		}
+
+		return itemStack;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockLichen.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class BlockLichen extends BlockFlower {
+	public BlockLichen(int id, int blockIndex) {
+		super(id, blockIndex);
+	}
+
+	public boolean canBlockStay(World world, int x, int y, int z) {
+		return this.canThisPlantGrowOnThisBlockID(world.getBlockId(x, y - 1, z));
+	}
+
+	protected boolean canThisPlantGrowOnThisBlockID(int id) {
+		return id == ExtBlocks.LowStone.blockID || id == ExtBlocks.LowRiverbed.blockID;
+	}
+}
--- /dev/null
+++ net/minecraft/src/HubFragment.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+import java.util.List;
+
+public interface HubFragment {
+	List generateAt(World world1, XYZv xYZv2);
+
+	boolean canGenerateAt(World world1, XYZv xYZv2);
+}
--- /dev/null
+++ net/minecraft/src/BlockObsidianOld.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockObsidianOld extends BlockStoneOld {
+	public BlockObsidianOld(int integer1, int integer2) {
+		super(integer1, integer2);
+	}
+
+	public int quantityDropped(Random random) {
+		return 1;
+	}
+
+	public int idDropped(int integer, Random random) {
+		return BlockOld.obsidian.blockID;
+	}
+}
--- net/minecraft/src/InventoryCraftResult.java
+++ net/minecraft/src/InventoryCraftResult.java
@@ -7,26 +7,26 @@
 		return 1;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.stackResult[var1];
+	public ItemStack getStackInSlot(int slot) {
+		return this.stackResult[slot];
 	}
 
 	public String getInvName() {
 		return "Result";
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
-		if(this.stackResult[var1] != null) {
-			ItemStack var3 = this.stackResult[var1];
-			this.stackResult[var1] = null;
-			return var3;
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.stackResult[slot] != null) {
+			ItemStack itemStack3 = this.stackResult[slot];
+			this.stackResult[slot] = null;
+			return itemStack3;
 		} else {
 			return null;
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.stackResult[var1] = var2;
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.stackResult[slot] = itemStack;
 	}
 
 	public int getInventoryStackLimit() {
--- /dev/null
+++ net/minecraft/src/PartPose.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class PartPose {
+	public float x;
+	public float y;
+	public float z;
+
+	public PartPose(float float1, float float2, float float3) {
+		this.x = float1;
+		this.y = float2;
+		this.z = float3;
+	}
+
+	public static PartPose offset(float float1, float float2, float float3) {
+		return new PartPose(float1, float2, float3);
+	}
+}
--- net/minecraft/src/Render.java
+++ net/minecraft/src/Render.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.GL11;
 
 public abstract class Render {
@@ -9,94 +11,96 @@
 	protected float shadowSize = 0.0F;
 	protected float shadowOpaque = 1.0F;
 
-	public abstract void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9);
-
-	protected void loadTexture(String var1) {
-		RenderEngine var2 = this.renderManager.renderEngine;
-		var2.bindTexture(var2.getTexture(var1));
-	}
-
-	protected void loadDownloadableImageTexture(String var1, String var2) {
-		RenderEngine var3 = this.renderManager.renderEngine;
-		var3.bindTexture(var3.getTextureForDownloadableImage(var1, var2));
-	}
-
-	private void renderEntityOnFire(Entity var1, double var2, double var4, double var6, float var8) {
+	public abstract void doRender(Entity entity1, double d2, double d4, double d6, float f8, float f9);
+
+	protected void loadTexture(String string) {
+		RenderEngine renderEngine2 = this.renderManager.renderEngine;
+		renderEngine2.bindTexture(renderEngine2.getTexture(string));
+	}
+
+	protected ImageHolder loadDownloadableImageTexture(String string1, String string2) {
+		RenderEngine renderEngine3 = this.renderManager.renderEngine;
+		ImageHolder imageHolder4 = renderEngine3.getTextureForDownloadableImage(string1, string2);
+		renderEngine3.bindTexture(imageHolder4.textureName);
+		return imageHolder4;
+	}
+
+	private void renderEntityOnFire(Entity xy, double double2, double double3, double double4, float float5) {
 		GL11.glDisable(GL11.GL_LIGHTING);
-		int var9 = Block.fire.blockIndexInTexture;
-		int var10 = (var9 & 15) << 4;
-		int var11 = var9 & 240;
-		float var12 = (float)var10 / 256.0F;
-		float var13 = ((float)var10 + 15.99F) / 256.0F;
-		float var14 = (float)var11 / 256.0F;
-		float var15 = ((float)var11 + 15.99F) / 256.0F;
+		int i9 = Block.fire.blockIndexInTexture;
+		int i10 = (i9 & 15) << 4;
+		int i11 = i9 & 4080;
+		float f12 = (float)i10 / 256.0F;
+		float f13 = ((float)i10 + 15.99F) / 256.0F;
+		float f14 = (float)i11 / 512.0F;
+		float f15 = ((float)i11 + 15.99F) / 512.0F;
 		GL11.glPushMatrix();
-		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
-		float var16 = var1.width * 1.4F;
-		GL11.glScalef(var16, var16, var16);
-		this.loadTexture("/terrain.png");
-		Tessellator var17 = Tessellator.instance;
-		float var18 = 1.0F;
-		float var19 = 0.5F;
-		float var20 = 0.0F;
-		float var21 = var1.height / var1.width;
+		GL11.glTranslatef((float)double2, (float)double3, (float)double4);
+		float f16 = xy.width * 1.4F;
+		GL11.glScalef(f16, f16, f16);
+		this.loadTexture(Minecraft.field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L);
+		Tessellator tessellator17 = Tessellator.instance;
+		float f18 = 1.0F;
+		float f19 = 0.5F;
+		float f20 = 0.0F;
+		float f21 = xy.height / xy.width;
 		GL11.glRotatef(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-		GL11.glTranslatef(0.0F, 0.0F, 0.4F + (float)((int)var21) * 0.02F);
+		GL11.glTranslatef(0.0F, 0.0F, 0.4F + (float)((int)f21) * 0.02F);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		var17.startDrawingQuads();
+		tessellator17.startDrawingQuads();
 
-		while(var21 > 0.0F) {
-			var17.addVertexWithUV((double)(var18 - var19), (double)(0.0F - var20), 0.0D, (double)var13, (double)var15);
-			var17.addVertexWithUV((double)(0.0F - var19), (double)(0.0F - var20), 0.0D, (double)var12, (double)var15);
-			var17.addVertexWithUV((double)(0.0F - var19), (double)(1.4F - var20), 0.0D, (double)var12, (double)var14);
-			var17.addVertexWithUV((double)(var18 - var19), (double)(1.4F - var20), 0.0D, (double)var13, (double)var14);
-			--var21;
-			--var20;
-			var18 *= 0.9F;
+		while(f21 > 0.0F) {
+			tessellator17.addVertexWithUV((double)(f18 - f19), (double)(0.0F - f20), 0.0D, (double)f13, (double)f15);
+			tessellator17.addVertexWithUV((double)(0.0F - f19), (double)(0.0F - f20), 0.0D, (double)f12, (double)f15);
+			tessellator17.addVertexWithUV((double)(0.0F - f19), (double)(1.4F - f20), 0.0D, (double)f12, (double)f14);
+			tessellator17.addVertexWithUV((double)(f18 - f19), (double)(1.4F - f20), 0.0D, (double)f13, (double)f14);
+			--f21;
+			--f20;
+			f18 *= 0.9F;
 			GL11.glTranslatef(0.0F, 0.0F, -0.04F);
 		}
 
-		var17.draw();
+		tessellator17.draw();
 		GL11.glPopMatrix();
 		GL11.glEnable(GL11.GL_LIGHTING);
 	}
 
-	private void renderShadow(Entity var1, double var2, double var4, double var6, float var8, float var9) {
+	private void renderShadow(Entity xy, double double2, double double3, double double4, float float5, float float6) {
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-		RenderEngine var10 = this.renderManager.renderEngine;
-		var10.bindTexture(var10.getTexture("%%/shadow.png"));
-		World var11 = this.getWorldFromRenderManager();
+		RenderEngine renderEngine10 = this.renderManager.renderEngine;
+		renderEngine10.bindTexture(renderEngine10.getTexture("%%/shadow.png"));
+		World world11 = this.getWorldFromRenderManager();
 		GL11.glDepthMask(false);
-		float var12 = this.shadowSize;
-		double var13 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var9;
-		double var15 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var9 + (double)var1.getShadowSize();
-		double var17 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var9;
-		int var19 = MathHelper.floor_double(var13 - (double)var12);
-		int var20 = MathHelper.floor_double(var13 + (double)var12);
-		int var21 = MathHelper.floor_double(var15 - (double)var12);
-		int var22 = MathHelper.floor_double(var15);
-		int var23 = MathHelper.floor_double(var17 - (double)var12);
-		int var24 = MathHelper.floor_double(var17 + (double)var12);
-		double var25 = var2 - var13;
-		double var27 = var4 - var15;
-		double var29 = var6 - var17;
-		Tessellator var31 = Tessellator.instance;
-		var31.startDrawingQuads();
+		float f12 = this.shadowSize;
+		double d13 = xy.lastTickPosX + (xy.posX - xy.lastTickPosX) * (double)float6;
+		double d15 = xy.lastTickPosY + (xy.posY - xy.lastTickPosY) * (double)float6 + (double)xy.getShadowSize();
+		double d17 = xy.lastTickPosZ + (xy.posZ - xy.lastTickPosZ) * (double)float6;
+		int i19 = MathHelper.floor_double(d13 - (double)f12);
+		int i20 = MathHelper.floor_double(d13 + (double)f12);
+		int i21 = MathHelper.floor_double(d15 - (double)f12);
+		int i22 = MathHelper.floor_double(d15);
+		int i23 = MathHelper.floor_double(d17 - (double)f12);
+		int i24 = MathHelper.floor_double(d17 + (double)f12);
+		double d25 = double2 - d13;
+		double d27 = double3 - d15;
+		double d29 = double4 - d17;
+		Tessellator tessellator31 = Tessellator.instance;
+		tessellator31.startDrawingQuads();
 
-		for(int var32 = var19; var32 <= var20; ++var32) {
-			for(int var33 = var21; var33 <= var22; ++var33) {
-				for(int var34 = var23; var34 <= var24; ++var34) {
-					int var35 = var11.getBlockId(var32, var33 - 1, var34);
-					if(var35 > 0 && var11.getBlockLightValue(var32, var33, var34) > 3) {
-						this.renderShadowOnBlock(Block.blocksList[var35], var2, var4 + (double)var1.getShadowSize(), var6, var32, var33, var34, var8, var12, var25, var27 + (double)var1.getShadowSize(), var29);
+		for(int i32 = i19; i32 <= i20; ++i32) {
+			for(int i33 = i21; i33 <= i22; ++i33) {
+				for(int i34 = i23; i34 <= i24; ++i34) {
+					int i35 = world11.getBlockId(i32, i33 - 1, i34);
+					if(i35 > 0 && world11.getBlockLightValue(i32, i33, i34) > 3) {
+						this.renderShadowOnBlock(Block.blocksList[i35], double2, double3 + (double)xy.getShadowSize(), double4, i32, i33, i34, float5, f12, d25, d27 + (double)xy.getShadowSize(), d29);
 					}
 				}
 			}
 		}
 
-		var31.draw();
-		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		tessellator31.draw();
+		GL11.glColor4f(0.4F, 0.8F, 1.0F, 1.0F);
 		GL11.glDisable(GL11.GL_BLEND);
 		GL11.glDepthMask(true);
 	}
@@ -105,119 +109,120 @@
 		return this.renderManager.worldObj;
 	}
 
-	private void renderShadowOnBlock(Block var1, double var2, double var4, double var6, int var8, int var9, int var10, float var11, float var12, double var13, double var15, double var17) {
-		Tessellator var19 = Tessellator.instance;
-		if(var1.renderAsNormalBlock()) {
-			double var20 = ((double)var11 - (var4 - ((double)var9 + var15)) / 2.0D) * 0.5D * (double)this.getWorldFromRenderManager().getBrightness(var8, var9, var10);
-			if(var20 >= 0.0D) {
-				if(var20 > 1.0D) {
-					var20 = 1.0D;
+	private void renderShadowOnBlock(Block pb, double double2, double double3, double double4, int integer5, int integer6, int integer7, float float8, float float9, double double10, double double11, double double12) {
+		Tessellator tessellator19 = Tessellator.instance;
+		if(pb.renderAsNormalBlock()) {
+			double d20 = ((double)float8 - (double3 - ((double)integer6 + double11)) / 2.0D) * 0.5D * (double)this.getWorldFromRenderManager().getBrightness(integer5, integer6, integer7);
+			if(d20 >= 0.0D) {
+				if(d20 > 1.0D) {
+					d20 = 1.0D;
 				}
 
-				var19.setColorRGBA_F(1.0F, 1.0F, 1.0F, (float)var20);
-				double var22 = (double)var8 + var1.minX + var13;
-				double var24 = (double)var8 + var1.maxX + var13;
-				double var26 = (double)var9 + var1.minY + var15 + 1.0D / 64.0D;
-				double var28 = (double)var10 + var1.minZ + var17;
-				double var30 = (double)var10 + var1.maxZ + var17;
-				float var32 = (float)((var2 - var22) / 2.0D / (double)var12 + 0.5D);
-				float var33 = (float)((var2 - var24) / 2.0D / (double)var12 + 0.5D);
-				float var34 = (float)((var6 - var28) / 2.0D / (double)var12 + 0.5D);
-				float var35 = (float)((var6 - var30) / 2.0D / (double)var12 + 0.5D);
-				var19.addVertexWithUV(var22, var26, var28, (double)var32, (double)var34);
-				var19.addVertexWithUV(var22, var26, var30, (double)var32, (double)var35);
-				var19.addVertexWithUV(var24, var26, var30, (double)var33, (double)var35);
-				var19.addVertexWithUV(var24, var26, var28, (double)var33, (double)var34);
+				tessellator19.setColorRGBA_F(0.4F, 0.8F, 1.0F, (float)d20);
+				double d22 = (double)integer5 + pb.minX + double10;
+				double d24 = (double)integer5 + pb.maxX + double10;
+				double d26 = (double)integer6 + pb.minY + double11 + 0.015625D;
+				double d28 = (double)integer7 + pb.minZ + double12;
+				double d30 = (double)integer7 + pb.maxZ + double12;
+				float f32 = (float)((double2 - d22) / 2.0D / (double)float9 + 0.5D);
+				float f33 = (float)((double2 - d24) / 2.0D / (double)float9 + 0.5D);
+				float f34 = (float)((double4 - d28) / 2.0D / (double)float9 + 0.5D);
+				float f35 = (float)((double4 - d30) / 2.0D / (double)float9 + 0.5D);
+				tessellator19.addVertexWithUV(d22, d26, d28, (double)f32, (double)f34);
+				tessellator19.addVertexWithUV(d22, d26, d30, (double)f32, (double)f35);
+				tessellator19.addVertexWithUV(d24, d26, d30, (double)f33, (double)f35);
+				tessellator19.addVertexWithUV(d24, d26, d28, (double)f33, (double)f34);
 			}
 		}
+
 	}
 
-	public static void renderOffsetAABB(AxisAlignedBB var0, double var1, double var3, double var5) {
+	public static void renderOffsetAABB(AxisAlignedBB zb, double double2, double double3, double double4) {
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
-		Tessellator var7 = Tessellator.instance;
+		Tessellator tessellator7 = Tessellator.instance;
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		var7.startDrawingQuads();
-		var7.setTranslationD(var1, var3, var5);
-		var7.setNormal(0.0F, 0.0F, -1.0F);
-		var7.addVertex(var0.minX, var0.maxY, var0.minZ);
-		var7.addVertex(var0.maxX, var0.maxY, var0.minZ);
-		var7.addVertex(var0.maxX, var0.minY, var0.minZ);
-		var7.addVertex(var0.minX, var0.minY, var0.minZ);
-		var7.setNormal(0.0F, 0.0F, 1.0F);
-		var7.addVertex(var0.minX, var0.minY, var0.maxZ);
-		var7.addVertex(var0.maxX, var0.minY, var0.maxZ);
-		var7.addVertex(var0.maxX, var0.maxY, var0.maxZ);
-		var7.addVertex(var0.minX, var0.maxY, var0.maxZ);
-		var7.setNormal(0.0F, -1.0F, 0.0F);
-		var7.addVertex(var0.minX, var0.minY, var0.minZ);
-		var7.addVertex(var0.maxX, var0.minY, var0.minZ);
-		var7.addVertex(var0.maxX, var0.minY, var0.maxZ);
-		var7.addVertex(var0.minX, var0.minY, var0.maxZ);
-		var7.setNormal(0.0F, 1.0F, 0.0F);
-		var7.addVertex(var0.minX, var0.maxY, var0.maxZ);
-		var7.addVertex(var0.maxX, var0.maxY, var0.maxZ);
-		var7.addVertex(var0.maxX, var0.maxY, var0.minZ);
-		var7.addVertex(var0.minX, var0.maxY, var0.minZ);
-		var7.setNormal(-1.0F, 0.0F, 0.0F);
-		var7.addVertex(var0.minX, var0.minY, var0.maxZ);
-		var7.addVertex(var0.minX, var0.maxY, var0.maxZ);
-		var7.addVertex(var0.minX, var0.maxY, var0.minZ);
-		var7.addVertex(var0.minX, var0.minY, var0.minZ);
-		var7.setNormal(1.0F, 0.0F, 0.0F);
-		var7.addVertex(var0.maxX, var0.minY, var0.minZ);
-		var7.addVertex(var0.maxX, var0.maxY, var0.minZ);
-		var7.addVertex(var0.maxX, var0.maxY, var0.maxZ);
-		var7.addVertex(var0.maxX, var0.minY, var0.maxZ);
-		var7.setTranslationD(0.0D, 0.0D, 0.0D);
-		var7.draw();
+		tessellator7.startDrawingQuads();
+		tessellator7.setTranslationD(double2, double3, double4);
+		tessellator7.setNormal(0.0F, 0.0F, -1.0F);
+		tessellator7.addVertex(zb.minX, zb.maxY, zb.minZ);
+		tessellator7.addVertex(zb.maxX, zb.maxY, zb.minZ);
+		tessellator7.addVertex(zb.maxX, zb.minY, zb.minZ);
+		tessellator7.addVertex(zb.minX, zb.minY, zb.minZ);
+		tessellator7.setNormal(0.0F, 0.0F, 1.0F);
+		tessellator7.addVertex(zb.minX, zb.minY, zb.maxZ);
+		tessellator7.addVertex(zb.maxX, zb.minY, zb.maxZ);
+		tessellator7.addVertex(zb.maxX, zb.maxY, zb.maxZ);
+		tessellator7.addVertex(zb.minX, zb.maxY, zb.maxZ);
+		tessellator7.setNormal(0.0F, -1.0F, 0.0F);
+		tessellator7.addVertex(zb.minX, zb.minY, zb.minZ);
+		tessellator7.addVertex(zb.maxX, zb.minY, zb.minZ);
+		tessellator7.addVertex(zb.maxX, zb.minY, zb.maxZ);
+		tessellator7.addVertex(zb.minX, zb.minY, zb.maxZ);
+		tessellator7.setNormal(0.0F, 1.0F, 0.0F);
+		tessellator7.addVertex(zb.minX, zb.maxY, zb.maxZ);
+		tessellator7.addVertex(zb.maxX, zb.maxY, zb.maxZ);
+		tessellator7.addVertex(zb.maxX, zb.maxY, zb.minZ);
+		tessellator7.addVertex(zb.minX, zb.maxY, zb.minZ);
+		tessellator7.setNormal(-1.0F, 0.0F, 0.0F);
+		tessellator7.addVertex(zb.minX, zb.minY, zb.maxZ);
+		tessellator7.addVertex(zb.minX, zb.maxY, zb.maxZ);
+		tessellator7.addVertex(zb.minX, zb.maxY, zb.minZ);
+		tessellator7.addVertex(zb.minX, zb.minY, zb.minZ);
+		tessellator7.setNormal(1.0F, 0.0F, 0.0F);
+		tessellator7.addVertex(zb.maxX, zb.minY, zb.minZ);
+		tessellator7.addVertex(zb.maxX, zb.maxY, zb.minZ);
+		tessellator7.addVertex(zb.maxX, zb.maxY, zb.maxZ);
+		tessellator7.addVertex(zb.maxX, zb.minY, zb.maxZ);
+		tessellator7.setTranslationD(0.0D, 0.0D, 0.0D);
+		tessellator7.draw();
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 	}
 
-	public static void renderAABB(AxisAlignedBB var0) {
-		Tessellator var1 = Tessellator.instance;
-		var1.startDrawingQuads();
-		var1.addVertex(var0.minX, var0.maxY, var0.minZ);
-		var1.addVertex(var0.maxX, var0.maxY, var0.minZ);
-		var1.addVertex(var0.maxX, var0.minY, var0.minZ);
-		var1.addVertex(var0.minX, var0.minY, var0.minZ);
-		var1.addVertex(var0.minX, var0.minY, var0.maxZ);
-		var1.addVertex(var0.maxX, var0.minY, var0.maxZ);
-		var1.addVertex(var0.maxX, var0.maxY, var0.maxZ);
-		var1.addVertex(var0.minX, var0.maxY, var0.maxZ);
-		var1.addVertex(var0.minX, var0.minY, var0.minZ);
-		var1.addVertex(var0.maxX, var0.minY, var0.minZ);
-		var1.addVertex(var0.maxX, var0.minY, var0.maxZ);
-		var1.addVertex(var0.minX, var0.minY, var0.maxZ);
-		var1.addVertex(var0.minX, var0.maxY, var0.maxZ);
-		var1.addVertex(var0.maxX, var0.maxY, var0.maxZ);
-		var1.addVertex(var0.maxX, var0.maxY, var0.minZ);
-		var1.addVertex(var0.minX, var0.maxY, var0.minZ);
-		var1.addVertex(var0.minX, var0.minY, var0.maxZ);
-		var1.addVertex(var0.minX, var0.maxY, var0.maxZ);
-		var1.addVertex(var0.minX, var0.maxY, var0.minZ);
-		var1.addVertex(var0.minX, var0.minY, var0.minZ);
-		var1.addVertex(var0.maxX, var0.minY, var0.minZ);
-		var1.addVertex(var0.maxX, var0.maxY, var0.minZ);
-		var1.addVertex(var0.maxX, var0.maxY, var0.maxZ);
-		var1.addVertex(var0.maxX, var0.minY, var0.maxZ);
-		var1.draw();
-	}
-
-	public void setRenderManager(RenderManager var1) {
-		this.renderManager = var1;
-	}
-
-	public void doRenderShadowAndFire(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		if(this.renderManager.options.fancyGraphics && this.shadowSize > 0.0F) {
-			double var10 = this.renderManager.getDistanceToCamera(var1.posX, var1.posY, var1.posZ);
-			float var12 = (float)((1.0D - var10 / 256.0D) * (double)this.shadowOpaque);
-			if(var12 > 0.0F) {
-				this.renderShadow(var1, var2, var4, var6, var12, var9);
+	public static void renderAABB(AxisAlignedBB zb) {
+		Tessellator tessellator1 = Tessellator.instance;
+		tessellator1.startDrawingQuads();
+		tessellator1.addVertex(zb.minX, zb.maxY, zb.minZ);
+		tessellator1.addVertex(zb.maxX, zb.maxY, zb.minZ);
+		tessellator1.addVertex(zb.maxX, zb.minY, zb.minZ);
+		tessellator1.addVertex(zb.minX, zb.minY, zb.minZ);
+		tessellator1.addVertex(zb.minX, zb.minY, zb.maxZ);
+		tessellator1.addVertex(zb.maxX, zb.minY, zb.maxZ);
+		tessellator1.addVertex(zb.maxX, zb.maxY, zb.maxZ);
+		tessellator1.addVertex(zb.minX, zb.maxY, zb.maxZ);
+		tessellator1.addVertex(zb.minX, zb.minY, zb.minZ);
+		tessellator1.addVertex(zb.maxX, zb.minY, zb.minZ);
+		tessellator1.addVertex(zb.maxX, zb.minY, zb.maxZ);
+		tessellator1.addVertex(zb.minX, zb.minY, zb.maxZ);
+		tessellator1.addVertex(zb.minX, zb.maxY, zb.maxZ);
+		tessellator1.addVertex(zb.maxX, zb.maxY, zb.maxZ);
+		tessellator1.addVertex(zb.maxX, zb.maxY, zb.minZ);
+		tessellator1.addVertex(zb.minX, zb.maxY, zb.minZ);
+		tessellator1.addVertex(zb.minX, zb.minY, zb.maxZ);
+		tessellator1.addVertex(zb.minX, zb.maxY, zb.maxZ);
+		tessellator1.addVertex(zb.minX, zb.maxY, zb.minZ);
+		tessellator1.addVertex(zb.minX, zb.minY, zb.minZ);
+		tessellator1.addVertex(zb.maxX, zb.minY, zb.minZ);
+		tessellator1.addVertex(zb.maxX, zb.maxY, zb.minZ);
+		tessellator1.addVertex(zb.maxX, zb.maxY, zb.maxZ);
+		tessellator1.addVertex(zb.maxX, zb.minY, zb.maxZ);
+		tessellator1.draw();
+	}
+
+	public void setRenderManager(RenderManager pl) {
+		this.renderManager = pl;
+	}
+
+	public void doRenderShadowAndFire(Entity xy, double double2, double double3, double double4, float float5, float float6) {
+		if(this.renderManager.options.fancyGraphics == 1 && this.shadowSize > 0.0F) {
+			double d10 = this.renderManager.getDistanceToCamera(xy.posX, xy.posY, xy.posZ);
+			float f12 = (float)((1.0D - d10 / 256.0D) * (double)this.shadowOpaque);
+			if(f12 > 0.0F) {
+				this.renderShadow(xy, double2, double3, double4, f12, float6);
 			}
 		}
 
-		if(var1.fire > 0) {
-			this.renderEntityOnFire(var1, var2, var4, var6, var9);
+		if(xy.fire > 0) {
+			this.renderEntityOnFire(xy, double2, double3, double4, float6);
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/BlockGlowingFlowerInfused.java
@@ -1,0 +1,18 @@
+package net.minecraft.src;
+
+public class BlockGlowingFlowerInfused extends BlockGlowing {
+	public int power = 0;
+
+	public BlockGlowingFlowerInfused(int integer1, int integer2, int integer3, int integer4) {
+		super(integer1, integer2, integer3);
+		this.power = integer4;
+	}
+
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
+		if(entity instanceof EntityMob) {
+			((EntityMob)entity).attackEntityFrom((Entity)null, 2 * this.power);
+			((EntityMob)entity).fire = 300;
+		}
+
+	}
+}
--- net/minecraft/src/Packet20NamedEntitySpawn.java
+++ net/minecraft/src/Packet20NamedEntitySpawn.java
@@ -17,42 +17,42 @@
 	public Packet20NamedEntitySpawn() {
 	}
 
-	public Packet20NamedEntitySpawn(EntityPlayer var1) {
-		this.entityId = var1.entityID;
-		this.name = var1.username;
-		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-		this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.rotation = (byte)((int)(var1.rotationYaw * 256.0F / 360.0F));
-		this.pitch = (byte)((int)(var1.rotationPitch * 256.0F / 360.0F));
-		ItemStack var2 = var1.inventory.getCurrentItem();
-		this.currentItem = var2 == null ? 0 : var2.itemID;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.name = var1.readUTF();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.rotation = var1.readByte();
-		this.pitch = var1.readByte();
-		this.currentItem = var1.readShort();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeUTF(this.name);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.writeByte(this.rotation);
-		var1.writeByte(this.pitch);
-		var1.writeShort(this.currentItem);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleNamedEntitySpawn(this);
+	public Packet20NamedEntitySpawn(EntityPlayer entityPlayer) {
+		this.entityId = entityPlayer.entityID;
+		this.name = entityPlayer.username;
+		this.xPosition = MathHelper.floor_double(entityPlayer.posX * 32.0D);
+		this.yPosition = MathHelper.floor_double(entityPlayer.posY * 32.0D);
+		this.zPosition = MathHelper.floor_double(entityPlayer.posZ * 32.0D);
+		this.rotation = (byte)((int)(entityPlayer.rotationYaw * 256.0F / 360.0F));
+		this.pitch = (byte)((int)(entityPlayer.rotationPitch * 256.0F / 360.0F));
+		ItemStack itemStack2 = entityPlayer.inventory.getCurrentItem();
+		this.currentItem = itemStack2 == null ? 0 : itemStack2.itemID;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.name = dataInputStream.readUTF();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.rotation = dataInputStream.readByte();
+		this.pitch = dataInputStream.readByte();
+		this.currentItem = dataInputStream.readShort() & 65535;
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeUTF(this.name);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.writeByte(this.rotation);
+		dataOutputStream.writeByte(this.pitch);
+		dataOutputStream.writeShort(this.currentItem);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleNamedEntitySpawn(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/CommandMcGencitysize.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandMcGencitysize extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8576_3B2482QhY59iOi3WjAs81v83i51m28rKNOHpIasIW74hGntlBpD8qf3uzJ3O;
+    
+    CommandMcGencitysize(final CommandManager abb) {
+        this.field_8576_3B2482QhY59iOi3WjAs81v83i51m28rKNOHpIasIW74hGntlBpD8qf3uzJ3O = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        WorldGenHouseSmall.field_9665_9HHBzQ2wG84LFbc45tMzL7mAlvvdO1k855mGGSfk3FfJP80LupQs710X4K6J = Math.max((int)arr[0], 0);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "" + WorldGenHouseSmall.field_9665_9HHBzQ2wG84LFbc45tMzL7mAlvvdO1k855mGGSfk3FfJP80LupQs710X4K6J;
+    }
+}
--- /dev/null
+++ net/minecraft/src/BlockClayOld.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockClayOld extends BlockOld {
+	public BlockClayOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.clay);
+	}
+
+	public int idDropped(int integer, Random random) {
+		return Item.clay.shiftedIndex;
+	}
+
+	public int quantityDropped(Random random) {
+		return 4;
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiVisuals.java
@@ -1,0 +1,189 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.util.List;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.Sys;
+import org.lwjgl.input.Mouse;
+import org.lwjgl.opengl.GL11;
+
+public class GuiVisuals extends GuiScreen {
+	protected GuiScreen field_8047_91els8Z8klB1I6xn69iR1U2nRQcCTPWEwKs2Pm27f7044G91fpfhLX3412PS;
+	private int field_8052_05FNVLV6sMqT04VynsHRAEvUq29da0cF008aVXh42Du9zMt2SLAVE2T44MbF = 0;
+	private int field_8054_0vtKL1i91d46R5FpSKXKXQVCe1R52gH4c602PZtq4xjuk905fUVbu5NIL4B9 = 32;
+	private int field_8053_6360hH78oXUPtpNsxJ9KJ3olMMb59xpqne9zLH698sf1b0QSwkMHTBoGGDGw = this.height - 55 + 4;
+	private int field_8049_7Q8IDzEh1OFLQmmvfME63fCqL75Czx6428EvrAg9CDxDWV90348nEWs0TFt5 = 0;
+	private int field_8045_5xJ1smKZvx3Ow5aa91mXltwcPIDJDePo8APL7EtUYmH59XdH9wiXOSF9Qo0d = this.width;
+	private int field_8050_0I25v8Jku2n7J0x1hZ8KAtJGMd3O6x9n0Epbpw91MqHie16xt2ZaA6X81ZNd = -2;
+	private int field_8048_9SDvP1kn9Sd96o7De75R09os8ihE21oM9ia16Dm8laAG1ieXpRZvtcM7V7V1 = -1;
+	private String field_8046_6j29I2Ftx34gqjw4e990yBfqcVM7CKK1U50NLdk9w65WtbVSitw7Ys1aUAN6 = "";
+	public GuiImageHandler field_8051_57035AM89c7AjJAvlc6yp0I0vm61Sr0mqq1yu3Kg3bdv7ZnBwlAF6T7BaYL9;
+
+	public GuiVisuals(GuiScreen hr) {
+		this.field_8047_91els8Z8klB1I6xn69iR1U2nRQcCTPWEwKs2Pm27f7044G91fpfhLX3412PS = hr;
+		this.field_8051_57035AM89c7AjJAvlc6yp0I0vm61Sr0mqq1yu3Kg3bdv7ZnBwlAF6T7BaYL9 = new GuiImageHandler(hr.mc, "/pack-cover.png", 700.0F);
+	}
+
+	public void initGui() {
+		this.controlList.clear();
+		this.controlList.add(new GuiSmallButton(5, this.width / 2 - 154, this.height - 48, "Open Visuals directory"));
+		this.controlList.add(new GuiSmallButton(6, this.width / 2 + 4, this.height - 48, "Done"));
+		this.mc.field_7308_49g3Ue4B4ymyJ5yc4CXdts2UZnR4OP36zG20Omc6J6Ly1C5xR8Habk43qvGE.func_11686_0yeI5h1X9b94d4uci2eCaLdWyK789MtuRcX9xpiRS1xz81zEG9z4urygJcFf();
+		this.field_8046_6j29I2Ftx34gqjw4e990yBfqcVM7CKK1U50NLdk9w65WtbVSitw7Ys1aUAN6 = (new File(this.mc.mcDataDir, "texturepacks")).getAbsolutePath();
+		this.field_8054_0vtKL1i91d46R5FpSKXKXQVCe1R52gH4c602PZtq4xjuk905fUVbu5NIL4B9 = 32;
+		this.field_8053_6360hH78oXUPtpNsxJ9KJ3olMMb59xpqne9zLH698sf1b0QSwkMHTBoGGDGw = this.height - 58 + 4;
+		this.field_8049_7Q8IDzEh1OFLQmmvfME63fCqL75Czx6428EvrAg9CDxDWV90348nEWs0TFt5 = 0;
+		this.field_8045_5xJ1smKZvx3Ow5aa91mXltwcPIDJDePo8APL7EtUYmH59XdH9wiXOSF9Qo0d = this.width;
+	}
+
+	private void func_8044_0742U1cHIZe1V33pzRlh36v217hgm4Nfw1IS496RJ468j4u05N52S7W77fQx() {
+		this.mc.renderEngine.refreshTextures();
+		Minecraft.field_7326_55yB6jYtSi94r555184CYoXDQ1YhyBnoS1lJaCCAbdj3rDu1RNzU8Gp4C3g5 = true;
+		this.mc.field_7308_49g3Ue4B4ymyJ5yc4CXdts2UZnR4OP36zG20Omc6J6Ly1C5xR8Habk43qvGE.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0.field_10164_5N63dbka0na7Is07L9kMmSk6ZK28Ioxdll6JwQgybo1I69cauDA8U5rtDvBv.func_12189_4e16037zP017Ybyhw4klyCwOs24S8Nh9OzRYIDt7732Nr83dqO5Otm7FIbRq(this.mc);
+		this.mc.fontRenderer = new FontRenderer(this.mc.options, "/default.png", this.mc.renderEngine);
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled) {
+			if(button.id == 5) {
+				Sys.openURL("file://" + this.field_8046_6j29I2Ftx34gqjw4e990yBfqcVM7CKK1U50NLdk9w65WtbVSitw7Ys1aUAN6);
+			}
+
+			if(button.id == 6) {
+				this.func_8044_0742U1cHIZe1V33pzRlh36v217hgm4Nfw1IS496RJ468j4u05N52S7W77fQx();
+				this.mc.displayGuiScreen(this.field_8047_91els8Z8klB1I6xn69iR1U2nRQcCTPWEwKs2Pm27f7044G91fpfhLX3412PS);
+			}
+		}
+
+	}
+
+	protected void mouseClicked(int integer1, int integer2, int integer3) {
+		super.mouseClicked(integer1, integer2, integer3);
+	}
+
+	protected void mouseMovedOrUp(int integer1, int integer2, int integer3) {
+		super.mouseMovedOrUp(integer1, integer2, integer3);
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		this.drawDefaultBackground();
+		if(this.field_8048_9SDvP1kn9Sd96o7De75R09os8ihE21oM9ia16Dm8laAG1ieXpRZvtcM7V7V1 <= 0) {
+			this.mc.field_7308_49g3Ue4B4ymyJ5yc4CXdts2UZnR4OP36zG20Omc6J6Ly1C5xR8Habk43qvGE.func_11686_0yeI5h1X9b94d4uci2eCaLdWyK789MtuRcX9xpiRS1xz81zEG9z4urygJcFf();
+			this.field_8048_9SDvP1kn9Sd96o7De75R09os8ihE21oM9ia16Dm8laAG1ieXpRZvtcM7V7V1 += 20;
+		}
+
+		List list4 = this.mc.field_7308_49g3Ue4B4ymyJ5yc4CXdts2UZnR4OP36zG20Omc6J6Ly1C5xR8Habk43qvGE.func_11687_4UH7IiXkuqd31i8hvRh1k6pGb1Yy461zeePLNBB7h6wQN8j32SEy5HWeSri8();
+		int i5;
+		int i7;
+		if(Mouse.isButtonDown(0)) {
+			if(this.field_8050_0I25v8Jku2n7J0x1hZ8KAtJGMd3O6x9n0Epbpw91MqHie16xt2ZaA6X81ZNd == -1) {
+				if(mouseY >= this.field_8054_0vtKL1i91d46R5FpSKXKXQVCe1R52gH4c602PZtq4xjuk905fUVbu5NIL4B9 && mouseY <= this.field_8053_6360hH78oXUPtpNsxJ9KJ3olMMb59xpqne9zLH698sf1b0QSwkMHTBoGGDGw) {
+					i5 = this.width / 16;
+					int i6 = this.width / 16 + 260;
+					i7 = (mouseY - this.field_8054_0vtKL1i91d46R5FpSKXKXQVCe1R52gH4c602PZtq4xjuk905fUVbu5NIL4B9 + this.field_8052_05FNVLV6sMqT04VynsHRAEvUq29da0cF008aVXh42Du9zMt2SLAVE2T44MbF - 2) / 36;
+					if(mouseX >= i5 && mouseX <= i6 && i7 >= 0 && i7 < list4.size() && this.mc.field_7308_49g3Ue4B4ymyJ5yc4CXdts2UZnR4OP36zG20Omc6J6Ly1C5xR8Habk43qvGE.func_11688_663pI2OKy99iPX44ZQP69Mfd981246V7m8L66atRipA89ks12No52IZGw4mJ((VisualsUnknownClass)list4.get(i7))) {
+						this.field_8051_57035AM89c7AjJAvlc6yp0I0vm61Sr0mqq1yu3Kg3bdv7ZnBwlAF6T7BaYL9.func_9955_5630DX5SV053d8F74A11907j9t7039N0rdr37W800V11wnAC9AhArcyC6F5W("/pack-cover.png");
+						this.func_8044_0742U1cHIZe1V33pzRlh36v217hgm4Nfw1IS496RJ468j4u05N52S7W77fQx();
+					}
+
+					this.field_8050_0I25v8Jku2n7J0x1hZ8KAtJGMd3O6x9n0Epbpw91MqHie16xt2ZaA6X81ZNd = mouseY;
+				} else {
+					this.field_8050_0I25v8Jku2n7J0x1hZ8KAtJGMd3O6x9n0Epbpw91MqHie16xt2ZaA6X81ZNd = -2;
+				}
+			} else if(this.field_8050_0I25v8Jku2n7J0x1hZ8KAtJGMd3O6x9n0Epbpw91MqHie16xt2ZaA6X81ZNd >= 0) {
+				this.field_8052_05FNVLV6sMqT04VynsHRAEvUq29da0cF008aVXh42Du9zMt2SLAVE2T44MbF -= mouseY - this.field_8050_0I25v8Jku2n7J0x1hZ8KAtJGMd3O6x9n0Epbpw91MqHie16xt2ZaA6X81ZNd;
+				this.field_8050_0I25v8Jku2n7J0x1hZ8KAtJGMd3O6x9n0Epbpw91MqHie16xt2ZaA6X81ZNd = mouseY;
+			}
+		} else {
+			if(this.field_8050_0I25v8Jku2n7J0x1hZ8KAtJGMd3O6x9n0Epbpw91MqHie16xt2ZaA6X81ZNd >= 0 && this.field_8050_0I25v8Jku2n7J0x1hZ8KAtJGMd3O6x9n0Epbpw91MqHie16xt2ZaA6X81ZNd == mouseY) {
+				;
+			}
+
+			this.field_8050_0I25v8Jku2n7J0x1hZ8KAtJGMd3O6x9n0Epbpw91MqHie16xt2ZaA6X81ZNd = -1;
+		}
+
+		i5 = list4.size() * 36 - (this.field_8053_6360hH78oXUPtpNsxJ9KJ3olMMb59xpqne9zLH698sf1b0QSwkMHTBoGGDGw - this.field_8054_0vtKL1i91d46R5FpSKXKXQVCe1R52gH4c602PZtq4xjuk905fUVbu5NIL4B9 - 4);
+		if(i5 < 0) {
+			i5 /= 2;
+		}
+
+		if(this.field_8052_05FNVLV6sMqT04VynsHRAEvUq29da0cF008aVXh42Du9zMt2SLAVE2T44MbF < 0) {
+			this.field_8052_05FNVLV6sMqT04VynsHRAEvUq29da0cF008aVXh42Du9zMt2SLAVE2T44MbF = 0;
+		}
+
+		if(this.field_8052_05FNVLV6sMqT04VynsHRAEvUq29da0cF008aVXh42Du9zMt2SLAVE2T44MbF > i5) {
+			this.field_8052_05FNVLV6sMqT04VynsHRAEvUq29da0cF008aVXh42Du9zMt2SLAVE2T44MbF = i5;
+		}
+
+		if(this.mc.theWorld == null) {
+			this.field_8051_57035AM89c7AjJAvlc6yp0I0vm61Sr0mqq1yu3Kg3bdv7ZnBwlAF6T7BaYL9.func_9954_31xL9lqzsd832NIF2fnqGsFer65B6pP9dW8u4402h7H3mW9p6ZjIZK9RM2zT(this.width, this.height);
+		}
+
+		GL11.glDisable(GL11.GL_LIGHTING);
+		GL11.glDisable(GL11.GL_FOG);
+		Tessellator tessellator15 = Tessellator.instance;
+
+		for(i7 = 0; i7 < list4.size(); ++i7) {
+			VisualsUnknownClass visualsUnknownClass8 = (VisualsUnknownClass)list4.get(i7);
+			int i9 = this.width / 16;
+			int i10 = 36 + i7 * 36 - this.field_8052_05FNVLV6sMqT04VynsHRAEvUq29da0cF008aVXh42Du9zMt2SLAVE2T44MbF;
+			byte b11 = 32;
+			byte b12 = 32;
+			if(visualsUnknownClass8 == this.mc.field_7308_49g3Ue4B4ymyJ5yc4CXdts2UZnR4OP36zG20Omc6J6Ly1C5xR8Habk43qvGE.field_11692_1k4uc1i9aprs9834A7rEVW0D2zfl3BI2g00e7D4rgDYDih8Qu9WukuM46qw0) {
+				int i13 = i9 - 1;
+				int i14 = i13 + 260;
+				Gui.drawGradientRect(i13 - 2, i10 - 2, i14 + 2, i10 + b11 + 2, -2130706433, 452984831);
+				Gui.drawGradientRect(i13, i10, i14, i10 + b11, 0xFF000000, -1610612209);
+			}
+
+			visualsUnknownClass8.func_10162_7X6Ocgi2aWrG07279w14Ok6jeWFPa9bmt1my2NA0a1ZEmdxx5QjSOn3mi5a8(this.mc);
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			tessellator15.startDrawingQuads();
+			tessellator15.setColorOpaque_I(0xFFFFFF);
+			tessellator15.addVertexWithUV((double)i9, (double)(i10 + b11), 0.0D, 0.0D, 1.0D);
+			tessellator15.addVertexWithUV((double)(i9 + b12), (double)(i10 + b11), 0.0D, 1.0D, 1.0D);
+			tessellator15.addVertexWithUV((double)(i9 + b12), (double)i10, 0.0D, 1.0D, 0.0D);
+			tessellator15.addVertexWithUV((double)i9, (double)i10, 0.0D, 0.0D, 0.0D);
+			tessellator15.draw();
+			Gui.drawString(this.fontRenderer, visualsUnknownClass8.field_10166_0Sg7537VnLZ7du5FsLln7EYJ7tLG9LfdbFsVG53zuLLa94D21JXk6aie9tls, i9 + b12 + 2, i10 + 1, 0xFFFFFF);
+			Gui.drawString(this.fontRenderer, visualsUnknownClass8.field_10168_6rK7r47m1wf6M34G2s0hL7m282kBAy4521c3axU19Y9WKmYF8gZ6ryN7JLjP, i9 + b12 + 2, i10 + 12, 8421504);
+			Gui.drawString(this.fontRenderer, visualsUnknownClass8.field_10165_3AzF56gtxWJ9912dPKDPOy7hH3t9Hl1HPMnVNkT671yMpR86uFp7khyzZyaR, i9 + b12 + 2, i10 + 12 + 10, 8421504);
+		}
+
+		boolean z16 = true;
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+		GL11.glDisable(GL11.GL_ALPHA_TEST);
+		GL11.glShadeModel(GL11.GL_SMOOTH);
+		GL11.glDisable(GL11.GL_TEXTURE_2D);
+		GL11.glEnable(GL11.GL_TEXTURE_2D);
+		GL11.glShadeModel(GL11.GL_FLAT);
+		GL11.glEnable(GL11.GL_ALPHA_TEST);
+		GL11.glDisable(GL11.GL_BLEND);
+		this.drawCenteredString(this.fontRenderer, "Choose Visuals", this.width / 2, 16, 0xFFFFFF);
+		this.drawCenteredString(this.fontRenderer, "(Place Visuals content here)", this.width / 2 - 77, this.height - 26, 8421504);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
+	}
+
+	public void updateScreen() {
+		super.updateScreen();
+		--this.field_8048_9SDvP1kn9Sd96o7De75R09os8ihE21oM9ia16Dm8laAG1ieXpRZvtcM7V7V1;
+	}
+
+	public void func_8043_1Jibq5w4EJqCUf26A37TQCX1V2VCGpawEkq3BEZBcr2gh4R65quzV0OLTd43(int integer1, int integer2, int integer3, int integer4) {
+		Tessellator tessellator5 = Tessellator.instance;
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/dirt.png"));
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		float f6 = 32.0F;
+		tessellator5.startDrawingQuads();
+		tessellator5.func_10264_9bHy7fL74IXD4UsqOd2Ex73M73ud0NIomc86hi8cp0K3zOYc25dWZ4o11NzU(4210752, integer4);
+		tessellator5.addVertexWithUV(0.0D, (double)integer2, 0.0D, 0.0D, (double)((float)integer2 / f6));
+		tessellator5.addVertexWithUV((double)this.width, (double)integer2, 0.0D, (double)((float)this.width / f6), (double)((float)integer2 / f6));
+		tessellator5.func_10264_9bHy7fL74IXD4UsqOd2Ex73M73ud0NIomc86hi8cp0K3zOYc25dWZ4o11NzU(4210752, integer3);
+		tessellator5.addVertexWithUV((double)this.width, (double)integer1, 0.0D, (double)((float)this.width / f6), (double)((float)integer1 / f6));
+		tessellator5.addVertexWithUV(0.0D, (double)integer1, 0.0D, 0.0D, (double)((float)integer1 / f6));
+		tessellator5.draw();
+	}
+}
--- /dev/null
+++ net/minecraft/src/InventoryVendingMachine.java
@@ -1,0 +1,83 @@
+package net.minecraft.src;
+
+public class InventoryVendingMachine extends InventoryPlayer {
+	public int field_8689_3p0gv43cL7j25sTw85c9cXfcP4HTk7W010VdL2XjgPV7V0w2R2sQvYNjSAja = 200;
+	private long field_8691_9zGIwX9EMBSwmRnPZ3gr71Z2dLYil9zWbXl9RsLwrSPMbyKh0wA2XB1Z2Ty5 = 1000L;
+	public long field_8694_9Ft1ntRGi6sZW4Mx76MJ56sY5EDCH8sZOcj8x0LlFaIf5eqsjdISdMW9e938 = 1000L;
+	public boolean field_8695_54O4q276dxP8y31413ENJjhqXBnFshV4S4ng8H76Bv5Y3Ma2DF7fbLk53PvO = false;
+	public boolean field_8693_6a3I3v4L072y21iqK2Q4a7OJa1SIY587gNZ7teLm8k1uZzO68dY6lE8PKTBh = false;
+	public boolean field_8690_9ajSfayfVo92Z68A5B2rvo13codHKhrUqqH2LRN64r7Ac066r0ki4BD2lC9w = false;
+	public boolean field_8692_8s3a9ZFU1Lb4Y33KzN5HEwzzvMoj71d2qDVF231HNAJ36vP850tAYydwpyN6 = false;
+
+	public InventoryVendingMachine(EntityPlayer entityPlayer) {
+		super(entityPlayer);
+	}
+
+	public boolean addItemStackToInventory(ItemStack stack) {
+		if(stack.itemID == ExtItems.essence.shiftedIndex) {
+			this.field_8689_3p0gv43cL7j25sTw85c9cXfcP4HTk7W010VdL2XjgPV7V0w2R2sQvYNjSAja += stack.stackSize;
+			return true;
+		} else {
+			return super.addItemStackToInventory(stack);
+		}
+	}
+
+	public void changeCurrentItem(int integer) {
+		this.currentItem -= integer;
+		this.currentItem = Ext1605Utils.func_12147_2H957G8ip82G6rxfiUf3zblru0uP648DzY022SjD3PqVRZ2F11lS24e967i5(this.currentItem, 0, 1);
+	}
+
+	public void setCurrentItem(int integer, boolean boolean2) {
+		if(integer >= 0 && integer < 2) {
+			super.setCurrentItem(integer, boolean2);
+		}
+
+	}
+
+	public long func_8686_3fQ4Zvl6ZGZtMHz8BDhx9ci7pQP8EhDqu7Ri4ywsZ3854I2e4ev3W4B3R3iy() {
+		return this.field_8691_9zGIwX9EMBSwmRnPZ3gr71Z2dLYil9zWbXl9RsLwrSPMbyKh0wA2XB1Z2Ty5;
+	}
+
+	public boolean func_8688_6DmcXOP1jZRKDasP2440t8904Ry66MRC3K00nwd8iGDlPgYii5d1f50QVICF(long long1) {
+		if(long1 < 0L) {
+			if(this.field_8691_9zGIwX9EMBSwmRnPZ3gr71Z2dLYil9zWbXl9RsLwrSPMbyKh0wA2XB1Z2Ty5 < long1 * -1L) {
+				return false;
+			}
+		} else {
+			this.field_8694_9Ft1ntRGi6sZW4Mx76MJ56sY5EDCH8sZOcj8x0LlFaIf5eqsjdISdMW9e938 += long1;
+		}
+
+		this.field_8691_9zGIwX9EMBSwmRnPZ3gr71Z2dLYil9zWbXl9RsLwrSPMbyKh0wA2XB1Z2Ty5 += long1;
+		return true;
+	}
+
+	public boolean func_8685_018jLaFer93s1Ao41hTl8Co499i9rtr87X0l6Asj74ctkfz3zMwrb0xF99f5(EnumVendingMachine _1902uulnDdAkub863Ix3rm71bL5kvfdD69WJodWuN7PsaTVCd2r3PxE8x6z9wX4bI134l5oES8B2nCfn9cZ2Y3E9NgJ9EmdW) {
+		switch(EnumVendingMachineUnknownClass.field_11151_01Lqa7jqn5Lnc8H2326RUUWR0pcY5mVnw6E94jwT0DsG39Ak48kRz6LgkbXv[_1902uulnDdAkub863Ix3rm71bL5kvfdD69WJodWuN7PsaTVCd2r3PxE8x6z9wX4bI134l5oES8B2nCfn9cZ2Y3E9NgJ9EmdW.ordinal()]) {
+		case 1:
+			return this.field_8693_6a3I3v4L072y21iqK2Q4a7OJa1SIY587gNZ7teLm8k1uZzO68dY6lE8PKTBh;
+		case 2:
+			return this.field_8690_9ajSfayfVo92Z68A5B2rvo13codHKhrUqqH2LRN64r7Ac066r0ki4BD2lC9w;
+		case 3:
+			return this.field_8695_54O4q276dxP8y31413ENJjhqXBnFshV4S4ng8H76Bv5Y3Ma2DF7fbLk53PvO;
+		case 4:
+			return this.field_8692_8s3a9ZFU1Lb4Y33KzN5HEwzzvMoj71d2qDVF231HNAJ36vP850tAYydwpyN6;
+		default:
+			return false;
+		}
+	}
+
+	public boolean func_8687_2j3o3G4w9YEuL5Ti00BI486Z8qmmrnAgVGJYmg4Or967q661jjx3SsHBV6Ko(int integer) {
+		switch(integer) {
+		case 1:
+			return this.field_8695_54O4q276dxP8y31413ENJjhqXBnFshV4S4ng8H76Bv5Y3Ma2DF7fbLk53PvO;
+		case 2:
+			return this.field_8693_6a3I3v4L072y21iqK2Q4a7OJa1SIY587gNZ7teLm8k1uZzO68dY6lE8PKTBh;
+		case 3:
+			return this.field_8690_9ajSfayfVo92Z68A5B2rvo13codHKhrUqqH2LRN64r7Ac066r0ki4BD2lC9w;
+		case 4:
+			return this.field_8692_8s3a9ZFU1Lb4Y33KzN5HEwzzvMoj71d2qDVF231HNAJ36vP850tAYydwpyN6;
+		default:
+			return false;
+		}
+	}
+}
--- net/minecraft/src/Item.java
+++ net/minecraft/src/Item.java
@@ -3,135 +3,157 @@
 import java.util.Random;
 
 public class Item {
+	public static final int ITEM_LIST_SIZE = 32767;
 	protected static Random rand = new Random();
-	public static Item[] itemsList = new Item[32000];
-	public static Item shovel = (new ItemSpade(0, 2)).setIconIndex(82);
-	public static Item pickaxeSteel = (new ItemPickaxe(1, 2)).setIconIndex(98);
-	public static Item axeSteel = (new ItemAxe(2, 2)).setIconIndex(114);
-	public static Item striker = (new ItemFlintAndSteel(3)).setIconIndex(5);
-	public static Item appleRed = (new ItemFood(4, 4)).setIconIndex(10);
-	public static Item bow = (new ItemBow(5)).setIconIndex(21);
-	public static Item arrow = (new Item(6)).setIconIndex(37);
-	public static Item coal = (new Item(7)).setIconIndex(7);
-	public static Item diamond = (new Item(8)).setIconIndex(55);
-	public static Item ingotIron = (new Item(9)).setIconIndex(23);
-	public static Item ingotGold = (new Item(10)).setIconIndex(39);
-	public static Item swordSteel = (new ItemSword(11, 2)).setIconIndex(66);
-	public static Item swordWood = (new ItemSword(12, 0)).setIconIndex(64);
-	public static Item shovelWood = (new ItemSpade(13, 0)).setIconIndex(80);
-	public static Item pickaxeWood = (new ItemPickaxe(14, 0)).setIconIndex(96);
-	public static Item axeWood = (new ItemAxe(15, 0)).setIconIndex(112);
-	public static Item swordStone = (new ItemSword(16, 1)).setIconIndex(65);
-	public static Item shovelStone = (new ItemSpade(17, 1)).setIconIndex(81);
-	public static Item pickaxeStone = (new ItemPickaxe(18, 1)).setIconIndex(97);
-	public static Item axeStone = (new ItemAxe(19, 1)).setIconIndex(113);
-	public static Item swordDiamond = (new ItemSword(20, 3)).setIconIndex(67);
-	public static Item shovelDiamond = (new ItemSpade(21, 3)).setIconIndex(83);
-	public static Item pickaxeDiamond = (new ItemPickaxe(22, 3)).setIconIndex(99);
-	public static Item axeDiamond = (new ItemAxe(23, 3)).setIconIndex(115);
-	public static Item stick = (new Item(24)).setIconIndex(53).setFull3D();
-	public static Item bowlEmpty = (new Item(25)).setIconIndex(71);
-	public static Item bowlSoup = (new ItemSoup(26, 10)).setIconIndex(72);
-	public static Item swordGold = (new ItemSword(27, 0)).setIconIndex(68);
-	public static Item shovelGold = (new ItemSpade(28, 0)).setIconIndex(84);
-	public static Item pickaxeGold = (new ItemPickaxe(29, 0)).setIconIndex(100);
-	public static Item axeGold = (new ItemAxe(30, 0)).setIconIndex(116);
-	public static Item silk = (new Item(31)).setIconIndex(8);
-	public static Item feather = (new Item(32)).setIconIndex(24);
-	public static Item gunpowder = (new Item(33)).setIconIndex(40);
-	public static Item hoeWood = (new ItemHoe(34, 0)).setIconIndex(128);
-	public static Item hoeStone = (new ItemHoe(35, 1)).setIconIndex(129);
-	public static Item hoeSteel = (new ItemHoe(36, 2)).setIconIndex(130);
-	public static Item hoeDiamond = (new ItemHoe(37, 3)).setIconIndex(131);
-	public static Item hoeGold = (new ItemHoe(38, 1)).setIconIndex(132);
-	public static Item seeds = (new ItemSeeds(39, Block.crops.blockID)).setIconIndex(9);
-	public static Item wheat = (new Item(40)).setIconIndex(25);
-	public static Item bread = (new ItemFood(41, 5)).setIconIndex(41);
-	public static Item helmetLeather = (new ItemArmor(42, 0, 0, 0)).setIconIndex(0);
-	public static Item plateLeather = (new ItemArmor(43, 0, 0, 1)).setIconIndex(16);
-	public static Item legsLeather = (new ItemArmor(44, 0, 0, 2)).setIconIndex(32);
-	public static Item bootsLeather = (new ItemArmor(45, 0, 0, 3)).setIconIndex(48);
-	public static Item helmetChain = (new ItemArmor(46, 1, 1, 0)).setIconIndex(1);
-	public static Item plateChain = (new ItemArmor(47, 1, 1, 1)).setIconIndex(17);
-	public static Item legsChain = (new ItemArmor(48, 1, 1, 2)).setIconIndex(33);
-	public static Item bootsChain = (new ItemArmor(49, 1, 1, 3)).setIconIndex(49);
-	public static Item helmetSteel = (new ItemArmor(50, 2, 2, 0)).setIconIndex(2);
-	public static Item plateSteel = (new ItemArmor(51, 2, 2, 1)).setIconIndex(18);
-	public static Item legsSteel = (new ItemArmor(52, 2, 2, 2)).setIconIndex(34);
-	public static Item bootsSteel = (new ItemArmor(53, 2, 2, 3)).setIconIndex(50);
-	public static Item helmetDiamond = (new ItemArmor(54, 3, 3, 0)).setIconIndex(3);
-	public static Item plateDiamond = (new ItemArmor(55, 3, 3, 1)).setIconIndex(19);
-	public static Item legsDiamond = (new ItemArmor(56, 3, 3, 2)).setIconIndex(35);
-	public static Item bootsDiamond = (new ItemArmor(57, 3, 3, 3)).setIconIndex(51);
-	public static Item helmetGold = (new ItemArmor(58, 1, 4, 0)).setIconIndex(4);
-	public static Item plateGold = (new ItemArmor(59, 1, 4, 1)).setIconIndex(20);
-	public static Item legsGold = (new ItemArmor(60, 1, 4, 2)).setIconIndex(36);
-	public static Item bootsGold = (new ItemArmor(61, 1, 4, 3)).setIconIndex(52);
-	public static Item flint = (new Item(62)).setIconIndex(6);
-	public static Item porkRaw = (new ItemFood(63, 3)).setIconIndex(87);
-	public static Item porkCooked = (new ItemFood(64, 8)).setIconIndex(88);
-	public static Item painting = (new ItemPainting(65)).setIconIndex(26);
-	public static Item appleGold = (new ItemFood(66, 42)).setIconIndex(11);
-	public static Item sign = (new ItemSign(67)).setIconIndex(42);
-	public static Item doorWood = (new ItemDoor(68, Material.wood)).setIconIndex(43);
-	public static Item bucketEmpty = (new ItemBucket(69, 0)).setIconIndex(74);
-	public static Item bucketWater = (new ItemBucket(70, Block.waterMoving.blockID)).setIconIndex(75);
-	public static Item bucketLava = (new ItemBucket(71, Block.lavaMoving.blockID)).setIconIndex(76);
-	public static Item minecartEmpty = (new ItemMinecart(72, 0)).setIconIndex(135);
-	public static Item saddle = (new ItemSaddle(73)).setIconIndex(104);
-	public static Item doorSteel = (new ItemDoor(74, Material.iron)).setIconIndex(44);
-	public static Item redstone = (new ItemRedstone(75)).setIconIndex(56);
-	public static Item snowball = (new ItemSnowball(76)).setIconIndex(14);
-	public static Item boat = (new ItemBoat(77)).setIconIndex(136);
-	public static Item leather = (new Item(78)).setIconIndex(103);
-	public static Item bucketMilk = (new ItemBucket(79, -1)).setIconIndex(77);
-	public static Item brick = (new Item(80)).setIconIndex(22);
-	public static Item clay = (new Item(81)).setIconIndex(57);
-	public static Item reed = (new ItemReed(82, Block.reed)).setIconIndex(27);
-	public static Item paper = (new Item(83)).setIconIndex(58);
-	public static Item book = (new Item(84)).setIconIndex(59);
-	public static Item slimeBall = (new Item(85)).setIconIndex(30);
-	public static Item minecartBox = (new ItemMinecart(86, 1)).setIconIndex(151);
-	public static Item minecartEngine = (new ItemMinecart(87, 2)).setIconIndex(167);
-	public static Item egg = (new Item(88)).setIconIndex(12);
-	public static Item compass = (new Item(89)).setIconIndex(54);
-	public static Item fishingRod = (new Item(90)).setIconIndex(69);
-	public static Item record13 = (new ItemRecord(2000, "13")).setIconIndex(240);
-	public static Item recordCat = (new ItemRecord(2001, "cat")).setIconIndex(241);
+	public static Item[] itemsList = new Item[65534];
+	public static Item shovel = (new ItemSpade(0, 2)).setIconIndex(82).setName("Iron Shovel").setEssValue(16);
+	public static Item pickaxeSteel = (new ItemPickaxe(1, 2)).setIconIndex(98).setName("Iron Pickaxe").setEssValue(16);
+	public static Item axeSteel = (new ItemAxe(2, 2)).setIconIndex(114).setName("Iron Axe").setEssValue(16);
+	public static Item striker = (new ItemFlintAndSteel(3)).setIconIndex(5).setEssValue(32).setName("Flint and Steel").setEssValue(8);
+	public static Item appleRed = (new ItemFood(4, 4)).setIconIndex(10).setName("Apple").setEssValue(2);
+	public static Item bow = (new ItemBow(5)).setIconIndex(21).setName("Bow").setEssValue(8);
+	public static Item arrow = (new Item(6)).setIconIndex(37).setName("Arrow").setEssValue(2);
+	public static Item coal = (new Item(7)).setIconIndex(7).setEssValue(8).setName("Coal").setEssValue(2);
+	public static Item diamond = (new Item(8)).setIconIndex(55).setEssValue(56).setName("Diamond").setEssValue(32);
+	public static Item ingotIron = (new Item(9)).setIconIndex(23).setEssValue(20).setName("Iron Ingot").setEssValue(16);
+	public static Item ingotGold = (new Item(10)).setIconIndex(39).setEssValue(48).setName("Gold Ingot").setEssValue(32);
+	public static Item swordSteel = (new ItemSword(11, 2)).setIconIndex(66).setName("Iron Sword").setEssValue(16);
+	public static Item swordWood = (new ItemSword(12, 0)).setIconIndex(64).setName("Wooden Sword").setEssValue(8);
+	public static Item shovelWood = (new ItemSpade(13, 0)).setIconIndex(80).setName("Wooden Shovel").setEssValue(8);
+	public static Item pickaxeWood = (new ItemPickaxe(14, 0)).setIconIndex(96).setName("Wooden Pickaxe").setEssValue(8);
+	public static Item axeWood = (new ItemAxe(15, 0)).setIconIndex(112).setName("Wooden Axe").setEssValue(8);
+	public static Item swordStone = (new ItemSword(16, 1)).setIconIndex(65).setName("Stone Sword").setEssValue(10);
+	public static Item shovelStone = (new ItemSpade(17, 1)).setIconIndex(81).setName("Stone Shovel").setEssValue(10);
+	public static Item pickaxeStone = (new ItemPickaxe(18, 1)).setIconIndex(97).setName("Stone Pickaxe").setEssValue(10);
+	public static Item axeStone = (new ItemAxe(19, 1)).setIconIndex(113).setName("Stone Axe").setEssValue(10);
+	public static Item swordDiamond = (new ItemSword(20, 3)).setIconIndex(67).setName("Diamond Sword").setEssValue(32);
+	public static Item shovelDiamond = (new ItemSpade(21, 3)).setIconIndex(83).setName("Diamond Shovel").setEssValue(32);
+	public static Item pickaxeDiamond = (new ItemPickaxe(22, 3)).setIconIndex(99).setName("Diamond Pickaxe").setEssValue(32);
+	public static Item axeDiamond = (new ItemAxe(23, 3)).setIconIndex(115).setName("Diamond Axe").setEssValue(32);
+	public static Item stick = (new Item(24)).setIconIndex(53).setFull3D().setName("Stick").setEssValue(2);
+	public static Item bowlEmpty = (new Item(25)).setIconIndex(71).setName("Bowl").setEssValue(2);
+	public static Item bowlSoup = (new ItemSoup(26, 10)).setIconIndex(72).setName("Soup").setEssValue(12);
+	public static Item swordGold = (new ItemSword(27, 0)).setIconIndex(68).setName("Golden Sword").setEssValue(24);
+	public static Item shovelGold = (new ItemSpade(28, 0)).setIconIndex(84).setName("Golden Shovel").setEssValue(24);
+	public static Item pickaxeGold = (new ItemPickaxe(29, 0)).setIconIndex(100).setName("Golden Pickaxe").setEssValue(24);
+	public static Item axeGold = (new ItemAxe(30, 0)).setIconIndex(116).setName("Golden Axe").setEssValue(24);
+	public static Item silk = (new Item(31)).setIconIndex(8).setName("Silk").setEssValue(12);
+	public static Item feather = (new Item(32)).setIconIndex(24).setName("Feather").setEssValue(4);
+	public static Item gunpowder = (new Item(33)).setIconIndex(40).setName("Gunpowder").setEssValue(4);
+	public static Item hoeWood = (new ItemHoe(34, 0)).setIconIndex(128).setName("Wooden Hoe").setEssValue(4);
+	public static Item hoeStone = (new ItemHoe(35, 1)).setIconIndex(129).setName("Stone Hoe").setEssValue(8);
+	public static Item hoeSteel = (new ItemHoe(36, 2)).setIconIndex(130).setName("Steel Hoe").setEssValue(12);
+	public static Item hoeDiamond = (new ItemHoe(37, 3)).setIconIndex(131).setName("Diamond Hoe").setEssValue(16);
+	public static Item hoeGold = (new ItemHoe(38, 1)).setIconIndex(132).setName("Golden Hoe").setEssValue(8);
+	public static Item seeds = (new ItemSeeds(39, Block.crops.blockID)).setIconIndex(9).setName("Seeds").setEssValue(1);
+	public static Item wheat = (new Item(40)).setIconIndex(25).setName("Wheat").setEssValue(4);
+	public static Item bread = (new ItemFood(41, 5)).setIconIndex(41).setName("Bread").setEssValue(8);
+	public static Item helmetLeather = (new ItemArmor(42, 0, 0, 0)).setIconIndex(0).setName("Leather Helm").setEssValue(4);
+	public static Item plateLeather = (new ItemArmor(43, 0, 0, 1)).setIconIndex(16).setName("Leather Jacket").setEssValue(4);
+	public static Item legsLeather = (new ItemArmor(44, 0, 0, 2)).setIconIndex(32).setName("Leather Pants").setEssValue(4);
+	public static Item bootsLeather = (new ItemArmor(45, 0, 0, 3)).setIconIndex(48).setName("Leather Boots").setEssValue(4);
+	public static Item helmetChain = (new ItemArmor(46, 1, 1, 0)).setIconIndex(1).setName("Ragged Helm").setEssValue(8);
+	public static Item plateChain = (new ItemArmor(47, 1, 1, 1)).setIconIndex(17).setName("Ragged Suit").setEssValue(8);
+	public static Item legsChain = (new ItemArmor(48, 1, 1, 2)).setIconIndex(33).setName("Ragged Leggings").setEssValue(8);
+	public static Item bootsChain = (new ItemArmor(49, 1, 1, 3)).setIconIndex(49).setName("Ragged Boots").setEssValue(8);
+	public static Item helmetSteel = (new ItemArmor(50, 2, 2, 0)).setIconIndex(2).setName("Iron Helm").setEssValue(16);
+	public static Item plateSteel = (new ItemArmor(51, 2, 2, 1)).setIconIndex(18).setName("Iron Chestplate").setEssValue(16);
+	public static Item legsSteel = (new ItemArmor(52, 2, 2, 2)).setIconIndex(34).setName("Iron Leggings").setEssValue(16);
+	public static Item bootsSteel = (new ItemArmor(53, 2, 2, 3)).setIconIndex(50).setName("Iron Boots").setEssValue(16);
+	public static Item helmetDiamond = (new ItemArmor(54, 3, 3, 0)).setIconIndex(3).setName("Diamond Helm").setEssValue(32);
+	public static Item plateDiamond = (new ItemArmor(55, 3, 3, 1)).setIconIndex(19).setName("Diamond Chestplate").setEssValue(32);
+	public static Item legsDiamond = (new ItemArmor(56, 3, 3, 2)).setIconIndex(35).setName("Diamond Leggings").setEssValue(32);
+	public static Item bootsDiamond = (new ItemArmor(57, 3, 3, 3)).setIconIndex(51).setName("Diamond Boots").setEssValue(32);
+	public static Item helmetGold = (new ItemArmor(58, 1, 4, 0)).setIconIndex(4).setName("Golden Helm").setEssValue(32);
+	public static Item plateGold = (new ItemArmor(59, 1, 4, 1)).setIconIndex(20).setName("Golden Chestplate").setEssValue(16);
+	public static Item legsGold = (new ItemArmor(60, 1, 4, 2)).setIconIndex(36).setName("Golden Leggings").setEssValue(16);
+	public static Item bootsGold = (new ItemArmor(61, 1, 4, 3)).setIconIndex(52).setName("Golden Boots").setEssValue(16);
+	public static Item flint = (new Item(62)).setIconIndex(6).setEssValue(12).setName("Flint");
+	public static Item porkRaw = (new ItemFood(63, 3)).setIconIndex(87).setEssValue(8).setName("Raw Pork");
+	public static Item porkCooked = (new ItemFood(64, 8)).setIconIndex(88).setEssValue(16).setName("Cooked Pork");
+	public static Item painting = (new ItemPainting(65)).setIconIndex(26).setName("Painting").setEssValue(4);
+	public static Item appleGold = (new ItemFood(66, 42)).setIconIndex(11).setEssValue(90).setName("Golden Apple");
+	public static Item sign = (new ItemSign(67)).setIconIndex(42).setName("Sign").setEssValue(1);
+	public static Item doorWood = (new ItemDoor(68, Material.wood)).setIconIndex(43).setName("Wooden Door").setEssValue(4);
+	public static Item bucketEmpty = (new ItemBucket(69, 0)).setIconIndex(74).setName("Bucket").setEssValue(16);
+	public static Item bucketWater = (new ItemBucket(70, Block.waterMoving.blockID)).setIconIndex(75).setName("Water Bucket").setEssValue(16);
+	public static Item bucketLava = (new ItemBucket(71, Block.lavaMoving.blockID)).setIconIndex(76).setName("Lava Bucket").setEssValue(16);
+	public static Item minecartEmpty = (new ItemMinecart(72, 0)).setIconIndex(135).setName("Minecart").setEssValue(32);
+	public static Item saddle = (new ItemSaddle(73)).setIconIndex(104).setName("Saddle").setEssValue(16);
+	public static Item doorSteel = (new ItemDoor(74, Material.iron)).setIconIndex(44).setName("Steel door").setEssValue(16);
+	public static Item redstone = (new ItemRedstone(75)).setIconIndex(56).setEssValue(8).setName("Greenstone").setEssValue(3);
+	public static Item snowball = (new ItemSnowball(76)).setIconIndex(14).setName("Snowball").setEssValue(1);
+	public static Item boat = (new ItemBoat(77)).setIconIndex(136).setName("Boat").setEssValue(8);
+	public static Item leather = (new Item(78)).setIconIndex(103).setName("Leather").setEssValue(2);
+	public static Item bucketMilk = (new ItemBucket(79, -1)).setIconIndex(77).setName("Milk Bucket").setEssValue(8);
+	public static Item brick = (new Item(80)).setIconIndex(22).setName("Brick").setEssValue(4);
+	public static Item clay = (new Item(81)).setIconIndex(57).setName("Clay").setEssValue(4);
+	public static Item reed = (new ItemReed(82, Block.reed)).setIconIndex(27).setName("Reed").setEssValue(4);
+	public static Item paper = (new Item(83)).setIconIndex(58).setName("Paper").setEssValue(5);
+	public static Item book = (new Item(84)).setIconIndex(59).setName("Book").setEssValue(16);
+	public static Item slimeBall = (new Item(85)).setIconIndex(30).setEssValue(10).setName("Sludge");
+	public static Item minecartBox = (new ItemMinecart(86, 1)).setIconIndex(151).setName("Minecart with a Chest").setEssValue(16);
+	public static Item minecartEngine = (new ItemMinecart(87, 2)).setIconIndex(167).setName("Minecart with a Furnace").setEssValue(16);
+	public static Item egg = (new Item(88)).setIconIndex(12).setName("Egg").setEssValue(2);
+	public static Item compass = (new Item(89)).setIconIndex(54).setName("Compass").setEssValue(16);
+	public static Item fishingRod = (new Item(1999)).setIconIndex(70).setName("Fishing Rod").setEssValue(16);
+	public static Item record13 = (new ItemRecord(2000, "lemuria")).setIconIndex(240).setEssValue(128).setName("Record (Lemuria)");
+	public static Item recordCat = (new ItemRecord(2001, "hidden_den")).setIconIndex(241).setEssValue(128).setName("Record (Hidden Den)");
 	public final int shiftedIndex;
 	protected int maxStackSize = 64;
 	protected int maxDamage = 32;
-	protected int iconIndex;
+	public int iconIndex;
 	protected boolean bFull3D = false;
+	public int essenceValue = 1;
+	protected String itemName = "";
 
-	protected Item(int var1) {
-		this.shiftedIndex = 256 + var1;
-		if(itemsList[256 + var1] != null) {
-			System.out.println("CONFLICT @ " + var1);
+	public Item(int itemID) {
+		this.shiftedIndex = 32767 + itemID;
+		if(itemsList[this.shiftedIndex] != null) {
+			throw new RuntimeException("[Item] CONFLICT @ ID " + itemID);
+		} else {
+			itemsList[this.shiftedIndex] = this;
 		}
-
-		itemsList[256 + var1] = this;
-	}
-
-	public Item setIconIndex(int var1) {
-		this.iconIndex = var1;
-		return this;
-	}
-
-	public int getIconIndex(ItemStack var1) {
+	}
+
+	public Item setIconIndex(int integer) {
+		this.iconIndex = integer;
+		return this;
+	}
+
+	public Item setMaxStackSize(int integer) {
+		this.maxStackSize = integer;
+		return this;
+	}
+
+	public String itemName() {
+		return this.itemName;
+	}
+
+	public Item setName(String string) {
+		this.itemName = string;
+		return this;
+	}
+
+	public Item setEssValue(int integer) {
+		this.essenceValue = integer;
+		return this;
+	}
+
+	public int getIconIndex(ItemStack itemStack) {
 		return this.iconIndex;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
 		return false;
 	}
 
-	public float getStrVsBlock(ItemStack var1, Block var2) {
+	public float getStrVsBlock(ItemStack stack, Block block) {
 		return 1.0F;
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		return var1;
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		return itemStack;
 	}
 
 	public int getItemStackLimit() {
@@ -142,21 +164,21 @@
 		return this.maxDamage;
 	}
 
-	public void hitEntity(ItemStack var1, EntityLiving var2) {
-	}
-
-	public void onBlockDestroyed(ItemStack var1, int var2, int var3, int var4, int var5) {
-	}
-
-	public int getDamageVsEntity(Entity var1) {
+	public void hitEntity(ItemStack itemStack, EntityLiving entityLiving) {
+	}
+
+	public void onBlockDestroyed(ItemStack stack, int x, int y, int z, int z1) {
+	}
+
+	public int getDamageVsEntity(Entity entity) {
 		return 1;
 	}
 
-	public boolean canHarvestBlock(Block var1) {
+	public boolean canHarvestBlock(Block block) {
 		return false;
 	}
 
-	public void saddleEntity(ItemStack var1, EntityLiving var2) {
+	public void saddleEntity(ItemStack itemStack, EntityLiving entityLiving) {
 	}
 
 	public Item setFull3D() {
@@ -166,5 +188,9 @@
 
 	public boolean isFull3D() {
 		return this.bFull3D;
+	}
+
+	static {
+		ExtItems.Register();
 	}
 }
--- /dev/null
+++ net/minecraft/src/RPacketB0BlockData.java
@@ -1,0 +1,59 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class RPacketB0BlockData implements RPacket {
+	int chunkX;
+	int chunkZ;
+	int fragment;
+
+	public RPacketB0BlockData() {
+	}
+
+	public RPacketB0BlockData(int integer1, int integer2, int integer3) {
+		this.chunkX = integer1;
+		this.chunkZ = integer2;
+		this.fragment = integer3;
+	}
+
+	public byte GetPacketID() {
+		return (byte)-80;
+	}
+
+	public void Send(DataOutputStream dataOutputStream) throws IOException {
+		byte[] b2 = new byte[1024];
+		World world3 = InputHandler.mc.theWorld;
+		int i4 = 0;
+
+		for(int i5 = 0; i5 != 16; ++i5) {
+			for(int i6 = 0; i6 != 16; ++i6) {
+				for(int i7 = 0; i7 != 16; ++i7) {
+					b2[i4] = (byte)world3.getBlockId(i6, this.fragment * 4 + i5, i7);
+					++i4;
+				}
+			}
+		}
+
+		dataOutputStream.writeInt(this.fragment);
+		dataOutputStream.writeInt(this.chunkX);
+		dataOutputStream.writeInt(this.chunkZ);
+		dataOutputStream.write(b2, 0, 1024);
+	}
+
+	public void Receive(DataInputStream dataInputStream) throws IOException {
+		int i2 = dataInputStream.readInt();
+		int i3 = dataInputStream.readInt();
+		int i4 = dataInputStream.readInt();
+		byte[] b5 = new byte[1024];
+		dataInputStream.read(b5, 0, 1024);
+	}
+
+	public void Respond(DataOutputStream dataOutputStream) throws IOException {
+	}
+
+	public int GetResponseSize() {
+		return 1036;
+	}
+}
--- /dev/null
+++ net/minecraft/src/PartDefinitionElement.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+public class PartDefinitionElement {
+	public String name;
+	public CubeListBuilder cubeList;
+	public PartPose offset;
+
+	public PartDefinitionElement(String string, CubeListBuilder vh, PartPose dw) {
+		this.name = string;
+		this.cubeList = vh;
+		this.offset = dw;
+	}
+}
--- /dev/null
+++ net/minecraft/src/Packet210RemoteEntityData.java
@@ -1,0 +1,52 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet210RemoteEntityData extends Packet {
+	public int id;
+	public double px;
+	public double py;
+	public double pz;
+	public double rx;
+	public double ry;
+
+	public Packet210RemoteEntityData(int integer, double double2, double double3, double double4, double double5, double double6) {
+		this.id = integer;
+		this.px = double2;
+		this.py = double3;
+		this.pz = double4;
+		this.rx = double5;
+		this.ry = double6;
+	}
+
+	public Packet210RemoteEntityData() {
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.id = dataInputStream.readInt();
+		this.px = dataInputStream.readDouble();
+		this.py = dataInputStream.readDouble();
+		this.pz = dataInputStream.readDouble();
+		this.rx = dataInputStream.readDouble();
+		this.ry = dataInputStream.readDouble();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.id);
+		dataOutputStream.writeDouble(this.px);
+		dataOutputStream.writeDouble(this.py);
+		dataOutputStream.writeDouble(this.pz);
+		dataOutputStream.writeDouble(this.rx);
+		dataOutputStream.writeDouble(this.ry);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleRemoteEntityData(this);
+	}
+
+	public int getPacketSize() {
+		return 44;
+	}
+}
--- /dev/null
+++ net/minecraft/src/VisualsUnknownClass.java
@@ -1,0 +1,33 @@
+package net.minecraft.src;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+import net.minecraft.client.Minecraft;
+
+public abstract class VisualsUnknownClass {
+	public String field_10166_0Sg7537VnLZ7du5FsLln7EYJ7tLG9LfdbFsVG53zuLLa94D21JXk6aie9tls;
+	public String field_10168_6rK7r47m1wf6M34G2s0hL7m282kBAy4521c3axU19Y9WKmYF8gZ6ryN7JLjP;
+	public String field_10165_3AzF56gtxWJ9912dPKDPOy7hH3t9Hl1HPMnVNkT671yMpR86uFp7khyzZyaR;
+	public String field_10167_4p5HDq8cPm6prmKZL6SU5o5En606fQrkgqDrSQFfG4aK8f713sgNU29Ueh6v;
+	public VisualsConfiguration field_10164_5N63dbka0na7Is07L9kMmSk6ZK28Ioxdll6JwQgybo1I69cauDA8U5rtDvBv = new VisualsConfiguration();
+
+	public void func_10159_18ZVjfTsTKfB80BRv0MI82mIW7A5kEEVTFqM41a5Y88G06sn7n695Ml9CX4X() {
+	}
+
+	public void func_10163_2I13qZ82Olr559q81461XqI7EvNeguYD7GAG7DmGJf04Fu44f4iY1Oy7WJME() {
+	}
+
+	public void func_10158_0Gpj8594Ufmy5e2AAxicC9QX8AZ598q48b12zV8cSfE61ZzMvANYL3Omgcv9(Minecraft minecraft) throws IOException {
+	}
+
+	public void func_10160_6kOi4sh8w5g34shttmoUUEDgCPE5VRiNwN076cQcxuDFXDkU0y92lK2v99vL(Minecraft minecraft) {
+	}
+
+	public void func_10162_7X6Ocgi2aWrG07279w14Ok6jeWFPa9bmt1my2NA0a1ZEmdxx5QjSOn3mi5a8(Minecraft minecraft) {
+	}
+
+	public InputStream getResourceAsStream(String string) {
+		return Ext1605Utils.func_12150_5v4Cs6sI06e6Hjpg3rSI82gG008x14C2jag2OM7ADaW5U8a3DYSrf570CJm6(string);
+	}
+}
--- net/minecraft/src/ModelBiped.java
+++ net/minecraft/src/ModelBiped.java
@@ -6,95 +6,122 @@
 	public ModelRenderer bipedBody;
 	public ModelRenderer bipedRightArm;
 	public ModelRenderer bipedLeftArm;
+	public ModelRenderer bipedRightArmS;
+	public ModelRenderer bipedLeftArmS;
 	public ModelRenderer bipedRightLeg;
 	public ModelRenderer bipedLeftLeg;
 	public boolean heldItemLeft;
 	public boolean heldItemRight;
 	public boolean isSneak;
+	public boolean inWater;
+	public boolean field_9257_0KUtgLX9srVUt26M4Sr4d7tQWC7591F5ufdCW0N24HOCJRBfNMJmqGBkyn5V;
 
 	public ModelBiped() {
 		this(0.0F);
 	}
 
-	public ModelBiped(float var1) {
-		this(var1, 0.0F);
+	public ModelBiped(float float1) {
+		this(float1, 0.0F);
 	}
 
-	public ModelBiped(float var1, float var2) {
+	public ModelBiped(float float1, float float2) {
+		this.field_9257_0KUtgLX9srVUt26M4Sr4d7tQWC7591F5ufdCW0N24HOCJRBfNMJmqGBkyn5V = false;
 		this.heldItemLeft = false;
 		this.heldItemRight = false;
 		this.isSneak = false;
+		this.inWater = false;
 		this.bipedHead = new ModelRenderer(0, 0);
-		this.bipedHead.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, var1);
-		this.bipedHead.setRotationPoint(0.0F, 0.0F + var2, 0.0F);
+		this.bipedHead.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, float1);
+		this.bipedHead.setRotationPoint(0.0F, 0.0F + float2, 0.0F);
 		this.bipedHeadwear = new ModelRenderer(32, 0);
-		this.bipedHeadwear.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, var1 + 0.5F);
-		this.bipedHeadwear.setRotationPoint(0.0F, 0.0F + var2, 0.0F);
+		this.bipedHeadwear.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, float1 + 0.5F);
+		this.bipedHeadwear.setRotationPoint(0.0F, 0.0F + float2, 0.0F);
 		this.bipedBody = new ModelRenderer(16, 16);
-		this.bipedBody.addBox(-4.0F, 0.0F, -2.0F, 8, 12, 4, var1);
-		this.bipedBody.setRotationPoint(0.0F, 0.0F + var2, 0.0F);
+		this.bipedBody.addBox(-4.0F, 0.0F, -2.0F, 8, 12, 4, float1);
+		this.bipedBody.setRotationPoint(0.0F, 0.0F + float2, 0.0F);
 		this.bipedRightArm = new ModelRenderer(40, 16);
-		this.bipedRightArm.addBox(-3.0F, -2.0F, -2.0F, 4, 12, 4, var1);
-		this.bipedRightArm.setRotationPoint(-5.0F, 2.0F + var2, 0.0F);
+		this.bipedRightArm.addBox(-3.0F, -2.0F, -2.0F, 4, 12, 4, float1);
+		this.bipedRightArm.setRotationPoint(-5.0F, 2.0F + float2, 0.0F);
 		this.bipedLeftArm = new ModelRenderer(40, 16);
 		this.bipedLeftArm.mirror = true;
-		this.bipedLeftArm.addBox(-1.0F, -2.0F, -2.0F, 4, 12, 4, var1);
-		this.bipedLeftArm.setRotationPoint(5.0F, 2.0F + var2, 0.0F);
+		this.bipedLeftArm.addBox(-1.0F, -2.0F, -2.0F, 4, 12, 4, float1);
+		this.bipedLeftArm.setRotationPoint(5.0F, 2.0F + float2, 0.0F);
+		this.bipedRightArmS = new ModelRenderer(40, 16);
+		this.bipedRightArmS.addBox(-2.0F, -2.0F, -2.0F, 3, 12, 4, float1);
+		this.bipedRightArmS.setRotationPoint(-5.0F, 2.0F + float2, 0.0F);
+		this.bipedLeftArmS = new ModelRenderer(40, 16);
+		this.bipedLeftArmS.mirror = true;
+		this.bipedLeftArmS.addBox(-1.0F, -2.0F, -2.0F, 3, 12, 4, float1);
+		this.bipedLeftArmS.setRotationPoint(5.0F, 2.0F + float2, 0.0F);
+		this.bipedRightArmS.isHidden = true;
+		this.bipedLeftArmS.isHidden = true;
 		this.bipedRightLeg = new ModelRenderer(0, 16);
-		this.bipedRightLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, var1);
-		this.bipedRightLeg.setRotationPoint(-2.0F, 12.0F + var2, 0.0F);
+		this.bipedRightLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, float1);
+		this.bipedRightLeg.setRotationPoint(-2.0F, 12.0F + float2, 0.0F);
 		this.bipedLeftLeg = new ModelRenderer(0, 16);
 		this.bipedLeftLeg.mirror = true;
-		this.bipedLeftLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, var1);
-		this.bipedLeftLeg.setRotationPoint(2.0F, 12.0F + var2, 0.0F);
-	}
-
-	public void render(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.setRotationAngles(var1, var2, var3, var4, var5, var6);
-		this.bipedHead.render(var6);
-		this.bipedBody.render(var6);
-		this.bipedRightArm.render(var6);
-		this.bipedLeftArm.render(var6);
-		this.bipedRightLeg.render(var6);
-		this.bipedLeftLeg.render(var6);
-		this.bipedHeadwear.render(var6);
-	}
-
-	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.bipedHead.rotateAngleY = var4 / (180.0F / (float)Math.PI);
-		this.bipedHead.rotateAngleX = var5 / (180.0F / (float)Math.PI);
+		this.bipedLeftLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, float1);
+		this.bipedLeftLeg.setRotationPoint(2.0F, 12.0F + float2, 0.0F);
+	}
+
+	public void setSlimModel(boolean boolean1) {
+		this.field_9257_0KUtgLX9srVUt26M4Sr4d7tQWC7591F5ufdCW0N24HOCJRBfNMJmqGBkyn5V = boolean1;
+		this.bipedRightArm.isHidden = boolean1;
+		this.bipedLeftArm.isHidden = boolean1;
+		this.bipedRightArmS.isHidden = !boolean1;
+		this.bipedLeftArmS.isHidden = !boolean1;
+	}
+
+	public void render(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.setRotationAngles(float1, float2, float3, float4, float5, float6);
+		this.bipedHead.render(float6);
+		this.bipedBody.render(float6);
+		this.bipedRightArm.render(float6);
+		this.bipedLeftArm.render(float6);
+		this.bipedRightArmS.render(float6);
+		this.bipedLeftArmS.render(float6);
+		this.bipedRightLeg.render(float6);
+		this.bipedLeftLeg.render(float6);
+		this.bipedHeadwear.render(float6);
+	}
+
+	public void setRotationAngles(float float1, float float2, float float3, float float4, float float5, float float6) {
+		this.bipedHead.rotateAngleY = float4 / 57.295776F;
+		this.bipedHead.rotateAngleX = float5 / 57.295776F;
 		this.bipedHeadwear.rotateAngleY = this.bipedHead.rotateAngleY;
 		this.bipedHeadwear.rotateAngleX = this.bipedHead.rotateAngleX;
-		this.bipedRightArm.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 2.0F * var2 * 0.5F;
-		this.bipedLeftArm.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 2.0F * var2 * 0.5F;
+		this.bipedRightArm.rotateAngleX = this.bipedRightArmS.rotateAngleX = MathHelper.cos(float1 * 0.6662F + (float)Math.PI) * 2.0F * float2 * 0.5F;
+		this.bipedLeftArm.rotateAngleX = this.bipedLeftArmS.rotateAngleX = MathHelper.cos(float1 * 0.6662F) * 2.0F * float2 * 0.5F;
 		this.bipedRightArm.rotateAngleZ = 0.0F;
 		this.bipedLeftArm.rotateAngleZ = 0.0F;
-		this.bipedRightLeg.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.4F * var2;
-		this.bipedLeftLeg.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.4F * var2;
+		this.bipedRightLeg.rotateAngleX = MathHelper.cos(float1 * 0.6662F) * 1.4F * float2;
+		this.bipedLeftLeg.rotateAngleX = MathHelper.cos(float1 * 0.6662F + (float)Math.PI) * 1.4F * float2;
 		this.bipedRightLeg.rotateAngleY = 0.0F;
 		this.bipedLeftLeg.rotateAngleY = 0.0F;
 		if(this.isRiding) {
-			this.bipedRightArm.rotateAngleX += (float)Math.PI * -0.2F;
-			this.bipedLeftArm.rotateAngleX += (float)Math.PI * -0.2F;
-			this.bipedRightLeg.rotateAngleX = (float)Math.PI * -0.4F;
-			this.bipedLeftLeg.rotateAngleX = (float)Math.PI * -0.4F;
-			this.bipedRightLeg.rotateAngleY = (float)Math.PI * 0.1F;
-			this.bipedLeftLeg.rotateAngleY = (float)Math.PI * -0.1F;
+			this.bipedRightArm.rotateAngleX += -0.62831855F;
+			this.bipedRightArmS.rotateAngleX += -0.62831855F;
+			this.bipedLeftArm.rotateAngleX += -0.62831855F;
+			this.bipedLeftArmS.rotateAngleX += -0.62831855F;
+			this.bipedRightLeg.rotateAngleX = -1.2566371F;
+			this.bipedLeftLeg.rotateAngleX = -1.2566371F;
+			this.bipedRightLeg.rotateAngleY = 0.31415927F;
+			this.bipedLeftLeg.rotateAngleY = -0.31415927F;
 		}
 
 		if(this.heldItemLeft) {
-			this.bipedLeftArm.rotateAngleX = this.bipedLeftArm.rotateAngleX * 0.5F - (float)Math.PI * 0.1F;
+			this.bipedLeftArm.rotateAngleX = this.bipedLeftArmS.rotateAngleX = this.bipedLeftArm.rotateAngleX * 0.5F - 0.31415927F;
 		}
 
 		if(this.heldItemRight) {
-			this.bipedRightArm.rotateAngleX = this.bipedRightArm.rotateAngleX * 0.5F - (float)Math.PI * 0.1F;
+			this.bipedRightArm.rotateAngleX = this.bipedRightArmS.rotateAngleX = this.bipedRightArm.rotateAngleX * 0.5F - 0.31415927F;
 		}
 
-		this.bipedRightArm.rotateAngleY = 0.0F;
-		this.bipedLeftArm.rotateAngleY = 0.0F;
+		this.bipedRightArm.rotateAngleY = this.bipedRightArmS.rotateAngleY = 0.0F;
+		this.bipedLeftArm.rotateAngleY = this.bipedLeftArmS.rotateAngleY = 0.0F;
 		if(this.swingProgress > -9990.0F) {
-			float var7 = this.swingProgress;
-			this.bipedBody.rotateAngleY = MathHelper.sin(MathHelper.sqrt_float(var7) * (float)Math.PI * 2.0F) * 0.2F;
+			float f7 = this.swingProgress;
+			this.bipedBody.rotateAngleY = MathHelper.sin(MathHelper.sqrt_float(f7) * (float)Math.PI * 2.0F) * 0.2F;
 			this.bipedRightArm.rotationPointZ = MathHelper.sin(this.bipedBody.rotateAngleY) * 5.0F;
 			this.bipedRightArm.rotationPointX = -MathHelper.cos(this.bipedBody.rotateAngleY) * 5.0F;
 			this.bipedLeftArm.rotationPointZ = -MathHelper.sin(this.bipedBody.rotateAngleY) * 5.0F;
@@ -102,13 +129,13 @@
 			this.bipedRightArm.rotateAngleY += this.bipedBody.rotateAngleY;
 			this.bipedLeftArm.rotateAngleY += this.bipedBody.rotateAngleY;
 			this.bipedLeftArm.rotateAngleX += this.bipedBody.rotateAngleY;
-			var7 = 1.0F - this.swingProgress;
-			var7 *= var7;
-			var7 *= var7;
-			var7 = 1.0F - var7;
-			float var8 = MathHelper.sin(var7 * (float)Math.PI);
-			float var9 = MathHelper.sin(this.swingProgress * (float)Math.PI) * -(this.bipedHead.rotateAngleX - 0.7F) * (12.0F / 16.0F);
-			this.bipedRightArm.rotateAngleX = (float)((double)this.bipedRightArm.rotateAngleX - ((double)var8 * 1.2D + (double)var9));
+			f7 = 1.0F - this.swingProgress;
+			f7 *= f7;
+			f7 *= f7;
+			f7 = 1.0F - f7;
+			float f8 = MathHelper.sin(f7 * (float)Math.PI);
+			float f9 = MathHelper.sin(this.swingProgress * (float)Math.PI) * -(this.bipedHead.rotateAngleX - 0.7F) * 0.75F;
+			this.bipedRightArm.rotateAngleX = (float)((double)this.bipedRightArm.rotateAngleX - ((double)f8 * 1.2D + (double)f9));
 			this.bipedRightArm.rotateAngleY += this.bipedBody.rotateAngleY * 2.0F;
 			this.bipedRightArm.rotateAngleZ = MathHelper.sin(this.swingProgress * (float)Math.PI) * -0.4F;
 		}
@@ -118,7 +145,9 @@
 			this.bipedRightLeg.rotateAngleX -= 0.0F;
 			this.bipedLeftLeg.rotateAngleX -= 0.0F;
 			this.bipedRightArm.rotateAngleX += 0.4F;
+			this.bipedRightArmS.rotateAngleX += 0.4F;
 			this.bipedLeftArm.rotateAngleX += 0.4F;
+			this.bipedLeftArmS.rotateAngleX += 0.4F;
 			this.bipedRightLeg.rotationPointZ = 4.0F;
 			this.bipedLeftLeg.rotationPointZ = 4.0F;
 			this.bipedRightLeg.rotationPointY = 9.0F;
@@ -133,9 +162,26 @@
 			this.bipedHead.rotationPointY = 0.0F;
 		}
 
-		this.bipedRightArm.rotateAngleZ += MathHelper.cos(var3 * 0.09F) * 0.05F + 0.05F;
-		this.bipedLeftArm.rotateAngleZ -= MathHelper.cos(var3 * 0.09F) * 0.05F + 0.05F;
-		this.bipedRightArm.rotateAngleX += MathHelper.sin(var3 * 0.067F) * 0.05F;
-		this.bipedLeftArm.rotateAngleX -= MathHelper.sin(var3 * 0.067F) * 0.05F;
+		if(this.inWater) {
+			--this.bipedHead.rotateAngleX;
+			--this.bipedHeadwear.rotateAngleX;
+		}
+
+		this.bipedRightArm.rotateAngleZ += MathHelper.cos(float3 * 0.09F) * 0.05F + 0.05F;
+		this.bipedLeftArm.rotateAngleZ -= MathHelper.cos(float3 * 0.09F) * 0.05F + 0.05F;
+		this.bipedRightArm.rotateAngleX += MathHelper.sin(float3 * 0.067F) * 0.05F;
+		this.bipedLeftArm.rotateAngleX -= MathHelper.sin(float3 * 0.067F) * 0.05F;
+		this.bipedLeftArmS.rotationPointX = this.bipedLeftArm.rotationPointX;
+		this.bipedLeftArmS.rotationPointY = this.bipedLeftArm.rotationPointY;
+		this.bipedLeftArmS.rotationPointZ = this.bipedLeftArm.rotationPointZ;
+		this.bipedLeftArmS.rotateAngleX = this.bipedLeftArm.rotateAngleX;
+		this.bipedLeftArmS.rotateAngleY = this.bipedLeftArm.rotateAngleY;
+		this.bipedLeftArmS.rotateAngleZ = this.bipedLeftArm.rotateAngleZ;
+		this.bipedRightArmS.rotationPointX = this.bipedRightArm.rotationPointX;
+		this.bipedRightArmS.rotationPointY = this.bipedRightArm.rotationPointY;
+		this.bipedRightArmS.rotationPointZ = this.bipedRightArm.rotationPointZ;
+		this.bipedRightArmS.rotateAngleX = this.bipedRightArm.rotateAngleX;
+		this.bipedRightArmS.rotateAngleY = this.bipedRightArm.rotateAngleY;
+		this.bipedRightArmS.rotateAngleZ = this.bipedRightArm.rotateAngleZ;
 	}
 }
--- net/minecraft/src/BlockRedstoneWire.java
+++ net/minecraft/src/BlockRedstoneWire.java
@@ -5,16 +5,16 @@
 public class BlockRedstoneWire extends Block {
 	private boolean wiresProvidePower = true;
 
-	public BlockRedstoneWire(int var1, int var2) {
-		super(var1, var2, Material.circuits);
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F / 16.0F, 1.0F);
-	}
-
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return this.blockIndexInTexture + (var2 > 0 ? 16 : 0);
-	}
-
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public BlockRedstoneWire(int id, int blockIndex) {
+		super(id, blockIndex, Material.circuits);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.0625F, 1.0F);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return this.blockIndexInTexture + (metadata > 0 ? 16 : 0);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -30,254 +30,255 @@
 		return 5;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2, var3 - 1, var4);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y - 1, z);
 	}
 
-	private void updateAndPropagateCurrentStrength(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		int var6 = 0;
+	private void updateAndPropagateCurrentStrength(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		int i6 = 0;
 		this.wiresProvidePower = false;
-		boolean var7 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4);
+		boolean z7 = world.isBlockIndirectlyGettingPowered(x, y, z);
 		this.wiresProvidePower = true;
-		int var8;
-		int var9;
-		int var10;
-		if(var7) {
-			var6 = 15;
+		int i8;
+		int i9;
+		int i10;
+		if(z7) {
+			i6 = 15;
 		} else {
-			for(var8 = 0; var8 < 4; ++var8) {
-				var9 = var2;
-				var10 = var4;
-				if(var8 == 0) {
-					var9 = var2 - 1;
-				}
-
-				if(var8 == 1) {
-					++var9;
-				}
-
-				if(var8 == 2) {
-					var10 = var4 - 1;
-				}
-
-				if(var8 == 3) {
-					++var10;
-				}
-
-				var6 = this.getMaxCurrentStrength(var1, var9, var3, var10, var6);
-				if(var1.isBlockNormalCube(var9, var3, var10) && !var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-					var6 = this.getMaxCurrentStrength(var1, var9, var3 + 1, var10, var6);
-				} else if(!var1.isBlockNormalCube(var9, var3, var10)) {
-					var6 = this.getMaxCurrentStrength(var1, var9, var3 - 1, var10, var6);
+			for(i8 = 0; i8 < 4; ++i8) {
+				i9 = x;
+				i10 = z;
+				if(i8 == 0) {
+					i9 = x - 1;
+				}
+
+				if(i8 == 1) {
+					++i9;
+				}
+
+				if(i8 == 2) {
+					i10 = z - 1;
+				}
+
+				if(i8 == 3) {
+					++i10;
+				}
+
+				i6 = this.getMaxCurrentStrength(world, i9, y, i10, i6);
+				if(world.isBlockNormalCube(i9, y, i10) && !world.isBlockNormalCube(x, y + 1, z)) {
+					i6 = this.getMaxCurrentStrength(world, i9, y + 1, i10, i6);
+				} else if(!world.isBlockNormalCube(i9, y, i10)) {
+					i6 = this.getMaxCurrentStrength(world, i9, y - 1, i10, i6);
 				}
 			}
 
-			if(var6 > 0) {
-				--var6;
+			if(i6 > 0) {
+				--i6;
 			} else {
-				var6 = 0;
-			}
-		}
-
-		if(var5 != var6) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
-			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-			if(var6 > 0) {
-				--var6;
-			}
-
-			for(var8 = 0; var8 < 4; ++var8) {
-				var9 = var2;
-				var10 = var4;
-				int var11 = var3 - 1;
-				if(var8 == 0) {
-					var9 = var2 - 1;
-				}
-
-				if(var8 == 1) {
-					++var9;
-				}
-
-				if(var8 == 2) {
-					var10 = var4 - 1;
-				}
-
-				if(var8 == 3) {
-					++var10;
-				}
-
-				if(var1.isBlockNormalCube(var9, var3, var10)) {
-					var11 += 2;
-				}
-
-				int var12 = this.getMaxCurrentStrength(var1, var9, var3, var10, -1);
-				if(var12 >= 0 && var12 != var6) {
-					this.updateAndPropagateCurrentStrength(var1, var9, var3, var10);
-				}
-
-				var12 = this.getMaxCurrentStrength(var1, var9, var11, var10, -1);
-				if(var12 >= 0 && var12 != var6) {
-					this.updateAndPropagateCurrentStrength(var1, var9, var11, var10);
-				}
-			}
-
-			if(var5 == 0 || var6 == 0) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-			}
-		}
-
-	}
-
-	private void notifyWireNeighborsOfNeighborChange(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-		}
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		super.onBlockAdded(var1, var2, var3, var4);
-		this.updateAndPropagateCurrentStrength(var1, var2, var3, var4);
-		var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-		var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3, var4);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3, var4);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 - 1);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 + 1);
-		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 + 1, var4);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 - 1, var4);
-		}
-
-		if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 + 1, var4);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 - 1, var4);
-		}
-
-		if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 - 1);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 - 1);
-		}
-
-		if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 + 1);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 + 1);
-		}
-
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		super.onBlockRemoval(var1, var2, var3, var4);
-		var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-		var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-		this.updateAndPropagateCurrentStrength(var1, var2, var3, var4);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3, var4);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3, var4);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 - 1);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 + 1);
-		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 + 1, var4);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 - 1, var4);
-		}
-
-		if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 + 1, var4);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 - 1, var4);
-		}
-
-		if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 - 1);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 - 1);
-		}
-
-		if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 + 1);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 + 1);
-		}
-
-	}
-
-	private int getMaxCurrentStrength(World var1, int var2, int var3, int var4, int var5) {
-		if(var1.getBlockId(var2, var3, var4) != this.blockID) {
-			return var5;
-		} else {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			return var6 > var5 ? var6 : var5;
-		}
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		boolean var7 = this.canPlaceBlockAt(var1, var2, var3, var4);
-		if(!var7) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var6);
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		} else {
-			this.updateAndPropagateCurrentStrength(var1, var2, var3, var4);
-		}
-
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-	}
-
-	public int idDropped(int var1, Random var2) {
+				i6 = 0;
+			}
+		}
+
+		if(i5 != i6) {
+			world.setBlockMetadataWithNotify(x, y, z, i6);
+			world.markBlocksDirty(x, y, z, x, y, z);
+			if(i6 > 0) {
+				--i6;
+			}
+
+			for(i8 = 0; i8 < 4; ++i8) {
+				i9 = x;
+				i10 = z;
+				int i11 = y - 1;
+				if(i8 == 0) {
+					i9 = x - 1;
+				}
+
+				if(i8 == 1) {
+					++i9;
+				}
+
+				if(i8 == 2) {
+					i10 = z - 1;
+				}
+
+				if(i8 == 3) {
+					++i10;
+				}
+
+				if(world.isBlockNormalCube(i9, y, i10)) {
+					i11 += 2;
+				}
+
+				int i12 = this.getMaxCurrentStrength(world, i9, y, i10, -1);
+				if(i12 >= 0 && i12 != i6) {
+					this.updateAndPropagateCurrentStrength(world, i9, y, i10);
+				}
+
+				i12 = this.getMaxCurrentStrength(world, i9, i11, i10, -1);
+				if(i12 >= 0 && i12 != i6) {
+					this.updateAndPropagateCurrentStrength(world, i9, i11, i10);
+				}
+			}
+
+			if(i5 == 0 || i6 == 0) {
+				world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+				world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+				world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+				world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+				world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+				world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+				world.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+			}
+		}
+
+	}
+
+	private void notifyWireNeighborsOfNeighborChange(World world, int x, int y, int z) {
+		if(world.getBlockId(x, y, z) == this.blockID) {
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+		}
+
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		super.onBlockAdded(world, x, y, z);
+		this.updateAndPropagateCurrentStrength(world, x, y, z);
+		world.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+		world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+		this.notifyWireNeighborsOfNeighborChange(world, x - 1, y, z);
+		this.notifyWireNeighborsOfNeighborChange(world, x + 1, y, z);
+		this.notifyWireNeighborsOfNeighborChange(world, x, y, z - 1);
+		this.notifyWireNeighborsOfNeighborChange(world, x, y, z + 1);
+		if(world.isBlockNormalCube(x - 1, y, z)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x - 1, y + 1, z);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x - 1, y - 1, z);
+		}
+
+		if(world.isBlockNormalCube(x + 1, y, z)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x + 1, y + 1, z);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x + 1, y - 1, z);
+		}
+
+		if(world.isBlockNormalCube(x, y, z - 1)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y + 1, z - 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y - 1, z - 1);
+		}
+
+		if(world.isBlockNormalCube(x, y, z + 1)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y + 1, z + 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y - 1, z + 1);
+		}
+
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		super.onBlockRemoval(world, x, y, z);
+		world.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+		world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+		this.updateAndPropagateCurrentStrength(world, x, y, z);
+		this.notifyWireNeighborsOfNeighborChange(world, x - 1, y, z);
+		this.notifyWireNeighborsOfNeighborChange(world, x + 1, y, z);
+		this.notifyWireNeighborsOfNeighborChange(world, x, y, z - 1);
+		this.notifyWireNeighborsOfNeighborChange(world, x, y, z + 1);
+		if(world.isBlockNormalCube(x - 1, y, z)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x - 1, y + 1, z);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x - 1, y - 1, z);
+		}
+
+		if(world.isBlockNormalCube(x + 1, y, z)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x + 1, y + 1, z);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x + 1, y - 1, z);
+		}
+
+		if(world.isBlockNormalCube(x, y, z - 1)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y + 1, z - 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y - 1, z - 1);
+		}
+
+		if(world.isBlockNormalCube(x, y, z + 1)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y + 1, z + 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y - 1, z + 1);
+		}
+
+	}
+
+	private int getMaxCurrentStrength(World world, int x, int y, int z, int integer5) {
+		if(world.getBlockId(x, y, z) != this.blockID) {
+			return integer5;
+		} else {
+			int i6 = world.getBlockMetadata(x, y, z);
+			return i6 > integer5 ? i6 : integer5;
+		}
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		boolean z7 = this.canPlaceBlockAt(world, x, y, z);
+		if(!z7) {
+			this.dropBlockAsItem(world, x, y, z, i6);
+			world.setBlockWithNotify(x, y, z, 0);
+		} else {
+			this.updateAndPropagateCurrentStrength(world, x, y, z);
+		}
+
+		super.onNeighborBlockChange(world, x, y, z, flag);
+	}
+
+	public int idDropped(int count, Random random) {
 		return Item.redstone.shiftedIndex;
 	}
 
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-		return !this.wiresProvidePower ? false : this.isPoweringTo(var1, var2, var3, var4, var5);
+	public boolean isIndirectlyPoweringTo(World world, int x, int y, int z, int flag) {
+		return !this.wiresProvidePower ? false : this.isPoweringTo(world, x, y, z, flag);
 	}
 
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int unused) {
 		if(!this.wiresProvidePower) {
 			return false;
-		} else if(var1.getBlockMetadata(var2, var3, var4) == 0) {
+		} else if(blockAccess.getBlockMetadata(x, y, z) == 0) {
 			return false;
-		} else if(var5 == 1) {
+		} else if(unused == 1) {
 			return true;
 		} else {
-			boolean var6 = isPowerProviderOrWire(var1, var2 - 1, var3, var4) || !var1.isBlockNormalCube(var2 - 1, var3, var4) && isPowerProviderOrWire(var1, var2 - 1, var3 - 1, var4);
-			boolean var7 = isPowerProviderOrWire(var1, var2 + 1, var3, var4) || !var1.isBlockNormalCube(var2 + 1, var3, var4) && isPowerProviderOrWire(var1, var2 + 1, var3 - 1, var4);
-			boolean var8 = isPowerProviderOrWire(var1, var2, var3, var4 - 1) || !var1.isBlockNormalCube(var2, var3, var4 - 1) && isPowerProviderOrWire(var1, var2, var3 - 1, var4 - 1);
-			boolean var9 = isPowerProviderOrWire(var1, var2, var3, var4 + 1) || !var1.isBlockNormalCube(var2, var3, var4 + 1) && isPowerProviderOrWire(var1, var2, var3 - 1, var4 + 1);
-			if(!var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-				if(var1.isBlockNormalCube(var2 - 1, var3, var4) && isPowerProviderOrWire(var1, var2 - 1, var3 + 1, var4)) {
-					var6 = true;
-				}
-
-				if(var1.isBlockNormalCube(var2 + 1, var3, var4) && isPowerProviderOrWire(var1, var2 + 1, var3 + 1, var4)) {
-					var7 = true;
-				}
-
-				if(var1.isBlockNormalCube(var2, var3, var4 - 1) && isPowerProviderOrWire(var1, var2, var3 + 1, var4 - 1)) {
-					var8 = true;
-				}
-
-				if(var1.isBlockNormalCube(var2, var3, var4 + 1) && isPowerProviderOrWire(var1, var2, var3 + 1, var4 + 1)) {
-					var9 = true;
+			boolean z6 = isPowerProviderOrWire(blockAccess, x - 1, y, z) || !blockAccess.isBlockNormalCube(x - 1, y, z) && isPowerProviderOrWire(blockAccess, x - 1, y - 1, z);
+			boolean z7 = isPowerProviderOrWire(blockAccess, x + 1, y, z) || !blockAccess.isBlockNormalCube(x + 1, y, z) && isPowerProviderOrWire(blockAccess, x + 1, y - 1, z);
+			boolean z8 = isPowerProviderOrWire(blockAccess, x, y, z - 1) || !blockAccess.isBlockNormalCube(x, y, z - 1) && isPowerProviderOrWire(blockAccess, x, y - 1, z - 1);
+			boolean z9 = isPowerProviderOrWire(blockAccess, x, y, z + 1) || !blockAccess.isBlockNormalCube(x, y, z + 1) && isPowerProviderOrWire(blockAccess, x, y - 1, z + 1);
+			if(!blockAccess.isBlockNormalCube(x, y + 1, z)) {
+				if(blockAccess.isBlockNormalCube(x - 1, y, z) && isPowerProviderOrWire(blockAccess, x - 1, y + 1, z)) {
+					z6 = true;
+				}
+
+				if(blockAccess.isBlockNormalCube(x + 1, y, z) && isPowerProviderOrWire(blockAccess, x + 1, y + 1, z)) {
+					z7 = true;
+				}
+
+				if(blockAccess.isBlockNormalCube(x, y, z - 1) && isPowerProviderOrWire(blockAccess, x, y + 1, z - 1)) {
+					z8 = true;
+				}
+
+				if(blockAccess.isBlockNormalCube(x, y, z + 1) && isPowerProviderOrWire(blockAccess, x, y + 1, z + 1)) {
+					z9 = true;
 				}
 			}
 
-			return !var8 && !var7 && !var6 && !var9 && var5 >= 2 && var5 <= 5 ? true : (var5 == 2 && var8 && !var6 && !var7 ? true : (var5 == 3 && var9 && !var6 && !var7 ? true : (var5 == 4 && var6 && !var8 && !var9 ? true : var5 == 5 && var7 && !var8 && !var9)));
+			return !z8 && !z7 && !z6 && !z9 && unused >= 2 && unused <= 5 ? true : (unused == 2 && z8 && !z6 && !z7 ? true : (unused == 3 && z9 && !z6 && !z7 ? true : (unused == 4 && z6 && !z8 && !z9 ? true : unused == 5 && z7 && !z8 && !z9)));
 		}
 	}
 
@@ -285,18 +286,18 @@
 		return this.wiresProvidePower;
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getBlockMetadata(var2, var3, var4) > 0) {
-			double var6 = (double)var2 + 0.5D + ((double)var5.nextFloat() - 0.5D) * 0.2D;
-			double var8 = (double)((float)var3 + 1.0F / 16.0F);
-			double var10 = (double)var4 + 0.5D + ((double)var5.nextFloat() - 0.5D) * 0.2D;
-			var1.spawnParticle("reddust", var6, var8, var10, 0.0D, 0.0D, 0.0D);
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+		if(worldObj.getBlockMetadata(x, y, z) > 0) {
+			double d6 = (double)x + 0.5D + ((double)rand.nextFloat() - 0.5D) * 0.2D;
+			double d8 = (double)((float)y + 0.0625F);
+			double d10 = (double)z + 0.5D + ((double)rand.nextFloat() - 0.5D) * 0.2D;
+			worldObj.spawnParticle("reddust", d6, d8, d10, 0.0D, 0.0D, 0.0D);
 		}
 
 	}
 
-	public static boolean isPowerProviderOrWire(IBlockAccess var0, int var1, int var2, int var3) {
-		int var4 = var0.getBlockId(var1, var2, var3);
-		return var4 == Block.redstoneWire.blockID ? true : (var4 == 0 ? false : Block.blocksList[var4].canProvidePower());
+	public static boolean isPowerProviderOrWire(IBlockAccess blockAccess, int x, int y, int z) {
+		int i4 = blockAccess.getBlockId(x, y, z);
+		return i4 == Block.redstoneWire.blockID ? true : (i4 == 0 ? false : Block.blocksList[i4].canProvidePower());
 	}
 }
--- net/minecraft/src/PositionTexureVertex.java
+++ net/minecraft/src/PositionTexureVertex.java
@@ -5,23 +5,23 @@
 	public float texturePositionX;
 	public float texturePositionY;
 
-	public PositionTexureVertex(float var1, float var2, float var3, float var4, float var5) {
-		this(Vec3D.createVectorHelper((double)var1, (double)var2, (double)var3), var4, var5);
-	}
-
-	public PositionTexureVertex setTexturePosition(float var1, float var2) {
-		return new PositionTexureVertex(this, var1, var2);
-	}
-
-	public PositionTexureVertex(PositionTexureVertex var1, float var2, float var3) {
-		this.vector3D = var1.vector3D;
-		this.texturePositionX = var2;
-		this.texturePositionY = var3;
-	}
-
-	public PositionTexureVertex(Vec3D var1, float var2, float var3) {
-		this.vector3D = var1;
-		this.texturePositionX = var2;
-		this.texturePositionY = var3;
+	public PositionTexureVertex(float float1, float float2, float float3, float float4, float float5) {
+		this(Vec3D.createVectorHelper((double)float1, (double)float2, (double)float3), float4, float5);
+	}
+
+	public PositionTexureVertex setTexturePosition(float float1, float float2) {
+		return new PositionTexureVertex(this, float1, float2);
+	}
+
+	public PositionTexureVertex(PositionTexureVertex lj, float float2, float float3) {
+		this.vector3D = lj.vector3D;
+		this.texturePositionX = float2;
+		this.texturePositionY = float3;
+	}
+
+	public PositionTexureVertex(Vec3D adm, float float2, float float3) {
+		this.vector3D = adm;
+		this.texturePositionX = float2;
+		this.texturePositionY = float3;
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandFly.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+class CommandFly extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8570_9oqfZAnfB6D7J749dZJVD66w32nt8gyieBYTogLV81ov75pUcvq58HAc4G35;
+    
+    CommandFly(final CommandManager abb) {
+        this.field_8570_9oqfZAnfB6D7J749dZJVD66w32nt8gyieBYTogLV81ov75pUcvq58HAc4G35 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        if (ScreenDebugMenu.dbg_conf_enableCheats) {
+            ScreenDebugMenu.dbg_conf_fly = !ScreenDebugMenu.dbg_conf_fly;
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return ScreenDebugMenu.dbg_conf_fly ? "1" : "0";
+    }
+}
--- /dev/null
+++ net/minecraft/src/BlockMyconWorkbench.java
@@ -1,0 +1,46 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockMyconWorkbench extends Block {
+	private int field_8345_3fuI59bnYP8mBpa5508srVpEX9Nn8Ii0rP5G0P0o8GVTeB2S7y9u5BeClkBu;
+	private int field_8348_9ssMu3NPxH99HVTTMSSCr5j2975Wk39H8k7ltNSRk86XV6ZNl7fxf2qyX1qK;
+	private int field_8347_6xFn38IznXPshNtuNYjb0r5k09XEwz051kFyNSI9nfZslZx95cBw28AIC64j;
+	private int field_8346_7i756Co46Tzixh0MH7B41QQ3aD4aKr2IfwS68aVBfy5m5mONyZob616cJ9Ps;
+
+	public BlockMyconWorkbench(int integer1, int integer2, int integer3, int integer4) {
+		super(integer1, Material.grass);
+		this.blockIndexInTexture = integer3;
+		this.setTickOnLoad(true);
+		this.field_8345_3fuI59bnYP8mBpa5508srVpEX9Nn8Ii0rP5G0P0o8GVTeB2S7y9u5BeClkBu = integer2;
+		this.field_8348_9ssMu3NPxH99HVTTMSSCr5j2975Wk39H8k7ltNSRk86XV6ZNl7fxf2qyX1qK = integer3;
+		this.field_8347_6xFn38IznXPshNtuNYjb0r5k09XEwz051kFyNSI9nfZslZx95cBw28AIC64j = integer4;
+		this.field_8346_7i756Co46Tzixh0MH7B41QQ3aD4aKr2IfwS68aVBfy5m5mONyZob616cJ9Ps = integer1;
+	}
+
+	public BlockMyconWorkbench(int integer1, int integer2, int integer3, int integer4, Material sx) {
+		super(integer1, sx);
+		this.blockIndexInTexture = integer3;
+		this.setTickOnLoad(true);
+		this.field_8345_3fuI59bnYP8mBpa5508srVpEX9Nn8Ii0rP5G0P0o8GVTeB2S7y9u5BeClkBu = integer2;
+		this.field_8348_9ssMu3NPxH99HVTTMSSCr5j2975Wk39H8k7ltNSRk86XV6ZNl7fxf2qyX1qK = integer3;
+		this.field_8347_6xFn38IznXPshNtuNYjb0r5k09XEwz051kFyNSI9nfZslZx95cBw28AIC64j = integer4;
+		this.field_8346_7i756Co46Tzixh0MH7B41QQ3aD4aKr2IfwS68aVBfy5m5mONyZob616cJ9Ps = integer1;
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.field_8345_3fuI59bnYP8mBpa5508srVpEX9Nn8Ii0rP5G0P0o8GVTeB2S7y9u5BeClkBu : (side == 0 ? this.field_8347_6xFn38IznXPshNtuNYjb0r5k09XEwz051kFyNSI9nfZslZx95cBw28AIC64j : this.field_8348_9ssMu3NPxH99HVTTMSSCr5j2975Wk39H8k7ltNSRk86XV6ZNl7fxf2qyX1qK);
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+	}
+
+	public int idDropped(int count, Random random) {
+		return this.field_8346_7i756Co46Tzixh0MH7B41QQ3aD4aKr2IfwS68aVBfy5m5mONyZob616cJ9Ps;
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		entityPlayer.displayWorkbenchGUI();
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenMyconUnknownClass.java
@@ -1,0 +1,69 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Random;
+
+public abstract class WorldGenMyconUnknownClass {
+	public static final int field_9989_7nMyWcWuvyDrrL2K3w683NnXZ4R3413RLoh7xKe4GtYQ3RfS4Em5W0Vnp6dm = 20;
+	public static final int field_9988_3wJsWrs47vvM7njdJxvcKAYAVN96D0S6RQVL85Tb51qa3Ec8rMKLwe9C09b3 = 46;
+	public final EnumWorldGenerator field_9987_68BA5YA20R63Jvx5mf2f0QY9F5CI712o6GIr96is6zFAg89BWvpL45J8n44Q;
+	public final double field_9985_2Cj4T23zTjZ8P2pnru6eB2r3b229GaFgJC22W2tht5x24XTX4BiGdn4Y6xsC;
+	public final double field_9984_2H7oEc5LBpn2wimwB5bXR08uskktpPvU1435c3fQ20uGKpkjHG1r9q5GXKU2;
+	private static final List field_9986_1gZRfAv6ZC2FpE1cZQrLBSUL7z3y4D60581LY6H69NcHdHE89jdxH2evUizQ = new ArrayList();
+
+	public WorldGenMyconUnknownClass(double double1, double double2, EnumWorldGenerator _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178) {
+		this.field_9985_2Cj4T23zTjZ8P2pnru6eB2r3b229GaFgJC22W2tht5x24XTX4BiGdn4Y6xsC = double1;
+		this.field_9984_2H7oEc5LBpn2wimwB5bXR08uskktpPvU1435c3fQ20uGKpkjHG1r9q5GXKU2 = double2;
+		this.field_9987_68BA5YA20R63Jvx5mf2f0QY9F5CI712o6GIr96is6zFAg89BWvpL45J8n44Q = _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178;
+	}
+
+	public abstract boolean func_9982_84EZjwmgfVpn5brk96GnU3Eit81Yc6Xxm4lTPdVKUWyphKxl38Uh4dg8VF3T(Random random1, World world2, int i3, int i4);
+
+	public abstract void func_9977_0C8cKMHZGkSA22DGYztFv5857z0O34nRumUNAm59CrgBrFnKV5bq3guXEYB5(Random random1);
+
+	public int func_9983_8WfOXonA2bRS7hUpHd7sbe7k20yqj7N6OH13GX3XXy71V13Eva115wQwe47C() {
+		return -1;
+	}
+
+	public static void func_9981_980N8050sF1v352476qOc8mfF92W7H1QatonEr6b738Sxi3vQSvf2K98637h(WorldGenMyconUnknownClass ej) {
+		field_9986_1gZRfAv6ZC2FpE1cZQrLBSUL7z3y4D60581LY6H69NcHdHE89jdxH2evUizQ.add(ej);
+	}
+
+	public static WorldGenMyconUnknownClass func_9978_2dCM22Pc7rV0IQo46JM3ja84x9AHCGNPeSCDVFoTi3969B8hv2sM7nr6o61r(double double1, double double2, EnumWorldGenerator _7l3a6Tam0Vxd19KQkT63iCtqNR2h420RA2x95xyu4i9U8W97QPM0DaNLoKy6FxBd5PckYPo6FXaU6UJmb1ywQ83m63215178) {
+		double d5 = Double.MAX_VALUE;
+		WorldGenMyconUnknownClass worldGenMyconUnknownClass7 = null;
+		Iterator iterator8 = field_9986_1gZRfAv6ZC2FpE1cZQrLBSUL7z3y4D60581LY6H69NcHdHE89jdxH2evUizQ.iterator();
+
+		while(iterator8.hasNext()) {
+			WorldGenMyconUnknownClass worldGenMyconUnknownClass9 = (WorldGenMyconUnknownClass)iterator8.next();
+			double d10 = Math.abs(double1 - worldGenMyconUnknownClass9.field_9985_2Cj4T23zTjZ8P2pnru6eB2r3b229GaFgJC22W2tht5x24XTX4BiGdn4Y6xsC) + Math.abs(double2 - worldGenMyconUnknownClass9.field_9984_2H7oEc5LBpn2wimwB5bXR08uskktpPvU1435c3fQ20uGKpkjHG1r9q5GXKU2);
+			if(d5 > d10) {
+				d5 = d10;
+				worldGenMyconUnknownClass7 = worldGenMyconUnknownClass9;
+			}
+		}
+
+		return worldGenMyconUnknownClass7;
+	}
+
+	public static void func_9980_9oD74IB2ktSl4rKYyq5be1pnGiKcijsDk38XO5US1yU1RgWUN9KZuVmeM2HO() {
+		func_9981_980N8050sF1v352476qOc8mfF92W7H1QatonEr6b738Sxi3vQSvf2K98637h(new WorldGenMyconUnknownClass2(0.2D, 0.2D, EnumWorldGenerator.SURFACE, 0));
+		func_9981_980N8050sF1v352476qOc8mfF92W7H1QatonEr6b738Sxi3vQSvf2K98637h(new WorldGenMyconUnknownClass2(0.3D, 0.3D, EnumWorldGenerator.SURFACE, 1));
+		func_9981_980N8050sF1v352476qOc8mfF92W7H1QatonEr6b738Sxi3vQSvf2K98637h(new WorldGenMyconUnknownClass2(0.4D, 0.3D, EnumWorldGenerator.SURFACE, 2));
+		func_9981_980N8050sF1v352476qOc8mfF92W7H1QatonEr6b738Sxi3vQSvf2K98637h(new WorldGenMyconUnknownClass2(0.2D, 0.2D, EnumWorldGenerator.UNDERGROUND, 0));
+		func_9981_980N8050sF1v352476qOc8mfF92W7H1QatonEr6b738Sxi3vQSvf2K98637h(new WorldGenMyconUnknownClass2(0.1D, 0.3D, EnumWorldGenerator.LOW_RIVER, 0));
+		func_9981_980N8050sF1v352476qOc8mfF92W7H1QatonEr6b738Sxi3vQSvf2K98637h(new WorldGenMycon(0.15D, 0.4D, EnumWorldGenerator.LOW_RIVER));
+	}
+
+	public static void func_9979_9JNUbhbk292KcCQ94Cqr7mT8uN1dJGymij9j6488Z69GSfe4353u9Nj2PWn2(Random random) {
+		Iterator iterator1 = field_9986_1gZRfAv6ZC2FpE1cZQrLBSUL7z3y4D60581LY6H69NcHdHE89jdxH2evUizQ.iterator();
+
+		while(iterator1.hasNext()) {
+			WorldGenMyconUnknownClass worldGenMyconUnknownClass2 = (WorldGenMyconUnknownClass)iterator1.next();
+			worldGenMyconUnknownClass2.func_9977_0C8cKMHZGkSA22DGYztFv5857z0O34nRumUNAm59CrgBrFnKV5bq3guXEYB5(random);
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandMcDiff.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandMcDiff extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8577_96Vfi1QmI584e86OKhC26k47UPY1oneYr6SR8NUv8OyJP3Qg6C1ZcnGDvn7p;
+    
+    CommandMcDiff(final CommandManager abb) {
+        this.field_8577_96Vfi1QmI584e86OKhC26k47UPY1oneYr6SR8NUv8OyJP3Qg6C1ZcnGDvn7p = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.mc.options.difficulty = (int)arr[0];
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "" + InputHandler.mc.options.difficulty;
+    }
+}
--- net/minecraft/src/MetadataChunkBlock.java
+++ net/minecraft/src/MetadataChunkBlock.java
@@ -9,106 +9,106 @@
 	public int maxY;
 	public int maxZ;
 
-	public MetadataChunkBlock(EnumSkyBlock var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		this.skyBlock = var1;
-		this.minX = var2;
-		this.minY = var3;
-		this.minZ = var4;
-		this.maxX = var5;
-		this.maxY = var6;
-		this.maxZ = var7;
+	public MetadataChunkBlock(EnumSkyBlock skyBlock, int x, int y, int z, int maxX, int maxY, int maxZ) {
+		this.skyBlock = skyBlock;
+		this.minX = x;
+		this.minY = y;
+		this.minZ = z;
+		this.maxX = maxX;
+		this.maxY = maxY;
+		this.maxZ = maxZ;
 	}
 
-	public void updateLight(World var1) {
-		int var2 = this.maxX - this.minX;
-		int var3 = this.maxY - this.minY;
-		int var4 = this.maxZ - this.minZ;
-		int var5 = var2 * var3 * var4;
-		if(var5 <= -Short.MIN_VALUE) {
-			for(int var6 = this.minX; var6 <= this.maxX; ++var6) {
-				for(int var7 = this.minZ; var7 <= this.maxZ; ++var7) {
-					if(var1.blockExists(var6, 0, var7)) {
-						for(int var8 = this.minY; var8 <= this.maxY; ++var8) {
-							if(var8 >= 0 && var8 < 128) {
-								int var9 = var1.getSavedLightValue(this.skyBlock, var6, var8, var7);
-								boolean var10 = false;
-								int var11 = var1.getBlockId(var6, var8, var7);
-								int var12 = Block.lightOpacity[var11];
-								if(var12 == 0) {
-									var12 = 1;
+	public void updateLight(World world) {
+		int i2 = this.maxX - this.minX;
+		int i3 = this.maxY - this.minY;
+		int i4 = this.maxZ - this.minZ;
+		int i5 = i2 * i3 * i4;
+		if(i5 <= 32768) {
+			for(int i6 = this.minX; i6 <= this.maxX; ++i6) {
+				for(int i7 = this.minZ; i7 <= this.maxZ; ++i7) {
+					if(world.blockExists(i6, 0, i7)) {
+						for(int i8 = this.minY; i8 <= this.maxY; ++i8) {
+							if(i8 >= 0 && i8 < 128) {
+								int i9 = world.getSavedLightValue(this.skyBlock, i6, i8, i7);
+								boolean z10 = false;
+								int i11 = world.getBlockId(i6, i8, i7);
+								int i12 = Block.lightOpacity[i11];
+								if(i12 == 0) {
+									i12 = 1;
 								}
 
-								int var13 = 0;
+								int i13 = 0;
 								if(this.skyBlock == EnumSkyBlock.Sky) {
-									if(var1.canExistingBlockSeeTheSky(var6, var8, var7)) {
-										var13 = 15;
+									if(world.canExistingBlockSeeTheSky(i6, i8, i7)) {
+										i13 = 15;
 									}
 								} else if(this.skyBlock == EnumSkyBlock.Block) {
-									var13 = Block.lightValue[var11];
+									i13 = Block.lightValue[i11];
 								}
 
-								int var14;
-								int var20;
-								if(var12 >= 15 && var13 == 0) {
-									var20 = 0;
+								int i14;
+								int i15;
+								if(i12 >= 15 && i13 == 0) {
+									i15 = 0;
 								} else {
-									var14 = var1.getSavedLightValue(this.skyBlock, var6 - 1, var8, var7);
-									int var15 = var1.getSavedLightValue(this.skyBlock, var6 + 1, var8, var7);
-									int var16 = var1.getSavedLightValue(this.skyBlock, var6, var8 - 1, var7);
-									int var17 = var1.getSavedLightValue(this.skyBlock, var6, var8 + 1, var7);
-									int var18 = var1.getSavedLightValue(this.skyBlock, var6, var8, var7 - 1);
-									int var19 = var1.getSavedLightValue(this.skyBlock, var6, var8, var7 + 1);
-									var20 = var14;
-									if(var15 > var14) {
-										var20 = var15;
-									}
-
-									if(var16 > var20) {
-										var20 = var16;
-									}
-
-									if(var17 > var20) {
-										var20 = var17;
-									}
-
-									if(var18 > var20) {
-										var20 = var18;
-									}
-
-									if(var19 > var20) {
-										var20 = var19;
-									}
-
-									var20 -= var12;
-									if(var20 < 0) {
-										var20 = 0;
-									}
-
-									if(var13 > var20) {
-										var20 = var13;
+									i14 = world.getSavedLightValue(this.skyBlock, i6 - 1, i8, i7);
+									int i16 = world.getSavedLightValue(this.skyBlock, i6 + 1, i8, i7);
+									int i17 = world.getSavedLightValue(this.skyBlock, i6, i8 - 1, i7);
+									int i18 = world.getSavedLightValue(this.skyBlock, i6, i8 + 1, i7);
+									int i19 = world.getSavedLightValue(this.skyBlock, i6, i8, i7 - 1);
+									int i20 = world.getSavedLightValue(this.skyBlock, i6, i8, i7 + 1);
+									i15 = i14;
+									if(i16 > i14) {
+										i15 = i16;
+									}
+
+									if(i17 > i15) {
+										i15 = i17;
+									}
+
+									if(i18 > i15) {
+										i15 = i18;
+									}
+
+									if(i19 > i15) {
+										i15 = i19;
+									}
+
+									if(i20 > i15) {
+										i15 = i20;
+									}
+
+									i15 -= i12;
+									if(i15 < 0) {
+										i15 = 0;
+									}
+
+									if(i13 > i15) {
+										i15 = i13;
 									}
 								}
 
-								if(var9 != var20) {
-									var1.setLightValue(this.skyBlock, var6, var8, var7, var20);
-									var14 = var20 - 1;
-									if(var14 < 0) {
-										var14 = 0;
-									}
-
-									var1.neighborLightPropagationChanged(this.skyBlock, var6 - 1, var8, var7, var14);
-									var1.neighborLightPropagationChanged(this.skyBlock, var6, var8 - 1, var7, var14);
-									var1.neighborLightPropagationChanged(this.skyBlock, var6, var8, var7 - 1, var14);
-									if(var6 + 1 >= this.maxX) {
-										var1.neighborLightPropagationChanged(this.skyBlock, var6 + 1, var8, var7, var14);
-									}
-
-									if(var8 + 1 >= this.maxY) {
-										var1.neighborLightPropagationChanged(this.skyBlock, var6, var8 + 1, var7, var14);
-									}
-
-									if(var7 + 1 >= this.maxZ) {
-										var1.neighborLightPropagationChanged(this.skyBlock, var6, var8, var7 + 1, var14);
+								if(i9 != i15) {
+									world.setLightValue(this.skyBlock, i6, i8, i7, i15);
+									i14 = i15 - 1;
+									if(i14 < 0) {
+										i14 = 0;
+									}
+
+									world.neighborLightPropagationChanged(this.skyBlock, i6 - 1, i8, i7, i14);
+									world.neighborLightPropagationChanged(this.skyBlock, i6, i8 - 1, i7, i14);
+									world.neighborLightPropagationChanged(this.skyBlock, i6, i8, i7 - 1, i14);
+									if(i6 + 1 >= this.maxX) {
+										world.neighborLightPropagationChanged(this.skyBlock, i6 + 1, i8, i7, i14);
+									}
+
+									if(i8 + 1 >= this.maxY) {
+										world.neighborLightPropagationChanged(this.skyBlock, i6, i8 + 1, i7, i14);
+									}
+
+									if(i7 + 1 >= this.maxZ) {
+										world.neighborLightPropagationChanged(this.skyBlock, i6, i8, i7 + 1, i14);
 									}
 								}
 							}
@@ -116,55 +116,55 @@
 					}
 				}
 			}
-
 		}
+
 	}
 
-	public boolean getLightUpdated(int var1, int var2, int var3, int var4, int var5, int var6) {
-		if(var1 >= this.minX && var2 >= this.minY && var3 >= this.minZ && var4 <= this.maxX && var5 <= this.maxY && var6 <= this.maxZ) {
+	public boolean getLightUpdated(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		if(minX >= this.minX && minY >= this.minY && minZ >= this.minZ && maxX <= this.maxX && maxY <= this.maxY && maxZ <= this.maxZ) {
 			return true;
 		} else {
-			byte var7 = 1;
-			if(var1 >= this.minX - var7 && var2 >= this.minY - var7 && var3 >= this.minZ - var7 && var4 <= this.maxX + var7 && var5 <= this.maxY + var7 && var6 <= this.maxZ + var7) {
-				int var8 = this.maxX - this.minX;
-				int var9 = this.maxY - this.minY;
-				int var10 = this.maxZ - this.minZ;
-				if(var1 > this.minX) {
-					var1 = this.minX;
-				}
-
-				if(var2 > this.minY) {
-					var2 = this.minY;
-				}
-
-				if(var3 > this.minZ) {
-					var3 = this.minZ;
-				}
-
-				if(var4 < this.maxX) {
-					var4 = this.maxX;
-				}
-
-				if(var5 < this.maxY) {
-					var5 = this.maxY;
-				}
-
-				if(var6 < this.maxZ) {
-					var6 = this.maxZ;
-				}
-
-				int var11 = var4 - var1;
-				int var12 = var5 - var2;
-				int var13 = var6 - var3;
-				int var14 = var8 * var9 * var10;
-				int var15 = var11 * var12 * var13;
-				if(var15 - var14 <= 2) {
-					this.minX = var1;
-					this.minY = var2;
-					this.minZ = var3;
-					this.maxX = var4;
-					this.maxY = var5;
-					this.maxZ = var6;
+			byte b7 = 1;
+			if(minX >= this.minX - b7 && minY >= this.minY - b7 && minZ >= this.minZ - b7 && maxX <= this.maxX + b7 && maxY <= this.maxY + b7 && maxZ <= this.maxZ + b7) {
+				int i8 = this.maxX - this.minX;
+				int i9 = this.maxY - this.minY;
+				int i10 = this.maxZ - this.minZ;
+				if(minX > this.minX) {
+					minX = this.minX;
+				}
+
+				if(minY > this.minY) {
+					minY = this.minY;
+				}
+
+				if(minZ > this.minZ) {
+					minZ = this.minZ;
+				}
+
+				if(maxX < this.maxX) {
+					maxX = this.maxX;
+				}
+
+				if(maxY < this.maxY) {
+					maxY = this.maxY;
+				}
+
+				if(maxZ < this.maxZ) {
+					maxZ = this.maxZ;
+				}
+
+				int i11 = maxX - minX;
+				int i12 = maxY - minY;
+				int i13 = maxZ - minZ;
+				int i14 = i8 * i9 * i10;
+				int i15 = i11 * i12 * i13;
+				if(i15 - i14 <= 2) {
+					this.minX = minX;
+					this.minY = minY;
+					this.minZ = minZ;
+					this.maxX = maxX;
+					this.maxY = maxY;
+					this.maxZ = maxZ;
 					return true;
 				}
 			}
--- net/minecraft/src/GuiCrafting.java
+++ net/minecraft/src/GuiCrafting.java
@@ -5,25 +5,25 @@
 public class GuiCrafting extends GuiContainer {
 	public CraftingInventoryWorkbenchCB craftingInventory = new CraftingInventoryWorkbenchCB();
 
-	public GuiCrafting(InventoryPlayer var1) {
+	public GuiCrafting(InventoryPlayer bb) {
 		this.inventorySlots.add(new SlotCrafting(this, this.craftingInventory.craftMatrix, this.craftingInventory.craftResult, 0, 124, 35));
 
-		int var2;
-		int var3;
-		for(var2 = 0; var2 < 3; ++var2) {
-			for(var3 = 0; var3 < 3; ++var3) {
-				this.inventorySlots.add(new SlotInventory(this, this.craftingInventory.craftMatrix, var3 + var2 * 3, 30 + var3 * 18, 17 + var2 * 18));
-			}
-		}
-
-		for(var2 = 0; var2 < 3; ++var2) {
-			for(var3 = 0; var3 < 9; ++var3) {
-				this.inventorySlots.add(new SlotInventory(this, var1, var3 + (var2 + 1) * 9, 8 + var3 * 18, 84 + var2 * 18));
-			}
-		}
-
-		for(var2 = 0; var2 < 9; ++var2) {
-			this.inventorySlots.add(new SlotInventory(this, var1, var2, 8 + var2 * 18, 142));
+		int i2;
+		int i3;
+		for(i2 = 0; i2 < 3; ++i2) {
+			for(i3 = 0; i3 < 3; ++i3) {
+				this.inventorySlots.add(new SlotInventory(this, this.craftingInventory.craftMatrix, i3 + i2 * 3, 30 + i3 * 18, 17 + i2 * 18));
+			}
+		}
+
+		for(i2 = 0; i2 < 3; ++i2) {
+			for(i3 = 0; i3 < 9; ++i3) {
+				this.inventorySlots.add(new SlotInventory(this, bb, i3 + (i2 + 1) * 9, 8 + i3 * 18, 84 + i2 * 18));
+			}
+		}
+
+		for(i2 = 0; i2 < 9; ++i2) {
+			this.inventorySlots.add(new SlotInventory(this, bb, i2, 8 + i2 * 18, 142));
 		}
 
 	}
@@ -34,16 +34,16 @@
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
-		this.fontRenderer.drawString("Crafting", 28, 6, 4210752);
-		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, 4210752);
+		this.fontRenderer.drawString("Crafting", 28, 6, 0xFFFFFF);
+		this.fontRenderer.drawString("Inventory", 8, this.ySize - 96 + 2, 0xFFFFFF);
 	}
 
-	protected void drawGuiContainerBackgroundLayer(float var1) {
-		int var2 = this.mc.renderEngine.getTexture("/gui/crafting.png");
+	protected void drawGuiContainerBackgroundLayer(float renderPartialTick) {
+		int i2 = this.mc.renderEngine.getTexture("/gui/crafting.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.mc.renderEngine.bindTexture(var2);
-		int var3 = (this.width - this.xSize) / 2;
-		int var4 = (this.height - this.ySize) / 2;
-		this.drawTexturedModalRect(var3, var4, 0, 0, this.xSize, this.ySize);
+		this.mc.renderEngine.bindTexture(i2);
+		int i3 = (this.width - this.xSize) / 2;
+		int i4 = (this.height - this.ySize) / 2;
+		this.drawTexturedModalRect(i3, i4, 0, 0, this.xSize, this.ySize);
 	}
 }
--- net/minecraft/src/RenderPainting.java
+++ net/minecraft/src/RenderPainting.java
@@ -1,119 +1,121 @@
 package net.minecraft.src;
 
 import java.util.Random;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
 public class RenderPainting extends Render {
 	private Random rand = new Random();
+	public final float ArtTextureSize = 512.0F;
 
-	public void renderThePainting(EntityPainting var1, double var2, double var4, double var6, float var8, float var9) {
+	public void renderThePainting(EntityPainting du, double double2, double double3, double double4, float float5, float float6) {
 		this.rand.setSeed(187L);
 		GL11.glPushMatrix();
-		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
-		GL11.glRotatef(var8, 0.0F, 1.0F, 0.0F);
+		GL11.glTranslatef((float)double2, (float)double3, (float)double4);
+		GL11.glRotatef(float5, 0.0F, 1.0F, 0.0F);
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 		this.loadTexture("/art/kz.png");
-		EnumArt var10 = var1.art;
-		float var11 = 1.0F / 16.0F;
-		GL11.glScalef(var11, var11, var11);
-		this.setSizes(var1, var10.sizeX, var10.sizeY, var10.offsetX, var10.offsetY);
+		EnumArt enumArt10 = du.art;
+		float f11 = 0.0625F;
+		GL11.glScalef(f11, f11, f11);
+		this.setSizes(du, enumArt10.sizeX, enumArt10.sizeY, enumArt10.offsetX, enumArt10.offsetY);
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
 		GL11.glPopMatrix();
 	}
 
-	private void setSizes(EntityPainting var1, int var2, int var3, int var4, int var5) {
-		float var6 = (float)(-var2) / 2.0F;
-		float var7 = (float)(-var3) / 2.0F;
-		float var8 = -0.5F;
-		float var9 = 0.5F;
+	private void setSizes(EntityPainting entityPainting, int integer2, int integer3, int integer4, int integer5) {
+		float f6 = (float)(-integer2) / 2.0F;
+		float f7 = (float)(-integer3) / 2.0F;
+		float f8 = -0.5F;
+		float f9 = 0.5F;
 
-		for(int var10 = 0; var10 < var2 / 16; ++var10) {
-			for(int var11 = 0; var11 < var3 / 16; ++var11) {
-				float var12 = var6 + (float)((var10 + 1) * 16);
-				float var13 = var6 + (float)(var10 * 16);
-				float var14 = var7 + (float)((var11 + 1) * 16);
-				float var15 = var7 + (float)(var11 * 16);
-				this.getOffset(var1, (var12 + var13) / 2.0F, (var14 + var15) / 2.0F);
-				float var16 = (float)(var4 + var2 - var10 * 16) / 256.0F;
-				float var17 = (float)(var4 + var2 - (var10 + 1) * 16) / 256.0F;
-				float var18 = (float)(var5 + var3 - var11 * 16) / 256.0F;
-				float var19 = (float)(var5 + var3 - (var11 + 1) * 16) / 256.0F;
-				float var20 = 12.0F / 16.0F;
-				float var21 = 13.0F / 16.0F;
-				float var22 = 0.0F;
-				float var23 = 1.0F / 16.0F;
-				float var24 = 12.0F / 16.0F;
-				float var25 = 13.0F / 16.0F;
-				float var26 = 0.001953125F;
-				float var27 = 0.001953125F;
-				float var28 = 385.0F / 512.0F;
-				float var29 = 385.0F / 512.0F;
-				float var30 = 0.0F;
-				float var31 = 1.0F / 16.0F;
-				Tessellator var32 = Tessellator.instance;
-				var32.startDrawingQuads();
-				var32.setNormal(0.0F, 0.0F, -1.0F);
-				var32.addVertexWithUV((double)var12, (double)var15, (double)var8, (double)var17, (double)var18);
-				var32.addVertexWithUV((double)var13, (double)var15, (double)var8, (double)var16, (double)var18);
-				var32.addVertexWithUV((double)var13, (double)var14, (double)var8, (double)var16, (double)var19);
-				var32.addVertexWithUV((double)var12, (double)var14, (double)var8, (double)var17, (double)var19);
-				var32.setNormal(0.0F, 0.0F, 1.0F);
-				var32.addVertexWithUV((double)var12, (double)var14, (double)var9, (double)var20, (double)var22);
-				var32.addVertexWithUV((double)var13, (double)var14, (double)var9, (double)var21, (double)var22);
-				var32.addVertexWithUV((double)var13, (double)var15, (double)var9, (double)var21, (double)var23);
-				var32.addVertexWithUV((double)var12, (double)var15, (double)var9, (double)var20, (double)var23);
-				var32.setNormal(0.0F, -1.0F, 0.0F);
-				var32.addVertexWithUV((double)var12, (double)var14, (double)var8, (double)var24, (double)var26);
-				var32.addVertexWithUV((double)var13, (double)var14, (double)var8, (double)var25, (double)var26);
-				var32.addVertexWithUV((double)var13, (double)var14, (double)var9, (double)var25, (double)var27);
-				var32.addVertexWithUV((double)var12, (double)var14, (double)var9, (double)var24, (double)var27);
-				var32.setNormal(0.0F, 1.0F, 0.0F);
-				var32.addVertexWithUV((double)var12, (double)var15, (double)var9, (double)var24, (double)var26);
-				var32.addVertexWithUV((double)var13, (double)var15, (double)var9, (double)var25, (double)var26);
-				var32.addVertexWithUV((double)var13, (double)var15, (double)var8, (double)var25, (double)var27);
-				var32.addVertexWithUV((double)var12, (double)var15, (double)var8, (double)var24, (double)var27);
-				var32.setNormal(-1.0F, 0.0F, 0.0F);
-				var32.addVertexWithUV((double)var12, (double)var14, (double)var9, (double)var29, (double)var30);
-				var32.addVertexWithUV((double)var12, (double)var15, (double)var9, (double)var29, (double)var31);
-				var32.addVertexWithUV((double)var12, (double)var15, (double)var8, (double)var28, (double)var31);
-				var32.addVertexWithUV((double)var12, (double)var14, (double)var8, (double)var28, (double)var30);
-				var32.setNormal(1.0F, 0.0F, 0.0F);
-				var32.addVertexWithUV((double)var13, (double)var14, (double)var8, (double)var29, (double)var30);
-				var32.addVertexWithUV((double)var13, (double)var15, (double)var8, (double)var29, (double)var31);
-				var32.addVertexWithUV((double)var13, (double)var15, (double)var9, (double)var28, (double)var31);
-				var32.addVertexWithUV((double)var13, (double)var14, (double)var9, (double)var28, (double)var30);
-				var32.draw();
+		for(int i10 = 0; i10 < integer2 / 16; ++i10) {
+			for(int i11 = 0; i11 < integer3 / 16; ++i11) {
+				float f12 = f6 + (float)((i10 + 1) * 16);
+				float f13 = f6 + (float)(i10 * 16);
+				float f14 = f7 + (float)((i11 + 1) * 16);
+				float f15 = f7 + (float)(i11 * 16);
+				this.getOffset(entityPainting, (f12 + f13) / 2.0F, (f14 + f15) / 2.0F);
+				float f16 = (float)(integer4 + integer2 - i10 * 16) / 512.0F;
+				float f17 = (float)(integer4 + integer2 - (i10 + 1) * 16) / 512.0F;
+				float f18 = (float)(integer5 + integer3 - i11 * 16) / 512.0F;
+				float f19 = (float)(integer5 + integer3 - (i11 + 1) * 16) / 512.0F;
+				float f20 = 0.875F;
+				float f21 = 0.90625F;
+				float f22 = 0.0F;
+				float f23 = 0.03125F;
+				float f24 = 0.875F;
+				float f25 = 0.90625F;
+				float f26 = 9.765625E-4F;
+				float f27 = 9.765625E-4F;
+				float f28 = 0.87597656F;
+				float f29 = 0.87597656F;
+				float f30 = 0.0F;
+				float f31 = 0.03125F;
+				Tessellator tessellator32 = Tessellator.instance;
+				tessellator32.startDrawingQuads();
+				tessellator32.setNormal(0.0F, 0.0F, -1.0F);
+				tessellator32.addVertexWithUV((double)f12, (double)f15, (double)f8, (double)f17, (double)f18);
+				tessellator32.addVertexWithUV((double)f13, (double)f15, (double)f8, (double)f16, (double)f18);
+				tessellator32.addVertexWithUV((double)f13, (double)f14, (double)f8, (double)f16, (double)f19);
+				tessellator32.addVertexWithUV((double)f12, (double)f14, (double)f8, (double)f17, (double)f19);
+				tessellator32.setNormal(0.0F, 0.0F, 1.0F);
+				tessellator32.addVertexWithUV((double)f12, (double)f14, (double)f9, (double)f20, (double)f22);
+				tessellator32.addVertexWithUV((double)f13, (double)f14, (double)f9, (double)f21, (double)f22);
+				tessellator32.addVertexWithUV((double)f13, (double)f15, (double)f9, (double)f21, (double)f23);
+				tessellator32.addVertexWithUV((double)f12, (double)f15, (double)f9, (double)f20, (double)f23);
+				tessellator32.setNormal(0.0F, -1.0F, 0.0F);
+				tessellator32.addVertexWithUV((double)f12, (double)f14, (double)f8, (double)f24, (double)f26);
+				tessellator32.addVertexWithUV((double)f13, (double)f14, (double)f8, (double)f25, (double)f26);
+				tessellator32.addVertexWithUV((double)f13, (double)f14, (double)f9, (double)f25, (double)f27);
+				tessellator32.addVertexWithUV((double)f12, (double)f14, (double)f9, (double)f24, (double)f27);
+				tessellator32.setNormal(0.0F, 1.0F, 0.0F);
+				tessellator32.addVertexWithUV((double)f12, (double)f15, (double)f9, (double)f24, (double)f26);
+				tessellator32.addVertexWithUV((double)f13, (double)f15, (double)f9, (double)f25, (double)f26);
+				tessellator32.addVertexWithUV((double)f13, (double)f15, (double)f8, (double)f25, (double)f27);
+				tessellator32.addVertexWithUV((double)f12, (double)f15, (double)f8, (double)f24, (double)f27);
+				tessellator32.setNormal(-1.0F, 0.0F, 0.0F);
+				tessellator32.addVertexWithUV((double)f12, (double)f14, (double)f9, (double)f29, (double)f30);
+				tessellator32.addVertexWithUV((double)f12, (double)f15, (double)f9, (double)f29, (double)f31);
+				tessellator32.addVertexWithUV((double)f12, (double)f15, (double)f8, (double)f28, (double)f31);
+				tessellator32.addVertexWithUV((double)f12, (double)f14, (double)f8, (double)f28, (double)f30);
+				tessellator32.setNormal(1.0F, 0.0F, 0.0F);
+				tessellator32.addVertexWithUV((double)f13, (double)f14, (double)f8, (double)f29, (double)f30);
+				tessellator32.addVertexWithUV((double)f13, (double)f15, (double)f8, (double)f29, (double)f31);
+				tessellator32.addVertexWithUV((double)f13, (double)f15, (double)f9, (double)f28, (double)f31);
+				tessellator32.addVertexWithUV((double)f13, (double)f14, (double)f9, (double)f28, (double)f30);
+				tessellator32.draw();
 			}
 		}
 
 	}
 
-	private void getOffset(EntityPainting var1, float var2, float var3) {
-		int var4 = MathHelper.floor_double(var1.posX);
-		int var5 = MathHelper.floor_double(var1.posY + (double)(var3 / 16.0F));
-		int var6 = MathHelper.floor_double(var1.posZ);
-		if(var1.direction == 0) {
-			var4 = MathHelper.floor_double(var1.posX + (double)(var2 / 16.0F));
-		}
-
-		if(var1.direction == 1) {
-			var6 = MathHelper.floor_double(var1.posZ - (double)(var2 / 16.0F));
-		}
-
-		if(var1.direction == 2) {
-			var4 = MathHelper.floor_double(var1.posX - (double)(var2 / 16.0F));
-		}
-
-		if(var1.direction == 3) {
-			var6 = MathHelper.floor_double(var1.posZ + (double)(var2 / 16.0F));
-		}
-
-		float var7 = this.renderManager.worldObj.getBrightness(var4, var5, var6);
-		GL11.glColor3f(var7, var7, var7);
+	private void getOffset(EntityPainting entityPainting, float float2, float float3) {
+		int i4 = MathHelper.floor_double(entityPainting.posX);
+		int i5 = MathHelper.floor_double(entityPainting.posY + (double)(float3 / 16.0F));
+		int i6 = MathHelper.floor_double(entityPainting.posZ);
+		if(entityPainting.direction == 0) {
+			i4 = MathHelper.floor_double(entityPainting.posX + (double)(float2 / 16.0F));
+		}
+
+		if(entityPainting.direction == 1) {
+			i6 = MathHelper.floor_double(entityPainting.posZ - (double)(float2 / 16.0F));
+		}
+
+		if(entityPainting.direction == 2) {
+			i4 = MathHelper.floor_double(entityPainting.posX - (double)(float2 / 16.0F));
+		}
+
+		if(entityPainting.direction == 3) {
+			i6 = MathHelper.floor_double(entityPainting.posZ + (double)(float2 / 16.0F));
+		}
+
+		float f7 = this.renderManager.worldObj.getBrightness(i4, i5, i6);
+		GL11.glColor3f(f7, f7, f7);
 	}
 
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderThePainting((EntityPainting)var1, var2, var4, var6, var8, var9);
+	public void doRender(Entity xy, double double2, double double3, double double4, float float5, float float6) {
+		this.renderThePainting((EntityPainting)xy, double2, double3, double4, float5, float6);
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockMinecartTrackOld.java
@@ -1,0 +1,94 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockMinecartTrackOld extends BlockOld {
+	protected BlockMinecartTrackOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.circuits);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		return null;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public MovingObjectPosition collisionRayTrace(World vg, int integer2, int integer3, int integer4, Vec3D adm5, Vec3D adm6) {
+		this.setBlockBoundsBasedOnState(vg, integer2, integer3, integer4);
+		return super.collisionRayTrace(vg, integer2, integer3, integer4, adm5, adm6);
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess abt, int integer2, int integer3, int integer4) {
+		int i5 = abt.getBlockMetadata(integer2, integer3, integer4);
+		if(i5 >= 2 && i5 <= 5) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.625F, 1.0F);
+		} else {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
+		}
+
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int integer1, int integer2) {
+		return integer2 >= 6 ? this.blockIndexInTexture - 16 : this.blockIndexInTexture;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 9;
+	}
+
+	public int quantityDropped(Random random) {
+		return 1;
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		return vg.isBlockNormalCube(integer2, integer3 - 1, integer4);
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+		vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 15);
+		this.refreshTrackShape(vg, integer2, integer3, integer4);
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		boolean z7 = false;
+		if(!vg.isBlockNormalCube(integer2, integer3 - 1, integer4)) {
+			z7 = true;
+		}
+
+		if(i6 == 2 && !vg.isBlockNormalCube(integer2 + 1, integer3, integer4)) {
+			z7 = true;
+		}
+
+		if(i6 == 3 && !vg.isBlockNormalCube(integer2 - 1, integer3, integer4)) {
+			z7 = true;
+		}
+
+		if(i6 == 4 && !vg.isBlockNormalCube(integer2, integer3, integer4 - 1)) {
+			z7 = true;
+		}
+
+		if(i6 == 5 && !vg.isBlockNormalCube(integer2, integer3, integer4 + 1)) {
+			z7 = true;
+		}
+
+		if(z7) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+		} else if(integer5 > 0 && BlockOld.blocksList[integer5].canProvidePower() && MinecartTrackLogic.getNAdjacentTracks(new MinecartTrackLogic(this, vg, integer2, integer3, integer4)) == 3) {
+			this.refreshTrackShape(vg, integer2, integer3, integer4);
+		}
+
+	}
+
+	private void refreshTrackShape(World vg, int integer2, int integer3, int integer4) {
+		(new MinecartTrackLogic(this, vg, integer2, integer3, integer4)).place(vg.isBlockIndirectlyGettingPowered(integer2, integer3, integer4));
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiZM.java
@@ -1,0 +1,91 @@
+package net.minecraft.src;
+
+import java.io.File;
+
+import net.minecraft.client.Minecraft;
+
+public class GuiZM extends GuiScreen {
+	protected GuiScreen field_7937_2c5I6Dup29N5J3rSaeDLAz8akBfuiJB2T87G93ECD92zh46QR3zlBs957sYi;
+	protected String field_7936_0Kb8BwYkClxWghZz9cT0YVBd35D3xDd6ZvR5nkqjczTmklId8t2b33x9Z4AF = "ZOMBIES";
+	private boolean field_7938_7lO83KM6WXSTOBAWD0AM0JlzD39uVa0q05J3LKP0V52BbRN7iO9ltbZKa2u8 = false;
+
+	public GuiZM(GuiScreen hr) {
+		this.field_7937_2c5I6Dup29N5J3rSaeDLAz8akBfuiJB2T87G93ECD92zh46QR3zlBs957sYi = hr;
+	}
+
+	public void func_7932_7N3VX99600qE9rm9NM7VV5A8mO14MK4TEF6lJ5U39v6Cga4yzBU5kLc71WuC() {
+		while(this.controlList.size() > 2) {
+			this.controlList.remove(2);
+		}
+
+		File file1 = Minecraft.getMinecraftDir();
+		this.controlList.add(new GuiButton(5, this.width / 2 - 100, this.height / 6, this.func_7934_7Jz99c4j0Jg06V5JXD9oR633F1pFzY5fB5580ZWqF1IA1S2uCo5i153791LJ(5)));
+		this.controlList.add(new GuiButton(6, this.width / 2 - 100, this.height / 6 + 20, this.func_7934_7Jz99c4j0Jg06V5JXD9oR633F1pFzY5fB5580ZWqF1IA1S2uCo5i153791LJ(6)));
+	}
+
+	public void initGui() {
+		this.controlList.clear();
+		this.func_7933_63l4f3KKjCiNYBydIQ18QwRLEQVBRS5VSt8X441XZoe1G30t1p87R0wK0REN();
+		this.func_7932_7N3VX99600qE9rm9NM7VV5A8mO14MK4TEF6lJ5U39v6Cga4yzBU5kLc71WuC();
+		InputHandler.mc.sndManager.func_12031_514dv3mYU7t95lOh23lLhBI10XBv07D8y61Goe1u7G926JNt2Y1WIoiHj5tm("Condemned", true);
+	}
+
+	protected String func_7934_7Jz99c4j0Jg06V5JXD9oR633F1pFzY5fB5580ZWqF1IA1S2uCo5i153791LJ(int integer) {
+		switch(integer) {
+		case 5:
+			return "[ZM] Ruinen der Untoten";
+		case 6:
+			return "[ZM] Metsan Talo";
+		default:
+			return "???";
+		}
+	}
+
+	public void func_7933_63l4f3KKjCiNYBydIQ18QwRLEQVBRS5VSt8X441XZoe1G30t1p87R0wK0REN() {
+		this.controlList.add(new GuiButton(-2, this.width / 2 - 100, this.height / 6 + 168, "Back"));
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		if(button.enabled) {
+			if(button.id > -1) {
+				switch(button.id) {
+				case 5:
+					this.func_7935_1446dIf8e38igLE83v9lx7cgqGJVShz37wq0K96eWHntiN6737PK752mK2U6("/zombies/WorldZM1", WorldZMSpawnWorld1.class);
+					break;
+				case 6:
+					this.func_7935_1446dIf8e38igLE83v9lx7cgqGJVShz37wq0K96eWHntiN6737PK752mK2U6("/zombies/WorldZM2", WorldZMSpawnWorld2.class);
+				}
+			} else if(button.id == -2) {
+				InputHandler.mc.sndManager.func_12031_514dv3mYU7t95lOh23lLhBI10XBv07D8y61Goe1u7G926JNt2Y1WIoiHj5tm("mainmenu", true);
+				this.mc.displayGuiScreen(this.field_7937_2c5I6Dup29N5J3rSaeDLAz8akBfuiJB2T87G93ECD92zh46QR3zlBs957sYi);
+			}
+		}
+
+	}
+
+	public void func_7935_1446dIf8e38igLE83v9lx7cgqGJVShz37wq0K96eWHntiN6737PK752mK2U6(String string, Class class2) {
+		((BlockHidable)ExtBlocks.BarrierBlock).render = false;
+		this.mc.displayGuiScreen((GuiScreen)null);
+		if(!this.field_7938_7lO83KM6WXSTOBAWD0AM0JlzD39uVa0q05J3LKP0V52BbRN7iO9ltbZKa2u8) {
+			this.field_7938_7lO83KM6WXSTOBAWD0AM0JlzD39uVa0q05J3LKP0V52BbRN7iO9ltbZKa2u8 = true;
+			this.mc.playerController = new PlayerControllerZombieMode(this.mc);
+			this.mc.func_7221_71au6k35k5FtG2NSeEY81nM6cEMq9s813ZJ5zelgNb1pyX20syXDH0z15gpb(string, class2);
+			this.mc.displayGuiScreen((GuiScreen)null);
+		}
+
+	}
+
+	protected void keyTyped(char character, int key) {
+		if(key == 1) {
+			InputHandler.mc.sndManager.func_12031_514dv3mYU7t95lOh23lLhBI10XBv07D8y61Goe1u7G926JNt2Y1WIoiHj5tm("mainmenu", true);
+		}
+
+		super.keyTyped(character, key);
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		this.drawDefaultBackground();
+		this.drawCenteredString(this.fontRenderer, this.field_7936_0Kb8BwYkClxWghZz9cT0YVBd35D3xDd6ZvR5nkqjczTmklId8t2b33x9Z4AF, this.width / 2, 20, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
+	}
+}
--- net/minecraft/src/WorldGenReed.java
+++ net/minecraft/src/WorldGenReed.java
@@ -3,17 +3,17 @@
 import java.util.Random;
 
 public class WorldGenReed extends WorldGenerator {
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		for(int var6 = 0; var6 < 20; ++var6) {
-			int var7 = var3 + var2.nextInt(4) - var2.nextInt(4);
-			int var8 = var4;
-			int var9 = var5 + var2.nextInt(4) - var2.nextInt(4);
-			if(var1.getBlockId(var7, var4, var9) == 0 && (var1.getBlockMaterial(var7 - 1, var4 - 1, var9) == Material.water || var1.getBlockMaterial(var7 + 1, var4 - 1, var9) == Material.water || var1.getBlockMaterial(var7, var4 - 1, var9 - 1) == Material.water || var1.getBlockMaterial(var7, var4 - 1, var9 + 1) == Material.water)) {
-				int var10 = 2 + var2.nextInt(var2.nextInt(3) + 1);
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 20; ++i6) {
+			int i7 = x + rand.nextInt(4) - rand.nextInt(4);
+			int i8 = y;
+			int i9 = z + rand.nextInt(4) - rand.nextInt(4);
+			if(world.getBlockId(i7, y, i9) == 0 && (world.getBlockMaterial(i7 - 1, y - 1, i9) == Material.water || world.getBlockMaterial(i7 + 1, y - 1, i9) == Material.water || world.getBlockMaterial(i7, y - 1, i9 - 1) == Material.water || world.getBlockMaterial(i7, y - 1, i9 + 1) == Material.water)) {
+				int i10 = 2 + rand.nextInt(rand.nextInt(3) + 1);
 
-				for(int var11 = 0; var11 < var10; ++var11) {
-					if(Block.reed.canBlockStay(var1, var7, var8 + var11, var9)) {
-						var1.setBlock(var7, var8 + var11, var9, Block.reed.blockID);
+				for(int i11 = 0; i11 < i10; ++i11) {
+					if(Block.reed.canBlockStay(world, i7, i8 + i11, i9)) {
+						world.setBlock(i7, i8 + i11, i9, Block.reed.blockID);
 					}
 				}
 			}
--- net/minecraft/src/GuiDeleteWorld.java
+++ net/minecraft/src/GuiDeleteWorld.java
@@ -1,30 +1,31 @@
 package net.minecraft.src;
 
 import java.io.File;
+
 import net.minecraft.client.Minecraft;
 
 public class GuiDeleteWorld extends GuiSelectWorld {
-	public GuiDeleteWorld(GuiScreen var1) {
-		super(var1);
+	public GuiDeleteWorld(GuiScreen hr) {
+		super(hr);
 		this.screenTitle = "Delete world";
 	}
 
 	public void initButtons() {
-		this.controlList.add(new GuiButton(6, this.width / 2 - 100, this.height / 6 + 168, "Cancel"));
+		this.controlList.add(new GuiButton(-2, this.width / 2 - 100, this.height / 6 + 168, "Cancel"));
 	}
 
-	public void selectWorld(int var1) {
-		String var2 = this.getSaveName(var1);
-		if(var2 != null) {
-			this.mc.displayGuiScreen(new GuiYesNo(this, "Are you sure you want to delete this world?", "\'" + var2 + "\' will be lost forever!", var1));
+	public void selectWorld(int integer) {
+		String string2 = this.getSaveName(integer);
+		if(string2 != null) {
+			this.mc.displayGuiScreen(new GuiYesNo(this, "Are you sure you want to delete this world?", "\'" + string2 + "\' will be lost forever!", integer));
 		}
 
 	}
 
-	public void deleteWorld(boolean var1, int var2) {
-		if(var1) {
-			File var3 = Minecraft.getMinecraftDir();
-			World.deleteWorld(var3, this.getSaveName(var2));
+	public void deleteWorld(boolean boolean1, int integer) {
+		if(boolean1) {
+			File file3 = Minecraft.getMinecraftDir();
+			World.deleteWorld(file3, this.getSaveName(integer));
 		}
 
 		this.mc.displayGuiScreen(this.parentScreen);
--- net/minecraft/src/BlockButton.java
+++ net/minecraft/src/BlockButton.java
@@ -3,12 +3,12 @@
 import java.util.Random;
 
 public class BlockButton extends Block {
-	protected BlockButton(int var1, int var2) {
-		super(var1, var2, Material.circuits);
+	protected BlockButton(int id, int blockIndex) {
+		super(id, blockIndex, Material.circuits);
 		this.setTickOnLoad(true);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -24,173 +24,173 @@
 		return false;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2 - 1, var3, var4) ? true : (var1.isBlockNormalCube(var2 + 1, var3, var4) ? true : (var1.isBlockNormalCube(var2, var3, var4 - 1) ? true : var1.isBlockNormalCube(var2, var3, var4 + 1)));
-	}
-
-	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		int var7 = var6 & 8;
-		var6 &= 7;
-		if(var5 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var6 = 4;
-		}
-
-		if(var5 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var6 = 3;
-		}
-
-		if(var5 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var6 = 2;
-		}
-
-		if(var5 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var6 = 1;
-		}
-
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var6 + var7);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-		} else if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 2);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 3);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 4);
-		}
-
-		this.checkIfAttachedToBlock(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(this.checkIfAttachedToBlock(var1, var2, var3, var4)) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4) & 7;
-			boolean var7 = false;
-			if(!var1.isBlockNormalCube(var2 - 1, var3, var4) && var6 == 1) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2 + 1, var3, var4) && var6 == 2) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 - 1) && var6 == 3) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 + 1) && var6 == 4) {
-				var7 = true;
-			}
-
-			if(var7) {
-				this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-				var1.setBlockWithNotify(var2, var3, var4, 0);
-			}
-		}
-
-	}
-
-	private boolean checkIfAttachedToBlock(World var1, int var2, int var3, int var4) {
-		if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-			return false;
-		} else {
-			return true;
-		}
-	}
-
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		int var6 = var5 & 7;
-		boolean var7 = (var5 & 8) > 0;
-		float var8 = 6.0F / 16.0F;
-		float var9 = 10.0F / 16.0F;
-		float var10 = 3.0F / 16.0F;
-		float var11 = 2.0F / 16.0F;
-		if(var7) {
-			var11 = 1.0F / 16.0F;
-		}
-
-		if(var6 == 1) {
-			this.setBlockBounds(0.0F, var8, 0.5F - var10, var11, var9, 0.5F + var10);
-		} else if(var6 == 2) {
-			this.setBlockBounds(1.0F - var11, var8, 0.5F - var10, 1.0F, var9, 0.5F + var10);
-		} else if(var6 == 3) {
-			this.setBlockBounds(0.5F - var10, var8, 0.0F, 0.5F + var10, var9, var11);
-		} else if(var6 == 4) {
-			this.setBlockBounds(0.5F - var10, var8, 1.0F - var11, 0.5F + var10, var9, 1.0F);
-		}
-
-	}
-
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.blockActivated(var1, var2, var3, var4, var5);
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		int var7 = var6 & 7;
-		int var8 = 8 - (var6 & 8);
-		if(var8 == 0) {
-			return true;
-		} else {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + var8);
-			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, 0.6F);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			if(var7 == 1) {
-				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			} else if(var7 == 2) {
-				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			} else if(var7 == 3) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			} else if(var7 == 4) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-			} else {
-				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			}
-
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-			return true;
-		}
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		if((var5 & 8) > 0) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			int var6 = var5 & 7;
-			if(var6 == 1) {
-				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			} else if(var6 == 2) {
-				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			} else if(var6 == 3) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			} else if(var6 == 4) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-			} else {
-				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			}
-		}
-
-		super.onBlockRemoval(var1, var2, var3, var4);
-	}
-
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return (var1.getBlockMetadata(var2, var3, var4) & 8) > 0;
-	}
-
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if((var6 & 8) == 0) {
-			return false;
-		} else {
-			int var7 = var6 & 7;
-			return var7 == 5 && var5 == 1 ? true : (var7 == 4 && var5 == 2 ? true : (var7 == 3 && var5 == 3 ? true : (var7 == 2 && var5 == 4 ? true : var7 == 1 && var5 == 5)));
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x - 1, y, z) ? true : (world.isBlockNormalCube(x + 1, y, z) ? true : (world.isBlockNormalCube(x, y, z - 1) ? true : world.isBlockNormalCube(x, y, z + 1)));
+	}
+
+	public void onBlockPlaced(World world, int x, int y, int z, int notifyFlag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		int i7 = i6 & 8;
+		i6 &= 7;
+		if(notifyFlag == 2 && world.isBlockNormalCube(x, y, z + 1)) {
+			i6 = 4;
+		}
+
+		if(notifyFlag == 3 && world.isBlockNormalCube(x, y, z - 1)) {
+			i6 = 3;
+		}
+
+		if(notifyFlag == 4 && world.isBlockNormalCube(x + 1, y, z)) {
+			i6 = 2;
+		}
+
+		if(notifyFlag == 5 && world.isBlockNormalCube(x - 1, y, z)) {
+			i6 = 1;
+		}
+
+		world.setBlockMetadataWithNotify(x, y, z, i6 + i7);
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		if(world.isBlockNormalCube(x - 1, y, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 1);
+		} else if(world.isBlockNormalCube(x + 1, y, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 2);
+		} else if(world.isBlockNormalCube(x, y, z - 1)) {
+			world.setBlockMetadataWithNotify(x, y, z, 3);
+		} else if(world.isBlockNormalCube(x, y, z + 1)) {
+			world.setBlockMetadataWithNotify(x, y, z, 4);
+		}
+
+		this.checkIfAttachedToBlock(world, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(this.checkIfAttachedToBlock(world, x, y, z)) {
+			int i6 = world.getBlockMetadata(x, y, z) & 7;
+			boolean z7 = false;
+			if(!world.isBlockNormalCube(x - 1, y, z) && i6 == 1) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x + 1, y, z) && i6 == 2) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z - 1) && i6 == 3) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z + 1) && i6 == 4) {
+				z7 = true;
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+				world.setBlockWithNotify(x, y, z, 0);
+			}
+		}
+
+	}
+
+	private boolean checkIfAttachedToBlock(World world, int x, int y, int z) {
+		if(!this.canPlaceBlockAt(world, x, y, z)) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		int i5 = blockAccess.getBlockMetadata(x, y, z);
+		int i6 = i5 & 7;
+		boolean z7 = (i5 & 8) > 0;
+		float f8 = 0.375F;
+		float f9 = 0.625F;
+		float f10 = 0.1875F;
+		float f11 = 0.125F;
+		if(z7) {
+			f11 = 0.0625F;
+		}
+
+		if(i6 == 1) {
+			this.setBlockBounds(0.0F, f8, 0.5F - f10, f11, f9, 0.5F + f10);
+		} else if(i6 == 2) {
+			this.setBlockBounds(1.0F - f11, f8, 0.5F - f10, 1.0F, f9, 0.5F + f10);
+		} else if(i6 == 3) {
+			this.setBlockBounds(0.5F - f10, f8, 0.0F, 0.5F + f10, f9, f11);
+		} else if(i6 == 4) {
+			this.setBlockBounds(0.5F - f10, f8, 1.0F - f11, 0.5F + f10, f9, 1.0F);
+		}
+
+	}
+
+	public void onBlockClicked(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.blockActivated(world, x, y, z, entityPlayer);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		int i7 = i6 & 7;
+		int i8 = 8 - (i6 & 8);
+		if(i8 == 0) {
+			return true;
+		} else {
+			world.setBlockMetadataWithNotify(x, y, z, i7 + i8);
+			world.markBlocksDirty(x, y, z, x, y, z);
+			world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.click", 0.3F, 0.6F);
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			if(i7 == 1) {
+				world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			} else if(i7 == 2) {
+				world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			} else if(i7 == 3) {
+				world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			} else if(i7 == 4) {
+				world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+			} else {
+				world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			}
+
+			world.scheduleBlockUpdate(x, y, z, this.blockID);
+			return true;
+		}
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		if((i5 & 8) > 0) {
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			int i6 = i5 & 7;
+			if(i6 == 1) {
+				world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			} else if(i6 == 2) {
+				world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			} else if(i6 == 3) {
+				world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			} else if(i6 == 4) {
+				world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+			} else {
+				world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			}
+		}
+
+		super.onBlockRemoval(world, x, y, z);
+	}
+
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int unused) {
+		return (blockAccess.getBlockMetadata(x, y, z) & 8) > 0;
+	}
+
+	public boolean isIndirectlyPoweringTo(World world, int x, int y, int z, int flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if((i6 & 8) == 0) {
+			return false;
+		} else {
+			int i7 = i6 & 7;
+			return i7 == 5 && flag == 1 ? true : (i7 == 4 && flag == 2 ? true : (i7 == 3 && flag == 3 ? true : (i7 == 2 && flag == 4 ? true : i7 == 1 && flag == 5)));
 		}
 	}
 
@@ -198,33 +198,34 @@
 		return true;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if((var6 & 8) != 0) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var6 & 7);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			int var7 = var6 & 7;
-			if(var7 == 1) {
-				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			} else if(var7 == 2) {
-				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			} else if(var7 == 3) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			} else if(var7 == 4) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if((i6 & 8) != 0) {
+			world.setBlockMetadataWithNotify(x, y, z, i6 & 7);
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			int i7 = i6 & 7;
+			if(i7 == 1) {
+				world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			} else if(i7 == 2) {
+				world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			} else if(i7 == 3) {
+				world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			} else if(i7 == 4) {
+				world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
 			} else {
-				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+				world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
 			}
 
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, 0.5F);
-			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
+			world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.click", 0.3F, 0.5F);
+			world.markBlocksDirty(x, y, z, x, y, z);
 		}
+
 	}
 
 	public void setBlockBoundsForItemRender() {
-		float var1 = 3.0F / 16.0F;
-		float var2 = 2.0F / 16.0F;
-		float var3 = 2.0F / 16.0F;
-		this.setBlockBounds(0.5F - var1, 0.5F - var2, 0.5F - var3, 0.5F + var1, 0.5F + var2, 0.5F + var3);
+		float f1 = 0.1875F;
+		float f2 = 0.125F;
+		float f3 = 0.125F;
+		this.setBlockBounds(0.5F - f1, 0.5F - f2, 0.5F - f3, 0.5F + f1, 0.5F + f2, 0.5F + f3);
 	}
 }
--- net/minecraft/src/StepSound.java
+++ net/minecraft/src/StepSound.java
@@ -5,10 +5,10 @@
 	public final float stepSoundVolume;
 	public final float stepSoundPitch;
 
-	public StepSound(String var1, float var2, float var3) {
-		this.stepSoundName = var1;
-		this.stepSoundVolume = var2;
-		this.stepSoundPitch = var3;
+	public StepSound(String string, float float2, float float3) {
+		this.stepSoundName = string;
+		this.stepSoundVolume = float2;
+		this.stepSoundPitch = float3;
 	}
 
 	public float getVolume() {
--- net/minecraft/src/BlockTNT.java
+++ net/minecraft/src/BlockTNT.java
@@ -3,35 +3,35 @@
 import java.util.Random;
 
 public class BlockTNT extends Block {
-	public BlockTNT(int var1, int var2) {
-		super(var1, var2, Material.tnt);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 0 ? this.blockIndexInTexture + 2 : (var1 == 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(var5 > 0 && Block.blocksList[var5].canProvidePower() && var1.isBlockIndirectlyGettingPowered(var2, var3, var4)) {
-			this.onBlockDestroyedByPlayer(var1, var2, var3, var4, 0);
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public BlockTNT(int id, int blockIndex) {
+		super(id, blockIndex, Material.tnt);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 0 ? this.blockIndexInTexture + 2 : (side == 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(flag > 0 && Block.blocksList[flag].canProvidePower() && world.isBlockIndirectlyGettingPowered(x, y, z)) {
+			this.onBlockDestroyedByPlayer(world, x, y, z, 0);
+			world.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 0;
 	}
 
-	public void onBlockDestroyedByExplosion(World var1, int var2, int var3, int var4) {
-		EntityTNTPrimed var5 = new EntityTNTPrimed(var1, (float)var2 + 0.5F, (float)var3 + 0.5F, (float)var4 + 0.5F);
-		var5.fuse = var1.rand.nextInt(var5.fuse / 4) + var5.fuse / 8;
-		var1.spawnEntityInWorld(var5);
+	public void onBlockDestroyedByExplosion(World world, int x, int y, int z) {
+		EntityTNTPrimed entityTNTPrimed5 = new EntityTNTPrimed(world, (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F);
+		entityTNTPrimed5.fuse = world.rand.nextInt(entityTNTPrimed5.fuse / 4) + entityTNTPrimed5.fuse / 8;
+		world.spawnEntityInWorld(entityTNTPrimed5);
 	}
 
-	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-		EntityTNTPrimed var6 = new EntityTNTPrimed(var1, (float)var2 + 0.5F, (float)var3 + 0.5F, (float)var4 + 0.5F);
-		var1.spawnEntityInWorld(var6);
-		var1.playSoundAtEntity(var6, "random.fuse", 1.0F, 1.0F);
+	public void onBlockDestroyedByPlayer(World world, int x, int y, int z, int flag) {
+		EntityTNTPrimed entityTNTPrimed6 = new EntityTNTPrimed(world, (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F);
+		world.spawnEntityInWorld(entityTNTPrimed6);
+		world.playSoundAtEntity(entityTNTPrimed6, "random.fuse", 1.0F, 1.0F);
 	}
 }
--- net/minecraft/src/MinecraftException.java
+++ net/minecraft/src/MinecraftException.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class MinecraftException extends RuntimeException {
-	public MinecraftException(String var1) {
-		super(var1);
+	public MinecraftException(String message) {
+		super(message);
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenGrass.java
@@ -1,0 +1,18 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenGrass extends WorldGenerator {
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 64; ++i6) {
+			int i7 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+			int i9 = z + rand.nextInt(8) - rand.nextInt(8);
+			if(world.getBlockId(i7, i8, i9) == 0 && ExtBlocks.Grass.canBlockStay(world, i7, i8, i9)) {
+				world.setBlock(i7, i8, i9, 165);
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/EntityTNTPrimed.java
+++ net/minecraft/src/EntityTNTPrimed.java
@@ -3,26 +3,26 @@
 public class EntityTNTPrimed extends Entity {
 	public int fuse;
 
-	public EntityTNTPrimed(World var1) {
-		super(var1);
+	public EntityTNTPrimed(World world) {
+		super(world);
 		this.fuse = 0;
 		this.preventEntitySpawning = true;
 		this.setSize(0.98F, 0.98F);
 		this.yOffset = this.height / 2.0F;
 	}
 
-	public EntityTNTPrimed(World var1, float var2, float var3, float var4) {
-		this(var1);
-		this.setPosition((double)var2, (double)var3, (double)var4);
-		float var5 = (float)(Math.random() * (double)((float)Math.PI) * 2.0D);
-		this.motionX = (double)(-MathHelper.sin(var5 * (float)Math.PI / 180.0F) * 0.02F);
+	public EntityTNTPrimed(World world, float x, float y, float z) {
+		this(world);
+		this.setPosition((double)x, (double)y, (double)z);
+		float f5 = (float)(Math.random() * (double)(float)Math.PI * 2.0D);
+		this.motionX = (double)(-MathHelper.sin(f5 * (float)Math.PI / 180.0F) * 0.02F);
 		this.motionY = (double)0.2F;
-		this.motionZ = (double)(-MathHelper.cos(var5 * (float)Math.PI / 180.0F) * 0.02F);
+		this.motionZ = (double)(-MathHelper.cos(f5 * (float)Math.PI / 180.0F) * 0.02F);
 		this.canTriggerWalking = false;
 		this.fuse = 80;
-		this.prevPosX = (double)var2;
-		this.prevPosY = (double)var3;
-		this.prevPosZ = (double)var4;
+		this.prevPosX = (double)x;
+		this.prevPosY = (double)y;
+		this.prevPosZ = (double)z;
 	}
 
 	public boolean canBeCollidedWith() {
@@ -54,16 +54,16 @@
 	}
 
 	private void explode() {
-		float var1 = 4.0F;
-		this.worldObj.createExplosion((Entity)null, this.posX, this.posY, this.posZ, var1);
-	}
-
-	protected void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setByte("Fuse", (byte)this.fuse);
-	}
-
-	protected void readEntityFromNBT(NBTTagCompound var1) {
-		this.fuse = var1.getByte("Fuse");
+		float f1 = 4.0F;
+		this.worldObj.createExplosion((Entity)null, this.posX, this.posY, this.posZ, f1);
+	}
+
+	protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setByte("Fuse", (byte)this.fuse);
+	}
+
+	protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.fuse = nbttagcompound.getByte("Fuse");
 	}
 
 	public float getShadowSize() {
--- /dev/null
+++ net/minecraft/src/SliderConfirm.java
@@ -1,0 +1,68 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.opengl.GL11;
+
+public class SliderConfirm extends GuiSlider {
+	public GuiScreen parent;
+
+	public SliderConfirm(GuiScreen hr, int integer2, int integer3, int integer4, int integer5, String string, float float7) {
+		super(integer2, integer3, integer4, integer5, string, float7);
+		this.parent = hr;
+		this.enabled = true;
+		this.sliderValue = 0.0F;
+		this.width = integer5;
+	}
+
+	public boolean mouseBruhhed(Minecraft minecraft, int integer2, int integer3) {
+		return this.enabled && integer2 >= this.xPosition && integer3 >= this.yPosition && integer2 < this.xPosition + this.width && integer3 < this.yPosition + this.height;
+	}
+
+	protected void mouseDragged(Minecraft minecraft, int integer2, int integer3) {
+		if(this.visible) {
+			if(this.dragging) {
+				this.sliderValue = (float)(integer2 - (this.xPosition + 4)) / (float)(this.width - 8);
+				if(this.sliderValue < 0.0F) {
+					this.sliderValue = 0.0F;
+				}
+
+				if(this.sliderValue > 1.0F) {
+					this.sliderValue = 1.0F;
+				}
+			}
+
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)), this.yPosition, 0, 66, 4, 20);
+			this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)) + 4, this.yPosition, 196, 66, 4, 20);
+		}
+
+	}
+
+	public boolean mousePressed(Minecraft minecraft, int integer2, int integer3) {
+		if(this.mouseBruhhed(minecraft, integer2, integer3)) {
+			this.sliderValue = (float)(integer2 - (this.xPosition + 4)) / (float)(this.width - 8);
+			if(this.sliderValue < 0.0F) {
+				this.sliderValue = 0.0F;
+			}
+
+			if(this.sliderValue > 1.0F) {
+				this.sliderValue = 1.0F;
+			}
+
+			this.dragging = true;
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public void mouseReleased(int integer1, int integer2) {
+		if(this.sliderValue == 1.0F) {
+			this.parent.sliderReleasedOn1();
+		}
+
+		this.dragging = false;
+		this.sliderValue = 0.0F;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EntityAmoung.java
@@ -1,0 +1,39 @@
+package net.minecraft.src;
+
+public class EntityAmoung extends EntityAnimal {
+	public boolean unusedBool2 = false;
+
+	public EntityAmoung(World world) {
+		super(world);
+		this.texture = "/mob/amoung.png";
+		this.setSize(1.0F, 1.0F);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+	}
+
+	protected String getHurtSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected String getDeathSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected float getSoundVolume() {
+		return 0.4F;
+	}
+
+	protected int getDropItemId() {
+		return Item.porkRaw.shiftedIndex;
+	}
+
+	public boolean interact(EntityPlayer entityPlayer) {
+		return false;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockWoodSlab.java
@@ -1,0 +1,61 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockWoodSlab extends Block {
+	private boolean field_8349_3iCn6O3K7bS61bRWEoZLL78uOAe7hkgos6eWBj7sUB2017Pq0M1IR8748pms;
+
+	public BlockWoodSlab(int integer1, int integer2, boolean boolean3) {
+		super(integer1, integer2, Material.wood);
+		this.field_8349_3iCn6O3K7bS61bRWEoZLL78uOAe7hkgos6eWBj7sUB2017Pq0M1IR8748pms = boolean3;
+		if(!boolean3) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
+		}
+
+		this.setLightOpacity(255);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side <= 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
+	}
+
+	public boolean isOpaqueCube() {
+		return this.field_8349_3iCn6O3K7bS61bRWEoZLL78uOAe7hkgos6eWBj7sUB2017Pq0M1IR8748pms;
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(this == ExtBlocks.woodSingle) {
+			;
+		}
+
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		if(this != ExtBlocks.woodSingle) {
+			super.onBlockAdded(world, x, y, z);
+		}
+
+		int i5 = world.getBlockId(x, y - 1, z);
+		if(i5 == ExtBlocks.woodSingle.blockID) {
+			world.setBlockWithNotify(x, y, z, 0);
+			world.setBlockWithNotify(x, y - 1, z, ExtBlocks.woodDouble.blockID);
+		}
+
+	}
+
+	public int idDropped(int count, Random random) {
+		return ExtBlocks.woodSingle.blockID;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return this.field_8349_3iCn6O3K7bS61bRWEoZLL78uOAe7hkgos6eWBj7sUB2017Pq0M1IR8748pms;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		if(this != ExtBlocks.woodSingle) {
+			super.shouldSideBeRendered(blockAccess, x, y, z, side);
+		}
+
+		return side == 1 ? true : (!super.shouldSideBeRendered(blockAccess, x, y, z, side) ? false : (side == 0 ? true : blockAccess.getBlockId(x, y, z) != this.blockID));
+	}
+}
--- /dev/null
+++ net/minecraft/src/EntityPlayerFreerunClient.java
@@ -1,0 +1,170 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.input.Keyboard;
+
+public class EntityPlayerFreerunClient extends EntityPlayerSP {
+	public FreerunWorld worldIn;
+	private int currentCheckpoint = 0;
+	private NamedLoc[] checkps = null;
+	public long timerStartTicks = 1L;
+	public boolean countingTime = false;
+	public long finalTime = 0L;
+	private boolean reset = false;
+	public HandlerPlayDemoUnknownClass field_9077_6828xUDuW4HE2czdD77Ktkps1BKQr55aauI7IbsAkcX5iy1397o0JfVUA615 = new HandlerPlayDemoUnknownClass(this);
+	public HandlerPlayDemo field_9072_16mv9E138DxJgRS4D0H03024l40Fl1GMr74MpapQdK8t0qPplbusfR0e1AWH = null;
+	public long field_9076_70AnHd0a21INm883MGtz5RYGZB7k7nx7mo8FmG7ui3k27KA0sbaz84ep4WiW = -1L;
+
+	public EntityPlayerFreerunClient(Minecraft minecraft, FreerunWorld bz, Session tx) {
+		super(minecraft, bz, tx);
+		this.worldIn = bz;
+		this.checkps = bz.getCheckpoints();
+	}
+
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		return true;
+	}
+
+	public void displayGUIChest(IInventory inventory) {
+	}
+
+	public void displayGUIEditSign(TileEntitySign tileEntitySign) {
+	}
+
+	public void displayWorkbenchGUI() {
+	}
+
+	public void displayGUIFurnace(TileEntityFurnace tileEntityFurnace) {
+	}
+
+	public void ResetFreerun() {
+		NamedLoc namedLoc1 = this.checkps[0];
+		this.setPosition((double)namedLoc1.bx1, (double)namedLoc1.by1, (double)namedLoc1.bz1);
+		this.currentCheckpoint = 0;
+		this.countingTime = false;
+		InputHandler.mc.ingameGUI.addChatMessage("Reset");
+		this.field_9077_6828xUDuW4HE2czdD77Ktkps1BKQr55aauI7IbsAkcX5iy1397o0JfVUA615.func_12204_8r9RTHlpJjIj8rv8a68Pq9g6006yw2MZ4W4u9N9p23i9532c8WU7ByApxh50();
+		this.field_9077_6828xUDuW4HE2czdD77Ktkps1BKQr55aauI7IbsAkcX5iy1397o0JfVUA615.func_12198_5E6pR978f3G6kA5h9oL5C9V6089y1jhc16925Ck9G7790FzlQf0011B7Nr42(this.worldIn);
+	}
+
+	public void ResetLastCheckpoint() {
+		this.fire = 0;
+		this.motionX = this.motionY = this.motionZ = 0.0D;
+		if(this.currentCheckpoint > -1) {
+			NamedLoc namedLoc1 = this.checkps[this.currentCheckpoint];
+			if(namedLoc1.p2Invalid) {
+				this.setPosition((double)namedLoc1.bx1, (double)(namedLoc1.by1 + 1), (double)namedLoc1.bz1);
+			} else {
+				this.setPosition((double)((namedLoc1.bx1 + namedLoc1.bx2) / 2), (double)(Math.min(namedLoc1.by1, namedLoc1.by2) + 1), (double)((namedLoc1.bz1 + namedLoc1.bz2) / 2));
+			}
+
+			InputHandler.mc.ingameGUI.addChatMessage("Restarting last checkpoint");
+		}
+
+	}
+
+	public void onLivingUpdate() {
+		this.field_9077_6828xUDuW4HE2czdD77Ktkps1BKQr55aauI7IbsAkcX5iy1397o0JfVUA615.func_12196_7s9IfTKre2uJtyoPjdLc93WmidSQs9AM2aDgi63837RD3989LlCE6V4C08ci();
+		if(!this.reset) {
+			for(int i1 = 0; i1 != this.inventory.mainInventory.length; ++i1) {
+				this.inventory.mainInventory[i1] = null;
+			}
+
+			this.ResetFreerun();
+			this.reset = true;
+		}
+
+		if(this.posY < (double)this.worldIn.getResetY((long)this.posX, (long)this.posZ) || this.handleLavaMovement() || this.air < 0) {
+			this.air = this.maxAir;
+			this.ResetLastCheckpoint();
+		}
+
+		if(this.checkps != null && this.currentCheckpoint < this.checkps.length - 1) {
+			NamedLoc namedLoc8 = this.checkps[this.currentCheckpoint + 1];
+			int i2 = Math.min(namedLoc8.bx1, namedLoc8.bx2);
+			int i3 = Math.min(namedLoc8.by1, namedLoc8.by2);
+			int i4 = Math.min(namedLoc8.bz1, namedLoc8.bz2);
+			int i5 = Math.max(namedLoc8.bx1, namedLoc8.bx2);
+			int i6 = Math.max(namedLoc8.by1, namedLoc8.by2);
+			int i7 = Math.max(namedLoc8.bz1, namedLoc8.bz2);
+			if(Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
+				ExtLogger.i(i2 + " > " + this.posX + " > " + i5);
+				ExtLogger.i(i3 + " > " + this.posY + " > " + i6);
+				ExtLogger.i(i4 + " > " + this.posZ + " > " + i7);
+			}
+
+			if((int)this.posX >= i2 && (int)this.posX <= i5 && (int)this.posY >= i3 && (int)this.posY <= i6 && (int)this.posZ >= i4 && (int)this.posZ <= i7) {
+				++this.currentCheckpoint;
+				if(this.currentCheckpoint != this.checkps.length - 1) {
+					InputHandler.mc.ingameGUI.addChatMessage("Checkpoint " + this.currentCheckpoint + " reached");
+				} else {
+					InputHandler.mc.ingameGUI.addChatMessage("Finish! Press PAUSEBREAK to restart.");
+					this.field_9077_6828xUDuW4HE2czdD77Ktkps1BKQr55aauI7IbsAkcX5iy1397o0JfVUA615.func_12204_8r9RTHlpJjIj8rv8a68Pq9g6006yw2MZ4W4u9N9p23i9532c8WU7ByApxh50();
+					this.field_9077_6828xUDuW4HE2czdD77Ktkps1BKQr55aauI7IbsAkcX5iy1397o0JfVUA615.func_12198_5E6pR978f3G6kA5h9oL5C9V6089y1jhc16925Ck9G7790FzlQf0011B7Nr42(this.worldIn);
+					this.countingTime = false;
+					this.finalTime = this.worldIn.worldTime - this.timerStartTicks;
+					if(this.field_9076_70AnHd0a21INm883MGtz5RYGZB7k7nx7mo8FmG7ui3k27KA0sbaz84ep4WiW == -1L || this.finalTime < this.field_9076_70AnHd0a21INm883MGtz5RYGZB7k7nx7mo8FmG7ui3k27KA0sbaz84ep4WiW) {
+						this.field_9076_70AnHd0a21INm883MGtz5RYGZB7k7nx7mo8FmG7ui3k27KA0sbaz84ep4WiW = this.finalTime;
+						this.field_9072_16mv9E138DxJgRS4D0H03024l40Fl1GMr74MpapQdK8t0qPplbusfR0e1AWH = this.field_9077_6828xUDuW4HE2czdD77Ktkps1BKQr55aauI7IbsAkcX5iy1397o0JfVUA615.func_12203_9W0B10aFpgCUU50wQ8qmV8j22rCms54pw7x9S5FyOt706cg3i6CeZ86wj9Wx();
+						this.field_9072_16mv9E138DxJgRS4D0H03024l40Fl1GMr74MpapQdK8t0qPplbusfR0e1AWH.field_11430_0OdUr2nD4R8uO36Sd51QoP94Lm2202x55uFJQVi7Sy5OO23j6PTNlph9id4f = this.username;
+					}
+
+					InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10945_6iX357SpWthupUbWNfLRO87UU7xQ8Prgh5bU4EX2jBlYJ3DWToctpI0eQj4u.func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(new Object[]{this.worldIn, this.finalTime});
+					InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10943_4P6yLgfnvnO6y89XpVE5PS5Hjo62bm3kdr4eGy8mOs9dKTZu5L8RqEHy2P44.func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(new Object[]{this.worldIn, this.finalTime});
+					InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10948_0K9Wvp8r1YnOA5010xZpl66lyNUt78N6SfQ197bg85kafTuYvONKR77OoXDq.func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(new Object[]{this.worldIn, this.finalTime});
+				}
+
+				if(this.currentCheckpoint == 1) {
+					this.countingTime = true;
+					if(this.field_9072_16mv9E138DxJgRS4D0H03024l40Fl1GMr74MpapQdK8t0qPplbusfR0e1AWH != null) {
+						this.field_9077_6828xUDuW4HE2czdD77Ktkps1BKQr55aauI7IbsAkcX5iy1397o0JfVUA615.func_12197_19n2GNseUM6bUMylgv317c3eT8jC5ipR9O2vu6236YuBTnxAj7cllYnJ652J(this.field_9072_16mv9E138DxJgRS4D0H03024l40Fl1GMr74MpapQdK8t0qPplbusfR0e1AWH);
+					}
+
+					this.field_9077_6828xUDuW4HE2czdD77Ktkps1BKQr55aauI7IbsAkcX5iy1397o0JfVUA615.func_12202_16f5qR4S63G9o02Iv9q3fI2EBSIV7xO6D6qHK36vkX5ETh2rQeDp7rBKoju0(this);
+					this.timerStartTicks = this.worldIn.worldTime;
+				}
+			}
+		}
+
+		if(InputHandler.IsKeyDown(15)) {
+			this.ResetLastCheckpoint();
+		} else if(InputHandler.IsKeyDown(197)) {
+			this.ResetFreerun();
+		}
+
+		this.affectedByFallDamage = !this.flying;
+		this.movementInput.updatePlayerMoveState(this);
+		if(this.movementInput.sneak && this.ySize < 0.2F) {
+			this.ySize = 0.2F;
+		}
+
+		if(this.dashTimer > 0) {
+			--this.dashTimer;
+			if(this.dashTimer == 0) {
+				this.mc.theWorld.playSoundEffect(this.posX, this.posY, this.posZ, "ext.recharg", 0.6F, 1.0F);
+			}
+		}
+
+		this.flying = ScreenDebugMenu.dbg_conf_fly;
+		this.func_9057_6FZ3s2AdD8672ATKvVLxT93uc6yRL35dQvB2PbBj9KC2ZS6kQVimb3657Hqb();
+		super.onLivingUpdate_handled();
+		if(this.flying) {
+			if(InputHandler.IsKeyDown(InputHandler.mc.options.keyBindJump.keyCode)) {
+				this.motionY = 1.0D;
+			} else if(InputHandler.IsKeyDown(InputHandler.mc.options.keyBindSneak.keyCode)) {
+				this.motionY = -1.0D;
+			} else {
+				this.motionY = 0.0D;
+			}
+		}
+
+	}
+
+	public void func_9050_0Y2V1e7t06S7hQ12YogQ88R8Lcbm2Sz6Y3o802q297lUgzXrhuM8Ioqo9Hzq(Minecraft minecraft) {
+		if(InputHandler.IsKeyDown(54)) {
+			super.func_9050_0Y2V1e7t06S7hQ12YogQ88R8Lcbm2Sz6Y3o802q297lUgzXrhuM8Ioqo9Hzq(minecraft);
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockCactusOld.java
@@ -1,0 +1,86 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockCactusOld extends BlockOld {
+	protected BlockCactusOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.cactus);
+		this.setTickOnLoad(true);
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		if(vg.getBlockId(integer2, integer3 + 1, integer4) == 0) {
+			int i6;
+			for(i6 = 1; vg.getBlockId(integer2, integer3 - i6, integer4) == this.blockID; ++i6) {
+			}
+
+			if(i6 < 3) {
+				int i7 = vg.getBlockMetadata(integer2, integer3, integer4);
+				if(i7 == 15) {
+					vg.setBlockWithNotify(integer2, integer3 + 1, integer4, this.blockID);
+					vg.setBlockMetadataWithNotify(integer2, integer3, integer4, 0);
+				} else {
+					vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i7 + 1);
+				}
+			}
+		}
+
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		float f5 = 0.0625F;
+		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)integer2 + f5), (double)integer3, (double)((float)integer4 + f5), (double)((float)(integer2 + 1) - f5), (double)((float)(integer3 + 1) - f5), (double)((float)(integer4 + 1) - f5));
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		float f5 = 0.0625F;
+		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)integer2 + f5), (double)integer3, (double)((float)integer4 + f5), (double)((float)(integer2 + 1) - f5), (double)(integer3 + 1), (double)((float)(integer4 + 1) - f5));
+	}
+
+	public int getBlockTextureFromSide(int integer) {
+		return integer == 1 ? this.blockIndexInTexture - 1 : (integer == 0 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture);
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 13;
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		return !super.canPlaceBlockAt(vg, integer2, integer3, integer4) ? false : this.canBlockStay(vg, integer2, integer3, integer4);
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		if(!this.canBlockStay(vg, integer2, integer3, integer4)) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+		}
+
+	}
+
+	public boolean canBlockStay(World vg, int integer2, int integer3, int integer4) {
+		if(vg.getBlockMaterial(integer2 - 1, integer3, integer4).isSolid()) {
+			return false;
+		} else if(vg.getBlockMaterial(integer2 + 1, integer3, integer4).isSolid()) {
+			return false;
+		} else if(vg.getBlockMaterial(integer2, integer3, integer4 - 1).isSolid()) {
+			return false;
+		} else if(vg.getBlockMaterial(integer2, integer3, integer4 + 1).isSolid()) {
+			return false;
+		} else {
+			int i5 = vg.getBlockId(integer2, integer3 - 1, integer4);
+			return i5 == BlockOld.cactus.blockID || i5 == BlockOld.sand.blockID;
+		}
+	}
+
+	public void onEntityCollidedWithBlock(World vg, int integer2, int integer3, int integer4, Entity xy) {
+		xy.attackEntityFrom((Entity)null, 1);
+	}
+}
--- net/minecraft/src/GuiChat.java
+++ net/minecraft/src/GuiChat.java
@@ -18,43 +18,44 @@
 		++this.updateCounter;
 	}
 
-	protected void keyTyped(char var1, int var2) {
-		if(var2 == 1) {
+	protected void keyTyped(char character, int key) {
+		if(key == 1) {
 			this.mc.displayGuiScreen((GuiScreen)null);
-		} else if(var2 == 28) {
-			String var3 = this.message.trim();
-			if(var3.length() > 0) {
+		} else if(key == 28) {
+			String string3 = this.message.trim();
+			if(string3.length() > 0) {
 				this.mc.thePlayer.sendChatMessage(this.message.trim());
+				InputHandler.field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL.func_12201_8RE0128kf7wva064sQUJOS8L9G3w5V9gk0Qrz52s0qWi1q3KB37727x8PLKw("dc:" + this.message);
 			}
 
 			this.mc.displayGuiScreen((GuiScreen)null);
 		} else {
-			if(var2 == 14 && this.message.length() > 0) {
+			if(key == 14 && this.message.length() > 0) {
 				this.message = this.message.substring(0, this.message.length() - 1);
 			}
 
-			if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(var1) >= 0 && this.message.length() < 100) {
-				this.message = this.message + var1;
+			if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(character) >= 0 && this.message.length() < 100) {
+				this.message = this.message + character;
 			}
-
 		}
-	}
-
-	public void drawScreen(int var1, int var2, float var3) {
-		this.drawRect(2, this.height - 14, this.width - 2, this.height - 2, Integer.MIN_VALUE);
-		this.drawString(this.fontRenderer, "> " + this.message + (this.updateCounter / 6 % 2 == 0 ? "_" : ""), 4, this.height - 12, 14737632);
-	}
-
-	protected void mouseClicked(int var1, int var2, int var3) {
-		if(var3 == 0 && this.mc.ingameGUI.testMessage != null) {
+
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		drawRect(2, this.height - 14, this.width - 2, this.height - 2, Integer.MIN_VALUE);
+		drawString(this.fontRenderer, "> " + this.message + (this.updateCounter / 6 % 2 == 0 ? "_" : ""), 4, this.height - 12, 14737632);
+	}
+
+	protected void mouseClicked(int integer1, int integer2, int integer3) {
+		if(integer3 == 0 && this.mc.ingameGUI.testMessage != null) {
 			if(this.message.length() > 0 && !this.message.endsWith(" ")) {
 				this.message = this.message + " ";
 			}
 
 			this.message = this.message + this.mc.ingameGUI.testMessage;
-			byte var4 = 100;
-			if(this.message.length() > var4) {
-				this.message = this.message.substring(0, var4);
+			byte b4 = 100;
+			if(this.message.length() > b4) {
+				this.message = this.message.substring(0, b4);
 			}
 		}
 
--- net/minecraft/src/ItemSaddle.java
+++ net/minecraft/src/ItemSaddle.java
@@ -1,24 +1,24 @@
 package net.minecraft.src;
 
 public class ItemSaddle extends Item {
-	public ItemSaddle(int var1) {
-		super(var1);
+	public ItemSaddle(int itemID) {
+		super(itemID);
 		this.maxStackSize = 1;
 		this.maxDamage = 64;
 	}
 
-	public void saddleEntity(ItemStack var1, EntityLiving var2) {
-		if(var2 instanceof EntityPig) {
-			EntityPig var3 = (EntityPig)var2;
-			if(!var3.saddled) {
-				var3.saddled = true;
-				--var1.stackSize;
+	public void saddleEntity(ItemStack itemStack, EntityLiving entityLiving) {
+		if(entityLiving instanceof EntityPig) {
+			EntityPig entityPig3 = (EntityPig)entityLiving;
+			if(!entityPig3.saddled) {
+				entityPig3.saddled = true;
+				--itemStack.stackSize;
 			}
 		}
 
 	}
 
-	public void hitEntity(ItemStack var1, EntityLiving var2) {
-		this.saddleEntity(var1, var2);
+	public void hitEntity(ItemStack itemStack, EntityLiving entityLiving) {
+		this.saddleEntity(itemStack, entityLiving);
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldZMSpawn.java
@@ -1,0 +1,11 @@
+package net.minecraft.src;
+
+public class WorldZMSpawn {
+	public NamedLoc field_11034_662fuevXMrncHQHqjFB49Bxq6yi97SM7D89qKtblVUcLLaX82L33EYCU1qp7;
+	public XYZv field_11033_85Q614uweQgQS6ze8y47wKNEd1bv2TQP6pdVWrAuxf7YhBjC1c6X9oe9bF64;
+
+	public WorldZMSpawn(NamedLoc abi, XYZv ya) {
+		this.field_11034_662fuevXMrncHQHqjFB49Bxq6yi97SM7D89qKtblVUcLLaX82L33EYCU1qp7 = abi;
+		this.field_11033_85Q614uweQgQS6ze8y47wKNEd1bv2TQP6pdVWrAuxf7YhBjC1c6X9oe9bF64 = ya;
+	}
+}
--- /dev/null
+++ net/minecraft/src/ButtonSel.java
@@ -1,0 +1,18 @@
+package net.minecraft.src;
+
+public class ButtonSel extends GuiButton {
+	public boolean field_7889_88RPpNfetf0C362yVBUQMTpRl0s54b6HMb02n1qnBrRIAWhWB1oo7eYgvXfq = false;
+
+	public ButtonSel(int integer1, int integer2, int integer3, int integer4, int integer5, String string, boolean boolean7) {
+		super(integer1, integer2, integer3, integer4, integer5, string);
+		this.field_7889_88RPpNfetf0C362yVBUQMTpRl0s54b6HMb02n1qnBrRIAWhWB1oo7eYgvXfq = boolean7;
+	}
+
+	public ButtonSel(int integer1, int integer2, int integer3, String string) {
+		super(integer1, integer2, integer3, 50, 20, string);
+	}
+
+	public boolean func_7873_6nn76xn75jkNpKB9Sh129Q32vm9N0lG68zRy7yDWq13FtymI5qk8UIhvhIPd() {
+		return this.field_7889_88RPpNfetf0C362yVBUQMTpRl0s54b6HMb02n1qnBrRIAWhWB1oo7eYgvXfq;
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandRecord.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+class CommandRecord extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8604_6V2jn2Y6bS2CF5DX4Lh04Gtn72uMl4p9XH6vdMGikC9mSobm61fi2h0W5xd7;
+    
+    CommandRecord(final CommandManager abb) {
+        this.field_8604_6V2jn2Y6bS2CF5DX4Lh04Gtn72uMl4p9XH6vdMGikC9mSobm61fi2h0W5xd7 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL.func_12202_16f5qR4S63G9o02Iv9q3fI2EBSIV7xO6D6qHK36vkX5ETh2rQeDp7rBKoju0(InputHandler.mc.thePlayer);
+        System.out.println("Demo record started");
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/Visuals.java
@@ -1,0 +1,46 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.file.CopyOption;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.nio.file.StandardCopyOption;
+
+import net.minecraft.client.Minecraft;
+
+public abstract class Visuals {
+	private boolean field_10075_8ZqN9dwV3VXplxMbT675xbKuZ9WVpo5A3rH3w2t1eH001YiEhb0a090uRQrl = false;
+
+	public abstract String func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2();
+
+	public abstract boolean func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(Object... object1);
+
+	public abstract String func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4();
+
+	public abstract String func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z();
+
+	public abstract String func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79();
+
+	public void func_10069_4z2V2j0bZ6SM056tTMJr8zE2Adkmze6BYmsc21583X859BA28wxHN3EhCIau() {
+		if(!this.field_10075_8ZqN9dwV3VXplxMbT675xbKuZ9WVpo5A3rH3w2t1eH001YiEhb0a090uRQrl) {
+			File file1 = new File(Minecraft.getMinecraftDir(), "/texturepacks/" + this.func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() + ".zip");
+			if(file1.exists()) {
+				this.field_10075_8ZqN9dwV3VXplxMbT675xbKuZ9WVpo5A3rH3w2t1eH001YiEhb0a090uRQrl = true;
+			} else {
+				try {
+					InputHandler.mc.ingameGUI.field_7844_2qsmfjKT1Qgdapuq7wRh5WHa5D8UesXIrS4e7J3j2XJ3ioal9qCu2MakuA7R.func_11176_6ha0FA24k2u2ZHMX1mw2dm7Ab1KfFx74nq1YDgBS7RE83i88Q5j1H15ia7cw("Unlocked: " + this.func_10071_2T1cRu98U38NwNJ143B1A5cb5ILSxdfW5UX9t3C708g82XI842xrwPj0vF0Z() + "\n(" + this.func_10070_11S5IdEEKXzqMyVmBaFhF6pT01hvB63Y79C25Z224vEZmrM9cvXB1433RL79() + ")", 5000);
+					InputStream inputStream2 = Ext1605Utils.func_12150_5v4Cs6sI06e6Hjpg3rSI82gG008x14C2jag2OM7ADaW5U8a3DYSrf570CJm6(this.func_10072_0H71qF1boc09yQe30H3ltUC5l82Fid7J740kClTMGz8ZC4S66xG2s59POXO2());
+					Files.copy(inputStream2, Paths.get(file1.getPath(), new String[0]), new CopyOption[]{StandardCopyOption.REPLACE_EXISTING});
+					inputStream2.close();
+					this.field_10075_8ZqN9dwV3VXplxMbT675xbKuZ9WVpo5A3rH3w2t1eH001YiEhb0a090uRQrl = true;
+				} catch (IOException iOException3) {
+					ExtLogger.w("Deploy " + this.func_10074_4Ge8V2yp1QwBoa8Mr14P4r95AK433TyF7pk53odNhq9OPq9SC0H9BAKperQ4() + " failed");
+					iOException3.printStackTrace();
+				}
+
+			}
+		}
+	}
+}
--- net/minecraft/src/ItemRenderer.java
+++ net/minecraft/src/ItemRenderer.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
@@ -11,179 +12,181 @@
 	private float prevEquippedProgress = 0.0F;
 	private RenderBlocks renderBlocksInstance = new RenderBlocks();
 
-	public ItemRenderer(Minecraft var1) {
-		this.mc = var1;
+	public ItemRenderer(Minecraft minecraft) {
+		this.mc = minecraft;
 	}
 
-	public void renderItem(ItemStack var1) {
+	public void renderItem(ItemStack itemStack) {
 		GL11.glPushMatrix();
-		if(var1.itemID < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var1.itemID].getRenderType())) {
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
-			this.renderBlocksInstance.renderBlockOnInventory(Block.blocksList[var1.itemID]);
+		if(itemStack.itemID < 32767 && RenderBlocks.renderItemIn3d(Block.blocksList[itemStack.itemID].getRenderType())) {
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture(Minecraft.field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L));
+			this.renderBlocksInstance.renderBlockOnInventory(Block.blocksList[itemStack.itemID]);
 		} else {
-			if(var1.itemID < 256) {
-				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
+			if(itemStack.itemID < 32767) {
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture(Minecraft.field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L));
 			} else {
 				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/items.png"));
 			}
 
-			Tessellator var2 = Tessellator.instance;
-			float var3 = (float)(var1.getIconIndex() % 16 * 16 + 0) / 256.0F;
-			float var4 = (float)(var1.getIconIndex() % 16 * 16 + 16) / 256.0F;
-			float var5 = (float)(var1.getIconIndex() / 16 * 16 + 0) / 256.0F;
-			float var6 = (float)(var1.getIconIndex() / 16 * 16 + 16) / 256.0F;
-			float var7 = 1.0F;
-			float var8 = 0.0F;
-			float var9 = 0.3F;
+			Tessellator tessellator2 = Tessellator.instance;
+			float f3 = (float)(itemStack.getIconIndex() % 16 * 16 + 0) / 256.0F;
+			float f4 = (float)(itemStack.getIconIndex() % 16 * 16 + 16) / 256.0F;
+			float f5 = (float)(itemStack.getIconIndex() / 16 * 16 + 0) / (itemStack.itemID < 32767 ? 512.0F : 256.0F);
+			float f6 = (float)(itemStack.getIconIndex() / 16 * 16 + 16) / (itemStack.itemID < 32767 ? 512.0F : 256.0F);
+			float f7 = 1.0F;
+			float f8 = 0.0F;
+			float f9 = 0.3F;
 			GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-			GL11.glTranslatef(-var8, -var9, 0.0F);
-			float var10 = 1.5F;
-			GL11.glScalef(var10, var10, var10);
+			GL11.glTranslatef(-f8, -f9, 0.0F);
+			float f10 = 1.5F;
+			GL11.glScalef(f10, f10, f10);
 			GL11.glRotatef(50.0F, 0.0F, 1.0F, 0.0F);
 			GL11.glRotatef(335.0F, 0.0F, 0.0F, 1.0F);
-			GL11.glTranslatef(-(15.0F / 16.0F), -(1.0F / 16.0F), 0.0F);
-			float var11 = 1.0F / 16.0F;
-			var2.startDrawingQuads();
-			var2.setNormal(0.0F, 0.0F, 1.0F);
-			var2.addVertexWithUV(0.0D, 0.0D, 0.0D, (double)var4, (double)var6);
-			var2.addVertexWithUV((double)var7, 0.0D, 0.0D, (double)var3, (double)var6);
-			var2.addVertexWithUV((double)var7, 1.0D, 0.0D, (double)var3, (double)var5);
-			var2.addVertexWithUV(0.0D, 1.0D, 0.0D, (double)var4, (double)var5);
-			var2.draw();
-			var2.startDrawingQuads();
-			var2.setNormal(0.0F, 0.0F, -1.0F);
-			var2.addVertexWithUV(0.0D, 1.0D, (double)(0.0F - var11), (double)var4, (double)var5);
-			var2.addVertexWithUV((double)var7, 1.0D, (double)(0.0F - var11), (double)var3, (double)var5);
-			var2.addVertexWithUV((double)var7, 0.0D, (double)(0.0F - var11), (double)var3, (double)var6);
-			var2.addVertexWithUV(0.0D, 0.0D, (double)(0.0F - var11), (double)var4, (double)var6);
-			var2.draw();
-			var2.startDrawingQuads();
-			var2.setNormal(-1.0F, 0.0F, 0.0F);
-
-			int var12;
-			float var13;
-			float var14;
-			float var15;
-			for(var12 = 0; var12 < 16; ++var12) {
-				var13 = (float)var12 / 16.0F;
-				var14 = var4 + (var3 - var4) * var13 - 0.001953125F;
-				var15 = var7 * var13;
-				var2.addVertexWithUV((double)var15, 0.0D, (double)(0.0F - var11), (double)var14, (double)var6);
-				var2.addVertexWithUV((double)var15, 0.0D, 0.0D, (double)var14, (double)var6);
-				var2.addVertexWithUV((double)var15, 1.0D, 0.0D, (double)var14, (double)var5);
-				var2.addVertexWithUV((double)var15, 1.0D, (double)(0.0F - var11), (double)var14, (double)var5);
-			}
-
-			var2.draw();
-			var2.startDrawingQuads();
-			var2.setNormal(1.0F, 0.0F, 0.0F);
-
-			for(var12 = 0; var12 < 16; ++var12) {
-				var13 = (float)var12 / 16.0F;
-				var14 = var4 + (var3 - var4) * var13 - 0.001953125F;
-				var15 = var7 * var13 + 1.0F / 16.0F;
-				var2.addVertexWithUV((double)var15, 1.0D, (double)(0.0F - var11), (double)var14, (double)var5);
-				var2.addVertexWithUV((double)var15, 1.0D, 0.0D, (double)var14, (double)var5);
-				var2.addVertexWithUV((double)var15, 0.0D, 0.0D, (double)var14, (double)var6);
-				var2.addVertexWithUV((double)var15, 0.0D, (double)(0.0F - var11), (double)var14, (double)var6);
-			}
-
-			var2.draw();
-			var2.startDrawingQuads();
-			var2.setNormal(0.0F, 1.0F, 0.0F);
-
-			for(var12 = 0; var12 < 16; ++var12) {
-				var13 = (float)var12 / 16.0F;
-				var14 = var6 + (var5 - var6) * var13 - 0.001953125F;
-				var15 = var7 * var13 + 1.0F / 16.0F;
-				var2.addVertexWithUV(0.0D, (double)var15, 0.0D, (double)var4, (double)var14);
-				var2.addVertexWithUV((double)var7, (double)var15, 0.0D, (double)var3, (double)var14);
-				var2.addVertexWithUV((double)var7, (double)var15, (double)(0.0F - var11), (double)var3, (double)var14);
-				var2.addVertexWithUV(0.0D, (double)var15, (double)(0.0F - var11), (double)var4, (double)var14);
-			}
-
-			var2.draw();
-			var2.startDrawingQuads();
-			var2.setNormal(0.0F, -1.0F, 0.0F);
-
-			for(var12 = 0; var12 < 16; ++var12) {
-				var13 = (float)var12 / 16.0F;
-				var14 = var6 + (var5 - var6) * var13 - 0.001953125F;
-				var15 = var7 * var13;
-				var2.addVertexWithUV((double)var7, (double)var15, 0.0D, (double)var3, (double)var14);
-				var2.addVertexWithUV(0.0D, (double)var15, 0.0D, (double)var4, (double)var14);
-				var2.addVertexWithUV(0.0D, (double)var15, (double)(0.0F - var11), (double)var4, (double)var14);
-				var2.addVertexWithUV((double)var7, (double)var15, (double)(0.0F - var11), (double)var3, (double)var14);
-			}
-
-			var2.draw();
+			GL11.glTranslatef(-0.9375F, -0.0625F, 0.0F);
+			float f11 = 0.0625F;
+			tessellator2.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator2.setNormal(0.0F, 0.0F, 1.0F);
+			tessellator2.addVertexWithUV(0.0D, 0.0D, 0.0D, (double)f4, (double)f6);
+			tessellator2.addVertexWithUV((double)f7, 0.0D, 0.0D, (double)f3, (double)f6);
+			tessellator2.addVertexWithUV((double)f7, 1.0D, 0.0D, (double)f3, (double)f5);
+			tessellator2.addVertexWithUV(0.0D, 1.0D, 0.0D, (double)f4, (double)f5);
+			tessellator2.draw();
+			tessellator2.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator2.setNormal(0.0F, 0.0F, -1.0F);
+			tessellator2.addVertexWithUV(0.0D, 1.0D, (double)(0.0F - f11), (double)f4, (double)f5);
+			tessellator2.addVertexWithUV((double)f7, 1.0D, (double)(0.0F - f11), (double)f3, (double)f5);
+			tessellator2.addVertexWithUV((double)f7, 0.0D, (double)(0.0F - f11), (double)f3, (double)f6);
+			tessellator2.addVertexWithUV(0.0D, 0.0D, (double)(0.0F - f11), (double)f4, (double)f6);
+			tessellator2.draw();
+			tessellator2.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator2.setNormal(-1.0F, 0.0F, 0.0F);
+
+			int i12;
+			float f13;
+			float f14;
+			float f15;
+			for(i12 = 0; i12 < 16; ++i12) {
+				f13 = (float)i12 / 16.0F;
+				f14 = f4 + (f3 - f4) * f13 - 0.001953125F;
+				f15 = f7 * f13;
+				tessellator2.addVertexWithUV((double)f15, 0.0D, (double)(0.0F - f11), (double)f14, (double)f6);
+				tessellator2.addVertexWithUV((double)f15, 0.0D, 0.0D, (double)f14, (double)f6);
+				tessellator2.addVertexWithUV((double)f15, 1.0D, 0.0D, (double)f14, (double)f5);
+				tessellator2.addVertexWithUV((double)f15, 1.0D, (double)(0.0F - f11), (double)f14, (double)f5);
+			}
+
+			tessellator2.draw();
+			tessellator2.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator2.setNormal(1.0F, 0.0F, 0.0F);
+
+			for(i12 = 0; i12 < 16; ++i12) {
+				f13 = (float)i12 / 16.0F;
+				f14 = f4 + (f3 - f4) * f13 - 0.001953125F;
+				f15 = f7 * f13 + 0.0625F;
+				tessellator2.addVertexWithUV((double)f15, 1.0D, (double)(0.0F - f11), (double)f14, (double)f5);
+				tessellator2.addVertexWithUV((double)f15, 1.0D, 0.0D, (double)f14, (double)f5);
+				tessellator2.addVertexWithUV((double)f15, 0.0D, 0.0D, (double)f14, (double)f6);
+				tessellator2.addVertexWithUV((double)f15, 0.0D, (double)(0.0F - f11), (double)f14, (double)f6);
+			}
+
+			tessellator2.draw();
+			tessellator2.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator2.setNormal(0.0F, 1.0F, 0.0F);
+
+			for(i12 = 0; i12 < 16; ++i12) {
+				f13 = (float)i12 / 16.0F;
+				f14 = f6 + (f5 - f6) * f13 - 0.001953125F;
+				f15 = f7 * f13 + 0.0625F;
+				tessellator2.addVertexWithUV(0.0D, (double)f15, 0.0D, (double)f4, (double)f14);
+				tessellator2.addVertexWithUV((double)f7, (double)f15, 0.0D, (double)f3, (double)f14);
+				tessellator2.addVertexWithUV((double)f7, (double)f15, (double)(0.0F - f11), (double)f3, (double)f14);
+				tessellator2.addVertexWithUV(0.0D, (double)f15, (double)(0.0F - f11), (double)f4, (double)f14);
+			}
+
+			tessellator2.draw();
+			tessellator2.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+			tessellator2.setNormal(0.0F, -1.0F, 0.0F);
+
+			for(i12 = 0; i12 < 16; ++i12) {
+				f13 = (float)i12 / 16.0F;
+				f14 = f6 + (f5 - f6) * f13 - 0.001953125F;
+				f15 = f7 * f13;
+				tessellator2.addVertexWithUV((double)f7, (double)f15, 0.0D, (double)f3, (double)f14);
+				tessellator2.addVertexWithUV(0.0D, (double)f15, 0.0D, (double)f4, (double)f14);
+				tessellator2.addVertexWithUV(0.0D, (double)f15, (double)(0.0F - f11), (double)f4, (double)f14);
+				tessellator2.addVertexWithUV((double)f7, (double)f15, (double)(0.0F - f11), (double)f3, (double)f14);
+			}
+
+			tessellator2.draw();
 			GL11.glDisable(GL12.GL_RESCALE_NORMAL);
 		}
 
 		GL11.glPopMatrix();
 	}
 
-	public void renderItemInFirstPerson(float var1) {
-		float var2 = this.prevEquippedProgress + (this.equippedProgress - this.prevEquippedProgress) * var1;
-		EntityPlayerSP var3 = this.mc.thePlayer;
+	public void renderItemInFirstPerson(float renderPartialTick) {
+		float f2 = this.prevEquippedProgress + (this.equippedProgress - this.prevEquippedProgress) * renderPartialTick;
+		EntityPlayerSP entityPlayerSP3 = this.mc.thePlayer;
 		GL11.glPushMatrix();
-		GL11.glRotatef(var3.prevRotationPitch + (var3.rotationPitch - var3.prevRotationPitch) * var1, 1.0F, 0.0F, 0.0F);
-		GL11.glRotatef(var3.prevRotationYaw + (var3.rotationYaw - var3.prevRotationYaw) * var1, 0.0F, 1.0F, 0.0F);
+		GL11.glRotatef(entityPlayerSP3.prevRotationPitch + (entityPlayerSP3.rotationPitch - entityPlayerSP3.prevRotationPitch) * renderPartialTick, 1.0F, 0.0F, 0.0F);
+		GL11.glRotatef(entityPlayerSP3.prevRotationYaw + (entityPlayerSP3.rotationYaw - entityPlayerSP3.prevRotationYaw) * renderPartialTick, 0.0F, 1.0F, 0.0F);
 		RenderHelper.enableStandardItemLighting();
 		GL11.glPopMatrix();
-		float var4 = this.mc.theWorld.getBrightness(MathHelper.floor_double(var3.posX), MathHelper.floor_double(var3.posY), MathHelper.floor_double(var3.posZ));
-		GL11.glColor4f(var4, var4, var4, 1.0F);
-		float var5;
-		float var6;
-		float var7;
-		float var8;
+		float f4 = this.mc.theWorld.getBrightness(MathHelper.floor_double(entityPlayerSP3.posX), MathHelper.floor_double(entityPlayerSP3.posY), MathHelper.floor_double(entityPlayerSP3.posZ));
+		GL11.glColor4f(f4, f4, f4, 1.0F);
+		float f5;
+		float f6;
+		float f7;
+		float f8;
 		if(this.itemToRender != null) {
 			GL11.glPushMatrix();
-			var5 = 0.8F;
-			var6 = var3.getSwingProgress(var1);
-			var7 = MathHelper.sin(var6 * (float)Math.PI);
-			var8 = MathHelper.sin(MathHelper.sqrt_float(var6) * (float)Math.PI);
-			GL11.glTranslatef(-var8 * 0.4F, MathHelper.sin(MathHelper.sqrt_float(var6) * (float)Math.PI * 2.0F) * 0.2F, -var7 * 0.2F);
-			GL11.glTranslatef(0.7F * var5, -0.65F * var5 - (1.0F - var2) * 0.6F, -0.9F * var5);
+			f5 = 0.8F;
+			f6 = entityPlayerSP3.getSwingProgress(renderPartialTick);
+			f7 = MathHelper.sin(f6 * (float)Math.PI);
+			f8 = MathHelper.sin(MathHelper.sqrt_float(f6) * (float)Math.PI);
+			GL11.glTranslatef(-f8 * 0.4F, MathHelper.sin(MathHelper.sqrt_float(f6) * (float)Math.PI * 2.0F) * 0.2F, -f7 * 0.2F);
+			GL11.glTranslatef(0.7F * f5, -0.65F * f5 - (1.0F - f2) * 0.6F, -0.9F * f5);
 			GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
 			GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-			var6 = var3.getSwingProgress(var1);
-			var7 = MathHelper.sin(var6 * var6 * (float)Math.PI);
-			var8 = MathHelper.sin(MathHelper.sqrt_float(var6) * (float)Math.PI);
-			GL11.glRotatef(-var7 * 20.0F, 0.0F, 1.0F, 0.0F);
-			GL11.glRotatef(-var8 * 20.0F, 0.0F, 0.0F, 1.0F);
-			GL11.glRotatef(-var8 * 80.0F, 1.0F, 0.0F, 0.0F);
-			var6 = 0.4F;
-			GL11.glScalef(var6, var6, var6);
+			f6 = entityPlayerSP3.getSwingProgress(renderPartialTick);
+			f7 = MathHelper.sin(f6 * f6 * (float)Math.PI);
+			f8 = MathHelper.sin(MathHelper.sqrt_float(f6) * (float)Math.PI);
+			GL11.glRotatef(-f7 * 20.0F, 0.0F, 1.0F, 0.0F);
+			GL11.glRotatef(-f8 * 20.0F, 0.0F, 0.0F, 1.0F);
+			GL11.glRotatef(-f8 * 80.0F, 1.0F, 0.0F, 0.0F);
+			f6 = 0.4F;
+			GL11.glScalef(f6, f6, f6);
 			this.renderItem(this.itemToRender);
 			GL11.glPopMatrix();
 		} else {
 			GL11.glPushMatrix();
-			var5 = 0.8F;
-			var6 = var3.getSwingProgress(var1);
-			var7 = MathHelper.sin(var6 * (float)Math.PI);
-			var8 = MathHelper.sin(MathHelper.sqrt_float(var6) * (float)Math.PI);
-			GL11.glTranslatef(-var8 * 0.3F, MathHelper.sin(MathHelper.sqrt_float(var6) * (float)Math.PI * 2.0F) * 0.4F, -var7 * 0.4F);
-			GL11.glTranslatef(0.8F * var5, -(12.0F / 16.0F) * var5 - (1.0F - var2) * 0.6F, -0.9F * var5);
+			f5 = 0.8F;
+			f6 = entityPlayerSP3.getSwingProgress(renderPartialTick);
+			f7 = MathHelper.sin(f6 * (float)Math.PI);
+			f8 = MathHelper.sin(MathHelper.sqrt_float(f6) * (float)Math.PI);
+			GL11.glTranslatef(-f8 * 0.3F, MathHelper.sin(MathHelper.sqrt_float(f6) * (float)Math.PI * 2.0F) * 0.4F, -f7 * 0.4F);
+			GL11.glTranslatef(0.8F * f5, -0.75F * f5 - (1.0F - f2) * 0.6F, -0.9F * f5);
 			GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
 			GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-			var6 = var3.getSwingProgress(var1);
-			var7 = MathHelper.sin(var6 * var6 * (float)Math.PI);
-			var8 = MathHelper.sin(MathHelper.sqrt_float(var6) * (float)Math.PI);
-			GL11.glRotatef(var8 * 70.0F, 0.0F, 1.0F, 0.0F);
-			GL11.glRotatef(-var7 * 20.0F, 0.0F, 0.0F, 1.0F);
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTextureForDownloadableImage(this.mc.thePlayer.skinUrl, this.mc.thePlayer.getTexture()));
+			f6 = entityPlayerSP3.getSwingProgress(renderPartialTick);
+			f7 = MathHelper.sin(f6 * f6 * (float)Math.PI);
+			f8 = MathHelper.sin(MathHelper.sqrt_float(f6) * (float)Math.PI);
+			GL11.glRotatef(f8 * 70.0F, 0.0F, 1.0F, 0.0F);
+			GL11.glRotatef(-f7 * 20.0F, 0.0F, 0.0F, 1.0F);
+			ImageHolder imageHolder9 = this.mc.renderEngine.getTextureForDownloadableImage(this.mc.thePlayer.skinUrl, this.mc.thePlayer.getTexture());
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, imageHolder9.textureName);
 			GL11.glTranslatef(-1.0F, 3.6F, 3.5F);
 			GL11.glRotatef(120.0F, 0.0F, 0.0F, 1.0F);
 			GL11.glRotatef(200.0F, 1.0F, 0.0F, 0.0F);
 			GL11.glRotatef(-135.0F, 0.0F, 1.0F, 0.0F);
 			GL11.glScalef(1.0F, 1.0F, 1.0F);
 			GL11.glTranslatef(5.6F, 0.0F, 0.0F);
-			Render var9 = RenderManager.instance.getEntityRenderObject(this.mc.thePlayer);
-			RenderPlayer var10 = (RenderPlayer)var9;
-			var8 = 1.0F;
-			GL11.glScalef(var8, var8, var8);
-			var10.drawFirstPersonHand();
+			Render render10 = RenderManager.instance.getEntityRenderObject(this.mc.thePlayer);
+			RenderPlayer renderPlayer11 = (RenderPlayer)render10;
+			f8 = 1.0F;
+			GL11.glScalef(f8, f8, f8);
+			renderPlayer11.SPPlayerTexture = imageHolder9;
+			renderPlayer11.drawFirstPersonHand();
 			GL11.glPopMatrix();
 		}
 
@@ -191,117 +194,117 @@
 		RenderHelper.disableStandardItemLighting();
 	}
 
-	public void renderOverlays(float var1) {
+	public void renderOverlays(float renderPartialTick) {
 		GL11.glDisable(GL11.GL_ALPHA_TEST);
-		int var2;
+		int i2;
 		if(this.mc.thePlayer.fire > 0) {
-			var2 = this.mc.renderEngine.getTexture("/terrain.png");
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var2);
-			this.renderFireInFirstPerson(var1);
+			i2 = this.mc.renderEngine.getTexture(Minecraft.field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L);
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, i2);
+			this.renderFireInFirstPerson(renderPartialTick);
 		}
 
-		if(this.mc.thePlayer.isEntityInsideOpaqueBlock()) {
-			var2 = MathHelper.floor_double(this.mc.thePlayer.posX);
-			int var3 = MathHelper.floor_double(this.mc.thePlayer.posY);
-			int var4 = MathHelper.floor_double(this.mc.thePlayer.posZ);
-			int var5 = this.mc.renderEngine.getTexture("/terrain.png");
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var5);
-			int var6 = this.mc.theWorld.getBlockId(var2, var3, var4);
-			if(Block.blocksList[var6] != null) {
-				this.renderInsideOfBlock(var1, Block.blocksList[var6].getBlockTextureFromSide(2));
+		if(this.mc.thePlayer.isEntityInsideOpaqueBlock() && !InputHandler.field_9759_4OT0vPMcJ68s5EU822c0Y9Asw74Su111s3rRCw8OSGMsYM8lx153p73RBtj3) {
+			i2 = MathHelper.floor_double(this.mc.thePlayer.posX);
+			int i3 = MathHelper.floor_double(this.mc.thePlayer.posY);
+			int i4 = MathHelper.floor_double(this.mc.thePlayer.posZ);
+			int i5 = this.mc.renderEngine.getTexture(Minecraft.field_7293_3A3F71eia4o7hinl32z3YhX5z1YU4tLl0Pa5fhF3On0AAcu71UaBBB87kO4L);
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, i5);
+			int i6 = this.mc.theWorld.getBlockId(i2, i3, i4);
+			if(Block.blocksList[i6] != null) {
+				this.renderInsideOfBlock(renderPartialTick, Block.blocksList[i6].getBlockTextureFromSide(2));
 			}
 		}
 
 		if(this.mc.thePlayer.isInsideOfMaterial(Material.water)) {
-			var2 = this.mc.renderEngine.getTexture("/water.png");
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var2);
-			this.renderWarpedTextureOverlay(var1);
+			i2 = this.mc.renderEngine.getTexture("/water.png");
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, i2);
+			this.renderWarpedTextureOverlay(renderPartialTick);
 		}
 
 		GL11.glEnable(GL11.GL_ALPHA_TEST);
 	}
 
-	private void renderInsideOfBlock(float var1, int var2) {
-		Tessellator var3 = Tessellator.instance;
-		this.mc.thePlayer.getBrightness(var1);
-		float var4 = 0.1F;
-		GL11.glColor4f(var4, var4, var4, 0.5F);
+	private void renderInsideOfBlock(float renderPartialTick, int id) {
+		Tessellator tessellator3 = Tessellator.instance;
+		this.mc.thePlayer.getBrightness(renderPartialTick);
+		float f4 = 0.1F;
+		GL11.glColor4f(f4, f4, f4, 0.5F);
 		GL11.glPushMatrix();
-		float var5 = -1.0F;
-		float var6 = 1.0F;
-		float var7 = -1.0F;
-		float var8 = 1.0F;
-		float var9 = -0.5F;
-		float var10 = 0.0078125F;
-		float var11 = (float)(var2 % 16) / 256.0F - var10;
-		float var12 = ((float)(var2 % 16) + 15.99F) / 256.0F + var10;
-		float var13 = (float)(var2 / 16) / 256.0F - var10;
-		float var14 = ((float)(var2 / 16) + 15.99F) / 256.0F + var10;
-		var3.startDrawingQuads();
-		var3.addVertexWithUV((double)var5, (double)var7, (double)var9, (double)var12, (double)var14);
-		var3.addVertexWithUV((double)var6, (double)var7, (double)var9, (double)var11, (double)var14);
-		var3.addVertexWithUV((double)var6, (double)var8, (double)var9, (double)var11, (double)var13);
-		var3.addVertexWithUV((double)var5, (double)var8, (double)var9, (double)var12, (double)var13);
-		var3.draw();
+		float f5 = -1.0F;
+		float f6 = 1.0F;
+		float f7 = -1.0F;
+		float f8 = 1.0F;
+		float f9 = -0.5F;
+		float f10 = 0.0078125F;
+		float f11 = (float)(id % 16) / 256.0F - f10;
+		float f12 = ((float)(id % 16) + 15.99F) / 256.0F + f10;
+		float f13 = (float)(id / 16) / 512.0F - f10;
+		float f14 = ((float)(id / 16) + 15.99F) / 512.0F + f10;
+		tessellator3.startDrawingQuads();
+		tessellator3.addVertexWithUV((double)f5, (double)f7, (double)f9, (double)f12, (double)f14);
+		tessellator3.addVertexWithUV((double)f6, (double)f7, (double)f9, (double)f11, (double)f14);
+		tessellator3.addVertexWithUV((double)f6, (double)f8, (double)f9, (double)f11, (double)f13);
+		tessellator3.addVertexWithUV((double)f5, (double)f8, (double)f9, (double)f12, (double)f13);
+		tessellator3.draw();
 		GL11.glPopMatrix();
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 	}
 
-	private void renderWarpedTextureOverlay(float var1) {
-		Tessellator var2 = Tessellator.instance;
-		float var3 = this.mc.thePlayer.getBrightness(var1);
-		GL11.glColor4f(var3, var3, var3, 0.5F);
+	private void renderWarpedTextureOverlay(float renderPartialTick) {
+		Tessellator tessellator2 = Tessellator.instance;
+		float f3 = this.mc.thePlayer.getBrightness(renderPartialTick);
+		GL11.glColor4f(f3, f3, f3, 0.5F);
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 		GL11.glPushMatrix();
-		float var4 = 4.0F;
-		float var5 = -1.0F;
-		float var6 = 1.0F;
-		float var7 = -1.0F;
-		float var8 = 1.0F;
-		float var9 = -0.5F;
-		float var10 = -this.mc.thePlayer.rotationYaw / 64.0F;
-		float var11 = this.mc.thePlayer.rotationPitch / 64.0F;
-		var2.startDrawingQuads();
-		var2.addVertexWithUV((double)var5, (double)var7, (double)var9, (double)(var4 + var10), (double)(var4 + var11));
-		var2.addVertexWithUV((double)var6, (double)var7, (double)var9, (double)(0.0F + var10), (double)(var4 + var11));
-		var2.addVertexWithUV((double)var6, (double)var8, (double)var9, (double)(0.0F + var10), (double)(0.0F + var11));
-		var2.addVertexWithUV((double)var5, (double)var8, (double)var9, (double)(var4 + var10), (double)(0.0F + var11));
-		var2.draw();
+		float f4 = 4.0F;
+		float f5 = -1.0F;
+		float f6 = 1.0F;
+		float f7 = -1.0F;
+		float f8 = 1.0F;
+		float f9 = -0.5F;
+		float f10 = -this.mc.thePlayer.rotationYaw / 64.0F;
+		float f11 = this.mc.thePlayer.rotationPitch / 64.0F;
+		tessellator2.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(true);
+		tessellator2.addVertexWithUV((double)f5, (double)f7, (double)f9, (double)(f4 + f10), (double)(f4 + f11));
+		tessellator2.addVertexWithUV((double)f6, (double)f7, (double)f9, (double)(0.0F + f10), (double)(f4 + f11));
+		tessellator2.addVertexWithUV((double)f6, (double)f8, (double)f9, (double)(0.0F + f10), (double)(0.0F + f11));
+		tessellator2.addVertexWithUV((double)f5, (double)f8, (double)f9, (double)(f4 + f10), (double)(0.0F + f11));
+		tessellator2.draw();
 		GL11.glPopMatrix();
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		GL11.glDisable(GL11.GL_BLEND);
 	}
 
-	private void renderFireInFirstPerson(float var1) {
-		Tessellator var2 = Tessellator.instance;
+	private void renderFireInFirstPerson(float renderPartialTick) {
+		Tessellator tessellator2 = Tessellator.instance;
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 0.9F);
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-		float var3 = 1.0F;
+		float f3 = 1.0F;
 
-		for(int var4 = 0; var4 < 2; ++var4) {
+		for(int i4 = 0; i4 < 2; ++i4) {
 			GL11.glPushMatrix();
-			int var5 = Block.fire.blockIndexInTexture + var4 * 16;
-			int var6 = (var5 & 15) << 4;
-			int var7 = var5 & 240;
-			float var8 = (float)var6 / 256.0F;
-			float var9 = ((float)var6 + 15.99F) / 256.0F;
-			float var10 = (float)var7 / 256.0F;
-			float var11 = ((float)var7 + 15.99F) / 256.0F;
-			float var12 = (0.0F - var3) / 2.0F;
-			float var13 = var12 + var3;
-			float var14 = 0.0F - var3 / 2.0F;
-			float var15 = var14 + var3;
-			float var16 = -0.5F;
-			GL11.glTranslatef((float)(-(var4 * 2 - 1)) * 0.24F, -0.3F, 0.0F);
-			GL11.glRotatef((float)(var4 * 2 - 1) * 10.0F, 0.0F, 1.0F, 0.0F);
-			var2.startDrawingQuads();
-			var2.addVertexWithUV((double)var12, (double)var14, (double)var16, (double)var9, (double)var11);
-			var2.addVertexWithUV((double)var13, (double)var14, (double)var16, (double)var8, (double)var11);
-			var2.addVertexWithUV((double)var13, (double)var15, (double)var16, (double)var8, (double)var10);
-			var2.addVertexWithUV((double)var12, (double)var15, (double)var16, (double)var9, (double)var10);
-			var2.draw();
+			int i5 = Block.fire.blockIndexInTexture + i4 * 16;
+			int i6 = (i5 & 15) << 4;
+			int i7 = i5 & 4080;
+			float f8 = (float)i6 / 256.0F;
+			float f9 = ((float)i6 + 15.99F) / 256.0F;
+			float f10 = (float)i7 / 512.0F;
+			float f11 = ((float)i7 + 15.99F) / 512.0F;
+			float f12 = (0.0F - f3) / 2.0F;
+			float f13 = f12 + f3;
+			float f14 = 0.0F - f3 / 2.0F;
+			float f15 = f14 + f3;
+			float f16 = -0.5F;
+			GL11.glTranslatef((float)(-(i4 * 2 - 1)) * 0.24F, -0.3F, 0.0F);
+			GL11.glRotatef((float)(i4 * 2 - 1) * 10.0F, 0.0F, 1.0F, 0.0F);
+			tessellator2.startDrawingQuads();
+			tessellator2.addVertexWithUV((double)f12, (double)f14, (double)f16, (double)f9, (double)f11);
+			tessellator2.addVertexWithUV((double)f13, (double)f14, (double)f16, (double)f8, (double)f11);
+			tessellator2.addVertexWithUV((double)f13, (double)f15, (double)f16, (double)f8, (double)f10);
+			tessellator2.addVertexWithUV((double)f12, (double)f15, (double)f16, (double)f9, (double)f10);
+			tessellator2.draw();
 			GL11.glPopMatrix();
 		}
 
@@ -311,22 +314,22 @@
 
 	public void updateEquippedItem() {
 		this.prevEquippedProgress = this.equippedProgress;
-		EntityPlayerSP var1 = this.mc.thePlayer;
-		ItemStack var2 = var1.inventory.getCurrentItem();
-		float var4 = 0.4F;
-		float var5 = var2 == this.itemToRender ? 1.0F : 0.0F;
-		float var6 = var5 - this.equippedProgress;
-		if(var6 < -var4) {
-			var6 = -var4;
-		}
-
-		if(var6 > var4) {
-			var6 = var4;
-		}
-
-		this.equippedProgress += var6;
+		EntityPlayerSP entityPlayerSP1 = this.mc.thePlayer;
+		ItemStack itemStack2 = entityPlayerSP1.inventory.getCurrentItem();
+		float f3 = 0.4F;
+		float f4 = itemStack2 == this.itemToRender ? 1.0F : 0.0F;
+		float f5 = f4 - this.equippedProgress;
+		if(f5 < -f3) {
+			f5 = -f3;
+		}
+
+		if(f5 > f3) {
+			f5 = f3;
+		}
+
+		this.equippedProgress += f5;
 		if(this.equippedProgress < 0.1F) {
-			this.itemToRender = var2;
+			this.itemToRender = itemStack2;
 		}
 
 	}
--- net/minecraft/src/MinecraftAppletImpl.java
+++ net/minecraft/src/MinecraftAppletImpl.java
@@ -3,21 +3,22 @@
 import java.awt.BorderLayout;
 import java.awt.Canvas;
 import java.awt.Component;
+
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.MinecraftApplet;
 
 public class MinecraftAppletImpl extends Minecraft {
 	final MinecraftApplet mainFrame;
 
-	public MinecraftAppletImpl(MinecraftApplet var1, Component var2, Canvas var3, MinecraftApplet var4, int var5, int var6, boolean var7) {
-		super(var2, var3, var4, var5, var6, var7);
-		this.mainFrame = var1;
+	public MinecraftAppletImpl(MinecraftApplet frame, Component component, Canvas canvas, MinecraftApplet mcApplet, int width, int height, boolean fullscreen) {
+		super(component, canvas, mcApplet, width, height, fullscreen);
+		this.mainFrame = frame;
 	}
 
-	public void displayUnexpectedThrowable(UnexpectedThrowable var1) {
+	public void displayUnexpectedThrowable(UnexpectedThrowable unexpectedThrowable) {
 		this.mainFrame.removeAll();
 		this.mainFrame.setLayout(new BorderLayout());
-		this.mainFrame.add(new PanelCrashReport(var1), "Center");
+		this.mainFrame.add(new PanelCrashReport(unexpectedThrowable), "Center");
 		this.mainFrame.validate();
 	}
 }
--- /dev/null
+++ net/minecraft/src/CommandSysexec.java
@@ -1,0 +1,31 @@
+package net.minecraft.src;
+
+import java.io.IOException;
+
+class CommandSysexec extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8605_4Lx7880Ss6WY5QjyXRQ33JFagEWJxATquXiqYI2G0OxmGk970DmRNC5cW7yr;
+    
+    CommandSysexec(final CommandManager abb) {
+        this.field_8605_4Lx7880Ss6WY5QjyXRQ33JFagEWJxATquXiqYI2G0OxmGk970DmRNC5cW7yr = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        if (this.field_8605_4Lx7880Ss6WY5QjyXRQ33JFagEWJxATquXiqYI2G0OxmGk970DmRNC5cW7yr.field_12071_8Mn4tj13vIyC6B4sKvgNU753iaUwsGLVW462dSPrK3Q6u34DDVgN8g4gP3Sg) {
+            try {
+                Runtime.getRuntime().exec((String)arr[0]);
+            }
+            catch (final IOException ex) {
+                ex.printStackTrace();
+            }
+        }
+        else {
+            ExtLogger.i("System execute is currently locked. This command will execute a system command.\n To confirm that you know what you're doing, add \"sysexec_unlock\" to autoexec.cfg and restart the game.");
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "Executable command. " + (this.field_8605_4Lx7880Ss6WY5QjyXRQ33JFagEWJxATquXiqYI2G0OxmGk970DmRNC5cW7yr.field_12071_8Mn4tj13vIyC6B4sKvgNU753iaUwsGLVW462dSPrK3Q6u34DDVgN8g4gP3Sg ? "WARNING: This command may be dangerous!" : "Currently locked.");
+    }
+}
--- /dev/null
+++ net/minecraft/src/BlockFlowingOld.java
@@ -1,0 +1,258 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockFlowingOld extends BlockFluidOld {
+	int numAdjacentSources = 0;
+	boolean[] isOptimalFlowDirection = new boolean[4];
+	int[] flowCost = new int[4];
+
+	protected BlockFlowingOld(int integer, Material sx) {
+		super(integer, sx);
+	}
+
+	private void updateFlow(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockMetadata(integer2, integer3, integer4);
+		vg.setBlockAndMetadata(integer2, integer3, integer4, this.blockID + 1, i5);
+		vg.markBlocksDirty(integer2, integer3, integer4, integer2, integer3, integer4);
+		vg.markBlockNeedsUpdate(integer2, integer3, integer4);
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		int i6 = this.getFlowDecay(vg, integer2, integer3, integer4);
+		boolean z7 = true;
+		int i9;
+		if(i6 > 0) {
+			byte b8 = -100;
+			this.numAdjacentSources = 0;
+			int i11 = this.getSmallestFlowDecay(vg, integer2 - 1, integer3, integer4, b8);
+			i11 = this.getSmallestFlowDecay(vg, integer2 + 1, integer3, integer4, i11);
+			i11 = this.getSmallestFlowDecay(vg, integer2, integer3, integer4 - 1, i11);
+			i11 = this.getSmallestFlowDecay(vg, integer2, integer3, integer4 + 1, i11);
+			i9 = i11 + this.fluidType;
+			if(i9 >= 8 || i11 < 0) {
+				i9 = -1;
+			}
+
+			if(this.getFlowDecay(vg, integer2, integer3 + 1, integer4) >= 0) {
+				int i10 = this.getFlowDecay(vg, integer2, integer3 + 1, integer4);
+				if(i10 >= 8) {
+					i9 = i10;
+				} else {
+					i9 = i10 + 8;
+				}
+			}
+
+			if(this.numAdjacentSources >= 2 && this.material == Material.water) {
+				if(vg.isBlockNormalCube(integer2, integer3 - 1, integer4)) {
+					i9 = 0;
+				} else if(vg.getBlockMaterial(integer2, integer3 - 1, integer4) == this.material && vg.getBlockMetadata(integer2, integer3, integer4) == 0) {
+					i9 = 0;
+				}
+			}
+
+			if(this.material == Material.lava && i6 < 8 && i9 < 8 && i9 > i6 && random.nextInt(4) != 0) {
+				i9 = i6;
+				z7 = false;
+			}
+
+			if(i9 != i6) {
+				i6 = i9;
+				if(i9 < 0) {
+					vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+				} else {
+					vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i9);
+					vg.scheduleBlockUpdate(integer2, integer3, integer4, this.blockID);
+					vg.notifyBlocksOfNeighborChange(integer2, integer3, integer4, this.blockID);
+				}
+			} else if(z7) {
+				this.updateFlow(vg, integer2, integer3, integer4);
+			}
+		} else {
+			this.updateFlow(vg, integer2, integer3, integer4);
+		}
+
+		if(this.liquidCanDisplaceBlock(vg, integer2, integer3 - 1, integer4)) {
+			if(i6 >= 8) {
+				vg.setBlockAndMetadataWithNotify(integer2, integer3 - 1, integer4, this.blockID, i6);
+			} else {
+				vg.setBlockAndMetadataWithNotify(integer2, integer3 - 1, integer4, this.blockID, i6 + 8);
+			}
+		} else if(i6 >= 0 && (i6 == 0 || this.blockBlocksFlow(vg, integer2, integer3 - 1, integer4))) {
+			boolean[] z12 = this.getOptimalFlowDirections(vg, integer2, integer3, integer4);
+			i9 = i6 + this.fluidType;
+			if(i6 >= 8) {
+				i9 = 1;
+			}
+
+			if(i9 >= 8) {
+				return;
+			}
+
+			if(z12[0]) {
+				this.flowIntoBlock(vg, integer2 - 1, integer3, integer4, i9);
+			}
+
+			if(z12[1]) {
+				this.flowIntoBlock(vg, integer2 + 1, integer3, integer4, i9);
+			}
+
+			if(z12[2]) {
+				this.flowIntoBlock(vg, integer2, integer3, integer4 - 1, i9);
+			}
+
+			if(z12[3]) {
+				this.flowIntoBlock(vg, integer2, integer3, integer4 + 1, i9);
+			}
+		}
+
+	}
+
+	private void flowIntoBlock(World vg, int integer2, int integer3, int integer4, int integer5) {
+		if(this.liquidCanDisplaceBlock(vg, integer2, integer3, integer4)) {
+			int i6 = vg.getBlockId(integer2, integer3, integer4);
+			if(i6 > 0) {
+				if(this.material == Material.lava) {
+					this.triggerLavaMixEffects(vg, integer2, integer3, integer4);
+				} else {
+					BlockOld.blocksList[i6].dropBlockAsItem(vg, integer2, integer3, integer4, vg.getBlockMetadata(integer2, integer3, integer4));
+				}
+			}
+
+			vg.setBlockAndMetadataWithNotify(integer2, integer3, integer4, this.blockID, integer5);
+		}
+
+	}
+
+	private int calculateFlowCost(World vg, int integer2, int integer3, int integer4, int integer5, int integer6) {
+		int i7 = 1000;
+
+		for(int i8 = 0; i8 < 4; ++i8) {
+			if((i8 != 0 || integer6 != 1) && (i8 != 1 || integer6 != 0) && (i8 != 2 || integer6 != 3) && (i8 != 3 || integer6 != 2)) {
+				int i9 = integer2;
+				int i11 = integer4;
+				if(i8 == 0) {
+					i9 = integer2 - 1;
+				}
+
+				if(i8 == 1) {
+					++i9;
+				}
+
+				if(i8 == 2) {
+					i11 = integer4 - 1;
+				}
+
+				if(i8 == 3) {
+					++i11;
+				}
+
+				if(!this.blockBlocksFlow(vg, i9, integer3, i11) && (vg.getBlockMaterial(i9, integer3, i11) != this.material || vg.getBlockMetadata(i9, integer3, i11) != 0)) {
+					if(!this.blockBlocksFlow(vg, i9, integer3 - 1, i11)) {
+						return integer5;
+					}
+
+					if(integer5 < 4) {
+						int i12 = this.calculateFlowCost(vg, i9, integer3, i11, integer5 + 1, i8);
+						if(i12 < i7) {
+							i7 = i12;
+						}
+					}
+				}
+			}
+		}
+
+		return i7;
+	}
+
+	private boolean[] getOptimalFlowDirections(World vg, int integer2, int integer3, int integer4) {
+		int i5;
+		int i6;
+		for(i5 = 0; i5 < 4; ++i5) {
+			this.flowCost[i5] = 1000;
+			i6 = integer2;
+			int i8 = integer4;
+			if(i5 == 0) {
+				i6 = integer2 - 1;
+			}
+
+			if(i5 == 1) {
+				++i6;
+			}
+
+			if(i5 == 2) {
+				i8 = integer4 - 1;
+			}
+
+			if(i5 == 3) {
+				++i8;
+			}
+
+			if(!this.blockBlocksFlow(vg, i6, integer3, i8) && (vg.getBlockMaterial(i6, integer3, i8) != this.material || vg.getBlockMetadata(i6, integer3, i8) != 0)) {
+				if(!this.blockBlocksFlow(vg, i6, integer3 - 1, i8)) {
+					this.flowCost[i5] = 0;
+				} else {
+					this.flowCost[i5] = this.calculateFlowCost(vg, i6, integer3, i8, 1, i5);
+				}
+			}
+		}
+
+		i5 = this.flowCost[0];
+
+		for(i6 = 1; i6 < 4; ++i6) {
+			if(this.flowCost[i6] < i5) {
+				i5 = this.flowCost[i6];
+			}
+		}
+
+		for(i6 = 0; i6 < 4; ++i6) {
+			this.isOptimalFlowDirection[i6] = this.flowCost[i6] == i5;
+		}
+
+		return this.isOptimalFlowDirection;
+	}
+
+	private boolean blockBlocksFlow(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockId(integer2, integer3, integer4);
+		if(i5 != BlockOld.doorWood.blockID && i5 != BlockOld.doorSteel.blockID && i5 != BlockOld.signStanding.blockID && i5 != BlockOld.ladder.blockID && i5 != BlockOld.reed.blockID) {
+			if(i5 == 0) {
+				return false;
+			} else {
+				Material material6 = BlockOld.blocksList[i5].material;
+				return material6.isSolid();
+			}
+		} else {
+			return true;
+		}
+	}
+
+	protected int getSmallestFlowDecay(World vg, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = this.getFlowDecay(vg, integer2, integer3, integer4);
+		if(i6 < 0) {
+			return integer5;
+		} else {
+			if(i6 == 0) {
+				++this.numAdjacentSources;
+			}
+
+			if(i6 >= 8) {
+				i6 = 0;
+			}
+
+			return integer5 >= 0 && i6 >= integer5 ? integer5 : i6;
+		}
+	}
+
+	private boolean liquidCanDisplaceBlock(World vg, int integer2, int integer3, int integer4) {
+		Material material5 = vg.getBlockMaterial(integer2, integer3, integer4);
+		return material5 == this.material ? false : (material5 == Material.lava ? false : !this.blockBlocksFlow(vg, integer2, integer3, integer4));
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+		super.onBlockAdded(vg, integer2, integer3, integer4);
+		if(vg.getBlockId(integer2, integer3, integer4) == this.blockID) {
+			vg.scheduleBlockUpdate(integer2, integer3, integer4, this.blockID);
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/Packet211.java
@@ -1,0 +1,40 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet211 extends Packet {
+	public XYZv field_8478_2tSnAC2xVUHExz1aDX8Sa8Y3qNowB5P09O82NNyk8BjqM44f064S2911lmuQ;
+	public XYZv field_8477_6nRq2qJNrDKC2o4Y72ETc41d4Mx8UAPay651yfdnjp6nj25JnXzS4zszE35c;
+	public int field_8476_3gK8iVkh5Ag4DU8I447HxslvLJJu2925rh5f4WA43l64kg50e321Ohb427Ez;
+
+	public Packet211(XYZv ya1, XYZv ya2, int integer) {
+		this.field_8478_2tSnAC2xVUHExz1aDX8Sa8Y3qNowB5P09O82NNyk8BjqM44f064S2911lmuQ = ya1;
+		this.field_8477_6nRq2qJNrDKC2o4Y72ETc41d4Mx8UAPay651yfdnjp6nj25JnXzS4zszE35c = ya2;
+		this.field_8476_3gK8iVkh5Ag4DU8I447HxslvLJJu2925rh5f4WA43l64kg50e321Ohb427Ez = integer;
+	}
+
+	public Packet211() {
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.field_8478_2tSnAC2xVUHExz1aDX8Sa8Y3qNowB5P09O82NNyk8BjqM44f064S2911lmuQ = XYZv.func_11868_10m3QwAtDzN7qIk6oQ7jXh79E780beVWC0FbVnUy640lcC9Qn0J7uJdvVfnw(dataInputStream);
+		this.field_8477_6nRq2qJNrDKC2o4Y72ETc41d4Mx8UAPay651yfdnjp6nj25JnXzS4zszE35c = XYZv.func_11868_10m3QwAtDzN7qIk6oQ7jXh79E780beVWC0FbVnUy640lcC9Qn0J7uJdvVfnw(dataInputStream);
+		this.field_8476_3gK8iVkh5Ag4DU8I447HxslvLJJu2925rh5f4WA43l64kg50e321Ohb427Ez = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		this.field_8478_2tSnAC2xVUHExz1aDX8Sa8Y3qNowB5P09O82NNyk8BjqM44f064S2911lmuQ.func_11869_0FvI7BF1p73olqIovpr2IU9dj1cOi7qQZc81JoYhgeQibNmHY0OuSkDYeuv8(dataOutputStream);
+		this.field_8477_6nRq2qJNrDKC2o4Y72ETc41d4Mx8UAPay651yfdnjp6nj25JnXzS4zszE35c.func_11869_0FvI7BF1p73olqIovpr2IU9dj1cOi7qQZc81JoYhgeQibNmHY0OuSkDYeuv8(dataOutputStream);
+		dataOutputStream.writeInt(this.field_8476_3gK8iVkh5Ag4DU8I447HxslvLJJu2925rh5f4WA43l64kg50e321Ohb427Ez);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.func_9533_25tX06Rn1x8M23UU2H9zV6jXRvKnHTUhNF2dQmklMdj7A1h0k1f98dr4AwsU(this);
+	}
+
+	public int getPacketSize() {
+		return 0;
+	}
+}
--- net/minecraft/src/Packet59ComplexEntity.java
+++ net/minecraft/src/Packet59ComplexEntity.java
@@ -15,42 +15,42 @@
 		this.isChunkDataPacket = true;
 	}
 
-	public Packet59ComplexEntity(int var1, int var2, int var3, TileEntity var4) {
+	public Packet59ComplexEntity(int xCoord, int yCoord, int zCoord, TileEntity tileEntity) {
 		this.isChunkDataPacket = true;
-		this.xCoord = var1;
-		this.yCoord = var2;
-		this.zCoord = var3;
+		this.xCoord = xCoord;
+		this.yCoord = yCoord;
+		this.zCoord = zCoord;
 		this.tileEntityNBT = new NBTTagCompound();
-		var4.writeToNBT(this.tileEntityNBT);
+		tileEntity.writeToNBT(this.tileEntityNBT);
 
 		try {
 			this.compressedNBT = CompressedStreamTools.compress(this.tileEntityNBT);
-		} catch (IOException var6) {
-			var6.printStackTrace();
+		} catch (IOException iOException6) {
+			iOException6.printStackTrace();
 		}
 
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xCoord = var1.readInt();
-		this.yCoord = var1.readShort();
-		this.zCoord = var1.readInt();
-		int var2 = var1.readShort() & '\uffff';
-		this.compressedNBT = new byte[var2];
-		var1.readFully(this.compressedNBT);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xCoord = dataInputStream.readInt();
+		this.yCoord = dataInputStream.readShort();
+		this.zCoord = dataInputStream.readInt();
+		int i2 = dataInputStream.readShort() & 65535;
+		this.compressedNBT = new byte[i2];
+		dataInputStream.readFully(this.compressedNBT);
 		this.tileEntityNBT = CompressedStreamTools.decompress(this.compressedNBT);
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xCoord);
-		var1.writeShort(this.yCoord);
-		var1.writeInt(this.zCoord);
-		var1.writeShort((short)this.compressedNBT.length);
-		var1.write(this.compressedNBT);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xCoord);
+		dataOutputStream.writeShort(this.yCoord);
+		dataOutputStream.writeInt(this.zCoord);
+		dataOutputStream.writeShort((short)this.compressedNBT.length);
+		dataOutputStream.write(this.compressedNBT);
 	}
 
-	public void processPacket(NetHandler var1) {
-		var1.handleComplexEntity(this);
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleComplexEntity(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/CraftingRecipe.java
+++ net/minecraft/src/CraftingRecipe.java
@@ -1,28 +1,28 @@
 package net.minecraft.src;
 
 public class CraftingRecipe {
-	private int width;
-	private int height;
-	private int[] ingredientMap;
+	protected int width;
+	protected int height;
+	public int[] ingredientMap;
 	private ItemStack resultStack;
 	public final int resultId;
 
-	public CraftingRecipe(int var1, int var2, int[] var3, ItemStack var4) {
-		this.resultId = var4.itemID;
-		this.width = var1;
-		this.height = var2;
-		this.ingredientMap = var3;
-		this.resultStack = var4;
+	public CraftingRecipe(int width, int height, int[] ingredientMap, ItemStack resultStack) {
+		this.resultId = resultStack.itemID;
+		this.width = width;
+		this.height = height;
+		this.ingredientMap = ingredientMap;
+		this.resultStack = resultStack;
 	}
 
-	public boolean matches(int[] var1) {
-		for(int var2 = 0; var2 <= 3 - this.width; ++var2) {
-			for(int var3 = 0; var3 <= 3 - this.height; ++var3) {
-				if(this.checkMatch(var1, var2, var3, true)) {
+	public boolean matches(int[] arr) {
+		for(int i2 = 0; i2 <= 3 - this.width; ++i2) {
+			for(int i3 = 0; i3 <= 3 - this.height; ++i3) {
+				if(this.checkMatch(arr, i2, i3, true)) {
 					return true;
 				}
 
-				if(this.checkMatch(var1, var2, var3, false)) {
+				if(this.checkMatch(arr, i2, i3, false)) {
 					return true;
 				}
 			}
@@ -31,21 +31,21 @@
 		return false;
 	}
 
-	private boolean checkMatch(int[] var1, int var2, int var3, boolean var4) {
-		for(int var5 = 0; var5 < 3; ++var5) {
-			for(int var6 = 0; var6 < 3; ++var6) {
-				int var7 = var5 - var2;
-				int var8 = var6 - var3;
-				int var9 = -1;
-				if(var7 >= 0 && var8 >= 0 && var7 < this.width && var8 < this.height) {
-					if(var4) {
-						var9 = this.ingredientMap[this.width - var7 - 1 + var8 * this.width];
+	private boolean checkMatch(int[] arr, int integer2, int integer3, boolean boolean4) {
+		for(int i5 = 0; i5 < 3; ++i5) {
+			for(int i6 = 0; i6 < 3; ++i6) {
+				int i7 = i5 - integer2;
+				int i8 = i6 - integer3;
+				int i9 = -1;
+				if(i7 >= 0 && i8 >= 0 && i7 < this.width && i8 < this.height) {
+					if(boolean4) {
+						i9 = this.ingredientMap[this.width - i7 - 1 + i8 * this.width];
 					} else {
-						var9 = this.ingredientMap[var7 + var8 * this.width];
+						i9 = this.ingredientMap[i7 + i8 * this.width];
 					}
 				}
 
-				if(var1[var5 + var6 * 3] != var9) {
+				if(arr[i5 + i6 * 3] != i9) {
 					return false;
 				}
 			}
@@ -54,7 +54,7 @@
 		return true;
 	}
 
-	public ItemStack getCraftingResult(int[] var1) {
+	public ItemStack getCraftingResult(int[] arr) {
 		return new ItemStack(this.resultStack.itemID, this.resultStack.stackSize);
 	}
 
--- /dev/null
+++ net/minecraft/src/ZMWorld.java
@@ -1,0 +1,157 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.Iterator;
+import java.util.List;
+
+public class ZMWorld extends World {
+	public boolean timeStop = true;
+	public ItemStack[] startingItems = new ItemStack[]{new ItemStack(ExtItems.essenceGun, 1), new ItemStack(Item.swordStone)};
+	public List<WorldZMSpawn> enemySpawnLocations = new ArrayList();
+	public long ticksSurvived = 0L;
+	public int wave = 1;
+	public long field_7558_0a06D5YEE1su43gLfg0P9tJdSb06y5j0FwuRj3v0TFssVT751os7nc9nMBO8 = 0L;
+	public int field_7562_3PLxvFTSuw98l2Tmt3im3M24nX1eATY0cEgRp2TFFF4G6s95xE89X6PYKutH = 12;
+	public int field_7560_9fsUf42iKW8Ad0Yo3kkrnNSO0vKS6005a53lat9RVL926s5o6x6Hci42ZQKP = 0;
+	public int field_7563_094H2VxtQX1PBry5CvxOiTi1xXrY5nta9M6hMPv418x8M47N5W97AYsw3wm2 = 0;
+	public int field_7564_45rEZ3HI0azo79wmVrpyVd3Wwm68hcMFd58vEQ7B6B7u9XuU8Ot93Mb9m3IR = 80;
+	public List field_7566_69E5GE0gWo145zq9937KGEU69w4fB0548pDTr5ja6vCMm6tn1vRONd86gs5E = new ArrayList();
+
+	public ZMWorld(File worldFile, String levelName) {
+		super(worldFile, levelName);
+	}
+
+	public XYZv func_7546_09CNVM2pJHfEd8I53GaO82x396qpVix0JSZqlf73zO9Itp6Z0ZM1dFPcr9r6() {
+		return new XYZv(-173L, 66L, 123L);
+	}
+
+	public int func_7551_4HbhCuZ31Qm43141r8d6708jOZ2n3Mc1cYV1vxpZhc5eG8ZMbuvK0a7piUU0() {
+		return 22500;
+	}
+
+	public void saveWorld(boolean flag, IProgressUpdate progressUpdate) {
+	}
+
+	public void func_7555_0bxBq3DD3lTvn8h5d6Lh9Ud6SBFd8P1VY734Br5npXUaSk1x7rgO4bfsPjZk() {
+	}
+
+	public void tick() {
+		super.tick();
+		this.worldTime = (long)this.func_7551_4HbhCuZ31Qm43141r8d6708jOZ2n3Mc1cYV1vxpZhc5eG8ZMbuvK0a7piUU0();
+		++this.ticksSurvived;
+		ArrayList arrayList1 = new ArrayList(this.loadedEntityList);
+
+		int i2;
+		for(i2 = 0; i2 != arrayList1.size(); ++i2) {
+			Entity entity3 = (Entity)arrayList1.get(i2);
+			if(entity3 instanceof EntityLiving && !(entity3 instanceof EntityPlayer) && !this.field_7566_69E5GE0gWo145zq9937KGEU69w4fB0548pDTr5ja6vCMm6tn1vRONd86gs5E.contains(entity3)) {
+				((EntityLiving)entity3).setEntityDead();
+			}
+		}
+
+		if(this.ticksSurvived - this.field_7558_0a06D5YEE1su43gLfg0P9tJdSb06y5j0FwuRj3v0TFssVT751os7nc9nMBO8 > 80L && this.field_7560_9fsUf42iKW8Ad0Yo3kkrnNSO0vKS6005a53lat9RVL926s5o6x6Hci42ZQKP < this.field_7562_3PLxvFTSuw98l2Tmt3im3M24nX1eATY0cEgRp2TFFF4G6s95xE89X6PYKutH && this.field_7560_9fsUf42iKW8Ad0Yo3kkrnNSO0vKS6005a53lat9RVL926s5o6x6Hci42ZQKP - this.field_7563_094H2VxtQX1PBry5CvxOiTi1xXrY5nta9M6hMPv418x8M47N5W97AYsw3wm2 < this.field_7564_45rEZ3HI0azo79wmVrpyVd3Wwm68hcMFd58vEQ7B6B7u9XuU8Ot93Mb9m3IR) {
+			this.func_7545_6E57ArmM4tG705sorFgr926pjKRa05584p9pSp68T1cpI37i6B1u1uj9981c();
+		}
+
+		if(this.field_7562_3PLxvFTSuw98l2Tmt3im3M24nX1eATY0cEgRp2TFFF4G6s95xE89X6PYKutH == this.field_7563_094H2VxtQX1PBry5CvxOiTi1xXrY5nta9M6hMPv418x8M47N5W97AYsw3wm2) {
+			this.field_7563_094H2VxtQX1PBry5CvxOiTi1xXrY5nta9M6hMPv418x8M47N5W97AYsw3wm2 = 0;
+			this.field_7560_9fsUf42iKW8Ad0Yo3kkrnNSO0vKS6005a53lat9RVL926s5o6x6Hci42ZQKP = 0;
+			this.field_7562_3PLxvFTSuw98l2Tmt3im3M24nX1eATY0cEgRp2TFFF4G6s95xE89X6PYKutH = (int)((float)this.field_7562_3PLxvFTSuw98l2Tmt3im3M24nX1eATY0cEgRp2TFFF4G6s95xE89X6PYKutH * 1.2F * (float)this.wave);
+			this.field_7558_0a06D5YEE1su43gLfg0P9tJdSb06y5j0FwuRj3v0TFssVT751os7nc9nMBO8 = this.ticksSurvived;
+			InputHandler.mc.field_7274_2M9bMSgxMHRwiJJVEJmZ4pFDp6UU0b6N221me0GNgln99zqYFdkpLD2Z3m5s.field_10942_7xLO64tuZWfUPmt15N4O95hJ0176qp03d5mSW8trXS890yqputsco88a0dk3.func_10073_4OjZEoPxA0x4pjSZ22wVm3rWf8dTpmR2s15oMOMQDzjN06Z5Bhw6tzf56WRo(new Object[]{this, this.wave});
+			++this.wave;
+		}
+
+		for(i2 = 0; i2 != this.field_7566_69E5GE0gWo145zq9937KGEU69w4fB0548pDTr5ja6vCMm6tn1vRONd86gs5E.size(); ++i2) {
+			EntityZombie entityZombie4 = (EntityZombie)this.field_7566_69E5GE0gWo145zq9937KGEU69w4fB0548pDTr5ja6vCMm6tn1vRONd86gs5E.get(i2);
+			if(entityZombie4.isDead && !entityZombie4.field_9125_1El4crnUetNgXSg7SKknZ3Xrp3gsWZDYE4H3O0PK0rXkIR7u7tRB3Mk2D66I) {
+				this.field_7566_69E5GE0gWo145zq9937KGEU69w4fB0548pDTr5ja6vCMm6tn1vRONd86gs5E.remove(i2);
+				--i2;
+				this.func_7545_6E57ArmM4tG705sorFgr926pjKRa05584p9pSp68T1cpI37i6B1u1uj9981c();
+				--this.field_7560_9fsUf42iKW8Ad0Yo3kkrnNSO0vKS6005a53lat9RVL926s5o6x6Hci42ZQKP;
+			}
+		}
+
+	}
+
+	public boolean func_7458_5r8qe5geuw4S9tsd10m7M2qgIZAlCgZo31t563di8oEr3d5K6yrFyI690mD5() {
+		return false;
+	}
+
+	public WorldZMSpawn func_7548_9oSwPt3wEQvtmy9u58Duzu22rF4SK8SZ8iwUwj65bqJS83961s90u0SJcE1O(boolean bl) {
+        ArrayList arrayList = new ArrayList();
+        EntityPlayerSP entityPlayerSP = InputHandler.mc.thePlayer;
+        HandlerSetCheckpointUnknownClass2 handlerSetCheckpointUnknownClass2 = new HandlerSetCheckpointUnknownClass2(entityPlayerSP.posX, entityPlayerSP.posY, entityPlayerSP.posZ);
+        for (WorldZMSpawn worldZMSpawn : this.enemySpawnLocations) {
+            HandlerSetCheckpointUnknownClass2 handlerSetCheckpointUnknownClass22 = worldZMSpawn.field_11034_662fuevXMrncHQHqjFB49Bxq6yi97SM7D89qKtblVUcLLaX82L33EYCU1qp7.func_12096_2rdzFnI6r437tV8H4g4amO6c0UvbR1Bk63McJ9C8IuxrI5J07L0IocLF91rI();
+            double d = handlerSetCheckpointUnknownClass2.func_12185_77E7ly6r5p8AgeD7j1MC3wrd4wUdbSPPEtyupBLDu5J7c0z302AEf633qiD9(handlerSetCheckpointUnknownClass22.field_12186_05n216qDAUZ2kE810Fqi64V6niu79vbRckyfaVY9Fqw11STapU0px02uapMx, handlerSetCheckpointUnknownClass22.field_12187_7Kg8S2j0ooT9LE62UmIi8A7J7Y4sM22qj00KYKP97u5583AOirdarRO6WOFv);
+            if (!(d < 48.0) && !bl) continue;
+            arrayList.add((Object)worldZMSpawn);
+        }
+        Collections.sort((List)arrayList, (Comparator)new WorldZMUnknownClass(this, handlerSetCheckpointUnknownClass2));
+        return arrayList.size() == 0 ? null : (arrayList.size() == 1 ? (WorldZMSpawn)arrayList.get(0) : (WorldZMSpawn)arrayList.get(this.rand.nextInt(Math.min((int)arrayList.size(), (int)3))));
+    }
+
+	public boolean func_7554_0I283audif5iacL5K5Ui88QGwr47fu94TPZL1hdjcTpUe0ULL4h3e2jdjO8b(EntityZombie ap) {
+		WorldZMSpawn worldZMSpawn2 = this.func_7548_9oSwPt3wEQvtmy9u58Duzu22rF4SK8SZ8iwUwj65bqJS83961s90u0SJcE1O(true);
+		if(worldZMSpawn2 != null) {
+			ap.field_9124_4tH5o01tS5v858g45IUmtS5yD0VBrCu75xP0sp51kFpd4DMdwEBUTO9F2jYg = worldZMSpawn2.field_11034_662fuevXMrncHQHqjFB49Bxq6yi97SM7D89qKtblVUcLLaX82L33EYCU1qp7.func_12096_2rdzFnI6r437tV8H4g4amO6c0UvbR1Bk63McJ9C8IuxrI5J07L0IocLF91rI();
+			ap.setPosition((double)worldZMSpawn2.field_11034_662fuevXMrncHQHqjFB49Bxq6yi97SM7D89qKtblVUcLLaX82L33EYCU1qp7.bx1, (double)worldZMSpawn2.field_11034_662fuevXMrncHQHqjFB49Bxq6yi97SM7D89qKtblVUcLLaX82L33EYCU1qp7.by1 + 1.0D, (double)worldZMSpawn2.field_11034_662fuevXMrncHQHqjFB49Bxq6yi97SM7D89qKtblVUcLLaX82L33EYCU1qp7.bz1);
+			ap.field_9105_3e9WI32iDh4NvqQqp7smSXYS6MgX8c7p1TQZ6CFtIytS7734Ipx762147ExM = worldZMSpawn2.field_11033_85Q614uweQgQS6ze8y47wKNEd1bv2TQP6pdVWrAuxf7YhBjC1c6X9oe9bF64;
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public void func_7545_6E57ArmM4tG705sorFgr926pjKRa05584p9pSp68T1cpI37i6B1u1uj9981c() {
+		WorldZMSpawn worldZMSpawn1 = this.func_7548_9oSwPt3wEQvtmy9u58Duzu22rF4SK8SZ8iwUwj65bqJS83961s90u0SJcE1O(false);
+		if(worldZMSpawn1 != null) {
+			EntityZombie entityZombie2 = new EntityZombie(this, worldZMSpawn1.field_11034_662fuevXMrncHQHqjFB49Bxq6yi97SM7D89qKtblVUcLLaX82L33EYCU1qp7.func_12096_2rdzFnI6r437tV8H4g4amO6c0UvbR1Bk63McJ9C8IuxrI5J07L0IocLF91rI());
+			entityZombie2.setPosition((double)worldZMSpawn1.field_11034_662fuevXMrncHQHqjFB49Bxq6yi97SM7D89qKtblVUcLLaX82L33EYCU1qp7.bx1, (double)worldZMSpawn1.field_11034_662fuevXMrncHQHqjFB49Bxq6yi97SM7D89qKtblVUcLLaX82L33EYCU1qp7.by1 + 0.5D, (double)worldZMSpawn1.field_11034_662fuevXMrncHQHqjFB49Bxq6yi97SM7D89qKtblVUcLLaX82L33EYCU1qp7.bz1);
+			this.spawnEntityInWorld(entityZombie2);
+			entityZombie2.entityToAttack = (Entity)this.playerEntities.get(0);
+			++this.field_7560_9fsUf42iKW8Ad0Yo3kkrnNSO0vKS6005a53lat9RVL926s5o6x6Hci42ZQKP;
+			this.field_7566_69E5GE0gWo145zq9937KGEU69w4fB0548pDTr5ja6vCMm6tn1vRONd86gs5E.add(entityZombie2);
+		}
+
+	}
+
+	public int func_7553_1Am4hwcD890pxiJ6yuW7PxUZYCDOP81V4cTtxj1Nx79vmSeJ3Q1x7o3bNkVz(EnumVendingMachine _1902uulnDdAkub863Ix3rm71bL5kvfdD69WJodWuN7PsaTVCd2r3PxE8x6z9wX4bI134l5oES8B2nCfn9cZ2Y3E9NgJ9EmdW) {
+		switch(EnumVendingMachineUnknownClass2.field_11433_0M28h83Jjs6KmDr1Uir3SDVsJbhPQIEw8F28z7198re2u76qrhdn5SFW986a[_1902uulnDdAkub863Ix3rm71bL5kvfdD69WJodWuN7PsaTVCd2r3PxE8x6z9wX4bI134l5oES8B2nCfn9cZ2Y3E9NgJ9EmdW.ordinal()]) {
+		case 1:
+			return 1500;
+		case 2:
+			return 7500;
+		case 3:
+			return 2500;
+		case 4:
+			return 600;
+		default:
+			return 1;
+		}
+	}
+
+	public void func_7552_036DW72WL0cd7Vw9IwUIgji0lq5c1Ohi97waHrW37UV3X1L0uWXa6RqT45zH(EntityZombie ap) {
+		++this.field_7563_094H2VxtQX1PBry5CvxOiTi1xXrY5nta9M6hMPv418x8M47N5W97AYsw3wm2;
+		this.field_7566_69E5GE0gWo145zq9937KGEU69w4fB0548pDTr5ja6vCMm6tn1vRONd86gs5E.remove(ap);
+	}
+
+	public int func_7547_7wmn1Zcw5XkXB713A8pO6G393j0dbhaxkUpdvto5V7Th2f9uwaIY1qagv9mW(XYZv ya) {
+		XYZv xYZv2 = this.func_7546_09CNVM2pJHfEd8I53GaO82x396qpVix0JSZqlf73zO9Itp6Z0ZM1dFPcr9r6();
+		return Math.max((int)(ya.func_11872_2Vm0piSCo4ykAfHelABiK5FXJ9tUuqjpMwL9NT18g5H4bYKrtlp0Sc734m9O().func_12185_77E7ly6r5p8AgeD7j1MC3wrd4wUdbSPPEtyupBLDu5J7c0z302AEf633qiD9((double)xYZv2.x, (double)xYZv2.z) / 10.0D) * 250, 250);
+	}
+
+	public void func_7544_6zl5Arnowm866sQ3ny372TOkUNmzVF1HF27ODrSt9jyfg491UBi1U4DDt2Yq(XYZv ya1, XYZv ya2) {
+		Ext1605Utils.func_12137_4B14YTlTqWTNVpM2G9851Dyfx9DbvQPLa5I81ItD974L7kJ315Qu8EP49Cg9(this, ya1, ya2, 0, ExtBlocks.WireframeBlock2.blockID);
+	}
+
+	public void func_7550_1TEi6UNf3SwyaU3NIC3s8C7gZNGcTG9vFQGy5qOc4gI9AwjR87h7g68M37B3(XYZv ya, int integer) {
+	}
+
+	public void func_7549_44O8yX39q3gNk27615OXRQ532BD73gQDG1C0XB575HgYp5YVG7N00ux31ql9(EntityPlayer gb) {
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiButtonUnknownClass.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public class GuiButtonUnknownClass extends GuiButton {
+	public GuiButtonUnknownClass(int integer1, int integer2, int integer3, String string, int integer5, int integer6) {
+		super(integer1, integer2, integer3, integer5, integer6, string);
+	}
+}
--- net/minecraft/src/GuiControls.java
+++ net/minecraft/src/GuiControls.java
@@ -6,47 +6,49 @@
 	private GameSettings options;
 	private int buttonId = -1;
 
-	public GuiControls(GuiScreen var1, GameSettings var2) {
-		this.parentScreen = var1;
-		this.options = var2;
+	public GuiControls(GuiScreen prevScreen, GameSettings gameSettings) {
+		this.parentScreen = prevScreen;
+		this.options = gameSettings;
 	}
 
 	public void initGui() {
-		for(int var1 = 0; var1 < this.options.keyBindings.length; ++var1) {
-			this.controlList.add(new GuiSmallButton(var1, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), this.options.getKeyBindingDescription(var1)));
+		this.controlList.clear();
+
+		for(int i1 = 0; i1 < this.options.keyBindings.length; ++i1) {
+			this.controlList.add(new GuiSmallButton(i1, this.width / 2 - 155 + i1 % 2 * 160, this.height / 6 + 24 * (i1 >> 1), this.options.getKeyBindingDescription(i1)));
 		}
 
 		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, "Done"));
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		for(int var2 = 0; var2 < this.options.keyBindings.length; ++var2) {
-			((GuiButton)this.controlList.get(var2)).displayString = this.options.getKeyBindingDescription(var2);
+	protected void actionPerformed(GuiButton button) {
+		for(int i2 = 0; i2 < this.options.keyBindings.length; ++i2) {
+			((GuiButton)this.controlList.get(i2)).displayString = this.options.getKeyBindingDescription(i2);
 		}
 
-		if(var1.id == 200) {
+		if(button.id == 200) {
 			this.mc.displayGuiScreen(this.parentScreen);
 		} else {
-			this.buttonId = var1.id;
-			var1.displayString = "> " + this.options.getKeyBindingDescription(var1.id) + " <";
+			this.buttonId = button.id;
+			button.displayString = "> " + this.options.getKeyBindingDescription(button.id) + " <";
 		}
 
 	}
 
-	protected void keyTyped(char var1, int var2) {
+	protected void keyTyped(char character, int key) {
 		if(this.buttonId >= 0) {
-			this.options.setKeyBinding(this.buttonId, var2);
+			this.options.setKeyBinding(this.buttonId, key);
 			((GuiButton)this.controlList.get(this.buttonId)).displayString = this.options.getKeyBindingDescription(this.buttonId);
 			this.buttonId = -1;
 		} else {
-			super.keyTyped(var1, var2);
+			super.keyTyped(character, key);
 		}
 
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 }
--- /dev/null
+++ net/minecraft/src/GuiCredits.java
@@ -1,0 +1,51 @@
+package net.minecraft.src;
+
+public class GuiCredits extends GuiScreen {
+	private GuiScreen field_7947_994TrQTlCBG2lkIB03vK4YlFIr0sq3S3HBfH2m6CK0uQ4Dr0dXaxEJl5Kf77;
+	private static String[] field_7946_6tw0182g61PwvO1HRt15F3R423i5i3Nd9tnh1o7rWG5Yd4hz2p64rhLBXZ3t = new String[0];
+	private static String[] field_7945_24nXfzg59unTq8HYkXg1zgR80M3c616R47FU6ZED994Wy5293Y3Z5sF2q5Be = new String[2];
+	private static String[] field_7944_6nz38Zoucsl88251Ndbx9W06LlmUZr79gC550AEbRbr9O7NGcKg067vCr6A8 = new String[2];
+
+	public GuiCredits(GuiScreen hr) {
+		this.field_7947_994TrQTlCBG2lkIB03vK4YlFIr0sq3S3HBfH2m6CK0uQ4Dr0dXaxEJl5Kf77 = hr;
+	}
+
+	public void initGui() {
+		super.initGui();
+		this.controlList.clear();
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120 + 12, "Done"));
+	}
+
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		this.drawDefaultBackground();
+		this.drawCenteredString(this.fontRenderer, "Alpha 1.0.16.05_20 Cypress", this.width / 2, 20, 0xFFFFFF);
+		this.fontRenderer.drawStringWithShadow("Third-party code:", 20, 60 + field_7946_6tw0182g61PwvO1HRt15F3R423i5i3Nd9tnh1o7rWG5Yd4hz2p64rhLBXZ3t.length * 10 + 10, 0xFFFFFF);
+
+		int i4;
+		for(i4 = 0; i4 < field_7945_24nXfzg59unTq8HYkXg1zgR80M3c616R47FU6ZED994Wy5293Y3Z5sF2q5Be.length; ++i4) {
+			this.fontRenderer.drawString("- " + field_7945_24nXfzg59unTq8HYkXg1zgR80M3c616R47FU6ZED994Wy5293Y3Z5sF2q5Be[i4], 20, 60 + field_7946_6tw0182g61PwvO1HRt15F3R423i5i3Nd9tnh1o7rWG5Yd4hz2p64rhLBXZ3t.length * 10 + 20 + i4 * 10, 0xFFFFFF);
+		}
+
+		this.fontRenderer.drawStringWithShadow("Special thanks to:", 20, 60 + field_7946_6tw0182g61PwvO1HRt15F3R423i5i3Nd9tnh1o7rWG5Yd4hz2p64rhLBXZ3t.length * 10 + 20 + field_7945_24nXfzg59unTq8HYkXg1zgR80M3c616R47FU6ZED994Wy5293Y3Z5sF2q5Be.length * 10 + 10, 0xFFFFFF);
+
+		for(i4 = 0; i4 < field_7944_6nz38Zoucsl88251Ndbx9W06LlmUZr79gC550AEbRbr9O7NGcKg067vCr6A8.length; ++i4) {
+			this.fontRenderer.drawString("- " + field_7944_6nz38Zoucsl88251Ndbx9W06LlmUZr79gC550AEbRbr9O7NGcKg067vCr6A8[i4], 20, 60 + field_7946_6tw0182g61PwvO1HRt15F3R423i5i3Nd9tnh1o7rWG5Yd4hz2p64rhLBXZ3t.length * 10 + 20 + field_7945_24nXfzg59unTq8HYkXg1zgR80M3c616R47FU6ZED994Wy5293Y3Z5sF2q5Be.length * 10 + 20 + i4 * 10, 0xFFFFFF);
+		}
+
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
+	}
+
+	protected void actionPerformed(GuiButton button) {
+		if(button.id == 0) {
+			this.mc.displayGuiScreen(this.field_7947_994TrQTlCBG2lkIB03vK4YlFIr0sq3S3HBfH2m6CK0uQ4Dr0dXaxEJl5Kf77);
+		}
+
+	}
+
+	static {
+		field_7945_24nXfzg59unTq8HYkXg1zgR80M3c616R47FU6ZED994Wy5293Y3Z5sF2q5Be[0] = "ModLoader by Risugami";
+		field_7945_24nXfzg59unTq8HYkXg1zgR80M3c616R47FU6ZED994Wy5293Y3Z5sF2q5Be[1] = "GLSL Shader support by daxnitro";
+		field_7944_6nz38Zoucsl88251Ndbx9W06LlmUZr79gC550AEbRbr9O7NGcKg067vCr6A8[0] = "Mojang Studios";
+		field_7944_6nz38Zoucsl88251Ndbx9W06LlmUZr79gC550AEbRbr9O7NGcKg067vCr6A8[1] = "Google Inc.";
+	}
+}
--- /dev/null
+++ net/minecraft/src/InventoryCB.java
@@ -1,0 +1,5 @@
+package net.minecraft.src;
+
+public abstract class InventoryCB {
+	public abstract void a(IInventory iInventory1);
+}
--- /dev/null
+++ net/minecraft/src/DS5Instruction.java
@@ -1,0 +1,5 @@
+package net.minecraft.src;
+
+public interface DS5Instruction {
+	String GetJSON();
+}
--- /dev/null
+++ net/minecraft/src/BlockLadderOld.java
@@ -1,0 +1,121 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockLadderOld extends BlockOld {
+	protected BlockLadderOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.circuits);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockMetadata(integer2, integer3, integer4);
+		float f6 = 0.125F;
+		if(i5 == 2) {
+			this.setBlockBounds(0.0F, 0.0F, 1.0F - f6, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(i5 == 3) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f6);
+		}
+
+		if(i5 == 4) {
+			this.setBlockBounds(1.0F - f6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(i5 == 5) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, f6, 1.0F, 1.0F);
+		}
+
+		return super.getCollisionBoundingBoxFromPool(vg, integer2, integer3, integer4);
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World vg, int integer2, int integer3, int integer4) {
+		int i5 = vg.getBlockMetadata(integer2, integer3, integer4);
+		float f6 = 0.125F;
+		if(i5 == 2) {
+			this.setBlockBounds(0.0F, 0.0F, 1.0F - f6, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(i5 == 3) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f6);
+		}
+
+		if(i5 == 4) {
+			this.setBlockBounds(1.0F - f6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(i5 == 5) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, f6, 1.0F, 1.0F);
+		}
+
+		return super.getSelectedBoundingBoxFromPool(vg, integer2, integer3, integer4);
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 8;
+	}
+
+	public boolean canPlaceBlockAt(World vg, int integer2, int integer3, int integer4) {
+		return vg.isBlockNormalCube(integer2 - 1, integer3, integer4) ? true : (vg.isBlockNormalCube(integer2 + 1, integer3, integer4) ? true : (vg.isBlockNormalCube(integer2, integer3, integer4 - 1) ? true : vg.isBlockNormalCube(integer2, integer3, integer4 + 1)));
+	}
+
+	public void onBlockPlaced(World vg, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		if((i6 == 0 || integer5 == 2) && vg.isBlockNormalCube(integer2, integer3, integer4 + 1)) {
+			i6 = 2;
+		}
+
+		if((i6 == 0 || integer5 == 3) && vg.isBlockNormalCube(integer2, integer3, integer4 - 1)) {
+			i6 = 3;
+		}
+
+		if((i6 == 0 || integer5 == 4) && vg.isBlockNormalCube(integer2 + 1, integer3, integer4)) {
+			i6 = 4;
+		}
+
+		if((i6 == 0 || integer5 == 5) && vg.isBlockNormalCube(integer2 - 1, integer3, integer4)) {
+			i6 = 5;
+		}
+
+		vg.setBlockMetadataWithNotify(integer2, integer3, integer4, i6);
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = vg.getBlockMetadata(integer2, integer3, integer4);
+		boolean z7 = false;
+		if(i6 == 2 && vg.isBlockNormalCube(integer2, integer3, integer4 + 1)) {
+			z7 = true;
+		}
+
+		if(i6 == 3 && vg.isBlockNormalCube(integer2, integer3, integer4 - 1)) {
+			z7 = true;
+		}
+
+		if(i6 == 4 && vg.isBlockNormalCube(integer2 + 1, integer3, integer4)) {
+			z7 = true;
+		}
+
+		if(i6 == 5 && vg.isBlockNormalCube(integer2 - 1, integer3, integer4)) {
+			z7 = true;
+		}
+
+		if(!z7) {
+			this.dropBlockAsItem(vg, integer2, integer3, integer4, i6);
+			vg.setBlockWithNotify(integer2, integer3, integer4, 0);
+		}
+
+		super.onNeighborBlockChange(vg, integer2, integer3, integer4, integer5);
+	}
+
+	public int quantityDropped(Random random) {
+		return 1;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockSandOld.java
@@ -1,0 +1,53 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockSandOld extends BlockOld {
+	public static boolean fallInstantly = false;
+
+	public BlockSandOld(int integer1, int integer2) {
+		super(integer1, integer2, Material.sand);
+	}
+
+	public void onBlockAdded(World vg, int integer2, int integer3, int integer4) {
+		vg.scheduleBlockUpdate(integer2, integer3, integer4, this.blockID);
+	}
+
+	public void onNeighborBlockChange(World vg, int integer2, int integer3, int integer4, int integer5) {
+		vg.scheduleBlockUpdate(integer2, integer3, integer4, this.blockID);
+	}
+
+	public void updateTick(World vg, int integer2, int integer3, int integer4, Random random) {
+		this.tryToFall(vg, integer2, integer3, integer4);
+	}
+
+	private void tryToFall(World vg, int integer2, int integer3, int integer4) {
+		if(canFallBelow(vg, integer2, integer3 - 1, integer4) && integer3 >= 0) {
+			EntityFallingSand entityFallingSand8 = new EntityFallingSand(vg, (float)integer2 + 0.5F, (float)integer3 + 0.5F, (float)integer4 + 0.5F, this.blockID);
+			if(fallInstantly) {
+				while(!entityFallingSand8.isDead) {
+					entityFallingSand8.onUpdate();
+				}
+			} else {
+				vg.spawnEntityInWorld(entityFallingSand8);
+			}
+		}
+
+	}
+
+	public int tickRate() {
+		return 3;
+	}
+
+	public static boolean canFallBelow(World vg, int integer2, int integer3, int integer4) {
+		int i4 = vg.getBlockId(integer2, integer3, integer4);
+		if(i4 == 0) {
+			return true;
+		} else if(i4 == BlockOld.fire.blockID) {
+			return true;
+		} else {
+			Material material5 = BlockOld.blocksList[i4].material;
+			return material5 == Material.water ? true : material5 == Material.lava;
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/ModelPart.java
@@ -1,0 +1,12 @@
+package net.minecraft.src;
+
+public class ModelPart {
+	@Deprecated
+	public ModelPart getChild(String string) {
+		return this;
+	}
+
+	@Deprecated
+	public void render(PoseStack f, VertexConsumer ie, int integer3, int integer4, float float5, float float6, float float7, float float8) {
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandSavedemo.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+class CommandSavedemo extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8607_8I9AiZw15M4V6T49rhwoHPO74tfH7F41oG3fccwQWCbC7q7q75K0kSK1FuFs;
+    
+    CommandSavedemo(final CommandManager abb) {
+        this.field_8607_8I9AiZw15M4V6T49rhwoHPO74tfH7F41oG3fccwQWCbC7q7q75K0kSK1FuFs = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        InputHandler.field_9753_0Cm3s8rw0zOT4712xCTQWMpeI3bbCAHMip9u9GiDRqZ5fikPZiqtu59Ne1rL.func_12199_0T1EBqlwN0r6zrh3Sg0XWHZ8YGwKZ7S93cTMLKw1r2Y6V9Bl9qyCtXn0g300((String)arr[0]);
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/CommandRTexfilter.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+class CommandRTexfilter extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8588_6sA2V04bOV28A0BhH6Ux97r3zSiACm18q776uF4GZ94iE6X2fAq5Z8V910mW;
+    
+    CommandRTexfilter(final CommandManager abb) {
+        this.field_8588_6sA2V04bOV28A0BhH6Ux97r3zSiACm18q776uF4GZ94iE6X2fAq5Z8V910mW = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        ScreenDebugMenu.field_7956_48H3fYB8k2jE5s5HC81S9Sm600nFD73Lb4N90Pl1F0LSIx70mF1gldgvzgRz = ((int)arr[0] == 1);
+        InputHandler.mc.renderEngine.refreshTextures();
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "" + (int)(ScreenDebugMenu.field_7956_48H3fYB8k2jE5s5HC81S9Sm600nFD73Lb4N90Pl1F0LSIx70mF1gldgvzgRz ? 1 : 0);
+    }
+}
--- net/minecraft/src/BlockReed.java
+++ net/minecraft/src/BlockReed.java
@@ -3,59 +3,59 @@
 import java.util.Random;
 
 public class BlockReed extends Block {
-	protected BlockReed(int var1, int var2) {
-		super(var1, Material.plants);
-		this.blockIndexInTexture = var2;
-		float var3 = 6.0F / 16.0F;
-		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, 1.0F, 0.5F + var3);
+	protected BlockReed(int id, int blockIndex) {
+		super(id, Material.plants);
+		this.blockIndexInTexture = blockIndex;
+		float f3 = 0.375F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, 1.0F, 0.5F + f3);
 		this.setTickOnLoad(true);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getBlockId(var2, var3 + 1, var4) == 0) {
-			int var6;
-			for(var6 = 1; var1.getBlockId(var2, var3 - var6, var4) == this.blockID; ++var6) {
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(world.getBlockId(x, y + 1, z) == 0) {
+			int i6;
+			for(i6 = 1; world.getBlockId(x, y - i6, z) == this.blockID; ++i6) {
 			}
 
-			if(var6 < 3) {
-				int var7 = var1.getBlockMetadata(var2, var3, var4);
-				if(var7 == 15) {
-					var1.setBlockWithNotify(var2, var3 + 1, var4, this.blockID);
-					var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
+			if(i6 < 3) {
+				int i7 = world.getBlockMetadata(x, y, z);
+				if(i7 == 15) {
+					world.setBlockWithNotify(x, y + 1, z, this.blockID);
+					world.setBlockMetadataWithNotify(x, y, z, 0);
 				} else {
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + 1);
+					world.setBlockMetadataWithNotify(x, y, z, i7 + 1);
 				}
 			}
 		}
 
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3 - 1, var4);
-		return var5 == this.blockID ? true : (var5 != Block.grass.blockID && var5 != Block.dirt.blockID ? false : (var1.getBlockMaterial(var2 - 1, var3 - 1, var4) == Material.water ? true : (var1.getBlockMaterial(var2 + 1, var3 - 1, var4) == Material.water ? true : (var1.getBlockMaterial(var2, var3 - 1, var4 - 1) == Material.water ? true : var1.getBlockMaterial(var2, var3 - 1, var4 + 1) == Material.water))));
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		this.checkBlockCoordValid(var1, var2, var3, var4);
-	}
-
-	protected final void checkBlockCoordValid(World var1, int var2, int var3, int var4) {
-		if(!this.canBlockStay(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		int i5 = world.getBlockId(x, y - 1, z);
+		return i5 == this.blockID ? true : (i5 != Block.grass.blockID && i5 != Block.dirt.blockID ? false : (world.getBlockMaterial(x - 1, y - 1, z) == Material.water ? true : (world.getBlockMaterial(x + 1, y - 1, z) == Material.water ? true : (world.getBlockMaterial(x, y - 1, z - 1) == Material.water ? true : world.getBlockMaterial(x, y - 1, z + 1) == Material.water))));
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		this.checkBlockCoordValid(world, x, y, z);
+	}
+
+	protected final void checkBlockCoordValid(World world, int x, int y, int z) {
+		if(!this.canBlockStay(world, x, y, z)) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
 
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-		return this.canPlaceBlockAt(var1, var2, var3, var4);
+	public boolean canBlockStay(World world, int x, int y, int z) {
+		return this.canPlaceBlockAt(world, x, y, z);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Item.reed.shiftedIndex;
 	}
 
--- /dev/null
+++ net/minecraft/src/BlockGlowingFlower.java
@@ -1,0 +1,64 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockGlowingFlower extends BlockGlowing {
+	int renderMode = 1;
+
+	public BlockGlowingFlower(int integer1, int integer2, int integer3) {
+		super(integer1, integer2, integer3);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		return null;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return true;
+	}
+
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
+		if(entity instanceof EntityPlayer) {
+			EntityPlayer entityPlayer6 = (EntityPlayer)entity;
+			if(entityPlayer6.field_9028_77eIl1NuprJ7LGdcl2jvfY23W9vuW6i3POL1kwYb9qsfTXp6uFHpdr8w9eCG <= 0) {
+				entityPlayer6.field_9028_77eIl1NuprJ7LGdcl2jvfY23W9vuW6i3POL1kwYb9qsfTXp6uFHpdr8w9eCG = 20;
+				entityPlayer6.heal(1);
+			}
+		}
+
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		ItemStack itemStack6 = entityPlayer.inventory.getCurrentItem();
+		if(itemStack6 == null) {
+			return false;
+		} else {
+			if(itemStack6.itemID == ExtBlocks.blueFireIdk.blockID) {
+				world.setBlockWithNotify(x, y, z, 117);
+				entityPlayer.inventory.consumeInventoryItem(ExtBlocks.blueFireIdk.blockID);
+				world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "ext.infuse", 1.0F, 1.0F);
+			} else if(itemStack6.itemID == Item.ingotGold.shiftedIndex) {
+				world.setBlockWithNotify(x, y, z, 118);
+				entityPlayer.inventory.consumeInventoryItem(Item.ingotGold.shiftedIndex);
+				world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "ext.infuse", 1.0F, 0.7F);
+			} else if(itemStack6.itemID == ExtItems.obsidianIngot.shiftedIndex) {
+				world.setBlockWithNotify(x, y, z, 119);
+				entityPlayer.inventory.consumeInventoryItem(ExtItems.obsidianIngot.shiftedIndex);
+				world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "ext.infuse", 1.0F, 0.3F);
+			}
+
+			return true;
+		}
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+	}
+}
--- /dev/null
+++ net/minecraft/src/Encoder.java
@@ -1,0 +1,173 @@
+package net.minecraft.src;
+
+import java.io.OutputStream;
+import java.nio.ByteBuffer;
+import java.util.Arrays;
+import java.util.Objects;
+
+public class Encoder {
+	private final byte[] newline;
+	private final int linemax;
+	private final boolean isURL;
+	private final boolean doPadding;
+	private static final char[] toBase64 = new char[]{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'};
+	private static final char[] toBase64URL = new char[]{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_'};
+	private static final int MIMELINEMAX = 76;
+	private static final byte[] CRLF = new byte[]{(byte)13, (byte)10};
+	static final Encoder RFC4648 = new Encoder(false, (byte[])null, -1, true);
+	static final Encoder RFC4648_URLSAFE = new Encoder(true, (byte[])null, -1, true);
+	static final Encoder RFC2045 = new Encoder(false, CRLF, 76, true);
+
+	Encoder(boolean boolean1, byte[] arr, int integer, boolean boolean4) {
+		this.isURL = boolean1;
+		this.newline = arr;
+		this.linemax = integer;
+		this.doPadding = boolean4;
+	}
+
+	private final int outLength(int integer) {
+		boolean z2 = false;
+		int i4;
+		if(this.doPadding) {
+			i4 = 4 * ((integer + 2) / 3);
+		} else {
+			int i3 = integer % 3;
+			i4 = 4 * (integer / 3) + (i3 == 0 ? 0 : i3 + 1);
+		}
+
+		if(this.linemax > 0) {
+			i4 += (i4 - 1) / this.linemax * this.newline.length;
+		}
+
+		return i4;
+	}
+
+	public byte[] encode(byte[] arr) {
+		int i2 = this.outLength(arr.length);
+		byte[] b3 = new byte[i2];
+		int i4 = this.encode0(arr, 0, arr.length, b3);
+		return i4 != b3.length ? Arrays.copyOf(b3, i4) : b3;
+	}
+
+	public int encode(byte[] arr1, byte[] arr2) {
+		int i3 = this.outLength(arr1.length);
+		if(arr2.length < i3) {
+			throw new IllegalArgumentException("Output byte array is too small for encoding all input bytes");
+		} else {
+			return this.encode0(arr1, 0, arr1.length, arr2);
+		}
+	}
+
+	public String encodeToString(byte[] arr) {
+		byte[] b2 = this.encode(arr);
+		return new String(b2, 0, 0, b2.length);
+	}
+
+	public ByteBuffer encode(ByteBuffer byteBuffer) {
+		int i2 = this.outLength(byteBuffer.remaining());
+		byte[] b3 = new byte[i2];
+		boolean z4 = false;
+		int i6;
+		if(byteBuffer.hasArray()) {
+			i6 = this.encode0(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.arrayOffset() + byteBuffer.limit(), b3);
+			byteBuffer.position(byteBuffer.limit());
+		} else {
+			byte[] b5 = new byte[byteBuffer.remaining()];
+			byteBuffer.get(b5);
+			i6 = this.encode0(b5, 0, b5.length, b3);
+		}
+
+		if(i6 != b3.length) {
+			b3 = Arrays.copyOf(b3, i6);
+		}
+
+		return ByteBuffer.wrap(b3);
+	}
+
+	public OutputStream wrap(OutputStream outputStream) {
+		Objects.requireNonNull(outputStream);
+		return new EncOutputStream(outputStream, this.isURL ? toBase64URL : toBase64, this.newline, this.linemax, this.doPadding);
+	}
+
+	public Encoder withoutPadding() {
+		return !this.doPadding ? this : new Encoder(this.isURL, this.newline, this.linemax, false);
+	}
+
+	private int encode0(byte[] arr1, int integer2, int integer3, byte[] arr4) {
+		char[] c5 = this.isURL ? toBase64URL : toBase64;
+		int i6 = integer2;
+		int i7 = (integer3 - integer2) / 3 * 3;
+		int i8 = integer2 + i7;
+		if(this.linemax > 0 && i7 > this.linemax / 4 * 3) {
+			i7 = this.linemax / 4 * 3;
+		}
+
+		int i9 = 0;
+
+		while(true) {
+			int i10;
+			int i11;
+			int i13;
+			do {
+				do {
+					if(i6 >= i8) {
+						if(i6 < integer3) {
+							i10 = arr1[i6++] & 255;
+							arr4[i9++] = (byte)c5[i10 >> 2];
+							if(i6 == integer3) {
+								arr4[i9++] = (byte)c5[i10 << 4 & 63];
+								if(this.doPadding) {
+									arr4[i9++] = 61;
+									arr4[i9++] = 61;
+								}
+							} else {
+								i11 = arr1[i6++] & 255;
+								arr4[i9++] = (byte)c5[i10 << 4 & 63 | i11 >> 4];
+								arr4[i9++] = (byte)c5[i11 << 2 & 63];
+								if(this.doPadding) {
+									arr4[i9++] = 61;
+								}
+							}
+						}
+
+						return i9;
+					}
+
+					i10 = Math.min(i6 + i7, i8);
+					i11 = i6;
+
+					for(int i12 = i9; i11 < i10; arr4[i12++] = (byte)c5[i13 & 63]) {
+						i13 = (arr1[i11++] & 255) << 16 | (arr1[i11++] & 255) << 8 | arr1[i11++] & 255;
+						arr4[i12++] = (byte)c5[i13 >>> 18 & 63];
+						arr4[i12++] = (byte)c5[i13 >>> 12 & 63];
+						arr4[i12++] = (byte)c5[i13 >>> 6 & 63];
+					}
+
+					i11 = (i10 - i6) / 3 * 4;
+					i9 += i11;
+					i6 = i10;
+				} while(i11 != this.linemax);
+			} while(i10 >= integer3);
+
+			byte[] b16 = this.newline;
+			i13 = b16.length;
+
+			for(int i14 = 0; i14 < i13; ++i14) {
+				byte b15 = b16[i14];
+				arr4[i9++] = b15;
+			}
+		}
+	}
+
+	Encoder(boolean boolean1, byte[] arr, int integer, boolean boolean4, Object lr) {
+		this(boolean1, arr, integer, boolean4);
+	}
+
+	static char[] toBase64() {
+		return toBase64;
+	}
+
+	static char[] toBase64URL() {
+		return toBase64URL;
+	}
+}
--- net/minecraft/src/Pathfinder.java
+++ net/minecraft/src/Pathfinder.java
@@ -6,162 +6,158 @@
 	private MCHashTable pointMap = new MCHashTable();
 	private PathPoint[] pathOptions = new PathPoint[32];
 
-	public Pathfinder(IBlockAccess var1) {
-		this.worldMap = var1;
-	}
-
-	public PathEntity createEntityPathTo(Entity var1, Entity var2, float var3) {
-		return this.createEntityPathTo(var1, var2.posX, var2.boundingBox.minY, var2.posZ, var3);
-	}
-
-	public PathEntity createEntityPathTo(Entity var1, int var2, int var3, int var4, float var5) {
-		return this.createEntityPathTo(var1, (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), var5);
-	}
-
-	private PathEntity createEntityPathTo(Entity var1, double var2, double var4, double var6, float var8) {
+	public Pathfinder(IBlockAccess worldMap) {
+		this.worldMap = worldMap;
+	}
+
+	public PathEntity createEntityPathTo(Entity entity1, Entity entity2, float distance) {
+		return this.createEntityPathTo(entity1, entity2.posX, entity2.boundingBox.minY, entity2.posZ, distance);
+	}
+
+	public PathEntity createEntityPathTo(Entity entity, int x, int boundingBoxY, int z, float distance) {
+		return this.createEntityPathTo(entity, (double)((float)x + 0.5F), (double)((float)boundingBoxY + 0.5F), (double)((float)z + 0.5F), distance);
+	}
+
+	private PathEntity createEntityPathTo(Entity entity, double x, double boundingBoxY, double z, float distance) {
 		this.path.clearPath();
 		this.pointMap.clearMap();
-		PathPoint var9 = this.openPoint(MathHelper.floor_double(var1.boundingBox.minX), MathHelper.floor_double(var1.boundingBox.minY), MathHelper.floor_double(var1.boundingBox.minZ));
-		PathPoint var10 = this.openPoint(MathHelper.floor_double(var2 - (double)(var1.width / 2.0F)), MathHelper.floor_double(var4), MathHelper.floor_double(var6 - (double)(var1.width / 2.0F)));
-		PathPoint var11 = new PathPoint(MathHelper.floor_float(var1.width + 1.0F), MathHelper.floor_float(var1.height + 1.0F), MathHelper.floor_float(var1.width + 1.0F));
-		PathEntity var12 = this.addToPath(var1, var9, var10, var11, var8);
-		return var12;
+		PathPoint pathPoint9 = this.openPoint(MathHelper.floor_double(entity.boundingBox.minX), MathHelper.floor_double(entity.boundingBox.minY), MathHelper.floor_double(entity.boundingBox.minZ));
+		PathPoint pathPoint10 = this.openPoint(MathHelper.floor_double(x - (double)(entity.width / 2.0F)), MathHelper.floor_double(boundingBoxY), MathHelper.floor_double(z - (double)(entity.width / 2.0F)));
+		PathPoint pathPoint11 = new PathPoint(MathHelper.floor_float(entity.width + 1.0F), MathHelper.floor_float(entity.height + 1.0F), MathHelper.floor_float(entity.width + 1.0F));
+		PathEntity pathEntity12 = this.addToPath(entity, pathPoint9, pathPoint10, pathPoint11, distance);
+		return pathEntity12;
 	}
 
-	private PathEntity addToPath(Entity var1, PathPoint var2, PathPoint var3, PathPoint var4, float var5) {
-		var2.totalPathDistance = 0.0F;
-		var2.distanceToNext = var2.distanceTo(var3);
-		var2.distanceToTarget = var2.distanceToNext;
+	private PathEntity addToPath(Entity entity, PathPoint pathPoint1, PathPoint pathPoint2, PathPoint pathPoint3, float distance) {
+		pathPoint1.totalPathDistance = 0.0F;
+		pathPoint1.distanceToNext = pathPoint1.distanceTo(pathPoint2);
+		pathPoint1.distanceToTarget = pathPoint1.distanceToNext;
 		this.path.clearPath();
-		this.path.addPoint(var2);
-		PathPoint var6 = var2;
+		this.path.addPoint(pathPoint1);
+		PathPoint pathPoint6 = pathPoint1;
 
 		while(!this.path.isPathEmpty()) {
-			PathPoint var7 = this.path.dequeue();
-			if(var7.hash == var3.hash) {
-				return this.createEntityPath(var2, var3);
-			}
-
-			if(var7.distanceTo(var3) < var6.distanceTo(var3)) {
-				var6 = var7;
-			}
-
-			var7.isFirst = true;
-			int var8 = this.findPathOptions(var1, var7, var4, var3, var5);
-
-			for(int var9 = 0; var9 < var8; ++var9) {
-				PathPoint var10 = this.pathOptions[var9];
-				float var11 = var7.totalPathDistance + var7.distanceTo(var10);
-				if(!var10.isAssigned() || var11 < var10.totalPathDistance) {
-					var10.previous = var7;
-					var10.totalPathDistance = var11;
-					var10.distanceToNext = var10.distanceTo(var3);
-					if(var10.isAssigned()) {
-						this.path.changeDistance(var10, var10.totalPathDistance + var10.distanceToNext);
+			PathPoint pathPoint7 = this.path.dequeue();
+			if(pathPoint7.hash == pathPoint2.hash) {
+				return this.createEntityPath(pathPoint1, pathPoint2);
+			}
+
+			if(pathPoint7.distanceTo(pathPoint2) < pathPoint6.distanceTo(pathPoint2)) {
+				pathPoint6 = pathPoint7;
+			}
+
+			pathPoint7.isFirst = true;
+			int i8 = this.findPathOptions(entity, pathPoint7, pathPoint3, pathPoint2, distance);
+
+			for(int i9 = 0; i9 < i8; ++i9) {
+				PathPoint pathPoint10 = this.pathOptions[i9];
+				float f11 = pathPoint7.totalPathDistance + pathPoint7.distanceTo(pathPoint10);
+				if(!pathPoint10.isAssigned() || f11 < pathPoint10.totalPathDistance) {
+					pathPoint10.previous = pathPoint7;
+					pathPoint10.totalPathDistance = f11;
+					pathPoint10.distanceToNext = pathPoint10.distanceTo(pathPoint2);
+					if(pathPoint10.isAssigned()) {
+						this.path.changeDistance(pathPoint10, pathPoint10.totalPathDistance + pathPoint10.distanceToNext);
 					} else {
-						var10.distanceToTarget = var10.totalPathDistance + var10.distanceToNext;
-						this.path.addPoint(var10);
+						pathPoint10.distanceToTarget = pathPoint10.totalPathDistance + pathPoint10.distanceToNext;
+						this.path.addPoint(pathPoint10);
 					}
 				}
 			}
 		}
 
-		if(var6 == var2) {
+		if(pathPoint6 == pathPoint1) {
 			return null;
 		} else {
-			return this.createEntityPath(var2, var6);
-		}
-	}
-
-	private int findPathOptions(Entity var1, PathPoint var2, PathPoint var3, PathPoint var4, float var5) {
-		int var6 = 0;
-		byte var7 = 0;
-		if(this.getVerticalOffset(var1, var2.xCoord, var2.yCoord + 1, var2.zCoord, var3) > 0) {
-			var7 = 1;
-		}
-
-		PathPoint var8 = this.getSafePoint(var1, var2.xCoord, var2.yCoord, var2.zCoord + 1, var3, var7);
-		PathPoint var9 = this.getSafePoint(var1, var2.xCoord - 1, var2.yCoord, var2.zCoord, var3, var7);
-		PathPoint var10 = this.getSafePoint(var1, var2.xCoord + 1, var2.yCoord, var2.zCoord, var3, var7);
-		PathPoint var11 = this.getSafePoint(var1, var2.xCoord, var2.yCoord, var2.zCoord - 1, var3, var7);
-		if(var8 != null && !var8.isFirst && var8.distanceTo(var4) < var5) {
-			this.pathOptions[var6++] = var8;
-		}
-
-		if(var9 != null && !var9.isFirst && var9.distanceTo(var4) < var5) {
-			this.pathOptions[var6++] = var9;
-		}
-
-		if(var10 != null && !var10.isFirst && var10.distanceTo(var4) < var5) {
-			this.pathOptions[var6++] = var10;
-		}
-
-		if(var11 != null && !var11.isFirst && var11.distanceTo(var4) < var5) {
-			this.pathOptions[var6++] = var11;
-		}
-
-		return var6;
-	}
-
-	private PathPoint getSafePoint(Entity var1, int var2, int var3, int var4, PathPoint var5, int var6) {
-		PathPoint var7 = null;
-		if(this.getVerticalOffset(var1, var2, var3, var4, var5) > 0) {
-			var7 = this.openPoint(var2, var3, var4);
-		}
-
-		if(var7 == null && this.getVerticalOffset(var1, var2, var3 + var6, var4, var5) > 0) {
-			var7 = this.openPoint(var2, var3 + var6, var4);
-			var3 += var6;
-		}
-
-		if(var7 != null) {
-			int var8 = 0;
-
-			for(boolean var9 = false; var3 > 0; --var3) {
-				int var10 = this.getVerticalOffset(var1, var2, var3 - 1, var4, var5);
-				if(var10 <= 0) {
-					break;
-				}
-
-				if(var10 < 0) {
-					return null;
-				}
-
-				++var8;
-				if(var8 >= 4) {
-					return null;
-				}
-			}
-
-			if(var3 > 0) {
-				var7 = this.openPoint(var2, var3, var4);
-			}
-		}
-
-		return var7;
-	}
-
-	private final PathPoint openPoint(int var1, int var2, int var3) {
-		int var4 = var1 | var2 << 10 | var3 << 20;
-		PathPoint var5 = (PathPoint)this.pointMap.lookup(var4);
-		if(var5 == null) {
-			var5 = new PathPoint(var1, var2, var3);
-			this.pointMap.addKey(var4, var5);
-		}
-
-		return var5;
-	}
-
-	private int getVerticalOffset(Entity var1, int var2, int var3, int var4, PathPoint var5) {
-		for(int var6 = var2; var6 < var2 + var5.xCoord; ++var6) {
-			for(int var7 = var3; var7 < var3 + var5.yCoord; ++var7) {
-				for(int var8 = var4; var8 < var4 + var5.zCoord; ++var8) {
-					Material var9 = this.worldMap.getBlockMaterial(var2, var3, var4);
-					if(var9.getIsSolid()) {
+			return this.createEntityPath(pathPoint1, pathPoint6);
+		}
+	}
+
+	private int findPathOptions(Entity entity, PathPoint pathPoint1, PathPoint pathPoint2, PathPoint pathPoint3, float distance) {
+		int i6 = 0;
+		byte b7 = 0;
+		if(this.getVerticalOffset(entity, pathPoint1.xCoord, pathPoint1.yCoord + 1, pathPoint1.zCoord, pathPoint2) > 0) {
+			b7 = 1;
+		}
+
+		PathPoint pathPoint8 = this.getSafePoint(entity, pathPoint1.xCoord, pathPoint1.yCoord, pathPoint1.zCoord + 1, pathPoint2, b7);
+		PathPoint pathPoint9 = this.getSafePoint(entity, pathPoint1.xCoord - 1, pathPoint1.yCoord, pathPoint1.zCoord, pathPoint2, b7);
+		PathPoint pathPoint10 = this.getSafePoint(entity, pathPoint1.xCoord + 1, pathPoint1.yCoord, pathPoint1.zCoord, pathPoint2, b7);
+		PathPoint pathPoint11 = this.getSafePoint(entity, pathPoint1.xCoord, pathPoint1.yCoord, pathPoint1.zCoord - 1, pathPoint2, b7);
+		if(pathPoint8 != null && !pathPoint8.isFirst && pathPoint8.distanceTo(pathPoint3) < distance) {
+			this.pathOptions[i6++] = pathPoint8;
+		}
+
+		if(pathPoint9 != null && !pathPoint9.isFirst && pathPoint9.distanceTo(pathPoint3) < distance) {
+			this.pathOptions[i6++] = pathPoint9;
+		}
+
+		if(pathPoint10 != null && !pathPoint10.isFirst && pathPoint10.distanceTo(pathPoint3) < distance) {
+			this.pathOptions[i6++] = pathPoint10;
+		}
+
+		if(pathPoint11 != null && !pathPoint11.isFirst && pathPoint11.distanceTo(pathPoint3) < distance) {
+			this.pathOptions[i6++] = pathPoint11;
+		}
+
+		return i6;
+	}
+
+	private PathPoint getSafePoint(Entity entity, int integer2, int integer3, int integer4, PathPoint pathPoint, int integer6) {
+		PathPoint pathPoint7 = null;
+		if(this.getVerticalOffset(entity, integer2, integer3, integer4, pathPoint) > 0) {
+			pathPoint7 = this.openPoint(integer2, integer3, integer4);
+		}
+
+		if(pathPoint7 == null && this.getVerticalOffset(entity, integer2, integer3 + integer6, integer4, pathPoint) > 0) {
+			pathPoint7 = this.openPoint(integer2, integer3 + integer6, integer4);
+			integer3 += integer6;
+		}
+
+		if(pathPoint7 != null) {
+			int i8 = 0;
+
+			int i9;
+			for(boolean z10 = false; integer3 > 0 && (i9 = this.getVerticalOffset(entity, integer2, integer3 - 1, integer4, pathPoint)) > 0; --integer3) {
+				if(i9 < 0) {
+					return null;
+				}
+
+				++i8;
+				if(i8 >= 4) {
+					return null;
+				}
+			}
+
+			if(integer3 > 0) {
+				pathPoint7 = this.openPoint(integer2, integer3, integer4);
+			}
+		}
+
+		return pathPoint7;
+	}
+
+	private final PathPoint openPoint(int x, int y, int z) {
+		int i4 = x | y << 10 | z << 20;
+		PathPoint pathPoint5 = (PathPoint)this.pointMap.lookup(i4);
+		if(pathPoint5 == null) {
+			pathPoint5 = new PathPoint(x, y, z);
+			this.pointMap.addKey(i4, pathPoint5);
+		}
+
+		return pathPoint5;
+	}
+
+	private int getVerticalOffset(Entity entity, int x, int y, int z, PathPoint pathPoint) {
+		for(int i6 = x; i6 < x + pathPoint.xCoord; ++i6) {
+			for(int i7 = y; i7 < y + pathPoint.yCoord; ++i7) {
+				for(int i8 = z; i8 < z + pathPoint.zCoord; ++i8) {
+					Material material9 = this.worldMap.getBlockMaterial(x, y, z);
+					if(material9.getIsSolid()) {
 						return 0;
 					}
 
-					if(var9 == Material.water || var9 == Material.lava) {
+					if(material9 == Material.water || material9 == Material.lava) {
 						return -1;
 					}
 				}
@@ -171,23 +167,23 @@
 		return 1;
 	}
 
-	private PathEntity createEntityPath(PathPoint var1, PathPoint var2) {
-		int var3 = 1;
-
-		PathPoint var4;
-		for(var4 = var2; var4.previous != null; var4 = var4.previous) {
-			++var3;
-		}
-
-		PathPoint[] var5 = new PathPoint[var3];
-		var4 = var2;
-		--var3;
-
-		for(var5[var3] = var2; var4.previous != null; var5[var3] = var4) {
-			var4 = var4.previous;
-			--var3;
-		}
-
-		return new PathEntity(var5);
+	private PathEntity createEntityPath(PathPoint pathPoint1, PathPoint pathPoint2) {
+		int i3 = 1;
+
+		PathPoint pathPoint4;
+		for(pathPoint4 = pathPoint2; pathPoint4.previous != null; pathPoint4 = pathPoint4.previous) {
+			++i3;
+		}
+
+		PathPoint[] pathPoint5 = new PathPoint[i3];
+		pathPoint4 = pathPoint2;
+		--i3;
+
+		for(pathPoint5[i3] = pathPoint2; pathPoint4.previous != null; pathPoint5[i3] = pathPoint4) {
+			pathPoint4 = pathPoint4.previous;
+			--i3;
+		}
+
+		return new PathEntity(pathPoint5);
 	}
 }
--- net/minecraft/src/GuiGameOver.java
+++ net/minecraft/src/GuiGameOver.java
@@ -5,7 +5,6 @@
 public class GuiGameOver extends GuiScreen {
 	public void initGui() {
 		this.controlList.clear();
-		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 72, "Respawn"));
 		this.controlList.add(new GuiButton(2, this.width / 2 - 100, this.height / 4 + 96, "Title menu"));
 		if(this.mc.session == null) {
 			((GuiButton)this.controlList.get(1)).enabled = false;
@@ -13,33 +12,34 @@
 
 	}
 
-	protected void keyTyped(char var1, int var2) {
+	protected void keyTyped(char character, int key) {
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.id == 0) {
+	protected void actionPerformed(GuiButton button) {
+		if(button.id == 0) {
+			;
 		}
 
-		if(var1.id == 1) {
+		if(button.id == 1) {
 			this.mc.respawn();
 			this.mc.displayGuiScreen((GuiScreen)null);
 		}
 
-		if(var1.id == 2) {
+		if(button.id == 2) {
 			this.mc.changeWorld1((World)null);
 			this.mc.displayGuiScreen(new GuiMainMenu());
 		}
 
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
-		this.drawGradientRect(0, 0, this.width, this.height, 1615855616, -1602211792);
+	public void drawScreen(int mouseX, int mouseY, float renderPartialTick) {
+		drawGradientRect(0, 0, this.width, this.height, 805306368, -1610612736);
 		GL11.glPushMatrix();
 		GL11.glScalef(2.0F, 2.0F, 2.0F);
-		this.drawCenteredString(this.fontRenderer, "Game over!", this.width / 2 / 2, 30, 16777215);
+		this.drawCenteredString(this.fontRenderer, "Game over!", this.width / 2 / 2, 30, 0xFFFFFF);
 		GL11.glPopMatrix();
-		this.drawCenteredString(this.fontRenderer, "Score: &e" + this.mc.thePlayer.getScore(), this.width / 2, 100, 16777215);
-		super.drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, "You survived " + (((ZMWorld)this.mc.theWorld).wave - 1) + " waves", this.width / 2, 100, 0xFFFFFF);
+		super.drawScreen(mouseX, mouseY, renderPartialTick);
 	}
 
 	public boolean doesGuiPauseGame() {
--- net/minecraft/src/ItemTool.java
+++ net/minecraft/src/ItemTool.java
@@ -2,27 +2,27 @@
 
 public class ItemTool extends Item {
 	private Block[] blocksEffectiveAgainst;
-	private float efficiencyOnProperMaterial = 4.0F;
+	public float efficiencyOnProperMaterial = 4.0F;
 	private int damageVsEntity;
 	protected int toolMaterial;
 
-	public ItemTool(int var1, int var2, int var3, Block[] var4) {
-		super(var1);
-		this.toolMaterial = var3;
-		this.blocksEffectiveAgainst = var4;
+	public ItemTool(int itemID, int damage, int toolMaterial, Block[] effectiveBlocks) {
+		super(itemID);
+		this.toolMaterial = toolMaterial;
+		this.blocksEffectiveAgainst = effectiveBlocks;
 		this.maxStackSize = 1;
-		this.maxDamage = 32 << var3;
-		if(var3 == 3) {
+		this.maxDamage = 32 << toolMaterial;
+		if(toolMaterial == 3) {
 			this.maxDamage *= 4;
 		}
 
-		this.efficiencyOnProperMaterial = (float)((var3 + 1) * 2);
-		this.damageVsEntity = var2 + var3;
+		this.efficiencyOnProperMaterial = (float)((toolMaterial + 1) * 2);
+		this.damageVsEntity = damage + toolMaterial;
 	}
 
-	public float getStrVsBlock(ItemStack var1, Block var2) {
-		for(int var3 = 0; var3 < this.blocksEffectiveAgainst.length; ++var3) {
-			if(this.blocksEffectiveAgainst[var3] == var2) {
+	public float getStrVsBlock(ItemStack stack, Block block) {
+		for(int i3 = 0; i3 < this.blocksEffectiveAgainst.length; ++i3) {
+			if(this.blocksEffectiveAgainst[i3] == block) {
 				return this.efficiencyOnProperMaterial;
 			}
 		}
@@ -30,15 +30,15 @@
 		return 1.0F;
 	}
 
-	public void hitEntity(ItemStack var1, EntityLiving var2) {
-		var1.damageItem(2);
-	}
-
-	public void onBlockDestroyed(ItemStack var1, int var2, int var3, int var4, int var5) {
-		var1.damageItem(1);
-	}
-
-	public int getDamageVsEntity(Entity var1) {
+	public void hitEntity(ItemStack itemStack, EntityLiving entityLiving) {
+		itemStack.damageItem(2);
+	}
+
+	public void onBlockDestroyed(ItemStack stack, int x, int y, int z, int z1) {
+		stack.damageItem(1);
+	}
+
+	public int getDamageVsEntity(Entity entity) {
 		return this.damageVsEntity;
 	}
 
--- /dev/null
+++ net/minecraft/src/RenderGiantBoss.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+public class RenderGiantBoss extends RenderLiving {
+	private float f;
+
+	public RenderGiantBoss(ModelBase yi, float float2, float float3) {
+		super(yi, float2 * float3);
+		this.f = float3;
+	}
+
+	protected void preRenderCallback(EntityLiving zi, float float2) {
+		GL11.glScalef(this.f, this.f, this.f);
+	}
+}
--- net/minecraft/src/ItemMinecart.java
+++ net/minecraft/src/ItemMinecart.java
@@ -3,17 +3,17 @@
 public class ItemMinecart extends Item {
 	public int minecartType;
 
-	public ItemMinecart(int var1, int var2) {
-		super(var1);
+	public ItemMinecart(int itemID, int minecartType) {
+		super(itemID);
 		this.maxStackSize = 1;
-		this.minecartType = var2;
+		this.minecartType = minecartType;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		int var8 = var3.getBlockId(var4, var5, var6);
-		if(var8 == Block.minecartTrack.blockID) {
-			var3.spawnEntityInWorld(new EntityMinecart(var3, (double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), this.minecartType));
-			--var1.stackSize;
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		int i8 = world.getBlockId(x, y, z);
+		if(i8 == Block.minecartTrack.blockID) {
+			world.spawnEntityInWorld(new EntityMinecart(world, (double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), this.minecartType));
+			--stack.stackSize;
 			return true;
 		} else {
 			return false;
--- net/minecraft/src/NetworkReaderThread.java
+++ net/minecraft/src/NetworkReaderThread.java
@@ -3,46 +3,89 @@
 class NetworkReaderThread extends Thread {
 	final NetworkManager netManager;
 
-	NetworkReaderThread(NetworkManager var1, String var2) {
-		super(var2);
-		this.netManager = var1;
+	NetworkReaderThread(NetworkManager netManager, String threadName) {
+		super(threadName);
+		this.netManager = netManager;
 	}
 
 	public void run() {
-		Object var1 = NetworkManager.threadSyncObject;
-		synchronized(var1) {
+		Object object1 = NetworkManager.threadSyncObject;
+		Object object2 = NetworkManager.threadSyncObject;
+		synchronized(NetworkManager.threadSyncObject) {
 			++NetworkManager.numReadThreads;
 		}
 
 		while(true) {
-			boolean var11 = false;
-
-			try {
-				var11 = true;
-				if(NetworkManager.isRunning(this.netManager)) {
-					if(!NetworkManager.isServerTerminating(this.netManager)) {
+			boolean z28 = false;
+			boolean z20 = false;
+
+			Object object3;
+			Object object4;
+			label168: {
+				label167: {
+					try {
+						z20 = true;
+						z28 = true;
+						if(!NetworkManager.isRunning(this.netManager)) {
+							z28 = false;
+							z20 = false;
+							break label168;
+						}
+
+						if(NetworkManager.isServerTerminating(this.netManager)) {
+							z28 = false;
+							z20 = false;
+							break label167;
+						}
+
 						NetworkManager.readNetworkPacket(this.netManager);
-						continue;
-					}
-
-					var11 = false;
-					break;
+						z20 = false;
+					} finally {
+						if(z20) {
+							if(z28) {
+								Object object9 = NetworkManager.threadSyncObject;
+								Object object10 = NetworkManager.threadSyncObject;
+								synchronized(NetworkManager.threadSyncObject) {
+									--NetworkManager.numReadThreads;
+								}
+							}
+
+						}
+					}
+
+					if(z28) {
+						object3 = NetworkManager.threadSyncObject;
+						object4 = NetworkManager.threadSyncObject;
+						synchronized(NetworkManager.threadSyncObject) {
+							--NetworkManager.numReadThreads;
+						}
+					}
+					continue;
 				}
 
-				var11 = false;
-				break;
-			} finally {
-				if(var11) {
-					Object var5 = NetworkManager.threadSyncObject;
-					synchronized(var5) {
+				if(z28) {
+					object3 = NetworkManager.threadSyncObject;
+					object4 = NetworkManager.threadSyncObject;
+					synchronized(NetworkManager.threadSyncObject) {
 						--NetworkManager.numReadThreads;
 					}
 				}
-			}
+				break;
+			}
+
+			if(z28) {
+				object3 = NetworkManager.threadSyncObject;
+				object4 = NetworkManager.threadSyncObject;
+				synchronized(NetworkManager.threadSyncObject) {
+					--NetworkManager.numReadThreads;
+				}
+			}
+			break;
 		}
 
-		var1 = NetworkManager.threadSyncObject;
-		synchronized(var1) {
+		object1 = NetworkManager.threadSyncObject;
+		object2 = NetworkManager.threadSyncObject;
+		synchronized(NetworkManager.threadSyncObject) {
 			--NetworkManager.numReadThreads;
 		}
 	}
--- /dev/null
+++ net/minecraft/src/FreerunMap4.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.util.List;
+
+public class FreerunMap4 extends FreerunWorld {
+	private NamedLoc[] field_7518_3yl020sZ087HWeLQ8676JZEk9B1Abrl6wX69M0WGnZv2j7KT34TH4VPTo98q = new NamedLoc[]{new NamedLoc(23, 82, -58, "spawn"), new NamedLoc(12, 83, -41, 14, 85, -44, "spawn_start"), new NamedLoc(17, 96, 33, 21, 100, 37, "checkpoint1"), new NamedLoc(22, 94, 121, 18, 100, 118, "checkpoint2"), new NamedLoc(12, 91, 196, 15, 95, 200, "checkpoint3"), new NamedLoc(18, 112, 169, 21, 115, 172, "end")};
+
+	public FreerunMap4(File worldFile, String levelName) {
+		super(worldFile, levelName);
+	}
+
+	public NamedLoc[] getCheckpoints() {
+		return this.field_7518_3yl020sZ087HWeLQ8676JZEk9B1Abrl6wX69M0WGnZv2j7KT34TH4VPTo98q;
+	}
+
+	public int getResetY(long long1, long long2) {
+		return 77;
+	}
+
+	public List func_7517_8oADBp42n4G2Ly6U1WLv70n6VyS2bkokzo8dF7ayUqDb1A6ofY86pUJA8mf8() {
+		return this.field_7498_65957fU9nGL5PA2e96ZOK3ePBveSt2ceA9Glj10PC2Jo5s0wI21ix69flng2;
+	}
+}
--- net/minecraft/src/TexturedQuad.java
+++ net/minecraft/src/TexturedQuad.java
@@ -5,49 +5,57 @@
 	public int nVertices;
 	private boolean invertNormal;
 
-	public TexturedQuad(PositionTexureVertex[] var1) {
+	public TexturedQuad(PositionTexureVertex[] arr) {
 		this.nVertices = 0;
 		this.invertNormal = false;
-		this.vertexPositions = var1;
-		this.nVertices = var1.length;
-	}
-
-	public TexturedQuad(PositionTexureVertex[] var1, int var2, int var3, int var4, int var5) {
-		this(var1);
-		float var6 = 0.0015625F;
-		float var7 = 0.003125F;
-		var1[0] = var1[0].setTexturePosition((float)var4 / 64.0F - var6, (float)var3 / 32.0F + var7);
-		var1[1] = var1[1].setTexturePosition((float)var2 / 64.0F + var6, (float)var3 / 32.0F + var7);
-		var1[2] = var1[2].setTexturePosition((float)var2 / 64.0F + var6, (float)var5 / 32.0F - var7);
-		var1[3] = var1[3].setTexturePosition((float)var4 / 64.0F - var6, (float)var5 / 32.0F - var7);
+		this.vertexPositions = arr;
+		this.nVertices = arr.length;
+	}
+
+	public TexturedQuad(PositionTexureVertex[] arr, int integer2, int integer3, int integer4, int integer5) {
+		this(arr, integer2, integer3, integer4, integer5, 64, 32);
+	}
+
+	public TexturedQuad(PositionTexureVertex[] arr, int integer2, int integer3, int integer4, int integer5, int integer6, int integer7) {
+		this(arr);
+		float f8 = 0.0015625F;
+		float f9 = 0.003125F;
+		arr[0] = arr[0].setTexturePosition((float)integer4 / (float)integer6 - f8, (float)integer3 / (float)integer7 + f9);
+		arr[1] = arr[1].setTexturePosition((float)integer2 / (float)integer6 + f8, (float)integer3 / (float)integer7 + f9);
+		arr[2] = arr[2].setTexturePosition((float)integer2 / (float)integer6 + f8, (float)integer5 / (float)integer7 - f9);
+		arr[3] = arr[3].setTexturePosition((float)integer4 / (float)integer6 - f8, (float)integer5 / (float)integer7 - f9);
 	}
 
 	public void flipFace() {
-		PositionTexureVertex[] var1 = new PositionTexureVertex[this.vertexPositions.length];
+		PositionTexureVertex[] positionTexureVertex1 = new PositionTexureVertex[this.vertexPositions.length];
 
-		for(int var2 = 0; var2 < this.vertexPositions.length; ++var2) {
-			var1[var2] = this.vertexPositions[this.vertexPositions.length - var2 - 1];
+		for(int i2 = 0; i2 < this.vertexPositions.length; ++i2) {
+			positionTexureVertex1[i2] = this.vertexPositions[this.vertexPositions.length - i2 - 1];
 		}
 
-		this.vertexPositions = var1;
-	}
-
-	public void draw(Tessellator var1, float var2) {
-		Vec3D var3 = this.vertexPositions[1].vector3D.subtract(this.vertexPositions[0].vector3D);
-		Vec3D var4 = this.vertexPositions[1].vector3D.subtract(this.vertexPositions[2].vector3D);
-		Vec3D var5 = var4.crossProduct(var3).normalize();
-		var1.startDrawingQuads();
+		this.vertexPositions = positionTexureVertex1;
+	}
+
+	public void func_11882_0x742FBxeJb6iSH3PLXVlqD1dxqD4cwb2iLKkD7E35Zj9XGx7hgNuhbP3GmC(Tessellator em, float float2) {
+		this.draw(em, float2, false);
+	}
+
+	public void draw(Tessellator em, float float2, boolean boolean3) {
+		Vec3D vec3D4 = this.vertexPositions[1].vector3D.subtract(this.vertexPositions[0].vector3D);
+		Vec3D vec3D5 = this.vertexPositions[1].vector3D.subtract(this.vertexPositions[2].vector3D);
+		Vec3D vec3D6 = vec3D5.crossProduct(vec3D4).normalize();
+		em.func_10259_6ayZ4y0DKzlBw0qR3TwrtIK08f0p5iZQu8xsah0R4i2XaEr9LQwCue6wKB06(boolean3);
 		if(this.invertNormal) {
-			var1.setNormal(-((float)var5.xCoord), -((float)var5.yCoord), -((float)var5.zCoord));
+			em.setNormal(-((float)vec3D6.xCoord), -((float)vec3D6.yCoord), -((float)vec3D6.zCoord));
 		} else {
-			var1.setNormal((float)var5.xCoord, (float)var5.yCoord, (float)var5.zCoord);
-		}
-
-		for(int var6 = 0; var6 < 4; ++var6) {
-			PositionTexureVertex var7 = this.vertexPositions[var6];
-			var1.addVertexWithUV((double)((float)var7.vector3D.xCoord * var2), (double)((float)var7.vector3D.yCoord * var2), (double)((float)var7.vector3D.zCoord * var2), (double)var7.texturePositionX, (double)var7.texturePositionY);
-		}
-
-		var1.draw();
+			em.setNormal((float)vec3D6.xCoord, (float)vec3D6.yCoord, (float)vec3D6.zCoord);
+		}
+
+		for(int i7 = 0; i7 < 4; ++i7) {
+			PositionTexureVertex positionTexureVertex8 = this.vertexPositions[i7];
+			em.addVertexWithUV((double)((float)positionTexureVertex8.vector3D.xCoord * float2), (double)((float)positionTexureVertex8.vector3D.yCoord * float2), (double)((float)positionTexureVertex8.vector3D.zCoord * float2), (double)positionTexureVertex8.texturePositionX, (double)positionTexureVertex8.texturePositionY);
+		}
+
+		em.draw();
 	}
 }
--- net/minecraft/src/PathPoint.java
+++ net/minecraft/src/PathPoint.java
@@ -12,22 +12,22 @@
 	PathPoint previous;
 	public boolean isFirst = false;
 
-	public PathPoint(int var1, int var2, int var3) {
-		this.xCoord = var1;
-		this.yCoord = var2;
-		this.zCoord = var3;
-		this.hash = var1 | var2 << 10 | var3 << 20;
-	}
-
-	public float distanceTo(PathPoint var1) {
-		float var2 = (float)(var1.xCoord - this.xCoord);
-		float var3 = (float)(var1.yCoord - this.yCoord);
-		float var4 = (float)(var1.zCoord - this.zCoord);
-		return MathHelper.sqrt_float(var2 * var2 + var3 * var3 + var4 * var4);
-	}
-
-	public boolean equals(Object var1) {
-		return ((PathPoint)var1).hash == this.hash;
+	public PathPoint(int xCoord, int yCoord, int zCoord) {
+		this.xCoord = xCoord;
+		this.yCoord = yCoord;
+		this.zCoord = zCoord;
+		this.hash = xCoord | yCoord << 10 | zCoord << 20;
+	}
+
+	public float distanceTo(PathPoint pathPoint) {
+		float f2 = (float)(pathPoint.xCoord - this.xCoord);
+		float f3 = (float)(pathPoint.yCoord - this.yCoord);
+		float f4 = (float)(pathPoint.zCoord - this.zCoord);
+		return MathHelper.sqrt_float(f2 * f2 + f3 * f3 + f4 * f4);
+	}
+
+	public boolean equals(Object object) {
+		return ((PathPoint)object).hash == this.hash;
 	}
 
 	public int hashCode() {
--- net/minecraft/src/ChunkProviderIso.java
+++ net/minecraft/src/ChunkProviderIso.java
@@ -6,53 +6,53 @@
 	private Chunk[] chunks = new Chunk[256];
 	private World worldObj;
 	private IChunkLoader chunkLoader;
-	byte[] blocks = new byte[-Short.MIN_VALUE];
-
-	public ChunkProviderIso(World var1, IChunkLoader var2) {
-		this.worldObj = var1;
-		this.chunkLoader = var2;
-	}
-
-	public boolean chunkExists(int var1, int var2) {
-		int var3 = var1 & 15 | (var2 & 15) * 16;
-		return this.chunks[var3] != null && this.chunks[var3].isAtLocation(var1, var2);
-	}
-
-	public Chunk provideChunk(int var1, int var2) {
-		int var3 = var1 & 15 | (var2 & 15) * 16;
+	byte[] blocks = new byte[32768];
+
+	public ChunkProviderIso(World worldObj, IChunkLoader chunkLoader) {
+		this.worldObj = worldObj;
+		this.chunkLoader = chunkLoader;
+	}
+
+	public boolean chunkExists(int x, int z) {
+		int i3 = x & 15 | (z & 15) * 16;
+		return this.chunks[i3] != null && this.chunks[i3].isAtLocation(x, z);
+	}
+
+	public Chunk provideChunk(int x, int z) {
+		int i3 = x & 15 | (z & 15) * 16;
 
 		try {
-			if(!this.chunkExists(var1, var2)) {
-				Chunk var4 = this.getChunkAt(var1, var2);
-				if(var4 == null) {
-					var4 = new Chunk(this.worldObj, this.blocks, var1, var2);
-					var4.isChunkRendered = true;
-					var4.neverSave = true;
+			if(!this.chunkExists(x, z)) {
+				Chunk chunk4 = this.getChunkAt(x, z);
+				if(chunk4 == null) {
+					chunk4 = new Chunk(this.worldObj, this.blocks, x, z);
+					chunk4.isChunkRendered = true;
+					chunk4.neverSave = true;
 				}
 
-				this.chunks[var3] = var4;
+				this.chunks[i3] = chunk4;
 			}
 
-			return this.chunks[var3];
-		} catch (Exception var5) {
-			var5.printStackTrace();
+			return this.chunks[i3];
+		} catch (Exception exception5) {
+			exception5.printStackTrace();
 			return null;
 		}
 	}
 
-	private synchronized Chunk getChunkAt(int var1, int var2) {
+	private synchronized Chunk getChunkAt(int chunkX, int chunkZ) {
 		try {
-			return this.chunkLoader.loadChunk(this.worldObj, var1, var2);
-		} catch (IOException var4) {
-			var4.printStackTrace();
+			return this.chunkLoader.loadChunk(this.worldObj, chunkX, chunkZ);
+		} catch (IOException iOException4) {
+			iOException4.printStackTrace();
 			return null;
 		}
 	}
 
-	public void populate(IChunkProvider var1, int var2, int var3) {
+	public void populate(IChunkProvider chunkProvider, int x, int z) {
 	}
 
-	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+	public boolean saveChunks(boolean z1, IProgressUpdate iProgressUpdate) {
 		return true;
 	}
 
--- net/minecraft/src/StepSoundSand.java
+++ net/minecraft/src/StepSoundSand.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
-final class StepSoundSand extends StepSound {
-	StepSoundSand(String var1, float var2, float var3) {
-		super(var1, var2, var3);
+public final class StepSoundSand extends StepSound {
+	public StepSoundSand(String string, float float2, float float3) {
+		super(string, float2, float3);
 	}
 
 	public String getBreakSound() {
--- net/minecraft/src/LoadingScreenRenderer.java
+++ net/minecraft/src/LoadingScreenRenderer.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.Display;
 import org.lwjgl.opengl.GL11;
 
@@ -11,115 +12,117 @@
 	private long systemTime = System.currentTimeMillis();
 	private boolean noError = false;
 
-	public LoadingScreenRenderer(Minecraft var1) {
-		this.mc = var1;
+	public LoadingScreenRenderer(Minecraft minecraft) {
+		this.mc = minecraft;
 	}
 
-	public void resetProgressAndMessage(String var1) {
+	public void resetProgressAndMessage(String msg) {
 		this.noError = false;
-		this.drawScreen(var1);
+		this.drawScreen(msg);
 	}
 
-	public void displayProgressMessage(String var1) {
+	public void displayProgressMessage(String message) {
 		this.noError = true;
 		this.drawScreen(this.currentlyDisplayedText);
 	}
 
-	public void drawScreen(String var1) {
+	public void drawScreen(String msg) {
 		if(!this.mc.running) {
 			if(!this.noError) {
 				throw new MinecraftError();
 			}
 		} else {
-			this.currentlyDisplayedText = var1;
-			ScaledResolution var2 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-			int var3 = var2.getScaledWidth();
-			int var4 = var2.getScaledHeight();
+			this.currentlyDisplayedText = msg;
+			ScaledResolution scaledResolution2 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+			int i3 = scaledResolution2.getScaledWidth();
+			int i4 = scaledResolution2.getScaledHeight();
 			GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
 			GL11.glMatrixMode(GL11.GL_PROJECTION);
 			GL11.glLoadIdentity();
-			GL11.glOrtho(0.0D, (double)var3, (double)var4, 0.0D, 100.0D, 300.0D);
+			GL11.glOrtho(0.0D, (double)i3, (double)i4, 0.0D, 100.0D, 300.0D);
 			GL11.glMatrixMode(GL11.GL_MODELVIEW);
 			GL11.glLoadIdentity();
 			GL11.glTranslatef(0.0F, 0.0F, -200.0F);
 		}
+
 	}
 
-	public void displayLoadingString(String var1) {
+	public void displayLoadingString(String message) {
 		if(!this.mc.running) {
 			if(!this.noError) {
 				throw new MinecraftError();
 			}
 		} else {
 			this.systemTime = 0L;
-			this.currentlyDisplayedProgress = var1;
+			this.currentlyDisplayedProgress = message;
 			this.setLoadingProgress(-1);
 			this.systemTime = 0L;
 		}
+
 	}
 
-	public void setLoadingProgress(int var1) {
+	public void setLoadingProgress(int progress) {
 		if(!this.mc.running) {
 			if(!this.noError) {
 				throw new MinecraftError();
 			}
 		} else {
-			long var2 = System.currentTimeMillis();
-			if(var2 - this.systemTime >= 20L) {
-				this.systemTime = var2;
-				ScaledResolution var4 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-				int var5 = var4.getScaledWidth();
-				int var6 = var4.getScaledHeight();
+			long j2 = System.currentTimeMillis();
+			if(j2 - this.systemTime >= 20L) {
+				this.systemTime = j2;
+				ScaledResolution scaledResolution4 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+				int i5 = scaledResolution4.getScaledWidth();
+				int i6 = scaledResolution4.getScaledHeight();
 				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
 				GL11.glMatrixMode(GL11.GL_PROJECTION);
 				GL11.glLoadIdentity();
-				GL11.glOrtho(0.0D, (double)var5, (double)var6, 0.0D, 100.0D, 300.0D);
+				GL11.glOrtho(0.0D, (double)i5, (double)i6, 0.0D, 100.0D, 300.0D);
 				GL11.glMatrixMode(GL11.GL_MODELVIEW);
 				GL11.glLoadIdentity();
 				GL11.glTranslatef(0.0F, 0.0F, -200.0F);
-				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
-				Tessellator var7 = Tessellator.instance;
-				int var8 = this.mc.renderEngine.getTexture("/dirt.png");
-				GL11.glBindTexture(GL11.GL_TEXTURE_2D, var8);
-				float var9 = 32.0F;
-				var7.startDrawingQuads();
-				var7.setColorOpaque_I(4210752);
-				var7.addVertexWithUV(0.0D, (double)var6, 0.0D, 0.0D, (double)((float)var6 / var9));
-				var7.addVertexWithUV((double)var5, (double)var6, 0.0D, (double)((float)var5 / var9), (double)((float)var6 / var9));
-				var7.addVertexWithUV((double)var5, 0.0D, 0.0D, (double)((float)var5 / var9), 0.0D);
-				var7.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
-				var7.draw();
-				if(var1 >= 0) {
-					byte var10 = 100;
-					byte var11 = 2;
-					int var12 = var5 / 2 - var10 / 2;
-					int var13 = var6 / 2 + 16;
+				GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
+				Tessellator tessellator7 = Tessellator.instance;
+				int i8 = this.mc.renderEngine.getTexture("/dirt.png");
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, i8);
+				float f9 = 32.0F;
+				tessellator7.startDrawingQuads();
+				tessellator7.setColorOpaque_I(789516);
+				tessellator7.addVertexWithUV(0.0D, (double)i6, 0.0D, 0.0D, (double)((float)i6 / f9));
+				tessellator7.addVertexWithUV((double)i5, (double)i6, 0.0D, (double)((float)i5 / f9), (double)((float)i6 / f9));
+				tessellator7.addVertexWithUV((double)i5, 0.0D, 0.0D, (double)((float)i5 / f9), 0.0D);
+				tessellator7.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+				tessellator7.draw();
+				if(progress >= 0) {
+					byte b10 = 100;
+					byte b11 = 2;
+					byte b12 = 13;
+					int i13 = i6 - 16;
 					GL11.glDisable(GL11.GL_TEXTURE_2D);
-					var7.startDrawingQuads();
-					var7.setColorOpaque_I(8421504);
-					var7.addVertex((double)var12, (double)var13, 0.0D);
-					var7.addVertex((double)var12, (double)(var13 + var11), 0.0D);
-					var7.addVertex((double)(var12 + var10), (double)(var13 + var11), 0.0D);
-					var7.addVertex((double)(var12 + var10), (double)var13, 0.0D);
-					var7.setColorOpaque_I(8454016);
-					var7.addVertex((double)var12, (double)var13, 0.0D);
-					var7.addVertex((double)var12, (double)(var13 + var11), 0.0D);
-					var7.addVertex((double)(var12 + var1), (double)(var13 + var11), 0.0D);
-					var7.addVertex((double)(var12 + var1), (double)var13, 0.0D);
-					var7.draw();
+					tessellator7.startDrawingQuads();
+					tessellator7.setColorOpaque_I(8421504);
+					tessellator7.addVertex((double)b12, (double)i13, 0.0D);
+					tessellator7.addVertex((double)b12, (double)(i13 + b11), 0.0D);
+					tessellator7.addVertex((double)(b12 + b10), (double)(i13 + b11), 0.0D);
+					tessellator7.addVertex((double)(b12 + b10), (double)i13, 0.0D);
+					tessellator7.setColorOpaque_I(8454016);
+					tessellator7.addVertex((double)b12, (double)i13, 0.0D);
+					tessellator7.addVertex((double)b12, (double)(i13 + b11), 0.0D);
+					tessellator7.addVertex((double)(b12 + progress), (double)(i13 + b11), 0.0D);
+					tessellator7.addVertex((double)(b12 + progress), (double)i13, 0.0D);
+					tessellator7.draw();
 					GL11.glEnable(GL11.GL_TEXTURE_2D);
 				}
 
-				this.mc.fontRenderer.drawStringWithShadow(this.currentlyDisplayedText, (var5 - this.mc.fontRenderer.getStringWidth(this.currentlyDisplayedText)) / 2, var6 / 2 - 4 - 16, 16777215);
-				this.mc.fontRenderer.drawStringWithShadow(this.currentlyDisplayedProgress, (var5 - this.mc.fontRenderer.getStringWidth(this.currentlyDisplayedProgress)) / 2, var6 / 2 - 4 + 8, 16777215);
+				this.mc.fontRenderer.drawStringWithShadow(this.currentlyDisplayedText, 13, i6 - 40, 0xFFFFFF);
+				this.mc.fontRenderer.drawStringWithShadow(this.currentlyDisplayedProgress, 13, i6 - 28, 1090519039);
 				Display.update();
 
 				try {
 					Thread.yield();
-				} catch (Exception var14) {
+				} catch (Exception exception14) {
 				}
-
 			}
 		}
+
 	}
 }
--- /dev/null
+++ net/minecraft/src/HubFragment3.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public class HubFragment3 extends HubWorldUnknownClass2 {
+	public HubFragment3(HubWorld wv, int integer2, int integer3, int integer4) {
+		super(wv, integer2, integer3, integer4, 5, 5, 5);
+	}
+
+	public void func_9822_96pkMbVA643Z1Y78zU1zOHbm0WbR47PCGp9q1ZyTK64G0pr0ViUREK2TCos1() {
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 0, 0, 4, 0, 4, (short)ExtBlocks.dimensionFloorBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 4, 0, 4, 4, 4, (short)ExtBlocks.dimensionFloorBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 0, 0, 4, 4, 0, (short)ExtBlocks.dimensionWallBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 0, 4, 4, 4, 4, (short)ExtBlocks.dimensionWallBlock.blockID);
+		this.func_9824_4OnwgF5x0BQ3sp7En29qVPi3wP2F99dRcg44iCY75OWivoZ4x7hHLld3O5x3(0, 0, 0, 0, 4, 4, (short)ExtBlocks.dimensionWallBlock.blockID);
+		this.func_9823_0ir18WW2Er00vPEwk4ysWYEf3jBf0oDxYSVBcO27LQ7O9UiZXGtduk6tgrab(2, 1, 2, (short)ExtBlocks.BlockHubDoor.blockID);
+		this.func_9823_0ir18WW2Er00vPEwk4ysWYEf3jBf0oDxYSVBcO27LQ7O9UiZXGtduk6tgrab(3, 3, 1, (short)Block.torch.blockID);
+		this.func_9823_0ir18WW2Er00vPEwk4ysWYEf3jBf0oDxYSVBcO27LQ7O9UiZXGtduk6tgrab(1, 3, 3, (short)Block.torch.blockID);
+		this.func_9826_7ZpHFjuGvcJ051cOz9PE89x1h4vDq16V2LJ76i4OBAOemXk2l5J09hlg30Vh(this.field_9833_9Psx0tZC91cMh7ZAzUJ658Kzvt14VXdr7EZ2i1DLVD9g4MlOJonxzd0TGHB9);
+	}
+}
--- net/minecraft/src/BlockOreBlock.java
+++ net/minecraft/src/BlockOreBlock.java
@@ -1,12 +1,12 @@
 package net.minecraft.src;
 
 public class BlockOreBlock extends Block {
-	public BlockOreBlock(int var1, int var2) {
-		super(var1, Material.iron);
-		this.blockIndexInTexture = var2;
+	public BlockOreBlock(int id, int blockIndex) {
+		super(id, Material.iron);
+		this.blockIndexInTexture = blockIndex;
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture - 16 : (var1 == 0 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture);
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.blockIndexInTexture - 16 : (side == 0 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture);
 	}
 }
--- /dev/null
+++ net/minecraft/src/AuthKey.java
@@ -1,0 +1,4 @@
+package net.minecraft.src;
+
+public class AuthKey {
+}
--- net/minecraft/src/RenderSpider.java
+++ net/minecraft/src/RenderSpider.java
@@ -8,31 +8,31 @@
 		this.setRenderPassModel(new ModelSpider());
 	}
 
-	protected float setSpiderDeathMaxRotation(EntitySpider var1) {
+	protected float setSpiderDeathMaxRotation(EntitySpider jd) {
 		return 180.0F;
 	}
 
-	protected boolean setSpiderEyeBrightness(EntitySpider var1, int var2) {
-		if(var2 != 0) {
+	protected boolean setSpiderEyeBrightness(EntitySpider jd, int integer) {
+		if(integer != 0) {
 			return false;
-		} else if(var2 != 0) {
+		} else if(integer != 0) {
 			return false;
 		} else {
 			this.loadTexture("/mob/spider_eyes.png");
-			float var3 = (1.0F - var1.getBrightness(1.0F)) * 0.5F;
+			float f3 = (1.0F - jd.getBrightness(1.0F)) * 0.5F;
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glDisable(GL11.GL_ALPHA_TEST);
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-			GL11.glColor4f(1.0F, 1.0F, 1.0F, var3);
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, f3);
 			return true;
 		}
 	}
 
-	protected float getDeathMaxRotation(EntityLiving var1) {
-		return this.setSpiderDeathMaxRotation((EntitySpider)var1);
+	protected float getDeathMaxRotation(EntityLiving zi) {
+		return this.setSpiderDeathMaxRotation((EntitySpider)zi);
 	}
 
-	protected boolean shouldRenderPass(EntityLiving var1, int var2) {
-		return this.setSpiderEyeBrightness((EntitySpider)var1, var2);
+	protected boolean shouldRenderPass(EntityLiving zi, int integer) {
+		return this.setSpiderEyeBrightness((EntitySpider)zi, integer);
 	}
 }
--- net/minecraft/src/RecipesCrafting.java
+++ net/minecraft/src/RecipesCrafting.java
@@ -1,9 +1,9 @@
 package net.minecraft.src;
 
 public class RecipesCrafting {
-	public void addRecipes(CraftingManager var1) {
-		var1.addRecipe(new ItemStack(Block.chest), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planks});
-		var1.addRecipe(new ItemStack(Block.stoneOvenIdle), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.cobblestone});
-		var1.addRecipe(new ItemStack(Block.workbench), new Object[]{"##", "##", Character.valueOf('#'), Block.planks});
+	public void addRecipes(CraftingManager craftingManager) {
+		craftingManager.addRecipe(new ItemStack(Block.chest), new Object[]{"###", "# #", "###", '#', Block.planks});
+		craftingManager.addRecipe(new ItemStack(Block.stoneOvenIdle), new Object[]{"###", "# #", "###", '#', Block.cobblestone});
+		craftingManager.addRecipe(new ItemStack(Block.workbench), new Object[]{"##", "##", '#', Block.planks});
 	}
 }
--- net/minecraft/src/RenderEntity.java
+++ net/minecraft/src/RenderEntity.java
@@ -3,9 +3,9 @@
 import org.lwjgl.opengl.GL11;
 
 public class RenderEntity extends Render {
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
+	public void doRender(Entity xy, double double2, double double3, double double4, float float5, float float6) {
 		GL11.glPushMatrix();
-		renderOffsetAABB(var1.boundingBox, var2 - var1.lastTickPosX, var4 - var1.lastTickPosY, var6 - var1.lastTickPosZ);
+		renderOffsetAABB(xy.boundingBox, double2 - xy.lastTickPosX, double3 - xy.lastTickPosY, double4 - xy.lastTickPosZ);
 		GL11.glPopMatrix();
 	}
 }
--- net/minecraft/src/Packet24MobSpawn.java
+++ net/minecraft/src/Packet24MobSpawn.java
@@ -16,38 +16,38 @@
 	public Packet24MobSpawn() {
 	}
 
-	public Packet24MobSpawn(EntityLiving var1) {
-		this.entityId = var1.entityID;
-		this.type = (byte)EntityList.getEntityID(var1);
-		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-		this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.yaw = (byte)((int)(var1.rotationYaw * 256.0F / 360.0F));
-		this.pitch = (byte)((int)(var1.rotationPitch * 256.0F / 360.0F));
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.type = var1.readByte();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.yaw = var1.readByte();
-		this.pitch = var1.readByte();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeByte(this.type);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.writeByte(this.yaw);
-		var1.writeByte(this.pitch);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleMobSpawn(this);
+	public Packet24MobSpawn(EntityLiving entityLiving) {
+		this.entityId = entityLiving.entityID;
+		this.type = (byte)EntityList.getEntityID(entityLiving);
+		this.xPosition = MathHelper.floor_double(entityLiving.posX * 32.0D);
+		this.yPosition = MathHelper.floor_double(entityLiving.posY * 32.0D);
+		this.zPosition = MathHelper.floor_double(entityLiving.posZ * 32.0D);
+		this.yaw = (byte)((int)(entityLiving.rotationYaw * 256.0F / 360.0F));
+		this.pitch = (byte)((int)(entityLiving.rotationPitch * 256.0F / 360.0F));
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.type = dataInputStream.readByte();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.yaw = dataInputStream.readByte();
+		this.pitch = dataInputStream.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeByte(this.type);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.writeByte(this.yaw);
+		dataOutputStream.writeByte(this.pitch);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleMobSpawn(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/WorldGenBlockGoldBlockSteel.java
@@ -1,0 +1,22 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenBlockGoldBlockSteel extends WorldGenerator {
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 6; ++i6) {
+			int i7 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+			int i9 = z + rand.nextInt(8) - rand.nextInt(8);
+			if(world.getBlockId(i7, i8 - 1, i9) != Block.waterStill.blockID && world.getBlockId(i7, i8 - 1, i9) != Block.waterMoving.blockID) {
+				for(int i10 = 0; i10 != 5 && world.getBlockId(i7, i8 + i10, i9) == Block.waterStill.blockID; ++i10) {
+					if(i10 == 4) {
+						world.setBlock(i7, i8, i9, rand.nextInt(20) > 16 ? Block.blockGold.blockID : Block.blockSteel.blockID);
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/VisualsStandart.java
@@ -1,0 +1,47 @@
+package net.minecraft.src;
+
+import java.awt.image.BufferedImage;
+import java.io.IOException;
+import javax.imageio.ImageIO;
+
+import net.minecraft.client.Minecraft;
+
+import org.lwjgl.opengl.GL11;
+
+public class VisualsStandart extends VisualsUnknownClass {
+	private int field_10174_9SB6LX271wt1N9R6FPQT2tkxrjYvp5zeNUgjferC20YRxzVuz1y6IOOXW25S = -1;
+	private BufferedImage field_10175_6xIjRAF772BRqOBNus4gr78k843P39SI5692Xo8B1847XMaHiO3808rtgOk6;
+	public VisualsConfiguration field_10176_8Q693FBKPN5j0pdKG0XzN75si5WTE9p4CQ3M4u040GnL9O98xyP6kN624E9k = new VisualsConfiguration();
+
+	public VisualsStandart() {
+		this.field_10166_0Sg7537VnLZ7du5FsLln7EYJ7tLG9LfdbFsVG53zuLLa94D21JXk6aie9tls = "Extension Standard";
+		this.field_10168_6rK7r47m1wf6M34G2s0hL7m282kBAy4521c3axU19Y9WKmYF8gZ6ryN7JLjP = "The standard design of Extension 16.05";
+
+		try {
+			this.field_10175_6xIjRAF772BRqOBNus4gr78k843P39SI5692Xo8B1847XMaHiO3808rtgOk6 = ImageIO.read(Ext1605Utils.func_12150_5v4Cs6sI06e6Hjpg3rSI82gG008x14C2jag2OM7ADaW5U8a3DYSrf570CJm6("/pack.png"));
+		} catch (IOException iOException2) {
+			iOException2.printStackTrace();
+		}
+
+	}
+
+	public void func_10160_6kOi4sh8w5g34shttmoUUEDgCPE5VRiNwN076cQcxuDFXDkU0y92lK2v99vL(Minecraft minecraft) {
+		if(this.field_10175_6xIjRAF772BRqOBNus4gr78k843P39SI5692Xo8B1847XMaHiO3808rtgOk6 != null) {
+			minecraft.renderEngine.deleteTexture(this.field_10174_9SB6LX271wt1N9R6FPQT2tkxrjYvp5zeNUgjferC20YRxzVuz1y6IOOXW25S);
+		}
+
+	}
+
+	public void func_10162_7X6Ocgi2aWrG07279w14Ok6jeWFPa9bmt1my2NA0a1ZEmdxx5QjSOn3mi5a8(Minecraft minecraft) {
+		if(this.field_10175_6xIjRAF772BRqOBNus4gr78k843P39SI5692Xo8B1847XMaHiO3808rtgOk6 != null && this.field_10174_9SB6LX271wt1N9R6FPQT2tkxrjYvp5zeNUgjferC20YRxzVuz1y6IOOXW25S < 0) {
+			this.field_10174_9SB6LX271wt1N9R6FPQT2tkxrjYvp5zeNUgjferC20YRxzVuz1y6IOOXW25S = minecraft.renderEngine.allocateAndSetupTexture(this.field_10175_6xIjRAF772BRqOBNus4gr78k843P39SI5692Xo8B1847XMaHiO3808rtgOk6);
+		}
+
+		if(this.field_10175_6xIjRAF772BRqOBNus4gr78k843P39SI5692Xo8B1847XMaHiO3808rtgOk6 != null) {
+			minecraft.renderEngine.bindTexture(this.field_10174_9SB6LX271wt1N9R6FPQT2tkxrjYvp5zeNUgjferC20YRxzVuz1y6IOOXW25S);
+		} else {
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, minecraft.renderEngine.getTexture("/gui/unknown_pack.png"));
+		}
+
+	}
+}
--- net/minecraft/src/TextureFlamesFX.java
+++ net/minecraft/src/TextureFlamesFX.java
@@ -4,74 +4,78 @@
 	protected float[] currentFireFrame = new float[320];
 	protected float[] lastFireFrame = new float[320];
 
-	public TextureFlamesFX(int var1) {
-		super(Block.fire.blockIndexInTexture + var1 * 16);
+	public TextureFlamesFX(int index) {
+		super(Block.fire.blockIndexInTexture + index * 16);
 	}
 
 	public void onTick() {
-		int var2;
-		float var4;
-		int var5;
-		int var6;
-		for(int var1 = 0; var1 < 16; ++var1) {
-			for(var2 = 0; var2 < 20; ++var2) {
-				int var3 = 18;
-				var4 = this.currentFireFrame[var1 + (var2 + 1) % 20 * 16] * (float)var3;
-
-				for(var5 = var1 - 1; var5 <= var1 + 1; ++var5) {
-					for(var6 = var2; var6 <= var2 + 1; ++var6) {
-						if(var5 >= 0 && var6 >= 0 && var5 < 16 && var6 < 20) {
-							var4 += this.currentFireFrame[var5 + var6 * 16];
+		if(InputHandler.mc.options.fancyGraphics != 2 || this.field_10713_88024hG6da4f4kcVfOqR8cTJ36RtCs13wB6V30Rs17vqAj14F4Cqz3neFg20) {
+			this.field_10713_88024hG6da4f4kcVfOqR8cTJ36RtCs13wB6V30Rs17vqAj14F4Cqz3neFg20 = false;
+
+			int i1;
+			float f2;
+			int i3;
+			int i4;
+			for(int i5 = 0; i5 < 16; ++i5) {
+				for(i1 = 0; i1 < 20; ++i1) {
+					int i6 = 18;
+					f2 = this.currentFireFrame[i5 + (i1 + 1) % 20 * 16] * (float)i6;
+
+					for(i3 = i5 - 1; i3 <= i5 + 1; ++i3) {
+						for(i4 = i1; i4 <= i1 + 1; ++i4) {
+							if(i3 >= 0 && i4 >= 0 && i3 < 16 && i4 < 20) {
+								f2 += this.currentFireFrame[i3 + i4 * 16];
+							}
+
+							++i6;
 						}
-
-						++var3;
-					}
-				}
-
-				this.lastFireFrame[var1 + var2 * 16] = var4 / ((float)var3 * 1.06F);
-				if(var2 >= 19) {
-					this.lastFireFrame[var1 + var2 * 16] = (float)(Math.random() * Math.random() * Math.random() * 4.0D + Math.random() * (double)0.1F + (double)0.2F);
-				}
-			}
-		}
-
-		float[] var12 = this.lastFireFrame;
-		this.lastFireFrame = this.currentFireFrame;
-		this.currentFireFrame = var12;
-
-		for(var2 = 0; var2 < 256; ++var2) {
-			float var13 = this.currentFireFrame[var2] * 1.8F;
-			if(var13 > 1.0F) {
-				var13 = 1.0F;
-			}
-
-			if(var13 < 0.0F) {
-				var13 = 0.0F;
-			}
-
-			var5 = (int)(var13 * 155.0F + 100.0F);
-			var6 = (int)(var13 * var13 * 255.0F);
-			int var7 = (int)(var13 * var13 * var13 * var13 * var13 * var13 * var13 * var13 * var13 * var13 * 255.0F);
-			short var8 = 255;
-			if(var13 < 0.5F) {
-				var8 = 0;
-			}
-
-			var4 = (var13 - 0.5F) * 2.0F;
-			if(this.anaglyphEnabled) {
-				int var9 = (var5 * 30 + var6 * 59 + var7 * 11) / 100;
-				int var10 = (var5 * 30 + var6 * 70) / 100;
-				int var11 = (var5 * 30 + var7 * 70) / 100;
-				var5 = var9;
-				var6 = var10;
-				var7 = var11;
-			}
-
-			this.imageData[var2 * 4 + 0] = (byte)var5;
-			this.imageData[var2 * 4 + 1] = (byte)var6;
-			this.imageData[var2 * 4 + 2] = (byte)var7;
-			this.imageData[var2 * 4 + 3] = (byte)var8;
-		}
-
+					}
+
+					this.lastFireFrame[i5 + i1 * 16] = f2 / ((float)i6 * 1.06F);
+					if(i1 >= 19) {
+						this.lastFireFrame[i5 + i1 * 16] = (float)(Math.random() * Math.random() * Math.random() * 4.0D + Math.random() * (double)0.1F + (double)0.2F);
+					}
+				}
+			}
+
+			float[] f12 = this.lastFireFrame;
+			this.lastFireFrame = this.currentFireFrame;
+			this.currentFireFrame = f12;
+
+			for(i1 = 0; i1 < 256; ++i1) {
+				float f13 = this.currentFireFrame[i1] * 1.8F;
+				if(f13 > 1.0F) {
+					f13 = 1.0F;
+				}
+
+				if(f13 < 0.0F) {
+					f13 = 0.0F;
+				}
+
+				i3 = (int)(f13 * 155.0F + 100.0F);
+				i4 = (int)(f13 * f13 * 255.0F);
+				int i7 = (int)(f13 * f13 * f13 * f13 * f13 * f13 * f13 * f13 * f13 * f13 * 255.0F);
+				short s8 = 255;
+				if(f13 < 0.5F) {
+					s8 = 0;
+				}
+
+				f2 = (f13 - 0.5F) * 2.0F;
+				if(this.anaglyphEnabled) {
+					int i9 = (i3 * 30 + i4 * 59 + i7 * 11) / 100;
+					int i10 = (i3 * 30 + i4 * 70) / 100;
+					int i11 = (i3 * 30 + i7 * 70) / 100;
+					i3 = i9;
+					i4 = i10;
+					i7 = i11;
+				}
+
+				this.imageData[i1 * 4 + 0] = (byte)i3;
+				this.imageData[i1 * 4 + 1] = (byte)i4;
+				this.imageData[i1 * 4 + 2] = (byte)i7;
+				this.imageData[i1 * 4 + 3] = (byte)s8;
+			}
+
+		}
 	}
 }
--- /dev/null
+++ net/minecraft/src/Packet72.java
@@ -1,0 +1,39 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet72 extends Packet {
+	public String field_8485_902s024v0T40AC31By11eacj2G9ftX6I7oIimZe17emPq6w323bj398K2v81 = "";
+	public int field_8486_8TA6UV69W9P3wmw711p172l3T8s0Ptbd25wMM71jF6fUH6cq4n64JE8jvFIR = 5000;
+
+	public Packet72() {
+	}
+
+	public Packet72(String string, int integer) {
+		this.field_8485_902s024v0T40AC31By11eacj2G9ftX6I7oIimZe17emPq6w323bj398K2v81 = string;
+		this.field_8486_8TA6UV69W9P3wmw711p172l3T8s0Ptbd25wMM71jF6fUH6cq4n64JE8jvFIR = integer;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.field_8485_902s024v0T40AC31By11eacj2G9ftX6I7oIimZe17emPq6w323bj398K2v81 = dataInputStream.readUTF();
+		this.field_8486_8TA6UV69W9P3wmw711p172l3T8s0Ptbd25wMM71jF6fUH6cq4n64JE8jvFIR = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.field_8485_902s024v0T40AC31By11eacj2G9ftX6I7oIimZe17emPq6w323bj398K2v81);
+		dataOutputStream.writeInt(this.field_8486_8TA6UV69W9P3wmw711p172l3T8s0Ptbd25wMM71jF6fUH6cq4n64JE8jvFIR);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		if(netHandler instanceof NetClientHandler) {
+			((NetClientHandler)netHandler).func_9565_0Y8HJW4TgPPE2z549sYe11V6j33RgAx30G8Wqd6O07L94mxIBzIR8Xpj72GI(this);
+		}
+
+	}
+
+	public int getPacketSize() {
+		return this.field_8485_902s024v0T40AC31By11eacj2G9ftX6I7oIimZe17emPq6w323bj398K2v81.getBytes().length + 4;
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandSummonSpacemen.java
@@ -1,0 +1,28 @@
+package net.minecraft.src;
+
+class CommandSummonSpacemen extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8608_7l3Lr6cDe8dboGdqN9K92FAu6pCgjQc6O84CjP4iz8X4n5T3515rtyf5WkFe;
+    
+    CommandSummonSpacemen(final CommandManager abb) {
+        this.field_8608_7l3Lr6cDe8dboGdqN9K92FAu6pCgjQc6O84CjP4iz8X4n5T3515rtyf5WkFe = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        for (int i = 0; i < (int)arr[0]; ++i) {
+            final EntityAmoung entity = new EntityAmoung(InputHandler.mc.theWorld);
+            entity.setPosition(InputHandler.mc.thePlayer.posX, InputHandler.mc.thePlayer.posY, InputHandler.mc.thePlayer.posZ);
+            InputHandler.mc.theWorld.spawnEntityInWorld(entity);
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+    
+    @Override
+    public boolean func_8542_97Qrz8937ERoO4A9Ve3xu7D4CcYz03IoW3R8sqwuQi138x1Vj1512EE2AEAd() {
+        return false;
+    }
+}
--- net/minecraft/src/EntityMinecart.java
+++ net/minecraft/src/EntityMinecart.java
@@ -20,8 +20,8 @@
 	private double minecartYaw;
 	private double minecartPitch;
 
-	public EntityMinecart(World var1) {
-		super(var1);
+	public EntityMinecart(World world) {
+		super(world);
 		this.cargoItems = new ItemStack[36];
 		this.damageTaken = 0;
 		this.timeSinceHit = 0;
@@ -33,8 +33,8 @@
 		this.canTriggerWalking = false;
 	}
 
-	public AxisAlignedBB getCollisionBox(Entity var1) {
-		return var1.boundingBox;
+	public AxisAlignedBB getCollisionBox(Entity entity) {
+		return entity.boundingBox;
 	}
 
 	public AxisAlignedBB getBoundingBox() {
@@ -45,26 +45,26 @@
 		return true;
 	}
 
-	public EntityMinecart(World var1, double var2, double var4, double var6, int var8) {
-		this(var1);
-		this.setPosition(var2, var4 + (double)this.yOffset, var6);
+	public EntityMinecart(World world, double x, double y, double z, int minecartType) {
+		this(world);
+		this.setPosition(x, y + (double)this.yOffset, z);
 		this.motionX = 0.0D;
 		this.motionY = 0.0D;
 		this.motionZ = 0.0D;
-		this.prevPosX = var2;
-		this.prevPosY = var4;
-		this.prevPosZ = var6;
-		this.minecartType = var8;
+		this.prevPosX = x;
+		this.prevPosY = y;
+		this.prevPosZ = z;
+		this.minecartType = minecartType;
 	}
 
 	public double getMountedYOffset() {
 		return (double)this.height * 0.0D - (double)0.3F;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		this.forwardDirection = -this.forwardDirection;
 		this.timeSinceHit = 10;
-		this.damageTaken += var2 * 10;
+		this.damageTaken += damage * 10;
 		if(this.damageTaken > 40) {
 			this.entityDropItem(Item.minecartEmpty.shiftedIndex, 1, 0.0F);
 			if(this.minecartType == 1) {
@@ -84,26 +84,26 @@
 	}
 
 	public void setEntityDead() {
-		for(int var1 = 0; var1 < this.getSizeInventory(); ++var1) {
-			ItemStack var2 = this.getStackInSlot(var1);
-			if(var2 != null) {
-				float var3 = this.rand.nextFloat() * 0.8F + 0.1F;
-				float var4 = this.rand.nextFloat() * 0.8F + 0.1F;
-				float var5 = this.rand.nextFloat() * 0.8F + 0.1F;
+		for(int i1 = 0; i1 < this.getSizeInventory(); ++i1) {
+			ItemStack itemStack2 = this.getStackInSlot(i1);
+			if(itemStack2 != null) {
+				float f3 = this.rand.nextFloat() * 0.8F + 0.1F;
+				float f4 = this.rand.nextFloat() * 0.8F + 0.1F;
+				float f5 = this.rand.nextFloat() * 0.8F + 0.1F;
 
-				while(var2.stackSize > 0) {
-					int var6 = this.rand.nextInt(21) + 10;
-					if(var6 > var2.stackSize) {
-						var6 = var2.stackSize;
+				while(itemStack2.stackSize > 0) {
+					int i6 = this.rand.nextInt(21) + 10;
+					if(i6 > itemStack2.stackSize) {
+						i6 = itemStack2.stackSize;
 					}
 
-					var2.stackSize -= var6;
-					EntityItem var7 = new EntityItem(this.worldObj, this.posX + (double)var3, this.posY + (double)var4, this.posZ + (double)var5, new ItemStack(var2.itemID, var6, var2.itemDmg));
-					float var8 = 0.05F;
-					var7.motionX = (double)((float)this.rand.nextGaussian() * var8);
-					var7.motionY = (double)((float)this.rand.nextGaussian() * var8 + 0.2F);
-					var7.motionZ = (double)((float)this.rand.nextGaussian() * var8);
-					this.worldObj.spawnEntityInWorld(var7);
+					itemStack2.stackSize -= i6;
+					EntityItem entityItem7 = new EntityItem(this.worldObj, this.posX + (double)f3, this.posY + (double)f4, this.posZ + (double)f5, new ItemStack(itemStack2.itemID, i6, itemStack2.itemDmg));
+					float f8 = 0.05F;
+					entityItem7.motionX = (double)((float)this.rand.nextGaussian() * f8);
+					entityItem7.motionY = (double)((float)this.rand.nextGaussian() * f8 + 0.2F);
+					entityItem7.motionZ = (double)((float)this.rand.nextGaussian() * f8);
+					this.worldObj.spawnEntityInWorld(entityItem7);
 				}
 			}
 		}
@@ -112,30 +112,29 @@
 	}
 
 	public void onUpdate() {
-		double var7;
+		double d1;
 		if(this.worldObj.multiplayerWorld) {
 			if(this.turnProgress > 0) {
-				double var41 = this.posX + (this.minecartX - this.posX) / (double)this.turnProgress;
-				double var42 = this.posY + (this.minecartY - this.posY) / (double)this.turnProgress;
-				double var5 = this.posZ + (this.minecartZ - this.posZ) / (double)this.turnProgress;
-
-				for(var7 = this.minecartYaw - (double)this.rotationYaw; var7 < -180.0D; var7 += 360.0D) {
-				}
-
-				while(var7 >= 180.0D) {
-					var7 -= 360.0D;
-				}
-
-				this.rotationYaw = (float)((double)this.rotationYaw + var7 / (double)this.turnProgress);
+				double d3 = this.posX + (this.minecartX - this.posX) / (double)this.turnProgress;
+				double d5 = this.posY + (this.minecartY - this.posY) / (double)this.turnProgress;
+				double d7 = this.posZ + (this.minecartZ - this.posZ) / (double)this.turnProgress;
+
+				for(d1 = this.minecartYaw - (double)this.rotationYaw; d1 < -180.0D; d1 += 360.0D) {
+				}
+
+				while(d1 >= 180.0D) {
+					d1 -= 360.0D;
+				}
+
+				this.rotationYaw = (float)((double)this.rotationYaw + d1 / (double)this.turnProgress);
 				this.rotationPitch = (float)((double)this.rotationPitch + (this.minecartPitch - (double)this.rotationPitch) / (double)this.turnProgress);
 				--this.turnProgress;
-				this.setPosition(var41, var42, var5);
+				this.setPosition(d3, d5, d7);
 				this.setRotation(this.rotationYaw, this.rotationPitch);
 			} else {
 				this.setPosition(this.posX, this.posY, this.posZ);
 				this.setRotation(this.rotationYaw, this.rotationPitch);
 			}
-
 		} else {
 			if(this.timeSinceHit > 0) {
 				--this.timeSinceHit;
@@ -149,107 +148,107 @@
 			this.prevPosY = this.posY;
 			this.prevPosZ = this.posZ;
 			this.motionY -= (double)0.04F;
-			int var1 = MathHelper.floor_double(this.posX);
-			int var2 = MathHelper.floor_double(this.posY);
-			int var3 = MathHelper.floor_double(this.posZ);
-			if(this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.minecartTrack.blockID) {
-				--var2;
+			int i43 = MathHelper.floor_double(this.posX);
+			int i4 = MathHelper.floor_double(this.posY);
+			int i44 = MathHelper.floor_double(this.posZ);
+			if(this.worldObj.getBlockId(i43, i4 - 1, i44) == Block.minecartTrack.blockID) {
+				--i4;
 			}
 
-			double var4 = 0.4D;
-			boolean var6 = false;
-			var7 = 1.0D / 128.0D;
-			if(this.worldObj.getBlockId(var1, var2, var3) == Block.minecartTrack.blockID) {
-				Vec3D var9 = this.getPos(this.posX, this.posY, this.posZ);
-				int var10 = this.worldObj.getBlockMetadata(var1, var2, var3);
-				this.posY = (double)var2;
-				if(var10 >= 2 && var10 <= 5) {
-					this.posY = (double)(var2 + 1);
-				}
-
-				if(var10 == 2) {
-					this.motionX -= var7;
-				}
-
-				if(var10 == 3) {
-					this.motionX += var7;
-				}
-
-				if(var10 == 4) {
-					this.motionZ += var7;
-				}
-
-				if(var10 == 5) {
-					this.motionZ -= var7;
-				}
-
-				int[][] var11 = matrix[var10];
-				double var12 = (double)(var11[1][0] - var11[0][0]);
-				double var14 = (double)(var11[1][2] - var11[0][2]);
-				double var16 = Math.sqrt(var12 * var12 + var14 * var14);
-				double var18 = this.motionX * var12 + this.motionZ * var14;
-				if(var18 < 0.0D) {
-					var12 = -var12;
-					var14 = -var14;
-				}
-
-				double var20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-				this.motionX = var20 * var12 / var16;
-				this.motionZ = var20 * var14 / var16;
-				double var22 = 0.0D;
-				double var24 = (double)var1 + 0.5D + (double)var11[0][0] * 0.5D;
-				double var26 = (double)var3 + 0.5D + (double)var11[0][2] * 0.5D;
-				double var28 = (double)var1 + 0.5D + (double)var11[1][0] * 0.5D;
-				double var30 = (double)var3 + 0.5D + (double)var11[1][2] * 0.5D;
-				var12 = var28 - var24;
-				var14 = var30 - var26;
-				double var32;
-				double var34;
-				double var36;
-				if(var12 == 0.0D) {
-					this.posX = (double)var1 + 0.5D;
-					var22 = this.posZ - (double)var3;
-				} else if(var14 == 0.0D) {
-					this.posZ = (double)var3 + 0.5D;
-					var22 = this.posX - (double)var1;
+			double d6 = 0.4D;
+			boolean z8 = false;
+			d1 = 2.0D / 256D;
+			if(this.worldObj.getBlockId(i43, i4, i44) == Block.minecartTrack.blockID) {
+				Vec3D vec3D9 = this.getPos(this.posX, this.posY, this.posZ);
+				int i10 = this.worldObj.getBlockMetadata(i43, i4, i44);
+				this.posY = (double)i4;
+				if(i10 >= 2 && i10 <= 5) {
+					this.posY = (double)(i4 + 1);
+				}
+
+				if(i10 == 2) {
+					this.motionX -= d1;
+				}
+
+				if(i10 == 3) {
+					this.motionX += d1;
+				}
+
+				if(i10 == 4) {
+					this.motionZ += d1;
+				}
+
+				if(i10 == 5) {
+					this.motionZ -= d1;
+				}
+
+				int[][] i11 = matrix[i10];
+				double d12 = (double)(i11[1][0] - i11[0][0]);
+				double d14 = (double)(i11[1][2] - i11[0][2]);
+				double d16 = Math.sqrt(d12 * d12 + d14 * d14);
+				double d18 = this.motionX * d12 + this.motionZ * d14;
+				if(d18 < 0.0D) {
+					d12 = -d12;
+					d14 = -d14;
+				}
+
+				double d20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+				this.motionX = d20 * d12 / d16;
+				this.motionZ = d20 * d14 / d16;
+				double d22 = 0.0D;
+				double d24 = (double)i43 + 0.5D + (double)i11[0][0] * 0.5D;
+				double d26 = (double)i44 + 0.5D + (double)i11[0][2] * 0.5D;
+				double d28 = (double)i43 + 0.5D + (double)i11[1][0] * 0.5D;
+				double d30 = (double)i44 + 0.5D + (double)i11[1][2] * 0.5D;
+				d12 = d28 - d24;
+				d14 = d30 - d26;
+				double d32;
+				double d34;
+				double d36;
+				if(d12 == 0.0D) {
+					this.posX = (double)i43 + 0.5D;
+					d22 = this.posZ - (double)i44;
+				} else if(d14 == 0.0D) {
+					this.posZ = (double)i44 + 0.5D;
+					d22 = this.posX - (double)i43;
 				} else {
-					var32 = this.posX - var24;
-					var34 = this.posZ - var26;
-					var36 = (var32 * var12 + var34 * var14) * 2.0D;
-					var22 = var36;
+					d32 = this.posX - d24;
+					d34 = this.posZ - d26;
+					d36 = (d32 * d12 + d34 * d14) * 2.0D;
+					d22 = d36;
 				}
 
-				this.posX = var24 + var12 * var22;
-				this.posZ = var26 + var14 * var22;
+				this.posX = d24 + d12 * d22;
+				this.posZ = d26 + d14 * d22;
 				this.setPosition(this.posX, this.posY + (double)this.yOffset, this.posZ);
-				var32 = this.motionX;
-				var34 = this.motionZ;
+				d32 = this.motionX;
+				d34 = this.motionZ;
 				if(this.riddenByEntity != null) {
-					var32 *= 0.75D;
-					var34 *= 0.75D;
-				}
-
-				if(var32 < -var4) {
-					var32 = -var4;
-				}
-
-				if(var32 > var4) {
-					var32 = var4;
-				}
-
-				if(var34 < -var4) {
-					var34 = -var4;
-				}
-
-				if(var34 > var4) {
-					var34 = var4;
-				}
-
-				this.moveEntity(var32, 0.0D, var34);
-				if(var11[0][1] != 0 && MathHelper.floor_double(this.posX) - var1 == var11[0][0] && MathHelper.floor_double(this.posZ) - var3 == var11[0][2]) {
-					this.setPosition(this.posX, this.posY + (double)var11[0][1], this.posZ);
-				} else if(var11[1][1] != 0 && MathHelper.floor_double(this.posX) - var1 == var11[1][0] && MathHelper.floor_double(this.posZ) - var3 == var11[1][2]) {
-					this.setPosition(this.posX, this.posY + (double)var11[1][1], this.posZ);
+					d32 *= 0.75D;
+					d34 *= 0.75D;
+				}
+
+				if(d32 < -d6) {
+					d32 = -d6;
+				}
+
+				if(d32 > d6) {
+					d32 = d6;
+				}
+
+				if(d34 < -d6) {
+					d34 = -d6;
+				}
+
+				if(d34 > d6) {
+					d34 = d6;
+				}
+
+				this.moveEntity(d32, 0.0D, d34);
+				if(i11[0][1] != 0 && MathHelper.floor_double(this.posX) - i43 == i11[0][0] && MathHelper.floor_double(this.posZ) - i44 == i11[0][2]) {
+					this.setPosition(this.posX, this.posY + (double)i11[0][1], this.posZ);
+				} else if(i11[1][1] != 0 && MathHelper.floor_double(this.posX) - i43 == i11[1][0] && MathHelper.floor_double(this.posZ) - i44 == i11[1][2]) {
+					this.setPosition(this.posX, this.posY + (double)i11[1][1], this.posZ);
 				}
 
 				if(this.riddenByEntity != null) {
@@ -258,17 +257,17 @@
 					this.motionZ *= (double)0.997F;
 				} else {
 					if(this.minecartType == 2) {
-						var36 = (double)MathHelper.sqrt_double(this.pushX * this.pushX + this.pushZ * this.pushZ);
-						if(var36 > 0.01D) {
-							var6 = true;
-							this.pushX /= var36;
-							this.pushZ /= var36;
-							double var38 = 0.04D;
+						d36 = (double)MathHelper.sqrt_double(this.pushX * this.pushX + this.pushZ * this.pushZ);
+						if(d36 > 0.01D) {
+							z8 = true;
+							this.pushX /= d36;
+							this.pushZ /= d36;
+							double d38 = 0.04D;
 							this.motionX *= (double)0.8F;
 							this.motionY *= 0.0D;
 							this.motionZ *= (double)0.8F;
-							this.motionX += this.pushX * var38;
-							this.motionZ += this.pushZ * var38;
+							this.motionX += this.pushX * d38;
+							this.motionZ += this.pushZ * d38;
 						} else {
 							this.motionX *= (double)0.9F;
 							this.motionY *= 0.0D;
@@ -281,31 +280,31 @@
 					this.motionZ *= (double)0.96F;
 				}
 
-				Vec3D var46 = this.getPos(this.posX, this.posY, this.posZ);
-				if(var46 != null && var9 != null) {
-					double var37 = (var9.yCoord - var46.yCoord) * 0.05D;
-					var20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-					if(var20 > 0.0D) {
-						this.motionX = this.motionX / var20 * (var20 + var37);
-						this.motionZ = this.motionZ / var20 * (var20 + var37);
+				Vec3D vec3D48 = this.getPos(this.posX, this.posY, this.posZ);
+				if(vec3D48 != null && vec3D9 != null) {
+					double d39 = (vec3D9.yCoord - vec3D48.yCoord) * 0.05D;
+					d20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+					if(d20 > 0.0D) {
+						this.motionX = this.motionX / d20 * (d20 + d39);
+						this.motionZ = this.motionZ / d20 * (d20 + d39);
 					}
 
-					this.setPosition(this.posX, var46.yCoord, this.posZ);
+					this.setPosition(this.posX, vec3D48.yCoord, this.posZ);
 				}
 
-				int var47 = MathHelper.floor_double(this.posX);
-				int var48 = MathHelper.floor_double(this.posZ);
-				if(var47 != var1 || var48 != var3) {
-					var20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-					this.motionX = var20 * (double)(var47 - var1);
-					this.motionZ = var20 * (double)(var48 - var3);
+				int i49 = MathHelper.floor_double(this.posX);
+				int i40 = MathHelper.floor_double(this.posZ);
+				if(i49 != i43 || i40 != i44) {
+					d20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+					this.motionX = d20 * (double)(i49 - i43);
+					this.motionZ = d20 * (double)(i40 - i44);
 				}
 
 				if(this.minecartType == 2) {
-					double var39 = (double)MathHelper.sqrt_double(this.pushX * this.pushX + this.pushZ * this.pushZ);
-					if(var39 > 0.01D && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.001D) {
-						this.pushX /= var39;
-						this.pushZ /= var39;
+					double d41 = (double)MathHelper.sqrt_double(this.pushX * this.pushX + this.pushZ * this.pushZ);
+					if(d41 > 0.01D && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.001D) {
+						this.pushX /= d41;
+						this.pushZ /= d41;
 						if(this.pushX * this.motionX + this.pushZ * this.motionZ < 0.0D) {
 							this.pushX = 0.0D;
 							this.pushZ = 0.0D;
@@ -316,20 +315,20 @@
 					}
 				}
 			} else {
-				if(this.motionX < -var4) {
-					this.motionX = -var4;
-				}
-
-				if(this.motionX > var4) {
-					this.motionX = var4;
-				}
-
-				if(this.motionZ < -var4) {
-					this.motionZ = -var4;
-				}
-
-				if(this.motionZ > var4) {
-					this.motionZ = var4;
+				if(this.motionX < -d6) {
+					this.motionX = -d6;
+				}
+
+				if(this.motionX > d6) {
+					this.motionX = d6;
+				}
+
+				if(this.motionZ < -d6) {
+					this.motionZ = -d6;
+				}
+
+				if(this.motionZ > d6) {
+					this.motionZ = d6;
 				}
 
 				if(this.onGround) {
@@ -347,35 +346,35 @@
 			}
 
 			this.rotationPitch = 0.0F;
-			double var43 = this.prevPosX - this.posX;
-			double var44 = this.prevPosZ - this.posZ;
-			if(var43 * var43 + var44 * var44 > 0.001D) {
-				this.rotationYaw = (float)(Math.atan2(var44, var43) * 180.0D / Math.PI);
+			double d45 = this.prevPosX - this.posX;
+			double d46 = this.prevPosZ - this.posZ;
+			if(d45 * d45 + d46 * d46 > 0.001D) {
+				this.rotationYaw = (float)(Math.atan2(d46, d45) * 180.0D / Math.PI);
 				if(this.isInReverse) {
 					this.rotationYaw += 180.0F;
 				}
 			}
 
-			double var13;
-			for(var13 = (double)(this.rotationYaw - this.prevRotationYaw); var13 >= 180.0D; var13 -= 360.0D) {
-			}
-
-			while(var13 < -180.0D) {
-				var13 += 360.0D;
-			}
-
-			if(var13 < -170.0D || var13 >= 170.0D) {
+			double d13;
+			for(d13 = (double)(this.rotationYaw - this.prevRotationYaw); d13 >= 180.0D; d13 -= 360.0D) {
+			}
+
+			while(d13 < -180.0D) {
+				d13 += 360.0D;
+			}
+
+			if(d13 < -170.0D || d13 >= 170.0D) {
 				this.rotationYaw += 180.0F;
 				this.isInReverse = !this.isInReverse;
 			}
 
 			this.setRotation(this.rotationYaw, this.rotationPitch);
-			List var15 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
-			if(var15 != null && var15.size() > 0) {
-				for(int var45 = 0; var45 < var15.size(); ++var45) {
-					Entity var17 = (Entity)var15.get(var45);
-					if(var17 != this.riddenByEntity && var17.canBePushed() && var17 instanceof EntityMinecart) {
-						var17.applyEntityCollision(this);
+			List list15 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
+			if(list15 != null && list15.size() > 0) {
+				for(int i47 = 0; i47 < list15.size(); ++i47) {
+					Entity entity17 = (Entity)list15.get(i47);
+					if(entity17 != this.riddenByEntity && entity17.canBePushed() && entity17 instanceof EntityMinecart) {
+						entity17.applyEntityCollision(this);
 					}
 				}
 			}
@@ -384,7 +383,7 @@
 				this.riddenByEntity = null;
 			}
 
-			if(var6 && this.rand.nextInt(4) == 0) {
+			if(z8 && this.rand.nextInt(4) == 0) {
 				--this.fuel;
 				if(this.fuel < 0) {
 					this.pushX = this.pushZ = 0.0D;
@@ -392,139 +391,139 @@
 
 				this.worldObj.spawnParticle("largesmoke", this.posX, this.posY + 0.8D, this.posZ, 0.0D, 0.0D, 0.0D);
 			}
-
 		}
+
 	}
 
-	public Vec3D getPosOffset(double var1, double var3, double var5, double var7) {
-		int var9 = MathHelper.floor_double(var1);
-		int var10 = MathHelper.floor_double(var3);
-		int var11 = MathHelper.floor_double(var5);
-		if(this.worldObj.getBlockId(var9, var10 - 1, var11) == Block.minecartTrack.blockID) {
-			--var10;
+	public Vec3D getPosOffset(double x, double y, double z, double offset) {
+		int i9 = MathHelper.floor_double(x);
+		int i10 = MathHelper.floor_double(y);
+		int i11 = MathHelper.floor_double(z);
+		if(this.worldObj.getBlockId(i9, i10 - 1, i11) == Block.minecartTrack.blockID) {
+			--i10;
 		}
 
-		if(this.worldObj.getBlockId(var9, var10, var11) == Block.minecartTrack.blockID) {
-			int var12 = this.worldObj.getBlockMetadata(var9, var10, var11);
-			var3 = (double)var10;
-			if(var12 >= 2 && var12 <= 5) {
-				var3 = (double)(var10 + 1);
-			}
-
-			int[][] var13 = matrix[var12];
-			double var14 = (double)(var13[1][0] - var13[0][0]);
-			double var16 = (double)(var13[1][2] - var13[0][2]);
-			double var18 = Math.sqrt(var14 * var14 + var16 * var16);
-			var14 /= var18;
-			var16 /= var18;
-			var1 += var14 * var7;
-			var5 += var16 * var7;
-			if(var13[0][1] != 0 && MathHelper.floor_double(var1) - var9 == var13[0][0] && MathHelper.floor_double(var5) - var11 == var13[0][2]) {
-				var3 += (double)var13[0][1];
-			} else if(var13[1][1] != 0 && MathHelper.floor_double(var1) - var9 == var13[1][0] && MathHelper.floor_double(var5) - var11 == var13[1][2]) {
-				var3 += (double)var13[1][1];
-			}
-
-			return this.getPos(var1, var3, var5);
+		if(this.worldObj.getBlockId(i9, i10, i11) == Block.minecartTrack.blockID) {
+			int i12 = this.worldObj.getBlockMetadata(i9, i10, i11);
+			y = (double)i10;
+			if(i12 >= 2 && i12 <= 5) {
+				y = (double)(i10 + 1);
+			}
+
+			int[][] i13 = matrix[i12];
+			double d14 = (double)(i13[1][0] - i13[0][0]);
+			double d16 = (double)(i13[1][2] - i13[0][2]);
+			double d18 = Math.sqrt(d14 * d14 + d16 * d16);
+			d14 /= d18;
+			d16 /= d18;
+			x += d14 * offset;
+			z += d16 * offset;
+			if(i13[0][1] != 0 && MathHelper.floor_double(x) - i9 == i13[0][0] && MathHelper.floor_double(z) - i11 == i13[0][2]) {
+				y += (double)i13[0][1];
+			} else if(i13[1][1] != 0 && MathHelper.floor_double(x) - i9 == i13[1][0] && MathHelper.floor_double(z) - i11 == i13[1][2]) {
+				y += (double)i13[1][1];
+			}
+
+			return this.getPos(x, y, z);
 		} else {
 			return null;
 		}
 	}
 
-	public Vec3D getPos(double var1, double var3, double var5) {
-		int var7 = MathHelper.floor_double(var1);
-		int var8 = MathHelper.floor_double(var3);
-		int var9 = MathHelper.floor_double(var5);
-		if(this.worldObj.getBlockId(var7, var8 - 1, var9) == Block.minecartTrack.blockID) {
-			--var8;
+	public Vec3D getPos(double x, double y, double z) {
+		int i7 = MathHelper.floor_double(x);
+		int i8 = MathHelper.floor_double(y);
+		int i9 = MathHelper.floor_double(z);
+		if(this.worldObj.getBlockId(i7, i8 - 1, i9) == Block.minecartTrack.blockID) {
+			--i8;
 		}
 
-		if(this.worldObj.getBlockId(var7, var8, var9) == Block.minecartTrack.blockID) {
-			int var10 = this.worldObj.getBlockMetadata(var7, var8, var9);
-			var3 = (double)var8;
-			if(var10 >= 2 && var10 <= 5) {
-				var3 = (double)(var8 + 1);
+		if(this.worldObj.getBlockId(i7, i8, i9) == Block.minecartTrack.blockID) {
+			int i10 = this.worldObj.getBlockMetadata(i7, i8, i9);
+			y = (double)i8;
+			if(i10 >= 2 && i10 <= 5) {
+				y = (double)(i8 + 1);
 			}
 
-			int[][] var11 = matrix[var10];
-			double var12 = 0.0D;
-			double var14 = (double)var7 + 0.5D + (double)var11[0][0] * 0.5D;
-			double var16 = (double)var8 + 0.5D + (double)var11[0][1] * 0.5D;
-			double var18 = (double)var9 + 0.5D + (double)var11[0][2] * 0.5D;
-			double var20 = (double)var7 + 0.5D + (double)var11[1][0] * 0.5D;
-			double var22 = (double)var8 + 0.5D + (double)var11[1][1] * 0.5D;
-			double var24 = (double)var9 + 0.5D + (double)var11[1][2] * 0.5D;
-			double var26 = var20 - var14;
-			double var28 = (var22 - var16) * 2.0D;
-			double var30 = var24 - var18;
-			if(var26 == 0.0D) {
-				var1 = (double)var7 + 0.5D;
-				var12 = var5 - (double)var9;
-			} else if(var30 == 0.0D) {
-				var5 = (double)var9 + 0.5D;
-				var12 = var1 - (double)var7;
+			int[][] i11 = matrix[i10];
+			double d12 = 0.0D;
+			double d14 = (double)i7 + 0.5D + (double)i11[0][0] * 0.5D;
+			double d16 = (double)i8 + 0.5D + (double)i11[0][1] * 0.5D;
+			double d18 = (double)i9 + 0.5D + (double)i11[0][2] * 0.5D;
+			double d20 = (double)i7 + 0.5D + (double)i11[1][0] * 0.5D;
+			double d22 = (double)i8 + 0.5D + (double)i11[1][1] * 0.5D;
+			double d24 = (double)i9 + 0.5D + (double)i11[1][2] * 0.5D;
+			double d26 = d20 - d14;
+			double d28 = (d22 - d16) * 2.0D;
+			double d30 = d24 - d18;
+			if(d26 == 0.0D) {
+				x = (double)i7 + 0.5D;
+				d12 = z - (double)i9;
+			} else if(d30 == 0.0D) {
+				z = (double)i9 + 0.5D;
+				d12 = x - (double)i7;
 			} else {
-				double var32 = var1 - var14;
-				double var34 = var5 - var18;
-				double var36 = (var32 * var26 + var34 * var30) * 2.0D;
-				var12 = var36;
-			}
-
-			var1 = var14 + var26 * var12;
-			var3 = var16 + var28 * var12;
-			var5 = var18 + var30 * var12;
-			if(var28 < 0.0D) {
-				++var3;
-			}
-
-			if(var28 > 0.0D) {
-				var3 += 0.5D;
-			}
-
-			return Vec3D.createVector(var1, var3, var5);
+				double d32 = x - d14;
+				double d34 = z - d18;
+				double d36 = (d32 * d26 + d34 * d30) * 2.0D;
+				d12 = d36;
+			}
+
+			x = d14 + d26 * d12;
+			y = d16 + d28 * d12;
+			z = d18 + d30 * d12;
+			if(d28 < 0.0D) {
+				++y;
+			}
+
+			if(d28 > 0.0D) {
+				y += 0.5D;
+			}
+
+			return Vec3D.createVector(x, y, z);
 		} else {
 			return null;
 		}
 	}
 
-	protected void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setInteger("Type", this.minecartType);
+	protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setInteger("Type", this.minecartType);
 		if(this.minecartType == 2) {
-			var1.setDouble("PushX", this.pushX);
-			var1.setDouble("PushZ", this.pushZ);
-			var1.setShort("Fuel", (short)this.fuel);
+			nbttagcompound.setDouble("PushX", this.pushX);
+			nbttagcompound.setDouble("PushZ", this.pushZ);
+			nbttagcompound.setShort("Fuel", (short)this.fuel);
 		} else if(this.minecartType == 1) {
-			NBTTagList var2 = new NBTTagList();
+			NBTTagList nBTTagList2 = new NBTTagList();
 
-			for(int var3 = 0; var3 < this.cargoItems.length; ++var3) {
-				if(this.cargoItems[var3] != null) {
-					NBTTagCompound var4 = new NBTTagCompound();
-					var4.setByte("Slot", (byte)var3);
-					this.cargoItems[var3].writeToNBT(var4);
-					var2.setTag(var4);
+			for(int i3 = 0; i3 < this.cargoItems.length; ++i3) {
+				if(this.cargoItems[i3] != null) {
+					NBTTagCompound nBTTagCompound4 = new NBTTagCompound();
+					nBTTagCompound4.setByte("Slot", (byte)i3);
+					this.cargoItems[i3].writeToNBT(nBTTagCompound4);
+					nBTTagList2.setTag(nBTTagCompound4);
 				}
 			}
 
-			var1.setTag("Items", var2);
+			nbttagcompound.setTag("Items", nBTTagList2);
 		}
 
 	}
 
-	protected void readEntityFromNBT(NBTTagCompound var1) {
-		this.minecartType = var1.getInteger("Type");
+	protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.minecartType = nbttagcompound.getInteger("Type");
 		if(this.minecartType == 2) {
-			this.pushX = var1.getDouble("PushX");
-			this.pushZ = var1.getDouble("PushZ");
-			this.fuel = var1.getShort("Fuel");
+			this.pushX = nbttagcompound.getDouble("PushX");
+			this.pushZ = nbttagcompound.getDouble("PushZ");
+			this.fuel = nbttagcompound.getShort("Fuel");
 		} else if(this.minecartType == 1) {
-			NBTTagList var2 = var1.getTagList("Items");
+			NBTTagList nBTTagList2 = nbttagcompound.getTagList("Items");
 			this.cargoItems = new ItemStack[this.getSizeInventory()];
 
-			for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-				NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-				int var5 = var4.getByte("Slot") & 255;
-				if(var5 >= 0 && var5 < this.cargoItems.length) {
-					this.cargoItems[var5] = new ItemStack(var4);
+			for(int i3 = 0; i3 < nBTTagList2.tagCount(); ++i3) {
+				NBTTagCompound nBTTagCompound4 = (NBTTagCompound)nBTTagList2.tagAt(i3);
+				int i5 = nBTTagCompound4.getByte("Slot") & 255;
+				if(i5 >= 0 && i5 < this.cargoItems.length) {
+					this.cargoItems[i5] = new ItemStack(nBTTagCompound4);
 				}
 			}
 		}
@@ -535,98 +534,98 @@
 		return 0.0F;
 	}
 
-	public void applyEntityCollision(Entity var1) {
-		if(var1 != this.riddenByEntity) {
-			if(var1 instanceof EntityLiving && !(var1 instanceof EntityPlayer) && this.minecartType == 0 && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.01D && this.riddenByEntity == null && var1.ridingEntity == null) {
-				var1.mountEntity(this);
+	public void applyEntityCollision(Entity entity) {
+		if(entity != this.riddenByEntity) {
+			if(entity instanceof EntityLiving && !(entity instanceof EntityPlayer) && this.minecartType == 0 && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.01D && this.riddenByEntity == null && entity.ridingEntity == null) {
+				entity.mountEntity(this);
 			}
 
-			double var2 = var1.posX - this.posX;
-			double var4 = var1.posZ - this.posZ;
-			double var6 = var2 * var2 + var4 * var4;
-			if(var6 >= (double)1.0E-4F) {
-				var6 = (double)MathHelper.sqrt_double(var6);
-				var2 /= var6;
-				var4 /= var6;
-				double var8 = 1.0D / var6;
-				if(var8 > 1.0D) {
-					var8 = 1.0D;
+			double d2 = entity.posX - this.posX;
+			double d4 = entity.posZ - this.posZ;
+			double d6 = d2 * d2 + d4 * d4;
+			if(d6 >= 9.999999747378752E-5D) {
+				d6 = (double)MathHelper.sqrt_double(d6);
+				d2 /= d6;
+				d4 /= d6;
+				double d8 = 1.0D / d6;
+				if(d8 > 1.0D) {
+					d8 = 1.0D;
 				}
 
-				var2 *= var8;
-				var4 *= var8;
-				var2 *= (double)0.1F;
-				var4 *= (double)0.1F;
-				var2 *= (double)(1.0F - this.entityCollisionReduction);
-				var4 *= (double)(1.0F - this.entityCollisionReduction);
-				var2 *= 0.5D;
-				var4 *= 0.5D;
-				if(var1 instanceof EntityMinecart) {
-					double var10 = var1.motionX + this.motionX;
-					double var12 = var1.motionZ + this.motionZ;
-					if(((EntityMinecart)var1).minecartType == 2 && this.minecartType != 2) {
+				d2 *= d8;
+				d4 *= d8;
+				d2 *= (double)0.1F;
+				d4 *= (double)0.1F;
+				d2 *= (double)(1.0F - this.entityCollisionReduction);
+				d4 *= (double)(1.0F - this.entityCollisionReduction);
+				d2 *= 0.5D;
+				d4 *= 0.5D;
+				if(entity instanceof EntityMinecart) {
+					double d10 = entity.motionX + this.motionX;
+					double d12 = entity.motionZ + this.motionZ;
+					if(((EntityMinecart)entity).minecartType == 2 && this.minecartType != 2) {
 						this.motionX *= (double)0.2F;
 						this.motionZ *= (double)0.2F;
-						this.addVelocity(var1.motionX - var2, 0.0D, var1.motionZ - var4);
-						var1.motionX *= (double)0.7F;
-						var1.motionZ *= (double)0.7F;
-					} else if(((EntityMinecart)var1).minecartType != 2 && this.minecartType == 2) {
-						var1.motionX *= (double)0.2F;
-						var1.motionZ *= (double)0.2F;
-						var1.addVelocity(this.motionX + var2, 0.0D, this.motionZ + var4);
+						this.addVelocity(entity.motionX - d2, 0.0D, entity.motionZ - d4);
+						entity.motionX *= (double)0.7F;
+						entity.motionZ *= (double)0.7F;
+					} else if(((EntityMinecart)entity).minecartType != 2 && this.minecartType == 2) {
+						entity.motionX *= (double)0.2F;
+						entity.motionZ *= (double)0.2F;
+						entity.addVelocity(this.motionX + d2, 0.0D, this.motionZ + d4);
 						this.motionX *= (double)0.7F;
 						this.motionZ *= (double)0.7F;
 					} else {
-						var10 /= 2.0D;
-						var12 /= 2.0D;
+						d10 /= 2.0D;
+						d12 /= 2.0D;
 						this.motionX *= (double)0.2F;
 						this.motionZ *= (double)0.2F;
-						this.addVelocity(var10 - var2, 0.0D, var12 - var4);
-						var1.motionX *= (double)0.2F;
-						var1.motionZ *= (double)0.2F;
-						var1.addVelocity(var10 + var2, 0.0D, var12 + var4);
+						this.addVelocity(d10 - d2, 0.0D, d12 - d4);
+						entity.motionX *= (double)0.2F;
+						entity.motionZ *= (double)0.2F;
+						entity.addVelocity(d10 + d2, 0.0D, d12 + d4);
 					}
 				} else {
-					this.addVelocity(-var2, 0.0D, -var4);
-					var1.addVelocity(var2 / 4.0D, 0.0D, var4 / 4.0D);
+					this.addVelocity(-d2, 0.0D, -d4);
+					entity.addVelocity(d2 / 4.0D, 0.0D, d4 / 4.0D);
 				}
 			}
-
 		}
+
 	}
 
 	public int getSizeInventory() {
 		return 27;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.cargoItems[var1];
+	public ItemStack getStackInSlot(int slot) {
+		return this.cargoItems[slot];
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
-		if(this.cargoItems[var1] != null) {
-			ItemStack var3;
-			if(this.cargoItems[var1].stackSize <= var2) {
-				var3 = this.cargoItems[var1];
-				this.cargoItems[var1] = null;
-				return var3;
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(this.cargoItems[slot] != null) {
+			ItemStack itemStack3;
+			if(this.cargoItems[slot].stackSize <= stackSize) {
+				itemStack3 = this.cargoItems[slot];
+				this.cargoItems[slot] = null;
+				return itemStack3;
 			} else {
-				var3 = this.cargoItems[var1].splitStack(var2);
-				if(this.cargoItems[var1].stackSize == 0) {
-					this.cargoItems[var1] = null;
+				itemStack3 = this.cargoItems[slot].splitStack(stackSize);
+				if(this.cargoItems[slot].stackSize == 0) {
+					this.cargoItems[slot] = null;
 				}
 
-				return var3;
+				return itemStack3;
 			}
 		} else {
 			return null;
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.cargoItems[var1] = var2;
-		if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-			var2.stackSize = this.getInventoryStackLimit();
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.cargoItems[slot] = itemStack;
+		if(itemStack != null && itemStack.stackSize > this.getInventoryStackLimit()) {
+			itemStack.stackSize = this.getInventoryStackLimit();
 		}
 
 	}
@@ -642,34 +641,34 @@
 	public void onInventoryChanged() {
 	}
 
-	public boolean interact(EntityPlayer var1) {
+	public boolean interact(EntityPlayer entityPlayer) {
 		if(this.minecartType == 0) {
-			var1.mountEntity(this);
+			entityPlayer.mountEntity(this);
 		} else if(this.minecartType == 1) {
-			var1.displayGUIChest(this);
+			entityPlayer.displayGUIChest(this);
 		} else if(this.minecartType == 2) {
-			ItemStack var2 = var1.inventory.getCurrentItem();
-			if(var2 != null && var2.itemID == Item.coal.shiftedIndex) {
-				if(--var2.stackSize == 0) {
-					var1.inventory.setInventorySlotContents(var1.inventory.currentItem, (ItemStack)null);
+			ItemStack itemStack2 = entityPlayer.inventory.getCurrentItem();
+			if(itemStack2 != null && itemStack2.itemID == Item.coal.shiftedIndex) {
+				if(--itemStack2.stackSize == 0) {
+					entityPlayer.inventory.setInventorySlotContents(entityPlayer.inventory.currentItem, (ItemStack)null);
 				}
 
 				this.fuel += 1200;
 			}
 
-			this.pushX = this.posX - var1.posX;
-			this.pushZ = this.posZ - var1.posZ;
+			this.pushX = this.posX - entityPlayer.posX;
+			this.pushZ = this.posZ - entityPlayer.posZ;
 		}
 
 		return true;
 	}
 
-	public void setPositionAndRotation(double var1, double var3, double var5, float var7, float var8, int var9) {
-		this.minecartX = var1;
-		this.minecartY = var3;
-		this.minecartZ = var5;
-		this.minecartYaw = (double)var7;
-		this.minecartPitch = (double)var8;
-		this.turnProgress = var9;
+	public void setPositionAndRotation(double x, double y, double z, float rotationYaw, float rotationPitch, int newPosRotationIncrements) {
+		this.minecartX = x;
+		this.minecartY = y;
+		this.minecartZ = z;
+		this.minecartYaw = (double)rotationYaw;
+		this.minecartPitch = (double)rotationPitch;
+		this.turnProgress = newPosRotationIncrements;
 	}
 }
--- net/minecraft/src/EntitySlimeFX.java
+++ net/minecraft/src/EntitySlimeFX.java
@@ -1,9 +1,9 @@
 package net.minecraft.src;
 
 public class EntitySlimeFX extends EntityFX {
-	public EntitySlimeFX(World var1, double var2, double var4, double var6, Item var8) {
-		super(var1, var2, var4, var6, 0.0D, 0.0D, 0.0D);
-		this.particleTextureIndex = var8.getIconIndex((ItemStack)null);
+	public EntitySlimeFX(World vg, double double2, double double3, double double4, Item no) {
+		super(vg, double2, double3, double4, 0.0D, 0.0D, 0.0D);
+		this.particleTextureIndex = no.getIconIndex((ItemStack)null);
 		this.particleRed = this.particleGreen = this.particleBlue = 1.0F;
 		this.particleGravity = Block.blockSnow.blockParticleGravity;
 		this.particleScale /= 2.0F;
@@ -13,20 +13,20 @@
 		return 2;
 	}
 
-	public void renderParticle(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		float var8 = ((float)(this.particleTextureIndex % 16) + this.particleTextureJitterX / 4.0F) / 16.0F;
-		float var9 = var8 + 0.999F / 64.0F;
-		float var10 = ((float)(this.particleTextureIndex / 16) + this.particleTextureJitterY / 4.0F) / 16.0F;
-		float var11 = var10 + 0.999F / 64.0F;
-		float var12 = 0.1F * this.particleScale;
-		float var13 = (float)(this.prevPosX + (this.posX - this.prevPosX) * (double)var2 - interpPosX);
-		float var14 = (float)(this.prevPosY + (this.posY - this.prevPosY) * (double)var2 - interpPosY);
-		float var15 = (float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)var2 - interpPosZ);
-		float var16 = this.getBrightness(var2);
-		var1.setColorOpaque_F(var16 * this.particleRed, var16 * this.particleGreen, var16 * this.particleBlue);
-		var1.addVertexWithUV((double)(var13 - var3 * var12 - var6 * var12), (double)(var14 - var4 * var12), (double)(var15 - var5 * var12 - var7 * var12), (double)var8, (double)var11);
-		var1.addVertexWithUV((double)(var13 - var3 * var12 + var6 * var12), (double)(var14 + var4 * var12), (double)(var15 - var5 * var12 + var7 * var12), (double)var8, (double)var10);
-		var1.addVertexWithUV((double)(var13 + var3 * var12 + var6 * var12), (double)(var14 + var4 * var12), (double)(var15 + var5 * var12 + var7 * var12), (double)var9, (double)var10);
-		var1.addVertexWithUV((double)(var13 + var3 * var12 - var6 * var12), (double)(var14 - var4 * var12), (double)(var15 + var5 * var12 - var7 * var12), (double)var9, (double)var11);
+	public void renderParticle(Tessellator tessellator, float renderPartialTick, float xOffset, float yOffset, float zOffset, float xOffset2, float zOffset2) {
+		float f8 = ((float)(this.particleTextureIndex % 16) + this.particleTextureJitterX / 4.0F) / 16.0F;
+		float f9 = f8 + 0.015609375F;
+		float f10 = ((float)(this.particleTextureIndex / 16) + this.particleTextureJitterY / 4.0F) / 16.0F;
+		float f11 = f10 + 0.015609375F;
+		float f12 = 0.1F * this.particleScale;
+		float f13 = (float)(this.prevPosX + (this.posX - this.prevPosX) * (double)renderPartialTick - interpPosX);
+		float f14 = (float)(this.prevPosY + (this.posY - this.prevPosY) * (double)renderPartialTick - interpPosY);
+		float f15 = (float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)renderPartialTick - interpPosZ);
+		float f16 = this.getBrightness(renderPartialTick);
+		tessellator.setColorOpaque_F(f16 * this.particleRed, f16 * this.particleGreen, f16 * this.particleBlue);
+		tessellator.addVertexWithUV((double)(f13 - xOffset * f12 - xOffset2 * f12), (double)(f14 - yOffset * f12), (double)(f15 - zOffset * f12 - zOffset2 * f12), (double)f8, (double)f11);
+		tessellator.addVertexWithUV((double)(f13 - xOffset * f12 + xOffset2 * f12), (double)(f14 + yOffset * f12), (double)(f15 - zOffset * f12 + zOffset2 * f12), (double)f8, (double)f10);
+		tessellator.addVertexWithUV((double)(f13 + xOffset * f12 + xOffset2 * f12), (double)(f14 + yOffset * f12), (double)(f15 + zOffset * f12 + zOffset2 * f12), (double)f9, (double)f10);
+		tessellator.addVertexWithUV((double)(f13 + xOffset * f12 - xOffset2 * f12), (double)(f14 - yOffset * f12), (double)(f15 + zOffset * f12 - zOffset2 * f12), (double)f9, (double)f11);
 	}
 }
--- net/minecraft/src/EntityPainting.java
+++ net/minecraft/src/EntityPainting.java
@@ -10,99 +10,107 @@
 	private int yPosition;
 	private int zPosition;
 	public EnumArt art;
+	public int dir;
 
-	public EntityPainting(World var1) {
-		super(var1);
+	public EntityPainting(World world) {
+		super(world);
 		this.tickCounter = 0;
 		this.direction = 0;
 		this.yOffset = 0.0F;
 		this.setSize(0.5F, 0.5F);
 	}
 
-	public EntityPainting(World var1, int var2, int var3, int var4, int var5) {
-		this(var1);
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.zPosition = var4;
-		ArrayList var6 = new ArrayList();
-		EnumArt[] var7 = EnumArt.values();
-		int var8 = var7.length;
+	public EntityPainting(World world, int xPosition, int yPosition, int zPosition, int direction) {
+		this(world);
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.zPosition = zPosition;
+		this.dir = direction;
+		ArrayList arrayList6 = new ArrayList();
+		EnumArt[] enumArt7 = EnumArt.func_11496_9D6dOuxURsoKgZJGzy4t6u99UDf0ap9v2NhRK3xa7zoR3mTWD0560ktX85Mr();
+		int i8 = enumArt7.length;
 
-		for(int var9 = 0; var9 < var8; ++var9) {
-			EnumArt var10 = var7[var9];
-			this.art = var10;
-			this.setDirection(var5);
+		for(int i9 = 0; i9 < i8; ++i9) {
+			EnumArt enumArt10 = enumArt7[i9];
+			this.art = enumArt10;
+			this.setDirection(direction);
 			if(this.onValidSurface()) {
-				var6.add(var10);
+				arrayList6.add(enumArt10);
 			}
 		}
 
-		if(var6.size() > 0) {
-			this.art = (EnumArt)var6.get(this.rand.nextInt(var6.size()));
+		if(arrayList6.size() > 0) {
+			this.art = (EnumArt)arrayList6.get(this.rand.nextInt(arrayList6.size()));
+			InputHandler.mc.displayGuiScreen(new GuiPickPainting(arrayList6, this));
 		}
 
-		this.setDirection(var5);
-	}
-
-	public void setDirection(int var1) {
-		this.direction = var1;
-		this.prevRotationYaw = this.rotationYaw = (float)(var1 * 90);
-		float var2 = (float)this.art.sizeX;
-		float var3 = (float)this.art.sizeY;
-		float var4 = (float)this.art.sizeX;
-		if(var1 != 0 && var1 != 2) {
-			var2 = 0.5F;
+		this.setDirection(direction);
+	}
+
+	public void setArt(EnumArt _9F5jS5Tj97C0yji0Aj98eV7x1082d9K1sblhAUDiBPEpQRZIxib6OMdZzn04398993QCDwute5fE2H4LxptKq2f2tl7Xy2KN0) {
+		this.art = _9F5jS5Tj97C0yji0Aj98eV7x1082d9K1sblhAUDiBPEpQRZIxib6OMdZzn04398993QCDwute5fE2H4LxptKq2f2tl7Xy2KN0;
+		this.setDirection(this.dir);
+	}
+
+	public void setDirection(int direction) {
+		this.direction = direction;
+		this.prevRotationYaw = this.rotationYaw = (float)(direction * 90);
+		float f2 = (float)this.art.sizeX;
+		float f3 = (float)this.art.sizeY;
+		float f4 = (float)this.art.sizeX;
+		if(direction != 0 && direction != 2) {
+			f2 = 0.5F;
 		} else {
-			var4 = 0.5F;
-		}
-
-		var2 /= 32.0F;
-		var3 /= 32.0F;
-		var4 /= 32.0F;
-		float var5 = (float)this.xPosition + 0.5F;
-		float var6 = (float)this.yPosition + 0.5F;
-		float var7 = (float)this.zPosition + 0.5F;
-		float var8 = 9.0F / 16.0F;
-		if(var1 == 0) {
-			var7 -= var8;
-		}
-
-		if(var1 == 1) {
-			var5 -= var8;
-		}
-
-		if(var1 == 2) {
-			var7 += var8;
-		}
-
-		if(var1 == 3) {
-			var5 += var8;
-		}
-
-		if(var1 == 0) {
-			var5 -= this.getArtSize(this.art.sizeX);
-		}
-
-		if(var1 == 1) {
-			var7 += this.getArtSize(this.art.sizeX);
-		}
-
-		if(var1 == 2) {
-			var5 += this.getArtSize(this.art.sizeX);
-		}
-
-		if(var1 == 3) {
-			var7 -= this.getArtSize(this.art.sizeX);
-		}
-
-		var6 += this.getArtSize(this.art.sizeY);
-		this.setPosition((double)var5, (double)var6, (double)var7);
-		float var9 = -(0.1F / 16.0F);
-		this.boundingBox.setBounds((double)(var5 - var2 - var9), (double)(var6 - var3 - var9), (double)(var7 - var4 - var9), (double)(var5 + var2 + var9), (double)(var6 + var3 + var9), (double)(var7 + var4 + var9));
+			f4 = 0.5F;
+		}
+
+		f2 /= 32.0F;
+		f3 /= 32.0F;
+		f4 /= 32.0F;
+		float f5 = (float)this.xPosition + 0.5F;
+		float f6 = (float)this.yPosition + 0.5F;
+		float f7 = (float)this.zPosition + 0.5F;
+		float f8 = 0.5625F;
+		if(direction == 0) {
+			f7 -= f8;
+		}
+
+		if(direction == 1) {
+			f5 -= f8;
+		}
+
+		if(direction == 2) {
+			f7 += f8;
+		}
+
+		if(direction == 3) {
+			f5 += f8;
+		}
+
+		if(direction == 0) {
+			f5 -= this.getArtSize(this.art.sizeX);
+		}
+
+		if(direction == 1) {
+			f7 += this.getArtSize(this.art.sizeX);
+		}
+
+		if(direction == 2) {
+			f5 += this.getArtSize(this.art.sizeX);
+		}
+
+		if(direction == 3) {
+			f7 -= this.getArtSize(this.art.sizeX);
+		}
+
+		f6 += this.getArtSize(this.art.sizeY);
+		this.setPosition((double)f5, (double)f6, (double)f7);
+		float f9 = -0.00625F;
+		this.boundingBox.setBounds((double)(f5 - f2 - f9), (double)(f6 - f3 - f9), (double)(f7 - f4 - f9), (double)(f5 + f2 + f9), (double)(f6 + f3 + f9), (double)(f7 + f4 + f9));
 	}
 
-	private float getArtSize(int var1) {
-		return var1 == 32 ? 0.5F : (var1 == 64 ? 0.5F : 0.0F);
+	private float getArtSize(int pixelSize) {
+		return pixelSize == 32 ? 0.5F : (pixelSize == 64 ? 0.5F : 0.0F);
 	}
 
 	public void onUpdate() {
@@ -118,49 +126,49 @@
 		if(this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox).size() > 0) {
 			return false;
 		} else {
-			int var1 = this.art.sizeX / 16;
-			int var2 = this.art.sizeY / 16;
-			int var3 = this.xPosition;
-			int var4 = this.yPosition;
-			int var5 = this.zPosition;
+			int i1 = this.art.sizeX / 16;
+			int i2 = this.art.sizeY / 16;
+			int i3 = this.xPosition;
+			int i4 = this.yPosition;
+			int i5 = this.zPosition;
 			if(this.direction == 0) {
-				var3 = MathHelper.floor_double(this.posX - (double)((float)this.art.sizeX / 32.0F));
+				i3 = MathHelper.floor_double(this.posX - (double)((float)this.art.sizeX / 32.0F));
 			}
 
 			if(this.direction == 1) {
-				var5 = MathHelper.floor_double(this.posZ - (double)((float)this.art.sizeX / 32.0F));
+				i5 = MathHelper.floor_double(this.posZ - (double)((float)this.art.sizeX / 32.0F));
 			}
 
 			if(this.direction == 2) {
-				var3 = MathHelper.floor_double(this.posX - (double)((float)this.art.sizeX / 32.0F));
+				i3 = MathHelper.floor_double(this.posX - (double)((float)this.art.sizeX / 32.0F));
 			}
 
 			if(this.direction == 3) {
-				var5 = MathHelper.floor_double(this.posZ - (double)((float)this.art.sizeX / 32.0F));
+				i5 = MathHelper.floor_double(this.posZ - (double)((float)this.art.sizeX / 32.0F));
 			}
 
-			var4 = MathHelper.floor_double(this.posY - (double)((float)this.art.sizeY / 32.0F));
+			i4 = MathHelper.floor_double(this.posY - (double)((float)this.art.sizeY / 32.0F));
 
-			int var7;
-			for(int var6 = 0; var6 < var1; ++var6) {
-				for(var7 = 0; var7 < var2; ++var7) {
-					Material var8;
+			int i6;
+			for(int i7 = 0; i7 < i1; ++i7) {
+				for(i6 = 0; i6 < i2; ++i6) {
+					Material material8;
 					if(this.direction != 0 && this.direction != 2) {
-						var8 = this.worldObj.getBlockMaterial(this.xPosition, var4 + var7, var5 + var6);
+						material8 = this.worldObj.getBlockMaterial(this.xPosition, i4 + i6, i5 + i7);
 					} else {
-						var8 = this.worldObj.getBlockMaterial(var3 + var6, var4 + var7, this.zPosition);
+						material8 = this.worldObj.getBlockMaterial(i3 + i7, i4 + i6, this.zPosition);
 					}
 
-					if(!var8.isSolid()) {
+					if(!material8.isSolid()) {
 						return false;
 					}
 				}
 			}
 
-			List var9 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox);
+			List list9 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox);
 
-			for(var7 = 0; var7 < var9.size(); ++var7) {
-				if(var9.get(var7) instanceof EntityPainting) {
+			for(i6 = 0; i6 < list9.size(); ++i6) {
+				if(list9.get(i6) instanceof EntityPainting) {
 					return false;
 				}
 			}
@@ -173,38 +181,38 @@
 		return true;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		this.setEntityDead();
 		this.worldObj.spawnEntityInWorld(new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, new ItemStack(Item.painting)));
 		return true;
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setByte("Dir", (byte)this.direction);
-		var1.setString("Motive", this.art.title);
-		var1.setInteger("TileX", this.xPosition);
-		var1.setInteger("TileY", this.yPosition);
-		var1.setInteger("TileZ", this.zPosition);
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setByte("Dir", (byte)this.direction);
+		nbttagcompound.setString("Motive", this.art.title);
+		nbttagcompound.setInteger("TileX", this.xPosition);
+		nbttagcompound.setInteger("TileY", this.yPosition);
+		nbttagcompound.setInteger("TileZ", this.zPosition);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.direction = var1.getByte("Dir");
-		this.xPosition = var1.getInteger("TileX");
-		this.yPosition = var1.getInteger("TileY");
-		this.zPosition = var1.getInteger("TileZ");
-		String var2 = var1.getString("Motive");
-		EnumArt[] var3 = EnumArt.values();
-		int var4 = var3.length;
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.direction = nbttagcompound.getByte("Dir");
+		this.xPosition = nbttagcompound.getInteger("TileX");
+		this.yPosition = nbttagcompound.getInteger("TileY");
+		this.zPosition = nbttagcompound.getInteger("TileZ");
+		String string2 = nbttagcompound.getString("Motive");
+		EnumArt[] enumArt3 = EnumArt.func_11496_9D6dOuxURsoKgZJGzy4t6u99UDf0ap9v2NhRK3xa7zoR3mTWD0560ktX85Mr();
+		int i4 = enumArt3.length;
 
-		for(int var5 = 0; var5 < var4; ++var5) {
-			EnumArt var6 = var3[var5];
-			if(var6.title.equals(var2)) {
-				this.art = var6;
+		for(int i5 = 0; i5 < i4; ++i5) {
+			EnumArt enumArt6 = enumArt3[i5];
+			if(enumArt6.title.equals(string2)) {
+				this.art = enumArt6;
 			}
 		}
 
 		if(this.art == null) {
-			this.art = EnumArt.Kebab;
+			this.art = EnumArt.Phoenix;
 		}
 
 		this.setDirection(this.direction);
--- /dev/null
+++ net/minecraft/src/pongokilldeathshitmachine.java
@@ -1,0 +1,48 @@
+package net.minecraft.src;
+
+public class pongokilldeathshitmachine extends EntityModel {
+	public static final ModelLayerLocation LAYER_LOCATION = new ModelLayerLocation(new ResourceLocation("modid", "custom_model"), "main");
+	private final ModelPart Head;
+	private final ModelPart Body;
+	private final ModelPart RightArm;
+	private final ModelPart LeftArm;
+	private final ModelPart RightLeg;
+	private final ModelPart LeftLeg;
+
+	public pongokilldeathshitmachine(ModelPart xs) {
+		this.Head = xs.getChild("Head");
+		this.Body = xs.getChild("Body");
+		this.RightArm = xs.getChild("RightArm");
+		this.LeftArm = xs.getChild("LeftArm");
+		this.RightLeg = xs.getChild("RightLeg");
+		this.LeftLeg = xs.getChild("LeftLeg");
+	}
+
+	public static LayerDefinition createBodyLayer() {
+		MeshDefinition meshDefinition0 = new MeshDefinition();
+		PartDefinition partDefinition1 = meshDefinition0.getRoot();
+		partDefinition1.addOrReplaceChild("Head", CubeListBuilder.create().texOffs(0, 0).addBox(-4.0F, -6.0F, -4.0F, 8.0F, 6.0F, 8.0F, new CubeDeformation(0.0F)).texOffs(0, 30).addBox(-3.0F, -15.0F, -3.0F, 6.0F, 9.0F, 6.0F, new CubeDeformation(0.0F)).texOffs(24, 30).addBox(-2.0F, -28.0F, -2.0F, 4.0F, 13.0F, 4.0F, new CubeDeformation(0.0F)).texOffs(24, 0).addBox(-6.0F, -33.0F, -1.0F, 12.0F, 5.0F, 2.0F, new CubeDeformation(0.0F)).texOffs(32, 7).addBox(-8.0F, -26.0F, -1.0F, 6.0F, 5.0F, 2.0F, new CubeDeformation(0.0F)).texOffs(32, 7).mirror().addBox(2.0F, -26.0F, -1.0F, 6.0F, 5.0F, 2.0F, new CubeDeformation(0.0F)).mirror(false), PartPose.offset(0.0F, 0.0F, -1.0F));
+		partDefinition1.addOrReplaceChild("Body", CubeListBuilder.create().texOffs(24, 14).addBox(-4.0F, 0.0F, -2.0F, 8.0F, 12.0F, 4.0F, new CubeDeformation(0.0F)).texOffs(0, 14).addBox(-4.0F, 0.0F, -2.0F, 8.0F, 12.0F, 4.0F, new CubeDeformation(0.25F)), PartPose.offset(0.0F, 0.0F, 0.0F));
+		partDefinition1.addOrReplaceChild("RightArm", CubeListBuilder.create().texOffs(52, 42).addBox(-3.0F, -2.0F, -1.0F, 4.0F, 12.0F, 4.0F, new CubeDeformation(0.0F)).texOffs(48, 3).addBox(-3.0F, -2.0F, -1.0F, 4.0F, 12.0F, 4.0F, new CubeDeformation(0.25F)), PartPose.offset(-5.0F, 2.0F, 0.0F));
+		partDefinition1.addOrReplaceChild("LeftArm", CubeListBuilder.create().texOffs(16, 47).addBox(-1.0F, -2.0F, -1.0F, 4.0F, 12.0F, 4.0F, new CubeDeformation(0.0F)).texOffs(36, 46).addBox(-1.0F, -2.0F, -1.0F, 4.0F, 12.0F, 4.0F, new CubeDeformation(0.25F)), PartPose.offset(5.0F, 2.0F, 0.0F));
+		partDefinition1.addOrReplaceChild("RightLeg", CubeListBuilder.create().texOffs(0, 45).addBox(-2.0F, 0.0F, -2.0F, 4.0F, 12.0F, 4.0F, new CubeDeformation(0.0F)), PartPose.offset(-1.9F, 12.0F, 0.0F));
+		partDefinition1.addOrReplaceChild("LeftLeg", CubeListBuilder.create().texOffs(40, 30).addBox(-2.0F, 0.0F, -2.0F, 4.0F, 12.0F, 4.0F, new CubeDeformation(0.0F)), PartPose.offset(1.9F, 12.0F, 0.0F));
+		return LayerDefinition.create(meshDefinition0, 128, 128);
+	}
+
+	public void setupAnim(Entity xy, float float2, float float3, float float4, float float5, float float6) {
+	}
+
+	public void renderToBuffer(PoseStack f, VertexConsumer ie, int integer3, int integer4, float float5, float float6, float float7, float float8) {
+		this.Head.render(f, ie, integer3, integer4, float5, float6, float7, float8);
+		this.Body.render(f, ie, integer3, integer4, float5, float6, float7, float8);
+		this.RightArm.render(f, ie, integer3, integer4, float5, float6, float7, float8);
+		this.LeftArm.render(f, ie, integer3, integer4, float5, float6, float7, float8);
+		this.RightLeg.render(f, ie, integer3, integer4, float5, float6, float7, float8);
+		this.LeftLeg.render(f, ie, integer3, integer4, float5, float6, float7, float8);
+	}
+
+	public void setupAnim(Object object, float float2, float float3, float float4, float float5, float float6) {
+		this.setupAnim((Entity)object, float2, float3, float4, float5, float6);
+	}
+}
--- /dev/null
+++ net/minecraft/src/AdaptiveHandler.java
@@ -1,0 +1,155 @@
+package net.minecraft.src;
+
+public class AdaptiveHandler extends Thread {
+	public DS5Connection ds5 = new DS5Connection();
+	public boolean DS5enabled = false;
+	public DS5Packet ds5_conf_default = new DS5Packet();
+	public DS5Packet ds5_conf_ingame_aimblock = new DS5Packet();
+	public DS5Packet ds5_conf_ingame_aimentity = new DS5Packet();
+	public DS5Packet ds5_conf_ingame_aimnone = new DS5Packet();
+	public long lastPacketSent = 0L;
+	public int lastPacketType = -1;
+
+	public void ConstructDefaultPacket() {
+		this.ds5_conf_default.AddInstruction(new DS5InstrRGBUpdate(0, 0, 0, 255));
+		this.ds5_conf_default.AddInstruction(new DS5InstrPlayerUpdate(0, false, false, true, false, false));
+		this.ds5_conf_default.AddInstruction(new DS5InstrTriggerUpdate(0, TriggerIndex.Left, TriggerMode.Normal, new int[]{0}));
+		this.ds5_conf_default.AddInstruction(new DS5InstrTriggerUpdate(0, TriggerIndex.Right, TriggerMode.Normal, new int[]{0}));
+		this.ds5_conf_ingame_aimblock.AddInstruction(new DS5InstrRGBUpdate(0, 0, 0, 0));
+		this.ds5_conf_ingame_aimblock.AddInstruction(new DS5InstrPlayerUpdate(0, false, false, true, false, false));
+		this.ds5_conf_ingame_aimblock.AddInstruction(new DS5InstrTriggerUpdate(0, TriggerIndex.Left, TriggerMode.VibrateTrigger, new int[]{3}));
+		this.ds5_conf_ingame_aimblock.AddInstruction(new DS5InstrTriggerUpdate(0, TriggerIndex.Right, TriggerMode.AutomaticGun, new int[]{4, 8, 5}));
+		this.ds5_conf_ingame_aimentity.AddInstruction(new DS5InstrRGBUpdate(0, 0, 0, 0));
+		this.ds5_conf_ingame_aimentity.AddInstruction(new DS5InstrPlayerUpdate(0, false, false, true, false, false));
+		this.ds5_conf_ingame_aimentity.AddInstruction(new DS5InstrTriggerUpdate(0, TriggerIndex.Left, TriggerMode.Normal, new int[]{0}));
+		this.ds5_conf_ingame_aimentity.AddInstruction(new DS5InstrTriggerUpdate(0, TriggerIndex.Right, TriggerMode.Bow, new int[]{3, 6, 1, 1}));
+		this.ds5_conf_ingame_aimnone.AddInstruction(new DS5InstrRGBUpdate(0, 0, 0, 0));
+		this.ds5_conf_ingame_aimnone.AddInstruction(new DS5InstrPlayerUpdate(0, false, false, true, false, false));
+		this.ds5_conf_ingame_aimnone.AddInstruction(new DS5InstrTriggerUpdate(0, TriggerIndex.Left, TriggerMode.Normal, new int[]{0}));
+		this.ds5_conf_ingame_aimnone.AddInstruction(new DS5InstrTriggerUpdate(0, TriggerIndex.Right, TriggerMode.Normal, new int[]{0}));
+	}
+
+	public void UpdatePLEDBasedOnDiff(DS5Packet dS5Packet) {
+		DS5InstrPlayerUpdate dS5InstrPlayerUpdate7 = (DS5InstrPlayerUpdate)dS5Packet.ds5Instructions.get(1);
+		boolean z2;
+		boolean z3;
+		boolean z4;
+		boolean z5;
+		boolean z6;
+		switch(InputHandler.mc.options.difficulty) {
+		case 0:
+			z6 = false;
+			z5 = false;
+			z4 = false;
+			z3 = false;
+			z2 = true;
+			break;
+		case 1:
+			z6 = false;
+			z2 = false;
+			z3 = false;
+			z5 = true;
+			z4 = true;
+			break;
+		case 2:
+			z5 = false;
+			z4 = false;
+			z6 = true;
+			z2 = true;
+			z3 = true;
+			break;
+		case 3:
+			z2 = false;
+			z6 = true;
+			z5 = true;
+			z4 = true;
+			z3 = true;
+			break;
+		case 4:
+			z6 = true;
+			z5 = true;
+			z2 = true;
+			z4 = true;
+			z3 = true;
+			break;
+		default:
+			z6 = false;
+			z5 = false;
+			z2 = false;
+			z4 = false;
+			z3 = false;
+		}
+
+		dS5InstrPlayerUpdate7.p1 = z3;
+		dS5InstrPlayerUpdate7.p2 = z4;
+		dS5InstrPlayerUpdate7.p3 = z2;
+		dS5InstrPlayerUpdate7.p4 = z5;
+		dS5InstrPlayerUpdate7.p5 = z6;
+	}
+
+	public void UpdateIngamePacket(DS5Packet xz) {
+		DS5InstrRGBUpdate dS5InstrRGBUpdate2 = (DS5InstrRGBUpdate)xz.ds5Instructions.get(0);
+		this.UpdatePLEDBasedOnDiff(xz);
+		if(InputHandler.mc.options.difficulty == 4 && (float)InputHandler.mc.thePlayer.health != 0.0F) {
+			float f5 = (float)(System.currentTimeMillis() % 2000L) / 1000.0F;
+			float f4 = 0.5F + (f5 <= 1.0F ? 0.5F * f5 : (1.0F - (f5 - 1.0F)) * 0.5F);
+			dS5InstrRGBUpdate2.r = dS5InstrRGBUpdate2.g = dS5InstrRGBUpdate2.b = (int)(255.0F * f4);
+		} else if((float)InputHandler.mc.thePlayer.health <= 4.0F && System.currentTimeMillis() % 2000L >= 1000L) {
+			dS5InstrRGBUpdate2.b = 0;
+			dS5InstrRGBUpdate2.g = 0;
+			dS5InstrRGBUpdate2.r = 0;
+		} else {
+			float[] f3 = Ext1605Utils.BlendColorA((float)InputHandler.mc.thePlayer.health / 20.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 0.0F);
+			dS5InstrRGBUpdate2.r = (int)(f3[0] * 255.0F);
+			dS5InstrRGBUpdate2.g = (int)(f3[1] * 255.0F);
+			dS5InstrRGBUpdate2.b = (int)(f3[2] * 255.0F);
+		}
+	}
+
+	public void SendPacket() {
+		if(System.currentTimeMillis() - this.lastPacketSent > 16L) {
+			this.lastPacketSent = System.currentTimeMillis();
+			if((InputHandler.mc == null || InputHandler.mc.thePlayer == null) && this.lastPacketType != 0) {
+				this.ds5.Send(this.ds5_conf_default);
+				this.lastPacketType = 0;
+			} else if(InputHandler.mc.thePlayer != null) {
+				this.lastPacketType = 1;
+				DS5Packet dS5Packet1 = null;
+				if(InputHandler.mc.objectMouseOver != null) {
+					switch(InputHandler.mc.objectMouseOver.typeOfHit) {
+					case 0:
+						dS5Packet1 = this.ds5_conf_ingame_aimblock;
+						break;
+					case 1:
+						dS5Packet1 = this.ds5_conf_ingame_aimentity;
+					}
+				} else {
+					dS5Packet1 = this.ds5_conf_ingame_aimnone;
+				}
+
+				this.UpdateIngamePacket(dS5Packet1);
+				this.ds5.Send(dS5Packet1);
+			}
+		}
+
+	}
+
+	public AdaptiveHandler() {
+		this.ConstructDefaultPacket();
+	}
+
+	public void run() {
+		System.out.println("");
+		if(this.ds5.Connect()) {
+			while(true) {
+				this.SendPacket();
+
+				try {
+					Thread.sleep(64L);
+				} catch (InterruptedException interruptedException2) {
+				}
+			}
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/CommandFrrnSavedemo.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+import java.util.Calendar;
+
+class CommandFrrnSavedemo extends CommandUnknownClass {
+    final /* synthetic */ CommandManager field_8586_46R7XQJL1SRYp5269tkA722IOqsTg1l0BgiQa62tyNUuzoo42x19R12o9BL6;
+    
+    CommandFrrnSavedemo(final CommandManager abb) {
+        this.field_8586_46R7XQJL1SRYp5269tkA722IOqsTg1l0BgiQa62tyNUuzoo42x19R12o9BL6 = abb;
+    }
+    
+    @Override
+    public void func_8545_7ch4Pw6p1x7azbUH9Qwnz92Crvg5JGAcpO0G8ZjP5BCE61ulezRs21K4E3PJ(final Object... arr) {
+        if (InputHandler.mc.thePlayer instanceof EntityPlayerFreerunClient) {
+            final Calendar instance = Calendar.getInstance();
+            ((EntityPlayerFreerunClient)InputHandler.mc.thePlayer).field_9077_6828xUDuW4HE2czdD77Ktkps1BKQr55aauI7IbsAkcX5iy1397o0JfVUA615.func_12199_0T1EBqlwN0r6zrh3Sg0XWHZ8YGwKZ7S93cTMLKw1r2Y6V9Bl9qyCtXn0g300(Minecraft.getMinecraftDir() + "/freeerundemo-" + ((FreerunWorld)InputHandler.mc.theWorld).levelName.replace('\\', '_').replace('/', '_') + "-" + instance.get(5) + "-" + (instance.get(2) + 1) + "-" + instance.get(1) + "@" + instance.get(11) + "-" + instance.get(12) + "-" + instance.get(13) + ".mcdem");
+        }
+    }
+    
+    @Override
+    public String func_8543_4MFIG4D788SK3R9CE2tuPCaZ90L434R160V0H865ocZV41Cg5bgqM2Dx2FDe() {
+        return "~exec";
+    }
+}
--- /dev/null
+++ net/minecraft/src/GenStonePlatform.java
@@ -1,0 +1,54 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class GenStonePlatform extends WorldGenerator {
+	public void buildSphere(World vg, int integer2, int integer3, int integer4, int integer5, int integer6) {
+		byte b7 = 2;
+
+		for(int i8 = -integer5; i8 <= integer5; ++i8) {
+			for(int i9 = -b7; i9 <= b7; ++i9) {
+				for(int i10 = -integer6; i10 <= integer6; ++i10) {
+					if(i8 * i8 + i9 * i9 + i10 * i10 <= integer5 * integer5 && (vg.getBlockId(integer2 + i8, integer3 + i9, integer4 + i10) == Block.waterMoving.blockID || vg.getBlockId(integer2 + i8, integer3 + i9, integer4 + i10) == Block.waterStill.blockID)) {
+						vg.setBlock(integer2 + i8, integer3 + i9, integer4 + i10, ExtBlocks.Limestone.blockID);
+					}
+				}
+			}
+		}
+
+	}
+
+	public static boolean isChunkWaterOnly(World vg, int integer2, int integer3) {
+		for(int i3 = 0; i3 != 16; ++i3) {
+			for(int i4 = 0; i4 != 16; ++i4) {
+				if(vg.getBlockId(integer2 + i3, 63, integer3 + i4) != Block.waterStill.blockID || vg.getBlockId(integer2 + i3, 62, integer3 + i4) != Block.waterStill.blockID) {
+					return false;
+				}
+			}
+		}
+
+		return true;
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		if(y >= 62 && y <= 64) {
+			for(int i6 = 0; i6 < 2; ++i6) {
+				int i7 = z + rand.nextInt(8) - rand.nextInt(8);
+				int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+				int i9 = x + rand.nextInt(8) - rand.nextInt(8);
+				if(world.getBlockId(i9, i8, i7) == Block.waterStill.blockID) {
+					for(int i10 = i8; (world.getBlockId(i7, i10, i9) == Block.waterStill.blockID || world.getBlockId(i7, i10, i9) == Block.waterMoving.blockID) && i10 > 10; --i10) {
+						world.setBlock(i9, i10, i7, ExtBlocks.Limestone.blockID);
+					}
+
+					boolean z11 = rand.nextInt(100) <= 50;
+					this.buildSphere(world, i9, i8, i7, 2 + rand.nextInt(z11 ? 6 : 2), 2 + rand.nextInt(!z11 ? 6 : 2));
+				}
+			}
+
+			return true;
+		} else {
+			return false;
+		}
+	}
+}
--- net/minecraft/src/BlockMushroom.java
+++ net/minecraft/src/BlockMushroom.java
@@ -1,17 +1,17 @@
 package net.minecraft.src;
 
 public class BlockMushroom extends BlockFlower {
-	protected BlockMushroom(int var1, int var2) {
-		super(var1, var2);
-		float var3 = 0.2F;
-		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var3 * 2.0F, 0.5F + var3);
-	}
-
-	protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-		return Block.opaqueCubeLookup[var1];
-	}
-
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-		return var1.getBlockLightValue(var2, var3, var4) <= 13 && this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
+	protected BlockMushroom(int id, int blockIndex) {
+		super(id, blockIndex);
+		float f3 = 0.2F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, f3 * 2.0F, 0.5F + f3);
+	}
+
+	protected boolean canThisPlantGrowOnThisBlockID(int id) {
+		return Block.opaqueCubeLookup[id];
+	}
+
+	public boolean canBlockStay(World world, int x, int y, int z) {
+		return world.getBlockLightValue(x, y, z) <= 13 && this.canThisPlantGrowOnThisBlockID(world.getBlockId(x, y - 1, z));
 	}
 }
--- net/minecraft/src/BlockFarmland.java
+++ net/minecraft/src/BlockFarmland.java
@@ -3,16 +3,16 @@
 import java.util.Random;
 
 public class BlockFarmland extends Block {
-	protected BlockFarmland(int var1) {
-		super(var1, Material.grass);
+	protected BlockFarmland(int id) {
+		super(id, Material.grass);
 		this.blockIndexInTexture = 87;
 		this.setTickOnLoad(true);
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 15.0F / 16.0F, 1.0F);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.9375F, 1.0F);
 		this.setLightOpacity(255);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		return AxisAlignedBB.getBoundingBoxFromPool((double)(var2 + 0), (double)(var3 + 0), (double)(var4 + 0), (double)(var2 + 1), (double)(var3 + 1), (double)(var4 + 1));
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		return AxisAlignedBB.getBoundingBoxFromPool((double)(x + 0), (double)(y + 0), (double)(z + 0), (double)(x + 1), (double)(y + 1), (double)(z + 1));
 	}
 
 	public boolean isOpaqueCube() {
@@ -23,39 +23,39 @@
 		return false;
 	}
 
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var1 == 1 && var2 > 0 ? this.blockIndexInTexture - 1 : (var1 == 1 ? this.blockIndexInTexture : 2);
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		return side == 1 && metadata > 0 ? this.blockIndexInTexture - 1 : (side == 1 ? this.blockIndexInTexture : 2);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var5.nextInt(5) == 0) {
-			if(this.isWaterNearby(var1, var2, var3, var4)) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, 7);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(random.nextInt(5) == 0) {
+			if(this.isWaterNearby(world, x, y, z)) {
+				world.setBlockMetadataWithNotify(x, y, z, 7);
 			} else {
-				int var6 = var1.getBlockMetadata(var2, var3, var4);
-				if(var6 > 0) {
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var6 - 1);
-				} else if(!this.isCropsNearby(var1, var2, var3, var4)) {
-					var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
+				int i6 = world.getBlockMetadata(x, y, z);
+				if(i6 > 0) {
+					world.setBlockMetadataWithNotify(x, y, z, i6 - 1);
+				} else if(!this.isCropsNearby(world, x, y, z)) {
+					world.setBlockWithNotify(x, y, z, Block.dirt.blockID);
 				}
 			}
 		}
 
 	}
 
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-		if(var1.rand.nextInt(4) == 0) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
+	public void onEntityWalking(World world, int x, int y, int z, Entity entity) {
+		if(world.rand.nextInt(4) == 0) {
+			world.setBlockWithNotify(x, y, z, Block.dirt.blockID);
 		}
 
 	}
 
-	private boolean isCropsNearby(World var1, int var2, int var3, int var4) {
-		byte var5 = 0;
+	private boolean isCropsNearby(World world, int x, int y, int z) {
+		byte b5 = 0;
 
-		for(int var6 = var2 - var5; var6 <= var2 + var5; ++var6) {
-			for(int var7 = var4 - var5; var7 <= var4 + var5; ++var7) {
-				if(var1.getBlockId(var6, var3 + 1, var7) == Block.crops.blockID) {
+		for(int i6 = x - b5; i6 <= x + b5; ++i6) {
+			for(int i7 = z - b5; i7 <= z + b5; ++i7) {
+				if(world.getBlockId(i6, y + 1, i7) == Block.crops.blockID) {
 					return true;
 				}
 			}
@@ -64,11 +64,11 @@
 		return false;
 	}
 
-	private boolean isWaterNearby(World var1, int var2, int var3, int var4) {
-		for(int var5 = var2 - 4; var5 <= var2 + 4; ++var5) {
-			for(int var6 = var3; var6 <= var3 + 1; ++var6) {
-				for(int var7 = var4 - 4; var7 <= var4 + 4; ++var7) {
-					if(var1.getBlockMaterial(var5, var6, var7) == Material.water) {
+	private boolean isWaterNearby(World world, int x, int y, int z) {
+		for(int i5 = x - 4; i5 <= x + 4; ++i5) {
+			for(int i6 = y; i6 <= y + 1; ++i6) {
+				for(int i7 = z - 4; i7 <= z + 4; ++i7) {
+					if(world.getBlockMaterial(i5, i6, i7) == Material.water) {
 						return true;
 					}
 				}
@@ -78,16 +78,16 @@
 		return false;
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		Material var6 = var1.getBlockMaterial(var2, var3 + 1, var4);
-		if(var6.isSolid()) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		super.onNeighborBlockChange(world, x, y, z, flag);
+		Material material6 = world.getBlockMaterial(x, y + 1, z);
+		if(material6.isSolid()) {
+			world.setBlockWithNotify(x, y, z, Block.dirt.blockID);
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return Block.dirt.idDropped(0, var2);
+	public int idDropped(int count, Random random) {
+		return Block.dirt.idDropped(0, random);
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockBreakableOld.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public class BlockBreakableOld extends BlockOld {
+	private boolean localFlag;
+
+	protected BlockBreakableOld(int integer1, int integer2, Material sx, boolean boolean4) {
+		super(integer1, integer2, sx);
+		this.localFlag = boolean4;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess abt, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = abt.getBlockId(integer2, integer3, integer4);
+		return !this.localFlag && i6 == this.blockID ? false : super.shouldSideBeRendered(abt, integer2, integer3, integer4, integer5);
+	}
+}
--- net/minecraft/src/GameSettings.java
+++ net/minecraft/src/GameSettings.java
@@ -5,117 +5,186 @@
 import java.io.FileReader;
 import java.io.FileWriter;
 import java.io.PrintWriter;
+
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.input.Keyboard;
+import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.GL11;
 
 public class GameSettings {
-	private static final String[] RENDER_DISTANCES = new String[]{"FAR", "NORMAL", "SHORT", "TINY"};
-	private static final String[] DIFFICULTY_LEVELS = new String[]{"Peaceful", "Easy", "Normal", "Hard"};
+	private static final String[] RENDER_DISTANCES = new String[]{"HORIZON", "FAR", "NORMAL", "SHORT", "TINY", "DUALITY"};
+	private static final String[] DIFFICULTY_LEVELS = new String[]{"Peaceful", "Easy", "Normal", "Hard", "Frail"};
+	private static final String[] field_11776_0601s25AwsXK8YAli4bSnf611cz09m3nihe6Wcjm69saa6xnYY1LDN3wqX7Q = new String[]{"FAST", "FANCY", "MAX PERF."};
 	public float musicVolume = 1.0F;
 	public float soundVolume = 1.0F;
 	public float mouseSensitivity = 0.5F;
 	public boolean invertMouse = false;
-	public int renderDistance = 0;
+	public int renderDistance = 1;
 	public boolean viewBobbing = true;
 	public boolean anaglyph = false;
 	public boolean limitFramerate = false;
-	public boolean fancyGraphics = true;
-	public KeyBinding keyBindForward = new KeyBinding("Forward", 17);
-	public KeyBinding keyBindLeft = new KeyBinding("Left", 30);
-	public KeyBinding keyBindBack = new KeyBinding("Back", 31);
-	public KeyBinding keyBindRight = new KeyBinding("Right", 32);
-	public KeyBinding keyBindJump = new KeyBinding("Jump", 57);
-	public KeyBinding keyBindInventory = new KeyBinding("Inventory", 23);
-	public KeyBinding keyBindDrop = new KeyBinding("Drop", 16);
-	public KeyBinding keyBindChat = new KeyBinding("Chat", 20);
-	public KeyBinding keyBindToggleFog = new KeyBinding("Toggle fog", 33);
-	public KeyBinding keyBindSneak = new KeyBinding("Sneak", 42);
-	public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog};
+	public int fancyGraphics = 1;
+	public boolean pauseOnUnfocus = true;
+	public float fovModifier = 0.5F;
+	public String field_11745_5cq9PhUp8LROyS1A2CPi3fyxFgmWABb66h72hAC97w32G831S582rHP9QCBn = "Default";
+	public KeyBinding keyBindForward = new KeyBinding("Forward", Keyboard.KEY_W);
+	public KeyBinding keyBindLeft = new KeyBinding("Left", Keyboard.KEY_A);
+	public KeyBinding keyBindBack = new KeyBinding("Back", Keyboard.KEY_S);
+	public KeyBinding keyBindRight = new KeyBinding("Right", Keyboard.KEY_D);
+	public KeyBinding keyBindJump = new KeyBinding("Jump", Keyboard.KEY_SPACE);
+	public KeyBinding keyBindInventory = new KeyBinding("Inventory", Keyboard.KEY_E);
+	public KeyBinding keyBindDrop = new KeyBinding("Drop", Keyboard.KEY_Q);
+	public KeyBinding keyBindChat = new KeyBinding("Chat", Keyboard.KEY_T);
+	public KeyBinding keyBindToggleFog = new KeyBinding("Toggle fog", Keyboard.KEY_F);
+	public KeyBinding keyBindSneak = new KeyBinding("Sneak", Keyboard.KEY_LCONTROL);
+	public KeyBinding field_11782_8zR7w7M0dCz141EgrKPTyPG0x4be73DnUpm3v39wugYiB00oRfG9xEdOaiDU = new KeyBinding("Dash", Keyboard.KEY_LSHIFT);
+	public KeyBinding field_11752_0y3J835DcYjJCi69MHQUHF4jrOLdQx1Z31fkAA08625s5FJMK989j345coLD = new KeyBinding("Open console", Keyboard.KEY_GRAVE);
+	public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog, this.field_11782_8zR7w7M0dCz141EgrKPTyPG0x4be73DnUpm3v39wugYiB00oRfG9xEdOaiDU, this.field_11752_0y3J835DcYjJCi69MHQUHF4jrOLdQx1Z31fkAA08625s5FJMK989j345coLD};
 	protected Minecraft mc;
 	private File optionsFile;
-	public int numberOfOptions = 10;
+	public int numberOfOptions = 12;
 	public int difficulty = 2;
 	public boolean thirdPersonView = false;
-
-	public GameSettings(Minecraft var1, File var2) {
-		this.mc = var1;
-		this.optionsFile = new File(var2, "options.txt");
+	public boolean field_11757_25y1pfK8198W9Tm66cfxM95C77y782yiFE2iJ841XnrF5E5HedVA6X11kaDV = false;
+	public int field_11765_169bjUeR039ZE547KDzev4W9h7Y3Gek7cJSjnnkGJUJ5aJI775p1a4lDV0kq = 2;
+	public boolean field_11770_9UX0ZD1i0y7zcXk28p5XF7G1IawPyo5D04YmR388eC1Hn9D60kx7ZdzLF5D6 = true;
+	public boolean field_11766_2PZeKU2XX6DVQr0PddO0LpfaoOdt40powdd99RK1luEfC8ZBvPLza3Nz4hOa = true;
+	public boolean field_11759_4o1uNoQSrg2YCL3639xyKEbxEX25zI2006R4TI63uHnqbhPYmAy503KepkPl = true;
+	public boolean field_11768_9G35Lw0l42u913RwsiJ8b4oED565ckF66eprV7iUb2pWWs1p6q28aT020T9G = true;
+
+	public GameSettings(Minecraft minecraft, File file) {
+		if(minecraft.func_7236_2E4BZaw4wUzRdqs6H26gijBXYV2x4keaA5V5idykFk39ETvee94J18B7nBcD().toLowerCase().contains("nvidia")) {
+			RENDER_DISTANCES[5] = "Silent Dream";
+		}
+
+		this.mc = minecraft;
+		this.optionsFile = new File(file, "options.txt");
 		this.loadOptions();
 	}
 
 	public GameSettings() {
 	}
 
-	public String getKeyBindingDescription(int var1) {
-		return this.keyBindings[var1].keyDescription + ": " + Keyboard.getKeyName(this.keyBindings[var1].keyCode);
+	public String getKeyBindingDescription(int integer) {
+		return this.keyBindings[integer].keyDescription + ": " + Keyboard.getKeyName(this.keyBindings[integer].keyCode);
 	}
 
-	public void setKeyBinding(int var1, int var2) {
-		this.keyBindings[var1].keyCode = var2;
+	public void setKeyBinding(int integer1, int integer2) {
+		this.keyBindings[integer1].keyCode = integer2;
 		this.saveOptions();
 	}
 
-	public void setOptionFloatValue(int var1, float var2) {
-		if(var1 == 0) {
-			this.musicVolume = var2;
-			this.mc.sndManager.onSoundOptionsChanged();
-		}
-
-		if(var1 == 1) {
-			this.soundVolume = var2;
-			this.mc.sndManager.onSoundOptionsChanged();
-		}
-
-		if(var1 == 3) {
-			this.mouseSensitivity = var2;
+	public void setOptionFloatValue(int integer, float float2) {
+		if(integer == 0) {
+			this.musicVolume = float2;
+			this.mc.sndManager.onSoundOptionsChanged();
+		}
+
+		if(integer == 1) {
+			this.soundVolume = float2;
+			this.mc.sndManager.onSoundOptionsChanged();
+		}
+
+		if(integer == 3) {
+			this.mouseSensitivity = float2;
+		}
+
+		if(integer == 11) {
+			this.fovModifier = float2;
 		}
 
 	}
 
-	public void setOptionValue(int var1, int var2) {
-		if(var1 == 2) {
+	public void setOptionValue(int integer1, int integer2) {
+		if(integer1 == 2) {
 			this.invertMouse = !this.invertMouse;
 		}
 
-		if(var1 == 4) {
-			this.renderDistance = this.renderDistance + var2 & 3;
+		if(integer1 == 4) {
+			this.renderDistance = (this.renderDistance + integer2) % 6;
+			if(this.renderDistance < 0) {
+				this.renderDistance = !GL11.glGetString(GL11.GL_RENDERER).toLowerCase().contains("graphics media") && !GL11.glGetString(GL11.GL_RENDERER).toLowerCase().contains("4 series express") ? 5 : 4;
+			}
 		}
 
-		if(var1 == 5) {
+		if(integer1 == 5) {
 			this.viewBobbing = !this.viewBobbing;
 		}
 
-		if(var1 == 6) {
+		if(integer1 == 6) {
 			this.anaglyph = !this.anaglyph;
 			this.mc.renderEngine.refreshTextures();
 		}
 
-		if(var1 == 7) {
+		if(integer1 == 7) {
 			this.limitFramerate = !this.limitFramerate;
-		}
-
-		if(var1 == 8) {
-			this.difficulty = this.difficulty + var2 & 3;
-		}
-
-		if(var1 == 9) {
-			this.fancyGraphics = !this.fancyGraphics;
-			this.mc.renderGlobal.loadRenderers();
+			Display.setVSyncEnabled(this.limitFramerate);
+		}
+
+		if(integer1 == 8) {
+			this.difficulty = (this.difficulty + integer2) % 5;
+			System.out.println("Difficulty is now " + this.difficulty);
+		}
+
+		if(integer1 == 9) {
+			--this.fancyGraphics;
+			if(this.fancyGraphics < 0) {
+				this.fancyGraphics = 2;
+			}
+
+			if(this.mc.theWorld != null) {
+				this.mc.renderGlobal.loadRenderers();
+			}
+		}
+
+		if(integer1 == 10) {
+			this.pauseOnUnfocus = !this.pauseOnUnfocus;
+		}
+
+		if(integer1 == 12) {
+			this.field_11757_25y1pfK8198W9Tm66cfxM95C77y782yiFE2iJ841XnrF5E5HedVA6X11kaDV = !this.field_11757_25y1pfK8198W9Tm66cfxM95C77y782yiFE2iJ841XnrF5E5HedVA6X11kaDV;
+		}
+
+		if(integer1 == 20) {
+			++this.field_11765_169bjUeR039ZE547KDzev4W9h7Y3Gek7cJSjnnkGJUJ5aJI775p1a4lDV0kq;
+			this.field_11765_169bjUeR039ZE547KDzev4W9h7Y3Gek7cJSjnnkGJUJ5aJI775p1a4lDV0kq %= 3;
+			this.mc.field_7311_0ef1dw6U62P0w8bU619gHGHeA4m17T8k6bnjfEQQwhJz0UwhJ6Kx9rBRdIvo.func_11380_9r1511Jp0jE144f4MQc4NK82XBZn9UtKQ9T0m3371572UnC4jS4YM9eJUhB9();
+		}
+
+		if(integer1 == 21) {
+			this.field_11770_9UX0ZD1i0y7zcXk28p5XF7G1IawPyo5D04YmR388eC1Hn9D60kx7ZdzLF5D6 = !this.field_11770_9UX0ZD1i0y7zcXk28p5XF7G1IawPyo5D04YmR388eC1Hn9D60kx7ZdzLF5D6;
+			this.mc.field_7311_0ef1dw6U62P0w8bU619gHGHeA4m17T8k6bnjfEQQwhJz0UwhJ6Kx9rBRdIvo.func_11380_9r1511Jp0jE144f4MQc4NK82XBZn9UtKQ9T0m3371572UnC4jS4YM9eJUhB9();
+		}
+
+		if(integer1 == 22) {
+			this.field_11768_9G35Lw0l42u913RwsiJ8b4oED565ckF66eprV7iUb2pWWs1p6q28aT020T9G = !this.field_11768_9G35Lw0l42u913RwsiJ8b4oED565ckF66eprV7iUb2pWWs1p6q28aT020T9G;
+			this.mc.field_7311_0ef1dw6U62P0w8bU619gHGHeA4m17T8k6bnjfEQQwhJz0UwhJ6Kx9rBRdIvo.func_11380_9r1511Jp0jE144f4MQc4NK82XBZn9UtKQ9T0m3371572UnC4jS4YM9eJUhB9();
+		}
+
+		if(integer1 == 23) {
+			this.field_11759_4o1uNoQSrg2YCL3639xyKEbxEX25zI2006R4TI63uHnqbhPYmAy503KepkPl = !this.field_11759_4o1uNoQSrg2YCL3639xyKEbxEX25zI2006R4TI63uHnqbhPYmAy503KepkPl;
+			this.mc.field_7311_0ef1dw6U62P0w8bU619gHGHeA4m17T8k6bnjfEQQwhJz0UwhJ6Kx9rBRdIvo.func_11380_9r1511Jp0jE144f4MQc4NK82XBZn9UtKQ9T0m3371572UnC4jS4YM9eJUhB9();
+		}
+
+		if(integer1 == 24) {
+			this.field_11766_2PZeKU2XX6DVQr0PddO0LpfaoOdt40powdd99RK1luEfC8ZBvPLza3Nz4hOa = !this.field_11766_2PZeKU2XX6DVQr0PddO0LpfaoOdt40powdd99RK1luEfC8ZBvPLza3Nz4hOa;
+			this.mc.field_7311_0ef1dw6U62P0w8bU619gHGHeA4m17T8k6bnjfEQQwhJz0UwhJ6Kx9rBRdIvo.func_11380_9r1511Jp0jE144f4MQc4NK82XBZn9UtKQ9T0m3371572UnC4jS4YM9eJUhB9();
 		}
 
 		this.saveOptions();
 	}
 
-	public int isSlider(int var1) {
-		return var1 == 0 ? 1 : (var1 == 1 ? 1 : (var1 == 3 ? 1 : 0));
-	}
-
-	public float getOptionFloatValue(int var1) {
-		return var1 == 0 ? this.musicVolume : (var1 == 1 ? this.soundVolume : (var1 == 3 ? this.mouseSensitivity : 0.0F));
-	}
-
-	public String getOptionDisplayString(int var1) {
-		return var1 == 0 ? "Music: " + (this.musicVolume > 0.0F ? (int)(this.musicVolume * 100.0F) + "%" : "OFF") : (var1 == 1 ? "Sound: " + (this.soundVolume > 0.0F ? (int)(this.soundVolume * 100.0F) + "%" : "OFF") : (var1 == 2 ? "Invert mouse: " + (this.invertMouse ? "ON" : "OFF") : (var1 == 3 ? (this.mouseSensitivity == 0.0F ? "Sensitivity: *yawn*" : (this.mouseSensitivity == 1.0F ? "Sensitivity: HYPERSPEED!!!" : "Sensitivity: " + (int)(this.mouseSensitivity * 200.0F) + "%")) : (var1 == 4 ? "Render distance: " + RENDER_DISTANCES[this.renderDistance] : (var1 == 5 ? "View bobbing: " + (this.viewBobbing ? "ON" : "OFF") : (var1 == 6 ? "3d anaglyph: " + (this.anaglyph ? "ON" : "OFF") : (var1 == 7 ? "Limit framerate: " + (this.limitFramerate ? "ON" : "OFF") : (var1 == 8 ? "Difficulty: " + DIFFICULTY_LEVELS[this.difficulty] : (var1 == 9 ? "Graphics: " + (this.fancyGraphics ? "FANCY" : "FAST") : "")))))))));
+	public int isSlider(int integer) {
+		return integer == 0 ? 1 : (integer == 1 ? 1 : (integer == 3 ? 1 : (integer == 11 ? 1 : 0)));
+	}
+
+	public float getOptionFloatValue(int integer) {
+		return integer == 0 ? this.musicVolume : (integer == 1 ? this.soundVolume : (integer == 3 ? this.mouseSensitivity : (integer == 11 ? this.fovModifier : 0.0F)));
+	}
+
+	public String getOptionDisplayString(int integer) {
+		return integer == 0 ? "Music: " + (this.musicVolume > 0.0F ? (int)(this.musicVolume * 100.0F) + "%" : "OFF") : (integer == 1 ? "Sound: " + (this.soundVolume > 0.0F ? (int)(this.soundVolume * 100.0F) + "%" : "OFF") : (integer == 2 ? "Invert mouse: " + (this.invertMouse ? "ON" : "OFF") : (integer == 3 ? (this.mouseSensitivity == 0.0F ? "Sensitivity: *yawn*" : (this.mouseSensitivity == 1.0F ? "Sensitivity: HYPERSPEED!!!" : "Sensitivity: " + (int)(this.mouseSensitivity * 200.0F) + "%")) : (integer == 4 ? "Render distance: " + RENDER_DISTANCES[this.renderDistance] : (integer == 5 ? "View bobbing: " + (this.viewBobbing ? "ON" : "OFF") : (integer == 6 ? "3d anaglyph: " + (this.anaglyph ? "ON" : "OFF") : (integer == 7 ? "Vertical sync: " + (this.limitFramerate ? "ON" : "OFF") : (integer == 8 ? "Difficulty: " + DIFFICULTY_LEVELS[this.difficulty] : (integer == 9 ? "Graphics: " + field_11776_0601s25AwsXK8YAli4bSnf611cz09m3nihe6Wcjm69saa6xnYY1LDN3wqX7Q[this.fancyGraphics] : (integer == 10 ? "Pause on unfocus: " + (this.pauseOnUnfocus ? "ON" : "OFF") : (integer == 11 ? "FOV: " + ((double)this.fovModifier > 0.5D ? "+" : "") + (int)(((double)this.fovModifier - 0.5D) * 80.0D) : (integer == 12 ? "Shaders: " + (this.field_11757_25y1pfK8198W9Tm66cfxM95C77y782yiFE2iJ841XnrF5E5HedVA6X11kaDV ? "ON" : "OFF") : (integer == 100 ? "Edit controls..." : (integer == 101 ? "Set Visuals..." : (integer == 20 ? "Sh. Motion Blur: " + (this.field_11765_169bjUeR039ZE547KDzev4W9h7Y3Gek7cJSjnnkGJUJ5aJI775p1a4lDV0kq == 2 ? "QUALITY" : (this.field_11765_169bjUeR039ZE547KDzev4W9h7Y3Gek7cJSjnnkGJUJ5aJI775p1a4lDV0kq == 1 ? "PERF." : "OFF")) : (integer == 21 ? "Sh. Depth of Field: " + (this.field_11770_9UX0ZD1i0y7zcXk28p5XF7G1IawPyo5D04YmR388eC1Hn9D60kx7ZdzLF5D6 ? "ON" : "OFF") : (integer == 22 ? "Sh. Anti Aliasing: " + (this.field_11768_9G35Lw0l42u913RwsiJ8b4oED565ckF66eprV7iUb2pWWs1p6q28aT020T9G ? "ON" : "OFF") : (integer == 23 ? "Sh. Bloom: " + (this.field_11759_4o1uNoQSrg2YCL3639xyKEbxEX25zI2006R4TI63uHnqbhPYmAy503KepkPl ? "ON" : "OFF") : (integer == 24 ? "Sh. SSR (BROKEN): " + (this.field_11766_2PZeKU2XX6DVQr0PddO0LpfaoOdt40powdd99RK1luEfC8ZBvPLza3Nz4hOa ? "ON" : "OFF") : "")))))))))))))))))));
 	}
 
 	public void loadOptions() {
@@ -124,97 +193,148 @@
 				return;
 			}
 
-			BufferedReader var1 = new BufferedReader(new FileReader(this.optionsFile));
-			String var2 = "";
-
-			while(true) {
-				var2 = var1.readLine();
-				if(var2 == null) {
-					var1.close();
-					break;
-				}
-
-				String[] var3 = var2.split(":");
-				if(var3[0].equals("music")) {
-					this.musicVolume = this.parseFloat(var3[1]);
-				}
-
-				if(var3[0].equals("sound")) {
-					this.soundVolume = this.parseFloat(var3[1]);
-				}
-
-				if(var3[0].equals("mouseSensitivity")) {
-					this.mouseSensitivity = this.parseFloat(var3[1]);
-				}
-
-				if(var3[0].equals("invertYMouse")) {
-					this.invertMouse = var3[1].equals("true");
-				}
-
-				if(var3[0].equals("viewDistance")) {
-					this.renderDistance = Integer.parseInt(var3[1]);
-				}
-
-				if(var3[0].equals("bobView")) {
-					this.viewBobbing = var3[1].equals("true");
-				}
-
-				if(var3[0].equals("anaglyph3d")) {
-					this.anaglyph = var3[1].equals("true");
-				}
-
-				if(var3[0].equals("limitFramerate")) {
-					this.limitFramerate = var3[1].equals("true");
-				}
-
-				if(var3[0].equals("difficulty")) {
-					this.difficulty = Integer.parseInt(var3[1]);
-				}
-
-				if(var3[0].equals("fancyGraphics")) {
-					this.fancyGraphics = var3[1].equals("true");
-				}
-
-				for(int var4 = 0; var4 < this.keyBindings.length; ++var4) {
-					if(var3[0].equals("key_" + this.keyBindings[var4].keyDescription)) {
-						this.keyBindings[var4].keyCode = Integer.parseInt(var3[1]);
+			BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.optionsFile));
+			String string2 = "";
+
+			while((string2 = bufferedReader1.readLine()) != null) {
+				String[] string3 = string2.split(":");
+				if(string3[0].equals("music")) {
+					this.musicVolume = this.parseFloat(string3[1]);
+				}
+
+				if(string3[0].equals("sound")) {
+					this.soundVolume = this.parseFloat(string3[1]);
+				}
+
+				if(string3[0].equals("mouseSensitivity")) {
+					this.mouseSensitivity = this.parseFloat(string3[1]);
+				}
+
+				if(string3[0].equals("invertYMouse")) {
+					this.invertMouse = string3[1].equals("true");
+				}
+
+				if(string3[0].equals("viewDistance")) {
+					this.renderDistance = Integer.parseInt(string3[1]);
+				}
+
+				if(string3[0].equals("bobView")) {
+					this.viewBobbing = string3[1].equals("true");
+				}
+
+				if(string3[0].equals("anaglyph3d")) {
+					this.anaglyph = string3[1].equals("true");
+				}
+
+				if(string3[0].equals("limitFramerate")) {
+					this.limitFramerate = string3[1].equals("true");
+				}
+
+				if(string3[0].equals("difficulty")) {
+					this.difficulty = Integer.parseInt(string3[1]);
+				}
+
+				if(string3[0].equals("gxMode")) {
+					this.fancyGraphics = Integer.parseInt(string3[1]);
+				}
+
+				if(string3[0].equals("pauseOnUnfocus")) {
+					this.pauseOnUnfocus = string3[1].equals("true");
+				}
+
+				if(string3[0].equals("fovMod")) {
+					this.fovModifier = this.parseFloat(string3[1]);
+				}
+
+				if(string3[0].equals("skin")) {
+					this.field_11745_5cq9PhUp8LROyS1A2CPi3fyxFgmWABb66h72hAC97w32G831S582rHP9QCBn = string3[1];
+				}
+
+				if(string3[0].equals("shadersOn")) {
+					this.field_11757_25y1pfK8198W9Tm66cfxM95C77y782yiFE2iJ841XnrF5E5HedVA6X11kaDV = string3[1].equals("true");
+				}
+
+				if(string3[0].equals("shadersDOF")) {
+					this.field_11770_9UX0ZD1i0y7zcXk28p5XF7G1IawPyo5D04YmR388eC1Hn9D60kx7ZdzLF5D6 = string3[1].equals("true");
+				}
+
+				if(string3[0].equals("shadersAA")) {
+					this.field_11768_9G35Lw0l42u913RwsiJ8b4oED565ckF66eprV7iUb2pWWs1p6q28aT020T9G = string3[1].equals("true");
+				}
+
+				if(string3[0].equals("shadersBloom")) {
+					this.field_11759_4o1uNoQSrg2YCL3639xyKEbxEX25zI2006R4TI63uHnqbhPYmAy503KepkPl = string3[1].equals("true");
+				}
+
+				if(string3[0].equals("shadersSSR")) {
+					this.field_11766_2PZeKU2XX6DVQr0PddO0LpfaoOdt40powdd99RK1luEfC8ZBvPLza3Nz4hOa = string3[1].equals("true");
+				}
+
+				if(string3[0].equals("shadersMotionBlur")) {
+					this.field_11765_169bjUeR039ZE547KDzev4W9h7Y3Gek7cJSjnnkGJUJ5aJI775p1a4lDV0kq = Integer.parseInt(string3[1]);
+				}
+
+				for(int i4 = 0; i4 < this.keyBindings.length; ++i4) {
+					if(string3[0].equals("key_" + this.keyBindings[i4].keyDescription)) {
+						this.keyBindings[i4].keyCode = Integer.parseInt(string3[1]);
 					}
 				}
 			}
-		} catch (Exception var5) {
+
+			bufferedReader1.close();
+		} catch (Exception exception5) {
 			System.out.println("Failed to load options");
-			var5.printStackTrace();
+			exception5.printStackTrace();
 		}
 
 	}
 
-	private float parseFloat(String var1) {
-		return var1.equals("true") ? 1.0F : (var1.equals("false") ? 0.0F : Float.parseFloat(var1));
+	private float parseFloat(String string) {
+		return string.equals("true") ? 1.0F : (string.equals("false") ? 0.0F : Float.parseFloat(string));
 	}
 
 	public void saveOptions() {
 		try {
-			PrintWriter var1 = new PrintWriter(new FileWriter(this.optionsFile));
-			var1.println("music:" + this.musicVolume);
-			var1.println("sound:" + this.soundVolume);
-			var1.println("invertYMouse:" + this.invertMouse);
-			var1.println("mouseSensitivity:" + this.mouseSensitivity);
-			var1.println("viewDistance:" + this.renderDistance);
-			var1.println("bobView:" + this.viewBobbing);
-			var1.println("anaglyph3d:" + this.anaglyph);
-			var1.println("limitFramerate:" + this.limitFramerate);
-			var1.println("difficulty:" + this.difficulty);
-			var1.println("fancyGraphics:" + this.fancyGraphics);
+			PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.optionsFile));
+			printWriter1.println("music:" + this.musicVolume);
+			printWriter1.println("sound:" + this.soundVolume);
+			printWriter1.println("invertYMouse:" + this.invertMouse);
+			printWriter1.println("mouseSensitivity:" + this.mouseSensitivity);
+			printWriter1.println("viewDistance:" + this.renderDistance);
+			printWriter1.println("bobView:" + this.viewBobbing);
+			printWriter1.println("anaglyph3d:" + this.anaglyph);
+			printWriter1.println("limitFramerate:" + this.limitFramerate);
+			printWriter1.println("difficulty:" + this.difficulty);
+			printWriter1.println("gxMode:" + this.fancyGraphics);
+			printWriter1.println("pauseOnUnfocus:" + this.pauseOnUnfocus);
+			printWriter1.println("fovMod:" + this.fovModifier);
+			printWriter1.println("skin:" + this.field_11745_5cq9PhUp8LROyS1A2CPi3fyxFgmWABb66h72hAC97w32G831S582rHP9QCBn);
+			printWriter1.println("shadersOn:" + this.field_11757_25y1pfK8198W9Tm66cfxM95C77y782yiFE2iJ841XnrF5E5HedVA6X11kaDV);
+			printWriter1.println("shadersSSR:" + this.field_11766_2PZeKU2XX6DVQr0PddO0LpfaoOdt40powdd99RK1luEfC8ZBvPLza3Nz4hOa);
+			printWriter1.println("shadersDOF:" + this.field_11770_9UX0ZD1i0y7zcXk28p5XF7G1IawPyo5D04YmR388eC1Hn9D60kx7ZdzLF5D6);
+			printWriter1.println("shadersAA:" + this.field_11768_9G35Lw0l42u913RwsiJ8b4oED565ckF66eprV7iUb2pWWs1p6q28aT020T9G);
+			printWriter1.println("shadersBloom:" + this.field_11759_4o1uNoQSrg2YCL3639xyKEbxEX25zI2006R4TI63uHnqbhPYmAy503KepkPl);
+			printWriter1.println("shadersMotionBlur:" + this.field_11765_169bjUeR039ZE547KDzev4W9h7Y3Gek7cJSjnnkGJUJ5aJI775p1a4lDV0kq);
 
-			for(int var2 = 0; var2 < this.keyBindings.length; ++var2) {
-				var1.println("key_" + this.keyBindings[var2].keyDescription + ":" + this.keyBindings[var2].keyCode);
+			for(int i2 = 0; i2 < this.keyBindings.length; ++i2) {
+				printWriter1.println("key_" + this.keyBindings[i2].keyDescription + ":" + this.keyBindings[i2].keyCode);
 			}
 
-			var1.close();
-		} catch (Exception var3) {
+			printWriter1.close();
+		} catch (Exception exception3) {
 			System.out.println("Failed to save options");
-			var3.printStackTrace();
+			exception3.printStackTrace();
 		}
 
+	}
+
+	public String func_11736_4ZBw6818NpyygSj15g0tevwT2VRNee9iyV3HNltCy7o20mr67D74Di6czF41() {
+		String string1 = "";
+		string1 = string1 + (this.field_11770_9UX0ZD1i0y7zcXk28p5XF7G1IawPyo5D04YmR388eC1Hn9D60kx7ZdzLF5D6 ? "#define DOF_ENABLED\n" : "");
+		string1 = string1 + (this.field_11766_2PZeKU2XX6DVQr0PddO0LpfaoOdt40powdd99RK1luEfC8ZBvPLza3Nz4hOa ? "#define SSR_ENABLED\n" : "");
+		string1 = string1 + (this.field_11768_9G35Lw0l42u913RwsiJ8b4oED565ckF66eprV7iUb2pWWs1p6q28aT020T9G ? "#define AA_ENABLED\n" : "");
+		string1 = string1 + (this.field_11759_4o1uNoQSrg2YCL3639xyKEbxEX25zI2006R4TI63uHnqbhPYmAy503KepkPl ? "#define BLOOM_ENABLED\n" : "");
+		string1 = string1 + "#define MOTIONBLUR_ENABLED " + this.field_11765_169bjUeR039ZE547KDzev4W9h7Y3Gek7cJSjnnkGJUJ5aJI775p1a4lDV0kq + "\n";
+		return string1;
 	}
 }
--- net/minecraft/src/BlockCactus.java
+++ net/minecraft/src/BlockCactus.java
@@ -3,42 +3,42 @@
 import java.util.Random;
 
 public class BlockCactus extends Block {
-	protected BlockCactus(int var1, int var2) {
-		super(var1, var2, Material.cactus);
+	protected BlockCactus(int id, int blockIndex) {
+		super(id, blockIndex, Material.cactus);
 		this.setTickOnLoad(true);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getBlockId(var2, var3 + 1, var4) == 0) {
-			int var6;
-			for(var6 = 1; var1.getBlockId(var2, var3 - var6, var4) == this.blockID; ++var6) {
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(world.getBlockId(x, y + 1, z) == 0) {
+			int i6;
+			for(i6 = 1; world.getBlockId(x, y - i6, z) == this.blockID; ++i6) {
 			}
 
-			if(var6 < 3) {
-				int var7 = var1.getBlockMetadata(var2, var3, var4);
-				if(var7 == 15) {
-					var1.setBlockWithNotify(var2, var3 + 1, var4, this.blockID);
-					var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
+			if(i6 < 3) {
+				int i7 = world.getBlockMetadata(x, y, z);
+				if(i7 == 15) {
+					world.setBlockWithNotify(x, y + 1, z, this.blockID);
+					world.setBlockMetadataWithNotify(x, y, z, 0);
 				} else {
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + 1);
+					world.setBlockMetadataWithNotify(x, y, z, i7 + 1);
 				}
 			}
 		}
 
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		float var5 = 1.0F / 16.0F;
-		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + var5), (double)var3, (double)((float)var4 + var5), (double)((float)(var2 + 1) - var5), (double)((float)(var3 + 1) - var5), (double)((float)(var4 + 1) - var5));
-	}
-
-	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		float var5 = 1.0F / 16.0F;
-		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + var5), (double)var3, (double)((float)var4 + var5), (double)((float)(var2 + 1) - var5), (double)(var3 + 1), (double)((float)(var4 + 1) - var5));
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture - 1 : (var1 == 0 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture);
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		float f5 = 0.0625F;
+		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + f5), (double)y, (double)((float)z + f5), (double)((float)(x + 1) - f5), (double)((float)(y + 1) - f5), (double)((float)(z + 1) - f5));
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		float f5 = 0.0625F;
+		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + f5), (double)y, (double)((float)z + f5), (double)((float)(x + 1) - f5), (double)(y + 1), (double)((float)(z + 1) - f5));
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.blockIndexInTexture - 1 : (side == 0 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture);
 	}
 
 	public boolean renderAsNormalBlock() {
@@ -53,34 +53,34 @@
 		return 13;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return !super.canPlaceBlockAt(var1, var2, var3, var4) ? false : this.canBlockStay(var1, var2, var3, var4);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return !super.canPlaceBlockAt(world, x, y, z) ? false : this.canBlockStay(world, x, y, z);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!this.canBlockStay(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(!this.canBlockStay(world, x, y, z)) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
 
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockMaterial(var2 - 1, var3, var4).isSolid()) {
-			return false;
-		} else if(var1.getBlockMaterial(var2 + 1, var3, var4).isSolid()) {
-			return false;
-		} else if(var1.getBlockMaterial(var2, var3, var4 - 1).isSolid()) {
-			return false;
-		} else if(var1.getBlockMaterial(var2, var3, var4 + 1).isSolid()) {
+	public boolean canBlockStay(World world, int x, int y, int z) {
+		if(world.getBlockMaterial(x - 1, y, z).isSolid()) {
+			return false;
+		} else if(world.getBlockMaterial(x + 1, y, z).isSolid()) {
+			return false;
+		} else if(world.getBlockMaterial(x, y, z - 1).isSolid()) {
+			return false;
+		} else if(world.getBlockMaterial(x, y, z + 1).isSolid()) {
 			return false;
 		} else {
-			int var5 = var1.getBlockId(var2, var3 - 1, var4);
-			return var5 == Block.cactus.blockID || var5 == Block.sand.blockID;
+			int i5 = world.getBlockId(x, y - 1, z);
+			return i5 == Block.cactus.blockID || i5 == Block.sand.blockID;
 		}
 	}
 
-	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-		var5.attackEntityFrom((Entity)null, 1);
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
+		entity.attackEntityFrom((Entity)null, 1);
 	}
 }
--- net/minecraft/src/BlockStationary.java
+++ net/minecraft/src/BlockStationary.java
@@ -3,47 +3,47 @@
 import java.util.Random;
 
 public class BlockStationary extends BlockFluid {
-	protected BlockStationary(int var1, Material var2) {
-		super(var1, var2);
+	protected BlockStationary(int id, Material material) {
+		super(id, material);
 		this.setTickOnLoad(false);
-		if(var2 == Material.lava) {
+		if(material == Material.lava) {
 			this.setTickOnLoad(true);
 		}
 
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			this.setNotStationary(var1, var2, var3, var4);
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		super.onNeighborBlockChange(world, x, y, z, flag);
+		if(world.getBlockId(x, y, z) == this.blockID) {
+			this.setNotStationary(world, x, y, z);
 		}
 
 	}
 
-	private void setNotStationary(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		var1.editingBlocks = true;
-		var1.setBlockAndMetadata(var2, var3, var4, this.blockID - 1, var5);
-		var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID - 1);
-		var1.editingBlocks = false;
+	private void setNotStationary(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		world.editingBlocks = true;
+		world.setBlockAndMetadata(x, y, z, this.blockID - 1, i5);
+		world.markBlocksDirty(x, y, z, x, y, z);
+		world.scheduleBlockUpdate(x, y, z, this.blockID - 1);
+		world.editingBlocks = false;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
+	public void updateTick(World world, int x, int y, int z, Random random) {
 		if(this.material == Material.lava) {
-			int var6 = var5.nextInt(3);
+			int i6 = random.nextInt(3);
 
-			for(int var7 = 0; var7 < var6; ++var7) {
-				var2 += var5.nextInt(3) - 1;
-				++var3;
-				var4 += var5.nextInt(3) - 1;
-				int var8 = var1.getBlockId(var2, var3, var4);
-				if(var8 == 0) {
-					if(this.isFlammable(var1, var2 - 1, var3, var4) || this.isFlammable(var1, var2 + 1, var3, var4) || this.isFlammable(var1, var2, var3, var4 - 1) || this.isFlammable(var1, var2, var3, var4 + 1) || this.isFlammable(var1, var2, var3 - 1, var4) || this.isFlammable(var1, var2, var3 + 1, var4)) {
-						var1.setBlockWithNotify(var2, var3, var4, Block.fire.blockID);
+			for(int i7 = 0; i7 < i6; ++i7) {
+				x += random.nextInt(3) - 1;
+				++y;
+				z += random.nextInt(3) - 1;
+				int i8 = world.getBlockId(x, y, z);
+				if(i8 == 0) {
+					if(this.isFlammable(world, x - 1, y, z) || this.isFlammable(world, x + 1, y, z) || this.isFlammable(world, x, y, z - 1) || this.isFlammable(world, x, y, z + 1) || this.isFlammable(world, x, y - 1, z) || this.isFlammable(world, x, y + 1, z)) {
+						world.setBlockWithNotify(x, y, z, Block.fire.blockID);
 						return;
 					}
-				} else if(Block.blocksList[var8].material.getIsSolid()) {
+				} else if(Block.blocksList[i8].material.getIsSolid()) {
 					return;
 				}
 			}
@@ -51,7 +51,7 @@
 
 	}
 
-	private boolean isFlammable(World var1, int var2, int var3, int var4) {
-		return var1.getBlockMaterial(var2, var3, var4).getCanBurn();
+	private boolean isFlammable(World world, int x, int y, int z) {
+		return world.getBlockMaterial(x, y, z).getCanBurn();
 	}
 }
--- net/minecraft/src/BlockCrops.java
+++ net/minecraft/src/BlockCrops.java
@@ -3,108 +3,107 @@
 import java.util.Random;
 
 public class BlockCrops extends BlockFlower {
-	protected BlockCrops(int var1, int var2) {
-		super(var1, var2);
-		this.blockIndexInTexture = var2;
+	protected BlockCrops(int id, int blockIndex) {
+		super(id, blockIndex);
+		this.blockIndexInTexture = blockIndex;
 		this.setTickOnLoad(true);
-		float var3 = 0.5F;
-		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, 0.25F, 0.5F + var3);
-	}
-
-	protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-		return var1 == Block.tilledField.blockID;
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		super.updateTick(var1, var2, var3, var4, var5);
-		if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 < 7) {
-				float var7 = this.getGrowthRate(var1, var2, var3, var4);
-				if(var5.nextInt((int)(100.0F / var7)) == 0) {
-					++var6;
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
+		float f3 = 0.5F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, 0.25F, 0.5F + f3);
+	}
+
+	protected boolean canThisPlantGrowOnThisBlockID(int id) {
+		return id == Block.tilledField.blockID;
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		super.updateTick(world, x, y, z, random);
+		if(world.getBlockLightValue(x, y + 1, z) >= 9) {
+			int i6 = world.getBlockMetadata(x, y, z);
+			if(i6 < 7) {
+				float f7 = this.getGrowthRate(world, x, y, z);
+				if(random.nextInt((int)(100.0F / f7)) == 0) {
+					++i6;
+					world.setBlockMetadataWithNotify(x, y, z, i6);
 				}
 			}
 		}
 
 	}
 
-	private float getGrowthRate(World var1, int var2, int var3, int var4) {
-		float var5 = 1.0F;
-		int var6 = var1.getBlockId(var2, var3, var4 - 1);
-		int var7 = var1.getBlockId(var2, var3, var4 + 1);
-		int var8 = var1.getBlockId(var2 - 1, var3, var4);
-		int var9 = var1.getBlockId(var2 + 1, var3, var4);
-		int var10 = var1.getBlockId(var2 - 1, var3, var4 - 1);
-		int var11 = var1.getBlockId(var2 + 1, var3, var4 - 1);
-		int var12 = var1.getBlockId(var2 + 1, var3, var4 + 1);
-		int var13 = var1.getBlockId(var2 - 1, var3, var4 + 1);
-		boolean var14 = var8 == this.blockID || var9 == this.blockID;
-		boolean var15 = var6 == this.blockID || var7 == this.blockID;
-		boolean var16 = var10 == this.blockID || var11 == this.blockID || var12 == this.blockID || var13 == this.blockID;
+	private float getGrowthRate(World world, int x, int y, int z) {
+		float f5 = 1.0F;
+		int i6 = world.getBlockId(x, y, z - 1);
+		int i7 = world.getBlockId(x, y, z + 1);
+		int i8 = world.getBlockId(x - 1, y, z);
+		int i9 = world.getBlockId(x + 1, y, z);
+		int i10 = world.getBlockId(x - 1, y, z - 1);
+		int i11 = world.getBlockId(x + 1, y, z - 1);
+		int i12 = world.getBlockId(x + 1, y, z + 1);
+		int i13 = world.getBlockId(x - 1, y, z + 1);
+		boolean z14 = i8 == this.blockID || i9 == this.blockID;
+		boolean z15 = i6 == this.blockID || i7 == this.blockID;
+		boolean z16 = i10 == this.blockID || i11 == this.blockID || i12 == this.blockID || i13 == this.blockID;
 
-		for(int var17 = var2 - 1; var17 <= var2 + 1; ++var17) {
-			for(int var18 = var4 - 1; var18 <= var4 + 1; ++var18) {
-				int var19 = var1.getBlockId(var17, var3 - 1, var18);
-				float var20 = 0.0F;
-				if(var19 == Block.tilledField.blockID) {
-					var20 = 1.0F;
-					if(var1.getBlockMetadata(var17, var3 - 1, var18) > 0) {
-						var20 = 3.0F;
+		for(int i17 = x - 1; i17 <= x + 1; ++i17) {
+			for(int i18 = z - 1; i18 <= z + 1; ++i18) {
+				int i19 = world.getBlockId(i17, y - 1, i18);
+				float f20 = 0.0F;
+				if(i19 == Block.tilledField.blockID) {
+					f20 = 1.0F;
+					if(world.getBlockMetadata(i17, y - 1, i18) > 0) {
+						f20 = 3.0F;
 					}
 				}
 
-				if(var17 != var2 || var18 != var4) {
-					var20 /= 4.0F;
+				if(i17 != x || i18 != z) {
+					f20 /= 4.0F;
 				}
 
-				var5 += var20;
+				f5 += f20;
 			}
 		}
 
-		if(var16 || var14 && var15) {
-			var5 /= 2.0F;
+		if(z16 || z14 && z15) {
+			f5 /= 2.0F;
 		}
 
-		return var5;
+		return f5;
 	}
 
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		if(var2 < 0) {
-			var2 = 7;
+	public int getBlockTextureFromSideAndMetadata(int side, int metadata) {
+		if(metadata < 0) {
+			metadata = 7;
 		}
 
-		return this.blockIndexInTexture + var2;
+		return this.blockIndexInTexture + metadata;
 	}
 
 	public int getRenderType() {
 		return 6;
 	}
 
-	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-		super.onBlockDestroyedByPlayer(var1, var2, var3, var4, var5);
+	public void onBlockDestroyedByPlayer(World world, int x, int y, int z, int flag) {
+		super.onBlockDestroyedByPlayer(world, x, y, z, flag);
 
-		for(int var6 = 0; var6 < 3; ++var6) {
-			if(var1.rand.nextInt(15) <= var5) {
-				float var7 = 0.7F;
-				float var8 = var1.rand.nextFloat() * var7 + (1.0F - var7) * 0.5F;
-				float var9 = var1.rand.nextFloat() * var7 + (1.0F - var7) * 0.5F;
-				float var10 = var1.rand.nextFloat() * var7 + (1.0F - var7) * 0.5F;
-				EntityItem var11 = new EntityItem(var1, (double)((float)var2 + var8), (double)((float)var3 + var9), (double)((float)var4 + var10), new ItemStack(Item.seeds));
-				var11.delayBeforeCanPickup = 10;
-				var1.spawnEntityInWorld(var11);
+		for(int i6 = 0; i6 < 3; ++i6) {
+			if(world.rand.nextInt(15) <= flag) {
+				float f7 = 0.7F;
+				float f8 = world.rand.nextFloat() * f7 + (1.0F - f7) * 0.5F;
+				float f9 = world.rand.nextFloat() * f7 + (1.0F - f7) * 0.5F;
+				float f10 = world.rand.nextFloat() * f7 + (1.0F - f7) * 0.5F;
+				EntityItem entityItem11 = new EntityItem(world, (double)((float)x + f8), (double)((float)y + f9), (double)((float)z + f10), new ItemStack(Item.seeds));
+				entityItem11.delayBeforeCanPickup = 10;
+				world.spawnEntityInWorld(entityItem11);
 			}
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
-		System.out.println("Get resource: " + var1);
-		return var1 == 7 ? Item.wheat.shiftedIndex : -1;
+	public int idDropped(int count, Random random) {
+		return count == 7 ? Item.wheat.shiftedIndex : -1;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 1;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockFrigidTrunk.java
@@ -1,0 +1,35 @@
+package net.minecraft.src;
+
+public class BlockFrigidTrunk extends Block {
+	public BlockFrigidTrunk(int integer1, int integer2) {
+		super(integer1, Material.wood);
+		this.blockIndexInTexture = integer2;
+		this.setTickOnLoad(true);
+		float f3 = 0.2F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, f3 * 3.0F, 0.5F + f3);
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return this.func_8344_4swhWUA9cxPqnYZZ2X6yB751eeM4y2ev69u55PQT0wAm6QJ8NnKYafSw88ZT(world.getBlockId(x, y - 1, z));
+	}
+
+	protected boolean func_8344_4swhWUA9cxPqnYZZ2X6yB751eeM4y2ev69u55PQT0wAm6QJ8NnKYafSw88ZT(int integer) {
+		return integer == Block.blockSnow.blockID || integer == Block.blockSnow.blockID || integer == Block.blockSnow.blockID;
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		return null;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 1;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EnumVendingMachineUnknownClass.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+class EnumVendingMachineUnknownClass {
+    static final /* synthetic */ int[] field_11151_01Lqa7jqn5Lnc8H2326RUUWR0pcY5mVnw6E94jwT0DsG39Ak48kRz6LgkbXv;
+
+    static {
+        field_11151_01Lqa7jqn5Lnc8H2326RUUWR0pcY5mVnw6E94jwT0DsG39Ak48kRz6LgkbXv = new int[EnumVendingMachine.func_8621_1A4K8JmwLTo1bRceY319ILcN68Kz1yddU8DZWKk5CMsNwnMN4Amc8gdj0Pfv().length];
+        try {
+            EnumVendingMachineUnknownClass.field_11151_01Lqa7jqn5Lnc8H2326RUUWR0pcY5mVnw6E94jwT0DsG39Ak48kRz6LgkbXv[EnumVendingMachine.Armor.ordinal()] = 1;
+        }
+        catch (final NoSuchFieldError noSuchFieldError) {}
+        try {
+            EnumVendingMachineUnknownClass.field_11151_01Lqa7jqn5Lnc8H2326RUUWR0pcY5mVnw6E94jwT0DsG39Ak48kRz6LgkbXv[EnumVendingMachine.Dash.ordinal()] = 2;
+        }
+        catch (final NoSuchFieldError noSuchFieldError2) {}
+        try {
+            EnumVendingMachineUnknownClass.field_11151_01Lqa7jqn5Lnc8H2326RUUWR0pcY5mVnw6E94jwT0DsG39Ak48kRz6LgkbXv[EnumVendingMachine.HealthBoost.ordinal()] = 3;
+        }
+        catch (final NoSuchFieldError noSuchFieldError3) {}
+        try {
+            EnumVendingMachineUnknownClass.field_11151_01Lqa7jqn5Lnc8H2326RUUWR0pcY5mVnw6E94jwT0DsG39Ak48kRz6LgkbXv[EnumVendingMachine.QuickRevive.ordinal()] = 4;
+        }
+        catch (final NoSuchFieldError noSuchFieldError4) {}
+    }
+}
--- /dev/null
+++ net/minecraft/src/EncOutputStream.java
@@ -1,0 +1,115 @@
+package net.minecraft.src;
+
+import java.io.FilterOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+
+class EncOutputStream extends FilterOutputStream {
+	private int leftover = 0;
+	private int b0;
+	private int b1;
+	private int b2;
+	private boolean closed = false;
+	private final char[] base64;
+	private final byte[] newline;
+	private final int linemax;
+	private final boolean doPadding;
+	private int linepos = 0;
+
+	EncOutputStream(OutputStream outputStream, char[] arr, byte[] arr1, int integer, boolean boolean5) {
+		super(outputStream);
+		this.base64 = arr;
+		this.newline = arr1;
+		this.linemax = integer;
+		this.doPadding = boolean5;
+	}
+
+	public void write(int integer) throws IOException {
+		byte[] b2x = new byte[]{(byte)(integer & 255)};
+		this.write(b2x, 0, 1);
+	}
+
+	private void checkNewline() throws IOException {
+		if(this.linepos == this.linemax) {
+			this.out.write(this.newline);
+			this.linepos = 0;
+		}
+
+	}
+
+	public void write(byte[] arr, int integer2, int integer3) throws IOException {
+		if(this.closed) {
+			throw new IOException("Stream is closed");
+		} else if(integer2 >= 0 && integer3 >= 0 && integer3 <= arr.length - integer2) {
+			if(integer3 != 0) {
+				if(this.leftover != 0) {
+					if(this.leftover == 1) {
+						this.b1 = arr[integer2++] & 255;
+						--integer3;
+						if(integer3 == 0) {
+							++this.leftover;
+							return;
+						}
+					}
+
+					this.b2 = arr[integer2++] & 255;
+					--integer3;
+					this.checkNewline();
+					this.out.write(this.base64[this.b0 >> 2]);
+					this.out.write(this.base64[this.b0 << 4 & 63 | this.b1 >> 4]);
+					this.out.write(this.base64[this.b1 << 2 & 63 | this.b2 >> 6]);
+					this.out.write(this.base64[this.b2 & 63]);
+					this.linepos += 4;
+				}
+
+				int i4 = integer3 / 3;
+
+				for(this.leftover = integer3 - i4 * 3; i4-- > 0; this.linepos += 4) {
+					this.checkNewline();
+					int i5 = (arr[integer2++] & 255) << 16 | (arr[integer2++] & 255) << 8 | arr[integer2++] & 255;
+					this.out.write(this.base64[i5 >>> 18 & 63]);
+					this.out.write(this.base64[i5 >>> 12 & 63]);
+					this.out.write(this.base64[i5 >>> 6 & 63]);
+					this.out.write(this.base64[i5 & 63]);
+				}
+
+				if(this.leftover == 1) {
+					this.b0 = arr[integer2++] & 255;
+				} else if(this.leftover == 2) {
+					this.b0 = arr[integer2++] & 255;
+					this.b1 = arr[integer2++] & 255;
+				}
+
+			}
+		} else {
+			throw new ArrayIndexOutOfBoundsException();
+		}
+	}
+
+	public void close() throws IOException {
+		if(!this.closed) {
+			this.closed = true;
+			if(this.leftover == 1) {
+				this.checkNewline();
+				this.out.write(this.base64[this.b0 >> 2]);
+				this.out.write(this.base64[this.b0 << 4 & 63]);
+				if(this.doPadding) {
+					this.out.write(61);
+					this.out.write(61);
+				}
+			} else if(this.leftover == 2) {
+				this.checkNewline();
+				this.out.write(this.base64[this.b0 >> 2]);
+				this.out.write(this.base64[this.b0 << 4 & 63 | this.b1 >> 4]);
+				this.out.write(this.base64[this.b1 << 2 & 63]);
+				if(this.doPadding) {
+					this.out.write(61);
+				}
+			}
+
+			this.leftover = 0;
+			this.out.close();
+		}
+
+	}
+}
--- net/minecraft/src/ModelBase.java
+++ net/minecraft/src/ModelBase.java
@@ -4,9 +4,17 @@
 	public float swingProgress;
 	public boolean isRiding = false;
 
-	public void render(float var1, float var2, float var3, float var4, float var5, float var6) {
-	}
-
-	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
+	public static ModelRenderer n(int integer1, int integer2, float float3, float float4, float float5, int integer6, int integer7, int integer8, boolean boolean9) {
+		ModelRenderer modelRenderer9 = new ModelRenderer(integer1, integer2);
+		modelRenderer9.addBox(float3, float4, float5, integer6, integer7, integer8);
+		modelRenderer9.setRotationPoint(0.0F, 0.0F, 0.0F);
+		modelRenderer9.mirror = boolean9;
+		return modelRenderer9;
+	}
+
+	public void render(float float1, float float2, float float3, float float4, float float5, float float6) {
+	}
+
+	public void setRotationAngles(float float1, float float2, float float3, float float4, float float5, float float6) {
 	}
 }
--- net/minecraft/src/BlockGlass.java
+++ net/minecraft/src/BlockGlass.java
@@ -3,11 +3,11 @@
 import java.util.Random;
 
 public class BlockGlass extends BlockBreakable {
-	public BlockGlass(int var1, int var2, Material var3, boolean var4) {
-		super(var1, var2, var3, var4);
+	public BlockGlass(int id, int blockIndex, Material material, boolean localFlag) {
+		super(id, blockIndex, material, localFlag);
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 0;
 	}
 }
--- net/minecraft/src/ChunkCoordinates.java
+++ net/minecraft/src/ChunkCoordinates.java
@@ -4,17 +4,17 @@
 	public final int posX;
 	public final int posZ;
 
-	public ChunkCoordinates(int var1, int var2) {
-		this.posX = var1;
-		this.posZ = var2;
+	public ChunkCoordinates(int posX, int posZ) {
+		this.posX = posX;
+		this.posZ = posZ;
 	}
 
-	public boolean equals(Object var1) {
-		if(!(var1 instanceof ChunkCoordinates)) {
+	public boolean equals(Object object) {
+		if(!(object instanceof ChunkCoordinates)) {
 			return false;
 		} else {
-			ChunkCoordinates var2 = (ChunkCoordinates)var1;
-			return this.posX == var2.posX && this.posZ == var2.posZ;
+			ChunkCoordinates chunkCoordinates2 = (ChunkCoordinates)object;
+			return this.posX == chunkCoordinates2.posX && this.posZ == chunkCoordinates2.posZ;
 		}
 	}
 
