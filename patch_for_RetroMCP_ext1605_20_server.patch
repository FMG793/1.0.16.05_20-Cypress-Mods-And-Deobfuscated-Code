--- net/minecraft/src/MapGenBase.java
+++ net/minecraft/src/MapGenBase.java
@@ -6,21 +6,21 @@
 	protected int range = 8;
 	protected Random rand = new Random();
 
-	public void generate(ChunkProviderGenerate var1, World var2, int var3, int var4, byte[] var5) {
-		int var6 = this.range;
-		this.rand.setSeed(var2.randomSeed);
-		long var7 = this.rand.nextLong() / 2L * 2L + 1L;
-		long var9 = this.rand.nextLong() / 2L * 2L + 1L;
+	public void generate(ChunkProviderGenerate chunkProviderGenerate, World world, int integer3, int integer4, byte[] data) {
+		int i6 = this.range;
+		this.rand.setSeed(world.randomSeed);
+		long j7 = this.rand.nextLong() / 2L * 2L + 1L;
+		long j9 = this.rand.nextLong() / 2L * 2L + 1L;
 
-		for(int var11 = var3 - var6; var11 <= var3 + var6; ++var11) {
-			for(int var12 = var4 - var6; var12 <= var4 + var6; ++var12) {
-				this.rand.setSeed((long)var11 * var7 + (long)var12 * var9 ^ var2.randomSeed);
-				this.recursiveGenerate(var2, var11, var12, var3, var4, var5);
+		for(int i11 = integer3 - i6; i11 <= integer3 + i6; ++i11) {
+			for(int i12 = integer4 - i6; i12 <= integer4 + i6; ++i12) {
+				this.rand.setSeed((long)i11 * j7 + (long)i12 * j9 ^ world.randomSeed);
+				this.recursiveGenerate(world, i11, i12, integer3, integer4, data);
 			}
 		}
 
 	}
 
-	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
+	protected void recursiveGenerate(World world, int integer2, int integer3, int integer4, int integer5, byte[] data) {
 	}
 }
--- net/minecraft/src/ItemBlock.java
+++ net/minecraft/src/ItemBlock.java
@@ -3,50 +3,50 @@
 public class ItemBlock extends Item {
 	private int blockID;
 
-	public ItemBlock(int var1) {
-		super(var1);
-		this.blockID = var1 + 256;
-		this.setIconIndex(Block.blocksList[var1 + 256].getBlockTextureFromSide(2));
+	public ItemBlock(int itemID) {
+		super(itemID);
+		this.blockID = itemID + 256;
+		this.setIconIndex(Block.blocksList[itemID + 256].getBlockTextureFromSide(2));
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var3.getBlockId(var4, var5, var6) == Block.snow.blockID) {
-			var7 = 0;
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(world.getBlockId(x, y, z) == Block.snow.blockID) {
+			side = 0;
 		} else {
-			if(var7 == 0) {
-				--var5;
-			}
-
-			if(var7 == 1) {
-				++var5;
-			}
-
-			if(var7 == 2) {
-				--var6;
-			}
-
-			if(var7 == 3) {
-				++var6;
-			}
-
-			if(var7 == 4) {
-				--var4;
-			}
-
-			if(var7 == 5) {
-				++var4;
+			if(side == 0) {
+				--y;
+			}
+
+			if(side == 1) {
+				++y;
+			}
+
+			if(side == 2) {
+				--z;
+			}
+
+			if(side == 3) {
+				++z;
+			}
+
+			if(side == 4) {
+				--x;
+			}
+
+			if(side == 5) {
+				++x;
 			}
 		}
 
-		if(var1.stackSize == 0) {
+		if(stack.stackSize == 0) {
 			return false;
 		} else {
-			if(var3.canBlockBePlacedAt(this.blockID, var4, var5, var6, false)) {
-				Block var8 = Block.blocksList[this.blockID];
-				if(var3.setBlockWithNotify(var4, var5, var6, this.blockID)) {
-					Block.blocksList[this.blockID].onBlockPlaced(var3, var4, var5, var6, var7);
-					var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var8.stepSound.getStepSound(), (var8.stepSound.getVolume() + 1.0F) / 2.0F, var8.stepSound.getPitch() * 0.8F);
-					--var1.stackSize;
+			if(world.canBlockBePlacedAt(this.blockID, x, y, z, false)) {
+				Block block8 = Block.blocksList[this.blockID];
+				if(world.setBlockWithNotify(x, y, z, this.blockID)) {
+					Block.blocksList[this.blockID].onBlockPlaced(world, x, y, z, side);
+					world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), block8.stepSound.getStepSound(), (block8.stepSound.getVolume() + 1.0F) / 2.0F, block8.stepSound.getPitch() * 0.8F);
+					--stack.stackSize;
 				}
 			}
 
--- net/minecraft/src/Packet31RelEntityMove.java
+++ net/minecraft/src/Packet31RelEntityMove.java
@@ -8,25 +8,25 @@
 	public Packet31RelEntityMove() {
 	}
 
-	public Packet31RelEntityMove(int var1, byte var2, byte var3, byte var4) {
-		super(var1);
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.zPosition = var4;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		super.readPacketData(var1);
-		this.xPosition = var1.readByte();
-		this.yPosition = var1.readByte();
-		this.zPosition = var1.readByte();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		super.writePacket(var1);
-		var1.writeByte(this.xPosition);
-		var1.writeByte(this.yPosition);
-		var1.writeByte(this.zPosition);
+	public Packet31RelEntityMove(int entityID, byte xPosition, byte yPosition, byte zPosition) {
+		super(entityID);
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.zPosition = zPosition;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		super.readPacketData(dataInputStream);
+		this.xPosition = dataInputStream.readByte();
+		this.yPosition = dataInputStream.readByte();
+		this.zPosition = dataInputStream.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		super.writePacket(dataOutputStream);
+		dataOutputStream.writeByte(this.xPosition);
+		dataOutputStream.writeByte(this.yPosition);
+		dataOutputStream.writeByte(this.zPosition);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/NBTTagLong.java
+++ net/minecraft/src/NBTTagLong.java
@@ -10,16 +10,16 @@
 	public NBTTagLong() {
 	}
 
-	public NBTTagLong(long var1) {
-		this.longValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeLong(this.longValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.longValue = var1.readLong();
+	public NBTTagLong(long longValue) {
+		this.longValue = longValue;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeLong(this.longValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.longValue = dataInput.readLong();
 	}
 
 	public byte getType() {
--- net/minecraft/src/NBTTagCompound.java
+++ net/minecraft/src/NBTTagCompound.java
@@ -3,6 +3,7 @@
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
@@ -10,124 +11,125 @@
 public class NBTTagCompound extends NBTBase {
 	private Map tagMap = new HashMap();
 
-	void writeTagContents(DataOutput var1) throws IOException {
-		Iterator var2 = this.tagMap.values().iterator();
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		Iterator iterator2 = this.tagMap.values().iterator();
 
-		while(var2.hasNext()) {
-			NBTBase var3 = (NBTBase)var2.next();
-			NBTBase.writeNamedTag(var3, var1);
+		while(iterator2.hasNext()) {
+			NBTBase nBTBase3 = (NBTBase)iterator2.next();
+			NBTBase.writeNamedTag(nBTBase3, dataOutput);
 		}
 
-		var1.writeByte(0);
+		dataOutput.writeByte(0);
 	}
 
-	void readTagContents(DataInput var1) throws IOException {
+	void readTagContents(DataInput dataInput) throws IOException {
 		this.tagMap.clear();
 
-		while(true) {
-			NBTBase var2 = NBTBase.readNamedTag(var1);
-			if(var2.getType() == 0) {
-				return;
-			}
-
-			this.tagMap.put(var2.getKey(), var2);
+		NBTBase nBTBase2;
+		while((nBTBase2 = NBTBase.readNamedTag(dataInput)).getType() != 0) {
+			this.tagMap.put(nBTBase2.getKey(), nBTBase2);
 		}
+
+	}
+
+	public Collection func_7360_91CrfT50173Xe4kQ2vq9lEpJ963CtEf8PFJK4fL15cYgBZ78AKW8QD58ZBc6() {
+		return this.tagMap.values();
 	}
 
 	public byte getType() {
 		return (byte)10;
 	}
 
-	public void setTag(String var1, NBTBase var2) {
-		this.tagMap.put(var1, var2.setKey(var1));
-	}
-
-	public void setByte(String var1, byte var2) {
-		this.tagMap.put(var1, (new NBTTagByte(var2)).setKey(var1));
-	}
-
-	public void setShort(String var1, short var2) {
-		this.tagMap.put(var1, (new NBTTagShort(var2)).setKey(var1));
-	}
-
-	public void setInteger(String var1, int var2) {
-		this.tagMap.put(var1, (new NBTTagInt(var2)).setKey(var1));
-	}
-
-	public void setLong(String var1, long var2) {
-		this.tagMap.put(var1, (new NBTTagLong(var2)).setKey(var1));
-	}
-
-	public void setFloat(String var1, float var2) {
-		this.tagMap.put(var1, (new NBTTagFloat(var2)).setKey(var1));
-	}
-
-	public void setDouble(String var1, double var2) {
-		this.tagMap.put(var1, (new NBTTagDouble(var2)).setKey(var1));
-	}
-
-	public void setString(String var1, String var2) {
-		this.tagMap.put(var1, (new NBTTagString(var2)).setKey(var1));
-	}
-
-	public void setByteArray(String var1, byte[] var2) {
-		this.tagMap.put(var1, (new NBTTagByteArray(var2)).setKey(var1));
-	}
-
-	public void setCompoundTag(String var1, NBTTagCompound var2) {
-		this.tagMap.put(var1, var2.setKey(var1));
-	}
-
-	public void setBoolean(String var1, boolean var2) {
-		this.setByte(var1, (byte)(var2 ? 1 : 0));
-	}
-
-	public boolean hasKey(String var1) {
-		return this.tagMap.containsKey(var1);
-	}
-
-	public byte getByte(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0 : ((NBTTagByte)this.tagMap.get(var1)).byteValue;
-	}
-
-	public short getShort(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0 : ((NBTTagShort)this.tagMap.get(var1)).shortValue;
-	}
-
-	public int getInteger(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0 : ((NBTTagInt)this.tagMap.get(var1)).intValue;
-	}
-
-	public long getLong(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0L : ((NBTTagLong)this.tagMap.get(var1)).longValue;
-	}
-
-	public float getFloat(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0.0F : ((NBTTagFloat)this.tagMap.get(var1)).floatValue;
-	}
-
-	public double getDouble(String var1) {
-		return !this.tagMap.containsKey(var1) ? 0.0D : ((NBTTagDouble)this.tagMap.get(var1)).doubleValue;
-	}
-
-	public String getString(String var1) {
-		return !this.tagMap.containsKey(var1) ? "" : ((NBTTagString)this.tagMap.get(var1)).stringValue;
-	}
-
-	public byte[] getByteArray(String var1) {
-		return !this.tagMap.containsKey(var1) ? new byte[0] : ((NBTTagByteArray)this.tagMap.get(var1)).byteArray;
-	}
-
-	public NBTTagCompound getCompoundTag(String var1) {
-		return !this.tagMap.containsKey(var1) ? new NBTTagCompound() : (NBTTagCompound)this.tagMap.get(var1);
-	}
-
-	public NBTTagList getTagList(String var1) {
-		return !this.tagMap.containsKey(var1) ? new NBTTagList() : (NBTTagList)this.tagMap.get(var1);
-	}
-
-	public boolean getBoolean(String var1) {
-		return this.getByte(var1) != 0;
+	public void setTag(String key, NBTBase nbtbase) {
+		this.tagMap.put(key, nbtbase.setKey(key));
+	}
+
+	public void setByte(String key, byte byteValue) {
+		this.tagMap.put(key, (new NBTTagByte(byteValue)).setKey(key));
+	}
+
+	public void setShort(String key, short shortValue) {
+		this.tagMap.put(key, (new NBTTagShort(shortValue)).setKey(key));
+	}
+
+	public void setInteger(String key, int integerValue) {
+		this.tagMap.put(key, (new NBTTagInt(integerValue)).setKey(key));
+	}
+
+	public void setLong(String key, long longValue) {
+		this.tagMap.put(key, (new NBTTagLong(longValue)).setKey(key));
+	}
+
+	public void setFloat(String key, float floatValue) {
+		this.tagMap.put(key, (new NBTTagFloat(floatValue)).setKey(key));
+	}
+
+	public void setDouble(String key, double doubleValue) {
+		this.tagMap.put(key, (new NBTTagDouble(doubleValue)).setKey(key));
+	}
+
+	public void setString(String key, String stringValue) {
+		this.tagMap.put(key, (new NBTTagString(stringValue)).setKey(key));
+	}
+
+	public void setByteArray(String key, byte[] byteArray) {
+		this.tagMap.put(key, (new NBTTagByteArray(byteArray)).setKey(key));
+	}
+
+	public void setCompoundTag(String key, NBTTagCompound nbttagcompound) {
+		this.tagMap.put(key, nbttagcompound.setKey(key));
+	}
+
+	public void setBoolean(String key, boolean booleanValue) {
+		this.setByte(key, (byte)(booleanValue ? 1 : 0));
+	}
+
+	public boolean hasKey(String key) {
+		return this.tagMap.containsKey(key);
+	}
+
+	public byte getByte(String key) {
+		return !this.tagMap.containsKey(key) ? 0 : ((NBTTagByte)this.tagMap.get(key)).byteValue;
+	}
+
+	public short getShort(String key) {
+		return !this.tagMap.containsKey(key) ? 0 : ((NBTTagShort)this.tagMap.get(key)).shortValue;
+	}
+
+	public int getInteger(String key) {
+		return !this.tagMap.containsKey(key) ? 0 : ((NBTTagInt)this.tagMap.get(key)).intValue;
+	}
+
+	public long getLong(String key) {
+		return !this.tagMap.containsKey(key) ? 0L : ((NBTTagLong)this.tagMap.get(key)).longValue;
+	}
+
+	public float getFloat(String key) {
+		return !this.tagMap.containsKey(key) ? 0.0F : ((NBTTagFloat)this.tagMap.get(key)).floatValue;
+	}
+
+	public double getDouble(String key) {
+		return !this.tagMap.containsKey(key) ? 0.0D : ((NBTTagDouble)this.tagMap.get(key)).doubleValue;
+	}
+
+	public String getString(String key) {
+		return !this.tagMap.containsKey(key) ? "" : ((NBTTagString)this.tagMap.get(key)).stringValue;
+	}
+
+	public byte[] getByteArray(String key) {
+		return !this.tagMap.containsKey(key) ? new byte[0] : ((NBTTagByteArray)this.tagMap.get(key)).byteArray;
+	}
+
+	public NBTTagCompound getCompoundTag(String key) {
+		return !this.tagMap.containsKey(key) ? new NBTTagCompound() : (NBTTagCompound)this.tagMap.get(key);
+	}
+
+	public NBTTagList getTagList(String key) {
+		return !this.tagMap.containsKey(key) ? new NBTTagList() : (NBTTagList)this.tagMap.get(key);
+	}
+
+	public boolean getBoolean(String key) {
+		return this.getByte(key) != 0;
 	}
 
 	public String toString() {
--- net/minecraft/src/ChunkProviderServer.java
+++ net/minecraft/src/ChunkProviderServer.java
@@ -17,149 +17,149 @@
 	private List loadedChunks = new ArrayList();
 	private WorldServer worldObj;
 
-	public ChunkProviderServer(WorldServer var1, IChunkLoader var2, IChunkProvider var3) {
-		this.chunk = new Chunk(var1, new byte[-Short.MIN_VALUE], 0, 0);
+	public ChunkProviderServer(WorldServer worldServer, IChunkLoader chunkLoader, IChunkProvider chunkProvider) {
+		this.chunk = new Chunk(worldServer, new byte[32768], 0, 0);
 		this.chunk.isChunkRendered = true;
 		this.chunk.neverSave = true;
-		this.worldObj = var1;
-		this.serverChunkLoader = var2;
-		this.serverChunkProvider = var3;
-	}
-
-	public boolean chunkExists(int var1, int var2) {
-		ChunkCoordinates var3 = new ChunkCoordinates(var1, var2);
-		return this.id2ChunkMap.containsKey(var3);
-	}
-
-	public void dropChunk(int var1, int var2) {
-		int var3 = var1 * 16 + 8 - this.worldObj.spawnX;
-		int var4 = var2 * 16 + 8 - this.worldObj.spawnZ;
-		byte var5 = 20;
-		if(var3 < -var5 || var3 > var5 || var4 < -var5 || var4 > var5) {
-			this.droppedChunksSet.add(new ChunkCoordinates(var1, var2));
+		this.worldObj = worldServer;
+		this.serverChunkLoader = chunkLoader;
+		this.serverChunkProvider = chunkProvider;
+	}
+
+	public boolean chunkExists(int x, int z) {
+		ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(x, z);
+		return this.id2ChunkMap.containsKey(chunkCoordinates3);
+	}
+
+	public void dropChunk(int integer1, int integer2) {
+		int i3 = integer1 * 16 + 8 - this.worldObj.spawnX;
+		int i4 = integer2 * 16 + 8 - this.worldObj.spawnZ;
+		byte b5 = 20;
+		if(i3 < -b5 || i3 > b5 || i4 < -b5 || i4 > b5) {
+			this.droppedChunksSet.add(new ChunkCoordinates(integer1, integer2));
 		}
 
 	}
 
-	public Chunk loadChunk(int var1, int var2) {
-		ChunkCoordinates var3 = new ChunkCoordinates(var1, var2);
-		this.droppedChunksSet.remove(new ChunkCoordinates(var1, var2));
-		Chunk var4 = (Chunk)this.id2ChunkMap.get(var3);
-		if(var4 == null) {
-			var4 = this.loadAndSaveChunk(var1, var2);
-			if(var4 == null) {
+	public Chunk loadChunk(int x, int z) {
+		ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(x, z);
+		this.droppedChunksSet.remove(new ChunkCoordinates(x, z));
+		Chunk chunk4 = (Chunk)this.id2ChunkMap.get(chunkCoordinates3);
+		if(chunk4 == null) {
+			chunk4 = this.loadAndSaveChunk(x, z);
+			if(chunk4 == null) {
 				if(this.serverChunkProvider == null) {
-					var4 = this.chunk;
+					chunk4 = this.chunk;
 				} else {
-					var4 = this.serverChunkProvider.provideChunk(var1, var2);
+					chunk4 = this.serverChunkProvider.provideChunk(x, z);
 				}
 			}
 
-			this.id2ChunkMap.put(var3, var4);
-			this.loadedChunks.add(var4);
-			if(var4 != null) {
-				var4.onChunkLoad();
-			}
-
-			if(!var4.isTerrainPopulated && this.chunkExists(var1 + 1, var2 + 1) && this.chunkExists(var1, var2 + 1) && this.chunkExists(var1 + 1, var2)) {
-				this.populate(this, var1, var2);
-			}
-
-			if(this.chunkExists(var1 - 1, var2) && !this.provideChunk(var1 - 1, var2).isTerrainPopulated && this.chunkExists(var1 - 1, var2 + 1) && this.chunkExists(var1, var2 + 1) && this.chunkExists(var1 - 1, var2)) {
-				this.populate(this, var1 - 1, var2);
-			}
-
-			if(this.chunkExists(var1, var2 - 1) && !this.provideChunk(var1, var2 - 1).isTerrainPopulated && this.chunkExists(var1 + 1, var2 - 1) && this.chunkExists(var1, var2 - 1) && this.chunkExists(var1 + 1, var2)) {
-				this.populate(this, var1, var2 - 1);
-			}
-
-			if(this.chunkExists(var1 - 1, var2 - 1) && !this.provideChunk(var1 - 1, var2 - 1).isTerrainPopulated && this.chunkExists(var1 - 1, var2 - 1) && this.chunkExists(var1, var2 - 1) && this.chunkExists(var1 - 1, var2)) {
-				this.populate(this, var1 - 1, var2 - 1);
+			this.id2ChunkMap.put(chunkCoordinates3, chunk4);
+			this.loadedChunks.add(chunk4);
+			if(chunk4 != null) {
+				chunk4.onChunkLoad();
+			}
+
+			if(!chunk4.isTerrainPopulated && this.chunkExists(x + 1, z + 1) && this.chunkExists(x, z + 1) && this.chunkExists(x + 1, z)) {
+				this.populate(this, x, z);
+			}
+
+			if(this.chunkExists(x - 1, z) && !this.provideChunk(x - 1, z).isTerrainPopulated && this.chunkExists(x - 1, z + 1) && this.chunkExists(x, z + 1) && this.chunkExists(x - 1, z)) {
+				this.populate(this, x - 1, z);
+			}
+
+			if(this.chunkExists(x, z - 1) && !this.provideChunk(x, z - 1).isTerrainPopulated && this.chunkExists(x + 1, z - 1) && this.chunkExists(x, z - 1) && this.chunkExists(x + 1, z)) {
+				this.populate(this, x, z - 1);
+			}
+
+			if(this.chunkExists(x - 1, z - 1) && !this.provideChunk(x - 1, z - 1).isTerrainPopulated && this.chunkExists(x - 1, z - 1) && this.chunkExists(x, z - 1) && this.chunkExists(x - 1, z)) {
+				this.populate(this, x - 1, z - 1);
 			}
 		}
 
-		return var4;
-	}
-
-	public Chunk provideChunk(int var1, int var2) {
-		ChunkCoordinates var3 = new ChunkCoordinates(var1, var2);
-		Chunk var4 = (Chunk)this.id2ChunkMap.get(var3);
-		return var4 == null ? (this.worldObj.worldChunkLoadOverride ? this.loadChunk(var1, var2) : this.chunk) : var4;
-	}
-
-	private Chunk loadAndSaveChunk(int var1, int var2) {
+		return chunk4;
+	}
+
+	public Chunk provideChunk(int x, int z) {
+		ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(x, z);
+		Chunk chunk4 = (Chunk)this.id2ChunkMap.get(chunkCoordinates3);
+		return chunk4 == null ? (this.worldObj.worldChunkLoadOverride ? this.loadChunk(x, z) : this.chunk) : chunk4;
+	}
+
+	private Chunk loadAndSaveChunk(int x, int z) {
 		if(this.serverChunkLoader == null) {
 			return null;
 		} else {
 			try {
-				Chunk var3 = this.serverChunkLoader.loadChunk(this.worldObj, var1, var2);
-				if(var3 != null) {
-					var3.lastSaveTime = this.worldObj.worldTime;
+				Chunk chunk3 = this.serverChunkLoader.loadChunk(this.worldObj, x, z);
+				if(chunk3 != null) {
+					chunk3.lastSaveTime = this.worldObj.worldTime;
 				}
 
-				return var3;
-			} catch (Exception var4) {
-				var4.printStackTrace();
+				return chunk3;
+			} catch (Exception exception4) {
+				exception4.printStackTrace();
 				return null;
 			}
 		}
 	}
 
-	private void saveExtraChunkData(Chunk var1) {
-		if(this.serverChunkLoader != null) {
-			try {
-				this.serverChunkLoader.saveExtraChunkData(this.worldObj, var1);
-			} catch (Exception var3) {
-				var3.printStackTrace();
-			}
-
-		}
-	}
-
-	private void saveChunk(Chunk var1) {
-		if(this.serverChunkLoader != null) {
-			try {
-				var1.lastSaveTime = this.worldObj.worldTime;
-				this.serverChunkLoader.saveChunk(this.worldObj, var1);
-			} catch (IOException var3) {
-				var3.printStackTrace();
-			}
-
-		}
-	}
-
-	public void populate(IChunkProvider var1, int var2, int var3) {
-		Chunk var4 = this.provideChunk(var2, var3);
-		if(!var4.isTerrainPopulated) {
-			var4.isTerrainPopulated = true;
+	private void saveExtraChunkData(Chunk chunk) {
+		if(this.serverChunkLoader != null) {
+			try {
+				this.serverChunkLoader.saveExtraChunkData(this.worldObj, chunk);
+			} catch (Exception exception3) {
+				exception3.printStackTrace();
+			}
+		}
+
+	}
+
+	private void saveChunk(Chunk chunk) {
+		if(this.serverChunkLoader != null) {
+			try {
+				chunk.lastSaveTime = this.worldObj.worldTime;
+				this.serverChunkLoader.saveChunk(this.worldObj, chunk);
+			} catch (IOException iOException3) {
+				iOException3.printStackTrace();
+			}
+		}
+
+	}
+
+	public void populate(IChunkProvider chunkProvider, int x, int z) {
+		Chunk chunk4 = this.provideChunk(x, z);
+		if(!chunk4.isTerrainPopulated) {
+			chunk4.isTerrainPopulated = true;
 			if(this.serverChunkProvider != null) {
-				this.serverChunkProvider.populate(var1, var2, var3);
-				var4.setChunkModified();
+				this.serverChunkProvider.populate(chunkProvider, x, z);
+				chunk4.setChunkModified();
 			}
 		}
 
 	}
 
-	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
-		int var3 = 0;
+	public boolean saveChunks(boolean flag, IProgressUpdate progressUpdate) {
+		int i3 = 0;
 
-		for(int var4 = 0; var4 < this.loadedChunks.size(); ++var4) {
-			Chunk var5 = (Chunk)this.loadedChunks.get(var4);
-			if(var1 && !var5.neverSave) {
-				this.saveExtraChunkData(var5);
+		for(int i4 = 0; i4 < this.loadedChunks.size(); ++i4) {
+			Chunk chunk5 = (Chunk)this.loadedChunks.get(i4);
+			if(flag && !chunk5.neverSave) {
+				this.saveExtraChunkData(chunk5);
 			}
 
-			if(var5.needsSaving(var1)) {
-				this.saveChunk(var5);
-				var5.isModified = false;
-				++var3;
-				if(var3 == 2 && !var1) {
+			if(chunk5.needsSaving(flag)) {
+				this.saveChunk(chunk5);
+				chunk5.isModified = false;
+				++i3;
+				if(i3 == 2 && !flag) {
 					return false;
 				}
 			}
 		}
 
-		if(var1) {
+		if(flag) {
 			if(this.serverChunkLoader == null) {
 				return true;
 			}
@@ -172,16 +172,16 @@
 
 	public boolean unload100OldestChunks() {
 		if(!this.worldObj.levelSaving) {
-			for(int var1 = 0; var1 < 16; ++var1) {
+			for(int i1 = 0; i1 < 16; ++i1) {
 				if(!this.droppedChunksSet.isEmpty()) {
-					ChunkCoordinates var2 = (ChunkCoordinates)this.droppedChunksSet.iterator().next();
-					Chunk var3 = this.provideChunk(var2.posX, var2.posZ);
-					var3.onChunkUnload();
-					this.saveChunk(var3);
-					this.saveExtraChunkData(var3);
-					this.droppedChunksSet.remove(var2);
-					this.id2ChunkMap.remove(var2);
-					this.loadedChunks.remove(var3);
+					ChunkCoordinates chunkCoordinates2 = (ChunkCoordinates)this.droppedChunksSet.iterator().next();
+					Chunk chunk3 = this.provideChunk(chunkCoordinates2.posX, chunkCoordinates2.posZ);
+					chunk3.onChunkUnload();
+					this.saveChunk(chunk3);
+					this.saveExtraChunkData(chunk3);
+					this.droppedChunksSet.remove(chunkCoordinates2);
+					this.id2ChunkMap.remove(chunkCoordinates2);
+					this.loadedChunks.remove(chunk3);
 				}
 			}
 
--- net/minecraft/src/BlockLog.java
+++ net/minecraft/src/BlockLog.java
@@ -3,20 +3,20 @@
 import java.util.Random;
 
 public class BlockLog extends Block {
-	protected BlockLog(int var1) {
-		super(var1, Material.wood);
+	protected BlockLog(int id) {
+		super(id, Material.wood);
 		this.blockIndexInTexture = 20;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 1;
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Block.wood.blockID;
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? 21 : (var1 == 0 ? 21 : 20);
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? 21 : (side == 0 ? 21 : 20);
 	}
 }
--- /dev/null
+++ net/minecraft/src/EnumHouseSmall.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+enum EnumHouseSmall {
+	NORMAL,
+	WINDOW,
+	DOOR;
+    private static final /* synthetic */ EnumHouseSmall[] field_7880_8Ssm2U21bViY426EejVdS2moVwS4A8Uj1KV5Ms6ilt2Eco7Ge4qfg7xhqH7a;
+
+	public static EnumHouseSmall[] func_7876_4Jmu72okoXZK77Fn7N5dPqJ7I61Z0rUf5rXf020DjH00U9ph6OIsYif2WG0s() {
+		return (EnumHouseSmall[])field_7880_8Ssm2U21bViY426EejVdS2moVwS4A8Uj1KV5Ms6ilt2Eco7Ge4qfg7xhqH7a.clone();
+	}
+
+	public static EnumHouseSmall func_7875_4DE8K943tnZ4mU298E0bJ3nXEW3iZ87ZD6eBk5Mim8vytXU7x9PW557Rg3Fp(String string) {
+		return (EnumHouseSmall)Enum.valueOf(EnumHouseSmall.class, string);
+	}
+
+	private static EnumHouseSmall[] func_7874_5tXS5sS5c4qgbUlvozc1od6AGt1r1ELDa25UX8BHEa719mE06fLO68XBg2Mg() {
+		return new EnumHouseSmall[]{NORMAL, WINDOW, DOOR};
+	}
+
+    static {
+        field_7880_8Ssm2U21bViY426EejVdS2moVwS4A8Uj1KV5Ms6ilt2Eco7Ge4qfg7xhqH7a = EnumHouseSmall.func_7874_5tXS5sS5c4qgbUlvozc1od6AGt1r1ELDa25UX8BHEa719mE06fLO68XBg2Mg();
+    }
+}
--- net/minecraft/src/EntityItem.java
+++ net/minecraft/src/EntityItem.java
@@ -8,12 +8,12 @@
 	private int health = 5;
 	public float hoverStart = (float)(Math.random() * Math.PI * 2.0D);
 
-	public EntityItem(World var1, double var2, double var4, double var6, ItemStack var8) {
-		super(var1);
+	public EntityItem(World world, double x, double y, double z, ItemStack item) {
+		super(world);
 		this.setSize(0.25F, 0.25F);
 		this.yOffset = this.height / 2.0F;
-		this.setPosition(var2, var4, var6);
-		this.item = var8;
+		this.setPosition(x, y, z);
+		this.item = item;
 		this.rotationYaw = (float)(Math.random() * 360.0D);
 		this.motionX = (double)((float)(Math.random() * (double)0.2F - (double)0.1F));
 		this.motionY = (double)0.2F;
@@ -21,8 +21,8 @@
 		this.canTriggerWalking = false;
 	}
 
-	public EntityItem(World var1) {
-		super(var1);
+	public EntityItem(World world) {
+		super(world);
 		this.setSize(0.25F, 0.25F);
 		this.yOffset = this.height / 2.0F;
 	}
@@ -47,18 +47,18 @@
 		this.pushOutOfBlocks(this.posX, this.posY, this.posZ);
 		this.handleWaterMovement();
 		this.moveEntity(this.motionX, this.motionY, this.motionZ);
-		float var1 = 0.98F;
+		float f1 = 0.98F;
 		if(this.onGround) {
-			var1 = 0.1F * 0.1F * 58.8F;
-			int var2 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
-			if(var2 > 0) {
-				var1 = Block.blocksList[var2].slipperiness * 0.98F;
+			f1 = 0.58800006F;
+			int i2 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
+			if(i2 > 0) {
+				f1 = Block.blocksList[i2].slipperiness * 0.98F;
 			}
 		}
 
-		this.motionX *= (double)var1;
+		this.motionX *= (double)f1;
 		this.motionY *= (double)0.98F;
-		this.motionZ *= (double)var1;
+		this.motionZ *= (double)f1;
 		if(this.onGround) {
 			this.motionY *= -0.5D;
 		}
@@ -75,87 +75,87 @@
 		return this.worldObj.handleMaterialAcceleration(this.boundingBox, Material.water, this);
 	}
 
-	private boolean pushOutOfBlocks(double var1, double var3, double var5) {
-		int var7 = MathHelper.floor_double(var1);
-		int var8 = MathHelper.floor_double(var3);
-		int var9 = MathHelper.floor_double(var5);
-		double var10 = var1 - (double)var7;
-		double var12 = var3 - (double)var8;
-		double var14 = var5 - (double)var9;
-		if(Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8, var9)]) {
-			boolean var16 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7 - 1, var8, var9)];
-			boolean var17 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7 + 1, var8, var9)];
-			boolean var18 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8 - 1, var9)];
-			boolean var19 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8 + 1, var9)];
-			boolean var20 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8, var9 - 1)];
-			boolean var21 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8, var9 + 1)];
-			byte var22 = -1;
-			double var23 = 9999.0D;
-			if(var16 && var10 < var23) {
-				var23 = var10;
-				var22 = 0;
-			}
-
-			if(var17 && 1.0D - var10 < var23) {
-				var23 = 1.0D - var10;
-				var22 = 1;
-			}
-
-			if(var18 && var12 < var23) {
-				var23 = var12;
-				var22 = 2;
-			}
-
-			if(var19 && 1.0D - var12 < var23) {
-				var23 = 1.0D - var12;
-				var22 = 3;
-			}
-
-			if(var20 && var14 < var23) {
-				var23 = var14;
-				var22 = 4;
-			}
-
-			if(var21 && 1.0D - var14 < var23) {
-				var23 = 1.0D - var14;
-				var22 = 5;
-			}
-
-			float var25 = this.rand.nextFloat() * 0.2F + 0.1F;
-			if(var22 == 0) {
-				this.motionX = (double)(-var25);
-			}
-
-			if(var22 == 1) {
-				this.motionX = (double)var25;
-			}
-
-			if(var22 == 2) {
-				this.motionY = (double)(-var25);
-			}
-
-			if(var22 == 3) {
-				this.motionY = (double)var25;
-			}
-
-			if(var22 == 4) {
-				this.motionZ = (double)(-var25);
-			}
-
-			if(var22 == 5) {
-				this.motionZ = (double)var25;
+	private boolean pushOutOfBlocks(double x, double y, double z) {
+		int i7 = MathHelper.floor_double(x);
+		int i8 = MathHelper.floor_double(y);
+		int i9 = MathHelper.floor_double(z);
+		double d10 = x - (double)i7;
+		double d12 = y - (double)i8;
+		double d14 = z - (double)i9;
+		if(Block.opaqueCubeLookup[this.worldObj.getBlockId(i7, i8, i9)]) {
+			boolean z16 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(i7 - 1, i8, i9)];
+			boolean z17 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(i7 + 1, i8, i9)];
+			boolean z18 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(i7, i8 - 1, i9)];
+			boolean z19 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(i7, i8 + 1, i9)];
+			boolean z20 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(i7, i8, i9 - 1)];
+			boolean z21 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(i7, i8, i9 + 1)];
+			byte b22 = -1;
+			double d23 = 9999.0D;
+			if(z16 && d10 < d23) {
+				d23 = d10;
+				b22 = 0;
+			}
+
+			if(z17 && 1.0D - d10 < d23) {
+				d23 = 1.0D - d10;
+				b22 = 1;
+			}
+
+			if(z18 && d12 < d23) {
+				d23 = d12;
+				b22 = 2;
+			}
+
+			if(z19 && 1.0D - d12 < d23) {
+				d23 = 1.0D - d12;
+				b22 = 3;
+			}
+
+			if(z20 && d14 < d23) {
+				d23 = d14;
+				b22 = 4;
+			}
+
+			if(z21 && 1.0D - d14 < d23) {
+				d23 = 1.0D - d14;
+				b22 = 5;
+			}
+
+			float f25 = this.rand.nextFloat() * 0.2F + 0.1F;
+			if(b22 == 0) {
+				this.motionX = (double)(-f25);
+			}
+
+			if(b22 == 1) {
+				this.motionX = (double)f25;
+			}
+
+			if(b22 == 2) {
+				this.motionY = (double)(-f25);
+			}
+
+			if(b22 == 3) {
+				this.motionY = (double)f25;
+			}
+
+			if(b22 == 4) {
+				this.motionZ = (double)(-f25);
+			}
+
+			if(b22 == 5) {
+				this.motionZ = (double)f25;
 			}
 		}
 
 		return false;
 	}
 
-	protected void dealFireDamage(int var1) {
-		this.attackEntityFrom((Entity)null, var1);
+	protected void dealFireDamage(int fireDamage) {
+		this.attackEntityFrom((Entity)null, fireDamage);
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
-		this.health -= var2;
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		this.health -= damage;
 		if(this.health <= 0) {
 			this.setEntityDead();
 		}
@@ -163,28 +163,28 @@
 		return false;
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setShort("Health", (short)((byte)this.health));
-		var1.setShort("Age", (short)this.age);
-		var1.setCompoundTag("Item", this.item.writeToNBT(new NBTTagCompound()));
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.health = var1.getShort("Health") & 255;
-		this.age = var1.getShort("Age");
-		NBTTagCompound var2 = var1.getCompoundTag("Item");
-		this.item = new ItemStack(var2);
-	}
-
-	public void onCollideWithPlayer(EntityPlayer var1) {
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setShort("Health", (short)((byte)this.health));
+		nbttagcompound.setShort("Age", (short)this.age);
+		nbttagcompound.setCompoundTag("Item", this.item.writeToNBT(new NBTTagCompound()));
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.health = nbttagcompound.getShort("Health") & 255;
+		this.age = nbttagcompound.getShort("Age");
+		NBTTagCompound nBTTagCompound2 = nbttagcompound.getCompoundTag("Item");
+		this.item = new ItemStack(nBTTagCompound2);
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
 		if(!this.worldObj.multiplayerWorld) {
-			int var2 = this.item.stackSize;
-			if(this.delayBeforeCanPickup == 0 && var1.inventory.addItemStackToInventory(this.item)) {
+			int i2 = this.item.stackSize;
+			if(this.delayBeforeCanPickup == 0 && entityPlayer.inventory.addItemStackToInventory(this.item)) {
 				this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-				var1.onItemPickup(this, var2);
+				entityPlayer.onItemPickup(this, i2);
 				this.setEntityDead();
 			}
-
 		}
+
 	}
 }
--- /dev/null
+++ net/minecraft/src/ItemEssenceGun.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class ItemEssenceGun extends Item {
+	public ItemEssenceGun(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		if(entityPlayer.inventory.consumeInventoryItem(ExtItems.essence.shiftedIndex)) {
+			worldObj.playSoundAtEntity(entityPlayer, "ext1605.neutralspecial", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+			worldObj.spawnEntityInWorld(new EntityEssenceProjectile(worldObj, entityPlayer));
+		}
+
+		return itemStack;
+	}
+}
--- net/minecraft/src/NetworkAcceptThread.java
+++ net/minecraft/src/NetworkAcceptThread.java
@@ -2,28 +2,29 @@
 
 import java.io.IOException;
 import java.net.Socket;
+
 import net.minecraft.server.MinecraftServer;
 
 class NetworkAcceptThread extends Thread {
 	final MinecraftServer minecraftServer;
 	final NetworkListenThread networkListenThread;
 
-	NetworkAcceptThread(NetworkListenThread var1, String var2, MinecraftServer var3) {
-		super(var2);
-		this.networkListenThread = var1;
-		this.minecraftServer = var3;
+	NetworkAcceptThread(NetworkListenThread thread, String string, MinecraftServer minecraftServer) {
+		super(string);
+		this.networkListenThread = thread;
+		this.minecraftServer = minecraftServer;
 	}
 
 	public void run() {
 		while(this.networkListenThread.isListening) {
 			try {
-				Socket var1 = NetworkListenThread.getServerSocket(this.networkListenThread).accept();
-				if(var1 != null) {
-					NetLoginHandler var2 = new NetLoginHandler(this.minecraftServer, var1, "Connection #" + NetworkListenThread.incrementConnections(this.networkListenThread));
-					NetworkListenThread.addPendingConnection(this.networkListenThread, var2);
+				Socket socket1 = NetworkListenThread.func_8610_41voW209yTKO2b18paAuunY1712JgE50rJH442q119F6mz2r253rt2BLXDQb(this.networkListenThread).accept();
+				if(socket1 != null) {
+					NetLoginHandler netLoginHandler2 = new NetLoginHandler(this.minecraftServer, socket1, "Connection #" + NetworkListenThread.func_8609_5g0AFYQNSP3ZbXbuCZ942McJ85ow25hrj0xU8TR8Jouu1a2xN4fNyG6SJF17(this.networkListenThread));
+					NetworkListenThread.func_8607_72ljcJ9BesDuyHMgowJsZ6V440BBEvDu7O4OMlbD41jF0Qz7lEcQB394qO1U(this.networkListenThread, netLoginHandler2);
 				}
-			} catch (IOException var3) {
-				var3.printStackTrace();
+			} catch (IOException iOException3) {
+				iOException3.printStackTrace();
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/Base64.java
@@ -1,0 +1,49 @@
+package net.minecraft.src;
+
+import java.util.Objects;
+
+public class Base64 {
+	public static Encoder getEncoder() {
+		return Encoder.RFC4648;
+	}
+
+	public static Encoder getUrlEncoder() {
+		return Encoder.RFC4648_URLSAFE;
+	}
+
+	public static Encoder getMimeEncoder() {
+		return Encoder.RFC2045;
+	}
+
+	public static Encoder getMimeEncoder(int integer, byte[] arr) {
+		Objects.requireNonNull(arr);
+		int[] i2 = Decoder.func_8390_88EVmzp5556INHMT4MdvvMpo50K6MkOJA28o5nIE2531vZegkcat9591wjst();
+		byte[] b3 = arr;
+		int i4 = arr.length;
+
+		for(int i5 = 0; i5 < i4; ++i5) {
+			byte b6 = b3[i5];
+			if(i2[b6 & 255] != -1) {
+				throw new IllegalArgumentException("Illegal base64 line separator character 0x" + Integer.toString(b6, 16));
+			}
+		}
+
+		if(integer <= 0) {
+			return Encoder.RFC4648;
+		} else {
+			return new Encoder(false, arr, integer >> 2 << 2, true);
+		}
+	}
+
+	public static Decoder getDecoder() {
+		return Decoder.RFC4648;
+	}
+
+	public static Decoder getUrlDecoder() {
+		return Decoder.RFC4648_URLSAFE;
+	}
+
+	public static Decoder getMimeDecoder() {
+		return Decoder.RFC2045;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EnumCoordinatesUnknownClass.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+class EnumCoordinatesUnknownClass {
+    static final /* synthetic */ int[] field_8449_1veWi2ablcFnXHyl6vSBXA83tTw4d8VW6g0w8nUOd2VTaXae402v86i8Bk91;
+
+    static {
+        field_8449_1veWi2ablcFnXHyl6vSBXA83tTw4d8VW6g0w8nUOd2VTaXae402v86i8Bk91 = new int[Direction.func_8441_0JU9spv8gfQ01t39tL0PKp2B9wecZGjmyC7mN26kj368SF582kfm10wcI3ky().length];
+        try {
+            EnumCoordinatesUnknownClass.field_8449_1veWi2ablcFnXHyl6vSBXA83tTw4d8VW6g0w8nUOd2VTaXae402v86i8Bk91[Direction.XM.ordinal()] = 1;
+        }
+        catch (final NoSuchFieldError noSuchFieldError) {}
+        try {
+            EnumCoordinatesUnknownClass.field_8449_1veWi2ablcFnXHyl6vSBXA83tTw4d8VW6g0w8nUOd2VTaXae402v86i8Bk91[Direction.XP.ordinal()] = 2;
+        }
+        catch (final NoSuchFieldError noSuchFieldError2) {}
+        try {
+            EnumCoordinatesUnknownClass.field_8449_1veWi2ablcFnXHyl6vSBXA83tTw4d8VW6g0w8nUOd2VTaXae402v86i8Bk91[Direction.ZM.ordinal()] = 3;
+        }
+        catch (final NoSuchFieldError noSuchFieldError3) {}
+        try {
+            EnumCoordinatesUnknownClass.field_8449_1veWi2ablcFnXHyl6vSBXA83tTw4d8VW6g0w8nUOd2VTaXae402v86i8Bk91[Direction.ZP.ordinal()] = 4;
+        }
+        catch (final NoSuchFieldError noSuchFieldError4) {}
+    }
+}
--- net/minecraft/src/NBTTagString.java
+++ net/minecraft/src/NBTTagString.java
@@ -10,19 +10,19 @@
 	public NBTTagString() {
 	}
 
-	public NBTTagString(String var1) {
-		this.stringValue = var1;
-		if(var1 == null) {
+	public NBTTagString(String stringValue) {
+		this.stringValue = stringValue;
+		if(stringValue == null) {
 			throw new IllegalArgumentException("Empty string not allowed");
 		}
 	}
 
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeUTF(this.stringValue);
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeUTF(this.stringValue);
 	}
 
-	void readTagContents(DataInput var1) throws IOException {
-		this.stringValue = var1.readUTF();
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.stringValue = dataInput.readUTF();
 	}
 
 	public byte getType() {
--- net/minecraft/src/ItemSpade.java
+++ net/minecraft/src/ItemSpade.java
@@ -3,11 +3,11 @@
 public class ItemSpade extends ItemTool {
 	private static Block[] blocksEffectiveAgainst = new Block[]{Block.grass, Block.dirt, Block.sand, Block.gravel, Block.snow, Block.blockSnow, Block.blockClay};
 
-	public ItemSpade(int var1, int var2) {
-		super(var1, 1, var2, blocksEffectiveAgainst);
+	public ItemSpade(int itemID, int material) {
+		super(itemID, 1, material, blocksEffectiveAgainst);
 	}
 
-	public boolean canHarvestBlock(Block var1) {
-		return var1 == Block.snow ? true : var1 == Block.blockSnow;
+	public boolean canHarvestBlock(Block block) {
+		return block == Block.snow ? true : block == Block.blockSnow;
 	}
 }
--- net/minecraft/src/SpawnerServer.java
+++ net/minecraft/src/SpawnerServer.java
@@ -3,15 +3,15 @@
 class SpawnerServer extends SpawnerAnimals {
 	final WorldServer worldServer;
 
-	SpawnerServer(WorldServer var1, int var2, Class var3, Class[] var4) {
-		super(var2, var3, var4);
-		this.worldServer = var1;
+	SpawnerServer(WorldServer na, int integer, Class class3, Class[] arr) {
+		super(integer, class3, arr);
+		this.worldServer = na;
 	}
 
-	protected ChunkPosition getRandomSpawningPointInChunk(World var1, int var2, int var3) {
-		int var4 = var2 + var1.rand.nextInt(16);
-		int var5 = var1.rand.nextInt(var1.rand.nextInt(120) + 8);
-		int var6 = var3 + var1.rand.nextInt(16);
-		return new ChunkPosition(var4, var5, var6);
+	protected ChunkPosition getRandomSpawningPointInChunk(World cv, int integer2, int integer3) {
+		int i4 = integer2 + cv.rand.nextInt(16);
+		int i5 = cv.rand.nextInt(cv.rand.nextInt(120) + 8);
+		int i6 = integer3 + cv.rand.nextInt(16);
+		return new ChunkPosition(i4, i5, i6);
 	}
 }
--- /dev/null
+++ net/minecraft/src/Packet8RespondSkinRequest.java
@@ -1,0 +1,54 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.zip.CRC32;
+
+public class Packet8RespondSkinRequest extends Packet {
+	public String pname;
+	public int rqChunk;
+	private byte[] data;
+
+	public Packet8RespondSkinRequest() {
+	}
+
+	public Packet8RespondSkinRequest(String string, int integer) {
+		this.pname = string;
+		this.rqChunk = integer;
+		this.data = SkinManager.field_7446_9r4z2maBPOzeIQ41jM97J0sS7rNpO25b195UXkI1F7UjreZ3kMZ31B30P17t.func_7445_4v4pMf3596FO71g04LS5DR738V0b0e9j59y5wCjSLyqx9Uxd231116vUL4le(this.pname);
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		if(this.data == null) {
+			dataOutputStream.writeInt(-1);
+		} else {
+			byte[] b2 = new byte[1024];
+			int i3 = this.rqChunk * 1024;
+			int i4 = 1024;
+			if(i3 + 1024 > this.data.length) {
+				i4 = this.data.length - i3;
+			}
+
+			System.arraycopy(this.data, this.rqChunk * 1024, b2, 0, i4);
+			CRC32 cRC325 = new CRC32();
+			cRC325.update(b2, 0, 1024);
+			dataOutputStream.writeInt(this.data.length);
+			dataOutputStream.writeUTF(this.pname);
+			dataOutputStream.writeInt(this.rqChunk);
+			dataOutputStream.writeInt((int)cRC325.getValue());
+			dataOutputStream.write(b2);
+		}
+
+	}
+
+	public void processPacket(NetHandler netHandler) {
+	}
+
+	public int getPacketSize() {
+		return this.data == null ? 4 : 8 + this.pname.length() + this.data.length;
+	}
+}
--- /dev/null
+++ net/minecraft/src/DecInputStream.java
@@ -1,0 +1,147 @@
+package net.minecraft.src;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+class DecInputStream extends InputStream {
+	private final InputStream is;
+	private final boolean isMIME;
+	private final int[] base64;
+	private int bits = 0;
+	private int nextin = 18;
+	private int nextout = -8;
+	private boolean eof = false;
+	private boolean closed = false;
+	private byte[] sbBuf = new byte[1];
+
+	DecInputStream(InputStream inputStream, int[] arr, boolean boolean3) {
+		this.is = inputStream;
+		this.base64 = arr;
+		this.isMIME = boolean3;
+	}
+
+	public int read() throws IOException {
+		return this.read(this.sbBuf, 0, 1) == -1 ? -1 : this.sbBuf[0] & 255;
+	}
+
+	public int read(byte[] arr, int integer2, int integer3) throws IOException {
+		if(this.closed) {
+			throw new IOException("Stream is closed");
+		} else if(this.eof && this.nextout < 0) {
+			return -1;
+		} else if(integer2 >= 0 && integer3 >= 0 && integer3 <= arr.length - integer2) {
+			int i4 = integer2;
+			if(this.nextout >= 0) {
+				do {
+					if(integer3 == 0) {
+						return integer2 - i4;
+					}
+
+					arr[integer2++] = (byte)(this.bits >> this.nextout);
+					--integer3;
+					this.nextout -= 8;
+				} while(this.nextout >= 0);
+
+				this.bits = 0;
+			}
+
+			while(true) {
+				if(integer3 > 0) {
+					int i5 = this.is.read();
+					if(i5 == -1) {
+						this.eof = true;
+						if(this.nextin != 18) {
+							if(this.nextin == 12) {
+								throw new IOException("Base64 stream has one un-decoded dangling byte.");
+							}
+
+							arr[integer2++] = (byte)(this.bits >> 16);
+							--integer3;
+							if(this.nextin == 0) {
+								if(integer3 == 0) {
+									this.bits >>= 8;
+									this.nextout = 0;
+								} else {
+									arr[integer2++] = (byte)(this.bits >> 8);
+								}
+							}
+						}
+
+						if(integer2 == i4) {
+							return -1;
+						}
+
+						return integer2 - i4;
+					}
+
+					if(i5 != 61) {
+						if((i5 = this.base64[i5]) == -1) {
+							if(!this.isMIME) {
+								throw new IOException("Illegal base64 character " + Integer.toString(i5, 16));
+							}
+							continue;
+						}
+
+						this.bits |= i5 << this.nextin;
+						if(this.nextin != 0) {
+							this.nextin -= 6;
+							continue;
+						}
+
+						this.nextin = 18;
+						this.nextout = 16;
+
+						while(this.nextout >= 0) {
+							arr[integer2++] = (byte)(this.bits >> this.nextout);
+							--integer3;
+							this.nextout -= 8;
+							if(integer3 == 0 && this.nextout >= 0) {
+								return integer2 - i4;
+							}
+						}
+
+						this.bits = 0;
+						continue;
+					}
+
+					if(this.nextin == 18 || this.nextin == 12 || this.nextin == 6 && this.is.read() != 61) {
+						throw new IOException("Illegal base64 ending sequence:" + this.nextin);
+					}
+
+					arr[integer2++] = (byte)(this.bits >> 16);
+					--integer3;
+					if(this.nextin == 0) {
+						if(integer3 == 0) {
+							this.bits >>= 8;
+							this.nextout = 0;
+						} else {
+							arr[integer2++] = (byte)(this.bits >> 8);
+						}
+					}
+
+					this.eof = true;
+				}
+
+				return integer2 - i4;
+			}
+		} else {
+			throw new IndexOutOfBoundsException();
+		}
+	}
+
+	public int available() throws IOException {
+		if(this.closed) {
+			throw new IOException("Stream is closed");
+		} else {
+			return this.is.available();
+		}
+	}
+
+	public void close() throws IOException {
+		if(!this.closed) {
+			this.closed = true;
+			this.is.close();
+		}
+
+	}
+}
--- net/minecraft/src/ItemFood.java
+++ net/minecraft/src/ItemFood.java
@@ -3,9 +3,9 @@
 public class ItemFood extends Item {
 	private int healAmount;
 
-	public ItemFood(int var1, int var2) {
-		super(var1);
-		this.healAmount = var2;
+	public ItemFood(int itemID, int healAmount) {
+		super(itemID);
+		this.healAmount = healAmount;
 		this.maxStackSize = 1;
 	}
 }
--- net/minecraft/src/Packet13PlayerLookMove.java
+++ net/minecraft/src/Packet13PlayerLookMove.java
@@ -10,36 +10,36 @@
 		this.moving = true;
 	}
 
-	public Packet13PlayerLookMove(double var1, double var3, double var5, double var7, float var9, float var10, boolean var11) {
-		this.xPosition = var1;
-		this.yPosition = var3;
-		this.stance = var5;
-		this.zPosition = var7;
-		this.yaw = var9;
-		this.pitch = var10;
-		this.onGround = var11;
+	public Packet13PlayerLookMove(double xPosition, double yPosition, double stance, double zPosition, float yaw, float pitch, boolean onGround) {
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.stance = stance;
+		this.zPosition = zPosition;
+		this.yaw = yaw;
+		this.pitch = pitch;
+		this.onGround = onGround;
 		this.rotating = true;
 		this.moving = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readDouble();
-		this.yPosition = var1.readDouble();
-		this.stance = var1.readDouble();
-		this.zPosition = var1.readDouble();
-		this.yaw = var1.readFloat();
-		this.pitch = var1.readFloat();
-		super.readPacketData(var1);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readDouble();
+		this.yPosition = dataInputStream.readDouble();
+		this.stance = dataInputStream.readDouble();
+		this.zPosition = dataInputStream.readDouble();
+		this.yaw = dataInputStream.readFloat();
+		this.pitch = dataInputStream.readFloat();
+		super.readPacketData(dataInputStream);
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeDouble(this.xPosition);
-		var1.writeDouble(this.yPosition);
-		var1.writeDouble(this.stance);
-		var1.writeDouble(this.zPosition);
-		var1.writeFloat(this.yaw);
-		var1.writeFloat(this.pitch);
-		super.writePacket(var1);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeDouble(this.xPosition);
+		dataOutputStream.writeDouble(this.yPosition);
+		dataOutputStream.writeDouble(this.stance);
+		dataOutputStream.writeDouble(this.zPosition);
+		dataOutputStream.writeFloat(this.yaw);
+		dataOutputStream.writeFloat(this.pitch);
+		super.writePacket(dataOutputStream);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/BlockFlowing.java
+++ net/minecraft/src/BlockFlowing.java
@@ -4,254 +4,254 @@
 
 public class BlockFlowing extends BlockFluid {
 	int numAdjacentSources = 0;
-	boolean[] isOptimalFlowDirection = new boolean[4];
-	int[] flowCost = new int[4];
-
-	protected BlockFlowing(int var1, Material var2) {
-		super(var1, var2);
-	}
-
-	private void updateFlow(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		var1.setBlockAndMetadata(var2, var3, var4, this.blockID + 1, var5);
-		var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-		var1.markBlockNeedsUpdate(var2, var3, var4);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = this.getFlowDecay(var1, var2, var3, var4);
-		boolean var7 = true;
-		int var9;
-		if(var6 > 0) {
-			byte var8 = -100;
+	boolean[] field_6340_4ocVm8yJDUjv8w0n5nBuVkX8uRdOv5U667fzG01bQ2noH4BjQY7ef0Ldu64m = new boolean[4];
+	int[] field_6342_3P7Amy38lK255H8rC2GcD5oi29019iP21bD0PKn018b942T4zPwN8zqRq48R = new int[4];
+
+	protected BlockFlowing(int id, Material material) {
+		super(id, material);
+	}
+
+	private void func_6334_i(World cv, int integer2, int integer3, int integer4) {
+		int i5 = cv.getBlockMetadata(integer2, integer3, integer4);
+		cv.setBlockAndMetadata(integer2, integer3, integer4, this.blockID + 1, i5);
+		cv.markBlocksDirty(integer2, integer3, integer4, integer2, integer3, integer4);
+		cv.markBlockNeedsUpdate(integer2, integer3, integer4);
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		int i6 = this.getFlowDecay(world, x, y, z);
+		boolean z7 = true;
+		int i8;
+		if(i6 > 0) {
+			byte b9 = -100;
 			this.numAdjacentSources = 0;
-			int var11 = this.getSmallestFlowDecay(var1, var2 - 1, var3, var4, var8);
-			var11 = this.getSmallestFlowDecay(var1, var2 + 1, var3, var4, var11);
-			var11 = this.getSmallestFlowDecay(var1, var2, var3, var4 - 1, var11);
-			var11 = this.getSmallestFlowDecay(var1, var2, var3, var4 + 1, var11);
-			var9 = var11 + this.fluidType;
-			if(var9 >= 8 || var11 < 0) {
-				var9 = -1;
+			int i10 = this.func_6335_9kk8o86Fgly8Y6FbEjL2Xji3rbt81Glo3bS84845qrdebKZ6mfEX25QM513f(world, x - 1, y, z, b9);
+			i10 = this.func_6335_9kk8o86Fgly8Y6FbEjL2Xji3rbt81Glo3bS84845qrdebKZ6mfEX25QM513f(world, x + 1, y, z, i10);
+			i10 = this.func_6335_9kk8o86Fgly8Y6FbEjL2Xji3rbt81Glo3bS84845qrdebKZ6mfEX25QM513f(world, x, y, z - 1, i10);
+			i10 = this.func_6335_9kk8o86Fgly8Y6FbEjL2Xji3rbt81Glo3bS84845qrdebKZ6mfEX25QM513f(world, x, y, z + 1, i10);
+			i8 = i10 + this.fluidType;
+			if(i8 >= 8 || i10 < 0) {
+				i8 = -1;
 			}
 
-			if(this.getFlowDecay(var1, var2, var3 + 1, var4) >= 0) {
-				int var10 = this.getFlowDecay(var1, var2, var3 + 1, var4);
-				if(var10 >= 8) {
-					var9 = var10;
+			if(this.getFlowDecay(world, x, y + 1, z) >= 0) {
+				int i11 = this.getFlowDecay(world, x, y + 1, z);
+				if(i11 >= 8) {
+					i8 = i11;
 				} else {
-					var9 = var10 + 8;
+					i8 = i11 + 8;
 				}
 			}
 
 			if(this.numAdjacentSources >= 2 && this.material == Material.water) {
-				if(var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-					var9 = 0;
-				} else if(var1.getBlockMaterial(var2, var3 - 1, var4) == this.material && var1.getBlockMetadata(var2, var3, var4) == 0) {
-					var9 = 0;
+				if(world.isBlockNormalCube(x, y - 1, z)) {
+					i8 = 0;
+				} else if(world.getBlockMaterial(x, y - 1, z) == this.material && world.getBlockMetadata(x, y, z) == 0) {
+					i8 = 0;
 				}
 			}
 
-			if(this.material == Material.lava && var6 < 8 && var9 < 8 && var9 > var6 && var5.nextInt(4) != 0) {
-				var9 = var6;
-				var7 = false;
+			if(this.material == Material.lava && i6 < 8 && i8 < 8 && i8 > i6 && random.nextInt(4) != 0) {
+				i8 = i6;
+				z7 = false;
 			}
 
-			if(var9 != var6) {
-				var6 = var9;
-				if(var9 < 0) {
-					var1.setBlockWithNotify(var2, var3, var4, 0);
+			if(i8 != i6) {
+				i6 = i8;
+				if(i8 < 0) {
+					world.setBlockWithNotify(x, y, z, 0);
 				} else {
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var9);
-					var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-					var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
+					world.setBlockMetadataWithNotify(x, y, z, i8);
+					world.scheduleBlockUpdate(x, y, z, this.blockID);
+					world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
 				}
-			} else if(var7) {
-				this.updateFlow(var1, var2, var3, var4);
+			} else if(z7) {
+				this.func_6334_i(world, x, y, z);
 			}
 		} else {
-			this.updateFlow(var1, var2, var3, var4);
+			this.func_6334_i(world, x, y, z);
 		}
 
-		if(this.liquidCanDisplaceBlock(var1, var2, var3 - 1, var4)) {
-			if(var6 >= 8) {
-				var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, this.blockID, var6);
+		if(this.func_6339_688IzvR6fT5Zb09Rnvl8Il4Foxp48n2q5760Asl6qQC1gb7Oo808kIqcWx5K(world, x, y - 1, z)) {
+			if(i6 >= 8) {
+				world.setBlockAndMetadataWithNotify(x, y - 1, z, this.blockID, i6);
 			} else {
-				var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, this.blockID, var6 + 8);
+				world.setBlockAndMetadataWithNotify(x, y - 1, z, this.blockID, i6 + 8);
 			}
-		} else if(var6 >= 0 && (var6 == 0 || this.blockBlocksFlow(var1, var2, var3 - 1, var4))) {
-			boolean[] var12 = this.getOptimalFlowDirections(var1, var2, var3, var4);
-			var9 = var6 + this.fluidType;
-			if(var6 >= 8) {
-				var9 = 1;
+		} else if(i6 >= 0 && (i6 == 0 || this.func_6333_58i90NS1d833j1qAK4W73TD48jQBa21UTW81f3Nh7zD7BpKm7ANv53N4ko42(world, x, y - 1, z))) {
+			boolean[] z12 = this.func_6336_6fW0JQFSNu4eP1X6z2Jz3E36UckAutm1XG6qHe2oNOOpmMW5ZyIC5t4cG7ry(world, x, y, z);
+			i8 = i6 + this.fluidType;
+			if(i6 >= 8) {
+				i8 = 1;
 			}
 
-			if(var9 >= 8) {
+			if(i8 >= 8) {
 				return;
 			}
 
-			if(var12[0]) {
-				this.flowIntoBlock(var1, var2 - 1, var3, var4, var9);
-			}
-
-			if(var12[1]) {
-				this.flowIntoBlock(var1, var2 + 1, var3, var4, var9);
-			}
-
-			if(var12[2]) {
-				this.flowIntoBlock(var1, var2, var3, var4 - 1, var9);
-			}
-
-			if(var12[3]) {
-				this.flowIntoBlock(var1, var2, var3, var4 + 1, var9);
+			if(z12[0]) {
+				this.func_6338_6L3OvR7iYNVu2iQQlF6dKd0OtnDcb4tPf67eMQj2t2TZu1tm6jKO9yb4K6z0(world, x - 1, y, z, i8);
+			}
+
+			if(z12[1]) {
+				this.func_6338_6L3OvR7iYNVu2iQQlF6dKd0OtnDcb4tPf67eMQj2t2TZu1tm6jKO9yb4K6z0(world, x + 1, y, z, i8);
+			}
+
+			if(z12[2]) {
+				this.func_6338_6L3OvR7iYNVu2iQQlF6dKd0OtnDcb4tPf67eMQj2t2TZu1tm6jKO9yb4K6z0(world, x, y, z - 1, i8);
+			}
+
+			if(z12[3]) {
+				this.func_6338_6L3OvR7iYNVu2iQQlF6dKd0OtnDcb4tPf67eMQj2t2TZu1tm6jKO9yb4K6z0(world, x, y, z + 1, i8);
 			}
 		}
 
 	}
 
-	private void flowIntoBlock(World var1, int var2, int var3, int var4, int var5) {
-		if(this.liquidCanDisplaceBlock(var1, var2, var3, var4)) {
-			int var6 = var1.getBlockId(var2, var3, var4);
-			if(var6 > 0) {
+	private void func_6338_6L3OvR7iYNVu2iQQlF6dKd0OtnDcb4tPf67eMQj2t2TZu1tm6jKO9yb4K6z0(World cv, int integer2, int integer3, int integer4, int integer5) {
+		if(this.func_6339_688IzvR6fT5Zb09Rnvl8Il4Foxp48n2q5760Asl6qQC1gb7Oo808kIqcWx5K(cv, integer2, integer3, integer4)) {
+			int i6 = cv.getBlockId(integer2, integer3, integer4);
+			if(i6 > 0) {
 				if(this.material == Material.lava) {
-					this.triggerLavaMixEffects(var1, var2, var3, var4);
+					this.triggerLavaMixEffects(cv, integer2, integer3, integer4);
 				} else {
-					Block.blocksList[var6].dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
+					Block.blocksList[i6].dropBlockAsItem(cv, integer2, integer3, integer4, cv.getBlockMetadata(integer2, integer3, integer4));
 				}
 			}
 
-			var1.setBlockAndMetadataWithNotify(var2, var3, var4, this.blockID, var5);
+			cv.setBlockAndMetadataWithNotify(integer2, integer3, integer4, this.blockID, integer5);
 		}
 
 	}
 
-	private int calculateFlowCost(World var1, int var2, int var3, int var4, int var5, int var6) {
-		int var7 = 1000;
-
-		for(int var8 = 0; var8 < 4; ++var8) {
-			if((var8 != 0 || var6 != 1) && (var8 != 1 || var6 != 0) && (var8 != 2 || var6 != 3) && (var8 != 3 || var6 != 2)) {
-				int var9 = var2;
-				int var11 = var4;
-				if(var8 == 0) {
-					var9 = var2 - 1;
-				}
-
-				if(var8 == 1) {
-					++var9;
-				}
-
-				if(var8 == 2) {
-					var11 = var4 - 1;
-				}
-
-				if(var8 == 3) {
-					++var11;
-				}
-
-				if(!this.blockBlocksFlow(var1, var9, var3, var11) && (var1.getBlockMaterial(var9, var3, var11) != this.material || var1.getBlockMetadata(var9, var3, var11) != 0)) {
-					if(!this.blockBlocksFlow(var1, var9, var3 - 1, var11)) {
-						return var5;
+	private int func_6337_8hih867kkYU038H39cMgn7wxAt2VlM6sOrQ4bH5Q5jiUUY3L4mAej65UGPfk(World cv, int integer2, int integer3, int integer4, int integer5, int integer6) {
+		int i7 = 1000;
+
+		for(int i8 = 0; i8 < 4; ++i8) {
+			if((i8 != 0 || integer6 != 1) && (i8 != 1 || integer6 != 0) && (i8 != 2 || integer6 != 3) && (i8 != 3 || integer6 != 2)) {
+				int i9 = integer2;
+				int i10 = integer4;
+				if(i8 == 0) {
+					i9 = integer2 - 1;
+				}
+
+				if(i8 == 1) {
+					++i9;
+				}
+
+				if(i8 == 2) {
+					i10 = integer4 - 1;
+				}
+
+				if(i8 == 3) {
+					++i10;
+				}
+
+				if(!this.func_6333_58i90NS1d833j1qAK4W73TD48jQBa21UTW81f3Nh7zD7BpKm7ANv53N4ko42(cv, i9, integer3, i10) && (cv.getBlockMaterial(i9, integer3, i10) != this.material || cv.getBlockMetadata(i9, integer3, i10) != 0)) {
+					if(!this.func_6333_58i90NS1d833j1qAK4W73TD48jQBa21UTW81f3Nh7zD7BpKm7ANv53N4ko42(cv, i9, integer3 - 1, i10)) {
+						return integer5;
 					}
 
-					if(var5 < 4) {
-						int var12 = this.calculateFlowCost(var1, var9, var3, var11, var5 + 1, var8);
-						if(var12 < var7) {
-							var7 = var12;
+					if(integer5 < 4) {
+						int i11 = this.func_6337_8hih867kkYU038H39cMgn7wxAt2VlM6sOrQ4bH5Q5jiUUY3L4mAej65UGPfk(cv, i9, integer3, i10, integer5 + 1, i8);
+						if(i11 < i7) {
+							i7 = i11;
 						}
 					}
 				}
 			}
 		}
 
-		return var7;
+		return i7;
 	}
 
-	private boolean[] getOptimalFlowDirections(World var1, int var2, int var3, int var4) {
-		int var5;
-		int var6;
-		for(var5 = 0; var5 < 4; ++var5) {
-			this.flowCost[var5] = 1000;
-			var6 = var2;
-			int var8 = var4;
-			if(var5 == 0) {
-				var6 = var2 - 1;
-			}
-
-			if(var5 == 1) {
-				++var6;
-			}
-
-			if(var5 == 2) {
-				var8 = var4 - 1;
-			}
-
-			if(var5 == 3) {
-				++var8;
-			}
-
-			if(!this.blockBlocksFlow(var1, var6, var3, var8) && (var1.getBlockMaterial(var6, var3, var8) != this.material || var1.getBlockMetadata(var6, var3, var8) != 0)) {
-				if(!this.blockBlocksFlow(var1, var6, var3 - 1, var8)) {
-					this.flowCost[var5] = 0;
+	private boolean[] func_6336_6fW0JQFSNu4eP1X6z2Jz3E36UckAutm1XG6qHe2oNOOpmMW5ZyIC5t4cG7ry(World cv, int integer2, int integer3, int integer4) {
+		int i5;
+		int i6;
+		for(i5 = 0; i5 < 4; ++i5) {
+			this.field_6342_3P7Amy38lK255H8rC2GcD5oi29019iP21bD0PKn018b942T4zPwN8zqRq48R[i5] = 1000;
+			i6 = integer2;
+			int i7 = integer4;
+			if(i5 == 0) {
+				i6 = integer2 - 1;
+			}
+
+			if(i5 == 1) {
+				++i6;
+			}
+
+			if(i5 == 2) {
+				i7 = integer4 - 1;
+			}
+
+			if(i5 == 3) {
+				++i7;
+			}
+
+			if(!this.func_6333_58i90NS1d833j1qAK4W73TD48jQBa21UTW81f3Nh7zD7BpKm7ANv53N4ko42(cv, i6, integer3, i7) && (cv.getBlockMaterial(i6, integer3, i7) != this.material || cv.getBlockMetadata(i6, integer3, i7) != 0)) {
+				if(!this.func_6333_58i90NS1d833j1qAK4W73TD48jQBa21UTW81f3Nh7zD7BpKm7ANv53N4ko42(cv, i6, integer3 - 1, i7)) {
+					this.field_6342_3P7Amy38lK255H8rC2GcD5oi29019iP21bD0PKn018b942T4zPwN8zqRq48R[i5] = 0;
 				} else {
-					this.flowCost[var5] = this.calculateFlowCost(var1, var6, var3, var8, 1, var5);
+					this.field_6342_3P7Amy38lK255H8rC2GcD5oi29019iP21bD0PKn018b942T4zPwN8zqRq48R[i5] = this.func_6337_8hih867kkYU038H39cMgn7wxAt2VlM6sOrQ4bH5Q5jiUUY3L4mAej65UGPfk(cv, i6, integer3, i7, 1, i5);
 				}
 			}
 		}
 
-		var5 = this.flowCost[0];
+		i5 = this.field_6342_3P7Amy38lK255H8rC2GcD5oi29019iP21bD0PKn018b942T4zPwN8zqRq48R[0];
 
-		for(var6 = 1; var6 < 4; ++var6) {
-			if(this.flowCost[var6] < var5) {
-				var5 = this.flowCost[var6];
+		for(i6 = 1; i6 < 4; ++i6) {
+			if(this.field_6342_3P7Amy38lK255H8rC2GcD5oi29019iP21bD0PKn018b942T4zPwN8zqRq48R[i6] < i5) {
+				i5 = this.field_6342_3P7Amy38lK255H8rC2GcD5oi29019iP21bD0PKn018b942T4zPwN8zqRq48R[i6];
 			}
 		}
 
-		for(var6 = 0; var6 < 4; ++var6) {
-			this.isOptimalFlowDirection[var6] = this.flowCost[var6] == var5;
+		for(i6 = 0; i6 < 4; ++i6) {
+			this.field_6340_4ocVm8yJDUjv8w0n5nBuVkX8uRdOv5U667fzG01bQ2noH4BjQY7ef0Ldu64m[i6] = this.field_6342_3P7Amy38lK255H8rC2GcD5oi29019iP21bD0PKn018b942T4zPwN8zqRq48R[i6] == i5;
 		}
 
-		return this.isOptimalFlowDirection;
+		return this.field_6340_4ocVm8yJDUjv8w0n5nBuVkX8uRdOv5U667fzG01bQ2noH4BjQY7ef0Ldu64m;
 	}
 
-	private boolean blockBlocksFlow(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3, var4);
-		if(var5 != Block.doorWood.blockID && var5 != Block.doorSteel.blockID && var5 != Block.signStanding.blockID && var5 != Block.ladder.blockID && var5 != Block.reed.blockID) {
-			if(var5 == 0) {
+	private boolean func_6333_58i90NS1d833j1qAK4W73TD48jQBa21UTW81f3Nh7zD7BpKm7ANv53N4ko42(World cv, int integer2, int integer3, int integer4) {
+		int i5 = cv.getBlockId(integer2, integer3, integer4);
+		if(i5 != Block.doorWood.blockID && i5 != Block.doorSteel.blockID && i5 != Block.signStanding.blockID && i5 != Block.ladder.blockID && i5 != Block.reed.blockID) {
+			if(i5 == 0) {
 				return false;
 			} else {
-				Material var6 = Block.blocksList[var5].material;
-				return var6.isSolid();
+				Material material6 = Block.blocksList[i5].material;
+				return material6.isSolid();
 			}
 		} else {
 			return true;
 		}
 	}
 
-	protected int getSmallestFlowDecay(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = this.getFlowDecay(var1, var2, var3, var4);
-		if(var6 < 0) {
-			return var5;
+	protected int func_6335_9kk8o86Fgly8Y6FbEjL2Xji3rbt81Glo3bS84845qrdebKZ6mfEX25QM513f(World cv, int integer2, int integer3, int integer4, int integer5) {
+		int i6 = this.getFlowDecay(cv, integer2, integer3, integer4);
+		if(i6 < 0) {
+			return integer5;
 		} else {
-			if(var6 == 0) {
+			if(i6 == 0) {
 				++this.numAdjacentSources;
 			}
 
-			if(var6 >= 8) {
-				var6 = 0;
+			if(i6 >= 8) {
+				i6 = 0;
 			}
 
-			return var5 >= 0 && var6 >= var5 ? var5 : var6;
+			return integer5 >= 0 && i6 >= integer5 ? integer5 : i6;
 		}
 	}
 
-	private boolean liquidCanDisplaceBlock(World var1, int var2, int var3, int var4) {
-		Material var5 = var1.getBlockMaterial(var2, var3, var4);
-		return var5 == this.material ? false : (var5 == Material.lava ? false : !this.blockBlocksFlow(var1, var2, var3, var4));
+	private boolean func_6339_688IzvR6fT5Zb09Rnvl8Il4Foxp48n2q5760Asl6qQC1gb7Oo808kIqcWx5K(World cv, int integer2, int integer3, int integer4) {
+		Material material5 = cv.getBlockMaterial(integer2, integer3, integer4);
+		return material5 == this.material ? false : (material5 == Material.lava ? false : !this.func_6333_58i90NS1d833j1qAK4W73TD48jQBa21UTW81f3Nh7zD7BpKm7ANv53N4ko42(cv, integer2, integer3, integer4));
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		super.onBlockAdded(var1, var2, var3, var4);
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
+	public void onBlockAdded(World world, int x, int y, int z) {
+		super.onBlockAdded(world, x, y, z);
+		if(world.getBlockId(x, y, z) == this.blockID) {
+			world.scheduleBlockUpdate(x, y, z, this.blockID);
 		}
 
 	}
--- net/minecraft/src/World.java
+++ net/minecraft/src/World.java
@@ -7,6 +7,7 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -18,14 +19,16 @@
 	private List lightingToUpdate;
 	public List loadedEntityList;
 	private List unloadedEntityList;
-	private TreeSet scheduledTickTreeSet;
+	private Set scheduledTickTreeSet;
 	private Set scheduledTickSet;
 	public List loadedTileEntityList;
 	public long worldTime;
 	public boolean snowCovered;
-	private long skyColor;
-	private long fogColor;
-	private long cloudColor;
+	public boolean sandCovered;
+	public long skyColor;
+	public long field_7806_8ggg4SRP1Piioy2n0VkMPt5i5wplQGwN5l7s73MrHyiQ9B5qJbpT7xIz8He7;
+	public long fogColor;
+	public long cloudColor;
 	public int skylightSubtracted;
 	protected int updateLCG;
 	protected int DIST_HASH_MAGIC;
@@ -35,13 +38,14 @@
 	protected int autosavePeriod;
 	public List playerEntities;
 	public int difficultySetting;
+	public Object fontRenderer;
 	public Random rand;
 	public int spawnX;
 	public int spawnY;
 	public int spawnZ;
 	public boolean isNewWorld;
 	protected List worldAccesses;
-	private IChunkProvider chunkProvider;
+	public IChunkProvider chunkProvider;
 	public File saveDirectory;
 	public long randomSeed;
 	private NBTTagCompound nbtCompoundPlayer;
@@ -53,20 +57,80 @@
 	private int soundCounter;
 	private List entitiesWithinAABBExcludingEntity;
 	public boolean multiplayerWorld;
-
-	public World(File var1, String var2) {
-		this(var1, var2, (new Random()).nextLong());
-	}
-
-	public World(String var1) {
+	protected BiomeInterface field_7813_5A352qHur902s7NjfBu10EWD7kIkBwEXGm9saOt9LTo63330d3stLvDo2a6i;
+	public boolean exclFrailMode;
+	public List field_7822_2eRdnuQtAZuLey7Ofz070770J18JA4JJg5Jx8S30G2x7f7PwDTigZWA2Y3I1;
+	public boolean listBeingWritten;
+	int field_7815_4554lrx1grZYziCgZsjY4eR12gXVJ1Lf2N64dfIru362bQ88H8texdHa9E3M;
+
+	public long GetMilestone() {
+		return this.worldTime / 23000L;
+	}
+
+	public static NBTTagCompound getLevelData(File file, String world) {
+		File file2 = new File(file, "saves");
+		File file3 = new File(file2, world);
+		if(!file3.exists()) {
+			return null;
+		} else {
+			File file4 = new File(file3, "level.dat");
+			if(file4.exists()) {
+				try {
+					NBTTagCompound nBTTagCompound5 = CompressedStreamTools.readCompressed(new FileInputStream(file4));
+					NBTTagCompound nBTTagCompound6 = nBTTagCompound5.getCompoundTag("Data");
+					return nBTTagCompound6;
+				} catch (Exception exception7) {
+					exception7.printStackTrace();
+				}
+			}
+
+			return null;
+		}
+	}
+
+	public static void deleteWorld(File file, String world) {
+		File file2 = new File(file, "saves");
+		File file3 = new File(file2, world);
+		if(file3.exists()) {
+			deleteWorldFiles(file3.listFiles());
+			file3.delete();
+		}
+
+	}
+
+	private static void deleteWorldFiles(File[] files) {
+		for(int i1 = 0; i1 < files.length; ++i1) {
+			if(files[i1].isDirectory()) {
+				deleteWorldFiles(files[i1].listFiles());
+			}
+
+			files[i1].delete();
+		}
+
+	}
+
+	public boolean func_7743_6dTJY85fUAeFQQy7F88o8DF5NB7CJ6G4Q3l5inh07jpyUPssKnqz7PyTSt8s() {
+		return true;
+	}
+
+	public World(File worldFile, String levelName) {
+		this(worldFile, levelName, (new Random()).nextLong());
+	}
+
+	public World(String levelName) {
+		this.exclFrailMode = false;
+		this.field_7822_2eRdnuQtAZuLey7Ofz070770J18JA4JJg5Jx8S30G2x7f7PwDTigZWA2Y3I1 = new ArrayList();
+		this.listBeingWritten = false;
+		this.field_7815_4554lrx1grZYziCgZsjY4eR12gXVJ1Lf2N64dfIru362bQ88H8texdHa9E3M = 0;
 		this.lightingToUpdate = new ArrayList();
 		this.loadedEntityList = new ArrayList();
 		this.unloadedEntityList = new ArrayList();
-		this.scheduledTickTreeSet = new TreeSet();
-		this.scheduledTickSet = new HashSet();
+		this.scheduledTickTreeSet = Collections.synchronizedSet(new TreeSet());
+		this.scheduledTickSet = Collections.synchronizedSet(new HashSet());
 		this.loadedTileEntityList = new ArrayList();
 		this.worldTime = 0L;
 		this.snowCovered = false;
+		this.sandCovered = false;
 		this.skyColor = 8961023L;
 		this.fogColor = 12638463L;
 		this.cloudColor = 16777215L;
@@ -78,6 +142,7 @@
 		this.autosavePeriod = 40;
 		this.playerEntities = new ArrayList();
 		this.rand = new Random();
+		this.field_7813_5A352qHur902s7NjfBu10EWD7kIkBwEXGm9saOt9LTo63330d3stLvDo2a6i = new BiomeUnknownClass2();
 		this.isNewWorld = false;
 		this.worldAccesses = new ArrayList();
 		this.randomSeed = 0L;
@@ -87,20 +152,25 @@
 		this.soundCounter = this.rand.nextInt(12000);
 		this.entitiesWithinAABBExcludingEntity = new ArrayList();
 		this.multiplayerWorld = false;
-		this.levelName = var1;
+		this.levelName = levelName;
 		this.chunkProvider = this.getChunkProvider(this.saveDirectory);
 		this.calculateInitialSkylight();
 	}
 
-	public World(File var1, String var2, long var3) {
+	public World(File baseDir, String levelName, long randomSeed) {
+		this.exclFrailMode = false;
+		this.field_7822_2eRdnuQtAZuLey7Ofz070770J18JA4JJg5Jx8S30G2x7f7PwDTigZWA2Y3I1 = new ArrayList();
+		this.listBeingWritten = false;
+		this.field_7815_4554lrx1grZYziCgZsjY4eR12gXVJ1Lf2N64dfIru362bQ88H8texdHa9E3M = 0;
 		this.lightingToUpdate = new ArrayList();
 		this.loadedEntityList = new ArrayList();
 		this.unloadedEntityList = new ArrayList();
-		this.scheduledTickTreeSet = new TreeSet();
-		this.scheduledTickSet = new HashSet();
+		this.scheduledTickTreeSet = Collections.synchronizedSet(new TreeSet());
+		this.scheduledTickSet = Collections.synchronizedSet(new HashSet());
 		this.loadedTileEntityList = new ArrayList();
 		this.worldTime = 0L;
 		this.snowCovered = false;
+		this.sandCovered = false;
 		this.skyColor = 8961023L;
 		this.fogColor = 12638463L;
 		this.cloudColor = 16777215L;
@@ -112,6 +182,7 @@
 		this.autosavePeriod = 40;
 		this.playerEntities = new ArrayList();
 		this.rand = new Random();
+		this.field_7813_5A352qHur902s7NjfBu10EWD7kIkBwEXGm9saOt9LTo63330d3stLvDo2a6i = new BiomeUnknownClass2();
 		this.isNewWorld = false;
 		this.worldAccesses = new ArrayList();
 		this.randomSeed = 0L;
@@ -121,56 +192,72 @@
 		this.soundCounter = this.rand.nextInt(12000);
 		this.entitiesWithinAABBExcludingEntity = new ArrayList();
 		this.multiplayerWorld = false;
-		this.levelName = var2;
-		var1.mkdirs();
-		this.saveDirectory = new File(var1, var2);
+		this.levelName = levelName;
+		baseDir.mkdirs();
+		this.saveDirectory = new File(baseDir, levelName);
 		this.saveDirectory.mkdirs();
 
-		File var5;
+		File file5;
 		try {
-			var5 = new File(this.saveDirectory, "session.lock");
-			DataOutputStream var6 = new DataOutputStream(new FileOutputStream(var5));
+			file5 = new File(this.saveDirectory, "session.lock");
+			DataOutputStream dataOutputStream6 = new DataOutputStream(new FileOutputStream(file5));
 
 			try {
-				var6.writeLong(this.lockTimestamp);
+				dataOutputStream6.writeLong(this.lockTimestamp);
 			} finally {
-				var6.close();
+				dataOutputStream6.close();
 			}
-		} catch (IOException var13) {
+		} catch (IOException iOException16) {
 			throw new RuntimeException("Failed to check session lock, aborting");
 		}
 
-		var5 = new File(this.saveDirectory, "level.dat");
-		this.isNewWorld = !var5.exists();
-		if(var5.exists()) {
+		file5 = new File(this.saveDirectory, "level.dat");
+		this.isNewWorld = !file5.exists();
+		if(file5.exists()) {
 			try {
-				NBTTagCompound var14 = CompressedStreamTools.readCompressed(new FileInputStream(var5));
-				NBTTagCompound var7 = var14.getCompoundTag("Data");
-				this.randomSeed = var7.getLong("RandomSeed");
-				this.spawnX = var7.getInteger("SpawnX");
-				this.spawnY = var7.getInteger("SpawnY");
-				this.spawnZ = var7.getInteger("SpawnZ");
-				this.worldTime = var7.getLong("Time");
-				this.sizeOnDisk = var7.getLong("SizeOnDisk");
-				this.snowCovered = var7.getBoolean("SnowCovered");
-				if(var7.hasKey("Player")) {
-					this.nbtCompoundPlayer = var7.getCompoundTag("Player");
-				}
-			} catch (Exception var11) {
-				var11.printStackTrace();
+				NBTTagCompound nBTTagCompound18 = CompressedStreamTools.readCompressed(new FileInputStream(file5));
+				NBTTagCompound nBTTagCompound7 = nBTTagCompound18.getCompoundTag("Data");
+				this.randomSeed = nBTTagCompound7.getLong("RandomSeed");
+				this.spawnX = nBTTagCompound7.getInteger("SpawnX");
+				this.spawnY = nBTTagCompound7.getInteger("SpawnY");
+				this.spawnZ = nBTTagCompound7.getInteger("SpawnZ");
+				this.worldTime = nBTTagCompound7.getLong("Time");
+				this.sizeOnDisk = nBTTagCompound7.getLong("SizeOnDisk");
+				this.snowCovered = nBTTagCompound7.getBoolean("SnowCovered");
+				this.sandCovered = nBTTagCompound7.getBoolean("SandCovered");
+				this.exclFrailMode = nBTTagCompound7.getBoolean("ExclusivelyFrail");
+				if(nBTTagCompound7.hasKey("PortalZones")) {
+					NBTTagCompound nBTTagCompound8 = nBTTagCompound7.getCompoundTag("PortalZones");
+					Iterator iterator9 = nBTTagCompound8.func_7360_91CrfT50173Xe4kQ2vq9lEpJ963CtEf8PFJK4fL15cYgBZ78AKW8QD58ZBc6().iterator();
+
+					while(iterator9.hasNext()) {
+						NBTBase nBTBase10 = (NBTBase)iterator9.next();
+						if(nBTBase10.getType() == 10) {
+							NBTTagCompound nBTTagCompound11 = (NBTTagCompound)nBTBase10;
+							this.field_7822_2eRdnuQtAZuLey7Ofz070770J18JA4JJg5Jx8S30G2x7f7PwDTigZWA2Y3I1.add(HandlerSetCheckpointUnknownClass.func_7408_9MnTMZ7x9208FiEtnb3r3xTc65ty3XG34R938zLG8ngDRixV2JG6yQ271IE2(nBTTagCompound11, nBTBase10.getKey()));
+						}
+					}
+				}
+
+				if(this.func_7743_6dTJY85fUAeFQQy7F88o8DF5NB7CJ6G4Q3l5inh07jpyUPssKnqz7PyTSt8s() && nBTTagCompound7.hasKey("Player")) {
+					this.nbtCompoundPlayer = nBTTagCompound7.getCompoundTag("Player");
+				}
+			} catch (Exception exception17) {
+				exception17.printStackTrace();
 			}
 		} else {
-			this.snowCovered = this.rand.nextInt(4) == 0;
+			this.sandCovered = this.rand.nextInt(4) == 1;
 		}
 
-		boolean var15 = false;
+		boolean z19 = false;
 		if(this.randomSeed == 0L) {
-			this.randomSeed = var3;
-			var15 = true;
+			this.randomSeed = randomSeed;
+			z19 = true;
 		}
 
+		this.field_7813_5A352qHur902s7NjfBu10EWD7kIkBwEXGm9saOt9LTo63330d3stLvDo2a6i = (new BiomeUnknownClass3(new Random(this.randomSeed))).func_7870_9Iw7noc4yrgqp68jPo5Lg7VT0YXqcIw88t90570w930nMaksDE7If9TPR9Q3();
 		this.chunkProvider = this.getChunkProvider(this.saveDirectory);
-		if(var15) {
+		if(z19) {
 			this.worldChunkLoadOverride = true;
 			this.spawnX = 0;
 			this.spawnY = 64;
@@ -185,108 +272,149 @@
 		this.calculateInitialSkylight();
 	}
 
-	protected IChunkProvider getChunkProvider(File var1) {
-		return new ChunkProviderLoadOrGenerate(this, new ChunkLoader(var1, true), new ChunkProviderGenerate(this, this.randomSeed));
-	}
-
-	private boolean findSpawn(int var1, int var2) {
-		int var3 = this.getFirstUncoveredBlock(var1, var2);
-		return var3 == Block.sand.blockID;
-	}
-
-	private int getFirstUncoveredBlock(int var1, int var2) {
-		int var3;
-		for(var3 = 63; this.getBlockId(var1, var3 + 1, var2) != 0; ++var3) {
+	protected IChunkProvider getChunkProvider(File saveDir) {
+		return new ChunkProviderLoadOrGenerate(this, new ChunkLoader(saveDir, true), new ChunkProviderGenerate(this, this.randomSeed));
+	}
+
+	protected boolean findSpawn(int x, int z) {
+		int i3 = this.getFirstUncoveredBlock(x, z);
+		return i3 == Block.sand.blockID;
+	}
+
+	private int getFirstUncoveredBlock(int x, int z) {
+		int i3;
+		for(i3 = 63; this.getBlockId(x, i3 + 1, z) != 0; ++i3) {
 		}
 
-		return this.getBlockId(var1, var3, var2);
+		return this.getBlockId(x, i3, z);
 	}
 
-	public void saveWorld(boolean var1, IProgressUpdate var2) {
+	public void saveWorld(boolean flag, IProgressUpdate progressUpdate) {
 		if(this.chunkProvider.canSave()) {
-			if(var2 != null) {
-				var2.displayProgressMessage("Saving level");
+			if(progressUpdate != null) {
+				progressUpdate.displayProgressMessage("Saving level");
 			}
 
 			this.saveLevel();
-			if(var2 != null) {
-				var2.displayLoadingString("Saving chunks");
+			if(progressUpdate != null) {
+				progressUpdate.displayLoadingString("Saving chunks");
 			}
 
-			this.chunkProvider.saveChunks(var1, var2);
+			this.chunkProvider.saveChunks(flag, progressUpdate);
 		}
+
 	}
 
 	private void saveLevel() {
 		this.checkSessionLock();
-		NBTTagCompound var1 = new NBTTagCompound();
-		var1.setLong("RandomSeed", this.randomSeed);
-		var1.setInteger("SpawnX", this.spawnX);
-		var1.setInteger("SpawnY", this.spawnY);
-		var1.setInteger("SpawnZ", this.spawnZ);
-		var1.setLong("Time", this.worldTime);
-		var1.setLong("SizeOnDisk", this.sizeOnDisk);
-		var1.setBoolean("SnowCovered", this.snowCovered);
-		var1.setLong("LastPlayed", System.currentTimeMillis());
-		EntityPlayer var2 = null;
+		NBTTagCompound nBTTagCompound1 = new NBTTagCompound();
+		nBTTagCompound1.setLong("RandomSeed", this.randomSeed);
+		nBTTagCompound1.setInteger("SpawnX", this.spawnX);
+		nBTTagCompound1.setInteger("SpawnY", this.spawnY);
+		nBTTagCompound1.setInteger("SpawnZ", this.spawnZ);
+		nBTTagCompound1.setLong("Time", this.worldTime);
+		nBTTagCompound1.setLong("SizeOnDisk", this.sizeOnDisk);
+		nBTTagCompound1.setBoolean("SnowCovered", this.snowCovered);
+		nBTTagCompound1.setBoolean("SandCovered", this.sandCovered);
+		nBTTagCompound1.setLong("LastPlayed", System.currentTimeMillis());
+		nBTTagCompound1.setLong("Milestone", this.GetMilestone());
+		nBTTagCompound1.setBoolean("ExclusivelyFrail", this.exclFrailMode);
+		EntityPlayer entityPlayer2 = null;
 		if(this.playerEntities.size() > 0) {
-			var2 = (EntityPlayer)this.playerEntities.get(0);
-		}
-
-		NBTTagCompound var3;
-		if(var2 != null) {
-			var3 = new NBTTagCompound();
-			var2.writeToNBT(var3);
-			var1.setCompoundTag("Player", var3);
-		}
-
-		var3 = new NBTTagCompound();
-		var3.setTag("Data", var1);
+			entityPlayer2 = (EntityPlayer)this.playerEntities.get(0);
+		}
+
+		File file3 = new File(this.saveDirectory, "excl_frail");
+		if(this.exclFrailMode && !file3.exists()) {
+			try {
+				file3.createNewFile();
+			} catch (IOException iOException10) {
+				iOException10.printStackTrace();
+			}
+		} else if(!this.exclFrailMode && file3.exists()) {
+			ExtLogger.i("Deleting excl. frail file");
+			file3.delete();
+		}
+
+		NBTTagCompound nBTTagCompound4;
+		if(entityPlayer2 != null) {
+			nBTTagCompound4 = new NBTTagCompound();
+			entityPlayer2.writeToNBT(nBTTagCompound4);
+			if(this.func_7743_6dTJY85fUAeFQQy7F88o8DF5NB7CJ6G4Q3l5inh07jpyUPssKnqz7PyTSt8s()) {
+				nBTTagCompound1.setCompoundTag("Player", nBTTagCompound4);
+			}
+
+			if(this.field_7822_2eRdnuQtAZuLey7Ofz070770J18JA4JJg5Jx8S30G2x7f7PwDTigZWA2Y3I1 != null && this.field_7822_2eRdnuQtAZuLey7Ofz070770J18JA4JJg5Jx8S30G2x7f7PwDTigZWA2Y3I1.size() > 0) {
+				NBTTagCompound nBTTagCompound5 = new NBTTagCompound();
+				nBTTagCompound1.setCompoundTag("PortalZones", nBTTagCompound5);
+				int i6 = 0;
+
+				for(Iterator iterator7 = this.field_7822_2eRdnuQtAZuLey7Ofz070770J18JA4JJg5Jx8S30G2x7f7PwDTigZWA2Y3I1.iterator(); iterator7.hasNext(); ++i6) {
+					HandlerSetCheckpointUnknownClass handlerSetCheckpointUnknownClass8 = (HandlerSetCheckpointUnknownClass)iterator7.next();
+					nBTTagCompound5.setCompoundTag("pzone" + i6, handlerSetCheckpointUnknownClass8.func_7409_05gd7Pk1iguCvxEEh94yzW42f5PaNo8tU6KPZsgzRs8ORT0p9Fi42TzlRaLI());
+				}
+			}
+		}
+
+		nBTTagCompound4 = new NBTTagCompound();
+		nBTTagCompound4.setTag("Data", nBTTagCompound1);
 
 		try {
-			File var4 = new File(this.saveDirectory, "level.dat_new");
-			File var5 = new File(this.saveDirectory, "level.dat_old");
-			File var6 = new File(this.saveDirectory, "level.dat");
-			CompressedStreamTools.writeCompressed(var3, new FileOutputStream(var4));
-			if(var5.exists()) {
-				var5.delete();
-			}
-
-			var6.renameTo(var5);
-			if(var6.exists()) {
-				var6.delete();
-			}
-
-			var4.renameTo(var6);
-			if(var4.exists()) {
-				var4.delete();
-			}
-		} catch (Exception var7) {
-			var7.printStackTrace();
-		}
-
-	}
-
-	public int getBlockId(int var1, int var2, int var3) {
-		return var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000 ? (var2 < 0 ? 0 : (var2 >= 128 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15))) : 0;
-	}
-
-	public boolean blockExists(int var1, int var2, int var3) {
-		return var2 >= 0 && var2 < 128 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
-	}
-
-	public boolean checkChunksExist(int var1, int var2, int var3, int var4, int var5, int var6) {
-		if(var5 >= 0 && var2 < 128) {
-			var1 >>= 4;
-			var2 >>= 4;
-			var3 >>= 4;
-			var4 >>= 4;
-			var5 >>= 4;
-			var6 >>= 4;
-
-			for(int var7 = var1; var7 <= var4; ++var7) {
-				for(int var8 = var3; var8 <= var6; ++var8) {
-					if(!this.chunkExists(var7, var8)) {
+			File file11 = new File(this.saveDirectory, "level.dat_new");
+			File file12 = new File(this.saveDirectory, "level.dat_old");
+			File file13 = new File(this.saveDirectory, "level.dat");
+			CompressedStreamTools.writeCompressed(nBTTagCompound4, new FileOutputStream(file11));
+			if(file12.exists()) {
+				file12.delete();
+			}
+
+			file13.renameTo(file12);
+			if(file13.exists()) {
+				file13.delete();
+			}
+
+			file11.renameTo(file13);
+			if(file11.exists()) {
+				file11.delete();
+			}
+		} catch (Exception exception9) {
+			exception9.printStackTrace();
+		}
+
+	}
+
+	public boolean saveWorld(int integer) {
+		if(!this.chunkProvider.canSave()) {
+			return true;
+		} else {
+			if(integer == 0) {
+				this.saveLevel();
+			}
+
+			return this.chunkProvider.saveChunks(false, (IProgressUpdate)null);
+		}
+	}
+
+	public int getBlockId(int blockX, int blockY, int blockZ) {
+		return blockX >= -32000000 && blockZ >= -32000000 && blockX < 32000000 && blockZ <= 32000000 ? (blockY < 0 ? 0 : (blockY >= 128 ? 0 : this.getChunkFromChunkCoords(blockX >> 4, blockZ >> 4).getBlockID(blockX & 15, blockY, blockZ & 15))) : 0;
+	}
+
+	public boolean blockExists(int x, int y, int z) {
+		return y >= 0 && y < 128 ? this.chunkExists(x >> 4, z >> 4) : false;
+	}
+
+	public boolean checkChunksExist(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		if(maxY >= 0 && minY < 128) {
+			minX >>= 4;
+			minY >>= 4;
+			minZ >>= 4;
+			maxX >>= 4;
+			maxY >>= 4;
+			maxZ >>= 4;
+
+			for(int i7 = minX; i7 <= maxX; ++i7) {
+				for(int i8 = minZ; i8 <= maxZ; ++i8) {
+					if(!this.chunkExists(i7, i8)) {
 						return false;
 					}
 				}
@@ -298,85 +426,85 @@
 		}
 	}
 
-	private boolean chunkExists(int var1, int var2) {
-		return this.chunkProvider.chunkExists(var1, var2);
-	}
-
-	public Chunk getChunkFromBlockCoords(int var1, int var2) {
-		return this.getChunkFromChunkCoords(var1 >> 4, var2 >> 4);
-	}
-
-	public Chunk getChunkFromChunkCoords(int var1, int var2) {
-		return this.chunkProvider.provideChunk(var1, var2);
-	}
-
-	public boolean setBlockAndMetadata(int var1, int var2, int var3, int var4, int var5) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
-				return false;
-			} else if(var2 >= 128) {
-				return false;
-			} else {
-				Chunk var6 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				return var6.setBlockIDWithMetadata(var1 & 15, var2, var3 & 15, var4, var5);
-			}
-		} else {
-			return false;
-		}
-	}
-
-	public boolean setBlock(int var1, int var2, int var3, int var4) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
-				return false;
-			} else if(var2 >= 128) {
-				return false;
-			} else {
-				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				return var5.setBlockID(var1 & 15, var2, var3 & 15, var4);
-			}
-		} else {
-			return false;
-		}
-	}
-
-	public Material getBlockMaterial(int var1, int var2, int var3) {
-		int var4 = this.getBlockId(var1, var2, var3);
-		return var4 == 0 ? Material.air : Block.blocksList[var4].material;
-	}
-
-	public int getBlockMetadata(int var1, int var2, int var3) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
-				return 0;
-			} else if(var2 >= 128) {
-				return 0;
-			} else {
-				Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				return var4.getBlockMetadata(var1, var2, var3);
+	private boolean chunkExists(int x, int z) {
+		return this.chunkProvider.chunkExists(x, z);
+	}
+
+	public Chunk getChunkFromBlockCoords(int x, int z) {
+		return this.getChunkFromChunkCoords(x >> 4, z >> 4);
+	}
+
+	public Chunk getChunkFromChunkCoords(int x, int z) {
+		return this.chunkProvider.provideChunk(x, z);
+	}
+
+	public boolean setBlockAndMetadata(int x, int y, int z, int id, int metadata) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y < 0) {
+				return false;
+			} else if(y >= 128) {
+				return false;
+			} else {
+				Chunk chunk6 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				return chunk6.setBlockIDWithMetadata(x & 15, y, z & 15, id, metadata);
+			}
+		} else {
+			return false;
+		}
+	}
+
+	public boolean setBlock(int x, int y, int z, int id) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y < 0) {
+				return false;
+			} else if(y >= 128) {
+				return false;
+			} else {
+				Chunk chunk5 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				return chunk5.setBlockID(x & 15, y, z & 15, id);
+			}
+		} else {
+			return false;
+		}
+	}
+
+	public Material getBlockMaterial(int x, int y, int z) {
+		int i4 = this.getBlockId(x, y, z);
+		return i4 == 0 ? Material.air : Block.blocksList[i4].material;
+	}
+
+	public int getBlockMetadata(int x, int y, int z) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y < 0) {
+				return 0;
+			} else if(y >= 128) {
+				return 0;
+			} else {
+				Chunk chunk4 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				x &= 15;
+				z &= 15;
+				return chunk4.getBlockMetadata(x, y, z);
 			}
 		} else {
 			return 0;
 		}
 	}
 
-	public void setBlockMetadataWithNotify(int var1, int var2, int var3, int var4) {
-		this.setBlockMetadata(var1, var2, var3, var4);
+	public void setBlockMetadataWithNotify(int x, int y, int z, int metadata) {
+		this.setBlockMetadata(x, y, z, metadata);
 	}
 
-	public boolean setBlockMetadata(int var1, int var2, int var3, int var4) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
+	public boolean setBlockMetadata(int x, int y, int z, int metadata) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(y >= 128) {
 				return false;
 			} else {
-				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				var5.setBlockMetadata(var1, var2, var3, var4);
+				Chunk chunk5 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				x &= 15;
+				z &= 15;
+				chunk5.setBlockMetadata(x, y, z, metadata);
 				return true;
 			}
 		} else {
@@ -384,353 +512,367 @@
 		}
 	}
 
-	public boolean setBlockWithNotify(int var1, int var2, int var3, int var4) {
-		if(this.setBlock(var1, var2, var3, var4)) {
-			this.notifyBlockChange(var1, var2, var3, var4);
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public boolean setBlockAndMetadataWithNotify(int var1, int var2, int var3, int var4, int var5) {
-		if(this.setBlockAndMetadata(var1, var2, var3, var4, var5)) {
-			this.notifyBlockChange(var1, var2, var3, var4);
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public void markBlockNeedsUpdate(int var1, int var2, int var3) {
-		for(int var4 = 0; var4 < this.worldAccesses.size(); ++var4) {
-			((IWorldAccess)this.worldAccesses.get(var4)).markBlockAndNeighborsNeedsUpdate(var1, var2, var3);
-		}
-
-	}
-
-	protected void notifyBlockChange(int var1, int var2, int var3, int var4) {
-		this.markBlockNeedsUpdate(var1, var2, var3);
-		this.notifyBlocksOfNeighborChange(var1, var2, var3, var4);
-	}
-
-	public void markBlocksDirtyVertical(int var1, int var2, int var3, int var4) {
-		if(var3 > var4) {
-			int var5 = var4;
-			var4 = var3;
-			var3 = var5;
-		}
-
-		this.markBlocksDirty(var1, var3, var2, var1, var4, var2);
-	}
-
-	public void markBlocksDirty(int var1, int var2, int var3, int var4, int var5, int var6) {
-		for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
-			((IWorldAccess)this.worldAccesses.get(var7)).markBlockRangeNeedsUpdate(var1, var2, var3, var4, var5, var6);
-		}
-
-	}
-
-	public void notifyBlocksOfNeighborChange(int var1, int var2, int var3, int var4) {
-		this.notifyBlockOfNeighborChange(var1 - 1, var2, var3, var4);
-		this.notifyBlockOfNeighborChange(var1 + 1, var2, var3, var4);
-		this.notifyBlockOfNeighborChange(var1, var2 - 1, var3, var4);
-		this.notifyBlockOfNeighborChange(var1, var2 + 1, var3, var4);
-		this.notifyBlockOfNeighborChange(var1, var2, var3 - 1, var4);
-		this.notifyBlockOfNeighborChange(var1, var2, var3 + 1, var4);
-	}
-
-	private void notifyBlockOfNeighborChange(int var1, int var2, int var3, int var4) {
+	public boolean setBlockWithNotify(int x, int y, int z, int id) {
+		if(this.setBlock(x, y, z, id)) {
+			this.notifyBlockChange(x, y, z, id);
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public boolean setBlockAndMetadataWithNotify(int x, int y, int z, int id, int metadata) {
+		if(this.setBlockAndMetadata(x, y, z, id, metadata)) {
+			this.notifyBlockChange(x, y, z, id);
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public void markBlockNeedsUpdate(int x, int y, int z) {
+		if(y >= 0) {
+			for(int i4 = 0; i4 < this.worldAccesses.size(); ++i4) {
+				((IWorldAccess)this.worldAccesses.get(i4)).markBlockAndNeighborsNeedsUpdate(x, y, z);
+			}
+
+		}
+	}
+
+	protected void notifyBlockChange(int x, int y, int z, int id) {
+		this.markBlockNeedsUpdate(x, y, z);
+		this.notifyBlocksOfNeighborChange(x, y, z, id);
+	}
+
+	public void markBlocksDirtyVertical(int x, int y, int z, int maxY) {
+		if(z > maxY) {
+			int i5 = maxY;
+			maxY = z;
+			z = i5;
+		}
+
+		this.markBlocksDirty(x, z, y, x, maxY, y);
+	}
+
+	public void markBlocksDirty(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		for(int i7 = 0; i7 < this.worldAccesses.size(); ++i7) {
+			((IWorldAccess)this.worldAccesses.get(i7)).markBlockRangeNeedsUpdate(minX, minY, minZ, maxX, maxY, maxZ);
+		}
+
+	}
+
+	public void notifyBlocksOfNeighborChange(int x, int y, int z, int id) {
+		this.notifyBlockOfNeighborChange(x - 1, y, z, id);
+		this.notifyBlockOfNeighborChange(x + 1, y, z, id);
+		this.notifyBlockOfNeighborChange(x, y - 1, z, id);
+		this.notifyBlockOfNeighborChange(x, y + 1, z, id);
+		this.notifyBlockOfNeighborChange(x, y, z - 1, id);
+		this.notifyBlockOfNeighborChange(x, y, z + 1, id);
+	}
+
+	private void notifyBlockOfNeighborChange(int x, int y, int z, int id) {
 		if(!this.editingBlocks && !this.multiplayerWorld) {
-			Block var5 = Block.blocksList[this.getBlockId(var1, var2, var3)];
-			if(var5 != null) {
-				var5.onNeighborBlockChange(this, var1, var2, var3, var4);
+			Block block5 = Block.blocksList[this.getBlockId(x, y, z)];
+			if(block5 != null) {
+				block5.onNeighborBlockChange(this, x, y, z, id);
 			}
-
 		}
-	}
-
-	public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
-		return this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).canBlockSeeTheSky(var1 & 15, var2, var3 & 15);
-	}
-
-	public int getBlockLightValue(int var1, int var2, int var3) {
-		return this.getBlockLightValue_do(var1, var2, var3, true);
-	}
-
-	public int getBlockLightValue_do(int var1, int var2, int var3, boolean var4) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			int var5;
-			if(var4) {
-				var5 = this.getBlockId(var1, var2, var3);
-				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID) {
-					int var6 = this.getBlockLightValue_do(var1, var2 + 1, var3, false);
-					int var7 = this.getBlockLightValue_do(var1 + 1, var2, var3, false);
-					int var8 = this.getBlockLightValue_do(var1 - 1, var2, var3, false);
-					int var9 = this.getBlockLightValue_do(var1, var2, var3 + 1, false);
-					int var10 = this.getBlockLightValue_do(var1, var2, var3 - 1, false);
-					if(var7 > var6) {
-						var6 = var7;
-					}
-
-					if(var8 > var6) {
-						var6 = var8;
-					}
-
-					if(var9 > var6) {
-						var6 = var9;
-					}
-
-					if(var10 > var6) {
-						var6 = var10;
-					}
-
-					return var6;
+
+	}
+
+	public boolean canBlockSeeTheSky(int x, int y, int z) {
+		return this.getChunkFromChunkCoords(x >> 4, z >> 4).canBlockSeeTheSky(x & 15, y, z & 15);
+	}
+
+	public int getBlockLightValue(int x, int y, int z) {
+		return this.getBlockLightValue_do(x, y, z, true);
+	}
+
+	public int getBlockLightValue(int integer1, int integer2, int integer3, boolean boolean4) {
+		return this.getBlockLightValue_do(integer1, integer2, integer3, true, boolean4);
+	}
+
+	public int getBlockLightValue_do(int x, int y, int z, boolean update) {
+		return this.getBlockLightValue_do(x, y, z, update, false);
+	}
+
+	public int getBlockLightValue_do(int integer1, int integer2, int integer3, boolean boolean4, boolean boolean5) {
+		int i6 = this.skylightSubtracted;
+		if(integer1 >= -32000000 && integer3 >= -32000000 && integer1 < 32000000 && integer3 <= 32000000) {
+			int i7;
+			if(boolean4) {
+				i7 = this.getBlockId(integer1, integer2, integer3);
+				if(i7 == Block.stairSingle.blockID || i7 == Block.tilledField.blockID) {
+					int i13 = this.getBlockLightValue_do(integer1, integer2 + 1, integer3, false);
+					int i9 = this.getBlockLightValue_do(integer1 + 1, integer2, integer3, false);
+					int i10 = this.getBlockLightValue_do(integer1 - 1, integer2, integer3, false);
+					int i11 = this.getBlockLightValue_do(integer1, integer2, integer3 + 1, false);
+					int i12 = this.getBlockLightValue_do(integer1, integer2, integer3 - 1, false);
+					if(i9 > i13) {
+						i13 = i9;
+					}
+
+					if(i10 > i13) {
+						i13 = i10;
+					}
+
+					if(i11 > i13) {
+						i13 = i11;
+					}
+
+					if(i12 > i13) {
+						i13 = i12;
+					}
+
+					return i13;
 				}
 			}
 
-			if(var2 < 0) {
+			if(integer2 < 0) {
 				return 0;
-			} else if(var2 >= 128) {
-				var5 = 15 - this.skylightSubtracted;
-				if(var5 < 0) {
-					var5 = 0;
+			} else if(integer2 >= 128) {
+				i7 = 15 - i6;
+				if(i7 < 0) {
+					i7 = 0;
 				}
 
-				return var5;
+				return i7;
 			} else {
-				Chunk var11 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				return var11.getBlockLightValue(var1, var2, var3, this.skylightSubtracted);
+				Chunk chunk8 = this.getChunkFromChunkCoords(integer1 >> 4, integer3 >> 4);
+				integer1 &= 15;
+				integer3 &= 15;
+				return chunk8.getBlockLightValue(integer1, integer2, integer3, i6);
 			}
 		} else {
 			return 15;
 		}
 	}
 
-	public boolean canExistingBlockSeeTheSky(int var1, int var2, int var3) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
+	public boolean canExistingBlockSeeTheSky(int x, int y, int z) {
+		if(x >= -32000000 && z >= -32000000 && x < 32000000 && z <= 32000000) {
+			if(y < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(y >= 128) {
 				return true;
-			} else if(!this.chunkExists(var1 >> 4, var3 >> 4)) {
+			} else if(!this.chunkExists(x >> 4, z >> 4)) {
 				return false;
 			} else {
-				Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				return var4.canBlockSeeTheSky(var1, var2, var3);
+				Chunk chunk4 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+				x &= 15;
+				z &= 15;
+				return chunk4.canBlockSeeTheSky(x, y, z);
 			}
 		} else {
 			return false;
 		}
 	}
 
-	public int getHeightValue(int var1, int var2) {
-		if(var1 >= -32000000 && var2 >= -32000000 && var1 < 32000000 && var2 <= 32000000) {
-			if(!this.chunkExists(var1 >> 4, var2 >> 4)) {
+	public int getHeightValue(int blockX, int blockZ) {
+		if(blockX >= -32000000 && blockZ >= -32000000 && blockX < 32000000 && blockZ <= 32000000) {
+			if(!this.chunkExists(blockX >> 4, blockZ >> 4)) {
 				return 0;
 			} else {
-				Chunk var3 = this.getChunkFromChunkCoords(var1 >> 4, var2 >> 4);
-				return var3.getHeightValue(var1 & 15, var2 & 15);
+				Chunk chunk3 = this.getChunkFromChunkCoords(blockX >> 4, blockZ >> 4);
+				return chunk3.getHeightValue(blockX & 15, blockZ & 15);
 			}
 		} else {
 			return 0;
 		}
 	}
 
-	public void neighborLightPropagationChanged(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-		if(this.blockExists(var2, var3, var4)) {
-			if(var1 == EnumSkyBlock.Sky) {
-				if(this.canExistingBlockSeeTheSky(var2, var3, var4)) {
-					var5 = 15;
-				}
-			} else if(var1 == EnumSkyBlock.Block) {
-				int var6 = this.getBlockId(var2, var3, var4);
-				if(Block.lightValue[var6] > var5) {
-					var5 = Block.lightValue[var6];
-				}
-			}
-
-			if(this.getSavedLightValue(var1, var2, var3, var4) != var5) {
-				this.scheduleLightingUpdate(var1, var2, var3, var4, var2, var3, var4);
-			}
-
+	public void neighborLightPropagationChanged(EnumSkyBlock skyBlock, int x, int y, int z, int lightValue) {
+		if(this.blockExists(x, y, z)) {
+			if(skyBlock == EnumSkyBlock.Sky) {
+				if(this.canExistingBlockSeeTheSky(x, y, z)) {
+					lightValue = 15;
+				}
+			} else if(skyBlock == EnumSkyBlock.Block) {
+				int i6 = this.getBlockId(x, y, z);
+				if(Block.lightValue[i6] > lightValue) {
+					lightValue = Block.lightValue[i6];
+				}
+			}
+
+			if(this.getSavedLightValue(skyBlock, x, y, z) != lightValue) {
+				this.scheduleLightingUpdate(skyBlock, x, y, z, x, y, z);
+			}
 		}
+
 	}
 
-	public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
-		if(var3 >= 0 && var3 < 128 && var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000) {
-			int var5 = var2 >> 4;
-			int var6 = var4 >> 4;
-			if(!this.chunkExists(var5, var6)) {
+	public int getSavedLightValue(EnumSkyBlock skyBlock, int blockX, int blockY, int blockZ) {
+		if(blockY >= 0 && blockY < 128 && blockX >= -32000000 && blockZ >= -32000000 && blockX < 32000000 && blockZ <= 32000000) {
+			int i5 = blockX >> 4;
+			int i6 = blockZ >> 4;
+			if(!this.chunkExists(i5, i6)) {
 				return 0;
 			} else {
-				Chunk var7 = this.getChunkFromChunkCoords(var5, var6);
-				return var7.getSavedLightValue(var1, var2 & 15, var3, var4 & 15);
+				Chunk chunk7 = this.getChunkFromChunkCoords(i5, i6);
+
+				try {
+					return chunk7.getSavedLightValue(skyBlock, blockX & 15, blockY, blockZ & 15);
+				} catch (StackOverflowError stackOverflowError9) {
+					System.out.println("StckError at " + blockX + "," + blockY + "," + blockZ);
+					return 0;
+				}
 			}
 		} else {
-			return var1.defaultLightValue;
+			return skyBlock.defaultLightValue;
 		}
 	}
 
-	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-		if(var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000) {
-			if(var3 >= 0) {
-				if(var3 < 128) {
-					if(this.chunkExists(var2 >> 4, var4 >> 4)) {
-						Chunk var6 = this.getChunkFromChunkCoords(var2 >> 4, var4 >> 4);
-						var6.setLightValue(var1, var2 & 15, var3, var4 & 15, var5);
-
-						for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
-							((IWorldAccess)this.worldAccesses.get(var7)).markBlockAndNeighborsNeedsUpdate(var2, var3, var4);
-						}
-
-					}
-				}
+	public void setLightValue(EnumSkyBlock skyBlock, int blockX, int blockY, int blockZ, int integer5) {
+		if(blockX >= -32000000 && blockZ >= -32000000 && blockX < 32000000 && blockZ <= 32000000 && blockY >= 0 && blockY < 128 && this.chunkExists(blockX >> 4, blockZ >> 4)) {
+			Chunk chunk6 = this.getChunkFromChunkCoords(blockX >> 4, blockZ >> 4);
+			chunk6.setLightValue(skyBlock, blockX & 15, blockY, blockZ & 15, integer5);
+
+			for(int i7 = 0; i7 < this.worldAccesses.size(); ++i7) {
+				((IWorldAccess)this.worldAccesses.get(i7)).markBlockAndNeighborsNeedsUpdate(blockX, blockY, blockZ);
 			}
 		}
-	}
-
-	public float getBrightness(int var1, int var2, int var3) {
-		return lightBrightnessTable[this.getBlockLightValue(var1, var2, var3)];
+
+	}
+
+	public float getRenderSideBrightness(int integer1, int integer2, int integer3) {
+		return lightBrightnessTable[this.getBlockLightValue(integer1, integer2, integer3, true)];
+	}
+
+	public float getBrightness(int x, int y, int z) {
+		return lightBrightnessTable[this.getBlockLightValue(x, y, z)];
 	}
 
 	public boolean isDaytime() {
 		return this.skylightSubtracted < 4;
 	}
 
-	public MovingObjectPosition rayTraceBlocks(Vec3D var1, Vec3D var2) {
-		return this.rayTraceBlocks_do(var1, var2, false);
+	public MovingObjectPosition rayTraceBlocks(Vec3D vector1, Vec3D vector2) {
+		return this.rayTraceBlocks_do(vector1, vector2, false);
 	}
 
-	public MovingObjectPosition rayTraceBlocks_do(Vec3D var1, Vec3D var2, boolean var3) {
-		if(!Double.isNaN(var1.xCoord) && !Double.isNaN(var1.yCoord) && !Double.isNaN(var1.zCoord)) {
-			if(!Double.isNaN(var2.xCoord) && !Double.isNaN(var2.yCoord) && !Double.isNaN(var2.zCoord)) {
-				int var4 = MathHelper.floor_double(var2.xCoord);
-				int var5 = MathHelper.floor_double(var2.yCoord);
-				int var6 = MathHelper.floor_double(var2.zCoord);
-				int var7 = MathHelper.floor_double(var1.xCoord);
-				int var8 = MathHelper.floor_double(var1.yCoord);
-				int var9 = MathHelper.floor_double(var1.zCoord);
-				int var10 = 20;
-
-				while(var10-- >= 0) {
-					if(Double.isNaN(var1.xCoord) || Double.isNaN(var1.yCoord) || Double.isNaN(var1.zCoord)) {
-						return null;
-					}
-
-					if(var7 == var4 && var8 == var5 && var9 == var6) {
-						return null;
-					}
-
-					double var11 = 999.0D;
-					double var13 = 999.0D;
-					double var15 = 999.0D;
-					if(var4 > var7) {
-						var11 = (double)var7 + 1.0D;
-					}
-
-					if(var4 < var7) {
-						var11 = (double)var7 + 0.0D;
-					}
-
-					if(var5 > var8) {
-						var13 = (double)var8 + 1.0D;
-					}
-
-					if(var5 < var8) {
-						var13 = (double)var8 + 0.0D;
-					}
-
-					if(var6 > var9) {
-						var15 = (double)var9 + 1.0D;
-					}
-
-					if(var6 < var9) {
-						var15 = (double)var9 + 0.0D;
-					}
-
-					double var17 = 999.0D;
-					double var19 = 999.0D;
-					double var21 = 999.0D;
-					double var23 = var2.xCoord - var1.xCoord;
-					double var25 = var2.yCoord - var1.yCoord;
-					double var27 = var2.zCoord - var1.zCoord;
-					if(var11 != 999.0D) {
-						var17 = (var11 - var1.xCoord) / var23;
-					}
-
-					if(var13 != 999.0D) {
-						var19 = (var13 - var1.yCoord) / var25;
-					}
-
-					if(var15 != 999.0D) {
-						var21 = (var15 - var1.zCoord) / var27;
-					}
-
-					boolean var29 = false;
-					byte var35;
-					if(var17 < var19 && var17 < var21) {
-						if(var4 > var7) {
-							var35 = 4;
-						} else {
-							var35 = 5;
-						}
-
-						var1.xCoord = var11;
-						var1.yCoord += var25 * var17;
-						var1.zCoord += var27 * var17;
-					} else if(var19 < var21) {
-						if(var5 > var8) {
-							var35 = 0;
-						} else {
-							var35 = 1;
-						}
-
-						var1.xCoord += var23 * var19;
-						var1.yCoord = var13;
-						var1.zCoord += var27 * var19;
+	public MovingObjectPosition rayTraceBlocks_do(Vec3D vector1, Vec3D vector2, boolean boolean3) {
+		if(!Double.isNaN(vector1.xCoord) && !Double.isNaN(vector1.yCoord) && !Double.isNaN(vector1.zCoord)) {
+			if(!Double.isNaN(vector2.xCoord) && !Double.isNaN(vector2.yCoord) && !Double.isNaN(vector2.zCoord)) {
+				int i4 = MathHelper.floor_double(vector2.xCoord);
+				int i5 = MathHelper.floor_double(vector2.yCoord);
+				int i6 = MathHelper.floor_double(vector2.zCoord);
+				int i7 = MathHelper.floor_double(vector1.xCoord);
+				int i8 = MathHelper.floor_double(vector1.yCoord);
+				int i9 = MathHelper.floor_double(vector1.zCoord);
+				int i10 = 20;
+
+				while(i10-- >= 0) {
+					if(Double.isNaN(vector1.xCoord) || Double.isNaN(vector1.yCoord) || Double.isNaN(vector1.zCoord)) {
+						return null;
+					}
+
+					if(i7 == i4 && i8 == i5 && i9 == i6) {
+						return null;
+					}
+
+					double d11 = 999.0D;
+					double d13 = 999.0D;
+					double d15 = 999.0D;
+					if(i4 > i7) {
+						d11 = (double)i7 + 1.0D;
+					}
+
+					if(i4 < i7) {
+						d11 = (double)i7 + 0.0D;
+					}
+
+					if(i5 > i8) {
+						d13 = (double)i8 + 1.0D;
+					}
+
+					if(i5 < i8) {
+						d13 = (double)i8 + 0.0D;
+					}
+
+					if(i6 > i9) {
+						d15 = (double)i9 + 1.0D;
+					}
+
+					if(i6 < i9) {
+						d15 = (double)i9 + 0.0D;
+					}
+
+					double d17 = 999.0D;
+					double d19 = 999.0D;
+					double d21 = 999.0D;
+					double d23 = vector2.xCoord - vector1.xCoord;
+					double d25 = vector2.yCoord - vector1.yCoord;
+					double d27 = vector2.zCoord - vector1.zCoord;
+					if(d11 != 999.0D) {
+						d17 = (d11 - vector1.xCoord) / d23;
+					}
+
+					if(d13 != 999.0D) {
+						d19 = (d13 - vector1.yCoord) / d25;
+					}
+
+					if(d15 != 999.0D) {
+						d21 = (d15 - vector1.zCoord) / d27;
+					}
+
+					byte b29;
+					if(d17 < d19 && d17 < d21) {
+						if(i4 > i7) {
+							b29 = 4;
+						} else {
+							b29 = 5;
+						}
+
+						vector1.xCoord = d11;
+						vector1.yCoord += d25 * d17;
+						vector1.zCoord += d27 * d17;
+					} else if(d19 < d21) {
+						if(i5 > i8) {
+							b29 = 0;
+						} else {
+							b29 = 1;
+						}
+
+						vector1.xCoord += d23 * d19;
+						vector1.yCoord = d13;
+						vector1.zCoord += d27 * d19;
 					} else {
-						if(var6 > var9) {
-							var35 = 2;
+						if(i6 > i9) {
+							b29 = 2;
 						} else {
-							var35 = 3;
+							b29 = 3;
 						}
 
-						var1.xCoord += var23 * var21;
-						var1.yCoord += var25 * var21;
-						var1.zCoord = var15;
-					}
-
-					Vec3D var30 = Vec3D.createVector(var1.xCoord, var1.yCoord, var1.zCoord);
-					var7 = (int)(var30.xCoord = (double)MathHelper.floor_double(var1.xCoord));
-					if(var35 == 5) {
-						--var7;
-						++var30.xCoord;
-					}
-
-					var8 = (int)(var30.yCoord = (double)MathHelper.floor_double(var1.yCoord));
-					if(var35 == 1) {
-						--var8;
-						++var30.yCoord;
-					}
-
-					var9 = (int)(var30.zCoord = (double)MathHelper.floor_double(var1.zCoord));
-					if(var35 == 3) {
-						--var9;
-						++var30.zCoord;
-					}
-
-					int var31 = this.getBlockId(var7, var8, var9);
-					int var32 = this.getBlockMetadata(var7, var8, var9);
-					Block var33 = Block.blocksList[var31];
-					if(var31 > 0 && var33.canCollideCheck(var32, var3)) {
-						MovingObjectPosition var34 = var33.collisionRayTrace(this, var7, var8, var9, var1, var2);
-						if(var34 != null) {
-							return var34;
+						vector1.xCoord += d23 * d21;
+						vector1.yCoord += d25 * d21;
+						vector1.zCoord = d15;
+					}
+
+					Vec3D vec3D30 = Vec3D.createVector(vector1.xCoord, vector1.yCoord, vector1.zCoord);
+					i7 = (int)(vec3D30.xCoord = (double)MathHelper.floor_double(vector1.xCoord));
+					if(b29 == 5) {
+						--i7;
+						++vec3D30.xCoord;
+					}
+
+					i8 = (int)(vec3D30.yCoord = (double)MathHelper.floor_double(vector1.yCoord));
+					if(b29 == 1) {
+						--i8;
+						++vec3D30.yCoord;
+					}
+
+					i9 = (int)(vec3D30.zCoord = (double)MathHelper.floor_double(vector1.zCoord));
+					if(b29 == 3) {
+						--i9;
+						++vec3D30.zCoord;
+					}
+
+					int i31 = this.getBlockId(i7, i8, i9);
+					int i32 = this.getBlockMetadata(i7, i8, i9);
+					Block block33 = Block.blocksList[i31];
+					if(i31 > 0 && block33.canCollideCheck(i32, boolean3)) {
+						MovingObjectPosition movingObjectPosition34 = block33.collisionRayTrace(this, i7, i8, i9, vector1, vector2);
+						if(movingObjectPosition34 != null) {
+							return movingObjectPosition34;
 						}
 					}
 				}
@@ -744,182 +886,208 @@
 		}
 	}
 
-	public void playSoundAtEntity(Entity var1, String var2, float var3, float var4) {
-		for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-			((IWorldAccess)this.worldAccesses.get(var5)).playSound(var2, var1.posX, var1.posY - (double)var1.yOffset, var1.posZ, var3, var4);
-		}
-
-	}
-
-	public void playSoundEffect(double var1, double var3, double var5, String var7, float var8, float var9) {
-		for(int var10 = 0; var10 < this.worldAccesses.size(); ++var10) {
-			((IWorldAccess)this.worldAccesses.get(var10)).playSound(var7, var1, var3, var5, var8, var9);
-		}
-
-	}
-
-	public void playRecord(String var1, int var2, int var3, int var4) {
-		for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-			((IWorldAccess)this.worldAccesses.get(var5)).playRecord(var1, var2, var3, var4);
-		}
-
-	}
-
-	public void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-		for(int var14 = 0; var14 < this.worldAccesses.size(); ++var14) {
-			((IWorldAccess)this.worldAccesses.get(var14)).spawnParticle(var1, var2, var4, var6, var8, var10, var12);
-		}
-
-	}
-
-	public boolean spawnEntityInWorld(Entity var1) {
-		int var2 = MathHelper.floor_double(var1.posX / 16.0D);
-		int var3 = MathHelper.floor_double(var1.posZ / 16.0D);
-		boolean var4 = false;
-		if(var1 instanceof EntityPlayer) {
-			var4 = true;
-		}
-
-		if(!var4 && !this.chunkExists(var2, var3)) {
+	public void playSoundAtEntity(Entity entity, String soundName, float volume, float pitch) {
+		for(int i5 = 0; i5 < this.worldAccesses.size(); ++i5) {
+			((IWorldAccess)this.worldAccesses.get(i5)).playSound(soundName, entity.posX, entity.posY - (double)entity.yOffset, entity.posZ, volume, pitch);
+		}
+
+	}
+
+	public void playSoundEffect(double x, double y, double z, String soundName, float volume, float pitch) {
+		for(int i10 = 0; i10 < this.worldAccesses.size(); ++i10) {
+			((IWorldAccess)this.worldAccesses.get(i10)).playSound(soundName, x, y, z, volume, pitch);
+		}
+
+	}
+
+	public void playRecord(String recordName, int x, int y, int z) {
+		for(int i5 = 0; i5 < this.worldAccesses.size(); ++i5) {
+			((IWorldAccess)this.worldAccesses.get(i5)).playRecord(recordName, x, y, z);
+		}
+
+	}
+
+	public void spawnParticle(String particleName, double x, double y, double z, double motionX, double motionY, double motionZ) {
+		for(int i14 = 0; i14 < this.worldAccesses.size(); ++i14) {
+			((IWorldAccess)this.worldAccesses.get(i14)).spawnParticle(particleName, x, y, z, motionX, motionY, motionZ);
+		}
+
+	}
+
+	public boolean spawnEntityInWorld(Entity entity) {
+		int i2 = MathHelper.floor_double(entity.posX / 16.0D);
+		int i3 = MathHelper.floor_double(entity.posZ / 16.0D);
+		boolean z4 = false;
+		if(entity instanceof EntityPlayer && !(entity instanceof EntityShadowPlayer)) {
+			z4 = true;
+		}
+
+		if(!z4 && !this.chunkExists(i2, i3)) {
 			return false;
 		} else {
-			if(var1 instanceof EntityPlayer) {
-				this.playerEntities.add((EntityPlayer)var1);
+			if(entity instanceof EntityPlayer && !(entity instanceof EntityShadowPlayer)) {
+				this.playerEntities.add((EntityPlayer)entity);
 				System.out.println("Player count: " + this.playerEntities.size());
 			}
 
-			this.getChunkFromChunkCoords(var2, var3).addEntity(var1);
-			this.loadedEntityList.add(var1);
-			this.obtainEntitySkin(var1);
+			this.getChunkFromChunkCoords(i2, i3).addEntity(entity);
+			this.loadedEntityList.add(entity);
+			this.obtainEntitySkin(entity);
 			return true;
 		}
 	}
 
-	protected void obtainEntitySkin(Entity var1) {
-		for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-			((IWorldAccess)this.worldAccesses.get(var2)).obtainEntitySkin(var1);
-		}
-
-	}
-
-	protected void releaseEntitySkin(Entity var1) {
-		for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-			((IWorldAccess)this.worldAccesses.get(var2)).releaseEntitySkin(var1);
-		}
-
-	}
-
-	public void setEntityDead(Entity var1) {
-		var1.setEntityDead();
-		if(var1 instanceof EntityPlayer) {
-			this.playerEntities.remove((EntityPlayer)var1);
+	protected void obtainEntitySkin(Entity entity) {
+		for(int i2 = 0; i2 < this.worldAccesses.size(); ++i2) {
+			((IWorldAccess)this.worldAccesses.get(i2)).obtainEntitySkin(entity);
+		}
+
+	}
+
+	protected void releaseEntitySkin(Entity entity) {
+		for(int i2 = 0; i2 < this.worldAccesses.size(); ++i2) {
+			((IWorldAccess)this.worldAccesses.get(i2)).releaseEntitySkin(entity);
+		}
+
+	}
+
+	public void setEntityDead(Entity entity) {
+		entity.setEntityDead();
+		if(entity instanceof EntityPlayer) {
+			this.playerEntities.remove((EntityPlayer)entity);
 			System.out.println("Player count: " + this.playerEntities.size());
 		}
 
 	}
 
-	public void addWorldAccess(IWorldAccess var1) {
-		this.worldAccesses.add(var1);
-	}
-
-	public List getCollidingBoundingBoxes(Entity var1, AxisAlignedBB var2) {
+	public void addWorldAccess(IWorldAccess worldAccess) {
+		this.worldAccesses.add(worldAccess);
+	}
+
+	public void removeWorldAccess(IWorldAccess worldAccess) {
+		this.worldAccesses.remove(worldAccess);
+	}
+
+	public List getCollidingBoundingBoxes(Entity entity, AxisAlignedBB aabb) {
 		this.collidingBoundingBoxes.clear();
-		int var3 = MathHelper.floor_double(var2.minX);
-		int var4 = MathHelper.floor_double(var2.maxX + 1.0D);
-		int var5 = MathHelper.floor_double(var2.minY);
-		int var6 = MathHelper.floor_double(var2.maxY + 1.0D);
-		int var7 = MathHelper.floor_double(var2.minZ);
-		int var8 = MathHelper.floor_double(var2.maxZ + 1.0D);
+		int i3 = MathHelper.floor_double(aabb.minX);
+		int i4 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int i5 = MathHelper.floor_double(aabb.minY);
+		int i6 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int i7 = MathHelper.floor_double(aabb.minZ);
+		int i8 = MathHelper.floor_double(aabb.maxZ + 1.0D);
 
-		for(int var9 = var3; var9 < var4; ++var9) {
-			for(int var10 = var7; var10 < var8; ++var10) {
-				if(this.blockExists(var9, 64, var10)) {
-					for(int var11 = var5 - 1; var11 < var6; ++var11) {
-						Block var12 = Block.blocksList[this.getBlockId(var9, var11, var10)];
-						if(var12 != null) {
-							var12.getCollidingBoundingBoxes(this, var9, var11, var10, var2, this.collidingBoundingBoxes);
+		for(int i9 = i3; i9 < i4; ++i9) {
+			for(int i10 = i7; i10 < i8; ++i10) {
+				if(this.blockExists(i9, 64, i10)) {
+					for(int i11 = i5 - 1; i11 < i6; ++i11) {
+						Block block12 = Block.blocksList[this.getBlockId(i9, i11, i10)];
+						if(block12 != null) {
+							block12.getCollidingBoundingBoxes(this, i9, i11, i10, aabb, this.collidingBoundingBoxes);
 						}
 					}
 				}
 			}
 		}
 
-		double var14 = 0.25D;
-		List var15 = this.getEntitiesWithinAABBExcludingEntity(var1, var2.expand(var14, var14, var14));
+		double d14 = 0.25D;
+		List list15 = this.getEntitiesWithinAABBExcludingEntity(entity, aabb.expand(d14, d14, d14));
 
-		for(int var16 = 0; var16 < var15.size(); ++var16) {
-			AxisAlignedBB var13 = ((Entity)var15.get(var16)).getBoundingBox();
-			if(var13 != null && var13.intersectsWith(var2)) {
-				this.collidingBoundingBoxes.add(var13);
+		for(int i16 = 0; i16 < list15.size(); ++i16) {
+			AxisAlignedBB axisAlignedBB13 = ((Entity)list15.get(i16)).getBoundingBox();
+			if(axisAlignedBB13 != null && axisAlignedBB13.intersectsWith(aabb)) {
+				this.collidingBoundingBoxes.add(axisAlignedBB13);
 			}
 
-			var13 = var1.getCollisionBox((Entity)var15.get(var16));
-			if(var13 != null && var13.intersectsWith(var2)) {
-				this.collidingBoundingBoxes.add(var13);
+			axisAlignedBB13 = entity.getCollisionBox((Entity)list15.get(i16));
+			if(axisAlignedBB13 != null && axisAlignedBB13.intersectsWith(aabb)) {
+				this.collidingBoundingBoxes.add(axisAlignedBB13);
 			}
 		}
 
 		return this.collidingBoundingBoxes;
 	}
 
-	public int calculateSkylightSubtracted(float var1) {
-		float var2 = this.getCelestialAngle(var1);
-		float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F);
-		if(var3 < 0.0F) {
-			var3 = 0.0F;
-		}
-
-		if(var3 > 1.0F) {
-			var3 = 1.0F;
-		}
-
-		return (int)(var3 * 11.0F);
-	}
-
-	public float getCelestialAngle(float var1) {
-		int var2 = (int)(this.worldTime % 24000L);
-		float var3 = ((float)var2 + var1) / 24000.0F - 0.25F;
-		if(var3 < 0.0F) {
-			++var3;
-		}
-
-		if(var3 > 1.0F) {
-			--var3;
-		}
-
-		float var4 = var3;
-		var3 = 1.0F - (float)((Math.cos((double)var3 * Math.PI) + 1.0D) / 2.0D);
-		var3 = var4 + (var3 - var4) / 3.0F;
-		return var3;
-	}
-
-	public int getTopSolidOrLiquidBlock(int var1, int var2) {
-		Chunk var3 = this.getChunkFromBlockCoords(var1, var2);
-		int var4 = 127;
-		var1 &= 15;
-
-		for(var2 &= 15; var4 > 0; --var4) {
-			int var5 = var3.getBlockID(var1, var4, var2);
-			if(var5 != 0 && (Block.blocksList[var5].material.getIsSolid() || Block.blocksList[var5].material.getIsLiquid())) {
-				return var4 + 1;
+	public int calculateSkylightSubtracted(float renderPartialTick) {
+		float f2 = this.getCelestialAngle(renderPartialTick);
+		float f3 = 1.0F - (MathHelper.cos(f2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F);
+		if(f3 < 0.0F) {
+			f3 = 0.0F;
+		}
+
+		if(f3 > 1.0F) {
+			f3 = 1.0F;
+		}
+
+		boolean z4 = this.GetMilestone() % 10L == 0L && this.GetMilestone() > 0L;
+		return z4 ? 8 + (int)(f3 * 3.0F) : (int)(f3 * 11.0F);
+	}
+
+	public float getCelestialAngle(float renderPartialTick) {
+		int i2 = (int)(this.worldTime % 24000L);
+		float f3 = ((float)i2 + renderPartialTick) / 24000.0F - 0.25F;
+		if(f3 < 0.0F) {
+			++f3;
+		}
+
+		if(f3 > 1.0F) {
+			--f3;
+		}
+
+		float f4 = f3;
+		f3 = 1.0F - (float)((Math.cos((double)f3 * Math.PI) + 1.0D) / 2.0D);
+		f3 = f4 + (f3 - f4) / 3.0F;
+		return f3;
+	}
+
+	public int getTopSolidOrLiquidBlock(int x, int z) {
+		Chunk chunk3 = this.getChunkFromBlockCoords(x, z);
+		int i4 = 127;
+		x &= 15;
+
+		for(z &= 15; i4 > 0; --i4) {
+			int i5 = chunk3.getBlockID(x, i4, z);
+			if(i5 != 0 && (Block.blocksList[i5].material.getIsSolid() || Block.blocksList[i5].material.getIsLiquid())) {
+				return i4 + 1;
 			}
 		}
 
 		return -1;
 	}
 
-	public void scheduleBlockUpdate(int var1, int var2, int var3, int var4) {
-		NextTickListEntry var5 = new NextTickListEntry(var1, var2, var3, var4);
-		byte var6 = 8;
-		if(this.checkChunksExist(var1 - var6, var2 - var6, var3 - var6, var1 + var6, var2 + var6, var3 + var6)) {
-			if(var4 > 0) {
-				var5.setScheduledTime((long)Block.blocksList[var4].tickRate() + this.worldTime);
-			}
-
-			if(!this.scheduledTickSet.contains(var5)) {
-				this.scheduledTickSet.add(var5);
-				this.scheduledTickTreeSet.add(var5);
-			}
+	public int getPrecipitationHeight(int x, int z) {
+		return this.getChunkFromBlockCoords(x, z).getHeightValue(x & 15, z & 15);
+	}
+
+	public float getStarBrightness(float renderPartialTick) {
+		float f2 = this.getCelestialAngle(renderPartialTick);
+		float f3 = 1.0F - (MathHelper.cos(f2 * (float)Math.PI * 2.0F) * 2.0F + 0.75F);
+		if(f3 < 0.0F) {
+			f3 = 0.0F;
+		}
+
+		if(f3 > 1.0F) {
+			f3 = 1.0F;
+		}
+
+		return f3 * f3 * 0.5F;
+	}
+
+	public void scheduleBlockUpdate(int x, int y, int z, int id) {
+		NextTickListEntry nextTickListEntry5 = new NextTickListEntry(x, y, z, id);
+		byte b6 = 8;
+		if(this.checkChunksExist(x - b6, y - b6, z - b6, x + b6, y + b6, z + b6)) {
+			if(id > 0) {
+				nextTickListEntry5.setScheduledTime((long)Block.blocksList[id].tickRate() + this.worldTime);
+			}
+
+			this.listBeingWritten = true;
+			if(!this.scheduledTickSet.contains(nextTickListEntry5)) {
+				this.scheduledTickSet.add(nextTickListEntry5);
+				this.scheduledTickTreeSet.add(nextTickListEntry5);
+			}
+
+			this.listBeingWritten = false;
 		}
 
 	}
@@ -927,130 +1095,130 @@
 	public void updateEntities() {
 		this.loadedEntityList.removeAll(this.unloadedEntityList);
 
-		int var1;
-		Entity var2;
-		int var3;
-		int var4;
-		for(var1 = 0; var1 < this.unloadedEntityList.size(); ++var1) {
-			var2 = (Entity)this.unloadedEntityList.get(var1);
-			var3 = var2.chunkCoordX;
-			var4 = var2.chunkCoordZ;
-			if(var2.addedToChunk && this.chunkExists(var3, var4)) {
-				this.getChunkFromChunkCoords(var3, var4).removeEntity(var2);
+		int i1;
+		Entity entity2;
+		int i3;
+		int i4;
+		for(i1 = 0; i1 < this.unloadedEntityList.size(); ++i1) {
+			entity2 = (Entity)this.unloadedEntityList.get(i1);
+			i3 = entity2.chunkCoordX;
+			i4 = entity2.chunkCoordZ;
+			if(entity2.addedToChunk && this.chunkExists(i3, i4)) {
+				this.getChunkFromChunkCoords(i3, i4).removeEntity(entity2);
 			}
 		}
 
-		for(var1 = 0; var1 < this.unloadedEntityList.size(); ++var1) {
-			this.releaseEntitySkin((Entity)this.unloadedEntityList.get(var1));
+		for(i1 = 0; i1 < this.unloadedEntityList.size(); ++i1) {
+			this.releaseEntitySkin((Entity)this.unloadedEntityList.get(i1));
 		}
 
 		this.unloadedEntityList.clear();
 
-		for(var1 = 0; var1 < this.loadedEntityList.size(); ++var1) {
-			var2 = (Entity)this.loadedEntityList.get(var1);
-			if(var2.ridingEntity != null) {
-				if(!var2.ridingEntity.isDead && var2.ridingEntity.riddenByEntity == var2) {
+		for(i1 = 0; i1 < this.loadedEntityList.size(); ++i1) {
+			entity2 = (Entity)this.loadedEntityList.get(i1);
+			if(entity2.ridingEntity != null) {
+				if(!entity2.ridingEntity.isDead && entity2.ridingEntity.riddenByEntity == entity2) {
 					continue;
 				}
 
-				var2.ridingEntity.riddenByEntity = null;
-				var2.ridingEntity = null;
-			}
-
-			if(!var2.isDead) {
-				this.updateEntity(var2);
-			}
-
-			if(var2.isDead) {
-				var3 = var2.chunkCoordX;
-				var4 = var2.chunkCoordZ;
-				if(var2.addedToChunk && this.chunkExists(var3, var4)) {
-					this.getChunkFromChunkCoords(var3, var4).removeEntity(var2);
+				entity2.ridingEntity.riddenByEntity = null;
+				entity2.ridingEntity = null;
+			}
+
+			if(!entity2.isDead) {
+				this.updateEntity(entity2);
+			}
+
+			if(entity2.isDead) {
+				i3 = entity2.chunkCoordX;
+				i4 = entity2.chunkCoordZ;
+				if(entity2.addedToChunk && this.chunkExists(i3, i4)) {
+					this.getChunkFromChunkCoords(i3, i4).removeEntity(entity2);
 				}
 
-				this.loadedEntityList.remove(var1--);
-				this.releaseEntitySkin(var2);
+				this.loadedEntityList.remove(i1--);
+				this.releaseEntitySkin(entity2);
 			}
 		}
 
-		for(var1 = 0; var1 < this.loadedTileEntityList.size(); ++var1) {
-			TileEntity var5 = (TileEntity)this.loadedTileEntityList.get(var1);
-			var5.updateEntity();
+		for(i1 = 0; i1 < this.loadedTileEntityList.size(); ++i1) {
+			TileEntity tileEntity5 = (TileEntity)this.loadedTileEntityList.get(i1);
+			tileEntity5.updateEntity();
 		}
 
 	}
 
-	protected void updateEntity(Entity var1) {
-		int var2 = MathHelper.floor_double(var1.posX);
-		int var3 = MathHelper.floor_double(var1.posZ);
-		byte var4 = 16;
-		if(this.checkChunksExist(var2 - var4, 0, var3 - var4, var2 + var4, 128, var3 + var4)) {
-			var1.lastTickPosX = var1.posX;
-			var1.lastTickPosY = var1.posY;
-			var1.lastTickPosZ = var1.posZ;
-			var1.prevRotationYaw = var1.rotationYaw;
-			var1.prevRotationPitch = var1.rotationPitch;
-			if(var1.ridingEntity != null) {
-				var1.updateRidden();
+	protected void updateEntity(Entity entity) {
+		int i2 = MathHelper.floor_double(entity.posX);
+		int i3 = MathHelper.floor_double(entity.posZ);
+		byte b4 = 16;
+		if(this.checkChunksExist(i2 - b4, 0, i3 - b4, i2 + b4, 128, i3 + b4)) {
+			entity.lastTickPosX = entity.posX;
+			entity.lastTickPosY = entity.posY;
+			entity.lastTickPosZ = entity.posZ;
+			entity.prevRotationYaw = entity.rotationYaw;
+			entity.prevRotationPitch = entity.rotationPitch;
+			if(entity.ridingEntity != null) {
+				entity.updateRidden();
 			} else {
-				var1.onUpdate();
+				entity.onUpdate();
 			}
 
-			int var5 = MathHelper.floor_double(var1.posX / 16.0D);
-			int var6 = MathHelper.floor_double(var1.posY / 16.0D);
-			int var7 = MathHelper.floor_double(var1.posZ / 16.0D);
-			if(!var1.addedToChunk || var1.chunkCoordX != var5 || var1.chunkCoordY != var6 || var1.chunkCoordZ != var7) {
-				if(var1.addedToChunk && this.chunkExists(var1.chunkCoordX, var1.chunkCoordZ)) {
-					this.getChunkFromChunkCoords(var1.chunkCoordX, var1.chunkCoordZ).removeEntityAtIndex(var1, var1.chunkCoordY);
+			int i5 = MathHelper.floor_double(entity.posX / 16.0D);
+			int i6 = MathHelper.floor_double(entity.posY / 16.0D);
+			int i7 = MathHelper.floor_double(entity.posZ / 16.0D);
+			if(!entity.addedToChunk || entity.chunkCoordX != i5 || entity.chunkCoordY != i6 || entity.chunkCoordZ != i7) {
+				if(entity.addedToChunk && this.chunkExists(entity.chunkCoordX, entity.chunkCoordZ)) {
+					this.getChunkFromChunkCoords(entity.chunkCoordX, entity.chunkCoordZ).removeEntityAtIndex(entity, entity.chunkCoordY);
 				}
 
-				if(this.chunkExists(var5, var7)) {
-					this.getChunkFromChunkCoords(var5, var7).addEntity(var1);
+				if(this.chunkExists(i5, i7)) {
+					this.getChunkFromChunkCoords(i5, i7).addEntity(entity);
 				} else {
-					var1.addedToChunk = false;
+					entity.addedToChunk = false;
 					System.out.println("Removing entity because it\'s not in a chunk!!");
-					var1.setEntityDead();
+					entity.setEntityDead();
 				}
 			}
 
-			if(var1.riddenByEntity != null) {
-				if(!var1.riddenByEntity.isDead && var1.riddenByEntity.ridingEntity == var1) {
-					this.updateEntity(var1.riddenByEntity);
+			if(entity.riddenByEntity != null) {
+				if(!entity.riddenByEntity.isDead && entity.riddenByEntity.ridingEntity == entity) {
+					this.updateEntity(entity.riddenByEntity);
 				} else {
-					var1.riddenByEntity.ridingEntity = null;
-					var1.riddenByEntity = null;
+					entity.riddenByEntity.ridingEntity = null;
+					entity.riddenByEntity = null;
 				}
 			}
 
-			if(Double.isNaN(var1.posX) || Double.isInfinite(var1.posX)) {
-				var1.posX = var1.lastTickPosX;
-			}
-
-			if(Double.isNaN(var1.posY) || Double.isInfinite(var1.posY)) {
-				var1.posY = var1.lastTickPosY;
-			}
-
-			if(Double.isNaN(var1.posZ) || Double.isInfinite(var1.posZ)) {
-				var1.posZ = var1.lastTickPosZ;
-			}
-
-			if(Double.isNaN((double)var1.rotationPitch) || Double.isInfinite((double)var1.rotationPitch)) {
-				var1.rotationPitch = var1.prevRotationPitch;
-			}
-
-			if(Double.isNaN((double)var1.rotationYaw) || Double.isInfinite((double)var1.rotationYaw)) {
-				var1.rotationYaw = var1.prevRotationYaw;
-			}
-
+			if(Double.isNaN(entity.posX) || Double.isInfinite(entity.posX)) {
+				entity.posX = entity.lastTickPosX;
+			}
+
+			if(Double.isNaN(entity.posY) || Double.isInfinite(entity.posY)) {
+				entity.posY = entity.lastTickPosY;
+			}
+
+			if(Double.isNaN(entity.posZ) || Double.isInfinite(entity.posZ)) {
+				entity.posZ = entity.lastTickPosZ;
+			}
+
+			if(Double.isNaN((double)entity.rotationPitch) || Double.isInfinite((double)entity.rotationPitch)) {
+				entity.rotationPitch = entity.prevRotationPitch;
+			}
+
+			if(Double.isNaN((double)entity.rotationYaw) || Double.isInfinite((double)entity.rotationYaw)) {
+				entity.rotationYaw = entity.prevRotationYaw;
+			}
 		}
+
 	}
 
-	public boolean checkIfAABBIsClear(AxisAlignedBB var1) {
-		List var2 = this.getEntitiesWithinAABBExcludingEntity((Entity)null, var1);
+	public boolean checkIfAABBIsClear(AxisAlignedBB aabb) {
+		List list2 = this.getEntitiesWithinAABBExcludingEntity((Entity)null, aabb);
 
-		for(int var3 = 0; var3 < var2.size(); ++var3) {
-			Entity var4 = (Entity)var2.get(var3);
-			if(!var4.isDead && var4.preventEntitySpawning) {
+		for(int i3 = 0; i3 < list2.size(); ++i3) {
+			Entity entity4 = (Entity)list2.get(i3);
+			if(!entity4.isDead && entity4.preventEntitySpawning) {
 				return false;
 			}
 		}
@@ -1058,139 +1226,139 @@
 		return true;
 	}
 
-	public boolean getIsAnyLiquid(AxisAlignedBB var1) {
-		int var2 = MathHelper.floor_double(var1.minX);
-		int var3 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var4 = MathHelper.floor_double(var1.minY);
-		int var5 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var6 = MathHelper.floor_double(var1.minZ);
-		int var7 = MathHelper.floor_double(var1.maxZ + 1.0D);
-		if(var1.minX < 0.0D) {
-			--var2;
-		}
-
-		if(var1.minY < 0.0D) {
-			--var4;
-		}
-
-		if(var1.minZ < 0.0D) {
-			--var6;
-		}
-
-		for(int var8 = var2; var8 < var3; ++var8) {
-			for(int var9 = var4; var9 < var5; ++var9) {
-				for(int var10 = var6; var10 < var7; ++var10) {
-					Block var11 = Block.blocksList[this.getBlockId(var8, var9, var10)];
-					if(var11 != null && var11.material.getIsLiquid()) {
-						return true;
-					}
-				}
-			}
-		}
-
-		return false;
-	}
-
-	public boolean isBoundingBoxBurning(AxisAlignedBB var1) {
-		int var2 = MathHelper.floor_double(var1.minX);
-		int var3 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var4 = MathHelper.floor_double(var1.minY);
-		int var5 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var6 = MathHelper.floor_double(var1.minZ);
-		int var7 = MathHelper.floor_double(var1.maxZ + 1.0D);
-
-		for(int var8 = var2; var8 < var3; ++var8) {
-			for(int var9 = var4; var9 < var5; ++var9) {
-				for(int var10 = var6; var10 < var7; ++var10) {
-					int var11 = this.getBlockId(var8, var9, var10);
-					if(var11 == Block.fire.blockID || var11 == Block.lavaMoving.blockID || var11 == Block.lavaStill.blockID) {
-						return true;
-					}
-				}
-			}
-		}
-
-		return false;
-	}
-
-	public boolean handleMaterialAcceleration(AxisAlignedBB var1, Material var2, Entity var3) {
-		int var4 = MathHelper.floor_double(var1.minX);
-		int var5 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var6 = MathHelper.floor_double(var1.minY);
-		int var7 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var8 = MathHelper.floor_double(var1.minZ);
-		int var9 = MathHelper.floor_double(var1.maxZ + 1.0D);
-		boolean var10 = false;
-		Vec3D var11 = Vec3D.createVector(0.0D, 0.0D, 0.0D);
-
-		for(int var12 = var4; var12 < var5; ++var12) {
-			for(int var13 = var6; var13 < var7; ++var13) {
-				for(int var14 = var8; var14 < var9; ++var14) {
-					Block var15 = Block.blocksList[this.getBlockId(var12, var13, var14)];
-					if(var15 != null && var15.material == var2) {
-						double var16 = (double)((float)(var13 + 1) - BlockFluid.getFluidHeightPercent(this.getBlockMetadata(var12, var13, var14)));
-						if((double)var7 >= var16) {
-							var10 = true;
-							var15.velocityToAddToEntity(this, var12, var13, var14, var3, var11);
-						}
-					}
-				}
-			}
-		}
-
-		if(var11.lengthVector() > 0.0D) {
-			var11 = var11.normalize();
-			double var18 = 0.004D;
-			var3.motionX += var11.xCoord * var18;
-			var3.motionY += var11.yCoord * var18;
-			var3.motionZ += var11.zCoord * var18;
-		}
-
-		return var10;
-	}
-
-	public boolean isMaterialInBB(AxisAlignedBB var1, Material var2) {
-		int var3 = MathHelper.floor_double(var1.minX);
-		int var4 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var5 = MathHelper.floor_double(var1.minY);
-		int var6 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var7 = MathHelper.floor_double(var1.minZ);
-		int var8 = MathHelper.floor_double(var1.maxZ + 1.0D);
-
-		for(int var9 = var3; var9 < var4; ++var9) {
-			for(int var10 = var5; var10 < var6; ++var10) {
-				for(int var11 = var7; var11 < var8; ++var11) {
-					Block var12 = Block.blocksList[this.getBlockId(var9, var10, var11)];
-					if(var12 != null && var12.material == var2) {
-						return true;
-					}
-				}
-			}
-		}
-
-		return false;
-	}
-
-	public boolean isAABBInMaterial(AxisAlignedBB var1, Material var2) {
-		int var3 = MathHelper.floor_double(var1.minX);
-		int var4 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var5 = MathHelper.floor_double(var1.minY);
-		int var6 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var7 = MathHelper.floor_double(var1.minZ);
-		int var8 = MathHelper.floor_double(var1.maxZ + 1.0D);
-
-		for(int var9 = var3; var9 < var4; ++var9) {
-			for(int var10 = var5; var10 < var6; ++var10) {
-				for(int var11 = var7; var11 < var8; ++var11) {
-					Block var12 = Block.blocksList[this.getBlockId(var9, var10, var11)];
-					if(var12 != null && var12.material == var2) {
-						int var13 = this.getBlockMetadata(var9, var10, var11);
-						double var14 = (double)(var10 + 1);
-						if(var13 < 8) {
-							var14 = (double)(var10 + 1) - (double)var13 / 8.0D;
-						}
-
-						if(var14 >= var1.minY) {
+	public boolean getIsAnyLiquid(AxisAlignedBB aabb) {
+		int i2 = MathHelper.floor_double(aabb.minX);
+		int i3 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int i4 = MathHelper.floor_double(aabb.minY);
+		int i5 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int i6 = MathHelper.floor_double(aabb.minZ);
+		int i7 = MathHelper.floor_double(aabb.maxZ + 1.0D);
+		if(aabb.minX < 0.0D) {
+			--i2;
+		}
+
+		if(aabb.minY < 0.0D) {
+			--i4;
+		}
+
+		if(aabb.minZ < 0.0D) {
+			--i6;
+		}
+
+		for(int i8 = i2; i8 < i3; ++i8) {
+			for(int i9 = i4; i9 < i5; ++i9) {
+				for(int i10 = i6; i10 < i7; ++i10) {
+					Block block11 = Block.blocksList[this.getBlockId(i8, i9, i10)];
+					if(block11 != null && block11.material.getIsLiquid()) {
+						return true;
+					}
+				}
+			}
+		}
+
+		return false;
+	}
+
+	public boolean isBoundingBoxBurning(AxisAlignedBB aabb) {
+		int i2 = MathHelper.floor_double(aabb.minX);
+		int i3 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int i4 = MathHelper.floor_double(aabb.minY);
+		int i5 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int i6 = MathHelper.floor_double(aabb.minZ);
+		int i7 = MathHelper.floor_double(aabb.maxZ + 1.0D);
+
+		for(int i8 = i2; i8 < i3; ++i8) {
+			for(int i9 = i4; i9 < i5; ++i9) {
+				for(int i10 = i6; i10 < i7; ++i10) {
+					int i11 = this.getBlockId(i8, i9, i10);
+					if(i11 == Block.fire.blockID || i11 == Block.lavaMoving.blockID || i11 == Block.lavaStill.blockID) {
+						return true;
+					}
+				}
+			}
+		}
+
+		return false;
+	}
+
+	public boolean handleMaterialAcceleration(AxisAlignedBB aabb, Material material, Entity entity) {
+		int i4 = MathHelper.floor_double(aabb.minX);
+		int i5 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int i6 = MathHelper.floor_double(aabb.minY);
+		int i7 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int i8 = MathHelper.floor_double(aabb.minZ);
+		int i9 = MathHelper.floor_double(aabb.maxZ + 1.0D);
+		boolean z10 = false;
+		Vec3D vec3D11 = Vec3D.createVector(0.0D, 0.0D, 0.0D);
+
+		for(int i12 = i4; i12 < i5; ++i12) {
+			for(int i13 = i6; i13 < i7; ++i13) {
+				for(int i14 = i8; i14 < i9; ++i14) {
+					Block block15 = Block.blocksList[this.getBlockId(i12, i13, i14)];
+					if(block15 != null && block15.material == material) {
+						double d16 = (double)((float)(i13 + 1) - BlockFluid.getFluidHeightPercent(this.getBlockMetadata(i12, i13, i14)));
+						if((double)i7 >= d16) {
+							z10 = true;
+							block15.velocityToAddToEntity(this, i12, i13, i14, entity, vec3D11);
+						}
+					}
+				}
+			}
+		}
+
+		if(vec3D11.lengthVector() > 0.0D) {
+			vec3D11 = vec3D11.normalize();
+			double d18 = 0.004D;
+			entity.motionX += vec3D11.xCoord * d18;
+			entity.motionY += vec3D11.yCoord * d18;
+			entity.motionZ += vec3D11.zCoord * d18;
+		}
+
+		return z10;
+	}
+
+	public boolean isMaterialInBB(AxisAlignedBB aabb, Material material) {
+		int i3 = MathHelper.floor_double(aabb.minX);
+		int i4 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int i5 = MathHelper.floor_double(aabb.minY);
+		int i6 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int i7 = MathHelper.floor_double(aabb.minZ);
+		int i8 = MathHelper.floor_double(aabb.maxZ + 1.0D);
+
+		for(int i9 = i3; i9 < i4; ++i9) {
+			for(int i10 = i5; i10 < i6; ++i10) {
+				for(int i11 = i7; i11 < i8; ++i11) {
+					Block block12 = Block.blocksList[this.getBlockId(i9, i10, i11)];
+					if(block12 != null && block12.material == material) {
+						return true;
+					}
+				}
+			}
+		}
+
+		return false;
+	}
+
+	public boolean isAABBInMaterial(AxisAlignedBB aabb, Material material) {
+		int i3 = MathHelper.floor_double(aabb.minX);
+		int i4 = MathHelper.floor_double(aabb.maxX + 1.0D);
+		int i5 = MathHelper.floor_double(aabb.minY);
+		int i6 = MathHelper.floor_double(aabb.maxY + 1.0D);
+		int i7 = MathHelper.floor_double(aabb.minZ);
+		int i8 = MathHelper.floor_double(aabb.maxZ + 1.0D);
+
+		for(int i9 = i3; i9 < i4; ++i9) {
+			for(int i10 = i5; i10 < i6; ++i10) {
+				for(int i11 = i7; i11 < i8; ++i11) {
+					Block block12 = Block.blocksList[this.getBlockId(i9, i10, i11)];
+					if(block12 != null && block12.material == material) {
+						int i13 = this.getBlockMetadata(i9, i10, i11);
+						double d14 = (double)(i10 + 1);
+						if(i13 < 8) {
+							d14 = (double)(i10 + 1) - (double)i13 / 8.0D;
+						}
+
+						if(d14 >= aabb.minY) {
 							return true;
 						}
 					}
@@ -1201,129 +1369,150 @@
 		return false;
 	}
 
-	public void createExplosion(Entity var1, double var2, double var4, double var6, float var8) {
-		(new Explosion()).doExplosion(this, var1, var2, var4, var6, var8);
+	public void createExplosion(Entity entity, double x, double y, double z, float float5) {
+		(new Explosion()).doExplosion(this, entity, x, y, z, float5);
 	}
 
-	public float getBlockDensity(Vec3D var1, AxisAlignedBB var2) {
-		double var3 = 1.0D / ((var2.maxX - var2.minX) * 2.0D + 1.0D);
-		double var5 = 1.0D / ((var2.maxY - var2.minY) * 2.0D + 1.0D);
-		double var7 = 1.0D / ((var2.maxZ - var2.minZ) * 2.0D + 1.0D);
-		int var9 = 0;
-		int var10 = 0;
+	public float getBlockDensity(Vec3D vector, AxisAlignedBB aabb) {
+		double d3 = 1.0D / ((aabb.maxX - aabb.minX) * 2.0D + 1.0D);
+		double d5 = 1.0D / ((aabb.maxY - aabb.minY) * 2.0D + 1.0D);
+		double d7 = 1.0D / ((aabb.maxZ - aabb.minZ) * 2.0D + 1.0D);
+		int i9 = 0;
+		int i10 = 0;
 
-		for(float var11 = 0.0F; var11 <= 1.0F; var11 = (float)((double)var11 + var3)) {
-			for(float var12 = 0.0F; var12 <= 1.0F; var12 = (float)((double)var12 + var5)) {
-				for(float var13 = 0.0F; var13 <= 1.0F; var13 = (float)((double)var13 + var7)) {
-					double var14 = var2.minX + (var2.maxX - var2.minX) * (double)var11;
-					double var16 = var2.minY + (var2.maxY - var2.minY) * (double)var12;
-					double var18 = var2.minZ + (var2.maxZ - var2.minZ) * (double)var13;
-					if(this.rayTraceBlocks(Vec3D.createVector(var14, var16, var18), var1) == null) {
-						++var9;
+		for(float f11 = 0.0F; f11 <= 1.0F; f11 = (float)((double)f11 + d3)) {
+			for(float f12 = 0.0F; f12 <= 1.0F; f12 = (float)((double)f12 + d5)) {
+				for(float f13 = 0.0F; f13 <= 1.0F; f13 = (float)((double)f13 + d7)) {
+					double d14 = aabb.minX + (aabb.maxX - aabb.minX) * (double)f11;
+					double d16 = aabb.minY + (aabb.maxY - aabb.minY) * (double)f12;
+					double d18 = aabb.minZ + (aabb.maxZ - aabb.minZ) * (double)f13;
+					if(this.rayTraceBlocks(Vec3D.createVector(d14, d16, d18), vector) == null) {
+						++i9;
 					}
 
-					++var10;
+					++i10;
 				}
 			}
 		}
 
-		return (float)var9 / (float)var10;
-	}
-
-	public TileEntity getBlockTileEntity(int var1, int var2, int var3) {
-		Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-		return var4 != null ? var4.getChunkBlockTileEntity(var1 & 15, var2, var3 & 15) : null;
-	}
-
-	public void setBlockTileEntity(int var1, int var2, int var3, TileEntity var4) {
-		Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-		if(var5 != null) {
-			var5.setChunkBlockTileEntity(var1 & 15, var2, var3 & 15, var4);
-		}
-
-	}
-
-	public void removeBlockTileEntity(int var1, int var2, int var3) {
-		Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-		if(var4 != null) {
-			var4.removeChunkBlockTileEntity(var1 & 15, var2, var3 & 15);
-		}
-
-	}
-
-	public boolean isBlockNormalCube(int var1, int var2, int var3) {
-		Block var4 = Block.blocksList[this.getBlockId(var1, var2, var3)];
-		return var4 == null ? false : var4.isOpaqueCube();
+		return (float)i9 / (float)i10;
+	}
+
+	public TileEntity getBlockTileEntity(int x, int y, int z) {
+		Chunk chunk4 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+		return chunk4 != null ? chunk4.getChunkBlockTileEntity(x & 15, y, z & 15) : null;
+	}
+
+	public void setBlockTileEntity(int x, int y, int z, TileEntity tileEntity) {
+		Chunk chunk5 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+		if(chunk5 != null) {
+			chunk5.setChunkBlockTileEntity(x & 15, y, z & 15, tileEntity);
+		}
+
+	}
+
+	public void removeBlockTileEntity(int x, int y, int z) {
+		Chunk chunk4 = this.getChunkFromChunkCoords(x >> 4, z >> 4);
+		if(chunk4 != null) {
+			chunk4.removeChunkBlockTileEntity(x & 15, y, z & 15);
+		}
+
+	}
+
+	public boolean isBlockNormalCube(int x, int y, int z) {
+		Block block4 = Block.blocksList[this.getBlockId(x, y, z)];
+		return block4 == null ? false : block4.isOpaqueCube();
+	}
+
+	public BiomeInterface func_7689_6C9H19c7YerVndE5i8yC8Ig4845UHLtkUSjAGU517V812e99T2r6TlW67Z0B() {
+		return this.field_7813_5A352qHur902s7NjfBu10EWD7kIkBwEXGm9saOt9LTo63330d3stLvDo2a6i;
+	}
+
+	public void saveWorldIndirectly(IProgressUpdate b) {
+		this.saveWorld(true, b);
 	}
 
 	public boolean updatingLighting() {
-		int var1 = 1000;
+		int i1 = 1000;
 
 		while(this.lightingToUpdate.size() > 0) {
-			--var1;
-			if(var1 <= 0) {
+			--i1;
+			if(i1 <= 0) {
 				return true;
 			}
 
-			((MetadataChunkBlock)this.lightingToUpdate.remove(this.lightingToUpdate.size() - 1)).updateLight(this);
+			MetadataChunkBlock metadataChunkBlock2 = (MetadataChunkBlock)this.lightingToUpdate.remove(this.lightingToUpdate.size() - 1);
+			if(metadataChunkBlock2 != null) {
+				metadataChunkBlock2.updateLight(this);
+			}
 		}
 
 		return false;
 	}
 
-	public void scheduleLightingUpdate(EnumSkyBlock var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		this.scheduleLightingUpdate_do(var1, var2, var3, var4, var5, var6, var7, true);
+	public void scheduleLightingUpdate(EnumSkyBlock skyBlock, int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		this.scheduleLightingUpdate_do(skyBlock, minX, minY, minZ, maxX, maxY, maxZ, true);
 	}
 
-	public void scheduleLightingUpdate_do(EnumSkyBlock var1, int var2, int var3, int var4, int var5, int var6, int var7, boolean var8) {
-		int var9 = (var5 + var2) / 2;
-		int var10 = (var7 + var4) / 2;
-		if(this.blockExists(var9, 64, var10)) {
-			int var11 = this.lightingToUpdate.size();
-			if(var8) {
-				int var12 = 4;
-				if(var12 > var11) {
-					var12 = var11;
+	public void scheduleLightingUpdate_do(EnumSkyBlock skyBlock, int minX, int minY, int minZ, int maxX, int maxY, int maxZ, boolean update) {
+		int i9 = (maxX + minX) / 2;
+		int i10 = (maxZ + minZ) / 2;
+		if(this.blockExists(i9, 64, i10)) {
+			int i11 = this.lightingToUpdate.size();
+			if(update) {
+				int i12 = 4;
+				if(i12 > i11) {
+					i12 = i11;
 				}
 
-				for(int var13 = 0; var13 < var12; ++var13) {
-					MetadataChunkBlock var14 = (MetadataChunkBlock)this.lightingToUpdate.get(this.lightingToUpdate.size() - var13 - 1);
-					if(var14.skyBlock == var1 && var14.getLightUpdated(var2, var3, var4, var5, var6, var7)) {
+				for(int i13 = 0; i13 < i12; ++i13) {
+					MetadataChunkBlock metadataChunkBlock14 = (MetadataChunkBlock)this.lightingToUpdate.get(this.lightingToUpdate.size() - i13 - 1);
+					if(metadataChunkBlock14 != null && metadataChunkBlock14.skyBlock == skyBlock && metadataChunkBlock14.getLightUpdated(minX, minY, minZ, maxX, maxY, maxZ)) {
 						return;
 					}
 				}
 			}
 
-			this.lightingToUpdate.add(new MetadataChunkBlock(var1, var2, var3, var4, var5, var6, var7));
-			if(this.lightingToUpdate.size() > 100000) {
-				while(this.lightingToUpdate.size() > '\uc350') {
-					this.updatingLighting();
-				}
-			}
-
+			this.lightingToUpdate.add(new MetadataChunkBlock(skyBlock, minX, minY, minZ, maxX, maxY, maxZ));
 		}
+
 	}
 
 	public void calculateInitialSkylight() {
-		int var1 = this.calculateSkylightSubtracted(1.0F);
-		if(var1 != this.skylightSubtracted) {
-			this.skylightSubtracted = var1;
+		int i1 = this.calculateSkylightSubtracted(1.0F);
+		if(i1 != this.skylightSubtracted) {
+			this.skylightSubtracted = i1;
 		}
 
 	}
 
 	public void tick() {
 		this.chunkProvider.unload100OldestChunks();
-		int var1 = this.calculateSkylightSubtracted(1.0F);
-		if(var1 != this.skylightSubtracted) {
-			this.skylightSubtracted = var1;
-
-			for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-				((IWorldAccess)this.worldAccesses.get(var2)).updateAllRenderers();
+		if(this.loadedEntityList.size() >= 4096) {
+			System.out.println("Entity overflow!");
+			this.loadedEntityList.retainAll(this.playerEntities);
+		}
+
+		int i1 = this.calculateSkylightSubtracted(1.0F);
+		if(i1 != this.skylightSubtracted) {
+			this.skylightSubtracted = i1;
+
+			for(int i2 = 0; i2 < this.worldAccesses.size(); ++i2) {
+				((IWorldAccess)this.worldAccesses.get(i2)).updateAllRenderers();
 			}
+		}
+
+		boolean z3 = this.GetMilestone() % 10L == 0L && this.GetMilestone() > 0L;
+		if(z3) {
+			this.skyColor = 6976L;
+		}
+
+		if(this.worldTime % 23000L == 0L) {
+			System.out.println("Milestone " + this.worldTime / 23000L + " reached");
 		}
 
 		++this.worldTime;
+		ExtEvents.WorldTick(this);
 		if(this.worldTime % (long)this.autosavePeriod == 0L) {
 			this.saveWorld(false, (IProgressUpdate)null);
 		}
@@ -1335,19 +1524,19 @@
 	protected void updateBlocksAndPlayCaveSounds() {
 		this.positionsToUpdate.clear();
 
-		int var3;
-		int var4;
-		int var6;
-		int var7;
-		for(int var1 = 0; var1 < this.playerEntities.size(); ++var1) {
-			EntityPlayer var2 = (EntityPlayer)this.playerEntities.get(var1);
-			var3 = MathHelper.floor_double(var2.posX / 16.0D);
-			var4 = MathHelper.floor_double(var2.posZ / 16.0D);
-			byte var5 = 9;
+		int i1;
+		int i2;
+		int i3;
+		int i4;
+		for(int i5 = 0; i5 < this.playerEntities.size(); ++i5) {
+			EntityPlayer entityPlayer6 = (EntityPlayer)this.playerEntities.get(i5);
+			i1 = MathHelper.floor_double(entityPlayer6.posX / 16.0D);
+			i2 = MathHelper.floor_double(entityPlayer6.posZ / 16.0D);
+			byte b7 = 9;
 
-			for(var6 = -var5; var6 <= var5; ++var6) {
-				for(var7 = -var5; var7 <= var5; ++var7) {
-					this.positionsToUpdate.add(new ChunkCoordIntPair(var6 + var3, var7 + var4));
+			for(i3 = -b7; i3 <= b7; ++i3) {
+				for(i4 = -b7; i4 <= b7; ++i4) {
+					this.positionsToUpdate.add(new ChunkCoordIntPair(i3 + i1, i4 + i2));
 				}
 			}
 		}
@@ -1356,29 +1545,29 @@
 			--this.soundCounter;
 		}
 
-		Iterator var12 = this.positionsToUpdate.iterator();
+		Iterator iterator12 = this.positionsToUpdate.iterator();
 
-		while(var12.hasNext()) {
-			ChunkCoordIntPair var13 = (ChunkCoordIntPair)var12.next();
-			var3 = var13.chunkXPos * 16;
-			var4 = var13.chunkZPos * 16;
-			Chunk var14 = this.getChunkFromChunkCoords(var13.chunkXPos, var13.chunkZPos);
-			int var8;
-			int var9;
-			int var10;
+		while(iterator12.hasNext()) {
+			ChunkCoordIntPair chunkCoordIntPair13 = (ChunkCoordIntPair)iterator12.next();
+			i1 = chunkCoordIntPair13.chunkXPos * 16;
+			i2 = chunkCoordIntPair13.chunkZPos * 16;
+			Chunk chunk14 = this.getChunkFromChunkCoords(chunkCoordIntPair13.chunkXPos, chunkCoordIntPair13.chunkZPos);
+			int i8;
+			int i9;
+			int i10;
 			if(this.soundCounter == 0) {
 				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
-				var6 = this.updateLCG >> 2;
-				var7 = var6 & 15;
-				var8 = var6 >> 8 & 15;
-				var9 = var6 >> 16 & 127;
-				var10 = var14.getBlockID(var7, var9, var8);
-				var7 += var3;
-				var8 += var4;
-				if(var10 == 0 && this.getBlockLightValue(var7, var9, var8) <= this.rand.nextInt(8) && this.getSavedLightValue(EnumSkyBlock.Sky, var7, var9, var8) <= 0) {
-					EntityPlayer var11 = this.getClosestPlayer((double)var7 + 0.5D, (double)var9 + 0.5D, (double)var8 + 0.5D, 8.0D);
-					if(var11 != null && var11.getDistanceSq((double)var7 + 0.5D, (double)var9 + 0.5D, (double)var8 + 0.5D) > 4.0D) {
-						this.playSoundEffect((double)var7 + 0.5D, (double)var9 + 0.5D, (double)var8 + 0.5D, "ambient.cave.cave", 0.7F, 0.8F + this.rand.nextFloat() * 0.2F);
+				i3 = this.updateLCG >> 2;
+				i4 = i3 & 15;
+				i8 = i3 >> 8 & 15;
+				i9 = i3 >> 16 & 127;
+				i10 = chunk14.getBlockID(i4, i9, i8);
+				i4 += i1;
+				i8 += i2;
+				if(i10 == 0 && this.getBlockLightValue(i4, i9, i8) <= this.rand.nextInt(8) && this.getSavedLightValue(EnumSkyBlock.Sky, i4, i9, i8) <= 0) {
+					EntityPlayer entityPlayer11 = this.getClosestPlayer((double)i4 + 0.5D, (double)i9 + 0.5D, (double)i8 + 0.5D, 8.0D);
+					if(entityPlayer11 != null && entityPlayer11.getDistanceSq((double)i4 + 0.5D, (double)i9 + 0.5D, (double)i8 + 0.5D) > 4.0D) {
+						this.playSoundEffect((double)i4 + 0.5D, (double)i9 + 0.5D, (double)i8 + 0.5D, "ambient.cave.cave", 0.7F, 0.8F + this.rand.nextFloat() * 0.2F);
 						this.soundCounter = this.rand.nextInt(12000) + 6000;
 					}
 				}
@@ -1386,59 +1575,82 @@
 
 			if(this.snowCovered && this.rand.nextInt(4) == 0) {
 				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
-				var6 = this.updateLCG >> 2;
-				var7 = var6 & 15;
-				var8 = var6 >> 8 & 15;
-				var9 = this.getTopSolidOrLiquidBlock(var7 + var3, var8 + var4);
-				if(var9 >= 0 && var9 < 128 && var14.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
-					var10 = var14.getBlockID(var7, var9 - 1, var8);
-					if(var14.getBlockID(var7, var9, var8) == 0 && Block.snow.canPlaceBlockAt(this, var7 + var3, var9, var8 + var4)) {
-						this.setBlockWithNotify(var7 + var3, var9, var8 + var4, Block.snow.blockID);
-					}
-
-					if(var10 == Block.waterStill.blockID && var14.getBlockMetadata(var7, var9 - 1, var8) == 0) {
-						this.setBlockWithNotify(var7 + var3, var9 - 1, var8 + var4, Block.ice.blockID);
-					}
-				}
-			}
-
-			for(var6 = 0; var6 < 80; ++var6) {
-				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
-				var7 = this.updateLCG >> 2;
-				var8 = var7 & 15;
-				var9 = var7 >> 8 & 15;
-				var10 = var7 >> 16 & 127;
-				byte var15 = var14.blocks[var8 << 11 | var9 << 7 | var10];
-				if(Block.tickOnLoad[var15]) {
-					Block.blocksList[var15].updateTick(this, var8 + var3, var10, var9 + var4, this.rand);
+				i3 = this.updateLCG >> 2;
+				i4 = i3 & 15;
+				i8 = i3 >> 8 & 15;
+				i9 = this.getTopSolidOrLiquidBlock(i4 + i1, i8 + i2);
+				if(i9 >= 0 && i9 < 128 && chunk14.getSavedLightValue(EnumSkyBlock.Block, i4, i9, i8) < 10) {
+					i10 = chunk14.getBlockID(i4, i9 - 1, i8);
+					if(chunk14.getBlockID(i4, i9, i8) == 0 && Block.snow.canPlaceBlockAt(this, i4 + i1, i9, i8 + i2)) {
+						this.setBlockWithNotify(i4 + i1, i9, i8 + i2, Block.snow.blockID);
+					}
+
+					if(i10 == Block.waterStill.blockID && chunk14.getBlockMetadata(i4, i9 - 1, i8) == 0) {
+						this.setBlockWithNotify(i4 + i1, i9 - 1, i8 + i2, Block.ice.blockID);
+					}
+				}
+			}
+
+			if(this.sandCovered && this.rand.nextInt(4) == 1) {
+				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
+				i3 = this.updateLCG >> 2;
+				i4 = i3 & 15;
+				i8 = i3 >> 8 & 15;
+				i9 = this.getTopSolidOrLiquidBlock(i4 + i1, i8 + i2);
+				if(i9 >= 0 && i9 < 128 && chunk14.getSavedLightValue(EnumSkyBlock.Block, i4, i9, i8) < 10) {
+					i10 = chunk14.getBlockID(i4, i9 - 1, i8);
+					if(i10 == Block.waterStill.blockID && chunk14.getBlockMetadata(i4, i9 - 1, i8) == 0 && this.rand.nextInt(16) == 0) {
+						this.setBlockWithNotify(i4 + i1, i9 - 1, i8 + i2, Block.blockClay.blockID);
+					}
+				}
+			}
+
+			for(i3 = 0; i3 < 80; ++i3) {
+				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
+				i4 = this.updateLCG >> 2;
+				i8 = i4 & 15;
+				i9 = i4 >> 8 & 15;
+				i10 = i4 >> 16 & 127;
+				int i15 = chunk14.blocks[i8 << 11 | i9 << 7 | i10] & 255;
+				if(Block.tickOnLoad[i15]) {
+					Block.blocksList[i15].updateTick(this, i8 + i1, i10, i9 + i2, this.rand);
 				}
 			}
 		}
 
 	}
 
-	public boolean tickUpdates(boolean var1) {
-		int var2 = this.scheduledTickTreeSet.size();
-		if(var2 != this.scheduledTickSet.size()) {
-			throw new IllegalStateException("TickNextTick list out of synch");
+	public boolean tickUpdates(boolean boolean1) {
+		int i2 = this.scheduledTickTreeSet.size();
+		int i3 = Math.min(i2, this.scheduledTickSet.size());
+		if(Math.abs(i2 - this.scheduledTickSet.size()) > 3) {
+			return true;
 		} else {
-			if(var2 > 1000) {
-				var2 = 1000;
+			if(i2 > 1000) {
+				i2 = 1000;
 			}
 
-			for(int var3 = 0; var3 < var2; ++var3) {
-				NextTickListEntry var4 = (NextTickListEntry)this.scheduledTickTreeSet.first();
-				if(!var1 && var4.scheduledTime > this.worldTime) {
+			for(int i4 = 0; i4 < i3; ++i4) {
+				i3 = Math.min(i2, this.scheduledTickSet.size());
+				Set set6 = this.scheduledTickTreeSet;
+				NextTickListEntry nextTickListEntry5;
+				synchronized(this.scheduledTickTreeSet) {
+					nextTickListEntry5 = (NextTickListEntry)this.scheduledTickTreeSet.iterator().next();
+				}
+
+				if(!boolean1 && nextTickListEntry5.scheduledTime > this.worldTime) {
 					break;
 				}
 
-				this.scheduledTickTreeSet.remove(var4);
-				this.scheduledTickSet.remove(var4);
-				byte var5 = 8;
-				if(this.checkChunksExist(var4.xCoord - var5, var4.yCoord - var5, var4.zCoord - var5, var4.xCoord + var5, var4.yCoord + var5, var4.zCoord + var5)) {
-					int var6 = this.getBlockId(var4.xCoord, var4.yCoord, var4.zCoord);
-					if(var6 == var4.blockID && var6 > 0) {
-						Block.blocksList[var6].updateTick(this, var4.xCoord, var4.yCoord, var4.zCoord, this.rand);
+				this.listBeingWritten = true;
+				this.scheduledTickTreeSet.remove(nextTickListEntry5);
+				this.scheduledTickSet.remove(nextTickListEntry5);
+				this.listBeingWritten = false;
+				byte b9 = 8;
+				if(this.checkChunksExist(nextTickListEntry5.xCoord - b9, nextTickListEntry5.yCoord - b9, nextTickListEntry5.zCoord - b9, nextTickListEntry5.xCoord + b9, nextTickListEntry5.yCoord + b9, nextTickListEntry5.zCoord + b9)) {
+					int i7 = this.getBlockId(nextTickListEntry5.xCoord, nextTickListEntry5.yCoord, nextTickListEntry5.zCoord);
+					if(i7 == nextTickListEntry5.blockID && i7 > 0) {
+						Block.blocksList[i7].updateTick(this, nextTickListEntry5.xCoord, nextTickListEntry5.yCoord, nextTickListEntry5.zCoord, this.rand);
 					}
 				}
 			}
@@ -1447,17 +1659,33 @@
 		}
 	}
 
-	public List getEntitiesWithinAABBExcludingEntity(Entity var1, AxisAlignedBB var2) {
+	public void randomDisplayUpdates(int posX, int posY, int posZ) {
+		byte b4 = 16;
+		Random random5 = new Random();
+
+		for(int i6 = 0; i6 < 1000; ++i6) {
+			int i7 = posX + this.rand.nextInt(b4) - this.rand.nextInt(b4);
+			int i8 = posY + this.rand.nextInt(b4) - this.rand.nextInt(b4);
+			int i9 = posZ + this.rand.nextInt(b4) - this.rand.nextInt(b4);
+			int i10 = this.getBlockId(i7, i8, i9);
+			if(i10 > 0) {
+				Block.blocksList[i10].randomDisplayTick(this, i7, i8, i9, random5);
+			}
+		}
+
+	}
+
+	public List getEntitiesWithinAABBExcludingEntity(Entity entity, AxisAlignedBB aabb) {
 		this.entitiesWithinAABBExcludingEntity.clear();
-		int var3 = MathHelper.floor_double((var2.minX - 2.0D) / 16.0D);
-		int var4 = MathHelper.floor_double((var2.maxX + 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.minZ - 2.0D) / 16.0D);
-		int var6 = MathHelper.floor_double((var2.maxZ + 2.0D) / 16.0D);
+		int i3 = MathHelper.floor_double((aabb.minX - 2.0D) / 16.0D);
+		int i4 = MathHelper.floor_double((aabb.maxX + 2.0D) / 16.0D);
+		int i5 = MathHelper.floor_double((aabb.minZ - 2.0D) / 16.0D);
+		int i6 = MathHelper.floor_double((aabb.maxZ + 2.0D) / 16.0D);
 
-		for(int var7 = var3; var7 <= var4; ++var7) {
-			for(int var8 = var5; var8 <= var6; ++var8) {
-				if(this.chunkExists(var7, var8)) {
-					this.getChunkFromChunkCoords(var7, var8).getEntitiesWithinAABBForEntity(var1, var2, this.entitiesWithinAABBExcludingEntity);
+		for(int i7 = i3; i7 <= i4; ++i7) {
+			for(int i8 = i5; i8 <= i6; ++i8) {
+				if(this.chunkExists(i7, i8)) {
+					this.getChunkFromChunkCoords(i7, i8).getEntitiesWithinAABBForEntity(entity, aabb, this.entitiesWithinAABBExcludingEntity);
 				}
 			}
 		}
@@ -1465,215 +1693,251 @@
 		return this.entitiesWithinAABBExcludingEntity;
 	}
 
-	public List getEntitiesWithinAABB(Class var1, AxisAlignedBB var2) {
-		int var3 = MathHelper.floor_double((var2.minX - 2.0D) / 16.0D);
-		int var4 = MathHelper.floor_double((var2.maxX + 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.minZ - 2.0D) / 16.0D);
-		int var6 = MathHelper.floor_double((var2.maxZ + 2.0D) / 16.0D);
-		ArrayList var7 = new ArrayList();
+	public List getEntitiesWithinAABB(Class clazz, AxisAlignedBB aabb) {
+		int i3 = MathHelper.floor_double((aabb.minX - 2.0D) / 16.0D);
+		int i4 = MathHelper.floor_double((aabb.maxX + 2.0D) / 16.0D);
+		int i5 = MathHelper.floor_double((aabb.minZ - 2.0D) / 16.0D);
+		int i6 = MathHelper.floor_double((aabb.maxZ + 2.0D) / 16.0D);
+		ArrayList arrayList7 = new ArrayList();
 
-		for(int var8 = var3; var8 <= var4; ++var8) {
-			for(int var9 = var5; var9 <= var6; ++var9) {
-				if(this.chunkExists(var8, var9)) {
-					this.getChunkFromChunkCoords(var8, var9).getEntitiesOfTypeWithinAAAB(var1, var2, var7);
+		for(int i8 = i3; i8 <= i4; ++i8) {
+			for(int i9 = i5; i9 <= i6; ++i9) {
+				if(this.chunkExists(i8, i9)) {
+					this.getChunkFromChunkCoords(i8, i9).getEntitiesOfTypeWithinAAAB(clazz, aabb, arrayList7);
 				}
 			}
 		}
 
-		return var7;
-	}
-
-	public void updateTileEntityChunkAndDoNothing(int var1, int var2, int var3, TileEntity var4) {
-		if(this.blockExists(var1, var2, var3)) {
-			this.getChunkFromBlockCoords(var1, var3).setChunkModified();
-		}
-
-		for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-			((IWorldAccess)this.worldAccesses.get(var5)).doNothingWithTileEntity(var1, var2, var3, var4);
-		}
-
-	}
-
-	public int countEntities(Class var1) {
-		int var2 = 0;
-
-		for(int var3 = 0; var3 < this.loadedEntityList.size(); ++var3) {
-			Entity var4 = (Entity)this.loadedEntityList.get(var3);
-			if(var1.isAssignableFrom(var4.getClass())) {
-				++var2;
+		return arrayList7;
+	}
+
+	public List getLoadedEntityList() {
+		return this.loadedEntityList;
+	}
+
+	public void updateTileEntityChunkAndDoNothing(int x, int y, int z, TileEntity tileEntity) {
+		if(this.blockExists(x, y, z)) {
+			this.getChunkFromBlockCoords(x, z).setChunkModified();
+		}
+
+		for(int i5 = 0; i5 < this.worldAccesses.size(); ++i5) {
+			((IWorldAccess)this.worldAccesses.get(i5)).doNothingWithTileEntity(x, y, z, tileEntity);
+		}
+
+	}
+
+	public int countEntities(Class clazz) {
+		int i2 = 0;
+
+		for(int i3 = 0; i3 < this.loadedEntityList.size(); ++i3) {
+			Entity entity4 = (Entity)this.loadedEntityList.get(i3);
+			if(clazz.isAssignableFrom(entity4.getClass())) {
+				++i2;
 			}
 		}
 
-		return var2;
-	}
-
-	public void addLoadedEntities(List var1) {
-		this.loadedEntityList.addAll(var1);
-
-		for(int var2 = 0; var2 < var1.size(); ++var2) {
-			this.obtainEntitySkin((Entity)var1.get(var2));
-		}
-
-	}
-
-	public void unloadEntities(List var1) {
-		this.unloadedEntityList.addAll(var1);
-	}
-
-	public boolean canBlockBePlacedAt(int var1, int var2, int var3, int var4, boolean var5) {
-		int var6 = this.getBlockId(var2, var3, var4);
-		Block var7 = Block.blocksList[var6];
-		Block var8 = Block.blocksList[var1];
-		AxisAlignedBB var9 = var8.getCollisionBoundingBoxFromPool(this, var2, var3, var4);
-		if(var5) {
-			var9 = null;
-		}
-
-		return var9 != null && !this.checkIfAABBIsClear(var9) ? false : (var7 != Block.waterMoving && var7 != Block.waterStill && var7 != Block.lavaMoving && var7 != Block.lavaStill && var7 != Block.fire && var7 != Block.snow ? var1 > 0 && var7 == null && var8.canPlaceBlockAt(this, var2, var3, var4) : true);
-	}
-
-	public PathEntity getPathToEntity(Entity var1, Entity var2, float var3) {
-		int var4 = MathHelper.floor_double(var1.posX);
-		int var5 = MathHelper.floor_double(var1.posY);
-		int var6 = MathHelper.floor_double(var1.posZ);
-		int var7 = (int)(var3 + 16.0F);
-		int var8 = var4 - var7;
-		int var9 = var5 - var7;
-		int var10 = var6 - var7;
-		int var11 = var4 + var7;
-		int var12 = var5 + var7;
-		int var13 = var6 + var7;
-		ChunkCache var14 = new ChunkCache(this, var8, var9, var10, var11, var12, var13);
-		return (new Pathfinder(var14)).createEntityPathTo(var1, var2, var3);
-	}
-
-	public PathEntity getEntityPathToXYZ(Entity var1, int var2, int var3, int var4, float var5) {
-		int var6 = MathHelper.floor_double(var1.posX);
-		int var7 = MathHelper.floor_double(var1.posY);
-		int var8 = MathHelper.floor_double(var1.posZ);
-		int var9 = (int)(var5 + 8.0F);
-		int var10 = var6 - var9;
-		int var11 = var7 - var9;
-		int var12 = var8 - var9;
-		int var13 = var6 + var9;
-		int var14 = var7 + var9;
-		int var15 = var8 + var9;
-		ChunkCache var16 = new ChunkCache(this, var10, var11, var12, var13, var14, var15);
-		return (new Pathfinder(var16)).createEntityPathTo(var1, var2, var3, var4, var5);
-	}
-
-	public boolean isBlockProvidingPowerTo(int var1, int var2, int var3, int var4) {
-		int var5 = this.getBlockId(var1, var2, var3);
-		return var5 == 0 ? false : Block.blocksList[var5].isIndirectlyPoweringTo(this, var1, var2, var3, var4);
-	}
-
-	public boolean isBlockGettingPowered(int var1, int var2, int var3) {
-		return this.isBlockProvidingPowerTo(var1, var2 - 1, var3, 0) ? true : (this.isBlockProvidingPowerTo(var1, var2 + 1, var3, 1) ? true : (this.isBlockProvidingPowerTo(var1, var2, var3 - 1, 2) ? true : (this.isBlockProvidingPowerTo(var1, var2, var3 + 1, 3) ? true : (this.isBlockProvidingPowerTo(var1 - 1, var2, var3, 4) ? true : this.isBlockProvidingPowerTo(var1 + 1, var2, var3, 5)))));
-	}
-
-	public boolean isBlockIndirectlyProvidingPowerTo(int var1, int var2, int var3, int var4) {
-		if(this.isBlockNormalCube(var1, var2, var3)) {
-			return this.isBlockGettingPowered(var1, var2, var3);
+		return i2;
+	}
+
+	public void addLoadedEntities(List list) {
+		this.loadedEntityList.addAll(list);
+
+		for(int i2 = 0; i2 < list.size(); ++i2) {
+			this.obtainEntitySkin((Entity)list.get(i2));
+		}
+
+	}
+
+	public void unloadEntities(List list) {
+		this.unloadedEntityList.addAll(list);
+	}
+
+	public void dropOldChunks() {
+		while(this.chunkProvider.unload100OldestChunks()) {
+		}
+
+	}
+
+	public boolean canBlockBePlacedAt(int blockID, int x, int y, int z, boolean ignoreBB) {
+		int i6 = this.getBlockId(x, y, z);
+		Block block7 = Block.blocksList[i6];
+		Block block8 = Block.blocksList[blockID];
+		AxisAlignedBB axisAlignedBB9 = block8.getCollisionBoundingBoxFromPool(this, x, y, z);
+		if(ignoreBB) {
+			axisAlignedBB9 = null;
+		}
+
+		return axisAlignedBB9 != null && !this.checkIfAABBIsClear(axisAlignedBB9) ? false : (block7 != Block.waterMoving && block7 != Block.waterStill && block7 != Block.lavaMoving && block7 != Block.lavaStill && block7 != Block.fire && block7 != Block.snow ? blockID > 0 && block7 == null && block8.canPlaceBlockAt(this, x, y, z) : true);
+	}
+
+	public PathEntity getPathToEntity(Entity entity1, Entity entity2, float float3) {
+		int i4 = MathHelper.floor_double(entity1.posX);
+		int i5 = MathHelper.floor_double(entity1.posY);
+		int i6 = MathHelper.floor_double(entity1.posZ);
+		int i7 = (int)(float3 + 16.0F);
+		int i8 = i4 - i7;
+		int i9 = i5 - i7;
+		int i10 = i6 - i7;
+		int i11 = i4 + i7;
+		int i12 = i5 + i7;
+		int i13 = i6 + i7;
+		ChunkCache chunkCache14 = new ChunkCache(this, i8, i9, i10, i11, i12, i13);
+		return (new Pathfinder(chunkCache14)).createEntityPathTo(entity1, entity2, float3);
+	}
+
+	public PathEntity getEntityPathToXYZ(Entity entity, int x, int y, int z, float float5) {
+		int i6 = MathHelper.floor_double(entity.posX);
+		int i7 = MathHelper.floor_double(entity.posY);
+		int i8 = MathHelper.floor_double(entity.posZ);
+		int i9 = (int)(float5 + 8.0F);
+		int i10 = i6 - i9;
+		int i11 = i7 - i9;
+		int i12 = i8 - i9;
+		int i13 = i6 + i9;
+		int i14 = i7 + i9;
+		int i15 = i8 + i9;
+		ChunkCache chunkCache16 = new ChunkCache(this, i10, i11, i12, i13, i14, i15);
+		return (new Pathfinder(chunkCache16)).createEntityPathTo(entity, x, y, z, float5);
+	}
+
+	public boolean isBlockProvidingPowerTo(int x, int y, int z, int side) {
+		int i5 = this.getBlockId(x, y, z);
+		return i5 == 0 ? false : Block.blocksList[i5].isIndirectlyPoweringTo(this, x, y, z, side);
+	}
+
+	public boolean isBlockGettingPowered(int x, int y, int z) {
+		return this.isBlockProvidingPowerTo(x, y - 1, z, 0) ? true : (this.isBlockProvidingPowerTo(x, y + 1, z, 1) ? true : (this.isBlockProvidingPowerTo(x, y, z - 1, 2) ? true : (this.isBlockProvidingPowerTo(x, y, z + 1, 3) ? true : (this.isBlockProvidingPowerTo(x - 1, y, z, 4) ? true : this.isBlockProvidingPowerTo(x + 1, y, z, 5)))));
+	}
+
+	public boolean isBlockIndirectlyProvidingPowerTo(int x, int y, int z, int side) {
+		if(this.isBlockNormalCube(x, y, z)) {
+			return this.isBlockGettingPowered(x, y, z);
 		} else {
-			int var5 = this.getBlockId(var1, var2, var3);
-			return var5 == 0 ? false : Block.blocksList[var5].isPoweringTo(this, var1, var2, var3, var4);
-		}
-	}
-
-	public boolean isBlockIndirectlyGettingPowered(int var1, int var2, int var3) {
-		return this.isBlockIndirectlyProvidingPowerTo(var1, var2 - 1, var3, 0) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1, var2 + 1, var3, 1) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1, var2, var3 - 1, 2) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1, var2, var3 + 1, 3) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1 - 1, var2, var3, 4) ? true : this.isBlockIndirectlyProvidingPowerTo(var1 + 1, var2, var3, 5)))));
-	}
-
-	public EntityPlayer getClosestPlayerToEntity(Entity var1, double var2) {
-		return this.getClosestPlayer(var1.posX, var1.posY, var1.posZ, var2);
-	}
-
-	public EntityPlayer getClosestPlayer(double var1, double var3, double var5, double var7) {
-		double var9 = -1.0D;
-		EntityPlayer var11 = null;
-
-		for(int var12 = 0; var12 < this.playerEntities.size(); ++var12) {
-			EntityPlayer var13 = (EntityPlayer)this.playerEntities.get(var12);
-			double var14 = var13.getDistanceSq(var1, var3, var5);
-			if((var7 < 0.0D || var14 < var7 * var7) && (var9 == -1.0D || var14 < var9)) {
-				var9 = var14;
-				var11 = var13;
-			}
-		}
-
-		return var11;
-	}
-
-	public byte[] getChunkData(int var1, int var2, int var3, int var4, int var5, int var6) {
-		byte[] var7 = new byte[var4 * var5 * var6 * 5 / 2];
-		int var8 = var1 >> 4;
-		int var9 = var3 >> 4;
-		int var10 = var1 + var4 - 1 >> 4;
-		int var11 = var3 + var6 - 1 >> 4;
-		int var12 = 0;
-		int var13 = var2;
-		int var14 = var2 + var5;
-		if(var2 < 0) {
-			var13 = 0;
-		}
-
-		if(var14 > 128) {
-			var14 = 128;
-		}
-
-		for(int var15 = var8; var15 <= var10; ++var15) {
-			int var16 = var1 - var15 * 16;
-			int var17 = var1 + var4 - var15 * 16;
-			if(var16 < 0) {
-				var16 = 0;
-			}
-
-			if(var17 > 16) {
-				var17 = 16;
-			}
-
-			for(int var18 = var9; var18 <= var11; ++var18) {
-				int var19 = var3 - var18 * 16;
-				int var20 = var3 + var6 - var18 * 16;
-				if(var19 < 0) {
-					var19 = 0;
-				}
-
-				if(var20 > 16) {
-					var20 = 16;
-				}
-
-				var12 = this.getChunkFromChunkCoords(var15, var18).getChunkData(var7, var16, var13, var19, var17, var14, var20, var12);
-			}
-		}
-
-		return var7;
+			int i5 = this.getBlockId(x, y, z);
+			return i5 == 0 ? false : Block.blocksList[i5].isPoweringTo(this, x, y, z, side);
+		}
+	}
+
+	public boolean isBlockIndirectlyGettingPowered(int x, int y, int z) {
+		return this.isBlockIndirectlyProvidingPowerTo(x, y - 1, z, 0) ? true : (this.isBlockIndirectlyProvidingPowerTo(x, y + 1, z, 1) ? true : (this.isBlockIndirectlyProvidingPowerTo(x, y, z - 1, 2) ? true : (this.isBlockIndirectlyProvidingPowerTo(x, y, z + 1, 3) ? true : (this.isBlockIndirectlyProvidingPowerTo(x - 1, y, z, 4) ? true : this.isBlockIndirectlyProvidingPowerTo(x + 1, y, z, 5)))));
+	}
+
+	public EntityPlayer getClosestPlayerToEntity(Entity entity, double distance) {
+		return this.getClosestPlayer(entity.posX, entity.posY, entity.posZ, distance);
+	}
+
+	public EntityPlayer getClosestPlayer(double posX, double posY, double posZ, double distance) {
+		double d9 = -1.0D;
+		EntityPlayer entityPlayer11 = null;
+
+		for(int i12 = 0; i12 < this.playerEntities.size(); ++i12) {
+			EntityPlayer entityPlayer13 = (EntityPlayer)this.playerEntities.get(i12);
+			double d14 = entityPlayer13.getDistanceSq(posX, posY, posZ);
+			if((distance < 0.0D || d14 < distance * distance) && (d9 == -1.0D || d14 < d9)) {
+				d9 = d14;
+				entityPlayer11 = entityPlayer13;
+			}
+		}
+
+		return entityPlayer11;
+	}
+
+	public byte[] getChunkData(int integer1, int integer2, int integer3, int x, int y, int z) {
+		byte[] b7 = new byte[x * y * z * 5 / 2];
+		int i8 = integer1 >> 4;
+		int i9 = integer3 >> 4;
+		int i10 = integer1 + x - 1 >> 4;
+		int i11 = integer3 + z - 1 >> 4;
+		int i12 = 0;
+		int i13 = integer2;
+		int i14 = integer2 + y;
+		if(integer2 < 0) {
+			i13 = 0;
+		}
+
+		if(i14 > 128) {
+			i14 = 128;
+		}
+
+		for(int i15 = i8; i15 <= i10; ++i15) {
+			int i16 = integer1 - i15 * 16;
+			int i17 = integer1 + x - i15 * 16;
+			if(i16 < 0) {
+				i16 = 0;
+			}
+
+			if(i17 > 16) {
+				i17 = 16;
+			}
+
+			for(int i18 = i9; i18 <= i11; ++i18) {
+				int i19 = integer3 - i18 * 16;
+				int i20 = integer3 + z - i18 * 16;
+				if(i19 < 0) {
+					i19 = 0;
+				}
+
+				if(i20 > 16) {
+					i20 = 16;
+				}
+
+				i12 = this.getChunkFromChunkCoords(i15, i18).getChunkData(b7, i16, i13, i19, i17, i14, i20, i12);
+				this.markBlocksDirty(i15 * 16 + i16, i13, i18 * 16 + i19, i15 * 16 + i17, i14, i18 * 16 + i20);
+			}
+		}
+
+		return b7;
+	}
+
+	public void sendQuittingDisconnectingPacket() {
 	}
 
 	public void checkSessionLock() {
 		try {
-			File var1 = new File(this.saveDirectory, "session.lock");
-			DataInputStream var2 = new DataInputStream(new FileInputStream(var1));
+			File file1 = new File(this.saveDirectory, "session.lock");
+			DataInputStream dataInputStream2 = new DataInputStream(new FileInputStream(file1));
 
 			try {
-				if(var2.readLong() != this.lockTimestamp) {
+				if(dataInputStream2.readLong() != this.lockTimestamp) {
 					throw new MinecraftException("The save is being accessed from another location, aborting");
 				}
 			} finally {
-				var2.close();
+				dataInputStream2.close();
 			}
 
-		} catch (IOException var7) {
+		} catch (IOException iOException7) {
 			throw new MinecraftException("Failed to check session lock, aborting");
 		}
 	}
 
+	public void setWorldTime(long time) {
+		this.worldTime = time;
+	}
+
+	public void joinEntityInSurroundings(Entity entity) {
+		int i2 = MathHelper.floor_double(entity.posX / 16.0D);
+		int i3 = MathHelper.floor_double(entity.posZ / 16.0D);
+		byte b4 = 2;
+
+		for(int i5 = i2 - b4; i5 <= i2 + b4; ++i5) {
+			for(int i6 = i3 - b4; i6 <= i3 + b4; ++i6) {
+				this.getChunkFromChunkCoords(i5, i6);
+			}
+		}
+
+		if(!this.loadedEntityList.contains(entity)) {
+			System.out.println("REINSERTING PLAYER! " + ((EntityPlayer)entity).username);
+			this.loadedEntityList.add(entity);
+		}
+
+	}
+
 	static {
-		float var0 = 0.05F;
+		float f0 = 0.05F;
 
-		for(int var1 = 0; var1 <= 15; ++var1) {
-			float var2 = 1.0F - (float)var1 / 15.0F;
-			lightBrightnessTable[var1] = (1.0F - var2) / (var2 * 3.0F + 1.0F) * (1.0F - var0) + var0;
+		for(int i1 = 0; i1 <= 15; ++i1) {
+			float f2 = 1.0F - (float)i1 / 15.0F;
+			lightBrightnessTable[i1] = (1.0F - f2) / (f2 * 3.0F + 1.0F) * (1.0F - f0) + f0;
 		}
 
 	}
--- net/minecraft/src/NetLoginHandler.java
+++ net/minecraft/src/NetLoginHandler.java
@@ -4,6 +4,7 @@
 import java.net.Socket;
 import java.util.Random;
 import java.util.logging.Logger;
+
 import net.minecraft.server.MinecraftServer;
 
 public class NetLoginHandler extends NetHandler {
@@ -17,9 +18,9 @@
 	private Packet1Login packet1login = null;
 	private String serverId = "";
 
-	public NetLoginHandler(MinecraftServer var1, Socket var2, String var3) throws IOException {
-		this.mcServer = var1;
-		this.netManager = new NetworkManager(var2, var3, this);
+	public NetLoginHandler(MinecraftServer minecraftServer, Socket socket, String threadName) throws IOException {
+		this.mcServer = minecraftServer;
+		this.netManager = new NetworkManager(socket, threadName, this);
 	}
 
 	public void tryLogin() throws IOException {
@@ -36,14 +37,14 @@
 
 	}
 
-	public void kickUser(String var1) {
-		logger.info("Disconnecting " + this.getUserAndIPString() + ": " + var1);
-		this.netManager.addToSendQueue(new Packet255KickDisconnect(var1));
+	public void kickUser(String playerName) {
+		logger.info("Disconnecting " + this.getUserAndIPString() + ": " + playerName);
+		this.netManager.addToSendQueue(new Packet255KickDisconnect(playerName));
 		this.netManager.serverShutdown();
 		this.finishedProcessing = true;
 	}
 
-	public void handleHandshake(Packet2Handshake var1) {
+	public void handleHandshake(Packet2Handshake packet) {
 		if(this.mcServer.onlineMode) {
 			this.serverId = Long.toHexString(rand.nextLong());
 			this.netManager.addToSendQueue(new Packet2Handshake(this.serverId));
@@ -53,43 +54,98 @@
 
 	}
 
-	public void handleLogin(Packet1Login var1) {
-		this.username = var1.username;
-		if(var1.protocolVersion != 2) {
-			this.kickUser("Outdated client!");
-		} else {
-			if(!this.mcServer.onlineMode) {
-				this.doLogin(var1);
-			} else {
-				(new ThreadLoginVerifier(this, var1)).start();
-			}
-
-		}
-	}
-
-	public void doLogin(Packet1Login var1) {
-		EntityPlayerMP var2 = this.mcServer.configManager.login(this, var1.username, var1.password);
-		if(var2 != null) {
-			logger.info(this.getUserAndIPString() + " logged in");
-			NetServerHandler var3 = new NetServerHandler(this.mcServer, this.netManager, var2);
-			var3.sendPacket(new Packet1Login("", "", 0));
-			var3.sendPacket(new Packet6SpawnPosition(this.mcServer.worldMngr.spawnX, this.mcServer.worldMngr.spawnY, this.mcServer.worldMngr.spawnZ));
-			this.mcServer.configManager.playerLoggedIn(var2);
-			var3.teleportTo(var2.posX, var2.posY, var2.posZ, var2.rotationYaw, var2.rotationPitch);
-			var3.sendInventoryPackets();
-			this.mcServer.networkServer.addPlayer(var3);
-			var3.sendPacket(new Packet4UpdateTime(this.mcServer.worldMngr.worldTime));
+	public void handleLogin(Packet1Login packet) {
+		if(packet instanceof Packet200SecureLogin) {
+			this.handleLogin((Packet200SecureLogin)packet);
+		} else {
+			this.username = packet.username;
+			if(!this.username.contains("/") && !this.username.contains("\\") && !this.username.contains("..")) {
+				if(!this.username.startsWith("@@") && (!this.username.trim().startsWith("dev") || this.username.length() >= 4 && Character.isAlphabetic(this.username.codePointAt(3))) && !this.username.startsWith("\u0001") && !this.username.startsWith("\u0002")) {
+					if(packet.protocolVersion != 2) {
+						this.kickUser("Outdated client!");
+					} else if(!this.mcServer.onlineMode) {
+						this.doLogin(packet);
+					} else {
+						(new ThreadLoginVerifier(this, packet)).start();
+					}
+				} else {
+					logger.info("Invalid developer signature. Kicking.");
+					if(this.username.equals("dev0")) {
+						this.kickUser("## Nice going, shitlord.");
+					} else if(this.username.equals("dev1")) {
+						this.kickUser("## No. Bad.");
+					} else if(this.username.equals("dev2")) {
+						this.kickUser("## You better bugger off, pal.");
+					} else if(this.username.equals("dev3")) {
+						this.kickUser("## That\'s not your account now, is it?");
+					} else if(this.username.equals("dev4")) {
+						this.kickUser("## pwned");
+					} else if(this.username.equals("dev5")) {
+						this.kickUser("## This is mine :)");
+					} else if(this.username.equals("dev6")) {
+						this.kickUser("## \"Never gonna give you up, never gonna let you down\"");
+					} else {
+						this.kickUser("[SecureLogin] Please log in with development keys.");
+					}
+				}
+			} else {
+				this.kickUser("Invalid characters in name.");
+			}
+		}
+
+	}
+
+	public void handleLogin(Packet200SecureLogin packet) {
+		this.username = packet.username;
+		if(!this.username.contains("/") && !this.username.contains("\\") && !this.username.contains("..")) {
+			if(packet.playerMode != 0) {
+				this.username = (char)packet.playerMode + this.username;
+			}
+
+			packet.username = this.username;
+			if(!packet.verifyPassed) {
+				this.kickUser("seclogin::verify RESPONSE");
+			} else if(packet.protocolVersion != 2) {
+				this.kickUser("Outdated client!");
+			} else {
+				this.doLogin(packet);
+			}
+		} else {
+			this.kickUser("Invalid characters in name.");
+		}
+
+	}
+
+	public void doLogin(Packet1Login loginPacket) {
+		EntityPlayerMP entityPlayerMP2 = this.mcServer.configManager.login(this, loginPacket.username, loginPacket.password);
+		if(entityPlayerMP2 != null) {
+			if(loginPacket.username.charAt(0) != 2) {
+				logger.info(this.getUserAndIPString() + " logged in " + (loginPacket instanceof Packet200SecureLogin ? "[verified]" : ""));
+			}
+
+			NetServerHandler netServerHandler3 = new NetServerHandler(this.mcServer, this.netManager, entityPlayerMP2);
+			if(loginPacket instanceof Packet200SecureLogin) {
+				netServerHandler3.field_6069_1rle0xO34vUA8Vp6C11E974IzTYR6r2xC1d72yD17sv14H0BSVP2F5c1Y8iO = rand.nextInt(10000000) + 30;
+			}
+
+			netServerHandler3.sendPacket(new Packet1Login("", netServerHandler3.field_6069_1rle0xO34vUA8Vp6C11E974IzTYR6r2xC1d72yD17sv14H0BSVP2F5c1Y8iO + "", 0));
+			netServerHandler3.sendPacket(new Packet6SpawnPosition(this.mcServer.worldMngr.spawnX, this.mcServer.worldMngr.spawnY, this.mcServer.worldMngr.spawnZ, this.mcServer.worldMngr.randomSeed));
+			this.mcServer.configManager.playerLoggedIn(entityPlayerMP2);
+			netServerHandler3.teleportTo(entityPlayerMP2.posX, entityPlayerMP2.posY, entityPlayerMP2.posZ, entityPlayerMP2.rotationYaw, entityPlayerMP2.rotationPitch);
+			netServerHandler3.sendInventoryPackets();
+			this.mcServer.networkServer.addPlayer(netServerHandler3);
+			netServerHandler3.sendPacket(new Packet4UpdateTime(this.mcServer.worldMngr.worldTime));
 		}
 
 		this.finishedProcessing = true;
 	}
 
-	public void handleErrorMessage(String var1) {
+	public void handleErrorMessage(String message) {
 		logger.info(this.getUserAndIPString() + " lost connection");
 		this.finishedProcessing = true;
 	}
 
-	public void registerPacket(Packet var1) {
+	public void registerPacket(Packet packet) {
 		this.kickUser("Protocol error");
 	}
 
@@ -97,11 +153,11 @@
 		return this.username != null ? this.username + " [" + this.netManager.getRemoteAddress().toString() + "]" : this.netManager.getRemoteAddress().toString();
 	}
 
-	static String getServerId(NetLoginHandler var0) {
-		return var0.serverId;
+	static String func_6040_2S9880rVMBqgE8ZCZxVbL5O53Buyfuf47CU20A25Ls8OV9JjM19w1b2EAHJq(NetLoginHandler cq) {
+		return cq.serverId;
 	}
 
-	static Packet1Login setLoginPacket(NetLoginHandler var0, Packet1Login var1) {
-		return var0.packet1login = var1;
+	static Packet1Login packet1login(NetLoginHandler cq, Packet1Login k) {
+		return cq.packet1login = k;
 	}
 }
--- net/minecraft/src/StepSoundGlass.java
+++ net/minecraft/src/StepSoundGlass.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 final class StepSoundGlass extends StepSound {
-	StepSoundGlass(String var1, float var2, float var3) {
-		super(var1, var2, var3);
+	StepSoundGlass(String string, float float2, float float3) {
+		super(string, float2, float3);
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockDoorUnknownClass2.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockDoorUnknownClass2 extends BlockDoor {
+	public BlockDoorUnknownClass2(int integer1, int integer2) {
+		super(integer1, Material.iron);
+		this.blockIndexInTexture = integer2;
+	}
+
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : ExtItems.field_8478_0AzF504MF3jXI61pV3rzl3HlZOghL42RenDf5wfj9LYLDkf8oLa3Fvg7vwC2.shiftedIndex;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockPillar.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public class BlockPillar extends Block {
+	public BlockPillar(int id, int blockIndex, Material material) {
+		super(id, blockIndex, material);
+	}
+}
--- net/minecraft/src/ItemSign.java
+++ net/minecraft/src/ItemSign.java
@@ -1,49 +1,49 @@
 package net.minecraft.src;
 
 public class ItemSign extends Item {
-	public ItemSign(int var1) {
-		super(var1);
+	public ItemSign(int itemID) {
+		super(itemID);
 		this.maxDamage = 64;
 		this.maxStackSize = 1;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 == 0) {
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(side == 0) {
 			return false;
-		} else if(!var3.getBlockMaterial(var4, var5, var6).isSolid()) {
+		} else if(!world.getBlockMaterial(x, y, z).isSolid()) {
 			return false;
 		} else {
-			if(var7 == 1) {
-				++var5;
-			}
-
-			if(var7 == 2) {
-				--var6;
-			}
-
-			if(var7 == 3) {
-				++var6;
-			}
-
-			if(var7 == 4) {
-				--var4;
-			}
-
-			if(var7 == 5) {
-				++var4;
-			}
-
-			if(!Block.signStanding.canPlaceBlockAt(var3, var4, var5, var6)) {
+			if(side == 1) {
+				++y;
+			}
+
+			if(side == 2) {
+				--z;
+			}
+
+			if(side == 3) {
+				++z;
+			}
+
+			if(side == 4) {
+				--x;
+			}
+
+			if(side == 5) {
+				++x;
+			}
+
+			if(!Block.signStanding.canPlaceBlockAt(world, x, y, z)) {
 				return false;
 			} else {
-				if(var7 == 1) {
-					var3.setBlockAndMetadataWithNotify(var4, var5, var6, Block.signStanding.blockID, MathHelper.floor_double((double)((var2.rotationYaw + 180.0F) * 16.0F / 360.0F) + 0.5D) & 15);
+				if(side == 1) {
+					world.setBlockAndMetadataWithNotify(x, y, z, Block.signStanding.blockID, MathHelper.floor_double((double)((entityPlayer.rotationYaw + 180.0F) * 16.0F / 360.0F) + 0.5D) & 15);
 				} else {
-					var3.setBlockAndMetadataWithNotify(var4, var5, var6, Block.signWall.blockID, var7);
+					world.setBlockAndMetadataWithNotify(x, y, z, Block.signWall.blockID, side);
 				}
 
-				--var1.stackSize;
-				var2.displayGUIEditSign((TileEntitySign)var3.getBlockTileEntity(var4, var5, var6));
+				--stack.stackSize;
+				entityPlayer.displayGUIEditSign((TileEntitySign)world.getBlockTileEntity(x, y, z));
 				return true;
 			}
 		}
--- net/minecraft/src/BlockLeavesBase.java
+++ net/minecraft/src/BlockLeavesBase.java
@@ -3,17 +3,17 @@
 public class BlockLeavesBase extends Block {
 	protected boolean graphicsLevel;
 
-	protected BlockLeavesBase(int var1, int var2, Material var3, boolean var4) {
-		super(var1, var2, var3);
-		this.graphicsLevel = var4;
+	protected BlockLeavesBase(int id, int blockIndex, Material material, boolean graphicsLevel) {
+		super(id, blockIndex, material);
+		this.graphicsLevel = graphicsLevel;
 	}
 
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockId(var2, var3, var4);
-		return !this.graphicsLevel && var6 == this.blockID ? false : super.shouldSideBeRendered(var1, var2, var3, var4, var5);
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		int i6 = blockAccess.getBlockId(x, y, z);
+		return !this.graphicsLevel && i6 == this.blockID ? false : super.shouldSideBeRendered(blockAccess, x, y, z, side);
 	}
 }
--- /dev/null
+++ net/minecraft/src/Packet71.java
@@ -1,0 +1,52 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet71 extends Packet {
+	public String field_6461_7yqkpRSyp409D8wa4J8eh35CnzYG38criDH4S98dAJWBXxX5i4UX8I0fSsrL = "";
+	public double field_6458_83syTX4hne6Ft6WRh25Sb1ECG6W9cs94l05Kxw3825ru6ZPv8vLXckf350PC;
+	public double field_6459_9oq9w4PdQ4Bi2E3NjZ0WIJ9wY396f44Xir96Cq7k1n3O7GBgPNy34c8H26Ts;
+	public double field_6463_5v3989Qv1KUAzwA4606fa3D4MoBYrsZ0s10G874vPEv9uQLhqW9244vtoqjE;
+	public float field_6460_5J1w5A023ysn2b5n2V5v7069Pao4Tcqn8Jxx80yCorHEl5KILymjgwgPg0PO;
+	public float field_6462_9z1Z29kbc5733TNi4Y118UX9rStZf1eOYRe4BnnFQ5r28iGH939d26v4Wv79;
+
+	public Packet71(String string, double double2, double double3, double double4, float float5, float float6) {
+		this.field_6461_7yqkpRSyp409D8wa4J8eh35CnzYG38criDH4S98dAJWBXxX5i4UX8I0fSsrL = string;
+		this.field_6458_83syTX4hne6Ft6WRh25Sb1ECG6W9cs94l05Kxw3825ru6ZPv8vLXckf350PC = double2;
+		this.field_6459_9oq9w4PdQ4Bi2E3NjZ0WIJ9wY396f44Xir96Cq7k1n3O7GBgPNy34c8H26Ts = double3;
+		this.field_6463_5v3989Qv1KUAzwA4606fa3D4MoBYrsZ0s10G874vPEv9uQLhqW9244vtoqjE = double4;
+		this.field_6460_5J1w5A023ysn2b5n2V5v7069Pao4Tcqn8Jxx80yCorHEl5KILymjgwgPg0PO = float5;
+		this.field_6462_9z1Z29kbc5733TNi4Y118UX9rStZf1eOYRe4BnnFQ5r28iGH939d26v4Wv79 = float6;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.field_6461_7yqkpRSyp409D8wa4J8eh35CnzYG38criDH4S98dAJWBXxX5i4UX8I0fSsrL = dataInputStream.readUTF();
+		this.field_6458_83syTX4hne6Ft6WRh25Sb1ECG6W9cs94l05Kxw3825ru6ZPv8vLXckf350PC = dataInputStream.readDouble();
+		this.field_6459_9oq9w4PdQ4Bi2E3NjZ0WIJ9wY396f44Xir96Cq7k1n3O7GBgPNy34c8H26Ts = dataInputStream.readDouble();
+		this.field_6463_5v3989Qv1KUAzwA4606fa3D4MoBYrsZ0s10G874vPEv9uQLhqW9244vtoqjE = dataInputStream.readDouble();
+		this.field_6460_5J1w5A023ysn2b5n2V5v7069Pao4Tcqn8Jxx80yCorHEl5KILymjgwgPg0PO = dataInputStream.readFloat();
+		this.field_6462_9z1Z29kbc5733TNi4Y118UX9rStZf1eOYRe4BnnFQ5r28iGH939d26v4Wv79 = dataInputStream.readFloat();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.field_6461_7yqkpRSyp409D8wa4J8eh35CnzYG38criDH4S98dAJWBXxX5i4UX8I0fSsrL);
+		dataOutputStream.writeDouble(this.field_6458_83syTX4hne6Ft6WRh25Sb1ECG6W9cs94l05Kxw3825ru6ZPv8vLXckf350PC);
+		dataOutputStream.writeDouble(this.field_6459_9oq9w4PdQ4Bi2E3NjZ0WIJ9wY396f44Xir96Cq7k1n3O7GBgPNy34c8H26Ts);
+		dataOutputStream.writeDouble(this.field_6463_5v3989Qv1KUAzwA4606fa3D4MoBYrsZ0s10G874vPEv9uQLhqW9244vtoqjE);
+		dataOutputStream.writeFloat(this.field_6460_5J1w5A023ysn2b5n2V5v7069Pao4Tcqn8Jxx80yCorHEl5KILymjgwgPg0PO);
+		dataOutputStream.writeFloat(this.field_6462_9z1Z29kbc5733TNi4Y118UX9rStZf1eOYRe4BnnFQ5r28iGH939d26v4Wv79);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		if(netHandler instanceof NetServerHandler) {
+			((NetServerHandler)netHandler).mcServer.configManager.func_7644_69pl0QQx7RRBVy4UnQ096NE0lKNB0QpE26Og5gn7269TQV76YH9Eoe3ORb8P(new Packet71(this.field_6461_7yqkpRSyp409D8wa4J8eh35CnzYG38criDH4S98dAJWBXxX5i4UX8I0fSsrL, this.field_6458_83syTX4hne6Ft6WRh25Sb1ECG6W9cs94l05Kxw3825ru6ZPv8vLXckf350PC, this.field_6459_9oq9w4PdQ4Bi2E3NjZ0WIJ9wY396f44Xir96Cq7k1n3O7GBgPNy34c8H26Ts, this.field_6463_5v3989Qv1KUAzwA4606fa3D4MoBYrsZ0s10G874vPEv9uQLhqW9244vtoqjE, this.field_6460_5J1w5A023ysn2b5n2V5v7069Pao4Tcqn8Jxx80yCorHEl5KILymjgwgPg0PO, this.field_6462_9z1Z29kbc5733TNi4Y118UX9rStZf1eOYRe4BnnFQ5r28iGH939d26v4Wv79), this.field_6458_83syTX4hne6Ft6WRh25Sb1ECG6W9cs94l05Kxw3825ru6ZPv8vLXckf350PC, this.field_6459_9oq9w4PdQ4Bi2E3NjZ0WIJ9wY396f44Xir96Cq7k1n3O7GBgPNy34c8H26Ts, this.field_6463_5v3989Qv1KUAzwA4606fa3D4MoBYrsZ0s10G874vPEv9uQLhqW9244vtoqjE, 15);
+		}
+
+	}
+
+	public int getPacketSize() {
+		return this.field_6461_7yqkpRSyp409D8wa4J8eh35CnzYG38criDH4S98dAJWBXxX5i4UX8I0fSsrL.getBytes().length + 24 + 8;
+	}
+}
--- net/minecraft/src/EntityPig.java
+++ net/minecraft/src/EntityPig.java
@@ -3,21 +3,20 @@
 public class EntityPig extends EntityAnimal {
 	public boolean saddled = false;
 
-	public EntityPig(World var1) {
-		super(var1);
-		this.texture = "/mob/pig.png";
+	public EntityPig(World world) {
+		super(world);
 		this.setSize(0.9F, 0.9F);
 		this.saddled = false;
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setBoolean("Saddle", this.saddled);
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+		nbttagcompound.setBoolean("Saddle", this.saddled);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.saddled = var1.getBoolean("Saddle");
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+		this.saddled = nbttagcompound.getBoolean("Saddle");
 	}
 
 	protected String getLivingSound() {
@@ -33,6 +32,6 @@
 	}
 
 	protected int getDropItemId() {
-		return Item.porkRaw.shiftedIndex;
+		return this.fire > 0 ? Item.porkCooked.shiftedIndex : Item.porkRaw.shiftedIndex;
 	}
 }
--- net/minecraft/src/BlockSnow.java
+++ net/minecraft/src/BlockSnow.java
@@ -3,13 +3,13 @@
 import java.util.Random;
 
 public class BlockSnow extends Block {
-	protected BlockSnow(int var1, int var2) {
-		super(var1, var2, Material.snow);
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F / 16.0F, 1.0F);
+	protected BlockSnow(int id, int blockIndex) {
+		super(id, blockIndex, Material.snow);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
 		this.setTickOnLoad(true);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -17,43 +17,43 @@
 		return false;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3 - 1, var4);
-		return var5 != 0 && Block.blocksList[var5].isOpaqueCube() ? var1.getBlockMaterial(var2, var3 - 1, var4).getIsSolid() : false;
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		this.canSnowStay(var1, var2, var3, var4);
-	}
-
-	private boolean canSnowStay(World var1, int var2, int var3, int var4) {
-		if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		int i5 = world.getBlockId(x, y - 1, z);
+		return i5 != 0 && Block.blocksList[i5].isOpaqueCube() ? world.getBlockMaterial(x, y - 1, z).getIsSolid() : false;
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		this.canSnowStay(world, x, y, z);
+	}
+
+	private boolean canSnowStay(World world, int x, int y, int z) {
+		if(!this.canPlaceBlockAt(world, x, y, z)) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
 			return false;
 		} else {
 			return true;
 		}
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Item.snowball.shiftedIndex;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 0;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getSavedLightValue(EnumSkyBlock.Block, var2, var3, var4) > 11) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(world.getSavedLightValue(EnumSkyBlock.Block, x, y, z) > 11) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		Material var6 = var1.getBlockMaterial(var2, var3, var4);
-		return var5 == 1 ? true : (var6 == this.material ? false : super.shouldSideBeRendered(var1, var2, var3, var4, var5));
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		Material material6 = blockAccess.getBlockMaterial(x, y, z);
+		return side == 1 ? true : (material6 == this.material ? false : super.shouldSideBeRendered(blockAccess, x, y, z, side));
 	}
 }
--- net/minecraft/src/NBTTagList.java
+++ net/minecraft/src/NBTTagList.java
@@ -10,31 +10,31 @@
 	private List tagList = new ArrayList();
 	private byte tagType;
 
-	void writeTagContents(DataOutput var1) throws IOException {
+	void writeTagContents(DataOutput dataOutput) throws IOException {
 		if(this.tagList.size() > 0) {
 			this.tagType = ((NBTBase)this.tagList.get(0)).getType();
 		} else {
 			this.tagType = 1;
 		}
 
-		var1.writeByte(this.tagType);
-		var1.writeInt(this.tagList.size());
+		dataOutput.writeByte(this.tagType);
+		dataOutput.writeInt(this.tagList.size());
 
-		for(int var2 = 0; var2 < this.tagList.size(); ++var2) {
-			((NBTBase)this.tagList.get(var2)).writeTagContents(var1);
+		for(int i2 = 0; i2 < this.tagList.size(); ++i2) {
+			((NBTBase)this.tagList.get(i2)).writeTagContents(dataOutput);
 		}
 
 	}
 
-	void readTagContents(DataInput var1) throws IOException {
-		this.tagType = var1.readByte();
-		int var2 = var1.readInt();
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.tagType = dataInput.readByte();
+		int i2 = dataInput.readInt();
 		this.tagList = new ArrayList();
 
-		for(int var3 = 0; var3 < var2; ++var3) {
-			NBTBase var4 = NBTBase.createTagOfType(this.tagType);
-			var4.readTagContents(var1);
-			this.tagList.add(var4);
+		for(int i3 = 0; i3 < i2; ++i3) {
+			NBTBase nBTBase4 = NBTBase.createTagOfType(this.tagType);
+			nBTBase4.readTagContents(dataInput);
+			this.tagList.add(nBTBase4);
 		}
 
 	}
@@ -47,13 +47,13 @@
 		return "" + this.tagList.size() + " entries of type " + NBTBase.getTagName(this.tagType);
 	}
 
-	public void setTag(NBTBase var1) {
-		this.tagType = var1.getType();
-		this.tagList.add(var1);
+	public void setTag(NBTBase nbtbase) {
+		this.tagType = nbtbase.getType();
+		this.tagList.add(nbtbase);
 	}
 
-	public NBTBase tagAt(int var1) {
-		return (NBTBase)this.tagList.get(var1);
+	public NBTBase tagAt(int index) {
+		return (NBTBase)this.tagList.get(index);
 	}
 
 	public int tagCount() {
--- net/minecraft/src/Packet32EntityLook.java
+++ net/minecraft/src/Packet32EntityLook.java
@@ -9,23 +9,23 @@
 		this.rotating = true;
 	}
 
-	public Packet32EntityLook(int var1, byte var2, byte var3) {
-		super(var1);
-		this.yaw = var2;
-		this.pitch = var3;
+	public Packet32EntityLook(int entityID, byte yaw, byte pitch) {
+		super(entityID);
+		this.yaw = yaw;
+		this.pitch = pitch;
 		this.rotating = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		super.readPacketData(var1);
-		this.yaw = var1.readByte();
-		this.pitch = var1.readByte();
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		super.readPacketData(dataInputStream);
+		this.yaw = dataInputStream.readByte();
+		this.pitch = dataInputStream.readByte();
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		super.writePacket(var1);
-		var1.writeByte(this.yaw);
-		var1.writeByte(this.pitch);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		super.writePacket(dataOutputStream);
+		dataOutputStream.writeByte(this.yaw);
+		dataOutputStream.writeByte(this.pitch);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/BlockOre.java
+++ net/minecraft/src/BlockOre.java
@@ -3,15 +3,15 @@
 import java.util.Random;
 
 public class BlockOre extends Block {
-	public BlockOre(int var1, int var2) {
-		super(var1, var2, Material.rock);
+	public BlockOre(int id, int blockIndex) {
+		super(id, blockIndex, Material.rock);
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return this.blockID == Block.oreCoal.blockID ? Item.coal.shiftedIndex : (this.blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : this.blockID);
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 1;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockMyconDoor.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockMyconDoor extends BlockDoor {
+	public BlockMyconDoor(int integer1, int integer2) {
+		super(integer1, Material.wood);
+		this.blockIndexInTexture = integer2;
+	}
+
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : ExtItems.MyconDoor.shiftedIndex;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockTeaDoor.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockTeaDoor extends BlockDoor {
+	public BlockTeaDoor(int integer1, int integer2) {
+		super(integer1, Material.wood);
+		this.blockIndexInTexture = integer2;
+	}
+
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : ExtItems.TeaDoor.shiftedIndex;
+	}
+}
--- /dev/null
+++ net/minecraft/src/Packet200SecureLogin.java
@@ -1,0 +1,61 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet200SecureLogin extends Packet1Login {
+	public int protocolVersion;
+	public String signature = "";
+	public int playerMode = 0;
+	public boolean verifyPassed = false;
+
+	public Packet200SecureLogin() {
+	}
+
+	public Packet200SecureLogin(String string1, String string2, int integer3, int integer4) {
+		this.username = string1;
+		this.password = string2;
+		this.protocolVersion = integer3;
+		this.playerMode = integer4;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		long j2 = dataInputStream.readLong();
+		this.username = dataInputStream.readUTF();
+		this.password = dataInputStream.readUTF();
+		this.protocolVersion = dataInputStream.readInt();
+		this.playerMode = dataInputStream.readInt();
+
+		try {
+			this.verifyPassed = CertUtils.verify(j2 + "" + this.username + "" + this.password + "" + this.protocolVersion + "" + this.playerMode, dataInputStream.readUTF());
+		} catch (Exception exception5) {
+			exception5.printStackTrace();
+		}
+
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		long j2 = System.currentTimeMillis();
+		dataOutputStream.writeLong(j2);
+		dataOutputStream.writeUTF(this.username);
+		dataOutputStream.writeUTF(this.password);
+		dataOutputStream.writeInt(this.protocolVersion);
+		dataOutputStream.writeInt(this.playerMode);
+
+		try {
+			dataOutputStream.writeUTF(CertUtils.sign(j2 + "" + this.username + "" + this.password + "" + this.protocolVersion + "" + this.playerMode, CertUtils.loadedPrivKey));
+		} catch (Exception exception5) {
+			exception5.printStackTrace();
+		}
+
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleLogin(this);
+	}
+
+	public int getPacketSize() {
+		return 8 + this.username.length() + this.password.length() + 4 + 4;
+	}
+}
--- net/minecraft/src/BlockLever.java
+++ net/minecraft/src/BlockLever.java
@@ -1,11 +1,11 @@
 package net.minecraft.src;
 
 public class BlockLever extends Block {
-	protected BlockLever(int var1, int var2) {
-		super(var1, var2, Material.circuits);
+	protected BlockLever(int id, int blockIndex) {
+		super(id, blockIndex, Material.circuits);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -17,172 +17,172 @@
 		return 12;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2 - 1, var3, var4) ? true : (var1.isBlockNormalCube(var2 + 1, var3, var4) ? true : (var1.isBlockNormalCube(var2, var3, var4 - 1) ? true : (var1.isBlockNormalCube(var2, var3, var4 + 1) ? true : var1.isBlockNormalCube(var2, var3 - 1, var4))));
-	}
-
-	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		int var7 = var6 & 8;
-		var6 &= 7;
-		if(var5 == 1 && var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var6 = 5 + var1.rand.nextInt(2);
-		}
-
-		if(var5 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var6 = 4;
-		}
-
-		if(var5 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var6 = 3;
-		}
-
-		if(var5 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var6 = 2;
-		}
-
-		if(var5 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var6 = 1;
-		}
-
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var6 + var7);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-		} else if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 2);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 3);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 4);
-		} else if(var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 5 + var1.rand.nextInt(2));
-		}
-
-		this.checkIfAttachedToBlock(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(this.checkIfAttachedToBlock(var1, var2, var3, var4)) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4) & 7;
-			boolean var7 = false;
-			if(!var1.isBlockNormalCube(var2 - 1, var3, var4) && var6 == 1) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2 + 1, var3, var4) && var6 == 2) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 - 1) && var6 == 3) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 + 1) && var6 == 4) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && var6 == 5) {
-				var7 = true;
-			}
-
-			if(var7) {
-				this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-				var1.setBlockWithNotify(var2, var3, var4, 0);
-			}
-		}
-
-	}
-
-	private boolean checkIfAttachedToBlock(World var1, int var2, int var3, int var4) {
-		if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x - 1, y, z) ? true : (world.isBlockNormalCube(x + 1, y, z) ? true : (world.isBlockNormalCube(x, y, z - 1) ? true : (world.isBlockNormalCube(x, y, z + 1) ? true : world.isBlockNormalCube(x, y - 1, z))));
+	}
+
+	public void onBlockPlaced(World world, int x, int y, int z, int notifyFlag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		int i7 = i6 & 8;
+		i6 &= 7;
+		if(notifyFlag == 1 && world.isBlockNormalCube(x, y - 1, z)) {
+			i6 = 5 + world.rand.nextInt(2);
+		}
+
+		if(notifyFlag == 2 && world.isBlockNormalCube(x, y, z + 1)) {
+			i6 = 4;
+		}
+
+		if(notifyFlag == 3 && world.isBlockNormalCube(x, y, z - 1)) {
+			i6 = 3;
+		}
+
+		if(notifyFlag == 4 && world.isBlockNormalCube(x + 1, y, z)) {
+			i6 = 2;
+		}
+
+		if(notifyFlag == 5 && world.isBlockNormalCube(x - 1, y, z)) {
+			i6 = 1;
+		}
+
+		world.setBlockMetadataWithNotify(x, y, z, i6 + i7);
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		if(world.isBlockNormalCube(x - 1, y, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 1);
+		} else if(world.isBlockNormalCube(x + 1, y, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 2);
+		} else if(world.isBlockNormalCube(x, y, z - 1)) {
+			world.setBlockMetadataWithNotify(x, y, z, 3);
+		} else if(world.isBlockNormalCube(x, y, z + 1)) {
+			world.setBlockMetadataWithNotify(x, y, z, 4);
+		} else if(world.isBlockNormalCube(x, y - 1, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 5 + world.rand.nextInt(2));
+		}
+
+		this.checkIfAttachedToBlock(world, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(this.checkIfAttachedToBlock(world, x, y, z)) {
+			int i6 = world.getBlockMetadata(x, y, z) & 7;
+			boolean z7 = false;
+			if(!world.isBlockNormalCube(x - 1, y, z) && i6 == 1) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x + 1, y, z) && i6 == 2) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z - 1) && i6 == 3) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z + 1) && i6 == 4) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y - 1, z) && i6 == 5) {
+				z7 = true;
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+				world.setBlockWithNotify(x, y, z, 0);
+			}
+		}
+
+	}
+
+	private boolean checkIfAttachedToBlock(World world, int x, int y, int z) {
+		if(!this.canPlaceBlockAt(world, x, y, z)) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
 			return false;
 		} else {
 			return true;
 		}
 	}
 
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4) & 7;
-		float var6 = 3.0F / 16.0F;
-		if(var5 == 1) {
-			this.setBlockBounds(0.0F, 0.2F, 0.5F - var6, var6 * 2.0F, 0.8F, 0.5F + var6);
-		} else if(var5 == 2) {
-			this.setBlockBounds(1.0F - var6 * 2.0F, 0.2F, 0.5F - var6, 1.0F, 0.8F, 0.5F + var6);
-		} else if(var5 == 3) {
-			this.setBlockBounds(0.5F - var6, 0.2F, 0.0F, 0.5F + var6, 0.8F, var6 * 2.0F);
-		} else if(var5 == 4) {
-			this.setBlockBounds(0.5F - var6, 0.2F, 1.0F - var6 * 2.0F, 0.5F + var6, 0.8F, 1.0F);
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		int i5 = blockAccess.getBlockMetadata(x, y, z) & 7;
+		float f6 = 0.1875F;
+		if(i5 == 1) {
+			this.setBlockBounds(0.0F, 0.2F, 0.5F - f6, f6 * 2.0F, 0.8F, 0.5F + f6);
+		} else if(i5 == 2) {
+			this.setBlockBounds(1.0F - f6 * 2.0F, 0.2F, 0.5F - f6, 1.0F, 0.8F, 0.5F + f6);
+		} else if(i5 == 3) {
+			this.setBlockBounds(0.5F - f6, 0.2F, 0.0F, 0.5F + f6, 0.8F, f6 * 2.0F);
+		} else if(i5 == 4) {
+			this.setBlockBounds(0.5F - f6, 0.2F, 1.0F - f6 * 2.0F, 0.5F + f6, 0.8F, 1.0F);
 		} else {
-			var6 = 0.25F;
-			this.setBlockBounds(0.5F - var6, 0.0F, 0.5F - var6, 0.5F + var6, 0.6F, 0.5F + var6);
+			f6 = 0.25F;
+			this.setBlockBounds(0.5F - f6, 0.0F, 0.5F - f6, 0.5F + f6, 0.6F, 0.5F + f6);
 		}
 
 	}
 
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.blockActivated(var1, var2, var3, var4, var5);
+	public void onBlockClicked(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.blockActivated(world, x, y, z, entityPlayer);
 	}
 
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		int var7 = var6 & 7;
-		int var8 = 8 - (var6 & 8);
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + var8);
-		var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-		var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, var8 > 0 ? 0.6F : 0.5F);
-		var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-		if(var7 == 1) {
-			var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-		} else if(var7 == 2) {
-			var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-		} else if(var7 == 3) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-		} else if(var7 == 4) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		int i7 = i6 & 7;
+		int i8 = 8 - (i6 & 8);
+		world.setBlockMetadataWithNotify(x, y, z, i7 + i8);
+		world.markBlocksDirty(x, y, z, x, y, z);
+		world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.click", 0.3F, i8 > 0 ? 0.6F : 0.5F);
+		world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+		if(i7 == 1) {
+			world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+		} else if(i7 == 2) {
+			world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+		} else if(i7 == 3) {
+			world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+		} else if(i7 == 4) {
+			world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
 		} else {
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
 		}
 
 		return true;
 	}
 
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		if((var5 & 8) > 0) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			int var6 = var5 & 7;
-			if(var6 == 1) {
-				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			} else if(var6 == 2) {
-				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			} else if(var6 == 3) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			} else if(var6 == 4) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		if((i5 & 8) > 0) {
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			int i6 = i5 & 7;
+			if(i6 == 1) {
+				world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			} else if(i6 == 2) {
+				world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			} else if(i6 == 3) {
+				world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			} else if(i6 == 4) {
+				world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
 			} else {
-				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+				world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
 			}
 		}
 
-		super.onBlockRemoval(var1, var2, var3, var4);
-	}
-
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return (var1.getBlockMetadata(var2, var3, var4) & 8) > 0;
-	}
-
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if((var6 & 8) == 0) {
+		super.onBlockRemoval(world, x, y, z);
+	}
+
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int unused) {
+		return (blockAccess.getBlockMetadata(x, y, z) & 8) > 0;
+	}
+
+	public boolean isIndirectlyPoweringTo(World world, int x, int y, int z, int flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if((i6 & 8) == 0) {
 			return false;
 		} else {
-			int var7 = var6 & 7;
-			return var7 == 5 && var5 == 1 ? true : (var7 == 4 && var5 == 2 ? true : (var7 == 3 && var5 == 3 ? true : (var7 == 2 && var5 == 4 ? true : var7 == 1 && var5 == 5)));
+			int i7 = i6 & 7;
+			return i7 == 5 && flag == 1 ? true : (i7 == 4 && flag == 2 ? true : (i7 == 3 && flag == 3 ? true : (i7 == 2 && flag == 4 ? true : i7 == 1 && flag == 5)));
 		}
 	}
 
--- net/minecraft/src/EntityArrow.java
+++ net/minecraft/src/EntityArrow.java
@@ -13,16 +13,16 @@
 	private int ticksInGround;
 	private int ticksInAir = 0;
 
-	public EntityArrow(World var1) {
-		super(var1);
+	public EntityArrow(World world) {
+		super(world);
 		this.setSize(0.5F, 0.5F);
 	}
 
-	public EntityArrow(World var1, EntityLiving var2) {
-		super(var1);
-		this.shootingEntity = var2;
+	public EntityArrow(World world, EntityLiving entityLiving) {
+		super(world);
+		this.shootingEntity = entityLiving;
 		this.setSize(0.5F, 0.5F);
-		this.setLocationAndAngles(var2.posX, var2.posY, var2.posZ, var2.rotationYaw, var2.rotationPitch);
+		this.setLocationAndAngles(entityLiving.posX, entityLiving.posY, entityLiving.posZ, entityLiving.rotationYaw, entityLiving.rotationPitch);
 		this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
 		this.posY -= (double)0.1F;
 		this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
@@ -34,23 +34,23 @@
 		this.setArrowHeading(this.motionX, this.motionY, this.motionZ, 1.5F, 1.0F);
 	}
 
-	public void setArrowHeading(double var1, double var3, double var5, float var7, float var8) {
-		float var9 = MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5);
-		var1 /= (double)var9;
-		var3 /= (double)var9;
-		var5 /= (double)var9;
-		var1 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-		var3 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-		var5 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-		var1 *= (double)var7;
-		var3 *= (double)var7;
-		var5 *= (double)var7;
-		this.motionX = var1;
-		this.motionY = var3;
-		this.motionZ = var5;
-		float var10 = MathHelper.sqrt_double(var1 * var1 + var5 * var5);
-		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(var1, var5) * 180.0D / (double)((float)Math.PI));
-		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(var3, (double)var10) * 180.0D / (double)((float)Math.PI));
+	public void setArrowHeading(double motionX, double motionY, double motionZ, float offsetY, float offsetX) {
+		float f9 = MathHelper.sqrt_double(motionX * motionX + motionY * motionY + motionZ * motionZ);
+		motionX /= (double)f9;
+		motionY /= (double)f9;
+		motionZ /= (double)f9;
+		motionX += this.rand.nextGaussian() * (double)0.0075F * (double)offsetX;
+		motionY += this.rand.nextGaussian() * (double)0.0075F * (double)offsetX;
+		motionZ += this.rand.nextGaussian() * (double)0.0075F * (double)offsetX;
+		motionX *= (double)offsetY;
+		motionY *= (double)offsetY;
+		motionZ *= (double)offsetY;
+		this.motionX = motionX;
+		this.motionY = motionY;
+		this.motionZ = motionZ;
+		float f10 = MathHelper.sqrt_double(motionX * motionX + motionZ * motionZ);
+		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(motionX, motionZ) * 180.0D / (double)(float)Math.PI);
+		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(motionY, (double)f10) * 180.0D / (double)(float)Math.PI);
 		this.ticksInGround = 0;
 	}
 
@@ -61,8 +61,8 @@
 		}
 
 		if(this.inData) {
-			int var1 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
-			if(var1 == this.inTile) {
+			int i1 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+			if(i1 == this.inTile) {
 				++this.ticksInGround;
 				if(this.ticksInGround == 1200) {
 					this.setEntityDead();
@@ -81,66 +81,66 @@
 			++this.ticksInAir;
 		}
 
-		Vec3D var15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-		Vec3D var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-		MovingObjectPosition var3 = this.worldObj.rayTraceBlocks(var15, var2);
-		var15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-		var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-		if(var3 != null) {
-			var2 = Vec3D.createVector(var3.hitVec.xCoord, var3.hitVec.yCoord, var3.hitVec.zCoord);
+		Vec3D vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		Vec3D vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		MovingObjectPosition movingObjectPosition3 = this.worldObj.rayTraceBlocks(vec3D15, vec3D2);
+		vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		if(movingObjectPosition3 != null) {
+			vec3D2 = Vec3D.createVector(movingObjectPosition3.hitVec.xCoord, movingObjectPosition3.hitVec.yCoord, movingObjectPosition3.hitVec.zCoord);
 		}
 
-		Entity var4 = null;
-		List var5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
-		double var6 = 0.0D;
+		Entity entity4 = null;
+		List list5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+		double d6 = 0.0D;
 
-		float var10;
-		for(int var8 = 0; var8 < var5.size(); ++var8) {
-			Entity var9 = (Entity)var5.get(var8);
-			if(var9.canBeCollidedWith() && (var9 != this.shootingEntity || this.ticksInAir >= 5)) {
-				var10 = 0.3F;
-				AxisAlignedBB var11 = var9.boundingBox.expand((double)var10, (double)var10, (double)var10);
-				MovingObjectPosition var12 = var11.calculateIntercept(var15, var2);
-				if(var12 != null) {
-					double var13 = var15.distanceTo(var12.hitVec);
-					if(var13 < var6 || var6 == 0.0D) {
-						var4 = var9;
-						var6 = var13;
+		float f8;
+		for(int i9 = 0; i9 < list5.size(); ++i9) {
+			Entity entity10 = (Entity)list5.get(i9);
+			if(entity10.canBeCollidedWith() && (entity10 != this.shootingEntity || this.ticksInAir >= 5)) {
+				f8 = 0.3F;
+				AxisAlignedBB axisAlignedBB11 = entity10.boundingBox.expand((double)f8, (double)f8, (double)f8);
+				MovingObjectPosition movingObjectPosition12 = axisAlignedBB11.calculateIntercept(vec3D15, vec3D2);
+				if(movingObjectPosition12 != null) {
+					double d13 = vec3D15.distanceTo(movingObjectPosition12.hitVec);
+					if(d13 < d6 || d6 == 0.0D) {
+						entity4 = entity10;
+						d6 = d13;
 					}
 				}
 			}
 		}
 
-		if(var4 != null) {
-			var3 = new MovingObjectPosition(var4);
+		if(entity4 != null) {
+			movingObjectPosition3 = new MovingObjectPosition(entity4);
 		}
 
-		float var16;
-		if(var3 != null) {
-			if(var3.entityHit != null) {
-				if(var3.entityHit.attackEntityFrom(this.shootingEntity, 4)) {
+		float f16;
+		if(movingObjectPosition3 != null) {
+			if(movingObjectPosition3.entityHit != null) {
+				if(movingObjectPosition3.entityHit.attackEntityFrom(this.shootingEntity, 4)) {
 					this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
 					this.setEntityDead();
 				} else {
-					this.motionX *= (double)-0.1F;
-					this.motionY *= (double)-0.1F;
-					this.motionZ *= (double)-0.1F;
+					this.motionX *= -0.10000000149011612D;
+					this.motionY *= -0.10000000149011612D;
+					this.motionZ *= -0.10000000149011612D;
 					this.rotationYaw += 180.0F;
 					this.prevRotationYaw += 180.0F;
 					this.ticksInAir = 0;
 				}
 			} else {
-				this.xTile = var3.blockX;
-				this.yTile = var3.blockY;
-				this.zTile = var3.blockZ;
+				this.xTile = movingObjectPosition3.blockX;
+				this.yTile = movingObjectPosition3.blockY;
+				this.zTile = movingObjectPosition3.blockZ;
 				this.inTile = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
-				this.motionX = (double)((float)(var3.hitVec.xCoord - this.posX));
-				this.motionY = (double)((float)(var3.hitVec.yCoord - this.posY));
-				this.motionZ = (double)((float)(var3.hitVec.zCoord - this.posZ));
-				var16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
-				this.posX -= this.motionX / (double)var16 * (double)0.05F;
-				this.posY -= this.motionY / (double)var16 * (double)0.05F;
-				this.posZ -= this.motionZ / (double)var16 * (double)0.05F;
+				this.motionX = (double)((float)(movingObjectPosition3.hitVec.xCoord - this.posX));
+				this.motionY = (double)((float)(movingObjectPosition3.hitVec.yCoord - this.posY));
+				this.motionZ = (double)((float)(movingObjectPosition3.hitVec.zCoord - this.posZ));
+				f16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
+				this.posX -= this.motionX / (double)f16 * (double)0.05F;
+				this.posY -= this.motionY / (double)f16 * (double)0.05F;
+				this.posZ -= this.motionZ / (double)f16 * (double)0.05F;
 				this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
 				this.inData = true;
 				this.arrowShake = 7;
@@ -150,10 +150,10 @@
 		this.posX += this.motionX;
 		this.posY += this.motionY;
 		this.posZ += this.motionZ;
-		var16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)((float)Math.PI));
+		f16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)(float)Math.PI);
 
-		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var16) * 180.0D / (double)((float)Math.PI)); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)f16) * 180.0D / (double)(float)Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
 		}
 
 		while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
@@ -170,46 +170,46 @@
 
 		this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
 		this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
-		float var17 = 0.99F;
-		var10 = 0.03F;
+		float f17 = 0.99F;
+		f8 = 0.03F;
 		if(this.handleWaterMovement()) {
-			for(int var18 = 0; var18 < 4; ++var18) {
-				float var19 = 0.25F;
-				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)var19, this.posY - this.motionY * (double)var19, this.posZ - this.motionZ * (double)var19, this.motionX, this.motionY, this.motionZ);
+			for(int i18 = 0; i18 < 4; ++i18) {
+				float f19 = 0.25F;
+				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)f19, this.posY - this.motionY * (double)f19, this.posZ - this.motionZ * (double)f19, this.motionX, this.motionY, this.motionZ);
 			}
 
-			var17 = 0.8F;
+			f17 = 0.8F;
 		}
 
-		this.motionX *= (double)var17;
-		this.motionY *= (double)var17;
-		this.motionZ *= (double)var17;
-		this.motionY -= (double)var10;
+		this.motionX *= (double)f17;
+		this.motionY *= (double)f17;
+		this.motionZ *= (double)f17;
+		this.motionY -= (double)f8;
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setShort("xTile", (short)this.xTile);
-		var1.setShort("yTile", (short)this.yTile);
-		var1.setShort("zTile", (short)this.zTile);
-		var1.setByte("inTile", (byte)this.inTile);
-		var1.setByte("shake", (byte)this.arrowShake);
-		var1.setByte("inGround", (byte)(this.inData ? 1 : 0));
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.xTile = var1.getShort("xTile");
-		this.yTile = var1.getShort("yTile");
-		this.zTile = var1.getShort("zTile");
-		this.inTile = var1.getByte("inTile") & 255;
-		this.arrowShake = var1.getByte("shake") & 255;
-		this.inData = var1.getByte("inGround") == 1;
-	}
-
-	public void onCollideWithPlayer(EntityPlayer var1) {
-		if(this.inData && this.shootingEntity == var1 && this.arrowShake <= 0 && var1.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setShort("xTile", (short)this.xTile);
+		nbttagcompound.setShort("yTile", (short)this.yTile);
+		nbttagcompound.setShort("zTile", (short)this.zTile);
+		nbttagcompound.setByte("inTile", (byte)this.inTile);
+		nbttagcompound.setByte("shake", (byte)this.arrowShake);
+		nbttagcompound.setByte("inGround", (byte)(this.inData ? 1 : 0));
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.xTile = nbttagcompound.getShort("xTile");
+		this.yTile = nbttagcompound.getShort("yTile");
+		this.zTile = nbttagcompound.getShort("zTile");
+		this.inTile = nbttagcompound.getByte("inTile") & 255;
+		this.arrowShake = nbttagcompound.getByte("shake") & 255;
+		this.inData = nbttagcompound.getByte("inGround") == 1;
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+		if(this.inData && this.shootingEntity == entityPlayer && this.arrowShake <= 0 && entityPlayer.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
 			this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-			var1.onItemPickup(this, 1);
+			entityPlayer.onItemPickup(this, 1);
 			this.setEntityDead();
 		}
 
--- /dev/null
+++ net/minecraft/src/ItemHoursLongPastII.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+public class ItemHoursLongPastII extends Item {
+	public ItemHoursLongPastII(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		worldObj.playSoundAtEntity(entityPlayer, "ext.notif", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+		return itemStack;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EntityAnimalUnknownClass.java
@@ -1,0 +1,34 @@
+package net.minecraft.src;
+
+public class EntityAnimalUnknownClass extends EntityAnimal {
+	public boolean field_7016_53i8dJHJ24h671lOMawc0u338G2jw7WT16P36iV8bJ3maT3wk1x57VvYb1CJ = false;
+
+	public EntityAnimalUnknownClass(World world) {
+		super(world);
+		this.setSize(1.0F, 2.0F);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+	}
+
+	protected String getHurtSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected String getDeathSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected float getSoundVolume() {
+		return 0.4F;
+	}
+
+	public boolean func_7015_4Jhu7AYkh68Nm251wab3jhdj6f3osG4UT5XF0x80t3J6EurUQmr6oAVQxrr2(EntityPlayer nh) {
+		return false;
+	}
+}
--- net/minecraft/src/Packet3Chat.java
+++ net/minecraft/src/Packet3Chat.java
@@ -10,20 +10,20 @@
 	public Packet3Chat() {
 	}
 
-	public Packet3Chat(String var1) {
-		this.message = var1;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.message = var1.readUTF();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeUTF(this.message);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleChat(this);
+	public Packet3Chat(String message) {
+		this.message = message;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.message = dataInputStream.readUTF();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.message);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleChat(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/BlockSapling.java
+++ net/minecraft/src/BlockSapling.java
@@ -3,27 +3,27 @@
 import java.util.Random;
 
 public class BlockSapling extends BlockFlower {
-	protected BlockSapling(int var1, int var2) {
-		super(var1, var2);
-		float var3 = 0.4F;
-		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var3 * 2.0F, 0.5F + var3);
+	protected BlockSapling(int id, int blockIndex) {
+		super(id, blockIndex);
+		float f3 = 0.4F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, f3 * 2.0F, 0.5F + f3);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		super.updateTick(var1, var2, var3, var4, var5);
-		if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9 && var5.nextInt(5) == 0) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 < 15) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var6 + 1);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		super.updateTick(world, x, y, z, random);
+		if(world.getBlockLightValue(x, y + 1, z) >= 9 && random.nextInt(5) == 0) {
+			int i6 = world.getBlockMetadata(x, y, z);
+			if(i6 < 15) {
+				world.setBlockMetadataWithNotify(x, y, z, i6 + 1);
 			} else {
-				var1.setBlock(var2, var3, var4, 0);
-				Object var7 = new WorldGenTrees();
-				if(var5.nextInt(10) == 0) {
-					var7 = new WorldGenBigTree();
+				world.setBlock(x, y, z, 0);
+				Object object7 = new WorldGenTrees();
+				if(random.nextInt(10) == 0) {
+					object7 = new WorldGenBigTree();
 				}
 
-				if(!((WorldGenerator)var7).generate(var1, var5, var2, var3, var4)) {
-					var1.setBlock(var2, var3, var4, this.blockID);
+				if(!((WorldGenerator)object7).generate(world, random, x, y, z)) {
+					world.setBlock(x, y, z, this.blockID);
 				}
 			}
 		}
--- net/minecraft/src/WorldGenDungeons.java
+++ net/minecraft/src/WorldGenDungeons.java
@@ -3,114 +3,114 @@
 import java.util.Random;
 
 public class WorldGenDungeons extends WorldGenerator {
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		byte var6 = 3;
-		int var7 = var2.nextInt(2) + 2;
-		int var8 = var2.nextInt(2) + 2;
-		int var9 = 0;
-
-		int var10;
-		int var11;
-		int var12;
-		for(var10 = var3 - var7 - 1; var10 <= var3 + var7 + 1; ++var10) {
-			for(var11 = var4 - 1; var11 <= var4 + var6 + 1; ++var11) {
-				for(var12 = var5 - var8 - 1; var12 <= var5 + var8 + 1; ++var12) {
-					Material var13 = var1.getBlockMaterial(var10, var11, var12);
-					if(var11 == var4 - 1 && !var13.isSolid()) {
-						return false;
-					}
-
-					if(var11 == var4 + var6 + 1 && !var13.isSolid()) {
-						return false;
-					}
-
-					if((var10 == var3 - var7 - 1 || var10 == var3 + var7 + 1 || var12 == var5 - var8 - 1 || var12 == var5 + var8 + 1) && var11 == var4 && var1.getBlockId(var10, var11, var12) == 0 && var1.getBlockId(var10, var11 + 1, var12) == 0) {
-						++var9;
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		byte b6 = 3;
+		int i7 = rand.nextInt(2) + 2;
+		int i8 = rand.nextInt(2) + 2;
+		int i9 = 0;
+
+		int i10;
+		int i11;
+		int i12;
+		for(i10 = x - i7 - 1; i10 <= x + i7 + 1; ++i10) {
+			for(i11 = y - 1; i11 <= y + b6 + 1; ++i11) {
+				for(i12 = z - i8 - 1; i12 <= z + i8 + 1; ++i12) {
+					Material material13 = world.getBlockMaterial(i10, i11, i12);
+					if(i11 == y - 1 && !material13.isSolid()) {
+						return false;
+					}
+
+					if(i11 == y + b6 + 1 && !material13.isSolid()) {
+						return false;
+					}
+
+					if((i10 == x - i7 - 1 || i10 == x + i7 + 1 || i12 == z - i8 - 1 || i12 == z + i8 + 1) && i11 == y && world.getBlockId(i10, i11, i12) == 0 && world.getBlockId(i10, i11 + 1, i12) == 0) {
+						++i9;
 					}
 				}
 			}
 		}
 
-		if(var9 >= 1 && var9 <= 5) {
-			for(var10 = var3 - var7 - 1; var10 <= var3 + var7 + 1; ++var10) {
-				for(var11 = var4 + var6; var11 >= var4 - 1; --var11) {
-					for(var12 = var5 - var8 - 1; var12 <= var5 + var8 + 1; ++var12) {
-						if(var10 != var3 - var7 - 1 && var11 != var4 - 1 && var12 != var5 - var8 - 1 && var10 != var3 + var7 + 1 && var11 != var4 + var6 + 1 && var12 != var5 + var8 + 1) {
-							var1.setBlockWithNotify(var10, var11, var12, 0);
-						} else if(var11 >= 0 && !var1.getBlockMaterial(var10, var11 - 1, var12).isSolid()) {
-							var1.setBlockWithNotify(var10, var11, var12, 0);
-						} else if(var1.getBlockMaterial(var10, var11, var12).isSolid()) {
-							if(var11 == var4 - 1 && var2.nextInt(4) != 0) {
-								var1.setBlockWithNotify(var10, var11, var12, Block.cobblestoneMossy.blockID);
+		if(i9 >= 1 && i9 <= 5) {
+			for(i10 = x - i7 - 1; i10 <= x + i7 + 1; ++i10) {
+				for(i11 = y + b6; i11 >= y - 1; --i11) {
+					for(i12 = z - i8 - 1; i12 <= z + i8 + 1; ++i12) {
+						if(i10 != x - i7 - 1 && i11 != y - 1 && i12 != z - i8 - 1 && i10 != x + i7 + 1 && i11 != y + b6 + 1 && i12 != z + i8 + 1) {
+							world.setBlockWithNotify(i10, i11, i12, 0);
+						} else if(i11 >= 0 && !world.getBlockMaterial(i10, i11 - 1, i12).isSolid()) {
+							world.setBlockWithNotify(i10, i11, i12, 0);
+						} else if(world.getBlockMaterial(i10, i11, i12).isSolid()) {
+							if(i11 == y - 1 && rand.nextInt(4) != 0) {
+								world.setBlockWithNotify(i10, i11, i12, Block.cobblestoneMossy.blockID);
 							} else {
-								var1.setBlockWithNotify(var10, var11, var12, Block.cobblestone.blockID);
+								world.setBlockWithNotify(i10, i11, i12, Block.cobblestone.blockID);
 							}
 						}
 					}
 				}
 			}
 
-			label110:
-			for(var10 = 0; var10 < 2; ++var10) {
-				for(var11 = 0; var11 < 3; ++var11) {
-					var12 = var3 + var2.nextInt(var7 * 2 + 1) - var7;
-					int var14 = var5 + var2.nextInt(var8 * 2 + 1) - var8;
-					if(var1.getBlockId(var12, var4, var14) == 0) {
-						int var15 = 0;
-						if(var1.getBlockMaterial(var12 - 1, var4, var14).isSolid()) {
-							++var15;
-						}
-
-						if(var1.getBlockMaterial(var12 + 1, var4, var14).isSolid()) {
-							++var15;
-						}
-
-						if(var1.getBlockMaterial(var12, var4, var14 - 1).isSolid()) {
-							++var15;
-						}
-
-						if(var1.getBlockMaterial(var12, var4, var14 + 1).isSolid()) {
-							++var15;
-						}
-
-						if(var15 == 1) {
-							var1.setBlockWithNotify(var12, var4, var14, Block.chest.blockID);
-							TileEntityChest var16 = (TileEntityChest)var1.getBlockTileEntity(var12, var4, var14);
-							int var17 = 0;
+			label108:
+			for(i10 = 0; i10 < 2; ++i10) {
+				for(i11 = 0; i11 < 3; ++i11) {
+					i12 = x + rand.nextInt(i7 * 2 + 1) - i7;
+					int i18 = z + rand.nextInt(i8 * 2 + 1) - i8;
+					if(world.getBlockId(i12, y, i18) == 0) {
+						int i14 = 0;
+						if(world.getBlockMaterial(i12 - 1, y, i18).isSolid()) {
+							++i14;
+						}
+
+						if(world.getBlockMaterial(i12 + 1, y, i18).isSolid()) {
+							++i14;
+						}
+
+						if(world.getBlockMaterial(i12, y, i18 - 1).isSolid()) {
+							++i14;
+						}
+
+						if(world.getBlockMaterial(i12, y, i18 + 1).isSolid()) {
+							++i14;
+						}
+
+						if(i14 == 1) {
+							world.setBlockWithNotify(i12, y, i18, Block.chest.blockID);
+							TileEntityChest tileEntityChest15 = (TileEntityChest)world.getBlockTileEntity(i12, y, i18);
+							int i16 = 0;
 
 							while(true) {
-								if(var17 >= 8) {
-									continue label110;
-								}
-
-								ItemStack var18 = this.pickCheckLootItem(var2);
-								if(var18 != null) {
-									var16.setInventorySlotContents(var2.nextInt(var16.getSizeInventory()), var18);
-								}
-
-								++var17;
+								if(i16 >= 8) {
+									continue label108;
+								}
+
+								ItemStack itemStack17 = this.pickCheckLootItem(rand);
+								if(itemStack17 != null) {
+									tileEntityChest15.setInventorySlotContents(rand.nextInt(tileEntityChest15.getSizeInventory()), itemStack17);
+								}
+
+								++i16;
 							}
 						}
 					}
 				}
 			}
 
-			var1.setBlockWithNotify(var3, var4, var5, Block.mobSpawner.blockID);
-			TileEntityMobSpawner var19 = (TileEntityMobSpawner)var1.getBlockTileEntity(var3, var4, var5);
-			var19.mobID = this.pickMobSpawner(var2);
+			world.setBlockWithNotify(x, y, z, Block.mobSpawner.blockID);
+			TileEntityMobSpawner tileEntityMobSpawner19 = (TileEntityMobSpawner)world.getBlockTileEntity(x, y, z);
+			tileEntityMobSpawner19.mobID = this.pickMobSpawner(rand);
 			return true;
 		} else {
 			return false;
 		}
 	}
 
-	private ItemStack pickCheckLootItem(Random var1) {
-		int var2 = var1.nextInt(11);
-		return var2 == 0 ? new ItemStack(Item.saddle) : (var2 == 1 ? new ItemStack(Item.ingotIron, var1.nextInt(4) + 1) : (var2 == 2 ? new ItemStack(Item.bread) : (var2 == 3 ? new ItemStack(Item.wheat, var1.nextInt(4) + 1) : (var2 == 4 ? new ItemStack(Item.gunpowder, var1.nextInt(4) + 1) : (var2 == 5 ? new ItemStack(Item.silk, var1.nextInt(4) + 1) : (var2 == 6 ? new ItemStack(Item.bucketEmpty) : (var2 == 7 && var1.nextInt(100) == 0 ? new ItemStack(Item.appleGold) : (var2 == 8 && var1.nextInt(2) == 0 ? new ItemStack(Item.redstone, var1.nextInt(4) + 1) : (var2 == 9 && var1.nextInt(10) == 0 ? new ItemStack(Item.itemsList[Item.record13.shiftedIndex + var1.nextInt(2)]) : null)))))))));
+	private ItemStack pickCheckLootItem(Random random) {
+		int i2 = random.nextInt(11);
+		return i2 == 0 ? new ItemStack(Item.saddle) : (i2 == 1 ? new ItemStack(Item.ingotIron, random.nextInt(4) + 1) : (i2 == 2 ? new ItemStack(Item.bread) : (i2 == 3 ? new ItemStack(Item.wheat, random.nextInt(4) + 1) : (i2 == 4 ? new ItemStack(Item.gunpowder, random.nextInt(4) + 1) : (i2 == 5 ? new ItemStack(Item.silk, random.nextInt(4) + 1) : (i2 == 6 ? new ItemStack(Item.bucketEmpty) : (i2 == 7 && random.nextInt(100) == 0 ? new ItemStack(Item.appleGold) : (i2 == 8 && random.nextInt(2) == 0 ? new ItemStack(Item.redstone, random.nextInt(4) + 1) : (i2 == 9 && random.nextInt(10) == 0 ? new ItemStack(Item.itemsList[Item.record13.shiftedIndex + random.nextInt(2)]) : null)))))))));
 	}
 
-	private String pickMobSpawner(Random var1) {
-		int var2 = var1.nextInt(4);
-		return var2 == 0 ? "Skeleton" : (var2 == 1 ? "Zombie" : (var2 == 2 ? "Zombie" : (var2 == 3 ? "Spider" : "")));
+	private String pickMobSpawner(Random random) {
+		int i2 = random.nextInt(4);
+		return i2 == 0 ? "Skeleton" : (i2 == 1 ? "Zombie" : (i2 == 2 ? "Zombie" : (i2 == 3 ? "Spider" : "")));
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockWifiBlock.java
@@ -1,0 +1,11 @@
+package net.minecraft.src;
+
+public class BlockWifiBlock extends Block {
+	public BlockWifiBlock(int integer) {
+		super(integer, Material.wood);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		return true;
+	}
+}
--- net/minecraft/src/Packet255KickDisconnect.java
+++ net/minecraft/src/Packet255KickDisconnect.java
@@ -10,20 +10,20 @@
 	public Packet255KickDisconnect() {
 	}
 
-	public Packet255KickDisconnect(String var1) {
-		this.reason = var1;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.reason = var1.readUTF();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeUTF(this.reason);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleKickDisconnect(this);
+	public Packet255KickDisconnect(String reason) {
+		this.reason = reason;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.reason = dataInputStream.readUTF();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.reason);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleKickDisconnect(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/ChunkCache.java
+++ net/minecraft/src/ChunkCache.java
@@ -6,53 +6,57 @@
 	private Chunk[][] chunkArray;
 	private World worldObj;
 
-	public ChunkCache(World var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		this.worldObj = var1;
-		this.chunkX = var2 >> 4;
-		this.chunkZ = var4 >> 4;
-		int var8 = var5 >> 4;
-		int var9 = var7 >> 4;
-		this.chunkArray = new Chunk[var8 - this.chunkX + 1][var9 - this.chunkZ + 1];
+	public ChunkCache(World world, int x, int integer3, int z, int maxX, int integer6, int maxZ) {
+		this.worldObj = world;
+		this.chunkX = x >> 4;
+		this.chunkZ = z >> 4;
+		int i8 = maxX >> 4;
+		int i9 = maxZ >> 4;
+		this.chunkArray = new Chunk[i8 - this.chunkX + 1][i9 - this.chunkZ + 1];
 
-		for(int var10 = this.chunkX; var10 <= var8; ++var10) {
-			for(int var11 = this.chunkZ; var11 <= var9; ++var11) {
-				this.chunkArray[var10 - this.chunkX][var11 - this.chunkZ] = var1.getChunkFromChunkCoords(var10, var11);
+		for(int i10 = this.chunkX; i10 <= i8; ++i10) {
+			for(int i11 = this.chunkZ; i11 <= i9; ++i11) {
+				this.chunkArray[i10 - this.chunkX][i11 - this.chunkZ] = world.getChunkFromChunkCoords(i10, i11);
 			}
 		}
 
 	}
 
-	public int getBlockId(int var1, int var2, int var3) {
-		if(var2 < 0) {
-			return 0;
-		} else if(var2 >= 128) {
-			return 0;
-		} else {
-			int var4 = (var1 >> 4) - this.chunkX;
-			int var5 = (var3 >> 4) - this.chunkZ;
-			return this.chunkArray[var4][var5].getBlockID(var1 & 15, var2, var3 & 15);
-		}
-	}
-
-	public int getBlockMetadata(int var1, int var2, int var3) {
-		if(var2 < 0) {
-			return 0;
-		} else if(var2 >= 128) {
-			return 0;
-		} else {
-			int var4 = (var1 >> 4) - this.chunkX;
-			int var5 = (var3 >> 4) - this.chunkZ;
-			return this.chunkArray[var4][var5].getBlockMetadata(var1 & 15, var2, var3 & 15);
-		}
-	}
-
-	public Material getBlockMaterial(int var1, int var2, int var3) {
-		int var4 = this.getBlockId(var1, var2, var3);
-		return var4 == 0 ? Material.air : Block.blocksList[var4].material;
-	}
-
-	public boolean isBlockNormalCube(int var1, int var2, int var3) {
-		Block var4 = Block.blocksList[this.getBlockId(var1, var2, var3)];
-		return var4 == null ? false : var4.isOpaqueCube();
+	public int getBlockId(int blockX, int blockY, int blockZ) {
+		if(blockY < 0) {
+			return 0;
+		} else if(blockY >= 128) {
+			return 0;
+		} else {
+			int i4 = (blockX >> 4) - this.chunkX;
+			int i5 = (blockZ >> 4) - this.chunkZ;
+			return this.chunkArray[i4][i5].getBlockID(blockX & 15, blockY, blockZ & 15);
+		}
+	}
+
+	public int getBlockMetadata(int x, int y, int z) {
+		if(y < 0) {
+			return 0;
+		} else if(y >= 128) {
+			return 0;
+		} else {
+			int i4 = (x >> 4) - this.chunkX;
+			int i5 = (z >> 4) - this.chunkZ;
+			return this.chunkArray[i4][i5].getBlockMetadata(x & 15, y, z & 15);
+		}
+	}
+
+	public Material getBlockMaterial(int x, int y, int z) {
+		int i4 = this.getBlockId(x, y, z);
+		return i4 == 0 ? Material.air : Block.blocksList[i4].material;
+	}
+
+	public boolean isBlockNormalCube(int x, int y, int z) {
+		Block block4 = Block.blocksList[this.getBlockId(x, y, z)];
+		return block4 == null ? false : block4.isOpaqueCube();
+	}
+
+	public BiomeInterface func_7689_6C9H19c7YerVndE5i8yC8Ig4845UHLtkUSjAGU517V812e99T2r6TlW67Z0B() {
+		return this.worldObj.func_7689_6C9H19c7YerVndE5i8yC8Ig4845UHLtkUSjAGU517V812e99T2r6TlW67Z0B();
 	}
 }
--- net/minecraft/src/Packet1Login.java
+++ net/minecraft/src/Packet1Login.java
@@ -12,26 +12,26 @@
 	public Packet1Login() {
 	}
 
-	public Packet1Login(String var1, String var2, int var3) {
-		this.username = var1;
-		this.password = var2;
-		this.protocolVersion = var3;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.protocolVersion = var1.readInt();
-		this.username = var1.readUTF();
-		this.password = var1.readUTF();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.protocolVersion);
-		var1.writeUTF(this.username);
-		var1.writeUTF(this.password);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleLogin(this);
+	public Packet1Login(String username, String password, int protocolVersion) {
+		this.username = username;
+		this.password = password;
+		this.protocolVersion = protocolVersion;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.protocolVersion = dataInputStream.readInt();
+		this.username = dataInputStream.readUTF();
+		this.password = dataInputStream.readUTF();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.protocolVersion);
+		dataOutputStream.writeUTF(this.username);
+		dataOutputStream.writeUTF(this.password);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleLogin(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/PlayerNBTManager.java
+++ net/minecraft/src/PlayerNBTManager.java
@@ -9,40 +9,40 @@
 	public static Logger logger = Logger.getLogger("Minecraft");
 	private File playerNBT;
 
-	public PlayerNBTManager(File var1) {
-		this.playerNBT = var1;
-		var1.mkdir();
+	public PlayerNBTManager(File playerNBT) {
+		this.playerNBT = playerNBT;
+		playerNBT.mkdir();
 	}
 
-	public void writePlayerNBT(EntityPlayerMP var1) {
+	public void writePlayerNBT(EntityPlayerMP entityPlayerMP) {
 		try {
-			NBTTagCompound var2 = new NBTTagCompound();
-			var1.writeToNBT(var2);
-			File var3 = new File(this.playerNBT, "_tmp_.dat");
-			File var4 = new File(this.playerNBT, var1.username + ".dat");
-			CompressedStreamTools.writeCompressed(var2, new FileOutputStream(var3));
-			if(var4.exists()) {
-				var4.delete();
+			NBTTagCompound nBTTagCompound2 = new NBTTagCompound();
+			entityPlayerMP.writeToNBT(nBTTagCompound2);
+			File file3 = new File(this.playerNBT, "_tmp_.dat");
+			File file4 = new File(this.playerNBT, entityPlayerMP.username() + ".dat");
+			CompressedStreamTools.writeCompressed(nBTTagCompound2, new FileOutputStream(file3));
+			if(file4.exists()) {
+				file4.delete();
 			}
 
-			var3.renameTo(var4);
-		} catch (Exception var5) {
-			logger.warning("Failed to save player data for " + var1.username);
+			file3.renameTo(file4);
+		} catch (Exception exception5) {
+			logger.warning("Failed to save player data for " + entityPlayerMP.username);
 		}
 
 	}
 
-	public void readPlayerNBT(EntityPlayerMP var1) {
+	public void readPlayerNBT(EntityPlayerMP entityPlayerMP) {
 		try {
-			File var2 = new File(this.playerNBT, var1.username + ".dat");
-			if(var2.exists()) {
-				NBTTagCompound var3 = CompressedStreamTools.readCompressed(new FileInputStream(var2));
-				if(var3 != null) {
-					var1.readFromNBT(var3);
+			File file2 = new File(this.playerNBT, entityPlayerMP.username() + ".dat");
+			if(file2.exists()) {
+				NBTTagCompound nBTTagCompound3 = CompressedStreamTools.readCompressed(new FileInputStream(file2));
+				if(nBTTagCompound3 != null) {
+					entityPlayerMP.readFromNBT(nBTTagCompound3);
 				}
 			}
-		} catch (Exception var4) {
-			logger.warning("Failed to load player data for " + var1.username);
+		} catch (Exception exception4) {
+			logger.warning("Failed to load player data for " + entityPlayerMP.username);
 		}
 
 	}
--- net/minecraft/src/IWorldAccess.java
+++ net/minecraft/src/IWorldAccess.java
@@ -1,21 +1,21 @@
 package net.minecraft.src;
 
 public interface IWorldAccess {
-	void markBlockAndNeighborsNeedsUpdate(int var1, int var2, int var3);
-
-	void markBlockRangeNeedsUpdate(int var1, int var2, int var3, int var4, int var5, int var6);
-
-	void playSound(String var1, double var2, double var4, double var6, float var8, float var9);
-
-	void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12);
-
-	void obtainEntitySkin(Entity var1);
-
-	void releaseEntitySkin(Entity var1);
+	void markBlockAndNeighborsNeedsUpdate(int i1, int i2, int i3);
+
+	void markBlockRangeNeedsUpdate(int i1, int i2, int i3, int i4, int i5, int i6);
+
+	void playSound(String string1, double d2, double d4, double d6, float f8, float f9);
+
+	void spawnParticle(String string1, double d2, double d4, double d6, double d8, double d10, double d12);
+
+	void obtainEntitySkin(Entity entity1);
+
+	void releaseEntitySkin(Entity entity1);
 
 	void updateAllRenderers();
 
-	void playRecord(String var1, int var2, int var3, int var4);
+	void playRecord(String string1, int i2, int i3, int i4);
 
-	void doNothingWithTileEntity(int var1, int var2, int var3, TileEntity var4);
+	void doNothingWithTileEntity(int i1, int i2, int i3, TileEntity tileEntity4);
 }
--- /dev/null
+++ net/minecraft/src/BlockDoorUnknownClass.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockDoorUnknownClass extends BlockDoor {
+	public static int field_6399_3slSkDKTCaIAS0l2XbBtC16UvE75JY5138b9xk8llTFS7o6cm1PV72XirhbJ;
+
+	public BlockDoorUnknownClass(int integer1, int integer2, int integer3) {
+		super(integer1, Material.wood);
+		this.blockIndexInTexture = integer2;
+		field_6399_3slSkDKTCaIAS0l2XbBtC16UvE75JY5138b9xk8llTFS7o6cm1PV72XirhbJ = integer3 + 32767;
+	}
+
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : field_6399_3slSkDKTCaIAS0l2XbBtC16UvE75JY5138b9xk8llTFS7o6cm1PV72XirhbJ;
+	}
+}
--- net/minecraft/src/BlockMinecartTrack.java
+++ net/minecraft/src/BlockMinecartTrack.java
@@ -3,12 +3,12 @@
 import java.util.Random;
 
 public class BlockMinecartTrack extends Block {
-	protected BlockMinecartTrack(int var1, int var2) {
-		super(var1, var2, Material.circuits);
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F / 16.0F, 1.0F);
+	protected BlockMinecartTrack(int id, int blockIndex) {
+		super(id, blockIndex, Material.circuits);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -16,17 +16,17 @@
 		return false;
 	}
 
-	public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3D var5, Vec3D var6) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.collisionRayTrace(var1, var2, var3, var4, var5, var6);
+	public MovingObjectPosition collisionRayTrace(World world, int x, int y, int z, Vec3D vector1, Vec3D vector2) {
+		this.setBlockBoundsBasedOnState(world, x, y, z);
+		return super.collisionRayTrace(world, x, y, z, vector1, vector2);
 	}
 
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		if(var5 >= 2 && var5 <= 5) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 10.0F / 16.0F, 1.0F);
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		int i5 = blockAccess.getBlockMetadata(x, y, z);
+		if(i5 >= 2 && i5 <= 5) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.625F, 1.0F);
 		} else {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F / 16.0F, 1.0F);
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
 		}
 
 	}
@@ -35,52 +35,52 @@
 		return 9;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 1;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2, var3 - 1, var4);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		var1.setBlockMetadataWithNotify(var2, var3, var4, 15);
-		this.refreshTrackShape(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		boolean var7 = false;
-		if(!var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var7 = true;
-		}
-
-		if(var6 == 2 && !var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var7 = true;
-		}
-
-		if(var6 == 3 && !var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var7 = true;
-		}
-
-		if(var6 == 4 && !var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var7 = true;
-		}
-
-		if(var6 == 5 && !var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var7 = true;
-		}
-
-		if(var7) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		} else if(var5 > 0 && Block.blocksList[var5].canProvidePower() && MinecartTrackLogic.getNAdjacentTracks(new MinecartTrackLogic(this, var1, var2, var3, var4)) == 3) {
-			this.refreshTrackShape(var1, var2, var3, var4);
-		}
-
-	}
-
-	private void refreshTrackShape(World var1, int var2, int var3, int var4) {
-		(new MinecartTrackLogic(this, var1, var2, var3, var4)).place(var1.isBlockIndirectlyGettingPowered(var2, var3, var4));
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y - 1, z);
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		world.setBlockMetadataWithNotify(x, y, z, 15);
+		this.refreshTrackShape(world, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		boolean z7 = false;
+		if(!world.isBlockNormalCube(x, y - 1, z)) {
+			z7 = true;
+		}
+
+		if(i6 == 2 && !world.isBlockNormalCube(x + 1, y, z)) {
+			z7 = true;
+		}
+
+		if(i6 == 3 && !world.isBlockNormalCube(x - 1, y, z)) {
+			z7 = true;
+		}
+
+		if(i6 == 4 && !world.isBlockNormalCube(x, y, z - 1)) {
+			z7 = true;
+		}
+
+		if(i6 == 5 && !world.isBlockNormalCube(x, y, z + 1)) {
+			z7 = true;
+		}
+
+		if(z7) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
+		} else if(flag > 0 && Block.blocksList[flag].canProvidePower() && MinecartTrackLogic.getNAdjacentTracks(new MinecartTrackLogic(this, world, x, y, z)) == 3) {
+			this.refreshTrackShape(world, x, y, z);
+		}
+
+	}
+
+	private void refreshTrackShape(World world, int x, int y, int z) {
+		(new MinecartTrackLogic(this, world, x, y, z)).place(world.isBlockIndirectlyGettingPowered(x, y, z));
 	}
 }
--- net/minecraft/src/EntityCreature.java
+++ net/minecraft/src/EntityCreature.java
@@ -5,110 +5,110 @@
 	protected Entity entityToAttack;
 	protected boolean hasAttacked = false;
 
-	public EntityCreature(World var1) {
-		super(var1);
+	public EntityCreature(World world) {
+		super(world);
 	}
 
 	protected void updateEntityActionState() {
 		this.hasAttacked = false;
-		float var1 = 16.0F;
+		float f1 = 16.0F;
 		if(this.entityToAttack == null) {
 			this.entityToAttack = this.findPlayerToAttack();
 			if(this.entityToAttack != null) {
-				this.pathToEntity = this.worldObj.getPathToEntity(this, this.entityToAttack, var1);
+				this.pathToEntity = this.worldObj.getPathToEntity(this, this.entityToAttack, f1);
 			}
 		} else if(!this.entityToAttack.isEntityAlive()) {
 			this.entityToAttack = null;
 		} else {
-			float var2 = this.entityToAttack.getDistanceToEntity(this);
+			float f2 = this.entityToAttack.getDistanceToEntity(this);
 			if(this.canEntityBeSeen(this.entityToAttack)) {
-				this.attackEntity(this.entityToAttack, var2);
+				this.attackEntity(this.entityToAttack, f2);
 			}
 		}
 
 		if(this.hasAttacked || this.entityToAttack == null || this.pathToEntity != null && this.rand.nextInt(20) != 0) {
 			if(this.pathToEntity == null && this.rand.nextInt(80) == 0 || this.rand.nextInt(80) == 0) {
-				boolean var21 = false;
-				int var3 = -1;
-				int var4 = -1;
-				int var5 = -1;
-				float var6 = -99999.0F;
+				boolean z21 = false;
+				int i3 = -1;
+				int i4 = -1;
+				int i5 = -1;
+				float f6 = -99999.0F;
 
-				for(int var7 = 0; var7 < 10; ++var7) {
-					int var8 = MathHelper.floor_double(this.posX + (double)this.rand.nextInt(13) - 6.0D);
-					int var9 = MathHelper.floor_double(this.posY + (double)this.rand.nextInt(7) - 3.0D);
-					int var10 = MathHelper.floor_double(this.posZ + (double)this.rand.nextInt(13) - 6.0D);
-					float var11 = this.getBlockPathWeight(var8, var9, var10);
-					if(var11 > var6) {
-						var6 = var11;
-						var3 = var8;
-						var4 = var9;
-						var5 = var10;
-						var21 = true;
+				for(int i7 = 0; i7 < 10; ++i7) {
+					int i8 = MathHelper.floor_double(this.posX + (double)this.rand.nextInt(13) - 6.0D);
+					int i9 = MathHelper.floor_double(this.posY + (double)this.rand.nextInt(7) - 3.0D);
+					int i10 = MathHelper.floor_double(this.posZ + (double)this.rand.nextInt(13) - 6.0D);
+					float f11 = this.getBlockPathWeight(i8, i9, i10);
+					if(f11 > f6) {
+						f6 = f11;
+						i3 = i8;
+						i4 = i9;
+						i5 = i10;
+						z21 = true;
 					}
 				}
 
-				if(var21) {
-					this.pathToEntity = this.worldObj.getEntityPathToXYZ(this, var3, var4, var5, 10.0F);
+				if(z21) {
+					this.pathToEntity = this.worldObj.getEntityPathToXYZ(this, i3, i4, i5, 10.0F);
 				}
 			}
 		} else {
-			this.pathToEntity = this.worldObj.getPathToEntity(this, this.entityToAttack, var1);
+			this.pathToEntity = this.worldObj.getPathToEntity(this, this.entityToAttack, f1);
 		}
 
-		int var22 = MathHelper.floor_double(this.boundingBox.minY);
-		boolean var23 = this.handleWaterMovement();
-		boolean var24 = this.handleLavaMovement();
+		int i22 = MathHelper.floor_double(this.boundingBox.minY);
+		boolean z23 = this.handleWaterMovement();
+		boolean z24 = this.handleLavaMovement();
 		this.rotationPitch = 0.0F;
 		if(this.pathToEntity != null && this.rand.nextInt(100) != 0) {
-			Vec3D var25 = this.pathToEntity.getPosition(this);
-			double var26 = (double)(this.width * 2.0F);
+			Vec3D vec3D25 = this.pathToEntity.getPosition(this);
+			double d26 = (double)(this.width * 2.0F);
 
-			while(var25 != null && var25.squareDistanceTo(this.posX, var25.yCoord, this.posZ) < var26 * var26) {
+			while(vec3D25 != null && vec3D25.squareDistanceTo(this.posX, vec3D25.yCoord, this.posZ) < d26 * d26) {
 				this.pathToEntity.incrementPathIndex();
 				if(this.pathToEntity.isFinished()) {
-					var25 = null;
+					vec3D25 = null;
 					this.pathToEntity = null;
 				} else {
-					var25 = this.pathToEntity.getPosition(this);
+					vec3D25 = this.pathToEntity.getPosition(this);
 				}
 			}
 
 			this.isJumping = false;
-			if(var25 != null) {
-				double var27 = var25.xCoord - this.posX;
-				double var28 = var25.zCoord - this.posZ;
-				double var12 = var25.yCoord - (double)var22;
-				float var14 = (float)(Math.atan2(var28, var27) * 180.0D / (double)((float)Math.PI)) - 90.0F;
-				float var15 = var14 - this.rotationYaw;
-
-				for(this.moveForward = this.moveSpeed; var15 < -180.0F; var15 += 360.0F) {
-				}
-
-				while(var15 >= 180.0F) {
-					var15 -= 360.0F;
-				}
-
-				if(var15 > 30.0F) {
-					var15 = 30.0F;
-				}
-
-				if(var15 < -30.0F) {
-					var15 = -30.0F;
-				}
-
-				this.rotationYaw += var15;
+			if(vec3D25 != null) {
+				double d27 = vec3D25.xCoord - this.posX;
+				double d28 = vec3D25.zCoord - this.posZ;
+				double d12 = vec3D25.yCoord - (double)i22;
+				float f14 = (float)(Math.atan2(d28, d27) * 180.0D / (double)(float)Math.PI) - 90.0F;
+				float f15 = f14 - this.rotationYaw;
+
+				for(this.moveForward = this.moveSpeed; f15 < -180.0F; f15 += 360.0F) {
+				}
+
+				while(f15 >= 180.0F) {
+					f15 -= 360.0F;
+				}
+
+				if(f15 > 30.0F) {
+					f15 = 30.0F;
+				}
+
+				if(f15 < -30.0F) {
+					f15 = -30.0F;
+				}
+
+				this.rotationYaw += f15;
 				if(this.hasAttacked && this.entityToAttack != null) {
-					double var16 = this.entityToAttack.posX - this.posX;
-					double var18 = this.entityToAttack.posZ - this.posZ;
-					float var20 = this.rotationYaw;
-					this.rotationYaw = (float)(Math.atan2(var18, var16) * 180.0D / (double)((float)Math.PI)) - 90.0F;
-					var15 = (var20 - this.rotationYaw + 90.0F) * (float)Math.PI / 180.0F;
-					this.moveStrafing = -MathHelper.sin(var15) * this.moveForward * 1.0F;
-					this.moveForward = MathHelper.cos(var15) * this.moveForward * 1.0F;
+					double d16 = this.entityToAttack.posX - this.posX;
+					double d18 = this.entityToAttack.posZ - this.posZ;
+					float f20 = this.rotationYaw;
+					this.rotationYaw = (float)(Math.atan2(d18, d16) * 180.0D / (double)(float)Math.PI) - 90.0F;
+					f15 = (f20 - this.rotationYaw + 90.0F) * (float)Math.PI / 180.0F;
+					this.moveStrafing = -MathHelper.sin(f15) * this.moveForward * 1.0F;
+					this.moveForward = MathHelper.cos(f15) * this.moveForward * 1.0F;
 				}
 
-				if(var12 > 0.0D) {
+				if(d12 > 0.0D) {
 					this.isJumping = true;
 				}
 			}
@@ -121,20 +121,20 @@
 				this.isJumping = true;
 			}
 
-			if(this.rand.nextFloat() < 0.8F && (var23 || var24)) {
+			if(this.rand.nextFloat() < 0.8F && (z23 || z24)) {
 				this.isJumping = true;
 			}
-
 		} else {
 			super.updateEntityActionState();
 			this.pathToEntity = null;
 		}
-	}
-
-	protected void attackEntity(Entity var1, float var2) {
-	}
-
-	protected float getBlockPathWeight(int var1, int var2, int var3) {
+
+	}
+
+	protected void attackEntity(Entity entity, float damage) {
+	}
+
+	protected float getBlockPathWeight(int x, int y, int z) {
 		return 0.0F;
 	}
 
@@ -143,9 +143,9 @@
 	}
 
 	public boolean getCanSpawnHere() {
-		int var1 = MathHelper.floor_double(this.posX);
-		int var2 = MathHelper.floor_double(this.boundingBox.minY);
-		int var3 = MathHelper.floor_double(this.posZ);
-		return super.getCanSpawnHere() && this.getBlockPathWeight(var1, var2, var3) >= 0.0F;
+		int i1 = MathHelper.floor_double(this.posX);
+		int i2 = MathHelper.floor_double(this.boundingBox.minY);
+		int i3 = MathHelper.floor_double(this.posZ);
+		return super.getCanSpawnHere() && this.getBlockPathWeight(i1, i2, i3) >= 0.0F;
 	}
 }
--- /dev/null
+++ net/minecraft/src/EntityFirable.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class EntityFirable extends Entity {
+	public float arrowShake;
+
+	public EntityFirable(World world) {
+		super(world);
+	}
+
+	protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+	}
+
+	protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+	}
+}
--- /dev/null
+++ net/minecraft/src/Biome.java
@@ -1,0 +1,76 @@
+package net.minecraft.src;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.WeakHashMap;
+import java.util.Map.Entry;
+
+public class Biome {
+	private static final WeakHashMap field_7196_3TP37UB4P23Sfk54xe174Y22EVYQrR44o8QR4c422UpKu86qv9dAZ4hv03qG = new WeakHashMap();
+	private final BiomeInterface field_7197_3wqiDB0Br9mxtXo6hsFCIa33m3jtY6MWy12bt3ipyFSP4RGR811UEqMVPmn6;
+
+	private Biome(BiomeInterface dw) {
+		this.field_7197_3wqiDB0Br9mxtXo6hsFCIa33m3jtY6MWy12bt3ipyFSP4RGR811UEqMVPmn6 = dw;
+	}
+
+	public static Biome func_7194_6eoIT0F2pQe4A56YL8B07HvC6yMDml8s5Hvu214208q3eG0ibKdP3ab4Jwrt(BiomeInterface dw) {
+		Biome biome1 = (Biome)field_7196_3TP37UB4P23Sfk54xe174Y22EVYQrR44o8QR4c422UpKu86qv9dAZ4hv03qG.get(dw);
+		if(biome1 == null) {
+			biome1 = new Biome(dw);
+			field_7196_3TP37UB4P23Sfk54xe174Y22EVYQrR44o8QR4c422UpKu86qv9dAZ4hv03qG.put(biome1.field_7197_3wqiDB0Br9mxtXo6hsFCIa33m3jtY6MWy12bt3ipyFSP4RGR811UEqMVPmn6, biome1);
+		}
+
+		return biome1;
+	}
+
+	public WorldGenMyconUnknownClass func_7195_86G7qeg6J4gyyZLl06wPTw8w8PEzJ2S0jk6zSveM1R7dJHl056Vhge5m9Hew(int integer1, int integer2, EnumWorldGenerator _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE) {
+		HashMap hashMap4 = new HashMap(16);
+
+		int i5;
+		for(i5 = 0; i5 < 16; ++i5) {
+			for(int i6 = 0; i6 < 16; ++i6) {
+				WorldGenMyconUnknownClass worldGenMyconUnknownClass7 = this.field_7197_3wqiDB0Br9mxtXo6hsFCIa33m3jtY6MWy12bt3ipyFSP4RGR811UEqMVPmn6.func_7869_3p0BQzmK4Mr6H1J26hjJ42W7ny9waN9zTOZAf655888Q468O9Gr48qka17hw(integer1 * 16 + i5, integer2 * 16 + i6, _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE);
+				Integer integer8 = (Integer)hashMap4.get(worldGenMyconUnknownClass7);
+				if(integer8 == null) {
+					integer8 = 1;
+				} else {
+					integer8 = integer8.intValue() + 1;
+				}
+
+				hashMap4.put(worldGenMyconUnknownClass7, integer8);
+			}
+		}
+
+		i5 = 0;
+		WorldGenMyconUnknownClass worldGenMyconUnknownClass10 = null;
+		Iterator iterator11 = hashMap4.entrySet().iterator();
+
+		Entry map$Entry12;
+		while(iterator11.hasNext()) {
+			map$Entry12 = (Entry)iterator11.next();
+			if(((Integer)map$Entry12.getValue()).intValue() > i5) {
+				i5 = ((Integer)map$Entry12.getValue()).intValue();
+				worldGenMyconUnknownClass10 = (WorldGenMyconUnknownClass)map$Entry12.getKey();
+			}
+		}
+
+		if(worldGenMyconUnknownClass10 == null) {
+			System.err.println("!BIOME GENERATOR BUG (please report on bug tracker)!");
+			System.err.println("biome list:");
+			iterator11 = hashMap4.entrySet().iterator();
+
+			while(iterator11.hasNext()) {
+				map$Entry12 = (Entry)iterator11.next();
+				if(map$Entry12.getKey() == null) {
+					System.out.println("null biome");
+				} else {
+					System.err.println(map$Entry12.getKey() + "/" + map$Entry12.getValue());
+				}
+			}
+
+			throw new IllegalArgumentException();
+		} else {
+			return worldGenMyconUnknownClass10;
+		}
+	}
+}
--- net/minecraft/src/Packet10Flying.java
+++ net/minecraft/src/Packet10Flying.java
@@ -15,16 +15,16 @@
 	public boolean moving;
 	public boolean rotating;
 
-	public void processPacket(NetHandler var1) {
-		var1.handleFlying(this);
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.onGround = var1.read() != 0;
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.write(this.onGround ? 1 : 0);
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleFlying(this);
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.onGround = dataInputStream.read() != 0;
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.write(this.onGround ? 1 : 0);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/ExtItems.java
@@ -1,0 +1,140 @@
+package net.minecraft.src;
+
+public class ExtItems {
+	public static Item obsidianArmor0;
+	public static Item obsidianArmor1;
+	public static Item obsidianArmor2;
+	public static Item obsidianArmor3;
+	public static Item obsidianSword;
+	public static Item obsidianShovel;
+	public static Item obsidianPick;
+	public static Item obsidianAxe;
+	public static Item obsidianHoe;
+	public static Item obsidianIngot;
+	public static Item blackDye;
+	public static Item greenDye;
+	public static Item blueDye;
+	public static Item pinkDye;
+	public static Item fryshroom;
+	public static Item edibleFire;
+	public static Item flameberge;
+	public static Item BlackGlasses0;
+	public static Item fireWoodDoor;
+	public static Item essence;
+	public static Item eraser;
+	public static Item essenceGun;
+	public static Item HubDoor;
+	public static Item Spear;
+	public static Item field_8478_0AzF504MF3jXI61pV3rzl3HlZOghL42RenDf5wfj9LYLDkf8oLa3Fvg7vwC2;
+	public static Item DownbeatUplink;
+	public static Item Sandcastles;
+	public static Item K2;
+	public static Item Pear;
+	public static Item ObsidianPear;
+	public static Item RokkubitoruTune;
+	public static Item desambrier;
+	public static Item Juhry;
+	public static Item GranularSalt;
+	public static Item HighwoodDoor;
+	public static Item MyconDoor;
+	public static Item StylishVisor;
+	public static Item StylishChestplate;
+	public static Item StylishShorts;
+	public static Item StylishShoes;
+	public static Item BismuthIngot;
+	public static Item MyconStrand;
+	public static Item MyconSword;
+	public static Item MyconAxe;
+	public static Item MyconPickaxe;
+	public static Item MyconShovel;
+	public static Item MyconHoe;
+	public static Item GrayGun;
+	public static Item TeaLeaf;
+	public static Item TeaBucket;
+	public static Item TeaDoor;
+	public static Item LaceAgate;
+	public static Item Clinohumite;
+	public static Item Malachite;
+	public static Item Pyrite;
+	public static Item HoursLongPastI;
+	public static Item HearthenMirror;
+	public static Item RainConch;
+	public static Item FrigidBits;
+	public static Item HoursLongPastII;
+	public static Item HoursLongPastIII;
+	public static Item HoursLongPastVI;
+	public static Item TheOneTrueBook;
+	public static Item CandyIce;
+	public static Item IceDoor;
+	public static Item GyldanSverd;
+	public static Item ObserverFur;
+
+	public static void Register() {
+		obsidianArmor0 = (new ItemArmor(90, 4, 5, 0)).setIconIndex(144).setEssValue(128).setName("Obsidian Helm");
+		obsidianArmor1 = (new ItemArmor(91, 4, 5, 1)).setIconIndex(160).setEssValue(128).setName("Obsidian Chestplate");
+		obsidianArmor2 = (new ItemArmor(92, 4, 5, 2)).setIconIndex(176).setEssValue(128).setName("Obsidian Leggings");
+		obsidianArmor3 = (new ItemArmor(93, 4, 5, 3)).setIconIndex(192).setEssValue(128).setName("Obsidian Boots");
+		obsidianSword = (new ItemSword(94, 5)).setIconIndex(145).setName("Obsidian Sword").setEssValue(128);
+		obsidianShovel = (new ItemSpade(95, 5)).setIconIndex(161).setName("Obsidian Shovel").setEssValue(128);
+		obsidianPick = (new ItemObsidianPick(96, 5)).setIconIndex(177).setName("Obsidian Pickaxe").setEssValue(128);
+		obsidianAxe = (new ItemAxe(97, 5)).setIconIndex(193).setName("Obsidian Axe").setEssValue(128);
+		obsidianHoe = (new ItemHoe(98, 5)).setIconIndex(209).setName("Obsidian Hoe").setEssValue(98);
+		obsidianIngot = (new Item(99)).setIconIndex(208).setEssValue(98).setName("Obsidian Ingot");
+		blackDye = (new Item(100)).setIconIndex(146).setName("Dye (Black)").setEssValue(8);
+		greenDye = (new Item(101)).setIconIndex(147).setName("Dye (Green)").setEssValue(8);
+		blueDye = (new Item(102)).setIconIndex(148).setName("Dye (Blue)").setEssValue(8);
+		pinkDye = (new Item(103)).setIconIndex(149).setName("Dye (Pink)").setEssValue(8);
+		fryshroom = (new ItemFood(104, 6)).setIconIndex(162).setName("Fryshroom").setEssValue(16);
+		edibleFire = (new ItemFood(105, 2)).setIconIndex(178).setName("Liquified Flame").setEssValue(1);
+		flameberge = (new ItemSwordFlameberge(106)).setIconIndex(69).setName("Flameberge").setEssValue(64);
+		BlackGlasses0 = (new ItemArmor(107, 1, 6, 0)).setIconIndex(210).setName("Sunglasses").setEssValue(32);
+		fireWoodDoor = (new ItemDoor(108, Material.wood, (BlockDoor)ExtBlocks.BlockFlameWoodDoor)).setIconIndex(179).setName("Firewood Door").setEssValue(8);
+		essence = (new Item(109)).setIconIndex(195).setName("Essence").setEssValue(1);
+		eraser = (new ItemEraser(110, Integer.MAX_VALUE)).setIconIndex(194).setName("Eraser").setEssValue(1);
+		essenceGun = (new ItemEssenceGun(111)).setIconIndex(180).setEssValue(22).setFull3D().setName("Essence Rifle");
+		HubDoor = (new ItemDoor(112, Material.iron, (BlockDoor)ExtBlocks.BlockHubDoor)).setIconIndex(44).setName("Hub Door");
+		Spear = (new ItemSpear(113)).setIconIndex(85).setEssValue(22).setFull3D().setName("Spear").setEssValue(14);
+		DownbeatUplink = (new ItemRecord(2003, "downbeat_uplink")).setIconIndex(242).setEssValue(128).setName("Record (Downbeat Uplink)");
+		Sandcastles = (new ItemRecord(2004, "sandcastles")).setIconIndex(246).setEssValue(128).setName("Record (Sandcastles)");
+		K2 = (new ItemRecord(2005, "K2")).setIconIndex(247).setEssValue(128).setName("Record (K2)");
+		Pear = (new ItemFood(114, 4)).setIconIndex(248).setName("Pear").setEssValue(2);
+		ObsidianPear = (new ItemFood(115, 42)).setIconIndex(249).setName("Obsidian Pear").setEssValue(77);
+		RokkubitoruTune = (new ItemRokkubitoruTune(2006, "RokkubitoruTune")).setIconIndex(212).setEssValue(8).setName("Rokkubitoru");
+		desambrier = (new ItemRecord(2007, "desambrier")).setIconIndex(250).setEssValue(128).setName("Record (Desambrier)");
+		Juhry = (new ItemRecord(2008, "Juhry")).setIconIndex(251).setEssValue(128).setName("Record (Juhry)");
+		GyldanSverd = (new ItemRecord(2009, "GyldanSverd")).setIconIndex(243).setEssValue(128).setName("Record (Gyldan Sverd)");
+		HighwoodDoor = (new ItemDoor(116, Material.wood, (BlockDoor)ExtBlocks.HighwoodDoor)).setIconIndex(253).setName("Highwood Door").setEssValue(8);
+		MyconDoor = (new ItemDoor(117, Material.wood, (BlockDoor)ExtBlocks.MyconDoor)).setIconIndex(252).setName("Mycon Door").setEssValue(8);
+		StylishVisor = (new ItemArmor(118, 1, 7, 0)).setIconIndex(150).setEssValue(16).setName("Stylish Visor");
+		StylishChestplate = (new ItemArmor(119, 1, 7, 1)).setIconIndex(166).setEssValue(16).setName("Stylish Chestplate");
+		StylishShorts = (new ItemArmor(120, 1, 7, 2)).setIconIndex(182).setEssValue(16).setName("Stylish Shorts");
+		StylishShoes = (new ItemArmor(121, 1, 7, 3)).setIconIndex(198).setEssValue(16).setName("Stylish Shoes");
+		BismuthIngot = (new Item(122)).setIconIndex(254).setName("Bismuth Ingot").setEssValue(36);
+		MyconStrand = (new Item(123)).setIconIndex(255).setName("Mycon Strand").setEssValue(8);
+		MyconSword = (new ItemSword(124, 0)).setIconIndex(231).setName("Mycon Sword").setEssValue(16);
+		MyconShovel = (new ItemSpade(125, 0)).setIconIndex(232).setName("Mycon Shovel").setEssValue(16);
+		MyconPickaxe = (new ItemPickaxe(126, 0)).setIconIndex(233).setName("Mycon Pickaxe").setEssValue(16);
+		MyconAxe = (new ItemAxe(127, 0)).setIconIndex(234).setName("Mycon Axe").setEssValue(16);
+		MyconHoe = (new ItemHoe(128, 0)).setIconIndex(235).setName("Mycon Hoe").setEssValue(8);
+		GranularSalt = (new Item(129)).setIconIndex(211).setName("Granular Salt").setEssValue(8);
+		GrayGun = (new ItemGrayGun(130)).setIconIndex(238).setEssValue(128).setFull3D().setName("Gray Gun");
+		TeaLeaf = (new ItemFood(131, 1)).setIconIndex(79).setName("Tea Leaf").setEssValue(8);
+		TeaBucket = (new ItemFood(132, 21)).setIconIndex(78).setName("Tea Bucket").setEssValue(32);
+		TeaDoor = (new ItemDoor(133, Material.wood, (BlockDoor)ExtBlocks.TeaDoor)).setIconIndex(86).setName("Tea Door").setEssValue(16);
+		LaceAgate = (new Item(134)).setIconIndex(29).setEssValue(519).setName("Lace Agate");
+		Clinohumite = (new Item(135)).setIconIndex(13).setEssValue(815).setName("Clinohumite");
+		Malachite = (new Item(136)).setIconIndex(45).setEssValue(639).setName("Malachite");
+		Pyrite = (new Item(137)).setIconIndex(61).setEssValue(372).setName("Pyrite");
+		HoursLongPastI = (new ItemHoursLongPastI(138)).setIconIndex(224).setEssValue(64).setName("Hours Long Past I");
+		HoursLongPastII = (new ItemHoursLongPastII(144)).setIconIndex(225).setEssValue(64).setName("Hours Long Past II");
+		HoursLongPastIII = (new ItemHoursLongPastIII(145)).setIconIndex(226).setEssValue(64).setName("Hours Long Past III");
+		HoursLongPastVI = (new ItemHoursLongPastVI(146)).setIconIndex(227).setEssValue(64).setName("Hours Long Past IV");
+		TheOneTrueBook = (new ItemTheOneTrueBook(147)).setIconIndex(228).setEssValue(64).setName("The One True Book");
+		HearthenMirror = (new ItemHearthenMirror(139)).setIconIndex(89).setEssValue(128).setName("Hearthen Mirror");
+		RainConch = (new ItemRainConch(140)).setIconIndex(73).setEssValue(12).setName("Rain Conch");
+		FrigidBits = (new Item(141)).setIconIndex(105).setEssValue(7).setName("Frigid Bits");
+		CandyIce = (new ItemFood(142, 10)).setIconIndex(90).setName("Candy Ice").setEssValue(17);
+		IceDoor = (new ItemDoor(143, Material.ice, (BlockDoor)ExtBlocks.IceDoor)).setIconIndex(91).setName("Ice Door").setEssValue(8);
+		ObserverFur = (new Item(148)).setIconIndex(119).setEssValue(17).setName("Observer Fur");
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockEssenceTransformer.java
@@ -1,0 +1,12 @@
+package net.minecraft.src;
+
+public class BlockEssenceTransformer extends BlockMultiSided {
+	public BlockEssenceTransformer(int integer1, int integer2, int integer3, int integer4) {
+		super(integer1, integer2, integer3, integer4);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		entityPlayer.displayEssenceTransformerGUI();
+		return true;
+	}
+}
--- net/minecraft/src/BlockTorch.java
+++ net/minecraft/src/BlockTorch.java
@@ -3,12 +3,12 @@
 import java.util.Random;
 
 public class BlockTorch extends Block {
-	protected BlockTorch(int var1, int var2) {
-		super(var1, var2, Material.circuits);
+	protected BlockTorch(int id, int blockIndex) {
+		super(id, blockIndex, Material.circuits);
 		this.setTickOnLoad(true);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -20,117 +20,117 @@
 		return 2;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2 - 1, var3, var4) ? true : (var1.isBlockNormalCube(var2 + 1, var3, var4) ? true : (var1.isBlockNormalCube(var2, var3, var4 - 1) ? true : (var1.isBlockNormalCube(var2, var3, var4 + 1) ? true : var1.isBlockNormalCube(var2, var3 - 1, var4))));
-	}
-
-	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if(var5 == 1 && var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var6 = 5;
-		}
-
-		if(var5 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var6 = 4;
-		}
-
-		if(var5 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var6 = 3;
-		}
-
-		if(var5 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var6 = 2;
-		}
-
-		if(var5 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var6 = 1;
-		}
-
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		super.updateTick(var1, var2, var3, var4, var5);
-		if(var1.getBlockMetadata(var2, var3, var4) == 0) {
-			this.onBlockAdded(var1, var2, var3, var4);
-		}
-
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-		} else if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 2);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 3);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 4);
-		} else if(var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 5);
-		}
-
-		this.checkIfAttachedToBlock(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(this.checkIfAttachedToBlock(var1, var2, var3, var4)) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			boolean var7 = false;
-			if(!var1.isBlockNormalCube(var2 - 1, var3, var4) && var6 == 1) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2 + 1, var3, var4) && var6 == 2) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 - 1) && var6 == 3) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 + 1) && var6 == 4) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && var6 == 5) {
-				var7 = true;
-			}
-
-			if(var7) {
-				this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-				var1.setBlockWithNotify(var2, var3, var4, 0);
-			}
-		}
-
-	}
-
-	private boolean checkIfAttachedToBlock(World var1, int var2, int var3, int var4) {
-		if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x - 1, y, z) ? true : (world.isBlockNormalCube(x + 1, y, z) ? true : (world.isBlockNormalCube(x, y, z - 1) ? true : (world.isBlockNormalCube(x, y, z + 1) ? true : world.isBlockNormalCube(x, y - 1, z))));
+	}
+
+	public void onBlockPlaced(World world, int x, int y, int z, int notifyFlag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if(notifyFlag == 1 && world.isBlockNormalCube(x, y - 1, z)) {
+			i6 = 5;
+		}
+
+		if(notifyFlag == 2 && world.isBlockNormalCube(x, y, z + 1)) {
+			i6 = 4;
+		}
+
+		if(notifyFlag == 3 && world.isBlockNormalCube(x, y, z - 1)) {
+			i6 = 3;
+		}
+
+		if(notifyFlag == 4 && world.isBlockNormalCube(x + 1, y, z)) {
+			i6 = 2;
+		}
+
+		if(notifyFlag == 5 && world.isBlockNormalCube(x - 1, y, z)) {
+			i6 = 1;
+		}
+
+		world.setBlockMetadataWithNotify(x, y, z, i6);
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		super.updateTick(world, x, y, z, random);
+		if(world.getBlockMetadata(x, y, z) == 0) {
+			this.onBlockAdded(world, x, y, z);
+		}
+
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		if(world.isBlockNormalCube(x - 1, y, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 1);
+		} else if(world.isBlockNormalCube(x + 1, y, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 2);
+		} else if(world.isBlockNormalCube(x, y, z - 1)) {
+			world.setBlockMetadataWithNotify(x, y, z, 3);
+		} else if(world.isBlockNormalCube(x, y, z + 1)) {
+			world.setBlockMetadataWithNotify(x, y, z, 4);
+		} else if(world.isBlockNormalCube(x, y - 1, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 5);
+		}
+
+		this.checkIfAttachedToBlock(world, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(this.checkIfAttachedToBlock(world, x, y, z)) {
+			int i6 = world.getBlockMetadata(x, y, z);
+			boolean z7 = false;
+			if(!world.isBlockNormalCube(x - 1, y, z) && i6 == 1) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x + 1, y, z) && i6 == 2) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z - 1) && i6 == 3) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z + 1) && i6 == 4) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y - 1, z) && i6 == 5) {
+				z7 = true;
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+				world.setBlockWithNotify(x, y, z, 0);
+			}
+		}
+
+	}
+
+	private boolean checkIfAttachedToBlock(World world, int x, int y, int z) {
+		if(!this.canPlaceBlockAt(world, x, y, z)) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
 			return false;
 		} else {
 			return true;
 		}
 	}
 
-	public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3D var5, Vec3D var6) {
-		int var7 = var1.getBlockMetadata(var2, var3, var4) & 7;
-		float var8 = 0.15F;
-		if(var7 == 1) {
-			this.setBlockBounds(0.0F, 0.2F, 0.5F - var8, var8 * 2.0F, 0.8F, 0.5F + var8);
-		} else if(var7 == 2) {
-			this.setBlockBounds(1.0F - var8 * 2.0F, 0.2F, 0.5F - var8, 1.0F, 0.8F, 0.5F + var8);
-		} else if(var7 == 3) {
-			this.setBlockBounds(0.5F - var8, 0.2F, 0.0F, 0.5F + var8, 0.8F, var8 * 2.0F);
-		} else if(var7 == 4) {
-			this.setBlockBounds(0.5F - var8, 0.2F, 1.0F - var8 * 2.0F, 0.5F + var8, 0.8F, 1.0F);
+	public MovingObjectPosition collisionRayTrace(World world, int x, int y, int z, Vec3D vector1, Vec3D vector2) {
+		int i7 = world.getBlockMetadata(x, y, z) & 7;
+		float f8 = 0.15F;
+		if(i7 == 1) {
+			this.setBlockBounds(0.0F, 0.2F, 0.5F - f8, f8 * 2.0F, 0.8F, 0.5F + f8);
+		} else if(i7 == 2) {
+			this.setBlockBounds(1.0F - f8 * 2.0F, 0.2F, 0.5F - f8, 1.0F, 0.8F, 0.5F + f8);
+		} else if(i7 == 3) {
+			this.setBlockBounds(0.5F - f8, 0.2F, 0.0F, 0.5F + f8, 0.8F, f8 * 2.0F);
+		} else if(i7 == 4) {
+			this.setBlockBounds(0.5F - f8, 0.2F, 1.0F - f8 * 2.0F, 0.5F + f8, 0.8F, 1.0F);
 		} else {
-			var8 = 0.1F;
-			this.setBlockBounds(0.5F - var8, 0.0F, 0.5F - var8, 0.5F + var8, 0.6F, 0.5F + var8);
+			f8 = 0.1F;
+			this.setBlockBounds(0.5F - f8, 0.0F, 0.5F - f8, 0.5F + f8, 0.6F, 0.5F + f8);
 		}
 
-		return super.collisionRayTrace(var1, var2, var3, var4, var5, var6);
+		return super.collisionRayTrace(world, x, y, z, vector1, vector2);
 	}
 }
--- net/minecraft/src/BlockRedstoneOre.java
+++ net/minecraft/src/BlockRedstoneOre.java
@@ -5,91 +5,91 @@
 public class BlockRedstoneOre extends Block {
 	private boolean glowing;
 
-	public BlockRedstoneOre(int var1, int var2, boolean var3) {
-		super(var1, var2, Material.rock);
-		if(var3) {
+	public BlockRedstoneOre(int id, int blockIndex, boolean glowing) {
+		super(id, blockIndex, Material.rock);
+		if(glowing) {
 			this.setTickOnLoad(true);
 		}
 
-		this.glowing = var3;
+		this.glowing = glowing;
 	}
 
 	public int tickRate() {
 		return 30;
 	}
 
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.glow(var1, var2, var3, var4);
-		super.onBlockClicked(var1, var2, var3, var4, var5);
-	}
-
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-		this.glow(var1, var2, var3, var4);
-		super.onEntityWalking(var1, var2, var3, var4, var5);
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.glow(var1, var2, var3, var4);
-		return super.blockActivated(var1, var2, var3, var4, var5);
-	}
-
-	private void glow(World var1, int var2, int var3, int var4) {
-		this.sparkle(var1, var2, var3, var4);
+	public void onBlockClicked(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.glow(world, x, y, z);
+		super.onBlockClicked(world, x, y, z, entityPlayer);
+	}
+
+	public void onEntityWalking(World world, int x, int y, int z, Entity entity) {
+		this.glow(world, x, y, z);
+		super.onEntityWalking(world, x, y, z, entity);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.glow(world, x, y, z);
+		return super.blockActivated(world, x, y, z, entityPlayer);
+	}
+
+	private void glow(World world, int x, int y, int z) {
+		this.sparkle(world, x, y, z);
 		if(this.blockID == Block.oreRedstone.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.oreRedstoneGlowing.blockID);
+			world.setBlockWithNotify(x, y, z, Block.oreRedstoneGlowing.blockID);
 		}
 
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
+	public void updateTick(World world, int x, int y, int z, Random random) {
 		if(this.blockID == Block.oreRedstoneGlowing.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.oreRedstone.blockID);
+			world.setBlockWithNotify(x, y, z, Block.oreRedstone.blockID);
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Item.redstone.shiftedIndex;
 	}
 
-	public int quantityDropped(Random var1) {
-		return 4 + var1.nextInt(2);
+	public int quantityDropped(Random random) {
+		return 4 + random.nextInt(2);
 	}
 
-	private void sparkle(World var1, int var2, int var3, int var4) {
-		Random var5 = var1.rand;
-		double var6 = 1.0D / 16.0D;
-
-		for(int var8 = 0; var8 < 6; ++var8) {
-			double var9 = (double)((float)var2 + var5.nextFloat());
-			double var11 = (double)((float)var3 + var5.nextFloat());
-			double var13 = (double)((float)var4 + var5.nextFloat());
-			if(var8 == 0 && !var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-				var11 = (double)(var3 + 1) + var6;
-			}
-
-			if(var8 == 1 && !var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-				var11 = (double)(var3 + 0) - var6;
-			}
-
-			if(var8 == 2 && !var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-				var13 = (double)(var4 + 1) + var6;
-			}
-
-			if(var8 == 3 && !var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-				var13 = (double)(var4 + 0) - var6;
-			}
-
-			if(var8 == 4 && !var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-				var9 = (double)(var2 + 1) + var6;
-			}
-
-			if(var8 == 5 && !var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-				var9 = (double)(var2 + 0) - var6;
-			}
-
-			if(var9 < (double)var2 || var9 > (double)(var2 + 1) || var11 < 0.0D || var11 > (double)(var3 + 1) || var13 < (double)var4 || var13 > (double)(var4 + 1)) {
-				var1.spawnParticle("reddust", var9, var11, var13, 0.0D, 0.0D, 0.0D);
+	private void sparkle(World world, int x, int y, int z) {
+		Random random5 = world.rand;
+		double d6 = 0.0625D;
+
+		for(int i8 = 0; i8 < 6; ++i8) {
+			double d9 = (double)((float)x + random5.nextFloat());
+			double d11 = (double)((float)y + random5.nextFloat());
+			double d13 = (double)((float)z + random5.nextFloat());
+			if(i8 == 0 && !world.isBlockNormalCube(x, y + 1, z)) {
+				d11 = (double)(y + 1) + d6;
+			}
+
+			if(i8 == 1 && !world.isBlockNormalCube(x, y - 1, z)) {
+				d11 = (double)(y + 0) - d6;
+			}
+
+			if(i8 == 2 && !world.isBlockNormalCube(x, y, z + 1)) {
+				d13 = (double)(z + 1) + d6;
+			}
+
+			if(i8 == 3 && !world.isBlockNormalCube(x, y, z - 1)) {
+				d13 = (double)(z + 0) - d6;
+			}
+
+			if(i8 == 4 && !world.isBlockNormalCube(x + 1, y, z)) {
+				d9 = (double)(x + 1) + d6;
+			}
+
+			if(i8 == 5 && !world.isBlockNormalCube(x - 1, y, z)) {
+				d9 = (double)(x + 0) - d6;
+			}
+
+			if(d9 < (double)x || d9 > (double)(x + 1) || d11 < 0.0D || d11 > (double)(y + 1) || d13 < (double)z || d13 > (double)(z + 1)) {
+				world.spawnParticle("reddust", d9, d11, d13, 0.0D, 0.0D, 0.0D);
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/BiomeInterface.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+public interface BiomeInterface {
+	double func_7868_3g5835mGclzJIUDU5ZIWPtb1qUR2uFgUHLXK977f463W9MS7Iu5T5QHfh5EH(int i1, int i2, EnumWorldGenerator enumWorldGenerator3);
+
+	double func_7867_0Sa7i8e9X8bsz8C7O3N9m408fK504rj6Qa96Vx186O3yrGFTvF7EiwNd1HjI(int i1, int i2, EnumWorldGenerator enumWorldGenerator3);
+
+	WorldGenMyconUnknownClass func_7869_3p0BQzmK4Mr6H1J26hjJ42W7ny9waN9zTOZAf655888Q468O9Gr48qka17hw(int i1, int i2, EnumWorldGenerator enumWorldGenerator3);
+}
--- /dev/null
+++ net/minecraft/src/WorldGenSmoothStone.java
@@ -1,0 +1,89 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenSmoothStone extends WorldGenerator {
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		byte b6 = 3;
+		int i7 = rand.nextInt(2) + 2;
+		int i8 = rand.nextInt(2) + 2;
+		int i9 = 0;
+
+		int i10;
+		int i11;
+		int i12;
+		for(i10 = x - i7 - 1; i10 <= x + i7 + 1; ++i10) {
+			for(i11 = y - 1; i11 <= y + b6 + 1; ++i11) {
+				for(i12 = z - i8 - 1; i12 <= z + i8 + 1; ++i12) {
+					world.getBlockMaterial(i10, i11, i12);
+					if((i10 == x - i7 - 1 || i10 == x + i7 + 1 || i12 == z - i8 - 1 || i12 == z + i8 + 1) && i11 == y && world.getBlockId(i10, i11, i12) == Block.waterStill.blockID || world.getBlockId(i10, i11, i12) == Block.waterMoving.blockID && world.getBlockId(i10, i11 + 1, i12) == Block.waterStill.blockID || world.getBlockId(i10, i11 + 1, i12) == Block.waterMoving.blockID) {
+						++i9;
+					}
+				}
+			}
+		}
+
+		if(i9 >= 1 && i9 <= 30 && rand.nextBoolean()) {
+			for(i10 = x - i7 - 1; i10 <= x + i7 + 1; ++i10) {
+				for(i11 = y + b6; i11 >= y - 1; --i11) {
+					for(i12 = z - i8 - 1; i12 <= z + i8 + 1; ++i12) {
+						if(i10 != x - i7 - 1 && i11 != y - 1 && i12 != z - i8 - 1 && i10 != x + i7 + 1 && i11 != y + b6 + 1 && i12 != z + i8 + 1) {
+							world.setBlockWithNotify(i10, i11, i12, Block.waterStill.blockID);
+						} else if(i11 >= 0 && world.getBlockMaterial(i10, i11 - 1, i12).isSolid()) {
+							world.setBlockWithNotify(i10, i11, i12, 1);
+						} else if(!world.getBlockMaterial(i10, i11, i12).isSolid() && (i11 == y - 1 || rand.nextInt(12) == 1)) {
+							if(i11 == y - 1 && rand.nextInt(8) != 0) {
+								world.setBlockWithNotify(i10, i11, i12, ExtBlocks.SmoothStone.blockID);
+							} else {
+								world.setBlockWithNotify(i10, i11, i12, i11 == y - 1 ? 135 : Block.stone.blockID);
+							}
+						}
+					}
+				}
+			}
+
+			for(i10 = 0; i10 < 2; ++i10) {
+				for(i11 = 0; i11 < 2; ++i11) {
+					i12 = x + rand.nextInt(i7 * 2 + 1) - i7;
+					int i13 = z + rand.nextInt(i8 * 2 + 1) - i8;
+					int i14 = 0;
+					if(world.getBlockMaterial(i12 - 1, y, i13).isSolid()) {
+						++i14;
+					}
+
+					if(world.getBlockMaterial(i12 + 1, y, i13).isSolid()) {
+						++i14;
+					}
+
+					if(world.getBlockMaterial(i12, y, i13 - 1).isSolid()) {
+						++i14;
+					}
+
+					if(world.getBlockMaterial(i12, y, i13 + 1).isSolid()) {
+						++i14;
+					}
+
+					if(i14 != 1) {
+						world.setBlockWithNotify(i12, y, i13, Block.chest.blockID);
+						TileEntityChest tileEntityChest15 = (TileEntityChest)world.getBlockTileEntity(i12, y, i13);
+						boolean z16 = false;
+					}
+				}
+			}
+
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	private ItemStack func_7555_666K3fmcdozTi3HEw52n7Il82PQU1Ofccllyr5JNpswC2f6h45V21Fpx2S72(Random random) {
+		int i2 = random.nextInt(11);
+		return i2 == 0 ? new ItemStack(Item.saddle) : (i2 == 1 ? new ItemStack(Item.ingotGold, random.nextInt(4) + 1) : (i2 == 2 ? new ItemStack(ExtItems.Pear) : (i2 == 3 ? new ItemStack(ExtItems.TeaLeaf, random.nextInt(4) + 1) : (i2 == 4 ? new ItemStack(Item.gunpowder, random.nextInt(4) + 1) : (i2 == 5 ? new ItemStack(Item.paper, random.nextInt(4) + 1) : (i2 == 6 ? new ItemStack(Item.bucketEmpty) : (i2 == 7 && random.nextInt(100) == 0 ? new ItemStack(ExtItems.ObsidianPear) : (i2 == 8 && random.nextInt(2) == 0 ? new ItemStack(Item.redstone, random.nextInt(4) + 1) : (i2 == 9 && random.nextInt(10) == 0 ? new ItemStack(ExtItems.Sandcastles) : null)))))))));
+	}
+
+	private String func_7556_3GB0kG32FGbFG0jkg4a0E7SBZ74dM4Vlis90Fti1P75TRj9k592wW9060039(Random random) {
+		int i2 = random.nextInt(4);
+		return i2 == 0 ? "Spider" : (i2 == 1 ? "Slime" : (i2 == 2 ? "Slime" : (i2 == 3 ? "Spider" : "")));
+	}
+}
--- net/minecraft/src/GuiLogFormatter.java
+++ net/minecraft/src/GuiLogFormatter.java
@@ -9,38 +9,38 @@
 class GuiLogFormatter extends Formatter {
 	final GuiLogOutputHandler handler;
 
-	GuiLogFormatter(GuiLogOutputHandler var1) {
-		this.handler = var1;
+	GuiLogFormatter(GuiLogOutputHandler handler) {
+		this.handler = handler;
 	}
 
-	public String format(LogRecord var1) {
-		StringBuilder var2 = new StringBuilder();
-		Level var3 = var1.getLevel();
-		if(var3 == Level.FINEST) {
-			var2.append("[FINEST] ");
-		} else if(var3 == Level.FINER) {
-			var2.append("[FINER] ");
-		} else if(var3 == Level.FINE) {
-			var2.append("[FINE] ");
-		} else if(var3 == Level.INFO) {
-			var2.append("[INFO] ");
-		} else if(var3 == Level.WARNING) {
-			var2.append("[WARNING] ");
-		} else if(var3 == Level.SEVERE) {
-			var2.append("[SEVERE] ");
-		} else if(var3 == Level.SEVERE) {
-			var2.append("[" + var3.getLocalizedName() + "] ");
-		}
-
-		var2.append(var1.getMessage());
-		var2.append('\n');
-		Throwable var4 = var1.getThrown();
-		if(var4 != null) {
-			StringWriter var5 = new StringWriter();
-			var4.printStackTrace(new PrintWriter(var5));
-			var2.append(var5.toString());
-		}
-
-		return var2.toString();
+	public String format(LogRecord logRecord) {
+		StringBuilder stringBuilder2 = new StringBuilder();
+		Level level3 = logRecord.getLevel();
+		if(level3 == Level.FINEST) {
+			stringBuilder2.append("[FINEST] ");
+		} else if(level3 == Level.FINER) {
+			stringBuilder2.append("[FINER] ");
+		} else if(level3 == Level.FINE) {
+			stringBuilder2.append("[FINE] ");
+		} else if(level3 == Level.INFO) {
+			stringBuilder2.append("[INFO] ");
+		} else if(level3 == Level.WARNING) {
+			stringBuilder2.append("[WARNING] ");
+		} else if(level3 == Level.SEVERE) {
+			stringBuilder2.append("[SEVERE] ");
+		} else if(level3 == Level.SEVERE) {
+			stringBuilder2.append("[" + level3.getLocalizedName() + "] ");
+		}
+
+		stringBuilder2.append(logRecord.getMessage());
+		stringBuilder2.append('\n');
+		Throwable throwable4 = logRecord.getThrown();
+		if(throwable4 != null) {
+			StringWriter stringWriter5 = new StringWriter();
+			throwable4.printStackTrace(new PrintWriter(stringWriter5));
+			stringBuilder2.append(stringWriter5.toString());
+		}
+
+		return stringBuilder2.toString();
 	}
 }
--- net/minecraft/src/MathHelper.java
+++ net/minecraft/src/MathHelper.java
@@ -3,51 +3,51 @@
 public class MathHelper {
 	private static float[] SIN_TABLE = new float[65536];
 
-	public static final float sin(float var0) {
-		return SIN_TABLE[(int)(var0 * 10430.378F) & '\uffff'];
-	}
-
-	public static final float cos(float var0) {
-		return SIN_TABLE[(int)(var0 * 10430.378F + 16384.0F) & '\uffff'];
-	}
-
-	public static final float sqrt_float(float var0) {
-		return (float)Math.sqrt((double)var0);
-	}
-
-	public static final float sqrt_double(double var0) {
-		return (float)Math.sqrt(var0);
-	}
-
-	public static int floor_float(float var0) {
-		int var1 = (int)var0;
-		return var0 < (float)var1 ? var1 - 1 : var1;
-	}
-
-	public static int floor_double(double var0) {
-		int var2 = (int)var0;
-		return var0 < (double)var2 ? var2 - 1 : var2;
-	}
-
-	public static float abs(float var0) {
-		return var0 >= 0.0F ? var0 : -var0;
-	}
-
-	public static double abs_max(double var0, double var2) {
-		if(var0 < 0.0D) {
-			var0 = -var0;
-		}
-
-		if(var2 < 0.0D) {
-			var2 = -var2;
-		}
-
-		return var0 > var2 ? var0 : var2;
+	public static final float sin(float floatValue) {
+		return SIN_TABLE[(int)(floatValue * 10430.378F) & 65535];
+	}
+
+	public static final float cos(float floatValue) {
+		return SIN_TABLE[(int)(floatValue * 10430.378F + 16384.0F) & 65535];
+	}
+
+	public static final float sqrt_float(float floatValue) {
+		return (float)Math.sqrt((double)floatValue);
+	}
+
+	public static final float sqrt_double(double doubleValue) {
+		return (float)Math.sqrt(doubleValue);
+	}
+
+	public static int floor_float(float floatValue) {
+		int i1 = (int)floatValue;
+		return floatValue < (float)i1 ? i1 - 1 : i1;
+	}
+
+	public static int floor_double(double doubleValue) {
+		int i2 = (int)doubleValue;
+		return doubleValue < (double)i2 ? i2 - 1 : i2;
+	}
+
+	public static float abs(float floatValue) {
+		return floatValue >= 0.0F ? floatValue : -floatValue;
+	}
+
+	public static double abs_max(double doubleValue1, double doubleValue2) {
+		if(doubleValue1 < 0.0D) {
+			doubleValue1 = -doubleValue1;
+		}
+
+		if(doubleValue2 < 0.0D) {
+			doubleValue2 = -doubleValue2;
+		}
+
+		return doubleValue1 > doubleValue2 ? doubleValue1 : doubleValue2;
 	}
 
 	static {
-		for(int var0 = 0; var0 < 65536; ++var0) {
-			SIN_TABLE[var0] = (float)Math.sin((double)var0 * Math.PI * 2.0D / 65536.0D);
+		for(int i0 = 0; i0 < 65536; ++i0) {
+			SIN_TABLE[i0] = (float)Math.sin((double)i0 * Math.PI * 2.0D / 65536.0D);
 		}
 
 	}
--- net/minecraft/src/EntityAnimal.java
+++ net/minecraft/src/EntityAnimal.java
@@ -1,27 +1,27 @@
 package net.minecraft.src;
 
 public abstract class EntityAnimal extends EntityCreature implements IAnimals {
-	public EntityAnimal(World var1) {
-		super(var1);
-	}
-
-	protected float getBlockPathWeight(int var1, int var2, int var3) {
-		return this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.grass.blockID ? 10.0F : this.worldObj.getBrightness(var1, var2, var3) - 0.5F;
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	public EntityAnimal(World world) {
+		super(world);
+	}
+
+	protected float getBlockPathWeight(int x, int y, int z) {
+		return this.worldObj.getBlockId(x, y - 1, z) == Block.grass.blockID ? 10.0F : this.worldObj.getBrightness(x, y, z) - 0.5F;
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
 	}
 
 	public boolean getCanSpawnHere() {
-		int var1 = MathHelper.floor_double(this.posX);
-		int var2 = MathHelper.floor_double(this.boundingBox.minY);
-		int var3 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.grass.blockID && this.worldObj.getBlockLightValue(var1, var2, var3) > 8 && super.getCanSpawnHere();
+		int i1 = MathHelper.floor_double(this.posX);
+		int i2 = MathHelper.floor_double(this.boundingBox.minY);
+		int i3 = MathHelper.floor_double(this.posZ);
+		return this.worldObj.getBlockId(i1, i2 - 1, i3) == Block.grass.blockID && this.worldObj.getBlockLightValue(i1, i2, i3) > 8 && super.getCanSpawnHere();
 	}
 
 	public int getTalkInterval() {
--- /dev/null
+++ net/minecraft/src/ExtBlocks.java
@@ -1,0 +1,337 @@
+package net.minecraft.src;
+
+public class ExtBlocks {
+	public static Block QuadWindowGlassBlock;
+	public static Block PillarBlock;
+	public static Block TileBlock;
+	public static Block TileBlock2;
+	public static Block TileBlock2NonFucked;
+	public static Block dimensionFloorBlock;
+	public static Block dimensionWallBlock;
+	public static Block dbgBlock;
+	public static Block TileBlock3;
+	public static Block TileBlock4;
+	public static Block fakeGrass;
+	public static Block AltMojangHypostasisAnemo;
+	public static Block AltMojangHypostasisAnemo2;
+	public static Block AltMojangHypostasisAnemo3;
+	public static Block BarrierBlock;
+	public static Block StairLadderBlock;
+	public static Block fakeDirt;
+	public static Block FakeRock;
+	public static Block fakeSand;
+	public static Block woolPink;
+	public static Block woolBlue;
+	public static Block field_8235_937g6Pe0NvgxnLzmNpwE8dPJokm5rH5Ry492v41GYS5cjxcJB5LKEGe575t0;
+	public static Block field_8299_92Y6C1ih0mrymIC05xh8KP0mQ5zK9GhxHeO80XyRgAjk8c9Q8X00b5TRcqQM;
+	public static Block glowingFlower;
+	public static Block glowingFlowerInfBasic;
+	public static Block glowingFlowerInfGold;
+	public static Block glowingFlowerInfObsidian;
+	public static Block blueFireIdk;
+	public static Block safe;
+	public static Block woolGreen;
+	public static Block woolBlack;
+	public static Block dbg2Block;
+	public static Block saltBlock;
+	public static Block GlassMagenta;
+	public static Block GlassBlue;
+	public static Block GlassGreen;
+	public static Block GlassBlack;
+	public static Block QGlassMagenta;
+	public static Block QGlassBlue;
+	public static Block QGlassGreen;
+	public static Block QGlassBlack;
+	public static Block FireSkyWood;
+	public static Block FireSkyPlanks;
+	public static Block FireSkyLeaves;
+	public static Block LowGlowingFlower;
+	public static Block LowGlowingVine;
+	public static Block LowRiverbed;
+	public static Block LowGlowingBlock;
+	public static Block LowStone;
+	public static Block LowOreGold;
+	public static Block LowOreIron;
+	public static Block LowOreCoal;
+	public static Block LowOreDiamond;
+	public static Block LowOreGreenstone;
+	public static Block LowOreGreenstoneGlowing;
+	public static Block BlockFlameWoodDoor;
+	public static Block Limestone;
+	public static Block LimeCobblestone;
+	public static Block TutFloorBlock;
+	public static Block TutWallBlock;
+	public static Block TutGlowingBlock;
+	public static Block EssenceBlock;
+	public static Block EssenceTransformer;
+	public static Block EssenceCloner;
+	public static Block woodDouble;
+	public static Block woodSingle;
+	public static Block Heater;
+	public static Block field_8240_5E4NKM067p94qeqC3h64uNOnnphIsCe05csZ685G0x5E1jS6382dgVh9t2a2;
+	public static Block essenceFountain;
+	public static Block SmoothStone;
+	public static Block SmoothLimestone;
+	public static Block CrudePillar;
+	public static Block BlockHubDoor;
+	public static Block AncientWood;
+	public static Block AncientLeaves;
+	public static Block AncientRoots;
+	public static Block AncientPlanks;
+	public static Block Grass;
+	public static Block ElderBrick;
+	public static Block ElderDecoratedStone;
+	public static Block ElderSmoothStone;
+	public static Block ElderPillar;
+	public static Block EmptyBookshelf;
+	public static Block Bookshelf;
+	public static Block WireframeBlock;
+	public static Block VendingMachineHealthBoostBottom;
+	public static Block VendingMachineHealthBoostTop;
+	public static Block VendingMachineArmorBottom;
+	public static Block VendingMachineArmorTop;
+	public static Block VendingMachineDashBottom;
+	public static Block VendingMachineDashTop;
+	public static Block VendingMachineQuickReviveBottom;
+	public static Block VendingMachineQuickReviveTop;
+	public static Block Lichen;
+	public static Block LichenBricks;
+	public static Block LichenMass;
+	public static Block GoldElderBrick;
+	public static Block SkyFlameInGlass;
+	private static Block WeaponUpgrader;
+	public static Block WireframeBlock2;
+	public static Block WeaponGiverGrayGun;
+	public static Block LowFlameInGlass;
+	public static Block GoldFlameInGlass;
+	public static Block ObsidianFlameInGlass;
+	public static Block DecorativeBlock1;
+	public static Block DecorativeBlock2;
+	public static Block GoldBrick;
+	public static Block ObsidianBrick;
+	public static Block DiamondBrick;
+	public static Block IronBrick;
+	public static Block FlamewoodPillar;
+	public static Block HighwoodPillar;
+	public static Block SlateBricks;
+	public static Block SlateBeacon;
+	public static Block SlatePillar;
+	public static Block SolarPlate;
+	public static Block DenialPlate;
+	public static Block SwitchPlate;
+	public static Block LoopPlate;
+	public static Block PartPlate;
+	public static Block TrinityPlate;
+	public static Block AssociationPlate;
+	public static Block DialectPlate;
+	public static Block SyllablesPlate;
+	public static Block MirrorsPlate;
+	public static Block WifiBlock;
+	public static Block LowMycon;
+	public static Block MyconStem;
+	public static Block Fern;
+	public static Block MyconCap;
+	public static Block GlowingMyconCap;
+	public static Block SaltBricks;
+	public static Block MyconPlank;
+	public static Block HighwoodDoor;
+	public static Block MyconDoor;
+	public static Block MyconWorkbench;
+	public static Block HighwoodWorkbench;
+	public static Block FirewoodWorkbench;
+	public static Block BismuthOre;
+	public static Block BismuthBlock;
+	public static Block BismuthPillar;
+	public static Block BismuthBrick;
+	public static Block TeaBush;
+	public static Block TeaWood;
+	public static Block TeaPlank;
+	public static Block TeaDoor;
+	public static Block TeaPillar;
+	public static Block TeaWorkbench;
+	public static Block MyconPillar;
+	public static Block CoalBrick;
+	public static Block GreenstoneBrick;
+	public static Block SnowBrick;
+	public static Block Freezer;
+	public static Block WorkingFreezer;
+	public static Block LaceAgateOre;
+	public static Block ClinohumiteOre;
+	public static Block MalachiteOre;
+	public static Block PyriteOre;
+	public static Block LaceAgateBlock;
+	public static Block ClinohumiteBlock;
+	public static Block MalachiteBlock;
+	public static Block PyriteBlock;
+	public static Block GrassPathway;
+	public static Block FrigidTrunk;
+	public static Block FrigidLeaves;
+	public static Block IceDoor;
+	public static Block Hydrangea;
+
+	public static void Register() {
+		FrigidLeaves = (new BlockGlass(255, 224, Material.leaves, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setName("Frigid Leaves").setEssValue(8);
+		QuadWindowGlassBlock = (new BlockGlass(90, 145, Material.glass, false)).setHardness(0.7F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Fortified Glass").setEssValue(16);
+		PillarBlock = (new BlockPillar(91, 144, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep).setName("Pillar").setEssValue(8);
+		TileBlock = (new Block(92, 146, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Stone Tile").setEssValue(8);
+		TileBlock2 = (new Block(93, 147, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8);
+		TileBlock2NonFucked = (new BlockGlass(94, 147, Material.glass, false)).setHardness(1.5F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Tile").setEssValue(8);
+		dimensionFloorBlock = (new Block(95, 148, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Dimension Floor").setEssValue(8);
+		dimensionWallBlock = (new Block(96, 149, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Dimension Wall").setEssValue(8);
+		dbgBlock = (new Block(97, 150, Material.rock)).setHardness(0.2F).setResistance(10.0F).setStepSound(Block.soundElderFootstep).setPickaxeEffective(true).setName("DEBUG").setEssValue(1);
+		TileBlock3 = (new Block(98, 151, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8).setName("Blue Dimension Tile");
+		TileBlock4 = (new Block(99, 152, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8).setName("Yellow Dimension Tile");
+		fakeGrass = (new BlockMultiSided(100, 153, 154, 155)).setHardness(0.6F).setStepSound(Block.soundGrassFootstep).setName("Fake Grass").setEssValue(8);
+		AltMojangHypostasisAnemo = (new Block(101, 156, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8).setName("Blue Mojang Block");
+		AltMojangHypostasisAnemo2 = (new Block(102, 157, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8).setName("White Mojang Block");
+		AltMojangHypostasisAnemo3 = (new Block(103, 158, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8).setName("Green Mojang Block");
+		BarrierBlock = (new BlockHidable(104, 159, Material.glass, false)).setHardness(0.8F).setStepSound(Block.soundElderFootstep).setName("Ghost Block").func_6151_25876D73IUZGMvsxuJ9FK3G9uS5jHTtSi5Ebey3exyWHs4kk86DvoVS8A900(true).setEssValue(8);
+		StairLadderBlock = (new BlockLadder(105, 161)).setHardness(0.4F).setStepSound(Block.soundWoodFootstep).setEssValue(8);
+		fakeDirt = (new Block(106, 162, Material.rock)).setHardness(0.6F).setResistance(10.0F).setStepSound(Block.soundGrassFootstep).setEssValue(8).setName("Fake Dirt");
+		FakeRock = (new Block(107, 163, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8).setName("Fake Stone");
+		fakeSand = (new BlockSand(108, 164)).setHardness(0.5F).setStepSound(Block.soundSandFootstep).setEssValue(8).setName("Fake Sand");
+		woolPink = (new Block(109, 165, Material.cloth)).setHardness(0.8F).setStepSound(Block.soundClothFootstep).setName("Magenta Cloth").setEssValue(16);
+		woolBlue = (new Block(110, 166, Material.cloth)).setHardness(0.8F).setStepSound(Block.soundClothFootstep).setName("Blue Cloth").setEssValue(16);
+		woolGreen = (new Block(111, 167, Material.cloth)).setHardness(0.8F).setStepSound(Block.soundClothFootstep).setName("Green Cloth").setEssValue(16);
+		woolBlack = (new Block(112, 168, Material.cloth)).setHardness(0.8F).setStepSound(Block.soundClothFootstep).setName("Black Cloth").setEssValue(16);
+		dbg2Block = (new BlockGlowing(113, 150, 1)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(Block.soundStoneFootstep).setName("DEBUG");
+		saltBlock = (new BlockMultiSided(114, 170, 169, 170)).setHardness(0.6F).setStepSound(Block.soundStoneFootstep).setName("Salt Block").setEssValue(1);
+		glowingFlower = (new BlockGlowingFlower(115, 171, 1)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(Block.soundGrassFootstep).setName("Water Lily").setEssValue(8);
+		glowingFlowerInfBasic = (new BlockGlowingFlowerInfused(117, 173, 1, 2)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(Block.soundGrassFootstep).setName("Flame-Infused Lily").setEssValue(16);
+		glowingFlowerInfGold = (new BlockGlowingFlowerInfused(118, 174, 1, 4)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(Block.soundGrassFootstep).setName("Gold-Infused Lily").setEssValue(24);
+		glowingFlowerInfObsidian = (new BlockGlowingFlowerInfused(119, 175, 1, 7)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(Block.soundGrassFootstep).setName("Obsidian-Infused Lily").setEssValue(32);
+		blueFireIdk = (new BlockGlowing(116, 172, 2)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(Block.soundStoneFootstep).setName("Celestial Flame").setEssValue(6);
+		safe = (new BlockSafe(120, 177, 176, 177)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundElderFootstep).setPickaxeEffective(true).setEssValue(1).setName("Safe");
+		GlassMagenta = (new BlockGlass(121, 133, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setName("Magenta Glass").setEssValue(16);
+		GlassBlue = (new BlockGlass(122, 134, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setName("Blue Glass").setEssValue(16);
+		GlassGreen = (new BlockGlass(123, 135, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setName("Green Glass").setEssValue(16);
+		GlassBlack = (new BlockGlass(124, 136, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setName("Black Glass").setEssValue(16);
+		QGlassMagenta = (new BlockGlass(125, 117, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Fortified Magenta Glass").setEssValue(24);
+		QGlassBlue = (new BlockGlass(126, 118, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Fortified Blue Glass").setEssValue(24);
+		QGlassGreen = (new BlockGlass(127, 119, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Fortified Green Glass").setEssValue(24);
+		QGlassBlack = (new BlockGlass(128, 120, Material.glass, false)).setHardness(0.1F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Fortified Black Glass").setEssValue(24);
+		FireSkyWood = (new Block(129, 182, Material.wood)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setName("Flamewood").setEssValue(4);
+		FireSkyPlanks = (new Block(130, 185, Material.wood)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setName("Flamewood Planks").setEssValue(8);
+		FireSkyLeaves = (new BlockLeaves(131, 183)).setHardness(0.2F).setLightOpacity(1).setStepSound(Block.soundGrassFootstep).setName("Flamewood Leaves").setEssValue(4);
+		LowGlowingFlower = (new BlockGlowingFlower(132, 181, 1)).setHardness(0.0F).setLightValue(0.7464F).setStepSound(Block.soundGrassFootstep).setName("Low Lily").setEssValue(16);
+		LowGlowingVine = (new BlockGlowingFlower(133, 186, 1)).setHardness(0.0F).setLightValue(0.8501F).setStepSound(Block.soundGrassFootstep).setName("Low Vine").setEssValue(8);
+		LowRiverbed = (new Block(134, 180, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Low Riverbed").setEssValue(4);
+		LowGlowingBlock = (new BlockGlowingCube(135, 179, 1)).setHardness(1.0F).setLightValue(0.8821F).setStepSound(Block.soundGrassFootstep).setPickaxeEffective(true).setName("Low Wart").setEssValue(11);
+		LowStone = (new BlockStone(136, 187)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Low River Stone").setEssValue(1);
+		LowOreGold = (new BlockOre(137, 188)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Low River Gold Ore").setEssValue(32);
+		LowOreIron = (new BlockOre(138, 189)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Low River Iron Ore").setEssValue(24);
+		LowOreCoal = (new BlockOre(139, 190)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Low River Coal Ore").setEssValue(16);
+		LowOreDiamond = (new BlockOre(140, 191)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Low River Diamond Ore").setEssValue(48);
+		LowOreGreenstone = (new BlockRedstoneOre(141, 192, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setEssValue(32).setName("Low River Greenstone Ore");
+		LowOreGreenstoneGlowing = (new BlockRedstoneOre(142, 192, true)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setEssValue(32).setName("Low River Greenstone Ore");
+		BlockFlameWoodDoor = (new BlockFlameWoodDoor(143, 129)).setHardness(3.0F).setStepSound(Block.soundWoodFootstep).setName("Flamewood Door").setEssValue(8);
+		LimeCobblestone = (new Block(144, 194, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(8).setName("Cobbled Limestone");
+		Limestone = (new BlockStone(145, 193, LimeCobblestone.blockID)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Limestone").setEssValue(14);
+		TutFloorBlock = (new Block(146, 196, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(1).setName("Green Dimension Floor");
+		TutWallBlock = (new Block(147, 197, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setEssValue(1).setName("Alternative Dimension Wall");
+		TutGlowingBlock = (new BlockGlowingCube(148, 198, 1)).setHardness(1.0F).setLightValue(0.9987F).setStepSound(Block.soundGrassFootstep).setPickaxeEffective(true).setEssValue(1).setName("Glowing Cache");
+		EssenceBlock = (new Block(149, 200, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setEssValue(9).setName("Essence Cache");
+		EssenceTransformer = (new BlockEssenceTransformer(150, 141, 142, 143)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Essence Transformer").setEssValue(32);
+		woodDouble = (new BlockWoodSlab(151, 137, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setName("Wood Slab").setEssValue(1);
+		woodSingle = (new BlockWoodSlab(152, 137, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setName("Wood Slab").setEssValue(2);
+		Heater = (new BlockFlamingCube(153, 121, 1)).setHardness(1.0F).setLightValue(0.5997F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Heater").setEssValue(32);
+		EssenceCloner = (new BlockEssenceCloner(154, 125, 126, 143)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Essence Cloner").setEssValue(32);
+		IceDoor = (new BlockIceDoor(155, 226)).setHardness(2.2F).setResistance(0.5F).setStepSound(Block.soundGlassFootstep).setName("Ice Door").setEssValue(8);
+		essenceFountain = (new BlockEssenceFountain(156, Material.rock)).setLightValue(0.5F).setLightOpacity(0).setHardness(0.5F).setResistance(0.5F).setPickaxeEffective(true).setStepSound(Block.soundStoneFootstep).setName("Essence Fountain").setEssValue(16);
+		SmoothStone = (new Block(157, 195, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Smooth Stone").setEssValue(16);
+		SmoothLimestone = (new Block(158, 201, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Smooth Limestone").setEssValue(16);
+		CrudePillar = (new Block(159, 202, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Crude Pillar").setEssValue(8);
+		Hydrangea = (new BlockGrassTall(160, 267, 269)).setHardness(0.0F).setStepSound(Block.soundGrassFootstep).setName("Hydrangea").setEssValue(2);
+		AncientWood = (new BlockMultiSided(161, 209, 208, 209, Material.wood)).setStepSound(Block.soundWoodFootstep).setHardness(5.0F).setResistance(20.0F).setName("Highwood Log").setEssValue(2);
+		AncientLeaves = (new BlockGlass(162, 211, Material.leaves, true)).setHardness(0.4F).setLightOpacity(1).setStepSound(Block.soundGrassFootstep).setName("Highwood Leaves").setEssValue(4);
+		AncientRoots = (new Block(163, 213, Material.wood)).setStepSound(Block.soundWoodFootstep).setHardness(1.6F).setResistance(20.0F).setName("Highwood Roots").setEssValue(2);
+		AncientPlanks = (new Block(164, 225, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep).setEssValue(2).setName("Highwood Planks").setEssValue(8);
+		Grass = (new BlockGrassTall(165, 111, 336)).setHardness(0.0F).setStepSound(Block.soundGrassFootstep).setEssValue(1).setName("Grass").setEssValue(1);
+		ElderDecoratedStone = (new Block(166, 14, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundSpecialFootstep).setPickaxeEffective(true).setName("Elder Decorated Stone").setEssValue(8);
+		ElderBrick = (new Block(167, 30, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundSpecialFootstep).setPickaxeEffective(true).setName("Elder Brick").setEssValue(8);
+		ElderPillar = (new Block(168, 46, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundSpecialFootstep).setPickaxeEffective(true).setName("Elder Pillar").setEssValue(8);
+		ElderSmoothStone = (new Block(169, 110, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundSpecialFootstep).setPickaxeEffective(true).setName("Elder Smooth Stone").setEssValue(8);
+		Bookshelf = (new BlockEmptyBookshelf(170, 108)).setHardness(1.5F).setStepSound(Block.soundWoodFootstep).setEssValue(1).setName("Bookshelf");
+		EmptyBookshelf = (new BlockEmptyBookshelf(171, 109)).setHardness(1.5F).setStepSound(Block.soundWoodFootstep).setEssValue(1).setName("Empty Bookshelf");
+		WireframeBlock = (new BlockWireframeBlock(173, 178, Material.iron, false)).setHardness(1.5F).setPickaxeEffective(true).setStepSound(Block.soundMetalFootstep).setEssValue(5).setName("Wireframe Block").func_6151_25876D73IUZGMvsxuJ9FK3G9uS5jHTtSi5Ebey3exyWHs4kk86DvoVS8A900(true);
+		VendingMachineHealthBoostBottom = (new BlockVendingMachine(174, 241, 240, Material.iron, EnumVendingMachine.HealthBoost)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Health Boost)");
+		VendingMachineHealthBoostTop = (new BlockMultiSided(175, 240, 242, 240, Material.iron)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Health Boost)");
+		VendingMachineArmorBottom = (new BlockVendingMachine(176, 257, 256, Material.iron, EnumVendingMachine.Armor)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Armor)");
+		VendingMachineArmorTop = (new BlockMultiSided(177, 256, 258, 256, Material.iron)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Armor)");
+		VendingMachineDashBottom = (new BlockVendingMachine(178, 273, 272, Material.iron, EnumVendingMachine.Dash)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Dash)");
+		VendingMachineDashTop = (new BlockMultiSided(179, 272, 274, 272, Material.iron)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Dash)");
+		VendingMachineQuickReviveBottom = (new BlockVendingMachine(180, 289, 288, Material.iron, EnumVendingMachine.QuickRevive)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Quick Revive)");
+		VendingMachineQuickReviveTop = (new BlockMultiSided(181, 288, 290, 288, Material.iron)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Vending Machine (Quick Revive)");
+		WeaponGiverGrayGun = (new BlockWeaponGiver(189, 146, 256, Material.iron)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(32767).setName("Weapon Giver (Gray Gun)");
+		Lichen = (new BlockLichen(182, 246)).setHardness(0.0F).setStepSound(Block.soundGrassFootstep).setName("Lichen").setEssValue(8);
+		LichenBricks = (new Block(183, 103, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setName("Lichen Bricks").setEssValue(16);
+		LichenMass = (new Block(184, 245, Material.grass)).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundGrassFootstep).setName("Lichen Mass").setEssValue(16);
+		GoldElderBrick = (new Block(185, 244, Material.rock)).setHardness(1.5F).setLightOpacity(0).setLightValue(0.9F).setResistance(10.0F).setStepSound(Block.soundSpecialFootstep).setPickaxeEffective(true).setName("Gold Elder Brick").setEssValue(32);
+		SkyFlameInGlass = (new BlockGlowingCube(186, 243, 1)).setHardness(1.0F).setLightValue(0.9885F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Sky Flame-In-Glass").setEssValue(32);
+		GoldFlameInGlass = (new BlockGlowingCube(190, 247, 1)).setHardness(1.0F).setLightValue(0.9885F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Gold Flame-In-Glass").setEssValue(32);
+		ObsidianFlameInGlass = (new BlockGlowingCube(191, 248, 1)).setHardness(1.0F).setLightValue(0.9885F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Obsidian Flame-In-Glass").setEssValue(32);
+		LowFlameInGlass = (new BlockGlowingCube(192, 249, 1)).setHardness(1.0F).setLightValue(0.9885F).setStepSound(Block.soundGlassFootstep).setPickaxeEffective(true).setName("Low Flame-In-Glass").setEssValue(32);
+		DecorativeBlock1 = (new Block(195, 250, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundElderFootstep).setName("Decorative Block (1)").setEssValue(32);
+		DecorativeBlock2 = (new Block(196, 251, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundElderFootstep).setName("Decorative Block (2)").setEssValue(32);
+		GoldBrick = (new Block(197, 204, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Gold Brick").setEssValue(32);
+		ObsidianBrick = (new Block(198, 236, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Obsidian Brick").setEssValue(72);
+		DiamondBrick = (new Block(199, 221, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Diamond Brick").setEssValue(64);
+		IronBrick = (new Block(200, 220, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Iron Brick").setEssValue(32);
+		FlamewoodPillar = (new Block(201, 252, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(true).setName("Flamewood Pillar").setEssValue(12);
+		HighwoodPillar = (new Block(202, 253, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(true).setName("Highwood Pillar").setEssValue(12);
+		WeaponUpgrader = (new BlockWeaponUpgrader(187, 234, 233, Material.iron)).setHardness(8000.0F).setStepSound(Block.soundMetalFootstep).setEssValue(60).setName("Weapon Upgrader");
+		WireframeBlock2 = (new BlockWireframeBlock2(188, 178, Material.iron)).setHardness(2.0F).setStepSound(Block.soundMetalFootstep).setEssValue(5).setName("Wireframe Block").func_6151_25876D73IUZGMvsxuJ9FK3G9uS5jHTtSi5Ebey3exyWHs4kk86DvoVS8A900(true);
+		SlateBricks = (new Block(203, 262, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Slate Bricks").setEssValue(4);
+		SlateBeacon = (new Block(204, 263, Material.rock)).setLightValue(1.0F).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundMetalFootstep).setPickaxeEffective(true).setName("Slate Beacon").setEssValue(8);
+		SlatePillar = (new BlockMultiSided(205, 265, 264, 265, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Slate Pillar").setEssValue(8);
+		SolarPlate = (new BlockSlatePillar(206, 62)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Solar Plate");
+		DenialPlate = (new BlockSlatePillar(207, 63)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Denial Plate");
+		SwitchPlate = (new BlockSlatePillar(208, 77)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Switch Plate");
+		LoopPlate = (new BlockSlatePillar(209, 78)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Loop Plate");
+		PartPlate = (new BlockSlatePillar(210, 79)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Part Plate");
+		TrinityPlate = (new BlockSlatePillar(211, 282)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Trinity Plate");
+		AssociationPlate = (new BlockSlatePillar(212, 283)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Association Plate");
+		DialectPlate = (new BlockSlatePillar(213, 284)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Dialect Plate");
+		SyllablesPlate = (new BlockSlatePillar(214, 285)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Syllables Plate");
+		MirrorsPlate = (new BlockSlatePillar(215, 286)).setLightValue(0.2F).setEssValue(22).setLightValue(0.9F).setName("Mirrors Plate");
+		WifiBlock = new BlockWifiBlock(216);
+		LowMycon = (new BlockMultiSided(217, 295, 296, 187)).setHardness(0.6F).setStepSound(Block.soundGrassFootstep).setName("Low Mycon").setEssValue(4);
+		MyconStem = (new BlockMultiSided(218, 299, 300, 299, Material.wood)).setStepSound(Block.soundWoodFootstep).setHardness(5.0F).setResistance(20.0F).setName("Mycon Stem").setEssValue(8);
+		Fern = (new BlockLichen(219, 298)).setHardness(0.0F).setStepSound(Block.soundGrassFootstep).setEssValue(1).setName("Fern");
+		MyconCap = (new BlockMyconCap(220, 301)).setHardness(1.0F).setLightOpacity(4).setLightValue(0.0F).setStepSound(Block.soundClothFootstep).setPickaxeEffective(true).setName("Mycon Cap").setEssValue(8);
+		GlowingMyconCap = (new BlockMyconCap(221, 302)).setHardness(1.0F).setLightOpacity(4).setLightValue(0.65F).setStepSound(Block.soundClothFootstep).setPickaxeEffective(true).setName("Glowing Mycon Cap").setEssValue(8);
+		SaltBricks = (new Block(222, 303, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Salt Bricks").setEssValue(16);
+		MyconPlank = (new Block(223, 304, Material.wood)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(false).setName("Mycon Plank").setEssValue(11);
+		HighwoodDoor = (new BlockHighwoodDoor(224, 130)).setHardness(3.0F).setStepSound(Block.soundWoodFootstep).setName("Highwood Door").setEssValue(4);
+		MyconDoor = (new BlockMyconDoor(225, 132)).setHardness(3.0F).setStepSound(Block.soundWoodFootstep).setName("Mycon Door").setEssValue(8);
+		MyconWorkbench = (new BlockMyconWorkbench(226, 305, 306, 307)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(false).setName("Mycon Workbench").setEssValue(11);
+		HighwoodWorkbench = (new BlockMyconWorkbench(227, 308, 309, 310)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(false).setName("Highwood Workbench").setEssValue(11);
+		FirewoodWorkbench = (new BlockMyconWorkbench(228, 261, 277, 278)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(false).setName("Firewood Workbench").setEssValue(11);
+		BismuthOre = (new BlockOre(229, 311)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Bismuth Ore").setEssValue(24);
+		BismuthBlock = (new Block(230, 312, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Bismuth Block").setEssValue(64);
+		BismuthPillar = (new BlockMultiSided(231, 315, 313, 315)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Bismuth Pillar").setEssValue(64);
+		BismuthBrick = (new Block(232, 314, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Bismuth Brick").setEssValue(64);
+		TeaBush = (new BlockLeaves(233, 323)).setHardness(0.2F).setLightOpacity(1).setStepSound(Block.soundGrassFootstep).setName("Tea Bush");
+		TeaWood = (new BlockMultiSided(234, 326, 325, 326, Material.wood)).setStepSound(Block.soundWoodFootstep).setHardness(2.0F).setResistance(20.0F).setName("Tea Wood").setEssValue(8);
+		TeaPlank = (new Block(235, 327, Material.wood)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(false).setName("Tea Plank").setEssValue(8);
+		TeaDoor = (new BlockTeaDoor(236, 344)).setHardness(3.0F).setStepSound(Block.soundWoodFootstep).setName("Tea Door").setEssValue(8);
+		TeaPillar = (new Block(237, 329, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(true).setName("Tea Pillar").setEssValue(8);
+		TeaWorkbench = (new BlockMyconWorkbench(238, 330, 331, 332)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(false).setName("Tea Workbench").setEssValue(8);
+		MyconPillar = (new Block(239, 316, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundWoodFootstep).setPickaxeEffective(true).setName("Mycon Pillar").setEssValue(8);
+		CoalBrick = (new Block(240, 317, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Coal Brick").setEssValue(16);
+		GreenstoneBrick = (new Block(241, 318, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Greenstone Brick").setEssValue(32);
+		SnowBrick = (new Block(242, 230, Material.rock)).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundPowderFootstep).setPickaxeEffective(true).setName("Snow Brick").setEssValue(16);
+		FrigidTrunk = (new BlockFrigidTrunk(254, 131)).setHardness(1.5F).setResistance(2.0F).setStepSound(Block.soundPowderFootstep).setPickaxeEffective(true).setName("Frigid Trunk").setEssValue(8);
+		Freezer = (new BlockFreezer(243, 339, false)).setHardness(3.5F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Freezer").setEssValue(64);
+		WorkingFreezer = (new BlockFreezer(244, 340, true)).setHardness(3.5F).setStepSound(Block.soundStoneFootstep).setPickaxeEffective(true).setName("Freezer").setEssValue(64);
+		LaceAgateOre = (new BlockOre(245, 368)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Lace Agate Ore").setEssValue(182);
+		ClinohumiteOre = (new BlockOre(246, 369)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Clinohumite Ore").setEssValue(182);
+		MalachiteOre = (new BlockOre(247, 370)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Malachite Ore").setEssValue(182);
+		PyriteOre = (new BlockOre(248, 371)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundStoneFootstep).setName("Pyrite Ore").setEssValue(182);
+		LaceAgateBlock = (new BlockGlowingCube(249, 346, Material.iron)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundMetalFootstep).func_6145_8rzoHb72cZES8ywX21vXt5vGwPtLsOh8hgnSMhQtU1cNcj67158V4ha9IN6a(1).setLightValue(0.5F).setEssValue(4671).setName("Lace Agate Block").setEssValue(256);
+		ClinohumiteBlock = (new BlockGlowingCube(250, 347, Material.iron)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundMetalFootstep).func_6145_8rzoHb72cZES8ywX21vXt5vGwPtLsOh8hgnSMhQtU1cNcj67158V4ha9IN6a(1).setLightValue(0.5F).setEssValue(7335).setName("Clinohumite Block").setEssValue(256);
+		MalachiteBlock = (new BlockGlowingCube(251, 348, Material.iron)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundMetalFootstep).func_6145_8rzoHb72cZES8ywX21vXt5vGwPtLsOh8hgnSMhQtU1cNcj67158V4ha9IN6a(1).setLightValue(0.5F).setEssValue(5751).setName("Malachite Block").setEssValue(256);
+		PyriteBlock = (new BlockGlowingCube(252, 291, Material.iron)).setHardness(3.0F).setResistance(5.0F).setStepSound(Block.soundMetalFootstep).func_6145_8rzoHb72cZES8ywX21vXt5vGwPtLsOh8hgnSMhQtU1cNcj67158V4ha9IN6a(1).setLightValue(0.5F).setEssValue(3348).setName("Pyrite Block").setEssValue(256);
+		GrassPathway = (new BlockMultiSided(253, 228, 229, 2)).setHardness(0.6F).setStepSound(Block.soundMetalFootstep).setName("Grass Pathway").setEssValue(4);
+	}
+}
--- net/minecraft/src/ItemPainting.java
+++ net/minecraft/src/ItemPainting.java
@@ -1,34 +1,34 @@
 package net.minecraft.src;
 
 public class ItemPainting extends Item {
-	public ItemPainting(int var1) {
-		super(var1);
+	public ItemPainting(int itemID) {
+		super(itemID);
 		this.maxDamage = 64;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 == 0) {
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(side == 0) {
 			return false;
-		} else if(var7 == 1) {
+		} else if(side == 1) {
 			return false;
 		} else {
-			byte var8 = 0;
-			if(var7 == 4) {
-				var8 = 1;
-			}
-
-			if(var7 == 3) {
-				var8 = 2;
-			}
-
-			if(var7 == 5) {
-				var8 = 3;
-			}
-
-			EntityPainting var9 = new EntityPainting(var3, var4, var5, var6, var8);
-			if(var9.onValidSurface()) {
-				var3.spawnEntityInWorld(var9);
-				--var1.stackSize;
+			byte b8 = 0;
+			if(side == 4) {
+				b8 = 1;
+			}
+
+			if(side == 3) {
+				b8 = 2;
+			}
+
+			if(side == 5) {
+				b8 = 3;
+			}
+
+			EntityPainting entityPainting9 = new EntityPainting(world, x, y, z, b8);
+			if(entityPainting9.onValidSurface()) {
+				world.spawnEntityInWorld(entityPainting9);
+				--stack.stackSize;
 			}
 
 			return true;
--- net/minecraft/src/EntityCow.java
+++ net/minecraft/src/EntityCow.java
@@ -3,18 +3,17 @@
 public class EntityCow extends EntityAnimal {
 	public boolean unusedBool2 = false;
 
-	public EntityCow(World var1) {
-		super(var1);
-		this.texture = "/mob/cow.png";
+	public EntityCow(World world) {
+		super(world);
 		this.setSize(0.9F, 1.3F);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
 	}
 
 	protected String getLivingSound() {
--- net/minecraft/src/EntityCreeper.java
+++ net/minecraft/src/EntityCreeper.java
@@ -6,17 +6,16 @@
 	int fuseDuration = 30;
 	int creeperState = -1;
 
-	public EntityCreeper(World var1) {
-		super(var1);
-		this.texture = "/mob/creeper.png";
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	public EntityCreeper(World world) {
+		super(world);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
 	}
 
 	protected void updateEntityActionState() {
@@ -44,16 +43,16 @@
 		return "mob.creeperdeath";
 	}
 
-	public void onDeath(Entity var1) {
-		super.onDeath(var1);
-		if(var1 instanceof EntitySkeleton) {
+	public void onDeath(Entity entity) {
+		super.onDeath(entity);
+		if(entity instanceof EntitySkeleton) {
 			this.dropItem(Item.record13.shiftedIndex + this.rand.nextInt(2), 1);
 		}
 
 	}
 
-	protected void attackEntity(Entity var1, float var2) {
-		if(this.creeperState <= 0 && var2 < 3.0F || this.creeperState > 0 && var2 < 7.0F) {
+	protected void attackEntity(Entity entity, float damage) {
+		if(this.creeperState <= 0 && damage < 3.0F || this.creeperState > 0 && damage < 7.0F) {
 			if(this.timeSinceIgnited == 0) {
 				this.worldObj.playSoundAtEntity(this, "random.fuse", 1.0F, 0.5F);
 			}
--- net/minecraft/src/EntityMob.java
+++ net/minecraft/src/EntityMob.java
@@ -3,14 +3,14 @@
 public class EntityMob extends EntityCreature implements IMobs {
 	protected int attackStrength = 2;
 
-	public EntityMob(World var1) {
-		super(var1);
+	public EntityMob(World world) {
+		super(world);
 		this.health = 20;
 	}
 
 	public void onLivingUpdate() {
-		float var1 = this.getBrightness(1.0F);
-		if(var1 > 0.5F) {
+		float f1 = this.getBrightness(1.0F);
+		if(f1 > 0.5F) {
 			this.entityAge += 2;
 		}
 
@@ -26,15 +26,15 @@
 	}
 
 	protected Entity findPlayerToAttack() {
-		EntityPlayer var1 = this.worldObj.getClosestPlayerToEntity(this, 16.0D);
-		return var1 != null && this.canEntityBeSeen(var1) ? var1 : null;
+		EntityPlayer entityPlayer1 = this.worldObj.getClosestPlayerToEntity(this, 16.0D);
+		return entityPlayer1 != null && this.canEntityBeSeen(entityPlayer1) ? entityPlayer1 : null;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
-		if(super.attackEntityFrom(var1, var2)) {
-			if(this.riddenByEntity != var1 && this.ridingEntity != var1) {
-				if(var1 != this) {
-					this.entityToAttack = var1;
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		if(super.attackEntityFrom(entity, damage)) {
+			if(this.riddenByEntity != entity && this.ridingEntity != entity) {
+				if(entity != this) {
+					this.entityToAttack = entity;
 				}
 
 				return true;
@@ -46,35 +46,39 @@
 		}
 	}
 
-	protected void attackEntity(Entity var1, float var2) {
-		if((double)var2 < 2.5D && var1.boundingBox.maxY > this.boundingBox.minY && var1.boundingBox.minY < this.boundingBox.maxY) {
+	protected void attackEntity(Entity entity, float damage) {
+		if((double)damage < 2.5D && entity.boundingBox.maxY > this.boundingBox.minY && entity.boundingBox.minY < this.boundingBox.maxY) {
 			this.attackTime = 20;
-			var1.attackEntityFrom(this, this.attackStrength);
+			entity.attackEntityFrom(this, this.attackStrength);
 		}
 
 	}
 
-	protected float getBlockPathWeight(int var1, int var2, int var3) {
-		return 0.5F - this.worldObj.getBrightness(var1, var2, var3);
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	protected float getBlockPathWeight(int x, int y, int z) {
+		return 0.5F - this.worldObj.getBrightness(x, y, z);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
 	}
 
 	public boolean getCanSpawnHere() {
-		int var1 = MathHelper.floor_double(this.posX);
-		int var2 = MathHelper.floor_double(this.boundingBox.minY);
-		int var3 = MathHelper.floor_double(this.posZ);
-		if(this.worldObj.getSavedLightValue(EnumSkyBlock.Sky, var1, var2, var3) > this.rand.nextInt(32)) {
+		int i1 = MathHelper.floor_double(this.posX);
+		int i2 = MathHelper.floor_double(this.boundingBox.minY);
+		int i3 = MathHelper.floor_double(this.posZ);
+		if(this.worldObj.getSavedLightValue(EnumSkyBlock.Sky, i1, i2, i3) > this.rand.nextInt(32)) {
 			return false;
 		} else {
-			int var4 = this.worldObj.getBlockLightValue(var1, var2, var3);
-			return var4 <= this.rand.nextInt(8) && super.getCanSpawnHere();
+			int i4 = this.worldObj.getBlockLightValue(i1, i2, i3);
+			return i4 <= this.rand.nextInt(8) && super.getCanSpawnHere();
 		}
+	}
+
+	public int getEssenceDroppedOnKill() {
+		return 1;
 	}
 }
--- net/minecraft/src/BlockFlower.java
+++ net/minecraft/src/BlockFlower.java
@@ -3,44 +3,44 @@
 import java.util.Random;
 
 public class BlockFlower extends Block {
-	protected BlockFlower(int var1, int var2) {
-		super(var1, Material.plants);
-		this.blockIndexInTexture = var2;
+	public BlockFlower(int id, int blockIndex) {
+		super(id, Material.plants);
+		this.blockIndexInTexture = blockIndex;
 		this.setTickOnLoad(true);
-		float var3 = 0.2F;
-		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var3 * 3.0F, 0.5F + var3);
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
-	}
-
-	protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-		return var1 == Block.grass.blockID || var1 == Block.dirt.blockID || var1 == Block.tilledField.blockID;
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		this.g(var1, var2, var3, var4);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		this.g(var1, var2, var3, var4);
-	}
-
-	protected final void g(World var1, int var2, int var3, int var4) {
-		if(!this.canBlockStay(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+		float f3 = 0.2F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, f3 * 3.0F, 0.5F + f3);
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return this.canThisPlantGrowOnThisBlockID(world.getBlockId(x, y - 1, z));
+	}
+
+	protected boolean canThisPlantGrowOnThisBlockID(int id) {
+		return id == Block.grass.blockID || id == Block.dirt.blockID || id == Block.tilledField.blockID;
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		super.onNeighborBlockChange(world, x, y, z, flag);
+		this.g(world, x, y, z);
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		this.g(world, x, y, z);
+	}
+
+	protected final void g(World cv, int integer2, int integer3, int integer4) {
+		if(!this.canBlockStay(cv, integer2, integer3, integer4)) {
+			this.dropBlockAsItem(cv, integer2, integer3, integer4, cv.getBlockMetadata(integer2, integer3, integer4));
+			cv.setBlockWithNotify(integer2, integer3, integer4, 0);
 		}
 
 	}
 
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-		return (var1.getBlockLightValue(var2, var3, var4) >= 8 || var1.canBlockSeeTheSky(var2, var3, var4)) && this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
+	public boolean canBlockStay(World world, int x, int y, int z) {
+		return (world.getBlockLightValue(x, y, z) >= 8 || world.canBlockSeeTheSky(x, y, z)) && this.canThisPlantGrowOnThisBlockID(world.getBlockId(x, y - 1, z));
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
--- /dev/null
+++ net/minecraft/src/WorldGenHouseBigUnknownClass.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenHouseBigUnknownClass implements IHouseBig {
+	public WorldGenHouseBigUnknownClass(Random random) {
+	}
+
+	public float func_6572_4MbDiJtu6trpae74IapUd09LfEVt0Aru1bX9SAE845fOF7B0JmYIQrXHuHxC() {
+		return 0.01F;
+	}
+
+	public void func_6573_9s8xyF629674iK59W75jxL4IfegOZaukdAavse5BpG78PPgBZ5sG433o01xa(World cv, int integer2, int integer3, WorldGenHouseBigInterior gx) {
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiIngame.java
@@ -1,0 +1,104 @@
+package net.minecraft.src;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+public class GuiIngame {
+	private static final String[] syllab = new String[]{"SIE", "LOH", "KII", "HUR", "MIS", "RUU", "VY", "KA", "TAV", "OLE", "PAH", "MUI", "MAT", "JA", "SAU", "NIN", "UD", "MU", "NGI", "BAR", "LUG", "MAH", "GIR", "AK", "USU", "ESE", "IRU", "UUN", "AMTU", "AGAS", "HI", "TOOI", "YORU", "NEN", "PON", "ONNA", "TSU", "YA", "AO", "ONI", "AN", "KO", "SHI", "YUME", "YARI", "TEST"};
+
+	public static float[] func_7859_2Smi9TOVc0u4B0nD22R23gXE64vzg5p00y2B5q785381b250EEae1U00ZZ0f(float float1, float float2, float float3, float float4) {
+		float f4 = 0.58431375F;
+		float f5 = 0.0F;
+		float f6 = 1.0F;
+		float[] f7 = new float[]{float1 * f4 + (1.0F - float1) * float2, float1 * f5 + (1.0F - float1) * float3, float1 * f6 + (1.0F - float1) * float4};
+		return f7;
+	}
+
+	public static float[] func_7856_7H5Fr30uirnJ0Vv0NxxL7P603FJ5tF3up0YK7tC4c8Pi60Rv7Q4Wu7qi8BB1(float float1, float float2, float float3, float float4, float float5, float float6, float float7) {
+		float[] f7 = new float[]{float1 * float5 + (1.0F - float1) * float2, float1 * float6 + (1.0F - float1) * float3, float1 * float7 + (1.0F - float1) * float4};
+		return f7;
+	}
+
+	public static int func_7857_8ED9sg5AQlLD6Mfxxd60I3K4hLhB2zy0FSJfCv9vgt314wuNc823o2P1rBuW(int integer1, int integer2) {
+		return (int)Math.floor((double)((float)integer1 / (float)integer2));
+	}
+
+	public static boolean func_7860_9R9WML7Yb6Ez8qt2qkA4ZZ3vrp3pK5sq5W0y323a2DaMB3fyIInsd12JX0wA(int integer) {
+		return integer == 0 || integer == Block.cactus.blockID || integer == Block.mushroomBrown.blockID || integer == Block.mushroomRed.blockID || integer == Block.snow.blockID || integer == Block.plantRed.blockID || integer == Block.plantYellow.blockID || integer == Block.lavaMoving.blockID || integer == Block.waterMoving.blockID || integer == Block.leaves.blockID;
+	}
+
+	public static double AngleDistance(double double1, double double2) {
+		double d4 = Math.abs(double2 - double1) % 360.0D;
+		double d6 = d4 > 180.0D ? 360.0D - d4 : d4;
+		return d6;
+	}
+
+	public static boolean RayCastBlock(World cv, int integer, double double3, double double4, double double5, double double6, double double7, double double8) {
+		double d14 = Math.sqrt(Math.pow(double6 - double3, 2.0D) + Math.pow(double7 - double4, 2.0D) + Math.pow(double8 - double5, 2.0D));
+		if(d14 > (double)integer) {
+			return false;
+		} else {
+			double d16 = double6 - double3;
+			double d18 = double7 - double4;
+			double d20 = double8 - double5;
+			double d22 = Math.sqrt(d16 * d16 + d18 * d18 + d20 * d20);
+			double d24 = 0.1D;
+
+			for(double d26 = 0.0D; d26 < d22; d26 += d24) {
+				double d28 = double3 + d26 * d16 / d22;
+				double d30 = double4 + d26 * d18 / d22;
+				double d32 = double5 + d26 * d20 / d22;
+				if(cv.getBlockId((int)d28, (int)d30, (int)d32) != 0) {
+					return true;
+				}
+			}
+
+			return false;
+		}
+	}
+
+	public static int func_7858_2cHYp6ATmZ1plX6hM39yX8WUb69dAl89yq951QL43m5lK26NoGl4o0q9S0Fb(InputStream inputStream, byte[] arr, int integer3, int integer4) throws IOException {
+		int i4;
+		int i5;
+		for(i4 = 0; i4 < integer4; i4 += i5) {
+			i5 = inputStream.read(arr, integer3 + i4, integer4 - i4);
+			if(i5 < 0) {
+				break;
+			}
+		}
+
+		return i4;
+	}
+
+	public static void func_7855_7Ti231Wxi0kouw7L4s113usW3Nt9T3Igr4MjjOG4hA8Gjh3q8nj6zlS3ju8P() {
+		(new Exception()).printStackTrace();
+	}
+
+	public static String Namegen2(long long1, int integer2, int integer3) {
+		long j4 = (long)(integer2 + 392214);
+		long j6 = (long)(integer3 + 392214);
+		long j8 = j6 * 784428L + j4;
+		long j10000 = long1 + j8;
+		int i12 = (int)Math.sqrt((double)(integer2 * integer2 + integer3 * integer3));
+		int i13 = 0;
+		int i14 = 3;
+
+		for(int i15 = i12; i15 / i14 > 0; i14 *= 4) {
+			++i13;
+		}
+
+		String string16 = "";
+		if(i13 > 0) {
+			for(int i17 = 0; i17 != i13; ++i17) {
+				string16 = string16 + syllab[(int)(((long)(i12 + i13 + i14) + j8 * (long)(2 + i17)) % 45L)];
+			}
+
+			string16 = string16 + "-";
+		}
+
+		string16 = string16 + syllab[(int)((j8 * 2L + (long)i12) % 45L)];
+		string16 = string16 + syllab[(int)((j8 * 3L + (long)i12) % 45L)];
+		string16 = string16 + syllab[(int)((j8 * 4L + (long)i12) % 45L)];
+		return string16;
+	}
+}
--- net/minecraft/src/ItemHoe.java
+++ net/minecraft/src/ItemHoe.java
@@ -1,33 +1,33 @@
 package net.minecraft.src;
 
 public class ItemHoe extends Item {
-	public ItemHoe(int var1, int var2) {
-		super(var1);
+	public ItemHoe(int itemID, int maxDamage) {
+		super(itemID);
 		this.maxStackSize = 1;
-		this.maxDamage = 32 << var2;
+		this.maxDamage = 32 << maxDamage;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		int var8 = var3.getBlockId(var4, var5, var6);
-		Material var9 = var3.getBlockMaterial(var4, var5 + 1, var6);
-		if((var9.isSolid() || var8 != Block.grass.blockID) && var8 != Block.dirt.blockID) {
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		int i8 = world.getBlockId(x, y, z);
+		Material material9 = world.getBlockMaterial(x, y + 1, z);
+		if((material9.isSolid() || i8 != Block.grass.blockID) && i8 != Block.dirt.blockID) {
 			return false;
 		} else {
-			Block var10 = Block.tilledField;
-			var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var10.stepSound.getStepSound(), (var10.stepSound.getVolume() + 1.0F) / 2.0F, var10.stepSound.getPitch() * 0.8F);
-			var3.setBlockWithNotify(var4, var5, var6, var10.blockID);
-			var1.damageItem(1);
-			if(var3.rand.nextInt(8) == 0 && var8 == Block.grass.blockID) {
-				byte var11 = 1;
+			Block block10 = Block.tilledField;
+			world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), block10.stepSound.getStepSound(), (block10.stepSound.getVolume() + 1.0F) / 2.0F, block10.stepSound.getPitch() * 0.8F);
+			world.setBlockWithNotify(x, y, z, block10.blockID);
+			stack.damageItem(1);
+			if(world.rand.nextInt(8) == 0 && i8 == Block.grass.blockID) {
+				byte b11 = 1;
 
-				for(int var12 = 0; var12 < var11; ++var12) {
-					float var13 = 0.7F;
-					float var14 = var3.rand.nextFloat() * var13 + (1.0F - var13) * 0.5F;
-					float var15 = 1.2F;
-					float var16 = var3.rand.nextFloat() * var13 + (1.0F - var13) * 0.5F;
-					EntityItem var17 = new EntityItem(var3, (double)((float)var4 + var14), (double)((float)var5 + var15), (double)((float)var6 + var16), new ItemStack(Item.seeds));
-					var17.delayBeforeCanPickup = 10;
-					var3.spawnEntityInWorld(var17);
+				for(int i12 = 0; i12 < b11; ++i12) {
+					float f13 = 0.7F;
+					float f14 = world.rand.nextFloat() * f13 + (1.0F - f13) * 0.5F;
+					float f15 = 1.2F;
+					float f16 = world.rand.nextFloat() * f13 + (1.0F - f13) * 0.5F;
+					EntityItem entityItem17 = new EntityItem(world, (double)((float)x + f14), (double)((float)y + f15), (double)((float)z + f16), new ItemStack(Item.seeds));
+					entityItem17.delayBeforeCanPickup = 10;
+					world.spawnEntityInWorld(entityItem17);
 				}
 			}
 
--- /dev/null
+++ net/minecraft/src/IHouseBig.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public interface IHouseBig {
+	float func_6572_4MbDiJtu6trpae74IapUd09LfEVt0Aru1bX9SAE845fOF7B0JmYIQrXHuHxC();
+
+	void func_6573_9s8xyF629674iK59W75jxL4IfegOZaukdAavse5BpG78PPgBZ5sG433o01xa(World world1, int i2, int i3, WorldGenHouseBigInterior worldGenHouseBigInterior4);
+}
--- /dev/null
+++ net/minecraft/src/BlockVendingMachine.java
@@ -1,0 +1,10 @@
+package net.minecraft.src;
+
+public class BlockVendingMachine extends BlockMultiSided {
+	public EnumVendingMachine field_6348_2OHOFF1QDxQ2Q58xOM5dJf701w4qZWMHMDLUu3jt5qiQfn01o1JuI4VnDEa2;
+
+	public BlockVendingMachine(int integer1, int integer2, int integer3, Material jj, EnumVendingMachine _8wicn57kQ4ywDKyK8c9S2y0kKX2dyo0mHLrPj69yx1nuF8su914h4j0O1XDx0GkyfkK3HkPb4dL64t9X277ogn72EkH5s9V2p5) {
+		super(integer1, integer3, integer2, integer3, jj);
+		this.field_6348_2OHOFF1QDxQ2Q58xOM5dJf701w4qZWMHMDLUu3jt5qiQfn01o1JuI4VnDEa2 = _8wicn57kQ4ywDKyK8c9S2y0kKX2dyo0mHLrPj69yx1nuF8su914h4j0O1XDx0GkyfkK3HkPb4dL64t9X277ogn72EkH5s9V2p5;
+	}
+}
--- net/minecraft/src/WorldGenTrees.java
+++ net/minecraft/src/WorldGenTrees.java
@@ -1,68 +1,91 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.Random;
 
 public class WorldGenTrees extends WorldGenerator {
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		int var6 = var2.nextInt(3) + 4;
-		boolean var7 = true;
-		if(var4 >= 1 && var4 + var6 + 1 <= 128) {
-			int var8;
-			int var10;
-			int var11;
-			int var12;
-			for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
-				byte var9 = 1;
-				if(var8 == var4) {
-					var9 = 0;
-				}
-
-				if(var8 >= var4 + 1 + var6 - 2) {
-					var9 = 2;
-				}
-
-				for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
-					for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-						if(var8 >= 0 && var8 < 128) {
-							var12 = var1.getBlockId(var10, var8, var11);
-							if(var12 != 0 && var12 != Block.leaves.blockID) {
-								var7 = false;
+	private Boolean generateEpicTrees = null;
+
+	public WorldGenTrees generateHighwoodTrees(boolean boolean1) {
+		this.generateEpicTrees = boolean1;
+		return this;
+	}
+
+	private boolean generateNormalTree(World cv, Random random, int integer3, int integer4, int integer5) {
+		int i6 = Block.wood.blockID;
+		int i7 = Block.leaves.blockID;
+		if(random.nextInt(100) <= 5) {
+			i6 = ExtBlocks.FireSkyWood.blockID;
+			i7 = ExtBlocks.FireSkyLeaves.blockID;
+		}
+
+		int i8 = random.nextInt(4) + 4;
+		int i9 = random.nextInt(100);
+		if(i9 >= 6 && i9 <= 14) {
+			i6 = ExtBlocks.TeaWood.blockID;
+			i7 = ExtBlocks.TeaBush.blockID;
+			i8 = random.nextInt(1) + 1;
+		}
+
+		boolean z10 = true;
+		if(integer4 >= 1 && integer4 + i8 + 1 <= 128) {
+			int i11;
+			int i12;
+			int i13;
+			int i14;
+			for(i11 = integer4; i11 <= integer4 + 1 + i8; ++i11) {
+				byte b15 = 1;
+				if(i11 == integer4) {
+					b15 = 0;
+				}
+
+				if(i11 >= integer4 + 1 + i8 - 2) {
+					b15 = 2;
+				}
+
+				for(i12 = integer3 - b15; i12 <= integer3 + b15 && z10; ++i12) {
+					for(i13 = integer5 - b15; i13 <= integer5 + b15 && z10; ++i13) {
+						if(i11 >= 0 && i11 < 128) {
+							i14 = cv.getBlockId(i12, i11, i13);
+							if(i14 != 0 && i14 != i7) {
+								z10 = false;
 							}
 						} else {
-							var7 = false;
+							z10 = false;
 						}
 					}
 				}
 			}
 
-			if(!var7) {
+			if(!z10) {
 				return false;
 			} else {
-				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 128 - var6 - 1) {
-					var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
-
-					int var16;
-					for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
-						var10 = var16 - (var4 + var6);
-						var11 = 1 - var10 / 2;
-
-						for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
-							int var13 = var12 - var3;
-
-							for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
-								int var15 = var14 - var5;
-								if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
-									var1.setBlock(var12, var16, var14, Block.leaves.blockID);
+				i11 = cv.getBlockId(integer3, integer4 - 1, integer5);
+				if((i11 == Block.grass.blockID || i11 == Block.dirt.blockID) && integer4 < 128 - i8 - 1) {
+					cv.setBlock(integer3, integer4 - 1, integer5, Block.dirt.blockID);
+
+					int i19;
+					for(i19 = integer4 - 3 + i8; i19 <= integer4 + i8; ++i19) {
+						i12 = i19 - (integer4 + i8);
+						i13 = 1 - i12 / 2;
+
+						for(i14 = integer3 - i13; i14 <= integer3 + i13; ++i14) {
+							int i16 = i14 - integer3;
+
+							for(int i17 = integer5 - i13; i17 <= integer5 + i13; ++i17) {
+								int i18 = i17 - integer5;
+								if((Math.abs(i16) != i13 || Math.abs(i18) != i13 || random.nextInt(2) != 0 && i12 != 0) && !Block.opaqueCubeLookup[cv.getBlockId(i14, i19, i17)]) {
+									cv.setBlock(i14, i19, i17, i7);
 								}
 							}
 						}
 					}
 
-					for(var16 = 0; var16 < var6; ++var16) {
-						var10 = var1.getBlockId(var3, var4 + var16, var5);
-						if(var10 == 0 || var10 == Block.leaves.blockID) {
-							var1.setBlock(var3, var4 + var16, var5, Block.wood.blockID);
+					for(i19 = 0; i19 < i8; ++i19) {
+						i12 = cv.getBlockId(integer3, integer4 + i19, integer5);
+						if(i12 == 0 || i12 == i7) {
+							cv.setBlock(integer3, integer4 + i19, integer5, i6);
 						}
 					}
 
@@ -74,5 +97,134 @@
 		} else {
 			return false;
 		}
+	}
+
+	private void generateDeEpicTreeFoliage(World cv, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientWood.blockID;
+		int i7 = ExtBlocks.AncientLeaves.blockID;
+		float f8 = 0.0F;
+		float f9 = random.nextFloat() * (float)Math.PI * 2.0F;
+		int i10 = random.nextInt(8) + 7;
+		float f11 = (float)integer4;
+
+		float f13;
+		for(int i12 = 0; i12 < i10; ++i12) {
+			f9 = (float)((double)f9 + ((double)random.nextFloat() - 0.5D) * 0.1D);
+			++f8;
+			f13 = f8 / (float)i10;
+			integer3 = (int)((float)integer3 + MathHelper.cos(f9) * (1.0F - f13));
+			f11 += f13;
+			integer5 = (int)((float)integer5 + MathHelper.sin(f9) * (1.0F - f13));
+			integer4 = Math.round(f11);
+			cv.setBlock(integer3, integer4, integer5, i6);
+		}
+
+		integer4 += random.nextInt(2) + 1;
+		int i15 = random.nextInt(2) + 2;
+
+		for(int i16 = 0; i16 < i15; ++i16) {
+			cv.setBlock(integer3, integer4, integer5, i7);
+
+			for(float f17 = 0.0F; (double)f17 < Math.PI * 2D; f17 = (float)((double)f17 + 0.6283185307179586D)) {
+				int i18 = random.nextInt(i16 + 2) + i16 + 2;
+				float f19 = (float)integer3;
+				f13 = (float)integer5;
+
+				for(int i14 = 0; i14 < i18; ++i14) {
+					f13 += MathHelper.sin(f17);
+					f19 += MathHelper.cos(f17);
+					if(!cv.getBlockMaterial(Math.round(f19), integer4 - i16, Math.round(f13)).getIsSolid()) {
+						cv.setBlock(Math.round(f19), integer4 - i16, Math.round(f13), i7);
+					}
+				}
+			}
+		}
+
+	}
+
+	private void generateDeEpicRoots(World cv, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientRoots.blockID;
+		int i7 = random.nextInt(3);
+
+		for(int i8 = 0; i8 < i7; ++i8) {
+			int i9 = random.nextInt(4) + 2;
+			int i10 = integer3;
+			int i11 = integer4;
+			int i12 = integer5;
+
+			for(int i13 = 0; i13 < i9; ++i13) {
+				i10 += random.nextInt(3) - 1;
+				--i11;
+				i12 += random.nextInt(3) - 1;
+				if(cv.getBlockId(i10, i11, i12) != Block.bedrock.blockID) {
+					cv.setBlock(i10, i11, i12, i6);
+				}
+			}
+		}
+
+	}
+
+	private boolean generateDeEpicTree(World cv, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientWood.blockID;
+		int i7 = ExtBlocks.AncientLeaves.blockID;
+		if(cv.getBlockId(integer3, integer4 - 1, integer5) != Block.grass.blockID && cv.getBlockId(integer3, integer4 - 1, integer5) != Block.dirt.blockID) {
+			return true;
+		} else {
+			Random random8 = new Random(random.nextLong() + (long)integer3 + (long)integer4 + (long)integer5 + cv.randomSeed);
+			ArrayList arrayList9 = new ArrayList();
+			int i10 = 7 + random8.nextInt(10);
+			arrayList9.add(Vec3D.createVector((double)integer3, (double)(integer4 + i10), (double)integer5));
+
+			label71:
+			for(int i11 = 0; arrayList9.size() > 0; ++i11) {
+				Iterator iterator12 = (new ArrayList(arrayList9)).iterator();
+
+				while(true) {
+					while(true) {
+						if(!iterator12.hasNext()) {
+							continue label71;
+						}
+
+						Vec3D vec3D13 = (Vec3D)iterator12.next();
+						int i14 = (int)Math.round(vec3D13.xCoord);
+						int i15 = (int)Math.round(vec3D13.yCoord);
+						int i16 = (int)Math.round(vec3D13.zCoord);
+						if((!cv.getBlockMaterial(i14, i15, i16).getIsSolid() || cv.getBlockId(i14, i15, i16) != i7) && i15 >= 0 && (random8.nextInt(3) != 0 || arrayList9.size() <= 3)) {
+							cv.setBlock(i14, i15, i16, i6);
+							int i17 = 0;
+
+							while(random8.nextInt(arrayList9.size() / 30 + 2) <= 1 && arrayList9.size() <= 10000) {
+								++i17;
+								if(i17 >= 4) {
+									break;
+								}
+
+								Vec3D vec3D18 = vec3D13.addVector((double)(random8.nextInt(3) - 1), -1.0D, (double)(random8.nextInt(3) - 1));
+								arrayList9.add(vec3D18);
+							}
+
+							if(i11 > 2 && random8.nextInt(Math.max(40, 78 - i11)) == 3) {
+								this.generateDeEpicTreeFoliage(cv, random, i14, i15, i16);
+							}
+
+							arrayList9.remove(vec3D13);
+							arrayList9.add(vec3D13.addVector(0.0D, -1.0D, 0.0D));
+						} else {
+							arrayList9.remove(vec3D13);
+							if(cv.getBlockId(i14, i15, i16) == Block.dirt.blockID || cv.getBlockId(i14, i15, i16) == Block.grass.blockID) {
+								this.generateDeEpicRoots(cv, random8, i14, i15, i16);
+							}
+						}
+					}
+				}
+			}
+
+			return true;
+		}
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		Random random6 = new Random(rand.nextLong() + (long)x + (long)y + (long)z + world.randomSeed);
+		return this.generateEpicTrees == null || random6.nextInt(150) != 0 && !this.generateEpicTrees.booleanValue() ? this.generateNormalTree(world, rand, x, y, z) : this.generateDeEpicTree(world, rand, x, y, z);
 	}
 }
--- net/minecraft/src/NBTTagFloat.java
+++ net/minecraft/src/NBTTagFloat.java
@@ -10,16 +10,16 @@
 	public NBTTagFloat() {
 	}
 
-	public NBTTagFloat(float var1) {
-		this.floatValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeFloat(this.floatValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.floatValue = var1.readFloat();
+	public NBTTagFloat(float floatValue) {
+		this.floatValue = floatValue;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeFloat(this.floatValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.floatValue = dataInput.readFloat();
 	}
 
 	public byte getType() {
--- net/minecraft/src/MCHashEntry2.java
+++ net/minecraft/src/MCHashEntry2.java
@@ -6,11 +6,11 @@
 	MCHashEntry2 nextEntry;
 	final int slotHash;
 
-	MCHashEntry2(int var1, long var2, Object var4, MCHashEntry2 var5) {
-		this.valueEntry = var4;
-		this.nextEntry = var5;
-		this.hashEntry = var2;
-		this.slotHash = var1;
+	MCHashEntry2(int slotHash, long hashEntry, Object valueEntry, MCHashEntry2 nextEntry) {
+		this.valueEntry = valueEntry;
+		this.nextEntry = nextEntry;
+		this.hashEntry = hashEntry;
+		this.slotHash = slotHash;
 	}
 
 	public final long getHash() {
@@ -21,17 +21,17 @@
 		return this.valueEntry;
 	}
 
-	public final boolean equals(Object var1) {
-		if(!(var1 instanceof MCHashEntry2)) {
+	public final boolean equals(Object object) {
+		if(!(object instanceof MCHashEntry2)) {
 			return false;
 		} else {
-			MCHashEntry2 var2 = (MCHashEntry2)var1;
-			Long var3 = Long.valueOf(this.getHash());
-			Long var4 = Long.valueOf(var2.getHash());
-			if(var3 == var4 || var3 != null && var3.equals(var4)) {
-				Object var5 = this.getValue();
-				Object var6 = var2.getValue();
-				if(var5 == var6 || var5 != null && var5.equals(var6)) {
+			MCHashEntry2 mCHashEntry22 = (MCHashEntry2)object;
+			Long long3 = this.getHash();
+			Long long4 = mCHashEntry22.getHash();
+			if(long3 == long4 || long3 != null && long3.equals(long4)) {
+				Object object5 = this.getValue();
+				Object object6 = mCHashEntry22.getValue();
+				if(object5 == object6 || object5 != null && object5.equals(object6)) {
 					return true;
 				}
 			}
@@ -41,7 +41,7 @@
 	}
 
 	public final int hashCode() {
-		return MCHashTable2.getHash(this.hashEntry);
+		return MCHashTable2.func_8530_1eeMyE1IcVWnKwM9A0z9L8E0O9I96zS5oH9Kj08F52w5fB3vO76OX1JRNT6I(this.hashEntry);
 	}
 
 	public final String toString() {
--- /dev/null
+++ net/minecraft/src/ItemTheOneTrueBook.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+public class ItemTheOneTrueBook extends Item {
+	public ItemTheOneTrueBook(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		worldObj.playSoundAtEntity(entityPlayer, "ext.notif", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+		return itemStack;
+	}
+}
--- net/minecraft/src/TileEntitySign.java
+++ net/minecraft/src/TileEntitySign.java
@@ -4,21 +4,21 @@
 	public String[] signText = new String[]{"", "", "", ""};
 	public int lineBeingEdited = -1;
 
-	public void writeToNBT(NBTTagCompound var1) {
-		super.writeToNBT(var1);
-		var1.setString("Text1", this.signText[0]);
-		var1.setString("Text2", this.signText[1]);
-		var1.setString("Text3", this.signText[2]);
-		var1.setString("Text4", this.signText[3]);
+	public void writeToNBT(NBTTagCompound nbttagcompound) {
+		super.writeToNBT(nbttagcompound);
+		nbttagcompound.setString("Text1", this.signText[0]);
+		nbttagcompound.setString("Text2", this.signText[1]);
+		nbttagcompound.setString("Text3", this.signText[2]);
+		nbttagcompound.setString("Text4", this.signText[3]);
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		super.readFromNBT(var1);
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		super.readFromNBT(nbttagcompound);
 
-		for(int var2 = 0; var2 < 4; ++var2) {
-			this.signText[var2] = var1.getString("Text" + (var2 + 1));
-			if(this.signText[var2].length() > 15) {
-				this.signText[var2] = this.signText[var2].substring(0, 15);
+		for(int i2 = 0; i2 < 4; ++i2) {
+			this.signText[i2] = nbttagcompound.getString("Text" + (i2 + 1));
+			if(this.signText[i2].length() > 15) {
+				this.signText[i2] = this.signText[i2].substring(0, 15);
 			}
 		}
 
--- net/minecraft/src/ThreadSleepForeverServer.java
+++ net/minecraft/src/ThreadSleepForeverServer.java
@@ -5,8 +5,8 @@
 public class ThreadSleepForeverServer extends Thread {
 	final MinecraftServer mcServer;
 
-	public ThreadSleepForeverServer(MinecraftServer var1) {
-		this.mcServer = var1;
+	public ThreadSleepForeverServer(MinecraftServer minecraftServer) {
+		this.mcServer = minecraftServer;
 		this.setDaemon(true);
 		this.start();
 	}
@@ -15,7 +15,7 @@
 		while(true) {
 			try {
 				Thread.sleep(2147483647L);
-			} catch (InterruptedException var2) {
+			} catch (InterruptedException interruptedException2) {
 			}
 		}
 	}
--- /dev/null
+++ net/minecraft/src/EntityEssenceProjectile.java
@@ -1,0 +1,237 @@
+package net.minecraft.src;
+
+import java.util.List;
+
+public class EntityEssenceProjectile extends EntityFirable {
+	private int xTile = -1;
+	private int yTile = -1;
+	private int zTile = -1;
+	private int inTile = 0;
+	private boolean inData = false;
+	public int arrowShake = 0;
+	private EntityLiving shootingEntity;
+	private int ticksInGround;
+	private int ticksInAir = 0;
+
+	public EntityEssenceProjectile(World world) {
+		super(world);
+		this.setSize(0.5F, 0.5F);
+	}
+
+	public EntityEssenceProjectile(World cv, EntityLiving es) {
+		super(cv);
+		this.shootingEntity = es;
+		this.setSize(0.5F, 0.5F);
+		this.setLocationAndAngles(es.posX, es.posY, es.posZ, es.rotationYaw, es.rotationPitch);
+		this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+		this.posY -= (double)0.1F;
+		this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+		this.setPosition(this.posX, this.posY, this.posZ);
+		this.yOffset = 0.0F;
+		this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI));
+		this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI));
+		this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI));
+		this.setArrowHeading(this.motionX, this.motionY, this.motionZ, 1.5F, 1.0F);
+		cv.spawnParticle("smoke", this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
+	}
+
+	public void setArrowHeading(double double1, double double2, double double3, float float4, float float5) {
+		float f9 = MathHelper.sqrt_double(double1 * double1 + double2 * double2 + double3 * double3);
+		double1 /= (double)f9;
+		double2 /= (double)f9;
+		double3 /= (double)f9;
+		double1 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double2 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double3 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double1 *= (double)float4;
+		double2 *= (double)float4;
+		double3 *= (double)float4;
+		this.motionX = double1;
+		this.motionY = double2;
+		this.motionZ = double3;
+		float f10 = MathHelper.sqrt_double(double1 * double1 + double3 * double3);
+		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(double1, double3) * 180.0D / (double)(float)Math.PI);
+		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(double2, (double)f10) * 180.0D / (double)(float)Math.PI);
+		this.ticksInGround = 0;
+	}
+
+	public void onUpdate() {
+		super.onUpdate();
+		if(this.arrowShake > 0) {
+			--this.arrowShake;
+		}
+
+		if(this.inData) {
+			int i1 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+			if(i1 == this.inTile) {
+				++this.ticksInGround;
+				if(this.ticksInGround == 1200) {
+					this.setEntityDead();
+				}
+
+				return;
+			}
+
+			this.inData = false;
+			this.motionX *= (double)(this.rand.nextFloat() * 0.2F);
+			this.motionY *= (double)(this.rand.nextFloat() * 0.2F);
+			this.motionZ *= (double)(this.rand.nextFloat() * 0.2F);
+			this.ticksInGround = 0;
+			this.ticksInAir = 0;
+		} else {
+			++this.ticksInAir;
+		}
+
+		Vec3D vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		Vec3D vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		MovingObjectPosition movingObjectPosition3 = this.worldObj.rayTraceBlocks(vec3D15, vec3D2);
+		vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		if(movingObjectPosition3 != null) {
+			vec3D2 = Vec3D.createVector(movingObjectPosition3.hitVec.xCoord, movingObjectPosition3.hitVec.yCoord, movingObjectPosition3.hitVec.zCoord);
+		}
+
+		Entity entity4 = null;
+		List list5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+		double d6 = 0.0D;
+
+		float f8;
+		for(int i9 = 0; i9 < list5.size(); ++i9) {
+			Entity entity10 = (Entity)list5.get(i9);
+			if(entity10.canBeCollidedWith() && (entity10 != this.shootingEntity || this.ticksInAir >= 5)) {
+				f8 = 0.3F;
+				AxisAlignedBB axisAlignedBB11 = entity10.boundingBox.expand((double)f8, (double)f8, (double)f8);
+				MovingObjectPosition movingObjectPosition12 = axisAlignedBB11.calculateIntercept(vec3D15, vec3D2);
+				if(movingObjectPosition12 != null) {
+					double d13 = vec3D15.distanceTo(movingObjectPosition12.hitVec);
+					if(d13 < d6 || d6 == 0.0D) {
+						entity4 = entity10;
+						d6 = d13;
+					}
+				}
+			}
+		}
+
+		if(entity4 != null) {
+			movingObjectPosition3 = new MovingObjectPosition(entity4);
+		}
+
+		float f16;
+		int i19;
+		if(movingObjectPosition3 != null) {
+			if(movingObjectPosition3.entityHit != null) {
+				this.worldObj.playSoundAtEntity(this.shootingEntity, "ext.hitmarker", 1.0F, 1.0F / (this.rand.nextFloat() * 0.4F + 0.8F));
+				if(movingObjectPosition3.entityHit.attackEntityFrom(this.shootingEntity, 4)) {
+					this.setEntityDead();
+				} else {
+					this.motionX *= -0.10000000149011612D;
+					this.motionY *= -0.10000000149011612D;
+					this.motionZ *= -0.10000000149011612D;
+					this.rotationYaw += 180.0F;
+					this.prevRotationYaw += 180.0F;
+					this.ticksInAir = 0;
+				}
+			} else {
+				this.xTile = movingObjectPosition3.blockX;
+				this.yTile = movingObjectPosition3.blockY;
+				this.zTile = movingObjectPosition3.blockZ;
+				this.inTile = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+				this.motionX = (double)((float)(movingObjectPosition3.hitVec.xCoord - this.posX));
+				this.motionY = (double)((float)(movingObjectPosition3.hitVec.yCoord - this.posY));
+				this.motionZ = (double)((float)(movingObjectPosition3.hitVec.zCoord - this.posZ));
+				f16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
+				this.posX -= this.motionX / (double)f16 * (double)0.05F;
+				this.posY -= this.motionY / (double)f16 * (double)0.05F;
+				this.posZ -= this.motionZ / (double)f16 * (double)0.05F;
+				this.inData = true;
+				this.arrowShake = 7;
+			}
+
+			this.worldObj.spawnParticle("smoke", this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
+			if(movingObjectPosition3.typeOfHit == 0 && this.worldObj.getBlockId(movingObjectPosition3.blockX, movingObjectPosition3.blockY, movingObjectPosition3.blockZ) == ExtBlocks.field_8240_5E4NKM067p94qeqC3h64uNOnnphIsCe05csZ685G0x5E1jS6382dgVh9t2a2.blockID) {
+				int i17 = movingObjectPosition3.blockX;
+				i19 = movingObjectPosition3.blockY;
+				int i20 = movingObjectPosition3.blockZ;
+				ItemStack itemStack22 = new ItemStack(ExtBlocks.field_8240_5E4NKM067p94qeqC3h64uNOnnphIsCe05csZ685G0x5E1jS6382dgVh9t2a2, 1);
+				EntityItem entityItem14 = new EntityItem(this.worldObj, (double)i17 + 0.5D, (double)i19 + 0.5D, (double)i20 + 0.5D, itemStack22);
+				entityItem14.motionX = this.rand.nextDouble() - 0.5D;
+				entityItem14.motionY = this.rand.nextDouble() - 0.5D;
+				entityItem14.motionZ = this.rand.nextDouble() - 0.5D;
+				entityItem14.motionX /= 8.0D;
+				entityItem14.motionY /= 8.0D;
+				entityItem14.motionZ /= 8.0D;
+				this.worldObj.spawnParticle("smoke", (double)i17 + 0.5D, (double)i19 + 0.5D, (double)i20 + 0.5D, 0.0D, 0.0D, 0.0D);
+				this.worldObj.spawnEntityInWorld(entityItem14);
+				this.worldObj.setBlockWithNotify(i17, i19, i20, 0);
+				this.worldObj.markBlocksDirty(i17, i19, i20, i17, i19, i20);
+			}
+
+			this.setEntityDead();
+		}
+
+		this.posX += this.motionX;
+		this.posY += this.motionY;
+		this.posZ += this.motionZ;
+		f16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)(float)Math.PI);
+
+		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)f16) * 180.0D / (double)(float)Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+		}
+
+		while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
+			this.prevRotationPitch += 360.0F;
+		}
+
+		while(this.rotationYaw - this.prevRotationYaw < -180.0F) {
+			this.prevRotationYaw -= 360.0F;
+		}
+
+		while(this.rotationYaw - this.prevRotationYaw >= 180.0F) {
+			this.prevRotationYaw += 360.0F;
+		}
+
+		this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
+		float f18 = 2.97F;
+		f8 = 0.03F;
+		if(this.handleWaterMovement()) {
+			for(i19 = 0; i19 < 4; ++i19) {
+				float f21 = 0.25F;
+				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)f21, this.posY - this.motionY * (double)f21, this.posZ - this.motionZ * (double)f21, this.motionX, this.motionY, this.motionZ);
+			}
+
+			f18 = 0.8F;
+		}
+
+		this.motionX *= (double)f18;
+		this.motionY *= (double)f18;
+		this.motionZ *= (double)f18;
+		this.setPosition(this.posX, this.posY, this.posZ);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setShort("xTile", (short)this.xTile);
+		nbttagcompound.setShort("yTile", (short)this.yTile);
+		nbttagcompound.setShort("zTile", (short)this.zTile);
+		nbttagcompound.setByte("inTile", (byte)this.inTile);
+		nbttagcompound.setByte("shake", (byte)this.arrowShake);
+		nbttagcompound.setByte("inGround", (byte)(this.inData ? 1 : 0));
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.xTile = nbttagcompound.getShort("xTile");
+		this.yTile = nbttagcompound.getShort("yTile");
+		this.zTile = nbttagcompound.getShort("zTile");
+		this.inTile = nbttagcompound.getByte("inTile") & 255;
+		this.arrowShake = nbttagcompound.getByte("shake") & 255;
+		this.inData = nbttagcompound.getByte("inGround") == 1;
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+		if(this.inData && this.shootingEntity == entityPlayer && this.arrowShake <= 0 && entityPlayer.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
+			this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+			entityPlayer.onItemPickup(this, 1);
+			this.setEntityDead();
+		}
+
+	}
+}
--- net/minecraft/src/Packet14BlockDig.java
+++ net/minecraft/src/Packet14BlockDig.java
@@ -11,24 +11,24 @@
 	public int face;
 	public int status;
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.status = var1.read();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.read();
-		this.zPosition = var1.readInt();
-		this.face = var1.read();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.write(this.status);
-		var1.writeInt(this.xPosition);
-		var1.write(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.write(this.face);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleBlockDig(this);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.status = dataInputStream.read();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.read();
+		this.zPosition = dataInputStream.readInt();
+		this.face = dataInputStream.read();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.write(this.status);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.write(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.write(this.face);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleBlockDig(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/BlockJukeBox.java
+++ net/minecraft/src/BlockJukeBox.java
@@ -1,44 +1,45 @@
 package net.minecraft.src;
 
 public class BlockJukeBox extends Block {
-	protected BlockJukeBox(int var1, int var2) {
-		super(var1, var2, Material.wood);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return this.blockIndexInTexture + (var1 == 1 ? 1 : 0);
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if(var6 > 0) {
-			this.ejectRecord(var1, var2, var3, var4, var6);
+	protected BlockJukeBox(int id, int blockIndex) {
+		super(id, blockIndex, Material.wood);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return this.blockIndexInTexture + (side == 1 ? 1 : 0);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if(i6 > 0) {
+			this.ejectRecord(world, x, y, z, i6);
 			return true;
 		} else {
 			return false;
 		}
 	}
 
-	public void ejectRecord(World var1, int var2, int var3, int var4, int var5) {
-		var1.playRecord((String)null, var2, var3, var4);
-		var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
-		int var6 = Item.record13.shiftedIndex + var5 - 1;
-		float var7 = 0.7F;
-		double var8 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
-		double var10 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.2D + 0.6D;
-		double var12 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
-		EntityItem var14 = new EntityItem(var1, (double)var2 + var8, (double)var3 + var10, (double)var4 + var12, new ItemStack(var6));
-		var14.delayBeforeCanPickup = 10;
-		var1.spawnEntityInWorld(var14);
+	public void ejectRecord(World world, int x, int y, int z, int integer5) {
+		world.playRecord((String)null, x, y, z);
+		world.setBlockMetadataWithNotify(x, y, z, 0);
+		int i6 = Item.record13.shiftedIndex + integer5 - 1;
+		float f7 = 0.7F;
+		double d8 = (double)(world.rand.nextFloat() * f7) + (double)(1.0F - f7) * 0.5D;
+		double d10 = (double)(world.rand.nextFloat() * f7) + (double)(1.0F - f7) * 0.2D + 0.6D;
+		double d12 = (double)(world.rand.nextFloat() * f7) + (double)(1.0F - f7) * 0.5D;
+		EntityItem entityItem14 = new EntityItem(world, (double)x + d8, (double)y + d10, (double)z + d12, new ItemStack(i6));
+		entityItem14.delayBeforeCanPickup = 10;
+		world.spawnEntityInWorld(entityItem14);
 	}
 
-	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		if(!var1.multiplayerWorld) {
-			if(var5 > 0) {
-				this.ejectRecord(var1, var2, var3, var4, var5);
+	public void dropBlockAsItemWithChance(World world, int x, int y, int z, int metadata, float chance) {
+		if(!world.multiplayerWorld) {
+			if(metadata > 0) {
+				this.ejectRecord(world, x, y, z, metadata);
 			}
 
-			super.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
+			super.dropBlockAsItemWithChance(world, x, y, z, metadata, chance);
 		}
+
 	}
 }
--- net/minecraft/src/Packet21PickupSpawn.java
+++ net/minecraft/src/Packet21PickupSpawn.java
@@ -18,44 +18,44 @@
 	public Packet21PickupSpawn() {
 	}
 
-	public Packet21PickupSpawn(EntityItem var1) {
-		this.entityId = var1.entityID;
-		this.itemID = var1.item.itemID;
-		this.count = var1.item.stackSize;
-		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-		this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.rotation = (byte)((int)(var1.motionX * 128.0D));
-		this.pitch = (byte)((int)(var1.motionY * 128.0D));
-		this.roll = (byte)((int)(var1.motionZ * 128.0D));
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.itemID = var1.readShort();
-		this.count = var1.readByte();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.rotation = var1.readByte();
-		this.pitch = var1.readByte();
-		this.roll = var1.readByte();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeShort(this.itemID);
-		var1.writeByte(this.count);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.writeByte(this.rotation);
-		var1.writeByte(this.pitch);
-		var1.writeByte(this.roll);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handlePickupSpawn(this);
+	public Packet21PickupSpawn(EntityItem entityItem) {
+		this.entityId = entityItem.entityID;
+		this.itemID = entityItem.item.itemID & 65535;
+		this.count = entityItem.item.stackSize;
+		this.xPosition = MathHelper.floor_double(entityItem.posX * 32.0D);
+		this.yPosition = MathHelper.floor_double(entityItem.posY * 32.0D);
+		this.zPosition = MathHelper.floor_double(entityItem.posZ * 32.0D);
+		this.rotation = (byte)((int)(entityItem.motionX * 128.0D));
+		this.pitch = (byte)((int)(entityItem.motionY * 128.0D));
+		this.roll = (byte)((int)(entityItem.motionZ * 128.0D));
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.itemID = dataInputStream.readShort() & 65535;
+		this.count = dataInputStream.readByte();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.rotation = dataInputStream.readByte();
+		this.pitch = dataInputStream.readByte();
+		this.roll = dataInputStream.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeShort(this.itemID);
+		dataOutputStream.writeByte(this.count);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.writeByte(this.rotation);
+		dataOutputStream.writeByte(this.pitch);
+		dataOutputStream.writeByte(this.roll);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handlePickupSpawn(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/NetworkManager.java
+++ net/minecraft/src/NetworkManager.java
@@ -31,72 +31,76 @@
 	private int sendQueueByteLength = 0;
 	private int chunkDataSendCounter = 0;
 
-	public NetworkManager(Socket var1, String var2, NetHandler var3) throws IOException {
-		this.networkSocket = var1;
-		this.netHandler = var3;
-		var1.setTrafficClass(24);
-		this.socketInputStream = new DataInputStream(var1.getInputStream());
-		this.socketOutputStream = new DataOutputStream(var1.getOutputStream());
-		this.readThread = new NetworkReaderThread(this, var2 + " read thread");
-		this.writeThread = new NetworkWriterThread(this, var2 + " write thread");
+	public NetworkManager(Socket socket, String threadName, NetHandler netHandler) throws IOException {
+		this.networkSocket = socket;
+		this.netHandler = netHandler;
+		socket.setTrafficClass(24);
+		this.socketInputStream = new DataInputStream(socket.getInputStream());
+		this.socketOutputStream = new DataOutputStream(socket.getOutputStream());
+		this.readThread = new NetworkReaderThread(this, threadName + " read thread");
+		this.writeThread = new NetworkWriterThread(this, threadName + " write thread");
 		this.readThread.start();
 		this.writeThread.start();
 	}
 
-	public void setNetHandler(NetHandler var1) {
-		this.netHandler = var1;
+	public void setNetHandler(NetHandler netHandler) {
+		this.netHandler = netHandler;
 	}
 
-	public void addToSendQueue(Packet var1) {
+	public void addToSendQueue(Packet packet) {
 		if(!this.isServerTerminating) {
-			Object var2 = this.sendQueueLock;
-			synchronized(var2) {
-				this.sendQueueByteLength += var1.getPacketSize() + 1;
-				if(var1.isChunkDataPacket) {
-					this.chunkDataPackets.add(var1);
+			Object object2 = this.sendQueueLock;
+			Object object3 = this.sendQueueLock;
+			synchronized(this.sendQueueLock) {
+				this.sendQueueByteLength += packet.getPacketSize() + 1;
+				if(packet.isChunkDataPacket) {
+					this.chunkDataPackets.add(packet);
 				} else {
-					this.dataPackets.add(var1);
+					this.dataPackets.add(packet);
 				}
-
 			}
 		}
+
 	}
 
 	private void sendPacket() {
 		try {
-			boolean var1 = true;
-			Packet var2;
-			Object var3;
+			boolean z1 = true;
+			Packet packet2;
+			Object object3;
+			Object object4;
 			if(!this.dataPackets.isEmpty()) {
-				var1 = false;
-				var3 = this.sendQueueLock;
-				synchronized(var3) {
-					var2 = (Packet)this.dataPackets.remove(0);
-					this.sendQueueByteLength -= var2.getPacketSize() + 1;
+				z1 = false;
+				object3 = this.sendQueueLock;
+				object4 = this.sendQueueLock;
+				synchronized(this.sendQueueLock) {
+					packet2 = (Packet)this.dataPackets.remove(0);
+					this.sendQueueByteLength -= packet2.getPacketSize() + 1;
 				}
 
-				Packet.writePacket(var2, this.socketOutputStream);
+				Packet.writePacket(packet2, this.socketOutputStream);
 			}
 
-			if((var1 || this.chunkDataSendCounter-- <= 0) && !this.chunkDataPackets.isEmpty()) {
-				var1 = false;
-				var3 = this.sendQueueLock;
-				synchronized(var3) {
-					var2 = (Packet)this.chunkDataPackets.remove(0);
-					this.sendQueueByteLength -= var2.getPacketSize() + 1;
+			if((z1 || this.chunkDataSendCounter-- <= 0) && !this.chunkDataPackets.isEmpty()) {
+				z1 = false;
+				object3 = this.sendQueueLock;
+				object4 = this.sendQueueLock;
+				synchronized(this.sendQueueLock) {
+					packet2 = (Packet)this.chunkDataPackets.remove(0);
+					this.sendQueueByteLength -= packet2.getPacketSize() + 1;
 				}
 
-				Packet.writePacket(var2, this.socketOutputStream);
+				Packet.writePacket(packet2, this.socketOutputStream);
 				this.chunkDataSendCounter = 50;
 			}
 
-			if(var1) {
+			if(z1) {
 				Thread.sleep(10L);
 			}
-		} catch (InterruptedException var8) {
-		} catch (Exception var9) {
+		} catch (InterruptedException interruptedException9) {
+		} catch (Exception exception10) {
 			if(!this.isTerminating) {
-				this.onNetworkError(var9);
+				this.onNetworkError(exception10);
 			}
 		}
 
@@ -104,48 +108,48 @@
 
 	private void readPacket() {
 		try {
-			Packet var1 = Packet.readPacket(this.socketInputStream);
-			if(var1 != null) {
-				this.readPackets.add(var1);
+			Packet packet1 = Packet.readPacket(this.socketInputStream);
+			if(packet1 != null) {
+				this.readPackets.add(packet1);
 			} else {
 				this.networkShutdown("End of stream");
 			}
-		} catch (Exception var2) {
+		} catch (Exception exception2) {
 			if(!this.isTerminating) {
-				this.onNetworkError(var2);
+				this.onNetworkError(exception2);
 			}
 		}
 
 	}
 
-	private void onNetworkError(Exception var1) {
-		var1.printStackTrace();
-		this.networkShutdown("Internal exception: " + var1.toString());
+	private void onNetworkError(Exception exception) {
+		exception.printStackTrace();
+		this.networkShutdown("Internal exception: " + exception.toString());
 	}
 
-	public void networkShutdown(String var1) {
+	public void networkShutdown(String terminationReason) {
 		if(this.isRunning) {
 			this.isTerminating = true;
-			this.terminationReason = var1;
+			this.terminationReason = terminationReason;
 			(new NetworkMasterThread(this)).start();
 			this.isRunning = false;
 
 			try {
 				this.socketInputStream.close();
-			} catch (Throwable var5) {
+			} catch (Throwable throwable5) {
 			}
 
 			try {
 				this.socketOutputStream.close();
-			} catch (Throwable var4) {
+			} catch (Throwable throwable4) {
 			}
 
 			try {
 				this.networkSocket.close();
-			} catch (Throwable var3) {
+			} catch (Throwable throwable3) {
 			}
-
 		}
+
 	}
 
 	public void processReadPackets() {
@@ -161,11 +165,11 @@
 			this.timeSinceLastRead = 0;
 		}
 
-		int var1 = 100;
+		int i1 = 100;
 
-		while(!this.readPackets.isEmpty() && var1-- >= 0) {
-			Packet var2 = (Packet)this.readPackets.remove(0);
-			var2.processPacket(this.netHandler);
+		while(!this.readPackets.isEmpty() && i1-- >= 0) {
+			Packet packet2 = (Packet)this.readPackets.remove(0);
+			packet2.processPacket(this.netHandler);
 		}
 
 		if(this.isTerminating && this.readPackets.isEmpty()) {
@@ -188,27 +192,27 @@
 		return this.chunkDataPackets.size();
 	}
 
-	static boolean isRunning(NetworkManager var0) {
-		return var0.isRunning;
-	}
-
-	static boolean isServerTerminating(NetworkManager var0) {
-		return var0.isServerTerminating;
-	}
-
-	static void readNetworkPacket(NetworkManager var0) {
-		var0.readPacket();
-	}
-
-	static void sendNetworkPacket(NetworkManager var0) {
-		var0.sendPacket();
-	}
-
-	static Thread getReadThread(NetworkManager var0) {
-		return var0.readThread;
-	}
-
-	static Thread getWriteThread(NetworkManager var0) {
-		return var0.writeThread;
+	static boolean isRunning(NetworkManager af) {
+		return af.isRunning;
+	}
+
+	static boolean isServerTerminating(NetworkManager af) {
+		return af.isServerTerminating;
+	}
+
+	static void readPacket(NetworkManager af) {
+		af.readPacket();
+	}
+
+	static void sendPacket(NetworkManager af) {
+		af.sendPacket();
+	}
+
+	static Thread readThread(NetworkManager af) {
+		return af.readThread;
+	}
+
+	static Thread writeThread(NetworkManager af) {
+		return af.writeThread;
 	}
 }
--- net/minecraft/src/ItemDoor.java
+++ net/minecraft/src/ItemDoor.java
@@ -2,69 +2,78 @@
 
 public class ItemDoor extends Item {
 	private Material material;
-
-	public ItemDoor(int var1, Material var2) {
-		super(var1);
-		this.material = var2;
+	private BlockDoor target;
+
+	public ItemDoor(int integer, Material jj, BlockDoor ly) {
+		this(integer, jj);
+		this.target = ly;
+	}
+
+	public ItemDoor(int itemID, Material material) {
+		super(itemID);
+		this.target = null;
+		this.material = material;
 		this.maxDamage = 64;
 		this.maxStackSize = 1;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 != 1) {
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(side != 1) {
 			return false;
 		} else {
-			++var5;
-			Block var8;
-			if(this.material == Material.wood) {
-				var8 = Block.doorWood;
-			} else {
-				var8 = Block.doorSteel;
+			++y;
+			Object object8 = this.target;
+			if(object8 == null) {
+				if(this.material == Material.wood) {
+					object8 = Block.doorWood;
+				} else {
+					object8 = Block.doorSteel;
+				}
 			}
 
-			if(!var8.canPlaceBlockAt(var3, var4, var5, var6)) {
+			if(!((Block)object8).canPlaceBlockAt(world, x, y, z)) {
 				return false;
 			} else {
-				int var9 = MathHelper.floor_double((double)((var2.rotationYaw + 180.0F) * 4.0F / 360.0F) - 0.5D) & 3;
-				byte var10 = 0;
-				byte var11 = 0;
-				if(var9 == 0) {
-					var11 = 1;
-				}
-
-				if(var9 == 1) {
-					var10 = -1;
-				}
-
-				if(var9 == 2) {
-					var11 = -1;
-				}
-
-				if(var9 == 3) {
-					var10 = 1;
-				}
-
-				int var12 = (var3.isBlockNormalCube(var4 - var10, var5, var6 - var11) ? 1 : 0) + (var3.isBlockNormalCube(var4 - var10, var5 + 1, var6 - var11) ? 1 : 0);
-				int var13 = (var3.isBlockNormalCube(var4 + var10, var5, var6 + var11) ? 1 : 0) + (var3.isBlockNormalCube(var4 + var10, var5 + 1, var6 + var11) ? 1 : 0);
-				boolean var14 = var3.getBlockId(var4 - var10, var5, var6 - var11) == var8.blockID || var3.getBlockId(var4 - var10, var5 + 1, var6 - var11) == var8.blockID;
-				boolean var15 = var3.getBlockId(var4 + var10, var5, var6 + var11) == var8.blockID || var3.getBlockId(var4 + var10, var5 + 1, var6 + var11) == var8.blockID;
-				boolean var16 = false;
-				if(var14 && !var15) {
-					var16 = true;
-				} else if(var13 > var12) {
-					var16 = true;
-				}
-
-				if(var16) {
-					var9 = var9 - 1 & 3;
-					var9 += 4;
-				}
-
-				var3.setBlockWithNotify(var4, var5, var6, var8.blockID);
-				var3.setBlockMetadataWithNotify(var4, var5, var6, var9);
-				var3.setBlockWithNotify(var4, var5 + 1, var6, var8.blockID);
-				var3.setBlockMetadataWithNotify(var4, var5 + 1, var6, var9 + 8);
-				--var1.stackSize;
+				int i9 = MathHelper.floor_double((double)((entityPlayer.rotationYaw + 180.0F) * 4.0F / 360.0F) - 0.5D) & 3;
+				byte b10 = 0;
+				byte b11 = 0;
+				if(i9 == 0) {
+					b11 = 1;
+				}
+
+				if(i9 == 1) {
+					b10 = -1;
+				}
+
+				if(i9 == 2) {
+					b11 = -1;
+				}
+
+				if(i9 == 3) {
+					b10 = 1;
+				}
+
+				int i12 = (world.isBlockNormalCube(x - b10, y, z - b11) ? 1 : 0) + (world.isBlockNormalCube(x - b10, y + 1, z - b11) ? 1 : 0);
+				int i13 = (world.isBlockNormalCube(x + b10, y, z + b11) ? 1 : 0) + (world.isBlockNormalCube(x + b10, y + 1, z + b11) ? 1 : 0);
+				boolean z14 = world.getBlockId(x - b10, y, z - b11) == ((Block)object8).blockID || world.getBlockId(x - b10, y + 1, z - b11) == ((Block)object8).blockID;
+				boolean z15 = world.getBlockId(x + b10, y, z + b11) == ((Block)object8).blockID || world.getBlockId(x + b10, y + 1, z + b11) == ((Block)object8).blockID;
+				boolean z16 = false;
+				if(z14 && !z15) {
+					z16 = true;
+				} else if(i13 > i12) {
+					z16 = true;
+				}
+
+				if(z16) {
+					i9 = i9 - 1 & 3;
+					i9 += 4;
+				}
+
+				world.setBlockWithNotify(x, y, z, ((Block)object8).blockID);
+				world.setBlockMetadataWithNotify(x, y, z, i9);
+				world.setBlockWithNotify(x, y + 1, z, ((Block)object8).blockID);
+				world.setBlockMetadataWithNotify(x, y + 1, z, i9 + 8);
+				--stack.stackSize;
 				return true;
 			}
 		}
--- net/minecraft/src/NibbleArray.java
+++ net/minecraft/src/NibbleArray.java
@@ -3,29 +3,29 @@
 public class NibbleArray {
 	public final byte[] data;
 
-	public NibbleArray(int var1) {
-		this.data = new byte[var1 >> 1];
-	}
-
-	public NibbleArray(byte[] var1) {
-		this.data = var1;
-	}
-
-	public int get(int var1, int var2, int var3) {
-		int var4 = var1 << 11 | var3 << 7 | var2;
-		int var5 = var4 >> 1;
-		int var6 = var4 & 1;
-		return var6 == 0 ? this.data[var5] & 15 : this.data[var5] >> 4 & 15;
-	}
-
-	public void set(int var1, int var2, int var3, int var4) {
-		int var5 = var1 << 11 | var3 << 7 | var2;
-		int var6 = var5 >> 1;
-		int var7 = var5 & 1;
-		if(var7 == 0) {
-			this.data[var6] = (byte)(this.data[var6] & 240 | var4 & 15);
+	public NibbleArray(int data) {
+		this.data = new byte[data >> 1];
+	}
+
+	public NibbleArray(byte[] data) {
+		this.data = data;
+	}
+
+	public int get(int x, int y, int z) {
+		int i4 = x << 11 | z << 7 | y;
+		int i5 = i4 >> 1;
+		int i6 = i4 & 1;
+		return i6 == 0 ? this.data[i5] & 15 : this.data[i5] >> 4 & 15;
+	}
+
+	public void set(int x, int y, int z, int value) {
+		int i5 = x << 11 | z << 7 | y;
+		int i6 = i5 >> 1;
+		int i7 = i5 & 1;
+		if(i7 == 0) {
+			this.data[i6] = (byte)(this.data[i6] & 240 | value & 15);
 		} else {
-			this.data[var6] = (byte)(this.data[var6] & 15 | (var4 & 15) << 4);
+			this.data[i6] = (byte)(this.data[i6] & 15 | (value & 15) << 4);
 		}
 
 	}
--- net/minecraft/src/BlockDirt.java
+++ net/minecraft/src/BlockDirt.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class BlockDirt extends Block {
-	protected BlockDirt(int var1, int var2) {
-		super(var1, var2, Material.grass);
+	protected BlockDirt(int id, int blockIndex) {
+		super(id, blockIndex, Material.grass);
 	}
 }
--- net/minecraft/src/EntityFallingSand.java
+++ net/minecraft/src/EntityFallingSand.java
@@ -4,24 +4,24 @@
 	public int blockID;
 	public int fallTime = 0;
 
-	public EntityFallingSand(World var1) {
-		super(var1);
+	public EntityFallingSand(World world) {
+		super(world);
 	}
 
-	public EntityFallingSand(World var1, float var2, float var3, float var4, int var5) {
-		super(var1);
-		this.blockID = var5;
+	public EntityFallingSand(World world, float x, float y, float z, int blockID) {
+		super(world);
+		this.blockID = blockID;
 		this.preventEntitySpawning = true;
 		this.setSize(0.98F, 0.98F);
 		this.yOffset = this.height / 2.0F;
-		this.setPosition((double)var2, (double)var3, (double)var4);
+		this.setPosition((double)x, (double)y, (double)z);
 		this.motionX = 0.0D;
 		this.motionY = 0.0D;
 		this.motionZ = 0.0D;
 		this.canTriggerWalking = false;
-		this.prevPosX = (double)var2;
-		this.prevPosY = (double)var3;
-		this.prevPosZ = (double)var4;
+		this.prevPosX = (double)x;
+		this.prevPosY = (double)y;
+		this.prevPosZ = (double)z;
 	}
 
 	public boolean canBeCollidedWith() {
@@ -41,11 +41,11 @@
 			this.motionX *= (double)0.98F;
 			this.motionY *= (double)0.98F;
 			this.motionZ *= (double)0.98F;
-			int var1 = MathHelper.floor_double(this.posX);
-			int var2 = MathHelper.floor_double(this.posY);
-			int var3 = MathHelper.floor_double(this.posZ);
-			if(this.worldObj.getBlockId(var1, var2, var3) == this.blockID) {
-				this.worldObj.setBlockWithNotify(var1, var2, var3, 0);
+			int i1 = MathHelper.floor_double(this.posX);
+			int i2 = MathHelper.floor_double(this.posY);
+			int i3 = MathHelper.floor_double(this.posZ);
+			if(this.worldObj.getBlockId(i1, i2, i3) == this.blockID) {
+				this.worldObj.setBlockWithNotify(i1, i2, i3, 0);
 			}
 
 			if(this.onGround) {
@@ -53,22 +53,22 @@
 				this.motionZ *= (double)0.7F;
 				this.motionY *= -0.5D;
 				this.setEntityDead();
-				if(!this.worldObj.canBlockBePlacedAt(this.blockID, var1, var2, var3, true) || !this.worldObj.setBlockWithNotify(var1, var2, var3, this.blockID)) {
+				if(!this.worldObj.canBlockBePlacedAt(this.blockID, i1, i2, i3, true) || !this.worldObj.setBlockWithNotify(i1, i2, i3, this.blockID)) {
 					this.dropItem(this.blockID, 1);
 				}
 			} else if(this.fallTime > 100) {
 				this.dropItem(this.blockID, 1);
 				this.setEntityDead();
 			}
-
 		}
-	}
-
-	protected void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setByte("Tile", (byte)this.blockID);
-	}
-
-	protected void readEntityFromNBT(NBTTagCompound var1) {
-		this.blockID = var1.getByte("Tile") & 255;
+
+	}
+
+	protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setByte("Tile", (byte)this.blockID);
+	}
+
+	protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.blockID = nbttagcompound.getByte("Tile") & 255;
 	}
 }
--- /dev/null
+++ net/minecraft/src/GenOnWater.java
@@ -1,0 +1,26 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class GenOnWater extends WorldGenerator {
+	private int a;
+
+	public GenOnWater(int integer) {
+		this.a = integer;
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 64; ++i6) {
+			int i7 = z + rand.nextInt(8) - rand.nextInt(8);
+			int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+			int i9 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i10 = world.getBlockId(i9, i8 - 1, i7);
+			boolean z11 = i10 == 9 || i10 == 79;
+			if(world.getBlockId(i9, i8, i7) == 0 && z11) {
+				world.setBlock(i9, i8, i7, this.a);
+			}
+		}
+
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeUnknownClass3.java
@@ -1,0 +1,32 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeUnknownClass3 implements BiomeInterface {
+	private final NoiseGeneratorOctaves[] field_7871_7xb4usmgA1dThlJGO4ix3TJz95U4i38100ezMSakQKa9t8yiDoqd4F6iFGly;
+	private final NoiseGeneratorOctaves[] field_7873_7Q8b2dGq2mVD7kTRqBAt5512iP4XBYu357520g3LF7j6BrMm70l3X60QSy3h;
+	private final Random field_7872_644L3U80FkunS0qdv2kotg5zX8lYiyj6VIcMJywAq96G6F8rXnFLloxIu7u2;
+
+	public BiomeUnknownClass3(Random random) {
+		this.field_7871_7xb4usmgA1dThlJGO4ix3TJz95U4i38100ezMSakQKa9t8yiDoqd4F6iFGly = new NoiseGeneratorOctaves[]{new NoiseGeneratorOctaves(random, 4), new NoiseGeneratorOctaves(random, 4), new NoiseGeneratorOctaves(random, 4)};
+		this.field_7873_7Q8b2dGq2mVD7kTRqBAt5512iP4XBYu357520g3LF7j6BrMm70l3X60QSy3h = new NoiseGeneratorOctaves[]{new NoiseGeneratorOctaves(random, 4), new NoiseGeneratorOctaves(random, 4), new NoiseGeneratorOctaves(random, 4)};
+		this.field_7872_644L3U80FkunS0qdv2kotg5zX8lYiyj6VIcMJywAq96G6F8rXnFLloxIu7u2 = random;
+	}
+
+	public BiomeUnknownClass3 func_7870_9Iw7noc4yrgqp68jPo5Lg7VT0YXqcIw88t90570w930nMaksDE7If9TPR9Q3() {
+		WorldGenMyconUnknownClass.func_6107_97Fm75Zc3vq2pz5698WAEab5oMcjcd6M569UziKD8doslfOEl0nTYExHKVK0(this.field_7872_644L3U80FkunS0qdv2kotg5zX8lYiyj6VIcMJywAq96G6F8rXnFLloxIu7u2);
+		return this;
+	}
+
+	public double func_7868_3g5835mGclzJIUDU5ZIWPtb1qUR2uFgUHLXK977f463W9MS7Iu5T5QHfh5EH(int integer1, int integer2, EnumWorldGenerator _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE) {
+		return this.field_7871_7xb4usmgA1dThlJGO4ix3TJz95U4i38100ezMSakQKa9t8yiDoqd4F6iFGly[_7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE.ordinal()].generateNoiseOctaves((double)integer1 / 32.0D, (double)integer2 / 32.0D);
+	}
+
+	public double func_7867_0Sa7i8e9X8bsz8C7O3N9m408fK504rj6Qa96Vx186O3yrGFTvF7EiwNd1HjI(int integer1, int integer2, EnumWorldGenerator _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE) {
+		return this.field_7873_7Q8b2dGq2mVD7kTRqBAt5512iP4XBYu357520g3LF7j6BrMm70l3X60QSy3h[_7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE.ordinal()].generateNoiseOctaves((double)integer1 / 32.0D, (double)integer2 / 32.0D);
+	}
+
+	public WorldGenMyconUnknownClass func_7869_3p0BQzmK4Mr6H1J26hjJ42W7ny9waN9zTOZAf655888Q468O9Gr48qka17hw(int integer1, int integer2, EnumWorldGenerator _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE) {
+		return WorldGenMyconUnknownClass.func_6109_7AFzAIguFPO5wX289OMW9m53m1vke3nWr9FfsLKbAlSQ3xy680ZFc7S6kAPN(this.func_7868_3g5835mGclzJIUDU5ZIWPtb1qUR2uFgUHLXK977f463W9MS7Iu5T5QHfh5EH(integer1, integer2, _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE), this.func_7867_0Sa7i8e9X8bsz8C7O3N9m408fK504rj6Qa96Vx186O3yrGFTvF7EiwNd1HjI(integer1, integer2, _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE), _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE);
+	}
+}
--- net/minecraft/src/TileEntityFurnace.java
+++ net/minecraft/src/TileEntityFurnace.java
@@ -10,44 +10,44 @@
 		return this.furnaceItemStacks.length;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.furnaceItemStacks[var1];
+	public ItemStack getStackInSlot(int slot) {
+		return this.furnaceItemStacks[slot];
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		super.readFromNBT(var1);
-		NBTTagList var2 = var1.getTagList("Items");
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		super.readFromNBT(nbttagcompound);
+		NBTTagList nBTTagList2 = nbttagcompound.getTagList("Items");
 		this.furnaceItemStacks = new ItemStack[this.getSizeInventory()];
 
-		for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-			NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-			byte var5 = var4.getByte("Slot");
-			if(var5 >= 0 && var5 < this.furnaceItemStacks.length) {
-				this.furnaceItemStacks[var5] = new ItemStack(var4);
+		for(int i3 = 0; i3 < nBTTagList2.tagCount(); ++i3) {
+			NBTTagCompound nBTTagCompound4 = (NBTTagCompound)nBTTagList2.tagAt(i3);
+			byte b5 = nBTTagCompound4.getByte("Slot");
+			if(b5 >= 0 && b5 < this.furnaceItemStacks.length) {
+				this.furnaceItemStacks[b5] = new ItemStack(nBTTagCompound4);
 			}
 		}
 
-		this.furnaceBurnTime = var1.getShort("BurnTime");
-		this.furnaceCookTime = var1.getShort("CookTime");
+		this.furnaceBurnTime = nbttagcompound.getShort("BurnTime");
+		this.furnaceCookTime = nbttagcompound.getShort("CookTime");
 		this.currentItemBurnTime = this.getItemBurnTime(this.furnaceItemStacks[1]);
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		super.writeToNBT(var1);
-		var1.setShort("BurnTime", (short)this.furnaceBurnTime);
-		var1.setShort("CookTime", (short)this.furnaceCookTime);
-		NBTTagList var2 = new NBTTagList();
+	public void writeToNBT(NBTTagCompound nbttagcompound) {
+		super.writeToNBT(nbttagcompound);
+		nbttagcompound.setShort("BurnTime", (short)this.furnaceBurnTime);
+		nbttagcompound.setShort("CookTime", (short)this.furnaceCookTime);
+		NBTTagList nBTTagList2 = new NBTTagList();
 
-		for(int var3 = 0; var3 < this.furnaceItemStacks.length; ++var3) {
-			if(this.furnaceItemStacks[var3] != null) {
-				NBTTagCompound var4 = new NBTTagCompound();
-				var4.setByte("Slot", (byte)var3);
-				this.furnaceItemStacks[var3].writeToNBT(var4);
-				var2.setTag(var4);
+		for(int i3 = 0; i3 < this.furnaceItemStacks.length; ++i3) {
+			if(this.furnaceItemStacks[i3] != null) {
+				NBTTagCompound nBTTagCompound4 = new NBTTagCompound();
+				nBTTagCompound4.setByte("Slot", (byte)i3);
+				this.furnaceItemStacks[i3].writeToNBT(nBTTagCompound4);
+				nBTTagList2.setTag(nBTTagCompound4);
 			}
 		}
 
-		var1.setTag("Items", var2);
+		nbttagcompound.setTag("Items", nBTTagList2);
 	}
 
 	public int getInventoryStackLimit() {
@@ -59,8 +59,8 @@
 	}
 
 	public void updateEntity() {
-		boolean var1 = this.furnaceBurnTime > 0;
-		boolean var2 = false;
+		boolean z1 = this.furnaceBurnTime > 0;
+		boolean z2 = false;
 		if(this.furnaceBurnTime > 0) {
 			--this.furnaceBurnTime;
 		}
@@ -69,7 +69,7 @@
 			if(this.furnaceBurnTime == 0 && this.canSmelt()) {
 				this.currentItemBurnTime = this.furnaceBurnTime = this.getItemBurnTime(this.furnaceItemStacks[1]);
 				if(this.furnaceBurnTime > 0) {
-					var2 = true;
+					z2 = true;
 					if(this.furnaceItemStacks[1] != null) {
 						--this.furnaceItemStacks[1].stackSize;
 						if(this.furnaceItemStacks[1].stackSize == 0) {
@@ -84,19 +84,19 @@
 				if(this.furnaceCookTime == 200) {
 					this.furnaceCookTime = 0;
 					this.smeltItem();
-					var2 = true;
+					z2 = true;
 				}
 			} else {
 				this.furnaceCookTime = 0;
 			}
 
-			if(var1 != this.furnaceBurnTime > 0) {
-				var2 = true;
+			if(z1 != this.furnaceBurnTime > 0) {
+				z2 = true;
 				BlockFurnace.updateFurnaceBlockState(this.furnaceBurnTime > 0, this.worldObj, this.xCoord, this.yCoord, this.zCoord);
 			}
 		}
 
-		if(var2) {
+		if(z2) {
 			this.onInventoryChanged();
 		}
 
@@ -106,17 +106,17 @@
 		if(this.furnaceItemStacks[0] == null) {
 			return false;
 		} else {
-			int var1 = this.getCookedItem(this.furnaceItemStacks[0].getItem().shiftedIndex);
-			return var1 < 0 ? false : (this.furnaceItemStacks[2] == null ? true : (this.furnaceItemStacks[2].itemID != var1 ? false : (this.furnaceItemStacks[2].stackSize < this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize() ? true : this.furnaceItemStacks[2].stackSize < Item.itemsList[var1].getItemStackLimit())));
+			int i1 = this.getCookedItem(this.furnaceItemStacks[0].getItem().shiftedIndex);
+			return i1 < 0 ? false : (this.furnaceItemStacks[2] == null ? true : (this.furnaceItemStacks[2].itemID != i1 ? false : (this.furnaceItemStacks[2].stackSize < this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize() ? true : this.furnaceItemStacks[2].stackSize < Item.itemsList[i1].getItemStackLimit())));
 		}
 	}
 
 	public void smeltItem() {
 		if(this.canSmelt()) {
-			int var1 = this.getCookedItem(this.furnaceItemStacks[0].getItem().shiftedIndex);
+			int i1 = this.getCookedItem(this.furnaceItemStacks[0].getItem().shiftedIndex);
 			if(this.furnaceItemStacks[2] == null) {
-				this.furnaceItemStacks[2] = new ItemStack(var1, 1);
-			} else if(this.furnaceItemStacks[2].itemID == var1) {
+				this.furnaceItemStacks[2] = new ItemStack(i1, 1);
+			} else if(this.furnaceItemStacks[2].itemID == i1) {
 				++this.furnaceItemStacks[2].stackSize;
 			}
 
@@ -124,20 +124,20 @@
 			if(this.furnaceItemStacks[0].stackSize <= 0) {
 				this.furnaceItemStacks[0] = null;
 			}
-
 		}
-	}
-
-	private int getCookedItem(int var1) {
-		return var1 == Block.oreIron.blockID ? Item.ingotIron.shiftedIndex : (var1 == Block.oreGold.blockID ? Item.ingotGold.shiftedIndex : (var1 == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (var1 == Block.sand.blockID ? Block.glass.blockID : (var1 == Item.porkRaw.shiftedIndex ? Item.porkCooked.shiftedIndex : (var1 == Block.cobblestone.blockID ? Block.stone.blockID : (var1 == Item.clay.shiftedIndex ? Item.brick.shiftedIndex : -1))))));
-	}
-
-	private int getItemBurnTime(ItemStack var1) {
-		if(var1 == null) {
+
+	}
+
+	private int getCookedItem(int blockID) {
+		return blockID == Block.oreIron.blockID ? Item.ingotIron.shiftedIndex : (blockID == Block.oreGold.blockID ? Item.ingotGold.shiftedIndex : (blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (blockID == Block.sand.blockID ? Block.glass.blockID : (blockID == Item.porkRaw.shiftedIndex ? Item.porkCooked.shiftedIndex : (blockID == Block.cobblestone.blockID ? Block.stone.blockID : (blockID == Item.clay.shiftedIndex ? Item.brick.shiftedIndex : -1))))));
+	}
+
+	private int getItemBurnTime(ItemStack stack) {
+		if(stack == null) {
 			return 0;
 		} else {
-			int var2 = var1.getItem().shiftedIndex;
-			return var2 < 256 && Block.blocksList[var2].material == Material.wood ? 300 : (var2 == Item.stick.shiftedIndex ? 100 : (var2 == Item.coal.shiftedIndex ? 1600 : (var2 == Item.bucketLava.shiftedIndex ? 20000 : 0)));
+			int i2 = stack.getItem().shiftedIndex;
+			return i2 < 256 && Block.blocksList[i2].material == Material.wood ? 300 : (i2 == Item.stick.shiftedIndex ? 100 : (i2 == Item.coal.shiftedIndex ? 1600 : (i2 == Item.bucketLava.shiftedIndex ? 20000 : 0)));
 		}
 	}
 }
--- /dev/null
+++ net/minecraft/src/EntityEssenceProjectileUnknownClass.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public class EntityEssenceProjectileUnknownClass extends EntityEssenceProjectile {
+	public EntityEssenceProjectileUnknownClass(World cv, EntityLiving es) {
+		super(cv, es);
+	}
+}
--- net/minecraft/src/WorldGenCactus.java
+++ net/minecraft/src/WorldGenCactus.java
@@ -3,17 +3,17 @@
 import java.util.Random;
 
 public class WorldGenCactus extends WorldGenerator {
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		for(int var6 = 0; var6 < 10; ++var6) {
-			int var7 = var3 + var2.nextInt(8) - var2.nextInt(8);
-			int var8 = var4 + var2.nextInt(4) - var2.nextInt(4);
-			int var9 = var5 + var2.nextInt(8) - var2.nextInt(8);
-			if(var1.getBlockId(var7, var8, var9) == 0) {
-				int var10 = 1 + var2.nextInt(var2.nextInt(3) + 1);
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 10; ++i6) {
+			int i7 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+			int i9 = z + rand.nextInt(8) - rand.nextInt(8);
+			if(world.getBlockId(i7, i8, i9) == 0) {
+				int i10 = 1 + rand.nextInt(rand.nextInt(3) + 1);
 
-				for(int var11 = 0; var11 < var10; ++var11) {
-					if(Block.cactus.canBlockStay(var1, var7, var8 + var11, var9)) {
-						var1.setBlock(var7, var8 + var11, var9, Block.cactus.blockID);
+				for(int i11 = 0; i11 < i10; ++i11) {
+					if(Block.cactus.canBlockStay(world, i7, i8 + i11, i9)) {
+						world.setBlock(i7, i8 + i11, i9, Block.cactus.blockID);
 					}
 				}
 			}
--- net/minecraft/src/EntitySpider.java
+++ net/minecraft/src/EntitySpider.java
@@ -1,9 +1,8 @@
 package net.minecraft.src;
 
 public class EntitySpider extends EntityMob {
-	public EntitySpider(World var1) {
-		super(var1);
-		this.texture = "/mob/spider.png";
+	public EntitySpider(World world) {
+		super(world);
 		this.setSize(1.4F, 0.9F);
 		this.moveSpeed = 0.8F;
 	}
@@ -13,10 +12,10 @@
 	}
 
 	protected Entity findPlayerToAttack() {
-		float var1 = this.getBrightness(1.0F);
-		if(var1 < 0.5F) {
-			double var2 = 16.0D;
-			return this.worldObj.getClosestPlayerToEntity(this, var2);
+		float f1 = this.getBrightness(1.0F);
+		if(f1 < 0.5F) {
+			double d2 = 16.0D;
+			return this.worldObj.getClosestPlayerToEntity(this, d2);
 		} else {
 			return null;
 		}
@@ -34,33 +33,31 @@
 		return "mob.spiderdeath";
 	}
 
-	protected void attackEntity(Entity var1, float var2) {
-		float var3 = this.getBrightness(1.0F);
-		if(var3 > 0.5F && this.rand.nextInt(100) == 0) {
+	protected void attackEntity(Entity entity, float damage) {
+		float f3 = this.getBrightness(1.0F);
+		if(f3 > 0.5F && this.rand.nextInt(100) == 0) {
 			this.entityToAttack = null;
-		} else {
-			if(var2 > 2.0F && var2 < 6.0F && this.rand.nextInt(10) == 0) {
-				if(this.onGround) {
-					double var4 = var1.posX - this.posX;
-					double var6 = var1.posZ - this.posZ;
-					float var8 = MathHelper.sqrt_double(var4 * var4 + var6 * var6);
-					this.motionX = var4 / (double)var8 * 0.5D * (double)0.8F + this.motionX * (double)0.2F;
-					this.motionZ = var6 / (double)var8 * 0.5D * (double)0.8F + this.motionZ * (double)0.2F;
-					this.motionY = (double)0.4F;
-				}
-			} else {
-				super.attackEntity(var1, var2);
+		} else if(damage > 2.0F && damage < 6.0F && this.rand.nextInt(10) == 0) {
+			if(this.onGround) {
+				double d4 = entity.posX - this.posX;
+				double d6 = entity.posZ - this.posZ;
+				float f8 = MathHelper.sqrt_double(d4 * d4 + d6 * d6);
+				this.motionX = d4 / (double)f8 * 0.5D * (double)0.8F + this.motionX * (double)0.2F;
+				this.motionZ = d6 / (double)f8 * 0.5D * (double)0.8F + this.motionZ * (double)0.2F;
+				this.motionY = (double)0.4F;
 			}
-
+		} else {
+			super.attackEntity(entity, damage);
 		}
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
 	}
 
 	protected int getDropItemId() {
--- /dev/null
+++ net/minecraft/src/XYZv.java
@@ -1,0 +1,86 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class XYZv {
+	public long x;
+	public long y;
+	public long z;
+	public Direction v;
+
+	public XYZv(long long1, long long2, long long3, Direction _0b8m9VT07dd0weB5M4R35ub1458S3njI2xTipddeAMI860q0eg840W03H7ZGJ1vx7vh4xJ2088Og4mVxmFsd4jCvU3V6s8ndImYH3) {
+		this.x = long1;
+		this.y = long2;
+		this.z = long3;
+		this.v = _0b8m9VT07dd0weB5M4R35ub1458S3njI2xTipddeAMI860q0eg840W03H7ZGJ1vx7vh4xJ2088Og4mVxmFsd4jCvU3V6s8ndImYH3;
+	}
+
+	public XYZv(long long1, long long2, long long3) {
+		this.x = long1;
+		this.y = long2;
+		this.z = long3;
+		this.v = Direction.XM;
+	}
+
+	public XYZv add(long long1, long long2, long long3) {
+		return new XYZv(this.x + long1, this.y + long2, this.z + long3, this.v);
+	}
+
+	public XYZv dir(Direction _0b8m9VT07dd0weB5M4R35ub1458S3njI2xTipddeAMI860q0eg840W03H7ZGJ1vx7vh4xJ2088Og4mVxmFsd4jCvU3V6s8ndImYH3) {
+		return new XYZv(this.x, this.y, this.z, _0b8m9VT07dd0weB5M4R35ub1458S3njI2xTipddeAMI860q0eg840W03H7ZGJ1vx7vh4xJ2088Og4mVxmFsd4jCvU3V6s8ndImYH3);
+	}
+
+	public XYZv rotateAroundXP(Direction _0b8m9VT07dd0weB5M4R35ub1458S3njI2xTipddeAMI860q0eg840W03H7ZGJ1vx7vh4xJ2088Og4mVxmFsd4jCvU3V6s8ndImYH3) {
+		switch(EnumCoordinatesUnknownClass.field_8449_1veWi2ablcFnXHyl6vSBXA83tTw4d8VW6g0w8nUOd2VTaXae402v86i8Bk91[_0b8m9VT07dd0weB5M4R35ub1458S3njI2xTipddeAMI860q0eg840W03H7ZGJ1vx7vh4xJ2088Og4mVxmFsd4jCvU3V6s8ndImYH3.ordinal()]) {
+		case 1:
+			return new XYZv(-this.x, this.y, -this.z, this.v);
+		case 2:
+			return new XYZv(this.x, this.y, this.z, this.v);
+		case 3:
+			return new XYZv(-this.z, this.y, -this.x, this.v);
+		case 4:
+			return new XYZv(this.z, this.y, this.x, this.v);
+		default:
+			return null;
+		}
+	}
+
+	public XYZv add(XYZv bc) {
+		XYZv xYZv2 = new XYZv(this.x, this.y, this.z, this.v);
+		xYZv2.x += bc.x;
+		xYZv2.y += bc.y;
+		xYZv2.z += bc.z;
+		return xYZv2;
+	}
+
+	public static XYZv func_7450_9P2j0BPNZ4oB46oL261cWG1XsFX11ZShxyiW2KoP1aciOr360yndcfSWt79C(NBTTagCompound kj, String string) {
+		return new XYZv(kj.getLong(string + "_x"), kj.getLong(string + "_y"), kj.getLong(string + "_z"));
+	}
+
+	public void func_7455_7eX0Nb674apFqHpK9mPH2q093sH4Wt8UVqYI3885u9iynKe39Xotu3NuBvk0(NBTTagCompound kj, String string) {
+		kj.setLong(string + "_x", this.x);
+		kj.setLong(string + "_y", this.y);
+		kj.setLong(string + "_z", this.z);
+	}
+
+	public static XYZv func_7454_6t7Pa7M0Bc13tc0j1M0opTiT5fh1fX89e84O7Yh37Q99KAQ8G9l1IPW0319z(DataInputStream dataInputStream) {
+		try {
+			return new XYZv((long)dataInputStream.readInt(), (long)dataInputStream.readInt(), (long)dataInputStream.readInt());
+		} catch (IOException iOException2) {
+			return null;
+		}
+	}
+
+	public void func_7453_69TA2MtO216U93nvQ1Qy67b3M4t3rE79JbU3sees7vW4bBe284I23GlxS78I(DataOutputStream dataOutputStream) {
+		try {
+			dataOutputStream.writeInt((int)this.x);
+			dataOutputStream.writeInt((int)this.y);
+			dataOutputStream.writeInt((int)this.z);
+		} catch (IOException iOException3) {
+			iOException3.printStackTrace();
+		}
+
+	}
+}
--- net/minecraft/src/ServerGuiFocusadapter.java
+++ net/minecraft/src/ServerGuiFocusadapter.java
@@ -6,10 +6,10 @@
 class ServerGuiFocusadapter extends FocusAdapter {
 	final ServerGUI mcServerGui;
 
-	ServerGuiFocusadapter(ServerGUI var1) {
-		this.mcServerGui = var1;
+	ServerGuiFocusadapter(ServerGUI _3X5i5Q9H6jHqn8Z1YN0S54rHVZxQ9l6ALxWf2439uwB1909nA5Qygr0A8aEsKhp77FcDHN1mTKZK90975aoz3BWv13v7HErY2gqLL) {
+		this.mcServerGui = _3X5i5Q9H6jHqn8Z1YN0S54rHVZxQ9l6ALxWf2439uwB1909nA5Qygr0A8aEsKhp77FcDHN1mTKZK90975aoz3BWv13v7HErY2gqLL;
 	}
 
-	public void focusGained(FocusEvent var1) {
+	public void focusGained(FocusEvent focusEvent) {
 	}
 }
--- net/minecraft/src/WorldGenerator.java
+++ net/minecraft/src/WorldGenerator.java
@@ -3,8 +3,8 @@
 import java.util.Random;
 
 public abstract class WorldGenerator {
-	public abstract boolean generate(World var1, Random var2, int var3, int var4, int var5);
+	public abstract boolean generate(World world1, Random random2, int i3, int i4, int i5);
 
-	public void setScale(double var1, double var3, double var5) {
+	public void setScale(double scaleX, double scaleY, double scaleZ) {
 	}
 }
--- net/minecraft/src/BlockClay.java
+++ net/minecraft/src/BlockClay.java
@@ -3,15 +3,15 @@
 import java.util.Random;
 
 public class BlockClay extends Block {
-	public BlockClay(int var1, int var2) {
-		super(var1, var2, Material.clay);
+	public BlockClay(int id, int blockIndex) {
+		super(id, blockIndex, Material.clay);
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Item.clay.shiftedIndex;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 4;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockWeaponGiver.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public class BlockWeaponGiver extends BlockMultiSided {
+	public BlockWeaponGiver(int integer1, int integer2, int integer3, Material jj) {
+		super(integer1, integer3, integer2, integer3, jj);
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenHouseSmallUnknownClass3.java
@@ -1,0 +1,46 @@
+package net.minecraft.src;
+
+public class WorldGenHouseSmallUnknownClass3 extends WorldGenHouseSmallUnknownClass4 {
+	private final WorldGenHouseSmallUnknownClass2 field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4;
+
+	public WorldGenHouseSmallUnknownClass3(WorldGenHouseSmallUnknownClass2 hc) {
+		this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4 = hc;
+	}
+
+	public WorldGenHouseSmallUnknownClass2 func_7951_6155zZR8t2Cbq0I65w3T2P9frJ393hs90A6vhvVPoxH61BPyWNHJn7M4bf16() {
+		return new WorldGenHouseSmallUnknownClass2(1, 1);
+	}
+
+	public WorldGenHouseSmallUnknownClass2 func_7953_2R38M2O6566x2pen53vJb71a4871DZeTgLLz2piGfBjTn4JTalO4b0mdIdRI() {
+		return this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4;
+	}
+
+	public boolean func_7952_7Xu3W9Y012Z47lG36iry0n5a339b3Up3MYVi24623ZUogs6SE9LV8t5Xy0cd(World cv, int integer2, int integer3) {
+		int i4;
+		if(WorldGenHouseSmallUnknownClass.func_8022_15MX9kjWH3ipxdHdEowh7oQEbvfI8y92M5CDCXn03Q264Vkw0R6a96O7Ot49(integer2, integer3, this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79 + 1, this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr + 1)) {
+			for(i4 = 128; i4 > 0; --i4) {
+				cv.setBlock(this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79 + 1, i4, this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr + 1, Block.cloth.blockID);
+			}
+		}
+
+		if(WorldGenHouseSmallUnknownClass.func_8022_15MX9kjWH3ipxdHdEowh7oQEbvfI8y92M5CDCXn03Q264Vkw0R6a96O7Ot49(integer2, integer3, this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79 + 14, this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr + 1)) {
+			for(i4 = 128; i4 > 0; --i4) {
+				cv.setBlock(this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79 + 14, i4, this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr + 1, Block.cloth.blockID);
+			}
+		}
+
+		if(WorldGenHouseSmallUnknownClass.func_8022_15MX9kjWH3ipxdHdEowh7oQEbvfI8y92M5CDCXn03Q264Vkw0R6a96O7Ot49(integer2, integer3, this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79 + 1, this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr + 14)) {
+			for(i4 = 128; i4 > 0; --i4) {
+				cv.setBlock(this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79 + 1, i4, this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr + 14, Block.cloth.blockID);
+			}
+		}
+
+		if(WorldGenHouseSmallUnknownClass.func_8022_15MX9kjWH3ipxdHdEowh7oQEbvfI8y92M5CDCXn03Q264Vkw0R6a96O7Ot49(integer2, integer3, this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79 + 14, this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr + 14)) {
+			for(i4 = 128; i4 > 0; --i4) {
+				cv.setBlock(this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79 + 14, i4, this.field_7956_5JExF58xB499l1zv0H77wKS4ca5ZGtgrqlAF72raj4BERa1OPFSSkB3Iy6w4.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr + 14, Block.cloth.blockID);
+			}
+		}
+
+		return false;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockEssenceCloner.java
@@ -1,0 +1,12 @@
+package net.minecraft.src;
+
+public class BlockEssenceCloner extends BlockMultiSided {
+	public BlockEssenceCloner(int integer1, int integer2, int integer3, int integer4) {
+		super(integer1, integer2, integer3, integer4);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		entityPlayer.displayEssenceClonerGUI();
+		return true;
+	}
+}
--- net/minecraft/src/BlockIce.java
+++ net/minecraft/src/BlockIce.java
@@ -3,32 +3,32 @@
 import java.util.Random;
 
 public class BlockIce extends BlockBreakable {
-	public BlockIce(int var1, int var2) {
-		super(var1, var2, Material.ice, false);
+	public BlockIce(int id, int blockIndex) {
+		super(id, blockIndex, Material.ice, false);
 		this.slipperiness = 0.98F;
 		this.setTickOnLoad(true);
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return super.shouldSideBeRendered(var1, var2, var3, var4, 1 - var5);
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return super.shouldSideBeRendered(blockAccess, x, y, z, 1 - side);
 	}
 
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		Material var5 = var1.getBlockMaterial(var2, var3 - 1, var4);
-		if(var5.getIsSolid() || var5.getIsLiquid()) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.waterMoving.blockID);
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		Material material5 = world.getBlockMaterial(x, y - 1, z);
+		if(material5.getIsSolid() || material5.getIsLiquid()) {
+			world.setBlockWithNotify(x, y, z, Block.waterMoving.blockID);
 		}
 
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 0;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getSavedLightValue(EnumSkyBlock.Block, var2, var3, var4) > 11 - Block.lightOpacity[this.blockID]) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, Block.waterStill.blockID);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(world.getSavedLightValue(EnumSkyBlock.Block, x, y, z) > 11 - Block.lightOpacity[this.blockID]) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, Block.waterStill.blockID);
 		}
 
 	}
--- net/minecraft/src/NoiseGeneratorPerlin.java
+++ net/minecraft/src/NoiseGeneratorPerlin.java
@@ -12,144 +12,144 @@
 		this(new Random());
 	}
 
-	public NoiseGeneratorPerlin(Random var1) {
+	public NoiseGeneratorPerlin(Random random) {
 		this.permutations = new int[512];
-		this.xCoord = var1.nextDouble() * 256.0D;
-		this.yCoord = var1.nextDouble() * 256.0D;
-		this.zCoord = var1.nextDouble() * 256.0D;
-
-		int var2;
-		for(var2 = 0; var2 < 256; this.permutations[var2] = var2++) {
-		}
-
-		for(var2 = 0; var2 < 256; ++var2) {
-			int var3 = var1.nextInt(256 - var2) + var2;
-			int var4 = this.permutations[var2];
-			this.permutations[var2] = this.permutations[var3];
-			this.permutations[var3] = var4;
-			this.permutations[var2 + 256] = this.permutations[var2];
-		}
-
-	}
-
-	public double generateNoise(double var1, double var3, double var5) {
-		double var7 = var1 + this.xCoord;
-		double var9 = var3 + this.yCoord;
-		double var11 = var5 + this.zCoord;
-		int var13 = (int)var7;
-		int var14 = (int)var9;
-		int var15 = (int)var11;
-		if(var7 < (double)var13) {
-			--var13;
-		}
-
-		if(var9 < (double)var14) {
-			--var14;
-		}
-
-		if(var11 < (double)var15) {
-			--var15;
-		}
-
-		int var16 = var13 & 255;
-		int var17 = var14 & 255;
-		int var18 = var15 & 255;
-		var7 -= (double)var13;
-		var9 -= (double)var14;
-		var11 -= (double)var15;
-		double var19 = var7 * var7 * var7 * (var7 * (var7 * 6.0D - 15.0D) + 10.0D);
-		double var21 = var9 * var9 * var9 * (var9 * (var9 * 6.0D - 15.0D) + 10.0D);
-		double var23 = var11 * var11 * var11 * (var11 * (var11 * 6.0D - 15.0D) + 10.0D);
-		int var25 = this.permutations[var16] + var17;
-		int var26 = this.permutations[var25] + var18;
-		int var27 = this.permutations[var25 + 1] + var18;
-		int var28 = this.permutations[var16 + 1] + var17;
-		int var29 = this.permutations[var28] + var18;
-		int var30 = this.permutations[var28 + 1] + var18;
-		return this.lerp(var23, this.lerp(var21, this.lerp(var19, this.grad(this.permutations[var26], var7, var9, var11), this.grad(this.permutations[var29], var7 - 1.0D, var9, var11)), this.lerp(var19, this.grad(this.permutations[var27], var7, var9 - 1.0D, var11), this.grad(this.permutations[var30], var7 - 1.0D, var9 - 1.0D, var11))), this.lerp(var21, this.lerp(var19, this.grad(this.permutations[var26 + 1], var7, var9, var11 - 1.0D), this.grad(this.permutations[var29 + 1], var7 - 1.0D, var9, var11 - 1.0D)), this.lerp(var19, this.grad(this.permutations[var27 + 1], var7, var9 - 1.0D, var11 - 1.0D), this.grad(this.permutations[var30 + 1], var7 - 1.0D, var9 - 1.0D, var11 - 1.0D))));
-	}
-
-	public double lerp(double var1, double var3, double var5) {
-		return var3 + var1 * (var5 - var3);
-	}
-
-	public double grad(int var1, double var2, double var4, double var6) {
-		int var8 = var1 & 15;
-		double var9 = var8 < 8 ? var2 : var4;
-		double var11 = var8 < 4 ? var4 : (var8 != 12 && var8 != 14 ? var6 : var2);
-		return ((var8 & 1) == 0 ? var9 : -var9) + ((var8 & 2) == 0 ? var11 : -var11);
-	}
-
-	public double generateNoise(double var1, double var3) {
-		return this.generateNoise(var1, var3, 0.0D);
-	}
-
-	public void populateNoiseArray(double[] var1, double var2, double var4, double var6, int var8, int var9, int var10, double var11, double var13, double var15, double var17) {
-		int var19 = 0;
-		double var20 = 1.0D / var17;
-		int var22 = -1;
-		boolean var23 = false;
-		boolean var24 = false;
-		boolean var25 = false;
-		boolean var26 = false;
-		boolean var27 = false;
-		boolean var28 = false;
-		double var29 = 0.0D;
-		double var31 = 0.0D;
-		double var33 = 0.0D;
-		double var35 = 0.0D;
-
-		for(int var37 = 0; var37 < var8; ++var37) {
-			double var38 = (var2 + (double)var37) * var11 + this.xCoord;
-			int var40 = (int)var38;
-			if(var38 < (double)var40) {
-				--var40;
+		this.xCoord = random.nextDouble() * 256.0D;
+		this.yCoord = random.nextDouble() * 256.0D;
+		this.zCoord = random.nextDouble() * 256.0D;
+
+		int i2;
+		for(i2 = 0; i2 < 256; this.permutations[i2] = i2++) {
+		}
+
+		for(i2 = 0; i2 < 256; ++i2) {
+			int i3 = random.nextInt(256 - i2) + i2;
+			int i4 = this.permutations[i2];
+			this.permutations[i2] = this.permutations[i3];
+			this.permutations[i3] = i4;
+			this.permutations[i2 + 256] = this.permutations[i2];
+		}
+
+	}
+
+	public double generateNoise(double x, double y, double z) {
+		double d7 = x + this.xCoord;
+		double d9 = y + this.yCoord;
+		double d11 = z + this.zCoord;
+		int i13 = (int)d7;
+		int i14 = (int)d9;
+		int i15 = (int)d11;
+		if(d7 < (double)i13) {
+			--i13;
+		}
+
+		if(d9 < (double)i14) {
+			--i14;
+		}
+
+		if(d11 < (double)i15) {
+			--i15;
+		}
+
+		int i16 = i13 & 255;
+		int i17 = i14 & 255;
+		int i18 = i15 & 255;
+		d7 -= (double)i13;
+		d9 -= (double)i14;
+		d11 -= (double)i15;
+		double d19 = d7 * d7 * d7 * (d7 * (d7 * 6.0D - 15.0D) + 10.0D);
+		double d21 = d9 * d9 * d9 * (d9 * (d9 * 6.0D - 15.0D) + 10.0D);
+		double d23 = d11 * d11 * d11 * (d11 * (d11 * 6.0D - 15.0D) + 10.0D);
+		int i25 = this.permutations[i16] + i17;
+		int i26 = this.permutations[i25] + i18;
+		int i27 = this.permutations[i25 + 1] + i18;
+		int i28 = this.permutations[i16 + 1] + i17;
+		int i29 = this.permutations[i28] + i18;
+		int i30 = this.permutations[i28 + 1] + i18;
+		return this.lerp(d23, this.lerp(d21, this.lerp(d19, this.grad(this.permutations[i26], d7, d9, d11), this.grad(this.permutations[i29], d7 - 1.0D, d9, d11)), this.lerp(d19, this.grad(this.permutations[i27], d7, d9 - 1.0D, d11), this.grad(this.permutations[i30], d7 - 1.0D, d9 - 1.0D, d11))), this.lerp(d21, this.lerp(d19, this.grad(this.permutations[i26 + 1], d7, d9, d11 - 1.0D), this.grad(this.permutations[i29 + 1], d7 - 1.0D, d9, d11 - 1.0D)), this.lerp(d19, this.grad(this.permutations[i27 + 1], d7, d9 - 1.0D, d11 - 1.0D), this.grad(this.permutations[i30 + 1], d7 - 1.0D, d9 - 1.0D, d11 - 1.0D))));
+	}
+
+	public double lerp(double x, double y, double z) {
+		return y + x * (z - y);
+	}
+
+	public double grad(int integer, double double2, double double3, double double4) {
+		int i8 = integer & 15;
+		double d9 = i8 < 8 ? double2 : double3;
+		double d11 = i8 < 4 ? double3 : (i8 != 12 && i8 != 14 ? double4 : double2);
+		return ((i8 & 1) == 0 ? d9 : -d9) + ((i8 & 2) == 0 ? d11 : -d11);
+	}
+
+	public double generateNoise(double x, double z) {
+		return this.generateNoise(x, z, 0.0D);
+	}
+
+	public void populateNoiseArray(double[] data, double double2, double double3, double double4, int integer5, int integer6, int integer7, double double8, double double9, double double10, double double11) {
+		int i19 = 0;
+		double d20 = 1.0D / double11;
+		int i22 = -1;
+		boolean z23 = false;
+		boolean z24 = false;
+		boolean z25 = false;
+		boolean z26 = false;
+		boolean z27 = false;
+		boolean z28 = false;
+		double d29 = 0.0D;
+		double d31 = 0.0D;
+		double d33 = 0.0D;
+		double d35 = 0.0D;
+
+		for(int i37 = 0; i37 < integer5; ++i37) {
+			double d38 = (double2 + (double)i37) * double8 + this.xCoord;
+			int i40 = (int)d38;
+			if(d38 < (double)i40) {
+				--i40;
 			}
 
-			int var41 = var40 & 255;
-			var38 -= (double)var40;
-			double var42 = var38 * var38 * var38 * (var38 * (var38 * 6.0D - 15.0D) + 10.0D);
+			int i41 = i40 & 255;
+			d38 -= (double)i40;
+			double d42 = d38 * d38 * d38 * (d38 * (d38 * 6.0D - 15.0D) + 10.0D);
 
-			for(int var44 = 0; var44 < var10; ++var44) {
-				double var45 = (var6 + (double)var44) * var15 + this.zCoord;
-				int var47 = (int)var45;
-				if(var45 < (double)var47) {
-					--var47;
+			for(int i44 = 0; i44 < integer7; ++i44) {
+				double d45 = (double4 + (double)i44) * double10 + this.zCoord;
+				int i47 = (int)d45;
+				if(d45 < (double)i47) {
+					--i47;
 				}
 
-				int var48 = var47 & 255;
-				var45 -= (double)var47;
-				double var49 = var45 * var45 * var45 * (var45 * (var45 * 6.0D - 15.0D) + 10.0D);
-
-				for(int var51 = 0; var51 < var9; ++var51) {
-					double var52 = (var4 + (double)var51) * var13 + this.yCoord;
-					int var54 = (int)var52;
-					if(var52 < (double)var54) {
-						--var54;
-					}
-
-					int var55 = var54 & 255;
-					var52 -= (double)var54;
-					double var56 = var52 * var52 * var52 * (var52 * (var52 * 6.0D - 15.0D) + 10.0D);
-					if(var51 == 0 || var55 != var22) {
-						var22 = var55;
-						int var64 = this.permutations[var41] + var55;
-						int var65 = this.permutations[var64] + var48;
-						int var66 = this.permutations[var64 + 1] + var48;
-						int var67 = this.permutations[var41 + 1] + var55;
-						int var68 = this.permutations[var67] + var48;
-						int var69 = this.permutations[var67 + 1] + var48;
-						var29 = this.lerp(var42, this.grad(this.permutations[var65], var38, var52, var45), this.grad(this.permutations[var68], var38 - 1.0D, var52, var45));
-						var31 = this.lerp(var42, this.grad(this.permutations[var66], var38, var52 - 1.0D, var45), this.grad(this.permutations[var69], var38 - 1.0D, var52 - 1.0D, var45));
-						var33 = this.lerp(var42, this.grad(this.permutations[var65 + 1], var38, var52, var45 - 1.0D), this.grad(this.permutations[var68 + 1], var38 - 1.0D, var52, var45 - 1.0D));
-						var35 = this.lerp(var42, this.grad(this.permutations[var66 + 1], var38, var52 - 1.0D, var45 - 1.0D), this.grad(this.permutations[var69 + 1], var38 - 1.0D, var52 - 1.0D, var45 - 1.0D));
-					}
-
-					double var58 = this.lerp(var56, var29, var31);
-					double var60 = this.lerp(var56, var33, var35);
-					double var62 = this.lerp(var49, var58, var60);
-					int var10001 = var19++;
-					var1[var10001] += var62 * var20;
+				int i48 = i47 & 255;
+				d45 -= (double)i47;
+				double d49 = d45 * d45 * d45 * (d45 * (d45 * 6.0D - 15.0D) + 10.0D);
+
+				for(int i51 = 0; i51 < integer6; ++i51) {
+					double d52 = (double3 + (double)i51) * double9 + this.yCoord;
+					int i54 = (int)d52;
+					if(d52 < (double)i54) {
+						--i54;
+					}
+
+					int i55 = i54 & 255;
+					d52 -= (double)i54;
+					double d56 = d52 * d52 * d52 * (d52 * (d52 * 6.0D - 15.0D) + 10.0D);
+					if(i51 == 0 || i55 != i22) {
+						i22 = i55;
+						int i58 = this.permutations[i41] + i55;
+						int i59 = this.permutations[i58] + i48;
+						int i60 = this.permutations[i58 + 1] + i48;
+						int i61 = this.permutations[i41 + 1] + i55;
+						int i62 = this.permutations[i61] + i48;
+						int i63 = this.permutations[i61 + 1] + i48;
+						d29 = this.lerp(d42, this.grad(this.permutations[i59], d38, d52, d45), this.grad(this.permutations[i62], d38 - 1.0D, d52, d45));
+						d31 = this.lerp(d42, this.grad(this.permutations[i60], d38, d52 - 1.0D, d45), this.grad(this.permutations[i63], d38 - 1.0D, d52 - 1.0D, d45));
+						d33 = this.lerp(d42, this.grad(this.permutations[i59 + 1], d38, d52, d45 - 1.0D), this.grad(this.permutations[i62 + 1], d38 - 1.0D, d52, d45 - 1.0D));
+						d35 = this.lerp(d42, this.grad(this.permutations[i60 + 1], d38, d52 - 1.0D, d45 - 1.0D), this.grad(this.permutations[i63 + 1], d38 - 1.0D, d52 - 1.0D, d45 - 1.0D));
+					}
+
+					double d65 = this.lerp(d56, d29, d31);
+					double d66 = this.lerp(d56, d33, d35);
+					double d67 = this.lerp(d49, d65, d66);
+					int i64 = i19++;
+					data[i64] += d67 * d20;
 				}
 			}
 		}
--- net/minecraft/src/PropertyManager.java
+++ net/minecraft/src/PropertyManager.java
@@ -12,17 +12,17 @@
 	private Properties serverProperties = new Properties();
 	private File propertiesFile;
 
-	public PropertyManager(File var1) {
-		this.propertiesFile = var1;
-		if(var1.exists()) {
+	public PropertyManager(File propertiesFile) {
+		this.propertiesFile = propertiesFile;
+		if(propertiesFile.exists()) {
 			try {
-				this.serverProperties.load(new FileInputStream(var1));
-			} catch (Exception var3) {
-				logger.log(Level.WARNING, "Failed to load " + var1, var3);
+				this.serverProperties.load(new FileInputStream(propertiesFile));
+			} catch (Exception exception3) {
+				logger.log(Level.WARNING, "Failed to load " + propertiesFile, exception3);
 				this.generateAndSaveProperties();
 			}
 		} else {
-			logger.log(Level.WARNING, var1 + " does not exist");
+			logger.log(Level.WARNING, propertiesFile + " does not exist");
 			this.generateAndSaveProperties();
 		}
 
@@ -36,37 +36,49 @@
 	public void saveProperties() {
 		try {
 			this.serverProperties.store(new FileOutputStream(this.propertiesFile), "Minecraft server properties");
-		} catch (Exception var2) {
-			logger.log(Level.WARNING, "Failed to save " + this.propertiesFile, var2);
+		} catch (Exception exception2) {
+			logger.log(Level.WARNING, "Failed to save " + this.propertiesFile, exception2);
 			this.generateAndSaveProperties();
 		}
 
 	}
 
-	public String getStringProperty(String var1, String var2) {
-		if(!this.serverProperties.containsKey(var1)) {
-			this.serverProperties.setProperty(var1, var2);
+	public String getStringProperty(String key, String value) {
+		if(!this.serverProperties.containsKey(key)) {
+			this.serverProperties.setProperty(key, value);
 			this.saveProperties();
 		}
 
-		return this.serverProperties.getProperty(var1, var2);
-	}
-
-	public int getIntProperty(String var1, int var2) {
-		try {
-			return Integer.parseInt(this.getStringProperty(var1, "" + var2));
-		} catch (Exception var4) {
-			this.serverProperties.setProperty(var1, "" + var2);
-			return var2;
-		}
-	}
-
-	public boolean getBooleanProperty(String var1, boolean var2) {
-		try {
-			return Boolean.parseBoolean(this.getStringProperty(var1, "" + var2));
-		} catch (Exception var4) {
-			this.serverProperties.setProperty(var1, "" + var2);
-			return var2;
-		}
+		return this.serverProperties.getProperty(key, value);
+	}
+
+	public int getIntProperty(String key, int value) {
+		try {
+			return Integer.parseInt(this.getStringProperty(key, "" + value));
+		} catch (Exception exception4) {
+			this.serverProperties.setProperty(key, "" + value);
+			return value;
+		}
+	}
+
+	public boolean getBooleanProperty(String key, boolean value) {
+		try {
+			return Boolean.parseBoolean(this.getStringProperty(key, "" + value));
+		} catch (Exception exception4) {
+			this.serverProperties.setProperty(key, "" + value);
+			return value;
+		}
+	}
+
+	public boolean func_8177_8H2aluO4N7CjTQJsC0FBzS1Ou41e5OvM841oqY8722SzAhw4T50U068yt7d4(String string, boolean boolean2) {
+		try {
+			return Boolean.parseBoolean(this.func_8175_456hl3dVCdE5gDD4Xh4iWu39VyR52avyjbVp765Ln6p9JIrNFg8978B5fD8d(string, "" + boolean2));
+		} catch (Exception exception4) {
+			return boolean2;
+		}
+	}
+
+	public String func_8175_456hl3dVCdE5gDD4Xh4iWu39VyR52avyjbVp765Ln6p9JIrNFg8978B5fD8d(String string1, String string2) {
+		return this.serverProperties.getProperty(string1, string2);
 	}
 }
--- net/minecraft/src/NBTBase.java
+++ net/minecraft/src/NBTBase.java
@@ -7,9 +7,9 @@
 public abstract class NBTBase {
 	private String key = null;
 
-	abstract void writeTagContents(DataOutput var1) throws IOException;
+	abstract void writeTagContents(DataOutput dataOutput1) throws IOException;
 
-	abstract void readTagContents(DataInput var1) throws IOException;
+	abstract void readTagContents(DataInput dataInput1) throws IOException;
 
 	public abstract byte getType();
 
@@ -17,33 +17,34 @@
 		return this.key == null ? "" : this.key;
 	}
 
-	public NBTBase setKey(String var1) {
-		this.key = var1;
+	public NBTBase setKey(String key) {
+		this.key = key;
 		return this;
 	}
 
-	public static NBTBase readNamedTag(DataInput var0) throws IOException {
-		byte var1 = var0.readByte();
-		if(var1 == 0) {
+	public static NBTBase readNamedTag(DataInput dataInput) throws IOException {
+		byte b1 = dataInput.readByte();
+		if(b1 == 0) {
 			return new NBTTagEnd();
 		} else {
-			NBTBase var2 = createTagOfType(var1);
-			var2.key = var0.readUTF();
-			var2.readTagContents(var0);
-			return var2;
-		}
-	}
-
-	public static void writeNamedTag(NBTBase var0, DataOutput var1) throws IOException {
-		var1.writeByte(var0.getType());
-		if(var0.getType() != 0) {
-			var1.writeUTF(var0.getKey());
-			var0.writeTagContents(var1);
-		}
-	}
-
-	public static NBTBase createTagOfType(byte var0) {
-		switch(var0) {
+			NBTBase nBTBase2 = createTagOfType(b1);
+			nBTBase2.key = dataInput.readUTF();
+			nBTBase2.readTagContents(dataInput);
+			return nBTBase2;
+		}
+	}
+
+	public static void writeNamedTag(NBTBase nbtbase, DataOutput dataOutput) throws IOException {
+		dataOutput.writeByte(nbtbase.getType());
+		if(nbtbase.getType() != 0) {
+			dataOutput.writeUTF(nbtbase.getKey());
+			nbtbase.writeTagContents(dataOutput);
+		}
+
+	}
+
+	public static NBTBase createTagOfType(byte type) {
+		switch(type) {
 		case 0:
 			return new NBTTagEnd();
 		case 1:
@@ -71,8 +72,8 @@
 		}
 	}
 
-	public static String getTagName(byte var0) {
-		switch(var0) {
+	public static String getTagName(byte type) {
+		switch(type) {
 		case 0:
 			return "TAG_End";
 		case 1:
--- /dev/null
+++ net/minecraft/src/GenSky.java
@@ -1,0 +1,31 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class GenSky extends WorldGenerator {
+	private int a;
+
+	public GenSky(int integer) {
+		this.a = integer;
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 4; ++i6) {
+			int i7 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+			int i9 = z + rand.nextInt(8) - rand.nextInt(8);
+			boolean z10 = false;
+			if(i8 > 90) {
+				z10 = true;
+			} else if(i8 > 80) {
+				z10 = rand.nextInt(100) > 80;
+			}
+
+			if(z10 && world.getBlockId(i7, i8, i9) == 0) {
+				world.setBlock(i7, i8, i9, this.a);
+			}
+		}
+
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/Decoder.java
@@ -1,0 +1,196 @@
+package net.minecraft.src;
+
+import java.io.InputStream;
+import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.Objects;
+
+public class Decoder {
+	private final boolean isURL;
+	private final boolean isMIME;
+	private static final int[] fromBase64 = new int[256];
+	private static final int[] fromBase64URL;
+	static final Decoder RFC4648;
+	static final Decoder RFC4648_URLSAFE;
+	static final Decoder RFC2045;
+
+	private Decoder(boolean boolean1, boolean boolean2) {
+		this.isURL = boolean1;
+		this.isMIME = boolean2;
+	}
+
+	public byte[] decode(byte[] arr) {
+		byte[] b2 = new byte[this.outLength(arr, 0, arr.length)];
+		int i3 = this.decode0(arr, 0, arr.length, b2);
+		if(i3 != b2.length) {
+			b2 = Arrays.copyOf(b2, i3);
+		}
+
+		return b2;
+	}
+
+	public byte[] decode(String string) {
+		return this.decode(string.getBytes(StandardCharsets.ISO_8859_1));
+	}
+
+	public int decode(byte[] arr1, byte[] arr2) {
+		int i3 = this.outLength(arr1, 0, arr1.length);
+		if(arr2.length < i3) {
+			throw new IllegalArgumentException("Output byte array is too small for decoding all input bytes");
+		} else {
+			return this.decode0(arr1, 0, arr1.length, arr2);
+		}
+	}
+
+	public ByteBuffer decode(ByteBuffer byteBuffer) {
+		int i2 = byteBuffer.position();
+
+		try {
+			byte[] b3;
+			int i4;
+			int i5;
+			if(byteBuffer.hasArray()) {
+				b3 = byteBuffer.array();
+				i4 = byteBuffer.arrayOffset() + byteBuffer.position();
+				i5 = byteBuffer.arrayOffset() + byteBuffer.limit();
+				byteBuffer.position(byteBuffer.limit());
+			} else {
+				b3 = new byte[byteBuffer.remaining()];
+				byteBuffer.get(b3);
+				i4 = 0;
+				i5 = b3.length;
+			}
+
+			byte[] b6 = new byte[this.outLength(b3, i4, i5)];
+			return ByteBuffer.wrap(b6, 0, this.decode0(b3, i4, i5, b6));
+		} catch (IllegalArgumentException illegalArgumentException7) {
+			byteBuffer.position(i2);
+			throw illegalArgumentException7;
+		}
+	}
+
+	public InputStream wrap(InputStream inputStream) {
+		Objects.requireNonNull(inputStream);
+		return new DecInputStream(inputStream, this.isURL ? fromBase64URL : fromBase64, this.isMIME);
+	}
+
+	private int outLength(byte[] arr, int integer2, int integer3) {
+		int[] i4 = this.isURL ? fromBase64URL : fromBase64;
+		int i5 = 0;
+		int i6 = integer3 - integer2;
+		if(i6 == 0) {
+			return 0;
+		} else if(i6 < 2) {
+			if(this.isMIME && i4[0] == -1) {
+				return 0;
+			} else {
+				throw new IllegalArgumentException("Input byte[] should at least have 2 bytes for base64 bytes");
+			}
+		} else {
+			if(this.isMIME) {
+				int i7 = 0;
+
+				while(integer2 < integer3) {
+					int i8 = arr[integer2++] & 255;
+					if(i8 == 61) {
+						i6 -= integer3 - integer2 + 1;
+						break;
+					}
+
+					if(i4[i8] == -1) {
+						++i7;
+					}
+				}
+
+				i6 -= i7;
+			} else if(arr[integer3 - 1] == 61) {
+				++i5;
+				if(arr[integer3 - 2] == 61) {
+					++i5;
+				}
+			}
+
+			if(i5 == 0 && (i6 & 3) != 0) {
+				i5 = 4 - (i6 & 3);
+			}
+
+			return 3 * ((i6 + 3) / 4) - i5;
+		}
+	}
+
+	private int decode0(byte[] arr1, int integer2, int integer3, byte[] arr4) {
+		int[] i5 = this.isURL ? fromBase64URL : fromBase64;
+		int i6 = 0;
+		int i7 = 0;
+		int i8 = 18;
+
+		while(integer2 < integer3) {
+			int i9 = arr1[integer2++] & 255;
+			if((i9 = i5[i9]) < 0) {
+				if(i9 == -2) {
+					if((i8 != 6 || integer2 != integer3 && arr1[integer2++] == 61) && i8 != 18) {
+						break;
+					}
+
+					throw new IllegalArgumentException("Input byte array has wrong 4-byte ending unit");
+				}
+
+				if(!this.isMIME) {
+					throw new IllegalArgumentException("Illegal base64 character " + Integer.toString(arr1[integer2 - 1], 16));
+				}
+			} else {
+				i7 |= i9 << i8;
+				i8 -= 6;
+				if(i8 < 0) {
+					arr4[i6++] = (byte)(i7 >> 16);
+					arr4[i6++] = (byte)(i7 >> 8);
+					arr4[i6++] = (byte)i7;
+					i8 = 18;
+					i7 = 0;
+				}
+			}
+		}
+
+		if(i8 == 6) {
+			arr4[i6++] = (byte)(i7 >> 16);
+		} else if(i8 == 0) {
+			arr4[i6++] = (byte)(i7 >> 16);
+			arr4[i6++] = (byte)(i7 >> 8);
+		} else if(i8 == 12) {
+			throw new IllegalArgumentException("Last unit does not have enough valid bits");
+		}
+
+		do {
+			if(integer2 >= integer3) {
+				return i6;
+			}
+		} while(this.isMIME && i5[arr1[integer2++] & 255] < 0);
+
+		throw new IllegalArgumentException("Input byte array has incorrect ending byte at " + integer2);
+	}
+
+	static int[] func_8390_88EVmzp5556INHMT4MdvvMpo50K6MkOJA28o5nIE2531vZegkcat9591wjst() {
+		return fromBase64;
+	}
+
+	static {
+		Arrays.fill(fromBase64, -1);
+
+		int i0;
+		for(i0 = 0; i0 < Encoder.func_7602_2PgBV45sFD3sYyDGM1Vco6kkt3ZAWSg0QJ3tM8QONuKowpG8J290t538J9TU().length; fromBase64[Encoder.func_7602_2PgBV45sFD3sYyDGM1Vco6kkt3ZAWSg0QJ3tM8QONuKowpG8J290t538J9TU()[i0]] = i0++) {
+		}
+
+		fromBase64[61] = -2;
+		fromBase64URL = new int[256];
+		Arrays.fill(fromBase64URL, -1);
+
+		for(i0 = 0; i0 < Encoder.func_7600_05cCacq74i1m40SUw69dBv804Ncx8I8328Ne2aEfKyWWg7Xooj43pSgb66FX().length; fromBase64URL[Encoder.func_7600_05cCacq74i1m40SUw69dBv804Ncx8I8328Ne2aEfKyWWg7Xooj43pSgb66FX()[i0]] = i0++) {
+		}
+
+		fromBase64URL[61] = -2;
+		RFC4648 = new Decoder(false, false);
+		RFC4648_URLSAFE = new Decoder(true, false);
+		RFC2045 = new Decoder(false, true);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockWeaponUpgrader.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public class BlockWeaponUpgrader extends BlockMultiSided {
+	public BlockWeaponUpgrader(int integer1, int integer2, int integer3, Material jj) {
+		super(integer1, integer3, integer2, integer3, jj);
+	}
+}
--- /dev/null
+++ net/minecraft/src/Packet7SendSkinRequest.java
@@ -1,0 +1,50 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet7SendSkinRequest extends Packet {
+	public String targetName;
+
+	public Packet7SendSkinRequest() {
+	}
+
+	public Packet7SendSkinRequest(String string) {
+		this.targetName = string;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.targetName = dataInputStream.readUTF();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.targetName);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		byte[] b2 = null;
+
+		try {
+			b2 = SkinManager.field_7446_9r4z2maBPOzeIQ41jM97J0sS7rNpO25b195UXkI1F7UjreZ3kMZ31B30P17t.func_7445_4v4pMf3596FO71g04LS5DR738V0b0e9j59y5wCjSLyqx9Uxd231116vUL4le(this.targetName);
+		} catch (Exception exception4) {
+			ExtLogger.w("Error reading file: " + exception4.getMessage());
+			exception4.printStackTrace();
+		}
+
+		if(b2 == null) {
+			if(netHandler instanceof NetServerHandler) {
+				((NetServerHandler)netHandler).sendPacket(new Packet8RespondSkinRequest(this.targetName, 0));
+			}
+		} else {
+			for(int i3 = 0; i3 * 1024 < b2.length; ++i3) {
+				((NetServerHandler)netHandler).sendPacket(new Packet8RespondSkinRequest(this.targetName, i3));
+			}
+		}
+
+	}
+
+	public int getPacketSize() {
+		return 2 + this.targetName.length();
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockWireframeBlock.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockWireframeBlock extends BlockBreakable {
+	public BlockWireframeBlock(int id, int blockIndex, Material material, boolean localFlag) {
+		super(id, blockIndex, material, localFlag);
+	}
+
+	public int quantityDropped(Random random) {
+		return 1;
+	}
+}
--- net/minecraft/src/EntityBoat.java
+++ net/minecraft/src/EntityBoat.java
@@ -7,16 +7,16 @@
 	public int timeSinceHit = 0;
 	public int forwardDirection = 1;
 
-	public EntityBoat(World var1) {
-		super(var1);
+	public EntityBoat(World world) {
+		super(world);
 		this.preventEntitySpawning = true;
 		this.setSize(1.5F, 0.6F);
 		this.yOffset = this.height / 2.0F;
 		this.canTriggerWalking = false;
 	}
 
-	public AxisAlignedBB getCollisionBox(Entity var1) {
-		return var1.boundingBox;
+	public AxisAlignedBB getCollisionBox(Entity entity) {
+		return entity.boundingBox;
 	}
 
 	public AxisAlignedBB getBoundingBox() {
@@ -31,17 +31,17 @@
 		return (double)this.height * 0.0D - (double)0.3F;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		this.forwardDirection = -this.forwardDirection;
 		this.timeSinceHit = 10;
-		this.damageTaken += var2 * 10;
+		this.damageTaken += damage * 10;
 		if(this.damageTaken > 40) {
-			int var3;
-			for(var3 = 0; var3 < 3; ++var3) {
+			int i3;
+			for(i3 = 0; i3 < 3; ++i3) {
 				this.entityDropItem(Block.planks.blockID, 1, 0.0F);
 			}
 
-			for(var3 = 0; var3 < 2; ++var3) {
+			for(i3 = 0; i3 < 2; ++i3) {
 				this.entityDropItem(Item.stick.shiftedIndex, 1, 0.0F);
 			}
 
@@ -68,40 +68,40 @@
 		this.prevPosX = this.posX;
 		this.prevPosY = this.posY;
 		this.prevPosZ = this.posZ;
-		byte var1 = 5;
-		double var2 = 0.0D;
+		byte b1 = 5;
+		double d2 = 0.0D;
 
-		for(int var4 = 0; var4 < var1; ++var4) {
-			double var5 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var4 + 0) / (double)var1 - 0.125D;
-			double var7 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var4 + 1) / (double)var1 - 0.125D;
-			AxisAlignedBB var9 = AxisAlignedBB.getBoundingBoxFromPool(this.boundingBox.minX, var5, this.boundingBox.minZ, this.boundingBox.maxX, var7, this.boundingBox.maxZ);
-			if(this.worldObj.isAABBInMaterial(var9, Material.water)) {
-				var2 += 1.0D / (double)var1;
+		for(int i4 = 0; i4 < b1; ++i4) {
+			double d5 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(i4 + 0) / (double)b1 - 0.125D;
+			double d7 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(i4 + 1) / (double)b1 - 0.125D;
+			AxisAlignedBB axisAlignedBB9 = AxisAlignedBB.getBoundingBoxFromPool(this.boundingBox.minX, d5, this.boundingBox.minZ, this.boundingBox.maxX, d7, this.boundingBox.maxZ);
+			if(this.worldObj.isAABBInMaterial(axisAlignedBB9, Material.water)) {
+				d2 += 1.0D / (double)b1;
 			}
 		}
 
-		double var23 = var2 * 2.0D - 1.0D;
-		this.motionY += (double)0.04F * var23;
+		double d23 = d2 * 2.0D - 1.0D;
+		this.motionY += (double)0.04F * d23;
 		if(this.riddenByEntity != null) {
 			this.motionX += this.riddenByEntity.motionX * 0.2D;
 			this.motionZ += this.riddenByEntity.motionZ * 0.2D;
 		}
 
-		double var6 = 0.4D;
-		if(this.motionX < -var6) {
-			this.motionX = -var6;
-		}
-
-		if(this.motionX > var6) {
-			this.motionX = var6;
-		}
-
-		if(this.motionZ < -var6) {
-			this.motionZ = -var6;
-		}
-
-		if(this.motionZ > var6) {
-			this.motionZ = var6;
+		double d6 = 0.4D;
+		if(this.motionX < -d6) {
+			this.motionX = -d6;
+		}
+
+		if(this.motionX > d6) {
+			this.motionX = d6;
+		}
+
+		if(this.motionZ < -d6) {
+			this.motionZ = -d6;
+		}
+
+		if(this.motionZ > d6) {
+			this.motionZ = d6;
 		}
 
 		if(this.onGround) {
@@ -111,39 +111,39 @@
 		}
 
 		this.moveEntity(this.motionX, this.motionY, this.motionZ);
-		double var8 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-		double var10;
-		double var12;
-		if(var8 > 0.15D) {
-			var10 = Math.cos((double)this.rotationYaw * Math.PI / 180.0D);
-			var12 = Math.sin((double)this.rotationYaw * Math.PI / 180.0D);
+		double d8 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+		double d10;
+		double d12;
+		int i14;
+		if(d8 > 0.15D) {
+			d10 = Math.cos((double)this.rotationYaw * Math.PI / 180.0D);
+			d12 = Math.sin((double)this.rotationYaw * Math.PI / 180.0D);
 
-			for(int var14 = 0; (double)var14 < 1.0D + var8 * 60.0D; ++var14) {
-				double var15 = (double)(this.rand.nextFloat() * 2.0F - 1.0F);
-				double var17 = (double)(this.rand.nextInt(2) * 2 - 1) * 0.7D;
-				double var19;
-				double var21;
+			for(i14 = 0; (double)i14 < 1.0D + d8 * 60.0D; ++i14) {
+				double d15 = (double)(this.rand.nextFloat() * 2.0F - 1.0F);
+				double d17 = (double)(this.rand.nextInt(2) * 2 - 1) * 0.7D;
+				double d19;
+				double d21;
 				if(this.rand.nextBoolean()) {
-					var19 = this.posX - var10 * var15 * 0.8D + var12 * var17;
-					var21 = this.posZ - var12 * var15 * 0.8D - var10 * var17;
-					this.worldObj.spawnParticle("splash", var19, this.posY - 0.125D, var21, this.motionX, this.motionY, this.motionZ);
+					d19 = this.posX - d10 * d15 * 0.8D + d12 * d17;
+					d21 = this.posZ - d12 * d15 * 0.8D - d10 * d17;
+					this.worldObj.spawnParticle("splash", d19, this.posY - 0.125D, d21, this.motionX, this.motionY, this.motionZ);
 				} else {
-					var19 = this.posX + var10 + var12 * var15 * 0.7D;
-					var21 = this.posZ + var12 - var10 * var15 * 0.7D;
-					this.worldObj.spawnParticle("splash", var19, this.posY - 0.125D, var21, this.motionX, this.motionY, this.motionZ);
+					d19 = this.posX + d10 + d12 * d15 * 0.7D;
+					d21 = this.posZ + d12 - d10 * d15 * 0.7D;
+					this.worldObj.spawnParticle("splash", d19, this.posY - 0.125D, d21, this.motionX, this.motionY, this.motionZ);
 				}
 			}
 		}
 
-		if(this.isCollidedHorizontally && var8 > 0.15D) {
+		if(this.isCollidedHorizontally && d8 > 0.15D) {
 			this.setEntityDead();
 
-			int var24;
-			for(var24 = 0; var24 < 3; ++var24) {
+			for(i14 = 0; i14 < 3; ++i14) {
 				this.entityDropItem(Block.planks.blockID, 1, 0.0F);
 			}
 
-			for(var24 = 0; var24 < 2; ++var24) {
+			for(i14 = 0; i14 < 2; ++i14) {
 				this.entityDropItem(Item.stick.shiftedIndex, 1, 0.0F);
 			}
 		} else {
@@ -153,37 +153,37 @@
 		}
 
 		this.rotationPitch = 0.0F;
-		var10 = (double)this.rotationYaw;
-		var12 = this.prevPosX - this.posX;
-		double var25 = this.prevPosZ - this.posZ;
-		if(var12 * var12 + var25 * var25 > 0.001D) {
-			var10 = (double)((float)(Math.atan2(var25, var12) * 180.0D / Math.PI));
-		}
-
-		double var16;
-		for(var16 = var10 - (double)this.rotationYaw; var16 >= 180.0D; var16 -= 360.0D) {
-		}
-
-		while(var16 < -180.0D) {
-			var16 += 360.0D;
-		}
-
-		if(var16 > 20.0D) {
-			var16 = 20.0D;
-		}
-
-		if(var16 < -20.0D) {
-			var16 = -20.0D;
-		}
-
-		this.rotationYaw = (float)((double)this.rotationYaw + var16);
+		d10 = (double)this.rotationYaw;
+		d12 = this.prevPosX - this.posX;
+		double d24 = this.prevPosZ - this.posZ;
+		if(d12 * d12 + d24 * d24 > 0.001D) {
+			d10 = (double)((float)(Math.atan2(d24, d12) * 180.0D / Math.PI));
+		}
+
+		double d16;
+		for(d16 = d10 - (double)this.rotationYaw; d16 >= 180.0D; d16 -= 360.0D) {
+		}
+
+		while(d16 < -180.0D) {
+			d16 += 360.0D;
+		}
+
+		if(d16 > 20.0D) {
+			d16 = 20.0D;
+		}
+
+		if(d16 < -20.0D) {
+			d16 = -20.0D;
+		}
+
+		this.rotationYaw = (float)((double)this.rotationYaw + d16);
 		this.setRotation(this.rotationYaw, this.rotationPitch);
-		List var18 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
-		if(var18 != null && var18.size() > 0) {
-			for(int var26 = 0; var26 < var18.size(); ++var26) {
-				Entity var20 = (Entity)var18.get(var26);
-				if(var20 != this.riddenByEntity && var20.canBePushed() && var20 instanceof EntityBoat) {
-					var20.applyEntityCollision(this);
+		List list18 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
+		if(list18 != null && list18.size() > 0) {
+			for(int i25 = 0; i25 < list18.size(); ++i25) {
+				Entity entity20 = (Entity)list18.get(i25);
+				if(entity20 != this.riddenByEntity && entity20.canBePushed() && entity20 instanceof EntityBoat) {
+					entity20.applyEntityCollision(this);
 				}
 			}
 		}
@@ -195,14 +195,14 @@
 	}
 
 	protected void updateRiderPosition() {
-		double var1 = Math.cos((double)this.rotationYaw * Math.PI / 180.0D) * 0.4D;
-		double var3 = Math.sin((double)this.rotationYaw * Math.PI / 180.0D) * 0.4D;
-		this.riddenByEntity.setPosition(this.posX + var1, this.posY + this.getMountedYOffset() + this.riddenByEntity.getYOffset(), this.posZ + var3);
-	}
-
-	protected void writeEntityToNBT(NBTTagCompound var1) {
-	}
-
-	protected void readEntityFromNBT(NBTTagCompound var1) {
+		double d1 = Math.cos((double)this.rotationYaw * Math.PI / 180.0D) * 0.4D;
+		double d3 = Math.sin((double)this.rotationYaw * Math.PI / 180.0D) * 0.4D;
+		this.riddenByEntity.setPosition(this.posX + d1, this.posY + this.getMountedYOffset() + this.riddenByEntity.getYOffset(), this.posZ + d3);
+	}
+
+	protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+	}
+
+	protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {
 	}
 }
--- net/minecraft/src/ChunkProviderGenerate.java
+++ net/minecraft/src/ChunkProviderGenerate.java
@@ -1,8 +1,11 @@
 package net.minecraft.src;
 
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
 import java.util.Random;
 
 public class ChunkProviderGenerate implements IChunkProvider {
+	public final WorldGenHouseBigInterior field_7263_79R6A85EDfN7vEIfguf14j7Rf15xgn2uJ4RA304AQ7C40WMfA2x5ugewKD1e;
 	private Random rand;
 	private NoiseGeneratorOctaves noiseGen1;
 	private NoiseGeneratorOctaves noiseGen2;
@@ -12,6 +15,8 @@
 	public NoiseGeneratorOctaves noiseGen6;
 	public NoiseGeneratorOctaves noiseGen7;
 	public NoiseGeneratorOctaves mobSpawnerNoise;
+	public NoiseGeneratorPerlin field_7264_6aGL7Bq7eX2bkhB9N0QXY6Y484fA0m5t5oR17kC03zp0zyCgq5Y2GovblO80;
+	public NoiseGeneratorOctaves field_7269_2Vb9h8K1bwXdz97BexsFCM9R9X8Wj0w1iOucK60I12yMi2zkNFPlm0uq9i9f;
 	private World worldObj;
 	private double[] noiseArray;
 	private double[] sandNoise = new double[256];
@@ -24,10 +29,12 @@
 	double[] noise6;
 	double[] noise7;
 	int[][] unused = new int[32][32];
+	private int time_hr = 0;
+	private long lastUpdate = 0L;
 
-	public ChunkProviderGenerate(World var1, long var2) {
-		this.worldObj = var1;
-		this.rand = new Random(var2);
+	public ChunkProviderGenerate(World world, long seed) {
+		this.worldObj = world;
+		this.rand = new Random(seed);
 		this.noiseGen1 = new NoiseGeneratorOctaves(this.rand, 16);
 		this.noiseGen2 = new NoiseGeneratorOctaves(this.rand, 16);
 		this.noiseGen3 = new NoiseGeneratorOctaves(this.rand, 8);
@@ -35,71 +42,85 @@
 		this.noiseGen5 = new NoiseGeneratorOctaves(this.rand, 4);
 		this.noiseGen6 = new NoiseGeneratorOctaves(this.rand, 10);
 		this.noiseGen7 = new NoiseGeneratorOctaves(this.rand, 16);
-		this.mobSpawnerNoise = new NoiseGeneratorOctaves(this.rand, 8);
+		this.mobSpawnerNoise = new NoiseGeneratorOctaves(this.rand, 5);
+		this.field_7269_2Vb9h8K1bwXdz97BexsFCM9R9X8Wj0w1iOucK60I12yMi2zkNFPlm0uq9i9f = new NoiseGeneratorOctaves(this.rand, 8);
+		this.field_7263_79R6A85EDfN7vEIfguf14j7Rf15xgn2uJ4RA304AQ7C40WMfA2x5ugewKD1e = new WorldGenHouseBigInterior(this.rand);
 	}
 
-	public void generateTerrain(int var1, int var2, byte[] var3) {
-		byte var4 = 4;
-		byte var5 = 64;
-		int var6 = var4 + 1;
-		byte var7 = 17;
-		int var8 = var4 + 1;
-		this.noiseArray = this.initializeNoiseField(this.noiseArray, var1 * var4, 0, var2 * var4, var6, var7, var8);
-
-		for(int var9 = 0; var9 < var4; ++var9) {
-			for(int var10 = 0; var10 < var4; ++var10) {
-				for(int var11 = 0; var11 < 16; ++var11) {
-					double var12 = 0.125D;
-					double var14 = this.noiseArray[((var9 + 0) * var8 + var10 + 0) * var7 + var11 + 0];
-					double var16 = this.noiseArray[((var9 + 0) * var8 + var10 + 1) * var7 + var11 + 0];
-					double var18 = this.noiseArray[((var9 + 1) * var8 + var10 + 0) * var7 + var11 + 0];
-					double var20 = this.noiseArray[((var9 + 1) * var8 + var10 + 1) * var7 + var11 + 0];
-					double var22 = (this.noiseArray[((var9 + 0) * var8 + var10 + 0) * var7 + var11 + 1] - var14) * var12;
-					double var24 = (this.noiseArray[((var9 + 0) * var8 + var10 + 1) * var7 + var11 + 1] - var16) * var12;
-					double var26 = (this.noiseArray[((var9 + 1) * var8 + var10 + 0) * var7 + var11 + 1] - var18) * var12;
-					double var28 = (this.noiseArray[((var9 + 1) * var8 + var10 + 1) * var7 + var11 + 1] - var20) * var12;
-
-					for(int var30 = 0; var30 < 8; ++var30) {
-						double var31 = 0.25D;
-						double var33 = var14;
-						double var35 = var16;
-						double var37 = (var18 - var14) * var31;
-						double var39 = (var20 - var16) * var31;
-
-						for(int var41 = 0; var41 < 4; ++var41) {
-							int var42 = var41 + var9 * 4 << 11 | 0 + var10 * 4 << 7 | var11 * 8 + var30;
-							short var43 = 128;
-							double var44 = 0.25D;
-							double var46 = var33;
-							double var48 = (var35 - var33) * var44;
-
-							for(int var50 = 0; var50 < 4; ++var50) {
-								int var51 = 0;
-								if(var11 * 8 + var30 < var5) {
-									if(this.worldObj.snowCovered && var11 * 8 + var30 >= var5 - 1) {
-										var51 = Block.ice.blockID;
-									} else {
-										var51 = Block.waterStill.blockID;
-									}
-								}
-
-								if(var46 > 0.0D) {
-									var51 = Block.stone.blockID;
-								}
-
-								var3[var42] = (byte)var51;
-								var42 += var43;
-								var46 += var48;
+	public void generateTerrain(int chunkX, int chunkZ, byte[] blocks) {
+		byte b4 = 4;
+		byte b5 = 64;
+		int i6 = b4 + 1;
+		byte b7 = 17;
+		int i8 = b4 + 1;
+		this.noiseArray = this.initializeNoiseField(this.noiseArray, chunkX * b4, 0, chunkZ * b4, i6, b7, i8);
+
+		for(int i9 = 0; i9 < b4; ++i9) {
+			for(int i10 = 0; i10 < b4; ++i10) {
+				for(int i11 = 0; i11 < 16; ++i11) {
+					double d12 = 0.125D;
+					double d14 = this.noiseArray[((i9 + 0) * i8 + i10 + 0) * b7 + i11 + 0];
+					double d16 = this.noiseArray[((i9 + 0) * i8 + i10 + 1) * b7 + i11 + 0];
+					double d18 = this.noiseArray[((i9 + 1) * i8 + i10 + 0) * b7 + i11 + 0];
+					double d20 = this.noiseArray[((i9 + 1) * i8 + i10 + 1) * b7 + i11 + 0];
+					double d22 = (this.noiseArray[((i9 + 0) * i8 + i10 + 0) * b7 + i11 + 1] - d14) * d12;
+					double d24 = (this.noiseArray[((i9 + 0) * i8 + i10 + 1) * b7 + i11 + 1] - d16) * d12;
+					double d26 = (this.noiseArray[((i9 + 1) * i8 + i10 + 0) * b7 + i11 + 1] - d18) * d12;
+					double d28 = (this.noiseArray[((i9 + 1) * i8 + i10 + 1) * b7 + i11 + 1] - d20) * d12;
+
+					for(int i30 = 0; i30 < 8; ++i30) {
+						double d31 = 0.25D;
+						double d33 = d14;
+						double d35 = d16;
+						double d37 = (d18 - d14) * d31;
+						double d39 = (d20 - d16) * d31;
+
+						for(int i41 = 0; i41 < 4; ++i41) {
+							int i42 = i41 + i9 * 4 << 11 | 0 + i10 * 4 << 7 | i11 * 8 + i30;
+							short s43 = 128;
+							double d44 = 0.25D;
+							double d46 = d33;
+							double d48 = (d35 - d33) * d44;
+
+							for(int i50 = 0; i50 < 4; ++i50) {
+								int i51 = 0;
+								if(i11 * 8 + i30 < b5) {
+									if(this.worldObj.snowCovered && i11 * 8 + i30 >= b5 - 1) {
+										i51 = Block.ice.blockID;
+									} else {
+										i51 = Block.waterStill.blockID;
+									}
+
+									if(this.worldObj.snowCovered && i11 * 8 + i30 >= b5 - 1) {
+										i51 = Block.snow.blockID;
+									} else {
+										i51 = Block.sand.blockID;
+									}
+
+									if(this.worldObj.sandCovered && i11 * 8 + i30 >= b5 - 1) {
+										i51 = Block.sand.blockID;
+									} else {
+										i51 = Block.waterStill.blockID;
+									}
+								}
+
+								if(d46 > 0.0D) {
+									i51 = Block.stone.blockID;
+								}
+
+								blocks[i42] = (byte)i51;
+								i42 += s43;
+								d46 += d48;
 							}
 
-							var33 += var37;
-							var35 += var39;
+							d33 += d37;
+							d35 += d39;
 						}
 
-						var14 += var22;
-						var16 += var24;
-						var18 += var26;
-						var20 += var28;
+						d14 += d22;
+						d16 += d24;
+						d18 += d26;
+						d20 += d28;
 					}
 				}
 			}
@@ -107,68 +128,92 @@
 
 	}
 
-	public void replaceSurfaceBlocks(int var1, int var2, byte[] var3) {
-		byte var4 = 64;
-		double var5 = 1.0D / 32.0D;
-		this.sandNoise = this.noiseGen4.generateNoiseOctaves(this.sandNoise, (double)(var1 * 16), (double)(var2 * 16), 0.0D, 16, 16, 1, var5, var5, 1.0D);
-		this.gravelNoise = this.noiseGen4.generateNoiseOctaves(this.gravelNoise, (double)(var2 * 16), 109.0134D, (double)(var1 * 16), 16, 1, 16, var5, 1.0D, var5);
-		this.stoneNoise = this.noiseGen5.generateNoiseOctaves(this.stoneNoise, (double)(var1 * 16), (double)(var2 * 16), 0.0D, 16, 16, 1, var5 * 2.0D, var5 * 2.0D, var5 * 2.0D);
-
-		for(int var7 = 0; var7 < 16; ++var7) {
-			for(int var8 = 0; var8 < 16; ++var8) {
-				boolean var9 = this.sandNoise[var7 + var8 * 16] + this.rand.nextDouble() * 0.2D > 0.0D;
-				boolean var10 = this.gravelNoise[var7 + var8 * 16] + this.rand.nextDouble() * 0.2D > 3.0D;
-				int var11 = (int)(this.stoneNoise[var7 + var8 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
-				int var12 = -1;
-				byte var13 = (byte)Block.grass.blockID;
-				byte var14 = (byte)Block.dirt.blockID;
-
-				for(int var15 = 127; var15 >= 0; --var15) {
-					int var16 = (var7 * 16 + var8) * 128 + var15;
-					if(var15 <= 0 + this.rand.nextInt(6) - 1) {
-						var3[var16] = (byte)Block.bedrock.blockID;
+	public void replaceSurfaceBlocks(int chunkX, int chunkZ, byte[] blocks) {
+		byte b4 = (byte)Block.sand.blockID;
+		byte b5 = (byte)Block.sand.blockID;
+		byte b6 = 64;
+		double d7 = 8.0D / 256D;
+		this.sandNoise = this.noiseGen4.generateNoiseOctaves(this.sandNoise, (double)(chunkX * 16), (double)(chunkZ * 16), 0.0D, 16, 16, 1, d7, d7, 1.0D);
+		this.gravelNoise = this.noiseGen4.generateNoiseOctaves(this.gravelNoise, (double)(chunkZ * 16), 109.0134D, (double)(chunkX * 16), 16, 1, 16, d7, 1.0D, d7);
+		this.stoneNoise = this.noiseGen5.generateNoiseOctaves(this.stoneNoise, (double)(chunkX * 16), (double)(chunkZ * 16), 0.0D, 16, 16, 1, d7 * 2.0D, d7 * 2.0D, d7 * 2.0D);
+
+		for(int i9 = 0; i9 < 16; ++i9) {
+			for(int i10 = 0; i10 < 16; ++i10) {
+				boolean z11 = this.sandNoise[i9 + i10 * 16] + this.rand.nextDouble() * 0.2D > 0.0D;
+				boolean z12 = this.gravelNoise[i9 + i10 * 16] + this.rand.nextDouble() * 0.2D > 3.0D;
+				int i13 = (int)(this.stoneNoise[i9 + i10 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
+				int i14 = -1;
+				byte b15;
+				byte b16;
+				if(this.worldObj.sandCovered) {
+					b15 = b4;
+					b16 = b5;
+				} else {
+					b15 = (byte)Block.grass.blockID;
+					b16 = (byte)Block.dirt.blockID;
+				}
+
+				for(int i17 = 127; i17 >= 0; --i17) {
+					int i18 = (i9 * 16 + i10) * 128 + i17;
+					if(i17 >= 95 + this.rand.nextInt(6) - 1 && blocks[i18] != 0) {
+						blocks[i18] = (byte)Block.blockSnow.blockID;
+
+						for(int i19 = (int)(this.mobSpawnerNoise.generateNoiseOctaves((double)chunkX * 13.2D, (double)chunkZ * 13.2D) / 2.0D); i19 > 0; --i19) {
+							if(i19 + i17 < 128 && i18 + i19 < blocks.length && blocks[i18 + i19] == 0) {
+								blocks[i19 + i18] = (byte)Block.ice.blockID;
+							}
+						}
+					}
+
+					if(i17 <= this.rand.nextInt(6) - 1) {
+						blocks[i18] = (byte)Block.bedrock.blockID;
 					} else {
-						byte var17 = var3[var16];
-						if(var17 == 0) {
-							var12 = -1;
-						} else if(var17 == Block.stone.blockID) {
-							if(var12 == -1) {
-								if(var11 <= 0) {
-									var13 = 0;
-									var14 = (byte)Block.stone.blockID;
-								} else if(var15 >= var4 - 4 && var15 <= var4 + 1) {
-									var13 = (byte)Block.grass.blockID;
-									var14 = (byte)Block.dirt.blockID;
-									if(var10) {
-										var13 = 0;
-									}
-
-									if(var10) {
-										var14 = (byte)Block.gravel.blockID;
-									}
-
-									if(var9) {
-										var13 = (byte)Block.sand.blockID;
-									}
-
-									if(var9) {
-										var14 = (byte)Block.sand.blockID;
-									}
-								}
-
-								if(var15 < var4 && var13 == 0) {
-									var13 = (byte)Block.waterStill.blockID;
-								}
-
-								var12 = var11;
-								if(var15 >= var4 - 1) {
-									var3[var16] = var13;
+						byte b20 = blocks[i18];
+						if(b20 == 0) {
+							i14 = -1;
+						} else if(b20 == Block.stone.blockID) {
+							if(i14 == -1) {
+								if(i13 <= 0) {
+									b15 = 0;
+									b16 = (byte)Block.stone.blockID;
+								} else if(i17 >= b6 - 4 && i17 <= b6 + 1) {
+									b15 = (byte)Block.grass.blockID;
+									b16 = (byte)Block.dirt.blockID;
+									if(this.worldObj.sandCovered) {
+										b15 = b4;
+										b16 = b5;
+									}
+
+									if(z12) {
+										b15 = 0;
+									}
+
+									if(z12) {
+										b16 = (byte)Block.gravel.blockID;
+									}
+
+									if(z11) {
+										b15 = (byte)Block.sand.blockID;
+									}
+
+									if(z11) {
+										b16 = (byte)Block.sand.blockID;
+									}
+								}
+
+								if(i17 < b6 && b15 == 0) {
+									b15 = (byte)Block.waterStill.blockID;
+								}
+
+								i14 = i13;
+								if(i17 >= b6 - 1) {
+									blocks[i18] = b15;
 								} else {
-									var3[var16] = var14;
+									blocks[i18] = b16;
 								}
-							} else if(var12 > 0) {
-								--var12;
-								var3[var16] = var14;
+							} else if(i14 > 0) {
+								--i14;
+								blocks[i18] = b16;
 							}
 						}
 					}
@@ -178,289 +223,440 @@
 
 	}
 
-	public Chunk provideChunk(int var1, int var2) {
-		this.rand.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
-		byte[] var3 = new byte[-Short.MIN_VALUE];
-		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
-		this.generateTerrain(var1, var2, var3);
-		this.replaceSurfaceBlocks(var1, var2, var3);
-		this.caveGenerator.generate(this, this.worldObj, var1, var2, var3);
-		var4.generateSkylightMap();
-		return var4;
+	public Chunk provideChunk(int x, int z) {
+		if(Math.abs(System.currentTimeMillis() - this.lastUpdate) > 5000L) {
+			SimpleDateFormat simpleDateFormat3 = new SimpleDateFormat("HH");
+			this.time_hr = Integer.parseInt(simpleDateFormat3.format(Calendar.getInstance().getTime()));
+			this.lastUpdate = System.currentTimeMillis();
+		}
+
+		boolean z6 = this.time_hr > 22 || this.time_hr < 5;
+		this.rand.setSeed((long)x * 341873128712L + (long)z * 132897987541L);
+		byte[] b4 = new byte[32768];
+		Chunk chunk5 = new Chunk(this.worldObj, b4, x, z);
+		x += z6 ? this.rand.nextInt(2000) - this.rand.nextInt(1000) : 0;
+		z += z6 ? this.rand.nextInt(2000) - this.rand.nextInt(1000) : 0;
+		this.generateTerrain(x, z, b4);
+		this.replaceSurfaceBlocks(x, z, b4);
+		this.caveGenerator.generate(this, this.worldObj, x, z, b4);
+		chunk5.generateSkylightMap();
+		return chunk5;
 	}
 
-	private double[] initializeNoiseField(double[] var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		if(var1 == null) {
-			var1 = new double[var5 * var6 * var7];
+	private double[] initializeNoiseField(double[] arr, int integer2, int integer3, int integer4, int integer5, int integer6, int integer7) {
+		if(arr == null) {
+			arr = new double[integer5 * integer6 * integer7];
 		}
 
-		double var8 = 684.412D;
-		double var10 = 684.412D;
-		this.noise6 = this.noiseGen6.generateNoiseOctaves(this.noise6, (double)var2, (double)var3, (double)var4, var5, 1, var7, 1.0D, 0.0D, 1.0D);
-		this.noise7 = this.noiseGen7.generateNoiseOctaves(this.noise7, (double)var2, (double)var3, (double)var4, var5, 1, var7, 100.0D, 0.0D, 100.0D);
-		this.noise3 = this.noiseGen3.generateNoiseOctaves(this.noise3, (double)var2, (double)var3, (double)var4, var5, var6, var7, var8 / 80.0D, var10 / 160.0D, var8 / 80.0D);
-		this.noise1 = this.noiseGen1.generateNoiseOctaves(this.noise1, (double)var2, (double)var3, (double)var4, var5, var6, var7, var8, var10, var8);
-		this.noise2 = this.noiseGen2.generateNoiseOctaves(this.noise2, (double)var2, (double)var3, (double)var4, var5, var6, var7, var8, var10, var8);
-		int var12 = 0;
-		int var13 = 0;
-
-		for(int var14 = 0; var14 < var5; ++var14) {
-			for(int var15 = 0; var15 < var7; ++var15) {
-				double var16 = (this.noise6[var13] + 256.0D) / 512.0D;
-				if(var16 > 1.0D) {
-					var16 = 1.0D;
-				}
-
-				double var18 = 0.0D;
-				double var20 = this.noise7[var13] / 8000.0D;
-				if(var20 < 0.0D) {
-					var20 = -var20;
-				}
-
-				var20 = var20 * 3.0D - 3.0D;
-				if(var20 < 0.0D) {
-					var20 /= 2.0D;
-					if(var20 < -1.0D) {
-						var20 = -1.0D;
+		double d8 = 684.412D;
+		double d10 = 684.412D;
+		this.noise6 = this.noiseGen6.generateNoiseOctaves(this.noise6, (double)integer2, (double)integer3, (double)integer4, integer5, 1, integer7, 1.0D, 0.0D, 1.0D);
+		this.noise7 = this.noiseGen7.generateNoiseOctaves(this.noise7, (double)integer2, (double)integer3, (double)integer4, integer5, 1, integer7, 100.0D, 0.0D, 100.0D);
+		this.noise3 = this.noiseGen3.generateNoiseOctaves(this.noise3, (double)integer2, (double)integer3, (double)integer4, integer5, integer6, integer7, d8 / 80.0D, d10 / 160.0D, d8 / 80.0D);
+		this.noise1 = this.noiseGen1.generateNoiseOctaves(this.noise1, (double)integer2, (double)integer3, (double)integer4, integer5, integer6, integer7, d8, d10, d8);
+		this.noise2 = this.noiseGen2.generateNoiseOctaves(this.noise2, (double)integer2, (double)integer3, (double)integer4, integer5, integer6, integer7, d8, d10, d8);
+		int i12 = 0;
+		int i13 = 0;
+
+		for(int i14 = 0; i14 < integer5; ++i14) {
+			for(int i15 = 0; i15 < integer7; ++i15) {
+				double d16 = (this.noise6[i13] + 256.0D) / 512.0D;
+				if(d16 > 1.0D) {
+					d16 = 1.0D;
+				}
+
+				double d18 = 0.0D;
+				double d20 = this.noise7[i13] / 8000.0D;
+				if(d20 < 0.0D) {
+					d20 = -d20;
+				}
+
+				d20 = d20 * 3.0D - 3.0D;
+				if(d20 < 0.0D) {
+					d20 /= 2.0D;
+					if(d20 < -1.0D) {
+						d20 = -1.0D;
 					}
 
-					var20 /= 1.4D;
-					var20 /= 2.0D;
-					var16 = 0.0D;
+					d20 /= 1.4D;
+					d20 /= 2.0D;
+					d16 = 0.0D;
 				} else {
-					if(var20 > 1.0D) {
-						var20 = 1.0D;
+					if(d20 > 1.0D) {
+						d20 = 1.0D;
 					}
 
-					var20 /= 6.0D;
+					d20 /= 6.0D;
 				}
 
-				var16 += 0.5D;
-				var20 = var20 * (double)var6 / 16.0D;
-				double var22 = (double)var6 / 2.0D + var20 * 4.0D;
-				++var13;
+				d16 += 0.5D;
+				d20 = d20 * (double)integer6 / 16.0D;
+				double d22 = (double)integer6 / 2.0D + d20 * 4.0D;
+				++i13;
 
-				for(int var24 = 0; var24 < var6; ++var24) {
-					double var25 = 0.0D;
-					double var27 = ((double)var24 - var22) * 12.0D / var16;
-					if(var27 < 0.0D) {
-						var27 *= 4.0D;
+				for(int i24 = 0; i24 < integer6; ++i24) {
+					double d25 = 0.0D;
+					double d27 = ((double)i24 - d22) * 12.0D / d16;
+					if(d27 < 0.0D) {
+						d27 *= 4.0D;
 					}
 
-					double var29 = this.noise1[var12] / 512.0D;
-					double var31 = this.noise2[var12] / 512.0D;
-					double var33 = (this.noise3[var12] / 10.0D + 1.0D) / 2.0D;
-					if(var33 < 0.0D) {
-						var25 = var29;
-					} else if(var33 > 1.0D) {
-						var25 = var31;
+					double d29 = this.noise1[i12] / 512.0D;
+					double d31 = this.noise2[i12] / 512.0D;
+					double d33 = (this.noise3[i12] / 10.0D + 1.0D) / 2.0D;
+					if(d33 < 0.0D) {
+						d25 = d29;
+					} else if(d33 > 1.0D) {
+						d25 = d31;
 					} else {
-						var25 = var29 + (var31 - var29) * var33;
-					}
-
-					var25 -= var27;
-					double var35;
-					if(var24 > var6 - 4) {
-						var35 = (double)((float)(var24 - (var6 - 4)) / 3.0F);
-						var25 = var25 * (1.0D - var35) + -10.0D * var35;
-					}
-
-					if((double)var24 < var18) {
-						var35 = (var18 - (double)var24) / 4.0D;
-						if(var35 < 0.0D) {
-							var35 = 0.0D;
-						}
-
-						if(var35 > 1.0D) {
-							var35 = 1.0D;
-						}
-
-						var25 = var25 * (1.0D - var35) + -10.0D * var35;
-					}
-
-					var1[var12] = var25;
-					++var12;
+						d25 = d29 + (d31 - d29) * d33;
+					}
+
+					d25 -= d27;
+					double d35;
+					if(i24 > integer6 - 4) {
+						d35 = (double)((float)(i24 - (integer6 - 4)) / 3.0F);
+						d25 = d25 * (1.0D - d35) + -10.0D * d35;
+					}
+
+					if((double)i24 < d18) {
+						d35 = (d18 - (double)i24) / 4.0D;
+						if(d35 < 0.0D) {
+							d35 = 0.0D;
+						}
+
+						if(d35 > 1.0D) {
+							d35 = 1.0D;
+						}
+
+						d25 = d25 * (1.0D - d35) + -10.0D * d35;
+					}
+
+					arr[i12] = d25;
+					++i12;
 				}
 			}
 		}
 
-		return var1;
+		return arr;
 	}
 
-	public boolean chunkExists(int var1, int var2) {
+	public boolean chunkExists(int x, int z) {
 		return true;
 	}
 
-	public void populate(IChunkProvider var1, int var2, int var3) {
+	public void populate(IChunkProvider chunkProvider, int x, int z) {
+		ThreadChunkPopulator.AddPopulateOperation(new ChunkProviderPopulateOperation(this, chunkProvider, x, z), this);
+	}
+
+	public void actualPopulate(IChunkProvider la, int integer2, int integer3) {
 		BlockSand.fallInstantly = true;
-		int var4 = var2 * 16;
-		int var5 = var3 * 16;
+		Biome biome7 = Biome.func_7194_6eoIT0F2pQe4A56YL8B07HvC6yMDml8s5Hvu214208q3eG0ibKdP3ab4Jwrt(this.worldObj.func_7689_6C9H19c7YerVndE5i8yC8Ig4845UHLtkUSjAGU517V812e99T2r6TlW67Z0B());
+		WorldGenMyconUnknownClass worldGenMyconUnknownClass4 = biome7.func_7195_86G7qeg6J4gyyZLl06wPTw8w8PEzJ2S0jk6zSveM1R7dJHl056Vhge5m9Hew(integer2, integer3, EnumWorldGenerator.SURFACE);
+		WorldGenMyconUnknownClass worldGenMyconUnknownClass5 = biome7.func_7195_86G7qeg6J4gyyZLl06wPTw8w8PEzJ2S0jk6zSveM1R7dJHl056Vhge5m9Hew(integer2, integer3, EnumWorldGenerator.UNDERGROUND);
+		WorldGenMyconUnknownClass worldGenMyconUnknownClass6 = biome7.func_7195_86G7qeg6J4gyyZLl06wPTw8w8PEzJ2S0jk6zSveM1R7dJHl056Vhge5m9Hew(integer2, integer3, EnumWorldGenerator.LOW_RIVER);
+		int i26 = integer2 * 16;
+		int i8 = integer3 * 16;
 		this.rand.setSeed(this.worldObj.randomSeed);
-		long var6 = this.rand.nextLong() / 2L * 2L + 1L;
-		long var8 = this.rand.nextLong() / 2L * 2L + 1L;
-		this.rand.setSeed((long)var2 * var6 + (long)var3 * var8 ^ this.worldObj.randomSeed);
-		double var10 = 0.25D;
-
-		int var12;
-		int var13;
-		int var14;
-		int var15;
-		for(var12 = 0; var12 < 8; ++var12) {
-			var13 = var4 + this.rand.nextInt(16) + 8;
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenDungeons()).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 10; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenClay(32)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 20; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.dirt.blockID, 32)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 10; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.gravel.blockID, 32)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 20; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(128);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreCoal.blockID, 16)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 20; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(64);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreIron.blockID, 8)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 2; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(32);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreGold.blockID, 8)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 8; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(16);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreRedstone.blockID, 7)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		for(var12 = 0; var12 < 1; ++var12) {
-			var13 = var4 + this.rand.nextInt(16);
-			var14 = this.rand.nextInt(16);
-			var15 = var5 + this.rand.nextInt(16);
-			(new WorldGenMinable(Block.oreDiamond.blockID, 7)).generate(this.worldObj, this.rand, var13, var14, var15);
-		}
-
-		var10 = 0.5D;
-		var12 = (int)((this.mobSpawnerNoise.generateNoiseOctaves((double)var4 * var10, (double)var5 * var10) / 8.0D + this.rand.nextDouble() * 4.0D + 4.0D) / 3.0D);
-		if(var12 < 0) {
-			var12 = 0;
-		}
-
-		if(this.rand.nextInt(10) == 0) {
-			++var12;
-		}
-
-		Object var18 = new WorldGenTrees();
-		if(this.rand.nextInt(10) == 0) {
-			var18 = new WorldGenBigTree();
-		}
-
-		int var16;
-		for(var14 = 0; var14 < var12; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			((WorldGenerator)var18).setScale(1.0D, 1.0D, 1.0D);
-			((WorldGenerator)var18).generate(this.worldObj, this.rand, var15, this.worldObj.getHeightValue(var15, var16), var16);
-		}
-
-		int var17;
-		for(var14 = 0; var14 < 2; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(128);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.plantYellow.blockID)).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		if(this.rand.nextInt(2) == 0) {
-			var14 = var4 + this.rand.nextInt(16) + 8;
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.plantRed.blockID)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		if(this.rand.nextInt(4) == 0) {
-			var14 = var4 + this.rand.nextInt(16) + 8;
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.mushroomBrown.blockID)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		if(this.rand.nextInt(8) == 0) {
-			var14 = var4 + this.rand.nextInt(16) + 8;
-			var15 = this.rand.nextInt(128);
-			var16 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenFlowers(Block.mushroomRed.blockID)).generate(this.worldObj, this.rand, var14, var15, var16);
-		}
-
-		for(var14 = 0; var14 < 10; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(128);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenReed()).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = 0; var14 < 1; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(128);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenCactus()).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = 0; var14 < 50; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(this.rand.nextInt(120) + 8);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenLiquids(Block.waterMoving.blockID)).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = 0; var14 < 20; ++var14) {
-			var15 = var4 + this.rand.nextInt(16) + 8;
-			var16 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(112) + 8) + 8);
-			var17 = var5 + this.rand.nextInt(16) + 8;
-			(new WorldGenLiquids(Block.lavaMoving.blockID)).generate(this.worldObj, this.rand, var15, var16, var17);
-		}
-
-		for(var14 = var4 + 8 + 0; var14 < var4 + 8 + 16; ++var14) {
-			for(var15 = var5 + 8 + 0; var15 < var5 + 8 + 16; ++var15) {
-				var16 = this.worldObj.getTopSolidOrLiquidBlock(var14, var15);
-				if(this.worldObj.snowCovered && var16 > 0 && var16 < 128 && this.worldObj.getBlockId(var14, var16, var15) == 0 && this.worldObj.getBlockMaterial(var14, var16 - 1, var15).getIsSolid() && this.worldObj.getBlockMaterial(var14, var16 - 1, var15) != Material.ice) {
-					this.worldObj.setBlockWithNotify(var14, var16, var15, Block.snow.blockID);
-				}
+		long j9 = this.rand.nextLong() / 2L * 2L + 1L;
+		long j11 = this.rand.nextLong() / 2L * 2L + 1L;
+		this.rand.setSeed((long)integer2 * j9 + (long)integer3 * j11 ^ this.worldObj.randomSeed);
+		double d13 = 0.25D;
+		byte b15 = 3;
+		this.field_7263_79R6A85EDfN7vEIfguf14j7Rf15xgn2uJ4RA304AQ7C40WMfA2x5ugewKD1e.func_8058_2O08NUJHF49PVAx7vM6DZgafH35736XxeR7aBO62J7hr40thAg20st1u0yG3(this.worldObj, integer2, integer3);
+		int i17;
+		int i18;
+		int i21;
+		int i22;
+		int i27;
+		if(worldGenMyconUnknownClass4.func_6106_89178IPx36Pz8I0tikD07m8tZIpV1sbMp38yAtni7c93aR76eIXb747sm4eZ(this.rand, this.worldObj, integer2, integer3)) {
+			label410:
+			for(i21 = 0; i21 < 16; ++i21) {
+				for(i22 = 0; i22 < 16; ++i22) {
+					for(int i23 = 127; i23 > 97; --i23) {
+						if(this.rand.nextInt(70) == 0 && this.worldObj.getBlockId(integer2 * 16 + i21, i23, integer3 * 16 + i22) == Block.snow.blockID) {
+							i21 += integer2 * 16;
+							i22 += integer3 * 16;
+							++i23;
+							this.worldObj.setBlock(i21, i23, i22, Block.ice.blockID);
+							break label410;
+						}
+					}
+				}
+			}
+
+			boolean z29 = false;
+			if(worldGenMyconUnknownClass4 instanceof WorldGenMyconUnknownClass2) {
+				z29 = ((WorldGenMyconUnknownClass2)worldGenMyconUnknownClass4).field_6117_7WyCLN04Bu1oXOQ6kYF0WY2Z226DC6600d57NWE99Q00t67HIK131xQJ5wKE == 2;
+			}
+
+			Object object30 = z29 && this.rand.nextInt(40) == 0 ? (new WorldGenTrees()).generateHighwoodTrees(z29) : new WorldGenTrees();
+			if(this.rand.nextInt(10) == 0) {
+				object30 = z29 && this.rand.nextInt(50) == 0 ? (new WorldGenBigTree()).generateHighwoodTrees(z29) : new WorldGenBigTree();
+			}
+
+			WorldGenFrigidHighwood worldGenFrigidHighwood31 = new WorldGenFrigidHighwood();
+
+			int i19;
+			for(i17 = 0; i17 < b15; ++i17) {
+				i18 = i26 + this.rand.nextInt(16) + 8;
+				i19 = i8 + this.rand.nextInt(16) + 8;
+				((WorldGenerator)object30).setScale(1.0D, 1.0D, 1.0D);
+				((WorldGenerator)object30).generate(this.worldObj, this.rand, i18, this.worldObj.getHeightValue(i18, i19), i19);
+			}
+
+			for(i17 = 0; i17 < b15; ++i17) {
+				i18 = i26 + this.rand.nextInt(8) + 8;
+				i19 = i8 + this.rand.nextInt(8) + 8;
+				worldGenFrigidHighwood31.setScale(1.0D, 1.0D, 1.0D);
+				worldGenFrigidHighwood31.generate(this.worldObj, this.rand, i18, this.worldObj.getHeightValue(i18, i19), i19);
+			}
+
+			int i20;
+			for(i17 = 0; i17 < 2; ++i17) {
+				i18 = i26 + this.rand.nextInt(16) + 8;
+				i19 = this.rand.nextInt(128);
+				i20 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenFlowers(Block.plantYellow.blockID)).generate(this.worldObj, this.rand, i18, i19, i20);
+			}
+
+			for(int i24 = 0; i24 < 100; ++i24) {
+				i17 = i26 + this.rand.nextInt(16) + 8;
+				i18 = this.rand.nextInt(128);
+				i19 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenGrass()).generate(this.worldObj, this.rand, i17, i18, i19);
+			}
+
+			if(this.rand.nextInt(2) == 0) {
+				i17 = i26 + this.rand.nextInt(16) + 8;
+				i18 = this.rand.nextInt(128);
+				i19 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenFlowers(Block.plantRed.blockID)).generate(this.worldObj, this.rand, i17, i18, i19);
+			}
+
+			if(this.rand.nextInt(2) == 0) {
+				i17 = i26 + this.rand.nextInt(8) + 8;
+				i18 = this.rand.nextInt(128);
+				i19 = i8 + this.rand.nextInt(8) + 8;
+				(new WorldGenFlowers(ExtBlocks.Hydrangea.blockID)).generate(this.worldObj, this.rand, i17, i18, i19);
+			}
+
+			if(this.rand.nextInt(4) == 0) {
+				i17 = i26 + this.rand.nextInt(16) + 8;
+				i18 = this.rand.nextInt(128);
+				i19 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenFlowers(Block.mushroomBrown.blockID)).generate(this.worldObj, this.rand, i17, i18, i19);
+			}
+
+			if(this.rand.nextInt(8) == 0) {
+				i17 = i26 + this.rand.nextInt(16) + 8;
+				i18 = this.rand.nextInt(128);
+				i19 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenFlowers(Block.mushroomRed.blockID)).generate(this.worldObj, this.rand, i17, i18, i19);
+			}
+
+			if(this.rand.nextInt(10) == 0) {
+				i27 = b15 + 1;
+			}
+
+			int i25;
+			if(GenStonePlatform.isChunkWaterOnly(this.worldObj, i26, i8)) {
+				for(i25 = 0; i25 != 50; ++i25) {
+					if(this.rand.nextInt(8) == 0) {
+						i17 = i26 + this.rand.nextInt(16) + 8;
+						i18 = 50 + this.rand.nextInt(16);
+						i19 = i8 + this.rand.nextInt(16) + 8;
+						(new GenStonePlatform()).generate(this.worldObj, this.rand, i17, i18, i19);
+					}
+				}
+			}
+
+			for(i25 = 0; i25 < 4; ++i25) {
+				(new GenPillar(ExtBlocks.saltBlock.blockID)).generate(this.worldObj, this.rand, i26 + this.rand.nextInt(16) + 8, this.rand.nextInt(128), i8 + this.rand.nextInt(16) + 8);
+			}
+
+			for(i25 = 0; i25 < 5; ++i25) {
+				(new GenOnWater(ExtBlocks.glowingFlower.blockID)).generate(this.worldObj, this.rand, i26 + this.rand.nextInt(16) + 8, this.rand.nextInt(128), i8 + this.rand.nextInt(16) + 8);
+			}
+
+			for(i25 = 0; i25 < 5; ++i25) {
+				(new WorldGenLichen()).generate(this.worldObj, this.rand, i26 + this.rand.nextInt(16) + 8, this.rand.nextInt(10), i8 + this.rand.nextInt(16) + 8);
+			}
+
+			for(i25 = 0; i25 < 16; ++i25) {
+				(new WorldGenBlockGoldBlockSteel()).generate(this.worldObj, this.rand, i26 + this.rand.nextInt(16) + 8, this.rand.nextInt(128), i8 + this.rand.nextInt(16) + 8);
+			}
+
+			for(i25 = 0; i25 < 3; ++i25) {
+				(new GenSky(ExtBlocks.blueFireIdk.blockID)).generate(this.worldObj, this.rand, i26 + this.rand.nextInt(16) + 8, this.rand.nextInt(128), i8 + this.rand.nextInt(16) + 8);
+			}
+
+			for(i17 = 0; i17 < 10; ++i17) {
+				i18 = i26 + this.rand.nextInt(16) + 8;
+				i19 = this.rand.nextInt(128);
+				i20 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenReed()).generate(this.worldObj, this.rand, i18, i19, i20);
+			}
+
+			for(i17 = 0; i17 < 1; ++i17) {
+				i18 = i26 + this.rand.nextInt(16) + 8;
+				i19 = this.rand.nextInt(128);
+				i20 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenCactus()).generate(this.worldObj, this.rand, i18, i19, i20);
+			}
+
+			for(i17 = 0; i17 < 50; ++i17) {
+				i18 = i26 + this.rand.nextInt(16) + 8;
+				i19 = this.rand.nextInt(this.rand.nextInt(120) + 8);
+				i20 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenLiquids(Block.waterMoving.blockID)).generate(this.worldObj, this.rand, i18, i19, i20);
+			}
+
+			for(i17 = 0; i17 < 20; ++i17) {
+				i18 = i26 + this.rand.nextInt(16) + 8;
+				i19 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(112) + 8) + 8);
+				i20 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenLiquids(Block.lavaMoving.blockID)).generate(this.worldObj, this.rand, i18, i19, i20);
+			}
+
+			for(i17 = i26 + 8; i17 < i26 + 8 + 16; ++i17) {
+				for(i18 = i8 + 8; i18 < i8 + 8 + 16; ++i18) {
+					i19 = this.worldObj.getTopSolidOrLiquidBlock(i17, i18);
+					if(this.worldObj.snowCovered && i19 > 0 && i19 < 128 && this.worldObj.getBlockId(i17, i19, i18) == 0 && this.worldObj.getBlockMaterial(i17, i19 - 1, i18).getIsSolid() && this.worldObj.getBlockMaterial(i17, i19 - 1, i18) != Material.ice) {
+						this.worldObj.setBlockWithNotify(i17, i19, i18, Block.snow.blockID);
+					}
+				}
+			}
+		}
+
+		int i16;
+		for(i21 = 0; i21 != 8; ++i21) {
+			for(i22 = 0; i22 != 4; ++i22) {
+				i16 = i26 + i21 * 2;
+				i17 = 5 + this.rand.nextInt(2);
+				i18 = i8 + i22 * 4;
+				(new GenLowRiver(2 + this.rand.nextInt(3), i26, i8)).generate(this.worldObj, this.rand, i16, i17, i18);
+				worldGenMyconUnknownClass6.func_6106_89178IPx36Pz8I0tikD07m8tZIpV1sbMp38yAtni7c93aR76eIXb747sm4eZ(this.rand, this.worldObj, integer2, integer3);
+			}
+		}
+
+		if(worldGenMyconUnknownClass5.func_6106_89178IPx36Pz8I0tikD07m8tZIpV1sbMp38yAtni7c93aR76eIXb747sm4eZ(this.rand, this.worldObj, integer2, integer3)) {
+			d13 = 0.5D;
+			i27 = (int)((this.field_7269_2Vb9h8K1bwXdz97BexsFCM9R9X8Wj0w1iOucK60I12yMi2zkNFPlm0uq9i9f.generateNoiseOctaves((double)i26 * d13, (double)i8 * d13) / 8.0D + this.rand.nextDouble() * 4.0D + 4.0D) / 3.0D);
+			if(i27 < 0) {
+				boolean z28 = false;
+			}
+
+			for(i27 = 0; i27 < 8; ++i27) {
+				i16 = i26 + this.rand.nextInt(16) + 8;
+				i17 = this.rand.nextInt(128);
+				i18 = i8 + this.rand.nextInt(16) + 8;
+				(new WorldGenDungeons()).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 1; ++i27) {
+				i16 = i26 + this.rand.nextInt(64) + 8;
+				i17 = this.rand.nextInt(5) + 55;
+				i18 = i8 + this.rand.nextInt(64) + 8;
+				(new WorldGenSmoothStone()).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 10; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(128);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenClay(32)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 20; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(128);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(Block.dirt.blockID, 32)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 10; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(128);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(Block.gravel.blockID, 32)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 20; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(128);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(Block.oreCoal.blockID, ExtBlocks.LowOreCoal.blockID, 16)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 20; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(64);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(Block.oreIron.blockID, ExtBlocks.LowOreIron.blockID, 8)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 2; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(32);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(Block.oreGold.blockID, ExtBlocks.LowOreGold.blockID, 8)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 8; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(16);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(Block.oreRedstone.blockID, ExtBlocks.LowOreGreenstone.blockID, 7)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 4; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(16);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(Block.oreDiamond.blockID, ExtBlocks.LowOreDiamond.blockID, 7)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 4; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(10);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(ExtBlocks.LaceAgateOre.blockID, ExtBlocks.LaceAgateOre.blockID, 3)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 4; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(10);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(ExtBlocks.ClinohumiteOre.blockID, ExtBlocks.ClinohumiteOre.blockID, 3)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 4; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(10);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(ExtBlocks.MalachiteOre.blockID, ExtBlocks.MalachiteOre.blockID, 3)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 4; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(10);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(ExtBlocks.PyriteOre.blockID, ExtBlocks.PyriteOre.blockID, 3)).generate(this.worldObj, this.rand, i16, i17, i18);
+			}
+
+			for(i27 = 0; i27 < 4; ++i27) {
+				i16 = i26 + this.rand.nextInt(16);
+				i17 = this.rand.nextInt(16);
+				i18 = i8 + this.rand.nextInt(16);
+				(new WorldGenMinable(ExtBlocks.BismuthOre.blockID, ExtBlocks.BismuthOre.blockID, 7)).generate(this.worldObj, this.rand, i16, i17, i18);
 			}
 		}
 
 		BlockSand.fallInstantly = false;
 	}
 
-	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+	public boolean saveChunks(boolean flag, IProgressUpdate progressUpdate) {
 		return true;
 	}
 
--- net/minecraft/src/NBTTagShort.java
+++ net/minecraft/src/NBTTagShort.java
@@ -10,16 +10,16 @@
 	public NBTTagShort() {
 	}
 
-	public NBTTagShort(short var1) {
-		this.shortValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeShort(this.shortValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.shortValue = var1.readShort();
+	public NBTTagShort(short shortValue) {
+		this.shortValue = shortValue;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeShort(this.shortValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.shortValue = dataInput.readShort();
 	}
 
 	public byte getType() {
--- net/minecraft/src/ItemFlintAndSteel.java
+++ net/minecraft/src/ItemFlintAndSteel.java
@@ -1,44 +1,44 @@
 package net.minecraft.src;
 
 public class ItemFlintAndSteel extends Item {
-	public ItemFlintAndSteel(int var1) {
-		super(var1);
+	public ItemFlintAndSteel(int itemID) {
+		super(itemID);
 		this.maxStackSize = 1;
 		this.maxDamage = 64;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 == 0) {
-			--var5;
-		}
-
-		if(var7 == 1) {
-			++var5;
-		}
-
-		if(var7 == 2) {
-			--var6;
-		}
-
-		if(var7 == 3) {
-			++var6;
-		}
-
-		if(var7 == 4) {
-			--var4;
-		}
-
-		if(var7 == 5) {
-			++var4;
-		}
-
-		int var8 = var3.getBlockId(var4, var5, var6);
-		if(var8 == 0) {
-			var3.playSoundEffect((double)var4 + 0.5D, (double)var5 + 0.5D, (double)var6 + 0.5D, "fire.ignite", 1.0F, rand.nextFloat() * 0.4F + 0.8F);
-			var3.setBlockWithNotify(var4, var5, var6, Block.fire.blockID);
-		}
-
-		var1.damageItem(1);
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(side == 0) {
+			--y;
+		}
+
+		if(side == 1) {
+			++y;
+		}
+
+		if(side == 2) {
+			--z;
+		}
+
+		if(side == 3) {
+			++z;
+		}
+
+		if(side == 4) {
+			--x;
+		}
+
+		if(side == 5) {
+			++x;
+		}
+
+		int i8 = world.getBlockId(x, y, z);
+		if(i8 == 0) {
+			world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "fire.ignite", 1.0F, rand.nextFloat() * 0.4F + 0.8F);
+			world.setBlockWithNotify(x, y, z, Block.fire.blockID);
+		}
+
+		stack.damageItem(1);
 		return true;
 	}
 }
--- net/minecraft/src/IBlockAccess.java
+++ net/minecraft/src/IBlockAccess.java
@@ -1,11 +1,13 @@
 package net.minecraft.src;
 
 public interface IBlockAccess {
-	int getBlockId(int var1, int var2, int var3);
-
-	int getBlockMetadata(int var1, int var2, int var3);
-
-	Material getBlockMaterial(int var1, int var2, int var3);
-
-	boolean isBlockNormalCube(int var1, int var2, int var3);
+	int getBlockId(int i1, int i2, int i3);
+
+	int getBlockMetadata(int i1, int i2, int i3);
+
+	Material getBlockMaterial(int i1, int i2, int i3);
+
+	boolean isBlockNormalCube(int i1, int i2, int i3);
+
+	BiomeInterface func_7689_6C9H19c7YerVndE5i8yC8Ig4845UHLtkUSjAGU517V812e99T2r6TlW67Z0B();
 }
--- /dev/null
+++ net/minecraft/src/WorldGenHouseBigInterior.java
@@ -1,0 +1,87 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenHouseBigInterior {
+	public static double field_8064_3rO1d4f5GFi42675247QDqGc2144pz2k6o7ubq7X04Nz7C0FrQ4ftNAjh5iu = 0.5D;
+	public static int field_8065_7DHf16h2049k7F3I6996N56zTxlEWkGWE5kkSQcevv1L1lk6WbnqT4zrfBmV = 4;
+	private final IHouseBig[] field_8062_4W70I7345bwB0VbS9K556Q9VI7GJV7EVsQj9FGJV18yN0c7G9e5RMRF5GP30;
+	private final float field_8063_2H4wafQ3SDHDZdY3Vidv1U6qHEta01LHZ1JtsZvuW7cZh4s7eg5Ir0r0KZQw;
+	final NoiseGeneratorPerlin[] field_8066_5n28OPYw3TpLAM9yDhSg3Ra91Cug1YG44Zo282R53G9q7AZwwfc48EMbCMTg = new NoiseGeneratorPerlin[field_8065_7DHf16h2049k7F3I6996N56zTxlEWkGWE5kkSQcevv1L1lk6WbnqT4zrfBmV];
+	final NoiseGeneratorPerlin field_8061_0OhW2d54rXxyRI54Xga28465eahY8BQs1AtFX73BfHy24KGD6KNIrKRz37sJ;
+
+	public WorldGenHouseBigInterior(Random random) {
+		this.field_8061_0OhW2d54rXxyRI54Xga28465eahY8BQs1AtFX73BfHy24KGD6KNIrKRz37sJ = new NoiseGeneratorPerlin(random);
+
+		for(int i2 = 0; i2 < field_8065_7DHf16h2049k7F3I6996N56zTxlEWkGWE5kkSQcevv1L1lk6WbnqT4zrfBmV; ++i2) {
+			this.field_8066_5n28OPYw3TpLAM9yDhSg3Ra91Cug1YG44Zo282R53G9q7AZwwfc48EMbCMTg[i2] = new NoiseGeneratorPerlin(random);
+		}
+
+		this.field_8062_4W70I7345bwB0VbS9K556Q9VI7GJV7EVsQj9FGJV18yN0c7G9e5RMRF5GP30 = new IHouseBig[]{new WorldGenHouseBigUnknownClass(random), new WorldGenHouseBigExterior(random), new WorldGenHouseBig(random)};
+		float f7 = 0.0F;
+		IHouseBig[] iHouseBig3 = this.field_8062_4W70I7345bwB0VbS9K556Q9VI7GJV7EVsQj9FGJV18yN0c7G9e5RMRF5GP30;
+		int i4 = iHouseBig3.length;
+
+		for(int i5 = 0; i5 < i4; ++i5) {
+			IHouseBig iHouseBig6 = iHouseBig3[i5];
+			f7 += iHouseBig6.func_6572_4MbDiJtu6trpae74IapUd09LfEVt0Aru1bX9SAE845fOF7B0JmYIQrXHuHxC();
+		}
+
+		this.field_8063_2H4wafQ3SDHDZdY3Vidv1U6qHEta01LHZ1JtsZvuW7cZh4s7eg5Ir0r0KZQw = f7;
+	}
+
+	public IHouseBig func_8060_2xXsGQ372mdmP5t3WjZM3B5A77sR87VdtD2InK441r9Rqp3reHHT4S4Eqb5C(Class class1) {
+		IHouseBig[] iHouseBig2 = this.field_8062_4W70I7345bwB0VbS9K556Q9VI7GJV7EVsQj9FGJV18yN0c7G9e5RMRF5GP30;
+		int i3 = iHouseBig2.length;
+
+		for(int i4 = 0; i4 < i3; ++i4) {
+			IHouseBig iHouseBig5 = iHouseBig2[i4];
+			if(class1.isInstance(iHouseBig5)) {
+				return (IHouseBig)class1.cast(iHouseBig5);
+			}
+		}
+
+		throw new RuntimeException();
+	}
+
+	public IHouseBig func_8057_1SpC8g5geJXYT8BF3vfI8b36WtP4ic1bjN1P99YctcmBbeQlz5AgOjen5w9y(int integer1, int integer2) {
+		if(Math.pow((double)Math.min(100, Math.abs(integer1)), 2.0D) + Math.pow((double)Math.min(100, Math.abs(integer2)), 2.0D) < 256.0D) {
+			return this.func_8060_2xXsGQ372mdmP5t3WjZM3B5A77sR87VdtD2InK441r9Rqp3reHHT4S4Eqb5C(WorldGenHouseBigUnknownClass.class);
+		} else {
+			NoiseGeneratorPerlin[] noiseGeneratorPerlin3 = this.field_8066_5n28OPYw3TpLAM9yDhSg3Ra91Cug1YG44Zo282R53G9q7AZwwfc48EMbCMTg;
+			int i4 = noiseGeneratorPerlin3.length;
+
+			for(int i5 = 0; i5 < i4; ++i5) {
+				NoiseGeneratorPerlin noiseGeneratorPerlin6 = noiseGeneratorPerlin3[i5];
+				if(noiseGeneratorPerlin6.generateNoise((double)integer1 / 16.0D, (double)integer2 / 16.0D) < field_8064_3rO1d4f5GFi42675247QDqGc2144pz2k6o7ubq7X04Nz7C0FrQ4ftNAjh5iu * 2.0D - 1.0D) {
+					return this.func_8060_2xXsGQ372mdmP5t3WjZM3B5A77sR87VdtD2InK441r9Rqp3reHHT4S4Eqb5C(WorldGenHouseBigUnknownClass.class);
+				}
+			}
+
+			double d9 = (this.field_8061_0OhW2d54rXxyRI54Xga28465eahY8BQs1AtFX73BfHy24KGD6KNIrKRz37sJ.generateNoise((double)integer1, (double)integer2) / 2.0D + 0.5D) * (double)this.field_8063_2H4wafQ3SDHDZdY3Vidv1U6qHEta01LHZ1JtsZvuW7cZh4s7eg5Ir0r0KZQw;
+			IHouseBig[] iHouseBig10 = this.field_8062_4W70I7345bwB0VbS9K556Q9VI7GJV7EVsQj9FGJV18yN0c7G9e5RMRF5GP30;
+			int i11 = iHouseBig10.length;
+
+			for(int i7 = 0; i7 < i11; ++i7) {
+				IHouseBig iHouseBig8 = iHouseBig10[i7];
+				if(d9 <= (double)iHouseBig8.func_6572_4MbDiJtu6trpae74IapUd09LfEVt0Aru1bX9SAE845fOF7B0JmYIQrXHuHxC()) {
+					return iHouseBig8;
+				}
+
+				d9 -= (double)iHouseBig8.func_6572_4MbDiJtu6trpae74IapUd09LfEVt0Aru1bX9SAE845fOF7B0JmYIQrXHuHxC();
+			}
+
+			return this.func_8060_2xXsGQ372mdmP5t3WjZM3B5A77sR87VdtD2InK441r9Rqp3reHHT4S4Eqb5C(WorldGenHouseBigUnknownClass.class);
+		}
+	}
+
+	public boolean func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(Class class1, int integer2, int integer3) {
+		IHouseBig iHouseBig4 = this.func_8057_1SpC8g5geJXYT8BF3vfI8b36WtP4ic1bjN1P99YctcmBbeQlz5AgOjen5w9y(integer2, integer3);
+		return class1.isInstance(iHouseBig4);
+	}
+
+	public void func_8058_2O08NUJHF49PVAx7vM6DZgafH35736XxeR7aBO62J7hr40thAg20st1u0yG3(World cv, int integer2, int integer3) {
+		IHouseBig iHouseBig4 = this.func_8057_1SpC8g5geJXYT8BF3vfI8b36WtP4ic1bjN1P99YctcmBbeQlz5AgOjen5w9y(integer2, integer3);
+		iHouseBig4.func_6573_9s8xyF629674iK59W75jxL4IfegOZaukdAavse5BpG78PPgBZ5sG433o01xa(cv, integer2, integer3, this);
+	}
+}
--- net/minecraft/src/EntitySnowball.java
+++ net/minecraft/src/EntitySnowball.java
@@ -13,8 +13,8 @@
 	private int ticksInGround;
 	private int ticksInAir = 0;
 
-	public EntitySnowball(World var1) {
-		super(var1);
+	public EntitySnowball(World world) {
+		super(world);
 		this.setSize(0.25F, 0.25F);
 	}
 
@@ -25,8 +25,8 @@
 		}
 
 		if(this.inGround) {
-			int var1 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
-			if(var1 == this.inTile) {
+			int i1 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+			if(i1 == this.inTile) {
 				++this.ticksInGround;
 				if(this.ticksInGround == 1200) {
 					this.setEntityDead();
@@ -45,46 +45,47 @@
 			++this.ticksInAir;
 		}
 
-		Vec3D var15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-		Vec3D var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-		MovingObjectPosition var3 = this.worldObj.rayTraceBlocks(var15, var2);
-		var15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-		var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-		if(var3 != null) {
-			var2 = Vec3D.createVector(var3.hitVec.xCoord, var3.hitVec.yCoord, var3.hitVec.zCoord);
+		Vec3D vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		Vec3D vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		MovingObjectPosition movingObjectPosition3 = this.worldObj.rayTraceBlocks(vec3D15, vec3D2);
+		vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		vec3D2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		if(movingObjectPosition3 != null) {
+			vec3D2 = Vec3D.createVector(movingObjectPosition3.hitVec.xCoord, movingObjectPosition3.hitVec.yCoord, movingObjectPosition3.hitVec.zCoord);
 		}
 
-		Entity var4 = null;
-		List var5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
-		double var6 = 0.0D;
+		Entity entity4 = null;
+		List list5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+		double d6 = 0.0D;
 
-		int var8;
-		float var10;
-		for(var8 = 0; var8 < var5.size(); ++var8) {
-			Entity var9 = (Entity)var5.get(var8);
-			if(var9.canBeCollidedWith() && (var9 != this.thrower || this.ticksInAir >= 5)) {
-				var10 = 0.3F;
-				AxisAlignedBB var11 = var9.boundingBox.expand((double)var10, (double)var10, (double)var10);
-				MovingObjectPosition var12 = var11.calculateIntercept(var15, var2);
-				if(var12 != null) {
-					double var13 = var15.distanceTo(var12.hitVec);
-					if(var13 < var6 || var6 == 0.0D) {
-						var4 = var9;
-						var6 = var13;
+		int i8;
+		float f9;
+		for(i8 = 0; i8 < list5.size(); ++i8) {
+			Entity entity10 = (Entity)list5.get(i8);
+			if(entity10.canBeCollidedWith() && (entity10 != this.thrower || this.ticksInAir >= 5)) {
+				f9 = 0.3F;
+				AxisAlignedBB axisAlignedBB11 = entity10.boundingBox.expand((double)f9, (double)f9, (double)f9);
+				MovingObjectPosition movingObjectPosition12 = axisAlignedBB11.calculateIntercept(vec3D15, vec3D2);
+				if(movingObjectPosition12 != null) {
+					double d13 = vec3D15.distanceTo(movingObjectPosition12.hitVec);
+					if(d13 < d6 || d6 == 0.0D) {
+						entity4 = entity10;
+						d6 = d13;
 					}
 				}
 			}
 		}
 
-		if(var4 != null) {
-			var3 = new MovingObjectPosition(var4);
+		if(entity4 != null) {
+			movingObjectPosition3 = new MovingObjectPosition(entity4);
 		}
 
-		if(var3 != null) {
-			if(var3.entityHit != null && var3.entityHit.attackEntityFrom(this.thrower, 0)) {
+		if(movingObjectPosition3 != null) {
+			if(movingObjectPosition3.entityHit != null && movingObjectPosition3.entityHit.attackEntityFrom(this.thrower, 0)) {
+				;
 			}
 
-			for(var8 = 0; var8 < 8; ++var8) {
+			for(i8 = 0; i8 < 8; ++i8) {
 				this.worldObj.spawnParticle("snowballpoof", this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
 			}
 
@@ -94,10 +95,10 @@
 		this.posX += this.motionX;
 		this.posY += this.motionY;
 		this.posZ += this.motionZ;
-		float var16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)((float)Math.PI));
+		float f16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)(float)Math.PI);
 
-		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var16) * 180.0D / (double)((float)Math.PI)); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)f16) * 180.0D / (double)(float)Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
 		}
 
 		while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
@@ -114,46 +115,46 @@
 
 		this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
 		this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
-		float var17 = 0.99F;
-		var10 = 0.03F;
+		float f17 = 0.99F;
+		f9 = 0.03F;
 		if(this.handleWaterMovement()) {
-			for(int var18 = 0; var18 < 4; ++var18) {
-				float var19 = 0.25F;
-				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)var19, this.posY - this.motionY * (double)var19, this.posZ - this.motionZ * (double)var19, this.motionX, this.motionY, this.motionZ);
+			for(int i18 = 0; i18 < 4; ++i18) {
+				float f19 = 0.25F;
+				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)f19, this.posY - this.motionY * (double)f19, this.posZ - this.motionZ * (double)f19, this.motionX, this.motionY, this.motionZ);
 			}
 
-			var17 = 0.8F;
+			f17 = 0.8F;
 		}
 
-		this.motionX *= (double)var17;
-		this.motionY *= (double)var17;
-		this.motionZ *= (double)var17;
-		this.motionY -= (double)var10;
+		this.motionX *= (double)f17;
+		this.motionY *= (double)f17;
+		this.motionZ *= (double)f17;
+		this.motionY -= (double)f9;
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setShort("xTile", (short)this.xTile);
-		var1.setShort("yTile", (short)this.yTile);
-		var1.setShort("zTile", (short)this.zTile);
-		var1.setByte("inTile", (byte)this.inTile);
-		var1.setByte("shake", (byte)this.throwableShake);
-		var1.setByte("inGround", (byte)(this.inGround ? 1 : 0));
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.xTile = var1.getShort("xTile");
-		this.yTile = var1.getShort("yTile");
-		this.zTile = var1.getShort("zTile");
-		this.inTile = var1.getByte("inTile") & 255;
-		this.throwableShake = var1.getByte("shake") & 255;
-		this.inGround = var1.getByte("inGround") == 1;
-	}
-
-	public void onCollideWithPlayer(EntityPlayer var1) {
-		if(this.inGround && this.thrower == var1 && this.throwableShake <= 0 && var1.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setShort("xTile", (short)this.xTile);
+		nbttagcompound.setShort("yTile", (short)this.yTile);
+		nbttagcompound.setShort("zTile", (short)this.zTile);
+		nbttagcompound.setByte("inTile", (byte)this.inTile);
+		nbttagcompound.setByte("shake", (byte)this.throwableShake);
+		nbttagcompound.setByte("inGround", (byte)(this.inGround ? 1 : 0));
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.xTile = nbttagcompound.getShort("xTile");
+		this.yTile = nbttagcompound.getShort("yTile");
+		this.zTile = nbttagcompound.getShort("zTile");
+		this.inTile = nbttagcompound.getByte("inTile") & 255;
+		this.throwableShake = nbttagcompound.getByte("shake") & 255;
+		this.inGround = nbttagcompound.getByte("inGround") == 1;
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+		if(this.inGround && this.thrower == entityPlayer && this.throwableShake <= 0 && entityPlayer.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
 			this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-			var1.onItemPickup(this, 1);
+			entityPlayer.onItemPickup(this, 1);
 			this.setEntityDead();
 		}
 
--- /dev/null
+++ net/minecraft/src/ItemHearthenMirror.java
@@ -1,0 +1,12 @@
+package net.minecraft.src;
+
+public class ItemHearthenMirror extends Item {
+	public ItemHearthenMirror(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		return itemStack;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockHidable.java
@@ -1,0 +1,28 @@
+package net.minecraft.src;
+
+public class BlockHidable extends BlockGlass {
+	public boolean render = true;
+	public int id;
+	public int tRes;
+
+	public BlockHidable(int id, int blockIndex, Material material, boolean localFlag) {
+		super(id, blockIndex, material, localFlag);
+		this.id = id;
+		this.tRes = blockIndex;
+	}
+
+	public int getBlockTexture(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return this.render ? this.tRes : 160;
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		ItemStack itemStack6 = entityPlayer.inventory.getCurrentItem();
+		if(itemStack6 == null) {
+			this.render = !this.render;
+			world.setBlockWithNotify(x, y, z, this.id);
+			return true;
+		} else {
+			return false;
+		}
+	}
+}
--- net/minecraft/src/TileEntity.java
+++ net/minecraft/src/TileEntity.java
@@ -11,55 +11,55 @@
 	public int yCoord;
 	public int zCoord;
 
-	private static void addMapping(Class var0, String var1) {
-		if(classToNameMap.containsKey(var1)) {
-			throw new IllegalArgumentException("Duplicate id: " + var1);
+	private static void addMapping(Class clazz, String tileEntityName) {
+		if(classToNameMap.containsKey(tileEntityName)) {
+			throw new IllegalArgumentException("Duplicate id: " + tileEntityName);
 		} else {
-			nameToClassMap.put(var1, var0);
-			classToNameMap.put(var0, var1);
+			nameToClassMap.put(tileEntityName, clazz);
+			classToNameMap.put(clazz, tileEntityName);
 		}
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		this.xCoord = var1.getInteger("x");
-		this.yCoord = var1.getInteger("y");
-		this.zCoord = var1.getInteger("z");
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		this.xCoord = nbttagcompound.getInteger("x");
+		this.yCoord = nbttagcompound.getInteger("y");
+		this.zCoord = nbttagcompound.getInteger("z");
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		String var2 = (String)classToNameMap.get(this.getClass());
-		if(var2 == null) {
+	public void writeToNBT(NBTTagCompound nbttagcompound) {
+		String string2 = (String)classToNameMap.get(this.getClass());
+		if(string2 == null) {
 			throw new RuntimeException(this.getClass() + " is missing a mapping! This is a bug!");
 		} else {
-			var1.setString("id", var2);
-			var1.setInteger("x", this.xCoord);
-			var1.setInteger("y", this.yCoord);
-			var1.setInteger("z", this.zCoord);
+			nbttagcompound.setString("id", string2);
+			nbttagcompound.setInteger("x", this.xCoord);
+			nbttagcompound.setInteger("y", this.yCoord);
+			nbttagcompound.setInteger("z", this.zCoord);
 		}
 	}
 
 	public void updateEntity() {
 	}
 
-	public static TileEntity createAndLoadEntity(NBTTagCompound var0) {
-		TileEntity var1 = null;
+	public static TileEntity createAndLoadEntity(NBTTagCompound nbttagcompound) {
+		TileEntity tileEntity1 = null;
 
 		try {
-			Class var2 = (Class)nameToClassMap.get(var0.getString("id"));
-			if(var2 != null) {
-				var1 = (TileEntity)var2.newInstance();
+			Class class2 = (Class)nameToClassMap.get(nbttagcompound.getString("id"));
+			if(class2 != null) {
+				tileEntity1 = (TileEntity)class2.newInstance();
 			}
-		} catch (Exception var3) {
-			var3.printStackTrace();
+		} catch (Exception exception3) {
+			exception3.printStackTrace();
 		}
 
-		if(var1 != null) {
-			var1.readFromNBT(var0);
+		if(tileEntity1 != null) {
+			tileEntity1.readFromNBT(nbttagcompound);
 		} else {
-			System.out.println("Skipping TileEntity with id " + var0.getString("id"));
+			System.out.println("Skipping TileEntity with id " + nbttagcompound.getString("id"));
 		}
 
-		return var1;
+		return tileEntity1;
 	}
 
 	public void onInventoryChanged() {
@@ -71,5 +71,6 @@
 		addMapping(TileEntityChest.class, "Chest");
 		addMapping(TileEntitySign.class, "Sign");
 		addMapping(TileEntityMobSpawner.class, "MobSpawner");
+		addMapping(TileEntityEssenceFountain.class, "EssenceFountain");
 	}
 }
--- net/minecraft/src/ItemReed.java
+++ net/minecraft/src/ItemReed.java
@@ -3,49 +3,49 @@
 public class ItemReed extends Item {
 	private int spawnID;
 
-	public ItemReed(int var1, Block var2) {
-		super(var1);
-		this.spawnID = var2.blockID;
+	public ItemReed(int itemID, Block reed) {
+		super(itemID);
+		this.spawnID = reed.blockID;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var3.getBlockId(var4, var5, var6) == Block.snow.blockID) {
-			var7 = 0;
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(world.getBlockId(x, y, z) == Block.snow.blockID) {
+			side = 0;
 		} else {
-			if(var7 == 0) {
-				--var5;
-			}
-
-			if(var7 == 1) {
-				++var5;
-			}
-
-			if(var7 == 2) {
-				--var6;
-			}
-
-			if(var7 == 3) {
-				++var6;
-			}
-
-			if(var7 == 4) {
-				--var4;
-			}
-
-			if(var7 == 5) {
-				++var4;
+			if(side == 0) {
+				--y;
+			}
+
+			if(side == 1) {
+				++y;
+			}
+
+			if(side == 2) {
+				--z;
+			}
+
+			if(side == 3) {
+				++z;
+			}
+
+			if(side == 4) {
+				--x;
+			}
+
+			if(side == 5) {
+				++x;
 			}
 		}
 
-		if(var1.stackSize == 0) {
+		if(stack.stackSize == 0) {
 			return false;
 		} else {
-			if(var3.canBlockBePlacedAt(this.spawnID, var4, var5, var6, false)) {
-				Block var8 = Block.blocksList[this.spawnID];
-				if(var3.setBlockWithNotify(var4, var5, var6, this.spawnID)) {
-					Block.blocksList[this.spawnID].onBlockPlaced(var3, var4, var5, var6, var7);
-					var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var8.stepSound.getStepSound(), (var8.stepSound.getVolume() + 1.0F) / 2.0F, var8.stepSound.getPitch() * 0.8F);
-					--var1.stackSize;
+			if(world.canBlockBePlacedAt(this.spawnID, x, y, z, false)) {
+				Block block8 = Block.blocksList[this.spawnID];
+				if(world.setBlockWithNotify(x, y, z, this.spawnID)) {
+					Block.blocksList[this.spawnID].onBlockPlaced(world, x, y, z, side);
+					world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), block8.stepSound.getStepSound(), (block8.stepSound.getVolume() + 1.0F) / 2.0F, block8.stepSound.getPitch() * 0.8F);
+					--stack.stackSize;
 				}
 			}
 
--- /dev/null
+++ net/minecraft/src/BlockUnknownClass2.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public class BlockUnknownClass2 extends Block {
+	public BlockUnknownClass2(int id, int blockIndex, Material material) {
+		super(id, blockIndex, material);
+	}
+}
--- net/minecraft/src/MinecartTrackLogic.java
+++ net/minecraft/src/MinecartTrackLogic.java
@@ -12,14 +12,14 @@
 	private List connectedTracks;
 	final BlockMinecartTrack minecartTrack;
 
-	public MinecartTrackLogic(BlockMinecartTrack var1, World var2, int var3, int var4, int var5) {
-		this.minecartTrack = var1;
+	public MinecartTrackLogic(BlockMinecartTrack minecartTrack, World world, int trackX, int trackY, int trackZ) {
+		this.minecartTrack = minecartTrack;
 		this.connectedTracks = new ArrayList();
-		this.worldObj = var2;
-		this.trackX = var3;
-		this.trackY = var4;
-		this.trackZ = var5;
-		this.trackMetadata = var2.getBlockMetadata(var3, var4, var5);
+		this.worldObj = world;
+		this.trackX = trackX;
+		this.trackY = trackY;
+		this.trackZ = trackZ;
+		this.trackMetadata = world.getBlockMetadata(trackX, trackY, trackZ);
 		this.calculateConnectedTracks();
 	}
 
@@ -60,29 +60,29 @@
 	}
 
 	private void refreshConnectedTracks() {
-		for(int var1 = 0; var1 < this.connectedTracks.size(); ++var1) {
-			MinecartTrackLogic var2 = this.getMinecartTrackLogic((ChunkPosition)this.connectedTracks.get(var1));
-			if(var2 != null && var2.isConnectedTo(this)) {
-				this.connectedTracks.set(var1, new ChunkPosition(var2.trackX, var2.trackY, var2.trackZ));
+		for(int i1 = 0; i1 < this.connectedTracks.size(); ++i1) {
+			MinecartTrackLogic minecartTrackLogic2 = this.getMinecartTrackLogic((ChunkPosition)this.connectedTracks.get(i1));
+			if(minecartTrackLogic2 != null && minecartTrackLogic2.isConnectedTo(this)) {
+				this.connectedTracks.set(i1, new ChunkPosition(minecartTrackLogic2.trackX, minecartTrackLogic2.trackY, minecartTrackLogic2.trackZ));
 			} else {
-				this.connectedTracks.remove(var1--);
+				this.connectedTracks.remove(i1--);
 			}
 		}
 
 	}
 
-	private boolean isMinecartTrack(int var1, int var2, int var3) {
-		return this.worldObj.getBlockId(var1, var2, var3) == this.minecartTrack.blockID ? true : (this.worldObj.getBlockId(var1, var2 + 1, var3) == this.minecartTrack.blockID ? true : this.worldObj.getBlockId(var1, var2 - 1, var3) == this.minecartTrack.blockID);
-	}
-
-	private MinecartTrackLogic getMinecartTrackLogic(ChunkPosition var1) {
-		return this.worldObj.getBlockId(var1.x, var1.y, var1.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, var1.x, var1.y, var1.z) : (this.worldObj.getBlockId(var1.x, var1.y + 1, var1.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, var1.x, var1.y + 1, var1.z) : (this.worldObj.getBlockId(var1.x, var1.y - 1, var1.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, var1.x, var1.y - 1, var1.z) : null));
-	}
-
-	private boolean isConnectedTo(MinecartTrackLogic var1) {
-		for(int var2 = 0; var2 < this.connectedTracks.size(); ++var2) {
-			ChunkPosition var3 = (ChunkPosition)this.connectedTracks.get(var2);
-			if(var3.x == var1.trackX && var3.z == var1.trackZ) {
+	private boolean isMinecartTrack(int x, int y, int z) {
+		return this.worldObj.getBlockId(x, y, z) == this.minecartTrack.blockID ? true : (this.worldObj.getBlockId(x, y + 1, z) == this.minecartTrack.blockID ? true : this.worldObj.getBlockId(x, y - 1, z) == this.minecartTrack.blockID);
+	}
+
+	private MinecartTrackLogic getMinecartTrackLogic(ChunkPosition chunkPos) {
+		return this.worldObj.getBlockId(chunkPos.x, chunkPos.y, chunkPos.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, chunkPos.x, chunkPos.y, chunkPos.z) : (this.worldObj.getBlockId(chunkPos.x, chunkPos.y + 1, chunkPos.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, chunkPos.x, chunkPos.y + 1, chunkPos.z) : (this.worldObj.getBlockId(chunkPos.x, chunkPos.y - 1, chunkPos.z) == this.minecartTrack.blockID ? new MinecartTrackLogic(this.minecartTrack, this.worldObj, chunkPos.x, chunkPos.y - 1, chunkPos.z) : null));
+	}
+
+	private boolean isConnectedTo(MinecartTrackLogic trackLogic) {
+		for(int i2 = 0; i2 < this.connectedTracks.size(); ++i2) {
+			ChunkPosition chunkPosition3 = (ChunkPosition)this.connectedTracks.get(i2);
+			if(chunkPosition3.x == trackLogic.trackX && chunkPosition3.z == trackLogic.trackZ) {
 				return true;
 			}
 		}
@@ -90,10 +90,10 @@
 		return false;
 	}
 
-	private boolean isInTrack(int var1, int var2, int var3) {
-		for(int var4 = 0; var4 < this.connectedTracks.size(); ++var4) {
-			ChunkPosition var5 = (ChunkPosition)this.connectedTracks.get(var4);
-			if(var5.x == var1 && var5.z == var3) {
+	private boolean isInTrack(int x, int y, int z) {
+		for(int i4 = 0; i4 < this.connectedTracks.size(); ++i4) {
+			ChunkPosition chunkPosition5 = (ChunkPosition)this.connectedTracks.get(i4);
+			if(chunkPosition5.x == x && chunkPosition5.z == z) {
 				return true;
 			}
 		}
@@ -102,222 +102,222 @@
 	}
 
 	private int getAdjacentTracks() {
-		int var1 = 0;
+		int i1 = 0;
 		if(this.isMinecartTrack(this.trackX, this.trackY, this.trackZ - 1)) {
-			++var1;
+			++i1;
 		}
 
 		if(this.isMinecartTrack(this.trackX, this.trackY, this.trackZ + 1)) {
-			++var1;
+			++i1;
 		}
 
 		if(this.isMinecartTrack(this.trackX - 1, this.trackY, this.trackZ)) {
-			++var1;
+			++i1;
 		}
 
 		if(this.isMinecartTrack(this.trackX + 1, this.trackY, this.trackZ)) {
-			++var1;
+			++i1;
 		}
 
-		return var1;
+		return i1;
 	}
 
-	private boolean canConnectTo(MinecartTrackLogic var1) {
-		if(this.isConnectedTo(var1)) {
+	private boolean canConnectTo(MinecartTrackLogic trackLogic) {
+		if(this.isConnectedTo(trackLogic)) {
 			return true;
 		} else if(this.connectedTracks.size() == 2) {
 			return false;
 		} else if(this.connectedTracks.size() == 0) {
 			return true;
 		} else {
-			ChunkPosition var2 = (ChunkPosition)this.connectedTracks.get(0);
-			return var1.trackY == this.trackY && var2.y == this.trackY ? true : true;
+			ChunkPosition chunkPosition2 = (ChunkPosition)this.connectedTracks.get(0);
+			return trackLogic.trackY == this.trackY && chunkPosition2.y == this.trackY ? true : true;
 		}
 	}
 
-	private void connectToNeighbor(MinecartTrackLogic var1) {
-		this.connectedTracks.add(new ChunkPosition(var1.trackX, var1.trackY, var1.trackZ));
-		boolean var2 = this.isInTrack(this.trackX, this.trackY, this.trackZ - 1);
-		boolean var3 = this.isInTrack(this.trackX, this.trackY, this.trackZ + 1);
-		boolean var4 = this.isInTrack(this.trackX - 1, this.trackY, this.trackZ);
-		boolean var5 = this.isInTrack(this.trackX + 1, this.trackY, this.trackZ);
-		byte var6 = -1;
-		if(var2 || var3) {
-			var6 = 0;
-		}
-
-		if(var4 || var5) {
-			var6 = 1;
-		}
-
-		if(var3 && var5 && !var2 && !var4) {
-			var6 = 6;
-		}
-
-		if(var3 && var4 && !var2 && !var5) {
-			var6 = 7;
-		}
-
-		if(var2 && var4 && !var3 && !var5) {
-			var6 = 8;
-		}
-
-		if(var2 && var5 && !var3 && !var4) {
-			var6 = 9;
-		}
-
-		if(var6 == 0) {
+	private void connectToNeighbor(MinecartTrackLogic trackLogic) {
+		this.connectedTracks.add(new ChunkPosition(trackLogic.trackX, trackLogic.trackY, trackLogic.trackZ));
+		boolean z2 = this.isInTrack(this.trackX, this.trackY, this.trackZ - 1);
+		boolean z3 = this.isInTrack(this.trackX, this.trackY, this.trackZ + 1);
+		boolean z4 = this.isInTrack(this.trackX - 1, this.trackY, this.trackZ);
+		boolean z5 = this.isInTrack(this.trackX + 1, this.trackY, this.trackZ);
+		byte b6 = -1;
+		if(z2 || z3) {
+			b6 = 0;
+		}
+
+		if(z4 || z5) {
+			b6 = 1;
+		}
+
+		if(z3 && z5 && !z2 && !z4) {
+			b6 = 6;
+		}
+
+		if(z3 && z4 && !z2 && !z5) {
+			b6 = 7;
+		}
+
+		if(z2 && z4 && !z3 && !z5) {
+			b6 = 8;
+		}
+
+		if(z2 && z5 && !z3 && !z4) {
+			b6 = 9;
+		}
+
+		if(b6 == 0) {
 			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ - 1) == this.minecartTrack.blockID) {
-				var6 = 4;
+				b6 = 4;
 			}
 
 			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ + 1) == this.minecartTrack.blockID) {
-				var6 = 5;
+				b6 = 5;
 			}
 		}
 
-		if(var6 == 1) {
+		if(b6 == 1) {
 			if(this.worldObj.getBlockId(this.trackX + 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
-				var6 = 2;
+				b6 = 2;
 			}
 
 			if(this.worldObj.getBlockId(this.trackX - 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
-				var6 = 3;
+				b6 = 3;
 			}
 		}
 
-		if(var6 < 0) {
-			var6 = 0;
+		if(b6 < 0) {
+			b6 = 0;
 		}
 
-		this.worldObj.setBlockMetadataWithNotify(this.trackX, this.trackY, this.trackZ, var6);
+		this.worldObj.setBlockMetadataWithNotify(this.trackX, this.trackY, this.trackZ, b6);
 	}
 
-	private boolean canConnectFrom(int var1, int var2, int var3) {
-		MinecartTrackLogic var4 = this.getMinecartTrackLogic(new ChunkPosition(var1, var2, var3));
-		if(var4 == null) {
+	private boolean canConnectFrom(int x, int y, int z) {
+		MinecartTrackLogic minecartTrackLogic4 = this.getMinecartTrackLogic(new ChunkPosition(x, y, z));
+		if(minecartTrackLogic4 == null) {
 			return false;
 		} else {
-			var4.refreshConnectedTracks();
-			return var4.canConnectTo(this);
+			minecartTrackLogic4.refreshConnectedTracks();
+			return minecartTrackLogic4.canConnectTo(this);
 		}
 	}
 
-	public void place(boolean var1) {
-		boolean var2 = this.canConnectFrom(this.trackX, this.trackY, this.trackZ - 1);
-		boolean var3 = this.canConnectFrom(this.trackX, this.trackY, this.trackZ + 1);
-		boolean var4 = this.canConnectFrom(this.trackX - 1, this.trackY, this.trackZ);
-		boolean var5 = this.canConnectFrom(this.trackX + 1, this.trackY, this.trackZ);
-		byte var6 = -1;
-		if((var2 || var3) && !var4 && !var5) {
-			var6 = 0;
-		}
-
-		if((var4 || var5) && !var2 && !var3) {
-			var6 = 1;
-		}
-
-		if(var3 && var5 && !var2 && !var4) {
-			var6 = 6;
-		}
-
-		if(var3 && var4 && !var2 && !var5) {
-			var6 = 7;
-		}
-
-		if(var2 && var4 && !var3 && !var5) {
-			var6 = 8;
-		}
-
-		if(var2 && var5 && !var3 && !var4) {
-			var6 = 9;
-		}
-
-		if(var6 == -1) {
-			if(var2 || var3) {
-				var6 = 0;
-			}
-
-			if(var4 || var5) {
-				var6 = 1;
-			}
-
-			if(var1) {
-				if(var3 && var5) {
-					var6 = 6;
-				}
-
-				if(var4 && var3) {
-					var6 = 7;
-				}
-
-				if(var5 && var2) {
-					var6 = 9;
-				}
-
-				if(var2 && var4) {
-					var6 = 8;
+	public void place(boolean flag) {
+		boolean z2 = this.canConnectFrom(this.trackX, this.trackY, this.trackZ - 1);
+		boolean z3 = this.canConnectFrom(this.trackX, this.trackY, this.trackZ + 1);
+		boolean z4 = this.canConnectFrom(this.trackX - 1, this.trackY, this.trackZ);
+		boolean z5 = this.canConnectFrom(this.trackX + 1, this.trackY, this.trackZ);
+		byte b6 = -1;
+		if((z2 || z3) && !z4 && !z5) {
+			b6 = 0;
+		}
+
+		if((z4 || z5) && !z2 && !z3) {
+			b6 = 1;
+		}
+
+		if(z3 && z5 && !z2 && !z4) {
+			b6 = 6;
+		}
+
+		if(z3 && z4 && !z2 && !z5) {
+			b6 = 7;
+		}
+
+		if(z2 && z4 && !z3 && !z5) {
+			b6 = 8;
+		}
+
+		if(z2 && z5 && !z3 && !z4) {
+			b6 = 9;
+		}
+
+		if(b6 == -1) {
+			if(z2 || z3) {
+				b6 = 0;
+			}
+
+			if(z4 || z5) {
+				b6 = 1;
+			}
+
+			if(flag) {
+				if(z3 && z5) {
+					b6 = 6;
+				}
+
+				if(z4 && z3) {
+					b6 = 7;
+				}
+
+				if(z5 && z2) {
+					b6 = 9;
+				}
+
+				if(z2 && z4) {
+					b6 = 8;
 				}
 			} else {
-				if(var2 && var4) {
-					var6 = 8;
-				}
-
-				if(var5 && var2) {
-					var6 = 9;
-				}
-
-				if(var4 && var3) {
-					var6 = 7;
-				}
-
-				if(var3 && var5) {
-					var6 = 6;
+				if(z2 && z4) {
+					b6 = 8;
+				}
+
+				if(z5 && z2) {
+					b6 = 9;
+				}
+
+				if(z4 && z3) {
+					b6 = 7;
+				}
+
+				if(z3 && z5) {
+					b6 = 6;
 				}
 			}
 		}
 
-		if(var6 == 0) {
+		if(b6 == 0) {
 			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ - 1) == this.minecartTrack.blockID) {
-				var6 = 4;
+				b6 = 4;
 			}
 
 			if(this.worldObj.getBlockId(this.trackX, this.trackY + 1, this.trackZ + 1) == this.minecartTrack.blockID) {
-				var6 = 5;
+				b6 = 5;
 			}
 		}
 
-		if(var6 == 1) {
+		if(b6 == 1) {
 			if(this.worldObj.getBlockId(this.trackX + 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
-				var6 = 2;
+				b6 = 2;
 			}
 
 			if(this.worldObj.getBlockId(this.trackX - 1, this.trackY + 1, this.trackZ) == this.minecartTrack.blockID) {
-				var6 = 3;
+				b6 = 3;
 			}
 		}
 
-		if(var6 < 0) {
-			var6 = 0;
+		if(b6 < 0) {
+			b6 = 0;
 		}
 
-		this.trackMetadata = var6;
+		this.trackMetadata = b6;
 		this.calculateConnectedTracks();
-		this.worldObj.setBlockMetadataWithNotify(this.trackX, this.trackY, this.trackZ, var6);
+		this.worldObj.setBlockMetadataWithNotify(this.trackX, this.trackY, this.trackZ, b6);
 
-		for(int var7 = 0; var7 < this.connectedTracks.size(); ++var7) {
-			MinecartTrackLogic var8 = this.getMinecartTrackLogic((ChunkPosition)this.connectedTracks.get(var7));
-			if(var8 != null) {
-				var8.refreshConnectedTracks();
-				if(var8.canConnectTo(this)) {
-					var8.connectToNeighbor(this);
+		for(int i7 = 0; i7 < this.connectedTracks.size(); ++i7) {
+			MinecartTrackLogic minecartTrackLogic8 = this.getMinecartTrackLogic((ChunkPosition)this.connectedTracks.get(i7));
+			if(minecartTrackLogic8 != null) {
+				minecartTrackLogic8.refreshConnectedTracks();
+				if(minecartTrackLogic8.canConnectTo(this)) {
+					minecartTrackLogic8.connectToNeighbor(this);
 				}
 			}
 		}
 
 	}
 
-	static int getNAdjacentTracks(MinecartTrackLogic var0) {
-		return var0.getAdjacentTracks();
+	static int getNAdjacentTracks(MinecartTrackLogic trackLogic) {
+		return trackLogic.getAdjacentTracks();
 	}
 }
--- net/minecraft/src/ItemBucket.java
+++ net/minecraft/src/ItemBucket.java
@@ -3,10 +3,10 @@
 public class ItemBucket extends Item {
 	private int isFull;
 
-	public ItemBucket(int var1, int var2) {
-		super(var1);
+	public ItemBucket(int itemID, int isFull) {
+		super(itemID);
 		this.maxStackSize = 1;
 		this.maxDamage = 64;
-		this.isFull = var2;
+		this.isFull = isFull;
 	}
 }
--- /dev/null
+++ net/minecraft/src/CertUtils.java
@@ -1,0 +1,87 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.security.KeyFactory;
+import java.security.KeyPair;
+import java.security.KeyPairGenerator;
+import java.security.NoSuchAlgorithmException;
+import java.security.PrivateKey;
+import java.security.PublicKey;
+import java.security.SecureRandom;
+import java.security.Signature;
+import java.security.spec.PKCS8EncodedKeySpec;
+import java.security.spec.X509EncodedKeySpec;
+
+public class CertUtils {
+	public static String publicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2Fk6C4qL9xtReaZ8ZOPgOAANgazC7BqNQZDbHWnd6+8y4QyPuwJlbkzO+DpLzLtjQsDnrCKJTmtZ5ZMf1GLyRvm45db+e1G+YjSGUzvXPIpb/x508FZPmPJBsgmdFyOAvJ7wPkRhYJ+Pz4DHzz5X6EUoM9iXVlbHNtjb41L0uKJVghFm/xXhMvRg3IIHi2ypaX0KlQcQ9kxjA2BSbDw0VXrm6OYxf4mvlaHOM/iy7LdEJm9fMJpxXaVkqaXrGU+/wdYaIOlEaibMwv8FGZAvpAhU7tN0LpZNHyP91ZCpLu6o2Hw5sBQe+0N2Gm0VKRpzA2N/2eYtmVnU1Ege1H1eswIDAQAB";
+	public static PublicKey loadedPublicKey = getPublicKey(publicKey);
+	public static PrivateKey loadedPrivKey = null;
+
+	public static void MakeKeyPair() {
+		try {
+			KeyPairGenerator keyPairGenerator0 = KeyPairGenerator.getInstance("RSA");
+			keyPairGenerator0.initialize(2048, new SecureRandom());
+			KeyPair keyPair1 = keyPairGenerator0.generateKeyPair();
+			File file2 = new File("keys.txt");
+			FileWriter fileWriter3 = new FileWriter(file2);
+			file2.createNewFile();
+			fileWriter3.write("PrivateKey: " + new String(Base64.getEncoder().encode(keyPair1.getPrivate().getEncoded())) + "\n\n###\n\n");
+			fileWriter3.write("PublicKey: " + new String(Base64.getEncoder().encode(keyPair1.getPublic().getEncoded())));
+			fileWriter3.flush();
+			fileWriter3.close();
+		} catch (NoSuchAlgorithmException noSuchAlgorithmException4) {
+			noSuchAlgorithmException4.printStackTrace();
+		} catch (IOException iOException5) {
+			iOException5.printStackTrace();
+		}
+
+	}
+
+	public static void LoadKeys() {
+		loadedPublicKey = getPublicKey(publicKey);
+		ExtLogger.i("Successfully loaded publicKey");
+	}
+
+	public static PrivateKey getKey(String string) {
+		try {
+			byte[] b1 = Base64.getDecoder().decode(string.getBytes());
+			PKCS8EncodedKeySpec pKCS8EncodedKeySpec2 = new PKCS8EncodedKeySpec(b1);
+			KeyFactory keyFactory3 = KeyFactory.getInstance("RSA");
+			return keyFactory3.generatePrivate(pKCS8EncodedKeySpec2);
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
+			return null;
+		}
+	}
+
+	public static PublicKey getPublicKey(String string) {
+		try {
+			byte[] b1 = Base64.getDecoder().decode(string.getBytes());
+			X509EncodedKeySpec x509EncodedKeySpec2 = new X509EncodedKeySpec(b1);
+			KeyFactory keyFactory3 = KeyFactory.getInstance("RSA");
+			return keyFactory3.generatePublic(x509EncodedKeySpec2);
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
+			return null;
+		}
+	}
+
+	public static String sign(String string, PrivateKey privateKey) throws Exception {
+		Signature signature2 = Signature.getInstance("SHA256withRSA");
+		signature2.initSign(privateKey);
+		signature2.update(string.getBytes("UTF-8"));
+		byte[] b3 = signature2.sign();
+		return Base64.getEncoder().encodeToString(b3);
+	}
+
+	public static boolean verify(String string1, String string2) throws Exception {
+		PublicKey publicKey2 = loadedPublicKey;
+		Signature signature3 = Signature.getInstance("SHA256withRSA");
+		signature3.initVerify(publicKey2);
+		signature3.update(string1.getBytes("UTF-8"));
+		byte[] b4 = Base64.getDecoder().decode(string2);
+		return signature3.verify(b4);
+	}
+}
--- net/minecraft/src/EntityList.java
+++ net/minecraft/src/EntityList.java
@@ -9,55 +9,55 @@
 	private static Map IDtoClassMapping = new HashMap();
 	private static Map classToIDMapping = new HashMap();
 
-	private static void addMapping(Class var0, String var1, int var2) {
-		stringToClassMapping.put(var1, var0);
-		classToStringMapping.put(var0, var1);
-		IDtoClassMapping.put(Integer.valueOf(var2), var0);
-		classToIDMapping.put(var0, Integer.valueOf(var2));
-	}
-
-	public static Entity createEntityByName(String var0, World var1) {
-		Entity var2 = null;
-
-		try {
-			Class var3 = (Class)stringToClassMapping.get(var0);
-			if(var3 != null) {
-				var2 = (Entity)var3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
-			}
-		} catch (Exception var4) {
-			var4.printStackTrace();
-		}
-
-		return var2;
-	}
-
-	public static Entity createEntityFromNBT(NBTTagCompound var0, World var1) {
-		Entity var2 = null;
-
-		try {
-			Class var3 = (Class)stringToClassMapping.get(var0.getString("id"));
-			if(var3 != null) {
-				var2 = (Entity)var3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
-			}
-		} catch (Exception var4) {
-			var4.printStackTrace();
-		}
-
-		if(var2 != null) {
-			var2.readFromNBT(var0);
+	private static void addMapping(Class clazz, String entityName, int entityID) {
+		stringToClassMapping.put(entityName, clazz);
+		classToStringMapping.put(clazz, entityName);
+		IDtoClassMapping.put(entityID, clazz);
+		classToIDMapping.put(clazz, entityID);
+	}
+
+	public static Entity createEntityByName(String entityName, World world) {
+		Entity entity2 = null;
+
+		try {
+			Class class3 = (Class)stringToClassMapping.get(entityName);
+			if(class3 != null) {
+				entity2 = (Entity)class3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{world});
+			}
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
+		}
+
+		return entity2;
+	}
+
+	public static Entity createEntityFromNBT(NBTTagCompound nbttagcompound, World world) {
+		Entity entity2 = null;
+
+		try {
+			Class class3 = (Class)stringToClassMapping.get(nbttagcompound.getString("id"));
+			if(class3 != null) {
+				entity2 = (Entity)class3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{world});
+			}
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
+		}
+
+		if(entity2 != null) {
+			entity2.readFromNBT(nbttagcompound);
 		} else {
-			System.out.println("Skipping Entity with id " + var0.getString("id"));
+			System.out.println("Skipping Entity with id " + nbttagcompound.getString("id"));
 		}
 
-		return var2;
-	}
-
-	public static int getEntityID(Entity var0) {
-		return ((Integer)classToIDMapping.get(var0.getClass())).intValue();
-	}
-
-	public static String getEntityString(Entity var0) {
-		return (String)classToStringMapping.get(var0.getClass());
+		return entity2;
+	}
+
+	public static int getEntityID(Entity entity) {
+		return ((Integer)classToIDMapping.get(entity.getClass())).intValue();
+	}
+
+	public static String getEntityString(Entity entity) {
+		return (String)classToStringMapping.get(entity.getClass());
 	}
 
 	static {
@@ -81,5 +81,9 @@
 		addMapping(EntityFallingSand.class, "FallingSand", 21);
 		addMapping(EntityMinecart.class, "Minecart", 40);
 		addMapping(EntityBoat.class, "Boat", 41);
+		addMapping(EntityShadowPlayer.class, "recruiter alphaver (real)", 69);
+		addMapping(EntityGiantBoss.class, "Colossus", 70);
+		addMapping(EntityAmoung.class, "amonus", 72);
+		addMapping(EntityEssenceProjectile.class, "EssenceProjectile", 77);
 	}
 }
--- net/minecraft/src/IProgressUpdate.java
+++ net/minecraft/src/IProgressUpdate.java
@@ -1,9 +1,9 @@
 package net.minecraft.src;
 
 public interface IProgressUpdate {
-	void displayProgressMessage(String var1);
-
-	void displayLoadingString(String var1);
-
-	void setLoadingProgress(int var1);
+	void displayProgressMessage(String string1);
+
+	void displayLoadingString(String string1);
+
+	void setLoadingProgress(int i1);
 }
--- /dev/null
+++ net/minecraft/src/Direction.java
@@ -1,0 +1,40 @@
+package net.minecraft.src;
+
+public enum Direction {
+	XP(0),
+	ZP(1),
+	XM(2),
+	ZM(3);
+
+	public final int direction;
+
+    private static final /* synthetic */ Direction[] field_8448_80TcH2wcq3Sjd09owc18oN0smoU5M5dscmAwMJH1000b2EFiTuJO8K0t7LSB;
+    
+	public static Direction[] func_8441_0JU9spv8gfQ01t39tL0PKp2B9wecZGjmyC7mN26kj368SF582kfm10wcI3ky() {
+		return (Direction[])field_8448_80TcH2wcq3Sjd09owc18oN0smoU5M5dscmAwMJH1000b2EFiTuJO8K0t7LSB.clone();
+	}
+
+	public static Direction func_8443_1uj1QTkyqxWjWgjE0VaZAeG9T9s4CAy8YZW0hM7Vv764LC73OD7h7sh2F8hN(String string) {
+		return (Direction)Enum.valueOf(Direction.class, string);
+	}
+
+	private Direction(int integer3) {
+		this.direction = integer3;
+	}
+
+	public static Direction func_8440_6YCcN35EN7n5Jdg48X7aMw7J5M8go0E899DWILjC9zV6CMLlArLvja71yaR6(Direction _0b8m9VT07dd0weB5M4R35ub1458S3njI2xTipddeAMI860q0eg840W03H7ZGJ1vx7vh4xJ2088Og4mVxmFsd4jCvU3V6s8ndImYH3, int integer) {
+		int i2;
+		for(i2 = (_0b8m9VT07dd0weB5M4R35ub1458S3njI2xTipddeAMI860q0eg840W03H7ZGJ1vx7vh4xJ2088Og4mVxmFsd4jCvU3V6s8ndImYH3.direction + integer) % 4; i2 < 0; i2 += 4) {
+		}
+
+		return func_8441_0JU9spv8gfQ01t39tL0PKp2B9wecZGjmyC7mN26kj368SF582kfm10wcI3ky()[i2];
+	}
+
+	private static Direction[] func_8442_5N77WNn4w7mGMBaguaunvrw0N6xUY2Gj0Zk8j75t3hgfvoporDrS8taS7WTV() {
+		return new Direction[]{XP, ZP, XM, ZM};
+	}
+    
+    static {
+        field_8448_80TcH2wcq3Sjd09owc18oN0smoU5M5dscmAwMJH1000b2EFiTuJO8K0t7LSB = func_8442_5N77WNn4w7mGMBaguaunvrw0N6xUY2Gj0Zk8j75t3hgfvoporDrS8taS7WTV();
+    }
+}
--- net/minecraft/src/BlockFence.java
+++ net/minecraft/src/BlockFence.java
@@ -3,16 +3,16 @@
 import java.util.ArrayList;
 
 public class BlockFence extends Block {
-	public BlockFence(int var1, int var2) {
-		super(var1, var2, Material.wood);
-	}
-
-	public void getCollidingBoundingBoxes(World var1, int var2, int var3, int var4, AxisAlignedBB var5, ArrayList var6) {
-		var6.add(AxisAlignedBB.getBoundingBoxFromPool((double)var2, (double)var3, (double)var4, (double)(var2 + 1), (double)var3 + 1.5D, (double)(var4 + 1)));
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.getBlockId(var2, var3 - 1, var4) == this.blockID ? false : (!var1.getBlockMaterial(var2, var3 - 1, var4).isSolid() ? false : super.canPlaceBlockAt(var1, var2, var3, var4));
+	public BlockFence(int id, int blockIndex) {
+		super(id, blockIndex, Material.wood);
+	}
+
+	public void getCollidingBoundingBoxes(World world, int x, int y, int z, AxisAlignedBB aabb, ArrayList arrayList) {
+		arrayList.add(AxisAlignedBB.getBoundingBoxFromPool((double)x, (double)y, (double)z, (double)(x + 1), (double)y + 1.5D, (double)(z + 1)));
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.getBlockId(x, y - 1, z) == this.blockID ? false : (!world.getBlockMaterial(x, y - 1, z).isSolid() ? false : super.canPlaceBlockAt(world, x, y, z));
 	}
 
 	public boolean isOpaqueCube() {
--- /dev/null
+++ net/minecraft/src/BlockMyconCap.java
@@ -1,0 +1,34 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockMyconCap extends BlockBreakable {
+	public BlockMyconCap(int integer1, int integer2) {
+		super(integer1, integer2, Material.ice, false);
+		this.setTickOnLoad(true);
+		this.setLightValue(1.65F);
+	}
+
+	public int getRenderBlockPass() {
+		return 1;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return super.shouldSideBeRendered(blockAccess, x, y, z, 1 - side);
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		world.getBlockMaterial(x, y - 1, z);
+	}
+
+	public int quantityDropped(Random random) {
+		return 0;
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(world.getSavedLightValue(EnumSkyBlock.Block, x, y, z) > 11 - Block.lightOpacity[this.blockID]) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+		}
+
+	}
+}
--- net/minecraft/src/Explosion.java
+++ net/minecraft/src/Explosion.java
@@ -5,124 +5,126 @@
 import java.util.List;
 
 public class Explosion {
-	public void doExplosion(World var1, Entity var2, double var3, double var5, double var7, float var9) {
-		var1.playSoundEffect(var3, var5, var7, "random.explode", 4.0F, (1.0F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.2F) * 0.7F);
-		HashSet var10 = new HashSet();
-		float var11 = var9;
-		byte var12 = 16;
-
-		int var13;
-		int var14;
-		int var15;
-		double var25;
-		double var27;
-		double var29;
-		for(var13 = 0; var13 < var12; ++var13) {
-			for(var14 = 0; var14 < var12; ++var14) {
-				for(var15 = 0; var15 < var12; ++var15) {
-					if(var13 == 0 || var13 == var12 - 1 || var14 == 0 || var14 == var12 - 1 || var15 == 0 || var15 == var12 - 1) {
-						double var16 = (double)((float)var13 / ((float)var12 - 1.0F) * 2.0F - 1.0F);
-						double var18 = (double)((float)var14 / ((float)var12 - 1.0F) * 2.0F - 1.0F);
-						double var20 = (double)((float)var15 / ((float)var12 - 1.0F) * 2.0F - 1.0F);
-						double var22 = Math.sqrt(var16 * var16 + var18 * var18 + var20 * var20);
-						var16 /= var22;
-						var18 /= var22;
-						var20 /= var22;
-						float var24 = var9 * (0.7F + var1.rand.nextFloat() * 0.6F);
-						var25 = var3;
-						var27 = var5;
-						var29 = var7;
-
-						for(float var31 = 0.3F; var24 > 0.0F; var24 -= var31 * (12.0F / 16.0F)) {
-							int var32 = MathHelper.floor_double(var25);
-							int var33 = MathHelper.floor_double(var27);
-							int var34 = MathHelper.floor_double(var29);
-							int var35 = var1.getBlockId(var32, var33, var34);
-							if(var35 > 0) {
-								var24 -= (Block.blocksList[var35].getExplosionResistance(var2) + 0.3F) * var31;
-							}
-
-							if(var24 > 0.0F) {
-								var10.add(new ChunkPosition(var32, var33, var34));
-							}
-
-							var25 += var16 * (double)var31;
-							var27 += var18 * (double)var31;
-							var29 += var20 * (double)var31;
+	public void doExplosion(World world, Entity entity, double x, double y, double z, float power) {
+		world.playSoundEffect(x, y, z, "random.explode", 4.0F, (1.0F + (world.rand.nextFloat() - world.rand.nextFloat()) * 0.2F) * 0.7F);
+		HashSet hashSet10 = new HashSet();
+		float f11 = power;
+		byte b12 = 16;
+
+		int i13;
+		int i14;
+		int i15;
+		double d16;
+		double d18;
+		double d20;
+		int i33;
+		int i34;
+		for(i13 = 0; i13 < b12; ++i13) {
+			for(i14 = 0; i14 < b12; ++i14) {
+				for(i15 = 0; i15 < b12; ++i15) {
+					if(i13 == 0 || i13 == b12 - 1 || i14 == 0 || i14 == b12 - 1 || i15 == 0 || i15 == b12 - 1) {
+						double d22 = (double)((float)i13 / ((float)b12 - 1.0F) * 2.0F - 1.0F);
+						double d24 = (double)((float)i14 / ((float)b12 - 1.0F) * 2.0F - 1.0F);
+						double d26 = (double)((float)i15 / ((float)b12 - 1.0F) * 2.0F - 1.0F);
+						double d28 = Math.sqrt(d22 * d22 + d24 * d24 + d26 * d26);
+						d22 /= d28;
+						d24 /= d28;
+						d26 /= d28;
+						float f30 = power * (0.7F + world.rand.nextFloat() * 0.6F);
+						d16 = x;
+						d18 = y;
+						d20 = z;
+
+						for(float f31 = 0.3F; f30 > 0.0F; f30 -= f31 * 0.75F) {
+							int i32 = MathHelper.floor_double(d16);
+							i33 = MathHelper.floor_double(d18);
+							i34 = MathHelper.floor_double(d20);
+							int i35 = world.getBlockId(i32, i33, i34);
+							if(i35 > 0) {
+								f30 -= (Block.blocksList[i35].getExplosionResistance(entity) + 0.3F) * f31;
+							}
+
+							if(f30 > 0.0F) {
+								hashSet10.add(new ChunkPosition(i32, i33, i34));
+							}
+
+							d16 += d22 * (double)f31;
+							d18 += d24 * (double)f31;
+							d20 += d26 * (double)f31;
 						}
 					}
 				}
 			}
 		}
 
-		var9 *= 2.0F;
-		var13 = MathHelper.floor_double(var3 - (double)var9 - 1.0D);
-		var14 = MathHelper.floor_double(var3 + (double)var9 + 1.0D);
-		var15 = MathHelper.floor_double(var5 - (double)var9 - 1.0D);
-		int var45 = MathHelper.floor_double(var5 + (double)var9 + 1.0D);
-		int var17 = MathHelper.floor_double(var7 - (double)var9 - 1.0D);
-		int var46 = MathHelper.floor_double(var7 + (double)var9 + 1.0D);
-		List var19 = var1.getEntitiesWithinAABBExcludingEntity(var2, AxisAlignedBB.getBoundingBoxFromPool((double)var13, (double)var15, (double)var17, (double)var14, (double)var45, (double)var46));
-		Vec3D var47 = Vec3D.createVector(var3, var5, var7);
+		power *= 2.0F;
+		i13 = MathHelper.floor_double(x - (double)power - 1.0D);
+		i14 = MathHelper.floor_double(x + (double)power + 1.0D);
+		i15 = MathHelper.floor_double(y - (double)power - 1.0D);
+		int i49 = MathHelper.floor_double(y + (double)power + 1.0D);
+		int i23 = MathHelper.floor_double(z - (double)power - 1.0D);
+		int i50 = MathHelper.floor_double(z + (double)power + 1.0D);
+		List list25 = world.getEntitiesWithinAABBExcludingEntity(entity, AxisAlignedBB.getBoundingBoxFromPool((double)i13, (double)i15, (double)i23, (double)i14, (double)i49, (double)i50));
+		Vec3D vec3D51 = Vec3D.createVector(x, y, z);
 
-		double var55;
-		double var56;
-		double var57;
-		for(int var21 = 0; var21 < var19.size(); ++var21) {
-			Entity var49 = (Entity)var19.get(var21);
-			double var23 = var49.getDistance(var3, var5, var7) / (double)var9;
-			if(var23 <= 1.0D) {
-				var25 = var49.posX - var3;
-				var27 = var49.posY - var5;
-				var29 = var49.posZ - var7;
-				var55 = (double)MathHelper.sqrt_double(var25 * var25 + var27 * var27 + var29 * var29);
-				var25 /= var55;
-				var27 /= var55;
-				var29 /= var55;
-				var56 = (double)var1.getBlockDensity(var47, var49.boundingBox);
-				var57 = (1.0D - var23) * var56;
-				var49.attackEntityFrom(var2, (int)((var57 * var57 + var57) / 2.0D * 8.0D * (double)var9 + 1.0D));
-				var49.motionX += var25 * var57;
-				var49.motionY += var27 * var57;
-				var49.motionZ += var29 * var57;
+		double d27;
+		double d29;
+		double d52;
+		for(i33 = 0; i33 < list25.size(); ++i33) {
+			Entity entity54 = (Entity)list25.get(i33);
+			double d55 = entity54.getDistance(x, y, z) / (double)power;
+			if(d55 <= 1.0D) {
+				d16 = entity54.posX - x;
+				d18 = entity54.posY - y;
+				d20 = entity54.posZ - z;
+				d27 = (double)MathHelper.sqrt_double(d16 * d16 + d18 * d18 + d20 * d20);
+				d16 /= d27;
+				d18 /= d27;
+				d20 /= d27;
+				d29 = (double)world.getBlockDensity(vec3D51, entity54.boundingBox);
+				d52 = (1.0D - d55) * d29;
+				entity54.attackEntityFrom(entity, (int)((d52 * d52 + d52) / 2.0D * 8.0D * (double)power + 1.0D));
+				entity54.motionX += d16 * d52;
+				entity54.motionY += d18 * d52;
+				entity54.motionZ += d20 * d52;
 			}
 		}
 
-		var9 = var11;
-		ArrayList var48 = new ArrayList();
-		var48.addAll(var10);
-
-		for(int var50 = var48.size() - 1; var50 >= 0; --var50) {
-			ChunkPosition var51 = (ChunkPosition)var48.get(var50);
-			int var52 = var51.x;
-			int var53 = var51.y;
-			int var26 = var51.z;
-			int var54 = var1.getBlockId(var52, var53, var26);
-
-			for(int var28 = 0; var28 < 1; ++var28) {
-				var29 = (double)((float)var52 + var1.rand.nextFloat());
-				var55 = (double)((float)var53 + var1.rand.nextFloat());
-				var56 = (double)((float)var26 + var1.rand.nextFloat());
-				var57 = var29 - var3;
-				double var37 = var55 - var5;
-				double var39 = var56 - var7;
-				double var41 = (double)MathHelper.sqrt_double(var57 * var57 + var37 * var37 + var39 * var39);
-				var57 /= var41;
-				var37 /= var41;
-				var39 /= var41;
-				double var43 = 0.5D / (var41 / (double)var9 + 0.1D);
-				var43 *= (double)(var1.rand.nextFloat() * var1.rand.nextFloat() + 0.3F);
-				var57 *= var43;
-				var37 *= var43;
-				var39 *= var43;
-				var1.spawnParticle("explode", (var29 + var3 * 1.0D) / 2.0D, (var55 + var5 * 1.0D) / 2.0D, (var56 + var7 * 1.0D) / 2.0D, var57, var37, var39);
-				var1.spawnParticle("smoke", var29, var55, var56, var57, var37, var39);
+		power = f11;
+		ArrayList arrayList53 = new ArrayList();
+		arrayList53.addAll(hashSet10);
+
+		for(i34 = arrayList53.size() - 1; i34 >= 0; --i34) {
+			ChunkPosition chunkPosition56 = (ChunkPosition)arrayList53.get(i34);
+			int i36 = chunkPosition56.x;
+			int i37 = chunkPosition56.y;
+			int i38 = chunkPosition56.z;
+			int i39 = world.getBlockId(i36, i37, i38);
+
+			for(int i40 = 0; i40 < 1; ++i40) {
+				d20 = (double)((float)i36 + world.rand.nextFloat());
+				d27 = (double)((float)i37 + world.rand.nextFloat());
+				d29 = (double)((float)i38 + world.rand.nextFloat());
+				d52 = d20 - x;
+				double d41 = d27 - y;
+				double d43 = d29 - z;
+				double d45 = (double)MathHelper.sqrt_double(d52 * d52 + d41 * d41 + d43 * d43);
+				d52 /= d45;
+				d41 /= d45;
+				d43 /= d45;
+				double d47 = 0.5D / (d45 / (double)power + 0.1D);
+				d47 *= (double)(world.rand.nextFloat() * world.rand.nextFloat() + 0.3F);
+				d52 *= d47;
+				d41 *= d47;
+				d43 *= d47;
+				world.spawnParticle("explode", (d20 + x * 1.0D) / 2.0D, (d27 + y * 1.0D) / 2.0D, (d29 + z * 1.0D) / 2.0D, d52, d41, d43);
+				world.spawnParticle("smoke", d20, d27, d29, d52, d41, d43);
 			}
 
-			if(var54 > 0) {
-				Block.blocksList[var54].dropBlockAsItemWithChance(var1, var52, var53, var26, var1.getBlockMetadata(var52, var53, var26), 0.3F);
-				var1.setBlockWithNotify(var52, var53, var26, 0);
-				Block.blocksList[var54].onBlockDestroyedByExplosion(var1, var52, var53, var26);
+			if(i39 > 0) {
+				Block.blocksList[i39].dropBlockAsItemWithChance(world, i36, i37, i38, world.getBlockMetadata(i36, i37, i38), 0.3F);
+				world.setBlockWithNotify(i36, i37, i38, 0);
+				Block.blocksList[i39].onBlockDestroyedByExplosion(world, i36, i37, i38);
 			}
 		}
 
--- net/minecraft/src/ThreadMonitorConnection.java
+++ net/minecraft/src/ThreadMonitorConnection.java
@@ -3,19 +3,19 @@
 class ThreadMonitorConnection extends Thread {
 	final NetworkManager netManager;
 
-	ThreadMonitorConnection(NetworkManager var1) {
-		this.netManager = var1;
+	ThreadMonitorConnection(NetworkManager af) {
+		this.netManager = af;
 	}
 
 	public void run() {
 		try {
 			Thread.sleep(2000L);
 			if(NetworkManager.isRunning(this.netManager)) {
-				NetworkManager.getWriteThread(this.netManager).interrupt();
+				NetworkManager.writeThread(this.netManager).interrupt();
 				this.netManager.networkShutdown("Connection closed");
 			}
-		} catch (Exception var2) {
-			var2.printStackTrace();
+		} catch (Exception exception2) {
+			exception2.printStackTrace();
 		}
 
 	}
--- net/minecraft/src/BlockChest.java
+++ net/minecraft/src/BlockChest.java
@@ -5,100 +5,101 @@
 public class BlockChest extends BlockContainer {
 	private Random random = new Random();
 
-	protected BlockChest(int var1) {
-		super(var1, Material.wood);
+	protected BlockChest(int id) {
+		super(id, Material.wood);
 		this.blockIndexInTexture = 26;
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture - 1 : (var1 == 0 ? this.blockIndexInTexture - 1 : (var1 == 3 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture));
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		int var5 = 0;
-		if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
-			++var5;
-		}
-
-		if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
-			++var5;
-		}
-
-		if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
-			++var5;
-		}
-
-		if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
-			++var5;
-		}
-
-		return var5 > 1 ? false : (this.isThereANeighborChest(var1, var2 - 1, var3, var4) ? false : (this.isThereANeighborChest(var1, var2 + 1, var3, var4) ? false : (this.isThereANeighborChest(var1, var2, var3, var4 - 1) ? false : !this.isThereANeighborChest(var1, var2, var3, var4 + 1))));
-	}
-
-	private boolean isThereANeighborChest(World var1, int var2, int var3, int var4) {
-		return var1.getBlockId(var2, var3, var4) != this.blockID ? false : (var1.getBlockId(var2 - 1, var3, var4) == this.blockID ? true : (var1.getBlockId(var2 + 1, var3, var4) == this.blockID ? true : (var1.getBlockId(var2, var3, var4 - 1) == this.blockID ? true : var1.getBlockId(var2, var3, var4 + 1) == this.blockID)));
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		TileEntityChest var5 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
-
-		for(int var6 = 0; var6 < var5.getSizeInventory(); ++var6) {
-			ItemStack var7 = var5.getStackInSlot(var6);
-			if(var7 != null) {
-				float var8 = this.random.nextFloat() * 0.8F + 0.1F;
-				float var9 = this.random.nextFloat() * 0.8F + 0.1F;
-				float var10 = this.random.nextFloat() * 0.8F + 0.1F;
-
-				while(var7.stackSize > 0) {
-					int var11 = this.random.nextInt(21) + 10;
-					if(var11 > var7.stackSize) {
-						var11 = var7.stackSize;
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.blockIndexInTexture - 1 : (side == 0 ? this.blockIndexInTexture - 1 : (side == 3 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture));
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		int i5 = 0;
+		if(world.getBlockId(x - 1, y, z) == this.blockID) {
+			++i5;
+		}
+
+		if(world.getBlockId(x + 1, y, z) == this.blockID) {
+			++i5;
+		}
+
+		if(world.getBlockId(x, y, z - 1) == this.blockID) {
+			++i5;
+		}
+
+		if(world.getBlockId(x, y, z + 1) == this.blockID) {
+			++i5;
+		}
+
+		return i5 > 1 ? false : (this.isThereANeighborChest(world, x - 1, y, z) ? false : (this.isThereANeighborChest(world, x + 1, y, z) ? false : (this.isThereANeighborChest(world, x, y, z - 1) ? false : !this.isThereANeighborChest(world, x, y, z + 1))));
+	}
+
+	private boolean isThereANeighborChest(World world, int x, int y, int z) {
+		return world.getBlockId(x, y, z) != this.blockID ? false : (world.getBlockId(x - 1, y, z) == this.blockID ? true : (world.getBlockId(x + 1, y, z) == this.blockID ? true : (world.getBlockId(x, y, z - 1) == this.blockID ? true : world.getBlockId(x, y, z + 1) == this.blockID)));
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		TileEntityChest tileEntityChest5 = (TileEntityChest)world.getBlockTileEntity(x, y, z);
+		if(tileEntityChest5 != null) {
+			for(int i6 = 0; i6 < tileEntityChest5.getSizeInventory(); ++i6) {
+				ItemStack itemStack7 = tileEntityChest5.getStackInSlot(i6);
+				if(itemStack7 != null) {
+					float f8 = this.random.nextFloat() * 0.8F + 0.1F;
+					float f9 = this.random.nextFloat() * 0.8F + 0.1F;
+					float f10 = this.random.nextFloat() * 0.8F + 0.1F;
+
+					while(itemStack7.stackSize > 0) {
+						int i11 = this.random.nextInt(21) + 10;
+						if(i11 > itemStack7.stackSize) {
+							i11 = itemStack7.stackSize;
+						}
+
+						itemStack7.stackSize -= i11;
+						EntityItem entityItem12 = new EntityItem(world, (double)((float)x + f8), (double)((float)y + f9), (double)((float)z + f10), new ItemStack(itemStack7.itemID, i11, itemStack7.itemDmg));
+						float f13 = 0.05F;
+						entityItem12.motionX = (double)((float)this.random.nextGaussian() * f13);
+						entityItem12.motionY = (double)((float)this.random.nextGaussian() * f13 + 0.2F);
+						entityItem12.motionZ = (double)((float)this.random.nextGaussian() * f13);
+						world.spawnEntityInWorld(entityItem12);
 					}
-
-					var7.stackSize -= var11;
-					EntityItem var12 = new EntityItem(var1, (double)((float)var2 + var8), (double)((float)var3 + var9), (double)((float)var4 + var10), new ItemStack(var7.itemID, var11, var7.itemDmg));
-					float var13 = 0.05F;
-					var12.motionX = (double)((float)this.random.nextGaussian() * var13);
-					var12.motionY = (double)((float)this.random.nextGaussian() * var13 + 0.2F);
-					var12.motionZ = (double)((float)this.random.nextGaussian() * var13);
-					var1.spawnEntityInWorld(var12);
 				}
 			}
 		}
 
-		super.onBlockRemoval(var1, var2, var3, var4);
+		super.onBlockRemoval(world, x, y, z);
 	}
 
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		Object var6 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
-		if(var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-			return true;
-		} else if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID && var1.isBlockNormalCube(var2 - 1, var3 + 1, var4)) {
-			return true;
-		} else if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID && var1.isBlockNormalCube(var2 + 1, var3 + 1, var4)) {
-			return true;
-		} else if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID && var1.isBlockNormalCube(var2, var3 + 1, var4 - 1)) {
-			return true;
-		} else if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID && var1.isBlockNormalCube(var2, var3 + 1, var4 + 1)) {
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		Object object6 = (TileEntityChest)world.getBlockTileEntity(x, y, z);
+		if(world.isBlockNormalCube(x, y + 1, z)) {
+			return true;
+		} else if(world.getBlockId(x - 1, y, z) == this.blockID && world.isBlockNormalCube(x - 1, y + 1, z)) {
+			return true;
+		} else if(world.getBlockId(x + 1, y, z) == this.blockID && world.isBlockNormalCube(x + 1, y + 1, z)) {
+			return true;
+		} else if(world.getBlockId(x, y, z - 1) == this.blockID && world.isBlockNormalCube(x, y + 1, z - 1)) {
+			return true;
+		} else if(world.getBlockId(x, y, z + 1) == this.blockID && world.isBlockNormalCube(x, y + 1, z + 1)) {
 			return true;
 		} else {
-			if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2 - 1, var3, var4), (IInventory)var6);
-			}
-
-			if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2 + 1, var3, var4));
-			}
-
-			if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 - 1), (IInventory)var6);
-			}
-
-			if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 + 1));
-			}
-
-			var5.displayGUIChest((IInventory)var6);
+			if(world.getBlockId(x - 1, y, z) == this.blockID) {
+				object6 = new InventoryLargeChest("Large chest", (TileEntityChest)world.getBlockTileEntity(x - 1, y, z), (IInventory)object6);
+			}
+
+			if(world.getBlockId(x + 1, y, z) == this.blockID) {
+				object6 = new InventoryLargeChest("Large chest", (IInventory)object6, (TileEntityChest)world.getBlockTileEntity(x + 1, y, z));
+			}
+
+			if(world.getBlockId(x, y, z - 1) == this.blockID) {
+				object6 = new InventoryLargeChest("Large chest", (TileEntityChest)world.getBlockTileEntity(x, y, z - 1), (IInventory)object6);
+			}
+
+			if(world.getBlockId(x, y, z + 1) == this.blockID) {
+				object6 = new InventoryLargeChest("Large chest", (IInventory)object6, (TileEntityChest)world.getBlockTileEntity(x, y, z + 1));
+			}
+
+			entityPlayer.displayGUIChest((IInventory)object6);
 			return true;
 		}
 	}
--- net/minecraft/src/NoiseGeneratorOctaves.java
+++ net/minecraft/src/NoiseGeneratorOctaves.java
@@ -6,44 +6,44 @@
 	private NoiseGeneratorPerlin[] generatorCollection;
 	private int octaves;
 
-	public NoiseGeneratorOctaves(Random var1, int var2) {
-		this.octaves = var2;
-		this.generatorCollection = new NoiseGeneratorPerlin[var2];
-
-		for(int var3 = 0; var3 < var2; ++var3) {
-			this.generatorCollection[var3] = new NoiseGeneratorPerlin(var1);
-		}
-
-	}
-
-	public double generateNoiseOctaves(double var1, double var3) {
-		double var5 = 0.0D;
-		double var7 = 1.0D;
-
-		for(int var9 = 0; var9 < this.octaves; ++var9) {
-			var5 += this.generatorCollection[var9].generateNoise(var1 * var7, var3 * var7) / var7;
-			var7 /= 2.0D;
-		}
-
-		return var5;
-	}
-
-	public double[] generateNoiseOctaves(double[] var1, double var2, double var4, double var6, int var8, int var9, int var10, double var11, double var13, double var15) {
-		if(var1 == null) {
-			var1 = new double[var8 * var9 * var10];
+	public NoiseGeneratorOctaves(Random random, int octaves) {
+		this.octaves = octaves;
+		this.generatorCollection = new NoiseGeneratorPerlin[octaves];
+
+		for(int i3 = 0; i3 < octaves; ++i3) {
+			this.generatorCollection[i3] = new NoiseGeneratorPerlin(random);
+		}
+
+	}
+
+	public double generateNoiseOctaves(double x, double z) {
+		double d5 = 0.0D;
+		double d7 = 1.0D;
+
+		for(int i9 = 0; i9 < this.octaves; ++i9) {
+			d5 += this.generatorCollection[i9].generateNoise(x * d7, z * d7) / d7;
+			d7 /= 2.0D;
+		}
+
+		return d5;
+	}
+
+	public double[] generateNoiseOctaves(double[] data, double double2, double double3, double double4, int x, int y, int z, double double8, double double9, double double10) {
+		if(data == null) {
+			data = new double[x * y * z];
 		} else {
-			for(int var17 = 0; var17 < var1.length; ++var17) {
-				var1[var17] = 0.0D;
+			for(int i17 = 0; i17 < data.length; ++i17) {
+				data[i17] = 0.0D;
 			}
 		}
 
-		double var20 = 1.0D;
+		double d20 = 1.0D;
 
-		for(int var19 = 0; var19 < this.octaves; ++var19) {
-			this.generatorCollection[var19].populateNoiseArray(var1, var2, var4, var6, var8, var9, var10, var11 * var20, var13 * var20, var15 * var20, var20);
-			var20 /= 2.0D;
+		for(int i19 = 0; i19 < this.octaves; ++i19) {
+			this.generatorCollection[i19].populateNoiseArray(data, double2, double3, double4, x, y, z, double8 * d20, double9 * d20, double10 * d20, d20);
+			d20 /= 2.0D;
 		}
 
-		return var1;
+		return data;
 	}
 }
--- net/minecraft/src/PlayerManager.java
+++ net/minecraft/src/PlayerManager.java
@@ -3,6 +3,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
+
 import net.minecraft.server.MinecraftServer;
 
 public class PlayerManager {
@@ -11,134 +12,149 @@
 	private List playerInstancesToUpdate = new ArrayList();
 	private MinecraftServer mcServer;
 
-	public PlayerManager(MinecraftServer var1) {
-		this.mcServer = var1;
+	public PlayerManager(MinecraftServer mcServer) {
+		this.mcServer = mcServer;
 	}
 
 	public void updatePlayerInstances() throws IOException {
-		for(int var1 = 0; var1 < this.playerInstancesToUpdate.size(); ++var1) {
-			((PlayerInstance)this.playerInstancesToUpdate.get(var1)).onUpdate();
+		for(int i1 = 0; i1 < this.playerInstancesToUpdate.size(); ++i1) {
+			((PlayerInstance)this.playerInstancesToUpdate.get(i1)).onUpdate();
 		}
 
 		this.playerInstancesToUpdate.clear();
 	}
 
-	private PlayerInstance getPlayerInstance(int var1, int var2, boolean var3) {
-		long var4 = (long)var1 + 2147483647L | (long)var2 + 2147483647L << 32;
-		PlayerInstance var6 = (PlayerInstance)this.playerInstances.lookup(var4);
-		if(var6 == null && var3) {
-			var6 = new PlayerInstance(this, var1, var2);
-			this.playerInstances.addKey(var4, var6);
-		}
-
-		return var6;
-	}
-
-	public void sendTileEntity(Packet var1, int var2, int var3, int var4) {
-		int var5 = var2 >> 4;
-		int var6 = var4 >> 4;
-		PlayerInstance var7 = this.getPlayerInstance(var5, var6, false);
-		if(var7 != null) {
-			var7.sendTileEntity(var1);
-		}
-
-	}
-
-	public void markBlockNeedsUpdate(int var1, int var2, int var3) {
-		int var4 = var1 >> 4;
-		int var5 = var3 >> 4;
-		PlayerInstance var6 = this.getPlayerInstance(var4, var5, false);
-		if(var6 != null) {
-			var6.markBlockNeedsUpdate(var1 & 15, var2, var3 & 15);
-		}
-
-	}
-
-	public void addPlayer(EntityPlayerMP var1) {
-		this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7e" + var1.username + " joined the game."));
-		int var2 = (int)var1.posX >> 4;
-		int var3 = (int)var1.posZ >> 4;
-		var1.managedPosX = var1.posX;
-		var1.managedPosZ = var1.posZ;
-
-		for(int var4 = var2 - 10; var4 <= var2 + 10; ++var4) {
-			for(int var5 = var3 - 10; var5 <= var3 + 10; ++var5) {
-				this.getPlayerInstance(var4, var5, true).addPlayer(var1);
-			}
-		}
-
-		this.players.add(var1);
-	}
-
-	public void removePlayer(EntityPlayerMP var1) {
-		this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7e" + var1.username + " left the game."));
-		int var2 = (int)var1.posX >> 4;
-		int var3 = (int)var1.posZ >> 4;
-
-		for(int var4 = var2 - 10; var4 <= var2 + 10; ++var4) {
-			for(int var5 = var3 - 10; var5 <= var3 + 10; ++var5) {
-				PlayerInstance var6 = this.getPlayerInstance(var4, var5, false);
-				if(var6 != null) {
-					var6.removePlayer(var1);
+	private PlayerInstance getPlayerInstance(int integer1, int integer2, boolean boolean3) {
+		long j4 = (long)integer1 + 2147483647L | (long)integer2 + 2147483647L << 32;
+		PlayerInstance playerInstance6 = (PlayerInstance)this.playerInstances.lookup(j4);
+		if(playerInstance6 == null && boolean3) {
+			playerInstance6 = new PlayerInstance(this, integer1, integer2);
+			this.playerInstances.addKey(j4, playerInstance6);
+		}
+
+		return playerInstance6;
+	}
+
+	public void sendTileEntity(Packet packet, int x, int y, int z) {
+		int i5 = x >> 4;
+		int i6 = z >> 4;
+		PlayerInstance playerInstance7 = this.getPlayerInstance(i5, i6, false);
+		if(playerInstance7 != null) {
+			playerInstance7.markBlockNeedsUpdate(packet);
+		}
+
+	}
+
+	public void markBlockNeedsUpdate(int x, int y, int z) {
+		int i4 = x >> 4;
+		int i5 = z >> 4;
+		PlayerInstance playerInstance6 = this.getPlayerInstance(i4, i5, false);
+		if(playerInstance6 != null) {
+			playerInstance6.markBlockNeedsUpdate(x & 15, y, z & 15);
+		}
+
+	}
+
+	public void addPlayer(EntityPlayerMP entityPlayerMP) {
+		if(!entityPlayerMP.username.startsWith("\u0002")) {
+			if(entityPlayerMP.username.startsWith("\u0001")) {
+				this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7eConnection from unknown client [\\###.###.###.###]"));
+			} else {
+				this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7e" + entityPlayerMP.username + " joined the game."));
+			}
+		}
+
+		int i2 = (int)entityPlayerMP.posX >> 4;
+		int i3 = (int)entityPlayerMP.posZ >> 4;
+		entityPlayerMP.managedPosX = entityPlayerMP.posX;
+		entityPlayerMP.managedPosZ = entityPlayerMP.posZ;
+
+		for(int i4 = i2 - 10; i4 <= i2 + 10; ++i4) {
+			for(int i5 = i3 - 10; i5 <= i3 + 10; ++i5) {
+				this.getPlayerInstance(i4, i5, true).addPlayer(entityPlayerMP);
+			}
+		}
+
+		this.players.add(entityPlayerMP);
+	}
+
+	public void removePlayer(EntityPlayerMP entityPlayerMP) {
+		if(!entityPlayerMP.username.startsWith("\u0002")) {
+			if(entityPlayerMP.username.startsWith("\u0001")) {
+				this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7eleft"));
+			} else {
+				this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7e" + entityPlayerMP.username + " left the game."));
+			}
+		}
+
+		int i2 = (int)entityPlayerMP.posX >> 4;
+		int i3 = (int)entityPlayerMP.posZ >> 4;
+
+		for(int i4 = i2 - 10; i4 <= i2 + 10; ++i4) {
+			for(int i5 = i3 - 10; i5 <= i3 + 10; ++i5) {
+				PlayerInstance playerInstance6 = this.getPlayerInstance(i4, i5, false);
+				if(playerInstance6 != null) {
+					playerInstance6.removePlayer(entityPlayerMP);
 				}
 			}
 		}
 
-		this.players.remove(var1);
-	}
-
-	private boolean a(int var1, int var2, int var3, int var4) {
-		int var5 = var1 - var3;
-		int var6 = var2 - var4;
-		return var5 >= -10 && var5 <= 10 ? var6 >= -10 && var6 <= 10 : false;
-	}
-
-	public void updateMountedMovingPlayer(EntityPlayerMP var1) {
-		int var2 = (int)var1.posX >> 4;
-		int var3 = (int)var1.posZ >> 4;
-		double var4 = var1.managedPosX - var1.posX;
-		double var6 = var1.managedPosZ - var1.posZ;
-		double var8 = var4 * var4 + var6 * var6;
-		if(var8 >= 64.0D) {
-			int var10 = (int)var1.managedPosX >> 4;
-			int var11 = (int)var1.managedPosZ >> 4;
-			int var12 = var2 - var10;
-			int var13 = var3 - var11;
-			if(var12 != 0 || var13 != 0) {
-				for(int var14 = var2 - 10; var14 <= var2 + 10; ++var14) {
-					for(int var15 = var3 - 10; var15 <= var3 + 10; ++var15) {
-						if(!this.a(var14, var15, var10, var11)) {
-							this.getPlayerInstance(var14, var15, true).addPlayer(var1);
+		this.players.remove(entityPlayerMP);
+	}
+
+	private boolean a(int integer1, int integer2, int integer3, int integer4) {
+		int i5 = integer1 - integer3;
+		int i6 = integer2 - integer4;
+		return i5 >= -10 && i5 <= 10 ? i6 >= -10 && i6 <= 10 : false;
+	}
+
+	public void updateMountedMovingPlayer(EntityPlayerMP entityPlayerMP) {
+		int i2 = (int)entityPlayerMP.posX >> 4;
+		int i3 = (int)entityPlayerMP.posZ >> 4;
+		double d4 = entityPlayerMP.managedPosX - entityPlayerMP.posX;
+		double d6 = entityPlayerMP.managedPosZ - entityPlayerMP.posZ;
+		double d8 = d4 * d4 + d6 * d6;
+		if(d8 >= 64.0D) {
+			int i10 = (int)entityPlayerMP.managedPosX >> 4;
+			int i11 = (int)entityPlayerMP.managedPosZ >> 4;
+			int i12 = i2 - i10;
+			int i13 = i3 - i11;
+			if(i12 != 0 || i13 != 0) {
+				for(int i14 = i2 - 10; i14 <= i2 + 10; ++i14) {
+					for(int i15 = i3 - 10; i15 <= i3 + 10; ++i15) {
+						if(!this.a(i14, i15, i10, i11)) {
+							this.getPlayerInstance(i14, i15, true).addPlayer(entityPlayerMP);
 						}
 
-						if(!this.a(var14 - var12, var15 - var13, var2, var3)) {
-							PlayerInstance var16 = this.getPlayerInstance(var14 - var12, var15 - var13, false);
-							if(var16 != null) {
-								var16.removePlayer(var1);
+						if(!this.a(i14 - i12, i15 - i13, i2, i3)) {
+							PlayerInstance playerInstance16 = this.getPlayerInstance(i14 - i12, i15 - i13, false);
+							if(playerInstance16 != null) {
+								playerInstance16.removePlayer(entityPlayerMP);
 							}
 						}
 					}
 				}
 
-				var1.managedPosX = var1.posX;
-				var1.managedPosZ = var1.posZ;
+				entityPlayerMP.managedPosX = entityPlayerMP.posX;
+				entityPlayerMP.managedPosZ = entityPlayerMP.posZ;
 			}
 		}
+
 	}
 
 	public int getMaxTrackingDistance() {
 		return 144;
 	}
 
-	static MinecraftServer getMinecraftServer(PlayerManager var0) {
-		return var0.mcServer;
-	}
-
-	static MCHashTable2 getPlayerInstances(PlayerManager var0) {
-		return var0.playerInstances;
-	}
-
-	static List getPlayerInstancesToUpdate(PlayerManager var0) {
-		return var0.playerInstancesToUpdate;
+	static MinecraftServer mcServer(PlayerManager ag) {
+		return ag.mcServer;
+	}
+
+	static MCHashTable2 playerInstances(PlayerManager ag) {
+		return ag.playerInstances;
+	}
+
+	static List playerInstancesToUpdate(PlayerManager ag) {
+		return ag.playerInstancesToUpdate;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockSlatePillar.java
@@ -1,0 +1,135 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockSlatePillar extends Block {
+	public BlockSlatePillar(int integer1, int integer2) {
+		super(integer1, integer2, Material.circuits);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		float f6 = 0.125F;
+		switch(i5) {
+		case 2:
+			this.setBlockBounds(0.0F, 0.0F, 1.0F - f6, 1.0F, 1.0F, 1.0F);
+			break;
+		case 3:
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f6);
+			break;
+		case 4:
+			this.setBlockBounds(1.0F - f6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+			break;
+		case 5:
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, f6, 1.0F, 1.0F);
+			break;
+		case 6:
+			this.setBlockBounds(0.0F, 1.0F - f6, 0.0F, 1.0F, 1.0F, 1.0F);
+			break;
+		case 7:
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, f6, 1.0F);
+		}
+
+		return super.getCollisionBoundingBoxFromPool(world, x, y, z);
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		int i5 = worldObj.getBlockMetadata(x, y, z);
+		float f6 = 0.125F;
+		switch(i5) {
+		case 2:
+			this.setBlockBounds(0.0F, 0.0F, 1.0F - f6, 1.0F, 1.0F, 1.0F);
+			break;
+		case 3:
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f6);
+			break;
+		case 4:
+			this.setBlockBounds(1.0F - f6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+			break;
+		case 5:
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, f6, 1.0F, 1.0F);
+			break;
+		case 6:
+			this.setBlockBounds(0.0F, 1.0F - f6, 0.0F, 1.0F, 1.0F, 1.0F);
+			break;
+		case 7:
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, f6, 1.0F);
+		}
+
+		return super.getSelectedBoundingBoxFromPool(worldObj, x, y, z);
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 8;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y - 1, z) ? true : (world.isBlockNormalCube(x, y + 1, z) ? true : (world.isBlockNormalCube(x - 1, y, z) ? true : (world.isBlockNormalCube(x + 1, y, z) ? true : (world.isBlockNormalCube(x, y, z - 1) ? true : world.isBlockNormalCube(x, y, z + 1)))));
+	}
+
+	public void onBlockPlaced(World world, int x, int y, int z, int notifyFlag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if((i6 == 0 || notifyFlag == 2) && world.isBlockNormalCube(x, y, z + 1)) {
+			i6 = 2;
+		} else if((i6 == 0 || notifyFlag == 3) && world.isBlockNormalCube(x, y, z - 1)) {
+			i6 = 3;
+		} else if((i6 == 0 || notifyFlag == 4) && world.isBlockNormalCube(x + 1, y, z)) {
+			i6 = 4;
+		} else if((i6 == 0 || notifyFlag == 5) && world.isBlockNormalCube(x - 1, y, z)) {
+			i6 = 5;
+		} else if((i6 == 0 || notifyFlag == 6) && world.isBlockNormalCube(x, y + 1, z)) {
+			i6 = 6;
+		} else if((i6 == 0 || notifyFlag == 7) && world.isBlockNormalCube(x, y - 1, z)) {
+			i6 = 7;
+		}
+
+		world.setBlockMetadataWithNotify(x, y, z, i6);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		boolean z7 = false;
+		if(i6 == 2 && world.isBlockNormalCube(x, y, z + 1)) {
+			z7 = true;
+		}
+
+		if(i6 == 3 && world.isBlockNormalCube(x, y, z - 1)) {
+			z7 = true;
+		}
+
+		if(i6 == 4 && world.isBlockNormalCube(x + 1, y, z)) {
+			z7 = true;
+		}
+
+		if(i6 == 5 && world.isBlockNormalCube(x - 1, y, z)) {
+			z7 = true;
+		}
+
+		if(i6 == 6 && world.isBlockNormalCube(x, y + 1, z)) {
+			z7 = true;
+		}
+
+		if(i6 == 7 && world.isBlockNormalCube(x, y - 1, z)) {
+			z7 = true;
+		}
+
+		if(!z7) {
+			this.dropBlockAsItem(world, x, y, z, i6);
+			world.setBlockWithNotify(x, y, z, 0);
+		}
+
+		super.onNeighborBlockChange(world, x, y, z, flag);
+	}
+
+	public int quantityDropped(Random random) {
+		return 1;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockGrassTall.java
@@ -1,0 +1,10 @@
+package net.minecraft.src;
+
+public class BlockGrassTall extends BlockFlower {
+	int field_6395_9Jfx6yYwtVyY6n93Oc6IP8Jck2qeYo3ozbg2hphpmG7Q9E5x71Yap88fqIyS;
+
+	public BlockGrassTall(int integer1, int integer2, int integer3) {
+		super(integer1, integer2);
+		this.field_6395_9Jfx6yYwtVyY6n93Oc6IP8Jck2qeYo3ozbg2hphpmG7Q9E5x71Yap88fqIyS = integer3;
+	}
+}
--- net/minecraft/src/MCHashTable.java
+++ net/minecraft/src/MCHashTable.java
@@ -1,151 +1,156 @@
 package net.minecraft.src;
 
+import java.util.Objects;
+
 public class MCHashTable {
 	private transient MCHashEntry[] slots = new MCHashEntry[16];
 	private transient int count;
 	private int threshold = 12;
-	private final float growFactor = 12.0F / 16.0F;
+	private final float growFactor = 0.75F;
 	private transient volatile int versionStamp;
 
-	private static int computeHash(int var0) {
-		var0 ^= var0 >>> 20 ^ var0 >>> 12;
-		return var0 ^ var0 >>> 7 ^ var0 >>> 4;
-	}
-
-	private static int getSlotIndex(int var0, int var1) {
-		return var0 & var1 - 1;
-	}
-
-	public Object lookup(int var1) {
-		int var2 = computeHash(var1);
-
-		for(MCHashEntry var3 = this.slots[getSlotIndex(var2, this.slots.length)]; var3 != null; var3 = var3.nextEntry) {
-			if(var3.hashEntry == var1) {
-				return var3.valueEntry;
-			}
-		}
-
-		return null;
-	}
-
-	public boolean containsItem(int var1) {
-		return this.lookupEntry(var1) != null;
-	}
-
-	final MCHashEntry lookupEntry(int var1) {
-		int var2 = computeHash(var1);
-
-		for(MCHashEntry var3 = this.slots[getSlotIndex(var2, this.slots.length)]; var3 != null; var3 = var3.nextEntry) {
-			if(var3.hashEntry == var1) {
-				return var3;
-			}
-		}
-
-		return null;
-	}
-
-	public void addKey(int var1, Object var2) {
-		int var3 = computeHash(var1);
-		int var4 = getSlotIndex(var3, this.slots.length);
-
-		for(MCHashEntry var5 = this.slots[var4]; var5 != null; var5 = var5.nextEntry) {
-			if(var5.hashEntry == var1) {
-				var5.valueEntry = var2;
+	private static int computeHash(int hash) {
+		hash ^= hash >>> 20 ^ hash >>> 12;
+		return hash ^ hash >>> 7 ^ hash >>> 4;
+	}
+
+	private static int getSlotIndex(int integer1, int integer2) {
+		return integer1 & integer2 - 1;
+	}
+
+	public Object lookup(int integer) {
+		int i2 = computeHash(integer);
+
+		for(MCHashEntry mCHashEntry3 = this.slots[getSlotIndex(i2, this.slots.length)]; mCHashEntry3 != null; mCHashEntry3 = mCHashEntry3.nextEntry) {
+			if(mCHashEntry3.hashEntry == integer) {
+				return mCHashEntry3.valueEntry;
+			}
+		}
+
+		return null;
+	}
+
+	public boolean containsItem(int integer) {
+		return this.lookupEntry(integer) != null;
+	}
+
+	final MCHashEntry lookupEntry(int integer) {
+		int i2 = computeHash(integer);
+
+		for(MCHashEntry mCHashEntry3 = this.slots[getSlotIndex(i2, this.slots.length)]; mCHashEntry3 != null; mCHashEntry3 = mCHashEntry3.nextEntry) {
+			if(mCHashEntry3.hashEntry == integer) {
+				return mCHashEntry3;
+			}
+		}
+
+		return null;
+	}
+
+	public void addKey(int integer, Object object) {
+		int i3 = computeHash(integer);
+		int i4 = getSlotIndex(i3, this.slots.length);
+
+		for(MCHashEntry mCHashEntry5 = this.slots[i4]; mCHashEntry5 != null; mCHashEntry5 = mCHashEntry5.nextEntry) {
+			if(mCHashEntry5.hashEntry == integer) {
+				mCHashEntry5.valueEntry = object;
 			}
 		}
 
 		++this.versionStamp;
-		this.insert(var3, var1, var2, var4);
+		this.insert(i3, integer, object, i4);
 	}
 
-	private void grow(int var1) {
-		MCHashEntry[] var2 = this.slots;
-		int var3 = var2.length;
-		if(var3 == 1073741824) {
+	private void grow(int integer) {
+		MCHashEntry[] mCHashEntry2 = this.slots;
+		int i3 = mCHashEntry2.length;
+		if(i3 == 1073741824) {
 			this.threshold = Integer.MAX_VALUE;
 		} else {
-			MCHashEntry[] var4 = new MCHashEntry[var1];
-			this.copyTo(var4);
-			this.slots = var4;
-			this.threshold = (int)((float)var1 * this.growFactor);
+			MCHashEntry[] mCHashEntry4 = new MCHashEntry[integer];
+			this.copyTo(mCHashEntry4);
+			this.slots = mCHashEntry4;
+			float f10001 = (float)integer;
+			Objects.requireNonNull(this);
+			this.threshold = (int)(f10001 * 0.75F);
 		}
+
 	}
 
-	private void copyTo(MCHashEntry[] var1) {
-		MCHashEntry[] var2 = this.slots;
-		int var3 = var1.length;
-
-		for(int var4 = 0; var4 < var2.length; ++var4) {
-			MCHashEntry var5 = var2[var4];
-			if(var5 != null) {
-				var2[var4] = null;
-
-				MCHashEntry var6;
+	private void copyTo(MCHashEntry[] arr) {
+		MCHashEntry[] mCHashEntry2 = this.slots;
+		int i3 = arr.length;
+
+		for(int i4 = 0; i4 < mCHashEntry2.length; ++i4) {
+			MCHashEntry mCHashEntry5 = mCHashEntry2[i4];
+			if(mCHashEntry5 != null) {
+				mCHashEntry2[i4] = null;
+
+				MCHashEntry mCHashEntry6;
 				do {
-					var6 = var5.nextEntry;
-					int var7 = getSlotIndex(var5.slotHash, var3);
-					var5.nextEntry = var1[var7];
-					var1[var7] = var5;
-					var5 = var6;
-				} while(var6 != null);
+					mCHashEntry6 = mCHashEntry5.nextEntry;
+					int i7 = getSlotIndex(mCHashEntry5.slotHash, i3);
+					mCHashEntry5.nextEntry = arr[i7];
+					arr[i7] = mCHashEntry5;
+					mCHashEntry5 = mCHashEntry6;
+				} while(mCHashEntry6 != null);
 			}
 		}
 
 	}
 
-	public Object removeObject(int var1) {
-		MCHashEntry var2 = this.removeEntry(var1);
-		return var2 == null ? null : var2.valueEntry;
+	public Object removeObject(int integer) {
+		MCHashEntry mCHashEntry2 = this.removeEntry(integer);
+		return mCHashEntry2 == null ? null : mCHashEntry2.valueEntry;
 	}
 
-	final MCHashEntry removeEntry(int var1) {
-		int var2 = computeHash(var1);
-		int var3 = getSlotIndex(var2, this.slots.length);
-		MCHashEntry var4 = this.slots[var3];
+	final MCHashEntry removeEntry(int integer) {
+		int i2 = computeHash(integer);
+		int i3 = getSlotIndex(i2, this.slots.length);
+		MCHashEntry mCHashEntry4 = this.slots[i3];
 
-		MCHashEntry var5;
-		MCHashEntry var6;
-		for(var5 = var4; var5 != null; var5 = var6) {
-			var6 = var5.nextEntry;
-			if(var5.hashEntry == var1) {
+		MCHashEntry mCHashEntry5;
+		MCHashEntry mCHashEntry6;
+		for(mCHashEntry5 = mCHashEntry4; mCHashEntry5 != null; mCHashEntry5 = mCHashEntry6) {
+			mCHashEntry6 = mCHashEntry5.nextEntry;
+			if(mCHashEntry5.hashEntry == integer) {
 				++this.versionStamp;
 				--this.count;
-				if(var4 == var5) {
-					this.slots[var3] = var6;
+				if(mCHashEntry4 == mCHashEntry5) {
+					this.slots[i3] = mCHashEntry6;
 				} else {
-					var4.nextEntry = var6;
+					mCHashEntry4.nextEntry = mCHashEntry6;
 				}
 
-				return var5;
+				return mCHashEntry5;
 			}
 
-			var4 = var5;
+			mCHashEntry4 = mCHashEntry5;
 		}
 
-		return var5;
+		return mCHashEntry5;
 	}
 
 	public void clearMap() {
 		++this.versionStamp;
-		MCHashEntry[] var1 = this.slots;
+		MCHashEntry[] mCHashEntry1 = this.slots;
 
-		for(int var2 = 0; var2 < var1.length; ++var2) {
-			var1[var2] = null;
+		for(int i2 = 0; i2 < mCHashEntry1.length; ++i2) {
+			mCHashEntry1[i2] = null;
 		}
 
 		this.count = 0;
 	}
 
-	private void insert(int var1, int var2, Object var3, int var4) {
-		MCHashEntry var5 = this.slots[var4];
-		this.slots[var4] = new MCHashEntry(var1, var2, var3, var5);
+	private void insert(int integer1, int integer2, Object object, int integer4) {
+		MCHashEntry mCHashEntry5 = this.slots[integer4];
+		this.slots[integer4] = new MCHashEntry(integer1, integer2, object, mCHashEntry5);
 		if(this.count++ >= this.threshold) {
 			this.grow(2 * this.slots.length);
 		}
 
 	}
 
-	static int getHash(int var0) {
-		return computeHash(var0);
+	static int func_8378_8ujbEJ4x0Z16vsiSrQN2n5qD88mIG3hWihpNVWUdJM3Q0j12S20P659oBIT9(int integer) {
+		return computeHash(integer);
 	}
 }
--- net/minecraft/src/ChunkCoordIntPair.java
+++ net/minecraft/src/ChunkCoordIntPair.java
@@ -4,25 +4,25 @@
 	public int chunkXPos;
 	public int chunkZPos;
 
-	public ChunkCoordIntPair(int var1, int var2) {
-		this.chunkXPos = var1;
-		this.chunkZPos = var2;
+	public ChunkCoordIntPair(int chunkXPos, int chunkZPos) {
+		this.chunkXPos = chunkXPos;
+		this.chunkZPos = chunkZPos;
 	}
 
 	public int hashCode() {
 		return this.chunkXPos << 8 | this.chunkZPos;
 	}
 
-	public boolean equals(Object var1) {
-		ChunkCoordIntPair var2 = (ChunkCoordIntPair)var1;
-		return var2.chunkXPos == this.chunkXPos && var2.chunkZPos == this.chunkZPos;
+	public boolean equals(Object chunkCoordIntPair) {
+		ChunkCoordIntPair chunkCoordIntPair2 = (ChunkCoordIntPair)chunkCoordIntPair;
+		return chunkCoordIntPair2.chunkXPos == this.chunkXPos && chunkCoordIntPair2.chunkZPos == this.chunkZPos;
 	}
 
-	public double a(Entity var1) {
-		double var2 = (double)(this.chunkXPos * 16 + 8);
-		double var4 = (double)(this.chunkZPos * 16 + 8);
-		double var6 = var2 - var1.posX;
-		double var8 = var4 - var1.posZ;
-		return var6 * var6 + var8 * var8;
+	public double a(Entity entity) {
+		double d2 = (double)(this.chunkXPos * 16 + 8);
+		double d4 = (double)(this.chunkZPos * 16 + 8);
+		double d6 = d2 - entity.posX;
+		double d8 = d4 - entity.posZ;
+		return d6 * d6 + d8 * d8;
 	}
 }
--- net/minecraft/src/WorldServer.java
+++ net/minecraft/src/WorldServer.java
@@ -12,9 +12,9 @@
 	private SpawnerAnimals monsterSpawner = new SpawnerServer(this, 200, IMobs.class, new Class[]{EntityZombie.class, EntitySkeleton.class, EntityCreeper.class, EntitySpider.class, EntitySlime.class});
 	private SpawnerAnimals animalSpawner = new SpawnerAnimals(15, EntityAnimal.class, new Class[]{EntitySheep.class, EntityPig.class, EntityCow.class, EntityChicken.class});
 
-	public WorldServer(File var1, String var2, boolean var3) {
-		super(var1, var2);
-		this.monsters = var3;
+	public WorldServer(File file, String string, boolean boolean3) {
+		super(file, string);
+		this.monsters = boolean3;
 	}
 
 	public void tick() {
@@ -26,21 +26,21 @@
 		this.animalSpawner.onUpdate(this);
 	}
 
-	protected IChunkProvider getChunkProvider(File var1) {
-		this.chunkProviderServer = new ChunkProviderServer(this, new ChunkLoader(var1, true), new ChunkProviderGenerate(this, this.randomSeed));
+	protected IChunkProvider getChunkProvider(File saveDir) {
+		this.chunkProviderServer = new ChunkProviderServer(this, new ChunkLoader(saveDir, true), new ChunkProviderGenerate(this, this.randomSeed));
 		return this.chunkProviderServer;
 	}
 
-	public List getTileEntityList(int var1, int var2, int var3, int var4, int var5, int var6) {
-		ArrayList var7 = new ArrayList();
+	public List getTileEntityList(int integer1, int integer2, int integer3, int integer4, int integer5, int integer6) {
+		ArrayList arrayList7 = new ArrayList();
 
-		for(int var8 = 0; var8 < this.loadedTileEntityList.size(); ++var8) {
-			TileEntity var9 = (TileEntity)this.loadedTileEntityList.get(var8);
-			if(var9.xCoord >= var1 && var9.yCoord >= var2 && var9.zCoord >= var3 && var9.xCoord < var4 && var9.yCoord < var5 && var9.zCoord < var6) {
-				var7.add(var9);
+		for(int i8 = 0; i8 < this.loadedTileEntityList.size(); ++i8) {
+			TileEntity tileEntity9 = (TileEntity)this.loadedTileEntityList.get(i8);
+			if(tileEntity9.xCoord >= integer1 && tileEntity9.yCoord >= integer2 && tileEntity9.zCoord >= integer3 && tileEntity9.xCoord < integer4 && tileEntity9.yCoord < integer5 && tileEntity9.zCoord < integer6) {
+				arrayList7.add(tileEntity9);
 			}
 		}
 
-		return var7;
+		return arrayList7;
 	}
 }
--- net/minecraft/src/PlayerListBox.java
+++ net/minecraft/src/PlayerListBox.java
@@ -2,26 +2,27 @@
 
 import java.util.Vector;
 import javax.swing.JList;
+
 import net.minecraft.server.MinecraftServer;
 
 public class PlayerListBox extends JList implements IUpdatePlayerListBox {
 	private MinecraftServer mcServer;
 	private int playerCount = 0;
 
-	public PlayerListBox(MinecraftServer var1) {
-		this.mcServer = var1;
-		var1.addToOnlinePlayerList(this);
+	public PlayerListBox(MinecraftServer minecraftServer) {
+		this.mcServer = minecraftServer;
+		minecraftServer.addToOnlinePlayerList(this);
 	}
 
 	public void addAllPlayers() {
 		if(this.playerCount++ % 20 == 0) {
-			Vector var1 = new Vector();
+			Vector vector1 = new Vector();
 
-			for(int var2 = 0; var2 < this.mcServer.configManager.playerEntities.size(); ++var2) {
-				var1.add(((EntityPlayerMP)this.mcServer.configManager.playerEntities.get(var2)).username);
+			for(int i2 = 0; i2 < this.mcServer.configManager.playerEntities.size(); ++i2) {
+				vector1.add(((EntityPlayerMP)this.mcServer.configManager.playerEntities.get(i2)).username);
 			}
 
-			this.setListData(var1);
+			this.setListData(vector1);
 		}
 
 	}
--- net/minecraft/src/Packet18ArmAnimation.java
+++ net/minecraft/src/Packet18ArmAnimation.java
@@ -11,23 +11,23 @@
 	public Packet18ArmAnimation() {
 	}
 
-	public Packet18ArmAnimation(Entity var1, int var2) {
-		this.entityId = var1.entityID;
-		this.animate = var2;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.animate = var1.readByte();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeByte(this.animate);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleArmAnimation(this);
+	public Packet18ArmAnimation(Entity entity, int animate) {
+		this.entityId = entity.entityID;
+		this.animate = animate;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.animate = dataInputStream.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeByte(this.animate);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleArmAnimation(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/BlockBreakable.java
+++ net/minecraft/src/BlockBreakable.java
@@ -3,17 +3,17 @@
 public class BlockBreakable extends Block {
 	private boolean localFlag;
 
-	protected BlockBreakable(int var1, int var2, Material var3, boolean var4) {
-		super(var1, var2, var3);
-		this.localFlag = var4;
+	protected BlockBreakable(int id, int blockIndex, Material material, boolean localFlag) {
+		super(id, blockIndex, material);
+		this.localFlag = localFlag;
 	}
 
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockId(var2, var3, var4);
-		return !this.localFlag && var6 == this.blockID ? false : super.shouldSideBeRendered(var1, var2, var3, var4, var5);
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		int i6 = blockAccess.getBlockId(x, y, z);
+		return !this.localFlag && i6 == this.blockID ? false : super.shouldSideBeRendered(blockAccess, x, y, z, side);
 	}
 }
--- /dev/null
+++ net/minecraft/src/EntityGiantBoss.java
@@ -1,0 +1,74 @@
+package net.minecraft.src;
+
+public class EntityGiantBoss extends EntityMob {
+	public int maxHP = -1;
+
+	public EntityGiantBoss(World world) {
+		super(world);
+		this.moveSpeed = 0.5F;
+		this.attackStrength = 50;
+		this.yOffset *= 6.0F;
+		this.setSize(this.width * 6.0F, this.height * 6.0F);
+		ExtEvents.bossfightInProgress = true;
+		ExtEvents.bossRef = this;
+		ExtEvents.bossname = "Dormant Giant";
+	}
+
+	public EntityGiantBoss(World cv, int integer) {
+		super(cv);
+		if(integer <= 0) {
+			integer = 1;
+		}
+
+		this.moveSpeed = 0.5F;
+		this.attackStrength = 50;
+		this.health *= Math.min(4 * integer, 800);
+		this.maxHP = this.health;
+		this.yOffset *= 6.0F;
+		this.setSize(this.width * 6.0F, this.height * 6.0F);
+	}
+
+	protected float getBlockPathWeight(int x, int y, int z) {
+		return this.worldObj.getBrightness(x, y, z) - 0.5F;
+	}
+
+	protected void fall(float distance) {
+	}
+
+	protected String getLivingSound() {
+		return "ext.giantambient";
+	}
+
+	protected String getHurtSound() {
+		return "ext.gianthurt";
+	}
+
+	protected String getDeathSound() {
+		return "ext.giantdead";
+	}
+
+	public void onDeath(Entity entity) {
+		ExtEvents.GiantBossKilled(this);
+		super.onDeath(entity);
+		if(this.rand.nextInt(50) > 10) {
+			this.dropItem(ExtItems.flameberge.shiftedIndex, 1);
+		}
+
+	}
+
+	public void onLivingUpdate() {
+		super.onLivingUpdate();
+		if(this.maxHP == -1) {
+			this.maxHP = this.health;
+		}
+
+	}
+
+	public void setEntityDead() {
+		super.setEntityDead();
+	}
+
+	public int getEssenceDroppedOnKill() {
+		return 36 + this.rand.nextInt(12);
+	}
+}
--- /dev/null
+++ net/minecraft/src/Packet202SecureChatEcho.java
@@ -1,0 +1,57 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet202SecureChatEcho extends Packet3Chat {
+	public boolean verified = false;
+	public int secID = -1;
+	public int offset = 0;
+	String signature = "";
+
+	public Packet202SecureChatEcho() {
+	}
+
+	public Packet202SecureChatEcho(String string1, int integer2, int integer3, String string4) {
+		this.secID = integer2;
+		this.message = string1;
+		this.offset = integer3;
+		this.signature = string4;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.secID = dataInputStream.readInt();
+		this.offset = dataInputStream.readInt();
+		this.message = dataInputStream.readUTF();
+		this.signature = dataInputStream.readUTF();
+
+		try {
+			this.verified = CertUtils.verify(this.secID + "" + this.message.substring(this.offset), this.signature);
+		} catch (Exception exception3) {
+			exception3.printStackTrace();
+		}
+
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.secID);
+		dataOutputStream.writeInt(this.offset);
+		dataOutputStream.writeUTF(this.message);
+		dataOutputStream.writeUTF(this.signature);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		if(this.verified) {
+			netHandler.handleChat(this);
+		} else {
+			ExtLogger.i("[SecureChatEcho] RESPONSE");
+			((NetServerHandler)netHandler).kickPlayer("seclogin::chat_verify FAIL");
+		}
+
+	}
+
+	public int getPacketSize() {
+		return this.message.length() + this.signature.length() + 4 + 4;
+	}
+}
--- /dev/null
+++ net/minecraft/src/Packet201SecureChat.java
@@ -1,0 +1,59 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet201SecureChat extends Packet3Chat {
+	public boolean verified = false;
+	public int secID = -1;
+	public String signature = "";
+
+	public Packet201SecureChat() {
+	}
+
+	public Packet201SecureChat(String string, int integer) {
+		this.secID = integer;
+		this.message = string;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.secID = dataInputStream.readInt();
+		this.message = dataInputStream.readUTF();
+		this.signature = dataInputStream.readUTF();
+
+		try {
+			this.verified = CertUtils.verify(this.secID + "" + this.message, this.signature);
+		} catch (Exception exception3) {
+			exception3.printStackTrace();
+		}
+
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.secID);
+		dataOutputStream.writeUTF(this.message);
+
+		try {
+			this.signature = CertUtils.sign(this.secID + "" + this.message, CertUtils.loadedPrivKey);
+			dataOutputStream.writeUTF(this.signature);
+		} catch (Exception exception3) {
+			exception3.printStackTrace();
+		}
+
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		if(this.verified) {
+			netHandler.handleChat(this);
+		} else {
+			ExtLogger.i("[SecureChat] RESPONSE");
+			((NetServerHandler)netHandler).kickPlayer("seclogin::chat_verify FAIL");
+		}
+
+	}
+
+	public int getPacketSize() {
+		return this.message.length() + this.signature.length() + 4;
+	}
+}
--- net/minecraft/src/ItemSoup.java
+++ net/minecraft/src/ItemSoup.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class ItemSoup extends ItemFood {
-	public ItemSoup(int var1, int var2) {
-		super(var1, var2);
+	public ItemSoup(int itemID, int healAmount) {
+		super(itemID, healAmount);
 	}
 }
--- net/minecraft/src/BlockMobSpawner.java
+++ net/minecraft/src/BlockMobSpawner.java
@@ -3,19 +3,19 @@
 import java.util.Random;
 
 public class BlockMobSpawner extends BlockContainer {
-	protected BlockMobSpawner(int var1, int var2) {
-		super(var1, var2, Material.rock);
+	protected BlockMobSpawner(int id, int blockIndex) {
+		super(id, blockIndex, Material.rock);
 	}
 
 	protected TileEntity getBlockEntity() {
 		return new TileEntityMobSpawner();
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return 0;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 0;
 	}
 
--- /dev/null
+++ net/minecraft/src/BlockHighwoodDoor.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockHighwoodDoor extends BlockDoor {
+	public BlockHighwoodDoor(int integer1, int integer2) {
+		super(integer1, Material.wood);
+		this.blockIndexInTexture = integer2;
+	}
+
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : ExtItems.HighwoodDoor.shiftedIndex;
+	}
+}
--- /dev/null
+++ net/minecraft/src/TileEntityEssenceFountain.java
@@ -1,0 +1,48 @@
+package net.minecraft.src;
+
+public class TileEntityEssenceFountain extends TileEntity implements IInventory {
+	ItemStack singularSlot = new ItemStack(ExtItems.essence, 0);
+	public int counter = 0;
+
+	public int getSizeInventory() {
+		return 1;
+	}
+
+	public ItemStack getStackInSlot(int slot) {
+		return this.singularSlot;
+	}
+
+	public ItemStack decrStackSize(int slot, int stackSize) {
+		if(stackSize > this.singularSlot.stackSize) {
+			this.singularSlot = new ItemStack(ExtItems.essence, 0);
+		} else {
+			this.singularSlot.stackSize -= stackSize;
+		}
+
+		return this.singularSlot;
+	}
+
+	public void setInventorySlotContents(int slot, ItemStack itemStack) {
+		this.singularSlot = itemStack;
+	}
+
+	public String getInvName() {
+		return "unused";
+	}
+
+	public int getInventoryStackLimit() {
+		return 64;
+	}
+
+	public void writeToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setInteger("counter", this.counter);
+		nbttagcompound.setInteger("count", this.singularSlot.stackSize);
+		super.writeToNBT(nbttagcompound);
+	}
+
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		this.counter = nbttagcompound.getInteger("counter");
+		this.singularSlot = new ItemStack(ExtItems.essence, nbttagcompound.getInteger("count"));
+		super.readFromNBT(nbttagcompound);
+	}
+}
--- net/minecraft/src/Path.java
+++ net/minecraft/src/Path.java
@@ -4,20 +4,20 @@
 	private PathPoint[] pathPoints = new PathPoint[1024];
 	private int count = 0;
 
-	public PathPoint addPoint(PathPoint var1) {
-		if(var1.index >= 0) {
+	public PathPoint addPoint(PathPoint pathPoint) {
+		if(pathPoint.index >= 0) {
 			throw new IllegalStateException("OW KNOWS!");
 		} else {
 			if(this.count == this.pathPoints.length) {
-				PathPoint[] var2 = new PathPoint[this.count << 1];
-				System.arraycopy(this.pathPoints, 0, var2, 0, this.count);
-				this.pathPoints = var2;
+				PathPoint[] pathPoint2 = new PathPoint[this.count << 1];
+				System.arraycopy(this.pathPoints, 0, pathPoint2, 0, this.count);
+				this.pathPoints = pathPoint2;
 			}
 
-			this.pathPoints[this.count] = var1;
-			var1.index = this.count;
+			this.pathPoints[this.count] = pathPoint;
+			pathPoint.index = this.count;
 			this.sortBack(this.count++);
-			return var1;
+			return pathPoint;
 		}
 	}
 
@@ -26,91 +26,91 @@
 	}
 
 	public PathPoint dequeue() {
-		PathPoint var1 = this.pathPoints[0];
+		PathPoint pathPoint1 = this.pathPoints[0];
 		this.pathPoints[0] = this.pathPoints[--this.count];
 		this.pathPoints[this.count] = null;
 		if(this.count > 0) {
 			this.sortForward(0);
 		}
 
-		var1.index = -1;
-		return var1;
+		pathPoint1.index = -1;
+		return pathPoint1;
 	}
 
-	public void changeDistance(PathPoint var1, float var2) {
-		float var3 = var1.distanceToTarget;
-		var1.distanceToTarget = var2;
-		if(var2 < var3) {
-			this.sortBack(var1.index);
+	public void changeDistance(PathPoint pathPoint, float distanceToTarget) {
+		float f3 = pathPoint.distanceToTarget;
+		pathPoint.distanceToTarget = distanceToTarget;
+		if(distanceToTarget < f3) {
+			this.sortBack(pathPoint.index);
 		} else {
-			this.sortForward(var1.index);
+			this.sortForward(pathPoint.index);
 		}
 
 	}
 
-	private void sortBack(int var1) {
-		PathPoint var2 = this.pathPoints[var1];
+	private void sortBack(int index) {
+		PathPoint pathPoint2 = this.pathPoints[index];
 
-		int var4;
-		for(float var3 = var2.distanceToTarget; var1 > 0; var1 = var4) {
-			var4 = var1 - 1 >> 1;
-			PathPoint var5 = this.pathPoints[var4];
-			if(var3 >= var5.distanceToTarget) {
+		int i3;
+		for(float f4 = pathPoint2.distanceToTarget; index > 0; index = i3) {
+			i3 = index - 1 >> 1;
+			PathPoint pathPoint5 = this.pathPoints[i3];
+			if(f4 >= pathPoint5.distanceToTarget) {
 				break;
 			}
 
-			this.pathPoints[var1] = var5;
-			var5.index = var1;
+			this.pathPoints[index] = pathPoint5;
+			pathPoint5.index = index;
 		}
 
-		this.pathPoints[var1] = var2;
-		var2.index = var1;
+		this.pathPoints[index] = pathPoint2;
+		pathPoint2.index = index;
 	}
 
-	private void sortForward(int var1) {
-		PathPoint var2 = this.pathPoints[var1];
-		float var3 = var2.distanceToTarget;
+	private void sortForward(int index) {
+		PathPoint pathPoint2 = this.pathPoints[index];
+		float f3 = pathPoint2.distanceToTarget;
 
 		while(true) {
-			int var4 = 1 + (var1 << 1);
-			int var5 = var4 + 1;
-			if(var4 >= this.count) {
+			int i4 = 1 + (index << 1);
+			int i5 = i4 + 1;
+			if(i4 >= this.count) {
 				break;
 			}
 
-			PathPoint var6 = this.pathPoints[var4];
-			float var7 = var6.distanceToTarget;
-			PathPoint var8;
-			float var9;
-			if(var5 >= this.count) {
-				var8 = null;
-				var9 = Float.POSITIVE_INFINITY;
+			PathPoint pathPoint6 = this.pathPoints[i4];
+			float f7 = pathPoint6.distanceToTarget;
+			PathPoint pathPoint8;
+			float f9;
+			if(i5 >= this.count) {
+				pathPoint8 = null;
+				f9 = Float.POSITIVE_INFINITY;
 			} else {
-				var8 = this.pathPoints[var5];
-				var9 = var8.distanceToTarget;
+				pathPoint8 = this.pathPoints[i5];
+				f9 = pathPoint8.distanceToTarget;
 			}
 
-			if(var7 < var9) {
-				if(var7 >= var3) {
+			if(f7 < f9) {
+				if(f7 >= f3) {
 					break;
 				}
 
-				this.pathPoints[var1] = var6;
-				var6.index = var1;
-				var1 = var4;
+				this.pathPoints[index] = pathPoint6;
+				pathPoint6.index = index;
+				index = i4;
 			} else {
-				if(var9 >= var3) {
+				if(f9 >= f3) {
 					break;
 				}
 
-				this.pathPoints[var1] = var8;
-				var8.index = var1;
-				var1 = var5;
+				this.pathPoints[index] = pathPoint8;
+				pathPoint8.index = index;
+				index = i5;
 			}
 		}
 
-		this.pathPoints[var1] = var2;
-		var2.index = var1;
+		this.pathPoints[index] = pathPoint2;
+		pathPoint2.index = index;
 	}
 
 	public boolean isPathEmpty() {
--- /dev/null
+++ net/minecraft/src/BlockMultiSided.java
@@ -1,0 +1,41 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockMultiSided extends Block {
+	private int texTop;
+	private int texSide;
+	private int texBottom;
+	private int id;
+
+	public BlockMultiSided(int integer1, int integer2, int integer3, int integer4) {
+		super(integer1, Material.grass);
+		this.blockIndexInTexture = integer3;
+		this.setTickOnLoad(true);
+		this.texTop = integer2;
+		this.texSide = integer3;
+		this.texBottom = integer4;
+		this.id = integer1;
+	}
+
+	public BlockMultiSided(int integer1, int integer2, int integer3, int integer4, Material jj) {
+		super(integer1, jj);
+		this.blockIndexInTexture = integer3;
+		this.setTickOnLoad(true);
+		this.texTop = integer2;
+		this.texSide = integer3;
+		this.texBottom = integer4;
+		this.id = integer1;
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.texTop : (side == 0 ? this.texBottom : this.texSide);
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+	}
+
+	public int idDropped(int count, Random random) {
+		return this.id;
+	}
+}
--- net/minecraft/src/TileEntityMobSpawner.java
+++ net/minecraft/src/TileEntityMobSpawner.java
@@ -17,11 +17,11 @@
 	public void updateEntity() {
 		this.prevYaw = this.yaw;
 		if(this.anyPlayerInRange()) {
-			double var1 = (double)((float)this.xCoord + this.worldObj.rand.nextFloat());
-			double var3 = (double)((float)this.yCoord + this.worldObj.rand.nextFloat());
-			double var5 = (double)((float)this.zCoord + this.worldObj.rand.nextFloat());
-			this.worldObj.spawnParticle("smoke", var1, var3, var5, 0.0D, 0.0D, 0.0D);
-			this.worldObj.spawnParticle("flame", var1, var3, var5, 0.0D, 0.0D, 0.0D);
+			double d1 = (double)((float)this.xCoord + this.worldObj.rand.nextFloat());
+			double d3 = (double)((float)this.yCoord + this.worldObj.rand.nextFloat());
+			double d5 = (double)((float)this.zCoord + this.worldObj.rand.nextFloat());
+			this.worldObj.spawnParticle("smoke", d1, d3, d5, 0.0D, 0.0D, 0.0D);
+			this.worldObj.spawnParticle("flame", d1, d3, d5, 0.0D, 0.0D, 0.0D);
 
 			for(this.yaw += (double)(1000.0F / ((float)this.delay + 200.0F)); this.yaw > 360.0D; this.prevYaw -= 360.0D) {
 				this.yaw -= 360.0D;
@@ -34,60 +34,67 @@
 			if(this.delay > 0) {
 				--this.delay;
 			} else {
-				byte var7 = 4;
-
-				for(int var8 = 0; var8 < var7; ++var8) {
-					EntityLiving var9 = (EntityLiving)((EntityLiving)EntityList.createEntityByName(this.mobID, this.worldObj));
-					if(var9 == null) {
+				byte b7 = 4;
+				int i8 = 0;
+
+				while(true) {
+					if(i8 >= b7) {
+						super.updateEntity();
+						break;
+					}
+
+					EntityLiving entityLiving9 = (EntityLiving)EntityList.createEntityByName(this.mobID, this.worldObj);
+					if(entityLiving9 == null) {
 						return;
 					}
 
-					int var10 = this.worldObj.getEntitiesWithinAABB(var9.getClass(), AxisAlignedBB.getBoundingBoxFromPool((double)this.xCoord, (double)this.yCoord, (double)this.zCoord, (double)(this.xCoord + 1), (double)(this.yCoord + 1), (double)(this.zCoord + 1)).expand(8.0D, 4.0D, 8.0D)).size();
-					if(var10 >= 6) {
+					int i10 = this.worldObj.getEntitiesWithinAABB(entityLiving9.getClass(), AxisAlignedBB.getBoundingBoxFromPool((double)this.xCoord, (double)this.yCoord, (double)this.zCoord, (double)(this.xCoord + 1), (double)(this.yCoord + 1), (double)(this.zCoord + 1)).expand(8.0D, 4.0D, 8.0D)).size();
+					if(i10 >= 6) {
 						this.updateDelay();
 						return;
 					}
 
-					if(var9 != null) {
-						double var11 = (double)this.xCoord + (this.worldObj.rand.nextDouble() - this.worldObj.rand.nextDouble()) * 4.0D;
-						double var13 = (double)(this.yCoord + this.worldObj.rand.nextInt(3) - 1);
-						double var15 = (double)this.zCoord + (this.worldObj.rand.nextDouble() - this.worldObj.rand.nextDouble()) * 4.0D;
-						var9.setLocationAndAngles(var11, var13, var15, this.worldObj.rand.nextFloat() * 360.0F, 0.0F);
-						if(var9.getCanSpawnHere()) {
-							this.worldObj.spawnEntityInWorld(var9);
+					if(entityLiving9 != null) {
+						double d11 = (double)this.xCoord + (this.worldObj.rand.nextDouble() - this.worldObj.rand.nextDouble()) * 4.0D;
+						double d13 = (double)(this.yCoord + this.worldObj.rand.nextInt(3) - 1);
+						double d15 = (double)this.zCoord + (this.worldObj.rand.nextDouble() - this.worldObj.rand.nextDouble()) * 4.0D;
+						entityLiving9.setLocationAndAngles(d11, d13, d15, this.worldObj.rand.nextFloat() * 360.0F, 0.0F);
+						if(entityLiving9.getCanSpawnHere()) {
+							this.worldObj.spawnEntityInWorld(entityLiving9);
 
-							for(int var17 = 0; var17 < 20; ++var17) {
-								var1 = (double)this.xCoord + 0.5D + ((double)this.worldObj.rand.nextFloat() - 0.5D) * 2.0D;
-								var3 = (double)this.yCoord + 0.5D + ((double)this.worldObj.rand.nextFloat() - 0.5D) * 2.0D;
-								var5 = (double)this.zCoord + 0.5D + ((double)this.worldObj.rand.nextFloat() - 0.5D) * 2.0D;
-								this.worldObj.spawnParticle("smoke", var1, var3, var5, 0.0D, 0.0D, 0.0D);
-								this.worldObj.spawnParticle("flame", var1, var3, var5, 0.0D, 0.0D, 0.0D);
+							for(int i17 = 0; i17 < 20; ++i17) {
+								d1 = (double)this.xCoord + 0.5D + ((double)this.worldObj.rand.nextFloat() - 0.5D) * 2.0D;
+								d3 = (double)this.yCoord + 0.5D + ((double)this.worldObj.rand.nextFloat() - 0.5D) * 2.0D;
+								d5 = (double)this.zCoord + 0.5D + ((double)this.worldObj.rand.nextFloat() - 0.5D) * 2.0D;
+								this.worldObj.spawnParticle("smoke", d1, d3, d5, 0.0D, 0.0D, 0.0D);
+								this.worldObj.spawnParticle("flame", d1, d3, d5, 0.0D, 0.0D, 0.0D);
 							}
 
-							var9.spawnExplosionParticle();
+							entityLiving9.spawnExplosionParticle();
 							this.updateDelay();
 						}
 					}
+
+					++i8;
 				}
-
-				super.updateEntity();
 			}
 		}
+
 	}
 
 	private void updateDelay() {
 		this.delay = 200 + this.worldObj.rand.nextInt(600);
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		super.readFromNBT(var1);
-		this.mobID = var1.getString("EntityId");
-		this.delay = var1.getShort("Delay");
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		super.readFromNBT(nbttagcompound);
+		this.mobID = nbttagcompound.getString("EntityId");
+		this.delay = nbttagcompound.getShort("Delay");
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		super.writeToNBT(var1);
-		var1.setString("EntityId", this.mobID);
-		var1.setShort("Delay", (short)this.delay);
+	public void writeToNBT(NBTTagCompound nbttagcompound) {
+		super.writeToNBT(nbttagcompound);
+		nbttagcompound.setString("EntityId", this.mobID);
+		nbttagcompound.setShort("Delay", (short)this.delay);
 	}
 }
--- net/minecraft/src/BlockStairs.java
+++ net/minecraft/src/BlockStairs.java
@@ -6,12 +6,12 @@
 public class BlockStairs extends Block {
 	private Block modelBlock;
 
-	protected BlockStairs(int var1, Block var2) {
-		super(var1, var2.blockIndexInTexture, var2.material);
-		this.modelBlock = var2;
-		this.setHardness(var2.hardness);
-		this.setResistance(var2.resistance / 3.0F);
-		this.setStepSound(var2.stepSound);
+	protected BlockStairs(int id, Block modelBlock) {
+		super(id, modelBlock.blockIndexInTexture, modelBlock.material);
+		this.modelBlock = modelBlock;
+		this.setHardness(modelBlock.hardness);
+		this.setResistance(modelBlock.resistance / 3.0F);
+		this.setStepSound(modelBlock.stepSound);
 	}
 
 	public boolean isOpaqueCube() {
@@ -22,202 +22,203 @@
 		return 10;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return super.shouldSideBeRendered(var1, var2, var3, var4, var5);
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return super.shouldSideBeRendered(blockAccess, x, y, z, side);
 	}
 
-	public void getCollidingBoundingBoxes(World var1, int var2, int var3, int var4, AxisAlignedBB var5, ArrayList var6) {
-		int var7 = var1.getBlockMetadata(var2, var3, var4);
-		if(var7 == 0) {
+	public void getCollidingBoundingBoxes(World world, int x, int y, int z, AxisAlignedBB aabb, ArrayList arrayList) {
+		int i7 = world.getBlockMetadata(x, y, z);
+		if(i7 == 0) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList);
 			this.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		} else if(var7 == 1) {
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList);
+		} else if(i7 == 1) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 1.0F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList);
 			this.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		} else if(var7 == 2) {
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList);
+		} else if(i7 == 2) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 0.5F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList);
 			this.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 1.0F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		} else if(var7 == 3) {
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList);
+		} else if(i7 == 3) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList);
 			this.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+			super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList);
 		}
 
 		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!var1.multiplayerWorld) {
-			if(var1.getBlockMaterial(var2, var3 + 1, var4).isSolid()) {
-				var1.setBlockWithNotify(var2, var3, var4, this.modelBlock.blockID);
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(!world.multiplayerWorld) {
+			if(world.getBlockMaterial(x, y + 1, z).isSolid()) {
+				world.setBlockWithNotify(x, y, z, this.modelBlock.blockID);
 			} else {
-				this.updateState(var1, var2, var3, var4);
-				this.updateState(var1, var2 + 1, var3 - 1, var4);
-				this.updateState(var1, var2 - 1, var3 - 1, var4);
-				this.updateState(var1, var2, var3 - 1, var4 - 1);
-				this.updateState(var1, var2, var3 - 1, var4 + 1);
-				this.updateState(var1, var2 + 1, var3 + 1, var4);
-				this.updateState(var1, var2 - 1, var3 + 1, var4);
-				this.updateState(var1, var2, var3 + 1, var4 - 1);
-				this.updateState(var1, var2, var3 + 1, var4 + 1);
-			}
-
-			this.modelBlock.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		}
-	}
-
-	private void updateState(World var1, int var2, int var3, int var4) {
-		if(this.isBlockStair(var1, var2, var3, var4)) {
-			byte var5 = -1;
-			if(this.isBlockStair(var1, var2 + 1, var3 + 1, var4)) {
-				var5 = 0;
-			}
-
-			if(this.isBlockStair(var1, var2 - 1, var3 + 1, var4)) {
-				var5 = 1;
-			}
-
-			if(this.isBlockStair(var1, var2, var3 + 1, var4 + 1)) {
-				var5 = 2;
-			}
-
-			if(this.isBlockStair(var1, var2, var3 + 1, var4 - 1)) {
-				var5 = 3;
-			}
-
-			if(var5 < 0) {
-				if(this.isBlockSolid(var1, var2 + 1, var3, var4) && !this.isBlockSolid(var1, var2 - 1, var3, var4)) {
-					var5 = 0;
-				}
-
-				if(this.isBlockSolid(var1, var2 - 1, var3, var4) && !this.isBlockSolid(var1, var2 + 1, var3, var4)) {
-					var5 = 1;
-				}
-
-				if(this.isBlockSolid(var1, var2, var3, var4 + 1) && !this.isBlockSolid(var1, var2, var3, var4 - 1)) {
-					var5 = 2;
-				}
-
-				if(this.isBlockSolid(var1, var2, var3, var4 - 1) && !this.isBlockSolid(var1, var2, var3, var4 + 1)) {
-					var5 = 3;
-				}
-			}
-
-			if(var5 < 0) {
-				if(this.isBlockStair(var1, var2 - 1, var3 - 1, var4)) {
-					var5 = 0;
-				}
-
-				if(this.isBlockStair(var1, var2 + 1, var3 - 1, var4)) {
-					var5 = 1;
-				}
-
-				if(this.isBlockStair(var1, var2, var3 - 1, var4 - 1)) {
-					var5 = 2;
-				}
-
-				if(this.isBlockStair(var1, var2, var3 - 1, var4 + 1)) {
-					var5 = 3;
-				}
-			}
-
-			if(var5 >= 0) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var5);
-			}
-
-		}
-	}
-
-	private boolean isBlockSolid(World var1, int var2, int var3, int var4) {
-		return var1.getBlockMaterial(var2, var3, var4).isSolid();
-	}
-
-	private boolean isBlockStair(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3, var4);
-		return var5 == 0 ? false : Block.blocksList[var5].getRenderType() == 10;
-	}
-
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.modelBlock.onBlockClicked(var1, var2, var3, var4, var5);
-	}
-
-	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-		this.modelBlock.onBlockDestroyedByPlayer(var1, var2, var3, var4, var5);
-	}
-
-	public float getExplosionResistance(Entity var1) {
-		return this.modelBlock.getExplosionResistance(var1);
-	}
-
-	public int idDropped(int var1, Random var2) {
-		return this.modelBlock.idDropped(var1, var2);
-	}
-
-	public int quantityDropped(Random var1) {
-		return this.modelBlock.quantityDropped(var1);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return this.modelBlock.getBlockTextureFromSide(var1);
+				this.updateState(world, x, y, z);
+				this.updateState(world, x + 1, y - 1, z);
+				this.updateState(world, x - 1, y - 1, z);
+				this.updateState(world, x, y - 1, z - 1);
+				this.updateState(world, x, y - 1, z + 1);
+				this.updateState(world, x + 1, y + 1, z);
+				this.updateState(world, x - 1, y + 1, z);
+				this.updateState(world, x, y + 1, z - 1);
+				this.updateState(world, x, y + 1, z + 1);
+			}
+
+			this.modelBlock.onNeighborBlockChange(world, x, y, z, flag);
+		}
+
+	}
+
+	private void updateState(World world, int x, int y, int z) {
+		if(this.isBlockStair(world, x, y, z)) {
+			byte b5 = -1;
+			if(this.isBlockStair(world, x + 1, y + 1, z)) {
+				b5 = 0;
+			}
+
+			if(this.isBlockStair(world, x - 1, y + 1, z)) {
+				b5 = 1;
+			}
+
+			if(this.isBlockStair(world, x, y + 1, z + 1)) {
+				b5 = 2;
+			}
+
+			if(this.isBlockStair(world, x, y + 1, z - 1)) {
+				b5 = 3;
+			}
+
+			if(b5 < 0) {
+				if(this.isBlockSolid(world, x + 1, y, z) && !this.isBlockSolid(world, x - 1, y, z)) {
+					b5 = 0;
+				}
+
+				if(this.isBlockSolid(world, x - 1, y, z) && !this.isBlockSolid(world, x + 1, y, z)) {
+					b5 = 1;
+				}
+
+				if(this.isBlockSolid(world, x, y, z + 1) && !this.isBlockSolid(world, x, y, z - 1)) {
+					b5 = 2;
+				}
+
+				if(this.isBlockSolid(world, x, y, z - 1) && !this.isBlockSolid(world, x, y, z + 1)) {
+					b5 = 3;
+				}
+			}
+
+			if(b5 < 0) {
+				if(this.isBlockStair(world, x - 1, y - 1, z)) {
+					b5 = 0;
+				}
+
+				if(this.isBlockStair(world, x + 1, y - 1, z)) {
+					b5 = 1;
+				}
+
+				if(this.isBlockStair(world, x, y - 1, z - 1)) {
+					b5 = 2;
+				}
+
+				if(this.isBlockStair(world, x, y - 1, z + 1)) {
+					b5 = 3;
+				}
+			}
+
+			if(b5 >= 0) {
+				world.setBlockMetadataWithNotify(x, y, z, b5);
+			}
+		}
+
+	}
+
+	private boolean isBlockSolid(World world, int x, int y, int z) {
+		return world.getBlockMaterial(x, y, z).isSolid();
+	}
+
+	private boolean isBlockStair(World world, int x, int y, int z) {
+		int i5 = world.getBlockId(x, y, z);
+		return i5 == 0 ? false : Block.blocksList[i5].getRenderType() == 10;
+	}
+
+	public void onBlockClicked(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.modelBlock.onBlockClicked(world, x, y, z, entityPlayer);
+	}
+
+	public void onBlockDestroyedByPlayer(World world, int x, int y, int z, int flag) {
+		this.modelBlock.onBlockDestroyedByPlayer(world, x, y, z, flag);
+	}
+
+	public float getExplosionResistance(Entity entity) {
+		return this.modelBlock.getExplosionResistance(entity);
+	}
+
+	public int idDropped(int count, Random random) {
+		return this.modelBlock.idDropped(count, random);
+	}
+
+	public int quantityDropped(Random random) {
+		return this.modelBlock.quantityDropped(random);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return this.modelBlock.getBlockTextureFromSide(side);
 	}
 
 	public int tickRate() {
 		return this.modelBlock.tickRate();
 	}
 
-	public void velocityToAddToEntity(World var1, int var2, int var3, int var4, Entity var5, Vec3D var6) {
-		this.modelBlock.velocityToAddToEntity(var1, var2, var3, var4, var5, var6);
+	public void velocityToAddToEntity(World world, int x, int y, int z, Entity entity, Vec3D vector) {
+		this.modelBlock.velocityToAddToEntity(world, x, y, z, entity, vector);
 	}
 
 	public boolean isCollidable() {
 		return this.modelBlock.isCollidable();
 	}
 
-	public boolean canCollideCheck(int var1, boolean var2) {
-		return this.modelBlock.canCollideCheck(var1, var2);
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return this.modelBlock.canPlaceBlockAt(var1, var2, var3, var4);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		this.onNeighborBlockChange(var1, var2, var3, var4, 0);
-		this.modelBlock.onBlockAdded(var1, var2, var3, var4);
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		this.modelBlock.onBlockRemoval(var1, var2, var3, var4);
-	}
-
-	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		this.modelBlock.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
-	}
-
-	public void dropBlockAsItem(World var1, int var2, int var3, int var4, int var5) {
-		this.modelBlock.dropBlockAsItem(var1, var2, var3, var4, var5);
-	}
-
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-		this.modelBlock.onEntityWalking(var1, var2, var3, var4, var5);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		this.modelBlock.updateTick(var1, var2, var3, var4, var5);
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		return this.modelBlock.blockActivated(var1, var2, var3, var4, var5);
-	}
-
-	public void onBlockDestroyedByExplosion(World var1, int var2, int var3, int var4) {
-		this.modelBlock.onBlockDestroyedByExplosion(var1, var2, var3, var4);
+	public boolean canCollideCheck(int metadata, boolean boolean2) {
+		return this.modelBlock.canCollideCheck(metadata, boolean2);
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return this.modelBlock.canPlaceBlockAt(world, x, y, z);
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		this.onNeighborBlockChange(world, x, y, z, 0);
+		this.modelBlock.onBlockAdded(world, x, y, z);
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		this.modelBlock.onBlockRemoval(world, x, y, z);
+	}
+
+	public void dropBlockAsItemWithChance(World world, int x, int y, int z, int metadata, float chance) {
+		this.modelBlock.dropBlockAsItemWithChance(world, x, y, z, metadata, chance);
+	}
+
+	public void dropBlockAsItem(World world, int x, int y, int z, int metadata) {
+		this.modelBlock.dropBlockAsItem(world, x, y, z, metadata);
+	}
+
+	public void onEntityWalking(World world, int x, int y, int z, Entity entity) {
+		this.modelBlock.onEntityWalking(world, x, y, z, entity);
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		this.modelBlock.updateTick(world, x, y, z, random);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		return this.modelBlock.blockActivated(world, x, y, z, entityPlayer);
+	}
+
+	public void onBlockDestroyedByExplosion(World world, int x, int y, int z) {
+		this.modelBlock.onBlockDestroyedByExplosion(world, x, y, z);
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockFreezer.java
@@ -1,0 +1,99 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockFreezer extends BlockContainer {
+	private final boolean field_6353_9lONjDVx79oy60hZya018D9Rq9O6ch1ym6701H1GNQ9IN04k22slH9HZAyhO;
+
+	public BlockFreezer(int integer1, int integer2, boolean boolean3) {
+		super(integer1, Material.rock);
+		this.blockIndexInTexture = integer2;
+		this.field_6353_9lONjDVx79oy60hZya018D9Rq9O6ch1ym6701H1GNQ9IN04k22slH9HZAyhO = boolean3;
+	}
+
+	public int idDropped(int count, Random random) {
+		return ExtBlocks.Freezer.blockID;
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		super.onBlockAdded(world, x, y, z);
+		this.func_6351_5n1gji9wuGc7SLlg83ou2Y18N7a72RdNsku3OycQMS0K9OE8WiT87b13wD4z(world, x, y, z);
+	}
+
+	private void func_6351_5n1gji9wuGc7SLlg83ou2Y18N7a72RdNsku3OycQMS0K9OE8WiT87b13wD4z(World cv, int integer2, int integer3, int integer4) {
+		int i5 = cv.getBlockId(integer2, integer3, integer4 - 1);
+		int i6 = cv.getBlockId(integer2, integer3, integer4 + 1);
+		int i7 = cv.getBlockId(integer2 - 1, integer3, integer4);
+		int i8 = cv.getBlockId(integer2 + 1, integer3, integer4);
+		byte b9 = 3;
+		if(Block.opaqueCubeLookup[i5] && !Block.opaqueCubeLookup[i6]) {
+			b9 = 3;
+		}
+
+		if(Block.opaqueCubeLookup[i6] && !Block.opaqueCubeLookup[i5]) {
+			b9 = 2;
+		}
+
+		if(Block.opaqueCubeLookup[i7] && !Block.opaqueCubeLookup[i8]) {
+			b9 = 5;
+		}
+
+		if(Block.opaqueCubeLookup[i8] && !Block.opaqueCubeLookup[i7]) {
+			b9 = 4;
+		}
+
+		cv.setBlockMetadataWithNotify(integer2, integer3, integer4, b9);
+	}
+
+	public int getBlockTexture(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return side != 1 && side != 0 ? (side != blockAccess.getBlockMetadata(x, y, z) ? (this.field_6353_9lONjDVx79oy60hZya018D9Rq9O6ch1ym6701H1GNQ9IN04k22slH9HZAyhO ? this.blockIndexInTexture - 2 : this.blockIndexInTexture - 1) : this.blockIndexInTexture) : Block.stone.blockIndexInTexture;
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side != 1 && side != 0 ? (side == 3 ? this.blockIndexInTexture : (this.field_6353_9lONjDVx79oy60hZya018D9Rq9O6ch1ym6701H1GNQ9IN04k22slH9HZAyhO ? this.blockIndexInTexture - 2 : this.blockIndexInTexture - 1)) : Block.stone.blockID;
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+		if(this.field_6353_9lONjDVx79oy60hZya018D9Rq9O6ch1ym6701H1GNQ9IN04k22slH9HZAyhO) {
+			int i6 = worldObj.getBlockMetadata(x, y, z);
+			float f7 = (float)x + 0.5F;
+			float f8 = (float)y + 0.0F + rand.nextFloat() * 6.0F / 16.0F;
+			float f9 = (float)z + 0.5F;
+			float f10 = 0.52F;
+			float f11 = rand.nextFloat() * 0.6F - 0.3F;
+			int i12 = rand.nextInt(3) + 1;
+			if(i6 == 4) {
+				worldObj.spawnParticle("snowflake" + i12, (double)(f7 - f10), (double)f8, (double)(f9 + f11), 0.0D, -0.01D, 0.0D);
+			} else if(i6 == 5) {
+				worldObj.spawnParticle("snowflake" + i12, (double)(f7 + f10), (double)f8, (double)(f9 + f11), 0.0D, -0.01D, 0.0D);
+			} else if(i6 == 2) {
+				worldObj.spawnParticle("snowflake" + i12, (double)(f7 + f11), (double)f8, (double)(f9 - f10), 0.0D, -0.01D, 0.0D);
+			} else if(i6 == 3) {
+				worldObj.spawnParticle("snowflake" + i12, (double)(f7 + f11), (double)f8, (double)(f9 + f10), 0.0D, -0.01D, 0.0D);
+			}
+		}
+
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		TileEntityFreezer tileEntityFreezer6 = (TileEntityFreezer)world.getBlockTileEntity(x, y, z);
+		return true;
+	}
+
+	public static void func_6352_8X90z7XN1545MV5I8XEva93H97C9EGHObvg8oT32lgErE6oF07519FXZAPOF(boolean boolean1, World cv, int integer3, int integer4, int integer5) {
+		int i5 = cv.getBlockMetadata(integer3, integer4, integer5);
+		TileEntity tileEntity6 = cv.getBlockTileEntity(integer3, integer4, integer5);
+		if(boolean1) {
+			cv.setBlockWithNotify(integer3, integer4, integer5, ExtBlocks.WorkingFreezer.blockID);
+		} else {
+			cv.setBlockWithNotify(integer3, integer4, integer5, ExtBlocks.Freezer.blockID);
+		}
+
+		cv.setBlockMetadataWithNotify(integer3, integer4, integer5, i5);
+		cv.setBlockTileEntity(integer3, integer4, integer5, tileEntity6);
+	}
+
+	protected TileEntity getBlockEntity() {
+		return new TileEntityFreezer();
+	}
+}
--- net/minecraft/src/Chunk.java
+++ net/minecraft/src/Chunk.java
@@ -26,8 +26,9 @@
 	public boolean isChunkRendered;
 	public boolean hasEntities;
 	public long lastSaveTime;
+	public String field_7927_7Gh7On29pZ42Am5jJ7oIvb666H7vcpZAmnW7vrY9T25b6P4VEzQSXyBKWvAh;
 
-	public Chunk(World var1, int var2, int var3) {
+	public Chunk(World world, int xPosition, int zPosition) {
 		this.chunkTileEntityMap = new HashMap();
 		this.entities = new List[8];
 		this.isTerrainPopulated = false;
@@ -35,368 +36,377 @@
 		this.isChunkRendered = false;
 		this.hasEntities = false;
 		this.lastSaveTime = 0L;
-		this.worldObj = var1;
-		this.xPosition = var2;
-		this.zPosition = var3;
+		this.worldObj = world;
+		this.xPosition = xPosition;
+		this.zPosition = zPosition;
 		this.heightMap = new byte[256];
 
-		for(int var4 = 0; var4 < this.entities.length; ++var4) {
-			this.entities[var4] = new ArrayList();
+		for(int i4 = 0; i4 < this.entities.length; ++i4) {
+			this.entities[i4] = new ArrayList();
 		}
 
-	}
-
-	public Chunk(World var1, byte[] var2, int var3, int var4) {
-		this(var1, var3, var4);
-		this.blocks = var2;
-		this.data = new NibbleArray(var2.length);
-		this.skylightMap = new NibbleArray(var2.length);
-		this.blocklightMap = new NibbleArray(var2.length);
-	}
-
-	public boolean isAtLocation(int var1, int var2) {
-		return var1 == this.xPosition && var2 == this.zPosition;
-	}
-
-	public int getHeightValue(int var1, int var2) {
-		return this.heightMap[var2 << 4 | var1] & 255;
+		this.field_7927_7Gh7On29pZ42Am5jJ7oIvb666H7vcpZAmnW7vrY9T25b6P4VEzQSXyBKWvAh = GuiIngame.Namegen2(this.worldObj.randomSeed, this.xPosition, this.zPosition);
+	}
+
+	public Chunk(World world, byte[] blocks, int xPosition, int zPositin) {
+		this(world, xPosition, zPositin);
+		this.blocks = blocks;
+		this.data = new NibbleArray(blocks.length);
+		this.skylightMap = new NibbleArray(blocks.length);
+		this.blocklightMap = new NibbleArray(blocks.length);
+	}
+
+	public boolean isAtLocation(int xPosition, int zPosition) {
+		return xPosition == this.xPosition && zPosition == this.zPosition;
+	}
+
+	public int getHeightValue(int blockX, int blockZ) {
+		return this.heightMap[blockZ << 4 | blockX] & 255;
 	}
 
 	public void doNothing() {
 	}
 
 	public void generateSkylightMap() {
-		int var1 = 127;
+		int i1 = 127;
 
-		int var2;
-		int var3;
-		for(var2 = 0; var2 < 16; ++var2) {
-			for(var3 = 0; var3 < 16; ++var3) {
-				this.heightMap[var3 << 4 | var2] = -128;
-				this.relightBlock(var2, 127, var3);
-				if((this.heightMap[var3 << 4 | var2] & 255) < var1) {
-					var1 = this.heightMap[var3 << 4 | var2] & 255;
+		int i2;
+		int i3;
+		for(i2 = 0; i2 < 16; ++i2) {
+			for(i3 = 0; i3 < 16; ++i3) {
+				this.heightMap[i3 << 4 | i2] = -128;
+				this.relightBlock(i2, 127, i3);
+				if((this.heightMap[i3 << 4 | i2] & 255) < i1) {
+					i1 = this.heightMap[i3 << 4 | i2] & 255;
 				}
 			}
 		}
 
-		this.height = var1;
+		this.height = i1;
 
-		for(var2 = 0; var2 < 16; ++var2) {
-			for(var3 = 0; var3 < 16; ++var3) {
-				this.updateSkylight_do(var2, var3);
+		for(i2 = 0; i2 < 16; ++i2) {
+			for(i3 = 0; i3 < 16; ++i3) {
+				this.updateSkylight_do(i2, i3);
 			}
 		}
 
 		this.isModified = true;
 	}
 
-	private void updateSkylight_do(int var1, int var2) {
-		int var3 = this.getHeightValue(var1, var2);
-		int var4 = this.xPosition * 16 + var1;
-		int var5 = this.zPosition * 16 + var2;
-		this.checkSkylightNeighborUpdate(var4 - 1, var5, var3);
-		this.checkSkylightNeighborUpdate(var4 + 1, var5, var3);
-		this.checkSkylightNeighborUpdate(var4, var5 - 1, var3);
-		this.checkSkylightNeighborUpdate(var4, var5 + 1, var3);
+	private void updateSkylight_do(int x, int z) {
+		int i3 = this.getHeightValue(x, z);
+		int i4 = this.xPosition * 16 + x;
+		int i5 = this.zPosition * 16 + z;
+		this.checkSkylightNeighborUpdate(i4 - 1, i5, i3);
+		this.checkSkylightNeighborUpdate(i4 + 1, i5, i3);
+		this.checkSkylightNeighborUpdate(i4, i5 - 1, i3);
+		this.checkSkylightNeighborUpdate(i4, i5 + 1, i3);
 	}
 
-	private void checkSkylightNeighborUpdate(int var1, int var2, int var3) {
-		int var4 = this.worldObj.getHeightValue(var1, var2);
-		if(var4 > var3) {
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var1, var3, var2, var1, var4, var2);
-		} else if(var4 < var3) {
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var1, var4, var2, var1, var3, var2);
+	private void checkSkylightNeighborUpdate(int blockX, int blockZ, int blockY) {
+		int i4 = this.worldObj.getHeightValue(blockX, blockZ);
+		if(i4 > blockY) {
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, blockX, blockY, blockZ, blockX, i4, blockZ);
+		} else if(i4 < blockY) {
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, blockX, i4, blockZ, blockX, blockY, blockZ);
 		}
 
 		this.isModified = true;
 	}
 
-	private void relightBlock(int var1, int var2, int var3) {
-		int var4 = this.heightMap[var3 << 4 | var1] & 255;
-		int var5 = var4;
-		if(var2 > var4) {
-			var5 = var2;
-		}
-
-		for(int var6 = var1 << 11 | var3 << 7; var5 > 0 && Block.lightOpacity[this.blocks[var6 + var5 - 1]] == 0; --var5) {
-		}
-
-		if(var5 != var4) {
-			this.worldObj.markBlocksDirtyVertical(var1, var3, var5, var4);
-			this.heightMap[var3 << 4 | var1] = (byte)var5;
-			int var7;
-			int var8;
-			int var9;
-			if(var5 < this.height) {
-				this.height = var5;
+	private void relightBlock(int x, int y, int z) {
+		int i4 = this.heightMap[z << 4 | x] & 255;
+		int i5 = i4;
+		if(y > i4) {
+			i5 = y;
+		}
+
+		int i6;
+		for(i6 = x << 11 | z << 7; i5 > 0 && Block.lightOpacity[this.blocks[i6 + i5 - 1] & 255] == 0; --i5) {
+		}
+
+		if(i5 != i4) {
+			this.worldObj.markBlocksDirtyVertical(x, z, i5, i4);
+			this.heightMap[z << 4 | x] = (byte)i5;
+			int i7;
+			int i8;
+			if(i5 < this.height) {
+				this.height = i5;
 			} else {
-				var7 = 127;
-
-				for(var8 = 0; var8 < 16; ++var8) {
-					for(var9 = 0; var9 < 16; ++var9) {
-						if((this.heightMap[var9 << 4 | var8] & 255) < var7) {
-							var7 = this.heightMap[var9 << 4 | var8] & 255;
+				i6 = 127;
+				i7 = 0;
+
+				while(true) {
+					if(i7 >= 16) {
+						this.height = i6;
+						break;
+					}
+
+					for(i8 = 0; i8 < 16; ++i8) {
+						if((this.heightMap[i8 << 4 | i7] & 255) < i6) {
+							i6 = this.heightMap[i8 << 4 | i7] & 255;
 						}
 					}
+
+					++i7;
 				}
-
-				this.height = var7;
 			}
 
-			var7 = this.xPosition * 16 + var1;
-			var8 = this.zPosition * 16 + var3;
-			if(var5 < var4) {
-				for(var9 = var5; var9 < var4; ++var9) {
-					this.skylightMap.set(var1, var9, var3, 15);
+			i6 = this.xPosition * 16 + x;
+			i7 = this.zPosition * 16 + z;
+			if(i5 < i4) {
+				for(i8 = i5; i8 < i4; ++i8) {
+					this.skylightMap.set(x, i8, z, 15);
 				}
 			} else {
-				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var7, var4, var8, var7, var5, var8);
-
-				for(var9 = var4; var9 < var5; ++var9) {
-					this.skylightMap.set(var1, var9, var3, 0);
-				}
-			}
-
-			var9 = 15;
-
-			int var10;
-			for(var10 = var5; var5 > 0 && var9 > 0; this.skylightMap.set(var1, var5, var3, var9)) {
-				--var5;
-				int var11 = Block.lightOpacity[this.getBlockID(var1, var5, var3)];
-				if(var11 == 0) {
-					var11 = 1;
-				}
-
-				var9 -= var11;
-				if(var9 < 0) {
-					var9 = 0;
-				}
-			}
-
-			while(var5 > 0 && Block.lightOpacity[this.getBlockID(var1, var5 - 1, var3)] == 0) {
-				--var5;
-			}
-
-			if(var5 != var10) {
-				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var7 - 1, var5, var8 - 1, var7 + 1, var10, var8 + 1);
-			}
-
-			this.isModified = true;
-		}
-	}
-
-	public int getBlockID(int var1, int var2, int var3) {
-		return this.blocks[var1 << 11 | var3 << 7 | var2];
-	}
-
-	public boolean setBlockIDWithMetadata(int var1, int var2, int var3, int var4, int var5) {
-		byte var6 = (byte)var4;
-		int var7 = this.heightMap[var3 << 4 | var1] & 255;
-		int var8 = this.blocks[var1 << 11 | var3 << 7 | var2] & 255;
-		if(var8 == var4 && this.data.get(var1, var2, var3) == var5) {
-			return false;
-		} else {
-			int var9 = this.xPosition * 16 + var1;
-			int var10 = this.zPosition * 16 + var3;
-			this.blocks[var1 << 11 | var3 << 7 | var2] = var6;
-			if(var8 != 0 && !this.worldObj.multiplayerWorld) {
-				Block.blocksList[var8].onBlockRemoval(this.worldObj, var9, var2, var10);
-			}
-
-			this.data.set(var1, var2, var3, var5);
-			if(Block.lightOpacity[var6] != 0) {
-				if(var2 >= var7) {
-					this.relightBlock(var1, var2 + 1, var3);
-				}
-			} else if(var2 == var7 - 1) {
-				this.relightBlock(var1, var2, var3);
-			}
-
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var9, var2, var10, var9, var2, var10);
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, var9, var2, var10, var9, var2, var10);
-			this.updateSkylight_do(var1, var3);
-			if(var4 != 0) {
-				Block.blocksList[var4].onBlockAdded(this.worldObj, var9, var2, var10);
-			}
-
-			this.isModified = true;
-			return true;
-		}
-	}
-
-	public boolean setBlockID(int var1, int var2, int var3, int var4) {
-		byte var5 = (byte)var4;
-		int var6 = this.heightMap[var3 << 4 | var1] & 255;
-		int var7 = this.blocks[var1 << 11 | var3 << 7 | var2] & 255;
-		if(var7 == var4) {
-			return false;
-		} else {
-			int var8 = this.xPosition * 16 + var1;
-			int var9 = this.zPosition * 16 + var3;
-			this.blocks[var1 << 11 | var3 << 7 | var2] = var5;
-			if(var7 != 0) {
-				Block.blocksList[var7].onBlockRemoval(this.worldObj, var8, var2, var9);
-			}
-
-			this.data.set(var1, var2, var3, 0);
-			if(Block.lightOpacity[var5] != 0) {
-				if(var2 >= var6) {
-					this.relightBlock(var1, var2 + 1, var3);
-				}
-			} else if(var2 == var6 - 1) {
-				this.relightBlock(var1, var2, var3);
-			}
-
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var8, var2, var9, var8, var2, var9);
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, var8, var2, var9, var8, var2, var9);
-			this.updateSkylight_do(var1, var3);
-			if(var4 != 0 && !this.worldObj.multiplayerWorld) {
-				Block.blocksList[var4].onBlockAdded(this.worldObj, var8, var2, var9);
-			}
-
-			this.isModified = true;
-			return true;
-		}
-	}
-
-	public int getBlockMetadata(int var1, int var2, int var3) {
-		return this.data.get(var1, var2, var3);
-	}
-
-	public void setBlockMetadata(int var1, int var2, int var3, int var4) {
-		this.isModified = true;
-		this.data.set(var1, var2, var3, var4);
-	}
-
-	public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
-		return var1 == EnumSkyBlock.Sky ? this.skylightMap.get(var2, var3, var4) : (var1 == EnumSkyBlock.Block ? this.blocklightMap.get(var2, var3, var4) : 0);
-	}
-
-	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-		this.isModified = true;
-		if(var1 == EnumSkyBlock.Sky) {
-			this.skylightMap.set(var2, var3, var4, var5);
-		} else {
-			if(var1 != EnumSkyBlock.Block) {
+				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, i6, i4, i7, i6, i5, i7);
+
+				for(i8 = i4; i8 < i5; ++i8) {
+					this.skylightMap.set(x, i8, z, 0);
+				}
+			}
+
+			i8 = 15;
+
+			int i9;
+			for(i9 = i5; i5 > 0 && i8 > 0; this.skylightMap.set(x, i5, z, i8)) {
+				--i5;
+				int i10 = Block.lightOpacity[this.getBlockID(x, i5, z)];
+				if(i10 == 0) {
+					i10 = 1;
+				}
+
+				i8 -= i10;
+				if(i8 < 0) {
+					i8 = 0;
+				}
+			}
+
+			while(i5 > 0 && Block.lightOpacity[this.getBlockID(x, i5 - 1, z)] == 0) {
+				--i5;
+			}
+
+			if(i5 != i9) {
+				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, i6 - 1, i5, i7 - 1, i6 + 1, i9, i7 + 1);
+			}
+
+			this.isModified = true;
+		}
+
+	}
+
+	public int getBlockID(int x, int y, int z) {
+		return this.blocks[x << 11 | z << 7 | y] & 255;
+	}
+
+	public boolean setBlockIDWithMetadata(int x, int y, int z, int id, int metadata) {
+		int i7 = this.heightMap[z << 4 | x] & 255;
+		int i8 = this.blocks[x << 11 | z << 7 | y] & 255;
+		if(i8 == id && this.data.get(x, y, z) == metadata) {
+			return false;
+		} else {
+			int i9 = this.xPosition * 16 + x;
+			int i10 = this.zPosition * 16 + z;
+			this.blocks[x << 11 | z << 7 | y] = (byte)id;
+			if(i8 != 0 && !this.worldObj.multiplayerWorld) {
+				Block.blocksList[i8].onBlockRemoval(this.worldObj, i9, y, i10);
+			}
+
+			this.data.set(x, y, z, metadata);
+			if(Block.lightOpacity[id] != 0) {
+				if(y >= i7) {
+					this.relightBlock(x, y + 1, z);
+				}
+			} else if(y == i7 - 1) {
+				this.relightBlock(x, y, z);
+			}
+
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, i9, y, i10, i9, y, i10);
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, i9, y, i10, i9, y, i10);
+			this.updateSkylight_do(x, z);
+			if(id != 0) {
+				Block.blocksList[id].onBlockAdded(this.worldObj, i9, y, i10);
+			}
+
+			this.isModified = true;
+			return true;
+		}
+	}
+
+	public boolean setBlockID(int x, int y, int z, int id) {
+		byte b5 = (byte)id;
+		int i6 = this.heightMap[z << 4 | x] & 255;
+		int i7 = this.blocks[x << 11 | z << 7 | y] & 255;
+		if(i7 == id) {
+			return false;
+		} else {
+			int i8 = this.xPosition * 16 + x;
+			int i9 = this.zPosition * 16 + z;
+			this.blocks[x << 11 | z << 7 | y] = b5;
+			if(i7 != 0) {
+				Block.blocksList[i7].onBlockRemoval(this.worldObj, i8, y, i9);
+			}
+
+			this.data.set(x, y, z, 0);
+			if(Block.lightOpacity[id] != 0) {
+				if(y >= i6) {
+					this.relightBlock(x, y + 1, z);
+				}
+			} else if(y == i6 - 1) {
+				this.relightBlock(x, y, z);
+			}
+
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, i8, y, i9, i8, y, i9);
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, i8, y, i9, i8, y, i9);
+			this.updateSkylight_do(x, z);
+			if(id != 0 && !this.worldObj.multiplayerWorld) {
+				Block.blocksList[id].onBlockAdded(this.worldObj, i8, y, i9);
+			}
+
+			this.isModified = true;
+			return true;
+		}
+	}
+
+	public int getBlockMetadata(int x, int y, int z) {
+		return this.data.get(x, y, z);
+	}
+
+	public void setBlockMetadata(int x, int y, int z, int metadata) {
+		this.isModified = true;
+		this.data.set(x, y, z, metadata);
+	}
+
+	public int getSavedLightValue(EnumSkyBlock skyBlock, int x, int y, int z) {
+		return skyBlock == EnumSkyBlock.Sky ? this.skylightMap.get(x, y, z) : (skyBlock == EnumSkyBlock.Block ? this.blocklightMap.get(x, y, z) : 0);
+	}
+
+	public void setLightValue(EnumSkyBlock block, int x, int y, int z, int lightValue) {
+		this.isModified = true;
+		if(block == EnumSkyBlock.Sky) {
+			this.skylightMap.set(x, y, z, lightValue);
+		} else {
+			if(block != EnumSkyBlock.Block) {
 				return;
 			}
 
-			this.blocklightMap.set(var2, var3, var4, var5);
+			this.blocklightMap.set(x, y, z, lightValue);
 		}
 
 	}
 
-	public int getBlockLightValue(int var1, int var2, int var3, int var4) {
-		int var5 = this.skylightMap.get(var1, var2, var3);
-		if(var5 > 0) {
+	public int getBlockLightValue(int x, int y, int z, int skyLightSubtracted) {
+		int i5 = this.skylightMap.get(x, y, z);
+		if(i5 > 0) {
 			isLit = true;
 		}
 
-		var5 -= var4;
-		int var6 = this.blocklightMap.get(var1, var2, var3);
-		if(var6 > var5) {
-			var5 = var6;
+		i5 -= skyLightSubtracted;
+		int i6 = this.blocklightMap.get(x, y, z);
+		if(i6 > i5) {
+			i5 = i6;
 		}
 
-		return var5;
+		return i5;
 	}
 
-	public void addEntity(Entity var1) {
+	public void addEntity(Entity entity) {
 		if(!this.isChunkRendered) {
 			this.hasEntities = true;
-			int var2 = MathHelper.floor_double(var1.posX / 16.0D);
-			int var3 = MathHelper.floor_double(var1.posZ / 16.0D);
-			if(var2 != this.xPosition || var3 != this.zPosition) {
-				System.out.println("Wrong location! " + var1);
-			}
-
-			int var4 = MathHelper.floor_double(var1.posY / 16.0D);
-			if(var4 < 0) {
-				var4 = 0;
-			}
-
-			if(var4 >= this.entities.length) {
-				var4 = this.entities.length - 1;
-			}
-
-			var1.addedToChunk = true;
-			var1.chunkCoordX = this.xPosition;
-			var1.chunkCoordY = var4;
-			var1.chunkCoordZ = this.zPosition;
-			this.entities[var4].add(var1);
-		}
-	}
-
-	public void removeEntity(Entity var1) {
-		this.removeEntityAtIndex(var1, var1.chunkCoordY);
-	}
-
-	public void removeEntityAtIndex(Entity var1, int var2) {
-		if(var2 < 0) {
-			var2 = 0;
-		}
-
-		if(var2 >= this.entities.length) {
-			var2 = this.entities.length - 1;
-		}
-
-		this.entities[var2].remove(var1);
-	}
-
-	public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
-		return var2 >= (this.heightMap[var3 << 4 | var1] & 255);
-	}
-
-	public TileEntity getChunkBlockTileEntity(int var1, int var2, int var3) {
-		ChunkPosition var4 = new ChunkPosition(var1, var2, var3);
-		TileEntity var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
-		if(var5 == null) {
-			int var6 = this.getBlockID(var1, var2, var3);
-			if(!Block.isBlockContainer[var6]) {
+			int i2 = MathHelper.floor_double(entity.posX / 16.0D);
+			int i3 = MathHelper.floor_double(entity.posZ / 16.0D);
+			if(i2 != this.xPosition || i3 != this.zPosition) {
+				System.out.println("Wrong location! " + entity);
+			}
+
+			int i4 = MathHelper.floor_double(entity.posY / 16.0D);
+			if(i4 < 0) {
+				i4 = 0;
+			}
+
+			if(i4 >= this.entities.length) {
+				i4 = this.entities.length - 1;
+			}
+
+			entity.addedToChunk = true;
+			entity.chunkCoordX = this.xPosition;
+			entity.chunkCoordY = i4;
+			entity.chunkCoordZ = this.zPosition;
+			this.entities[i4].add(entity);
+		}
+
+	}
+
+	public void removeEntity(Entity entity) {
+		this.removeEntityAtIndex(entity, entity.chunkCoordY);
+	}
+
+	public void removeEntityAtIndex(Entity entity, int index) {
+		if(index < 0) {
+			index = 0;
+		}
+
+		if(index >= this.entities.length) {
+			index = this.entities.length - 1;
+		}
+
+		this.entities[index].remove(entity);
+	}
+
+	public boolean canBlockSeeTheSky(int x, int y, int z) {
+		return y >= (this.heightMap[z << 4 | x] & 255);
+	}
+
+	public TileEntity getChunkBlockTileEntity(int x, int y, int z) {
+		ChunkPosition chunkPosition4 = new ChunkPosition(x, y, z);
+		TileEntity tileEntity5 = (TileEntity)this.chunkTileEntityMap.get(chunkPosition4);
+		if(tileEntity5 == null) {
+			int i6 = this.getBlockID(x, y, z);
+			if(!Block.isBlockContainer[i6]) {
 				return null;
 			}
 
-			BlockContainer var7 = (BlockContainer)Block.blocksList[var6];
-			var7.onBlockAdded(this.worldObj, this.xPosition * 16 + var1, var2, this.zPosition * 16 + var3);
-			var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
+			BlockContainer blockContainer7 = (BlockContainer)Block.blocksList[i6];
+			blockContainer7.onBlockAdded(this.worldObj, this.xPosition * 16 + x, y, this.zPosition * 16 + z);
+			tileEntity5 = (TileEntity)this.chunkTileEntityMap.get(chunkPosition4);
 		}
 
-		return var5;
-	}
-
-	public void addTileEntity(TileEntity var1) {
-		int var2 = var1.xCoord - this.xPosition * 16;
-		int var3 = var1.yCoord;
-		int var4 = var1.zCoord - this.zPosition * 16;
-		this.setChunkBlockTileEntity(var2, var3, var4, var1);
-	}
-
-	public void setChunkBlockTileEntity(int var1, int var2, int var3, TileEntity var4) {
-		ChunkPosition var5 = new ChunkPosition(var1, var2, var3);
-		var4.worldObj = this.worldObj;
-		var4.xCoord = this.xPosition * 16 + var1;
-		var4.yCoord = var2;
-		var4.zCoord = this.zPosition * 16 + var3;
-		if(this.getBlockID(var1, var2, var3) != 0 && Block.blocksList[this.getBlockID(var1, var2, var3)] instanceof BlockContainer) {
+		return tileEntity5;
+	}
+
+	public void addTileEntity(TileEntity tileEntity) {
+		int i2 = tileEntity.xCoord - this.xPosition * 16;
+		int i3 = tileEntity.yCoord;
+		int i4 = tileEntity.zCoord - this.zPosition * 16;
+		this.setChunkBlockTileEntity(i2, i3, i4, tileEntity);
+	}
+
+	public void setChunkBlockTileEntity(int x, int y, int z, TileEntity tileEntity) {
+		ChunkPosition chunkPosition5 = new ChunkPosition(x, y, z);
+		tileEntity.worldObj = this.worldObj;
+		tileEntity.xCoord = this.xPosition * 16 + x;
+		tileEntity.yCoord = y;
+		tileEntity.zCoord = this.zPosition * 16 + z;
+		if(this.getBlockID(x, y, z) != 0 && Block.blocksList[this.getBlockID(x, y, z)] instanceof BlockContainer) {
 			if(this.isChunkLoaded) {
-				if(this.chunkTileEntityMap.get(var5) != null) {
-					this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.get(var5));
+				if(this.chunkTileEntityMap.get(chunkPosition5) != null) {
+					this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.get(chunkPosition5));
 				}
 
-				this.worldObj.loadedTileEntityList.add(var4);
+				this.worldObj.loadedTileEntityList.add(tileEntity);
 			}
 
-			this.chunkTileEntityMap.put(var5, var4);
+			this.chunkTileEntityMap.put(chunkPosition5, tileEntity);
 		} else {
 			System.out.println("Attempted to place a tile entity where there was no entity tile!");
 		}
+
 	}
 
-	public void removeChunkBlockTileEntity(int var1, int var2, int var3) {
-		ChunkPosition var4 = new ChunkPosition(var1, var2, var3);
+	public void removeChunkBlockTileEntity(int x, int y, int z) {
+		ChunkPosition chunkPosition4 = new ChunkPosition(x, y, z);
 		if(this.isChunkLoaded) {
-			this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.remove(var4));
+			this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.remove(chunkPosition4));
 		}
 
 	}
@@ -405,8 +415,8 @@
 		this.isChunkLoaded = true;
 		this.worldObj.loadedTileEntityList.addAll(this.chunkTileEntityMap.values());
 
-		for(int var1 = 0; var1 < this.entities.length; ++var1) {
-			this.worldObj.addLoadedEntities(this.entities[var1]);
+		for(int i1 = 0; i1 < this.entities.length; ++i1) {
+			this.worldObj.addLoadedEntities(this.entities[i1]);
 		}
 
 	}
@@ -415,8 +425,8 @@
 		this.isChunkLoaded = false;
 		this.worldObj.loadedTileEntityList.removeAll(this.chunkTileEntityMap.values());
 
-		for(int var1 = 0; var1 < this.entities.length; ++var1) {
-			this.worldObj.unloadEntities(this.entities[var1]);
+		for(int i1 = 0; i1 < this.entities.length; ++i1) {
+			this.worldObj.unloadEntities(this.entities[i1]);
 		}
 
 	}
@@ -425,103 +435,103 @@
 		this.isModified = true;
 	}
 
-	public void getEntitiesWithinAABBForEntity(Entity var1, AxisAlignedBB var2, List var3) {
-		int var4 = MathHelper.floor_double((var2.minY - 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.maxY + 2.0D) / 16.0D);
-		if(var4 < 0) {
-			var4 = 0;
-		}
-
-		if(var5 >= this.entities.length) {
-			var5 = this.entities.length - 1;
-		}
-
-		for(int var6 = var4; var6 <= var5; ++var6) {
-			List var7 = this.entities[var6];
-
-			for(int var8 = 0; var8 < var7.size(); ++var8) {
-				Entity var9 = (Entity)var7.get(var8);
-				if(var9 != var1 && var9.boundingBox.intersectsWith(var2)) {
-					var3.add(var9);
-				}
-			}
-		}
-
-	}
-
-	public void getEntitiesOfTypeWithinAAAB(Class var1, AxisAlignedBB var2, List var3) {
-		int var4 = MathHelper.floor_double((var2.minY - 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.maxY + 2.0D) / 16.0D);
-		if(var4 < 0) {
-			var4 = 0;
-		}
-
-		if(var5 >= this.entities.length) {
-			var5 = this.entities.length - 1;
-		}
-
-		for(int var6 = var4; var6 <= var5; ++var6) {
-			List var7 = this.entities[var6];
-
-			for(int var8 = 0; var8 < var7.size(); ++var8) {
-				Entity var9 = (Entity)var7.get(var8);
-				if(var1.isAssignableFrom(var9.getClass()) && var9.boundingBox.intersectsWith(var2)) {
-					var3.add(var9);
-				}
-			}
-		}
-
-	}
-
-	public boolean needsSaving(boolean var1) {
+	public void getEntitiesWithinAABBForEntity(Entity entity, AxisAlignedBB aabb, List list) {
+		int i4 = MathHelper.floor_double((aabb.minY - 2.0D) / 16.0D);
+		int i5 = MathHelper.floor_double((aabb.maxY + 2.0D) / 16.0D);
+		if(i4 < 0) {
+			i4 = 0;
+		}
+
+		if(i5 >= this.entities.length) {
+			i5 = this.entities.length - 1;
+		}
+
+		for(int i6 = i4; i6 <= i5; ++i6) {
+			List list7 = this.entities[i6];
+
+			for(int i8 = 0; i8 < list7.size(); ++i8) {
+				Entity entity9 = (Entity)list7.get(i8);
+				if(entity9 != entity && entity9.boundingBox.intersectsWith(aabb)) {
+					list.add(entity9);
+				}
+			}
+		}
+
+	}
+
+	public void getEntitiesOfTypeWithinAAAB(Class clazz, AxisAlignedBB aabb, List list) {
+		int i4 = MathHelper.floor_double((aabb.minY - 2.0D) / 16.0D);
+		int i5 = MathHelper.floor_double((aabb.maxY + 2.0D) / 16.0D);
+		if(i4 < 0) {
+			i4 = 0;
+		}
+
+		if(i5 >= this.entities.length) {
+			i5 = this.entities.length - 1;
+		}
+
+		for(int i6 = i4; i6 <= i5; ++i6) {
+			List list7 = this.entities[i6];
+
+			for(int i8 = 0; i8 < list7.size(); ++i8) {
+				Entity entity9 = (Entity)list7.get(i8);
+				if(clazz.isAssignableFrom(entity9.getClass()) && entity9.boundingBox.intersectsWith(aabb)) {
+					list.add(entity9);
+				}
+			}
+		}
+
+	}
+
+	public boolean needsSaving(boolean unused) {
 		return this.neverSave ? false : (this.hasEntities && this.worldObj.worldTime != this.lastSaveTime ? true : this.isModified);
 	}
 
-	public int getChunkData(byte[] var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8) {
-		int var9;
-		int var10;
-		int var11;
-		int var12;
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = var9 << 11 | var10 << 7 | var3;
-				var12 = var6 - var3;
-				System.arraycopy(this.blocks, var11, var1, var8, var12);
-				var8 += var12;
-			}
-		}
-
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(this.data.data, var11, var1, var8, var12);
-				var8 += var12;
-			}
-		}
-
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(this.blocklightMap.data, var11, var1, var8, var12);
-				var8 += var12;
-			}
-		}
-
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(this.skylightMap.data, var11, var1, var8, var12);
-				var8 += var12;
-			}
-		}
-
-		return var8;
+	public int getChunkData(byte[] arr, int integer2, int integer3, int integer4, int integer5, int integer6, int integer7, int integer8) {
+		int i9;
+		int i10;
+		int i11;
+		int i12;
+		for(i9 = integer2; i9 < integer5; ++i9) {
+			for(i10 = integer4; i10 < integer7; ++i10) {
+				i11 = i9 << 11 | i10 << 7 | integer3;
+				i12 = integer6 - integer3;
+				System.arraycopy(this.blocks, i11, arr, integer8, i12);
+				integer8 += i12;
+			}
+		}
+
+		for(i9 = integer2; i9 < integer5; ++i9) {
+			for(i10 = integer4; i10 < integer7; ++i10) {
+				i11 = (i9 << 11 | i10 << 7 | integer3) >> 1;
+				i12 = (integer6 - integer3) / 2;
+				System.arraycopy(this.data.data, i11, arr, integer8, i12);
+				integer8 += i12;
+			}
+		}
+
+		for(i9 = integer2; i9 < integer5; ++i9) {
+			for(i10 = integer4; i10 < integer7; ++i10) {
+				i11 = (i9 << 11 | i10 << 7 | integer3) >> 1;
+				i12 = (integer6 - integer3) / 2;
+				System.arraycopy(this.blocklightMap.data, i11, arr, integer8, i12);
+				integer8 += i12;
+			}
+		}
+
+		for(i9 = integer2; i9 < integer5; ++i9) {
+			for(i10 = integer4; i10 < integer7; ++i10) {
+				i11 = (i9 << 11 | i10 << 7 | integer3) >> 1;
+				i12 = (integer6 - integer3) / 2;
+				System.arraycopy(this.skylightMap.data, i11, arr, integer8, i12);
+				integer8 += i12;
+			}
+		}
+
+		return integer8;
 	}
 
-	public Random getRandomWithSeed(long var1) {
-		return new Random(this.worldObj.randomSeed + (long)(this.xPosition * this.xPosition * 4987142) + (long)(this.xPosition * 5947611) + (long)(this.zPosition * this.zPosition) * 4392871L + (long)(this.zPosition * 389711) ^ var1);
+	public Random getRandomWithSeed(long long1) {
+		return new Random(this.worldObj.randomSeed + (long)(this.xPosition * this.xPosition * 4987142) + (long)(this.xPosition * 5947611) + (long)(this.zPosition * this.zPosition) * 4392871L + (long)(this.zPosition * 389711) ^ long1);
 	}
 }
--- net/minecraft/src/ItemRecord.java
+++ net/minecraft/src/ItemRecord.java
@@ -3,17 +3,17 @@
 public class ItemRecord extends Item {
 	private String recordName;
 
-	protected ItemRecord(int var1, String var2) {
-		super(var1);
-		this.recordName = var2;
+	public ItemRecord(int itemID, String recordName) {
+		super(itemID);
+		this.recordName = recordName;
 		this.maxStackSize = 1;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var3.getBlockId(var4, var5, var6) == Block.jukebox.blockID && var3.getBlockMetadata(var4, var5, var6) == 0) {
-			var3.setBlockMetadataWithNotify(var4, var5, var6, this.shiftedIndex - Item.record13.shiftedIndex + 1);
-			var3.playRecord(this.recordName, var4, var5, var6);
-			--var1.stackSize;
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(world.getBlockId(x, y, z) == Block.jukebox.blockID && world.getBlockMetadata(x, y, z) == 0) {
+			world.setBlockMetadataWithNotify(x, y, z, this.shiftedIndex - Item.record13.shiftedIndex + 1);
+			world.playRecord(this.recordName, x, y, z);
+			--stack.stackSize;
 			return true;
 		} else {
 			return false;
--- net/minecraft/src/AxisAlignedBB.java
+++ net/minecraft/src/AxisAlignedBB.java
@@ -13,328 +13,328 @@
 	public double maxY;
 	public double maxZ;
 
-	public static AxisAlignedBB getBoundingBox(double var0, double var2, double var4, double var6, double var8, double var10) {
-		return new AxisAlignedBB(var0, var2, var4, var6, var8, var10);
+	public static AxisAlignedBB getBoundingBox(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
+		return new AxisAlignedBB(minX, minY, minZ, maxX, maxY, maxZ);
 	}
 
 	public static void clearBoundingBoxPool() {
 		numBoundingBoxesInUse = 0;
 	}
 
-	public static AxisAlignedBB getBoundingBoxFromPool(double var0, double var2, double var4, double var6, double var8, double var10) {
+	public static AxisAlignedBB getBoundingBoxFromPool(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
 		if(numBoundingBoxesInUse >= boundingBoxes.size()) {
 			boundingBoxes.add(getBoundingBox(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D));
 		}
 
-		return ((AxisAlignedBB)boundingBoxes.get(numBoundingBoxesInUse++)).setBounds(var0, var2, var4, var6, var8, var10);
-	}
-
-	private AxisAlignedBB(double var1, double var3, double var5, double var7, double var9, double var11) {
-		this.minX = var1;
-		this.minY = var3;
-		this.minZ = var5;
-		this.maxX = var7;
-		this.maxY = var9;
-		this.maxZ = var11;
-	}
-
-	public AxisAlignedBB setBounds(double var1, double var3, double var5, double var7, double var9, double var11) {
-		this.minX = var1;
-		this.minY = var3;
-		this.minZ = var5;
-		this.maxX = var7;
-		this.maxY = var9;
-		this.maxZ = var11;
-		return this;
-	}
-
-	public AxisAlignedBB addCoord(double var1, double var3, double var5) {
-		double var7 = this.minX;
-		double var9 = this.minY;
-		double var11 = this.minZ;
-		double var13 = this.maxX;
-		double var15 = this.maxY;
-		double var17 = this.maxZ;
-		if(var1 < 0.0D) {
-			var7 += var1;
-		}
-
-		if(var1 > 0.0D) {
-			var13 += var1;
-		}
-
-		if(var3 < 0.0D) {
-			var9 += var3;
-		}
-
-		if(var3 > 0.0D) {
-			var15 += var3;
-		}
-
-		if(var5 < 0.0D) {
-			var11 += var5;
-		}
-
-		if(var5 > 0.0D) {
-			var17 += var5;
-		}
-
-		return getBoundingBoxFromPool(var7, var9, var11, var13, var15, var17);
-	}
-
-	public AxisAlignedBB expand(double var1, double var3, double var5) {
-		double var7 = this.minX - var1;
-		double var9 = this.minY - var3;
-		double var11 = this.minZ - var5;
-		double var13 = this.maxX + var1;
-		double var15 = this.maxY + var3;
-		double var17 = this.maxZ + var5;
-		return getBoundingBoxFromPool(var7, var9, var11, var13, var15, var17);
-	}
-
-	public AxisAlignedBB getOffsetBoundingBox(double var1, double var3, double var5) {
-		return getBoundingBoxFromPool(this.minX + var1, this.minY + var3, this.minZ + var5, this.maxX + var1, this.maxY + var3, this.maxZ + var5);
-	}
-
-	public double calculateXOffset(AxisAlignedBB var1, double var2) {
-		if(var1.maxY > this.minY && var1.minY < this.maxY) {
-			if(var1.maxZ > this.minZ && var1.minZ < this.maxZ) {
-				double var4;
-				if(var2 > 0.0D && var1.maxX <= this.minX) {
-					var4 = this.minX - var1.maxX;
-					if(var4 < var2) {
-						var2 = var4;
-					}
-				}
-
-				if(var2 < 0.0D && var1.minX >= this.maxX) {
-					var4 = this.maxX - var1.minX;
-					if(var4 > var2) {
-						var2 = var4;
-					}
-				}
-
-				return var2;
-			} else {
-				return var2;
-			}
-		} else {
-			return var2;
-		}
-	}
-
-	public double calculateYOffset(AxisAlignedBB var1, double var2) {
-		if(var1.maxX > this.minX && var1.minX < this.maxX) {
-			if(var1.maxZ > this.minZ && var1.minZ < this.maxZ) {
-				double var4;
-				if(var2 > 0.0D && var1.maxY <= this.minY) {
-					var4 = this.minY - var1.maxY;
-					if(var4 < var2) {
-						var2 = var4;
-					}
-				}
-
-				if(var2 < 0.0D && var1.minY >= this.maxY) {
-					var4 = this.maxY - var1.minY;
-					if(var4 > var2) {
-						var2 = var4;
-					}
-				}
-
-				return var2;
-			} else {
-				return var2;
-			}
-		} else {
-			return var2;
-		}
-	}
-
-	public double calculateZOffset(AxisAlignedBB var1, double var2) {
-		if(var1.maxX > this.minX && var1.minX < this.maxX) {
-			if(var1.maxY > this.minY && var1.minY < this.maxY) {
-				double var4;
-				if(var2 > 0.0D && var1.maxZ <= this.minZ) {
-					var4 = this.minZ - var1.maxZ;
-					if(var4 < var2) {
-						var2 = var4;
-					}
-				}
-
-				if(var2 < 0.0D && var1.minZ >= this.maxZ) {
-					var4 = this.maxZ - var1.minZ;
-					if(var4 > var2) {
-						var2 = var4;
-					}
-				}
-
-				return var2;
-			} else {
-				return var2;
-			}
-		} else {
-			return var2;
-		}
-	}
-
-	public boolean intersectsWith(AxisAlignedBB var1) {
-		return var1.maxX > this.minX && var1.minX < this.maxX ? (var1.maxY > this.minY && var1.minY < this.maxY ? var1.maxZ > this.minZ && var1.minZ < this.maxZ : false) : false;
-	}
-
-	public AxisAlignedBB offset(double var1, double var3, double var5) {
-		this.minX += var1;
-		this.minY += var3;
-		this.minZ += var5;
-		this.maxX += var1;
-		this.maxY += var3;
-		this.maxZ += var5;
-		return this;
-	}
-
-	public AxisAlignedBB removeCoord(double var1, double var3, double var5) {
-		double var7 = this.minX;
-		double var9 = this.minY;
-		double var11 = this.minZ;
-		double var13 = this.maxX;
-		double var15 = this.maxY;
-		double var17 = this.maxZ;
-		if(var1 < 0.0D) {
-			var7 -= var1;
-		}
-
-		if(var1 > 0.0D) {
-			var13 -= var1;
-		}
-
-		if(var3 < 0.0D) {
-			var9 -= var3;
-		}
-
-		if(var3 > 0.0D) {
-			var15 -= var3;
-		}
-
-		if(var5 < 0.0D) {
-			var11 -= var5;
-		}
-
-		if(var5 > 0.0D) {
-			var17 -= var5;
-		}
-
-		return getBoundingBoxFromPool(var7, var9, var11, var13, var15, var17);
+		return ((AxisAlignedBB)boundingBoxes.get(numBoundingBoxesInUse++)).setBounds(minX, minY, minZ, maxX, maxY, maxZ);
+	}
+
+	private AxisAlignedBB(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
+		this.minX = minX;
+		this.minY = minY;
+		this.minZ = minZ;
+		this.maxX = maxX;
+		this.maxY = maxY;
+		this.maxZ = maxZ;
+	}
+
+	public AxisAlignedBB setBounds(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
+		this.minX = minX;
+		this.minY = minY;
+		this.minZ = minZ;
+		this.maxX = maxX;
+		this.maxY = maxY;
+		this.maxZ = maxZ;
+		return this;
+	}
+
+	public AxisAlignedBB addCoord(double x, double y, double z) {
+		double d7 = this.minX;
+		double d9 = this.minY;
+		double d11 = this.minZ;
+		double d13 = this.maxX;
+		double d15 = this.maxY;
+		double d17 = this.maxZ;
+		if(x < 0.0D) {
+			d7 += x;
+		}
+
+		if(x > 0.0D) {
+			d13 += x;
+		}
+
+		if(y < 0.0D) {
+			d9 += y;
+		}
+
+		if(y > 0.0D) {
+			d15 += y;
+		}
+
+		if(z < 0.0D) {
+			d11 += z;
+		}
+
+		if(z > 0.0D) {
+			d17 += z;
+		}
+
+		return getBoundingBoxFromPool(d7, d9, d11, d13, d15, d17);
+	}
+
+	public AxisAlignedBB expand(double x, double y, double z) {
+		double d7 = this.minX - x;
+		double d9 = this.minY - y;
+		double d11 = this.minZ - z;
+		double d13 = this.maxX + x;
+		double d15 = this.maxY + y;
+		double d17 = this.maxZ + z;
+		return getBoundingBoxFromPool(d7, d9, d11, d13, d15, d17);
+	}
+
+	public AxisAlignedBB getOffsetBoundingBox(double x, double y, double z) {
+		return getBoundingBoxFromPool(this.minX + x, this.minY + y, this.minZ + z, this.maxX + x, this.maxY + y, this.maxZ + z);
+	}
+
+	public double calculateXOffset(AxisAlignedBB aabb, double offsetX) {
+		if(aabb.maxY > this.minY && aabb.minY < this.maxY) {
+			if(aabb.maxZ > this.minZ && aabb.minZ < this.maxZ) {
+				double d4;
+				if(offsetX > 0.0D && aabb.maxX <= this.minX) {
+					d4 = this.minX - aabb.maxX;
+					if(d4 < offsetX) {
+						offsetX = d4;
+					}
+				}
+
+				if(offsetX < 0.0D && aabb.minX >= this.maxX) {
+					d4 = this.maxX - aabb.minX;
+					if(d4 > offsetX) {
+						offsetX = d4;
+					}
+				}
+
+				return offsetX;
+			} else {
+				return offsetX;
+			}
+		} else {
+			return offsetX;
+		}
+	}
+
+	public double calculateYOffset(AxisAlignedBB aabb, double offsetY) {
+		if(aabb.maxX > this.minX && aabb.minX < this.maxX) {
+			if(aabb.maxZ > this.minZ && aabb.minZ < this.maxZ) {
+				double d4;
+				if(offsetY > 0.0D && aabb.maxY <= this.minY) {
+					d4 = this.minY - aabb.maxY;
+					if(d4 < offsetY) {
+						offsetY = d4;
+					}
+				}
+
+				if(offsetY < 0.0D && aabb.minY >= this.maxY) {
+					d4 = this.maxY - aabb.minY;
+					if(d4 > offsetY) {
+						offsetY = d4;
+					}
+				}
+
+				return offsetY;
+			} else {
+				return offsetY;
+			}
+		} else {
+			return offsetY;
+		}
+	}
+
+	public double calculateZOffset(AxisAlignedBB aabb, double offsetZ) {
+		if(aabb.maxX > this.minX && aabb.minX < this.maxX) {
+			if(aabb.maxY > this.minY && aabb.minY < this.maxY) {
+				double d4;
+				if(offsetZ > 0.0D && aabb.maxZ <= this.minZ) {
+					d4 = this.minZ - aabb.maxZ;
+					if(d4 < offsetZ) {
+						offsetZ = d4;
+					}
+				}
+
+				if(offsetZ < 0.0D && aabb.minZ >= this.maxZ) {
+					d4 = this.maxZ - aabb.minZ;
+					if(d4 > offsetZ) {
+						offsetZ = d4;
+					}
+				}
+
+				return offsetZ;
+			} else {
+				return offsetZ;
+			}
+		} else {
+			return offsetZ;
+		}
+	}
+
+	public boolean intersectsWith(AxisAlignedBB aabb) {
+		return aabb.maxX > this.minX && aabb.minX < this.maxX ? (aabb.maxY > this.minY && aabb.minY < this.maxY ? aabb.maxZ > this.minZ && aabb.minZ < this.maxZ : false) : false;
+	}
+
+	public AxisAlignedBB offset(double offsetX, double offsetY, double offsetZ) {
+		this.minX += offsetX;
+		this.minY += offsetY;
+		this.minZ += offsetZ;
+		this.maxX += offsetX;
+		this.maxY += offsetY;
+		this.maxZ += offsetZ;
+		return this;
+	}
+
+	public AxisAlignedBB removeCoord(double x, double y, double z) {
+		double d7 = this.minX;
+		double d9 = this.minY;
+		double d11 = this.minZ;
+		double d13 = this.maxX;
+		double d15 = this.maxY;
+		double d17 = this.maxZ;
+		if(x < 0.0D) {
+			d7 -= x;
+		}
+
+		if(x > 0.0D) {
+			d13 -= x;
+		}
+
+		if(y < 0.0D) {
+			d9 -= y;
+		}
+
+		if(y > 0.0D) {
+			d15 -= y;
+		}
+
+		if(z < 0.0D) {
+			d11 -= z;
+		}
+
+		if(z > 0.0D) {
+			d17 -= z;
+		}
+
+		return getBoundingBoxFromPool(d7, d9, d11, d13, d15, d17);
 	}
 
 	public AxisAlignedBB copy() {
 		return getBoundingBoxFromPool(this.minX, this.minY, this.minZ, this.maxX, this.maxY, this.maxZ);
 	}
 
-	public MovingObjectPosition calculateIntercept(Vec3D var1, Vec3D var2) {
-		Vec3D var3 = var1.getIntermediateWithXValue(var2, this.minX);
-		Vec3D var4 = var1.getIntermediateWithXValue(var2, this.maxX);
-		Vec3D var5 = var1.getIntermediateWithYValue(var2, this.minY);
-		Vec3D var6 = var1.getIntermediateWithYValue(var2, this.maxY);
-		Vec3D var7 = var1.getIntermediateWithZValue(var2, this.minZ);
-		Vec3D var8 = var1.getIntermediateWithZValue(var2, this.maxZ);
-		if(!this.isVecInYZ(var3)) {
-			var3 = null;
-		}
-
-		if(!this.isVecInYZ(var4)) {
-			var4 = null;
-		}
-
-		if(!this.isVecInXZ(var5)) {
-			var5 = null;
-		}
-
-		if(!this.isVecInXZ(var6)) {
-			var6 = null;
-		}
-
-		if(!this.isVecInXY(var7)) {
-			var7 = null;
-		}
-
-		if(!this.isVecInXY(var8)) {
-			var8 = null;
-		}
-
-		Vec3D var9 = null;
-		if(var3 != null && (var9 == null || var1.squareDistanceTo(var3) < var1.squareDistanceTo(var9))) {
-			var9 = var3;
-		}
-
-		if(var4 != null && (var9 == null || var1.squareDistanceTo(var4) < var1.squareDistanceTo(var9))) {
-			var9 = var4;
-		}
-
-		if(var5 != null && (var9 == null || var1.squareDistanceTo(var5) < var1.squareDistanceTo(var9))) {
-			var9 = var5;
-		}
-
-		if(var6 != null && (var9 == null || var1.squareDistanceTo(var6) < var1.squareDistanceTo(var9))) {
-			var9 = var6;
-		}
-
-		if(var7 != null && (var9 == null || var1.squareDistanceTo(var7) < var1.squareDistanceTo(var9))) {
-			var9 = var7;
-		}
-
-		if(var8 != null && (var9 == null || var1.squareDistanceTo(var8) < var1.squareDistanceTo(var9))) {
-			var9 = var8;
-		}
-
-		if(var9 == null) {
+	public MovingObjectPosition calculateIntercept(Vec3D vector1, Vec3D vector2) {
+		Vec3D vec3D3 = vector1.getIntermediateWithXValue(vector2, this.minX);
+		Vec3D vec3D4 = vector1.getIntermediateWithXValue(vector2, this.maxX);
+		Vec3D vec3D5 = vector1.getIntermediateWithYValue(vector2, this.minY);
+		Vec3D vec3D6 = vector1.getIntermediateWithYValue(vector2, this.maxY);
+		Vec3D vec3D7 = vector1.getIntermediateWithZValue(vector2, this.minZ);
+		Vec3D vec3D8 = vector1.getIntermediateWithZValue(vector2, this.maxZ);
+		if(!this.isVecInYZ(vec3D3)) {
+			vec3D3 = null;
+		}
+
+		if(!this.isVecInYZ(vec3D4)) {
+			vec3D4 = null;
+		}
+
+		if(!this.isVecInXZ(vec3D5)) {
+			vec3D5 = null;
+		}
+
+		if(!this.isVecInXZ(vec3D6)) {
+			vec3D6 = null;
+		}
+
+		if(!this.isVecInXY(vec3D7)) {
+			vec3D7 = null;
+		}
+
+		if(!this.isVecInXY(vec3D8)) {
+			vec3D8 = null;
+		}
+
+		Vec3D vec3D9 = null;
+		if(vec3D3 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D3) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D3;
+		}
+
+		if(vec3D4 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D4) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D4;
+		}
+
+		if(vec3D5 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D5) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D5;
+		}
+
+		if(vec3D6 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D6) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D6;
+		}
+
+		if(vec3D7 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D7) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D7;
+		}
+
+		if(vec3D8 != null && (vec3D9 == null || vector1.squareDistanceTo(vec3D8) < vector1.squareDistanceTo(vec3D9))) {
+			vec3D9 = vec3D8;
+		}
+
+		if(vec3D9 == null) {
 			return null;
 		} else {
-			byte var10 = -1;
-			if(var9 == var3) {
-				var10 = 4;
-			}
-
-			if(var9 == var4) {
-				var10 = 5;
-			}
-
-			if(var9 == var5) {
-				var10 = 0;
-			}
-
-			if(var9 == var6) {
-				var10 = 1;
-			}
-
-			if(var9 == var7) {
-				var10 = 2;
-			}
-
-			if(var9 == var8) {
-				var10 = 3;
-			}
-
-			return new MovingObjectPosition(0, 0, 0, var10, var9);
+			byte b10 = -1;
+			if(vec3D9 == vec3D3) {
+				b10 = 4;
+			}
+
+			if(vec3D9 == vec3D4) {
+				b10 = 5;
+			}
+
+			if(vec3D9 == vec3D5) {
+				b10 = 0;
+			}
+
+			if(vec3D9 == vec3D6) {
+				b10 = 1;
+			}
+
+			if(vec3D9 == vec3D7) {
+				b10 = 2;
+			}
+
+			if(vec3D9 == vec3D8) {
+				b10 = 3;
+			}
+
+			return new MovingObjectPosition(0, 0, 0, b10, vec3D9);
 		}
 	}
 
-	private boolean isVecInYZ(Vec3D var1) {
-		return var1 == null ? false : var1.yCoord >= this.minY && var1.yCoord <= this.maxY && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
-	}
-
-	private boolean isVecInXZ(Vec3D var1) {
-		return var1 == null ? false : var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
-	}
-
-	private boolean isVecInXY(Vec3D var1) {
-		return var1 == null ? false : var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.yCoord >= this.minY && var1.yCoord <= this.maxY;
-	}
-
-	public void setBB(AxisAlignedBB var1) {
-		this.minX = var1.minX;
-		this.minY = var1.minY;
-		this.minZ = var1.minZ;
-		this.maxX = var1.maxX;
-		this.maxY = var1.maxY;
-		this.maxZ = var1.maxZ;
+	private boolean isVecInYZ(Vec3D vector) {
+		return vector == null ? false : vector.yCoord >= this.minY && vector.yCoord <= this.maxY && vector.zCoord >= this.minZ && vector.zCoord <= this.maxZ;
+	}
+
+	private boolean isVecInXZ(Vec3D vector) {
+		return vector == null ? false : vector.xCoord >= this.minX && vector.xCoord <= this.maxX && vector.zCoord >= this.minZ && vector.zCoord <= this.maxZ;
+	}
+
+	private boolean isVecInXY(Vec3D vector) {
+		return vector == null ? false : vector.xCoord >= this.minX && vector.xCoord <= this.maxX && vector.yCoord >= this.minY && vector.yCoord <= this.maxY;
+	}
+
+	public void setBB(AxisAlignedBB aabb) {
+		this.minX = aabb.minX;
+		this.minY = aabb.minY;
+		this.minZ = aabb.minZ;
+		this.maxX = aabb.maxX;
+		this.maxY = aabb.maxY;
+		this.maxZ = aabb.maxZ;
 	}
 }
--- /dev/null
+++ net/minecraft/src/EntityPongormatron.java
@@ -1,0 +1,34 @@
+package net.minecraft.src;
+
+public class EntityPongormatron extends EntityAnimal {
+	public boolean field_7018_1K426ppbI90I24pVyp4e09MQPewmQn6Xi0v5QYUH2Qd03t5S096ZZptXK8jr = false;
+
+	public EntityPongormatron(World world) {
+		super(world);
+		this.setSize(1.0F, 2.0F);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+	}
+
+	protected String getHurtSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected String getDeathSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected float getSoundVolume() {
+		return 0.4F;
+	}
+
+	public boolean func_7017_7n9uogPeGdB77AcY1ru567eHaEzI3oFSg12XuN30F0rl4Sj0Y5i4a1W65qr4(EntityPlayer nh) {
+		return false;
+	}
+}
--- net/minecraft/src/Packet34EntityTeleport.java
+++ net/minecraft/src/Packet34EntityTeleport.java
@@ -15,44 +15,44 @@
 	public Packet34EntityTeleport() {
 	}
 
-	public Packet34EntityTeleport(Entity var1) {
-		this.entityId = var1.entityID;
-		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-		this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.yaw = (byte)((int)(var1.rotationYaw * 256.0F / 360.0F));
-		this.pitch = (byte)((int)(var1.rotationPitch * 256.0F / 360.0F));
-	}
-
-	public Packet34EntityTeleport(int var1, int var2, int var3, int var4, byte var5, byte var6) {
-		this.entityId = var1;
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.zPosition = var4;
-		this.yaw = var5;
-		this.pitch = var6;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.yaw = (byte)var1.read();
-		this.pitch = (byte)var1.read();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.write(this.yaw);
-		var1.write(this.pitch);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleEntityTeleport(this);
+	public Packet34EntityTeleport(Entity entity) {
+		this.entityId = entity.entityID;
+		this.xPosition = MathHelper.floor_double(entity.posX * 32.0D);
+		this.yPosition = MathHelper.floor_double(entity.posY * 32.0D);
+		this.zPosition = MathHelper.floor_double(entity.posZ * 32.0D);
+		this.yaw = (byte)((int)(entity.rotationYaw * 256.0F / 360.0F));
+		this.pitch = (byte)((int)(entity.rotationPitch * 256.0F / 360.0F));
+	}
+
+	public Packet34EntityTeleport(int entityId, int xPosition, int yPosition, int zPosition, byte yaw, byte pitch) {
+		this.entityId = entityId;
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.zPosition = zPosition;
+		this.yaw = yaw;
+		this.pitch = pitch;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.yaw = (byte)dataInputStream.read();
+		this.pitch = (byte)dataInputStream.read();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.write(this.yaw);
+		dataOutputStream.write(this.pitch);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleEntityTeleport(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/EnumHouseBigUnknownClass.java
@@ -1,0 +1,41 @@
+package net.minecraft.src;
+
+class EnumHouseBigUnknownClass {
+    static final /* synthetic */ int[] field_7424_13jnRFsWY17oHz1bqFO1m1o8X5gnmKUz32MBrOCJtg2aMM8hzmIJn6V028dA;
+
+    static {
+        field_7424_13jnRFsWY17oHz1bqFO1m1o8X5gnmKUz32MBrOCJtg2aMM8hzmIJn6V028dA = new int[EnumHouseBig.func_7882_1251mboaHZ4xKHUK0lF5iBBq7NA874yM27ni02aQ712sSVLdgPFB35KJld3u().length];
+        try {
+            EnumHouseBigUnknownClass.field_7424_13jnRFsWY17oHz1bqFO1m1o8X5gnmKUz32MBrOCJtg2aMM8hzmIJn6V028dA[EnumHouseBig.WhiteGlass.ordinal()] = 1;
+        }
+        catch (final NoSuchFieldError noSuchFieldError) {}
+        try {
+            EnumHouseBigUnknownClass.field_7424_13jnRFsWY17oHz1bqFO1m1o8X5gnmKUz32MBrOCJtg2aMM8hzmIJn6V028dA[EnumHouseBig.BlueGlass.ordinal()] = 2;
+        }
+        catch (final NoSuchFieldError noSuchFieldError2) {}
+        try {
+            EnumHouseBigUnknownClass.field_7424_13jnRFsWY17oHz1bqFO1m1o8X5gnmKUz32MBrOCJtg2aMM8hzmIJn6V028dA[EnumHouseBig.PinkGlass.ordinal()] = 3;
+        }
+        catch (final NoSuchFieldError noSuchFieldError3) {}
+        try {
+            EnumHouseBigUnknownClass.field_7424_13jnRFsWY17oHz1bqFO1m1o8X5gnmKUz32MBrOCJtg2aMM8hzmIJn6V028dA[EnumHouseBig.PlateDecor.ordinal()] = 4;
+        }
+        catch (final NoSuchFieldError noSuchFieldError4) {}
+        try {
+            EnumHouseBigUnknownClass.field_7424_13jnRFsWY17oHz1bqFO1m1o8X5gnmKUz32MBrOCJtg2aMM8hzmIJn6V028dA[EnumHouseBig.LimeGlass.ordinal()] = 5;
+        }
+        catch (final NoSuchFieldError noSuchFieldError5) {}
+        try {
+            EnumHouseBigUnknownClass.field_7424_13jnRFsWY17oHz1bqFO1m1o8X5gnmKUz32MBrOCJtg2aMM8hzmIJn6V028dA[EnumHouseBig.BlackGlass.ordinal()] = 6;
+        }
+        catch (final NoSuchFieldError noSuchFieldError6) {}
+        try {
+            EnumHouseBigUnknownClass.field_7424_13jnRFsWY17oHz1bqFO1m1o8X5gnmKUz32MBrOCJtg2aMM8hzmIJn6V028dA[EnumHouseBig.Door.ordinal()] = 7;
+        }
+        catch (final NoSuchFieldError noSuchFieldError7) {}
+        try {
+            EnumHouseBigUnknownClass.field_7424_13jnRFsWY17oHz1bqFO1m1o8X5gnmKUz32MBrOCJtg2aMM8hzmIJn6V028dA[EnumHouseBig.Doorless.ordinal()] = 8;
+        }
+        catch (final NoSuchFieldError noSuchFieldError8) {}
+    }
+}
--- net/minecraft/src/Packet6SpawnPosition.java
+++ net/minecraft/src/Packet6SpawnPosition.java
@@ -8,33 +8,37 @@
 	public int xPosition;
 	public int yPosition;
 	public int zPosition;
+	public long field_6523_4nXPu1Wx5aR8F0YF985Ji0D4s7Mi5As6O7esXAZ0aMjpuxQ0S05T70jLk23z;
 
 	public Packet6SpawnPosition() {
 	}
 
-	public Packet6SpawnPosition(int var1, int var2, int var3) {
-		this.xPosition = var1;
-		this.yPosition = var2;
-		this.zPosition = var3;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleSpawnPosition(this);
+	public Packet6SpawnPosition(int xPosition, int yPosition, int zPosition, long long4) {
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.zPosition = zPosition;
+		this.field_6523_4nXPu1Wx5aR8F0YF985Ji0D4s7Mi5As6O7esXAZ0aMjpuxQ0S05T70jLk23z = long4;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.field_6523_4nXPu1Wx5aR8F0YF985Ji0D4s7Mi5As6O7esXAZ0aMjpuxQ0S05T70jLk23z = dataInputStream.readLong();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.writeLong(this.field_6523_4nXPu1Wx5aR8F0YF985Ji0D4s7Mi5As6O7esXAZ0aMjpuxQ0S05T70jLk23z);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleSpawnPosition(this);
 	}
 
 	public int getPacketSize() {
-		return 12;
+		return 20;
 	}
 }
--- net/minecraft/src/Packet12PlayerLook.java
+++ net/minecraft/src/Packet12PlayerLook.java
@@ -9,16 +9,16 @@
 		this.rotating = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.yaw = var1.readFloat();
-		this.pitch = var1.readFloat();
-		super.readPacketData(var1);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.yaw = dataInputStream.readFloat();
+		this.pitch = dataInputStream.readFloat();
+		super.readPacketData(dataInputStream);
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeFloat(this.yaw);
-		var1.writeFloat(this.pitch);
-		super.writePacket(var1);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeFloat(this.yaw);
+		dataOutputStream.writeFloat(this.pitch);
+		super.writePacket(dataOutputStream);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/EntityGiantZombie.java
+++ net/minecraft/src/EntityGiantZombie.java
@@ -1,9 +1,8 @@
 package net.minecraft.src;
 
 public class EntityGiantZombie extends EntityMob {
-	public EntityGiantZombie(World var1) {
-		super(var1);
-		this.texture = "/mob/zombie.png";
+	public EntityGiantZombie(World world) {
+		super(world);
 		this.moveSpeed = 0.5F;
 		this.attackStrength = 50;
 		this.health *= 10;
@@ -11,7 +10,7 @@
 		this.setSize(this.width * 6.0F, this.height * 6.0F);
 	}
 
-	protected float getBlockPathWeight(int var1, int var2, int var3) {
-		return this.worldObj.getBrightness(var1, var2, var3) - 0.5F;
+	protected float getBlockPathWeight(int x, int y, int z) {
+		return this.worldObj.getBrightness(x, y, z) - 0.5F;
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenHouseBigSpawner.java
@@ -1,0 +1,104 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenHouseBigSpawner implements IHouseBig {
+	private final NoiseGeneratorPerlin field_6591_90Aa9gxXFXt62N1Q3dU4a0uivSz6yLF1Efp00nlLXQh0Z6Km2LynR70S5wis;
+
+	public WorldGenHouseBigSpawner(Random random) {
+		this.field_6591_90Aa9gxXFXt62N1Q3dU4a0uivSz6yLF1Efp00nlLXQh0Z6Km2LynR70S5wis = new NoiseGeneratorPerlin(random);
+	}
+
+	public float func_6572_4MbDiJtu6trpae74IapUd09LfEVt0Aru1bX9SAE845fOF7B0JmYIQrXHuHxC() {
+		return 0.8F;
+	}
+
+	private boolean func_6588_59Q17B2d3w96l26x2mqbEYyfC2OJy40H40TrK4yi2dx17ZXkA3m1M9JBou7O(World cv, int integer2, int integer3, int integer4) {
+		int i5 = cv.getBlockId(integer2, integer3, integer4);
+		return i5 != 0 && Block.blocksList[i5].isOpaqueCube() && Block.blocksList[i5].isCollidable() && Block.blocksList[i5].renderAsNormalBlock();
+	}
+
+	private boolean func_6589_7JZ6EIMdlc4FeyurqNlGJVE2Mcz1ll75tQ30tmtGozl0Maj8LTvL66ev9I2t(World cv, int integer2, int integer3, int integer4) {
+		int i5 = 256;
+
+		for(int i6 = 0; i6 < 8; ++i6) {
+			for(int i7 = 0; i7 < 15; ++i7) {
+				for(int i8 = 0; i8 < 15; ++i8) {
+					if(this.func_6588_59Q17B2d3w96l26x2mqbEYyfC2OJy40H40TrK4yi2dx17ZXkA3m1M9JBou7O(cv, integer2 * 16 + i7, integer3 + i6, integer4 * 16 + i8)) {
+						--i5;
+						if(i5 == 0) {
+							return false;
+						}
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+
+	public void func_6590_2PXj3G4ss8hF80O31tRe61389Tjv91T1q02jTXNbWB053OL4G1Ug1mm6CwW9(World cv, int integer2, int integer3, int integer4) {
+		int i5;
+		int i6;
+		for(i5 = 0; i5 < 9; ++i5) {
+			for(i6 = 0; i6 < 6; ++i6) {
+				cv.setBlock(integer2 + i5 + 3, integer3 + i6, integer4 + 2, Block.brick.blockID);
+				cv.setBlock(integer2 + i5 + 3, integer3 + i6, integer4 + 12, Block.brick.blockID);
+				cv.setBlock(integer2 + 2, integer3 + i6, integer4 + 3 + i5, Block.brick.blockID);
+				cv.setBlock(integer2 + 12, integer3 + i6, integer4 + 3 + i5, Block.brick.blockID);
+			}
+		}
+
+		for(i5 = 0; i5 < 9; ++i5) {
+			for(i6 = 0; i6 < 9; ++i6) {
+				cv.setBlock(integer2 + i6 + 3, integer3, integer4 + i5 + 3, Block.brick.blockID);
+			}
+		}
+
+		i5 = integer2 * 56236445 - integer3 * 1235617 + integer4 * 1242535;
+		i6 = integer2 * 234745 - integer3 * 83452 - integer4 * 784345;
+		double d7 = this.field_6591_90Aa9gxXFXt62N1Q3dU4a0uivSz6yLF1Efp00nlLXQh0Z6Km2LynR70S5wis.generateNoise((double)i5 / 2.0D, (double)i6 / 2.0D);
+		this.field_6591_90Aa9gxXFXt62N1Q3dU4a0uivSz6yLF1Efp00nlLXQh0Z6Km2LynR70S5wis.generateNoise((double)i6 / 2.0D, (double)i5 / 2.0D);
+		if(d7 >= 0.25D) {
+			TileEntityChest tileEntityChest11 = new TileEntityChest();
+			cv.setBlock(integer2 + 7, integer3 + 1, integer4 + 7, Block.chest.blockID);
+			cv.setBlockTileEntity(integer2 + 7, integer3 + 1, integer4 + 7, tileEntityChest11);
+			Random random12 = new Random((long)(i5 + i6));
+
+			for(int i13 = 0; i13 < tileEntityChest11.getSizeInventory(); ++i13) {
+				for(int i14 = 0; i14 < 300; ++i14) {
+					int i15 = random12.nextInt(32767);
+					if(Item.itemsList[i15] != null) {
+						ItemStack itemStack16 = new ItemStack(i15);
+						tileEntityChest11.setInventorySlotContents(i13, itemStack16);
+						break;
+					}
+				}
+			}
+		} else {
+			TileEntityMobSpawner tileEntityMobSpawner17 = new TileEntityMobSpawner();
+			tileEntityMobSpawner17.mobID = "Slime";
+			cv.setBlock(integer2 + 7, integer3 + 1, integer4 + 7, Block.mobSpawner.blockID);
+			cv.setBlockTileEntity(integer2 + 7, integer3 + 1, integer4 + 7, tileEntityMobSpawner17);
+		}
+
+	}
+
+	public void func_6573_9s8xyF629674iK59W75jxL4IfegOZaukdAavse5BpG78PPgBZ5sG433o01xa(World cv, int integer2, int integer3, WorldGenHouseBigInterior gx) {
+		int i5;
+		for(i5 = 127; i5 > 0 && this.func_6589_7JZ6EIMdlc4FeyurqNlGJVE2Mcz1ll75tQ30tmtGozl0Maj8LTvL66ev9I2t(cv, integer2, i5, integer3); --i5) {
+		}
+
+		while(i5 < 108) {
+			this.func_6590_2PXj3G4ss8hF80O31tRe61389Tjv91T1q02jTXNbWB053OL4G1Ug1mm6CwW9(cv, integer2 * 16, i5, integer3 * 16);
+			i5 += 6;
+		}
+
+		for(int i6 = 0; i6 < 9; ++i6) {
+			for(int i7 = 0; i7 < 9; ++i7) {
+				cv.setBlock(integer2 * 16 + i7 + 3, i5, integer3 * 16 + i6 + 3, Block.brick.blockID);
+			}
+		}
+
+	}
+}
--- net/minecraft/src/Packet4UpdateTime.java
+++ net/minecraft/src/Packet4UpdateTime.java
@@ -10,20 +10,20 @@
 	public Packet4UpdateTime() {
 	}
 
-	public Packet4UpdateTime(long var1) {
-		this.time = var1;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.time = var1.readLong();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeLong(this.time);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleUpdateTime(this);
+	public Packet4UpdateTime(long time) {
+		this.time = time;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.time = dataInputStream.readLong();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeLong(this.time);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleUpdateTime(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/HandlerSetCheckpointUnknownClass2.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class HandlerSetCheckpointUnknownClass2 {
+	public double field_7464_88Yb3s8JrU9O99XV9dC7uHfG8YRvRz1TvMgf0lZDyTE38adEshr1USce1Iwb;
+	public double field_7462_2p6AKQ7XOV62HKdu8Aa43X52fk4t176PP3ZpxWs7ExOsANR5J2TFO5u074ul;
+	public double field_7463_5X0N7yBIKxXH2D3WC8yd8dn2ArzP8f6oQ3R39z1jEaD64d8dm221klFoTI4a;
+
+	public HandlerSetCheckpointUnknownClass2(double double1, double double2, double double3) {
+		this.field_7464_88Yb3s8JrU9O99XV9dC7uHfG8YRvRz1TvMgf0lZDyTE38adEshr1USce1Iwb = double1;
+		this.field_7462_2p6AKQ7XOV62HKdu8Aa43X52fk4t176PP3ZpxWs7ExOsANR5J2TFO5u074ul = double2;
+		this.field_7463_5X0N7yBIKxXH2D3WC8yd8dn2ArzP8f6oQ3R39z1jEaD64d8dm221klFoTI4a = double3;
+	}
+
+	public double func_7461_1R60Yw0JEYPVd4WePU7yMKTV9z3VaPbN9OA5vmToYjLLeZGjxXkyn2q2866V(double double1, double double2) {
+		return Math.sqrt(Math.pow(this.field_7464_88Yb3s8JrU9O99XV9dC7uHfG8YRvRz1TvMgf0lZDyTE38adEshr1USce1Iwb - double1, 2.0D) + Math.pow(this.field_7463_5X0N7yBIKxXH2D3WC8yd8dn2ArzP8f6oQ3R39z1jEaD64d8dm221klFoTI4a - double2, 2.0D));
+	}
+}
--- net/minecraft/src/Packet50PreChunk.java
+++ net/minecraft/src/Packet50PreChunk.java
@@ -8,31 +8,75 @@
 	public int xPosition;
 	public int yPosition;
 	public boolean mode;
+	public float[] field_6539_2mu2J7E78nyV7KCXNC638nxz12I677Z4O1MuW41cJR1gn4S36yI40Nj78u6p;
 
 	public Packet50PreChunk() {
 	}
 
-	public Packet50PreChunk(int var1, int var2, boolean var3) {
-		this.isChunkDataPacket = true;
-		this.xPosition = var1;
-		this.yPosition = var2;
-		this.mode = var3;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.mode = var1.read() != 0;
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.write(this.mode ? 1 : 0);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handlePreChunk(this);
+	public Packet50PreChunk(int xPosition, int yPosition, float[] arr) {
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.field_6539_2mu2J7E78nyV7KCXNC638nxz12I677Z4O1MuW41cJR1gn4S36yI40Nj78u6p = arr;
+		this.mode = arr.length != 0;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.mode = dataInputStream.read() != 0;
+		if(this.mode) {
+			float f2 = dataInputStream.readFloat();
+			float f3 = dataInputStream.readFloat();
+			float f4 = f3 - f2;
+			byte[] b5 = new byte[1536];
+			dataInputStream.readFully(b5);
+			this.field_6539_2mu2J7E78nyV7KCXNC638nxz12I677Z4O1MuW41cJR1gn4S36yI40Nj78u6p = new float[1536];
+
+			for(int i6 = 0; i6 < b5.length; ++i6) {
+				this.field_6539_2mu2J7E78nyV7KCXNC638nxz12I677Z4O1MuW41cJR1gn4S36yI40Nj78u6p[i6] = f2 + (float)(b5[i6] & 255) / 255.0F * f4;
+			}
+		}
+
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.write(this.mode ? 1 : 0);
+		if(this.mode) {
+			float f2 = Float.MAX_VALUE;
+			float f3 = 1.17549435E-38F;
+			float[] f4 = this.field_6539_2mu2J7E78nyV7KCXNC638nxz12I677Z4O1MuW41cJR1gn4S36yI40Nj78u6p;
+			int i5 = f4.length;
+
+			int i6;
+			for(i6 = 0; i6 < i5; ++i6) {
+				float f7 = f4[i6];
+				if(f2 > f7) {
+					f2 = f7;
+				}
+
+				if(f3 < f7) {
+					f3 = f7;
+				}
+			}
+
+			float f8 = f3 - f2;
+			byte[] b9 = new byte[1536];
+
+			for(i6 = 0; i6 < b9.length; ++i6) {
+				b9[i6] = (byte)((int)((this.field_6539_2mu2J7E78nyV7KCXNC638nxz12I677Z4O1MuW41cJR1gn4S36yI40Nj78u6p[i6] + f2) / f8 * 255.0F));
+			}
+
+			dataOutputStream.writeFloat(f2);
+			dataOutputStream.writeFloat(f3);
+			dataOutputStream.write(b9);
+		}
+
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handlePreChunk(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/EnumVendingMachine.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+public enum EnumVendingMachine {
+	HealthBoost,
+	Armor,
+	Dash,
+	QuickRevive;
+    private static final /* synthetic */ EnumVendingMachine[] field_7406_05U88cRO811OS4Km4AC1m8DLPy50myURsOHbKdi6L29zBh87adHetMG7D27P;
+
+	public static EnumVendingMachine[] func_7400_8o2trEa6X3hW2BkH660o0y75qMYzm4uk15zNL6vb17e56xNLfa79FJ4cylHs() {
+		return (EnumVendingMachine[])field_7406_05U88cRO811OS4Km4AC1m8DLPy50myURsOHbKdi6L29zBh87adHetMG7D27P.clone();
+	}
+
+	public static EnumVendingMachine func_7402_9queUROohQs183Nbeaozo8QTtq8N136t7849DNr8688IX4cD3110zUe9h6J1(String string) {
+		return (EnumVendingMachine)Enum.valueOf(EnumVendingMachine.class, string);
+	}
+
+	private static EnumVendingMachine[] func_7401_1bpYdy6IKmrBylQ2F3kLC4wG4y7PLILruT0WVxE24AU2K5zEg51k3zpS85Nh() {
+		return new EnumVendingMachine[]{HealthBoost, Armor, Dash, QuickRevive};
+	}
+
+    static {
+        field_7406_05U88cRO811OS4Km4AC1m8DLPy50myURsOHbKdi6L29zBh87adHetMG7D27P = EnumVendingMachine.func_7401_1bpYdy6IKmrBylQ2F3kLC4wG4y7PLILruT0WVxE24AU2K5zEg51k3zpS85Nh();
+    }
+}
--- net/minecraft/src/ServerGuiCommandListener.java
+++ net/minecraft/src/ServerGuiCommandListener.java
@@ -8,15 +8,15 @@
 	final JTextField textField;
 	final ServerGUI mcServerGui;
 
-	ServerGuiCommandListener(ServerGUI var1, JTextField var2) {
-		this.mcServerGui = var1;
-		this.textField = var2;
+	ServerGuiCommandListener(ServerGUI _3X5i5Q9H6jHqn8Z1YN0S54rHVZxQ9l6ALxWf2439uwB1909nA5Qygr0A8aEsKhp77FcDHN1mTKZK90975aoz3BWv13v7HErY2gqLL, JTextField jTextField) {
+		this.mcServerGui = _3X5i5Q9H6jHqn8Z1YN0S54rHVZxQ9l6ALxWf2439uwB1909nA5Qygr0A8aEsKhp77FcDHN1mTKZK90975aoz3BWv13v7HErY2gqLL;
+		this.textField = jTextField;
 	}
 
-	public void actionPerformed(ActionEvent var1) {
-		String var2 = this.textField.getText().trim();
-		if(var2.length() > 0) {
-			ServerGUI.getMinecraftServer(this.mcServerGui).addCommand(var2, this.mcServerGui);
+	public void actionPerformed(ActionEvent actionEvent) {
+		String string2 = this.textField.getText().trim();
+		if(string2.length() > 0) {
+			ServerGUI.func_6005_01v3X1VDA7jEz2CWqke40sSQ50VsZo1DeEXLC5tt262yT3em849RxSjfbBu8(this.mcServerGui).addCommand(string2, this.mcServerGui);
 		}
 
 		this.textField.setText("");
--- net/minecraft/src/InventoryPlayer.java
+++ net/minecraft/src/InventoryPlayer.java
@@ -8,18 +8,18 @@
 	private EntityPlayer player;
 	public boolean inventoryChanged = false;
 
-	public InventoryPlayer(EntityPlayer var1) {
-		this.player = var1;
+	public InventoryPlayer(EntityPlayer entityPlayer) {
+		this.player = entityPlayer;
 	}
 
 	public ItemStack getCurrentItem() {
 		return this.mainInventory[this.currentItem];
 	}
 
-	private int storeItemStack(int var1) {
-		for(int var2 = 0; var2 < this.mainInventory.length; ++var2) {
-			if(this.mainInventory[var2] != null && this.mainInventory[var2].itemID == var1 && this.mainInventory[var2].stackSize < this.mainInventory[var2].getMaxStackSize() && this.mainInventory[var2].stackSize < this.getInventoryStackLimit()) {
-				return var2;
+	private int storeItemStack(int itemID) {
+		for(int i2 = 0; i2 < this.mainInventory.length; ++i2) {
+			if(this.mainInventory[i2] != null && this.mainInventory[i2].itemID == itemID && this.mainInventory[i2].stackSize < this.mainInventory[i2].getMaxStackSize() && this.mainInventory[i2].stackSize < this.getInventoryStackLimit()) {
+				return i2;
 			}
 		}
 
@@ -27,150 +27,150 @@
 	}
 
 	private int getFirstEmptyStack() {
-		for(int var1 = 0; var1 < this.mainInventory.length; ++var1) {
-			if(this.mainInventory[var1] == null) {
-				return var1;
+		for(int i1 = 0; i1 < this.mainInventory.length; ++i1) {
+			if(this.mainInventory[i1] == null) {
+				return i1;
 			}
 		}
 
 		return -1;
 	}
 
-	private int storePartialItemStack(int var1, int var2) {
-		int var3 = this.storeItemStack(var1);
-		if(var3 < 0) {
-			var3 = this.getFirstEmptyStack();
+	private int storePartialItemStack(int itemID, int integer2) {
+		int i3 = this.storeItemStack(itemID);
+		if(i3 < 0) {
+			i3 = this.getFirstEmptyStack();
 		}
 
-		if(var3 < 0) {
-			return var2;
+		if(i3 < 0) {
+			return integer2;
 		} else {
-			if(this.mainInventory[var3] == null) {
-				this.mainInventory[var3] = new ItemStack(var1, 0);
-			}
-
-			int var4 = var2;
-			if(var2 > this.mainInventory[var3].getMaxStackSize() - this.mainInventory[var3].stackSize) {
-				var4 = this.mainInventory[var3].getMaxStackSize() - this.mainInventory[var3].stackSize;
-			}
-
-			if(var4 > this.getInventoryStackLimit() - this.mainInventory[var3].stackSize) {
-				var4 = this.getInventoryStackLimit() - this.mainInventory[var3].stackSize;
-			}
-
-			if(var4 == 0) {
-				return var2;
+			if(this.mainInventory[i3] == null) {
+				this.mainInventory[i3] = new ItemStack(itemID, 0);
+			}
+
+			int i4 = integer2;
+			if(integer2 > this.mainInventory[i3].getMaxStackSize() - this.mainInventory[i3].stackSize) {
+				i4 = this.mainInventory[i3].getMaxStackSize() - this.mainInventory[i3].stackSize;
+			}
+
+			if(i4 > this.getInventoryStackLimit() - this.mainInventory[i3].stackSize) {
+				i4 = this.getInventoryStackLimit() - this.mainInventory[i3].stackSize;
+			}
+
+			if(i4 == 0) {
+				return integer2;
 			} else {
-				var2 -= var4;
-				this.mainInventory[var3].stackSize += var4;
-				this.mainInventory[var3].animationsToGo = 5;
-				return var2;
+				integer2 -= i4;
+				this.mainInventory[i3].stackSize += i4;
+				this.mainInventory[i3].animationsToGo = 5;
+				return integer2;
 			}
 		}
 	}
 
 	public void decrementAnimations() {
-		for(int var1 = 0; var1 < this.mainInventory.length; ++var1) {
-			if(this.mainInventory[var1] != null && this.mainInventory[var1].animationsToGo > 0) {
-				--this.mainInventory[var1].animationsToGo;
+		for(int i1 = 0; i1 < this.mainInventory.length; ++i1) {
+			if(this.mainInventory[i1] != null && this.mainInventory[i1].animationsToGo > 0) {
+				--this.mainInventory[i1].animationsToGo;
 			}
 		}
 
 	}
 
-	public boolean addItemStackToInventory(ItemStack var1) {
-		if(var1.itemDmg == 0) {
-			var1.stackSize = this.storePartialItemStack(var1.itemID, var1.stackSize);
-			if(var1.stackSize == 0) {
+	public boolean addItemStackToInventory(ItemStack stack) {
+		if(stack.itemDmg == 0) {
+			stack.stackSize = this.storePartialItemStack(stack.itemID, stack.stackSize);
+			if(stack.stackSize == 0) {
 				return true;
 			}
 		}
 
-		int var2 = this.getFirstEmptyStack();
-		if(var2 >= 0) {
-			this.mainInventory[var2] = var1;
-			this.mainInventory[var2].animationsToGo = 5;
+		int i2 = this.getFirstEmptyStack();
+		if(i2 >= 0) {
+			this.mainInventory[i2] = stack;
+			this.mainInventory[i2].animationsToGo = 5;
 			return true;
 		} else {
 			return false;
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		ItemStack[] var3 = this.mainInventory;
-		if(var1 >= var3.length) {
-			var1 -= var3.length;
-			var3 = this.armorInventory;
-		}
-
-		if(var1 >= var3.length) {
-			var1 -= var3.length;
-			var3 = this.craftingInventory;
-		}
-
-		var3[var1] = var2;
+	public void getCurrentItem(int slots, ItemStack stack) {
+		ItemStack[] itemStack3 = this.mainInventory;
+		if(slots >= itemStack3.length) {
+			slots -= itemStack3.length;
+			itemStack3 = this.armorInventory;
+		}
+
+		if(slots >= itemStack3.length) {
+			slots -= itemStack3.length;
+			itemStack3 = this.craftingInventory;
+		}
+
+		itemStack3[slots] = stack;
 	}
 
-	public float getStrVsBlock(Block var1) {
-		float var2 = 1.0F;
+	public float getStrVsBlock(Block block) {
+		float f2 = 1.0F;
 		if(this.mainInventory[this.currentItem] != null) {
-			var2 *= this.mainInventory[this.currentItem].getStrVsBlock(var1);
-		}
-
-		return var2;
-	}
-
-	public NBTTagList writeToNBT(NBTTagList var1) {
-		int var2;
-		NBTTagCompound var3;
-		for(var2 = 0; var2 < this.mainInventory.length; ++var2) {
-			if(this.mainInventory[var2] != null) {
-				var3 = new NBTTagCompound();
-				var3.setByte("Slot", (byte)var2);
-				this.mainInventory[var2].writeToNBT(var3);
-				var1.setTag(var3);
-			}
-		}
-
-		for(var2 = 0; var2 < this.armorInventory.length; ++var2) {
-			if(this.armorInventory[var2] != null) {
-				var3 = new NBTTagCompound();
-				var3.setByte("Slot", (byte)(var2 + 100));
-				this.armorInventory[var2].writeToNBT(var3);
-				var1.setTag(var3);
-			}
-		}
-
-		for(var2 = 0; var2 < this.craftingInventory.length; ++var2) {
-			if(this.craftingInventory[var2] != null) {
-				var3 = new NBTTagCompound();
-				var3.setByte("Slot", (byte)(var2 + 80));
-				this.craftingInventory[var2].writeToNBT(var3);
-				var1.setTag(var3);
-			}
-		}
-
-		return var1;
-	}
-
-	public void readFromNBT(NBTTagList var1) {
+			f2 *= this.mainInventory[this.currentItem].getStrVsBlock(block);
+		}
+
+		return f2;
+	}
+
+	public NBTTagList writeToNBT(NBTTagList nbttaglist) {
+		int i2;
+		NBTTagCompound nBTTagCompound3;
+		for(i2 = 0; i2 < this.mainInventory.length; ++i2) {
+			if(this.mainInventory[i2] != null) {
+				nBTTagCompound3 = new NBTTagCompound();
+				nBTTagCompound3.setByte("Slot", (byte)i2);
+				this.mainInventory[i2].writeToNBT(nBTTagCompound3);
+				nbttaglist.setTag(nBTTagCompound3);
+			}
+		}
+
+		for(i2 = 0; i2 < this.armorInventory.length; ++i2) {
+			if(this.armorInventory[i2] != null) {
+				nBTTagCompound3 = new NBTTagCompound();
+				nBTTagCompound3.setByte("Slot", (byte)(i2 + 100));
+				this.armorInventory[i2].writeToNBT(nBTTagCompound3);
+				nbttaglist.setTag(nBTTagCompound3);
+			}
+		}
+
+		for(i2 = 0; i2 < this.craftingInventory.length; ++i2) {
+			if(this.craftingInventory[i2] != null) {
+				nBTTagCompound3 = new NBTTagCompound();
+				nBTTagCompound3.setByte("Slot", (byte)(i2 + 80));
+				this.craftingInventory[i2].writeToNBT(nBTTagCompound3);
+				nbttaglist.setTag(nBTTagCompound3);
+			}
+		}
+
+		return nbttaglist;
+	}
+
+	public void readFromNBT(NBTTagList nbttaglist) {
 		this.mainInventory = new ItemStack[36];
 		this.armorInventory = new ItemStack[4];
 		this.craftingInventory = new ItemStack[4];
 
-		for(int var2 = 0; var2 < var1.tagCount(); ++var2) {
-			NBTTagCompound var3 = (NBTTagCompound)var1.tagAt(var2);
-			int var4 = var3.getByte("Slot") & 255;
-			if(var4 >= 0 && var4 < this.mainInventory.length) {
-				this.mainInventory[var4] = new ItemStack(var3);
-			}
-
-			if(var4 >= 80 && var4 < this.craftingInventory.length + 80) {
-				this.craftingInventory[var4 - 80] = new ItemStack(var3);
-			}
-
-			if(var4 >= 100 && var4 < this.armorInventory.length + 100) {
-				this.armorInventory[var4 - 100] = new ItemStack(var3);
+		for(int i2 = 0; i2 < nbttaglist.tagCount(); ++i2) {
+			NBTTagCompound nBTTagCompound3 = (NBTTagCompound)nbttaglist.tagAt(i2);
+			int i4 = nBTTagCompound3.getByte("Slot") & 255;
+			if(i4 >= 0 && i4 < this.mainInventory.length) {
+				this.mainInventory[i4] = new ItemStack(nBTTagCompound3);
+			}
+
+			if(i4 >= 80 && i4 < this.craftingInventory.length + 80) {
+				this.craftingInventory[i4 - 80] = new ItemStack(nBTTagCompound3);
+			}
+
+			if(i4 >= 100 && i4 < this.armorInventory.length + 100) {
+				this.armorInventory[i4 - 100] = new ItemStack(nBTTagCompound3);
 			}
 		}
 
@@ -180,65 +180,65 @@
 		return this.mainInventory.length + 4;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		ItemStack[] var2 = this.mainInventory;
-		if(var1 >= var2.length) {
-			var1 -= var2.length;
-			var2 = this.armorInventory;
-		}
-
-		if(var1 >= var2.length) {
-			var1 -= var2.length;
-			var2 = this.craftingInventory;
-		}
-
-		return var2[var1];
+	public ItemStack getStackInSlot(int slot) {
+		ItemStack[] itemStack2 = this.mainInventory;
+		if(slot >= itemStack2.length) {
+			slot -= itemStack2.length;
+			itemStack2 = this.armorInventory;
+		}
+
+		if(slot >= itemStack2.length) {
+			slot -= itemStack2.length;
+			itemStack2 = this.craftingInventory;
+		}
+
+		return itemStack2[slot];
 	}
 
 	public int getInventoryStackLimit() {
 		return 64;
 	}
 
-	public boolean canHarvestBlock(Block var1) {
-		if(var1.material != Material.rock && var1.material != Material.iron && var1.material != Material.craftedSnow && var1.material != Material.snow) {
+	public boolean canHarvestBlock(Block block) {
+		if(block.material != Material.rock && block.material != Material.iron && block.material != Material.craftedSnow && block.material != Material.snow) {
 			return true;
 		} else {
-			ItemStack var2 = this.getStackInSlot(this.currentItem);
-			return var2 != null ? var2.canHarvestBlock(var1) : false;
+			ItemStack itemStack2 = this.getStackInSlot(this.currentItem);
+			return itemStack2 != null ? itemStack2.canHarvestBlock(block) : false;
 		}
 	}
 
 	public int getTotalArmorValue() {
-		int var1 = 0;
-		int var2 = 0;
-		int var3 = 0;
+		int i1 = 0;
+		int i2 = 0;
+		int i3 = 0;
 
-		for(int var4 = 0; var4 < this.armorInventory.length; ++var4) {
-			if(this.armorInventory[var4] != null && this.armorInventory[var4].getItem() instanceof ItemArmor) {
-				int var5 = this.armorInventory[var4].getMaxDamage();
-				int var6 = this.armorInventory[var4].itemDmg;
-				int var7 = var5 - var6;
-				var2 += var7;
-				var3 += var5;
-				int var8 = ((ItemArmor)this.armorInventory[var4].getItem()).damageReduceAmount;
-				var1 += var8;
+		for(int i4 = 0; i4 < this.armorInventory.length; ++i4) {
+			if(this.armorInventory[i4] != null && this.armorInventory[i4].getItem() instanceof ItemArmor) {
+				int i5 = this.armorInventory[i4].getMaxDamage();
+				int i6 = this.armorInventory[i4].itemDmg;
+				int i7 = i5 - i6;
+				i2 += i7;
+				i3 += i5;
+				int i8 = ((ItemArmor)this.armorInventory[i4].getItem()).damageReduceAmount;
+				i1 += i8;
 			}
 		}
 
-		if(var3 == 0) {
+		if(i3 == 0) {
 			return 0;
 		} else {
-			return (var1 - 1) * var2 / var3 + 1;
+			return (i1 - 1) * i2 / i3 + 1;
 		}
 	}
 
-	public void damageArmor(int var1) {
-		for(int var2 = 0; var2 < this.armorInventory.length; ++var2) {
-			if(this.armorInventory[var2] != null && this.armorInventory[var2].getItem() instanceof ItemArmor) {
-				this.armorInventory[var2].damageItem(var1);
-				if(this.armorInventory[var2].stackSize == 0) {
-					this.armorInventory[var2].onItemDestroyedByUse(this.player);
-					this.armorInventory[var2] = null;
+	public void damageArmor(int damage) {
+		for(int i2 = 0; i2 < this.armorInventory.length; ++i2) {
+			if(this.armorInventory[i2] != null && this.armorInventory[i2].getItem() instanceof ItemArmor) {
+				this.armorInventory[i2].damageItem(damage);
+				if(this.armorInventory[i2].stackSize == 0) {
+					this.armorInventory[i2].onItemDestroyedByUse(this.player);
+					this.armorInventory[i2] = null;
 				}
 			}
 		}
@@ -246,20 +246,43 @@
 	}
 
 	public void dropAllItems() {
-		int var1;
-		for(var1 = 0; var1 < this.mainInventory.length; ++var1) {
-			if(this.mainInventory[var1] != null) {
-				this.player.dropPlayerItemWithRandomChoice(this.mainInventory[var1], true);
-				this.mainInventory[var1] = null;
-			}
-		}
-
-		for(var1 = 0; var1 < this.armorInventory.length; ++var1) {
-			if(this.armorInventory[var1] != null) {
-				this.player.dropPlayerItemWithRandomChoice(this.armorInventory[var1], true);
-				this.armorInventory[var1] = null;
-			}
-		}
-
+		int i1;
+		for(i1 = 0; i1 < this.mainInventory.length; ++i1) {
+			if(this.mainInventory[i1] != null) {
+				this.player.dropPlayerItemWithRandomChoice(this.mainInventory[i1], true);
+				this.mainInventory[i1] = null;
+			}
+		}
+
+		for(i1 = 0; i1 < this.armorInventory.length; ++i1) {
+			if(this.armorInventory[i1] != null) {
+				this.player.dropPlayerItemWithRandomChoice(this.armorInventory[i1], true);
+				this.armorInventory[i1] = null;
+			}
+		}
+
+	}
+
+	private int func_7164_98ZiDMD6Ev5Lsa3eDm4D2j1FjzoWOTymmEvaPb4P46wXQ158A4UwKWfrvrvj(int integer) {
+		for(int i2 = 0; i2 < this.mainInventory.length; ++i2) {
+			if(this.mainInventory[i2] != null && this.mainInventory[i2].itemID == integer) {
+				return i2;
+			}
+		}
+
+		return -1;
+	}
+
+	public boolean consumeInventoryItem(int integer) {
+		int i2 = this.func_7164_98ZiDMD6Ev5Lsa3eDm4D2j1FjzoWOTymmEvaPb4P46wXQ158A4UwKWfrvrvj(integer);
+		if(i2 < 0) {
+			return false;
+		} else {
+			if(--this.mainInventory[i2].stackSize <= 0) {
+				this.mainInventory[i2] = null;
+			}
+
+			return true;
+		}
 	}
 }
--- net/minecraft/src/EnumSkyBlock.java
+++ net/minecraft/src/EnumSkyBlock.java
@@ -3,10 +3,27 @@
 public enum EnumSkyBlock {
 	Sky(15),
 	Block(0);
+    private static final /* synthetic */ EnumSkyBlock[] field_7990_6V55wK110GB52ef4Z0QpeFJ7p5g1rH4YvCo75AjeDDTs7UmO3i2A619NnZWn;
 
 	public final int defaultLightValue;
 
-	private EnumSkyBlock(int var3) {
-		this.defaultLightValue = var3;
-	}
+	public static EnumSkyBlock[] func_7988_3q58KPtCX4FnsoCG3mKO0Gehb9cW27PE9E79Mlh52672pOel14t6FdUDMvOb() {
+		return (EnumSkyBlock[])field_7990_6V55wK110GB52ef4Z0QpeFJ7p5g1rH4YvCo75AjeDDTs7UmO3i2A619NnZWn.clone();
+	}
+
+	public static EnumSkyBlock func_7986_7534d0211W03t405D14b5BHrwAw0Ey9D2JcK2W90I5Q8sqxFDVBb28ZO5KxL(String string) {
+		return (EnumSkyBlock)Enum.valueOf(EnumSkyBlock.class, string);
+	}
+
+	private EnumSkyBlock(int integer3) {
+		this.defaultLightValue = integer3;
+	}
+
+	private static EnumSkyBlock[] func_7987_4Xyv68Asm6lv1Ji4Kv6gn851V0I2BJ6kF0OQcOL450225ieFN9QF6OJ4GXB2() {
+		return new EnumSkyBlock[]{Sky, Block};
+	}
+
+    static {
+        field_7990_6V55wK110GB52ef4Z0QpeFJ7p5g1rH4YvCo75AjeDDTs7UmO3i2A619NnZWn = EnumSkyBlock.func_7987_4Xyv68Asm6lv1Ji4Kv6gn851V0I2BJ6kF0OQcOL450225ieFN9QF6OJ4GXB2();
+    }
 }
--- net/minecraft/src/Packet52MultiBlockChange.java
+++ net/minecraft/src/Packet52MultiBlockChange.java
@@ -16,58 +16,59 @@
 		this.isChunkDataPacket = true;
 	}
 
-	public Packet52MultiBlockChange(int var1, int var2, short[] var3, int var4, World var5) {
+	public Packet52MultiBlockChange(int xPosition, int zPosition, short[] data, int size, World world) {
 		this.isChunkDataPacket = true;
-		this.xPosition = var1;
-		this.zPosition = var2;
-		this.size = var4;
-		this.coordinateArray = new short[var4];
-		this.typeArray = new byte[var4];
-		this.metadataArray = new byte[var4];
-		Chunk var6 = var5.getChunkFromChunkCoords(var1, var2);
+		this.xPosition = xPosition;
+		this.zPosition = zPosition;
+		this.size = size;
+		this.coordinateArray = new short[size];
+		this.typeArray = new byte[size];
+		this.metadataArray = new byte[size];
+		Chunk chunk6 = world.getChunkFromChunkCoords(xPosition, zPosition);
 
-		for(int var7 = 0; var7 < var4; ++var7) {
-			int var8 = var3[var7] >> 12 & 15;
-			int var9 = var3[var7] >> 8 & 15;
-			int var10 = var3[var7] & 255;
-			this.coordinateArray[var7] = var3[var7];
-			this.typeArray[var7] = (byte)var6.getBlockID(var8, var10, var9);
-			this.metadataArray[var7] = (byte)var6.getBlockMetadata(var8, var10, var9);
+		for(int i7 = 0; i7 < size; ++i7) {
+			int i8 = data[i7] >> 12 & 15;
+			int i9 = data[i7] >> 8 & 15;
+			int i10 = data[i7] & 255;
+			this.coordinateArray[i7] = data[i7];
+			this.typeArray[i7] = (byte)chunk6.getBlockID(i8, i10, i9);
+			this.metadataArray[i7] = (byte)chunk6.getBlockMetadata(i8, i10, i9);
 		}
 
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.size = var1.readShort() & '\uffff';
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.size = dataInputStream.readShort() & 65535;
 		this.coordinateArray = new short[this.size];
 		this.typeArray = new byte[this.size];
 		this.metadataArray = new byte[this.size];
 
-		for(int var2 = 0; var2 < this.size; ++var2) {
-			this.coordinateArray[var2] = var1.readShort();
-		}
-
-		var1.readFully(this.typeArray);
-		var1.readFully(this.metadataArray);
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.zPosition);
-		var1.writeShort((short)this.size);
-
-		for(int var2 = 0; var2 < this.size; ++var2) {
-			var1.writeShort(this.coordinateArray[var2]);
-		}
-
-		var1.write(this.typeArray);
-		var1.write(this.metadataArray);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleMultiBlockChange(this);
+		for(int i2 = 0; i2 < this.size; ++i2) {
+			this.coordinateArray[i2] = dataInputStream.readShort();
+		}
+
+		dataInputStream.readFully(this.typeArray);
+		dataInputStream.readFully(this.metadataArray);
+		ExtLogger.i("Received packet52");
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.writeShort((short)this.size);
+
+		for(int i2 = 0; i2 < this.size; ++i2) {
+			dataOutputStream.writeShort(this.coordinateArray[i2]);
+		}
+
+		dataOutputStream.write(this.typeArray);
+		dataOutputStream.write(this.metadataArray);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleMultiBlockChange(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/WorldGenLichen.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenLichen extends WorldGenerator {
+	private int field_7546_54fm1k1u9U6s9kUN1u307n5PO6JOl3Wn182713l2baKa6OkA8zZv70qau6K3 = ExtBlocks.Lichen.blockID;
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 64; ++i6) {
+			int i7 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+			int i9 = z + rand.nextInt(8) - rand.nextInt(8);
+			if(world.getBlockId(i7, i8, i9) == 0 && Block.blocksList[this.field_7546_54fm1k1u9U6s9kUN1u307n5PO6JOl3Wn182713l2baKa6OkA8zZv70qau6K3].canBlockStay(world, i7, i8, i9)) {
+				world.setBlock(i7, i8, i9, this.field_7546_54fm1k1u9U6s9kUN1u307n5PO6JOl3Wn182713l2baKa6OkA8zZv70qau6K3);
+			}
+		}
+
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EntitySquib.java
@@ -1,0 +1,34 @@
+package net.minecraft.src;
+
+public class EntitySquib extends EntityAnimal {
+	public boolean field_7028_93tTN80jbgC7G5Y65o4Zvapl94IjI0US3P5hYx07dSh0HDJ5k5dgJWN65CFI = false;
+
+	public EntitySquib(World world) {
+		super(world);
+		this.setSize(1.0F, 2.0F);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+	}
+
+	protected String getHurtSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected String getDeathSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected float getSoundVolume() {
+		return 0.4F;
+	}
+
+	public boolean func_7027_5sgE67kL2mk9E3O177xn2H0F3ecHj8fxA71tvcKicM6wG6vqXxkW1IePl8Wg(EntityPlayer nh) {
+		return false;
+	}
+}
--- net/minecraft/src/BlockSand.java
+++ net/minecraft/src/BlockSand.java
@@ -5,31 +5,31 @@
 public class BlockSand extends Block {
 	public static boolean fallInstantly = false;
 
-	public BlockSand(int var1, int var2) {
-		super(var1, var2, Material.sand);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		this.tryToFall(var1, var2, var3, var4);
-	}
-
-	private void tryToFall(World var1, int var2, int var3, int var4) {
-		if(canFallBelow(var1, var2, var3 - 1, var4) && var3 >= 0) {
-			EntityFallingSand var8 = new EntityFallingSand(var1, (float)var2 + 0.5F, (float)var3 + 0.5F, (float)var4 + 0.5F, this.blockID);
+	public BlockSand(int id, int blockIndex) {
+		super(id, blockIndex, Material.sand);
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		world.scheduleBlockUpdate(x, y, z, this.blockID);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		world.scheduleBlockUpdate(x, y, z, this.blockID);
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		this.tryToFall(world, x, y, z);
+	}
+
+	private void tryToFall(World world, int x, int y, int z) {
+		if(canFallBelow(world, x, y - 1, z) && y >= 0) {
+			EntityFallingSand entityFallingSand5 = new EntityFallingSand(world, (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F, this.blockID);
 			if(fallInstantly) {
-				while(!var8.isDead) {
-					var8.onUpdate();
+				while(!entityFallingSand5.isDead) {
+					entityFallingSand5.onUpdate();
 				}
 			} else {
-				var1.spawnEntityInWorld(var8);
+				world.spawnEntityInWorld(entityFallingSand5);
 			}
 		}
 
@@ -39,15 +39,15 @@
 		return 3;
 	}
 
-	public static boolean canFallBelow(World var0, int var1, int var2, int var3) {
-		int var4 = var0.getBlockId(var1, var2, var3);
-		if(var4 == 0) {
+	public static boolean canFallBelow(World world, int x, int y, int z) {
+		int i4 = world.getBlockId(x, y, z);
+		if(i4 == 0) {
 			return true;
-		} else if(var4 == Block.fire.blockID) {
+		} else if(i4 == Block.fire.blockID) {
 			return true;
 		} else {
-			Material var5 = Block.blocksList[var4].material;
-			return var5 == Material.water ? true : var5 == Material.lava;
+			Material material5 = Block.blocksList[i4].material;
+			return material5 == Material.water ? true : material5 == Material.lava;
 		}
 	}
 }
--- /dev/null
+++ net/minecraft/src/ItemObsidianPick.java
@@ -1,0 +1,11 @@
+package net.minecraft.src;
+
+public class ItemObsidianPick extends ItemPickaxe {
+	public ItemObsidianPick(int itemID, int harvestLevelAndMaterial) {
+		super(itemID, harvestLevelAndMaterial);
+	}
+
+	public boolean canHarvestBlock(Block block) {
+		return block == Block.bedrock ? true : super.canHarvestBlock(block);
+	}
+}
--- net/minecraft/src/ThreadServerApplication.java
+++ net/minecraft/src/ThreadServerApplication.java
@@ -5,9 +5,9 @@
 public final class ThreadServerApplication extends Thread {
 	final MinecraftServer mcServer;
 
-	public ThreadServerApplication(String var1, MinecraftServer var2) {
-		super(var1);
-		this.mcServer = var2;
+	public ThreadServerApplication(String threadName, MinecraftServer minecraftServer) {
+		super(threadName);
+		this.mcServer = minecraftServer;
 	}
 
 	public void run() {
--- net/minecraft/src/EntityPlayer.java
+++ net/minecraft/src/EntityPlayer.java
@@ -11,17 +11,21 @@
 	public boolean isSwinging = false;
 	public int swingProgressInt = 0;
 	public String username;
-	private int damageRemainder = 0;
+	private int flying = 0;
+	public int lastInWater = 0;
 
-	public EntityPlayer(World var1) {
-		super(var1);
+	public EntityPlayer(World world) {
+		super(world);
 		this.yOffset = 1.62F;
-		this.setLocationAndAngles((double)var1.spawnX + 0.5D, (double)(var1.spawnY + 1), (double)var1.spawnZ + 0.5D, 0.0F, 0.0F);
+		this.setLocationAndAngles((double)world.spawnX + 0.5D, (double)(world.spawnY + 1), (double)world.spawnZ + 0.5D, 0.0F, 0.0F);
 		this.health = 20;
 		this.entityType = "humanoid";
 		this.unusedRotation = 180.0F;
 		this.fireResistance = 20;
-		this.texture = "/char.png";
+	}
+
+	public String username() {
+		return this.username.replaceAll("[^a-zA-Z0-9]", "_");
 	}
 
 	public void updateRidden() {
@@ -52,38 +56,38 @@
 		this.inventory.decrementAnimations();
 		this.prevCameraYaw = this.cameraYaw;
 		super.onLivingUpdate();
-		float var1 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-		float var2 = (float)Math.atan(-this.motionY * (double)0.2F) * 15.0F;
-		if(var1 > 0.1F) {
-			var1 = 0.1F;
+		float f1 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+		float f2 = (float)Math.atan(-this.motionY * (double)0.2F) * 15.0F;
+		if(f1 > 0.1F) {
+			f1 = 0.1F;
 		}
 
 		if(!this.onGround || this.health <= 0) {
-			var1 = 0.0F;
+			f1 = 0.0F;
 		}
 
 		if(this.onGround || this.health <= 0) {
-			var2 = 0.0F;
+			f2 = 0.0F;
 		}
 
-		this.cameraYaw += (var1 - this.cameraYaw) * 0.4F;
-		this.cameraPitch += (var2 - this.cameraPitch) * 0.8F;
+		this.cameraYaw += (f1 - this.cameraYaw) * 0.4F;
+		this.cameraPitch += (f2 - this.cameraPitch) * 0.8F;
 		if(this.health > 0) {
-			List var3 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(1.0D, 0.0D, 1.0D));
-			if(var3 != null) {
-				for(int var4 = 0; var4 < var3.size(); ++var4) {
-					this.collideWithPlayer((Entity)var3.get(var4));
+			List list3 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(1.0D, 0.0D, 1.0D));
+			if(list3 != null) {
+				for(int i4 = 0; i4 < list3.size(); ++i4) {
+					this.collideWithPlayer((Entity)list3.get(i4));
 				}
 			}
 		}
 
 	}
 
-	private void collideWithPlayer(Entity var1) {
-		var1.onCollideWithPlayer(this);
+	private void collideWithPlayer(Entity entity) {
+		entity.onCollideWithPlayer(this);
 	}
 
-	public void onDeath(Entity var1) {
+	public void onDeath(Entity entity) {
 		this.setSize(0.2F, 0.2F);
 		this.setPosition(this.posX, this.posY, this.posZ);
 		this.motionY = (double)0.1F;
@@ -92,7 +96,7 @@
 		}
 
 		this.inventory.dropAllItems();
-		if(var1 != null) {
+		if(entity != null) {
 			this.motionX = (double)(-MathHelper.cos((this.attackedAtYaw + this.rotationYaw) * (float)Math.PI / 180.0F) * 0.1F);
 			this.motionZ = (double)(-MathHelper.sin((this.attackedAtYaw + this.rotationYaw) * (float)Math.PI / 180.0F) * 0.1F);
 		} else {
@@ -102,122 +106,123 @@
 		this.yOffset = 0.1F;
 	}
 
-	public void addToPlayerScore(Entity var1, int var2) {
-		this.score += var2;
-	}
-
-	public void dropPlayerItem(ItemStack var1) {
-		this.dropPlayerItemWithRandomChoice(var1, false);
-	}
-
-	public void dropPlayerItemWithRandomChoice(ItemStack var1, boolean var2) {
-		if(var1 != null) {
-			EntityItem var3 = new EntityItem(this.worldObj, this.posX, this.posY - (double)0.3F + (double)this.getEyeHeight(), this.posZ, var1);
-			var3.delayBeforeCanPickup = 40;
-			float var4 = 0.1F;
-			float var5;
-			if(var2) {
-				var5 = this.rand.nextFloat() * 0.5F;
-				float var6 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
-				var3.motionX = (double)(-MathHelper.sin(var6) * var5);
-				var3.motionZ = (double)(MathHelper.cos(var6) * var5);
-				var3.motionY = (double)0.2F;
+	public void addToPlayerScore(Entity entity, int score) {
+		this.score += score;
+	}
+
+	public void dropPlayerItem(ItemStack stack) {
+		this.dropPlayerItemWithRandomChoice(stack, false);
+	}
+
+	public void dropPlayerItemWithRandomChoice(ItemStack stack, boolean isRandom) {
+		if(stack != null) {
+			EntityItem entityItem3 = new EntityItem(this.worldObj, this.posX, this.posY - (double)0.3F + (double)this.getEyeHeight(), this.posZ, stack);
+			entityItem3.delayBeforeCanPickup = 40;
+			float f4 = 0.1F;
+			float f5;
+			if(isRandom) {
+				f5 = this.rand.nextFloat() * 0.5F;
+				float f6 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
+				entityItem3.motionX = (double)(-MathHelper.sin(f6) * f5);
+				entityItem3.motionZ = (double)(MathHelper.cos(f6) * f5);
+				entityItem3.motionY = (double)0.2F;
 			} else {
-				var4 = 0.3F;
-				var3.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var4);
-				var3.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var4);
-				var3.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * var4 + 0.1F);
-				var4 = 0.02F;
-				var5 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
-				var4 *= this.rand.nextFloat();
-				var3.motionX += Math.cos((double)var5) * (double)var4;
-				var3.motionY += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
-				var3.motionZ += Math.sin((double)var5) * (double)var4;
+				f4 = 0.3F;
+				entityItem3.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * f4);
+				entityItem3.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * f4);
+				entityItem3.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * f4 + 0.1F);
+				f4 = 0.02F;
+				f5 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
+				f4 *= this.rand.nextFloat();
+				entityItem3.motionX += Math.cos((double)f5) * (double)f4;
+				entityItem3.motionY += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+				entityItem3.motionZ += Math.sin((double)f5) * (double)f4;
 			}
 
-			this.joinEntityItemWithWorld(var3);
+			this.joinEntityItemWithWorld(entityItem3);
 		}
-	}
-
-	protected void joinEntityItemWithWorld(EntityItem var1) {
-		this.worldObj.spawnEntityInWorld(var1);
-	}
-
-	public float getCurrentPlayerStrVsBlock(Block var1) {
-		float var2 = this.inventory.getStrVsBlock(var1);
+
+	}
+
+	protected void joinEntityItemWithWorld(EntityItem entityItem) {
+		this.worldObj.spawnEntityInWorld(entityItem);
+	}
+
+	public float getCurrentPlayerStrVsBlock(Block block) {
+		float f2 = this.inventory.getStrVsBlock(block);
 		if(this.isInsideOfMaterial(Material.water)) {
-			var2 /= 5.0F;
+			f2 /= 5.0F;
 		}
 
 		if(!this.onGround) {
-			var2 /= 5.0F;
+			f2 /= 5.0F;
 		}
 
-		return var2;
-	}
-
-	public boolean canHarvestBlock(Block var1) {
-		return this.inventory.canHarvestBlock(var1);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		NBTTagList var2 = var1.getTagList("Inventory");
-		this.inventory.readFromNBT(var2);
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setTag("Inventory", this.inventory.writeToNBT(new NBTTagList()));
-	}
-
-	public void displayGUIChest(IInventory var1) {
+		return f2;
+	}
+
+	public boolean canHarvestBlock(Block block) {
+		return this.inventory.canHarvestBlock(block);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+		NBTTagList nBTTagList2 = nbttagcompound.getTagList("Inventory");
+		this.inventory.readFromNBT(nBTTagList2);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+		nbttagcompound.setTag("Inventory", this.inventory.writeToNBT(new NBTTagList()));
+	}
+
+	public void displayGUIChest(IInventory inventory) {
 	}
 
 	public void displayWorkbenchGUI() {
 	}
 
-	public void onItemPickup(Entity var1, int var2) {
+	public void onItemPickup(Entity entity, int integer) {
 	}
 
 	protected float getEyeHeight() {
 		return 0.12F;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		this.entityAge = 0;
 		if(this.health <= 0) {
 			return false;
 		} else if((float)this.heartsLife > (float)this.heartsHalvesLife / 2.0F) {
 			return false;
 		} else {
-			if(var1 instanceof EntityMob || var1 instanceof EntityArrow) {
+			if(entity instanceof EntityMob || entity instanceof EntityArrow) {
 				if(this.worldObj.difficultySetting == 0) {
-					var2 = 0;
+					damage = 0;
 				}
 
 				if(this.worldObj.difficultySetting == 1) {
-					var2 = var2 / 3 + 1;
+					damage = damage / 3 + 1;
 				}
 
 				if(this.worldObj.difficultySetting == 3) {
-					var2 = var2 * 3 / 2;
+					damage = damage * 3 / 2;
 				}
 			}
 
-			int var3 = 25 - this.inventory.getTotalArmorValue();
-			int var4 = var2 * var3 + this.damageRemainder;
-			this.inventory.damageArmor(var2);
-			var2 = var4 / 25;
-			this.damageRemainder = var4 % 25;
-			return var2 == 0 ? false : super.attackEntityFrom(var1, var2);
+			int i3 = 25 - this.inventory.getTotalArmorValue();
+			int i4 = damage * i3 + this.flying;
+			this.inventory.damageArmor(damage);
+			damage = i4 / 25;
+			this.flying = i4 % 25;
+			return damage == 0 ? false : super.attackEntityFrom(entity, damage);
 		}
 	}
 
-	public void displayGUIFurnace(TileEntityFurnace var1) {
+	public void displayGUIFurnace(TileEntityFurnace tileEntityFurnace) {
 	}
 
-	public void displayGUIEditSign(TileEntitySign var1) {
+	public void displayGUIEditSign(TileEntitySign tileEntitySign) {
 	}
 
 	public ItemStack getCurrentEquippedItem() {
@@ -225,7 +230,7 @@
 	}
 
 	public void destroyCurrentEquippedItem() {
-		this.inventory.setInventorySlotContents(this.inventory.currentItem, (ItemStack)null);
+		this.inventory.getCurrentItem(this.inventory.currentItem, (ItemStack)null);
 	}
 
 	public double getYOffset() {
@@ -235,5 +240,11 @@
 	public void swingItem() {
 		this.swingProgressInt = -1;
 		this.isSwinging = true;
+	}
+
+	public void displayEssenceClonerGUI() {
+	}
+
+	public void displayEssenceTransformerGUI() {
 	}
 }
--- net/minecraft/src/BlockPressurePlate.java
+++ net/minecraft/src/BlockPressurePlate.java
@@ -6,19 +6,19 @@
 public class BlockPressurePlate extends Block {
 	private EnumMobType triggerMobType;
 
-	protected BlockPressurePlate(int var1, int var2, EnumMobType var3) {
-		super(var1, var2, Material.rock);
-		this.triggerMobType = var3;
+	protected BlockPressurePlate(int id, int blockIndex, EnumMobType triggerMobType) {
+		super(id, blockIndex, Material.rock);
+		this.triggerMobType = triggerMobType;
 		this.setTickOnLoad(true);
-		float var4 = 1.0F / 16.0F;
-		this.setBlockBounds(var4, 0.0F, var4, 1.0F - var4, 0.03125F, 1.0F - var4);
+		float f4 = 0.0625F;
+		this.setBlockBounds(f4, 0.0F, f4, 1.0F - f4, 0.03125F, 1.0F - f4);
 	}
 
 	public int tickRate() {
 		return 20;
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -26,108 +26,110 @@
 		return false;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2, var3 - 1, var4);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		boolean var6 = false;
-		if(!var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-			var6 = true;
-		}
-
-		if(var6) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		}
-
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getBlockMetadata(var2, var3, var4) != 0) {
-			this.setStateIfMobInteractsWithPlate(var1, var2, var3, var4);
-		}
-	}
-
-	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-		if(var1.getBlockMetadata(var2, var3, var4) != 1) {
-			this.setStateIfMobInteractsWithPlate(var1, var2, var3, var4);
-		}
-	}
-
-	private void setStateIfMobInteractsWithPlate(World var1, int var2, int var3, int var4) {
-		boolean var5 = var1.getBlockMetadata(var2, var3, var4) == 1;
-		boolean var6 = false;
-		float var7 = 2.0F / 16.0F;
-		List var8 = null;
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y - 1, z);
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		boolean z6 = false;
+		if(!world.isBlockNormalCube(x, y - 1, z)) {
+			z6 = true;
+		}
+
+		if(z6) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
+		}
+
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(world.getBlockMetadata(x, y, z) != 0) {
+			this.setStateIfMobInteractsWithPlate(world, x, y, z);
+		}
+
+	}
+
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
+		if(world.getBlockMetadata(x, y, z) != 1) {
+			this.setStateIfMobInteractsWithPlate(world, x, y, z);
+		}
+
+	}
+
+	private void setStateIfMobInteractsWithPlate(World world, int x, int y, int z) {
+		boolean z5 = world.getBlockMetadata(x, y, z) == 1;
+		boolean z6 = false;
+		float f7 = 0.125F;
+		List list8 = null;
 		if(this.triggerMobType == EnumMobType.everything) {
-			var8 = var1.getEntitiesWithinAABBExcludingEntity((Entity)null, AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + var7), (double)var3, (double)((float)var4 + var7), (double)((float)(var2 + 1) - var7), (double)var3 + 0.25D, (double)((float)(var4 + 1) - var7)));
+			list8 = world.getEntitiesWithinAABBExcludingEntity((Entity)null, AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + f7), (double)y, (double)((float)z + f7), (double)((float)(x + 1) - f7), (double)y + 0.25D, (double)((float)(z + 1) - f7)));
 		}
 
 		if(this.triggerMobType == EnumMobType.mobs) {
-			var8 = var1.getEntitiesWithinAABB(EntityLiving.class, AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + var7), (double)var3, (double)((float)var4 + var7), (double)((float)(var2 + 1) - var7), (double)var3 + 0.25D, (double)((float)(var4 + 1) - var7)));
+			list8 = world.getEntitiesWithinAABB(EntityLiving.class, AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + f7), (double)y, (double)((float)z + f7), (double)((float)(x + 1) - f7), (double)y + 0.25D, (double)((float)(z + 1) - f7)));
 		}
 
 		if(this.triggerMobType == EnumMobType.players) {
-			var8 = var1.getEntitiesWithinAABB(EntityPlayer.class, AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + var7), (double)var3, (double)((float)var4 + var7), (double)((float)(var2 + 1) - var7), (double)var3 + 0.25D, (double)((float)(var4 + 1) - var7)));
-		}
-
-		if(var8.size() > 0) {
-			var6 = true;
-		}
-
-		if(var6 && !var5) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.1D, (double)var4 + 0.5D, "random.click", 0.3F, 0.6F);
-		}
-
-		if(!var6 && var5) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.1D, (double)var4 + 0.5D, "random.click", 0.3F, 0.5F);
-		}
-
-		if(var6) {
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-		}
-
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		if(var5 > 0) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-		}
-
-		super.onBlockRemoval(var1, var2, var3, var4);
-	}
-
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		boolean var5 = var1.getBlockMetadata(var2, var3, var4) == 1;
-		float var6 = 1.0F / 16.0F;
-		if(var5) {
-			this.setBlockBounds(var6, 0.0F, var6, 1.0F - var6, 0.03125F, 1.0F - var6);
+			list8 = world.getEntitiesWithinAABB(EntityPlayer.class, AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + f7), (double)y, (double)((float)z + f7), (double)((float)(x + 1) - f7), (double)y + 0.25D, (double)((float)(z + 1) - f7)));
+		}
+
+		if(list8.size() > 0) {
+			z6 = true;
+		}
+
+		if(z6 && !z5) {
+			world.setBlockMetadataWithNotify(x, y, z, 1);
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			world.markBlocksDirty(x, y, z, x, y, z);
+			world.playSoundEffect((double)x + 0.5D, (double)y + 0.1D, (double)z + 0.5D, "random.click", 0.3F, 0.6F);
+		}
+
+		if(!z6 && z5) {
+			world.setBlockMetadataWithNotify(x, y, z, 0);
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			world.markBlocksDirty(x, y, z, x, y, z);
+			world.playSoundEffect((double)x + 0.5D, (double)y + 0.1D, (double)z + 0.5D, "random.click", 0.3F, 0.5F);
+		}
+
+		if(z6) {
+			world.scheduleBlockUpdate(x, y, z, this.blockID);
+		}
+
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		if(i5 > 0) {
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+		}
+
+		super.onBlockRemoval(world, x, y, z);
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		boolean z5 = blockAccess.getBlockMetadata(x, y, z) == 1;
+		float f6 = 0.0625F;
+		if(z5) {
+			this.setBlockBounds(f6, 0.0F, f6, 1.0F - f6, 0.03125F, 1.0F - f6);
 		} else {
-			this.setBlockBounds(var6, 0.0F, var6, 1.0F - var6, 1.0F / 16.0F, 1.0F - var6);
+			this.setBlockBounds(f6, 0.0F, f6, 1.0F - f6, 0.0625F, 1.0F - f6);
 		}
 
 	}
 
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return var1.getBlockMetadata(var2, var3, var4) > 0;
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int unused) {
+		return blockAccess.getBlockMetadata(x, y, z) > 0;
 	}
 
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-		return var1.getBlockMetadata(var2, var3, var4) == 0 ? false : var5 == 1;
+	public boolean isIndirectlyPoweringTo(World world, int x, int y, int z, int flag) {
+		return world.getBlockMetadata(x, y, z) == 0 ? false : flag == 1;
 	}
 
 	public boolean canProvidePower() {
--- net/minecraft/src/Packet11PlayerPosition.java
+++ net/minecraft/src/Packet11PlayerPosition.java
@@ -9,20 +9,20 @@
 		this.moving = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readDouble();
-		this.yPosition = var1.readDouble();
-		this.stance = var1.readDouble();
-		this.zPosition = var1.readDouble();
-		super.readPacketData(var1);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readDouble();
+		this.yPosition = dataInputStream.readDouble();
+		this.stance = dataInputStream.readDouble();
+		this.zPosition = dataInputStream.readDouble();
+		super.readPacketData(dataInputStream);
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeDouble(this.xPosition);
-		var1.writeDouble(this.yPosition);
-		var1.writeDouble(this.stance);
-		var1.writeDouble(this.zPosition);
-		super.writePacket(var1);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeDouble(this.xPosition);
+		dataOutputStream.writeDouble(this.yPosition);
+		dataOutputStream.writeDouble(this.stance);
+		dataOutputStream.writeDouble(this.zPosition);
+		super.writePacket(dataOutputStream);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/Packet.java
+++ net/minecraft/src/Packet.java
@@ -11,24 +11,24 @@
 	private static Map packetClassToIdMap = new HashMap();
 	public boolean isChunkDataPacket = false;
 
-	static void addIdClassMapping(int var0, Class var1) {
-		if(packetIdToClassMap.containsKey(Integer.valueOf(var0))) {
-			throw new IllegalArgumentException("Duplicate packet id:" + var0);
-		} else if(packetClassToIdMap.containsKey(var1)) {
-			throw new IllegalArgumentException("Duplicate packet class:" + var1);
+	static void addIdClassMapping(int id, Class clazz) {
+		if(packetIdToClassMap.containsKey(id)) {
+			throw new IllegalArgumentException("Duplicate packet id:" + id);
+		} else if(packetClassToIdMap.containsKey(clazz)) {
+			throw new IllegalArgumentException("Duplicate packet class:" + clazz);
 		} else {
-			packetIdToClassMap.put(Integer.valueOf(var0), var1);
-			packetClassToIdMap.put(var1, Integer.valueOf(var0));
+			packetIdToClassMap.put(id, clazz);
+			packetClassToIdMap.put(clazz, id);
 		}
 	}
 
-	public static Packet getNewPacket(int var0) {
+	public static Packet getNewPacket(int id) {
 		try {
-			Class var1 = (Class)packetIdToClassMap.get(Integer.valueOf(var0));
-			return var1 == null ? null : (Packet)var1.newInstance();
-		} catch (Exception var2) {
-			var2.printStackTrace();
-			System.out.println("Skipping packet with id " + var0);
+			Class class1 = (Class)packetIdToClassMap.get(id);
+			return class1 == null ? null : (Packet)class1.newInstance();
+		} catch (Exception exception2) {
+			exception2.printStackTrace();
+			System.out.println("Skipping packet with id " + id);
 			return null;
 		}
 	}
@@ -37,31 +37,40 @@
 		return ((Integer)packetClassToIdMap.get(this.getClass())).intValue();
 	}
 
-	public static Packet readPacket(DataInputStream var0) throws IOException {
-		int var1 = var0.read();
-		if(var1 == -1) {
+	public static Packet readPacket(DataInputStream dataInputStream) throws IOException {
+		int i1 = dataInputStream.read();
+		if(i1 == -1) {
 			return null;
 		} else {
-			Packet var2 = getNewPacket(var1);
-			if(var2 == null) {
-				throw new IOException("Bad packet id " + var1);
+			Packet packet2 = getNewPacket(i1);
+			if(packet2 == null) {
+				throw new IOException("Bad packet id " + i1);
 			} else {
-				var2.readPacketData(var0);
-				return var2;
+				if(i1 != 10 && i1 != 11) {
+					;
+				}
+
+				packet2.readPacketData(dataInputStream);
+				return packet2;
 			}
 		}
 	}
 
-	public static void writePacket(Packet var0, DataOutputStream var1) throws IOException {
-		var1.write(var0.getPacketId());
-		var0.writePacket(var1);
+	public static void writePacket(Packet packet, DataOutputStream dataOutputStream) throws IOException {
+		int i2 = packet.getPacketId();
+		if(i2 != 52 && i2 != 53 && i2 != 51 && i2 != 4 && i2 != 30 && i2 != 0) {
+			;
+		}
+
+		dataOutputStream.write(packet.getPacketId());
+		packet.writePacket(dataOutputStream);
 	}
 
-	public abstract void readPacketData(DataInputStream var1) throws IOException;
-
-	public abstract void writePacket(DataOutputStream var1) throws IOException;
-
-	public abstract void processPacket(NetHandler var1);
+	public abstract void readPacketData(DataInputStream dataInputStream1) throws IOException;
+
+	public abstract void writePacket(DataOutputStream dataOutputStream1) throws IOException;
+
+	public abstract void processPacket(NetHandler netHandler1);
 
 	public abstract int getPacketSize();
 
@@ -73,6 +82,8 @@
 		addIdClassMapping(4, Packet4UpdateTime.class);
 		addIdClassMapping(5, Packet5PlayerInventory.class);
 		addIdClassMapping(6, Packet6SpawnPosition.class);
+		addIdClassMapping(7, Packet7SendSkinRequest.class);
+		addIdClassMapping(8, Packet8RespondSkinRequest.class);
 		addIdClassMapping(10, Packet10Flying.class);
 		addIdClassMapping(11, Packet11PlayerPosition.class);
 		addIdClassMapping(12, Packet12PlayerLook.class);
@@ -98,6 +109,13 @@
 		addIdClassMapping(52, Packet52MultiBlockChange.class);
 		addIdClassMapping(53, Packet53BlockChange.class);
 		addIdClassMapping(59, Packet59ComplexEntity.class);
+		addIdClassMapping(70, Packet70PlayGlobalMusic.class);
+		addIdClassMapping(71, Packet71.class);
+		addIdClassMapping(72, Packet72.class);
+		addIdClassMapping(200, Packet200SecureLogin.class);
+		addIdClassMapping(201, Packet201SecureChat.class);
+		addIdClassMapping(202, Packet202SecureChatEcho.class);
+		addIdClassMapping(211, Packet211.class);
 		addIdClassMapping(255, Packet255KickDisconnect.class);
 	}
 }
--- net/minecraft/src/ItemSeeds.java
+++ net/minecraft/src/ItemSeeds.java
@@ -3,19 +3,19 @@
 public class ItemSeeds extends Item {
 	private int blockType;
 
-	public ItemSeeds(int var1, int var2) {
-		super(var1);
-		this.blockType = var2;
+	public ItemSeeds(int itemID, int blockType) {
+		super(itemID);
+		this.blockType = blockType;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 != 1) {
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(side != 1) {
 			return false;
 		} else {
-			int var8 = var3.getBlockId(var4, var5, var6);
-			if(var8 == Block.tilledField.blockID) {
-				var3.setBlockWithNotify(var4, var5 + 1, var6, this.blockType);
-				--var1.stackSize;
+			int i8 = world.getBlockId(x, y, z);
+			if(i8 == Block.tilledField.blockID) {
+				world.setBlockWithNotify(x, y + 1, z, this.blockType);
+				--stack.stackSize;
 				return true;
 			} else {
 				return false;
--- net/minecraft/src/IChunkLoader.java
+++ net/minecraft/src/IChunkLoader.java
@@ -3,11 +3,11 @@
 import java.io.IOException;
 
 public interface IChunkLoader {
-	Chunk loadChunk(World var1, int var2, int var3) throws IOException;
-
-	void saveChunk(World var1, Chunk var2) throws IOException;
-
-	void saveExtraChunkData(World var1, Chunk var2);
+	Chunk loadChunk(World world1, int i2, int i3) throws IOException;
+
+	void saveChunk(World world1, Chunk chunk2) throws IOException;
+
+	void saveExtraChunkData(World world1, Chunk chunk2);
 
 	void chunkTick();
 
--- net/minecraft/src/BlockWorkbench.java
+++ net/minecraft/src/BlockWorkbench.java
@@ -1,17 +1,17 @@
 package net.minecraft.src;
 
 public class BlockWorkbench extends Block {
-	protected BlockWorkbench(int var1) {
-		super(var1, Material.wood);
+	protected BlockWorkbench(int id) {
+		super(id, Material.wood);
 		this.blockIndexInTexture = 59;
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture - 16 : (var1 == 0 ? Block.planks.getBlockTextureFromSide(0) : (var1 != 2 && var1 != 4 ? this.blockIndexInTexture : this.blockIndexInTexture + 1));
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.blockIndexInTexture - 16 : (side == 0 ? Block.planks.getBlockTextureFromSide(0) : (side != 2 && side != 4 ? this.blockIndexInTexture : this.blockIndexInTexture + 1));
 	}
 
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		var5.displayWorkbenchGUI();
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		entityPlayer.displayWorkbenchGUI();
 		return true;
 	}
 }
--- net/minecraft/src/BlockFluid.java
+++ net/minecraft/src/BlockFluid.java
@@ -5,45 +5,45 @@
 public abstract class BlockFluid extends Block {
 	protected int fluidType = 1;
 
-	protected BlockFluid(int var1, Material var2) {
-		super(var1, (var2 == Material.lava ? 14 : 12) * 16 + 13, var2);
-		float var3 = 0.0F;
-		float var4 = 0.0F;
-		if(var2 == Material.lava) {
+	protected BlockFluid(int id, Material material) {
+		super(id, (material == Material.lava ? 14 : 12) * 16 + 13, material);
+		float f3 = 0.0F;
+		float f4 = 0.0F;
+		if(material == Material.lava) {
 			this.fluidType = 2;
 		}
 
-		this.setBlockBounds(0.0F + var4, 0.0F + var3, 0.0F + var4, 1.0F + var4, 1.0F + var3, 1.0F + var4);
+		this.setBlockBounds(0.0F + f4, 0.0F + f3, 0.0F + f4, 1.0F + f4, 1.0F + f3, 1.0F + f4);
 		this.setTickOnLoad(true);
 	}
 
-	public static float getFluidHeightPercent(int var0) {
-		if(var0 >= 8) {
-			var0 = 0;
+	public static float getFluidHeightPercent(int integer) {
+		if(integer >= 8) {
+			integer = 0;
 		}
 
-		float var1 = (float)(var0 + 1) / 9.0F;
-		return var1;
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return var1 != 0 && var1 != 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
-	}
-
-	protected int getFlowDecay(World var1, int var2, int var3, int var4) {
-		return var1.getBlockMaterial(var2, var3, var4) != this.material ? -1 : var1.getBlockMetadata(var2, var3, var4);
-	}
-
-	protected int getEffectiveFlowDecay(IBlockAccess var1, int var2, int var3, int var4) {
-		if(var1.getBlockMaterial(var2, var3, var4) != this.material) {
+		float f1 = (float)(integer + 1) / 9.0F;
+		return f1;
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side != 0 && side != 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
+	}
+
+	protected int getFlowDecay(World world, int x, int y, int z) {
+		return world.getBlockMaterial(x, y, z) != this.material ? -1 : world.getBlockMetadata(x, y, z);
+	}
+
+	protected int getEffectiveFlowDecay(IBlockAccess blockAccess, int x, int y, int z) {
+		if(blockAccess.getBlockMaterial(x, y, z) != this.material) {
 			return -1;
 		} else {
-			int var5 = var1.getBlockMetadata(var2, var3, var4);
-			if(var5 >= 8) {
-				var5 = 0;
+			int i5 = blockAccess.getBlockMetadata(x, y, z);
+			if(i5 >= 8) {
+				i5 = 0;
 			}
 
-			return var5;
+			return i5;
 		}
 	}
 
@@ -51,16 +51,16 @@
 		return false;
 	}
 
-	public boolean canCollideCheck(int var1, boolean var2) {
-		return var2 && var1 == 0;
-	}
-
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		Material var6 = var1.getBlockMaterial(var2, var3, var4);
-		return var6 == this.material ? false : (var6 == Material.ice ? false : (var5 == 1 ? true : super.shouldSideBeRendered(var1, var2, var3, var4, var5)));
-	}
-
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public boolean canCollideCheck(int metadata, boolean boolean2) {
+		return boolean2 && metadata == 0;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		Material material6 = blockAccess.getBlockMaterial(x, y, z);
+		return material6 == this.material ? false : (material6 == Material.ice ? false : (side == 1 ? true : super.shouldSideBeRendered(blockAccess, x, y, z, side)));
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -68,163 +68,161 @@
 		return 4;
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return 0;
-	}
-
-	public int quantityDropped(Random var1) {
-		return 0;
-	}
-
-	private Vec3D getFlowVector(IBlockAccess var1, int var2, int var3, int var4) {
-		Vec3D var5 = Vec3D.createVector(0.0D, 0.0D, 0.0D);
-		int var6 = this.getEffectiveFlowDecay(var1, var2, var3, var4);
-
-		for(int var7 = 0; var7 < 4; ++var7) {
-			int var8 = var2;
-			int var10 = var4;
-			if(var7 == 0) {
-				var8 = var2 - 1;
-			}
-
-			if(var7 == 1) {
-				var10 = var4 - 1;
-			}
-
-			if(var7 == 2) {
-				++var8;
-			}
-
-			if(var7 == 3) {
-				++var10;
-			}
-
-			int var11 = this.getEffectiveFlowDecay(var1, var8, var3, var10);
-			int var12;
-			if(var11 < 0) {
-				if(!var1.getBlockMaterial(var8, var3, var10).getIsSolid()) {
-					var11 = this.getEffectiveFlowDecay(var1, var8, var3 - 1, var10);
-					if(var11 >= 0) {
-						var12 = var11 - (var6 - 8);
-						var5 = var5.addVector((double)((var8 - var2) * var12), (double)((var3 - var3) * var12), (double)((var10 - var4) * var12));
+	public int idDropped(int count, Random random) {
+		return 0;
+	}
+
+	public int quantityDropped(Random random) {
+		return 0;
+	}
+
+	private Vec3D getFlowVector(IBlockAccess blockAccess, int x, int y, int z) {
+		Vec3D vec3D5 = Vec3D.createVector(0.0D, 0.0D, 0.0D);
+		int i6 = this.getEffectiveFlowDecay(blockAccess, x, y, z);
+
+		for(int i7 = 0; i7 < 4; ++i7) {
+			int i8 = x;
+			int i9 = z;
+			if(i7 == 0) {
+				i8 = x - 1;
+			}
+
+			if(i7 == 1) {
+				i9 = z - 1;
+			}
+
+			if(i7 == 2) {
+				++i8;
+			}
+
+			if(i7 == 3) {
+				++i9;
+			}
+
+			int i10 = this.getEffectiveFlowDecay(blockAccess, i8, y, i9);
+			int i11;
+			if(i10 < 0) {
+				if(!blockAccess.getBlockMaterial(i8, y, i9).getIsSolid()) {
+					i10 = this.getEffectiveFlowDecay(blockAccess, i8, y - 1, i9);
+					if(i10 >= 0) {
+						i11 = i10 - (i6 - 8);
+						vec3D5 = vec3D5.addVector((double)((i8 - x) * i11), (double)((y - y) * i11), (double)((i9 - z) * i11));
 					}
 				}
-			} else if(var11 >= 0) {
-				var12 = var11 - var6;
-				var5 = var5.addVector((double)((var8 - var2) * var12), (double)((var3 - var3) * var12), (double)((var10 - var4) * var12));
-			}
-		}
-
-		if(var1.getBlockMetadata(var2, var3, var4) >= 8) {
-			boolean var13 = false;
-			if(var13 || this.shouldSideBeRendered(var1, var2, var3, var4 - 1, 2)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2, var3, var4 + 1, 3)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2 - 1, var3, var4, 4)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2 + 1, var3, var4, 5)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2, var3 + 1, var4 - 1, 2)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2, var3 + 1, var4 + 1, 3)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2 - 1, var3 + 1, var4, 4)) {
-				var13 = true;
-			}
-
-			if(var13 || this.shouldSideBeRendered(var1, var2 + 1, var3 + 1, var4, 5)) {
-				var13 = true;
-			}
-
-			if(var13) {
-				var5 = var5.normalize().addVector(0.0D, -6.0D, 0.0D);
-			}
-		}
-
-		var5 = var5.normalize();
-		return var5;
+			} else if(i10 >= 0) {
+				i11 = i10 - i6;
+				vec3D5 = vec3D5.addVector((double)((i8 - x) * i11), (double)((y - y) * i11), (double)((i9 - z) * i11));
+			}
+		}
+
+		if(blockAccess.getBlockMetadata(x, y, z) >= 8) {
+			boolean z12 = false;
+			if(z12 || this.shouldSideBeRendered(blockAccess, x, y, z - 1, 2)) {
+				z12 = true;
+			}
+
+			if(z12 || this.shouldSideBeRendered(blockAccess, x, y, z + 1, 3)) {
+				z12 = true;
+			}
+
+			if(z12 || this.shouldSideBeRendered(blockAccess, x - 1, y, z, 4)) {
+				z12 = true;
+			}
+
+			if(z12 || this.shouldSideBeRendered(blockAccess, x + 1, y, z, 5)) {
+				z12 = true;
+			}
+
+			if(z12 || this.shouldSideBeRendered(blockAccess, x, y + 1, z - 1, 2)) {
+				z12 = true;
+			}
+
+			if(z12 || this.shouldSideBeRendered(blockAccess, x, y + 1, z + 1, 3)) {
+				z12 = true;
+			}
+
+			if(z12 || this.shouldSideBeRendered(blockAccess, x - 1, y + 1, z, 4)) {
+				z12 = true;
+			}
+
+			if(z12 || this.shouldSideBeRendered(blockAccess, x + 1, y + 1, z, 5)) {
+				z12 = true;
+			}
+
+			if(z12) {
+				vec3D5 = vec3D5.normalize().addVector(0.0D, -6.0D, 0.0D);
+			}
+		}
+
+		vec3D5 = vec3D5.normalize();
+		return vec3D5;
 	}
 
-	public void velocityToAddToEntity(World var1, int var2, int var3, int var4, Entity var5, Vec3D var6) {
-		Vec3D var7 = this.getFlowVector(var1, var2, var3, var4);
-		var6.xCoord += var7.xCoord;
-		var6.yCoord += var7.yCoord;
-		var6.zCoord += var7.zCoord;
+	public void velocityToAddToEntity(World world, int x, int y, int z, Entity entity, Vec3D vector) {
+		Vec3D vec3D7 = this.getFlowVector(world, x, y, z);
+		vector.xCoord += vec3D7.xCoord;
+		vector.yCoord += vec3D7.yCoord;
+		vector.zCoord += vec3D7.zCoord;
 	}
 
 	public int tickRate() {
 		return this.material == Material.water ? 5 : (this.material == Material.lava ? 30 : 0);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		super.updateTick(var1, var2, var3, var4, var5);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		this.checkForHarden(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		this.checkForHarden(var1, var2, var3, var4);
-	}
-
-	private void checkForHarden(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			if(this.material == Material.lava) {
-				boolean var5 = false;
-				if(var5 || var1.getBlockMaterial(var2, var3, var4 - 1) == Material.water) {
-					var5 = true;
-				}
-
-				if(var5 || var1.getBlockMaterial(var2, var3, var4 + 1) == Material.water) {
-					var5 = true;
-				}
-
-				if(var5 || var1.getBlockMaterial(var2 - 1, var3, var4) == Material.water) {
-					var5 = true;
-				}
-
-				if(var5 || var1.getBlockMaterial(var2 + 1, var3, var4) == Material.water) {
-					var5 = true;
-				}
-
-				if(var5 || var1.getBlockMaterial(var2, var3 + 1, var4) == Material.water) {
-					var5 = true;
-				}
-
-				if(var5) {
-					int var6 = var1.getBlockMetadata(var2, var3, var4);
-					if(var6 == 0) {
-						var1.setBlockWithNotify(var2, var3, var4, Block.obsidian.blockID);
-					} else if(var6 <= 4) {
-						var1.setBlockWithNotify(var2, var3, var4, Block.cobblestone.blockID);
-					}
-
-					this.triggerLavaMixEffects(var1, var2, var3, var4);
-				}
-			}
-
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		super.updateTick(world, x, y, z, random);
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		this.checkForHarden(world, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		this.checkForHarden(world, x, y, z);
+	}
+
+	private void checkForHarden(World world, int x, int y, int z) {
+		if(world.getBlockId(x, y, z) == this.blockID && this.material == Material.lava) {
+			boolean z5 = false;
+			if(z5 || world.getBlockMaterial(x, y, z - 1) == Material.water) {
+				z5 = true;
+			}
+
+			if(z5 || world.getBlockMaterial(x, y, z + 1) == Material.water) {
+				z5 = true;
+			}
+
+			if(z5 || world.getBlockMaterial(x - 1, y, z) == Material.water) {
+				z5 = true;
+			}
+
+			if(z5 || world.getBlockMaterial(x + 1, y, z) == Material.water) {
+				z5 = true;
+			}
+
+			if(z5 || world.getBlockMaterial(x, y + 1, z) == Material.water) {
+				z5 = true;
+			}
+
+			if(z5) {
+				int i6 = world.getBlockMetadata(x, y, z);
+				if(i6 == 0) {
+					world.setBlockWithNotify(x, y, z, Block.obsidian.blockID);
+				} else if(i6 <= 4) {
+					world.setBlockWithNotify(x, y, z, Block.cobblestone.blockID);
+				}
+
+				this.triggerLavaMixEffects(world, x, y, z);
+			}
 		}
+
 	}
 
-	protected void triggerLavaMixEffects(World var1, int var2, int var3, int var4) {
-		var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "random.fizz", 0.5F, 2.6F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.8F);
+	protected void triggerLavaMixEffects(World world, int x, int y, int z) {
+		world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "random.fizz", 0.5F, 2.6F + (world.rand.nextFloat() - world.rand.nextFloat()) * 0.8F);
 
-		for(int var5 = 0; var5 < 8; ++var5) {
-			var1.spawnParticle("largesmoke", (double)var2 + Math.random(), (double)var3 + 1.2D, (double)var4 + Math.random(), 0.0D, 0.0D, 0.0D);
+		for(int i5 = 0; i5 < 8; ++i5) {
+			world.spawnParticle("largesmoke", (double)x + Math.random(), (double)y + 1.2D, (double)z + Math.random(), 0.0D, 0.0D, 0.0D);
 		}
 
 	}
--- net/minecraft/src/Packet33RelEntityMoveLook.java
+++ net/minecraft/src/Packet33RelEntityMoveLook.java
@@ -9,32 +9,32 @@
 		this.rotating = true;
 	}
 
-	public Packet33RelEntityMoveLook(int var1, byte var2, byte var3, byte var4, byte var5, byte var6) {
-		super(var1);
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.zPosition = var4;
-		this.yaw = var5;
-		this.pitch = var6;
+	public Packet33RelEntityMoveLook(int entityID, byte xPosition, byte yPosition, byte zPosition, byte yaw, byte pitch) {
+		super(entityID);
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.zPosition = zPosition;
+		this.yaw = yaw;
+		this.pitch = pitch;
 		this.rotating = true;
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		super.readPacketData(var1);
-		this.xPosition = var1.readByte();
-		this.yPosition = var1.readByte();
-		this.zPosition = var1.readByte();
-		this.yaw = var1.readByte();
-		this.pitch = var1.readByte();
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		super.readPacketData(dataInputStream);
+		this.xPosition = dataInputStream.readByte();
+		this.yPosition = dataInputStream.readByte();
+		this.zPosition = dataInputStream.readByte();
+		this.yaw = dataInputStream.readByte();
+		this.pitch = dataInputStream.readByte();
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		super.writePacket(var1);
-		var1.writeByte(this.xPosition);
-		var1.writeByte(this.yPosition);
-		var1.writeByte(this.zPosition);
-		var1.writeByte(this.yaw);
-		var1.writeByte(this.pitch);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		super.writePacket(dataOutputStream);
+		dataOutputStream.writeByte(this.xPosition);
+		dataOutputStream.writeByte(this.yPosition);
+		dataOutputStream.writeByte(this.zPosition);
+		dataOutputStream.writeByte(this.yaw);
+		dataOutputStream.writeByte(this.pitch);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/ChunkLoader.java
+++ net/minecraft/src/ChunkLoader.java
@@ -9,190 +9,190 @@
 	private File saveDir;
 	private boolean createIfNecessary;
 
-	public ChunkLoader(File var1, boolean var2) {
-		this.saveDir = var1;
-		this.createIfNecessary = var2;
-	}
-
-	private File chunkFileForXZ(int var1, int var2) {
-		String var3 = "c." + Integer.toString(var1, 36) + "." + Integer.toString(var2, 36) + ".dat";
-		String var4 = Integer.toString(var1 & 63, 36);
-		String var5 = Integer.toString(var2 & 63, 36);
-		File var6 = new File(this.saveDir, var4);
-		if(!var6.exists()) {
-			if(!this.createIfNecessary) {
-				return null;
-			}
-
-			var6.mkdir();
-		}
-
-		var6 = new File(var6, var5);
-		if(!var6.exists()) {
-			if(!this.createIfNecessary) {
-				return null;
-			}
-
-			var6.mkdir();
-		}
-
-		var6 = new File(var6, var3);
-		return !var6.exists() && !this.createIfNecessary ? null : var6;
-	}
-
-	public Chunk loadChunk(World var1, int var2, int var3) {
-		File var4 = this.chunkFileForXZ(var2, var3);
-		if(var4 != null && var4.exists()) {
+	public ChunkLoader(File saveDir, boolean createIfNecessary) {
+		this.saveDir = saveDir;
+		this.createIfNecessary = createIfNecessary;
+	}
+
+	private File chunkFileForXZ(int x, int z) {
+		String string3 = "c." + Integer.toString(x, 36) + "." + Integer.toString(z, 36) + ".dat";
+		String string4 = Integer.toString(x & 63, 36);
+		String string5 = Integer.toString(z & 63, 36);
+		File file6 = new File(this.saveDir, string4);
+		if(!file6.exists()) {
+			if(!this.createIfNecessary) {
+				return null;
+			}
+
+			file6.mkdir();
+		}
+
+		file6 = new File(file6, string5);
+		if(!file6.exists()) {
+			if(!this.createIfNecessary) {
+				return null;
+			}
+
+			file6.mkdir();
+		}
+
+		file6 = new File(file6, string3);
+		return !file6.exists() && !this.createIfNecessary ? null : file6;
+	}
+
+	public Chunk loadChunk(World world, int x, int z) {
+		File file4 = this.chunkFileForXZ(x, z);
+		if(file4 != null && file4.exists()) {
 			try {
-				FileInputStream var5 = new FileInputStream(var4);
-				NBTTagCompound var6 = CompressedStreamTools.readCompressed(var5);
-				if(!var6.hasKey("Level")) {
-					System.out.println("Chunk file at " + var2 + "," + var3 + " is missing level data, skipping");
-					return null;
-				}
-
-				if(!var6.getCompoundTag("Level").hasKey("Blocks")) {
-					System.out.println("Chunk file at " + var2 + "," + var3 + " is missing block data, skipping");
-					return null;
-				}
-
-				Chunk var7 = loadChunkIntoWorldFromCompound(var1, var6.getCompoundTag("Level"));
-				if(!var7.isAtLocation(var2, var3)) {
-					System.out.println("Chunk file at " + var2 + "," + var3 + " is in the wrong location; relocating. (Expected " + var2 + ", " + var3 + ", got " + var7.xPosition + ", " + var7.zPosition + ")");
-					var6.setInteger("xPos", var2);
-					var6.setInteger("zPos", var3);
-					var7 = loadChunkIntoWorldFromCompound(var1, var6.getCompoundTag("Level"));
-				}
-
-				return var7;
-			} catch (Exception var8) {
-				var8.printStackTrace();
+				FileInputStream fileInputStream5 = new FileInputStream(file4);
+				NBTTagCompound nBTTagCompound6 = CompressedStreamTools.readCompressed(fileInputStream5);
+				if(!nBTTagCompound6.hasKey("Level")) {
+					System.out.println("Chunk file at " + x + "," + z + " is missing level data, skipping");
+					return null;
+				}
+
+				if(!nBTTagCompound6.getCompoundTag("Level").hasKey("Blocks")) {
+					System.out.println("Chunk file at " + x + "," + z + " is missing block data, skipping");
+					return null;
+				}
+
+				Chunk chunk7 = loadChunkIntoWorldFromCompound(world, nBTTagCompound6.getCompoundTag("Level"));
+				if(!chunk7.isAtLocation(x, z)) {
+					System.out.println("Chunk file at " + x + "," + z + " is in the wrong location; relocating. (Expected " + x + ", " + z + ", got " + chunk7.xPosition + ", " + chunk7.zPosition + ")");
+					nBTTagCompound6.setInteger("xPos", x);
+					nBTTagCompound6.setInteger("zPos", z);
+					chunk7 = loadChunkIntoWorldFromCompound(world, nBTTagCompound6.getCompoundTag("Level"));
+				}
+
+				return chunk7;
+			} catch (Exception exception8) {
+				exception8.printStackTrace();
 			}
 		}
 
 		return null;
 	}
 
-	public void saveChunk(World var1, Chunk var2) {
-		var1.checkSessionLock();
-		File var3 = this.chunkFileForXZ(var2.xPosition, var2.zPosition);
-		if(var3.exists()) {
-			var1.sizeOnDisk -= var3.length();
+	public void saveChunk(World world, Chunk chunk) {
+		world.checkSessionLock();
+		File file3 = this.chunkFileForXZ(chunk.xPosition, chunk.zPosition);
+		if(file3.exists()) {
+			world.sizeOnDisk -= file3.length();
 		}
 
 		try {
-			File var4 = new File(this.saveDir, "tmp_chunk.dat");
-			FileOutputStream var5 = new FileOutputStream(var4);
-			NBTTagCompound var6 = new NBTTagCompound();
-			NBTTagCompound var7 = new NBTTagCompound();
-			var6.setTag("Level", var7);
-			this.storeChunkInCompound(var2, var1, var7);
-			CompressedStreamTools.writeCompressed(var6, var5);
-			var5.close();
-			if(var3.exists()) {
-				var3.delete();
-			}
-
-			var4.renameTo(var3);
-			var1.sizeOnDisk += var3.length();
-		} catch (Exception var8) {
-			var8.printStackTrace();
-		}
-
-	}
-
-	public void storeChunkInCompound(Chunk var1, World var2, NBTTagCompound var3) {
-		var2.checkSessionLock();
-		var3.setInteger("xPos", var1.xPosition);
-		var3.setInteger("zPos", var1.zPosition);
-		var3.setLong("LastUpdate", var2.worldTime);
-		var3.setByteArray("Blocks", var1.blocks);
-		var3.setByteArray("Data", var1.data.data);
-		var3.setByteArray("SkyLight", var1.skylightMap.data);
-		var3.setByteArray("BlockLight", var1.blocklightMap.data);
-		var3.setByteArray("HeightMap", var1.heightMap);
-		var3.setBoolean("TerrainPopulated", var1.isTerrainPopulated);
-		var1.hasEntities = false;
-		NBTTagList var4 = new NBTTagList();
-
-		Iterator var6;
-		NBTTagCompound var8;
-		for(int var5 = 0; var5 < var1.entities.length; ++var5) {
-			var6 = var1.entities[var5].iterator();
-
-			while(var6.hasNext()) {
-				Entity var7 = (Entity)var6.next();
-				var1.hasEntities = true;
-				var8 = new NBTTagCompound();
-				if(var7.addEntityID(var8)) {
-					var4.setTag(var8);
-				}
-			}
-		}
-
-		var3.setTag("Entities", var4);
-		NBTTagList var9 = new NBTTagList();
-		var6 = var1.chunkTileEntityMap.values().iterator();
-
-		while(var6.hasNext()) {
-			TileEntity var10 = (TileEntity)var6.next();
-			var8 = new NBTTagCompound();
-			var10.writeToNBT(var8);
-			var9.setTag(var8);
-		}
-
-		var3.setTag("TileEntities", var9);
-	}
-
-	public static Chunk loadChunkIntoWorldFromCompound(World var0, NBTTagCompound var1) {
-		int var2 = var1.getInteger("xPos");
-		int var3 = var1.getInteger("zPos");
-		Chunk var4 = new Chunk(var0, var2, var3);
-		var4.blocks = var1.getByteArray("Blocks");
-		var4.data = new NibbleArray(var1.getByteArray("Data"));
-		var4.skylightMap = new NibbleArray(var1.getByteArray("SkyLight"));
-		var4.blocklightMap = new NibbleArray(var1.getByteArray("BlockLight"));
-		var4.heightMap = var1.getByteArray("HeightMap");
-		var4.isTerrainPopulated = var1.getBoolean("TerrainPopulated");
-		if(!var4.data.isValid()) {
-			var4.data = new NibbleArray(var4.blocks.length);
-		}
-
-		if(var4.heightMap == null || !var4.skylightMap.isValid()) {
-			var4.heightMap = new byte[256];
-			var4.skylightMap = new NibbleArray(var4.blocks.length);
-			var4.generateSkylightMap();
-		}
-
-		if(!var4.blocklightMap.isValid()) {
-			var4.blocklightMap = new NibbleArray(var4.blocks.length);
-			var4.doNothing();
-		}
-
-		NBTTagList var5 = var1.getTagList("Entities");
-		if(var5 != null) {
-			for(int var6 = 0; var6 < var5.tagCount(); ++var6) {
-				NBTTagCompound var7 = (NBTTagCompound)var5.tagAt(var6);
-				Entity var8 = EntityList.createEntityFromNBT(var7, var0);
-				var4.hasEntities = true;
-				if(var8 != null) {
-					var4.addEntity(var8);
-				}
-			}
-		}
-
-		NBTTagList var10 = var1.getTagList("TileEntities");
-		if(var10 != null) {
-			for(int var11 = 0; var11 < var10.tagCount(); ++var11) {
-				NBTTagCompound var12 = (NBTTagCompound)var10.tagAt(var11);
-				TileEntity var9 = TileEntity.createAndLoadEntity(var12);
-				if(var9 != null) {
-					var4.addTileEntity(var9);
-				}
-			}
-		}
-
-		return var4;
+			File file4 = new File(this.saveDir, "tmp_chunk.dat");
+			FileOutputStream fileOutputStream5 = new FileOutputStream(file4);
+			NBTTagCompound nBTTagCompound6 = new NBTTagCompound();
+			NBTTagCompound nBTTagCompound7 = new NBTTagCompound();
+			nBTTagCompound6.setTag("Level", nBTTagCompound7);
+			this.storeChunkInCompound(chunk, world, nBTTagCompound7);
+			CompressedStreamTools.writeCompressed(nBTTagCompound6, fileOutputStream5);
+			fileOutputStream5.close();
+			if(file3.exists()) {
+				file3.delete();
+			}
+
+			file4.renameTo(file3);
+			world.sizeOnDisk += file3.length();
+		} catch (Exception exception8) {
+			exception8.printStackTrace();
+		}
+
+	}
+
+	public void storeChunkInCompound(Chunk chunk, World world, NBTTagCompound nbttagcompound) {
+		world.checkSessionLock();
+		nbttagcompound.setInteger("xPos", chunk.xPosition);
+		nbttagcompound.setInteger("zPos", chunk.zPosition);
+		nbttagcompound.setLong("LastUpdate", world.worldTime);
+		nbttagcompound.setByteArray("Blocks", chunk.blocks);
+		nbttagcompound.setByteArray("Data", chunk.data.data);
+		nbttagcompound.setByteArray("SkyLight", chunk.skylightMap.data);
+		nbttagcompound.setByteArray("BlockLight", chunk.blocklightMap.data);
+		nbttagcompound.setByteArray("HeightMap", chunk.heightMap);
+		nbttagcompound.setBoolean("TerrainPopulated", chunk.isTerrainPopulated);
+		chunk.hasEntities = false;
+		NBTTagList nBTTagList4 = new NBTTagList();
+
+		Iterator iterator5;
+		NBTTagCompound nBTTagCompound6;
+		for(int i7 = 0; i7 < chunk.entities.length; ++i7) {
+			iterator5 = chunk.entities[i7].iterator();
+
+			while(iterator5.hasNext()) {
+				Entity entity8 = (Entity)iterator5.next();
+				chunk.hasEntities = true;
+				nBTTagCompound6 = new NBTTagCompound();
+				if(entity8.addEntityID(nBTTagCompound6)) {
+					nBTTagList4.setTag(nBTTagCompound6);
+				}
+			}
+		}
+
+		nbttagcompound.setTag("Entities", nBTTagList4);
+		NBTTagList nBTTagList9 = new NBTTagList();
+		iterator5 = chunk.chunkTileEntityMap.values().iterator();
+
+		while(iterator5.hasNext()) {
+			TileEntity tileEntity10 = (TileEntity)iterator5.next();
+			nBTTagCompound6 = new NBTTagCompound();
+			tileEntity10.writeToNBT(nBTTagCompound6);
+			nBTTagList9.setTag(nBTTagCompound6);
+		}
+
+		nbttagcompound.setTag("TileEntities", nBTTagList9);
+	}
+
+	public static Chunk loadChunkIntoWorldFromCompound(World world, NBTTagCompound nbttagcompound) {
+		int i2 = nbttagcompound.getInteger("xPos");
+		int i3 = nbttagcompound.getInteger("zPos");
+		Chunk chunk4 = new Chunk(world, i2, i3);
+		chunk4.blocks = nbttagcompound.getByteArray("Blocks");
+		chunk4.data = new NibbleArray(nbttagcompound.getByteArray("Data"));
+		chunk4.skylightMap = new NibbleArray(nbttagcompound.getByteArray("SkyLight"));
+		chunk4.blocklightMap = new NibbleArray(nbttagcompound.getByteArray("BlockLight"));
+		chunk4.heightMap = nbttagcompound.getByteArray("HeightMap");
+		chunk4.isTerrainPopulated = nbttagcompound.getBoolean("TerrainPopulated");
+		if(!chunk4.data.isValid()) {
+			chunk4.data = new NibbleArray(chunk4.blocks.length);
+		}
+
+		if(chunk4.heightMap == null || !chunk4.skylightMap.isValid()) {
+			chunk4.heightMap = new byte[256];
+			chunk4.skylightMap = new NibbleArray(chunk4.blocks.length);
+			chunk4.generateSkylightMap();
+		}
+
+		if(!chunk4.blocklightMap.isValid()) {
+			chunk4.blocklightMap = new NibbleArray(chunk4.blocks.length);
+			chunk4.doNothing();
+		}
+
+		NBTTagList nBTTagList5 = nbttagcompound.getTagList("Entities");
+		if(nBTTagList5 != null) {
+			for(int i6 = 0; i6 < nBTTagList5.tagCount(); ++i6) {
+				NBTTagCompound nBTTagCompound7 = (NBTTagCompound)nBTTagList5.tagAt(i6);
+				Entity entity8 = EntityList.createEntityFromNBT(nBTTagCompound7, world);
+				chunk4.hasEntities = true;
+				if(entity8 != null) {
+					chunk4.addEntity(entity8);
+				}
+			}
+		}
+
+		NBTTagList nBTTagList10 = nbttagcompound.getTagList("TileEntities");
+		if(nBTTagList10 != null) {
+			for(int i11 = 0; i11 < nBTTagList10.tagCount(); ++i11) {
+				NBTTagCompound nBTTagCompound12 = (NBTTagCompound)nBTTagList10.tagAt(i11);
+				TileEntity tileEntity9 = TileEntity.createAndLoadEntity(nBTTagCompound12);
+				if(tileEntity9 != null) {
+					chunk4.addTileEntity(tileEntity9);
+				}
+			}
+		}
+
+		return chunk4;
 	}
 
 	public void chunkTick() {
@@ -201,6 +201,6 @@
 	public void saveExtraData() {
 	}
 
-	public void saveExtraChunkData(World var1, Chunk var2) {
+	public void saveExtraChunkData(World world, Chunk chunk) {
 	}
 }
--- /dev/null
+++ net/minecraft/src/EnumWorldGenerator.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+public enum EnumWorldGenerator {
+	SURFACE,
+	UNDERGROUND,
+	LOW_RIVER;
+    private static final /* synthetic */ EnumWorldGenerator[] field_8604_668M44747yut2BPLmVAWRJQZdNo8o5IF8WTHgELF708qQJ8kzyFX6608A5M6;
+
+	public static EnumWorldGenerator[] func_8602_1WZ23w5Eo7xzIwM5p9j37UQow8g6H96cXiBpHpfbU1ZOgff3q9gqstvGaA56() {
+		return (EnumWorldGenerator[])field_8604_668M44747yut2BPLmVAWRJQZdNo8o5IF8WTHgELF708qQJ8kzyFX6608A5M6.clone();
+	}
+
+	public static EnumWorldGenerator func_8600_4l1LH2N0CgB6C4NhM8jmRyphphH8pV341zcuZ8NavIHi3tYycF6y6th94nB3(String string) {
+		return (EnumWorldGenerator)Enum.valueOf(EnumWorldGenerator.class, string);
+	}
+
+	private static EnumWorldGenerator[] func_8601_1BSarcv0kX3P9t1kPF6202QIF9e71sZGT40CXvBZMcDNgbkrjTV351aCJ4hz() {
+		return new EnumWorldGenerator[]{SURFACE, UNDERGROUND, LOW_RIVER};
+	}
+
+    static {
+        field_8604_668M44747yut2BPLmVAWRJQZdNo8o5IF8WTHgELF708qQJ8kzyFX6608A5M6 = EnumWorldGenerator.func_8601_1BSarcv0kX3P9t1kPF6202QIF9e71sZGT40CXvBZMcDNgbkrjTV351aCJ4hz();
+    }
+}
--- net/minecraft/src/BlockSnowBlock.java
+++ net/minecraft/src/BlockSnowBlock.java
@@ -3,23 +3,23 @@
 import java.util.Random;
 
 public class BlockSnowBlock extends Block {
-	protected BlockSnowBlock(int var1, int var2) {
-		super(var1, var2, Material.craftedSnow);
+	protected BlockSnowBlock(int id, int blockIndex) {
+		super(id, blockIndex, Material.craftedSnow);
 		this.setTickOnLoad(true);
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Item.snowball.shiftedIndex;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 4;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getSavedLightValue(EnumSkyBlock.Block, var2, var3, var4) > 11) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(world.getSavedLightValue(EnumSkyBlock.Block, x, y, z) > 11) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
--- net/minecraft/src/BlockStep.java
+++ net/minecraft/src/BlockStep.java
@@ -5,51 +5,57 @@
 public class BlockStep extends Block {
 	private boolean blockType;
 
-	public BlockStep(int var1, boolean var2) {
-		super(var1, 6, Material.rock);
-		this.blockType = var2;
-		if(!var2) {
+	public BlockStep(int id, int blockType, boolean boolean3) {
+		super(id, blockType, Material.rock);
+		this.blockType = boolean3;
+		if(!boolean3) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
 		}
 
 		this.setLightOpacity(255);
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 <= 1 ? 6 : 5;
+	public int getBlockTextureFromSide(int side) {
+		return side <= 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
 	}
 
 	public boolean isOpaqueCube() {
 		return this.blockType;
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
 		if(this == Block.stairSingle) {
+			;
 		}
+
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
+	public void onBlockAdded(World world, int x, int y, int z) {
 		if(this != Block.stairSingle) {
-			super.onBlockAdded(var1, var2, var3, var4);
+			super.onBlockAdded(world, x, y, z);
 		}
 
-		int var5 = var1.getBlockId(var2, var3 - 1, var4);
-		if(var5 == stairSingle.blockID) {
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-			var1.setBlockWithNotify(var2, var3 - 1, var4, Block.stairDouble.blockID);
+		int i5 = world.getBlockId(x, y - 1, z);
+		if(i5 == stairSingle.blockID) {
+			world.setBlockWithNotify(x, y, z, 0);
+			world.setBlockWithNotify(x, y - 1, z, Block.stairDouble.blockID);
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Block.stairSingle.blockID;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+	public boolean renderAsNormalBlock() {
+		return this.blockType;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
 		if(this != Block.stairSingle) {
-			super.shouldSideBeRendered(var1, var2, var3, var4, var5);
+			super.shouldSideBeRendered(blockAccess, x, y, z, side);
 		}
 
-		return var5 == 1 ? true : (!super.shouldSideBeRendered(var1, var2, var3, var4, var5) ? false : (var5 == 0 ? true : var1.getBlockId(var2, var3, var4) != this.blockID));
+		return side == 1 ? true : (!super.shouldSideBeRendered(blockAccess, x, y, z, side) ? false : (side == 0 ? true : blockAccess.getBlockId(x, y, z) != this.blockID));
 	}
 }
--- net/minecraft/src/MCHashTable2.java
+++ net/minecraft/src/MCHashTable2.java
@@ -1,128 +1,133 @@
 package net.minecraft.src;
 
+import java.util.Objects;
+
 public class MCHashTable2 {
 	private transient MCHashEntry2[] slots = new MCHashEntry2[16];
 	private transient int count;
 	private int threshold = 12;
-	private final float growFactor = 12.0F / 16.0F;
+	private final float growFactor = 0.75F;
 	private transient volatile int versionStamp;
 
-	private static int computeHash(long var0) {
-		return computeHash((int)(var0 ^ var0 >>> 32));
-	}
-
-	private static int computeHash(int var0) {
-		var0 ^= var0 >>> 20 ^ var0 >>> 12;
-		return var0 ^ var0 >>> 7 ^ var0 >>> 4;
-	}
-
-	private static int getSlotIndex(int var0, int var1) {
-		return var0 & var1 - 1;
-	}
-
-	public Object lookup(long var1) {
-		int var3 = computeHash(var1);
-
-		for(MCHashEntry2 var4 = this.slots[getSlotIndex(var3, this.slots.length)]; var4 != null; var4 = var4.nextEntry) {
-			if(var4.hashEntry == var1) {
-				return var4.valueEntry;
+	private static int computeHash(long hash) {
+		return computeHash((int)(hash ^ hash >>> 32));
+	}
+
+	private static int computeHash(int integer) {
+		integer ^= integer >>> 20 ^ integer >>> 12;
+		return integer ^ integer >>> 7 ^ integer >>> 4;
+	}
+
+	private static int getSlotIndex(int integer1, int integer2) {
+		return integer1 & integer2 - 1;
+	}
+
+	public Object lookup(long long1) {
+		int i3 = computeHash(long1);
+
+		for(MCHashEntry2 mCHashEntry24 = this.slots[getSlotIndex(i3, this.slots.length)]; mCHashEntry24 != null; mCHashEntry24 = mCHashEntry24.nextEntry) {
+			if(mCHashEntry24.hashEntry == long1) {
+				return mCHashEntry24.valueEntry;
 			}
 		}
 
 		return null;
 	}
 
-	public void addKey(long var1, Object var3) {
-		int var4 = computeHash(var1);
-		int var5 = getSlotIndex(var4, this.slots.length);
+	public void addKey(long long1, Object object) {
+		int i4 = computeHash(long1);
+		int i5 = getSlotIndex(i4, this.slots.length);
 
-		for(MCHashEntry2 var6 = this.slots[var5]; var6 != null; var6 = var6.nextEntry) {
-			if(var6.hashEntry == var1) {
-				var6.valueEntry = var3;
+		for(MCHashEntry2 mCHashEntry26 = this.slots[i5]; mCHashEntry26 != null; mCHashEntry26 = mCHashEntry26.nextEntry) {
+			if(mCHashEntry26.hashEntry == long1) {
+				mCHashEntry26.valueEntry = object;
 			}
 		}
 
 		++this.versionStamp;
-		this.insert(var4, var1, var3, var5);
+		this.insert(i4, long1, object, i5);
 	}
 
-	private void grow(int var1) {
-		MCHashEntry2[] var2 = this.slots;
-		int var3 = var2.length;
-		if(var3 == 1073741824) {
+	private void grow(int integer) {
+		MCHashEntry2[] mCHashEntry22 = this.slots;
+		int i3 = mCHashEntry22.length;
+		if(i3 == 1073741824) {
 			this.threshold = Integer.MAX_VALUE;
 		} else {
-			MCHashEntry2[] var4 = new MCHashEntry2[var1];
-			this.copyTo(var4);
-			this.slots = var4;
-			this.threshold = (int)((float)var1 * this.growFactor);
+			MCHashEntry2[] mCHashEntry24 = new MCHashEntry2[integer];
+			this.copyTo(mCHashEntry24);
+			this.slots = mCHashEntry24;
+			float f10001 = (float)integer;
+			Objects.requireNonNull(this);
+			this.threshold = (int)(f10001 * 0.75F);
 		}
+
 	}
 
-	private void copyTo(MCHashEntry2[] var1) {
-		MCHashEntry2[] var2 = this.slots;
-		int var3 = var1.length;
-
-		for(int var4 = 0; var4 < var2.length; ++var4) {
-			MCHashEntry2 var5 = var2[var4];
-			if(var5 != null) {
-				var2[var4] = null;
-
-				MCHashEntry2 var6;
+	private void copyTo(MCHashEntry2[] arr) {
+		MCHashEntry2[] mCHashEntry22 = this.slots;
+		int i3 = arr.length;
+
+		for(int i4 = 0; i4 < mCHashEntry22.length; ++i4) {
+			MCHashEntry2 mCHashEntry25 = mCHashEntry22[i4];
+			if(mCHashEntry25 != null) {
+				mCHashEntry22[i4] = null;
+
+				MCHashEntry2 mCHashEntry26;
 				do {
-					var6 = var5.nextEntry;
-					int var7 = getSlotIndex(var5.slotHash, var3);
-					var5.nextEntry = var1[var7];
-					var1[var7] = var5;
-					var5 = var6;
-				} while(var6 != null);
+					mCHashEntry26 = mCHashEntry25.nextEntry;
+					int i7 = getSlotIndex(mCHashEntry25.slotHash, i3);
+					mCHashEntry25.nextEntry = arr[i7];
+					arr[i7] = mCHashEntry25;
+					mCHashEntry25 = mCHashEntry26;
+				} while(mCHashEntry26 != null);
 			}
 		}
 
 	}
 
-	public Object removeObject(long var1) {
-		MCHashEntry2 var3 = this.removeEntry(var1);
-		return var3 == null ? null : var3.valueEntry;
+	public Object removeObject(long long1) {
+		MCHashEntry2 mCHashEntry23 = this.func_8526_6FxbrYXu147Ao17NQY66Kire6C4Edkqiv0PsM7CBCvOkZ8VS28MlF85j7E0J(long1);
+		return mCHashEntry23 == null ? null : mCHashEntry23.valueEntry;
 	}
 
-	final MCHashEntry2 removeEntry(long var1) {
-		int var3 = computeHash(var1);
-		int var4 = getSlotIndex(var3, this.slots.length);
-		MCHashEntry2 var5 = this.slots[var4];
+	final MCHashEntry2 func_8526_6FxbrYXu147Ao17NQY66Kire6C4Edkqiv0PsM7CBCvOkZ8VS28MlF85j7E0J(long long1) {
+		int i3 = computeHash(long1);
+		int i4 = getSlotIndex(i3, this.slots.length);
+		MCHashEntry2 mCHashEntry25 = this.slots[i4];
 
-		MCHashEntry2 var6;
-		MCHashEntry2 var7;
-		for(var6 = var5; var6 != null; var6 = var7) {
-			var7 = var6.nextEntry;
-			if(var6.hashEntry == var1) {
+		MCHashEntry2 mCHashEntry26;
+		MCHashEntry2 mCHashEntry27;
+		for(mCHashEntry26 = mCHashEntry25; mCHashEntry26 != null; mCHashEntry26 = mCHashEntry27) {
+			mCHashEntry27 = mCHashEntry26.nextEntry;
+			if(mCHashEntry26.hashEntry == long1) {
 				++this.versionStamp;
 				--this.count;
-				if(var5 == var6) {
-					this.slots[var4] = var7;
+				if(mCHashEntry25 == mCHashEntry26) {
+					this.slots[i4] = mCHashEntry27;
 				} else {
-					var5.nextEntry = var7;
+					mCHashEntry25.nextEntry = mCHashEntry27;
 				}
 
-				return var6;
+				return mCHashEntry26;
 			}
 
-			var5 = var6;
+			mCHashEntry25 = mCHashEntry26;
 		}
 
-		return var6;
+		return mCHashEntry26;
 	}
 
-	private void insert(int var1, long var2, Object var4, int var5) {
-		MCHashEntry2 var6 = this.slots[var5];
-		this.slots[var5] = new MCHashEntry2(var1, var2, var4, var6);
+	private void insert(int integer1, long long2, Object object, int integer4) {
+		MCHashEntry2 mCHashEntry26 = this.slots[integer4];
+		this.slots[integer4] = new MCHashEntry2(integer1, long2, object, mCHashEntry26);
 		if(this.count++ >= this.threshold) {
 			this.grow(2 * this.slots.length);
 		}
 
 	}
 
-	static int getHash(long var0) {
-		return computeHash(var0);
+	static int func_8530_1eeMyE1IcVWnKwM9A0z9L8E0O9I96zS5oH9Kj08F52w5fB3vO76OX1JRNT6I(long long1) {
+		return computeHash(long1);
 	}
 }
--- net/minecraft/src/EntitySkeleton.java
+++ net/minecraft/src/EntitySkeleton.java
@@ -1,9 +1,8 @@
 package net.minecraft.src;
 
 public class EntitySkeleton extends EntityMob {
-	public EntitySkeleton(World var1) {
-		super(var1);
-		this.texture = "/mob/skeleton.png";
+	public EntitySkeleton(World world) {
+		super(world);
 	}
 
 	protected String getLivingSound() {
@@ -20,8 +19,8 @@
 
 	public void onLivingUpdate() {
 		if(this.worldObj.isDaytime()) {
-			float var1 = this.getBrightness(1.0F);
-			if(var1 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) && this.rand.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F) {
+			float f1 = this.getBrightness(1.0F);
+			if(f1 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) && this.rand.nextFloat() * 30.0F < (f1 - 0.4F) * 2.0F) {
 				this.fire = 300;
 			}
 		}
@@ -29,33 +28,33 @@
 		super.onLivingUpdate();
 	}
 
-	protected void attackEntity(Entity var1, float var2) {
-		if(var2 < 10.0F) {
-			double var3 = var1.posX - this.posX;
-			double var5 = var1.posZ - this.posZ;
+	protected void attackEntity(Entity entity, float damage) {
+		if(damage < 10.0F) {
+			double d3 = entity.posX - this.posX;
+			double d5 = entity.posZ - this.posZ;
 			if(this.attackTime == 0) {
-				EntityArrow var7 = new EntityArrow(this.worldObj, this);
-				var7.posY += (double)1.4F;
-				double var8 = var1.posY - (double)0.2F - var7.posY;
-				float var10 = MathHelper.sqrt_double(var3 * var3 + var5 * var5) * 0.2F;
+				EntityArrow entityArrow7 = new EntityArrow(this.worldObj, this);
+				++entityArrow7.posY;
+				double d8 = entity.posY - (double)0.2F - entityArrow7.posY;
+				float f10 = MathHelper.sqrt_double(d3 * d3 + d5 * d5) * 0.2F;
 				this.worldObj.playSoundAtEntity(this, "random.bow", 1.0F, 1.0F / (this.rand.nextFloat() * 0.4F + 0.8F));
-				this.worldObj.spawnEntityInWorld(var7);
-				var7.setArrowHeading(var3, var8 + (double)var10, var5, 0.6F, 12.0F);
+				this.worldObj.spawnEntityInWorld(entityArrow7);
+				entityArrow7.setArrowHeading(d3, d8 + (double)f10, d5, 0.6F, 12.0F);
 				this.attackTime = 30;
 			}
 
-			this.rotationYaw = (float)(Math.atan2(var5, var3) * 180.0D / (double)((float)Math.PI)) - 90.0F;
+			this.rotationYaw = (float)(Math.atan2(d5, d3) * 180.0D / (double)(float)Math.PI) - 90.0F;
 			this.hasAttacked = true;
 		}
 
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
 	}
 
 	protected int getDropItemId() {
--- /dev/null
+++ net/minecraft/src/TileEntityFreezer.java
@@ -1,0 +1,33 @@
+package net.minecraft.src;
+
+public class TileEntityFreezer extends TileEntity implements IInventory {
+	private ItemStack[] field_6812_8NquR7LUglvfW3XtIv2IG74k689pF1sIv5je1v2j7Cm71cj0VpYTsu9kqYEw = new ItemStack[3];
+	private int field_6811_7TbNhFROb50e4xn6YSZnl5c7iDGd54rVptThfnx0g68hl9I4X1h95m0d331m = 0;
+	private int field_6815_723HLnhf5d36H9BX65BaVnN64Nj1f4gG3c200Bv8tj0pVuL8wNCetW5VT1j1 = 0;
+	private int field_6814_3ty4PW18Xe9vtHD079vlc9i4h28422yN5TUL243bH890CjjcJKJAP601V13j = 0;
+	private boolean field_6813_9KcXHC0X9okGFlNR3mdRaKWY7a53Y4Ye1AL389dAP8PhcH4c8C5AQOolT639 = false;
+
+	public int getSizeInventory() {
+		return this.field_6812_8NquR7LUglvfW3XtIv2IG74k689pF1sIv5je1v2j7Cm71cj0VpYTsu9kqYEw.length;
+	}
+
+	public ItemStack getStackInSlot(int slot) {
+		return this.field_6812_8NquR7LUglvfW3XtIv2IG74k689pF1sIv5je1v2j7Cm71cj0VpYTsu9kqYEw[slot];
+	}
+
+	public int func_6809_216wpapW9Jp1E8bg8Dq7HYBTgn7Ow9R16vJe9AA330Pj4GBBYE04n67vaHEk(int integer) {
+		return this.field_6814_3ty4PW18Xe9vtHD079vlc9i4h28422yN5TUL243bH890CjjcJKJAP601V13j * integer / 200;
+	}
+
+	public int func_6810_9BoT4zyf8D53M0X14sKrP7092VENOlhIMuaOYKWGrpEWqNcTWYxtA9AgcLws(int integer) {
+		if(this.field_6815_723HLnhf5d36H9BX65BaVnN64Nj1f4gG3c200Bv8tj0pVuL8wNCetW5VT1j1 == 0) {
+			this.field_6815_723HLnhf5d36H9BX65BaVnN64Nj1f4gG3c200Bv8tj0pVuL8wNCetW5VT1j1 = 200;
+		}
+
+		return this.field_6811_7TbNhFROb50e4xn6YSZnl5c7iDGd54rVptThfnx0g68hl9I4X1h95m0d331m * integer / this.field_6815_723HLnhf5d36H9BX65BaVnN64Nj1f4gG3c200Bv8tj0pVuL8wNCetW5VT1j1;
+	}
+
+	public boolean func_6808_18Wc1PP7MVMLU8EGxZr2WK2d6614a3SIS5vsh8soe7l30pto6KMVibhcU9z2() {
+		return this.field_6811_7TbNhFROb50e4xn6YSZnl5c7iDGd54rVptThfnx0g68hl9I4X1h95m0d331m > 0;
+	}
+}
--- net/minecraft/src/IChunkProvider.java
+++ net/minecraft/src/IChunkProvider.java
@@ -1,13 +1,13 @@
 package net.minecraft.src;
 
 public interface IChunkProvider {
-	boolean chunkExists(int var1, int var2);
-
-	Chunk provideChunk(int var1, int var2);
-
-	void populate(IChunkProvider var1, int var2, int var3);
-
-	boolean saveChunks(boolean var1, IProgressUpdate var2);
+	boolean chunkExists(int i1, int i2);
+
+	Chunk provideChunk(int i1, int i2);
+
+	void populate(IChunkProvider iChunkProvider1, int i2, int i3);
+
+	boolean saveChunks(boolean z1, IProgressUpdate iProgressUpdate2);
 
 	boolean unload100OldestChunks();
 
--- /dev/null
+++ net/minecraft/src/BlockEmptyBookshelf.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockEmptyBookshelf extends Block {
+	public BlockEmptyBookshelf(int integer1, int integer2) {
+		super(integer1, integer2, Material.wood);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side <= 1 ? 127 : this.blockIndexInTexture;
+	}
+
+	public int quantityDropped(Random random) {
+		return 0;
+	}
+}
--- net/minecraft/src/BlockSign.java
+++ net/minecraft/src/BlockSign.java
@@ -6,46 +6,46 @@
 	private Class signEntityClass;
 	private boolean isFreestanding;
 
-	protected BlockSign(int var1, Class var2, boolean var3) {
-		super(var1, Material.wood);
-		this.isFreestanding = var3;
+	protected BlockSign(int id, Class signEntityClass, boolean isFreestanding) {
+		super(id, Material.wood);
+		this.isFreestanding = isFreestanding;
 		this.blockIndexInTexture = 4;
-		this.signEntityClass = var2;
-		float var4 = 0.25F;
-		float var5 = 1.0F;
-		this.setBlockBounds(0.5F - var4, 0.0F, 0.5F - var4, 0.5F + var4, var5, 0.5F + var4);
+		this.signEntityClass = signEntityClass;
+		float f4 = 0.25F;
+		float f5 = 1.0F;
+		this.setBlockBounds(0.5F - f4, 0.0F, 0.5F - f4, 0.5F + f4, f5, 0.5F + f4);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
 		if(!this.isFreestanding) {
-			int var5 = var1.getBlockMetadata(var2, var3, var4);
-			float var6 = 9.0F / 32.0F;
-			float var7 = 25.0F / 32.0F;
-			float var8 = 0.0F;
-			float var9 = 1.0F;
-			float var10 = 2.0F / 16.0F;
+			int i5 = blockAccess.getBlockMetadata(x, y, z);
+			float f6 = 0.28125F;
+			float f7 = 0.78125F;
+			float f8 = 0.0F;
+			float f9 = 1.0F;
+			float f10 = 0.125F;
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-			if(var5 == 2) {
-				this.setBlockBounds(var8, var6, 1.0F - var10, var9, var7, 1.0F);
-			}
-
-			if(var5 == 3) {
-				this.setBlockBounds(var8, var6, 0.0F, var9, var7, var10);
-			}
-
-			if(var5 == 4) {
-				this.setBlockBounds(1.0F - var10, var6, var8, 1.0F, var7, var9);
-			}
-
-			if(var5 == 5) {
-				this.setBlockBounds(0.0F, var6, var8, var10, var7, var9);
-			}
-
+			if(i5 == 2) {
+				this.setBlockBounds(f8, f6, 1.0F - f10, f9, f7, 1.0F);
+			}
+
+			if(i5 == 3) {
+				this.setBlockBounds(f8, f6, 0.0F, f9, f7, f10);
+			}
+
+			if(i5 == 4) {
+				this.setBlockBounds(1.0F - f10, f6, f8, 1.0F, f7, f9);
+			}
+
+			if(i5 == 5) {
+				this.setBlockBounds(0.0F, f6, f8, f10, f7, f9);
+			}
 		}
+
 	}
 
 	public int getRenderType() {
@@ -59,46 +59,46 @@
 	protected TileEntity getBlockEntity() {
 		try {
 			return (TileEntity)this.signEntityClass.newInstance();
-		} catch (Exception var2) {
-			throw new RuntimeException(var2);
+		} catch (Exception exception2) {
+			throw new RuntimeException(exception2);
 		}
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Item.sign.shiftedIndex;
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		boolean var6 = false;
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		boolean z6 = false;
 		if(this.isFreestanding) {
-			if(!var1.getBlockMaterial(var2, var3 - 1, var4).isSolid()) {
-				var6 = true;
+			if(!world.getBlockMaterial(x, y - 1, z).isSolid()) {
+				z6 = true;
 			}
 		} else {
-			int var7 = var1.getBlockMetadata(var2, var3, var4);
-			var6 = true;
-			if(var7 == 2 && var1.getBlockMaterial(var2, var3, var4 + 1).isSolid()) {
-				var6 = false;
-			}
-
-			if(var7 == 3 && var1.getBlockMaterial(var2, var3, var4 - 1).isSolid()) {
-				var6 = false;
-			}
-
-			if(var7 == 4 && var1.getBlockMaterial(var2 + 1, var3, var4).isSolid()) {
-				var6 = false;
-			}
-
-			if(var7 == 5 && var1.getBlockMaterial(var2 - 1, var3, var4).isSolid()) {
-				var6 = false;
-			}
-		}
-
-		if(var6) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		}
-
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
+			int i7 = world.getBlockMetadata(x, y, z);
+			z6 = true;
+			if(i7 == 2 && world.getBlockMaterial(x, y, z + 1).isSolid()) {
+				z6 = false;
+			}
+
+			if(i7 == 3 && world.getBlockMaterial(x, y, z - 1).isSolid()) {
+				z6 = false;
+			}
+
+			if(i7 == 4 && world.getBlockMaterial(x + 1, y, z).isSolid()) {
+				z6 = false;
+			}
+
+			if(i7 == 5 && world.getBlockMaterial(x - 1, y, z).isSolid()) {
+				z6 = false;
+			}
+		}
+
+		if(z6) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
+		}
+
+		super.onNeighborBlockChange(world, x, y, z, flag);
 	}
 }
--- net/minecraft/src/MovingObjectPosition.java
+++ net/minecraft/src/MovingObjectPosition.java
@@ -9,18 +9,18 @@
 	public Vec3D hitVec;
 	public Entity entityHit;
 
-	public MovingObjectPosition(int var1, int var2, int var3, int var4, Vec3D var5) {
+	public MovingObjectPosition(int blockX, int blockY, int blockZ, int sideHit, Vec3D vector) {
 		this.typeOfHit = 0;
-		this.blockX = var1;
-		this.blockY = var2;
-		this.blockZ = var3;
-		this.sideHit = var4;
-		this.hitVec = Vec3D.createVector(var5.xCoord, var5.yCoord, var5.zCoord);
+		this.blockX = blockX;
+		this.blockY = blockY;
+		this.blockZ = blockZ;
+		this.sideHit = sideHit;
+		this.hitVec = Vec3D.createVector(vector.xCoord, vector.yCoord, vector.zCoord);
 	}
 
-	public MovingObjectPosition(Entity var1) {
+	public MovingObjectPosition(Entity entity) {
 		this.typeOfHit = 1;
-		this.entityHit = var1;
-		this.hitVec = Vec3D.createVector(var1.posX, var1.posY, var1.posZ);
+		this.entityHit = entity;
+		this.hitVec = Vec3D.createVector(entity.posX, entity.posY, entity.posZ);
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenMyconUnknownClass2.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenMyconUnknownClass2 extends WorldGenMyconUnknownClass {
+	public final int field_6117_7WyCLN04Bu1oXOQ6kYF0WY2Z226DC6600d57NWE99Q00t67HIK131xQJ5wKE;
+
+	public WorldGenMyconUnknownClass2(double double1, double double2, EnumWorldGenerator _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE, int integer) {
+		super(double1, double2, _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE);
+		this.field_6117_7WyCLN04Bu1oXOQ6kYF0WY2Z226DC6600d57NWE99Q00t67HIK131xQJ5wKE = integer;
+	}
+
+	public boolean func_6106_89178IPx36Pz8I0tikD07m8tZIpV1sbMp38yAtni7c93aR76eIXb747sm4eZ(Random random, World cv, int integer3, int integer4) {
+		return true;
+	}
+
+	public void func_6105_81hMTC5FoM6v920z1cx6O635T6Awu9Y40ealKHkVig8X477d9SlXh3yS17Y3(Random random) {
+	}
+
+	public int func_6110_142sM02McyR17iadQt66osR8Q21rhzZ9eM76zgU9m4wlfML0dJ2394XB8k38() {
+		return this.field_6117_7WyCLN04Bu1oXOQ6kYF0WY2Z226DC6600d57NWE99Q00t67HIK131xQJ5wKE;
+	}
+}
--- /dev/null
+++ net/minecraft/src/SkinManager.java
@@ -1,0 +1,54 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.util.HashMap;
+
+public class SkinManager {
+	public static SkinManager field_7446_9r4z2maBPOzeIQ41jM97J0sS7rNpO25b195UXkI1F7UjreZ3kMZ31B30P17t = new SkinManager();
+	public HashMap field_7447_5o60KlO1xUVp1Sqi5M3Xl323zQGPwj5kI3zOp7nP6YxUrJv7XCA1pH7U5nza = new HashMap();
+	boolean field_7448_4W6wg4b7pZeB7tEBJ09JO08IAio0MMBOrsVf7o7pGdYaBFEqDYCM48V83Lj5 = false;
+
+	private byte[] func_7444_2XyX45E63yjcT140DFSv0fu1xy86sP4ASYS2MGXuLt775341L029jzLOlIqm(String string) {
+		if(!(new File("./skins/" + string + ".png")).exists()) {
+			return null;
+		} else {
+			try {
+				byte[] b2 = Files.readAllBytes(Paths.get("./skins/" + string + ".png", new String[0]));
+				return b2;
+			} catch (IOException iOException3) {
+				return null;
+			}
+		}
+	}
+
+	public byte[] func_7445_4v4pMf3596FO71g04LS5DR738V0b0e9j59y5wCjSLyqx9Uxd231116vUL4le(String string) {
+		while(string.charAt(0) == 1 || string.charAt(0) == 2) {
+			string = string.substring(1);
+		}
+
+		while(this.field_7448_4W6wg4b7pZeB7tEBJ09JO08IAio0MMBOrsVf7o7pGdYaBFEqDYCM48V83Lj5) {
+			try {
+				Thread.sleep(1L);
+			} catch (InterruptedException interruptedException3) {
+			}
+		}
+
+		this.field_7448_4W6wg4b7pZeB7tEBJ09JO08IAio0MMBOrsVf7o7pGdYaBFEqDYCM48V83Lj5 = true;
+		if(!this.field_7447_5o60KlO1xUVp1Sqi5M3Xl323zQGPwj5kI3zOp7nP6YxUrJv7XCA1pH7U5nza.containsKey(string) || this.field_7447_5o60KlO1xUVp1Sqi5M3Xl323zQGPwj5kI3zOp7nP6YxUrJv7XCA1pH7U5nza.get(string) == null) {
+			byte[] b2 = this.func_7444_2XyX45E63yjcT140DFSv0fu1xy86sP4ASYS2MGXuLt775341L029jzLOlIqm(string);
+			if(this.field_7447_5o60KlO1xUVp1Sqi5M3Xl323zQGPwj5kI3zOp7nP6YxUrJv7XCA1pH7U5nza.containsKey(string)) {
+				this.field_7447_5o60KlO1xUVp1Sqi5M3Xl323zQGPwj5kI3zOp7nP6YxUrJv7XCA1pH7U5nza.remove(string);
+			}
+
+			if(b2 != null) {
+				this.field_7447_5o60KlO1xUVp1Sqi5M3Xl323zQGPwj5kI3zOp7nP6YxUrJv7XCA1pH7U5nza.put(string, b2);
+			}
+		}
+
+		this.field_7448_4W6wg4b7pZeB7tEBJ09JO08IAio0MMBOrsVf7o7pGdYaBFEqDYCM48V83Lj5 = false;
+		return (byte[])this.field_7447_5o60KlO1xUVp1Sqi5M3Xl323zQGPwj5kI3zOp7nP6YxUrJv7XCA1pH7U5nza.get(string);
+	}
+}
--- /dev/null
+++ net/minecraft/src/EnumHouseBig.java
@@ -1,0 +1,30 @@
+package net.minecraft.src;
+
+enum EnumHouseBig {
+	None,
+	Door,
+	PinkGlass,
+	BlueGlass,
+	LimeGlass,
+	BlackGlass,
+	WhiteGlass,
+	Doorless,
+	PlateDecor;
+    private static final /* synthetic */ EnumHouseBig[] field_7884_1VO6nlFFCt8I5a0Oab4C20sI2U9f6qb2VL5m47zbaiADkHu1kn3L4Q56NBb0;
+
+	public static EnumHouseBig[] func_7882_1251mboaHZ4xKHUK0lF5iBBq7NA874yM27ni02aQ712sSVLdgPFB35KJld3u() {
+		return (EnumHouseBig[])field_7884_1VO6nlFFCt8I5a0Oab4C20sI2U9f6qb2VL5m47zbaiADkHu1kn3L4Q56NBb0.clone();
+	}
+
+	public static EnumHouseBig func_7883_8x1a8h7WrR5kUb5Xuxqe5irup5ri88h38fv851TH2C3t9W0A3lk3RU7Tw6LY(String string) {
+		return (EnumHouseBig)Enum.valueOf(EnumHouseBig.class, string);
+	}
+
+	private static EnumHouseBig[] func_7881_9pHWziE85Yn7v1uc42OeB3pd6s8R2aC4D738N3V9eq2678g7Qe5x7vjiqt3q() {
+		return new EnumHouseBig[]{None, Door, PinkGlass, BlueGlass, LimeGlass, BlackGlass, WhiteGlass, Doorless, PlateDecor};
+	}
+
+    static {
+        field_7884_1VO6nlFFCt8I5a0Oab4C20sI2U9f6qb2VL5m47zbaiADkHu1kn3L4Q56NBb0 = EnumHouseBig.func_7881_9pHWziE85Yn7v1uc42OeB3pd6s8R2aC4D738N3V9eq2678g7Qe5x7vjiqt3q();
+    }
+}
--- net/minecraft/src/GuiStatsComponent.java
+++ net/minecraft/src/GuiStatsComponent.java
@@ -16,41 +16,41 @@
 		this.setMinimumSize(new Dimension(256, 196));
 		this.setMaximumSize(new Dimension(256, 196));
 		(new Timer(500, new GuiStatsListener(this))).start();
-		this.setBackground(Color.BLACK);
+		this.setBackground(Color.WHITE);
 	}
 
 	private void update() {
-		long var1 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
+		long j1 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
 		System.gc();
-		this.displayStrings[0] = "Memory use: " + var1 / 1024L / 1024L + " mb (" + Runtime.getRuntime().freeMemory() * 100L / Runtime.getRuntime().maxMemory() + "% free)";
+		this.displayStrings[0] = "Memory use: " + j1 / 1024L / 1024L + " mb (" + Runtime.getRuntime().freeMemory() * 100L / Runtime.getRuntime().maxMemory() + "% free)";
 		this.displayStrings[1] = "Threads: " + NetworkManager.numReadThreads + " + " + NetworkManager.numWriteThreads;
-		this.memoryUse[this.updateCounter++ & 255] = (int)(var1 * 100L / Runtime.getRuntime().maxMemory());
+		this.memoryUse[this.updateCounter++ & 255] = (int)(j1 * 100L / Runtime.getRuntime().maxMemory());
 		this.repaint();
 	}
 
-	public void paint(Graphics var1) {
-		var1.setColor(new Color(16777215));
-		var1.fillRect(0, 0, 256, 192);
+	public void paint(Graphics graphics) {
+		graphics.setColor(new Color(1315860));
+		graphics.fillRect(0, 0, 256, 192);
 
-		int var2;
-		for(var2 = 0; var2 < 256; ++var2) {
-			int var3 = this.memoryUse[var2 + this.updateCounter & 255];
-			var1.setColor(new Color(var3 + 28 << 16));
-			var1.fillRect(var2, 100 - var3, 1, var3);
+		int i2;
+		for(i2 = 0; i2 < 256; ++i2) {
+			int i3 = this.memoryUse[i2 + this.updateCounter & 255];
+			graphics.setColor(new Color(0xFFFFFF - (i3 + 28 << 16)));
+			graphics.fillRect(i2, 100 - i3, 1, i3);
 		}
 
-		var1.setColor(Color.BLACK);
+		graphics.setColor(Color.WHITE);
 
-		for(var2 = 0; var2 < this.displayStrings.length; ++var2) {
-			String var4 = this.displayStrings[var2];
-			if(var4 != null) {
-				var1.drawString(var4, 32, 116 + var2 * 16);
+		for(i2 = 0; i2 < this.displayStrings.length; ++i2) {
+			String string4 = this.displayStrings[i2];
+			if(string4 != null) {
+				graphics.drawString(string4, 32, 116 + i2 * 16);
 			}
 		}
 
 	}
 
-	static void update(GuiStatsComponent var0) {
-		var0.update();
+	static void func_8012_7Vn9PSqf0vcLtc75L59P7r938mcR2Muk507CvdiHHS8fK8i1zVoMbTbUJbQ5(GuiStatsComponent _66vV0DmzJt23om5o241l6rV1u2hO0ABptTaq9aDL8DExPnLwj54s5uLSIDx2nNg144831c1z81YWFWiuywQBGeg8F8pRl) {
+		_66vV0DmzJt23om5o241l6rV1u2hO0ABptTaq9aDL8DExPnLwj54s5uLSIDx2nNg144831c1z81YWFWiuywQBGeg8F8pRl.update();
 	}
 }
--- net/minecraft/src/WorldGenMinable.java
+++ net/minecraft/src/WorldGenMinable.java
@@ -4,38 +4,55 @@
 
 public class WorldGenMinable extends WorldGenerator {
 	private int minableBlockId;
+	private int blockIDBelowY10;
 	private int numberOfBlocks;
 
-	public WorldGenMinable(int var1, int var2) {
-		this.minableBlockId = var1;
-		this.numberOfBlocks = var2;
-	}
-
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		float var6 = var2.nextFloat() * (float)Math.PI;
-		double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var15 = (double)(var4 + var2.nextInt(3) + 2);
-		double var17 = (double)(var4 + var2.nextInt(3) + 2);
-
-		for(int var19 = 0; var19 <= this.numberOfBlocks; ++var19) {
-			double var20 = var7 + (var9 - var7) * (double)var19 / (double)this.numberOfBlocks;
-			double var22 = var15 + (var17 - var15) * (double)var19 / (double)this.numberOfBlocks;
-			double var24 = var11 + (var13 - var11) * (double)var19 / (double)this.numberOfBlocks;
-			double var26 = var2.nextDouble() * (double)this.numberOfBlocks / 16.0D;
-			double var28 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
-			double var30 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
-
-			for(int var32 = (int)(var20 - var28 / 2.0D); var32 <= (int)(var20 + var28 / 2.0D); ++var32) {
-				for(int var33 = (int)(var22 - var30 / 2.0D); var33 <= (int)(var22 + var30 / 2.0D); ++var33) {
-					for(int var34 = (int)(var24 - var28 / 2.0D); var34 <= (int)(var24 + var28 / 2.0D); ++var34) {
-						double var35 = ((double)var32 + 0.5D - var20) / (var28 / 2.0D);
-						double var37 = ((double)var33 + 0.5D - var22) / (var30 / 2.0D);
-						double var39 = ((double)var34 + 0.5D - var24) / (var28 / 2.0D);
-						if(var35 * var35 + var37 * var37 + var39 * var39 < 1.0D && var1.getBlockId(var32, var33, var34) == Block.stone.blockID) {
-							var1.setBlock(var32, var33, var34, this.minableBlockId);
+	public WorldGenMinable(int integer1, int integer2, int integer3) {
+		this(integer1, integer3);
+		this.blockIDBelowY10 = integer2;
+	}
+
+	public WorldGenMinable(int integer1, int integer2) {
+		this.minableBlockId = integer1;
+		this.numberOfBlocks = integer2;
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		float f6 = rand.nextFloat() * (float)Math.PI;
+		double d7 = (double)((float)(x + 8) + MathHelper.sin(f6) * (float)this.numberOfBlocks / 8.0F);
+		double d9 = (double)((float)(x + 8) - MathHelper.sin(f6) * (float)this.numberOfBlocks / 8.0F);
+		double d11 = (double)((float)(z + 8) + MathHelper.cos(f6) * (float)this.numberOfBlocks / 8.0F);
+		double d13 = (double)((float)(z + 8) - MathHelper.cos(f6) * (float)this.numberOfBlocks / 8.0F);
+		double d15 = (double)(y + rand.nextInt(3) + 2);
+		double d17 = (double)(y + rand.nextInt(3) + 2);
+
+		for(int i19 = 0; i19 <= this.numberOfBlocks; ++i19) {
+			double d20 = d7 + (d9 - d7) * (double)i19 / (double)this.numberOfBlocks;
+			double d22 = d15 + (d17 - d15) * (double)i19 / (double)this.numberOfBlocks;
+			double d24 = d11 + (d13 - d11) * (double)i19 / (double)this.numberOfBlocks;
+			double d26 = rand.nextDouble() * (double)this.numberOfBlocks / 16.0D;
+			double d28 = (double)(MathHelper.sin((float)i19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * d26 + 1.0D;
+			double d30 = (double)(MathHelper.sin((float)i19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * d26 + 1.0D;
+
+			for(int i32 = (int)(d20 - d28 / 2.0D); i32 <= (int)(d20 + d28 / 2.0D); ++i32) {
+				for(int i33 = (int)(d22 - d30 / 2.0D); i33 <= (int)(d22 + d30 / 2.0D); ++i33) {
+					for(int i34 = (int)(d24 - d28 / 2.0D); i34 <= (int)(d24 + d28 / 2.0D); ++i34) {
+						double d35 = ((double)i32 + 0.5D - d20) / (d28 / 2.0D);
+						double d37 = ((double)i33 + 0.5D - d22) / (d30 / 2.0D);
+						double d39 = ((double)i34 + 0.5D - d24) / (d28 / 2.0D);
+						if(d35 * d35 + d37 * d37 + d39 * d39 < 1.0D && (world.getBlockId(i32, i33, i34) == Block.stone.blockID || world.getBlockId(i32, i33, i34) == ExtBlocks.LowStone.blockID)) {
+							world.setBlock(i32, i33, i34, i33 <= 10 ? this.blockIDBelowY10 : this.minableBlockId);
+							if(i33 <= 10) {
+								for(int i41 = -1; i41 <= 1; i41 += 2) {
+									for(int i42 = -1; i42 <= 1; i42 += 2) {
+										for(int i43 = -1; i43 <= 1; i43 += 2) {
+											if(world.getBlockId(i32 + i41, i33 + i42, i34 + i43) == Block.stone.blockID) {
+												world.setBlock(i32 + i41, i33 + i42, i34 + i43, ExtBlocks.LowStone.blockID);
+											}
+										}
+									}
+								}
+							}
 						}
 					}
 				}
--- /dev/null
+++ net/minecraft/src/WorldGenHouseSmallUnknownClass5.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.List;
+
+class WorldGenHouseSmallUnknownClass5 {
+	public int field_8020_66h60M61j67HnpM3qFHNo2GN62MmhApUr2QOW9cTg435X74vh34j6qOJ2tgt;
+	public int field_8019_98sy7L45ouSWLfH1W247dUJ16ffQtU6ZV4q8vk547CKk5Jf3ppQZtrc42RbH;
+	public int field_8015_5wTB8HwGbAxDeZ1JBLH9G2hdow6R604Z7h6Ejwe1G26jzQmTP5ci8lbx4TbO;
+	public int field_8018_439Ebv9ru7MFNvB67DM5CvpM67n9ebUShsh7xoObuxbKXo49i2ZYEKWuiOmA;
+	public int field_8017_3W4n2bi787BZ73kcxketEq3mErN6M23m069LdrN68Om2V0XQk7AYJKI6J5lf;
+	public List field_8016_00S9ETnTDJql3GiE4tTM9T26ojtqC5jUm718I14CFlS94pq1iq83rKQD83TS = new ArrayList();
+
+	public WorldGenHouseSmallUnknownClass5(int integer1, int integer2, int integer3, int integer4, int integer5) {
+		this.field_8020_66h60M61j67HnpM3qFHNo2GN62MmhApUr2QOW9cTg435X74vh34j6qOJ2tgt = integer1;
+		this.field_8019_98sy7L45ouSWLfH1W247dUJ16ffQtU6ZV4q8vk547CKk5Jf3ppQZtrc42RbH = integer2;
+		this.field_8015_5wTB8HwGbAxDeZ1JBLH9G2hdow6R604Z7h6Ejwe1G26jzQmTP5ci8lbx4TbO = integer3;
+		this.field_8018_439Ebv9ru7MFNvB67DM5CvpM67n9ebUShsh7xoObuxbKXo49i2ZYEKWuiOmA = integer4;
+		this.field_8017_3W4n2bi787BZ73kcxketEq3mErN6M23m069LdrN68Om2V0XQk7AYJKI6J5lf = integer5;
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenHouseBigExterior.java
@@ -1,0 +1,144 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenHouseBigExterior implements IHouseBig {
+	private final NoiseGeneratorPerlin field_6594_6fmFT6Xp5M9aq6lPYlD57N3OQB115QH9PxxwU18S116Zo7q059c4LhbPbHx0;
+
+	public WorldGenHouseBigExterior(Random random) {
+		this.field_6594_6fmFT6Xp5M9aq6lPYlD57N3OQB115QH9PxxwU18S116Zo7q059c4LhbPbHx0 = new NoiseGeneratorPerlin(random);
+	}
+
+	public float func_6572_4MbDiJtu6trpae74IapUd09LfEVt0Aru1bX9SAE845fOF7B0JmYIQrXHuHxC() {
+		return 1.1F;
+	}
+
+	private boolean func_6593_87XjL6ckAQEpzIvrJVWKc8j7OG3DYRlj3v4cA8R28reTMqKtiUskRBd2Jiwb(World cv, int integer2, int integer3, int integer4) {
+		int i5 = cv.getBlockId(integer2, integer3, integer4);
+		return i5 == Block.grass.blockID || i5 == Block.sand.blockID;
+	}
+
+	private void func_6592_9qBuKZxpCzwJ2mCsyMor2VyXF6K974kkseqfc8vwBievfS7q4c0qyUC6n1Mi(World cv, Block io, int integer3, int integer4) {
+		for(int i5 = 128; i5 > 40; --i5) {
+			if(this.func_6593_87XjL6ckAQEpzIvrJVWKc8j7OG3DYRlj3v4cA8R28reTMqKtiUskRBd2Jiwb(cv, integer3, i5, integer4)) {
+				cv.setBlock(integer3, i5, integer4, io.blockID);
+				if(cv.getBlockId(integer3, i5 + 1, integer4) == ExtBlocks.Grass.blockID) {
+					cv.setBlock(integer3, i5 + 1, integer4, 0);
+				}
+
+				return;
+			}
+		}
+
+	}
+
+	public void func_6573_9s8xyF629674iK59W75jxL4IfegOZaukdAavse5BpG78PPgBZ5sG433o01xa(World cv, int integer2, int integer3, WorldGenHouseBigInterior gx) {
+		if(!cv.sandCovered) {
+			int[] i5 = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
+			int i6;
+			int i7;
+			if(gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2 + 1, integer3)) {
+				for(i6 = 9; i6 <= 15; ++i6) {
+					for(i7 = 4; i7 <= 11; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			}
+
+			if(gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2 - 1, integer3)) {
+				for(i6 = 0; i6 <= 6; ++i6) {
+					for(i7 = 4; i7 <= 11; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			}
+
+			if(gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2, integer3 + 1)) {
+				for(i6 = 4; i6 <= 11; ++i6) {
+					for(i7 = 9; i7 <= 15; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			}
+
+			if(gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2, integer3 - 1)) {
+				for(i6 = 4; i6 <= 11; ++i6) {
+					for(i7 = 0; i7 <= 6; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			}
+
+			if(gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2 + 1, integer3) && gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2 + 1, integer3 + 1) && gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2, integer3 + 1)) {
+				for(i6 = 12; i6 <= 15; ++i6) {
+					for(i7 = 12; i7 <= 15; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			} else if(gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2 + 1, integer3) && gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2, integer3 + 1)) {
+				i5[204] = 1;
+
+				for(i6 = 1; i6 <= 2; ++i6) {
+					i5[12 + i6 + 192] = 1;
+					i5[12 + (12 + i6) * 16] = 1;
+				}
+			}
+
+			if(gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2 - 1, integer3) && gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2 - 1, integer3 - 1) && gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2, integer3 - 1)) {
+				for(i6 = 0; i6 <= 3; ++i6) {
+					for(i7 = 0; i7 <= 3; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			} else if(gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2 - 1, integer3) && gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2, integer3 - 1)) {
+				i5[51] = 1;
+
+				for(i6 = 1; i6 <= 2; ++i6) {
+					i5[3 - i6 + 48] = 1;
+					i5[3 + (3 - i6) * 16] = 1;
+				}
+			}
+
+			if(gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2 - 1, integer3) && gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2 - 1, integer3 + 1) && gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2, integer3 + 1)) {
+				for(i6 = 0; i6 <= 3; ++i6) {
+					for(i7 = 12; i7 <= 15; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			} else if(gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2 - 1, integer3) && gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2, integer3 + 1)) {
+				i5[195] = 1;
+
+				for(i6 = 1; i6 <= 2; ++i6) {
+					i5[3 - i6 + 192] = 1;
+					i5[3 + (12 + i6) * 16] = 1;
+				}
+			}
+
+			if(gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2 + 1, integer3) && gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2 + 1, integer3 - 1) && gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2, integer3 - 1)) {
+				for(i6 = 12; i6 <= 15; ++i6) {
+					for(i7 = 0; i7 <= 3; ++i7) {
+						i5[i6 + i7 * 16] = 1;
+					}
+				}
+			} else if(gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2 + 1, integer3) && gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBigExterior.class, integer2, integer3 - 1)) {
+				i5[60] = 1;
+
+				for(i6 = 1; i6 <= 2; ++i6) {
+					i5[12 + i6 + 48] = 1;
+					i5[12 + (3 - i6) * 16] = 1;
+				}
+			}
+
+			for(i6 = 0; i6 < 16; ++i6) {
+				for(i7 = 0; i7 < 16; ++i7) {
+					if(i5[i6 + i7 * 16] == 1) {
+						int i8 = integer2 * 16 + i6;
+						int i9 = integer3 * 16 + i7;
+						this.func_6592_9qBuKZxpCzwJ2mCsyMor2VyXF6K974kkseqfc8vwBievfS7q4c0qyUC6n1Mi(cv, ExtBlocks.GrassPathway, i8, i9);
+					}
+				}
+			}
+
+		}
+	}
+}
--- net/minecraft/src/ItemRedstone.java
+++ net/minecraft/src/ItemRedstone.java
@@ -1,41 +1,41 @@
 package net.minecraft.src;
 
 public class ItemRedstone extends Item {
-	public ItemRedstone(int var1) {
-		super(var1);
+	public ItemRedstone(int itemID) {
+		super(itemID);
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		if(var7 == 0) {
-			--var5;
-		}
-
-		if(var7 == 1) {
-			++var5;
-		}
-
-		if(var7 == 2) {
-			--var6;
-		}
-
-		if(var7 == 3) {
-			++var6;
-		}
-
-		if(var7 == 4) {
-			--var4;
-		}
-
-		if(var7 == 5) {
-			++var4;
-		}
-
-		if(var3.getBlockId(var4, var5, var6) != 0) {
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		if(side == 0) {
+			--y;
+		}
+
+		if(side == 1) {
+			++y;
+		}
+
+		if(side == 2) {
+			--z;
+		}
+
+		if(side == 3) {
+			++z;
+		}
+
+		if(side == 4) {
+			--x;
+		}
+
+		if(side == 5) {
+			++x;
+		}
+
+		if(world.getBlockId(x, y, z) != 0) {
 			return false;
 		} else {
-			if(Block.redstoneWire.canPlaceBlockAt(var3, var4, var5, var6)) {
-				--var1.stackSize;
-				var3.setBlockWithNotify(var4, var5, var6, Block.redstoneWire.blockID);
+			if(Block.redstoneWire.canPlaceBlockAt(world, x, y, z)) {
+				--stack.stackSize;
+				world.setBlockWithNotify(x, y, z, Block.redstoneWire.blockID);
 			}
 
 			return true;
--- /dev/null
+++ net/minecraft/src/BlockGlowing.java
@@ -1,0 +1,91 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockGlowing extends Block {
+	int renderMode = 1;
+
+	public BlockGlowing(int integer1, int integer2, int integer3) {
+		super(integer1, integer2, Material.plants);
+		this.setTickOnLoad(true);
+		this.renderMode = integer3;
+	}
+
+	public BlockGlowing(int id, int blockIndex, Material material) {
+		super(id, blockIndex, material);
+		this.setTickOnLoad(true);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		return null;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return this.renderMode;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return true;
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		super.updateTick(world, x, y, z, random);
+		if(world.getBlockMetadata(x, y, z) == 0) {
+			this.onBlockAdded(world, x, y, z);
+		}
+
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(this.h(world, x, y, z)) {
+			int i6 = world.getBlockMetadata(x, y, z);
+			boolean z7 = false;
+			if(!world.isBlockNormalCube(x - 1, y, z) && i6 == 1) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x + 1, y, z) && i6 == 2) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z - 1) && i6 == 3) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z + 1) && i6 == 4) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y - 1, z) && i6 == 5) {
+				z7 = true;
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+				world.setBlockWithNotify(x, y, z, 0);
+			}
+		}
+
+	}
+
+	private boolean h(World cv, int integer2, int integer3, int integer4) {
+		if(!this.canPlaceBlockAt(cv, integer2, integer3, integer4)) {
+			this.dropBlockAsItem(cv, integer2, integer3, integer4, cv.getBlockMetadata(integer2, integer3, integer4));
+			cv.setBlockWithNotify(integer2, integer3, integer4, 0);
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockHubDoor.java
@@ -1,0 +1,8 @@
+package net.minecraft.src;
+
+public class BlockHubDoor extends BlockDoor {
+	public BlockHubDoor(int id, Material material) {
+		super(id, material);
+		this.blockIndexInTexture = 178;
+	}
+}
--- net/minecraft/src/ItemStack.java
+++ net/minecraft/src/ItemStack.java
@@ -6,79 +6,115 @@
 	public int itemID;
 	public int itemDmg;
 
-	public ItemStack(Block var1) {
-		this((Block)var1, 1);
-	}
-
-	public ItemStack(Block var1, int var2) {
-		this(var1.blockID, var2);
-	}
-
-	public ItemStack(Item var1) {
-		this((Item)var1, 1);
-	}
-
-	public ItemStack(Item var1, int var2) {
-		this(var1.shiftedIndex, var2);
-	}
-
-	public ItemStack(int var1) {
-		this(var1, 1);
-	}
-
-	public ItemStack(int var1, int var2) {
-		this.stackSize = 0;
-		this.itemID = var1;
-		this.stackSize = var2;
-	}
-
-	public ItemStack(int var1, int var2, int var3) {
-		this.stackSize = 0;
-		this.itemID = var1;
-		this.stackSize = var2;
-		this.itemDmg = var3;
-	}
-
-	public ItemStack(NBTTagCompound var1) {
-		this.stackSize = 0;
-		this.readFromNBT(var1);
+	public ItemStack(Block block) {
+		this((Block)block, 1);
+	}
+
+	public ItemStack(Block block, int count) {
+		this(block.blockID, count);
+	}
+
+	public ItemStack(Item item) {
+		this((Item)item, 1);
+	}
+
+	public ItemStack(Item item, int count) {
+		this(item.shiftedIndex, count);
+	}
+
+	public ItemStack(int itemID) {
+		this(itemID, 1);
+	}
+
+	public ItemStack(int itemID, int stackSize) {
+		this.stackSize = 0;
+		this.itemID = itemID;
+		this.stackSize = stackSize;
+	}
+
+	public ItemStack(int itemID, int stackSize, int itemDmg) {
+		this.stackSize = 0;
+		this.itemID = itemID;
+		this.stackSize = stackSize;
+		this.itemDmg = itemDmg;
+	}
+
+	public ItemStack(NBTTagCompound nbttagcompound) {
+		this.stackSize = 0;
+		this.readFromNBT(nbttagcompound);
+	}
+
+	public ItemStack(NBTTagCompound kj, boolean boolean2) {
+		this.stackSize = 0;
+		this.func_8577_4KIE7UuYdRIQ9gttEAn5zB377cys1iXcqERO8x0rS5OwLrjl0310oFK87cmF(kj, boolean2);
+	}
+
+	public ItemStack splitStack(int stackSize) {
+		this.stackSize -= stackSize;
+		return new ItemStack(this.itemID, stackSize, this.itemDmg);
 	}
 
 	public Item getItem() {
 		return Item.itemsList[this.itemID];
 	}
 
-	public boolean useItem(EntityPlayer var1, World var2, int var3, int var4, int var5, int var6) {
-		return this.getItem().onItemUse(this, var1, var2, var3, var4, var5, var6);
-	}
-
-	public float getStrVsBlock(Block var1) {
-		return this.getItem().getStrVsBlock(this, var1);
-	}
-
-	public NBTTagCompound writeToNBT(NBTTagCompound var1) {
-		var1.setShort("id", (short)this.itemID);
-		var1.setByte("Count", (byte)this.stackSize);
-		var1.setShort("Damage", (short)this.itemDmg);
-		return var1;
-	}
-
-	public void readFromNBT(NBTTagCompound var1) {
-		this.itemID = var1.getShort("id");
-		this.stackSize = var1.getByte("Count");
-		this.itemDmg = var1.getShort("Damage");
+	public int getEssenceValue() {
+		return this.itemID > 32767 ? Item.itemsList[this.itemID].essenceValue : Block.blocksList[this.itemID].essenceValue;
+	}
+
+	public int getIconIndex() {
+		return this.getItem().getIconIndex(this);
+	}
+
+	public boolean useItem(EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		return this.getItem().onItemUse(this, entityPlayer, world, x, y, z, side);
+	}
+
+	public float getStrVsBlock(Block block) {
+		return this.getItem().getStrVsBlock(this, block);
+	}
+
+	public ItemStack useItemRightClick(World worldObj, EntityPlayer entityPlayer) {
+		return this.getItem().onItemRightClick(this, worldObj, entityPlayer);
+	}
+
+	public NBTTagCompound writeToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setShort("id", (short)this.itemID);
+		nbttagcompound.setByte("NFORMAT", (byte)57);
+		nbttagcompound.setInteger("Count", this.stackSize);
+		nbttagcompound.setShort("Damage", (short)this.itemDmg);
+		return nbttagcompound;
+	}
+
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		this.func_8577_4KIE7UuYdRIQ9gttEAn5zB377cys1iXcqERO8x0rS5OwLrjl0310oFK87cmF(nbttagcompound, nbttagcompound.hasKey("NFORMAT"));
+	}
+
+	public void func_8577_4KIE7UuYdRIQ9gttEAn5zB377cys1iXcqERO8x0rS5OwLrjl0310oFK87cmF(NBTTagCompound kj, boolean boolean2) {
+		this.itemID = kj.getShort("id") & 65535;
+		if(!boolean2 && this.itemID >= 256) {
+			this.itemID = this.itemID - 256 + 32767;
+		}
+
+		try {
+			this.stackSize = kj.getInteger("Count");
+		} catch (ClassCastException classCastException4) {
+			this.stackSize = kj.getByte("Count");
+		}
+
+		this.itemDmg = kj.getShort("Damage");
 	}
 
 	public int getMaxStackSize() {
-		return this.getItem().getItemStackLimit();
+		return this.itemID == ExtBlocks.EssenceBlock.blockID ? 10000 : this.getItem().getItemStackLimit();
 	}
 
 	public int getMaxDamage() {
 		return Item.itemsList[this.itemID].getMaxDamage();
 	}
 
-	public void damageItem(int var1) {
-		this.itemDmg += var1;
+	public void damageItem(int damage) {
+		this.itemDmg += damage;
 		if(this.itemDmg > this.getMaxDamage()) {
 			--this.stackSize;
 			if(this.stackSize < 0) {
@@ -90,15 +126,27 @@
 
 	}
 
-	public void onDestroyBlock(int var1, int var2, int var3, int var4) {
-		Item.itemsList[this.itemID].onBlockDestroyed(this, var1, var2, var3, var4);
-	}
-
-	public boolean canHarvestBlock(Block var1) {
-		return Item.itemsList[this.itemID].canHarvestBlock(var1);
-	}
-
-	public void onItemDestroyedByUse(EntityPlayer var1) {
+	public void hitEntity(EntityLiving entityLiving) {
+		Item.itemsList[this.itemID].hitEntity(this, entityLiving);
+	}
+
+	public void onDestroyBlock(int id, int x, int y, int z) {
+		Item.itemsList[this.itemID].onBlockDestroyed(this, id, x, y, z);
+	}
+
+	public int getDamageVsEntity(Entity entity) {
+		return Item.itemsList[this.itemID].getDamageVsEntity(entity);
+	}
+
+	public boolean canHarvestBlock(Block block) {
+		return Item.itemsList[this.itemID].canHarvestBlock(block);
+	}
+
+	public void onItemDestroyedByUse(EntityPlayer entityPlayer) {
+	}
+
+	public void useItemOnEntity(EntityLiving entityLiving) {
+		Item.itemsList[this.itemID].saddleEntity(this, entityLiving);
 	}
 
 	public ItemStack copy() {
--- net/minecraft/src/EntityChicken.java
+++ net/minecraft/src/EntityChicken.java
@@ -9,9 +9,8 @@
 	public float moveWings = 1.0F;
 	public int timeUntilNextEgg;
 
-	public EntityChicken(World var1) {
-		super(var1);
-		this.texture = "/mob/chicken.png";
+	public EntityChicken(World world) {
+		super(world);
 		this.setSize(0.3F, 0.4F);
 		this.health = 4;
 		this.timeUntilNextEgg = this.rand.nextInt(6000) + 6000;
@@ -48,15 +47,15 @@
 
 	}
 
-	protected void fall(float var1) {
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
+	protected void fall(float distance) {
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
 	}
 
 	protected String getLivingSound() {
--- net/minecraft/src/Entity.java
+++ net/minecraft/src/Entity.java
@@ -10,7 +10,7 @@
 	public boolean preventEntitySpawning = false;
 	public Entity riddenByEntity;
 	public Entity ridingEntity;
-	protected World worldObj;
+	public World worldObj;
 	public double prevPosX;
 	public double prevPosY;
 	public double prevPosZ;
@@ -36,8 +36,8 @@
 	public float height = 1.8F;
 	public float prevDistanceWalkedModified = 0.0F;
 	public float distanceWalkedModified = 0.0F;
-	protected boolean canTriggerWalking = true;
-	protected float fallDistance = 0.0F;
+	public boolean canTriggerWalking = true;
+	public float fallDistance = 0.0F;
 	private int nextStepDistance = 1;
 	public double lastTickPosX;
 	public double lastTickPosY;
@@ -47,12 +47,12 @@
 	public boolean noClip = false;
 	public float entityCollisionReduction = 0.0F;
 	public boolean unusedBool = false;
-	protected Random rand = new Random();
+	public Random rand = new Random();
 	public int ticksExisted = 0;
 	public int fireResistance = 1;
 	public int fire = 0;
-	protected int maxAir = 300;
-	protected boolean inWater = false;
+	public int maxAir = 300;
+	public boolean inWater = false;
 	public int heartsLife = 0;
 	public int air = 300;
 	private boolean firstUpdate = true;
@@ -63,13 +63,13 @@
 	public int chunkCoordY;
 	public int chunkCoordZ;
 
-	public Entity(World var1) {
-		this.worldObj = var1;
+	public Entity(World world) {
+		this.worldObj = world;
 		this.setPosition(0.0D, 0.0D, 0.0D);
 	}
 
-	public boolean equals(Object var1) {
-		return var1 instanceof Entity ? ((Entity)var1).entityID == this.entityID : false;
+	public boolean equals(Object object) {
+		return object instanceof Entity ? ((Entity)object).entityID == this.entityID : false;
 	}
 
 	public int hashCode() {
@@ -80,23 +80,23 @@
 		this.isDead = true;
 	}
 
-	protected void setSize(float var1, float var2) {
-		this.width = var1;
-		this.height = var2;
-	}
-
-	protected void setRotation(float var1, float var2) {
-		this.rotationYaw = var1;
-		this.rotationPitch = var2;
-	}
-
-	public void setPosition(double var1, double var3, double var5) {
-		this.posX = var1;
-		this.posY = var3;
-		this.posZ = var5;
-		float var7 = this.width / 2.0F;
-		float var8 = this.height;
-		this.boundingBox.setBounds(var1 - (double)var7, var3 - (double)this.yOffset + (double)this.ySize, var5 - (double)var7, var1 + (double)var7, var3 - (double)this.yOffset + (double)this.ySize + (double)var8, var5 + (double)var7);
+	protected void setSize(float width, float height) {
+		this.width = width;
+		this.height = height;
+	}
+
+	protected void setRotation(float rotationYaw, float rotationPitch) {
+		this.rotationYaw = rotationYaw;
+		this.rotationPitch = rotationPitch;
+	}
+
+	public void setPosition(double posX, double posY, double posZ) {
+		this.posX = posX;
+		this.posY = posY;
+		this.posZ = posZ;
+		float f7 = this.width / 2.0F;
+		float f8 = this.height;
+		this.boundingBox.setBounds(posX - (double)f7, posY - (double)this.yOffset + (double)this.ySize, posZ - (double)f7, posX + (double)f7, posY - (double)this.yOffset + (double)this.ySize + (double)f8, posZ + (double)f7);
 	}
 
 	public void onUpdate() {
@@ -117,27 +117,27 @@
 		this.prevRotationYaw = this.rotationYaw;
 		if(this.handleWaterMovement()) {
 			if(!this.inWater && !this.firstUpdate) {
-				float var1 = MathHelper.sqrt_double(this.motionX * this.motionX * (double)0.2F + this.motionY * this.motionY + this.motionZ * this.motionZ * (double)0.2F) * 0.2F;
-				if(var1 > 1.0F) {
-					var1 = 1.0F;
-				}
-
-				this.worldObj.playSoundAtEntity(this, "random.splash", var1, 1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
-				float var2 = (float)MathHelper.floor_double(this.boundingBox.minY);
-
-				int var3;
-				float var4;
-				float var5;
-				for(var3 = 0; (float)var3 < 1.0F + this.width * 20.0F; ++var3) {
-					var4 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-					var5 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-					this.worldObj.spawnParticle("bubble", this.posX + (double)var4, (double)(var2 + 1.0F), this.posZ + (double)var5, this.motionX, this.motionY - (double)(this.rand.nextFloat() * 0.2F), this.motionZ);
-				}
-
-				for(var3 = 0; (float)var3 < 1.0F + this.width * 20.0F; ++var3) {
-					var4 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-					var5 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-					this.worldObj.spawnParticle("splash", this.posX + (double)var4, (double)(var2 + 1.0F), this.posZ + (double)var5, this.motionX, this.motionY, this.motionZ);
+				float f1 = MathHelper.sqrt_double(this.motionX * this.motionX * (double)0.2F + this.motionY * this.motionY + this.motionZ * this.motionZ * (double)0.2F) * 0.2F;
+				if(f1 > 1.0F) {
+					f1 = 1.0F;
+				}
+
+				this.worldObj.playSoundAtEntity(this, "random.splash", f1, 1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
+				float f2 = (float)MathHelper.floor_double(this.boundingBox.minY);
+
+				int i3;
+				float f4;
+				float f5;
+				for(i3 = 0; (float)i3 < 1.0F + this.width * 20.0F; ++i3) {
+					f4 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+					f5 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+					this.worldObj.spawnParticle("bubble", this.posX + (double)f4, (double)(f2 + 1.0F), this.posZ + (double)f5, this.motionX, this.motionY - (double)(this.rand.nextFloat() * 0.2F), this.motionZ);
+				}
+
+				for(i3 = 0; (float)i3 < 1.0F + this.width * 20.0F; ++i3) {
+					f4 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+					f5 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+					this.worldObj.spawnParticle("splash", this.posX + (double)f4, (double)(f2 + 1.0F), this.posZ + (double)f5, this.motionX, this.motionY, this.motionZ);
 				}
 			}
 
@@ -172,139 +172,139 @@
 		this.setEntityDead();
 	}
 
-	public boolean isOffsetPositionInLiquid(double var1, double var3, double var5) {
-		AxisAlignedBB var7 = this.boundingBox.getOffsetBoundingBox(var1, var3, var5);
-		List var8 = this.worldObj.getCollidingBoundingBoxes(this, var7);
-		return var8.size() > 0 ? false : !this.worldObj.getIsAnyLiquid(var7);
+	public boolean isOffsetPositionInLiquid(double x, double y, double z) {
+		AxisAlignedBB axisAlignedBB7 = this.boundingBox.getOffsetBoundingBox(x, y, z);
+		List list8 = this.worldObj.getCollidingBoundingBoxes(this, axisAlignedBB7);
+		return list8.size() > 0 ? false : !this.worldObj.getIsAnyLiquid(axisAlignedBB7);
 	}
 
-	public void moveEntity(double var1, double var3, double var5) {
+	public void moveEntity(double x, double y, double z) {
 		if(this.noClip) {
-			this.boundingBox.offset(var1, var3, var5);
+			this.boundingBox.offset(x, y, z);
 			this.posX = (this.boundingBox.minX + this.boundingBox.maxX) / 2.0D;
 			this.posY = this.boundingBox.minY + (double)this.yOffset - (double)this.ySize;
 			this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0D;
 		} else {
-			double var7 = this.posX;
-			double var9 = this.posZ;
-			double var11 = var1;
-			double var13 = var3;
-			double var15 = var5;
-			AxisAlignedBB var17 = this.boundingBox.copy();
-			boolean var18 = this.onGround && this.isSneaking();
-			if(var18) {
-				double var19;
-				for(var19 = 0.05D; var1 != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(var1, -1.0D, 0.0D)).size() == 0; var11 = var1) {
-					if(var1 < var19 && var1 >= -var19) {
-						var1 = 0.0D;
-					} else if(var1 > 0.0D) {
-						var1 -= var19;
-					} else {
-						var1 += var19;
-					}
-				}
-
-				for(; var5 != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(0.0D, -1.0D, var5)).size() == 0; var15 = var5) {
-					if(var5 < var19 && var5 >= -var19) {
-						var5 = 0.0D;
-					} else if(var5 > 0.0D) {
-						var5 -= var19;
-					} else {
-						var5 += var19;
-					}
-				}
-			}
-
-			List var35 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(var1, var3, var5));
-
-			for(int var20 = 0; var20 < var35.size(); ++var20) {
-				var3 = ((AxisAlignedBB)var35.get(var20)).calculateYOffset(this.boundingBox, var3);
-			}
-
-			this.boundingBox.offset(0.0D, var3, 0.0D);
-			if(!this.surfaceCollision && var13 != var3) {
-				var5 = 0.0D;
-				var3 = var5;
-				var1 = var5;
-			}
-
-			boolean var36 = this.onGround || var13 != var3 && var13 < 0.0D;
-
-			int var21;
-			for(var21 = 0; var21 < var35.size(); ++var21) {
-				var1 = ((AxisAlignedBB)var35.get(var21)).calculateXOffset(this.boundingBox, var1);
-			}
-
-			this.boundingBox.offset(var1, 0.0D, 0.0D);
-			if(!this.surfaceCollision && var11 != var1) {
-				var5 = 0.0D;
-				var3 = var5;
-				var1 = var5;
-			}
-
-			for(var21 = 0; var21 < var35.size(); ++var21) {
-				var5 = ((AxisAlignedBB)var35.get(var21)).calculateZOffset(this.boundingBox, var5);
-			}
-
-			this.boundingBox.offset(0.0D, 0.0D, var5);
-			if(!this.surfaceCollision && var15 != var5) {
-				var5 = 0.0D;
-				var3 = var5;
-				var1 = var5;
-			}
-
-			double var23;
-			int var28;
-			double var37;
-			if(this.stepHeight > 0.0F && var36 && this.ySize < 0.05F && (var11 != var1 || var15 != var5)) {
-				var37 = var1;
-				var23 = var3;
-				double var25 = var5;
-				var1 = var11;
-				var3 = (double)this.stepHeight;
-				var5 = var15;
-				AxisAlignedBB var27 = this.boundingBox.copy();
-				this.boundingBox.setBB(var17);
-				var35 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(var11, var3, var15));
-
-				for(var28 = 0; var28 < var35.size(); ++var28) {
-					var3 = ((AxisAlignedBB)var35.get(var28)).calculateYOffset(this.boundingBox, var3);
-				}
-
-				this.boundingBox.offset(0.0D, var3, 0.0D);
-				if(!this.surfaceCollision && var13 != var3) {
-					var5 = 0.0D;
-					var3 = var5;
-					var1 = var5;
-				}
-
-				for(var28 = 0; var28 < var35.size(); ++var28) {
-					var1 = ((AxisAlignedBB)var35.get(var28)).calculateXOffset(this.boundingBox, var1);
-				}
-
-				this.boundingBox.offset(var1, 0.0D, 0.0D);
-				if(!this.surfaceCollision && var11 != var1) {
-					var5 = 0.0D;
-					var3 = var5;
-					var1 = var5;
-				}
-
-				for(var28 = 0; var28 < var35.size(); ++var28) {
-					var5 = ((AxisAlignedBB)var35.get(var28)).calculateZOffset(this.boundingBox, var5);
-				}
-
-				this.boundingBox.offset(0.0D, 0.0D, var5);
-				if(!this.surfaceCollision && var15 != var5) {
-					var5 = 0.0D;
-					var3 = var5;
-					var1 = var5;
-				}
-
-				if(var37 * var37 + var25 * var25 >= var1 * var1 + var5 * var5) {
-					var1 = var37;
-					var3 = var23;
-					var5 = var25;
-					this.boundingBox.setBB(var27);
+			double d7 = this.posX;
+			double d9 = this.posZ;
+			double d11 = x;
+			double d13 = y;
+			double d15 = z;
+			AxisAlignedBB axisAlignedBB17 = this.boundingBox.copy();
+			boolean z18 = this.onGround && this.isSneaking();
+			if(z18) {
+				double d19;
+				for(d19 = 0.05D; x != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(x, -1.0D, 0.0D)).size() == 0; d11 = x) {
+					if(x < d19 && x >= -d19) {
+						x = 0.0D;
+					} else if(x > 0.0D) {
+						x -= d19;
+					} else {
+						x += d19;
+					}
+				}
+
+				for(; z != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(0.0D, -1.0D, z)).size() == 0; d15 = z) {
+					if(z < d19 && z >= -d19) {
+						z = 0.0D;
+					} else if(z > 0.0D) {
+						z -= d19;
+					} else {
+						z += d19;
+					}
+				}
+			}
+
+			List list36 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(x, y, z));
+
+			for(int i20 = 0; i20 < list36.size(); ++i20) {
+				y = ((AxisAlignedBB)list36.get(i20)).calculateYOffset(this.boundingBox, y);
+			}
+
+			this.boundingBox.offset(0.0D, y, 0.0D);
+			if(!this.surfaceCollision && d13 != y) {
+				z = 0.0D;
+				y = 0.0D;
+				x = 0.0D;
+			}
+
+			boolean z37 = this.onGround || d13 != y && d13 < 0.0D;
+
+			int i21;
+			for(i21 = 0; i21 < list36.size(); ++i21) {
+				x = ((AxisAlignedBB)list36.get(i21)).calculateXOffset(this.boundingBox, x);
+			}
+
+			this.boundingBox.offset(x, 0.0D, 0.0D);
+			if(!this.surfaceCollision && d11 != x) {
+				z = 0.0D;
+				y = 0.0D;
+				x = 0.0D;
+			}
+
+			for(i21 = 0; i21 < list36.size(); ++i21) {
+				z = ((AxisAlignedBB)list36.get(i21)).calculateZOffset(this.boundingBox, z);
+			}
+
+			this.boundingBox.offset(0.0D, 0.0D, z);
+			if(!this.surfaceCollision && d15 != z) {
+				z = 0.0D;
+				y = 0.0D;
+				x = 0.0D;
+			}
+
+			double d22;
+			int i24;
+			double d25;
+			if(this.stepHeight > 0.0F && z37 && this.ySize < 0.05F && (d11 != x || d15 != z)) {
+				d25 = x;
+				d22 = y;
+				double d27 = z;
+				x = d11;
+				y = (double)this.stepHeight;
+				z = d15;
+				AxisAlignedBB axisAlignedBB29 = this.boundingBox.copy();
+				this.boundingBox.setBB(axisAlignedBB17);
+				list36 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(d11, y, d15));
+
+				for(i24 = 0; i24 < list36.size(); ++i24) {
+					y = ((AxisAlignedBB)list36.get(i24)).calculateYOffset(this.boundingBox, y);
+				}
+
+				this.boundingBox.offset(0.0D, y, 0.0D);
+				if(!this.surfaceCollision && d13 != y) {
+					z = 0.0D;
+					y = 0.0D;
+					x = 0.0D;
+				}
+
+				for(i24 = 0; i24 < list36.size(); ++i24) {
+					x = ((AxisAlignedBB)list36.get(i24)).calculateXOffset(this.boundingBox, x);
+				}
+
+				this.boundingBox.offset(x, 0.0D, 0.0D);
+				if(!this.surfaceCollision && d11 != x) {
+					z = 0.0D;
+					y = 0.0D;
+					x = 0.0D;
+				}
+
+				for(i24 = 0; i24 < list36.size(); ++i24) {
+					z = ((AxisAlignedBB)list36.get(i24)).calculateZOffset(this.boundingBox, z);
+				}
+
+				this.boundingBox.offset(0.0D, 0.0D, z);
+				if(!this.surfaceCollision && d15 != z) {
+					z = 0.0D;
+					y = 0.0D;
+					x = 0.0D;
+				}
+
+				if(d25 * d25 + d27 * d27 >= x * x + z * z) {
+					x = d25;
+					y = d22;
+					z = d27;
+					this.boundingBox.setBB(axisAlignedBB29);
 				} else {
 					this.ySize = (float)((double)this.ySize + 0.5D);
 				}
@@ -313,79 +313,79 @@
 			this.posX = (this.boundingBox.minX + this.boundingBox.maxX) / 2.0D;
 			this.posY = this.boundingBox.minY + (double)this.yOffset - (double)this.ySize;
 			this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0D;
-			this.isCollidedHorizontally = var11 != var1 || var15 != var5;
-			this.isCollidedVertically = var13 != var3;
-			this.onGround = var13 != var3 && var13 < 0.0D;
+			this.isCollidedHorizontally = d11 != x || d15 != z;
+			this.isCollidedVertically = d13 != y;
+			this.onGround = d13 != y && d13 < 0.0D;
 			this.isCollided = this.isCollidedHorizontally || this.isCollidedVertically;
 			if(this.onGround) {
 				if(this.fallDistance > 0.0F) {
 					this.fall(this.fallDistance);
 					this.fallDistance = 0.0F;
 				}
-			} else if(var3 < 0.0D) {
-				this.fallDistance = (float)((double)this.fallDistance - var3);
+			} else if(y < 0.0D) {
+				this.fallDistance = (float)((double)this.fallDistance - y);
 			}
 
-			if(var11 != var1) {
+			if(d11 != x) {
 				this.motionX = 0.0D;
 			}
 
-			if(var13 != var3) {
+			if(d13 != y) {
 				this.motionY = 0.0D;
 			}
 
-			if(var15 != var5) {
+			if(d15 != z) {
 				this.motionZ = 0.0D;
 			}
 
-			var37 = this.posX - var7;
-			var23 = this.posZ - var9;
-			this.distanceWalkedModified = (float)((double)this.distanceWalkedModified + (double)MathHelper.sqrt_double(var37 * var37 + var23 * var23) * 0.6D);
-			int var26;
-			int var38;
-			int var40;
-			if(this.canTriggerWalking && !var18) {
-				var38 = MathHelper.floor_double(this.posX);
-				var26 = MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset);
-				var40 = MathHelper.floor_double(this.posZ);
-				var28 = this.worldObj.getBlockId(var38, var26, var40);
-				if(this.distanceWalkedModified > (float)this.nextStepDistance && var28 > 0) {
+			d25 = this.posX - d7;
+			d22 = this.posZ - d9;
+			this.distanceWalkedModified = (float)((double)this.distanceWalkedModified + (double)MathHelper.sqrt_double(d25 * d25 + d22 * d22) * 0.6D);
+			int i28;
+			int i38;
+			int i39;
+			if(this.canTriggerWalking && !z18) {
+				i28 = MathHelper.floor_double(this.posX);
+				i38 = MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset);
+				i39 = MathHelper.floor_double(this.posZ);
+				i24 = this.worldObj.getBlockId(i28, i38, i39);
+				if(this.distanceWalkedModified > (float)this.nextStepDistance && i24 > 0) {
 					++this.nextStepDistance;
-					StepSound var29 = Block.blocksList[var28].stepSound;
-					if(this.worldObj.getBlockId(var38, var26 + 1, var40) == Block.snow.blockID) {
-						var29 = Block.snow.stepSound;
-						this.worldObj.playSoundAtEntity(this, var29.getStepSound(), var29.getVolume() * 0.15F, var29.getPitch());
-					} else if(!Block.blocksList[var28].material.getIsLiquid()) {
-						this.worldObj.playSoundAtEntity(this, var29.getStepSound(), var29.getVolume() * 0.15F, var29.getPitch());
+					StepSound stepSound30 = Block.blocksList[i24].stepSound;
+					if(this.worldObj.getBlockId(i28, i38 + 1, i39) == Block.snow.blockID) {
+						stepSound30 = Block.snow.stepSound;
+						this.worldObj.playSoundAtEntity(this, stepSound30.getStepSound(), stepSound30.getVolume() * 0.15F, stepSound30.getPitch());
+					} else if(!Block.blocksList[i24].material.getIsLiquid()) {
+						this.worldObj.playSoundAtEntity(this, stepSound30.getStepSound(), stepSound30.getVolume() * 0.15F, stepSound30.getPitch());
 					}
 
-					Block.blocksList[var28].onEntityWalking(this.worldObj, var38, var26, var40, this);
+					Block.blocksList[i24].onEntityWalking(this.worldObj, i28, i38, i39, this);
 				}
 			}
 
-			var38 = MathHelper.floor_double(this.boundingBox.minX);
-			var26 = MathHelper.floor_double(this.boundingBox.minY);
-			var40 = MathHelper.floor_double(this.boundingBox.minZ);
-			var28 = MathHelper.floor_double(this.boundingBox.maxX);
-			int var41 = MathHelper.floor_double(this.boundingBox.maxY);
-			int var30 = MathHelper.floor_double(this.boundingBox.maxZ);
+			i28 = MathHelper.floor_double(this.boundingBox.minX);
+			i38 = MathHelper.floor_double(this.boundingBox.minY);
+			i39 = MathHelper.floor_double(this.boundingBox.minZ);
+			i24 = MathHelper.floor_double(this.boundingBox.maxX);
+			int i40 = MathHelper.floor_double(this.boundingBox.maxY);
+			int i31 = MathHelper.floor_double(this.boundingBox.maxZ);
 
-			for(int var31 = var38; var31 <= var28; ++var31) {
-				for(int var32 = var26; var32 <= var41; ++var32) {
-					for(int var33 = var40; var33 <= var30; ++var33) {
-						int var34 = this.worldObj.getBlockId(var31, var32, var33);
-						if(var34 > 0) {
-							Block.blocksList[var34].onEntityCollidedWithBlock(this.worldObj, var31, var32, var33, this);
+			for(int i32 = i28; i32 <= i24; ++i32) {
+				for(int i33 = i38; i33 <= i40; ++i33) {
+					for(int i34 = i39; i34 <= i31; ++i34) {
+						int i35 = this.worldObj.getBlockId(i32, i33, i34);
+						if(i35 > 0) {
+							Block.blocksList[i35].onEntityCollidedWithBlock(this.worldObj, i32, i33, i34, this);
 						}
 					}
 				}
 			}
 
 			this.ySize *= 0.4F;
-			boolean var39 = this.handleWaterMovement();
+			boolean z41 = this.handleWaterMovement();
 			if(this.worldObj.isBoundingBoxBurning(this.boundingBox)) {
 				this.dealFireDamage(1);
-				if(!var39) {
+				if(!z41) {
 					++this.fire;
 					if(this.fire == 0) {
 						this.fire = 300;
@@ -395,12 +395,12 @@
 				this.fire = -this.fireResistance;
 			}
 
-			if(var39 && this.fire > 0) {
+			if(z41 && this.fire > 0) {
 				this.worldObj.playSoundAtEntity(this, "random.fizz", 0.7F, 1.6F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
 				this.fire = -this.fireResistance;
 			}
-
 		}
+
 	}
 
 	public boolean isSneaking() {
@@ -411,27 +411,27 @@
 		return null;
 	}
 
-	protected void dealFireDamage(int var1) {
-		this.attackEntityFrom((Entity)null, var1);
+	protected void dealFireDamage(int fireDamage) {
+		this.attackEntityFrom((Entity)null, fireDamage);
 	}
 
-	protected void fall(float var1) {
+	protected void fall(float distance) {
 	}
 
 	public boolean handleWaterMovement() {
-		return this.worldObj.handleMaterialAcceleration(this.boundingBox.expand(0.0D, (double)-0.4F, 0.0D), Material.water, this);
+		return this.worldObj.handleMaterialAcceleration(this.boundingBox.expand(0.0D, -0.4000000059604645D, 0.0D), Material.water, this);
 	}
 
-	public boolean isInsideOfMaterial(Material var1) {
-		double var2 = this.posY + (double)this.getEyeHeight();
-		int var4 = MathHelper.floor_double(this.posX);
-		int var5 = MathHelper.floor_float((float)MathHelper.floor_double(var2));
-		int var6 = MathHelper.floor_double(this.posZ);
-		int var7 = this.worldObj.getBlockId(var4, var5, var6);
-		if(var7 != 0 && Block.blocksList[var7].material == var1) {
-			float var8 = BlockFluid.getFluidHeightPercent(this.worldObj.getBlockMetadata(var4, var5, var6)) - 1.0F / 9.0F;
-			float var9 = (float)(var5 + 1) - var8;
-			return var2 < (double)var9;
+	public boolean isInsideOfMaterial(Material material) {
+		double d2 = this.posY + (double)this.getEyeHeight();
+		int i4 = MathHelper.floor_double(this.posX);
+		int i5 = MathHelper.floor_float((float)MathHelper.floor_double(d2));
+		int i6 = MathHelper.floor_double(this.posZ);
+		int i7 = this.worldObj.getBlockId(i4, i5, i6);
+		if(i7 != 0 && Block.blocksList[i7].material == material) {
+			float f8 = BlockFluid.getFluidHeightPercent(this.worldObj.getBlockMetadata(i4, i5, i6)) - 0.11111111F;
+			float f9 = (float)(i5 + 1) - f8;
+			return d2 < (double)f9;
 		} else {
 			return false;
 		}
@@ -442,127 +442,128 @@
 	}
 
 	public boolean handleLavaMovement() {
-		return this.worldObj.isMaterialInBB(this.boundingBox.expand(0.0D, (double)-0.4F, 0.0D), Material.lava);
+		return this.worldObj.isMaterialInBB(this.boundingBox.expand(0.0D, -0.4000000059604645D, 0.0D), Material.lava);
 	}
 
-	public void moveFlying(float var1, float var2, float var3) {
-		float var4 = MathHelper.sqrt_float(var1 * var1 + var2 * var2);
-		if(var4 >= 0.01F) {
-			if(var4 < 1.0F) {
-				var4 = 1.0F;
+	public void moveFlying(float moveX, float moveY, float moveZ) {
+		float f4 = MathHelper.sqrt_float(moveX * moveX + moveY * moveY);
+		if(f4 >= 0.01F) {
+			if(f4 < 1.0F) {
+				f4 = 1.0F;
 			}
 
-			var4 = var3 / var4;
-			var1 *= var4;
-			var2 *= var4;
-			float var5 = MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F);
-			float var6 = MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F);
-			this.motionX += (double)(var1 * var6 - var2 * var5);
-			this.motionZ += (double)(var2 * var6 + var1 * var5);
+			f4 = moveZ / f4;
+			moveX *= f4;
+			moveY *= f4;
+			float f5 = MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F);
+			float f6 = MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F);
+			this.motionX += (double)(moveX * f6 - moveY * f5);
+			this.motionZ += (double)(moveY * f6 + moveX * f5);
 		}
-	}
-
-	public float getBrightness(float var1) {
-		int var2 = MathHelper.floor_double(this.posX);
-		double var3 = (this.boundingBox.maxY - this.boundingBox.minY) * 0.66D;
-		int var5 = MathHelper.floor_double(this.posY - (double)this.yOffset + var3);
-		int var6 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.getBrightness(var2, var5, var6);
-	}
-
-	public void setPositionAndRotation(double var1, double var3, double var5, float var7, float var8) {
-		this.prevPosX = this.posX = var1;
-		this.prevPosY = this.posY = var3;
-		this.prevPosZ = this.posZ = var5;
-		this.rotationYaw = var7;
-		this.rotationPitch = var8;
+
+	}
+
+	public float getBrightness(float unused) {
+		int i2 = MathHelper.floor_double(this.posX);
+		double d3 = (this.boundingBox.maxY - this.boundingBox.minY) * 0.66D;
+		int i5 = MathHelper.floor_double(this.posY - (double)this.yOffset + d3);
+		int i6 = MathHelper.floor_double(this.posZ);
+		return this.worldObj.getBrightness(i2, i5, i6);
+	}
+
+	public void setPositionAndRotation(double x, double y, double z, float yaw, float pitch) {
+		this.prevPosX = this.posX = x;
+		this.prevPosY = this.posY = y;
+		this.prevPosZ = this.posZ = z;
+		this.rotationYaw = yaw;
+		this.rotationPitch = pitch;
 		this.ySize = 0.0F;
-		double var9 = (double)(this.prevRotationYaw - var7);
-		if(var9 < -180.0D) {
+		double d9 = (double)(this.prevRotationYaw - yaw);
+		if(d9 < -180.0D) {
 			this.prevRotationYaw += 360.0F;
 		}
 
-		if(var9 >= 180.0D) {
+		if(d9 >= 180.0D) {
 			this.prevRotationYaw -= 360.0F;
 		}
 
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
-	public void setLocationAndAngles(double var1, double var3, double var5, float var7, float var8) {
-		this.prevPosX = this.posX = var1;
-		this.prevPosY = this.posY = var3 + (double)this.yOffset;
-		this.prevPosZ = this.posZ = var5;
-		this.rotationYaw = var7;
-		this.rotationPitch = var8;
+	public void setLocationAndAngles(double x, double y, double z, float yaw, float pitch) {
+		this.prevPosX = this.posX = x;
+		this.prevPosY = this.posY = y + (double)this.yOffset;
+		this.prevPosZ = this.posZ = z;
+		this.rotationYaw = yaw;
+		this.rotationPitch = pitch;
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
-	public float getDistanceToEntity(Entity var1) {
-		float var2 = (float)(this.posX - var1.posX);
-		float var3 = (float)(this.posY - var1.posY);
-		float var4 = (float)(this.posZ - var1.posZ);
-		return MathHelper.sqrt_float(var2 * var2 + var3 * var3 + var4 * var4);
-	}
-
-	public double getDistanceSq(double var1, double var3, double var5) {
-		double var7 = this.posX - var1;
-		double var9 = this.posY - var3;
-		double var11 = this.posZ - var5;
-		return var7 * var7 + var9 * var9 + var11 * var11;
-	}
-
-	public double getDistance(double var1, double var3, double var5) {
-		double var7 = this.posX - var1;
-		double var9 = this.posY - var3;
-		double var11 = this.posZ - var5;
-		return (double)MathHelper.sqrt_double(var7 * var7 + var9 * var9 + var11 * var11);
-	}
-
-	public double getDistanceSqToEntity(Entity var1) {
-		double var2 = this.posX - var1.posX;
-		double var4 = this.posY - var1.posY;
-		double var6 = this.posZ - var1.posZ;
-		return var2 * var2 + var4 * var4 + var6 * var6;
-	}
-
-	public void onCollideWithPlayer(EntityPlayer var1) {
-	}
-
-	public void applyEntityCollision(Entity var1) {
-		if(var1.riddenByEntity != this && var1.ridingEntity != this) {
-			double var2 = var1.posX - this.posX;
-			double var4 = var1.posZ - this.posZ;
-			double var6 = MathHelper.abs_max(var2, var4);
-			if(var6 >= (double)0.01F) {
-				var6 = (double)MathHelper.sqrt_double(var6);
-				var2 /= var6;
-				var4 /= var6;
-				double var8 = 1.0D / var6;
-				if(var8 > 1.0D) {
-					var8 = 1.0D;
+	public float getDistanceToEntity(Entity entity) {
+		float f2 = (float)(this.posX - entity.posX);
+		float f3 = (float)(this.posY - entity.posY);
+		float f4 = (float)(this.posZ - entity.posZ);
+		return MathHelper.sqrt_float(f2 * f2 + f3 * f3 + f4 * f4);
+	}
+
+	public double getDistanceSq(double x, double y, double z) {
+		double d7 = this.posX - x;
+		double d9 = this.posY - y;
+		double d11 = this.posZ - z;
+		return d7 * d7 + d9 * d9 + d11 * d11;
+	}
+
+	public double getDistance(double x, double y, double z) {
+		double d7 = this.posX - x;
+		double d9 = this.posY - y;
+		double d11 = this.posZ - z;
+		return (double)MathHelper.sqrt_double(d7 * d7 + d9 * d9 + d11 * d11);
+	}
+
+	public double getDistanceSqToEntity(Entity entity) {
+		double d2 = this.posX - entity.posX;
+		double d4 = this.posY - entity.posY;
+		double d6 = this.posZ - entity.posZ;
+		return d2 * d2 + d4 * d4 + d6 * d6;
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+	}
+
+	public void applyEntityCollision(Entity entity) {
+		if(entity.riddenByEntity != this && entity.ridingEntity != this) {
+			double d2 = entity.posX - this.posX;
+			double d4 = entity.posZ - this.posZ;
+			double d6 = MathHelper.abs_max(d2, d4);
+			if(d6 >= (double)0.01F) {
+				d6 = (double)MathHelper.sqrt_double(d6);
+				d2 /= d6;
+				d4 /= d6;
+				double d8 = 1.0D / d6;
+				if(d8 > 1.0D) {
+					d8 = 1.0D;
 				}
 
-				var2 *= var8;
-				var4 *= var8;
-				var2 *= (double)0.05F;
-				var4 *= (double)0.05F;
-				var2 *= (double)(1.0F - this.entityCollisionReduction);
-				var4 *= (double)(1.0F - this.entityCollisionReduction);
-				this.addVelocity(-var2, 0.0D, -var4);
-				var1.addVelocity(var2, 0.0D, var4);
+				d2 *= d8;
+				d4 *= d8;
+				d2 *= (double)0.05F;
+				d4 *= (double)0.05F;
+				d2 *= (double)(1.0F - this.entityCollisionReduction);
+				d4 *= (double)(1.0F - this.entityCollisionReduction);
+				this.addVelocity(-d2, 0.0D, -d4);
+				entity.addVelocity(d2, 0.0D, d4);
 			}
-
 		}
-	}
-
-	public void addVelocity(double var1, double var3, double var5) {
-		this.motionX += var1;
-		this.motionY += var3;
-		this.motionZ += var5;
-	}
-
-	public boolean attackEntityFrom(Entity var1, int var2) {
+
+	}
+
+	public void addVelocity(double motionX, double motionY, double motionZ) {
+		this.motionX += motionX;
+		this.motionY += motionY;
+		this.motionZ += motionZ;
+	}
+
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		return false;
 	}
 
@@ -574,95 +575,95 @@
 		return false;
 	}
 
-	public void addToPlayerScore(Entity var1, int var2) {
+	public void addToPlayerScore(Entity entity, int score) {
 	}
 
-	public boolean addEntityID(NBTTagCompound var1) {
-		String var2 = this.getEntityString();
-		if(!this.isDead && var2 != null) {
-			var1.setString("id", var2);
-			this.writeToNBT(var1);
+	public boolean addEntityID(NBTTagCompound nbttagcompound) {
+		String string2 = this.getEntityString();
+		if(!this.isDead && string2 != null) {
+			nbttagcompound.setString("id", string2);
+			this.writeToNBT(nbttagcompound);
 			return true;
 		} else {
 			return false;
 		}
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		var1.setTag("Pos", this.newDoubleNBTList(new double[]{this.posX, this.posY, this.posZ}));
-		var1.setTag("Motion", this.newDoubleNBTList(new double[]{this.motionX, this.motionY, this.motionZ}));
-		var1.setTag("Rotation", this.newFloatNBTList(new float[]{this.rotationYaw, this.rotationPitch}));
-		var1.setFloat("FallDistance", this.fallDistance);
-		var1.setShort("Fire", (short)this.fire);
-		var1.setShort("Air", (short)this.air);
-		var1.setBoolean("OnGround", this.onGround);
-		this.writeEntityToNBT(var1);
+	public void writeToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setTag("Pos", this.newDoubleNBTList(new double[]{this.posX, this.posY, this.posZ}));
+		nbttagcompound.setTag("Motion", this.newDoubleNBTList(new double[]{this.motionX, this.motionY, this.motionZ}));
+		nbttagcompound.setTag("Rotation", this.newFloatNBTList(new float[]{this.rotationYaw, this.rotationPitch}));
+		nbttagcompound.setFloat("FallDistance", this.fallDistance);
+		nbttagcompound.setShort("Fire", (short)this.fire);
+		nbttagcompound.setShort("Air", (short)this.air);
+		nbttagcompound.setBoolean("OnGround", this.onGround);
+		this.writeEntityToNBT(nbttagcompound);
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		NBTTagList var2 = var1.getTagList("Pos");
-		NBTTagList var3 = var1.getTagList("Motion");
-		NBTTagList var4 = var1.getTagList("Rotation");
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		NBTTagList nBTTagList2 = nbttagcompound.getTagList("Pos");
+		NBTTagList nBTTagList3 = nbttagcompound.getTagList("Motion");
+		NBTTagList nBTTagList4 = nbttagcompound.getTagList("Rotation");
 		this.setPosition(0.0D, 0.0D, 0.0D);
-		this.motionX = ((NBTTagDouble)var3.tagAt(0)).doubleValue;
-		this.motionY = ((NBTTagDouble)var3.tagAt(1)).doubleValue;
-		this.motionZ = ((NBTTagDouble)var3.tagAt(2)).doubleValue;
-		this.prevPosX = this.lastTickPosX = this.posX = ((NBTTagDouble)var2.tagAt(0)).doubleValue;
-		this.prevPosY = this.lastTickPosY = this.posY = ((NBTTagDouble)var2.tagAt(1)).doubleValue;
-		this.prevPosZ = this.lastTickPosZ = this.posZ = ((NBTTagDouble)var2.tagAt(2)).doubleValue;
-		this.prevRotationYaw = this.rotationYaw = ((NBTTagFloat)var4.tagAt(0)).floatValue;
-		this.prevRotationPitch = this.rotationPitch = ((NBTTagFloat)var4.tagAt(1)).floatValue;
-		this.fallDistance = var1.getFloat("FallDistance");
-		this.fire = var1.getShort("Fire");
-		this.air = var1.getShort("Air");
-		this.onGround = var1.getBoolean("OnGround");
+		this.motionX = ((NBTTagDouble)nBTTagList3.tagAt(0)).doubleValue;
+		this.motionY = ((NBTTagDouble)nBTTagList3.tagAt(1)).doubleValue;
+		this.motionZ = ((NBTTagDouble)nBTTagList3.tagAt(2)).doubleValue;
+		this.prevPosX = this.lastTickPosX = this.posX = ((NBTTagDouble)nBTTagList2.tagAt(0)).doubleValue;
+		this.prevPosY = this.lastTickPosY = this.posY = ((NBTTagDouble)nBTTagList2.tagAt(1)).doubleValue;
+		this.prevPosZ = this.lastTickPosZ = this.posZ = ((NBTTagDouble)nBTTagList2.tagAt(2)).doubleValue;
+		this.prevRotationYaw = this.rotationYaw = ((NBTTagFloat)nBTTagList4.tagAt(0)).floatValue;
+		this.prevRotationPitch = this.rotationPitch = ((NBTTagFloat)nBTTagList4.tagAt(1)).floatValue;
+		this.fallDistance = nbttagcompound.getFloat("FallDistance");
+		this.fire = nbttagcompound.getShort("Fire");
+		this.air = nbttagcompound.getShort("Air");
+		this.onGround = nbttagcompound.getBoolean("OnGround");
 		this.setPosition(this.posX, this.posY, this.posZ);
-		this.readEntityFromNBT(var1);
+		this.readEntityFromNBT(nbttagcompound);
 	}
 
 	protected final String getEntityString() {
 		return EntityList.getEntityString(this);
 	}
 
-	protected abstract void readEntityFromNBT(NBTTagCompound var1);
-
-	protected abstract void writeEntityToNBT(NBTTagCompound var1);
-
-	protected NBTTagList newDoubleNBTList(double... var1) {
-		NBTTagList var2 = new NBTTagList();
-		double[] var3 = var1;
-		int var4 = var1.length;
-
-		for(int var5 = 0; var5 < var4; ++var5) {
-			double var6 = var3[var5];
-			var2.setTag(new NBTTagDouble(var6));
-		}
-
-		return var2;
-	}
-
-	protected NBTTagList newFloatNBTList(float... var1) {
-		NBTTagList var2 = new NBTTagList();
-		float[] var3 = var1;
-		int var4 = var1.length;
-
-		for(int var5 = 0; var5 < var4; ++var5) {
-			float var6 = var3[var5];
-			var2.setTag(new NBTTagFloat(var6));
-		}
-
-		return var2;
-	}
-
-	public EntityItem dropItem(int var1, int var2) {
-		return this.entityDropItem(var1, var2, 0.0F);
-	}
-
-	public EntityItem entityDropItem(int var1, int var2, float var3) {
-		EntityItem var4 = new EntityItem(this.worldObj, this.posX, this.posY + (double)var3, this.posZ, new ItemStack(var1, var2));
-		var4.delayBeforeCanPickup = 10;
-		this.worldObj.spawnEntityInWorld(var4);
-		return var4;
+	protected abstract void readEntityFromNBT(NBTTagCompound nBTTagCompound1);
+
+	protected abstract void writeEntityToNBT(NBTTagCompound nBTTagCompound1);
+
+	protected NBTTagList newDoubleNBTList(double... doubleArray) {
+		NBTTagList nBTTagList2 = new NBTTagList();
+		double[] d3 = doubleArray;
+		int i4 = doubleArray.length;
+
+		for(int i5 = 0; i5 < i4; ++i5) {
+			double d6 = d3[i5];
+			nBTTagList2.setTag(new NBTTagDouble(d6));
+		}
+
+		return nBTTagList2;
+	}
+
+	protected NBTTagList newFloatNBTList(float... floatArray) {
+		NBTTagList nBTTagList2 = new NBTTagList();
+		float[] f3 = floatArray;
+		int i4 = floatArray.length;
+
+		for(int i5 = 0; i5 < i4; ++i5) {
+			float f6 = f3[i5];
+			nBTTagList2.setTag(new NBTTagFloat(f6));
+		}
+
+		return nBTTagList2;
+	}
+
+	public EntityItem dropItem(int itemID, int count) {
+		return this.entityDropItem(itemID, count, 0.0F);
+	}
+
+	public EntityItem entityDropItem(int itemID, int count, float velocity) {
+		EntityItem entityItem4 = new EntityItem(this.worldObj, this.posX, this.posY + (double)velocity, this.posZ, new ItemStack(itemID, count));
+		entityItem4.delayBeforeCanPickup = 10;
+		this.worldObj.spawnEntityInWorld(entityItem4);
+		return entityItem4;
 	}
 
 	public boolean isEntityAlive() {
@@ -670,13 +671,13 @@
 	}
 
 	public boolean isEntityInsideOpaqueBlock() {
-		int var1 = MathHelper.floor_double(this.posX);
-		int var2 = MathHelper.floor_double(this.posY + (double)this.getEyeHeight());
-		int var3 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.isBlockNormalCube(var1, var2, var3);
+		int i1 = MathHelper.floor_double(this.posX);
+		int i2 = MathHelper.floor_double(this.posY + (double)this.getEyeHeight());
+		int i3 = MathHelper.floor_double(this.posZ);
+		return this.worldObj.isBlockNormalCube(i1, i2, i3);
 	}
 
-	public AxisAlignedBB getCollisionBox(Entity var1) {
+	public AxisAlignedBB getCollisionBox(Entity entity) {
 		return null;
 	}
 
@@ -706,30 +707,31 @@
 				this.entityRiderPitchDelta += 360.0D;
 			}
 
-			double var1 = this.entityRiderYawDelta * 0.5D;
-			double var3 = this.entityRiderPitchDelta * 0.5D;
-			float var5 = 10.0F;
-			if(var1 > (double)var5) {
-				var1 = (double)var5;
-			}
-
-			if(var1 < (double)(-var5)) {
-				var1 = (double)(-var5);
-			}
-
-			if(var3 > (double)var5) {
-				var3 = (double)var5;
-			}
-
-			if(var3 < (double)(-var5)) {
-				var3 = (double)(-var5);
-			}
-
-			this.entityRiderYawDelta -= var1;
-			this.entityRiderPitchDelta -= var3;
-			this.rotationYaw = (float)((double)this.rotationYaw + var1);
-			this.rotationPitch = (float)((double)this.rotationPitch + var3);
+			double d1 = this.entityRiderYawDelta * 0.5D;
+			double d3 = this.entityRiderPitchDelta * 0.5D;
+			float f5 = 10.0F;
+			if(d1 > (double)f5) {
+				d1 = (double)f5;
+			}
+
+			if(d1 < (double)(-f5)) {
+				d1 = (double)(-f5);
+			}
+
+			if(d3 > (double)f5) {
+				d3 = (double)f5;
+			}
+
+			if(d3 < (double)(-f5)) {
+				d3 = (double)(-f5);
+			}
+
+			this.entityRiderYawDelta -= d1;
+			this.entityRiderPitchDelta -= d3;
+			this.rotationYaw = (float)((double)this.rotationYaw + d1);
+			this.rotationPitch = (float)((double)this.rotationPitch + d3);
 		}
+
 	}
 
 	protected void updateRiderPosition() {
@@ -744,24 +746,25 @@
 		return (double)this.height * 0.75D;
 	}
 
-	public void mountEntity(Entity var1) {
+	public void mountEntity(Entity entity) {
 		this.entityRiderPitchDelta = 0.0D;
 		this.entityRiderYawDelta = 0.0D;
-		if(this.ridingEntity == var1) {
+		if(this.ridingEntity == entity) {
 			this.ridingEntity.riddenByEntity = null;
 			this.ridingEntity = null;
-			this.setLocationAndAngles(var1.posX, var1.boundingBox.minY + (double)var1.height, var1.posZ, this.rotationYaw, this.rotationPitch);
+			this.setLocationAndAngles(entity.posX, entity.boundingBox.minY + (double)entity.height, entity.posZ, this.rotationYaw, this.rotationPitch);
 		} else {
 			if(this.ridingEntity != null) {
 				this.ridingEntity.riddenByEntity = null;
 			}
 
-			if(var1.riddenByEntity != null) {
-				var1.riddenByEntity.ridingEntity = null;
+			if(entity.riddenByEntity != null) {
+				entity.riddenByEntity.ridingEntity = null;
 			}
 
-			this.ridingEntity = var1;
-			var1.riddenByEntity = this;
+			this.ridingEntity = entity;
+			entity.riddenByEntity = this;
 		}
+
 	}
 }
--- net/minecraft/src/ChunkPosition.java
+++ net/minecraft/src/ChunkPosition.java
@@ -5,18 +5,18 @@
 	public final int y;
 	public final int z;
 
-	public ChunkPosition(int var1, int var2, int var3) {
-		this.x = var1;
-		this.y = var2;
-		this.z = var3;
+	public ChunkPosition(int x, int y, int z) {
+		this.x = x;
+		this.y = y;
+		this.z = z;
 	}
 
-	public boolean equals(Object var1) {
-		if(!(var1 instanceof ChunkPosition)) {
+	public boolean equals(Object object) {
+		if(!(object instanceof ChunkPosition)) {
 			return false;
 		} else {
-			ChunkPosition var2 = (ChunkPosition)var1;
-			return var2.x == this.x && var2.y == this.y && var2.z == this.z;
+			ChunkPosition chunkPosition2 = (ChunkPosition)object;
+			return chunkPosition2.x == this.x && chunkPosition2.y == this.y && chunkPosition2.z == this.z;
 		}
 	}
 
--- /dev/null
+++ net/minecraft/src/ChunkProviderPopulateOperation.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class ChunkProviderPopulateOperation {
+	public ChunkProviderGenerate caller;
+	public IChunkProvider a;
+	public int x;
+	public int y;
+
+	public ChunkProviderPopulateOperation(ChunkProviderGenerate ab, IChunkProvider la, int integer3, int integer4) {
+		this.caller = ab;
+		this.a = la;
+		this.x = integer3;
+		this.y = integer4;
+	}
+}
--- net/minecraft/src/IInventory.java
+++ net/minecraft/src/IInventory.java
@@ -3,5 +3,5 @@
 public interface IInventory {
 	int getSizeInventory();
 
-	ItemStack getStackInSlot(int var1);
+	ItemStack getStackInSlot(int i1);
 }
--- net/minecraft/src/BlockSponge.java
+++ net/minecraft/src/BlockSponge.java
@@ -1,18 +1,19 @@
 package net.minecraft.src;
 
 public class BlockSponge extends Block {
-	protected BlockSponge(int var1) {
-		super(var1, Material.sponge);
+	protected BlockSponge(int id) {
+		super(id, Material.sponge);
 		this.blockIndexInTexture = 48;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		byte var5 = 2;
+	public void onBlockAdded(World world, int x, int y, int z) {
+		byte b5 = 2;
 
-		for(int var6 = var2 - var5; var6 <= var2 + var5; ++var6) {
-			for(int var7 = var3 - var5; var7 <= var3 + var5; ++var7) {
-				for(int var8 = var4 - var5; var8 <= var4 + var5; ++var8) {
-					if(var1.getBlockMaterial(var6, var7, var8) == Material.water) {
+		for(int i6 = x - b5; i6 <= x + b5; ++i6) {
+			for(int i7 = y - b5; i7 <= y + b5; ++i7) {
+				for(int i8 = z - b5; i8 <= z + b5; ++i8) {
+					if(world.getBlockMaterial(i6, i7, i8) == Material.water) {
+						;
 					}
 				}
 			}
@@ -20,13 +21,13 @@
 
 	}
 
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		byte var5 = 2;
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		byte b5 = 2;
 
-		for(int var6 = var2 - var5; var6 <= var2 + var5; ++var6) {
-			for(int var7 = var3 - var5; var7 <= var3 + var5; ++var7) {
-				for(int var8 = var4 - var5; var8 <= var4 + var5; ++var8) {
-					var1.notifyBlocksOfNeighborChange(var6, var7, var8, var1.getBlockId(var6, var7, var8));
+		for(int i6 = x - b5; i6 <= x + b5; ++i6) {
+			for(int i7 = y - b5; i7 <= y + b5; ++i7) {
+				for(int i8 = z - b5; i8 <= z + b5; ++i8) {
+					world.notifyBlocksOfNeighborChange(i6, i7, i8, world.getBlockId(i6, i7, i8));
 				}
 			}
 		}
--- net/minecraft/src/NBTTagByteArray.java
+++ net/minecraft/src/NBTTagByteArray.java
@@ -10,19 +10,19 @@
 	public NBTTagByteArray() {
 	}
 
-	public NBTTagByteArray(byte[] var1) {
-		this.byteArray = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeInt(this.byteArray.length);
-		var1.write(this.byteArray);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		int var2 = var1.readInt();
-		this.byteArray = new byte[var2];
-		var1.readFully(this.byteArray);
+	public NBTTagByteArray(byte[] byteArray) {
+		this.byteArray = byteArray;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeInt(this.byteArray.length);
+		dataOutput.write(this.byteArray);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		int i2 = dataInput.readInt();
+		this.byteArray = new byte[i2];
+		dataInput.readFully(this.byteArray);
 	}
 
 	public byte getType() {
--- net/minecraft/src/SpawnerAnimals.java
+++ net/minecraft/src/SpawnerAnimals.java
@@ -10,112 +10,105 @@
 	private Class[] entities;
 	private Set eligibleChunksForSpawning = new HashSet();
 
-	public SpawnerAnimals(int var1, Class var2, Class[] var3) {
-		this.maxSpawns = var1;
-		this.entityType = var2;
-		this.entities = var3;
-	}
-
-	public void onUpdate(World var1) {
-		int var2 = var1.countEntities(this.entityType);
-		if(var2 < this.maxSpawns) {
-			for(int var3 = 0; var3 < 3; ++var3) {
-				this.performSpawning(var1, 1, (IProgressUpdate)null);
-			}
-		}
-
-	}
-
-	protected ChunkPosition getRandomSpawningPointInChunk(World var1, int var2, int var3) {
-		int var4 = var2 + var1.rand.nextInt(16);
-		int var5 = var1.rand.nextInt(128);
-		int var6 = var3 + var1.rand.nextInt(16);
-		return new ChunkPosition(var4, var5, var6);
-	}
-
-	private int performSpawning(World var1, int var2, IProgressUpdate var3) {
+	public SpawnerAnimals(int integer, Class class2, Class[] arr) {
+		this.maxSpawns = integer;
+		this.entityType = class2;
+		this.entities = arr;
+	}
+
+	public void onUpdate(World cv) {
+	}
+
+	protected ChunkPosition getRandomSpawningPointInChunk(World cv, int integer2, int integer3) {
+		int i4 = integer2 + cv.rand.nextInt(16);
+		int i5 = cv.rand.nextInt(128);
+		int i6 = integer3 + cv.rand.nextInt(16);
+		return new ChunkPosition(i4, i5, i6);
+	}
+
+	private int performSpawning(World cv, int integer, IProgressUpdate b) {
 		this.eligibleChunksForSpawning.clear();
 
-		int var4;
-		int var7;
-		int var9;
-		int var10;
-		for(var4 = 0; var4 < var1.playerEntities.size(); ++var4) {
-			EntityPlayer var5 = (EntityPlayer)var1.playerEntities.get(var4);
-			int var6 = MathHelper.floor_double(var5.posX / 16.0D);
-			var7 = MathHelper.floor_double(var5.posZ / 16.0D);
-			byte var8 = 4;
+		int i4;
+		int i5;
+		int i6;
+		int i7;
+		for(i4 = 0; i4 < cv.playerEntities.size(); ++i4) {
+			EntityPlayer entityPlayer8 = (EntityPlayer)cv.playerEntities.get(i4);
+			int i9 = MathHelper.floor_double(entityPlayer8.posX / 16.0D);
+			i5 = MathHelper.floor_double(entityPlayer8.posZ / 16.0D);
+			byte b10 = 4;
 
-			for(var9 = -var8; var9 <= var8; ++var9) {
-				for(var10 = -var8; var10 <= var8; ++var10) {
-					this.eligibleChunksForSpawning.add(new ChunkCoordIntPair(var9 + var6, var10 + var7));
+			for(i6 = -b10; i6 <= b10; ++i6) {
+				for(i7 = -b10; i7 <= b10; ++i7) {
+					this.eligibleChunksForSpawning.add(new ChunkCoordIntPair(i6 + i9, i7 + i5));
 				}
 			}
 		}
 
-		var4 = 0;
-		Iterator var26 = this.eligibleChunksForSpawning.iterator();
+		i4 = 0;
+		Iterator iterator28 = this.eligibleChunksForSpawning.iterator();
 
 		while(true) {
-			ChunkCoordIntPair var27;
+			ChunkCoordIntPair chunkCoordIntPair29;
 			do {
-				if(!var26.hasNext()) {
-					return var4;
+				if(!iterator28.hasNext()) {
+					return i4;
 				}
 
-				var27 = (ChunkCoordIntPair)var26.next();
-			} while(var1.rand.nextInt(10) != 0);
-
-			var7 = var1.rand.nextInt(this.entities.length);
-			ChunkPosition var28 = this.getRandomSpawningPointInChunk(var1, var27.chunkXPos * 16, var27.chunkZPos * 16);
-			var9 = var28.x;
-			var10 = var28.y;
-			int var11 = var28.z;
-			if(var1.isBlockNormalCube(var9, var10, var11)) {
-				return 0;
-			}
-
-			if(var1.getBlockMaterial(var9, var10, var11) != Material.air) {
-				return 0;
-			}
-
-			for(int var12 = 0; var12 < 3; ++var12) {
-				int var13 = var9;
-				int var14 = var10;
-				int var15 = var11;
-				byte var16 = 6;
-
-				for(int var17 = 0; var17 < 2; ++var17) {
-					var13 += var1.rand.nextInt(var16) - var1.rand.nextInt(var16);
-					var14 += var1.rand.nextInt(1) - var1.rand.nextInt(1);
-					var15 += var1.rand.nextInt(var16) - var1.rand.nextInt(var16);
-					if(var1.isBlockNormalCube(var13, var14 - 1, var15) && !var1.isBlockNormalCube(var13, var14, var15) && !var1.getBlockMaterial(var13, var14, var15).getIsLiquid() && !var1.isBlockNormalCube(var13, var14 + 1, var15)) {
-						float var18 = (float)var13 + 0.5F;
-						float var19 = (float)var14;
-						float var20 = (float)var15 + 0.5F;
-						if(var1.getClosestPlayer((double)var18, (double)var19, (double)var20, 24.0D) == null) {
-							float var21 = var18 - (float)var1.spawnX;
-							float var22 = var19 - (float)var1.spawnY;
-							float var23 = var20 - (float)var1.spawnZ;
-							float var24 = var21 * var21 + var22 * var22 + var23 * var23;
-							if(var24 >= 576.0F) {
-								EntityLiving var29;
+				chunkCoordIntPair29 = (ChunkCoordIntPair)iterator28.next();
+			} while(cv.rand.nextInt(10) != 0);
+
+			i5 = cv.rand.nextInt(this.entities.length);
+			ChunkPosition chunkPosition30 = this.getRandomSpawningPointInChunk(cv, chunkCoordIntPair29.chunkXPos * 16, chunkCoordIntPair29.chunkZPos * 16);
+			i6 = chunkPosition30.x;
+			i7 = chunkPosition30.y;
+			int i11 = chunkPosition30.z;
+			if(cv.isBlockNormalCube(i6, i7, i11)) {
+				return 0;
+			}
+
+			if(cv.getBlockMaterial(i6, i7, i11) != Material.air) {
+				return 0;
+			}
+
+			for(int i12 = 0; i12 < 3; ++i12) {
+				int i13 = i6;
+				int i14 = i7;
+				int i15 = i11;
+				byte b16 = 6;
+
+				for(int i17 = 0; i17 < 2; ++i17) {
+					i13 += cv.rand.nextInt(b16) - cv.rand.nextInt(b16);
+					i14 += cv.rand.nextInt(1) - cv.rand.nextInt(1);
+					i15 += cv.rand.nextInt(b16) - cv.rand.nextInt(b16);
+					if(cv.isBlockNormalCube(i13, i14 - 1, i15) && !cv.isBlockNormalCube(i13, i14, i15) && !cv.getBlockMaterial(i13, i14, i15).getIsLiquid() && !cv.isBlockNormalCube(i13, i14 + 1, i15)) {
+						float f18 = (float)i13 + 0.5F;
+						float f19 = (float)i14;
+						float f20 = (float)i15 + 0.5F;
+						if(cv.getClosestPlayer((double)f18, (double)f19, (double)f20, 24.0D) == null) {
+							float f21 = f18 - (float)cv.spawnX;
+							float f22 = f19 - (float)cv.spawnY;
+							float f23 = f20 - (float)cv.spawnZ;
+							float f24 = f21 * f21 + f22 * f22 + f23 * f23;
+							if(f24 >= 576.0F) {
+								EntityLiving entityLiving25;
 								try {
-									var29 = (EntityLiving)this.entities[var7].getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
-								} catch (Exception var25) {
-									var25.printStackTrace();
-									return var4;
+									entityLiving25 = (EntityLiving)this.entities[i5].getConstructor(new Class[]{World.class}).newInstance(new Object[]{cv});
+								} catch (Exception exception27) {
+									exception27.printStackTrace();
+									return i4;
 								}
 
-								var29.setLocationAndAngles((double)var18, (double)var19, (double)var20, var1.rand.nextFloat() * 360.0F, 0.0F);
-								if(var29.getCanSpawnHere()) {
-									++var4;
-									var1.spawnEntityInWorld(var29);
-									if(var29 instanceof EntitySpider && var1.rand.nextInt(100) == 0) {
-										EntitySkeleton var30 = new EntitySkeleton(var1);
-										var30.setLocationAndAngles((double)var18, (double)var19, (double)var20, var29.rotationYaw, 0.0F);
-										var1.spawnEntityInWorld(var30);
-										var30.mountEntity(var29);
+								entityLiving25.setLocationAndAngles((double)f18, (double)f19, (double)f20, cv.rand.nextFloat() * 360.0F, 0.0F);
+								if(entityLiving25.getCanSpawnHere()) {
+									++i4;
+									cv.spawnEntityInWorld(entityLiving25);
+									if(entityLiving25 instanceof EntitySpider && cv.rand.nextInt(100) == 0) {
+										EntitySkeleton entitySkeleton26 = new EntitySkeleton(cv);
+										entitySkeleton26.setLocationAndAngles((double)f18, (double)f19, (double)f20, entityLiving25.rotationYaw, 0.0F);
+										cv.spawnEntityInWorld(entitySkeleton26);
+										entitySkeleton26.mountEntity(entityLiving25);
 									}
 								}
 							}
--- /dev/null
+++ net/minecraft/src/BlockEssenceFountain.java
@@ -1,0 +1,71 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockEssenceFountain extends BlockContainer {
+	public BlockEssenceFountain(int id, Material material) {
+		super(id, material);
+		this.blockIndexInTexture = 1;
+		this.setTickOnLoad(true);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.25F, 1.0F);
+	}
+
+	protected TileEntity getBlockEntity() {
+		return new TileEntityEssenceFountain();
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 14;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return true;
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		TileEntityEssenceFountain tileEntityEssenceFountain6 = (TileEntityEssenceFountain)world.getBlockTileEntity(x, y, z);
+		if(tileEntityEssenceFountain6.getStackInSlot(0).stackSize != 0) {
+			if(++tileEntityEssenceFountain6.counter >= 2 && random.nextInt(3) == 0) {
+				if(tileEntityEssenceFountain6.getStackInSlot(0).stackSize == 64) {
+					world.markBlocksDirty(x, y, z, x, y, z);
+				}
+
+				tileEntityEssenceFountain6.decrStackSize(0, 1);
+				tileEntityEssenceFountain6.counter = 0;
+				if(tileEntityEssenceFountain6.getStackInSlot(0).stackSize == 0) {
+					for(int i7 = 0; i7 < 12; ++i7) {
+						world.spawnParticle("smoke", (double)x + random.nextDouble(), (double)y + 0.4D, (double)z + random.nextDouble(), 0.0D, 0.1D, 0.0D);
+						world.markBlocksDirty(x, y, z, x, y, z);
+					}
+				}
+			}
+
+		}
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+		TileEntityEssenceFountain tileEntityEssenceFountain6 = (TileEntityEssenceFountain)worldObj.getBlockTileEntity(x, y, z);
+		if(tileEntityEssenceFountain6.getStackInSlot(0).stackSize != 0) {
+			if(rand.nextInt(2) == 0) {
+				worldObj.spawnParticle("snowballpoof", (double)x + rand.nextDouble(), (double)y + 0.4D, (double)z + rand.nextDouble(), 0.0D, 0.0D, 0.0D);
+			}
+
+			if(rand.nextInt(3) == 0) {
+				for(int i7 = y + 1; i7 < Math.min(128, tileEntityEssenceFountain6.getStackInSlot(0).stackSize + y) && worldObj.getBlockId(x, i7, z) == 0; ++i7) {
+					if(rand.nextInt(6) == 0) {
+						worldObj.spawnParticle("splash", (double)x + rand.nextDouble(), (double)i7 + rand.nextDouble(), (double)z + rand.nextDouble(), 0.0D, 0.0D, 0.0D);
+					}
+				}
+			}
+
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/ItemHoursLongPastVI.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+public class ItemHoursLongPastVI extends Item {
+	public ItemHoursLongPastVI(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		worldObj.playSoundAtEntity(entityPlayer, "ext.notif", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+		return itemStack;
+	}
+}
--- /dev/null
+++ net/minecraft/src/ExtEvents.java
@@ -1,0 +1,58 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+import net.minecraft.server.MinecraftServer;
+
+public class ExtEvents {
+	public static Random rand = new Random();
+	public static boolean bossfightInProgress = false;
+	public static String bossname = "";
+	public static EntityGiantBoss bossRef = null;
+
+	public static void func_8350_83tzYQsl532f174MjmlcPkjk23gJ8zYoq3iHGz9L24S833eMHe6T0ERI9mhI(EntityPlayer nh, World cv) {
+	}
+
+	public static void WorldTick(World cv) {
+		if(bossfightInProgress && (bossRef == null || bossRef.isDead || bossRef.worldObj != cv)) {
+			ExtLogger.i("boss fight end");
+			bossfightInProgress = false;
+			bossRef = null;
+		}
+
+	}
+
+	public static void func_8354_5c1W3RO818Jo56y7WvL3Zfv795Z2CO9306vIP3PL799hsL1Fd53UQPBnwnjK(EntityPlayer nh, World cv) {
+	}
+
+	public static EntityGiantBoss SpawnGiant(double double1, double double2, double double3, World cv) {
+		EntityGiantBoss entityGiantBoss7 = new EntityGiantBoss(cv, (int)cv.GetMilestone());
+		entityGiantBoss7.setLocationAndAngles(double1, double2, double3, rand.nextFloat() * 360.0F, 0.0F);
+		cv.spawnEntityInWorld(entityGiantBoss7);
+		MinecraftServer.field_6098_47T69Px11B2sK2WzDkgABw58BK6Bs11QIk6TmoU8Y89Fs8WTSdr6zO59qDz1.configManager.sendPacketToAllPlayers(new Packet24MobSpawn(entityGiantBoss7));
+		return entityGiantBoss7;
+	}
+
+	public static void CueSpawnBossFrom(int integer1, int integer2, World cv) {
+		if(!cv.multiplayerWorld && !bossfightInProgress) {
+			Random random3 = new Random();
+			int i4 = integer1 + 32 * (random3.nextInt(3) - 1);
+			int i5 = integer2 + 32 * (random3.nextInt(3) - 1);
+			if(i4 == integer1 && i5 == integer2) {
+				i5 += 32;
+			}
+
+			bossname = "Giant of " + GuiIngame.Namegen2(cv.randomSeed, i4 / 32, i5 / 32);
+			bossRef = SpawnGiant((double)i4, 100.0D, (double)i5, cv);
+			System.out.println("spawned at " + i4 + ", " + i5 + ", health: " + bossRef.health);
+			bossfightInProgress = true;
+		}
+
+	}
+
+	public static void GiantBossKilled(EntityGiantBoss er) {
+		bossfightInProgress = false;
+		bossRef = null;
+		bossname = "";
+	}
+}
--- net/minecraft/src/ItemBow.java
+++ net/minecraft/src/ItemBow.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
 public class ItemBow extends Item {
-	public ItemBow(int var1) {
-		super(var1);
+	public ItemBow(int itemID) {
+		super(itemID);
 		this.maxStackSize = 1;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockGlowingCube.java
@@ -1,0 +1,88 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockGlowingCube extends Block {
+	int renderMode = 1;
+
+	public BlockGlowingCube(int integer1, int integer2, int integer3) {
+		super(integer1, integer2, Material.rock);
+		this.setTickOnLoad(true);
+		this.renderMode = 0;
+	}
+
+	public BlockGlowingCube(int id, int blockIndex, Material material) {
+		super(id, blockIndex, material);
+		this.setTickOnLoad(true);
+		this.renderMode = 0;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return true;
+	}
+
+	public int getRenderType() {
+		return this.renderMode;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return true;
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		super.updateTick(world, x, y, z, random);
+		if(world.getBlockMetadata(x, y, z) == 0) {
+			this.onBlockAdded(world, x, y, z);
+		}
+
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(this.h(world, x, y, z)) {
+			int i6 = world.getBlockMetadata(x, y, z);
+			boolean z7 = false;
+			if(!world.isBlockNormalCube(x - 1, y, z) && i6 == 1) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x + 1, y, z) && i6 == 2) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z - 1) && i6 == 3) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z + 1) && i6 == 4) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y - 1, z) && i6 == 5) {
+				z7 = true;
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+				world.setBlockWithNotify(x, y, z, 0);
+			}
+		}
+
+	}
+
+	private boolean h(World cv, int integer2, int integer3, int integer4) {
+		if(!this.canPlaceBlockAt(cv, integer2, integer3, integer4)) {
+			this.dropBlockAsItem(cv, integer2, integer3, integer4, cv.getBlockMetadata(integer2, integer3, integer4));
+			cv.setBlockWithNotify(integer2, integer3, integer4, 0);
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+	}
+}
--- /dev/null
+++ net/minecraft/src/UnknownClass2.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class UnknownClass2 {
+	public int field_6745_6j5Dy9SarNkK3tTv1QPZpEN80ODNXyn386cN0x6035a55Dxh9Aha449QIO79;
+	public int field_6746_37vbhorRAcm6624210m49Tj3lU5DHNgZEXCStU11sV8cM8z2QkSicObzd41c;
+	public int field_6747_7m7F166KMrh29839yDS442CbxsReqI8w9IA54kVn9KuDd747OVrQzOmfRmU8;
+	public int field_6744_8B4sB8QunwjwGUv0rea4985I8CHy20QQeDT15lvWaY2485272L6Kc9z2g6H4;
+
+	public UnknownClass2(int integer1, int integer2, int integer3, int integer4) {
+		this.field_6745_6j5Dy9SarNkK3tTv1QPZpEN80ODNXyn386cN0x6035a55Dxh9Aha449QIO79 = integer1;
+		this.field_6746_37vbhorRAcm6624210m49Tj3lU5DHNgZEXCStU11sV8cM8z2QkSicObzd41c = integer2;
+		this.field_6747_7m7F166KMrh29839yDS442CbxsReqI8w9IA54kVn9KuDd747OVrQzOmfRmU8 = integer3;
+		this.field_6744_8B4sB8QunwjwGUv0rea4985I8CHy20QQeDT15lvWaY2485272L6Kc9z2g6H4 = integer4;
+	}
+}
--- /dev/null
+++ net/minecraft/src/HandlerSetCheckpointUnknownClass.java
@@ -1,0 +1,51 @@
+package net.minecraft.src;
+
+public class HandlerSetCheckpointUnknownClass {
+	public XYZv field_7416_4SByMfUkg443KpRgFopg6iPm58YJsTJhC7lebrKgXtTiQGW407348O8ycspi;
+	public XYZv field_7414_9BIo32XcGsqOrPL2DY1AGaaRY746qTQ1ir0y1s60wA75o9zO2a1b3Hxz9v65;
+	public XYZv field_7417_9FnMqHXL8XufSH049M875jZDaOC765J4nLfC2m03ObP2Bpk84W50fz0l8nmd;
+	public XYZv field_7413_3LnefM7Q5DKIClh4L5LPUS887Ob9vADMMYv08d642f419Xgr256400F5F6yB;
+	public String field_7415_37b78Qu1M4f8E0o0HbrqHpAy2o640n1dab4dYH8ON28bVA6NgF8UYDOZK698 = "---";
+
+	public HandlerSetCheckpointUnknownClass(String string, XYZv bc2, XYZv bc3, XYZv bc4, XYZv bc5) {
+		this.field_7415_37b78Qu1M4f8E0o0HbrqHpAy2o640n1dab4dYH8ON28bVA6NgF8UYDOZK698 = string;
+		this.field_7416_4SByMfUkg443KpRgFopg6iPm58YJsTJhC7lebrKgXtTiQGW407348O8ycspi = bc2;
+		this.field_7414_9BIo32XcGsqOrPL2DY1AGaaRY746qTQ1ir0y1s60wA75o9zO2a1b3Hxz9v65 = bc3;
+		this.field_7417_9FnMqHXL8XufSH049M875jZDaOC765J4nLfC2m03ObP2Bpk84W50fz0l8nmd = bc4;
+		this.field_7413_3LnefM7Q5DKIClh4L5LPUS887Ob9vADMMYv08d642f419Xgr256400F5F6yB = bc5;
+	}
+
+	public boolean func_7412_7P88XhekSHZ0Ob755Six1j6vXIMr9WCOw2yB4X62GpvoKw3W7tF3diMIm9DH(EntityPlayer nh) {
+		return (double)this.field_7416_4SByMfUkg443KpRgFopg6iPm58YJsTJhC7lebrKgXtTiQGW407348O8ycspi.x <= nh.posX && nh.posX <= (double)this.field_7414_9BIo32XcGsqOrPL2DY1AGaaRY746qTQ1ir0y1s60wA75o9zO2a1b3Hxz9v65.x && (double)this.field_7416_4SByMfUkg443KpRgFopg6iPm58YJsTJhC7lebrKgXtTiQGW407348O8ycspi.y <= nh.posY && nh.posY <= (double)this.field_7414_9BIo32XcGsqOrPL2DY1AGaaRY746qTQ1ir0y1s60wA75o9zO2a1b3Hxz9v65.y && (double)this.field_7416_4SByMfUkg443KpRgFopg6iPm58YJsTJhC7lebrKgXtTiQGW407348O8ycspi.z <= nh.posZ && nh.posZ <= (double)this.field_7414_9BIo32XcGsqOrPL2DY1AGaaRY746qTQ1ir0y1s60wA75o9zO2a1b3Hxz9v65.z;
+	}
+
+	public void func_7411_5dtEsL9RRN31xqtz2ZPRO8m5QKNU34OoIaWW7b18H4JzivJaMkqQQDozO34o(EntityPlayer nh) {
+		double d2 = (double)this.field_7417_9FnMqHXL8XufSH049M875jZDaOC765J4nLfC2m03ObP2Bpk84W50fz0l8nmd.x + (nh.posX - (double)this.field_7416_4SByMfUkg443KpRgFopg6iPm58YJsTJhC7lebrKgXtTiQGW407348O8ycspi.x);
+		double d4 = (double)this.field_7417_9FnMqHXL8XufSH049M875jZDaOC765J4nLfC2m03ObP2Bpk84W50fz0l8nmd.y + (nh.posY - (double)this.field_7416_4SByMfUkg443KpRgFopg6iPm58YJsTJhC7lebrKgXtTiQGW407348O8ycspi.y);
+		double d6 = (double)this.field_7417_9FnMqHXL8XufSH049M875jZDaOC765J4nLfC2m03ObP2Bpk84W50fz0l8nmd.z + (nh.posZ - (double)this.field_7416_4SByMfUkg443KpRgFopg6iPm58YJsTJhC7lebrKgXtTiQGW407348O8ycspi.z);
+		nh.posX = d2;
+		nh.posY = d4 + 0.001D;
+		nh.posZ = d6;
+		nh.setPosition(d2, d4, d6);
+	}
+
+	public HandlerSetCheckpointUnknownClass2 func_7410_2wc5N0Pqj2Z6w394D8gzdEx5sk2lUSw5IsRr66A0OQgv5NH8FkRRb969d3ma(EntityPlayer nh) {
+		double d2 = (double)this.field_7417_9FnMqHXL8XufSH049M875jZDaOC765J4nLfC2m03ObP2Bpk84W50fz0l8nmd.x + (nh.posX - (double)this.field_7416_4SByMfUkg443KpRgFopg6iPm58YJsTJhC7lebrKgXtTiQGW407348O8ycspi.x);
+		double d4 = (double)this.field_7417_9FnMqHXL8XufSH049M875jZDaOC765J4nLfC2m03ObP2Bpk84W50fz0l8nmd.y + (nh.posY - (double)this.field_7416_4SByMfUkg443KpRgFopg6iPm58YJsTJhC7lebrKgXtTiQGW407348O8ycspi.y);
+		double d6 = (double)this.field_7417_9FnMqHXL8XufSH049M875jZDaOC765J4nLfC2m03ObP2Bpk84W50fz0l8nmd.z + (nh.posZ - (double)this.field_7416_4SByMfUkg443KpRgFopg6iPm58YJsTJhC7lebrKgXtTiQGW407348O8ycspi.z);
+		return new HandlerSetCheckpointUnknownClass2(d2, d4, d6);
+	}
+
+	public static HandlerSetCheckpointUnknownClass func_7408_9MnTMZ7x9208FiEtnb3r3xTc65ty3XG34R938zLG8ngDRixV2JG6yQ271IE2(NBTTagCompound kj, String string) {
+		return new HandlerSetCheckpointUnknownClass(string, XYZv.func_7450_9P2j0BPNZ4oB46oL261cWG1XsFX11ZShxyiW2KoP1aciOr360yndcfSWt79C(kj, "AP1_1"), XYZv.func_7450_9P2j0BPNZ4oB46oL261cWG1XsFX11ZShxyiW2KoP1aciOr360yndcfSWt79C(kj, "AP1_2"), XYZv.func_7450_9P2j0BPNZ4oB46oL261cWG1XsFX11ZShxyiW2KoP1aciOr360yndcfSWt79C(kj, "AP2_1"), XYZv.func_7450_9P2j0BPNZ4oB46oL261cWG1XsFX11ZShxyiW2KoP1aciOr360yndcfSWt79C(kj, "AP2_2"));
+	}
+
+	public NBTTagCompound func_7409_05gd7Pk1iguCvxEEh94yzW42f5PaNo8tU6KPZsgzRs8ORT0p9Fi42TzlRaLI() {
+		NBTTagCompound nBTTagCompound1 = new NBTTagCompound();
+		this.field_7416_4SByMfUkg443KpRgFopg6iPm58YJsTJhC7lebrKgXtTiQGW407348O8ycspi.func_7455_7eX0Nb674apFqHpK9mPH2q093sH4Wt8UVqYI3885u9iynKe39Xotu3NuBvk0(nBTTagCompound1, "AP1_1");
+		this.field_7414_9BIo32XcGsqOrPL2DY1AGaaRY746qTQ1ir0y1s60wA75o9zO2a1b3Hxz9v65.func_7455_7eX0Nb674apFqHpK9mPH2q093sH4Wt8UVqYI3885u9iynKe39Xotu3NuBvk0(nBTTagCompound1, "AP1_2");
+		this.field_7417_9FnMqHXL8XufSH049M875jZDaOC765J4nLfC2m03ObP2Bpk84W50fz0l8nmd.func_7455_7eX0Nb674apFqHpK9mPH2q093sH4Wt8UVqYI3885u9iynKe39Xotu3NuBvk0(nBTTagCompound1, "AP2_1");
+		this.field_7413_3LnefM7Q5DKIClh4L5LPUS887Ob9vADMMYv08d642f419Xgr256400F5F6yB.func_7455_7eX0Nb674apFqHpK9mPH2q093sH4Wt8UVqYI3885u9iynKe39Xotu3NuBvk0(nBTTagCompound1, "AP2_2");
+		return nBTTagCompound1;
+	}
+}
--- net/minecraft/src/ServerGUI.java
+++ net/minecraft/src/ServerGUI.java
@@ -1,8 +1,10 @@
 package net.minecraft.src;
 
 import java.awt.BorderLayout;
+import java.awt.Color;
 import java.awt.Component;
 import java.awt.Dimension;
+import java.awt.Font;
 import java.util.logging.Logger;
 import javax.swing.JComponent;
 import javax.swing.JFrame;
@@ -13,80 +15,94 @@
 import javax.swing.UIManager;
 import javax.swing.border.EtchedBorder;
 import javax.swing.border.TitledBorder;
+
 import net.minecraft.server.MinecraftServer;
 
 public class ServerGUI extends JComponent implements ICommandListener {
 	public static Logger logger = Logger.getLogger("Minecraft");
 	private MinecraftServer mcServer;
+	private Font arialFont = null;
+	private Font consolasFont = null;
 
-	public static void initGui(MinecraftServer var0) {
+	public static void initGui(MinecraftServer minecraftServer) {
 		try {
 			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
-		} catch (Exception var3) {
+		} catch (Exception exception3) {
 		}
 
-		ServerGUI var1 = new ServerGUI(var0);
-		JFrame var2 = new JFrame("Minecraft server");
-		var2.add(var1);
-		var2.pack();
-		var2.setLocationRelativeTo((Component)null);
-		var2.setVisible(true);
-		var2.addWindowListener(new ServerWindowAdapter(var0));
+		ServerGUI serverGUI1 = new ServerGUI(minecraftServer);
+		JFrame jFrame2 = new JFrame("Minecraft server");
+		jFrame2.add(serverGUI1);
+		jFrame2.pack();
+		jFrame2.setLocationRelativeTo((Component)null);
+		jFrame2.setVisible(true);
+		jFrame2.addWindowListener(new ServerWindowAdapter(minecraftServer));
 	}
 
-	public ServerGUI(MinecraftServer var1) {
-		this.mcServer = var1;
+	public ServerGUI(MinecraftServer minecraftServer) {
+		this.mcServer = minecraftServer;
 		this.setPreferredSize(new Dimension(854, 480));
 		this.setLayout(new BorderLayout());
+		this.arialFont = Font.getFont("Arial");
+		this.consolasFont = new Font("Consolas", 0, 12);
 
 		try {
 			this.add(this.getLogComponent(), "Center");
 			this.add(this.getStatsComponent(), "West");
-		} catch (Exception var3) {
-			var3.printStackTrace();
+		} catch (Exception exception3) {
+			exception3.printStackTrace();
 		}
 
 	}
 
 	private JComponent getStatsComponent() {
-		JPanel var1 = new JPanel(new BorderLayout());
-		var1.add(new GuiStatsComponent(), "North");
-		var1.add(this.getPlayerListComponent(), "Center");
-		var1.setBorder(new TitledBorder(new EtchedBorder(), "Stats"));
-		return var1;
+		JPanel jPanel1 = new JPanel(new BorderLayout());
+		jPanel1.add(new GuiStatsComponent(), "North");
+		jPanel1.add(this.getPlayerListComponent(), "Center");
+		jPanel1.setBorder(new TitledBorder(new EtchedBorder(), "Stats"));
+		return jPanel1;
 	}
 
 	private JComponent getPlayerListComponent() {
-		PlayerListBox var1 = new PlayerListBox(this.mcServer);
-		JScrollPane var2 = new JScrollPane(var1, 22, 30);
-		var2.setBorder(new TitledBorder(new EtchedBorder(), "Players"));
-		return var2;
+		PlayerListBox playerListBox1 = new PlayerListBox(this.mcServer);
+		JScrollPane jScrollPane2 = new JScrollPane(playerListBox1, 22, 30);
+		TitledBorder titledBorder3 = new TitledBorder(new EtchedBorder(), "Players");
+		jScrollPane2.setBorder(titledBorder3);
+		playerListBox1.setBackground(new Color(1315860));
+		playerListBox1.setForeground(Color.WHITE);
+		return jScrollPane2;
 	}
 
 	private JComponent getLogComponent() {
-		JPanel var1 = new JPanel(new BorderLayout());
-		JTextArea var2 = new JTextArea();
-		logger.addHandler(new GuiLogOutputHandler(var2));
-		JScrollPane var3 = new JScrollPane(var2, 22, 30);
-		var2.setEditable(false);
-		JTextField var4 = new JTextField();
-		var4.addActionListener(new ServerGuiCommandListener(this, var4));
-		var2.addFocusListener(new ServerGuiFocusadapter(this));
-		var1.add(var3, "Center");
-		var1.add(var4, "South");
-		var1.setBorder(new TitledBorder(new EtchedBorder(), "Log and chat"));
-		return var1;
+		JPanel jPanel1 = new JPanel(new BorderLayout());
+		JTextArea jTextArea2 = new JTextArea();
+		logger.addHandler(new GuiLogOutputHandler(jTextArea2));
+		JScrollPane jScrollPane3 = new JScrollPane(jTextArea2, 22, 30);
+		jTextArea2.setEditable(false);
+		if(this.consolasFont != null) {
+			jTextArea2.setFont(this.consolasFont);
+		}
+
+		jTextArea2.setBackground(new Color(20, 20, 20, 255));
+		jTextArea2.setForeground(new Color(255, 255, 255, 255));
+		JTextField jTextField4 = new JTextField();
+		jTextField4.addActionListener(new ServerGuiCommandListener(this, jTextField4));
+		jTextArea2.addFocusListener(new ServerGuiFocusadapter(this));
+		jPanel1.add(jScrollPane3, "Center");
+		jPanel1.add(jTextField4, "South");
+		jPanel1.setBorder(new TitledBorder(new EtchedBorder(), "Log and chat"));
+		return jPanel1;
 	}
 
-	public void addHelpCommandMessage(String var1) {
-		logger.info(var1);
+	public void addHelpCommandMessage(String helpCommandMessage) {
+		logger.info(helpCommandMessage);
 	}
 
 	public String getUsername() {
 		return "CONSOLE";
 	}
 
-	static MinecraftServer getMinecraftServer(ServerGUI var0) {
-		return var0.mcServer;
+	static MinecraftServer func_6005_01v3X1VDA7jEz2CWqke40sSQ50VsZo1DeEXLC5tt262yT3em849RxSjfbBu8(ServerGUI _3X5i5Q9H6jHqn8Z1YN0S54rHVZxQ9l6ALxWf2439uwB1909nA5Qygr0A8aEsKhp77FcDHN1mTKZK90975aoz3BWv13v7HErY2gqLL) {
+		return _3X5i5Q9H6jHqn8Z1YN0S54rHVZxQ9l6ALxWf2439uwB1909nA5Qygr0A8aEsKhp77FcDHN1mTKZK90975aoz3BWv13v7HErY2gqLL.mcServer;
 	}
 }
--- net/minecraft/src/ConsoleLogManager.java
+++ net/minecraft/src/ConsoleLogManager.java
@@ -9,18 +9,18 @@
 	public static Logger logger = Logger.getLogger("Minecraft");
 
 	public static void init() {
-		ConsoleLogFormatter var0 = new ConsoleLogFormatter();
+		ConsoleLogFormatter consoleLogFormatter0 = new ConsoleLogFormatter();
 		logger.setUseParentHandlers(false);
-		ConsoleHandler var1 = new ConsoleHandler();
-		var1.setFormatter(var0);
-		logger.addHandler(var1);
+		ConsoleHandler consoleHandler1 = new ConsoleHandler();
+		consoleHandler1.setFormatter(consoleLogFormatter0);
+		logger.addHandler(consoleHandler1);
 
 		try {
-			FileHandler var2 = new FileHandler("server.log");
-			var2.setFormatter(var0);
-			logger.addHandler(var2);
-		} catch (Exception var3) {
-			logger.log(Level.WARNING, "Failed to log to server.log", var3);
+			FileHandler fileHandler2 = new FileHandler("server.log");
+			fileHandler2.setFormatter(consoleLogFormatter0);
+			logger.addHandler(fileHandler2);
+		} catch (Exception exception3) {
+			logger.log(Level.WARNING, "Failed to log to server.log", exception3);
 		}
 
 	}
--- net/minecraft/src/ChunkProviderLoadOrGenerate.java
+++ net/minecraft/src/ChunkProviderLoadOrGenerate.java
@@ -12,170 +12,170 @@
 	int lastQueriedChunkZPos = -999999999;
 	private Chunk lastQueriedChunk;
 
-	public ChunkProviderLoadOrGenerate(World var1, IChunkLoader var2, IChunkProvider var3) {
-		this.blankChunk = new Chunk(var1, new byte[-Short.MIN_VALUE], 0, 0);
+	public ChunkProviderLoadOrGenerate(World world, IChunkLoader chunkLoader, IChunkProvider chunkProvider) {
+		this.blankChunk = new Chunk(world, new byte[32768], 0, 0);
 		this.blankChunk.isChunkRendered = true;
 		this.blankChunk.neverSave = true;
-		this.worldObj = var1;
-		this.chunkLoader = var2;
-		this.chunkProvider = var3;
+		this.worldObj = world;
+		this.chunkLoader = chunkLoader;
+		this.chunkProvider = chunkProvider;
 	}
 
-	public boolean chunkExists(int var1, int var2) {
-		if(var1 == this.lastQueriedChunkXPos && var2 == this.lastQueriedChunkZPos && this.lastQueriedChunk != null) {
+	public boolean chunkExists(int x, int z) {
+		if(x == this.lastQueriedChunkXPos && z == this.lastQueriedChunkZPos && this.lastQueriedChunk != null) {
 			return true;
 		} else {
-			int var3 = var1 & 31;
-			int var4 = var2 & 31;
-			int var5 = var3 + var4 * 32;
-			return this.chunks[var5] != null && (this.chunks[var5] == this.blankChunk || this.chunks[var5].isAtLocation(var1, var2));
+			int i3 = x & 31;
+			int i4 = z & 31;
+			int i5 = i3 + i4 * 32;
+			return this.chunks[i5] != null && (this.chunks[i5] == this.blankChunk || this.chunks[i5].isAtLocation(x, z));
 		}
 	}
 
-	public Chunk provideChunk(int var1, int var2) {
-		if(var1 == this.lastQueriedChunkXPos && var2 == this.lastQueriedChunkZPos && this.lastQueriedChunk != null) {
+	public Chunk provideChunk(int x, int z) {
+		if(x == this.lastQueriedChunkXPos && z == this.lastQueriedChunkZPos && this.lastQueriedChunk != null) {
 			return this.lastQueriedChunk;
 		} else {
-			int var3 = var1 & 31;
-			int var4 = var2 & 31;
-			int var5 = var3 + var4 * 32;
-			if(!this.chunkExists(var1, var2)) {
-				if(this.chunks[var5] != null) {
-					this.chunks[var5].onChunkUnload();
-					this.saveChunk(this.chunks[var5]);
-					this.saveExtraChunkData(this.chunks[var5]);
+			int i3 = x & 31;
+			int i4 = z & 31;
+			int i5 = i3 + i4 * 32;
+			if(!this.chunkExists(x, z)) {
+				if(this.chunks[i5] != null) {
+					this.chunks[i5].onChunkUnload();
+					this.saveChunk(this.chunks[i5]);
+					this.saveExtraChunkData(this.chunks[i5]);
 				}
 
-				Chunk var6 = this.getChunkAt(var1, var2);
-				if(var6 == null) {
+				Chunk chunk6 = this.getChunkAt(x, z);
+				if(chunk6 == null) {
 					if(this.chunkProvider == null) {
-						var6 = this.blankChunk;
+						chunk6 = this.blankChunk;
 					} else {
-						var6 = this.chunkProvider.provideChunk(var1, var2);
+						chunk6 = this.chunkProvider.provideChunk(x, z);
 					}
 				}
 
-				this.chunks[var5] = var6;
-				if(this.chunks[var5] != null) {
-					this.chunks[var5].onChunkLoad();
-				}
-
-				if(!this.chunks[var5].isTerrainPopulated && this.chunkExists(var1 + 1, var2 + 1) && this.chunkExists(var1, var2 + 1) && this.chunkExists(var1 + 1, var2)) {
-					this.populate(this, var1, var2);
-				}
-
-				if(this.chunkExists(var1 - 1, var2) && !this.provideChunk(var1 - 1, var2).isTerrainPopulated && this.chunkExists(var1 - 1, var2 + 1) && this.chunkExists(var1, var2 + 1) && this.chunkExists(var1 - 1, var2)) {
-					this.populate(this, var1 - 1, var2);
-				}
-
-				if(this.chunkExists(var1, var2 - 1) && !this.provideChunk(var1, var2 - 1).isTerrainPopulated && this.chunkExists(var1 + 1, var2 - 1) && this.chunkExists(var1, var2 - 1) && this.chunkExists(var1 + 1, var2)) {
-					this.populate(this, var1, var2 - 1);
-				}
-
-				if(this.chunkExists(var1 - 1, var2 - 1) && !this.provideChunk(var1 - 1, var2 - 1).isTerrainPopulated && this.chunkExists(var1 - 1, var2 - 1) && this.chunkExists(var1, var2 - 1) && this.chunkExists(var1 - 1, var2)) {
-					this.populate(this, var1 - 1, var2 - 1);
+				this.chunks[i5] = chunk6;
+				if(this.chunks[i5] != null) {
+					this.chunks[i5].onChunkLoad();
+				}
+
+				if(!this.chunks[i5].isTerrainPopulated && this.chunkExists(x + 1, z + 1) && this.chunkExists(x, z + 1) && this.chunkExists(x + 1, z)) {
+					this.populate(this, x, z);
+				}
+
+				if(this.chunkExists(x - 1, z) && !this.provideChunk(x - 1, z).isTerrainPopulated && this.chunkExists(x - 1, z + 1) && this.chunkExists(x, z + 1) && this.chunkExists(x - 1, z)) {
+					this.populate(this, x - 1, z);
+				}
+
+				if(this.chunkExists(x, z - 1) && !this.provideChunk(x, z - 1).isTerrainPopulated && this.chunkExists(x + 1, z - 1) && this.chunkExists(x, z - 1) && this.chunkExists(x + 1, z)) {
+					this.populate(this, x, z - 1);
+				}
+
+				if(this.chunkExists(x - 1, z - 1) && !this.provideChunk(x - 1, z - 1).isTerrainPopulated && this.chunkExists(x - 1, z - 1) && this.chunkExists(x, z - 1) && this.chunkExists(x - 1, z)) {
+					this.populate(this, x - 1, z - 1);
 				}
 			}
 
-			this.lastQueriedChunkXPos = var1;
-			this.lastQueriedChunkZPos = var2;
-			this.lastQueriedChunk = this.chunks[var5];
-			return this.chunks[var5];
+			this.lastQueriedChunkXPos = x;
+			this.lastQueriedChunkZPos = z;
+			this.lastQueriedChunk = this.chunks[i5];
+			return this.chunks[i5];
 		}
 	}
 
-	private Chunk getChunkAt(int var1, int var2) {
+	private Chunk getChunkAt(int x, int z) {
 		if(this.chunkLoader == null) {
 			return null;
 		} else {
 			try {
-				Chunk var3 = this.chunkLoader.loadChunk(this.worldObj, var1, var2);
-				if(var3 != null) {
-					var3.lastSaveTime = this.worldObj.worldTime;
+				Chunk chunk3 = this.chunkLoader.loadChunk(this.worldObj, x, z);
+				if(chunk3 != null) {
+					chunk3.lastSaveTime = this.worldObj.worldTime;
 				}
 
-				return var3;
-			} catch (Exception var4) {
-				var4.printStackTrace();
+				return chunk3;
+			} catch (Exception exception4) {
+				exception4.printStackTrace();
 				return null;
 			}
 		}
 	}
 
-	private void saveExtraChunkData(Chunk var1) {
-		if(this.chunkLoader != null) {
-			try {
-				this.chunkLoader.saveExtraChunkData(this.worldObj, var1);
-			} catch (Exception var3) {
-				var3.printStackTrace();
-			}
-
-		}
-	}
-
-	private void saveChunk(Chunk var1) {
-		if(this.chunkLoader != null) {
-			try {
-				var1.lastSaveTime = this.worldObj.worldTime;
-				this.chunkLoader.saveChunk(this.worldObj, var1);
-			} catch (IOException var3) {
-				var3.printStackTrace();
-			}
-
-		}
-	}
-
-	public void populate(IChunkProvider var1, int var2, int var3) {
-		Chunk var4 = this.provideChunk(var2, var3);
-		if(!var4.isTerrainPopulated) {
-			var4.isTerrainPopulated = true;
+	private void saveExtraChunkData(Chunk chunk) {
+		if(this.chunkLoader != null) {
+			try {
+				this.chunkLoader.saveExtraChunkData(this.worldObj, chunk);
+			} catch (Exception exception3) {
+				exception3.printStackTrace();
+			}
+		}
+
+	}
+
+	private void saveChunk(Chunk chunk) {
+		if(this.chunkLoader != null) {
+			try {
+				chunk.lastSaveTime = this.worldObj.worldTime;
+				this.chunkLoader.saveChunk(this.worldObj, chunk);
+			} catch (IOException iOException3) {
+				iOException3.printStackTrace();
+			}
+		}
+
+	}
+
+	public void populate(IChunkProvider chunkProvider, int x, int z) {
+		Chunk chunk4 = this.provideChunk(x, z);
+		if(!chunk4.isTerrainPopulated) {
+			chunk4.isTerrainPopulated = true;
 			if(this.chunkProvider != null) {
-				this.chunkProvider.populate(var1, var2, var3);
-				var4.setChunkModified();
+				this.chunkProvider.populate(chunkProvider, x, z);
+				chunk4.setChunkModified();
 			}
 		}
 
 	}
 
-	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
-		int var3 = 0;
-		int var4 = 0;
-		int var5;
-		if(var2 != null) {
-			for(var5 = 0; var5 < this.chunks.length; ++var5) {
-				if(this.chunks[var5] != null && this.chunks[var5].needsSaving(var1)) {
-					++var4;
+	public boolean saveChunks(boolean flag, IProgressUpdate progressUpdate) {
+		int i3 = 0;
+		int i4 = 0;
+		int i5;
+		if(progressUpdate != null) {
+			for(i5 = 0; i5 < this.chunks.length; ++i5) {
+				if(this.chunks[i5] != null && this.chunks[i5].needsSaving(flag)) {
+					++i4;
 				}
 			}
 		}
 
-		var5 = 0;
+		i5 = 0;
 
-		for(int var6 = 0; var6 < this.chunks.length; ++var6) {
-			if(this.chunks[var6] != null) {
-				if(var1 && !this.chunks[var6].neverSave) {
-					this.saveExtraChunkData(this.chunks[var6]);
+		for(int i6 = 0; i6 < this.chunks.length; ++i6) {
+			if(this.chunks[i6] != null) {
+				if(flag && !this.chunks[i6].neverSave) {
+					this.saveExtraChunkData(this.chunks[i6]);
 				}
 
-				if(this.chunks[var6].needsSaving(var1)) {
-					this.saveChunk(this.chunks[var6]);
-					this.chunks[var6].isModified = false;
-					++var3;
-					if(var3 == 2 && !var1) {
+				if(this.chunks[i6].needsSaving(flag)) {
+					this.saveChunk(this.chunks[i6]);
+					this.chunks[i6].isModified = false;
+					++i3;
+					if(i3 == 2 && !flag) {
 						return false;
 					}
 
-					if(var2 != null) {
-						++var5;
-						if(var5 % 10 == 0) {
-							var2.setLoadingProgress(var5 * 100 / var4);
+					if(progressUpdate != null) {
+						++i5;
+						if(i5 % 10 == 0) {
+							progressUpdate.setLoadingProgress(i5 * 100 / i4);
 						}
 					}
 				}
 			}
 		}
 
-		if(var1) {
+		if(flag) {
 			if(this.chunkLoader == null) {
 				return true;
 			}
--- net/minecraft/src/BlockFire.java
+++ net/minecraft/src/BlockFire.java
@@ -6,8 +6,8 @@
 	private int[] chanceToEncourageFire = new int[256];
 	private int[] abilityToCatchFire = new int[256];
 
-	protected BlockFire(int var1, int var2) {
-		super(var1, var2, Material.fire);
+	protected BlockFire(int id, int blockIndex) {
+		super(id, blockIndex, Material.fire);
 		this.initializeBlock(Block.planks.blockID, 5, 20);
 		this.initializeBlock(Block.wood.blockID, 5, 5);
 		this.initializeBlock(Block.leaves.blockID, 30, 60);
@@ -17,12 +17,12 @@
 		this.setTickOnLoad(true);
 	}
 
-	private void initializeBlock(int var1, int var2, int var3) {
-		this.chanceToEncourageFire[var1] = var2;
-		this.abilityToCatchFire[var1] = var3;
+	private void initializeBlock(int blockID, int chance, int ability) {
+		this.chanceToEncourageFire[blockID] = chance;
+		this.abilityToCatchFire[blockID] = ability;
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -34,7 +34,7 @@
 		return 3;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 0;
 	}
 
@@ -42,84 +42,81 @@
 		return 10;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if(var6 < 15) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var6 + 1);
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if(i6 < 15) {
+			world.setBlockMetadataWithNotify(x, y, z, i6 + 1);
+			world.scheduleBlockUpdate(x, y, z, this.blockID);
 		}
 
-		if(!this.canNeighborBurn(var1, var2, var3, var4)) {
-			if(!var1.isBlockNormalCube(var2, var3 - 1, var4) || var6 > 3) {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
+		if(!this.canNeighborBurn(world, x, y, z)) {
+			if(!world.isBlockNormalCube(x, y - 1, z) || i6 > 3) {
+				world.setBlockWithNotify(x, y, z, 0);
 			}
-
-		} else if(!this.canBlockCatchFire(var1, var2, var3 - 1, var4) && var6 == 15 && var5.nextInt(4) == 0) {
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		} else {
-			if(var6 % 2 == 0 && var6 > 2) {
-				this.tryToCatchBlockOnFire(var1, var2 + 1, var3, var4, 300, var5);
-				this.tryToCatchBlockOnFire(var1, var2 - 1, var3, var4, 300, var5);
-				this.tryToCatchBlockOnFire(var1, var2, var3 - 1, var4, 200, var5);
-				this.tryToCatchBlockOnFire(var1, var2, var3 + 1, var4, 250, var5);
-				this.tryToCatchBlockOnFire(var1, var2, var3, var4 - 1, 300, var5);
-				this.tryToCatchBlockOnFire(var1, var2, var3, var4 + 1, 300, var5);
-
-				for(int var7 = var2 - 1; var7 <= var2 + 1; ++var7) {
-					for(int var8 = var4 - 1; var8 <= var4 + 1; ++var8) {
-						for(int var9 = var3 - 1; var9 <= var3 + 4; ++var9) {
-							if(var7 != var2 || var9 != var3 || var8 != var4) {
-								int var10 = 100;
-								if(var9 > var3 + 1) {
-									var10 += (var9 - (var3 + 1)) * 100;
-								}
-
-								int var11 = this.getChanceOfNeighborsEncouragingFire(var1, var7, var9, var8);
-								if(var11 > 0 && var5.nextInt(var10) <= var11) {
-									var1.setBlockWithNotify(var7, var9, var8, this.blockID);
-								}
+		} else if(!this.canBlockCatchFire(world, x, y - 1, z) && i6 == 15 && random.nextInt(4) == 0) {
+			world.setBlockWithNotify(x, y, z, 0);
+		} else if(i6 % 2 == 0 && i6 > 2) {
+			this.tryToCatchBlockOnFire(world, x + 1, y, z, 300, random);
+			this.tryToCatchBlockOnFire(world, x - 1, y, z, 300, random);
+			this.tryToCatchBlockOnFire(world, x, y - 1, z, 200, random);
+			this.tryToCatchBlockOnFire(world, x, y + 1, z, 250, random);
+			this.tryToCatchBlockOnFire(world, x, y, z - 1, 300, random);
+			this.tryToCatchBlockOnFire(world, x, y, z + 1, 300, random);
+
+			for(int i7 = x - 1; i7 <= x + 1; ++i7) {
+				for(int i8 = z - 1; i8 <= z + 1; ++i8) {
+					for(int i9 = y - 1; i9 <= y + 4; ++i9) {
+						if(i7 != x || i9 != y || i8 != z) {
+							int i10 = 100;
+							if(i9 > y + 1) {
+								i10 += (i9 - (y + 1)) * 100;
+							}
+
+							int i11 = this.getChanceOfNeighborsEncouragingFire(world, i7, i9, i8);
+							if(i11 > 0 && random.nextInt(i10) <= i11) {
+								world.setBlockWithNotify(i7, i9, i8, this.blockID);
 							}
 						}
 					}
 				}
 			}
-
 		}
+
 	}
 
-	private void tryToCatchBlockOnFire(World var1, int var2, int var3, int var4, int var5, Random var6) {
-		int var7 = this.abilityToCatchFire[var1.getBlockId(var2, var3, var4)];
-		if(var6.nextInt(var5) < var7) {
-			boolean var8 = var1.getBlockId(var2, var3, var4) == Block.tnt.blockID;
-			if(var6.nextInt(2) == 0) {
-				var1.setBlockWithNotify(var2, var3, var4, this.blockID);
+	private void tryToCatchBlockOnFire(World world, int x, int y, int z, int chance, Random random) {
+		int i7 = this.abilityToCatchFire[world.getBlockId(x, y, z)];
+		if(random.nextInt(chance) < i7) {
+			boolean z8 = world.getBlockId(x, y, z) == Block.tnt.blockID;
+			if(random.nextInt(2) == 0) {
+				world.setBlockWithNotify(x, y, z, this.blockID);
 			} else {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
+				world.setBlockWithNotify(x, y, z, 0);
 			}
 
-			if(var8) {
-				Block.tnt.onBlockDestroyedByPlayer(var1, var2, var3, var4, 0);
+			if(z8) {
+				Block.tnt.onBlockDestroyedByPlayer(world, x, y, z, 0);
 			}
 		}
 
 	}
 
-	private boolean canNeighborBurn(World var1, int var2, int var3, int var4) {
-		return this.canBlockCatchFire(var1, var2 + 1, var3, var4) ? true : (this.canBlockCatchFire(var1, var2 - 1, var3, var4) ? true : (this.canBlockCatchFire(var1, var2, var3 - 1, var4) ? true : (this.canBlockCatchFire(var1, var2, var3 + 1, var4) ? true : (this.canBlockCatchFire(var1, var2, var3, var4 - 1) ? true : this.canBlockCatchFire(var1, var2, var3, var4 + 1)))));
+	private boolean canNeighborBurn(World world, int x, int y, int z) {
+		return this.canBlockCatchFire(world, x + 1, y, z) ? true : (this.canBlockCatchFire(world, x - 1, y, z) ? true : (this.canBlockCatchFire(world, x, y - 1, z) ? true : (this.canBlockCatchFire(world, x, y + 1, z) ? true : (this.canBlockCatchFire(world, x, y, z - 1) ? true : this.canBlockCatchFire(world, x, y, z + 1)))));
 	}
 
-	private int getChanceOfNeighborsEncouragingFire(World var1, int var2, int var3, int var4) {
-		byte var5 = 0;
-		if(var1.getBlockId(var2, var3, var4) != 0) {
+	private int getChanceOfNeighborsEncouragingFire(World world, int x, int y, int z) {
+		byte b5 = 0;
+		if(world.getBlockId(x, y, z) != 0) {
 			return 0;
 		} else {
-			int var6 = this.getChanceToEncourageFire(var1, var2 + 1, var3, var4, var5);
-			var6 = this.getChanceToEncourageFire(var1, var2 - 1, var3, var4, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3 - 1, var4, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3 + 1, var4, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3, var4 - 1, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3, var4 + 1, var6);
-			return var6;
+			int i6 = this.getChanceToEncourageFire(world, x + 1, y, z, b5);
+			i6 = this.getChanceToEncourageFire(world, x - 1, y, z, i6);
+			i6 = this.getChanceToEncourageFire(world, x, y - 1, z, i6);
+			i6 = this.getChanceToEncourageFire(world, x, y + 1, z, i6);
+			i6 = this.getChanceToEncourageFire(world, x, y, z - 1, i6);
+			i6 = this.getChanceToEncourageFire(world, x, y, z + 1, i6);
+			return i6;
 		}
 	}
 
@@ -127,30 +124,32 @@
 		return false;
 	}
 
-	public boolean canBlockCatchFire(IBlockAccess var1, int var2, int var3, int var4) {
-		return this.chanceToEncourageFire[var1.getBlockId(var2, var3, var4)] > 0;
-	}
-
-	public int getChanceToEncourageFire(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = this.chanceToEncourageFire[var1.getBlockId(var2, var3, var4)];
-		return var6 > var5 ? var6 : var5;
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2, var3 - 1, var4) || this.canNeighborBurn(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && !this.canNeighborBurn(var1, var2, var3, var4)) {
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public boolean canBlockCatchFire(IBlockAccess blockAccess, int x, int y, int z) {
+		return this.chanceToEncourageFire[blockAccess.getBlockId(x, y, z)] > 0;
+	}
+
+	public int getChanceToEncourageFire(World world, int x, int y, int z, int flag) {
+		int i6 = this.chanceToEncourageFire[world.getBlockId(x, y, z)];
+		return i6 > flag ? i6 : flag;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y - 1, z) || this.canNeighborBurn(world, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(!world.isBlockNormalCube(x, y - 1, z) && !this.canNeighborBurn(world, x, y, z)) {
+			world.setBlockWithNotify(x, y, z, 0);
 		}
+
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && !this.canNeighborBurn(var1, var2, var3, var4)) {
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public void onBlockAdded(World world, int x, int y, int z) {
+		if(!world.isBlockNormalCube(x, y - 1, z) && !this.canNeighborBurn(world, x, y, z)) {
+			world.setBlockWithNotify(x, y, z, 0);
 		} else {
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
+			world.scheduleBlockUpdate(x, y, z, this.blockID);
 		}
+
 	}
 }
--- net/minecraft/src/ServerCommand.java
+++ net/minecraft/src/ServerCommand.java
@@ -4,8 +4,8 @@
 	public final String command;
 	public final ICommandListener commandListener;
 
-	public ServerCommand(String var1, ICommandListener var2) {
-		this.command = var1;
-		this.commandListener = var2;
+	public ServerCommand(String command, ICommandListener commandListener) {
+		this.command = command;
+		this.commandListener = commandListener;
 	}
 }
--- net/minecraft/src/ItemArmor.java
+++ net/minecraft/src/ItemArmor.java
@@ -8,13 +8,13 @@
 	public final int damageReduceAmount;
 	public final int renderIndex;
 
-	public ItemArmor(int var1, int var2, int var3, int var4) {
-		super(var1);
-		this.armorLevel = var2;
-		this.armorType = var4;
-		this.renderIndex = var3;
-		this.damageReduceAmount = damageReduceAmountArray[var4];
-		this.maxDamage = maxDamageArray[var4] * 3 << var2;
+	public ItemArmor(int itemID, int armorLevel, int renderIndex, int armorType) {
+		super(itemID);
+		this.armorLevel = armorLevel;
+		this.armorType = armorType;
+		this.renderIndex = renderIndex;
+		this.damageReduceAmount = damageReduceAmountArray[armorType];
+		this.maxDamage = maxDamageArray[armorType] * 3 << armorLevel;
 		this.maxStackSize = 1;
 	}
 }
--- net/minecraft/src/WorldGenBigTree.java
+++ net/minecraft/src/WorldGenBigTree.java
@@ -1,8 +1,11 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.Random;
 
 public class WorldGenBigTree extends WorldGenerator {
+	private Boolean generateEpicTrees = null;
 	static final byte[] otherCoordPairs = new byte[]{(byte)2, (byte)0, (byte)0, (byte)1, (byte)2, (byte)1};
 	Random rand = new Random();
 	World worldObj;
@@ -18,6 +21,137 @@
 	int heightLimitLimit = 12;
 	int leafDistanceLimit = 4;
 	int[][] leafNodes;
+	int mainWoodID = Block.wood.blockID;
+	int mainLeavesID = Block.leaves.blockID;
+
+	public WorldGenBigTree generateHighwoodTrees(boolean boolean1) {
+		this.generateEpicTrees = boolean1;
+		return this;
+	}
+
+	private void generateDeEpicTreeFoliage(World cv, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientWood.blockID;
+		int i7 = ExtBlocks.AncientLeaves.blockID;
+		float f8 = 0.0F;
+		float f9 = random.nextFloat() * (float)Math.PI * 2.0F;
+		int i10 = random.nextInt(9) + 8;
+		float f11 = (float)integer4;
+
+		float f13;
+		for(int i12 = 0; i12 < i10; ++i12) {
+			f9 = (float)((double)f9 + ((double)random.nextFloat() - 0.5D) * 0.1D);
+			++f8;
+			f13 = f8 / (float)i10;
+			integer3 = (int)((float)integer3 + MathHelper.cos(f9) * (1.0F - f13));
+			f11 += f13;
+			integer5 = (int)((float)integer5 + MathHelper.sin(f9) * (1.0F - f13));
+			integer4 = Math.round(f11);
+			cv.setBlock(integer3, integer4, integer5, i6);
+		}
+
+		integer4 += random.nextInt(2) + 1;
+		int i15 = random.nextInt(3) + 2;
+
+		for(int i16 = 0; i16 < i15; ++i16) {
+			cv.setBlock(integer3, integer4, integer5, i7);
+
+			for(float f17 = 0.0F; (double)f17 < Math.PI * 2D; f17 = (float)((double)f17 + 0.2243994752564138D)) {
+				int i18 = random.nextInt(i16 + 4) + i16 + 4;
+				float f19 = (float)integer3;
+				f13 = (float)integer5;
+
+				for(int i14 = 0; i14 < i18; ++i14) {
+					f13 += MathHelper.sin(f17);
+					f19 += MathHelper.cos(f17);
+					if(!cv.getBlockMaterial(Math.round(f19), integer4 - i16, Math.round(f13)).getIsSolid()) {
+						cv.setBlock(Math.round(f19), integer4 - i16, Math.round(f13), i7);
+					}
+				}
+			}
+		}
+
+	}
+
+	private void generateDeEpicRoots(World cv, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientRoots.blockID;
+		int i7 = random.nextInt(4);
+
+		for(int i8 = 0; i8 < i7; ++i8) {
+			int i9 = random.nextInt(8) + 3;
+			int i10 = integer3;
+			int i11 = integer4;
+			int i12 = integer5;
+
+			for(int i13 = 0; i13 < i9; ++i13) {
+				i10 += random.nextInt(3) - 1;
+				--i11;
+				i12 += random.nextInt(3) - 1;
+				if(cv.getBlockId(i10, i11, i12) != Block.bedrock.blockID) {
+					cv.setBlock(i10, i11, i12, i6);
+				}
+			}
+		}
+
+	}
+
+	private boolean generateDeEpicTree(World cv, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientWood.blockID;
+		int i7 = ExtBlocks.AncientLeaves.blockID;
+		if(cv.getBlockId(integer3, integer4 - 1, integer5) != Block.grass.blockID && cv.getBlockId(integer3, integer4 - 1, integer5) != Block.dirt.blockID) {
+			return true;
+		} else {
+			Random random8 = new Random(random.nextLong() + (long)integer3 + (long)integer4 + (long)integer5 + cv.randomSeed);
+			ArrayList arrayList9 = new ArrayList();
+			int i10 = 16 + random8.nextInt(26);
+			arrayList9.add(Vec3D.createVector((double)integer3, (double)(integer4 + i10), (double)integer5));
+
+			label71:
+			for(int i11 = 0; arrayList9.size() > 0; ++i11) {
+				Iterator iterator12 = (new ArrayList(arrayList9)).iterator();
+
+				while(true) {
+					while(true) {
+						if(!iterator12.hasNext()) {
+							continue label71;
+						}
+
+						Vec3D vec3D13 = (Vec3D)iterator12.next();
+						int i14 = (int)Math.round(vec3D13.xCoord);
+						int i15 = (int)Math.round(vec3D13.yCoord);
+						int i16 = (int)Math.round(vec3D13.zCoord);
+						if((!cv.getBlockMaterial(i14, i15, i16).getIsSolid() || cv.getBlockId(i14, i15, i16) != i7) && i15 >= 0 && (random8.nextInt(3) != 0 || arrayList9.size() <= 3)) {
+							cv.setBlock(i14, i15, i16, i6);
+							int i17 = 0;
+
+							while(random8.nextInt(arrayList9.size() / 20 + 2) <= 1 && arrayList9.size() <= 10000) {
+								++i17;
+								if(i17 >= 4) {
+									break;
+								}
+
+								Vec3D vec3D18 = vec3D13.addVector((double)(random8.nextInt(3) - 1), -1.0D, (double)(random8.nextInt(3) - 1));
+								arrayList9.add(vec3D18);
+							}
+
+							if(i11 > 2 && random8.nextInt(Math.max(50, 89 - i11)) == 3) {
+								this.generateDeEpicTreeFoliage(cv, random, i14, i15, i16);
+							}
+
+							arrayList9.remove(vec3D13);
+							arrayList9.add(vec3D13.addVector(0.0D, -1.0D, 0.0D));
+						} else {
+							arrayList9.remove(vec3D13);
+							if(cv.getBlockId(i14, i15, i16) == Block.dirt.blockID || cv.getBlockId(i14, i15, i16) == Block.grass.blockID) {
+								this.generateDeEpicRoots(cv, random8, i14, i15, i16);
+							}
+						}
+					}
+				}
+			}
+
+			return true;
+		}
+	}
 
 	void generateLeafNodeList() {
 		this.height = (int)((double)this.heightLimit * this.heightAttenuation);
@@ -25,99 +159,99 @@
 			this.height = this.heightLimit - 1;
 		}
 
-		int var1 = (int)(1.382D + Math.pow(this.leafDensity * (double)this.heightLimit / 13.0D, 2.0D));
-		if(var1 < 1) {
-			var1 = 1;
+		int i1 = (int)(1.382D + Math.pow(this.leafDensity * (double)this.heightLimit / 13.0D, 2.0D));
+		if(i1 < 1) {
+			i1 = 1;
 		}
 
-		int[][] var2 = new int[var1 * this.heightLimit][4];
-		int var3 = this.basePos[1] + this.heightLimit - this.leafDistanceLimit;
-		int var4 = 1;
-		int var5 = this.basePos[1] + this.height;
-		int var6 = var3 - this.basePos[1];
-		var2[0][0] = this.basePos[0];
-		var2[0][1] = var3;
-		var2[0][2] = this.basePos[2];
-		var2[0][3] = var5;
-		--var3;
+		int[][] i2 = new int[i1 * this.heightLimit][4];
+		int i3 = this.basePos[1] + this.heightLimit - this.leafDistanceLimit;
+		int i4 = 1;
+		int i5 = this.basePos[1] + this.height;
+		int i6 = i3 - this.basePos[1];
+		i2[0][0] = this.basePos[0];
+		i2[0][1] = i3;
+		i2[0][2] = this.basePos[2];
+		i2[0][3] = i5;
+		--i3;
 
 		while(true) {
-			while(var6 >= 0) {
-				int var7 = 0;
-				float var8 = this.layerSize(var6);
-				if(var8 < 0.0F) {
-					--var3;
-					--var6;
+			while(i6 >= 0) {
+				int i7 = 0;
+				float f8 = this.layerSize(i6);
+				if(f8 < 0.0F) {
+					--i3;
+					--i6;
 				} else {
-					for(double var9 = 0.5D; var7 < var1; ++var7) {
-						double var11 = this.scaleWidth * (double)var8 * ((double)this.rand.nextFloat() + 0.328D);
-						double var13 = (double)this.rand.nextFloat() * 2.0D * 3.14159D;
-						int var15 = (int)(var11 * Math.sin(var13) + (double)this.basePos[0] + var9);
-						int var16 = (int)(var11 * Math.cos(var13) + (double)this.basePos[2] + var9);
-						int[] var17 = new int[]{var15, var3, var16};
-						int[] var18 = new int[]{var15, var3 + this.leafDistanceLimit, var16};
-						if(this.checkBlockLine(var17, var18) == -1) {
-							int[] var19 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
-							double var20 = Math.sqrt(Math.pow((double)Math.abs(this.basePos[0] - var17[0]), 2.0D) + Math.pow((double)Math.abs(this.basePos[2] - var17[2]), 2.0D));
-							double var22 = var20 * this.branchSlope;
-							if((double)var17[1] - var22 > (double)var5) {
-								var19[1] = var5;
+					for(double d9 = 0.5D; i7 < i1; ++i7) {
+						double d11 = this.scaleWidth * (double)f8 * ((double)this.rand.nextFloat() + 0.328D);
+						double d13 = (double)this.rand.nextFloat() * 2.0D * 3.14159D;
+						int i15 = (int)(d11 * Math.sin(d13) + (double)this.basePos[0] + d9);
+						int i16 = (int)(d11 * Math.cos(d13) + (double)this.basePos[2] + d9);
+						int[] i17 = new int[]{i15, i3, i16};
+						int[] i18 = new int[]{i15, i3 + this.leafDistanceLimit, i16};
+						if(this.checkBlockLine(i17, i18) == -1) {
+							int[] i19 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
+							double d20 = Math.sqrt(Math.pow((double)Math.abs(this.basePos[0] - i17[0]), 2.0D) + Math.pow((double)Math.abs(this.basePos[2] - i17[2]), 2.0D));
+							double d22 = d20 * this.branchSlope;
+							if((double)i17[1] - d22 > (double)i5) {
+								i19[1] = i5;
 							} else {
-								var19[1] = (int)((double)var17[1] - var22);
+								i19[1] = (int)((double)i17[1] - d22);
 							}
 
-							if(this.checkBlockLine(var19, var17) == -1) {
-								var2[var4][0] = var15;
-								var2[var4][1] = var3;
-								var2[var4][2] = var16;
-								var2[var4][3] = var19[1];
-								++var4;
+							if(this.checkBlockLine(i19, i17) == -1) {
+								i2[i4][0] = i15;
+								i2[i4][1] = i3;
+								i2[i4][2] = i16;
+								i2[i4][3] = i19[1];
+								++i4;
 							}
 						}
 					}
 
-					--var3;
-					--var6;
+					--i3;
+					--i6;
 				}
 			}
 
-			this.leafNodes = new int[var4][4];
-			System.arraycopy(var2, 0, this.leafNodes, 0, var4);
+			this.leafNodes = new int[i4][4];
+			System.arraycopy(i2, 0, this.leafNodes, 0, i4);
 			return;
 		}
 	}
 
-	void genTreeLayer(int var1, int var2, int var3, float var4, byte var5, int var6) {
-		int var7 = (int)((double)var4 + 0.618D);
-		byte var8 = otherCoordPairs[var5];
-		byte var9 = otherCoordPairs[var5 + 3];
-		int[] var10 = new int[]{var1, var2, var3};
-		int[] var11 = new int[]{0, 0, 0};
-		int var12 = -var7;
-		int var13 = -var7;
+	void genTreeLayer(int integer1, int integer2, int integer3, float float4, byte byte5, int integer6) {
+		int i7 = (int)((double)float4 + 0.618D);
+		byte b8 = otherCoordPairs[byte5];
+		byte b9 = otherCoordPairs[byte5 + 3];
+		int[] i10 = new int[]{integer1, integer2, integer3};
+		int[] i11 = new int[]{0, 0, 0};
+		int i12 = -i7;
+		int i13 = -i7;
 
-		label32:
-		for(var11[var5] = var10[var5]; var12 <= var7; ++var12) {
-			var11[var8] = var10[var8] + var12;
-			var13 = -var7;
+		label34:
+		for(i11[byte5] = i10[byte5]; i12 <= i7; ++i12) {
+			i11[b8] = i10[b8] + i12;
+			i13 = -i7;
 
 			while(true) {
 				while(true) {
-					if(var13 > var7) {
-						continue label32;
+					if(i13 > i7) {
+						continue label34;
 					}
 
-					double var15 = Math.sqrt(Math.pow((double)Math.abs(var12) + 0.5D, 2.0D) + Math.pow((double)Math.abs(var13) + 0.5D, 2.0D));
-					if(var15 > (double)var4) {
-						++var13;
+					double d14 = Math.sqrt(Math.pow((double)Math.abs(i12) + 0.5D, 2.0D) + Math.pow((double)Math.abs(i13) + 0.5D, 2.0D));
+					if(d14 > (double)float4) {
+						++i13;
 					} else {
-						var11[var9] = var10[var9] + var13;
-						int var14 = this.worldObj.getBlockId(var11[0], var11[1], var11[2]);
-						if(var14 != 0 && var14 != 18) {
-							++var13;
+						i11[b9] = i10[b9] + i13;
+						int i16 = this.worldObj.getBlockId(i11[0], i11[1], i11[2]);
+						if(i16 != 0 && i16 != this.mainLeavesID) {
+							++i13;
 						} else {
-							this.worldObj.setBlock(var11[0], var11[1], var11[2], var6);
-							++var13;
+							this.worldObj.setBlock(i11[0], i11[1], i11[2], integer6);
+							++i13;
 						}
 					}
 				}
@@ -126,223 +260,232 @@
 
 	}
 
-	float layerSize(int var1) {
-		if((double)var1 < (double)((float)this.heightLimit) * 0.3D) {
+	float layerSize(int integer) {
+		if((double)integer < (double)((float)this.heightLimit) * 0.3D) {
 			return -1.618F;
 		} else {
-			float var2 = (float)this.heightLimit / 2.0F;
-			float var3 = (float)this.heightLimit / 2.0F - (float)var1;
-			float var4;
-			if(var3 == 0.0F) {
-				var4 = var2;
-			} else if(Math.abs(var3) >= var2) {
-				var4 = 0.0F;
-			} else {
-				var4 = (float)Math.sqrt(Math.pow((double)Math.abs(var2), 2.0D) - Math.pow((double)Math.abs(var3), 2.0D));
-			}
-
-			var4 *= 0.5F;
-			return var4;
-		}
-	}
-
-	float leafSize(int var1) {
-		return var1 >= 0 && var1 < this.leafDistanceLimit ? (var1 != 0 && var1 != this.leafDistanceLimit - 1 ? 3.0F : 2.0F) : -1.0F;
-	}
-
-	void generateLeafNode(int var1, int var2, int var3) {
-		int var4 = var2;
-
-		for(int var5 = var2 + this.leafDistanceLimit; var4 < var5; ++var4) {
-			float var6 = this.leafSize(var4 - var2);
-			this.genTreeLayer(var1, var4, var3, var6, (byte)1, 18);
-		}
-
-	}
-
-	void placeBlockLine(int[] var1, int[] var2, int var3) {
-		int[] var4 = new int[]{0, 0, 0};
-		byte var5 = 0;
-
-		byte var6;
-		for(var6 = 0; var5 < 3; ++var5) {
-			var4[var5] = var2[var5] - var1[var5];
-			if(Math.abs(var4[var5]) > Math.abs(var4[var6])) {
-				var6 = var5;
-			}
-		}
-
-		if(var4[var6] != 0) {
-			byte var7 = otherCoordPairs[var6];
-			byte var8 = otherCoordPairs[var6 + 3];
-			byte var9;
-			if(var4[var6] > 0) {
-				var9 = 1;
-			} else {
-				var9 = -1;
-			}
-
-			double var10 = (double)var4[var7] / (double)var4[var6];
-			double var12 = (double)var4[var8] / (double)var4[var6];
-			int[] var14 = new int[]{0, 0, 0};
-			int var15 = 0;
-
-			for(int var16 = var4[var6] + var9; var15 != var16; var15 += var9) {
-				var14[var6] = MathHelper.floor_double((double)(var1[var6] + var15) + 0.5D);
-				var14[var7] = MathHelper.floor_double((double)var1[var7] + (double)var15 * var10 + 0.5D);
-				var14[var8] = MathHelper.floor_double((double)var1[var8] + (double)var15 * var12 + 0.5D);
-				this.worldObj.setBlock(var14[0], var14[1], var14[2], var3);
-			}
-
-		}
+			float f2 = (float)this.heightLimit / 2.0F;
+			float f3 = (float)this.heightLimit / 2.0F - (float)integer;
+			float f4;
+			if(f3 == 0.0F) {
+				f4 = f2;
+			} else if(Math.abs(f3) >= f2) {
+				f4 = 0.0F;
+			} else {
+				f4 = (float)Math.sqrt(Math.pow((double)Math.abs(f2), 2.0D) - Math.pow((double)Math.abs(f3), 2.0D));
+			}
+
+			f4 *= 0.5F;
+			return f4;
+		}
+	}
+
+	float leafSize(int integer) {
+		return integer >= 0 && integer < this.leafDistanceLimit ? (integer != 0 && integer != this.leafDistanceLimit - 1 ? 3.0F : 2.0F) : -1.0F;
+	}
+
+	void generateLeafNode(int x, int y, int z) {
+		int i4 = y;
+
+		for(int i5 = y + this.leafDistanceLimit; i4 < i5; ++i4) {
+			float f6 = this.leafSize(i4 - y);
+			this.genTreeLayer(x, i4, z, f6, (byte)1, this.mainLeavesID);
+		}
+
+	}
+
+	void placeBlockLine(int[] arr1, int[] arr2, int integer) {
+		int[] i4 = new int[]{0, 0, 0};
+		byte b5 = 0;
+
+		byte b6;
+		for(b6 = 0; b5 < 3; ++b5) {
+			i4[b5] = arr2[b5] - arr1[b5];
+			if(Math.abs(i4[b5]) > Math.abs(i4[b6])) {
+				b6 = b5;
+			}
+		}
+
+		if(i4[b6] != 0) {
+			byte b7 = otherCoordPairs[b6];
+			byte b8 = otherCoordPairs[b6 + 3];
+			byte b9;
+			if(i4[b6] > 0) {
+				b9 = 1;
+			} else {
+				b9 = -1;
+			}
+
+			double d10 = (double)i4[b7] / (double)i4[b6];
+			double d12 = (double)i4[b8] / (double)i4[b6];
+			int[] i14 = new int[]{0, 0, 0};
+			int i15 = 0;
+
+			for(int i16 = i4[b6] + b9; i15 != i16; i15 += b9) {
+				i14[b6] = MathHelper.floor_double((double)(arr1[b6] + i15) + 0.5D);
+				i14[b7] = MathHelper.floor_double((double)arr1[b7] + (double)i15 * d10 + 0.5D);
+				i14[b8] = MathHelper.floor_double((double)arr1[b8] + (double)i15 * d12 + 0.5D);
+				this.worldObj.setBlock(i14[0], i14[1], i14[2], integer);
+			}
+		}
+
 	}
 
 	void generateLeaves() {
-		int var1 = 0;
+		int i1 = 0;
 
-		for(int var2 = this.leafNodes.length; var1 < var2; ++var1) {
-			int var3 = this.leafNodes[var1][0];
-			int var4 = this.leafNodes[var1][1];
-			int var5 = this.leafNodes[var1][2];
-			this.generateLeafNode(var3, var4, var5);
+		for(int i2 = this.leafNodes.length; i1 < i2; ++i1) {
+			int i3 = this.leafNodes[i1][0];
+			int i4 = this.leafNodes[i1][1];
+			int i5 = this.leafNodes[i1][2];
+			this.generateLeafNode(i3, i4, i5);
 		}
 
 	}
 
-	boolean leafNodeNeedsBase(int var1) {
-		return (double)var1 >= (double)this.heightLimit * 0.2D;
+	boolean leafNodeNeedsBase(int integer) {
+		return (double)integer >= (double)this.heightLimit * 0.2D;
 	}
 
 	void generateTrunk() {
-		int var1 = this.basePos[0];
-		int var2 = this.basePos[1];
-		int var3 = this.basePos[1] + this.height;
-		int var4 = this.basePos[2];
-		int[] var5 = new int[]{var1, var2, var4};
-		int[] var6 = new int[]{var1, var3, var4};
-		this.placeBlockLine(var5, var6, 17);
+		int i1 = this.basePos[0];
+		int i2 = this.basePos[1];
+		int i3 = this.basePos[1] + this.height;
+		int i4 = this.basePos[2];
+		int[] i5 = new int[]{i1, i2, i4};
+		int[] i6 = new int[]{i1, i3, i4};
+		this.placeBlockLine(i5, i6, this.mainWoodID);
 		if(this.trunkSize == 2) {
-			++var5[0];
-			++var6[0];
-			this.placeBlockLine(var5, var6, 17);
-			++var5[2];
-			++var6[2];
-			this.placeBlockLine(var5, var6, 17);
-			var5[0] += -1;
-			var6[0] += -1;
-			this.placeBlockLine(var5, var6, 17);
+			++i5[0];
+			++i6[0];
+			this.placeBlockLine(i5, i6, this.mainWoodID);
+			++i5[2];
+			++i6[2];
+			this.placeBlockLine(i5, i6, this.mainWoodID);
+			i5[0] += -1;
+			i6[0] += -1;
+			this.placeBlockLine(i5, i6, this.mainWoodID);
 		}
 
 	}
 
 	void generateLeafNodeBases() {
-		int var1 = 0;
-		int var2 = this.leafNodes.length;
+		int i1 = 0;
+		int i2 = this.leafNodes.length;
 
-		for(int[] var3 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]}; var1 < var2; ++var1) {
-			int[] var4 = this.leafNodes[var1];
-			int[] var5 = new int[]{var4[0], var4[1], var4[2]};
-			var3[1] = var4[3];
-			int var6 = var3[1] - this.basePos[1];
-			if(this.leafNodeNeedsBase(var6)) {
-				this.placeBlockLine(var3, var5, 17);
+		for(int[] i3 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]}; i1 < i2; ++i1) {
+			int[] i4 = this.leafNodes[i1];
+			int[] i5 = new int[]{i4[0], i4[1], i4[2]};
+			i3[1] = i4[3];
+			int i6 = i3[1] - this.basePos[1];
+			if(this.leafNodeNeedsBase(i6)) {
+				this.placeBlockLine(i3, i5, this.mainWoodID);
 			}
 		}
 
 	}
 
-	int checkBlockLine(int[] var1, int[] var2) {
-		int[] var3 = new int[]{0, 0, 0};
-		byte var4 = 0;
+	int checkBlockLine(int[] arr1, int[] arr2) {
+		int[] i3 = new int[]{0, 0, 0};
+		byte b4 = 0;
 
-		byte var5;
-		for(var5 = 0; var4 < 3; ++var4) {
-			var3[var4] = var2[var4] - var1[var4];
-			if(Math.abs(var3[var4]) > Math.abs(var3[var5])) {
-				var5 = var4;
+		byte b5;
+		for(b5 = 0; b4 < 3; ++b4) {
+			i3[b4] = arr2[b4] - arr1[b4];
+			if(Math.abs(i3[b4]) > Math.abs(i3[b5])) {
+				b5 = b4;
 			}
 		}
 
-		if(var3[var5] == 0) {
+		if(i3[b5] == 0) {
 			return -1;
 		} else {
-			byte var6 = otherCoordPairs[var5];
-			byte var7 = otherCoordPairs[var5 + 3];
-			byte var8;
-			if(var3[var5] > 0) {
-				var8 = 1;
+			byte b6 = otherCoordPairs[b5];
+			byte b7 = otherCoordPairs[b5 + 3];
+			byte b8;
+			if(i3[b5] > 0) {
+				b8 = 1;
 			} else {
-				var8 = -1;
+				b8 = -1;
 			}
 
-			double var9 = (double)var3[var6] / (double)var3[var5];
-			double var11 = (double)var3[var7] / (double)var3[var5];
-			int[] var13 = new int[]{0, 0, 0};
-			int var14 = 0;
+			double d9 = (double)i3[b6] / (double)i3[b5];
+			double d11 = (double)i3[b7] / (double)i3[b5];
+			int[] i13 = new int[]{0, 0, 0};
+			int i14 = 0;
 
-			int var15;
-			for(var15 = var3[var5] + var8; var14 != var15; var14 += var8) {
-				var13[var5] = var1[var5] + var14;
-				var13[var6] = (int)((double)var1[var6] + (double)var14 * var9);
-				var13[var7] = (int)((double)var1[var7] + (double)var14 * var11);
-				int var16 = this.worldObj.getBlockId(var13[0], var13[1], var13[2]);
-				if(var16 != 0 && var16 != 18) {
+			int i15;
+			for(i15 = i3[b5] + b8; i14 != i15; i14 += b8) {
+				i13[b5] = arr1[b5] + i14;
+				i13[b6] = (int)((double)arr1[b6] + (double)i14 * d9);
+				i13[b7] = (int)((double)arr1[b7] + (double)i14 * d11);
+				int i16 = this.worldObj.getBlockId(i13[0], i13[1], i13[2]);
+				if(i16 != 0 && i16 != this.mainLeavesID) {
 					break;
 				}
 			}
 
-			return var14 == var15 ? -1 : Math.abs(var14);
+			return i14 == i15 ? -1 : Math.abs(i14);
 		}
 	}
 
 	boolean validTreeLocation() {
-		int[] var1 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
-		int[] var2 = new int[]{this.basePos[0], this.basePos[1] + this.heightLimit - 1, this.basePos[2]};
-		int var3 = this.worldObj.getBlockId(this.basePos[0], this.basePos[1] - 1, this.basePos[2]);
-		if(var3 != 2 && var3 != 3) {
+		int[] i1 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
+		int[] i2 = new int[]{this.basePos[0], this.basePos[1] + this.heightLimit - 1, this.basePos[2]};
+		int i3 = this.worldObj.getBlockId(this.basePos[0], this.basePos[1] - 1, this.basePos[2]);
+		if(i3 != 2 && i3 != 3) {
 			return false;
 		} else {
-			int var4 = this.checkBlockLine(var1, var2);
-			if(var4 == -1) {
+			int i4 = this.checkBlockLine(i1, i2);
+			if(i4 == -1) {
 				return true;
-			} else if(var4 < 6) {
+			} else if(i4 < 6) {
 				return false;
 			} else {
-				this.heightLimit = var4;
+				this.heightLimit = i4;
 				return true;
 			}
 		}
 	}
 
-	public void setScale(double var1, double var3, double var5) {
-		this.heightLimitLimit = (int)(var1 * 12.0D);
-		if(var1 > 0.5D) {
+	public void setScale(double scaleX, double scaleY, double scaleZ) {
+		this.heightLimitLimit = (int)(scaleX * 12.0D);
+		if(scaleX > 0.5D) {
 			this.leafDistanceLimit = 5;
 		}
 
-		this.scaleWidth = var3;
-		this.leafDensity = var5;
+		this.scaleWidth = scaleY;
+		this.leafDensity = scaleZ;
 	}
 
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		this.worldObj = var1;
-		long var6 = var2.nextLong();
-		this.rand.setSeed(var6);
-		this.basePos[0] = var3;
-		this.basePos[1] = var4;
-		this.basePos[2] = var5;
-		if(this.heightLimit == 0) {
-			this.heightLimit = 5 + this.rand.nextInt(this.heightLimitLimit);
-		}
-
-		if(!this.validTreeLocation()) {
-			return false;
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		if(this.generateEpicTrees == null || rand.nextInt(150) != 0 && !this.generateEpicTrees.booleanValue()) {
+			if(rand.nextInt(100) <= 5) {
+				this.mainWoodID = ExtBlocks.FireSkyWood.blockID;
+				this.mainLeavesID = ExtBlocks.FireSkyLeaves.blockID;
+			}
+
+			this.worldObj = world;
+			long j6 = rand.nextLong();
+			this.rand.setSeed(j6);
+			this.basePos[0] = x;
+			this.basePos[1] = y;
+			this.basePos[2] = z;
+			if(this.heightLimit == 0) {
+				this.heightLimit = 5 + this.rand.nextInt(this.heightLimitLimit);
+			}
+
+			if(!this.validTreeLocation()) {
+				return false;
+			} else {
+				this.generateLeafNodeList();
+				this.generateLeaves();
+				this.generateTrunk();
+				this.generateLeafNodeBases();
+				return true;
+			}
 		} else {
-			this.generateLeafNodeList();
-			this.generateLeaves();
-			this.generateTrunk();
-			this.generateLeafNodeBases();
-			return true;
+			return this.generateDeEpicTree(world, rand, x, y, z);
 		}
 	}
 }
--- net/minecraft/src/BlockRedstoneTorch.java
+++ net/minecraft/src/BlockRedstoneTorch.java
@@ -8,18 +8,18 @@
 	private boolean torchActive = false;
 	private static List torchUpdates = new ArrayList();
 
-	private boolean checkForBurnout(World var1, int var2, int var3, int var4, boolean var5) {
-		if(var5) {
-			torchUpdates.add(new RedstoneUpdateInfo(var2, var3, var4, var1.worldTime));
+	private boolean checkForBurnout(World world, int x, int y, int z, boolean boolean5) {
+		if(boolean5) {
+			torchUpdates.add(new RedstoneUpdateInfo(x, y, z, world.worldTime));
 		}
 
-		int var6 = 0;
+		int i6 = 0;
 
-		for(int var7 = 0; var7 < torchUpdates.size(); ++var7) {
-			RedstoneUpdateInfo var8 = (RedstoneUpdateInfo)torchUpdates.get(var7);
-			if(var8.x == var2 && var8.y == var3 && var8.z == var4) {
-				++var6;
-				if(var6 >= 8) {
+		for(int i7 = 0; i7 < torchUpdates.size(); ++i7) {
+			RedstoneUpdateInfo redstoneUpdateInfo8 = (RedstoneUpdateInfo)torchUpdates.get(i7);
+			if(redstoneUpdateInfo8.x == x && redstoneUpdateInfo8.y == y && redstoneUpdateInfo8.z == z) {
+				++i6;
+				if(i6 >= 8) {
 					return true;
 				}
 			}
@@ -28,9 +28,9 @@
 		return false;
 	}
 
-	protected BlockRedstoneTorch(int var1, int var2, boolean var3) {
-		super(var1, var2);
-		this.torchActive = var3;
+	protected BlockRedstoneTorch(int id, int blockIndex, boolean torchActive) {
+		super(id, blockIndex);
+		this.torchActive = torchActive;
 		this.setTickOnLoad(true);
 	}
 
@@ -38,85 +38,85 @@
 		return 2;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockMetadata(var2, var3, var4) == 0) {
-			super.onBlockAdded(var1, var2, var3, var4);
-		}
-
-		if(this.torchActive) {
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-		}
-
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		if(this.torchActive) {
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-		}
-
-	}
-
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+	public void onBlockAdded(World world, int x, int y, int z) {
+		if(world.getBlockMetadata(x, y, z) == 0) {
+			super.onBlockAdded(world, x, y, z);
+		}
+
+		if(this.torchActive) {
+			world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+		}
+
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		if(this.torchActive) {
+			world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+		}
+
+	}
+
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int unused) {
 		if(!this.torchActive) {
 			return false;
 		} else {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			return var6 == 5 && var5 == 1 ? false : (var6 == 3 && var5 == 3 ? false : (var6 == 4 && var5 == 2 ? false : (var6 == 1 && var5 == 5 ? false : var6 != 2 || var5 != 4)));
+			int i6 = blockAccess.getBlockMetadata(x, y, z);
+			return i6 == 5 && unused == 1 ? false : (i6 == 3 && unused == 3 ? false : (i6 == 4 && unused == 2 ? false : (i6 == 1 && unused == 5 ? false : i6 != 2 || unused != 4)));
 		}
 	}
 
-	private boolean isIndirectlyPowered(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		return var5 == 5 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3 - 1, var4, 0) ? true : (var5 == 3 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3, var4 - 1, 2) ? true : (var5 == 4 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3, var4 + 1, 3) ? true : (var5 == 1 && var1.isBlockIndirectlyProvidingPowerTo(var2 - 1, var3, var4, 4) ? true : var5 == 2 && var1.isBlockIndirectlyProvidingPowerTo(var2 + 1, var3, var4, 5))));
+	private boolean isIndirectlyPowered(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		return i5 == 5 && world.isBlockIndirectlyProvidingPowerTo(x, y - 1, z, 0) ? true : (i5 == 3 && world.isBlockIndirectlyProvidingPowerTo(x, y, z - 1, 2) ? true : (i5 == 4 && world.isBlockIndirectlyProvidingPowerTo(x, y, z + 1, 3) ? true : (i5 == 1 && world.isBlockIndirectlyProvidingPowerTo(x - 1, y, z, 4) ? true : i5 == 2 && world.isBlockIndirectlyProvidingPowerTo(x + 1, y, z, 5))));
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		boolean var6 = this.isIndirectlyPowered(var1, var2, var3, var4);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		boolean z6 = this.isIndirectlyPowered(world, x, y, z);
 
-		while(torchUpdates.size() > 0 && var1.worldTime - ((RedstoneUpdateInfo)torchUpdates.get(0)).updateTime > 100L) {
+		while(torchUpdates.size() > 0 && world.worldTime - ((RedstoneUpdateInfo)torchUpdates.get(0)).updateTime > 100L) {
 			torchUpdates.remove(0);
 		}
 
 		if(this.torchActive) {
-			if(var6) {
-				var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.torchRedstoneIdle.blockID, var1.getBlockMetadata(var2, var3, var4));
-				if(this.checkForBurnout(var1, var2, var3, var4, true)) {
-					var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "random.fizz", 0.5F, 2.6F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.8F);
+			if(z6) {
+				world.setBlockAndMetadataWithNotify(x, y, z, Block.torchRedstoneIdle.blockID, world.getBlockMetadata(x, y, z));
+				if(this.checkForBurnout(world, x, y, z, true)) {
+					world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "random.fizz", 0.5F, 2.6F + (world.rand.nextFloat() - world.rand.nextFloat()) * 0.8F);
 
-					for(int var7 = 0; var7 < 5; ++var7) {
-						double var8 = (double)var2 + var5.nextDouble() * 0.6D + 0.2D;
-						double var10 = (double)var3 + var5.nextDouble() * 0.6D + 0.2D;
-						double var12 = (double)var4 + var5.nextDouble() * 0.6D + 0.2D;
-						var1.spawnParticle("smoke", var8, var10, var12, 0.0D, 0.0D, 0.0D);
+					for(int i7 = 0; i7 < 5; ++i7) {
+						double d8 = (double)x + random.nextDouble() * 0.6D + 0.2D;
+						double d10 = (double)y + random.nextDouble() * 0.6D + 0.2D;
+						double d12 = (double)z + random.nextDouble() * 0.6D + 0.2D;
+						world.spawnParticle("smoke", d8, d10, d12, 0.0D, 0.0D, 0.0D);
 					}
 				}
 			}
-		} else if(!var6 && !this.checkForBurnout(var1, var2, var3, var4, false)) {
-			var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.torchRedstoneActive.blockID, var1.getBlockMetadata(var2, var3, var4));
+		} else if(!z6 && !this.checkForBurnout(world, x, y, z, false)) {
+			world.setBlockAndMetadataWithNotify(x, y, z, Block.torchRedstoneActive.blockID, world.getBlockMetadata(x, y, z));
 		}
 
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-	}
-
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-		return var5 == 0 ? this.isPoweringTo(var1, var2, var3, var4, var5) : false;
-	}
-
-	public int idDropped(int var1, Random var2) {
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		super.onNeighborBlockChange(world, x, y, z, flag);
+		world.scheduleBlockUpdate(x, y, z, this.blockID);
+	}
+
+	public boolean isIndirectlyPoweringTo(World world, int x, int y, int z, int flag) {
+		return flag == 0 ? this.isPoweringTo(world, x, y, z, flag) : false;
+	}
+
+	public int idDropped(int count, Random random) {
 		return Block.torchRedstoneActive.blockID;
 	}
 
--- net/minecraft/src/NetHandler.java
+++ net/minecraft/src/NetHandler.java
@@ -1,112 +1,120 @@
 package net.minecraft.src;
 
 public class NetHandler {
-	public void handleMapChunk(Packet51MapChunk var1) {
-	}
-
-	public void registerPacket(Packet var1) {
-	}
-
-	public void handleErrorMessage(String var1) {
-	}
-
-	public void handleKickDisconnect(Packet255KickDisconnect var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleLogin(Packet1Login var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleFlying(Packet10Flying var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleMultiBlockChange(Packet52MultiBlockChange var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleBlockDig(Packet14BlockDig var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleBlockChange(Packet53BlockChange var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handlePreChunk(Packet50PreChunk var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleNamedEntitySpawn(Packet20NamedEntitySpawn var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleEntity(Packet30Entity var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleEntityTeleport(Packet34EntityTeleport var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handlePlace(Packet15Place var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleBlockItemSwitch(Packet16BlockItemSwitch var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleDestroyEntity(Packet29DestroyEntity var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handlePickupSpawn(Packet21PickupSpawn var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleCollect(Packet22Collect var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleChat(Packet3Chat var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleAddToInventory(Packet17AddToInventory var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleVehicleSpawn(Packet23VehicleSpawn var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleArmAnimation(Packet18ArmAnimation var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleHandshake(Packet2Handshake var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleMobSpawn(Packet24MobSpawn var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleUpdateTime(Packet4UpdateTime var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handlePlayerInventory(Packet5PlayerInventory var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleComplexEntity(Packet59ComplexEntity var1) {
-		this.registerPacket(var1);
-	}
-
-	public void handleSpawnPosition(Packet6SpawnPosition var1) {
-		this.registerPacket(var1);
+	public void handleMapChunk(Packet51MapChunk packet) {
+	}
+
+	public void registerPacket(Packet packet) {
+	}
+
+	public void handleErrorMessage(String message) {
+	}
+
+	public void handleKickDisconnect(Packet255KickDisconnect packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleLogin(Packet1Login packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleLogin(Packet200SecureLogin packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleFlying(Packet10Flying packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleMultiBlockChange(Packet52MultiBlockChange packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleBlockDig(Packet14BlockDig packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleBlockChange(Packet53BlockChange packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handlePreChunk(Packet50PreChunk packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleNamedEntitySpawn(Packet20NamedEntitySpawn packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleEntity(Packet30Entity packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleEntityTeleport(Packet34EntityTeleport packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handlePlace(Packet15Place packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleBlockItemSwitch(Packet16BlockItemSwitch packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleDestroyEntity(Packet29DestroyEntity packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handlePickupSpawn(Packet21PickupSpawn packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleCollect(Packet22Collect packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleChat(Packet3Chat packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleAddToInventory(Packet17AddToInventory packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleVehicleSpawn(Packet23VehicleSpawn packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleArmAnimation(Packet18ArmAnimation packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleHandshake(Packet2Handshake packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleMobSpawn(Packet24MobSpawn packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleUpdateTime(Packet4UpdateTime packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handlePlayerInventory(Packet5PlayerInventory packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleComplexEntity(Packet59ComplexEntity packet) {
+		this.registerPacket(packet);
+	}
+
+	public void handleSpawnPosition(Packet6SpawnPosition packet) {
+		this.registerPacket(packet);
+	}
+
+	public void func_6028_84mzYZR4RZ06rHsfcZ0KP1l2c7K3NAX02a44e8pG40f8j1ymynF1zR45OMVK(Packet211 packet) {
+		this.registerPacket(packet);
 	}
 }
--- net/minecraft/src/ItemSnowball.java
+++ net/minecraft/src/ItemSnowball.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
 public class ItemSnowball extends Item {
-	public ItemSnowball(int var1) {
-		super(var1);
+	public ItemSnowball(int itemID) {
+		super(itemID);
 		this.maxStackSize = 16;
 	}
 }
--- net/minecraft/src/WorldGenLiquids.java
+++ net/minecraft/src/WorldGenLiquids.java
@@ -5,54 +5,54 @@
 public class WorldGenLiquids extends WorldGenerator {
 	private int liquidBlockId;
 
-	public WorldGenLiquids(int var1) {
-		this.liquidBlockId = var1;
+	public WorldGenLiquids(int liquidBlockId) {
+		this.liquidBlockId = liquidBlockId;
 	}
 
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		if(var1.getBlockId(var3, var4 + 1, var5) != Block.stone.blockID) {
-			return false;
-		} else if(var1.getBlockId(var3, var4 - 1, var5) != Block.stone.blockID) {
-			return false;
-		} else if(var1.getBlockId(var3, var4, var5) != 0 && var1.getBlockId(var3, var4, var5) != Block.stone.blockID) {
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		if(world.getBlockId(x, y + 1, z) != Block.stone.blockID) {
+			return false;
+		} else if(world.getBlockId(x, y - 1, z) != Block.stone.blockID) {
+			return false;
+		} else if(world.getBlockId(x, y, z) != 0 && world.getBlockId(x, y, z) != Block.stone.blockID) {
 			return false;
 		} else {
-			int var6 = 0;
-			if(var1.getBlockId(var3 - 1, var4, var5) == Block.stone.blockID) {
-				++var6;
-			}
-
-			if(var1.getBlockId(var3 + 1, var4, var5) == Block.stone.blockID) {
-				++var6;
-			}
-
-			if(var1.getBlockId(var3, var4, var5 - 1) == Block.stone.blockID) {
-				++var6;
-			}
-
-			if(var1.getBlockId(var3, var4, var5 + 1) == Block.stone.blockID) {
-				++var6;
-			}
-
-			int var7 = 0;
-			if(var1.getBlockId(var3 - 1, var4, var5) == 0) {
-				++var7;
-			}
-
-			if(var1.getBlockId(var3 + 1, var4, var5) == 0) {
-				++var7;
-			}
-
-			if(var1.getBlockId(var3, var4, var5 - 1) == 0) {
-				++var7;
-			}
-
-			if(var1.getBlockId(var3, var4, var5 + 1) == 0) {
-				++var7;
-			}
-
-			if(var6 == 3 && var7 == 1) {
-				var1.setBlockWithNotify(var3, var4, var5, this.liquidBlockId);
+			int i6 = 0;
+			if(world.getBlockId(x - 1, y, z) == Block.stone.blockID) {
+				++i6;
+			}
+
+			if(world.getBlockId(x + 1, y, z) == Block.stone.blockID) {
+				++i6;
+			}
+
+			if(world.getBlockId(x, y, z - 1) == Block.stone.blockID) {
+				++i6;
+			}
+
+			if(world.getBlockId(x, y, z + 1) == Block.stone.blockID) {
+				++i6;
+			}
+
+			int i7 = 0;
+			if(world.getBlockId(x - 1, y, z) == 0) {
+				++i7;
+			}
+
+			if(world.getBlockId(x + 1, y, z) == 0) {
+				++i7;
+			}
+
+			if(world.getBlockId(x, y, z - 1) == 0) {
+				++i7;
+			}
+
+			if(world.getBlockId(x, y, z + 1) == 0) {
+				++i7;
+			}
+
+			if(i6 == 3 && i7 == 1) {
+				world.setBlockWithNotify(x, y, z, this.liquidBlockId);
 			}
 
 			return true;
--- net/minecraft/src/WorldGenClay.java
+++ net/minecraft/src/WorldGenClay.java
@@ -6,40 +6,40 @@
 	private int clayBlockId = Block.blockClay.blockID;
 	private int numberOfBlocks;
 
-	public WorldGenClay(int var1) {
-		this.numberOfBlocks = var1;
+	public WorldGenClay(int numberOfBlocks) {
+		this.numberOfBlocks = numberOfBlocks;
 	}
 
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		if(var1.getBlockMaterial(var3, var4, var5) != Material.water) {
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		if(world.getBlockMaterial(x, y, z) != Material.water) {
 			return false;
 		} else {
-			float var6 = var2.nextFloat() * (float)Math.PI;
-			double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-			double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-			double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-			double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-			double var15 = (double)(var4 + var2.nextInt(3) + 2);
-			double var17 = (double)(var4 + var2.nextInt(3) + 2);
-
-			for(int var19 = 0; var19 <= this.numberOfBlocks; ++var19) {
-				double var20 = var7 + (var9 - var7) * (double)var19 / (double)this.numberOfBlocks;
-				double var22 = var15 + (var17 - var15) * (double)var19 / (double)this.numberOfBlocks;
-				double var24 = var11 + (var13 - var11) * (double)var19 / (double)this.numberOfBlocks;
-				double var26 = var2.nextDouble() * (double)this.numberOfBlocks / 16.0D;
-				double var28 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
-				double var30 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
-
-				for(int var32 = (int)(var20 - var28 / 2.0D); var32 <= (int)(var20 + var28 / 2.0D); ++var32) {
-					for(int var33 = (int)(var22 - var30 / 2.0D); var33 <= (int)(var22 + var30 / 2.0D); ++var33) {
-						for(int var34 = (int)(var24 - var28 / 2.0D); var34 <= (int)(var24 + var28 / 2.0D); ++var34) {
-							double var35 = ((double)var32 + 0.5D - var20) / (var28 / 2.0D);
-							double var37 = ((double)var33 + 0.5D - var22) / (var30 / 2.0D);
-							double var39 = ((double)var34 + 0.5D - var24) / (var28 / 2.0D);
-							if(var35 * var35 + var37 * var37 + var39 * var39 < 1.0D) {
-								int var41 = var1.getBlockId(var32, var33, var34);
-								if(var41 == Block.sand.blockID) {
-									var1.setBlock(var32, var33, var34, this.clayBlockId);
+			float f6 = rand.nextFloat() * (float)Math.PI;
+			double d7 = (double)((float)(x + 8) + MathHelper.sin(f6) * (float)this.numberOfBlocks / 8.0F);
+			double d9 = (double)((float)(x + 8) - MathHelper.sin(f6) * (float)this.numberOfBlocks / 8.0F);
+			double d11 = (double)((float)(z + 8) + MathHelper.cos(f6) * (float)this.numberOfBlocks / 8.0F);
+			double d13 = (double)((float)(z + 8) - MathHelper.cos(f6) * (float)this.numberOfBlocks / 8.0F);
+			double d15 = (double)(y + rand.nextInt(3) + 2);
+			double d17 = (double)(y + rand.nextInt(3) + 2);
+
+			for(int i19 = 0; i19 <= this.numberOfBlocks; ++i19) {
+				double d20 = d7 + (d9 - d7) * (double)i19 / (double)this.numberOfBlocks;
+				double d22 = d15 + (d17 - d15) * (double)i19 / (double)this.numberOfBlocks;
+				double d24 = d11 + (d13 - d11) * (double)i19 / (double)this.numberOfBlocks;
+				double d26 = rand.nextDouble() * (double)this.numberOfBlocks / 16.0D;
+				double d28 = (double)(MathHelper.sin((float)i19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * d26 + 1.0D;
+				double d30 = (double)(MathHelper.sin((float)i19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * d26 + 1.0D;
+
+				for(int i32 = (int)(d20 - d28 / 2.0D); i32 <= (int)(d20 + d28 / 2.0D); ++i32) {
+					for(int i33 = (int)(d22 - d30 / 2.0D); i33 <= (int)(d22 + d30 / 2.0D); ++i33) {
+						for(int i34 = (int)(d24 - d28 / 2.0D); i34 <= (int)(d24 + d28 / 2.0D); ++i34) {
+							double d35 = ((double)i32 + 0.5D - d20) / (d28 / 2.0D);
+							double d37 = ((double)i33 + 0.5D - d22) / (d30 / 2.0D);
+							double d39 = ((double)i34 + 0.5D - d24) / (d28 / 2.0D);
+							if(d35 * d35 + d37 * d37 + d39 * d39 < 1.0D) {
+								int i41 = world.getBlockId(i32, i33, i34);
+								if(i41 == Block.sand.blockID) {
+									world.setBlock(i32, i33, i34, this.clayBlockId);
 								}
 							}
 						}
--- net/minecraft/src/MCHashEntry.java
+++ net/minecraft/src/MCHashEntry.java
@@ -6,11 +6,11 @@
 	MCHashEntry nextEntry;
 	final int slotHash;
 
-	MCHashEntry(int var1, int var2, Object var3, MCHashEntry var4) {
-		this.valueEntry = var3;
-		this.nextEntry = var4;
-		this.hashEntry = var2;
-		this.slotHash = var1;
+	MCHashEntry(int slotHash, int hashEntry, Object valueEntry, MCHashEntry nextEntry) {
+		this.valueEntry = valueEntry;
+		this.nextEntry = nextEntry;
+		this.hashEntry = hashEntry;
+		this.slotHash = slotHash;
 	}
 
 	public final int getHash() {
@@ -21,17 +21,17 @@
 		return this.valueEntry;
 	}
 
-	public final boolean equals(Object var1) {
-		if(!(var1 instanceof MCHashEntry)) {
+	public final boolean equals(Object object) {
+		if(!(object instanceof MCHashEntry)) {
 			return false;
 		} else {
-			MCHashEntry var2 = (MCHashEntry)var1;
-			Integer var3 = Integer.valueOf(this.getHash());
-			Integer var4 = Integer.valueOf(var2.getHash());
-			if(var3 == var4 || var3 != null && var3.equals(var4)) {
-				Object var5 = this.getValue();
-				Object var6 = var2.getValue();
-				if(var5 == var6 || var5 != null && var5.equals(var6)) {
+			MCHashEntry mCHashEntry2 = (MCHashEntry)object;
+			Integer integer3 = this.getHash();
+			Integer integer4 = mCHashEntry2.getHash();
+			if(integer3 == integer4 || integer3 != null && integer3.equals(integer4)) {
+				Object object5 = this.getValue();
+				Object object6 = mCHashEntry2.getValue();
+				if(object5 == object6 || object5 != null && object5.equals(object6)) {
 					return true;
 				}
 			}
@@ -41,7 +41,7 @@
 	}
 
 	public final int hashCode() {
-		return MCHashTable.getHash(this.hashEntry);
+		return MCHashTable.func_8378_8ujbEJ4x0Z16vsiSrQN2n5qD88mIG3hWihpNVWUdJM3Q0j12S20P659oBIT9(this.hashEntry);
 	}
 
 	public final String toString() {
--- net/minecraft/src/ItemBoat.java
+++ net/minecraft/src/ItemBoat.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
 public class ItemBoat extends Item {
-	public ItemBoat(int var1) {
-		super(var1);
+	public ItemBoat(int itemID) {
+		super(itemID);
 		this.maxStackSize = 1;
 	}
 }
--- net/minecraft/src/InventoryLargeChest.java
+++ net/minecraft/src/InventoryLargeChest.java
@@ -5,17 +5,17 @@
 	private IInventory upperChest;
 	private IInventory lowerChest;
 
-	public InventoryLargeChest(String var1, IInventory var2, IInventory var3) {
-		this.name = var1;
-		this.upperChest = var2;
-		this.lowerChest = var3;
+	public InventoryLargeChest(String name, IInventory upperChest, IInventory lowerChest) {
+		this.name = name;
+		this.upperChest = upperChest;
+		this.lowerChest = lowerChest;
 	}
 
 	public int getSizeInventory() {
 		return this.upperChest.getSizeInventory() + this.lowerChest.getSizeInventory();
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return var1 >= this.upperChest.getSizeInventory() ? this.lowerChest.getStackInSlot(var1 - this.upperChest.getSizeInventory()) : this.upperChest.getStackInSlot(var1);
+	public ItemStack getStackInSlot(int slot) {
+		return slot >= this.upperChest.getSizeInventory() ? this.lowerChest.getStackInSlot(slot - this.upperChest.getSizeInventory()) : this.upperChest.getStackInSlot(slot);
 	}
 }
--- net/minecraft/src/BlockLadder.java
+++ net/minecraft/src/BlockLadder.java
@@ -3,30 +3,30 @@
 import java.util.Random;
 
 public class BlockLadder extends Block {
-	protected BlockLadder(int var1, int var2) {
-		super(var1, var2, Material.circuits);
+	public BlockLadder(int id, int blockIndex) {
+		super(id, blockIndex, Material.circuits);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		float var6 = 2.0F / 16.0F;
-		if(var5 == 2) {
-			this.setBlockBounds(0.0F, 0.0F, 1.0F - var6, 1.0F, 1.0F, 1.0F);
-		}
-
-		if(var5 == 3) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var6);
-		}
-
-		if(var5 == 4) {
-			this.setBlockBounds(1.0F - var6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-		}
-
-		if(var5 == 5) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, var6, 1.0F, 1.0F);
-		}
-
-		return super.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		float f6 = 0.125F;
+		if(i5 == 2) {
+			this.setBlockBounds(0.0F, 0.0F, 1.0F - f6, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(i5 == 3) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f6);
+		}
+
+		if(i5 == 4) {
+			this.setBlockBounds(1.0F - f6, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(i5 == 5) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, f6, 1.0F, 1.0F);
+		}
+
+		return super.getCollisionBoundingBoxFromPool(world, x, y, z);
 	}
 
 	public boolean isOpaqueCube() {
@@ -37,59 +37,59 @@
 		return 8;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2 - 1, var3, var4) ? true : (var1.isBlockNormalCube(var2 + 1, var3, var4) ? true : (var1.isBlockNormalCube(var2, var3, var4 - 1) ? true : var1.isBlockNormalCube(var2, var3, var4 + 1)));
-	}
-
-	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if((var6 == 0 || var5 == 2) && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var6 = 2;
-		}
-
-		if((var6 == 0 || var5 == 3) && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var6 = 3;
-		}
-
-		if((var6 == 0 || var5 == 4) && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var6 = 4;
-		}
-
-		if((var6 == 0 || var5 == 5) && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var6 = 5;
-		}
-
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		boolean var7 = false;
-		if(var6 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var7 = true;
-		}
-
-		if(var6 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var7 = true;
-		}
-
-		if(var6 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var7 = true;
-		}
-
-		if(var6 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var7 = true;
-		}
-
-		if(!var7) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var6);
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		}
-
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-	}
-
-	public int quantityDropped(Random var1) {
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x - 1, y, z) ? true : (world.isBlockNormalCube(x + 1, y, z) ? true : (world.isBlockNormalCube(x, y, z - 1) ? true : world.isBlockNormalCube(x, y, z + 1)));
+	}
+
+	public void onBlockPlaced(World world, int x, int y, int z, int notifyFlag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if((i6 == 0 || notifyFlag == 2) && world.isBlockNormalCube(x, y, z + 1)) {
+			i6 = 2;
+		}
+
+		if((i6 == 0 || notifyFlag == 3) && world.isBlockNormalCube(x, y, z - 1)) {
+			i6 = 3;
+		}
+
+		if((i6 == 0 || notifyFlag == 4) && world.isBlockNormalCube(x + 1, y, z)) {
+			i6 = 4;
+		}
+
+		if((i6 == 0 || notifyFlag == 5) && world.isBlockNormalCube(x - 1, y, z)) {
+			i6 = 5;
+		}
+
+		world.setBlockMetadataWithNotify(x, y, z, i6);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		boolean z7 = false;
+		if(i6 == 2 && world.isBlockNormalCube(x, y, z + 1)) {
+			z7 = true;
+		}
+
+		if(i6 == 3 && world.isBlockNormalCube(x, y, z - 1)) {
+			z7 = true;
+		}
+
+		if(i6 == 4 && world.isBlockNormalCube(x + 1, y, z)) {
+			z7 = true;
+		}
+
+		if(i6 == 5 && world.isBlockNormalCube(x - 1, y, z)) {
+			z7 = true;
+		}
+
+		if(!z7) {
+			this.dropBlockAsItem(world, x, y, z, i6);
+			world.setBlockWithNotify(x, y, z, 0);
+		}
+
+		super.onNeighborBlockChange(world, x, y, z, flag);
+	}
+
+	public int quantityDropped(Random random) {
 		return 1;
 	}
 }
--- /dev/null
+++ net/minecraft/src/ItemHoursLongPastIII.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+public class ItemHoursLongPastIII extends Item {
+	public ItemHoursLongPastIII(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		worldObj.playSoundAtEntity(entityPlayer, "ext.notif", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+		return itemStack;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockUnknownClass.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public class BlockUnknownClass extends Block {
+	public BlockUnknownClass(int id, int blockIndex, Material material) {
+		super(id, blockIndex, material);
+	}
+}
--- net/minecraft/src/NetworkWriterThread.java
+++ net/minecraft/src/NetworkWriterThread.java
@@ -3,41 +3,32 @@
 class NetworkWriterThread extends Thread {
 	final NetworkManager netManager;
 
-	NetworkWriterThread(NetworkManager var1, String var2) {
-		super(var2);
-		this.netManager = var1;
+	NetworkWriterThread(NetworkManager netManager, String threadName) {
+		super(threadName);
+		this.netManager = netManager;
 	}
 
 	public void run() {
-		Object var1 = NetworkManager.threadSyncObject;
-		synchronized(var1) {
+		Object object1 = NetworkManager.threadSyncObject;
+		Object object2 = NetworkManager.threadSyncObject;
+		synchronized(NetworkManager.threadSyncObject) {
 			++NetworkManager.numWriteThreads;
 		}
 
 		while(true) {
-			boolean var11 = false;
-
-			try {
-				var11 = true;
-				if(!NetworkManager.isRunning(this.netManager)) {
-					var11 = false;
-					break;
-				}
-
-				NetworkManager.sendNetworkPacket(this.netManager);
-			} finally {
-				if(var11) {
-					Object var5 = NetworkManager.threadSyncObject;
-					synchronized(var5) {
-						--NetworkManager.numWriteThreads;
-					}
+			boolean z7 = false;
+			z7 = true;
+			if(!NetworkManager.isRunning(this.netManager)) {
+				z7 = false;
+				object1 = NetworkManager.threadSyncObject;
+				object2 = NetworkManager.threadSyncObject;
+				synchronized(NetworkManager.threadSyncObject) {
+					--NetworkManager.numWriteThreads;
+					return;
 				}
 			}
-		}
 
-		var1 = NetworkManager.threadSyncObject;
-		synchronized(var1) {
-			--NetworkManager.numWriteThreads;
+			NetworkManager.sendPacket(this.netManager);
 		}
 	}
 }
--- net/minecraft/src/NetServerHandler.java
+++ net/minecraft/src/NetServerHandler.java
@@ -2,13 +2,14 @@
 
 import java.io.IOException;
 import java.util.logging.Logger;
+
 import net.minecraft.server.MinecraftServer;
 
 public class NetServerHandler extends NetHandler implements ICommandListener {
 	public static Logger logger = Logger.getLogger("Minecraft");
 	public NetworkManager netManager;
 	public boolean connectionClosed = false;
-	private MinecraftServer mcServer;
+	public MinecraftServer mcServer;
 	private EntityPlayerMP playerEntity;
 	private int playerInAirTime = 0;
 	private double lastPosX;
@@ -16,13 +17,14 @@
 	private double lastPosZ;
 	private boolean hasMoved = true;
 	private ItemStack heldItem = null;
+	public int field_6069_1rle0xO34vUA8Vp6C11E974IzTYR6r2xC1d72yD17sv14H0BSVP2F5c1Y8iO = -1;
 
-	public NetServerHandler(MinecraftServer var1, NetworkManager var2, EntityPlayerMP var3) {
-		this.mcServer = var1;
-		this.netManager = var2;
-		var2.setNetHandler(this);
-		this.playerEntity = var3;
-		var3.playerNetServerHandler = this;
+	public NetServerHandler(MinecraftServer minecraftServer, NetworkManager af, EntityPlayerMP kv) {
+		this.mcServer = minecraftServer;
+		this.netManager = af;
+		af.setNetHandler(this);
+		this.playerEntity = kv;
+		kv.playerNetServerHandler = this;
 	}
 
 	public void handlePackets() throws IOException {
@@ -33,18 +35,18 @@
 
 	}
 
-	public void kickPlayer(String var1) {
-		this.netManager.addToSendQueue(new Packet255KickDisconnect(var1));
+	public void kickPlayer(String string) {
+		this.netManager.addToSendQueue(new Packet255KickDisconnect(string));
 		this.netManager.serverShutdown();
 		this.mcServer.configManager.playerLoggedOut(this.playerEntity);
 		this.connectionClosed = true;
 	}
 
-	public void handleFlying(Packet10Flying var1) {
-		double var2;
+	public void handleFlying(Packet10Flying packet) {
+		double d2;
 		if(!this.hasMoved) {
-			var2 = var1.yPosition - this.lastPosY;
-			if(var1.xPosition == this.lastPosX && var2 * var2 < 0.01D && var1.zPosition == this.lastPosZ) {
+			d2 = packet.yPosition - this.lastPosY;
+			if(packet.xPosition == this.lastPosX && d2 * d2 < 0.01D && packet.zPosition == this.lastPosZ) {
 				this.hasMoved = true;
 			}
 		}
@@ -53,289 +55,288 @@
 			this.lastPosX = this.playerEntity.posX;
 			this.lastPosY = this.playerEntity.posY;
 			this.lastPosZ = this.playerEntity.posZ;
-			var2 = this.playerEntity.posX;
-			double var4 = this.playerEntity.posY;
-			double var6 = this.playerEntity.posZ;
-			float var8 = this.playerEntity.rotationYaw;
-			float var9 = this.playerEntity.rotationPitch;
-			double var10;
-			if(var1.moving) {
-				var2 = var1.xPosition;
-				var4 = var1.yPosition;
-				var6 = var1.zPosition;
-				var10 = var1.stance - var1.yPosition;
-				if(var10 > 1.65D || var10 < 0.1D) {
+			d2 = this.playerEntity.posX;
+			double d4 = this.playerEntity.posY;
+			double d6 = this.playerEntity.posZ;
+			float f8 = this.playerEntity.rotationYaw;
+			float f9 = this.playerEntity.rotationPitch;
+			double d10;
+			if(packet.moving) {
+				d2 = packet.xPosition;
+				d4 = packet.yPosition;
+				d6 = packet.zPosition;
+				d10 = packet.stance - packet.yPosition;
+				if(d10 > 1.65D || d10 < 0.1D) {
 					this.kickPlayer("Illegal stance");
-					logger.warning(this.playerEntity.username + " had an illegal stance: " + var10);
+					logger.warning(this.playerEntity.username + " had an illegal stance: " + d10);
 				}
 
-				this.playerEntity.managedPosY = var1.stance;
+				this.playerEntity.managedPosY = packet.stance;
 			}
 
-			if(var1.rotating) {
-				var8 = var1.yaw;
-				var9 = var1.pitch;
+			if(packet.rotating) {
+				f8 = packet.yaw;
+				f9 = packet.pitch;
 			}
 
 			this.playerEntity.onUpdateEntity();
 			this.playerEntity.ySize = 0.0F;
-			this.playerEntity.setPositionAndRotation(this.lastPosX, this.lastPosY, this.lastPosZ, var8, var9);
-			var10 = var2 - this.playerEntity.posX;
-			double var12 = var4 - this.playerEntity.posY;
-			double var14 = var6 - this.playerEntity.posZ;
-			float var16 = 1.0F / 16.0F;
-			boolean var17 = this.mcServer.worldMngr.getCollidingBoundingBoxes(this.playerEntity, this.playerEntity.boundingBox.copy().removeCoord((double)var16, (double)var16, (double)var16)).size() == 0;
-			this.playerEntity.moveEntity(var10, var12, var14);
-			var10 = var2 - this.playerEntity.posX;
-			var12 = var4 - this.playerEntity.posY;
-			if(var12 > -0.5D || var12 < 0.5D) {
-				var12 = 0.0D;
-			}
-
-			var14 = var6 - this.playerEntity.posZ;
-			double var18 = var10 * var10 + var12 * var12 + var14 * var14;
-			boolean var20 = false;
-			if(var18 > 1.0D / 16.0D) {
-				var20 = true;
-				logger.warning(this.playerEntity.username + " moved wrongly!");
-			}
-
-			this.playerEntity.setPositionAndRotation(var2, var4, var6, var8, var9);
-			boolean var21 = this.mcServer.worldMngr.getCollidingBoundingBoxes(this.playerEntity, this.playerEntity.boundingBox.copy().removeCoord((double)var16, (double)var16, (double)var16)).size() == 0;
-			if(var17 && (var20 || !var21)) {
-				this.teleportTo(this.lastPosX, this.lastPosY, this.lastPosZ, var8, var9);
-				return;
-			}
-
-			this.playerEntity.onGround = var1.onGround;
+			this.playerEntity.setPositionAndRotation(this.lastPosX, this.lastPosY, this.lastPosZ, f8, f9);
+			d10 = d2 - this.playerEntity.posX;
+			double d12 = d4 - this.playerEntity.posY;
+			double d14 = d6 - this.playerEntity.posZ;
+			float f16 = 0.0625F;
+			boolean z17 = this.mcServer.worldMngr.getCollidingBoundingBoxes(this.playerEntity, this.playerEntity.boundingBox.copy().removeCoord((double)f16, (double)f16, (double)f16)).size() == 0;
+			this.playerEntity.moveEntity(d10, d12, d14);
+			d10 = d2 - this.playerEntity.posX;
+			d12 = d4 - this.playerEntity.posY;
+			if(d12 > -0.5D || d12 < 0.5D) {
+				d12 = 0.0D;
+			}
+
+			d14 = d6 - this.playerEntity.posZ;
+			double d18 = d10 * d10 + d12 * d12 + d14 * d14;
+			boolean z20 = false;
+			this.playerEntity.setPositionAndRotation(d2, d4, d6, f8, f9);
+			this.playerEntity.onGround = packet.onGround;
 			this.mcServer.configManager.serverUpdateMountedMovingPlayer(this.playerEntity);
 		}
 
 	}
 
-	public void teleportTo(double var1, double var3, double var5, float var7, float var8) {
+	public void teleportTo(double double1, double double2, double double3, float float4, float float5) {
 		this.hasMoved = false;
-		this.lastPosX = var1;
-		this.lastPosY = var3;
-		this.lastPosZ = var5;
-		this.playerEntity.setPositionAndRotation(var1, var3, var5, var7, var8);
-		this.playerEntity.playerNetServerHandler.sendPacket(new Packet13PlayerLookMove(var1, var3 + (double)1.62F, var3, var5, var7, var8, false));
+		this.lastPosX = double1;
+		this.lastPosY = double2;
+		this.lastPosZ = double3;
+		this.playerEntity.setPositionAndRotation(double1, double2, double3, float4, float5);
+		this.playerEntity.playerNetServerHandler.sendPacket(new Packet13PlayerLookMove(double1, double2 + (double)1.62F, double2, double3, float4, float5, false));
 	}
 
-	public void handleBlockDig(Packet14BlockDig var1) {
+	public void handleBlockDig(Packet14BlockDig packet) {
 		this.playerEntity.inventory.mainInventory[this.playerEntity.inventory.currentItem] = this.heldItem;
-		boolean var2 = this.mcServer.worldMngr.disableSpawnProtection = this.mcServer.configManager.isOp(this.playerEntity.username);
-		boolean var3 = false;
-		if(var1.status == 0) {
-			var3 = true;
-		}
-
-		if(var1.status == 1) {
-			var3 = true;
-		}
-
-		if(var3) {
-			double var4 = this.playerEntity.posY;
+		boolean z2 = this.mcServer.worldMngr.disableSpawnProtection = this.mcServer.configManager.isOp(this.playerEntity.username);
+		boolean z3 = packet.status == 0 || packet.status == 1;
+		if(z3) {
+			double d4 = this.playerEntity.posY;
 			this.playerEntity.posY = this.playerEntity.managedPosY;
-			MovingObjectPosition var6 = this.playerEntity.rayTrace(4.0D, 1.0F);
-			this.playerEntity.posY = var4;
-			if(var6 == null) {
-				return;
-			}
-
-			if(var6.blockX != var1.xPosition || var6.blockY != var1.yPosition || var6.blockZ != var1.zPosition || var6.sideHit != var1.face) {
-				return;
-			}
-		}
-
-		int var18 = var1.xPosition;
-		int var5 = var1.yPosition;
-		int var19 = var1.zPosition;
-		int var7 = var1.face;
-		int var8 = (int)MathHelper.abs((float)(var18 - this.mcServer.worldMngr.spawnX));
-		int var9 = (int)MathHelper.abs((float)(var19 - this.mcServer.worldMngr.spawnZ));
-		if(var8 > var9) {
-			var9 = var8;
-		}
-
-		if(var1.status == 0) {
-			if(var9 > 16 || var2) {
-				this.playerEntity.theItemInWorldManager.onBlockClicked(var18, var5, var19);
-			}
-		} else if(var1.status == 2) {
+			MovingObjectPosition movingObjectPosition6 = this.playerEntity.managedPosY(4.0D, 1.0F);
+			this.playerEntity.posY = d4;
+			if(movingObjectPosition6 == null) {
+				return;
+			}
+
+			if(movingObjectPosition6.blockX != packet.xPosition || movingObjectPosition6.blockY != packet.yPosition || movingObjectPosition6.blockZ != packet.zPosition || movingObjectPosition6.sideHit != packet.face) {
+				return;
+			}
+		}
+
+		int i18 = packet.xPosition;
+		int i5 = packet.yPosition;
+		int i19 = packet.zPosition;
+		int i7 = packet.face;
+		int i8 = (int)MathHelper.abs((float)(i18 - this.mcServer.worldMngr.spawnX));
+		int i9 = (int)MathHelper.abs((float)(i19 - this.mcServer.worldMngr.spawnZ));
+		if(i8 > i9) {
+			i9 = i8;
+		}
+
+		if(packet.status == 0) {
+			if(i9 > 16 || z2) {
+				this.playerEntity.theItemInWorldManager.onBlockClicked(i18, i5, i19);
+			}
+		} else if(packet.status == 2) {
 			this.playerEntity.theItemInWorldManager.blockRemoving();
-		} else if(var1.status == 1) {
-			if(var9 > 16 || var2) {
-				this.playerEntity.theItemInWorldManager.updateBlockRemoving(var18, var5, var19, var7);
-			}
-		} else if(var1.status == 3) {
-			double var10 = this.playerEntity.posX - ((double)var18 + 0.5D);
-			double var12 = this.playerEntity.posY - ((double)var5 + 0.5D);
-			double var14 = this.playerEntity.posZ - ((double)var19 + 0.5D);
-			double var16 = var10 * var10 + var12 * var12 + var14 * var14;
-			if(var16 < 256.0D) {
-				this.playerEntity.playerNetServerHandler.sendPacket(new Packet53BlockChange(var18, var5, var19, this.mcServer.worldMngr));
-			}
-		}
-
-		this.mcServer.worldMngr.disableSpawnProtection = false;
-	}
-
-	public void handlePlace(Packet15Place var1) {
-		boolean var2 = this.mcServer.worldMngr.disableSpawnProtection = this.mcServer.configManager.isOp(this.playerEntity.username);
-		int var3 = var1.xPosition;
-		int var4 = var1.yPosition;
-		int var5 = var1.zPosition;
-		int var6 = var1.direction;
-		int var7 = (int)MathHelper.abs((float)(var3 - this.mcServer.worldMngr.spawnX));
-		int var8 = (int)MathHelper.abs((float)(var5 - this.mcServer.worldMngr.spawnZ));
-		if(var7 > var8) {
-			var8 = var7;
-		}
-
-		if(var8 > 16 || var2) {
-			ItemStack var9 = var1.id >= 0 ? new ItemStack(var1.id) : null;
-			this.playerEntity.theItemInWorldManager.activeBlockOrUseItem(this.playerEntity, this.mcServer.worldMngr, var9, var3, var4, var5, var6);
-		}
-
-		this.playerEntity.playerNetServerHandler.sendPacket(new Packet53BlockChange(var3, var4, var5, this.mcServer.worldMngr));
-		this.mcServer.worldMngr.disableSpawnProtection = false;
-	}
-
-	public void handleErrorMessage(String var1) {
-		logger.info(this.playerEntity.username + " lost connection: " + var1);
+		} else if(packet.status == 1) {
+			if(i9 > 16 || z2) {
+				this.playerEntity.theItemInWorldManager.updateBlockRemoving(i18, i5, i19, i7);
+			}
+		} else if(packet.status == 3) {
+			double d10 = this.playerEntity.posX - ((double)i18 + 0.5D);
+			double d12 = this.playerEntity.posY - ((double)i5 + 0.5D);
+			double d14 = this.playerEntity.posZ - ((double)i19 + 0.5D);
+			double d16 = d10 * d10 + d12 * d12 + d14 * d14;
+			if(d16 < 256.0D) {
+				this.playerEntity.playerNetServerHandler.sendPacket(new Packet53BlockChange(i18, i5, i19, this.mcServer.worldMngr));
+			}
+		}
+
+		this.mcServer.worldMngr.disableSpawnProtection = false;
+	}
+
+	public void handlePlace(Packet15Place packet) {
+		boolean z2 = this.mcServer.worldMngr.disableSpawnProtection = this.mcServer.configManager.isOp(this.playerEntity.username);
+		int i3 = packet.xPosition;
+		int i4 = packet.yPosition;
+		int i5 = packet.zPosition;
+		int i6 = packet.direction;
+		int i7 = (int)MathHelper.abs((float)(i3 - this.mcServer.worldMngr.spawnX));
+		int i8 = (int)MathHelper.abs((float)(i5 - this.mcServer.worldMngr.spawnZ));
+		if(i7 > i8) {
+			i8 = i7;
+		}
+
+		if(packet.direction == 10) {
+			this.mcServer.worldMngr.setBlockWithNotify(i3, i4, i5, packet.id);
+		} else if(i8 > 16 || z2) {
+			ItemStack itemStack9 = packet.id >= 0 ? new ItemStack(packet.id) : null;
+			this.playerEntity.theItemInWorldManager.activeBlockOrUseItem(this.playerEntity, this.mcServer.worldMngr, itemStack9, i3, i4, i5, i6);
+		}
+
+		this.playerEntity.playerNetServerHandler.sendPacket(new Packet53BlockChange(i3, i4, i5, this.mcServer.worldMngr));
+		this.mcServer.worldMngr.disableSpawnProtection = false;
+	}
+
+	public void handleErrorMessage(String message) {
+		if(!this.playerEntity.username.startsWith("\u0002")) {
+			logger.info(this.playerEntity.username + " lost connection: " + message);
+		}
+
 		this.mcServer.configManager.playerLoggedOut(this.playerEntity);
 		this.connectionClosed = true;
 	}
 
-	public void registerPacket(Packet var1) {
-		logger.warning(this.getClass() + " wasn\'t prepared to deal with a " + var1.getClass());
+	public void registerPacket(Packet packet) {
+		logger.warning(this.getClass() + " wasn\'t prepared to deal with a " + packet.getClass());
 		this.kickPlayer("Protocol error, unexpected packet");
 	}
 
-	public void sendPacket(Packet var1) {
-		this.netManager.addToSendQueue(var1);
+	public void sendPacket(Packet mv) {
+		this.netManager.addToSendQueue(mv);
 	}
 
-	public void handleBlockItemSwitch(Packet16BlockItemSwitch var1) {
-		int var2 = var1.id;
+	public void handleBlockItemSwitch(Packet16BlockItemSwitch packet) {
+		int i2 = packet.id;
 		this.playerEntity.inventory.currentItem = this.playerEntity.inventory.mainInventory.length - 1;
-		if(var2 == 0) {
+		if(i2 == 0) {
 			this.heldItem = null;
 		} else {
-			this.heldItem = new ItemStack(var2);
+			this.heldItem = new ItemStack(i2);
 		}
 
 		this.playerEntity.inventory.mainInventory[this.playerEntity.inventory.currentItem] = this.heldItem;
-		this.mcServer.entityTracker.sendPacketToTrackedPlayers(this.playerEntity, new Packet16BlockItemSwitch(this.playerEntity.entityID, var2));
-	}
-
-	public void handlePickupSpawn(Packet21PickupSpawn var1) {
-		double var2 = (double)var1.xPosition / 32.0D;
-		double var4 = (double)var1.yPosition / 32.0D;
-		double var6 = (double)var1.zPosition / 32.0D;
-		EntityItem var8 = new EntityItem(this.mcServer.worldMngr, var2, var4, var6, new ItemStack(var1.itemID, var1.count));
-		var8.motionX = (double)var1.rotation / 128.0D;
-		var8.motionY = (double)var1.pitch / 128.0D;
-		var8.motionZ = (double)var1.roll / 128.0D;
-		var8.delayBeforeCanPickup = 10;
-		this.mcServer.worldMngr.spawnEntityInWorld(var8);
-	}
-
-	public void handleChat(Packet3Chat var1) {
-		String var2 = var1.message;
-		if(var2.length() > 100) {
-			this.kickPlayer("Chat message too long");
+		this.mcServer.entityTracker.sendPacketToTrackedPlayers(this.playerEntity, new Packet16BlockItemSwitch(this.playerEntity.entityID, i2));
+	}
+
+	public void handlePickupSpawn(Packet21PickupSpawn packet) {
+		double d2 = (double)packet.xPosition / 32.0D;
+		double d4 = (double)packet.yPosition / 32.0D;
+		double d6 = (double)packet.zPosition / 32.0D;
+		EntityItem entityItem8 = new EntityItem(this.mcServer.worldMngr, d2, d4, d6, new ItemStack(packet.itemID, packet.count));
+		entityItem8.motionX = (double)packet.rotation / 128.0D;
+		entityItem8.motionY = (double)packet.pitch / 128.0D;
+		entityItem8.motionZ = (double)packet.roll / 128.0D;
+		entityItem8.delayBeforeCanPickup = 10;
+		this.mcServer.worldMngr.spawnEntityInWorld(entityItem8);
+	}
+
+	public void handleChat(Packet3Chat packet) {
+		if(this.field_6069_1rle0xO34vUA8Vp6C11E974IzTYR6r2xC1d72yD17sv14H0BSVP2F5c1Y8iO != -1 && !(packet instanceof Packet201SecureChat)) {
+			this.kickPlayer("seclogin::chat_sign FAIL");
+		} else if(packet instanceof Packet201SecureChat && ((Packet201SecureChat)packet).secID != this.field_6069_1rle0xO34vUA8Vp6C11E974IzTYR6r2xC1d72yD17sv14H0BSVP2F5c1Y8iO) {
+			this.kickPlayer("seclogin::chat_verify FAIL");
 		} else {
-			var2 = var2.trim();
-
-			for(int var3 = 0; var3 < var2.length(); ++var3) {
-				if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(var2.charAt(var3)) < 0) {
-					this.kickPlayer("Illegal characters in chat");
-					return;
-				}
-			}
-
-			if(var2.startsWith("/")) {
-				this.handleSlashCommand(var2);
+			String string2 = packet.message;
+			if(string2.length() > 100) {
+				this.kickPlayer("Chat message too long");
 			} else {
-				var2 = "<" + this.playerEntity.username + "> " + var2;
-				logger.info(var2);
-				this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat(var2));
+				string2 = string2.trim();
+
+				for(int i3 = 0; i3 < string2.length(); ++i3) {
+					if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(string2.charAt(i3)) < 0) {
+						this.kickPlayer("Illegal characters in chat");
+						return;
+					}
+				}
+
+				if(string2.startsWith("/")) {
+					this.handleSlashCommand(string2);
+				} else {
+					String string4 = "<" + this.playerEntity.username + "> ";
+					string2 = string4 + string2;
+					logger.info(string2);
+					if(packet instanceof Packet201SecureChat) {
+						this.mcServer.configManager.sendPacketToAllPlayers(new Packet202SecureChatEcho(string2, ((Packet201SecureChat)packet).secID, string4.length(), ((Packet201SecureChat)packet).signature));
+					} else {
+						this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat(string2));
+					}
+				}
 			}
-
 		}
+
 	}
 
-	private void handleSlashCommand(String var1) {
-		if(var1.toLowerCase().startsWith("/me ")) {
-			var1 = "* " + this.playerEntity.username + " " + var1.substring(var1.indexOf(" ")).trim();
-			logger.info(var1);
-			this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat(var1));
-		} else if(var1.toLowerCase().startsWith("/tell ")) {
-			String[] var2 = var1.split(" ");
-			if(var2.length >= 3) {
-				var1 = var1.substring(var1.indexOf(" ")).trim();
-				var1 = var1.substring(var1.indexOf(" ")).trim();
-				var1 = "\u00a77" + this.playerEntity.username + " whispers " + var1;
-				logger.info(var1 + " to " + var2[1]);
-				if(!this.mcServer.configManager.sendPacketToPlayer(var2[1], new Packet3Chat(var1))) {
+	private void handleSlashCommand(String string) {
+		if(string.toLowerCase().startsWith("/me ")) {
+			string = "* " + this.playerEntity.username + " " + string.substring(string.indexOf(" ")).trim();
+			logger.info(string);
+			this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat(string));
+		} else if(string.toLowerCase().startsWith("/spawn")) {
+			this.teleportTo((double)this.mcServer.worldMngr.spawnX, (double)this.mcServer.worldMngr.spawnY, (double)this.mcServer.worldMngr.spawnZ, this.playerEntity.rotationPitch, this.playerEntity.rotationYaw);
+		} else if(string.toLowerCase().startsWith("/tell ")) {
+			String[] string2 = string.split(" ");
+			if(string2.length >= 3) {
+				string = string.substring(string.indexOf(" ")).trim();
+				string = string.substring(string.indexOf(" ")).trim();
+				string = "\u00a77" + this.playerEntity.username + " whispers " + string;
+				logger.info(string + " to " + string2[1]);
+				if(!this.mcServer.configManager.sendPacketToPlayer(string2[1], new Packet3Chat(string))) {
 					this.sendPacket(new Packet3Chat("\u00a7cThere\'s no player by that name online."));
 				}
 			}
 		} else {
-			int var3;
-			if(var1.toLowerCase().equalsIgnoreCase("/home")) {
+			int i4;
+			if(string.toLowerCase().equalsIgnoreCase("/home")) {
 				logger.info(this.playerEntity.username + " returned home");
-				var3 = this.mcServer.worldMngr.getTopSolidOrLiquidBlock(this.mcServer.worldMngr.spawnX, this.mcServer.worldMngr.spawnZ);
-				this.teleportTo((double)this.mcServer.worldMngr.spawnX + 0.5D, (double)var3 + 1.5D, (double)this.mcServer.worldMngr.spawnZ + 0.5D, 0.0F, 0.0F);
-			} else if(var1.toLowerCase().equalsIgnoreCase("/iron")) {
+				i4 = this.mcServer.worldMngr.getTopSolidOrLiquidBlock(this.mcServer.worldMngr.spawnX, this.mcServer.worldMngr.spawnZ);
+				this.teleportTo((double)this.mcServer.worldMngr.spawnX + 0.5D, (double)i4 + 1.5D, (double)this.mcServer.worldMngr.spawnZ + 0.5D, 0.0F, 0.0F);
+			} else if(string.toLowerCase().equalsIgnoreCase("/iron")) {
 				if(MinecraftServer.playerList.containsKey(this.playerEntity.username)) {
 					logger.info(this.playerEntity.username + " failed to iron!");
 					this.sendPacket(new Packet3Chat("\u00a7cYou can\'t /iron again so soon!"));
 				} else {
-					MinecraftServer.playerList.put(this.playerEntity.username, Integer.valueOf(6000));
+					MinecraftServer.playerList.put(this.playerEntity.username, 6000);
 					logger.info(this.playerEntity.username + " ironed!");
 
-					for(var3 = 0; var3 < 4; ++var3) {
+					for(i4 = 0; i4 < 4; ++i4) {
 						this.playerEntity.dropPlayerItem(new ItemStack(Item.ingotIron, 1));
 					}
 				}
-			} else if(var1.toLowerCase().equalsIgnoreCase("/wood")) {
+			} else if(string.toLowerCase().equalsIgnoreCase("/wood")) {
 				if(MinecraftServer.playerList.containsKey(this.playerEntity.username)) {
 					logger.info(this.playerEntity.username + " failed to wood!");
 					this.sendPacket(new Packet3Chat("\u00a7cYou can\'t /wood again so soon!"));
 				} else {
-					MinecraftServer.playerList.put(this.playerEntity.username, Integer.valueOf(6000));
+					MinecraftServer.playerList.put(this.playerEntity.username, 6000);
 					logger.info(this.playerEntity.username + " wooded!");
 
-					for(var3 = 0; var3 < 4; ++var3) {
+					for(i4 = 0; i4 < 4; ++i4) {
 						this.playerEntity.dropPlayerItem(new ItemStack(Block.sapling, 1));
 					}
 				}
 			} else {
-				String var4;
-				if(this.mcServer.configManager.isOp(this.playerEntity.username)) {
-					var4 = var1.substring(1);
-					logger.info(this.playerEntity.username + " issued server command: " + var4);
-					this.mcServer.addCommand(var4, this);
+				String string3;
+				if(!this.mcServer.configManager.isOp(this.playerEntity.username) && !this.playerEntity.username.startsWith("\u0001") && !this.playerEntity.username.startsWith("\u0002")) {
+					string3 = string.substring(1);
+					logger.info(this.playerEntity.username + " tried command: " + string3);
 				} else {
-					var4 = var1.substring(1);
-					logger.info(this.playerEntity.username + " tried command: " + var4);
+					string3 = string.substring(1);
+					logger.info(this.playerEntity.username + " issued server command: " + string3);
+					this.mcServer.addCommand(string3, this);
 				}
 			}
 		}
 
 	}
 
-	public void handleArmAnimation(Packet18ArmAnimation var1) {
-		if(var1.animate == 1) {
+	public void handleArmAnimation(Packet18ArmAnimation packet) {
+		if(packet.animate == 1) {
 			this.playerEntity.swingItem();
 		}
 
 	}
 
-	public void handleKickDisconnect(Packet255KickDisconnect var1) {
+	public void handleKickDisconnect(Packet255KickDisconnect packet) {
 		this.netManager.networkShutdown("Quitting");
 	}
 
@@ -343,25 +344,25 @@
 		return this.netManager.getNumChunkDataPackets();
 	}
 
-	public void addHelpCommandMessage(String var1) {
-		this.sendPacket(new Packet3Chat("\u00a77" + var1));
+	public void addHelpCommandMessage(String helpCommandMessage) {
+		this.sendPacket(new Packet3Chat("\u00a77" + helpCommandMessage));
 	}
 
 	public String getUsername() {
 		return this.playerEntity.username;
 	}
 
-	public void handlePlayerInventory(Packet5PlayerInventory var1) {
-		if(var1.inventoryType == -1) {
-			this.playerEntity.inventory.mainInventory = var1.inventory;
-		}
-
-		if(var1.inventoryType == -2) {
-			this.playerEntity.inventory.craftingInventory = var1.inventory;
-		}
-
-		if(var1.inventoryType == -3) {
-			this.playerEntity.inventory.armorInventory = var1.inventory;
+	public void handlePlayerInventory(Packet5PlayerInventory packet) {
+		if(packet.inventoryType == -1) {
+			this.playerEntity.inventory.mainInventory = packet.inventory;
+		}
+
+		if(packet.inventoryType == -2) {
+			this.playerEntity.inventory.craftingInventory = packet.inventory;
+		}
+
+		if(packet.inventoryType == -3) {
+			this.playerEntity.inventory.armorInventory = packet.inventory;
 		}
 
 	}
@@ -372,12 +373,33 @@
 		this.netManager.addToSendQueue(new Packet5PlayerInventory(-3, this.playerEntity.inventory.armorInventory));
 	}
 
-	public void handleComplexEntity(Packet59ComplexEntity var1) {
-		TileEntity var2 = this.mcServer.worldMngr.getBlockTileEntity(var1.xCoord, var1.yCoord, var1.zCoord);
-		if(var2 != null) {
-			var2.readFromNBT(var1.tileEntityNBT);
-			var2.onInventoryChanged();
-		}
-
+	public void handleComplexEntity(Packet59ComplexEntity packet) {
+		TileEntity tileEntity2 = this.mcServer.worldMngr.getBlockTileEntity(packet.xCoord, packet.yCoord, packet.zCoord);
+		if(tileEntity2 != null) {
+			tileEntity2.readFromNBT(packet.tileEntityNBT);
+			tileEntity2.onInventoryChanged();
+		}
+
+	}
+
+	public void func_6028_84mzYZR4RZ06rHsfcZ0KP1l2c7K3NAX02a44e8pG40f8j1ymynF1zR45OMVK(Packet211 packet) {
+		XYZv xYZv2 = packet.field_6512_9315SGhK61m01Mvpd7FYfTqtkH86bImmQy9tT4HiT90ZYcZw2p6PWgZmm3C0;
+		XYZv xYZv3 = packet.field_6511_4nb4wJSS8Z7f0yud9HSipXBS325xmtP0UTkmO39gkyDLnT1Rp8MD1m9tigTd;
+		long j4 = xYZv2.x > xYZv3.x ? xYZv3.x : xYZv2.x;
+		long j6 = xYZv2.x > xYZv3.x ? xYZv2.x : xYZv3.x;
+		long j8 = xYZv2.y > xYZv3.y ? xYZv3.y : xYZv2.y;
+		long j10 = xYZv2.y > xYZv3.y ? xYZv2.y : xYZv3.y;
+		long j12 = xYZv2.z > xYZv3.z ? xYZv3.z : xYZv2.z;
+		long j14 = xYZv2.z > xYZv3.z ? xYZv2.z : xYZv3.z;
+
+		for(long j16 = j4; j16 <= j6; ++j16) {
+			for(long j18 = j8; j18 <= j10; ++j18) {
+				for(long j20 = j12; j20 <= j14; ++j20) {
+					this.mcServer.worldMngr.setBlockWithNotify((int)j16, (int)j18, (int)j20, packet.field_6510_3x9bFeSTfuLmvIiu27ZXURnxx20g5j8A7vxu9rn52dT97zr07ecExt1l1nA3);
+				}
+			}
+		}
+
+		this.playerEntity.playerNetServerHandler.sendPacket(new Packet211(xYZv2, xYZv3, packet.field_6510_3x9bFeSTfuLmvIiu27ZXURnxx20g5j8A7vxu9rn52dT97zr07ecExt1l1nA3));
 	}
 }
--- net/minecraft/src/PlayerInstance.java
+++ net/minecraft/src/PlayerInstance.java
@@ -12,109 +12,129 @@
 	private short[] blocksToUpdate;
 	private int numBlocksToUpdate;
 	private int minX;
-	private int maxX;
 	private int minY;
-	private int maxY;
 	private int minZ;
+	private int maxX;
+	private int maxY;
 	private int maxZ;
 	final PlayerManager playerManager;
 
-	public PlayerInstance(PlayerManager var1, int var2, int var3) {
-		this.playerManager = var1;
+	public PlayerInstance(PlayerManager playerManager, int x, int z) {
+		this.playerManager = playerManager;
 		this.players = new ArrayList();
 		this.blocksToUpdate = new short[10];
 		this.numBlocksToUpdate = 0;
-		this.chunkX = var2;
-		this.chunkZ = var3;
-		this.currentChunk = new ChunkCoordIntPair(var2, var3);
-		PlayerManager.getMinecraftServer(var1).worldMngr.chunkProviderServer.loadChunk(var2, var3);
+		this.chunkX = x;
+		this.chunkZ = z;
+		this.currentChunk = new ChunkCoordIntPair(x, z);
+		PlayerManager.mcServer(playerManager).worldMngr.chunkProviderServer.loadChunk(x, z);
 	}
 
-	public void addPlayer(EntityPlayerMP var1) {
-		if(this.players.contains(var1)) {
-			throw new IllegalStateException("Failed to add player. " + var1 + " already is in chunk " + this.chunkX + ", " + this.chunkZ);
+	public void addPlayer(EntityPlayerMP entityPlayerMP) {
+		if(this.players.contains(entityPlayerMP)) {
+			throw new IllegalStateException("Failed to add player. " + entityPlayerMP + " already is in chunk " + this.chunkX + ", " + this.chunkZ);
 		} else {
-			var1.loadChunks.add(this.currentChunk);
-			var1.playerNetServerHandler.sendPacket(new Packet50PreChunk(this.currentChunk.chunkXPos, this.currentChunk.chunkZPos, true));
-			this.players.add(var1);
-			var1.loadedChunks.add(this.currentChunk);
+			entityPlayerMP.loadChunks.add(this.currentChunk);
+			float[] f2 = new float[1536];
+			EnumWorldGenerator[] enumWorldGenerator3 = EnumWorldGenerator.func_8602_1WZ23w5Eo7xzIwM5p9j37UQow8g6H96cXiBpHpfbU1ZOgff3q9gqstvGaA56();
+			int i4 = enumWorldGenerator3.length;
+
+			for(int i5 = 0; i5 < i4; ++i5) {
+				EnumWorldGenerator enumWorldGenerator6 = enumWorldGenerator3[i5];
+
+				for(int i7 = 0; i7 < 16; ++i7) {
+					int i8 = WorldGenHouseSmallUnknownClass.func_8021_9hcUf1GjYFE1n5h3C7d8SBi5q87cLRLfP557HX30ui129KXy0HvQUt5q2d9h(this.currentChunk.chunkXPos) + i7;
+
+					for(int i9 = 0; i9 < 16; ++i9) {
+						int i10 = WorldGenHouseSmallUnknownClass.func_8021_9hcUf1GjYFE1n5h3C7d8SBi5q87cLRLfP557HX30ui129KXy0HvQUt5q2d9h(this.currentChunk.chunkZPos) + i9;
+						BiomeInterface biomeInterface11 = entityPlayerMP.worldObj.func_7689_6C9H19c7YerVndE5i8yC8Ig4845UHLtkUSjAGU517V812e99T2r6TlW67Z0B();
+						int i12 = enumWorldGenerator6.ordinal() * 16 * 16 * 2 + i9 * 16 * 2 + i7 * 2;
+						f2[i12] = (float)biomeInterface11.func_7868_3g5835mGclzJIUDU5ZIWPtb1qUR2uFgUHLXK977f463W9MS7Iu5T5QHfh5EH(i8, i10, enumWorldGenerator6);
+						f2[i12 + 1] = (float)biomeInterface11.func_7867_0Sa7i8e9X8bsz8C7O3N9m408fK504rj6Qa96Vx186O3yrGFTvF7EiwNd1HjI(i8, i10, enumWorldGenerator6);
+					}
+				}
+			}
+
+			entityPlayerMP.playerNetServerHandler.sendPacket(new Packet50PreChunk(this.currentChunk.chunkXPos, this.currentChunk.chunkZPos, f2));
+			this.players.add(entityPlayerMP);
+			entityPlayerMP.loadedChunks.add(this.currentChunk);
 		}
 	}
 
-	public void removePlayer(EntityPlayerMP var1) {
-		if(!this.players.contains(var1)) {
-			(new IllegalStateException("Failed to remove player. " + var1 + " isn\'t in chunk " + this.chunkX + ", " + this.chunkZ)).printStackTrace();
+	public void removePlayer(EntityPlayerMP entityPlayerMP) {
+		if(!this.players.contains(entityPlayerMP)) {
+			(new IllegalStateException("Failed to remove player. " + entityPlayerMP + " isn\'t in chunk " + this.chunkX + ", " + this.chunkZ)).printStackTrace();
 		} else {
-			this.players.remove(var1);
+			this.players.remove(entityPlayerMP);
 			if(this.players.size() == 0) {
-				long var2 = (long)this.chunkX + 2147483647L | (long)this.chunkZ + 2147483647L << 32;
-				PlayerManager.getPlayerInstances(this.playerManager).removeObject(var2);
+				long j2 = (long)this.chunkX + 2147483647L | (long)this.chunkZ + 2147483647L << 32;
+				PlayerManager.playerInstances(this.playerManager).removeObject(j2);
 				if(this.numBlocksToUpdate > 0) {
-					PlayerManager.getPlayerInstancesToUpdate(this.playerManager).remove(this);
+					PlayerManager.playerInstancesToUpdate(this.playerManager).remove(this);
 				}
 
-				PlayerManager.getMinecraftServer(this.playerManager).worldMngr.chunkProviderServer.dropChunk(this.chunkX, this.chunkZ);
-			}
-
-			var1.loadedChunks.remove(this.currentChunk);
-			if(var1.loadChunks.contains(this.currentChunk)) {
-				var1.playerNetServerHandler.sendPacket(new Packet50PreChunk(this.chunkX, this.chunkZ, false));
-			}
-
+				PlayerManager.mcServer(this.playerManager).worldMngr.chunkProviderServer.dropChunk(this.chunkX, this.chunkZ);
+			}
+
+			entityPlayerMP.loadedChunks.remove(this.currentChunk);
+			if(entityPlayerMP.loadChunks.contains(this.currentChunk)) {
+				entityPlayerMP.playerNetServerHandler.sendPacket(new Packet50PreChunk(this.chunkX, this.chunkZ, new float[0]));
+			}
 		}
+
 	}
 
-	public void markBlockNeedsUpdate(int var1, int var2, int var3) {
+	public void markBlockNeedsUpdate(int x, int y, int z) {
 		if(this.numBlocksToUpdate == 0) {
-			PlayerManager.getPlayerInstancesToUpdate(this.playerManager).add(this);
-			this.minX = this.maxX = var1;
-			this.minY = this.maxY = var2;
-			this.minZ = this.maxZ = var3;
-		}
-
-		if(this.minX > var1) {
-			this.minX = var1;
-		}
-
-		if(this.maxX < var1) {
-			this.maxX = var1;
-		}
-
-		if(this.minY > var2) {
-			this.minY = var2;
-		}
-
-		if(this.maxY < var2) {
-			this.maxY = var2;
-		}
-
-		if(this.minZ > var3) {
-			this.minZ = var3;
-		}
-
-		if(this.maxZ < var3) {
-			this.maxZ = var3;
+			PlayerManager.playerInstancesToUpdate(this.playerManager).add(this);
+			this.minX = this.minY = x;
+			this.minZ = this.maxX = y;
+			this.maxY = this.maxZ = z;
+		}
+
+		if(this.minX > x) {
+			this.minX = x;
+		}
+
+		if(this.minY < x) {
+			this.minY = x;
+		}
+
+		if(this.minZ > y) {
+			this.minZ = y;
+		}
+
+		if(this.maxX < y) {
+			this.maxX = y;
+		}
+
+		if(this.maxY > z) {
+			this.maxY = z;
+		}
+
+		if(this.maxZ < z) {
+			this.maxZ = z;
 		}
 
 		if(this.numBlocksToUpdate < 10) {
-			short var4 = (short)(var1 << 12 | var3 << 8 | var2);
+			short s4 = (short)(x << 12 | z << 8 | y);
 
-			for(int var5 = 0; var5 < this.numBlocksToUpdate; ++var5) {
-				if(this.blocksToUpdate[var5] == var4) {
+			for(int i5 = 0; i5 < this.numBlocksToUpdate; ++i5) {
+				if(this.blocksToUpdate[i5] == s4) {
 					return;
 				}
 			}
 
-			this.blocksToUpdate[this.numBlocksToUpdate++] = var4;
+			this.blocksToUpdate[this.numBlocksToUpdate++] = s4;
 		}
 
 	}
 
-	public void sendTileEntity(Packet var1) {
-		for(int var2 = 0; var2 < this.players.size(); ++var2) {
-			EntityPlayerMP var3 = (EntityPlayerMP)this.players.get(var2);
-			if(var3.loadChunks.contains(this.currentChunk)) {
-				var3.playerNetServerHandler.sendPacket(var1);
+	public void markBlockNeedsUpdate(Packet packet) {
+		for(int i2 = 0; i2 < this.players.size(); ++i2) {
+			EntityPlayerMP entityPlayerMP3 = (EntityPlayerMP)this.players.get(i2);
+			if(entityPlayerMP3.loadChunks.contains(this.currentChunk)) {
+				entityPlayerMP3.playerNetServerHandler.sendPacket(packet);
 			}
 		}
 
@@ -122,44 +142,44 @@
 
 	public void onUpdate() throws IOException {
 		if(this.numBlocksToUpdate != 0) {
-			int var1;
-			int var2;
-			int var3;
+			int i1;
+			int i2;
+			int i3;
 			if(this.numBlocksToUpdate == 1) {
-				var1 = this.chunkX * 16 + this.minX;
-				var2 = this.minY;
-				var3 = this.chunkZ * 16 + this.minZ;
-				this.sendTileEntity(new Packet53BlockChange(var1, var2, var3, PlayerManager.getMinecraftServer(this.playerManager).worldMngr));
-				if(Block.isBlockContainer[PlayerManager.getMinecraftServer(this.playerManager).worldMngr.getBlockId(var1, var2, var3)]) {
-					this.sendTileEntity(new Packet59ComplexEntity(var1, var2, var3, PlayerManager.getMinecraftServer(this.playerManager).worldMngr.getBlockTileEntity(var1, var2, var3)));
+				i1 = this.chunkX * 16 + this.minX;
+				i2 = this.minZ;
+				i3 = this.chunkZ * 16 + this.maxY;
+				this.markBlockNeedsUpdate(new Packet53BlockChange(i1, i2, i3, PlayerManager.mcServer(this.playerManager).worldMngr));
+				if(Block.isBlockContainer[PlayerManager.mcServer(this.playerManager).worldMngr.getBlockId(i1, i2, i3)]) {
+					this.markBlockNeedsUpdate(new Packet59ComplexEntity(i1, i2, i3, PlayerManager.mcServer(this.playerManager).worldMngr.getBlockTileEntity(i1, i2, i3)));
 				}
 			} else {
-				int var4;
+				int i4;
 				if(this.numBlocksToUpdate == 10) {
-					this.minY = this.minY / 2 * 2;
-					this.maxY = (this.maxY / 2 + 1) * 2;
-					var1 = this.minX + this.chunkX * 16;
-					var2 = this.minY;
-					var3 = this.minZ + this.chunkZ * 16;
-					var4 = this.maxX - this.minX + 1;
-					int var5 = this.maxY - this.minY + 2;
-					int var6 = this.maxZ - this.minZ + 1;
-					this.sendTileEntity(new Packet51MapChunk(var1, var2, var3, var4, var5, var6, PlayerManager.getMinecraftServer(this.playerManager).worldMngr));
-					List var7 = PlayerManager.getMinecraftServer(this.playerManager).worldMngr.getTileEntityList(var1, var2, var3, var1 + var4, var2 + var5, var3 + var6);
+					this.minZ = this.minZ / 2 * 2;
+					this.maxX = (this.maxX / 2 + 1) * 2;
+					i1 = this.minX + this.chunkX * 16;
+					i2 = this.minZ;
+					i3 = this.maxY + this.chunkZ * 16;
+					i4 = this.minY - this.minX + 1;
+					int i5 = this.maxX - this.minZ + 2;
+					int i6 = this.maxZ - this.maxY + 1;
+					this.markBlockNeedsUpdate(new Packet51MapChunk(i1, i2, i3, i4, i5, i6, PlayerManager.mcServer(this.playerManager).worldMngr));
+					List list7 = PlayerManager.mcServer(this.playerManager).worldMngr.getTileEntityList(i1, i2, i3, i1 + i4, i2 + i5, i3 + i6);
 
-					for(int var8 = 0; var8 < var7.size(); ++var8) {
-						TileEntity var9 = (TileEntity)var7.get(var8);
-						this.sendTileEntity(new Packet59ComplexEntity(var9.xCoord, var9.yCoord, var9.zCoord, var9));
+					for(int i8 = 0; i8 < list7.size(); ++i8) {
+						TileEntity tileEntity9 = (TileEntity)list7.get(i8);
+						this.markBlockNeedsUpdate(new Packet59ComplexEntity(tileEntity9.xCoord, tileEntity9.yCoord, tileEntity9.zCoord, tileEntity9));
 					}
 				} else {
-					this.sendTileEntity(new Packet52MultiBlockChange(this.chunkX, this.chunkZ, this.blocksToUpdate, this.numBlocksToUpdate, PlayerManager.getMinecraftServer(this.playerManager).worldMngr));
+					this.markBlockNeedsUpdate(new Packet52MultiBlockChange(this.chunkX, this.chunkZ, this.blocksToUpdate, this.numBlocksToUpdate, PlayerManager.mcServer(this.playerManager).worldMngr));
 
-					for(var1 = 0; var1 < this.numBlocksToUpdate; ++var1) {
-						var2 = this.chunkX * 16 + (this.numBlocksToUpdate >> 12 & 15);
-						var3 = this.numBlocksToUpdate & 255;
-						var4 = this.chunkZ * 16 + (this.numBlocksToUpdate >> 8 & 15);
-						if(Block.isBlockContainer[PlayerManager.getMinecraftServer(this.playerManager).worldMngr.getBlockId(var2, var3, var4)]) {
-							this.sendTileEntity(new Packet59ComplexEntity(var2, var3, var4, PlayerManager.getMinecraftServer(this.playerManager).worldMngr.getBlockTileEntity(var2, var3, var4)));
+					for(i1 = 0; i1 < this.numBlocksToUpdate; ++i1) {
+						i2 = this.chunkX * 16 + (this.numBlocksToUpdate >> 12 & 15);
+						i3 = this.numBlocksToUpdate & 255;
+						i4 = this.chunkZ * 16 + (this.numBlocksToUpdate >> 8 & 15);
+						if(Block.isBlockContainer[PlayerManager.mcServer(this.playerManager).worldMngr.getBlockId(i2, i3, i4)]) {
+							this.markBlockNeedsUpdate(new Packet59ComplexEntity(i2, i3, i4, PlayerManager.mcServer(this.playerManager).worldMngr.getBlockTileEntity(i2, i3, i4)));
 						}
 					}
 				}
@@ -167,5 +187,6 @@
 
 			this.numBlocksToUpdate = 0;
 		}
+
 	}
 }
--- /dev/null
+++ net/minecraft/src/EntitySpear.java
@@ -1,0 +1,236 @@
+package net.minecraft.src;
+
+import java.util.List;
+
+public class EntitySpear extends EntityFirable {
+	private int field_7093_9E2S5C883hV1XHDIkJv4p9ceHILCBKol8eyEUH4iUd26I49Z5hvtCRrz0idf = -1;
+	private int field_7096_31DUa1Ke1Dah1v682y4886W7hJf78kf4d2W1j60bG63CILWX4Z2dO062IreA = -1;
+	private int field_7092_1LqwN99Bkfx3lBg6sp3dz97V24F1a09e32OeWPh3Zwu0Q4DgiWwHjzq82kpA = -1;
+	private int field_7097_5xKpHPF69DTdr0V52K6MsNeMuj7vyIl72v4Ko7UIU125Qjk0gKI7D9Pk4Isp = 0;
+	private boolean field_7090_9MbNLpmHpz0P63oU2Vr5xtxe2iKK2L9TxjLP03phR64Z512XU38RO8c9dO7j = false;
+	public int field_7094_7f9xBBr8TY3RRDm9366SD2C9t7s79rU94oYTAJQX1mHDxhg7b2K4IeyF5Bd1 = 0;
+	private EntityLiving field_7091_6Ew4jD239sXFjnthH8851GtJvM9r54GiTAx741N7D19XebVgpo81l9IR524r;
+	private int field_7089_5lLX70uRA2R32lWl2b2rlzAcf0c2kBr0itr9Ua1eAuhV9t21ec8pZ5ZCt4v2;
+	private int field_7095_4K2xMKshnC5nB2880sOKFlh7fHKq6QD2V7z919oiP43Uxz7r6PKF03I6e4ef = 0;
+
+	public EntitySpear(World world) {
+		super(world);
+		this.setSize(0.5F, 0.5F);
+	}
+
+	public EntitySpear(World cv, EntityLiving es) {
+		super(cv);
+		this.field_7091_6Ew4jD239sXFjnthH8851GtJvM9r54GiTAx741N7D19XebVgpo81l9IR524r = es;
+		this.setSize(0.5F, 0.5F);
+		this.setLocationAndAngles(es.posX, es.posY, es.posZ, es.rotationYaw, es.rotationPitch);
+		this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+		this.posY -= (double)0.1F;
+		this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+		this.setPosition(this.posX, this.posY, this.posZ);
+		this.yOffset = 0.0F;
+		this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI));
+		this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI));
+		this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI));
+		this.func_7087_7vE94XNAgp75Bg93rOL9h9B0ksK9KjvxA4LCm14H260ssBycKOSXXUUpE3w3(this.motionX, this.motionY, this.motionZ, 3.5F, 1.0F);
+	}
+
+	public void func_7087_7vE94XNAgp75Bg93rOL9h9B0ksK9KjvxA4LCm14H260ssBycKOSXXUUpE3w3(double double1, double double2, double double3, float float4, float float5) {
+		float f9 = MathHelper.sqrt_double(double1 * double1 + double2 * double2 + double3 * double3);
+		double1 /= (double)f9;
+		double2 /= (double)f9;
+		double3 /= (double)f9;
+		double1 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double2 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double3 += this.rand.nextGaussian() * (double)0.0075F * (double)float5;
+		double1 *= (double)float4;
+		double2 *= (double)float4;
+		double3 *= (double)float4;
+		this.motionX = double1;
+		this.motionY = double2;
+		this.motionZ = double3;
+		float f10 = MathHelper.sqrt_double(double1 * double1 + double3 * double3);
+		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(double1, double3) * 180.0D / (double)(float)Math.PI);
+		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(double2, (double)f10) * 180.0D / (double)(float)Math.PI);
+		this.field_7089_5lLX70uRA2R32lWl2b2rlzAcf0c2kBr0itr9Ua1eAuhV9t21ec8pZ5ZCt4v2 = 0;
+	}
+
+	public void onUpdate() {
+		super.onUpdate();
+		if(this.field_7094_7f9xBBr8TY3RRDm9366SD2C9t7s79rU94oYTAJQX1mHDxhg7b2K4IeyF5Bd1 > 0) {
+			--this.field_7094_7f9xBBr8TY3RRDm9366SD2C9t7s79rU94oYTAJQX1mHDxhg7b2K4IeyF5Bd1;
+		}
+
+		if(this.field_7090_9MbNLpmHpz0P63oU2Vr5xtxe2iKK2L9TxjLP03phR64Z512XU38RO8c9dO7j) {
+			int i1 = this.worldObj.getBlockId(this.field_7093_9E2S5C883hV1XHDIkJv4p9ceHILCBKol8eyEUH4iUd26I49Z5hvtCRrz0idf, this.field_7096_31DUa1Ke1Dah1v682y4886W7hJf78kf4d2W1j60bG63CILWX4Z2dO062IreA, this.field_7092_1LqwN99Bkfx3lBg6sp3dz97V24F1a09e32OeWPh3Zwu0Q4DgiWwHjzq82kpA);
+			if(i1 == this.field_7097_5xKpHPF69DTdr0V52K6MsNeMuj7vyIl72v4Ko7UIU125Qjk0gKI7D9Pk4Isp) {
+				++this.field_7089_5lLX70uRA2R32lWl2b2rlzAcf0c2kBr0itr9Ua1eAuhV9t21ec8pZ5ZCt4v2;
+				if(this.field_7089_5lLX70uRA2R32lWl2b2rlzAcf0c2kBr0itr9Ua1eAuhV9t21ec8pZ5ZCt4v2 == 1200) {
+					this.setEntityDead();
+				}
+
+				if(i1 == ExtBlocks.field_8240_5E4NKM067p94qeqC3h64uNOnnphIsCe05csZ685G0x5E1jS6382dgVh9t2a2.blockID) {
+					ItemStack itemStack2 = new ItemStack(ExtBlocks.field_8240_5E4NKM067p94qeqC3h64uNOnnphIsCe05csZ685G0x5E1jS6382dgVh9t2a2, 1);
+					EntityItem entityItem3 = new EntityItem(this.worldObj, (double)this.field_7093_9E2S5C883hV1XHDIkJv4p9ceHILCBKol8eyEUH4iUd26I49Z5hvtCRrz0idf + 0.5D, (double)this.field_7096_31DUa1Ke1Dah1v682y4886W7hJf78kf4d2W1j60bG63CILWX4Z2dO062IreA + 0.5D, (double)this.field_7092_1LqwN99Bkfx3lBg6sp3dz97V24F1a09e32OeWPh3Zwu0Q4DgiWwHjzq82kpA + 0.5D, itemStack2);
+					entityItem3.motionX = this.rand.nextDouble() - 0.5D;
+					entityItem3.motionY = this.rand.nextDouble() - 0.5D;
+					entityItem3.motionZ = this.rand.nextDouble() - 0.5D;
+					entityItem3.motionX /= 8.0D;
+					entityItem3.motionY /= 8.0D;
+					entityItem3.motionZ /= 8.0D;
+					this.worldObj.spawnParticle("smoke", (double)this.field_7093_9E2S5C883hV1XHDIkJv4p9ceHILCBKol8eyEUH4iUd26I49Z5hvtCRrz0idf + 0.5D, (double)this.field_7096_31DUa1Ke1Dah1v682y4886W7hJf78kf4d2W1j60bG63CILWX4Z2dO062IreA + 0.5D, (double)this.field_7092_1LqwN99Bkfx3lBg6sp3dz97V24F1a09e32OeWPh3Zwu0Q4DgiWwHjzq82kpA + 0.5D, 0.0D, 0.0D, 0.0D);
+					this.worldObj.spawnEntityInWorld(entityItem3);
+					this.worldObj.setBlockWithNotify(this.field_7093_9E2S5C883hV1XHDIkJv4p9ceHILCBKol8eyEUH4iUd26I49Z5hvtCRrz0idf, this.field_7096_31DUa1Ke1Dah1v682y4886W7hJf78kf4d2W1j60bG63CILWX4Z2dO062IreA, this.field_7092_1LqwN99Bkfx3lBg6sp3dz97V24F1a09e32OeWPh3Zwu0Q4DgiWwHjzq82kpA, 0);
+					this.worldObj.markBlocksDirty(this.field_7093_9E2S5C883hV1XHDIkJv4p9ceHILCBKol8eyEUH4iUd26I49Z5hvtCRrz0idf, this.field_7096_31DUa1Ke1Dah1v682y4886W7hJf78kf4d2W1j60bG63CILWX4Z2dO062IreA, this.field_7092_1LqwN99Bkfx3lBg6sp3dz97V24F1a09e32OeWPh3Zwu0Q4DgiWwHjzq82kpA, this.field_7093_9E2S5C883hV1XHDIkJv4p9ceHILCBKol8eyEUH4iUd26I49Z5hvtCRrz0idf, this.field_7096_31DUa1Ke1Dah1v682y4886W7hJf78kf4d2W1j60bG63CILWX4Z2dO062IreA, this.field_7092_1LqwN99Bkfx3lBg6sp3dz97V24F1a09e32OeWPh3Zwu0Q4DgiWwHjzq82kpA);
+				}
+
+				return;
+			}
+
+			this.field_7090_9MbNLpmHpz0P63oU2Vr5xtxe2iKK2L9TxjLP03phR64Z512XU38RO8c9dO7j = false;
+			this.motionX *= (double)(this.rand.nextFloat() * 0.2F);
+			this.motionY *= (double)(this.rand.nextFloat() * 0.2F);
+			this.motionZ *= (double)(this.rand.nextFloat() * 0.2F);
+			this.field_7089_5lLX70uRA2R32lWl2b2rlzAcf0c2kBr0itr9Ua1eAuhV9t21ec8pZ5ZCt4v2 = 0;
+			this.field_7095_4K2xMKshnC5nB2880sOKFlh7fHKq6QD2V7z919oiP43Uxz7r6PKF03I6e4ef = 0;
+		} else {
+			++this.field_7095_4K2xMKshnC5nB2880sOKFlh7fHKq6QD2V7z919oiP43Uxz7r6PKF03I6e4ef;
+		}
+
+		Vec3D vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		Vec3D vec3D16 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		MovingObjectPosition movingObjectPosition17 = this.worldObj.rayTraceBlocks(vec3D15, vec3D16);
+		vec3D15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
+		vec3D16 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+		if(movingObjectPosition17 != null) {
+			vec3D16 = Vec3D.createVector(movingObjectPosition17.hitVec.xCoord, movingObjectPosition17.hitVec.yCoord, movingObjectPosition17.hitVec.zCoord);
+		}
+
+		Entity entity4 = null;
+		List list5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+		double d6 = 0.0D;
+
+		float f8;
+		for(int i9 = 0; i9 < list5.size(); ++i9) {
+			Entity entity10 = (Entity)list5.get(i9);
+			if(entity10.canBeCollidedWith() && (entity10 != this.field_7091_6Ew4jD239sXFjnthH8851GtJvM9r54GiTAx741N7D19XebVgpo81l9IR524r || this.field_7095_4K2xMKshnC5nB2880sOKFlh7fHKq6QD2V7z919oiP43Uxz7r6PKF03I6e4ef >= 5)) {
+				f8 = 0.3F;
+				AxisAlignedBB axisAlignedBB11 = entity10.boundingBox.expand((double)f8, (double)f8, (double)f8);
+				MovingObjectPosition movingObjectPosition12 = axisAlignedBB11.calculateIntercept(vec3D15, vec3D16);
+				if(movingObjectPosition12 != null) {
+					double d13 = vec3D15.distanceTo(movingObjectPosition12.hitVec);
+					if(d13 < d6 || d6 == 0.0D) {
+						entity4 = entity10;
+						d6 = d13;
+					}
+				}
+			}
+		}
+
+		if(entity4 != null) {
+			movingObjectPosition17 = new MovingObjectPosition(entity4);
+		}
+
+		float f18;
+		if(movingObjectPosition17 != null) {
+			if(movingObjectPosition17.entityHit != null) {
+				if(movingObjectPosition17.entityHit.attackEntityFrom(this.field_7091_6Ew4jD239sXFjnthH8851GtJvM9r54GiTAx741N7D19XebVgpo81l9IR524r, 4)) {
+					this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
+					this.setEntityDead();
+				} else {
+					this.motionX *= -0.10000000149011612D;
+					this.motionY *= -0.10000000149011612D;
+					this.motionZ *= -0.10000000149011612D;
+					this.rotationYaw += 180.0F;
+					this.prevRotationYaw += 180.0F;
+					this.field_7095_4K2xMKshnC5nB2880sOKFlh7fHKq6QD2V7z919oiP43Uxz7r6PKF03I6e4ef = 0;
+				}
+			} else {
+				this.field_7093_9E2S5C883hV1XHDIkJv4p9ceHILCBKol8eyEUH4iUd26I49Z5hvtCRrz0idf = movingObjectPosition17.blockX;
+				this.field_7096_31DUa1Ke1Dah1v682y4886W7hJf78kf4d2W1j60bG63CILWX4Z2dO062IreA = movingObjectPosition17.blockY;
+				this.field_7092_1LqwN99Bkfx3lBg6sp3dz97V24F1a09e32OeWPh3Zwu0Q4DgiWwHjzq82kpA = movingObjectPosition17.blockZ;
+				this.field_7097_5xKpHPF69DTdr0V52K6MsNeMuj7vyIl72v4Ko7UIU125Qjk0gKI7D9Pk4Isp = this.worldObj.getBlockId(this.field_7093_9E2S5C883hV1XHDIkJv4p9ceHILCBKol8eyEUH4iUd26I49Z5hvtCRrz0idf, this.field_7096_31DUa1Ke1Dah1v682y4886W7hJf78kf4d2W1j60bG63CILWX4Z2dO062IreA, this.field_7092_1LqwN99Bkfx3lBg6sp3dz97V24F1a09e32OeWPh3Zwu0Q4DgiWwHjzq82kpA);
+				this.motionX = (double)((float)(movingObjectPosition17.hitVec.xCoord - this.posX));
+				this.motionY = (double)((float)(movingObjectPosition17.hitVec.yCoord - this.posY));
+				this.motionZ = (double)((float)(movingObjectPosition17.hitVec.zCoord - this.posZ));
+				f18 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
+				this.posX -= this.motionX / (double)f18 * (double)0.05F;
+				this.posY -= this.motionY / (double)f18 * (double)0.05F;
+				this.posZ -= this.motionZ / (double)f18 * (double)0.05F;
+				this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
+				this.field_7090_9MbNLpmHpz0P63oU2Vr5xtxe2iKK2L9TxjLP03phR64Z512XU38RO8c9dO7j = true;
+				this.field_7094_7f9xBBr8TY3RRDm9366SD2C9t7s79rU94oYTAJQX1mHDxhg7b2K4IeyF5Bd1 = 7;
+			}
+		}
+
+		this.posX += this.motionX;
+		this.posY += this.motionY;
+		this.posZ += this.motionZ;
+		f18 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)(float)Math.PI);
+
+		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)f18) * 180.0D / (double)(float)Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+		}
+
+		while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
+			this.prevRotationPitch += 360.0F;
+		}
+
+		while(this.rotationYaw - this.prevRotationYaw < -180.0F) {
+			this.prevRotationYaw -= 360.0F;
+		}
+
+		while(this.rotationYaw - this.prevRotationYaw >= 180.0F) {
+			this.prevRotationYaw += 360.0F;
+		}
+
+		this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
+		this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
+		float f19 = 0.99F;
+		f8 = 0.03F;
+		if(this.handleWaterMovement()) {
+			for(int i20 = 0; i20 < 4; ++i20) {
+				float f21 = 0.25F;
+				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)f21, this.posY - this.motionY * (double)f21, this.posZ - this.motionZ * (double)f21, this.motionX, this.motionY, this.motionZ);
+			}
+
+			f19 = 0.8F;
+		}
+
+		this.motionX *= (double)f19;
+		this.motionY *= (double)f19;
+		this.motionZ *= (double)f19;
+		this.motionY -= (double)f8;
+		this.setPosition(this.posX, this.posY, this.posZ);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setShort("xTile", (short)this.field_7093_9E2S5C883hV1XHDIkJv4p9ceHILCBKol8eyEUH4iUd26I49Z5hvtCRrz0idf);
+		nbttagcompound.setShort("yTile", (short)this.field_7096_31DUa1Ke1Dah1v682y4886W7hJf78kf4d2W1j60bG63CILWX4Z2dO062IreA);
+		nbttagcompound.setShort("zTile", (short)this.field_7092_1LqwN99Bkfx3lBg6sp3dz97V24F1a09e32OeWPh3Zwu0Q4DgiWwHjzq82kpA);
+		nbttagcompound.setByte("inTile", (byte)this.field_7097_5xKpHPF69DTdr0V52K6MsNeMuj7vyIl72v4Ko7UIU125Qjk0gKI7D9Pk4Isp);
+		nbttagcompound.setByte("shake", (byte)this.field_7094_7f9xBBr8TY3RRDm9366SD2C9t7s79rU94oYTAJQX1mHDxhg7b2K4IeyF5Bd1);
+		nbttagcompound.setByte("inGround", (byte)(this.field_7090_9MbNLpmHpz0P63oU2Vr5xtxe2iKK2L9TxjLP03phR64Z512XU38RO8c9dO7j ? 1 : 0));
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.field_7093_9E2S5C883hV1XHDIkJv4p9ceHILCBKol8eyEUH4iUd26I49Z5hvtCRrz0idf = nbttagcompound.getShort("xTile");
+		this.field_7096_31DUa1Ke1Dah1v682y4886W7hJf78kf4d2W1j60bG63CILWX4Z2dO062IreA = nbttagcompound.getShort("yTile");
+		this.field_7092_1LqwN99Bkfx3lBg6sp3dz97V24F1a09e32OeWPh3Zwu0Q4DgiWwHjzq82kpA = nbttagcompound.getShort("zTile");
+		this.field_7097_5xKpHPF69DTdr0V52K6MsNeMuj7vyIl72v4Ko7UIU125Qjk0gKI7D9Pk4Isp = nbttagcompound.getByte("inTile") & 255;
+		this.field_7094_7f9xBBr8TY3RRDm9366SD2C9t7s79rU94oYTAJQX1mHDxhg7b2K4IeyF5Bd1 = nbttagcompound.getByte("shake") & 255;
+		this.field_7090_9MbNLpmHpz0P63oU2Vr5xtxe2iKK2L9TxjLP03phR64Z512XU38RO8c9dO7j = nbttagcompound.getByte("inGround") == 1;
+	}
+
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+		if(this.field_7090_9MbNLpmHpz0P63oU2Vr5xtxe2iKK2L9TxjLP03phR64Z512XU38RO8c9dO7j && this.field_7091_6Ew4jD239sXFjnthH8851GtJvM9r54GiTAx741N7D19XebVgpo81l9IR524r == entityPlayer && this.field_7094_7f9xBBr8TY3RRDm9366SD2C9t7s79rU94oYTAJQX1mHDxhg7b2K4IeyF5Bd1 <= 0 && entityPlayer.inventory.addItemStackToInventory(new ItemStack(ExtItems.Spear.shiftedIndex, 1))) {
+			this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+			entityPlayer.onItemPickup(this, 1);
+			this.setEntityDead();
+		}
+
+	}
+
+	public float getShadowSize() {
+		return 0.0F;
+	}
+}
--- net/minecraft/src/Packet2Handshake.java
+++ net/minecraft/src/Packet2Handshake.java
@@ -10,20 +10,20 @@
 	public Packet2Handshake() {
 	}
 
-	public Packet2Handshake(String var1) {
-		this.username = var1;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.username = var1.readUTF();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeUTF(this.username);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleHandshake(this);
+	public Packet2Handshake(String username) {
+		this.username = username;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.username = dataInputStream.readUTF();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.username);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleHandshake(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/Vec3D.java
+++ net/minecraft/src/Vec3D.java
@@ -10,114 +10,114 @@
 	public double yCoord;
 	public double zCoord;
 
-	public static Vec3D createVectorHelper(double var0, double var2, double var4) {
-		return new Vec3D(var0, var2, var4);
+	public static Vec3D createVectorHelper(double x, double y, double z) {
+		return new Vec3D(x, y, z);
 	}
 
 	public static void initialize() {
 		nextVector = 0;
 	}
 
-	public static Vec3D createVector(double var0, double var2, double var4) {
+	public static Vec3D createVector(double x, double y, double z) {
 		if(nextVector >= vectorList.size()) {
 			vectorList.add(createVectorHelper(0.0D, 0.0D, 0.0D));
 		}
 
-		return ((Vec3D)vectorList.get(nextVector++)).setComponents(var0, var2, var4);
-	}
-
-	private Vec3D(double var1, double var3, double var5) {
-		if(var1 == -0.0D) {
-			var1 = 0.0D;
-		}
-
-		if(var3 == -0.0D) {
-			var3 = 0.0D;
-		}
-
-		if(var5 == -0.0D) {
-			var5 = 0.0D;
-		}
-
-		this.xCoord = var1;
-		this.yCoord = var3;
-		this.zCoord = var5;
-	}
-
-	private Vec3D setComponents(double var1, double var3, double var5) {
-		this.xCoord = var1;
-		this.yCoord = var3;
-		this.zCoord = var5;
+		return ((Vec3D)vectorList.get(nextVector++)).setComponents(x, y, z);
+	}
+
+	private Vec3D(double x, double y, double z) {
+		if(x == -0.0D) {
+			x = 0.0D;
+		}
+
+		if(y == -0.0D) {
+			y = 0.0D;
+		}
+
+		if(z == -0.0D) {
+			z = 0.0D;
+		}
+
+		this.xCoord = x;
+		this.yCoord = y;
+		this.zCoord = z;
+	}
+
+	private Vec3D setComponents(double x, double y, double z) {
+		this.xCoord = x;
+		this.yCoord = y;
+		this.zCoord = z;
 		return this;
 	}
 
 	public Vec3D normalize() {
-		double var1 = (double)MathHelper.sqrt_double(this.xCoord * this.xCoord + this.yCoord * this.yCoord + this.zCoord * this.zCoord);
-		return var1 < 1.0E-4D ? createVector(0.0D, 0.0D, 0.0D) : createVector(this.xCoord / var1, this.yCoord / var1, this.zCoord / var1);
-	}
-
-	public Vec3D addVector(double var1, double var3, double var5) {
-		return createVector(this.xCoord + var1, this.yCoord + var3, this.zCoord + var5);
-	}
-
-	public double distanceTo(Vec3D var1) {
-		double var2 = var1.xCoord - this.xCoord;
-		double var4 = var1.yCoord - this.yCoord;
-		double var6 = var1.zCoord - this.zCoord;
-		return (double)MathHelper.sqrt_double(var2 * var2 + var4 * var4 + var6 * var6);
-	}
-
-	public double squareDistanceTo(Vec3D var1) {
-		double var2 = var1.xCoord - this.xCoord;
-		double var4 = var1.yCoord - this.yCoord;
-		double var6 = var1.zCoord - this.zCoord;
-		return var2 * var2 + var4 * var4 + var6 * var6;
-	}
-
-	public double squareDistanceTo(double var1, double var3, double var5) {
-		double var7 = var1 - this.xCoord;
-		double var9 = var3 - this.yCoord;
-		double var11 = var5 - this.zCoord;
-		return var7 * var7 + var9 * var9 + var11 * var11;
+		double d1 = (double)MathHelper.sqrt_double(this.xCoord * this.xCoord + this.yCoord * this.yCoord + this.zCoord * this.zCoord);
+		return d1 < 1.0E-4D ? createVector(0.0D, 0.0D, 0.0D) : createVector(this.xCoord / d1, this.yCoord / d1, this.zCoord / d1);
+	}
+
+	public Vec3D addVector(double x, double y, double z) {
+		return createVector(this.xCoord + x, this.yCoord + y, this.zCoord + z);
+	}
+
+	public double distanceTo(Vec3D vector) {
+		double d2 = vector.xCoord - this.xCoord;
+		double d4 = vector.yCoord - this.yCoord;
+		double d6 = vector.zCoord - this.zCoord;
+		return (double)MathHelper.sqrt_double(d2 * d2 + d4 * d4 + d6 * d6);
+	}
+
+	public double squareDistanceTo(Vec3D vector) {
+		double d2 = vector.xCoord - this.xCoord;
+		double d4 = vector.yCoord - this.yCoord;
+		double d6 = vector.zCoord - this.zCoord;
+		return d2 * d2 + d4 * d4 + d6 * d6;
+	}
+
+	public double squareDistanceTo(double x, double y, double z) {
+		double d7 = x - this.xCoord;
+		double d9 = y - this.yCoord;
+		double d11 = z - this.zCoord;
+		return d7 * d7 + d9 * d9 + d11 * d11;
 	}
 
 	public double lengthVector() {
 		return (double)MathHelper.sqrt_double(this.xCoord * this.xCoord + this.yCoord * this.yCoord + this.zCoord * this.zCoord);
 	}
 
-	public Vec3D getIntermediateWithXValue(Vec3D var1, double var2) {
-		double var4 = var1.xCoord - this.xCoord;
-		double var6 = var1.yCoord - this.yCoord;
-		double var8 = var1.zCoord - this.zCoord;
-		if(var4 * var4 < (double)1.0E-7F) {
-			return null;
-		} else {
-			double var10 = (var2 - this.xCoord) / var4;
-			return var10 >= 0.0D && var10 <= 1.0D ? createVector(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10) : null;
-		}
-	}
-
-	public Vec3D getIntermediateWithYValue(Vec3D var1, double var2) {
-		double var4 = var1.xCoord - this.xCoord;
-		double var6 = var1.yCoord - this.yCoord;
-		double var8 = var1.zCoord - this.zCoord;
-		if(var6 * var6 < (double)1.0E-7F) {
-			return null;
-		} else {
-			double var10 = (var2 - this.yCoord) / var6;
-			return var10 >= 0.0D && var10 <= 1.0D ? createVector(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10) : null;
-		}
-	}
-
-	public Vec3D getIntermediateWithZValue(Vec3D var1, double var2) {
-		double var4 = var1.xCoord - this.xCoord;
-		double var6 = var1.yCoord - this.yCoord;
-		double var8 = var1.zCoord - this.zCoord;
-		if(var8 * var8 < (double)1.0E-7F) {
-			return null;
-		} else {
-			double var10 = (var2 - this.zCoord) / var8;
-			return var10 >= 0.0D && var10 <= 1.0D ? createVector(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10) : null;
+	public Vec3D getIntermediateWithXValue(Vec3D vector, double xValue) {
+		double d4 = vector.xCoord - this.xCoord;
+		double d6 = vector.yCoord - this.yCoord;
+		double d8 = vector.zCoord - this.zCoord;
+		if(d4 * d4 < 1.0000000116860974E-7D) {
+			return null;
+		} else {
+			double d10 = (xValue - this.xCoord) / d4;
+			return d10 >= 0.0D && d10 <= 1.0D ? createVector(this.xCoord + d4 * d10, this.yCoord + d6 * d10, this.zCoord + d8 * d10) : null;
+		}
+	}
+
+	public Vec3D getIntermediateWithYValue(Vec3D vector, double yValue) {
+		double d4 = vector.xCoord - this.xCoord;
+		double d6 = vector.yCoord - this.yCoord;
+		double d8 = vector.zCoord - this.zCoord;
+		if(d6 * d6 < 1.0000000116860974E-7D) {
+			return null;
+		} else {
+			double d10 = (yValue - this.yCoord) / d6;
+			return d10 >= 0.0D && d10 <= 1.0D ? createVector(this.xCoord + d4 * d10, this.yCoord + d6 * d10, this.zCoord + d8 * d10) : null;
+		}
+	}
+
+	public Vec3D getIntermediateWithZValue(Vec3D vector, double zValue) {
+		double d4 = vector.xCoord - this.xCoord;
+		double d6 = vector.yCoord - this.yCoord;
+		double d8 = vector.zCoord - this.zCoord;
+		if(d8 * d8 < 1.0000000116860974E-7D) {
+			return null;
+		} else {
+			double d10 = (zValue - this.zCoord) / d8;
+			return d10 >= 0.0D && d10 <= 1.0D ? createVector(this.xCoord + d4 * d10, this.yCoord + d6 * d10, this.zCoord + d8 * d10) : null;
 		}
 	}
 
--- net/minecraft/src/BlockObsidian.java
+++ net/minecraft/src/BlockObsidian.java
@@ -3,15 +3,15 @@
 import java.util.Random;
 
 public class BlockObsidian extends BlockStone {
-	public BlockObsidian(int var1, int var2) {
-		super(var1, var2);
+	public BlockObsidian(int id, int blockIndex) {
+		super(id, blockIndex);
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 1;
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Block.obsidian.blockID;
 	}
 }
--- /dev/null
+++ net/minecraft/src/Packet70PlayGlobalMusic.java
@@ -1,0 +1,35 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet70PlayGlobalMusic extends Packet {
+	public String audioName = "";
+
+	public Packet70PlayGlobalMusic() {
+	}
+
+	public Packet70PlayGlobalMusic(String string) {
+		this.audioName = string;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.audioName = dataInputStream.readUTF();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.audioName);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		if(netHandler instanceof NetServerHandler) {
+			((NetServerHandler)netHandler).mcServer.configManager.sendPacketToAllPlayers(new Packet70PlayGlobalMusic(this.audioName));
+		}
+
+	}
+
+	public int getPacketSize() {
+		return this.audioName.length() + 2;
+	}
+}
--- net/minecraft/src/ItemAxe.java
+++ net/minecraft/src/ItemAxe.java
@@ -3,7 +3,7 @@
 public class ItemAxe extends ItemTool {
 	private static Block[] blocksEffectiveAgainst = new Block[]{Block.planks, Block.bookshelf, Block.wood, Block.chest};
 
-	public ItemAxe(int var1, int var2) {
-		super(var1, 3, var2, blocksEffectiveAgainst);
+	public ItemAxe(int itemID, int material) {
+		super(itemID, 3, material, blocksEffectiveAgainst);
 	}
 }
--- net/minecraft/src/BlockBookshelf.java
+++ net/minecraft/src/BlockBookshelf.java
@@ -3,15 +3,15 @@
 import java.util.Random;
 
 public class BlockBookshelf extends Block {
-	public BlockBookshelf(int var1, int var2) {
-		super(var1, var2, Material.wood);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return var1 <= 1 ? 4 : this.blockIndexInTexture;
-	}
-
-	public int quantityDropped(Random var1) {
+	public BlockBookshelf(int id, int blockIndex) {
+		super(id, blockIndex, Material.wood);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side <= 1 ? 4 : this.blockIndexInTexture;
+	}
+
+	public int quantityDropped(Random random) {
 		return 0;
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenHouseSmallUnknownClass2.java
@@ -1,0 +1,53 @@
+package net.minecraft.src;
+
+import java.util.Objects;
+
+public class WorldGenHouseSmallUnknownClass2 {
+	public int field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79;
+	public int field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr;
+
+	public WorldGenHouseSmallUnknownClass2(WorldGenHouseSmallUnknownClass2 hc) {
+		this(hc.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79, hc.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr);
+	}
+
+	public WorldGenHouseSmallUnknownClass2(int integer1, int integer2) {
+		this.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79 = integer1;
+		this.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr = integer2;
+	}
+
+	public int func_8067_8RZE0BvtoHwqL73YktylDNPYm3uL81Mee94920Z6o9GUBvF9wp2v0d3G1L3S() {
+		return this.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79;
+	}
+
+	public int func_8069_27t5YHOBGYS1J2U6L0X4mfU1Vfshr44NEj6oe89zoU0U14gUYpDvHB4HAAS0() {
+		return this.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr;
+	}
+
+	public WorldGenHouseSmallUnknownClass2 func_8071_8Mod6ulu85qHy97j7Z5J4HCDk1UUjyqb4UIIVzdJ1Ld1AdpqDb3Sxft5Wg7e(int integer) {
+		return new WorldGenHouseSmallUnknownClass2(this.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79 * integer, this.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr * integer);
+	}
+
+	public void func_8068_7bKOHFfIAAjCt0KOA2sQbh9iJY8V43s5475jQOSLx7Qt17LnSf3ryxfV7081(int integer1, int integer2) {
+		this.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79 += integer1;
+		this.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr += integer2;
+	}
+
+	public WorldGenHouseSmallUnknownClass2 func_8070_6h5SgVf4d2b0P7V64CX9XppbjHD2KCR03VLMdMVOPuKOUJCgZ0nxH8Q0G8kR(int integer1, int integer2) {
+		return new WorldGenHouseSmallUnknownClass2(this.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79 + integer1, this.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr + integer2);
+	}
+
+	public boolean equals(Object object) {
+		if(this == object) {
+			return true;
+		} else if(!(object instanceof WorldGenHouseSmallUnknownClass2)) {
+			return false;
+		} else {
+			WorldGenHouseSmallUnknownClass2 worldGenHouseSmallUnknownClass22 = (WorldGenHouseSmallUnknownClass2)object;
+			return this.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79 == worldGenHouseSmallUnknownClass22.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79 && this.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr == worldGenHouseSmallUnknownClass22.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr;
+		}
+	}
+
+	public int hashCode() {
+		return Objects.hash(new Object[]{this.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79, this.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr});
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockSafe.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+public class BlockSafe extends BlockMultiSided {
+	public BlockSafe(int integer1, int integer2, int integer3, int integer4) {
+		super(integer1, integer2, integer3, integer4);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		ItemStack itemStack6 = entityPlayer.inventory.getCurrentItem();
+		if(itemStack6 == null) {
+			;
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/Packet16BlockItemSwitch.java
+++ net/minecraft/src/Packet16BlockItemSwitch.java
@@ -5,29 +5,29 @@
 import java.io.IOException;
 
 public class Packet16BlockItemSwitch extends Packet {
-	public int entityId;
+	public int field_6508_6rC1ORG0Cvmjzs5nUGEnOP24KFMoN7tp2J52bxjaAqkOTe6RcAp29R6q7o97;
 	public int id;
 
 	public Packet16BlockItemSwitch() {
 	}
 
-	public Packet16BlockItemSwitch(int var1, int var2) {
-		this.entityId = var1;
-		this.id = var2;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.id = var1.readShort();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeShort(this.id);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleBlockItemSwitch(this);
+	public Packet16BlockItemSwitch(int integer1, int integer2) {
+		this.field_6508_6rC1ORG0Cvmjzs5nUGEnOP24KFMoN7tp2J52bxjaAqkOTe6RcAp29R6q7o97 = integer1;
+		this.id = integer2;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.field_6508_6rC1ORG0Cvmjzs5nUGEnOP24KFMoN7tp2J52bxjaAqkOTe6RcAp29R6q7o97 = dataInputStream.readInt();
+		this.id = dataInputStream.readShort() & 65535;
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.field_6508_6rC1ORG0Cvmjzs5nUGEnOP24KFMoN7tp2J52bxjaAqkOTe6RcAp29R6q7o97);
+		dataOutputStream.writeShort(this.id);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleBlockItemSwitch(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/BlockGravel.java
+++ net/minecraft/src/BlockGravel.java
@@ -3,11 +3,11 @@
 import java.util.Random;
 
 public class BlockGravel extends BlockSand {
-	public BlockGravel(int var1, int var2) {
-		super(var1, var2);
+	public BlockGravel(int id, int blockIndex) {
+		super(id, blockIndex);
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return var2.nextInt(10) == 0 ? Item.flint.shiftedIndex : this.blockID;
+	public int idDropped(int count, Random random) {
+		return random.nextInt(10) == 0 ? Item.flint.shiftedIndex : this.blockID;
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldUnknownClass3.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+public class WorldUnknownClass3 {
+	public Object field_8152_26ZqoVQu43lS16yY8fn958M7NWgD0OxEIby6SV2c2TX00gBZKX2bNgLyQpKb;
+
+	public WorldUnknownClass3(Object object) {
+		this.field_8152_26ZqoVQu43lS16yY8fn958M7NWgD0OxEIby6SV2c2TX00gBZKX2bNgLyQpKb = object;
+	}
+}
--- net/minecraft/src/NBTTagDouble.java
+++ net/minecraft/src/NBTTagDouble.java
@@ -10,16 +10,16 @@
 	public NBTTagDouble() {
 	}
 
-	public NBTTagDouble(double var1) {
-		this.doubleValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeDouble(this.doubleValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.doubleValue = var1.readDouble();
+	public NBTTagDouble(double doubleValue) {
+		this.doubleValue = doubleValue;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeDouble(this.doubleValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.doubleValue = dataInput.readDouble();
 	}
 
 	public byte getType() {
--- /dev/null
+++ net/minecraft/src/GenLowRiver.java
@@ -1,0 +1,71 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class GenLowRiver extends WorldGenerator {
+	private int a;
+	int chunkBeginX;
+	int chunkBeginZ;
+	int chCoordX;
+	int chCoordZ;
+	Random rng;
+
+	public GenLowRiver(int integer1, int integer2, int integer3) {
+		this.a = integer1;
+		this.chunkBeginX = integer2;
+		this.chunkBeginZ = integer3;
+		this.chCoordX = integer2 / 16;
+		this.chCoordZ = integer3 / 16;
+	}
+
+	public void DigSphere(World cv, int integer2, int integer3, int integer4, int integer5) {
+		if(integer5 != 0) {
+			for(int i6 = -integer5; i6 <= integer5; ++i6) {
+				for(int i7 = -integer5; i7 <= integer5; ++i7) {
+					for(int i8 = -integer5; i8 <= integer5; ++i8) {
+						if(i6 * i6 + i7 * i7 + i8 * i8 <= integer5 * integer5 && (integer2 + i6) / 16 - (this.chCoordX < 0 ? 1 : 0) == this.chCoordX && (integer4 + i8) / 16 - (this.chCoordZ < 0 ? 1 : 0) == this.chCoordZ && integer3 + i7 >= 1 && cv.getBlockId(integer2 + i6, integer3 + i7, integer4 + i8) != ExtBlocks.LowGlowingFlower.blockID) {
+							boolean z9 = cv.getBlockId(integer2 + i6, integer3 + i7, integer4 + i8) != Block.bedrock.blockID;
+							if(integer3 + i7 > 3 || z9 || !z9 && this.rng.nextInt(4) < 3) {
+								if(integer3 + i7 > 3) {
+									cv.setBlock(integer2 + i6, integer3 + i7, integer4 + i8, 0);
+								} else {
+									cv.setBlock(integer2 + i6, integer3 + i7, integer4 + i8, Block.waterStill.blockID);
+
+									for(int i10 = -1; i10 <= 1; ++i10) {
+										for(int i11 = -1; i11 <= 1; ++i11) {
+											for(int i12 = -1; i12 <= 1; ++i12) {
+												if(cv.getBlockId(integer2 + i6 + i10, integer3 + i7 + i12, integer4 + i8 + i11) == Block.stone.blockID) {
+													cv.setBlock(integer2 + i6 + i10, integer3 + i7 + i12, integer4 + i8 + i11, ExtBlocks.LowRiverbed.blockID);
+												} else if(cv.getBlockId(integer2 + i6 + i10, integer3 + i7 + i12, integer4 + i8 + i11) == Block.dirt.blockID) {
+													cv.setBlock(integer2 + i6 + i10, integer3 + i7 + i12, integer4 + i8 + i11, ExtBlocks.LowGlowingBlock.blockID);
+												}
+											}
+										}
+									}
+
+									if(integer3 + i7 == 3 && this.rng.nextInt(80) == 0) {
+										cv.setBlock(integer2 + i6, integer3 + i7 + 1, integer4 + i8, ExtBlocks.LowGlowingFlower.blockID);
+									}
+								}
+							}
+						}
+					}
+				}
+			}
+
+		}
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		this.rng = rand;
+		if(y < 10) {
+			try {
+				this.DigSphere(world, x, y, z, this.a);
+			} catch (StackOverflowError stackOverflowError7) {
+				System.out.println("StackOverflowError at " + x + " " + y + " " + z + ", " + this.a);
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/ItemPickaxe.java
+++ net/minecraft/src/ItemPickaxe.java
@@ -1,15 +1,19 @@
 package net.minecraft.src;
 
 public class ItemPickaxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.ice};
+	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.ice, ExtBlocks.LowOreCoal, ExtBlocks.LowOreDiamond, ExtBlocks.LowOreGold, ExtBlocks.LowOreGreenstone, ExtBlocks.LowOreGreenstoneGlowing, ExtBlocks.LowOreIron};
 	private int harvestLevel;
 
-	public ItemPickaxe(int var1, int var2) {
-		super(var1, 2, var2, blocksEffectiveAgainst);
-		this.harvestLevel = var2;
-	}
-
-	public boolean canHarvestBlock(Block var1) {
-		return var1 == Block.obsidian ? this.harvestLevel == 3 : (var1 != Block.blockDiamond && var1 != Block.oreDiamond ? (var1 != Block.blockGold && var1 != Block.oreGold ? (var1 != Block.blockSteel && var1 != Block.oreIron ? (var1 != Block.oreRedstone && var1 != Block.oreRedstoneGlowing ? (var1.material == Material.rock ? true : var1.material == Material.iron) : this.harvestLevel >= 2) : this.harvestLevel >= 1) : this.harvestLevel >= 2) : this.harvestLevel >= 2);
+	public ItemPickaxe(int itemID, int harvestLevelAndMaterial) {
+		super(itemID, 2, harvestLevelAndMaterial, blocksEffectiveAgainst);
+		this.harvestLevel = harvestLevelAndMaterial;
+	}
+
+	public float getStrVsBlock(ItemStack stack, Block block) {
+		return block.pickaxeEffective ? this.efficiencyOnProperMaterial : super.getStrVsBlock(stack, block);
+	}
+
+	public boolean canHarvestBlock(Block block) {
+		return block == Block.obsidian ? this.harvestLevel == 3 : (block != Block.blockDiamond && block != Block.oreDiamond && block != ExtBlocks.LowOreDiamond && block != ExtBlocks.LowOreGold && block != Block.oreRedstone && block != Block.oreRedstoneGlowing && block != Block.blockGold && block != Block.oreGold ? (block != Block.blockSteel && block != Block.oreIron && block != ExtBlocks.LowOreIron ? block.material == Material.rock || block.material == Material.iron : this.harvestLevel >= 1) : this.harvestLevel >= 2);
 	}
 }
--- net/minecraft/src/ThreadLoginVerifier.java
+++ net/minecraft/src/ThreadLoginVerifier.java
@@ -8,26 +8,26 @@
 	final Packet1Login loginPacket;
 	final NetLoginHandler loginHandler;
 
-	ThreadLoginVerifier(NetLoginHandler var1, Packet1Login var2) {
-		this.loginHandler = var1;
-		this.loginPacket = var2;
+	ThreadLoginVerifier(NetLoginHandler cq, Packet1Login k) {
+		this.loginHandler = cq;
+		this.loginPacket = k;
 	}
 
 	public void run() {
 		try {
-			String var1 = NetLoginHandler.getServerId(this.loginHandler);
-			URL var2 = new URL("http://www.minecraft.net/game/checkserver.jsp?user=" + this.loginPacket.username + "&serverId=" + var1);
-			BufferedReader var3 = new BufferedReader(new InputStreamReader(var2.openStream()));
-			String var4 = var3.readLine();
-			var3.close();
-			System.out.println("THE REPLY IS " + var4);
-			if(var4.equals("YES")) {
-				NetLoginHandler.setLoginPacket(this.loginHandler, this.loginPacket);
+			String string1 = NetLoginHandler.func_6040_2S9880rVMBqgE8ZCZxVbL5O53Buyfuf47CU20A25Ls8OV9JjM19w1b2EAHJq(this.loginHandler);
+			URL uRL2 = new URL("http://www.minecraft.net/game/checkserver.jsp?user=" + this.loginPacket.username + "&serverId=" + string1);
+			BufferedReader bufferedReader3 = new BufferedReader(new InputStreamReader(uRL2.openStream()));
+			String string4 = bufferedReader3.readLine();
+			bufferedReader3.close();
+			System.out.println("THE REPLY IS " + string4);
+			if(string4.equals("YES")) {
+				NetLoginHandler.packet1login(this.loginHandler, this.loginPacket);
 			} else {
 				this.loginHandler.kickUser("Failed to verify username!");
 			}
-		} catch (Exception var5) {
-			var5.printStackTrace();
+		} catch (Exception exception5) {
+			exception5.printStackTrace();
 		}
 
 	}
--- net/minecraft/src/Packet30Entity.java
+++ net/minecraft/src/Packet30Entity.java
@@ -16,20 +16,20 @@
 	public Packet30Entity() {
 	}
 
-	public Packet30Entity(int var1) {
-		this.entityId = var1;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleEntity(this);
+	public Packet30Entity(int entityID) {
+		this.entityId = entityID;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleEntity(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/ExtLogger.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import net.minecraft.server.MinecraftServer;
+
+public class ExtLogger {
+	public static void i(String string) {
+		MinecraftServer.logger.info(string);
+	}
+
+	public static void w(String string) {
+		MinecraftServer.logger.warning(string);
+	}
+
+	public static void r(String string) {
+		System.out.println(string);
+	}
+}
--- net/minecraft/src/EnumMobType.java
+++ net/minecraft/src/EnumMobType.java
@@ -4,4 +4,21 @@
 	everything,
 	mobs,
 	players;
+    private static final /* synthetic */ EnumMobType[] field_7562_78c34YVC0Dp41ob8eDv16L0qMG027TW2mxBen9Yxjt6kTFP2s2A9I2V2zqlg;
+
+	public static EnumMobType[] func_7560_7V9xS80MboO2NZcc1W6gRqSmMFZifb389mS8375yI1u41R4ob98n5R9y22i7() {
+		return (EnumMobType[])field_7562_78c34YVC0Dp41ob8eDv16L0qMG027TW2mxBen9Yxjt6kTFP2s2A9I2V2zqlg.clone();
+	}
+
+	public static EnumMobType func_7559_8S8D6hfLUxJh5rJ0B90D6z5kChQwM2EiG914YXmtBvFP8lrGD0i4pIz60yUw(String string) {
+		return (EnumMobType)Enum.valueOf(EnumMobType.class, string);
+	}
+
+	private static EnumMobType[] func_7558_9Lr38Geh8JRWU5lkET6P8iCz5C8x0W1uzu3U35ui72p27mh6DC04xbCB1Bz1() {
+		return new EnumMobType[]{everything, mobs, players};
+	}
+
+    static {
+        field_7562_78c34YVC0Dp41ob8eDv16L0qMG027TW2mxBen9Yxjt6kTFP2s2A9I2V2zqlg = EnumMobType.func_7558_9Lr38Geh8JRWU5lkET6P8iCz5C8x0W1uzu3U35ui72p27mh6DC04xbCB1Bz1();
+    }
 }
--- /dev/null
+++ net/minecraft/src/BiomeUnknownClass2.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class BiomeUnknownClass2 implements BiomeInterface {
+	public double func_7868_3g5835mGclzJIUDU5ZIWPtb1qUR2uFgUHLXK977f463W9MS7Iu5T5QHfh5EH(int integer1, int integer2, EnumWorldGenerator _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE) {
+		return 0.0D;
+	}
+
+	public double func_7867_0Sa7i8e9X8bsz8C7O3N9m408fK504rj6Qa96Vx186O3yrGFTvF7EiwNd1HjI(int integer1, int integer2, EnumWorldGenerator _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE) {
+		return 0.0D;
+	}
+
+	public WorldGenMyconUnknownClass func_7869_3p0BQzmK4Mr6H1J26hjJ42W7ny9waN9zTOZAf655888Q468O9Gr48qka17hw(int integer1, int integer2, EnumWorldGenerator _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE) {
+		return WorldGenMyconUnknownClass.func_6109_7AFzAIguFPO5wX289OMW9m53m1vke3nWr9FfsLKbAlSQ3xy680ZFc7S6kAPN(0.0D, 0.0D, _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE);
+	}
+}
--- net/minecraft/src/RedstoneUpdateInfo.java
+++ net/minecraft/src/RedstoneUpdateInfo.java
@@ -6,10 +6,10 @@
 	int z;
 	long updateTime;
 
-	public RedstoneUpdateInfo(int var1, int var2, int var3, long var4) {
-		this.x = var1;
-		this.y = var2;
-		this.z = var3;
-		this.updateTime = var4;
+	public RedstoneUpdateInfo(int x, int y, int z, long updateTime) {
+		this.x = x;
+		this.y = y;
+		this.z = z;
+		this.updateTime = updateTime;
 	}
 }
--- net/minecraft/src/ServerConfigurationManager.java
+++ net/minecraft/src/ServerConfigurationManager.java
@@ -12,6 +12,7 @@
 import java.util.List;
 import java.util.Set;
 import java.util.logging.Logger;
+
 import net.minecraft.server.MinecraftServer;
 
 public class ServerConfigurationManager {
@@ -28,13 +29,13 @@
 	private File opFile;
 	private PlayerNBTManager playerNBTManagerObj;
 
-	public ServerConfigurationManager(MinecraftServer var1) {
-		this.mcServer = var1;
-		this.bannedPlayersFile = var1.getFile("banned-players.txt");
-		this.ipBanFile = var1.getFile("banned-ips.txt");
-		this.opFile = var1.getFile("ops.txt");
-		this.playerManagerObj = new PlayerManager(var1);
-		this.maxPlayers = var1.propertyManagerObj.getIntProperty("max-players", 20);
+	public ServerConfigurationManager(MinecraftServer minecraftServer) {
+		this.mcServer = minecraftServer;
+		this.bannedPlayersFile = minecraftServer.getFile("banned-players.txt");
+		this.ipBanFile = minecraftServer.getFile("banned-ips.txt");
+		this.opFile = minecraftServer.getFile("ops.txt");
+		this.playerManagerObj = new PlayerManager(minecraftServer);
+		this.maxPlayers = minecraftServer.propertyManagerObj.getIntProperty("max-players", 20);
 		this.readBannedPlayers();
 		this.loadBannedList();
 		this.loadOps();
@@ -43,61 +44,61 @@
 		this.saveOps();
 	}
 
-	public void setPlayerManager(WorldServer var1) {
-		this.playerNBTManagerObj = new PlayerNBTManager(new File(var1.saveDirectory, "players"));
+	public void setPlayerManager(WorldServer na) {
+		this.playerNBTManagerObj = new PlayerNBTManager(new File(na.saveDirectory, "players"));
 	}
 
 	public int getMaxTrackingDistance() {
 		return this.playerManagerObj.getMaxTrackingDistance();
 	}
 
-	public void playerLoggedIn(EntityPlayerMP var1) {
-		this.playerEntities.add(var1);
-		this.playerNBTManagerObj.readPlayerNBT(var1);
-		this.mcServer.worldMngr.chunkProviderServer.loadChunk((int)var1.posX >> 4, (int)var1.posZ >> 4);
+	public void playerLoggedIn(EntityPlayerMP kv) {
+		this.playerEntities.add(kv);
+		this.playerNBTManagerObj.readPlayerNBT(kv);
+		this.mcServer.worldMngr.chunkProviderServer.loadChunk((int)kv.posX >> 4, (int)kv.posZ >> 4);
 
-		while(this.mcServer.worldMngr.getCollidingBoundingBoxes(var1, var1.boundingBox).size() != 0) {
-			var1.setPosition(var1.posX, var1.posY + 1.0D, var1.posZ);
+		while(this.mcServer.worldMngr.getCollidingBoundingBoxes(kv, kv.boundingBox).size() != 0) {
+			kv.setPosition(kv.posX, kv.posY + 1.0D, kv.posZ);
 		}
 
-		this.mcServer.worldMngr.spawnEntityInWorld(var1);
-		this.playerManagerObj.addPlayer(var1);
-	}
-
-	public void serverUpdateMountedMovingPlayer(EntityPlayerMP var1) {
-		this.playerManagerObj.updateMountedMovingPlayer(var1);
-	}
-
-	public void playerLoggedOut(EntityPlayerMP var1) {
-		this.playerManagerObj.removePlayer(var1);
-		this.playerNBTManagerObj.writePlayerNBT(var1);
-		this.mcServer.worldMngr.setEntityDead(var1);
-		this.playerEntities.remove(var1);
-	}
-
-	public EntityPlayerMP login(NetLoginHandler var1, String var2, String var3) {
-		if(this.bannedPlayers.contains(var2.trim().toLowerCase())) {
-			var1.kickUser("You are banned from this server!");
+		this.mcServer.worldMngr.spawnEntityInWorld(kv);
+		this.playerManagerObj.addPlayer(kv);
+	}
+
+	public void serverUpdateMountedMovingPlayer(EntityPlayerMP kv) {
+		this.playerManagerObj.updateMountedMovingPlayer(kv);
+	}
+
+	public void playerLoggedOut(EntityPlayerMP kv) {
+		this.playerManagerObj.removePlayer(kv);
+		this.playerNBTManagerObj.writePlayerNBT(kv);
+		this.mcServer.worldMngr.setEntityDead(kv);
+		this.playerEntities.remove(kv);
+	}
+
+	public EntityPlayerMP login(NetLoginHandler cq, String string2, String string3) {
+		if(this.bannedPlayers.contains(string2.trim().toLowerCase())) {
+			cq.kickUser("You are banned from this server!");
 			return null;
 		} else {
-			String var4 = var1.netManager.getRemoteAddress().toString();
-			var4 = var4.substring(var4.indexOf("/") + 1);
-			var4 = var4.substring(0, var4.indexOf(":"));
-			if(this.bannedIPs.contains(var4)) {
-				var1.kickUser("Your IP address is banned from this server!");
+			String string4 = cq.netManager.getRemoteAddress().toString();
+			string4 = string4.substring(string4.indexOf("/") + 1);
+			string4 = string4.substring(0, string4.indexOf(":"));
+			if(this.bannedIPs.contains(string4)) {
+				cq.kickUser("Your IP address is banned from this server!");
 				return null;
 			} else if(this.playerEntities.size() >= this.maxPlayers) {
-				var1.kickUser("The server is full!");
+				cq.kickUser("The server is full!");
 				return null;
 			} else {
-				for(int var5 = 0; var5 < this.playerEntities.size(); ++var5) {
-					EntityPlayerMP var6 = (EntityPlayerMP)this.playerEntities.get(var5);
-					if(var6.username.equalsIgnoreCase(var2)) {
-						var6.playerNetServerHandler.kickPlayer("You logged in from another location");
+				for(int i5 = 0; i5 < this.playerEntities.size(); ++i5) {
+					EntityPlayerMP entityPlayerMP6 = (EntityPlayerMP)this.playerEntities.get(i5);
+					if(entityPlayerMP6.username.equalsIgnoreCase(string2)) {
+						entityPlayerMP6.playerNetServerHandler.kickPlayer("You logged in from another location");
 					}
 				}
 
-				return new EntityPlayerMP(this.mcServer, this.mcServer.worldMngr, var2, new ItemInWorldManager(this.mcServer.worldMngr));
+				return new EntityPlayerMP(this.mcServer, this.mcServer.worldMngr, string2, new ItemInWorldManager(this.mcServer.worldMngr));
 			}
 		}
 	}
@@ -106,228 +107,229 @@
 		this.playerManagerObj.updatePlayerInstances();
 	}
 
-	public void markBlockNeedsUpdate(int var1, int var2, int var3) {
-		this.playerManagerObj.markBlockNeedsUpdate(var1, var2, var3);
+	public void markBlockNeedsUpdate(int integer1, int integer2, int integer3) {
+		this.playerManagerObj.markBlockNeedsUpdate(integer1, integer2, integer3);
 	}
 
-	public void sendPacketToAllPlayers(Packet var1) {
-		for(int var2 = 0; var2 < this.playerEntities.size(); ++var2) {
-			EntityPlayerMP var3 = (EntityPlayerMP)this.playerEntities.get(var2);
-			var3.playerNetServerHandler.sendPacket(var1);
+	public void sendPacketToAllPlayers(Packet mv) {
+		for(int i2 = 0; i2 < this.playerEntities.size(); ++i2) {
+			EntityPlayerMP entityPlayerMP3 = (EntityPlayerMP)this.playerEntities.get(i2);
+			entityPlayerMP3.playerNetServerHandler.sendPacket(mv);
 		}
 
 	}
 
 	public String getPlayerList() {
-		String var1 = "";
+		String string1 = "";
 
-		for(int var2 = 0; var2 < this.playerEntities.size(); ++var2) {
-			if(var2 > 0) {
-				var1 = var1 + ", ";
+		for(int i2 = 0; i2 < this.playerEntities.size(); ++i2) {
+			if(i2 > 0) {
+				string1 = string1 + ", ";
 			}
 
-			var1 = var1 + ((EntityPlayerMP)this.playerEntities.get(var2)).username;
+			string1 = string1 + ((EntityPlayerMP)this.playerEntities.get(i2)).username;
 		}
 
-		return var1;
+		return string1;
 	}
 
-	public void banPlayer(String var1) {
-		this.bannedPlayers.add(var1.toLowerCase());
+	public void banPlayer(String string) {
+		this.bannedPlayers.add(string.toLowerCase());
 		this.writeBannedPlayers();
 	}
 
-	public void pardonPlayer(String var1) {
-		this.bannedPlayers.remove(var1.toLowerCase());
+	public void pardonPlayer(String string) {
+		this.bannedPlayers.remove(string.toLowerCase());
 		this.writeBannedPlayers();
 	}
 
 	private void readBannedPlayers() {
 		try {
 			this.bannedPlayers.clear();
-			BufferedReader var1 = new BufferedReader(new FileReader(this.bannedPlayersFile));
-			String var2 = "";
-
-			while(true) {
-				var2 = var1.readLine();
-				if(var2 == null) {
-					var1.close();
-					break;
-				}
-
-				this.bannedPlayers.add(var2.trim().toLowerCase());
+			BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.bannedPlayersFile));
+			String string2 = "";
+
+			while((string2 = bufferedReader1.readLine()) != null) {
+				this.bannedPlayers.add(string2.trim().toLowerCase());
 			}
-		} catch (Exception var3) {
-			logger.warning("Failed to load ban list: " + var3);
+
+			bufferedReader1.close();
+		} catch (Exception exception3) {
+			logger.warning("Failed to load ban list: " + exception3);
 		}
 
 	}
 
 	private void writeBannedPlayers() {
 		try {
-			PrintWriter var1 = new PrintWriter(new FileWriter(this.bannedPlayersFile, false));
-			Iterator var2 = this.bannedPlayers.iterator();
+			PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.bannedPlayersFile, false));
+			Iterator iterator2 = this.bannedPlayers.iterator();
 
-			while(var2.hasNext()) {
-				String var3 = (String)var2.next();
-				var1.println(var3);
+			while(iterator2.hasNext()) {
+				String string3 = (String)iterator2.next();
+				printWriter1.println(string3);
 			}
 
-			var1.close();
-		} catch (Exception var4) {
-			logger.warning("Failed to save ban list: " + var4);
+			printWriter1.close();
+		} catch (Exception exception4) {
+			logger.warning("Failed to save ban list: " + exception4);
 		}
 
 	}
 
-	public void banIP(String var1) {
-		this.bannedIPs.add(var1.toLowerCase());
+	public void banIP(String string) {
+		this.bannedIPs.add(string.toLowerCase());
 		this.saveBannedList();
 	}
 
-	public void pardonIP(String var1) {
-		this.bannedIPs.remove(var1.toLowerCase());
+	public void pardonIP(String string) {
+		this.bannedIPs.remove(string.toLowerCase());
 		this.saveBannedList();
 	}
 
 	private void loadBannedList() {
 		try {
 			this.bannedIPs.clear();
-			BufferedReader var1 = new BufferedReader(new FileReader(this.ipBanFile));
-			String var2 = "";
-
-			while(true) {
-				var2 = var1.readLine();
-				if(var2 == null) {
-					var1.close();
-					break;
-				}
-
-				this.bannedIPs.add(var2.trim().toLowerCase());
+			BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.ipBanFile));
+			String string2 = "";
+
+			while((string2 = bufferedReader1.readLine()) != null) {
+				this.bannedIPs.add(string2.trim().toLowerCase());
 			}
-		} catch (Exception var3) {
-			logger.warning("Failed to load ip ban list: " + var3);
+
+			bufferedReader1.close();
+		} catch (Exception exception3) {
+			logger.warning("Failed to load ip ban list: " + exception3);
 		}
 
 	}
 
 	private void saveBannedList() {
 		try {
-			PrintWriter var1 = new PrintWriter(new FileWriter(this.ipBanFile, false));
-			Iterator var2 = this.bannedIPs.iterator();
+			PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.ipBanFile, false));
+			Iterator iterator2 = this.bannedIPs.iterator();
 
-			while(var2.hasNext()) {
-				String var3 = (String)var2.next();
-				var1.println(var3);
+			while(iterator2.hasNext()) {
+				String string3 = (String)iterator2.next();
+				printWriter1.println(string3);
 			}
 
-			var1.close();
-		} catch (Exception var4) {
-			logger.warning("Failed to save ip ban list: " + var4);
+			printWriter1.close();
+		} catch (Exception exception4) {
+			logger.warning("Failed to save ip ban list: " + exception4);
 		}
 
 	}
 
-	public void opPlayer(String var1) {
-		this.ops.add(var1.toLowerCase());
+	public void opPlayer(String string) {
+		this.ops.add(string.toLowerCase());
 		this.saveOps();
 	}
 
-	public void deopPlayer(String var1) {
-		this.ops.remove(var1.toLowerCase());
+	public void deopPlayer(String string) {
+		this.ops.remove(string.toLowerCase());
 		this.saveOps();
 	}
 
 	private void loadOps() {
 		try {
 			this.ops.clear();
-			BufferedReader var1 = new BufferedReader(new FileReader(this.opFile));
-			String var2 = "";
-
-			while(true) {
-				var2 = var1.readLine();
-				if(var2 == null) {
-					var1.close();
-					break;
-				}
-
-				this.ops.add(var2.trim().toLowerCase());
+			BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.opFile));
+			String string2 = "";
+
+			while((string2 = bufferedReader1.readLine()) != null) {
+				this.ops.add(string2.trim().toLowerCase());
 			}
-		} catch (Exception var3) {
-			logger.warning("Failed to load ip ban list: " + var3);
+
+			bufferedReader1.close();
+		} catch (Exception exception3) {
+			logger.warning("Failed to load ip ban list: " + exception3);
 		}
 
 	}
 
 	private void saveOps() {
 		try {
-			PrintWriter var1 = new PrintWriter(new FileWriter(this.opFile, false));
-			Iterator var2 = this.ops.iterator();
+			PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.opFile, false));
+			Iterator iterator2 = this.ops.iterator();
 
-			while(var2.hasNext()) {
-				String var3 = (String)var2.next();
-				var1.println(var3);
+			while(iterator2.hasNext()) {
+				String string3 = (String)iterator2.next();
+				printWriter1.println(string3);
 			}
 
-			var1.close();
-		} catch (Exception var4) {
-			logger.warning("Failed to save ip ban list: " + var4);
+			printWriter1.close();
+		} catch (Exception exception4) {
+			logger.warning("Failed to save ip ban list: " + exception4);
 		}
 
 	}
 
-	public boolean isOp(String var1) {
-		return this.ops.contains(var1.trim().toLowerCase());
+	public boolean isOp(String string) {
+		return this.ops.contains(string.trim().toLowerCase());
 	}
 
-	public EntityPlayerMP getPlayerEntity(String var1) {
-		for(int var2 = 0; var2 < this.playerEntities.size(); ++var2) {
-			EntityPlayerMP var3 = (EntityPlayerMP)this.playerEntities.get(var2);
-			if(var3.username.equalsIgnoreCase(var1)) {
-				return var3;
+	public EntityPlayerMP getPlayerEntity(String string) {
+		for(int i2 = 0; i2 < this.playerEntities.size(); ++i2) {
+			EntityPlayerMP entityPlayerMP3 = (EntityPlayerMP)this.playerEntities.get(i2);
+			if(entityPlayerMP3.username.equalsIgnoreCase(string)) {
+				return entityPlayerMP3;
 			}
 		}
 
 		return null;
 	}
 
-	public void sendChatMessageToPlayer(String var1, String var2) {
-		EntityPlayerMP var3 = this.getPlayerEntity(var1);
-		if(var3 != null) {
-			var3.playerNetServerHandler.sendPacket(new Packet3Chat(var2));
+	public void sendChatMessageToPlayer(String string1, String string2) {
+		EntityPlayerMP entityPlayerMP3 = this.getPlayerEntity(string1);
+		if(entityPlayerMP3 != null) {
+			entityPlayerMP3.playerNetServerHandler.sendPacket(new Packet3Chat(string2));
 		}
 
 	}
 
-	public void sendChatMessageToAllOps(String var1) {
-		Packet3Chat var2 = new Packet3Chat(var1);
+	public void sendChatMessageToAllOps(String string) {
+		Packet3Chat packet3Chat2 = new Packet3Chat(string);
 
-		for(int var3 = 0; var3 < this.playerEntities.size(); ++var3) {
-			EntityPlayerMP var4 = (EntityPlayerMP)this.playerEntities.get(var3);
-			if(this.isOp(var4.username)) {
-				var4.playerNetServerHandler.sendPacket(var2);
+		for(int i3 = 0; i3 < this.playerEntities.size(); ++i3) {
+			EntityPlayerMP entityPlayerMP4 = (EntityPlayerMP)this.playerEntities.get(i3);
+			if(this.isOp(entityPlayerMP4.username)) {
+				entityPlayerMP4.playerNetServerHandler.sendPacket(packet3Chat2);
 			}
 		}
 
 	}
 
-	public boolean sendPacketToPlayer(String var1, Packet var2) {
-		EntityPlayerMP var3 = this.getPlayerEntity(var1);
-		if(var3 != null) {
-			var3.playerNetServerHandler.sendPacket(var2);
+	public boolean sendPacketToPlayer(String string, Packet mv) {
+		EntityPlayerMP entityPlayerMP3 = this.getPlayerEntity(string);
+		if(entityPlayerMP3 != null) {
+			entityPlayerMP3.playerNetServerHandler.sendPacket(mv);
 			return true;
 		} else {
 			return false;
 		}
 	}
 
-	public void sentTileEntityToPlayer(int var1, int var2, int var3, TileEntity var4) {
-		this.playerManagerObj.sendTileEntity(new Packet59ComplexEntity(var1, var2, var3, var4), var1, var2, var3);
+	public void sentTileEntityToPlayer(int integer1, int integer2, int integer3, TileEntity dc) {
+		this.playerManagerObj.sendTileEntity(new Packet59ComplexEntity(integer1, integer2, integer3, dc), integer1, integer2, integer3);
 	}
 
 	public void savePlayerStates() {
-		for(int var1 = 0; var1 < this.playerEntities.size(); ++var1) {
-			this.playerNBTManagerObj.writePlayerNBT((EntityPlayerMP)this.playerEntities.get(var1));
+		for(int i1 = 0; i1 < this.playerEntities.size(); ++i1) {
+			this.playerNBTManagerObj.writePlayerNBT((EntityPlayerMP)this.playerEntities.get(i1));
+		}
+
+	}
+
+	public void func_7644_69pl0QQx7RRBVy4UnQ096NE0lKNB0QpE26Og5gn7269TQV76YH9Eoe3ORb8P(Packet mv, double double2, double double3, double double4, int integer) {
+		ArrayList arrayList9 = new ArrayList(this.mcServer.worldMngr.getEntitiesWithinAABB(EntityPlayerMP.class, AxisAlignedBB.getBoundingBox(double2 - (double)integer, double3 - (double)integer, double4 - (double)integer, double2 + (double)integer, double3 + (double)integer, double4 + (double)integer)));
+		if(!arrayList9.isEmpty()) {
+			Iterator iterator10 = arrayList9.iterator();
+
+			while(iterator10.hasNext()) {
+				EntityPlayerMP entityPlayerMP11 = (EntityPlayerMP)iterator10.next();
+				this.sendPacketToPlayer(entityPlayerMP11.username, mv);
+			}
 		}
 
 	}
--- net/minecraft/src/Block.java
+++ net/minecraft/src/Block.java
@@ -4,6 +4,7 @@
 import java.util.Random;
 
 public class Block {
+	public static final int BLOCK_LIST_SIZE = 32767;
 	public static final StepSound soundPowderFootstep = new StepSound("stone", 1.0F, 1.0F);
 	public static final StepSound soundWoodFootstep = new StepSound("wood", 1.0F, 1.0F);
 	public static final StepSound soundGravelFootstep = new StepSound("gravel", 1.0F, 1.0F);
@@ -13,13 +14,13 @@
 	public static final StepSound soundGlassFootstep = new StepSoundGlass("stone", 1.0F, 1.0F);
 	public static final StepSound soundClothFootstep = new StepSound("cloth", 1.0F, 1.0F);
 	public static final StepSound soundSandFootstep = new StepSoundSand("sand", 1.0F, 1.0F);
-	public static final Block[] blocksList = new Block[256];
-	public static final boolean[] tickOnLoad = new boolean[256];
-	public static final boolean[] opaqueCubeLookup = new boolean[256];
-	public static final boolean[] isBlockContainer = new boolean[256];
-	public static final int[] lightOpacity = new int[256];
-	public static final boolean[] canBlockGrass = new boolean[256];
-	public static final int[] lightValue = new int[256];
+	public static final Block[] blocksList = new Block[32767];
+	public static final boolean[] tickOnLoad = new boolean[32767];
+	public static final boolean[] opaqueCubeLookup = new boolean[32767];
+	public static final boolean[] isBlockContainer = new boolean[32767];
+	public static final int[] lightOpacity = new int[32767];
+	public static final boolean[] canBlockGrass = new boolean[32767];
+	public static final int[] lightValue = new int[32767];
 	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep);
 	public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep);
@@ -58,19 +59,19 @@
 	public static final Block clothWhite = null;
 	public static final BlockFlower plantYellow = (BlockFlower)(new BlockFlower(37, 13)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final BlockFlower plantRed = (BlockFlower)(new BlockFlower(38, 12)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(2.0F / 16.0F);
+	public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(0.125F);
 	public static final BlockFlower mushroomRed = (BlockFlower)(new BlockMushroom(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final Block blockGold = (new BlockOreBlock(41, 39)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
 	public static final Block blockSteel = (new BlockOreBlock(42, 38)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
-	public static final Block stairDouble = (new BlockStep(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block stairSingle = (new BlockStep(44, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stairDouble = (new BlockStep(43, 0, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stairSingle = (new BlockStep(44, 0, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block brick = (new Block(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block tnt = (new BlockTNT(46, 8)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final Block bookshelf = (new BlockBookshelf(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep);
 	public static final Block cobblestoneMossy = (new Block(48, 36, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block obsidian = (new BlockObsidian(49, 37)).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep);
-	public static final Block torch = (new BlockTorch(50, 80)).setHardness(0.0F).setLightValue(15.0F / 16.0F).setStepSound(soundWoodFootstep);
-	public static final BlockFire fire = (BlockFire)((BlockFire)(new BlockFire(51, 31)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep));
+	public static final Block torch = (new BlockTorch(50, 80)).setHardness(0.0F).setLightValue(0.9375F).setStepSound(soundWoodFootstep);
+	public static final BlockFire fire = (BlockFire)(new BlockFire(51, 31)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep);
 	public static final Block mobSpawner = (new BlockMobSpawner(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep);
 	public static final Block stairCompactWood = new BlockStairs(53, planks);
 	public static final Block chest = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep);
@@ -81,7 +82,7 @@
 	public static final Block crops = (new BlockCrops(59, 88)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final Block tilledField = (new BlockFarmland(60)).setHardness(0.6F).setStepSound(soundGravelFootstep);
 	public static final Block stoneOvenIdle = (new BlockFurnace(61, false)).setHardness(3.5F).setStepSound(soundStoneFootstep);
-	public static final Block stoneOvenActive = (new BlockFurnace(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(14.0F / 16.0F);
+	public static final Block stoneOvenActive = (new BlockFurnace(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(0.875F);
 	public static final Block signStanding = (new BlockSign(63, TileEntitySign.class, true)).setHardness(1.0F).setStepSound(soundWoodFootstep);
 	public static final Block doorWood = (new BlockDoor(64, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep);
 	public static final Block ladder = (new BlockLadder(65, 83)).setHardness(0.4F).setStepSound(soundWoodFootstep);
@@ -93,7 +94,7 @@
 	public static final Block doorSteel = (new BlockDoor(71, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep);
 	public static final Block pressurePlateWood = (new BlockPressurePlate(72, planks.blockIndexInTexture, EnumMobType.everything)).setHardness(0.5F).setStepSound(soundWoodFootstep);
 	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, true)).setLightValue(10.0F / 16.0F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, true)).setLightValue(0.625F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
 	public static final Block torchRedstoneIdle = (new BlockRedstoneTorch(75, 115, false)).setHardness(0.0F).setStepSound(soundWoodFootstep);
 	public static final Block torchRedstoneActive = (new BlockRedstoneTorch(76, 99, true)).setHardness(0.0F).setLightValue(0.5F).setStepSound(soundWoodFootstep);
 	public static final Block button = (new BlockButton(77, stone.blockIndexInTexture)).setHardness(0.5F).setStepSound(soundStoneFootstep);
@@ -105,6 +106,8 @@
 	public static final Block reed = (new BlockReed(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
+	public static StepSound soundElderFootstep;
+	public static StepSound soundSpecialFootstep;
 	public int blockIndexInTexture;
 	public final int blockID;
 	protected float hardness;
@@ -119,47 +122,65 @@
 	public float blockParticleGravity;
 	public final Material material;
 	public float slipperiness;
+	public boolean pickaxeEffective;
+	public int essenceValue;
 
-	protected Block(int var1, Material var2) {
+	protected Block(int id, Material material) {
+		this.pickaxeEffective = false;
+		this.essenceValue = 1;
 		this.stepSound = soundPowderFootstep;
 		this.blockParticleGravity = 1.0F;
 		this.slipperiness = 0.6F;
-		if(blocksList[var1] != null) {
-			throw new IllegalArgumentException("Slot " + var1 + " is already occupied by " + blocksList[var1] + " when adding " + this);
+		if(blocksList[id] != null) {
+			throw new IllegalArgumentException("Slot " + id + " is already occupied by " + blocksList[id] + " when adding " + this);
 		} else {
-			this.material = var2;
-			blocksList[var1] = this;
-			this.blockID = var1;
+			this.material = material;
+			blocksList[id] = this;
+			this.blockID = id;
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-			opaqueCubeLookup[var1] = this.isOpaqueCube();
-			lightOpacity[var1] = this.isOpaqueCube() ? 255 : 0;
-			canBlockGrass[var1] = this.getCanBlockGrass();
-			isBlockContainer[var1] = false;
+			opaqueCubeLookup[id] = this.isOpaqueCube();
+			lightOpacity[id] = this.isOpaqueCube() ? 255 : 0;
+			canBlockGrass[id] = this.getCanBlockGrass();
+			isBlockContainer[id] = false;
 		}
 	}
 
-	protected Block(int var1, int var2, Material var3) {
-		this(var1, var3);
-		this.blockIndexInTexture = var2;
-	}
-
-	protected Block setStepSound(StepSound var1) {
-		this.stepSound = var1;
-		return this;
-	}
-
-	protected Block setLightOpacity(int var1) {
-		lightOpacity[this.blockID] = var1;
-		return this;
-	}
-
-	protected Block setLightValue(float var1) {
-		lightValue[this.blockID] = (int)(15.0F * var1);
-		return this;
-	}
-
-	protected Block setResistance(float var1) {
-		this.resistance = var1 * 3.0F;
+	public Block(int id, int blockIndex, Material material) {
+		this(id, material);
+		this.blockIndexInTexture = blockIndex;
+	}
+
+	public Block setStepSound(StepSound stepSound) {
+		this.stepSound = stepSound;
+		return this;
+	}
+
+	public Block setLightOpacity(int opacity) {
+		lightOpacity[this.blockID] = opacity;
+		return this;
+	}
+
+	public Block setLightValue(float value) {
+		lightValue[this.blockID] = (int)(15.0F * value);
+		return this;
+	}
+
+	public Block setResistance(float resistance) {
+		this.resistance = resistance * 3.0F;
+		return this;
+	}
+
+	public int getBlockTexture(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return 0;
+	}
+
+	public Block setPickaxeEffective(boolean boolean1) {
+		this.pickaxeEffective = boolean1;
+		return this;
+	}
+
+	public Block setEssValue(int integer) {
+		this.essenceValue = integer;
 		return this;
 	}
 
@@ -167,57 +188,65 @@
 		return false;
 	}
 
+	public boolean renderAsNormalBlock() {
+		return true;
+	}
+
 	public int getRenderType() {
 		return 0;
 	}
 
-	protected Block setHardness(float var1) {
-		this.hardness = var1;
-		if(this.resistance < var1 * 5.0F) {
-			this.resistance = var1 * 5.0F;
+	public Block setHardness(float hardness) {
+		this.hardness = hardness;
+		if(this.resistance < hardness * 5.0F) {
+			this.resistance = hardness * 5.0F;
 		}
 
 		return this;
 	}
 
-	protected void setTickOnLoad(boolean var1) {
-		tickOnLoad[this.blockID] = var1;
-	}
-
-	public void setBlockBounds(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.minX = (double)var1;
-		this.minY = (double)var2;
-		this.minZ = (double)var3;
-		this.maxX = (double)var4;
-		this.maxY = (double)var5;
-		this.maxZ = (double)var6;
-	}
-
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return var5 == 0 && this.minY > 0.0D ? true : (var5 == 1 && this.maxY < 1.0D ? true : (var5 == 2 && this.minZ > 0.0D ? true : (var5 == 3 && this.maxZ < 1.0D ? true : (var5 == 4 && this.minX > 0.0D ? true : (var5 == 5 && this.maxX < 1.0D ? true : !var1.isBlockNormalCube(var2, var3, var4))))));
-	}
-
-	public int getBlockTextureFromSide(int var1) {
+	protected void setTickOnLoad(boolean doesTickOnLoad) {
+		tickOnLoad[this.blockID] = doesTickOnLoad;
+	}
+
+	public void setBlockBounds(float minX, float minY, float minZ, float maxX, float maxY, float maxZ) {
+		this.minX = (double)minX;
+		this.minY = (double)minY;
+		this.minZ = (double)minZ;
+		this.maxX = (double)maxX;
+		this.maxY = (double)maxY;
+		this.maxZ = (double)maxZ;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		return side == 0 && this.minY > 0.0D ? true : (side == 1 && this.maxY < 1.0D ? true : (side == 2 && this.minZ > 0.0D ? true : (side == 3 && this.maxZ < 1.0D ? true : (side == 4 && this.minX > 0.0D ? true : (side == 5 && this.maxX < 1.0D ? true : !blockAccess.isBlockNormalCube(x, y, z))))));
+	}
+
+	public int getBlockTextureFromSide(int side) {
 		return this.blockIndexInTexture;
 	}
 
-	public void getCollidingBoundingBoxes(World var1, int var2, int var3, int var4, AxisAlignedBB var5, ArrayList var6) {
-		AxisAlignedBB var7 = this.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
-		if(var7 != null && var5.intersectsWith(var7)) {
-			var6.add(var7);
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		return AxisAlignedBB.getBoundingBoxFromPool((double)x + this.minX, (double)y + this.minY, (double)z + this.minZ, (double)x + this.maxX, (double)y + this.maxY, (double)z + this.maxZ);
+	}
+
+	public void getCollidingBoundingBoxes(World world, int x, int y, int z, AxisAlignedBB aabb, ArrayList arrayList) {
+		AxisAlignedBB axisAlignedBB7 = this.getCollisionBoundingBoxFromPool(world, x, y, z);
+		if(axisAlignedBB7 != null && aabb.intersectsWith(axisAlignedBB7)) {
+			arrayList.add(axisAlignedBB7);
 		}
 
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		return AxisAlignedBB.getBoundingBoxFromPool((double)var2 + this.minX, (double)var3 + this.minY, (double)var4 + this.minZ, (double)var2 + this.maxX, (double)var3 + this.maxY, (double)var4 + this.maxZ);
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		return AxisAlignedBB.getBoundingBoxFromPool((double)x + this.minX, (double)y + this.minY, (double)z + this.minZ, (double)x + this.maxX, (double)y + this.maxY, (double)z + this.maxZ);
 	}
 
 	public boolean isOpaqueCube() {
 		return true;
 	}
 
-	public boolean canCollideCheck(int var1, boolean var2) {
+	public boolean canCollideCheck(int metadata, boolean boolean2) {
 		return this.isCollidable();
 	}
 
@@ -225,198 +254,209 @@
 		return true;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-	}
-
-	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+	public void updateTick(World world, int x, int y, int z, Random random) {
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+	}
+
+	public void onBlockDestroyedByPlayer(World world, int x, int y, int z, int flag) {
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
 	}
 
 	public int tickRate() {
 		return 10;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-	}
-
-	public int quantityDropped(Random var1) {
+	public void onBlockAdded(World world, int x, int y, int z) {
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+	}
+
+	public int quantityDropped(Random random) {
 		return 1;
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return this.blockID;
 	}
 
-	public float blockStrength(EntityPlayer var1) {
-		return this.hardness < 0.0F ? 0.0F : (!var1.canHarvestBlock(this) ? 1.0F / this.hardness / 100.0F : var1.getCurrentPlayerStrVsBlock(this) / this.hardness / 30.0F);
-	}
-
-	public void dropBlockAsItem(World var1, int var2, int var3, int var4, int var5) {
-		this.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, 1.0F);
-	}
-
-	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		if(!var1.multiplayerWorld) {
-			int var7 = this.quantityDropped(var1.rand);
-
-			for(int var8 = 0; var8 < var7; ++var8) {
-				if(var1.rand.nextFloat() <= var6) {
-					int var9 = this.idDropped(var5, var1.rand);
-					if(var9 > 0) {
-						float var10 = 0.7F;
-						double var11 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
-						double var13 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
-						double var15 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
-						EntityItem var17 = new EntityItem(var1, (double)var2 + var11, (double)var3 + var13, (double)var4 + var15, new ItemStack(var9));
-						var17.delayBeforeCanPickup = 10;
-						var1.spawnEntityInWorld(var17);
+	public float blockStrength(EntityPlayer entityPlayer) {
+		return this.hardness >= 0.0F ? (!entityPlayer.canHarvestBlock(this) ? 1.0F / this.hardness / 100.0F : entityPlayer.getCurrentPlayerStrVsBlock(this) / this.hardness / 30.0F) : (entityPlayer.inventory.getCurrentItem() == null || entityPlayer.inventory.getCurrentItem().getItem() != ExtItems.obsidianPick && entityPlayer.inventory.getCurrentItem().getItem() != ExtItems.eraser ? 0.0F : entityPlayer.getCurrentPlayerStrVsBlock(this) / 2.0F / 30.0F);
+	}
+
+	public void dropBlockAsItem(World world, int x, int y, int z, int metadata) {
+		this.dropBlockAsItemWithChance(world, x, y, z, metadata, 1.0F);
+	}
+
+	public void dropBlockAsItemWithChance(World world, int x, int y, int z, int metadata, float chance) {
+		if(!world.multiplayerWorld) {
+			int i7 = this.quantityDropped(world.rand);
+
+			for(int i8 = 0; i8 < i7; ++i8) {
+				if(world.rand.nextFloat() <= chance) {
+					int i9 = this.idDropped(metadata, world.rand);
+					if(i9 > 0) {
+						float f10 = 0.7F;
+						double d11 = (double)(world.rand.nextFloat() * f10) + (double)(1.0F - f10) * 0.5D;
+						double d13 = (double)(world.rand.nextFloat() * f10) + (double)(1.0F - f10) * 0.5D;
+						double d15 = (double)(world.rand.nextFloat() * f10) + (double)(1.0F - f10) * 0.5D;
+						EntityItem entityItem17 = new EntityItem(world, (double)x + d11, (double)y + d13, (double)z + d15, new ItemStack(i9));
+						entityItem17.delayBeforeCanPickup = 10;
+						world.spawnEntityInWorld(entityItem17);
 					}
 				}
 			}
-
 		}
+
 	}
 
-	public float getExplosionResistance(Entity var1) {
+	public float getExplosionResistance(Entity entity) {
 		return this.resistance / 5.0F;
 	}
 
-	public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3D var5, Vec3D var6) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		var5 = var5.addVector((double)(-var2), (double)(-var3), (double)(-var4));
-		var6 = var6.addVector((double)(-var2), (double)(-var3), (double)(-var4));
-		Vec3D var7 = var5.getIntermediateWithXValue(var6, this.minX);
-		Vec3D var8 = var5.getIntermediateWithXValue(var6, this.maxX);
-		Vec3D var9 = var5.getIntermediateWithYValue(var6, this.minY);
-		Vec3D var10 = var5.getIntermediateWithYValue(var6, this.maxY);
-		Vec3D var11 = var5.getIntermediateWithZValue(var6, this.minZ);
-		Vec3D var12 = var5.getIntermediateWithZValue(var6, this.maxZ);
-		if(!this.isVecInsideYZBounds(var7)) {
-			var7 = null;
-		}
-
-		if(!this.isVecInsideYZBounds(var8)) {
-			var8 = null;
-		}
-
-		if(!this.isVecInsideXZBounds(var9)) {
-			var9 = null;
-		}
-
-		if(!this.isVecInsideXZBounds(var10)) {
-			var10 = null;
-		}
-
-		if(!this.isVecInsideXYBounds(var11)) {
-			var11 = null;
-		}
-
-		if(!this.isVecInsideXYBounds(var12)) {
-			var12 = null;
-		}
-
-		Vec3D var13 = null;
-		if(var7 != null && (var13 == null || var5.distanceTo(var7) < var5.distanceTo(var13))) {
-			var13 = var7;
-		}
-
-		if(var8 != null && (var13 == null || var5.distanceTo(var8) < var5.distanceTo(var13))) {
-			var13 = var8;
-		}
-
-		if(var9 != null && (var13 == null || var5.distanceTo(var9) < var5.distanceTo(var13))) {
-			var13 = var9;
-		}
-
-		if(var10 != null && (var13 == null || var5.distanceTo(var10) < var5.distanceTo(var13))) {
-			var13 = var10;
-		}
-
-		if(var11 != null && (var13 == null || var5.distanceTo(var11) < var5.distanceTo(var13))) {
-			var13 = var11;
-		}
-
-		if(var12 != null && (var13 == null || var5.distanceTo(var12) < var5.distanceTo(var13))) {
-			var13 = var12;
-		}
-
-		if(var13 == null) {
+	public MovingObjectPosition collisionRayTrace(World world, int x, int y, int z, Vec3D vector1, Vec3D vector2) {
+		this.setBlockBoundsBasedOnState(world, x, y, z);
+		vector1 = vector1.addVector((double)(-x), (double)(-y), (double)(-z));
+		vector2 = vector2.addVector((double)(-x), (double)(-y), (double)(-z));
+		Vec3D vec3D7 = vector1.getIntermediateWithXValue(vector2, this.minX);
+		Vec3D vec3D8 = vector1.getIntermediateWithXValue(vector2, this.maxX);
+		Vec3D vec3D9 = vector1.getIntermediateWithYValue(vector2, this.minY);
+		Vec3D vec3D10 = vector1.getIntermediateWithYValue(vector2, this.maxY);
+		Vec3D vec3D11 = vector1.getIntermediateWithZValue(vector2, this.minZ);
+		Vec3D vec3D12 = vector1.getIntermediateWithZValue(vector2, this.maxZ);
+		if(!this.isVecInsideYZBounds(vec3D7)) {
+			vec3D7 = null;
+		}
+
+		if(!this.isVecInsideYZBounds(vec3D8)) {
+			vec3D8 = null;
+		}
+
+		if(!this.isVecInsideXZBounds(vec3D9)) {
+			vec3D9 = null;
+		}
+
+		if(!this.isVecInsideXZBounds(vec3D10)) {
+			vec3D10 = null;
+		}
+
+		if(!this.isVecInsideXYBounds(vec3D11)) {
+			vec3D11 = null;
+		}
+
+		if(!this.isVecInsideXYBounds(vec3D12)) {
+			vec3D12 = null;
+		}
+
+		Vec3D vec3D13 = null;
+		if(vec3D7 != null && (vec3D13 == null || vector1.distanceTo(vec3D7) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D7;
+		}
+
+		if(vec3D8 != null && (vec3D13 == null || vector1.distanceTo(vec3D8) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D8;
+		}
+
+		if(vec3D9 != null && (vec3D13 == null || vector1.distanceTo(vec3D9) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D9;
+		}
+
+		if(vec3D10 != null && (vec3D13 == null || vector1.distanceTo(vec3D10) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D10;
+		}
+
+		if(vec3D11 != null && (vec3D13 == null || vector1.distanceTo(vec3D11) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D11;
+		}
+
+		if(vec3D12 != null && (vec3D13 == null || vector1.distanceTo(vec3D12) < vector1.distanceTo(vec3D13))) {
+			vec3D13 = vec3D12;
+		}
+
+		if(vec3D13 == null) {
 			return null;
 		} else {
-			byte var14 = -1;
-			if(var13 == var7) {
-				var14 = 4;
-			}
-
-			if(var13 == var8) {
-				var14 = 5;
-			}
-
-			if(var13 == var9) {
-				var14 = 0;
-			}
-
-			if(var13 == var10) {
-				var14 = 1;
-			}
-
-			if(var13 == var11) {
-				var14 = 2;
-			}
-
-			if(var13 == var12) {
-				var14 = 3;
-			}
-
-			return new MovingObjectPosition(var2, var3, var4, var14, var13.addVector((double)var2, (double)var3, (double)var4));
+			byte b14 = -1;
+			if(vec3D13 == vec3D7) {
+				b14 = 4;
+			}
+
+			if(vec3D13 == vec3D8) {
+				b14 = 5;
+			}
+
+			if(vec3D13 == vec3D9) {
+				b14 = 0;
+			}
+
+			if(vec3D13 == vec3D10) {
+				b14 = 1;
+			}
+
+			if(vec3D13 == vec3D11) {
+				b14 = 2;
+			}
+
+			if(vec3D13 == vec3D12) {
+				b14 = 3;
+			}
+
+			return new MovingObjectPosition(x, y, z, b14, vec3D13.addVector((double)x, (double)y, (double)z));
 		}
 	}
 
-	private boolean isVecInsideYZBounds(Vec3D var1) {
-		return var1 == null ? false : var1.yCoord >= this.minY && var1.yCoord <= this.maxY && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
-	}
-
-	private boolean isVecInsideXZBounds(Vec3D var1) {
-		return var1 == null ? false : var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
-	}
-
-	private boolean isVecInsideXYBounds(Vec3D var1) {
-		return var1 == null ? false : var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.yCoord >= this.minY && var1.yCoord <= this.maxY;
-	}
-
-	public void onBlockDestroyedByExplosion(World var1, int var2, int var3, int var4) {
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3, var4);
-		return var5 == 0 || blocksList[var5].material.getIsLiquid();
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+	private boolean isVecInsideYZBounds(Vec3D vector) {
+		return vector == null ? false : vector.yCoord >= this.minY && vector.yCoord <= this.maxY && vector.zCoord >= this.minZ && vector.zCoord <= this.maxZ;
+	}
+
+	private boolean isVecInsideXZBounds(Vec3D vector) {
+		return vector == null ? false : vector.xCoord >= this.minX && vector.xCoord <= this.maxX && vector.zCoord >= this.minZ && vector.zCoord <= this.maxZ;
+	}
+
+	private boolean isVecInsideXYBounds(Vec3D vector) {
+		return vector == null ? false : vector.xCoord >= this.minX && vector.xCoord <= this.maxX && vector.yCoord >= this.minY && vector.yCoord <= this.maxY;
+	}
+
+	public void onBlockDestroyedByExplosion(World world, int x, int y, int z) {
+	}
+
+	public int getRenderBlockPass() {
+		return 0;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		int i5 = world.getBlockId(x, y, z);
+		return i5 == 0 || blocksList[i5].material.getIsLiquid();
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
 		return false;
 	}
 
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-	}
-
-	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
-	}
-
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-	}
-
-	public void velocityToAddToEntity(World var1, int var2, int var3, int var4, Entity var5, Vec3D var6) {
-	}
-
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-	}
-
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+	public void onEntityWalking(World world, int x, int y, int z, Entity entity) {
+	}
+
+	public void onBlockPlaced(World world, int x, int y, int z, int notifyFlag) {
+	}
+
+	public void onBlockClicked(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+	}
+
+	public void velocityToAddToEntity(World world, int x, int y, int z, Entity entity, Vec3D vector) {
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+	}
+
+	public int colorMultiplier(IBlockAccess blockAccess, int x, int y, int z) {
+		return 0xFFFFFF;
+	}
+
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int unused) {
 		return false;
 	}
 
@@ -424,21 +464,42 @@
 		return false;
 	}
 
-	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
 	}
 
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
+	public boolean isIndirectlyPoweringTo(World world, int x, int y, int z, int flag) {
 		return false;
 	}
 
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
+	public void setBlockBoundsForItemRender() {
+	}
+
+	public void harvestBlock(World worldObj, int x, int y, int z, int metadata) {
+		this.dropBlockAsItem(worldObj, x, y, z, metadata);
+	}
+
+	public boolean canBlockStay(World world, int x, int y, int z) {
 		return true;
+	}
+
+	public Block setName(String string) {
+		return this;
+	}
+
+	public Block func_6151_25876D73IUZGMvsxuJ9FK3G9uS5jHTtSi5Ebey3exyWHs4kk86DvoVS8A900(boolean boolean1) {
+		return this;
+	}
+
+	public Block func_6145_8rzoHb72cZES8ywX21vXt5vGwPtLsOh8hgnSMhQtU1cNcj67158V4ha9IN6a(int integer) {
+		return this;
 	}
 
 	static {
-		for(int var0 = 0; var0 < 256; ++var0) {
-			if(blocksList[var0] != null) {
-				Item.itemsList[var0] = new ItemBlock(var0 - 256);
+		ExtBlocks.Register();
+
+		for(int i0 = 0; i0 < 256; ++i0) {
+			if(blocksList[i0] != null) {
+				Item.itemsList[i0] = new ItemBlock(i0 - 256);
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/BlockFlamingCube.java
@@ -1,0 +1,100 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockFlamingCube extends Block {
+	int renderMode = 1;
+
+	public BlockFlamingCube(int integer1, int integer2, int integer3) {
+		super(integer1, integer2, Material.rock);
+		this.setTickOnLoad(true);
+		this.renderMode = 0;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return true;
+	}
+
+	public int getRenderType() {
+		return this.renderMode;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return true;
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		super.updateTick(world, x, y, z, random);
+		if(world.getBlockMetadata(x, y, z) == 0) {
+			this.onBlockAdded(world, x, y, z);
+		}
+
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		float f5 = 0.0625F;
+		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + f5), (double)y, (double)((float)z + f5), (double)((float)(x + 1) - f5), (double)((float)(y + 1) - f5), (double)((float)(z + 1) - f5));
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World worldObj, int x, int y, int z) {
+		float f5 = 0.0625F;
+		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + f5), (double)y, (double)((float)z + f5), (double)((float)(x + 1) - f5), (double)(y + 1), (double)((float)(z + 1) - f5));
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(this.h(world, x, y, z)) {
+			int i6 = world.getBlockMetadata(x, y, z);
+			boolean z7 = false;
+			if(!world.isBlockNormalCube(x - 1, y, z) && i6 == 1) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x + 1, y, z) && i6 == 2) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z - 1) && i6 == 3) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z + 1) && i6 == 4) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y - 1, z) && i6 == 5) {
+				z7 = true;
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+				world.setBlockWithNotify(x, y, z, 0);
+			}
+		}
+
+	}
+
+	private boolean h(World cv, int integer2, int integer3, int integer4) {
+		if(!this.canPlaceBlockAt(cv, integer2, integer3, integer4)) {
+			this.dropBlockAsItem(cv, integer2, integer3, integer4, cv.getBlockMetadata(integer2, integer3, integer4));
+			cv.setBlockWithNotify(integer2, integer3, integer4, 0);
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+	}
+
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
+		if(!(entity instanceof EntityItem)) {
+			entity.attackEntityFrom((Entity)null, 5);
+			entity.fire = 300;
+		}
+
+	}
+}
--- net/minecraft/src/EntityTracker.java
+++ net/minecraft/src/EntityTracker.java
@@ -4,6 +4,7 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Set;
+
 import net.minecraft.server.MinecraftServer;
 
 public class EntityTracker {
@@ -12,87 +13,87 @@
 	private MinecraftServer mcServer;
 	private int maxTrackingDistanceThreshold;
 
-	public EntityTracker(MinecraftServer var1) {
-		this.mcServer = var1;
-		this.maxTrackingDistanceThreshold = var1.configManager.getMaxTrackingDistance();
+	public EntityTracker(MinecraftServer minecraftServer) {
+		this.mcServer = minecraftServer;
+		this.maxTrackingDistanceThreshold = minecraftServer.configManager.getMaxTrackingDistance();
 	}
 
-	public void trackEntity(Entity var1) {
-		if(var1 instanceof EntityPlayerMP) {
-			this.trackEntity(var1, 512, 2);
-			EntityPlayerMP var2 = (EntityPlayerMP)var1;
-			Iterator var3 = this.trackedEntitySet.iterator();
+	public void trackEntity(Entity hx) {
+		if(hx instanceof EntityPlayerMP) {
+			this.trackEntity(hx, 512, 2);
+			EntityPlayerMP entityPlayerMP2 = (EntityPlayerMP)hx;
+			Iterator iterator3 = this.trackedEntitySet.iterator();
 
-			while(var3.hasNext()) {
-				EntityTrackerEntry var4 = (EntityTrackerEntry)var3.next();
-				if(var4.trackedEntity != var2) {
-					var4.updatePlayerEntity(var2);
+			while(iterator3.hasNext()) {
+				EntityTrackerEntry entityTrackerEntry4 = (EntityTrackerEntry)iterator3.next();
+				if(entityTrackerEntry4.trackedEntity != entityPlayerMP2) {
+					entityTrackerEntry4.updatePlayerEntity(entityPlayerMP2);
 				}
 			}
-		} else if(var1 instanceof EntityItem) {
-			this.trackEntity(var1, 64, 20);
-		} else if(var1 instanceof EntityMinecart) {
-			this.trackEntity(var1, 160, 4);
-		} else if(var1 instanceof IAnimals) {
-			this.trackEntity(var1, 160, 2);
+		} else if(hx instanceof EntityItem) {
+			this.trackEntity(hx, 64, 20);
+		} else if(hx instanceof EntityMinecart) {
+			this.trackEntity(hx, 160, 4);
+		} else if(hx instanceof IAnimals) {
+			this.trackEntity(hx, 160, 2);
 		}
 
 	}
 
-	public void trackEntity(Entity var1, int var2, int var3) {
-		if(var2 > this.maxTrackingDistanceThreshold) {
-			var2 = this.maxTrackingDistanceThreshold;
+	public void trackEntity(Entity hx, int integer2, int integer3) {
+		if(integer2 > this.maxTrackingDistanceThreshold) {
+			integer2 = this.maxTrackingDistanceThreshold;
 		}
 
-		if(this.trackedEntityHashTable.containsItem(var1.entityID)) {
+		if(this.trackedEntityHashTable.containsItem(hx.entityID)) {
 			throw new IllegalStateException("Entity is already tracked!");
 		} else {
-			EntityTrackerEntry var4 = new EntityTrackerEntry(var1, var2, var3);
-			this.trackedEntitySet.add(var4);
-			this.trackedEntityHashTable.addKey(var1.entityID, var4);
-			var4.updatePlayerEntities(this.mcServer.worldMngr.playerEntities);
+			EntityTrackerEntry entityTrackerEntry4 = new EntityTrackerEntry(hx, integer2, integer3);
+			this.trackedEntitySet.add(entityTrackerEntry4);
+			this.trackedEntityHashTable.addKey(hx.entityID, entityTrackerEntry4);
+			entityTrackerEntry4.updatePlayerEntities(this.mcServer.worldMngr.playerEntities);
 		}
 	}
 
-	public void untrackEntity(Entity var1) {
-		EntityTrackerEntry var2 = (EntityTrackerEntry)this.trackedEntityHashTable.removeObject(var1.entityID);
-		if(var2 != null) {
-			this.trackedEntitySet.remove(var2);
-			var2.removeFromTrackedPlayers();
+	public void untrackEntity(Entity hx) {
+		EntityTrackerEntry entityTrackerEntry2 = (EntityTrackerEntry)this.trackedEntityHashTable.removeObject(hx.entityID);
+		if(entityTrackerEntry2 != null) {
+			this.trackedEntitySet.remove(entityTrackerEntry2);
+			entityTrackerEntry2.removeFromTrackedPlayers();
 		}
 
 	}
 
 	public void updateTrackedEntities() {
-		ArrayList var1 = new ArrayList();
-		Iterator var2 = this.trackedEntitySet.iterator();
+		ArrayList arrayList1 = new ArrayList();
+		Iterator iterator2 = this.trackedEntitySet.iterator();
 
-		while(var2.hasNext()) {
-			EntityTrackerEntry var3 = (EntityTrackerEntry)var2.next();
-			var3.updatePlayerList(this.mcServer.worldMngr.playerEntities);
-			if(var3.playerEntitiesUpdated && var3.trackedEntity instanceof EntityPlayerMP) {
-				var1.add((EntityPlayerMP)var3.trackedEntity);
+		while(iterator2.hasNext()) {
+			EntityTrackerEntry entityTrackerEntry3 = (EntityTrackerEntry)iterator2.next();
+			entityTrackerEntry3.updatePlayerList(this.mcServer.worldMngr.playerEntities);
+			if(entityTrackerEntry3.playerEntitiesUpdated && entityTrackerEntry3.trackedEntity instanceof EntityPlayerMP) {
+				arrayList1.add((EntityPlayerMP)entityTrackerEntry3.trackedEntity);
 			}
 		}
 
-		for(int var6 = 0; var6 < var1.size(); ++var6) {
-			EntityPlayerMP var7 = (EntityPlayerMP)var1.get(var6);
-			Iterator var4 = this.trackedEntitySet.iterator();
+		for(int i7 = 0; i7 < arrayList1.size(); ++i7) {
+			EntityPlayerMP entityPlayerMP4 = (EntityPlayerMP)arrayList1.get(i7);
+			Iterator iterator5 = this.trackedEntitySet.iterator();
 
-			while(var4.hasNext()) {
-				EntityTrackerEntry var5 = (EntityTrackerEntry)var4.next();
-				if(var5.trackedEntity != var7) {
-					var5.updatePlayerEntity(var7);
+			while(iterator5.hasNext()) {
+				EntityTrackerEntry entityTrackerEntry6 = (EntityTrackerEntry)iterator5.next();
+				if(entityTrackerEntry6.trackedEntity != entityPlayerMP4) {
+					entityTrackerEntry6.updatePlayerEntity(entityPlayerMP4);
 				}
 			}
 		}
 
 	}
 
-	public void sendPacketToTrackedPlayers(Entity var1, Packet var2) {
-		EntityTrackerEntry var3 = (EntityTrackerEntry)this.trackedEntityHashTable.lookup(var1.entityID);
-		if(var3 != null) {
-			var3.sendPacketToTrackedPlayers(var2);
+	public void sendPacketToTrackedPlayers(Entity hx, Packet mv) {
+		EntityTrackerEntry entityTrackerEntry3 = (EntityTrackerEntry)this.trackedEntityHashTable.lookup(hx.entityID);
+		if(entityTrackerEntry3 != null) {
+			entityTrackerEntry3.sendPacketToTrackedPlayers(mv);
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/ItemRainConch.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+public class ItemRainConch extends Item {
+	public ItemRainConch(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		if(entityPlayer.inventory.consumeInventoryItem(ExtItems.essence.shiftedIndex)) {
+			worldObj.playSoundAtEntity(entityPlayer, "ext.notif", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+		}
+
+		return itemStack;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockLichen.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class BlockLichen extends BlockFlower {
+	public BlockLichen(int id, int blockIndex) {
+		super(id, blockIndex);
+	}
+
+	public boolean canBlockStay(World world, int x, int y, int z) {
+		return this.canThisPlantGrowOnThisBlockID(world.getBlockId(x, y - 1, z));
+	}
+
+	protected boolean canThisPlantGrowOnThisBlockID(int id) {
+		return id == ExtBlocks.LowStone.blockID || id == ExtBlocks.LowRiverbed.blockID;
+	}
+}
--- net/minecraft/src/NetworkMasterThread.java
+++ net/minecraft/src/NetworkMasterThread.java
@@ -3,28 +3,28 @@
 class NetworkMasterThread extends Thread {
 	final NetworkManager netManager;
 
-	NetworkMasterThread(NetworkManager var1) {
-		this.netManager = var1;
+	NetworkMasterThread(NetworkManager netManager) {
+		this.netManager = netManager;
 	}
 
 	public void run() {
 		try {
 			Thread.sleep(5000L);
-			if(NetworkManager.getReadThread(this.netManager).isAlive()) {
+			if(NetworkManager.readThread(this.netManager).isAlive()) {
 				try {
-					NetworkManager.getReadThread(this.netManager).stop();
-				} catch (Throwable var3) {
+					NetworkManager.readThread(this.netManager).stop();
+				} catch (Throwable throwable3) {
 				}
 			}
 
-			if(NetworkManager.getWriteThread(this.netManager).isAlive()) {
+			if(NetworkManager.writeThread(this.netManager).isAlive()) {
 				try {
-					NetworkManager.getWriteThread(this.netManager).stop();
-				} catch (Throwable var2) {
+					NetworkManager.writeThread(this.netManager).stop();
+				} catch (Throwable throwable2) {
 				}
 			}
-		} catch (InterruptedException var4) {
-			var4.printStackTrace();
+		} catch (InterruptedException interruptedException4) {
+			interruptedException4.printStackTrace();
 		}
 
 	}
--- net/minecraft/src/EntityPlayerMP.java
+++ net/minecraft/src/EntityPlayerMP.java
@@ -4,6 +4,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
+
 import net.minecraft.server.MinecraftServer;
 
 public class EntityPlayerMP extends EntityPlayer {
@@ -15,66 +16,68 @@
 	public List loadedChunks = new LinkedList();
 	public Set loadChunks = new HashSet();
 	public double managedPosY;
+	protected int field_7078_1hgWeBQo5G6STRoutdwd6m70aFtJ52m5A4Kf6AfEWO19206Vpw1dVnBRhqD4 = 0;
+	protected int field_7083_6s735fD2b34PeZPi5AAv974z952bpSx5KCn5t16UJg9m41kjh8w9tB0bDHg2 = 0;
 
-	public EntityPlayerMP(MinecraftServer var1, World var2, String var3, ItemInWorldManager var4) {
-		super(var2);
-		int var5 = var2.spawnX + this.rand.nextInt(20) - 10;
-		int var6 = var2.spawnZ + this.rand.nextInt(20) - 10;
-		int var7 = var2.getTopSolidOrLiquidBlock(var5, var6);
-		this.setLocationAndAngles((double)var5 + 0.5D, (double)var7, (double)var6 + 0.5D, 0.0F, 0.0F);
-		this.mcServer = var1;
+	public EntityPlayerMP(MinecraftServer minecraftServer, World world, String username, ItemInWorldManager itemInWorldManager) {
+		super(world);
+		int i5 = world.spawnX + this.rand.nextInt(20) - 10;
+		int i6 = world.spawnZ + this.rand.nextInt(20) - 10;
+		int i7 = world.getTopSolidOrLiquidBlock(i5, i6);
+		this.setLocationAndAngles((double)i5 + 0.5D, (double)i7, (double)i6 + 0.5D, 0.0F, 0.0F);
+		this.mcServer = minecraftServer;
 		this.stepHeight = 0.0F;
-		var4.thisPlayer = this;
-		this.username = var3;
-		this.theItemInWorldManager = var4;
+		itemInWorldManager.thisPlayer = this;
+		this.username = username;
+		this.theItemInWorldManager = itemInWorldManager;
 		this.yOffset = 0.0F;
 	}
 
 	public void onUpdate() {
 	}
 
-	public void onDeath(Entity var1) {
+	public void onDeath(Entity entity) {
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		return false;
 	}
 
-	public void heal(int var1) {
+	public void heal(int health) {
 	}
 
 	public void onUpdateEntity() {
 		super.onUpdate();
-		ChunkCoordIntPair var1 = null;
-		double var2 = 0.0D;
+		ChunkCoordIntPair chunkCoordIntPair1 = null;
+		double d2 = 0.0D;
 
-		for(int var4 = 0; var4 < this.loadedChunks.size(); ++var4) {
-			ChunkCoordIntPair var5 = (ChunkCoordIntPair)this.loadedChunks.get(var4);
-			double var6 = var5.a(this);
-			if(var4 == 0 || var6 < var2) {
-				var1 = var5;
-				var2 = var5.a(this);
+		for(int i4 = 0; i4 < this.loadedChunks.size(); ++i4) {
+			ChunkCoordIntPair chunkCoordIntPair5 = (ChunkCoordIntPair)this.loadedChunks.get(i4);
+			double d6 = chunkCoordIntPair5.a(this);
+			if(i4 == 0 || d6 < d2) {
+				chunkCoordIntPair1 = chunkCoordIntPair5;
+				d2 = chunkCoordIntPair5.a(this);
 			}
 		}
 
-		if(var1 != null) {
-			boolean var8 = false;
-			if(var2 < 1024.0D) {
-				var8 = true;
+		if(chunkCoordIntPair1 != null) {
+			boolean z8 = false;
+			if(d2 < 1024.0D) {
+				z8 = true;
 			}
 
 			if(this.playerNetServerHandler.getNumChunkDataPackets() < 2) {
-				var8 = true;
+				z8 = true;
 			}
 
-			if(var8) {
-				this.loadedChunks.remove(var1);
-				this.playerNetServerHandler.sendPacket(new Packet51MapChunk(var1.chunkXPos * 16, 0, var1.chunkZPos * 16, 16, 128, 16, this.mcServer.worldMngr));
-				List var9 = this.mcServer.worldMngr.getTileEntityList(var1.chunkXPos * 16, 0, var1.chunkZPos * 16, var1.chunkXPos * 16 + 16, 128, var1.chunkZPos * 16 + 16);
+			if(z8) {
+				this.loadedChunks.remove(chunkCoordIntPair1);
+				this.playerNetServerHandler.sendPacket(new Packet51MapChunk(chunkCoordIntPair1.chunkXPos * 16, 0, chunkCoordIntPair1.chunkZPos * 16, 16, 128, 16, this.mcServer.worldMngr));
+				List list9 = this.mcServer.worldMngr.getTileEntityList(chunkCoordIntPair1.chunkXPos * 16, 0, chunkCoordIntPair1.chunkZPos * 16, chunkCoordIntPair1.chunkXPos * 16 + 16, 128, chunkCoordIntPair1.chunkZPos * 16 + 16);
 
-				for(int var10 = 0; var10 < var9.size(); ++var10) {
-					TileEntity var7 = (TileEntity)var9.get(var10);
-					this.playerNetServerHandler.sendPacket(new Packet59ComplexEntity(var7.xCoord, var7.yCoord, var7.zCoord, var7));
+				for(int i10 = 0; i10 < list9.size(); ++i10) {
+					TileEntity tileEntity7 = (TileEntity)list9.get(i10);
+					this.playerNetServerHandler.sendPacket(new Packet59ComplexEntity(tileEntity7.xCoord, tileEntity7.yCoord, tileEntity7.zCoord, tileEntity7));
 				}
 			}
 		}
@@ -84,16 +87,24 @@
 	public void onLivingUpdate() {
 		this.motionX = this.motionY = this.motionZ = 0.0D;
 		this.isJumping = false;
+		int i1 = (int)(this.posX / 32.0D);
+		int i2 = (int)(this.posZ / 32.0D);
+		if(i1 != this.field_7078_1hgWeBQo5G6STRoutdwd6m70aFtJ52m5A4Kf6AfEWO19206Vpw1dVnBRhqD4 && i2 != this.field_7083_6s735fD2b34PeZPi5AAv974z952bpSx5KCn5t16UJg9m41kjh8w9tB0bDHg2) {
+			this.field_7078_1hgWeBQo5G6STRoutdwd6m70aFtJ52m5A4Kf6AfEWO19206Vpw1dVnBRhqD4 = i1;
+			this.field_7083_6s735fD2b34PeZPi5AAv974z952bpSx5KCn5t16UJg9m41kjh8w9tB0bDHg2 = i2;
+			ExtEvents.func_8350_83tzYQsl532f174MjmlcPkjk23gJ8zYoq3iHGz9L24S833eMHe6T0ERI9mhI(this, this.worldObj);
+		}
+
 		super.onLivingUpdate();
 	}
 
-	public void onItemPickup(Entity var1, int var2) {
-		if(!var1.isDead && var1 instanceof EntityItem) {
-			this.playerNetServerHandler.sendPacket(new Packet17AddToInventory(((EntityItem)var1).item, var2));
-			this.mcServer.entityTracker.sendPacketToTrackedPlayers(var1, new Packet22Collect(var1.entityID, this.entityID));
+	public void onItemPickup(Entity entity, int integer) {
+		if(!entity.isDead && entity instanceof EntityItem) {
+			this.playerNetServerHandler.sendPacket(new Packet17AddToInventory(((EntityItem)entity).item, integer));
+			this.mcServer.entityTracker.sendPacketToTrackedPlayers(entity, new Packet22Collect(entity.entityID, this.entityID));
 		}
 
-		super.onItemPickup(var1, var2);
+		super.onItemPickup(entity, integer);
 	}
 
 	public void swingItem() {
--- /dev/null
+++ net/minecraft/src/BlockGlowingFlowerInfused.java
@@ -1,0 +1,18 @@
+package net.minecraft.src;
+
+public class BlockGlowingFlowerInfused extends BlockGlowing {
+	public int power = 0;
+
+	public BlockGlowingFlowerInfused(int integer1, int integer2, int integer3, int integer4) {
+		super(integer1, integer2, integer3);
+		this.power = integer4;
+	}
+
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
+		if(entity instanceof EntityMob) {
+			((EntityMob)entity).attackEntityFrom((Entity)null, 2 * this.power);
+			((EntityMob)entity).fire = 300;
+		}
+
+	}
+}
--- net/minecraft/src/Packet20NamedEntitySpawn.java
+++ net/minecraft/src/Packet20NamedEntitySpawn.java
@@ -17,42 +17,42 @@
 	public Packet20NamedEntitySpawn() {
 	}
 
-	public Packet20NamedEntitySpawn(EntityPlayer var1) {
-		this.entityId = var1.entityID;
-		this.name = var1.username;
-		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-		this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.rotation = (byte)((int)(var1.rotationYaw * 256.0F / 360.0F));
-		this.pitch = (byte)((int)(var1.rotationPitch * 256.0F / 360.0F));
-		ItemStack var2 = var1.inventory.getCurrentItem();
-		this.currentItem = var2 == null ? 0 : var2.itemID;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.name = var1.readUTF();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.rotation = var1.readByte();
-		this.pitch = var1.readByte();
-		this.currentItem = var1.readShort();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeUTF(this.name);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.writeByte(this.rotation);
-		var1.writeByte(this.pitch);
-		var1.writeShort(this.currentItem);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleNamedEntitySpawn(this);
+	public Packet20NamedEntitySpawn(EntityPlayer entityPlayer) {
+		this.entityId = entityPlayer.entityID;
+		this.name = entityPlayer.username;
+		this.xPosition = MathHelper.floor_double(entityPlayer.posX * 32.0D);
+		this.yPosition = MathHelper.floor_double(entityPlayer.posY * 32.0D);
+		this.zPosition = MathHelper.floor_double(entityPlayer.posZ * 32.0D);
+		this.rotation = (byte)((int)(entityPlayer.rotationYaw * 256.0F / 360.0F));
+		this.pitch = (byte)((int)(entityPlayer.rotationPitch * 256.0F / 360.0F));
+		ItemStack itemStack2 = entityPlayer.inventory.getCurrentItem();
+		this.currentItem = itemStack2 == null ? 0 : itemStack2.itemID;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.name = dataInputStream.readUTF();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.rotation = dataInputStream.readByte();
+		this.pitch = dataInputStream.readByte();
+		this.currentItem = dataInputStream.readShort() & 65535;
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeUTF(this.name);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.writeByte(this.rotation);
+		dataOutputStream.writeByte(this.pitch);
+		dataOutputStream.writeShort(this.currentItem);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleNamedEntitySpawn(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/BlockWireframeBlock2.java
@@ -1,0 +1,31 @@
+package net.minecraft.src;
+
+public class BlockWireframeBlock2 extends BlockGlass {
+	public BlockWireframeBlock2(int id, int blockIndex, Material material) {
+		super(id, blockIndex, material, false);
+	}
+
+	public void func_6405_9ubTk14iK27m62oyaaN71QatF0bX6S9T629rp66Rl2Vu5R65Zq35SRbz3shn(ZMWorld mm, XYZv bc) {
+		mm.setBlock((int)bc.x, (int)bc.y, (int)bc.z, 0);
+
+		int i3;
+		for(i3 = -1; i3 <= 1; i3 += 2) {
+			if(mm.getBlockId((int)bc.x + i3, (int)bc.y, (int)bc.z) == this.blockID) {
+				this.func_6405_9ubTk14iK27m62oyaaN71QatF0bX6S9T629rp66Rl2Vu5R65Zq35SRbz3shn(mm, bc.add((long)i3, 0L, 0L));
+			}
+		}
+
+		for(i3 = -1; i3 <= 1; i3 += 2) {
+			if(mm.getBlockId((int)bc.x, (int)bc.y + i3, (int)bc.z) == this.blockID) {
+				this.func_6405_9ubTk14iK27m62oyaaN71QatF0bX6S9T629rp66Rl2Vu5R65Zq35SRbz3shn(mm, bc.add(0L, (long)i3, 0L));
+			}
+		}
+
+		for(i3 = -1; i3 <= 1; i3 += 2) {
+			if(mm.getBlockId((int)bc.x, (int)bc.y, (int)bc.z + i3) == this.blockID) {
+				this.func_6405_9ubTk14iK27m62oyaaN71QatF0bX6S9T629rp66Rl2Vu5R65Zq35SRbz3shn(mm, bc.add(0L, 0L, (long)i3));
+			}
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/InventoryVendingMachine.java
@@ -1,0 +1,56 @@
+package net.minecraft.src;
+
+public class InventoryVendingMachine extends InventoryPlayer {
+	public int field_7188_544825d825t50Pr477H9XVFd6K0EihdexhU78XCejUV3QBm3Ru1aYI9FvV3B = 200;
+	private long field_7184_0rm63c05461e1r3n4iwC2bVJ4Fq18akJl7JH6dx5K1134ph19GJf5k03Cr5D = 0L;
+	public long field_7187_82ie0c3aFvec6pB25SsN0w80qmL48xPP5BXed7wiTJUj1J6Vni5zY6bdPjbk = 0L;
+	public boolean field_7186_6dKim7DIe0199bV7eIBiM528HzdxgJ8RO9e8d0OSIEyUi7O49D03PLRNn968 = false;
+	public boolean field_7185_5e9fGK5hRUV23F873JrrjPs8hLo6bO4I17ygn0N35ArRl50HYVf97yu7U85a = false;
+	public boolean field_7190_1A0mdnHPkjLrWmQn2CTFTrUs2AwJZzy51Un76M9XHY9y5pQLqdEw58t6qYCG = false;
+	public boolean field_7189_3l19vFKKfCt0plfGJy7cET2fNI7809e7OS6Sq2psZXn921JK3q012iPZitZq = false;
+
+	public InventoryVendingMachine(EntityPlayer entityPlayer) {
+		super(entityPlayer);
+	}
+
+	public boolean addItemStackToInventory(ItemStack stack) {
+		if(stack.itemID == ExtItems.essence.shiftedIndex) {
+			this.field_7188_544825d825t50Pr477H9XVFd6K0EihdexhU78XCejUV3QBm3Ru1aYI9FvV3B += stack.stackSize;
+			return true;
+		} else {
+			return super.addItemStackToInventory(stack);
+		}
+	}
+
+	public long func_7183_73y47OePs4mf7Oi07SlTf8y6sgKW5923KLGE89n0i03q2FF9U96dpS6cO252() {
+		return this.field_7184_0rm63c05461e1r3n4iwC2bVJ4Fq18akJl7JH6dx5K1134ph19GJf5k03Cr5D;
+	}
+
+	public boolean func_7182_063T20276dPvM949XmZBPXnhyZYmn7Zgj73z8bhdbUtn6nFA4zcsEw9H0448(long long1) {
+		if(long1 < 0L) {
+			if(this.field_7184_0rm63c05461e1r3n4iwC2bVJ4Fq18akJl7JH6dx5K1134ph19GJf5k03Cr5D < long1 * -1L) {
+				return false;
+			}
+		} else {
+			this.field_7187_82ie0c3aFvec6pB25SsN0w80qmL48xPP5BXed7wiTJUj1J6Vni5zY6bdPjbk += long1;
+		}
+
+		this.field_7184_0rm63c05461e1r3n4iwC2bVJ4Fq18akJl7JH6dx5K1134ph19GJf5k03Cr5D += long1;
+		return true;
+	}
+
+	public boolean func_7181_3J4Jssti8VN7HZ2io1oqJ8Ko7OR2ovI10Q1e65pJK69r1Acim6I9Y35D503R(EnumVendingMachine _8wicn57kQ4ywDKyK8c9S2y0kKX2dyo0mHLrPj69yx1nuF8su914h4j0O1XDx0GkyfkK3HkPb4dL64t9X277ogn72EkH5s9V2p5) {
+		switch(EnumVendingMachineUnknownClass.field_7686_0L7OUMe0cBTxO9eQEB22KfMZ2nRWzMx4Dh94mb77xkFU3T3299p1qk5HmAFl[_8wicn57kQ4ywDKyK8c9S2y0kKX2dyo0mHLrPj69yx1nuF8su914h4j0O1XDx0GkyfkK3HkPb4dL64t9X277ogn72EkH5s9V2p5.ordinal()]) {
+		case 1:
+			return this.field_7185_5e9fGK5hRUV23F873JrrjPs8hLo6bO4I17ygn0N35ArRl50HYVf97yu7U85a;
+		case 2:
+			return this.field_7190_1A0mdnHPkjLrWmQn2CTFTrUs2AwJZzy51Un76M9XHY9y5pQLqdEw58t6qYCG;
+		case 3:
+			return this.field_7186_6dKim7DIe0199bV7eIBiM528HzdxgJ8RO9e8d0OSIEyUi7O49D03PLRNn968;
+		case 4:
+			return this.field_7189_3l19vFKKfCt0plfGJy7cET2fNI7809e7OS6Sq2psZXn921JK3q012iPZitZq;
+		default:
+			return false;
+		}
+	}
+}
--- net/minecraft/src/EntityZombie.java
+++ net/minecraft/src/EntityZombie.java
@@ -1,17 +1,16 @@
 package net.minecraft.src;
 
 public class EntityZombie extends EntityMob {
-	public EntityZombie(World var1) {
-		super(var1);
-		this.texture = "/mob/zombie.png";
+	public EntityZombie(World world) {
+		super(world);
 		this.moveSpeed = 0.5F;
 		this.attackStrength = 5;
 	}
 
 	public void onLivingUpdate() {
 		if(this.worldObj.isDaytime()) {
-			float var1 = this.getBrightness(1.0F);
-			if(var1 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) && this.rand.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F) {
+			float f1 = this.getBrightness(1.0F);
+			if(f1 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) && this.rand.nextFloat() * 30.0F < (f1 - 0.4F) * 2.0F) {
 				this.fire = 300;
 			}
 		}
--- net/minecraft/src/Item.java
+++ net/minecraft/src/Item.java
@@ -3,129 +3,159 @@
 import java.util.Random;
 
 public class Item {
+	public static final int ITEM_LIST_SIZE = 32767;
 	protected static Random rand = new Random();
-	public static Item[] itemsList = new Item[32000];
-	public static Item shovel = (new ItemSpade(0, 2)).setIconIndex(82);
-	public static Item pickaxeSteel = (new ItemPickaxe(1, 2)).setIconIndex(98);
-	public static Item axeSteel = (new ItemAxe(2, 2)).setIconIndex(114);
-	public static Item striker = (new ItemFlintAndSteel(3)).setIconIndex(5);
-	public static Item appleRed = (new ItemFood(4, 4)).setIconIndex(10);
-	public static Item bow = (new ItemBow(5)).setIconIndex(21);
-	public static Item arrow = (new Item(6)).setIconIndex(37);
-	public static Item coal = (new Item(7)).setIconIndex(7);
-	public static Item diamond = (new Item(8)).setIconIndex(55);
-	public static Item ingotIron = (new Item(9)).setIconIndex(23);
-	public static Item ingotGold = (new Item(10)).setIconIndex(39);
-	public static Item swordSteel = (new ItemSword(11, 2)).setIconIndex(66);
-	public static Item swordWood = (new ItemSword(12, 0)).setIconIndex(64);
-	public static Item shovelWood = (new ItemSpade(13, 0)).setIconIndex(80);
-	public static Item pickaxeWood = (new ItemPickaxe(14, 0)).setIconIndex(96);
-	public static Item axeWood = (new ItemAxe(15, 0)).setIconIndex(112);
-	public static Item swordStone = (new ItemSword(16, 1)).setIconIndex(65);
-	public static Item shovelStone = (new ItemSpade(17, 1)).setIconIndex(81);
-	public static Item pickaxeStone = (new ItemPickaxe(18, 1)).setIconIndex(97);
-	public static Item axeStone = (new ItemAxe(19, 1)).setIconIndex(113);
-	public static Item swordDiamond = (new ItemSword(20, 3)).setIconIndex(67);
-	public static Item shovelDiamond = (new ItemSpade(21, 3)).setIconIndex(83);
-	public static Item pickaxeDiamond = (new ItemPickaxe(22, 3)).setIconIndex(99);
-	public static Item axeDiamond = (new ItemAxe(23, 3)).setIconIndex(115);
-	public static Item stick = (new Item(24)).setIconIndex(53).setFull3D();
-	public static Item bowlEmpty = (new Item(25)).setIconIndex(71);
-	public static Item bowlSoup = (new ItemSoup(26, 10)).setIconIndex(72);
-	public static Item swordGold = (new ItemSword(27, 0)).setIconIndex(68);
-	public static Item shovelGold = (new ItemSpade(28, 0)).setIconIndex(84);
-	public static Item pickaxeGold = (new ItemPickaxe(29, 0)).setIconIndex(100);
-	public static Item axeGold = (new ItemAxe(30, 0)).setIconIndex(116);
-	public static Item silk = (new Item(31)).setIconIndex(8);
-	public static Item feather = (new Item(32)).setIconIndex(24);
-	public static Item gunpowder = (new Item(33)).setIconIndex(40);
-	public static Item hoeWood = (new ItemHoe(34, 0)).setIconIndex(128);
-	public static Item hoeStone = (new ItemHoe(35, 1)).setIconIndex(129);
-	public static Item hoeSteel = (new ItemHoe(36, 2)).setIconIndex(130);
-	public static Item hoeDiamond = (new ItemHoe(37, 3)).setIconIndex(131);
-	public static Item hoeGold = (new ItemHoe(38, 1)).setIconIndex(132);
-	public static Item seeds = (new ItemSeeds(39, Block.crops.blockID)).setIconIndex(9);
-	public static Item wheat = (new Item(40)).setIconIndex(25);
-	public static Item bread = (new ItemFood(41, 5)).setIconIndex(41);
-	public static Item helmetLeather = (new ItemArmor(42, 0, 0, 0)).setIconIndex(0);
-	public static Item plateLeather = (new ItemArmor(43, 0, 0, 1)).setIconIndex(16);
-	public static Item legsLeather = (new ItemArmor(44, 0, 0, 2)).setIconIndex(32);
-	public static Item bootsLeather = (new ItemArmor(45, 0, 0, 3)).setIconIndex(48);
-	public static Item helmetChain = (new ItemArmor(46, 1, 1, 0)).setIconIndex(1);
-	public static Item plateChain = (new ItemArmor(47, 1, 1, 1)).setIconIndex(17);
-	public static Item legsChain = (new ItemArmor(48, 1, 1, 2)).setIconIndex(33);
-	public static Item bootsChain = (new ItemArmor(49, 1, 1, 3)).setIconIndex(49);
-	public static Item helmetSteel = (new ItemArmor(50, 2, 2, 0)).setIconIndex(2);
-	public static Item plateSteel = (new ItemArmor(51, 2, 2, 1)).setIconIndex(18);
-	public static Item legsSteel = (new ItemArmor(52, 2, 2, 2)).setIconIndex(34);
-	public static Item bootsSteel = (new ItemArmor(53, 2, 2, 3)).setIconIndex(50);
-	public static Item helmetDiamond = (new ItemArmor(54, 3, 3, 0)).setIconIndex(3);
-	public static Item plateDiamond = (new ItemArmor(55, 3, 3, 1)).setIconIndex(19);
-	public static Item legsDiamond = (new ItemArmor(56, 3, 3, 2)).setIconIndex(35);
-	public static Item bootsDiamond = (new ItemArmor(57, 3, 3, 3)).setIconIndex(51);
-	public static Item helmetGold = (new ItemArmor(58, 1, 4, 0)).setIconIndex(4);
-	public static Item plateGold = (new ItemArmor(59, 1, 4, 1)).setIconIndex(20);
-	public static Item legsGold = (new ItemArmor(60, 1, 4, 2)).setIconIndex(36);
-	public static Item bootsGold = (new ItemArmor(61, 1, 4, 3)).setIconIndex(52);
-	public static Item flint = (new Item(62)).setIconIndex(6);
-	public static Item porkRaw = (new ItemFood(63, 3)).setIconIndex(87);
-	public static Item porkCooked = (new ItemFood(64, 8)).setIconIndex(88);
-	public static Item painting = (new ItemPainting(65)).setIconIndex(26);
-	public static Item appleGold = (new ItemFood(66, 42)).setIconIndex(11);
-	public static Item sign = (new ItemSign(67)).setIconIndex(42);
-	public static Item doorWood = (new ItemDoor(68, Material.wood)).setIconIndex(43);
-	public static Item bucketEmpty = (new ItemBucket(69, 0)).setIconIndex(74);
-	public static Item bucketWater = (new ItemBucket(70, Block.waterMoving.blockID)).setIconIndex(75);
-	public static Item bucketLava = (new ItemBucket(71, Block.lavaMoving.blockID)).setIconIndex(76);
-	public static Item minecartEmpty = (new ItemMinecart(72, 0)).setIconIndex(135);
-	public static Item saddle = (new ItemSaddle(73)).setIconIndex(104);
-	public static Item doorSteel = (new ItemDoor(74, Material.iron)).setIconIndex(44);
-	public static Item redstone = (new ItemRedstone(75)).setIconIndex(56);
-	public static Item snowball = (new ItemSnowball(76)).setIconIndex(14);
-	public static Item boat = (new ItemBoat(77)).setIconIndex(136);
-	public static Item leather = (new Item(78)).setIconIndex(103);
-	public static Item bucketMilk = (new ItemBucket(79, -1)).setIconIndex(77);
-	public static Item brick = (new Item(80)).setIconIndex(22);
-	public static Item clay = (new Item(81)).setIconIndex(57);
-	public static Item reed = (new ItemReed(82, Block.reed)).setIconIndex(27);
-	public static Item paper = (new Item(83)).setIconIndex(58);
-	public static Item book = (new Item(84)).setIconIndex(59);
-	public static Item slimeBall = (new Item(85)).setIconIndex(30);
-	public static Item minecartBox = (new ItemMinecart(86, 1)).setIconIndex(151);
-	public static Item minecartEngine = (new ItemMinecart(87, 2)).setIconIndex(167);
-	public static Item egg = (new Item(88)).setIconIndex(12);
-	public static Item compass = (new Item(89)).setIconIndex(54);
-	public static Item fishingRod = (new Item(90)).setIconIndex(69);
-	public static Item record13 = (new ItemRecord(2000, "13")).setIconIndex(240);
-	public static Item recordCat = (new ItemRecord(2001, "cat")).setIconIndex(241);
+	public static Item[] itemsList = new Item[65534];
+	public static Item shovel = (new ItemSpade(0, 2)).setIconIndex(82).setName("Iron Shovel").setEssValue(16);
+	public static Item pickaxeSteel = (new ItemPickaxe(1, 2)).setIconIndex(98).setName("Iron Pickaxe").setEssValue(16);
+	public static Item axeSteel = (new ItemAxe(2, 2)).setIconIndex(114).setName("Iron Axe").setEssValue(16);
+	public static Item striker = (new ItemFlintAndSteel(3)).setIconIndex(5).setEssValue(32).setName("Flint and Steel").setEssValue(8);
+	public static Item appleRed = (new ItemFood(4, 4)).setIconIndex(10).setName("Apple").setEssValue(2);
+	public static Item bow = (new ItemBow(5)).setIconIndex(21).setName("Bow").setEssValue(8);
+	public static Item arrow = (new Item(6)).setIconIndex(37).setName("Arrow").setEssValue(2);
+	public static Item coal = (new Item(7)).setIconIndex(7).setEssValue(8).setName("Coal").setEssValue(2);
+	public static Item diamond = (new Item(8)).setIconIndex(55).setEssValue(56).setName("Diamond").setEssValue(32);
+	public static Item ingotIron = (new Item(9)).setIconIndex(23).setEssValue(20).setName("Iron Ingot").setEssValue(16);
+	public static Item ingotGold = (new Item(10)).setIconIndex(39).setEssValue(48).setName("Gold Ingot").setEssValue(32);
+	public static Item swordSteel = (new ItemSword(11, 2)).setIconIndex(66).setName("Iron Sword").setEssValue(16);
+	public static Item swordWood = (new ItemSword(12, 0)).setIconIndex(64).setName("Wooden Sword").setEssValue(8);
+	public static Item shovelWood = (new ItemSpade(13, 0)).setIconIndex(80).setName("Wooden Shovel").setEssValue(8);
+	public static Item pickaxeWood = (new ItemPickaxe(14, 0)).setIconIndex(96).setName("Wooden Pickaxe").setEssValue(8);
+	public static Item axeWood = (new ItemAxe(15, 0)).setIconIndex(112).setName("Wooden Axe").setEssValue(8);
+	public static Item swordStone = (new ItemSword(16, 1)).setIconIndex(65).setName("Stone Sword").setEssValue(10);
+	public static Item shovelStone = (new ItemSpade(17, 1)).setIconIndex(81).setName("Stone Shovel").setEssValue(10);
+	public static Item pickaxeStone = (new ItemPickaxe(18, 1)).setIconIndex(97).setName("Stone Pickaxe").setEssValue(10);
+	public static Item axeStone = (new ItemAxe(19, 1)).setIconIndex(113).setName("Stone Axe").setEssValue(10);
+	public static Item swordDiamond = (new ItemSword(20, 3)).setIconIndex(67).setName("Diamond Sword").setEssValue(32);
+	public static Item shovelDiamond = (new ItemSpade(21, 3)).setIconIndex(83).setName("Diamond Shovel").setEssValue(32);
+	public static Item pickaxeDiamond = (new ItemPickaxe(22, 3)).setIconIndex(99).setName("Diamond Pickaxe").setEssValue(32);
+	public static Item axeDiamond = (new ItemAxe(23, 3)).setIconIndex(115).setName("Diamond Axe").setEssValue(32);
+	public static Item stick = (new Item(24)).setIconIndex(53).setFull3D().setName("Stick").setEssValue(2);
+	public static Item bowlEmpty = (new Item(25)).setIconIndex(71).setName("Bowl").setEssValue(2);
+	public static Item bowlSoup = (new ItemSoup(26, 10)).setIconIndex(72).setName("Soup").setEssValue(12);
+	public static Item swordGold = (new ItemSword(27, 0)).setIconIndex(68).setName("Golden Sword").setEssValue(24);
+	public static Item shovelGold = (new ItemSpade(28, 0)).setIconIndex(84).setName("Golden Shovel").setEssValue(24);
+	public static Item pickaxeGold = (new ItemPickaxe(29, 0)).setIconIndex(100).setName("Golden Pickaxe").setEssValue(24);
+	public static Item axeGold = (new ItemAxe(30, 0)).setIconIndex(116).setName("Golden Axe").setEssValue(24);
+	public static Item silk = (new Item(31)).setIconIndex(8).setName("Silk").setEssValue(12);
+	public static Item feather = (new Item(32)).setIconIndex(24).setName("Feather").setEssValue(4);
+	public static Item gunpowder = (new Item(33)).setIconIndex(40).setName("Gunpowder").setEssValue(4);
+	public static Item hoeWood = (new ItemHoe(34, 0)).setIconIndex(128).setName("Wooden Hoe").setEssValue(4);
+	public static Item hoeStone = (new ItemHoe(35, 1)).setIconIndex(129).setName("Stone Hoe").setEssValue(8);
+	public static Item hoeSteel = (new ItemHoe(36, 2)).setIconIndex(130).setName("Steel Hoe").setEssValue(12);
+	public static Item hoeDiamond = (new ItemHoe(37, 3)).setIconIndex(131).setName("Diamond Hoe").setEssValue(16);
+	public static Item hoeGold = (new ItemHoe(38, 1)).setIconIndex(132).setName("Golden Hoe").setEssValue(8);
+	public static Item seeds = (new ItemSeeds(39, Block.crops.blockID)).setIconIndex(9).setName("Seeds").setEssValue(1);
+	public static Item wheat = (new Item(40)).setIconIndex(25).setName("Wheat").setEssValue(4);
+	public static Item bread = (new ItemFood(41, 5)).setIconIndex(41).setName("Bread").setEssValue(8);
+	public static Item helmetLeather = (new ItemArmor(42, 0, 0, 0)).setIconIndex(0).setName("Leather Helm").setEssValue(4);
+	public static Item plateLeather = (new ItemArmor(43, 0, 0, 1)).setIconIndex(16).setName("Leather Jacket").setEssValue(4);
+	public static Item legsLeather = (new ItemArmor(44, 0, 0, 2)).setIconIndex(32).setName("Leather Pants").setEssValue(4);
+	public static Item bootsLeather = (new ItemArmor(45, 0, 0, 3)).setIconIndex(48).setName("Leather Boots").setEssValue(4);
+	public static Item helmetChain = (new ItemArmor(46, 1, 1, 0)).setIconIndex(1).setName("Ragged Helm").setEssValue(8);
+	public static Item plateChain = (new ItemArmor(47, 1, 1, 1)).setIconIndex(17).setName("Ragged Suit").setEssValue(8);
+	public static Item legsChain = (new ItemArmor(48, 1, 1, 2)).setIconIndex(33).setName("Ragged Leggings").setEssValue(8);
+	public static Item bootsChain = (new ItemArmor(49, 1, 1, 3)).setIconIndex(49).setName("Ragged Boots").setEssValue(8);
+	public static Item helmetSteel = (new ItemArmor(50, 2, 2, 0)).setIconIndex(2).setName("Iron Helm").setEssValue(16);
+	public static Item plateSteel = (new ItemArmor(51, 2, 2, 1)).setIconIndex(18).setName("Iron Chestplate").setEssValue(16);
+	public static Item legsSteel = (new ItemArmor(52, 2, 2, 2)).setIconIndex(34).setName("Iron Leggings").setEssValue(16);
+	public static Item bootsSteel = (new ItemArmor(53, 2, 2, 3)).setIconIndex(50).setName("Iron Boots").setEssValue(16);
+	public static Item helmetDiamond = (new ItemArmor(54, 3, 3, 0)).setIconIndex(3).setName("Diamond Helm").setEssValue(32);
+	public static Item plateDiamond = (new ItemArmor(55, 3, 3, 1)).setIconIndex(19).setName("Diamond Chestplate").setEssValue(32);
+	public static Item legsDiamond = (new ItemArmor(56, 3, 3, 2)).setIconIndex(35).setName("Diamond Leggings").setEssValue(32);
+	public static Item bootsDiamond = (new ItemArmor(57, 3, 3, 3)).setIconIndex(51).setName("Diamond Boots").setEssValue(32);
+	public static Item helmetGold = (new ItemArmor(58, 1, 4, 0)).setIconIndex(4).setName("Golden Helm").setEssValue(32);
+	public static Item plateGold = (new ItemArmor(59, 1, 4, 1)).setIconIndex(20).setName("Golden Chestplate").setEssValue(16);
+	public static Item legsGold = (new ItemArmor(60, 1, 4, 2)).setIconIndex(36).setName("Golden Leggings").setEssValue(16);
+	public static Item bootsGold = (new ItemArmor(61, 1, 4, 3)).setIconIndex(52).setName("Golden Boots").setEssValue(16);
+	public static Item flint = (new Item(62)).setIconIndex(6).setEssValue(12).setName("Flint");
+	public static Item porkRaw = (new ItemFood(63, 3)).setIconIndex(87).setEssValue(8).setName("Raw Pork");
+	public static Item porkCooked = (new ItemFood(64, 8)).setIconIndex(88).setEssValue(16).setName("Cooked Pork");
+	public static Item painting = (new ItemPainting(65)).setIconIndex(26).setName("Painting").setEssValue(4);
+	public static Item appleGold = (new ItemFood(66, 42)).setIconIndex(11).setEssValue(90).setName("Golden Apple");
+	public static Item sign = (new ItemSign(67)).setIconIndex(42).setName("Sign").setEssValue(1);
+	public static Item doorWood = (new ItemDoor(68, Material.wood)).setIconIndex(43).setName("Wooden Door").setEssValue(4);
+	public static Item bucketEmpty = (new ItemBucket(69, 0)).setIconIndex(74).setName("Bucket").setEssValue(16);
+	public static Item bucketWater = (new ItemBucket(70, Block.waterMoving.blockID)).setIconIndex(75).setName("Water Bucket").setEssValue(16);
+	public static Item bucketLava = (new ItemBucket(71, Block.lavaMoving.blockID)).setIconIndex(76).setName("Lava Bucket").setEssValue(16);
+	public static Item minecartEmpty = (new ItemMinecart(72, 0)).setIconIndex(135).setName("Minecart").setEssValue(32);
+	public static Item saddle = (new ItemSaddle(73)).setIconIndex(104).setName("Saddle").setEssValue(16);
+	public static Item doorSteel = (new ItemDoor(74, Material.iron)).setIconIndex(44).setName("Steel door").setEssValue(16);
+	public static Item redstone = (new ItemRedstone(75)).setIconIndex(56).setEssValue(8).setName("Greenstone").setEssValue(3);
+	public static Item snowball = (new ItemSnowball(76)).setIconIndex(14).setName("Snowball").setEssValue(1);
+	public static Item boat = (new ItemBoat(77)).setIconIndex(136).setName("Boat").setEssValue(8);
+	public static Item leather = (new Item(78)).setIconIndex(103).setName("Leather").setEssValue(2);
+	public static Item bucketMilk = (new ItemBucket(79, -1)).setIconIndex(77).setName("Milk Bucket").setEssValue(8);
+	public static Item brick = (new Item(80)).setIconIndex(22).setName("Brick").setEssValue(4);
+	public static Item clay = (new Item(81)).setIconIndex(57).setName("Clay").setEssValue(4);
+	public static Item reed = (new ItemReed(82, Block.reed)).setIconIndex(27).setName("Reed").setEssValue(4);
+	public static Item paper = (new Item(83)).setIconIndex(58).setName("Paper").setEssValue(5);
+	public static Item book = (new Item(84)).setIconIndex(59).setName("Book").setEssValue(16);
+	public static Item slimeBall = (new Item(85)).setIconIndex(30).setEssValue(10).setName("Sludge");
+	public static Item minecartBox = (new ItemMinecart(86, 1)).setIconIndex(151).setName("Minecart with a Chest").setEssValue(16);
+	public static Item minecartEngine = (new ItemMinecart(87, 2)).setIconIndex(167).setName("Minecart with a Furnace").setEssValue(16);
+	public static Item egg = (new Item(88)).setIconIndex(12).setName("Egg").setEssValue(2);
+	public static Item compass = (new Item(89)).setIconIndex(54).setName("Compass").setEssValue(16);
+	public static Item fishingRod = (new Item(1999)).setIconIndex(70).setName("Fishing Rod").setEssValue(16);
+	public static Item record13 = (new ItemRecord(2000, "lemuria")).setIconIndex(240).setEssValue(128).setName("Record (Lemuria)");
+	public static Item recordCat = (new ItemRecord(2001, "hidden_den")).setIconIndex(241).setEssValue(128).setName("Record (Hidden Den)");
 	public final int shiftedIndex;
 	protected int maxStackSize = 64;
 	protected int maxDamage = 32;
-	protected int iconIndex;
+	public int iconIndex;
 	protected boolean bFull3D = false;
+	public int essenceValue = 1;
+	protected String itemName = "";
 
-	protected Item(int var1) {
-		this.shiftedIndex = 256 + var1;
-		if(itemsList[256 + var1] != null) {
-			System.out.println("CONFLICT @ " + var1);
+	public Item(int itemID) {
+		this.shiftedIndex = 32767 + itemID;
+		if(itemsList[this.shiftedIndex] != null) {
+			throw new RuntimeException("[Item] CONFLICT @ ID " + itemID);
+		} else {
+			itemsList[this.shiftedIndex] = this;
 		}
-
-		itemsList[256 + var1] = this;
-	}
-
-	public Item setIconIndex(int var1) {
-		this.iconIndex = var1;
-		return this;
-	}
-
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
+	}
+
+	public Item setIconIndex(int iconIndex) {
+		this.iconIndex = iconIndex;
+		return this;
+	}
+
+	public Item setMaxStackSize(int integer) {
+		this.maxStackSize = integer;
+		return this;
+	}
+
+	public String itemName() {
+		return this.itemName;
+	}
+
+	public Item setName(String string) {
+		this.itemName = string;
+		return this;
+	}
+
+	public Item setEssValue(int integer) {
+		this.essenceValue = integer;
+		return this;
+	}
+
+	public int getIconIndex(ItemStack mc) {
+		return this.iconIndex;
+	}
+
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
 		return false;
 	}
 
-	public float getStrVsBlock(ItemStack var1, Block var2) {
+	public float getStrVsBlock(ItemStack stack, Block block) {
 		return 1.0F;
 	}
 
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		return itemStack;
+	}
+
 	public int getItemStackLimit() {
 		return this.maxStackSize;
 	}
@@ -134,15 +164,33 @@
 		return this.maxDamage;
 	}
 
-	public void onBlockDestroyed(ItemStack var1, int var2, int var3, int var4, int var5) {
-	}
-
-	public boolean canHarvestBlock(Block var1) {
+	public void hitEntity(ItemStack itemStack, EntityLiving entityLiving) {
+	}
+
+	public void onBlockDestroyed(ItemStack stack, int x, int y, int z, int z1) {
+	}
+
+	public int getDamageVsEntity(Entity entity) {
+		return 1;
+	}
+
+	public boolean canHarvestBlock(Block block) {
 		return false;
+	}
+
+	public void saddleEntity(ItemStack itemStack, EntityLiving entityLiving) {
 	}
 
 	public Item setFull3D() {
 		this.bFull3D = true;
 		return this;
+	}
+
+	public boolean isFull3D() {
+		return this.bFull3D;
+	}
+
+	static {
+		ExtItems.Register();
 	}
 }
--- net/minecraft/src/BlockLeaves.java
+++ net/minecraft/src/BlockLeaves.java
@@ -6,98 +6,99 @@
 	private int leafTexIndex;
 	private int decayCounter = 0;
 
-	protected BlockLeaves(int var1, int var2) {
-		super(var1, var2, Material.leaves, false);
-		this.leafTexIndex = var2;
+	public BlockLeaves(int id, int blockIndex) {
+		super(id, blockIndex, Material.leaves, false);
+		this.leafTexIndex = blockIndex;
 		this.setTickOnLoad(true);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
 		this.decayCounter = 0;
-		this.updateCurrentLeaves(var1, var2, var3, var4);
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
+		this.updateCurrentLeaves(world, x, y, z);
+		super.onNeighborBlockChange(world, x, y, z, flag);
 	}
 
-	public void updateConnectedLeaves(World var1, int var2, int var3, int var4, int var5) {
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 != 0 && var6 == var5 - 1) {
-				this.updateCurrentLeaves(var1, var2, var3, var4);
+	public void updateConnectedLeaves(World world, int x, int y, int z, int metadata) {
+		if(world.getBlockId(x, y, z) == this.blockID) {
+			int i6 = world.getBlockMetadata(x, y, z);
+			if(i6 != 0 && i6 == metadata - 1) {
+				this.updateCurrentLeaves(world, x, y, z);
 			}
 		}
+
 	}
 
-	public void updateCurrentLeaves(World var1, int var2, int var3, int var4) {
+	public void updateCurrentLeaves(World world, int x, int y, int z) {
 		if(this.decayCounter++ < 100) {
-			int var5 = var1.getBlockMaterial(var2, var3 - 1, var4).isSolid() ? 16 : 0;
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 == 0) {
-				var6 = 1;
-				var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-			}
-
-			var5 = this.getConnectionStrength(var1, var2, var3 - 1, var4, var5);
-			var5 = this.getConnectionStrength(var1, var2, var3, var4 - 1, var5);
-			var5 = this.getConnectionStrength(var1, var2, var3, var4 + 1, var5);
-			var5 = this.getConnectionStrength(var1, var2 - 1, var3, var4, var5);
-			var5 = this.getConnectionStrength(var1, var2 + 1, var3, var4, var5);
-			int var7 = var5 - 1;
-			if(var7 < 10) {
-				var7 = 1;
-			}
-
-			if(var7 != var6) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var7);
-				this.updateConnectedLeaves(var1, var2, var3 - 1, var4, var6);
-				this.updateConnectedLeaves(var1, var2, var3 + 1, var4, var6);
-				this.updateConnectedLeaves(var1, var2, var3, var4 - 1, var6);
-				this.updateConnectedLeaves(var1, var2, var3, var4 + 1, var6);
-				this.updateConnectedLeaves(var1, var2 - 1, var3, var4, var6);
-				this.updateConnectedLeaves(var1, var2 + 1, var3, var4, var6);
-			}
-
+			int i5 = world.getBlockMaterial(x, y - 1, z).isSolid() ? 16 : 0;
+			int i6 = world.getBlockMetadata(x, y, z);
+			if(i6 == 0) {
+				i6 = 1;
+				world.setBlockMetadataWithNotify(x, y, z, 1);
+			}
+
+			i5 = this.getConnectionStrength(world, x, y - 1, z, i5);
+			i5 = this.getConnectionStrength(world, x, y, z - 1, i5);
+			i5 = this.getConnectionStrength(world, x, y, z + 1, i5);
+			i5 = this.getConnectionStrength(world, x - 1, y, z, i5);
+			i5 = this.getConnectionStrength(world, x + 1, y, z, i5);
+			int i7 = i5 - 1;
+			if(i7 < 10) {
+				i7 = 1;
+			}
+
+			if(i7 != i6) {
+				world.setBlockMetadataWithNotify(x, y, z, i7);
+				this.updateConnectedLeaves(world, x, y - 1, z, i6);
+				this.updateConnectedLeaves(world, x, y + 1, z, i6);
+				this.updateConnectedLeaves(world, x, y, z - 1, i6);
+				this.updateConnectedLeaves(world, x, y, z + 1, i6);
+				this.updateConnectedLeaves(world, x - 1, y, z, i6);
+				this.updateConnectedLeaves(world, x + 1, y, z, i6);
+			}
 		}
+
 	}
 
-	private int getConnectionStrength(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockId(var2, var3, var4);
-		if(var6 == Block.wood.blockID) {
+	private int getConnectionStrength(World world, int x, int y, int z, int metadata) {
+		int i6 = world.getBlockId(x, y, z);
+		if(i6 == Block.wood.blockID) {
 			return 16;
 		} else {
-			if(var6 == this.blockID) {
-				int var7 = var1.getBlockMetadata(var2, var3, var4);
-				if(var7 != 0 && var7 > var5) {
-					return var7;
+			if(i6 == this.blockID) {
+				int i7 = world.getBlockMetadata(x, y, z);
+				if(i7 != 0 && i7 > metadata) {
+					return i7;
 				}
 			}
 
-			return var5;
+			return metadata;
 		}
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if(var6 == 0) {
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if(i6 == 0) {
 			this.decayCounter = 0;
-			this.updateCurrentLeaves(var1, var2, var3, var4);
-		} else if(var6 == 1) {
-			this.removeLeaves(var1, var2, var3, var4);
-		} else if(var5.nextInt(10) == 0) {
-			this.updateCurrentLeaves(var1, var2, var3, var4);
+			this.updateCurrentLeaves(world, x, y, z);
+		} else if(i6 == 1) {
+			this.removeLeaves(world, x, y, z);
+		} else if(random.nextInt(10) == 0) {
+			this.updateCurrentLeaves(world, x, y, z);
 		}
 
 	}
 
-	private void removeLeaves(World var1, int var2, int var3, int var4) {
-		this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-		var1.setBlockWithNotify(var2, var3, var4, 0);
-	}
-
-	public int quantityDropped(Random var1) {
-		return var1.nextInt(20) == 0 ? 1 : 0;
-	}
-
-	public int idDropped(int var1, Random var2) {
+	private void removeLeaves(World world, int x, int y, int z) {
+		this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+		world.setBlockWithNotify(x, y, z, 0);
+	}
+
+	public int quantityDropped(Random random) {
+		return random.nextInt(20) == 0 ? 1 : 0;
+	}
+
+	public int idDropped(int count, Random random) {
 		return Block.sapling.blockID;
 	}
 
@@ -105,7 +106,7 @@
 		return !this.graphicsLevel;
 	}
 
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-		super.onEntityWalking(var1, var2, var3, var4, var5);
+	public void onEntityWalking(World world, int x, int y, int z, Entity entity) {
+		super.onEntityWalking(world, x, y, z, entity);
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenHouseBig.java
@@ -1,0 +1,522 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenHouseBig implements IHouseBig {
+	private final NoiseGeneratorPerlin field_6586_2Edp3i8D8FiRw515WJnyPUf2A4ye8nU36moYedgQaILBY93Fl9HX7y6mB7rK;
+	private final NoiseGeneratorPerlin field_6587_07xf178moFTvpc760sct6pQQvN19IBZCPOHYS3GQXBnsH17ymh11X3f3ou3l;
+	private final NoiseGeneratorPerlin field_6585_0N687JfBNSLM30Wj6KJUGJl83WgSdY3m0cwIb483WgSP8iU1YlcwZzxAO4KP;
+
+	public WorldGenHouseBig(Random random) {
+		this.field_6586_2Edp3i8D8FiRw515WJnyPUf2A4ye8nU36moYedgQaILBY93Fl9HX7y6mB7rK = new NoiseGeneratorPerlin(random);
+		this.field_6587_07xf178moFTvpc760sct6pQQvN19IBZCPOHYS3GQXBnsH17ymh11X3f3ou3l = new NoiseGeneratorPerlin(random);
+		this.field_6585_0N687JfBNSLM30Wj6KJUGJl83WgSdY3m0cwIb483WgSP8iU1YlcwZzxAO4KP = new NoiseGeneratorPerlin(random);
+	}
+
+	public float func_6572_4MbDiJtu6trpae74IapUd09LfEVt0Aru1bX9SAE845fOF7B0JmYIQrXHuHxC() {
+		return 1.0F;
+	}
+
+	private EnumHouseBig func_6574_2Od2qCR4hZnlmrKyk963MtBGhgW5ljmrj6kju46ChKD9QWX1LFoPuUlKM2hw(int integer1, int integer2, int integer3, int integer4) {
+		int i5 = integer1 * 5436345 + integer2 * -12416265;
+		int i6 = integer3 * 4256285 + integer4 * -82344232;
+		double d7 = this.field_6587_07xf178moFTvpc760sct6pQQvN19IBZCPOHYS3GQXBnsH17ymh11X3f3ou3l.generateNoise((double)i5 / 634.0D, (double)i6 / 634.0D);
+		if(d7 < 0.0D) {
+			d7 = -d7;
+		}
+
+		if(d7 > 1.0D) {
+			d7 %= 1.0D;
+		}
+
+		return d7 < 0.3D ? EnumHouseBig.Door : (d7 < 0.4D ? EnumHouseBig.BlackGlass : (d7 < 0.5D ? EnumHouseBig.WhiteGlass : (d7 < 0.6D ? EnumHouseBig.BlueGlass : (d7 < 0.7D ? EnumHouseBig.LimeGlass : (d7 < 0.8D ? EnumHouseBig.PlateDecor : (d7 < 0.9D ? EnumHouseBig.Doorless : EnumHouseBig.Door))))));
+	}
+
+	private void func_6584_6ckz6Q5VG9lMF8R5uZ5Ugync99rVLtZt350x7HuwzpsbIRDNvvssoH6dpR59() {
+	}
+
+	private EnumHouseBig[] func_6578_4c1kP4QIu1rDQfKd8R11xB0lK0Cc6568A0pB9iA40MsjOC426CT1LC6r9w98(int integer1, int integer2, int integer3) {
+		return new EnumHouseBig[]{this.func_6574_2Od2qCR4hZnlmrKyk963MtBGhgW5ljmrj6kju46ChKD9QWX1LFoPuUlKM2hw(integer1, integer2, integer3, 0), this.func_6574_2Od2qCR4hZnlmrKyk963MtBGhgW5ljmrj6kju46ChKD9QWX1LFoPuUlKM2hw(integer1, integer2, integer3, 1), this.func_6574_2Od2qCR4hZnlmrKyk963MtBGhgW5ljmrj6kju46ChKD9QWX1LFoPuUlKM2hw(integer1, integer2, integer3, 2), this.func_6574_2Od2qCR4hZnlmrKyk963MtBGhgW5ljmrj6kju46ChKD9QWX1LFoPuUlKM2hw(integer1, integer2, integer3, 3)};
+	}
+
+	private boolean func_6579_6digL5LRx8rw3K8MdBVWmVJ8A6XO7Ro2hVI9Qy851P8s0zYZ0YklUeh44KkT(World cv, int integer2, int integer3, int integer4) {
+		int i5 = cv.getBlockId(integer2, integer3, integer4);
+		return i5 != 0 && Block.blocksList[i5].isOpaqueCube() && Block.blocksList[i5].isCollidable() && Block.blocksList[i5].renderAsNormalBlock();
+	}
+
+	private boolean func_6580_3eWm3b6YYuia73Hn3Ze7IERF0X3h699f2Vj5413O6USUICBDAL2Sm4iH2fIy(World cv, int integer2, int integer3, int integer4) {
+		int i5 = 256;
+
+		for(int i6 = 0; i6 < 8; ++i6) {
+			for(int i7 = 0; i7 < 15; ++i7) {
+				for(int i8 = 0; i8 < 15; ++i8) {
+					if(this.func_6579_6digL5LRx8rw3K8MdBVWmVJ8A6XO7Ro2hVI9Qy851P8s0zYZ0YklUeh44KkT(cv, integer2 * 16 + i7, integer3 + i6, integer4 * 16 + i8)) {
+						--i5;
+						if(i5 == 0) {
+							return false;
+						}
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+
+	private void func_6576_2YtPw6tjaA31JUF4j54gQvnlq9JFy7L8f7clA6ZaCpl67E95rl1Jg0p0WkJv(World cv, int integer2, int integer3, int integer4, int integer5) {
+		for(int i6 = integer4; i6 >= 0; --i6) {
+			if(this.func_6579_6digL5LRx8rw3K8MdBVWmVJ8A6XO7Ro2hVI9Qy851P8s0zYZ0YklUeh44KkT(cv, integer3, i6, integer5)) {
+				return;
+			}
+
+			cv.setBlock(integer3, i6, integer5, integer2);
+		}
+
+	}
+
+	private void func_6582_4o7w1S0Dc67RyubRIABdw3434m72h1DD1s6pec17W33gxeZrjNe681wySjhV(World cv, int integer2, int integer3, int integer4, int integer5, int integer6, int integer7, Block io, int integer9, int integer10) {
+		switch(integer9) {
+		case 0:
+			integer2 += 11;
+			++integer3;
+			integer4 += 7;
+			integer2 += integer5;
+			integer3 += integer6;
+			integer4 += integer7;
+			break;
+		case 1:
+			integer2 += 8;
+			++integer3;
+			integer4 += 11;
+			integer2 -= integer7;
+			integer3 += integer6;
+			integer4 += integer5;
+			break;
+		case 2:
+			integer2 += 7;
+			++integer3;
+			integer4 += 4;
+			integer2 += integer7;
+			integer3 += integer6;
+			integer4 -= integer5;
+			break;
+		case 3:
+			integer2 += 4;
+			++integer3;
+			integer4 += 8;
+			integer2 -= integer5;
+			integer3 += integer6;
+			integer4 -= integer7;
+		}
+
+		cv.setBlockAndMetadata(integer2, integer3, integer4, io.blockID, integer9);
+		cv.setBlockAndMetadata(integer2, integer3 + 1, integer4, io.blockID, integer9 + 8 + integer10);
+	}
+
+	private void func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(World cv, int integer2, int integer3, int integer4, int integer5, int integer6, int integer7, Block io, int integer9) {
+		switch(integer9) {
+		case 0:
+			integer2 += 11;
+			++integer3;
+			integer4 += 7;
+			integer2 += integer5;
+			integer3 += integer6;
+			integer4 += integer7;
+			break;
+		case 1:
+			integer2 += 8;
+			++integer3;
+			integer4 += 11;
+			integer2 -= integer7;
+			integer3 += integer6;
+			integer4 += integer5;
+			break;
+		case 2:
+			integer2 += 7;
+			++integer3;
+			integer4 += 4;
+			integer2 += integer7;
+			integer3 += integer6;
+			integer4 -= integer5;
+			break;
+		case 3:
+			integer2 += 4;
+			++integer3;
+			integer4 += 8;
+			integer2 -= integer5;
+			integer3 += integer6;
+			integer4 -= integer7;
+		}
+
+		cv.setBlock(integer2, integer3, integer4, io.blockID);
+	}
+
+	private void func_6575_0Qp0E3iI8RBUEr8RQ25MvHa5HqLU68Z7HgQgTbR7noU44G60d067FTWH19mw(World cv, int integer2, int integer3, int integer4, WorldGenHouseBigInterior gx) {
+		if(!gx.func_8059_72k9S8xaAG0AAT1yVCCF7983U3I901enS3QdO9y1064k627Mh9vbVDkf1W2q(WorldGenHouseBig.class, integer2, integer4)) {
+			;
+		}
+
+		int i6 = integer2 * 16;
+		int i7 = integer4 * 16;
+
+		int i8;
+		int i9;
+		int i10;
+		for(i8 = 7; i8 > 0; --i8) {
+			cv.setBlock(i6 + 2, integer3 + i8, i7 + 2, ExtBlocks.SlatePillar.blockID);
+			cv.setBlock(i6 + 2, integer3 + i8, i7 + 13, ExtBlocks.SlatePillar.blockID);
+			cv.setBlock(i6 + 13, integer3 + i8, i7 + 2, ExtBlocks.SlatePillar.blockID);
+			cv.setBlock(i6 + 13, integer3 + i8, i7 + 13, ExtBlocks.SlatePillar.blockID);
+			if(i8 != 7) {
+				for(i9 = 3; i9 <= 12; ++i9) {
+					i10 = i9 >= 6 && i9 <= 9 ? 1 : 0;
+					if(i10 != 0 || i8 < 5) {
+						cv.setBlock(i6 + i9, integer3 + i8, i7 + 3 + i10, ExtBlocks.SlateBricks.blockID);
+						cv.setBlock(i6 + i9, integer3 + i8, i7 + 12 - i10, ExtBlocks.SlateBricks.blockID);
+					}
+				}
+
+				for(i9 = 4; i9 <= 11; ++i9) {
+					i10 = i9 >= 6 && i9 <= 9 ? 1 : 0;
+					if(i10 != 0 || i8 < 5) {
+						cv.setBlock(i6 + 3 + i10, integer3 + i8, i7 + i9, ExtBlocks.SlateBricks.blockID);
+						cv.setBlock(i6 + 12 - i10, integer3 + i8, i7 + i9, ExtBlocks.SlateBricks.blockID);
+					}
+				}
+			}
+		}
+
+		for(i8 = 2; i8 <= 13; ++i8) {
+			for(i9 = 2; i9 <= 13; ++i9) {
+				cv.setBlock(i6 + i8, integer3, i7 + i9, ExtBlocks.SmoothStone.blockID);
+			}
+		}
+
+		for(i8 = 1; i8 < 15; ++i8) {
+			for(i9 = 7; i9 <= 8; ++i9) {
+				cv.setBlock(i6 + i8, integer3 + 7, i7 + i9, ExtBlocks.FlamewoodPillar.blockID);
+				cv.setBlock(i6 + i9, integer3 + 7, i7 + i8, ExtBlocks.FlamewoodPillar.blockID);
+			}
+		}
+
+		for(i8 = 5; i8 <= 10; ++i8) {
+			for(i9 = 5; i9 <= 10; ++i9) {
+				cv.setBlock(i6 + i8, integer3 + 7, i7 + i9, ExtBlocks.FlamewoodPillar.blockID);
+			}
+		}
+
+		for(i8 = 0; i8 < 4; ++i8) {
+			cv.setBlock(i6 + 4 - i8, integer3 + 6, i7 + 6, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 4 - i8, integer3 + 6, i7 + 9, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 11 + i8, integer3 + 6, i7 + 6, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 11 + i8, integer3 + 6, i7 + 9, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 6, integer3 + 6, i7 + 4 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 9, integer3 + 6, i7 + 4 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 6, integer3 + 6, i7 + 11 + i8, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 9, integer3 + 6, i7 + 11 + i8, ExtBlocks.FlamewoodPillar.blockID);
+		}
+
+		cv.setBlock(i6 + 4, integer3 + 6, i7 + 4, ExtBlocks.FlamewoodPillar.blockID);
+		cv.setBlock(i6 + 4, integer3 + 6, i7 + 5, ExtBlocks.FlamewoodPillar.blockID);
+		cv.setBlock(i6 + 5, integer3 + 6, i7 + 4, ExtBlocks.FlamewoodPillar.blockID);
+		cv.setBlock(i6 + 11, integer3 + 6, i7 + 11, ExtBlocks.FlamewoodPillar.blockID);
+		cv.setBlock(i6 + 10, integer3 + 6, i7 + 11, ExtBlocks.FlamewoodPillar.blockID);
+		cv.setBlock(i6 + 11, integer3 + 6, i7 + 10, ExtBlocks.FlamewoodPillar.blockID);
+		cv.setBlock(i6 + 11, integer3 + 6, i7 + 4, ExtBlocks.FlamewoodPillar.blockID);
+		cv.setBlock(i6 + 10, integer3 + 6, i7 + 4, ExtBlocks.FlamewoodPillar.blockID);
+		cv.setBlock(i6 + 11, integer3 + 6, i7 + 5, ExtBlocks.FlamewoodPillar.blockID);
+		cv.setBlock(i6 + 4, integer3 + 6, i7 + 11, ExtBlocks.FlamewoodPillar.blockID);
+		cv.setBlock(i6 + 5, integer3 + 6, i7 + 11, ExtBlocks.FlamewoodPillar.blockID);
+		cv.setBlock(i6 + 4, integer3 + 6, i7 + 10, ExtBlocks.FlamewoodPillar.blockID);
+
+		for(i8 = 0; i8 < 3; ++i8) {
+			cv.setBlock(i6 + 3 - i8, integer3 + 5, i7 + 5, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 3 - i8, integer3 + 5, i7 + 10, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 12 + i8, integer3 + 5, i7 + 5, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 12 + i8, integer3 + 5, i7 + 10, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 5, integer3 + 5, i7 + 3 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 10, integer3 + 5, i7 + 3 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 5, integer3 + 5, i7 + 12 + i8, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 10, integer3 + 5, i7 + 12 + i8, ExtBlocks.FlamewoodPillar.blockID);
+		}
+
+		for(i8 = 0; i8 < 2; ++i8) {
+			cv.setBlock(i6 + 4, integer3 + 5, i7 + 3 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 3, integer3 + 5, i7 + 3 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 3 - i8, integer3 + 5, i7 + 4, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 3 - i8, integer3 + 5, i7 + 3, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 11, integer3 + 5, i7 + 12 + i8, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 12, integer3 + 5, i7 + 12 + i8, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 12 + i8, integer3 + 5, i7 + 11, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 12 + i8, integer3 + 5, i7 + 12, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 4, integer3 + 5, i7 + 12 + i8, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 3, integer3 + 5, i7 + 12 + i8, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 3 - i8, integer3 + 5, i7 + 11, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 3 - i8, integer3 + 5, i7 + 12, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 11, integer3 + 5, i7 + 3 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 12, integer3 + 5, i7 + 3 - i8, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 12 + i8, integer3 + 5, i7 + 4, ExtBlocks.FlamewoodPillar.blockID);
+			cv.setBlock(i6 + 12 + i8, integer3 + 5, i7 + 3, ExtBlocks.FlamewoodPillar.blockID);
+		}
+
+		i8 = integer3 / 8;
+		EnumHouseBig[] enumHouseBig13 = this.func_6578_4c1kP4QIu1rDQfKd8R11xB0lK0Cc6568A0pB9iA40MsjOC426CT1LC6r9w98(integer2, i8, integer4);
+
+		for(i10 = 0; i10 < 4; ++i10) {
+			int i11;
+			int i12;
+			switch(EnumHouseBigUnknownClass.field_7424_13jnRFsWY17oHz1bqFO1m1o8X5gnmKUz32MBrOCJtg2aMM8hzmIJn6V028dA[enumHouseBig13[i10].ordinal()]) {
+			case 1:
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 1, 0, Block.glass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 2, 0, Block.glass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 3, 0, Block.glass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 1, 1, Block.glass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 2, 1, Block.glass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 3, 1, Block.glass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, -1, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 0, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 1, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 2, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, -2, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, -1, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 0, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 1, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 2, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 3, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 1, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 2, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 3, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 1, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 2, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 3, -2, ExtBlocks.FlamewoodPillar, i10);
+				break;
+			case 2:
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 1, 0, ExtBlocks.GlassBlue, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 2, 0, ExtBlocks.GlassBlue, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 3, 0, ExtBlocks.GlassBlue, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 1, 1, ExtBlocks.GlassBlue, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 2, 1, ExtBlocks.GlassBlue, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 3, 1, ExtBlocks.GlassBlue, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, -1, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 0, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 1, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 2, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, -2, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, -1, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 0, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 1, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 2, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 3, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 1, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 2, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 3, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 1, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 2, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 3, -2, ExtBlocks.FlamewoodPillar, i10);
+				break;
+			case 3:
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 1, 0, ExtBlocks.GlassMagenta, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 2, 0, ExtBlocks.GlassMagenta, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 3, 0, ExtBlocks.GlassMagenta, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 1, 1, ExtBlocks.GlassMagenta, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 2, 1, ExtBlocks.GlassMagenta, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 3, 1, ExtBlocks.GlassMagenta, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, -1, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 0, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 1, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 2, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, -2, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, -1, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 0, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 1, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 2, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 3, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 1, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 2, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 3, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 1, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 2, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 3, -2, ExtBlocks.FlamewoodPillar, i10);
+				break;
+			case 4:
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 1, 0, ExtBlocks.SmoothStone, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 2, 0, ExtBlocks.SmoothStone, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 3, 0, ExtBlocks.SmoothStone, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 1, 1, ExtBlocks.SmoothStone, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 2, 1, ExtBlocks.SmoothStone, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 3, 1, ExtBlocks.SmoothStone, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 1, 0, ExtBlocks.SolarPlate, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 2, 0, ExtBlocks.DenialPlate, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 3, 0, ExtBlocks.SwitchPlate, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 1, 1, ExtBlocks.LoopPlate, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 2, 1, ExtBlocks.PartPlate, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 3, 1, ExtBlocks.AssociationPlate, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, -1, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 0, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 1, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 2, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, -2, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, -1, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 0, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 1, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 2, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 3, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 1, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 2, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 3, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 1, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 2, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 3, -2, ExtBlocks.FlamewoodPillar, i10);
+				break;
+			case 5:
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 1, 0, ExtBlocks.GlassGreen, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 2, 0, ExtBlocks.GlassGreen, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 3, 0, ExtBlocks.GlassGreen, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 1, 1, ExtBlocks.GlassGreen, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 2, 1, ExtBlocks.GlassGreen, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 3, 1, ExtBlocks.GlassGreen, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, -1, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 0, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 1, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 2, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, -2, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, -1, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 0, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 1, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 2, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 3, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 1, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 2, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 3, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 1, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 2, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 3, -2, ExtBlocks.FlamewoodPillar, i10);
+				break;
+			case 6:
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 1, 0, ExtBlocks.GlassBlack, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 2, 0, ExtBlocks.GlassBlack, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 3, 0, ExtBlocks.GlassBlack, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 1, 1, ExtBlocks.GlassBlack, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 2, 1, ExtBlocks.GlassBlack, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 3, 1, ExtBlocks.GlassBlack, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, -1, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 0, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 1, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 1, 0, 2, Block.grass, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, -2, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, -1, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 0, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 1, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 2, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 0, 3, ExtBlocks.SlatePillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 1, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 2, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 3, 3, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 1, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 2, -2, ExtBlocks.FlamewoodPillar, i10);
+				this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 2, 3, -2, ExtBlocks.FlamewoodPillar, i10);
+				break;
+			case 7:
+				i11 = i10 == 0 ? 1 : (i10 == 2 ? -1 : 0);
+				i12 = i10 == 1 ? 1 : (i10 == 3 ? -1 : 0);
+				i11 += integer2;
+				i12 += integer4;
+				if(this.func_6574_2Od2qCR4hZnlmrKyk963MtBGhgW5ljmrj6kju46ChKD9QWX1LFoPuUlKM2hw(i11, i8, i12, (i10 + 2) % 4) == EnumHouseBig.Door && gx.func_8057_1SpC8g5geJXYT8BF3vfI8b36WtP4ic1bjN1P99YctcmBbeQlz5AgOjen5w9y(i11, i12) instanceof WorldGenHouseBig) {
+					this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 0, 0, ExtBlocks.WireframeBlock, i10);
+					this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 0, 1, ExtBlocks.WireframeBlock, i10);
+					this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 1, 0, ExtBlocks.WireframeBlock, i10);
+					this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 0, 1, 1, ExtBlocks.WireframeBlock, i10);
+					this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 3, -1, 0, ExtBlocks.SmoothStone, i10);
+					this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 3, -1, 1, ExtBlocks.SmoothStone, i10);
+					this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 4, -1, 0, ExtBlocks.SmoothStone, i10);
+					this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 4, -1, 1, ExtBlocks.SmoothStone, i10);
+				}
+			case 8:
+				i11 = i10 == 0 ? 1 : (i10 == 2 ? -1 : 0);
+				i12 = i10 == 1 ? 1 : (i10 == 3 ? -1 : 0);
+				i11 += integer2;
+				i12 += integer4;
+				if(this.func_6574_2Od2qCR4hZnlmrKyk963MtBGhgW5ljmrj6kju46ChKD9QWX1LFoPuUlKM2hw(i11, i8, i12, (i10 + 2) % 4) == EnumHouseBig.Door && gx.func_8057_1SpC8g5geJXYT8BF3vfI8b36WtP4ic1bjN1P99YctcmBbeQlz5AgOjen5w9y(i11, i12) instanceof WorldGenHouseBig) {
+					this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 3, -1, 0, ExtBlocks.SmoothStone, i10);
+					this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 3, -1, 1, ExtBlocks.SmoothStone, i10);
+					this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 4, -1, 0, ExtBlocks.SmoothStone, i10);
+					this.func_6581_8LZc24k2239AmJQbfqhUq54LPfpU6hzLR167xiuZ7JboDRXeEJ0aFp7P4Er8(cv, i6, integer3, i7, 4, -1, 1, ExtBlocks.SmoothStone, i10);
+				}
+			}
+		}
+
+		this.func_6583_23660DFxIiqGozZ92u0365HKk56EYOfjqcI2vDIghPA8O1sG5L9084gYuA7z(cv, i6 + 4, integer3 + 1, i7 + 4);
+		this.func_6583_23660DFxIiqGozZ92u0365HKk56EYOfjqcI2vDIghPA8O1sG5L9084gYuA7z(cv, i6 + 11, integer3 + 1, i7 + 4);
+		this.func_6583_23660DFxIiqGozZ92u0365HKk56EYOfjqcI2vDIghPA8O1sG5L9084gYuA7z(cv, i6 + 4, integer3 + 1, i7 + 11);
+		this.func_6583_23660DFxIiqGozZ92u0365HKk56EYOfjqcI2vDIghPA8O1sG5L9084gYuA7z(cv, i6 + 11, integer3 + 1, i7 + 11);
+	}
+
+	private void func_6583_23660DFxIiqGozZ92u0365HKk56EYOfjqcI2vDIghPA8O1sG5L9084gYuA7z(World cv, int integer2, int integer3, int integer4) {
+		Random random5 = new Random((long)integer2 * 456856235L - (long)integer3 * 184761862L + (long)integer4 * 4618624L + 18162412L);
+		if(random5.nextInt(127) == 0) {
+			cv.setBlock(integer2, integer3, integer4, Block.chest.blockID);
+			TileEntityChest tileEntityChest6 = new TileEntityChest();
+			cv.setBlockTileEntity(integer2, integer3, integer4, tileEntityChest6);
+
+			for(int i7 = 0; i7 < tileEntityChest6.getSizeInventory(); ++i7) {
+				int i8 = random5.nextInt(30);
+				if(i8 < 1) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(Item.ingotGold));
+				} else if(i8 < 6) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(ExtBlocks.SolarPlate.blockID + i8 - 1, random5.nextInt(15) + 1));
+				} else if(i8 < 11) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(ExtBlocks.TrinityPlate.blockID + i8 - 6, random5.nextInt(15) + 1));
+				} else if(i8 < 12) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(Item.appleRed));
+				} else if(i8 < 13) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(Item.bread));
+				} else if(i8 < 14) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(ExtItems.Pear));
+				} else if(i8 < 15) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(ExtItems.HoursLongPastIII));
+				} else if(i8 < 16) {
+					tileEntityChest6.setInventorySlotContents(i7, new ItemStack(ExtItems.HoursLongPastVI));
+				}
+			}
+
+		}
+	}
+
+	private void func_6577_55IVzz9258u4nMJ7wvcYQdHF23Z51TLBD5oFFEtOae22QOdYAJ0s07SUW27o(World cv, int integer2, int integer3, int integer4) {
+		int i5;
+		int i6;
+		for(i5 = 2; i5 <= 13; ++i5) {
+			for(i6 = 2; i6 <= 13; ++i6) {
+				for(int i7 = 5; i7 < 8; ++i7) {
+					if(!this.func_6579_6digL5LRx8rw3K8MdBVWmVJ8A6XO7Ro2hVI9Qy851P8s0zYZ0YklUeh44KkT(cv, integer2 * 16 + i5, integer3 + i7, integer4 * 16 + i6)) {
+						cv.setBlock(integer2 * 16 + i5, integer3 + i7, integer4 * 16 + i6, ExtBlocks.SmoothStone.blockID);
+					}
+				}
+			}
+		}
+
+		for(i5 = 3; i5 <= 12; ++i5) {
+			for(i6 = 3; i6 <= 12; ++i6) {
+				this.func_6576_2YtPw6tjaA31JUF4j54gQvnlq9JFy7L8f7clA6ZaCpl67E95rl1Jg0p0WkJv(cv, ExtBlocks.CrudePillar.blockID, integer2 * 16 + i5, integer3 + 4, integer4 * 16 + i6);
+			}
+		}
+
+	}
+
+	public void func_6573_9s8xyF629674iK59W75jxL4IfegOZaukdAavse5BpG78PPgBZ5sG433o01xa(World cv, int integer2, int integer3, WorldGenHouseBigInterior gx) {
+		int i5 = (int)((this.field_6586_2Edp3i8D8FiRw515WJnyPUf2A4ye8nU36moYedgQaILBY93Fl9HX7y6mB7rK.generateNoise((double)integer2, (double)integer3) / 2.0D + 1.0D) * 8.0D);
+
+		for(int i6 = i5; i6 >= 0; --i6) {
+			int i7 = 30 + i6 * 8;
+			if(!this.func_6580_3eWm3b6YYuia73Hn3Ze7IERF0X3h699f2Vj5413O6USUICBDAL2Sm4iH2fIy(cv, integer2, i7, integer3)) {
+				if(i5 != i6) {
+					this.func_6577_55IVzz9258u4nMJ7wvcYQdHF23Z51TLBD5oFFEtOae22QOdYAJ0s07SUW27o(cv, integer2, i7, integer3);
+				}
+				break;
+			}
+
+			this.func_6575_0Qp0E3iI8RBUEr8RQ25MvHa5HqLU68Z7HgQgTbR7noU44G60d067FTWH19mw(cv, integer2, i7, integer3, gx);
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/ThreadChunkPopulator.java
@@ -1,0 +1,76 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+public class ThreadChunkPopulator extends Thread {
+	List qChanges = new ArrayList();
+	public List queuedPopulateOperations = new ArrayList();
+	public static boolean useAsyncGen = false;
+	public static ThreadChunkPopulator instance = null;
+	public volatile boolean writingToList = false;
+
+	public static boolean OpListHasOperation(ChunkProviderPopulateOperation lq) {
+		Iterator iterator1 = instance.queuedPopulateOperations.iterator();
+
+		ChunkProviderPopulateOperation chunkProviderPopulateOperation2;
+		do {
+			if(!iterator1.hasNext()) {
+				return false;
+			}
+
+			chunkProviderPopulateOperation2 = (ChunkProviderPopulateOperation)iterator1.next();
+		} while(chunkProviderPopulateOperation2.x != lq.x || chunkProviderPopulateOperation2.y != lq.y);
+
+		return true;
+	}
+
+	public static void AddPopulateOperation(ChunkProviderPopulateOperation lq, ChunkProviderGenerate ab) {
+		if(useAsyncGen) {
+			if(instance == null) {
+				instance = new ThreadChunkPopulator();
+			}
+
+			if(!instance.isAlive()) {
+				instance.start();
+			}
+
+			instance.writingToList = true;
+			if(!OpListHasOperation(lq)) {
+				instance.queuedPopulateOperations.add(lq);
+			}
+
+			instance.writingToList = false;
+		} else {
+			lq.caller.actualPopulate(lq.a, lq.x, lq.y);
+		}
+
+	}
+
+	public void run() {
+		while(true) {
+			if(this.queuedPopulateOperations.size() > 0) {
+				while(true) {
+					if(!this.writingToList) {
+						ChunkProviderPopulateOperation chunkProviderPopulateOperation1 = (ChunkProviderPopulateOperation)this.queuedPopulateOperations.get(0);
+
+						try {
+							chunkProviderPopulateOperation1.caller.actualPopulate(chunkProviderPopulateOperation1.a, chunkProviderPopulateOperation1.x, chunkProviderPopulateOperation1.y);
+						} catch (Exception exception4) {
+						}
+
+						this.queuedPopulateOperations.remove(0);
+						break;
+					}
+				}
+			}
+
+			try {
+				Thread.sleep(16L);
+			} catch (InterruptedException interruptedException3) {
+				interruptedException3.printStackTrace();
+			}
+		}
+	}
+}
--- net/minecraft/src/BlockRedstoneWire.java
+++ net/minecraft/src/BlockRedstoneWire.java
@@ -5,12 +5,12 @@
 public class BlockRedstoneWire extends Block {
 	private boolean wiresProvidePower = true;
 
-	public BlockRedstoneWire(int var1, int var2) {
-		super(var1, var2, Material.circuits);
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F / 16.0F, 1.0F);
+	public BlockRedstoneWire(int id, int blockIndex) {
+		super(id, blockIndex, Material.circuits);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.0625F, 1.0F);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -22,254 +22,255 @@
 		return 5;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2, var3 - 1, var4);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x, y - 1, z);
 	}
 
-	private void updateAndPropagateCurrentStrength(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		int var6 = 0;
+	private void updateAndPropagateCurrentStrength(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		int i6 = 0;
 		this.wiresProvidePower = false;
-		boolean var7 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4);
+		boolean z7 = world.isBlockIndirectlyGettingPowered(x, y, z);
 		this.wiresProvidePower = true;
-		int var8;
-		int var9;
-		int var10;
-		if(var7) {
-			var6 = 15;
+		int i8;
+		int i9;
+		int i10;
+		if(z7) {
+			i6 = 15;
 		} else {
-			for(var8 = 0; var8 < 4; ++var8) {
-				var9 = var2;
-				var10 = var4;
-				if(var8 == 0) {
-					var9 = var2 - 1;
-				}
-
-				if(var8 == 1) {
-					++var9;
-				}
-
-				if(var8 == 2) {
-					var10 = var4 - 1;
-				}
-
-				if(var8 == 3) {
-					++var10;
-				}
-
-				var6 = this.getMaxCurrentStrength(var1, var9, var3, var10, var6);
-				if(var1.isBlockNormalCube(var9, var3, var10) && !var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-					var6 = this.getMaxCurrentStrength(var1, var9, var3 + 1, var10, var6);
-				} else if(!var1.isBlockNormalCube(var9, var3, var10)) {
-					var6 = this.getMaxCurrentStrength(var1, var9, var3 - 1, var10, var6);
+			for(i8 = 0; i8 < 4; ++i8) {
+				i9 = x;
+				i10 = z;
+				if(i8 == 0) {
+					i9 = x - 1;
+				}
+
+				if(i8 == 1) {
+					++i9;
+				}
+
+				if(i8 == 2) {
+					i10 = z - 1;
+				}
+
+				if(i8 == 3) {
+					++i10;
+				}
+
+				i6 = this.getMaxCurrentStrength(world, i9, y, i10, i6);
+				if(world.isBlockNormalCube(i9, y, i10) && !world.isBlockNormalCube(x, y + 1, z)) {
+					i6 = this.getMaxCurrentStrength(world, i9, y + 1, i10, i6);
+				} else if(!world.isBlockNormalCube(i9, y, i10)) {
+					i6 = this.getMaxCurrentStrength(world, i9, y - 1, i10, i6);
 				}
 			}
 
-			if(var6 > 0) {
-				--var6;
+			if(i6 > 0) {
+				--i6;
 			} else {
-				var6 = 0;
-			}
-		}
-
-		if(var5 != var6) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
-			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-			if(var6 > 0) {
-				--var6;
-			}
-
-			for(var8 = 0; var8 < 4; ++var8) {
-				var9 = var2;
-				var10 = var4;
-				int var11 = var3 - 1;
-				if(var8 == 0) {
-					var9 = var2 - 1;
-				}
-
-				if(var8 == 1) {
-					++var9;
-				}
-
-				if(var8 == 2) {
-					var10 = var4 - 1;
-				}
-
-				if(var8 == 3) {
-					++var10;
-				}
-
-				if(var1.isBlockNormalCube(var9, var3, var10)) {
-					var11 += 2;
-				}
-
-				int var12 = this.getMaxCurrentStrength(var1, var9, var3, var10, -1);
-				if(var12 >= 0 && var12 != var6) {
-					this.updateAndPropagateCurrentStrength(var1, var9, var3, var10);
-				}
-
-				var12 = this.getMaxCurrentStrength(var1, var9, var11, var10, -1);
-				if(var12 >= 0 && var12 != var6) {
-					this.updateAndPropagateCurrentStrength(var1, var9, var11, var10);
-				}
-			}
-
-			if(var5 == 0 || var6 == 0) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-				var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-			}
-		}
-
-	}
-
-	private void notifyWireNeighborsOfNeighborChange(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-		}
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		super.onBlockAdded(var1, var2, var3, var4);
-		this.updateAndPropagateCurrentStrength(var1, var2, var3, var4);
-		var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-		var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3, var4);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3, var4);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 - 1);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 + 1);
-		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 + 1, var4);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 - 1, var4);
-		}
-
-		if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 + 1, var4);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 - 1, var4);
-		}
-
-		if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 - 1);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 - 1);
-		}
-
-		if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 + 1);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 + 1);
-		}
-
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		super.onBlockRemoval(var1, var2, var3, var4);
-		var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-		var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-		this.updateAndPropagateCurrentStrength(var1, var2, var3, var4);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3, var4);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3, var4);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 - 1);
-		this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 + 1);
-		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 + 1, var4);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 - 1, var4);
-		}
-
-		if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 + 1, var4);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 - 1, var4);
-		}
-
-		if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 - 1);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 - 1);
-		}
-
-		if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 + 1);
-		} else {
-			this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 + 1);
-		}
-
-	}
-
-	private int getMaxCurrentStrength(World var1, int var2, int var3, int var4, int var5) {
-		if(var1.getBlockId(var2, var3, var4) != this.blockID) {
-			return var5;
-		} else {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			return var6 > var5 ? var6 : var5;
-		}
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		boolean var7 = this.canPlaceBlockAt(var1, var2, var3, var4);
-		if(!var7) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var6);
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-		} else {
-			this.updateAndPropagateCurrentStrength(var1, var2, var3, var4);
-		}
-
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-	}
-
-	public int idDropped(int var1, Random var2) {
+				i6 = 0;
+			}
+		}
+
+		if(i5 != i6) {
+			world.setBlockMetadataWithNotify(x, y, z, i6);
+			world.markBlocksDirty(x, y, z, x, y, z);
+			if(i6 > 0) {
+				--i6;
+			}
+
+			for(i8 = 0; i8 < 4; ++i8) {
+				i9 = x;
+				i10 = z;
+				int i11 = y - 1;
+				if(i8 == 0) {
+					i9 = x - 1;
+				}
+
+				if(i8 == 1) {
+					++i9;
+				}
+
+				if(i8 == 2) {
+					i10 = z - 1;
+				}
+
+				if(i8 == 3) {
+					++i10;
+				}
+
+				if(world.isBlockNormalCube(i9, y, i10)) {
+					i11 += 2;
+				}
+
+				int i12 = this.getMaxCurrentStrength(world, i9, y, i10, -1);
+				if(i12 >= 0 && i12 != i6) {
+					this.updateAndPropagateCurrentStrength(world, i9, y, i10);
+				}
+
+				i12 = this.getMaxCurrentStrength(world, i9, i11, i10, -1);
+				if(i12 >= 0 && i12 != i6) {
+					this.updateAndPropagateCurrentStrength(world, i9, i11, i10);
+				}
+			}
+
+			if(i5 == 0 || i6 == 0) {
+				world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+				world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+				world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+				world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+				world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+				world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+				world.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+			}
+		}
+
+	}
+
+	private void notifyWireNeighborsOfNeighborChange(World world, int x, int y, int z) {
+		if(world.getBlockId(x, y, z) == this.blockID) {
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			world.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+		}
+
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		super.onBlockAdded(world, x, y, z);
+		this.updateAndPropagateCurrentStrength(world, x, y, z);
+		world.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+		world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+		this.notifyWireNeighborsOfNeighborChange(world, x - 1, y, z);
+		this.notifyWireNeighborsOfNeighborChange(world, x + 1, y, z);
+		this.notifyWireNeighborsOfNeighborChange(world, x, y, z - 1);
+		this.notifyWireNeighborsOfNeighborChange(world, x, y, z + 1);
+		if(world.isBlockNormalCube(x - 1, y, z)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x - 1, y + 1, z);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x - 1, y - 1, z);
+		}
+
+		if(world.isBlockNormalCube(x + 1, y, z)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x + 1, y + 1, z);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x + 1, y - 1, z);
+		}
+
+		if(world.isBlockNormalCube(x, y, z - 1)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y + 1, z - 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y - 1, z - 1);
+		}
+
+		if(world.isBlockNormalCube(x, y, z + 1)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y + 1, z + 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y - 1, z + 1);
+		}
+
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		super.onBlockRemoval(world, x, y, z);
+		world.notifyBlocksOfNeighborChange(x, y + 1, z, this.blockID);
+		world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+		this.updateAndPropagateCurrentStrength(world, x, y, z);
+		this.notifyWireNeighborsOfNeighborChange(world, x - 1, y, z);
+		this.notifyWireNeighborsOfNeighborChange(world, x + 1, y, z);
+		this.notifyWireNeighborsOfNeighborChange(world, x, y, z - 1);
+		this.notifyWireNeighborsOfNeighborChange(world, x, y, z + 1);
+		if(world.isBlockNormalCube(x - 1, y, z)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x - 1, y + 1, z);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x - 1, y - 1, z);
+		}
+
+		if(world.isBlockNormalCube(x + 1, y, z)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x + 1, y + 1, z);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x + 1, y - 1, z);
+		}
+
+		if(world.isBlockNormalCube(x, y, z - 1)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y + 1, z - 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y - 1, z - 1);
+		}
+
+		if(world.isBlockNormalCube(x, y, z + 1)) {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y + 1, z + 1);
+		} else {
+			this.notifyWireNeighborsOfNeighborChange(world, x, y - 1, z + 1);
+		}
+
+	}
+
+	private int getMaxCurrentStrength(World world, int x, int y, int z, int integer5) {
+		if(world.getBlockId(x, y, z) != this.blockID) {
+			return integer5;
+		} else {
+			int i6 = world.getBlockMetadata(x, y, z);
+			return i6 > integer5 ? i6 : integer5;
+		}
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		boolean z7 = this.canPlaceBlockAt(world, x, y, z);
+		if(!z7) {
+			this.dropBlockAsItem(world, x, y, z, i6);
+			world.setBlockWithNotify(x, y, z, 0);
+		} else {
+			this.updateAndPropagateCurrentStrength(world, x, y, z);
+		}
+
+		super.onNeighborBlockChange(world, x, y, z, flag);
+	}
+
+	public int idDropped(int count, Random random) {
 		return Item.redstone.shiftedIndex;
 	}
 
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-		return !this.wiresProvidePower ? false : this.isPoweringTo(var1, var2, var3, var4, var5);
+	public boolean isIndirectlyPoweringTo(World world, int x, int y, int z, int flag) {
+		return !this.wiresProvidePower ? false : this.isPoweringTo(world, x, y, z, flag);
 	}
 
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int unused) {
 		if(!this.wiresProvidePower) {
 			return false;
-		} else if(var1.getBlockMetadata(var2, var3, var4) == 0) {
+		} else if(blockAccess.getBlockMetadata(x, y, z) == 0) {
 			return false;
-		} else if(var5 == 1) {
+		} else if(unused == 1) {
 			return true;
 		} else {
-			boolean var6 = isPowerProviderOrWire(var1, var2 - 1, var3, var4) || !var1.isBlockNormalCube(var2 - 1, var3, var4) && isPowerProviderOrWire(var1, var2 - 1, var3 - 1, var4);
-			boolean var7 = isPowerProviderOrWire(var1, var2 + 1, var3, var4) || !var1.isBlockNormalCube(var2 + 1, var3, var4) && isPowerProviderOrWire(var1, var2 + 1, var3 - 1, var4);
-			boolean var8 = isPowerProviderOrWire(var1, var2, var3, var4 - 1) || !var1.isBlockNormalCube(var2, var3, var4 - 1) && isPowerProviderOrWire(var1, var2, var3 - 1, var4 - 1);
-			boolean var9 = isPowerProviderOrWire(var1, var2, var3, var4 + 1) || !var1.isBlockNormalCube(var2, var3, var4 + 1) && isPowerProviderOrWire(var1, var2, var3 - 1, var4 + 1);
-			if(!var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-				if(var1.isBlockNormalCube(var2 - 1, var3, var4) && isPowerProviderOrWire(var1, var2 - 1, var3 + 1, var4)) {
-					var6 = true;
-				}
-
-				if(var1.isBlockNormalCube(var2 + 1, var3, var4) && isPowerProviderOrWire(var1, var2 + 1, var3 + 1, var4)) {
-					var7 = true;
-				}
-
-				if(var1.isBlockNormalCube(var2, var3, var4 - 1) && isPowerProviderOrWire(var1, var2, var3 + 1, var4 - 1)) {
-					var8 = true;
-				}
-
-				if(var1.isBlockNormalCube(var2, var3, var4 + 1) && isPowerProviderOrWire(var1, var2, var3 + 1, var4 + 1)) {
-					var9 = true;
+			boolean z6 = isPowerProviderOrWire(blockAccess, x - 1, y, z) || !blockAccess.isBlockNormalCube(x - 1, y, z) && isPowerProviderOrWire(blockAccess, x - 1, y - 1, z);
+			boolean z7 = isPowerProviderOrWire(blockAccess, x + 1, y, z) || !blockAccess.isBlockNormalCube(x + 1, y, z) && isPowerProviderOrWire(blockAccess, x + 1, y - 1, z);
+			boolean z8 = isPowerProviderOrWire(blockAccess, x, y, z - 1) || !blockAccess.isBlockNormalCube(x, y, z - 1) && isPowerProviderOrWire(blockAccess, x, y - 1, z - 1);
+			boolean z9 = isPowerProviderOrWire(blockAccess, x, y, z + 1) || !blockAccess.isBlockNormalCube(x, y, z + 1) && isPowerProviderOrWire(blockAccess, x, y - 1, z + 1);
+			if(!blockAccess.isBlockNormalCube(x, y + 1, z)) {
+				if(blockAccess.isBlockNormalCube(x - 1, y, z) && isPowerProviderOrWire(blockAccess, x - 1, y + 1, z)) {
+					z6 = true;
+				}
+
+				if(blockAccess.isBlockNormalCube(x + 1, y, z) && isPowerProviderOrWire(blockAccess, x + 1, y + 1, z)) {
+					z7 = true;
+				}
+
+				if(blockAccess.isBlockNormalCube(x, y, z - 1) && isPowerProviderOrWire(blockAccess, x, y + 1, z - 1)) {
+					z8 = true;
+				}
+
+				if(blockAccess.isBlockNormalCube(x, y, z + 1) && isPowerProviderOrWire(blockAccess, x, y + 1, z + 1)) {
+					z9 = true;
 				}
 			}
 
-			return !var8 && !var7 && !var6 && !var9 && var5 >= 2 && var5 <= 5 ? true : (var5 == 2 && var8 && !var6 && !var7 ? true : (var5 == 3 && var9 && !var6 && !var7 ? true : (var5 == 4 && var6 && !var8 && !var9 ? true : var5 == 5 && var7 && !var8 && !var9)));
+			return !z8 && !z7 && !z6 && !z9 && unused >= 2 && unused <= 5 ? true : (unused == 2 && z8 && !z6 && !z7 ? true : (unused == 3 && z9 && !z6 && !z7 ? true : (unused == 4 && z6 && !z8 && !z9 ? true : unused == 5 && z7 && !z8 && !z9)));
 		}
 	}
 
@@ -277,8 +278,8 @@
 		return this.wiresProvidePower;
 	}
 
-	public static boolean isPowerProviderOrWire(IBlockAccess var0, int var1, int var2, int var3) {
-		int var4 = var0.getBlockId(var1, var2, var3);
-		return var4 == Block.redstoneWire.blockID ? true : (var4 == 0 ? false : Block.blocksList[var4].canProvidePower());
+	public static boolean isPowerProviderOrWire(IBlockAccess blockAccess, int x, int y, int z) {
+		int i4 = blockAccess.getBlockId(x, y, z);
+		return i4 == Block.redstoneWire.blockID ? true : (i4 == 0 ? false : Block.blocksList[i4].canProvidePower());
 	}
 }
--- /dev/null
+++ net/minecraft/src/GenPillar.java
@@ -1,0 +1,32 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class GenPillar extends WorldGenerator {
+	private int a;
+
+	public GenPillar(int integer) {
+		this.a = integer;
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 64; ++i6) {
+			int i9 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i7;
+			int i8;
+			int i10 = world.getBlockId(i9, (i8 = y + rand.nextInt(4) - rand.nextInt(4)) - 1, i7 = z + rand.nextInt(8) - rand.nextInt(8));
+			boolean z11 = i10 != 0 && i10 != 9 && i10 != 116 && i10 != 18 && i10 != ExtBlocks.glowingFlower.blockID && i10 != ExtBlocks.blueFireIdk.blockID;
+			if(world.getBlockId(i9, i8, i7) == 0 && z11) {
+				world.setBlock(i9, i8, i7, this.a);
+				if(rand.nextInt(100) > 50) {
+					world.setBlock(i9, i8 + 1, i7, this.a);
+					if(rand.nextInt(100) > 50) {
+						world.setBlock(i9, i8 + 2, i7, this.a);
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/ItemEraser.java
@@ -1,0 +1,27 @@
+package net.minecraft.src;
+
+public class ItemEraser extends ItemPickaxe {
+	public ItemEraser(int itemID, int harvestLevelAndMaterial) {
+		super(itemID, harvestLevelAndMaterial);
+	}
+
+	public boolean canHarvestBlock(Block block) {
+		return true;
+	}
+
+	public int getMaxDamage() {
+		return Integer.MAX_VALUE;
+	}
+
+	public int getDamageVsEntity(Entity entity) {
+		return Integer.MAX_VALUE;
+	}
+
+	public float getStrVsBlock(ItemStack stack, Block block) {
+		return Float.POSITIVE_INFINITY;
+	}
+
+	public boolean isFull3D() {
+		return false;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockMyconWorkbench.java
@@ -1,0 +1,46 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockMyconWorkbench extends Block {
+	private int field_6385_6Xj4z9V4QhHR5I6ErFTs8168YBfBG8Vw9lhxEX3HcGLsb124eF2997kH9pHe;
+	private int field_6384_5bJFgWCR0jolB3Stf20l1GcG6cq2J2HWx8N188C9oDhVN4v7L9JK0p53xsMB;
+	private int field_6387_5Sj2P73P1y4u7uAnQptYYdg7S7LvkF46Nz88JC3br7qEJHF05z4aaR87nrbv;
+	private int field_6386_2j0HL31sGp07hbLOokK7RWv77RBBJlft903I8nWTEYT546h2R75iNy2642R7;
+
+	public BlockMyconWorkbench(int integer1, int integer2, int integer3, int integer4) {
+		super(integer1, Material.grass);
+		this.blockIndexInTexture = integer3;
+		this.setTickOnLoad(true);
+		this.field_6385_6Xj4z9V4QhHR5I6ErFTs8168YBfBG8Vw9lhxEX3HcGLsb124eF2997kH9pHe = integer2;
+		this.field_6384_5bJFgWCR0jolB3Stf20l1GcG6cq2J2HWx8N188C9oDhVN4v7L9JK0p53xsMB = integer3;
+		this.field_6387_5Sj2P73P1y4u7uAnQptYYdg7S7LvkF46Nz88JC3br7qEJHF05z4aaR87nrbv = integer4;
+		this.field_6386_2j0HL31sGp07hbLOokK7RWv77RBBJlft903I8nWTEYT546h2R75iNy2642R7 = integer1;
+	}
+
+	public BlockMyconWorkbench(int integer1, int integer2, int integer3, int integer4, Material jj) {
+		super(integer1, jj);
+		this.blockIndexInTexture = integer3;
+		this.setTickOnLoad(true);
+		this.field_6385_6Xj4z9V4QhHR5I6ErFTs8168YBfBG8Vw9lhxEX3HcGLsb124eF2997kH9pHe = integer2;
+		this.field_6384_5bJFgWCR0jolB3Stf20l1GcG6cq2J2HWx8N188C9oDhVN4v7L9JK0p53xsMB = integer3;
+		this.field_6387_5Sj2P73P1y4u7uAnQptYYdg7S7LvkF46Nz88JC3br7qEJHF05z4aaR87nrbv = integer4;
+		this.field_6386_2j0HL31sGp07hbLOokK7RWv77RBBJlft903I8nWTEYT546h2R75iNy2642R7 = integer1;
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.field_6385_6Xj4z9V4QhHR5I6ErFTs8168YBfBG8Vw9lhxEX3HcGLsb124eF2997kH9pHe : (side == 0 ? this.field_6387_5Sj2P73P1y4u7uAnQptYYdg7S7LvkF46Nz88JC3br7qEJHF05z4aaR87nrbv : this.field_6384_5bJFgWCR0jolB3Stf20l1GcG6cq2J2HWx8N188C9oDhVN4v7L9JK0p53xsMB);
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+	}
+
+	public int idDropped(int count, Random random) {
+		return this.field_6386_2j0HL31sGp07hbLOokK7RWv77RBBJlft903I8nWTEYT546h2R75iNy2642R7;
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		entityPlayer.displayWorkbenchGUI();
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenMyconUnknownClass.java
@@ -1,0 +1,69 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Random;
+
+public abstract class WorldGenMyconUnknownClass {
+	public static final int field_6116_98Ds0SE1Fh77U5bwL0rdGJ8crm4suTiNw32sw2d4cdraCJRk5f2n6BwHZlAh = 20;
+	public static final int field_6115_5Zi8At0M6E0TJnO5J5atu8wX40WUckH1Pte14mjPYB01jLMJ2418r90X6A9V = 46;
+	public final EnumWorldGenerator field_6113_5AnPGJjONMxCipFa8Dc15MBKYYgpOHHJw75ztSnA7t14INnQ9jp9ogIbO1Ih;
+	public final double field_6112_6zmJzzk38d1OsD91RfWGDuT9rE2O6s6e7Esz14X2g91lih6K8RD2OGqr01YS;
+	public final double field_6114_1IN1ZKeAhIcOxkdSDCCj86cmc33z78y1KQ52ShQeg92lI2ZeULINAuk8mNah;
+	private static final List field_6111_5nH96608buw9r8qARPUWe796cXVU4jn4GmM41DQW6TiWF1g3v4ELA64a4haD = new ArrayList();
+
+	public WorldGenMyconUnknownClass(double double1, double double2, EnumWorldGenerator _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE) {
+		this.field_6112_6zmJzzk38d1OsD91RfWGDuT9rE2O6s6e7Esz14X2g91lih6K8RD2OGqr01YS = double1;
+		this.field_6114_1IN1ZKeAhIcOxkdSDCCj86cmc33z78y1KQ52ShQeg92lI2ZeULINAuk8mNah = double2;
+		this.field_6113_5AnPGJjONMxCipFa8Dc15MBKYYgpOHHJw75ztSnA7t14INnQ9jp9ogIbO1Ih = _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE;
+	}
+
+	public abstract boolean func_6106_89178IPx36Pz8I0tikD07m8tZIpV1sbMp38yAtni7c93aR76eIXb747sm4eZ(Random random1, World world2, int i3, int i4);
+
+	public abstract void func_6105_81hMTC5FoM6v920z1cx6O635T6Awu9Y40ealKHkVig8X477d9SlXh3yS17Y3(Random random1);
+
+	public int func_6110_142sM02McyR17iadQt66osR8Q21rhzZ9eM76zgU9m4wlfML0dJ2394XB8k38() {
+		return -1;
+	}
+
+	public static void func_6108_12c0g29Z1EaAvxqW98cxW56q824l32wPMqt8i2308fLhtv6wgQW39LDoV76E(WorldGenMyconUnknownClass ad) {
+		field_6111_5nH96608buw9r8qARPUWe796cXVU4jn4GmM41DQW6TiWF1g3v4ELA64a4haD.add(ad);
+	}
+
+	public static WorldGenMyconUnknownClass func_6109_7AFzAIguFPO5wX289OMW9m53m1vke3nWr9FfsLKbAlSQ3xy680ZFc7S6kAPN(double double1, double double2, EnumWorldGenerator _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE) {
+		double d5 = Double.MAX_VALUE;
+		WorldGenMyconUnknownClass worldGenMyconUnknownClass7 = null;
+		Iterator iterator8 = field_6111_5nH96608buw9r8qARPUWe796cXVU4jn4GmM41DQW6TiWF1g3v4ELA64a4haD.iterator();
+
+		while(iterator8.hasNext()) {
+			WorldGenMyconUnknownClass worldGenMyconUnknownClass9 = (WorldGenMyconUnknownClass)iterator8.next();
+			double d10 = Math.abs(double1 - worldGenMyconUnknownClass9.field_6112_6zmJzzk38d1OsD91RfWGDuT9rE2O6s6e7Esz14X2g91lih6K8RD2OGqr01YS) + Math.abs(double2 - worldGenMyconUnknownClass9.field_6114_1IN1ZKeAhIcOxkdSDCCj86cmc33z78y1KQ52ShQeg92lI2ZeULINAuk8mNah);
+			if(d5 > d10) {
+				d5 = d10;
+				worldGenMyconUnknownClass7 = worldGenMyconUnknownClass9;
+			}
+		}
+
+		return worldGenMyconUnknownClass7;
+	}
+
+	public static void func_6104_44K26W59q4v74lhIsoUv4V87rs4U03so6Z4wQ0Coy41en87E4nn2743n5PU1() {
+		func_6108_12c0g29Z1EaAvxqW98cxW56q824l32wPMqt8i2308fLhtv6wgQW39LDoV76E(new WorldGenMyconUnknownClass2(0.2D, 0.2D, EnumWorldGenerator.SURFACE, 0));
+		func_6108_12c0g29Z1EaAvxqW98cxW56q824l32wPMqt8i2308fLhtv6wgQW39LDoV76E(new WorldGenMyconUnknownClass2(0.3D, 0.3D, EnumWorldGenerator.SURFACE, 1));
+		func_6108_12c0g29Z1EaAvxqW98cxW56q824l32wPMqt8i2308fLhtv6wgQW39LDoV76E(new WorldGenMyconUnknownClass2(0.4D, 0.3D, EnumWorldGenerator.SURFACE, 2));
+		func_6108_12c0g29Z1EaAvxqW98cxW56q824l32wPMqt8i2308fLhtv6wgQW39LDoV76E(new WorldGenMyconUnknownClass2(0.2D, 0.2D, EnumWorldGenerator.UNDERGROUND, 0));
+		func_6108_12c0g29Z1EaAvxqW98cxW56q824l32wPMqt8i2308fLhtv6wgQW39LDoV76E(new WorldGenMyconUnknownClass2(0.1D, 0.3D, EnumWorldGenerator.LOW_RIVER, 0));
+		func_6108_12c0g29Z1EaAvxqW98cxW56q824l32wPMqt8i2308fLhtv6wgQW39LDoV76E(new WorldGenMycon(0.15D, 0.4D, EnumWorldGenerator.LOW_RIVER));
+	}
+
+	public static void func_6107_97Fm75Zc3vq2pz5698WAEab5oMcjcd6M569UziKD8doslfOEl0nTYExHKVK0(Random random) {
+		Iterator iterator1 = field_6111_5nH96608buw9r8qARPUWe796cXVU4jn4GmM41DQW6TiWF1g3v4ELA64a4haD.iterator();
+
+		while(iterator1.hasNext()) {
+			WorldGenMyconUnknownClass worldGenMyconUnknownClass2 = (WorldGenMyconUnknownClass)iterator1.next();
+			worldGenMyconUnknownClass2.func_6105_81hMTC5FoM6v920z1cx6O635T6Awu9Y40ealKHkVig8X477d9SlXh3yS17Y3(random);
+		}
+
+	}
+}
--- net/minecraft/src/MapGenCaves.java
+++ net/minecraft/src/MapGenCaves.java
@@ -3,151 +3,151 @@
 import java.util.Random;
 
 public class MapGenCaves extends MapGenBase {
-	protected void generateLargeCaveNode(int var1, int var2, byte[] var3, double var4, double var6, double var8) {
-		this.generateCaveNode(var1, var2, var3, var4, var6, var8, 1.0F + this.rand.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
+	protected void generateLargeCaveNode(int integer1, int integer2, byte[] arr, double double4, double double5, double double6) {
+		this.generateCaveNode(integer1, integer2, arr, double4, double5, double6, 1.0F + this.rand.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
 	}
 
-	protected void generateCaveNode(int var1, int var2, byte[] var3, double var4, double var6, double var8, float var10, float var11, float var12, int var13, int var14, double var15) {
-		double var17 = (double)(var1 * 16 + 8);
-		double var19 = (double)(var2 * 16 + 8);
-		float var21 = 0.0F;
-		float var22 = 0.0F;
-		Random var23 = new Random(this.rand.nextLong());
-		if(var14 <= 0) {
-			int var24 = this.range * 16 - 16;
-			var14 = var24 - var23.nextInt(var24 / 4);
-		}
-
-		boolean var52 = false;
-		if(var13 == -1) {
-			var13 = var14 / 2;
-			var52 = true;
-		}
-
-		int var25 = var23.nextInt(var14 / 2) + var14 / 4;
-
-		for(boolean var26 = var23.nextInt(6) == 0; var13 < var14; ++var13) {
-			double var27 = 1.5D + (double)(MathHelper.sin((float)var13 * (float)Math.PI / (float)var14) * var10 * 1.0F);
-			double var29 = var27 * var15;
-			float var31 = MathHelper.cos(var12);
-			float var32 = MathHelper.sin(var12);
-			var4 += (double)(MathHelper.cos(var11) * var31);
-			var6 += (double)var32;
-			var8 += (double)(MathHelper.sin(var11) * var31);
-			if(var26) {
-				var12 *= 0.92F;
+	protected void generateCaveNode(int x, int z, byte[] data, double double4, double double5, double double6, float float7, float float8, float float9, int integer10, int integer11, double double12) {
+		double d17 = (double)(x * 16 + 8);
+		double d19 = (double)(z * 16 + 8);
+		float f21 = 0.0F;
+		float f22 = 0.0F;
+		Random random23 = new Random(this.rand.nextLong());
+		if(integer11 <= 0) {
+			int i24 = this.range * 16 - 16;
+			integer11 = i24 - random23.nextInt(i24 / 4);
+		}
+
+		boolean z60 = false;
+		if(integer10 == -1) {
+			integer10 = integer11 / 2;
+			z60 = true;
+		}
+
+		int i25 = random23.nextInt(integer11 / 2) + integer11 / 4;
+
+		for(boolean z26 = random23.nextInt(6) == 0; integer10 < integer11; ++integer10) {
+			double d27 = 1.5D + (double)(MathHelper.sin((float)integer10 * (float)Math.PI / (float)integer11) * float7 * 1.0F);
+			double d29 = d27 * double12;
+			float f31 = MathHelper.cos(float9);
+			float f32 = MathHelper.sin(float9);
+			double4 += (double)(MathHelper.cos(float8) * f31);
+			double5 += (double)f32;
+			double6 += (double)(MathHelper.sin(float8) * f31);
+			if(z26) {
+				float9 *= 0.92F;
 			} else {
-				var12 *= 0.7F;
+				float9 *= 0.7F;
 			}
 
-			var12 += var22 * 0.1F;
-			var11 += var21 * 0.1F;
-			var22 *= 0.9F;
-			var21 *= 12.0F / 16.0F;
-			var22 += (var23.nextFloat() - var23.nextFloat()) * var23.nextFloat() * 2.0F;
-			var21 += (var23.nextFloat() - var23.nextFloat()) * var23.nextFloat() * 4.0F;
-			if(!var52 && var13 == var25 && var10 > 1.0F) {
-				this.generateCaveNode(var1, var2, var3, var4, var6, var8, var23.nextFloat() * 0.5F + 0.5F, var11 - (float)Math.PI * 0.5F, var12 / 3.0F, var13, var14, 1.0D);
-				this.generateCaveNode(var1, var2, var3, var4, var6, var8, var23.nextFloat() * 0.5F + 0.5F, var11 + (float)Math.PI * 0.5F, var12 / 3.0F, var13, var14, 1.0D);
+			float9 += f22 * 0.1F;
+			float8 += f21 * 0.1F;
+			f22 *= 0.9F;
+			f21 *= 0.75F;
+			f22 += (random23.nextFloat() - random23.nextFloat()) * random23.nextFloat() * 2.0F;
+			f21 += (random23.nextFloat() - random23.nextFloat()) * random23.nextFloat() * 4.0F;
+			if(!z60 && integer10 == i25 && float7 > 1.0F) {
+				this.generateCaveNode(x, z, data, double4, double5, double6, random23.nextFloat() * 0.5F + 0.5F, float8 - (float)Math.PI / 2F, float9 / 3.0F, integer10, integer11, 1.0D);
+				this.generateCaveNode(x, z, data, double4, double5, double6, random23.nextFloat() * 0.5F + 0.5F, float8 + (float)Math.PI / 2F, float9 / 3.0F, integer10, integer11, 1.0D);
 				return;
 			}
 
-			if(var52 || var23.nextInt(4) != 0) {
-				double var33 = var4 - var17;
-				double var35 = var8 - var19;
-				double var37 = (double)(var14 - var13);
-				double var39 = (double)(var10 + 2.0F + 16.0F);
-				if(var33 * var33 + var35 * var35 - var37 * var37 > var39 * var39) {
+			if(z60 || random23.nextInt(4) != 0) {
+				double d33 = double4 - d17;
+				double d35 = double6 - d19;
+				double d37 = (double)(integer11 - integer10);
+				double d39 = (double)(float7 + 2.0F + 16.0F);
+				if(d33 * d33 + d35 * d35 - d37 * d37 > d39 * d39) {
 					return;
 				}
 
-				if(var4 >= var17 - 16.0D - var27 * 2.0D && var8 >= var19 - 16.0D - var27 * 2.0D && var4 <= var17 + 16.0D + var27 * 2.0D && var8 <= var19 + 16.0D + var27 * 2.0D) {
-					int var53 = MathHelper.floor_double(var4 - var27) - var1 * 16 - 1;
-					int var34 = MathHelper.floor_double(var4 + var27) - var1 * 16 + 1;
-					int var54 = MathHelper.floor_double(var6 - var29) - 1;
-					int var36 = MathHelper.floor_double(var6 + var29) + 1;
-					int var55 = MathHelper.floor_double(var8 - var27) - var2 * 16 - 1;
-					int var38 = MathHelper.floor_double(var8 + var27) - var2 * 16 + 1;
-					if(var53 < 0) {
-						var53 = 0;
-					}
-
-					if(var34 > 16) {
-						var34 = 16;
-					}
-
-					if(var54 < 1) {
-						var54 = 1;
-					}
-
-					if(var36 > 120) {
-						var36 = 120;
-					}
-
-					if(var55 < 0) {
-						var55 = 0;
-					}
-
-					if(var38 > 16) {
-						var38 = 16;
-					}
-
-					boolean var56 = false;
-
-					int var40;
-					int var43;
-					for(var40 = var53; !var56 && var40 < var34; ++var40) {
-						for(int var41 = var55; !var56 && var41 < var38; ++var41) {
-							for(int var42 = var36 + 1; !var56 && var42 >= var54 - 1; --var42) {
-								var43 = (var40 * 16 + var41) * 128 + var42;
-								if(var42 >= 0 && var42 < 128) {
-									if(var3[var43] == Block.waterMoving.blockID || var3[var43] == Block.waterStill.blockID) {
-										var56 = true;
+				if(double4 >= d17 - 16.0D - d27 * 2.0D && double6 >= d19 - 16.0D - d27 * 2.0D && double4 <= d17 + 16.0D + d27 * 2.0D && double6 <= d19 + 16.0D + d27 * 2.0D) {
+					int i41 = MathHelper.floor_double(double4 - d27) - x * 16 - 1;
+					int i42 = MathHelper.floor_double(double4 + d27) - x * 16 + 1;
+					int i43 = MathHelper.floor_double(double5 - d29) - 1;
+					int i44 = MathHelper.floor_double(double5 + d29) + 1;
+					int i45 = MathHelper.floor_double(double6 - d27) - z * 16 - 1;
+					int i46 = MathHelper.floor_double(double6 + d27) - z * 16 + 1;
+					if(i41 < 0) {
+						i41 = 0;
+					}
+
+					if(i42 > 16) {
+						i42 = 16;
+					}
+
+					if(i43 < 1) {
+						i43 = 1;
+					}
+
+					if(i44 > 120) {
+						i44 = 120;
+					}
+
+					if(i45 < 0) {
+						i45 = 0;
+					}
+
+					if(i46 > 16) {
+						i46 = 16;
+					}
+
+					boolean z47 = false;
+
+					int i48;
+					int i49;
+					for(i48 = i41; !z47 && i48 < i42; ++i48) {
+						for(int i50 = i45; !z47 && i50 < i46; ++i50) {
+							for(int i51 = i44 + 1; !z47 && i51 >= i43 - 1; --i51) {
+								i49 = (i48 * 16 + i50) * 128 + i51;
+								if(i51 >= 0 && i51 < 128) {
+									if(data[i49] == Block.waterMoving.blockID || data[i49] == Block.waterStill.blockID) {
+										z47 = true;
 									}
 
-									if(var42 != var54 - 1 && var40 != var53 && var40 != var34 - 1 && var41 != var55 && var41 != var38 - 1) {
-										var42 = var54;
+									if(i51 != i43 - 1 && i48 != i41 && i48 != i42 - 1 && i50 != i45 && i50 != i46 - 1) {
+										i51 = i43;
 									}
 								}
 							}
 						}
 					}
 
-					if(!var56) {
-						for(var40 = var53; var40 < var34; ++var40) {
-							double var57 = ((double)(var40 + var1 * 16) + 0.5D - var4) / var27;
-
-							for(var43 = var55; var43 < var38; ++var43) {
-								double var44 = ((double)(var43 + var2 * 16) + 0.5D - var8) / var27;
-								int var46 = (var40 * 16 + var43) * 128 + var36;
-								boolean var47 = false;
-
-								for(int var48 = var36 - 1; var48 >= var54; --var48) {
-									double var49 = ((double)var48 + 0.5D - var6) / var29;
-									if(var49 > -0.7D && var57 * var57 + var49 * var49 + var44 * var44 < 1.0D) {
-										byte var51 = var3[var46];
-										if(var51 == Block.grass.blockID) {
-											var47 = true;
+					if(!z47) {
+						for(i48 = i41; i48 < i42; ++i48) {
+							double d61 = ((double)(i48 + x * 16) + 0.5D - double4) / d27;
+
+							for(i49 = i45; i49 < i46; ++i49) {
+								double d52 = ((double)(i49 + z * 16) + 0.5D - double6) / d27;
+								int i54 = (i48 * 16 + i49) * 128 + i44;
+								boolean z55 = false;
+
+								for(int i56 = i44 - 1; i56 >= i43; --i56) {
+									double d57 = ((double)i56 + 0.5D - double5) / d29;
+									if(d57 > -0.7D && d61 * d61 + d57 * d57 + d52 * d52 < 1.0D) {
+										byte b59 = data[i54];
+										if(b59 == Block.grass.blockID) {
+											z55 = true;
 										}
 
-										if(var51 == Block.stone.blockID || var51 == Block.dirt.blockID || var51 == Block.grass.blockID) {
-											if(var48 < 10) {
-												var3[var46] = (byte)Block.lavaMoving.blockID;
+										if(b59 == Block.stone.blockID || b59 == Block.dirt.blockID || b59 == Block.grass.blockID) {
+											if(i56 < 10) {
+												data[i54] = (byte)Block.lavaMoving.blockID;
 											} else {
-												var3[var46] = 0;
-												if(var47 && var3[var46 - 1] == Block.dirt.blockID) {
-													var3[var46 - 1] = (byte)Block.grass.blockID;
+												data[i54] = 0;
+												if(z55 && data[i54 - 1] == Block.dirt.blockID) {
+													data[i54 - 1] = (byte)Block.grass.blockID;
 												}
 											}
 										}
 									}
 
-									--var46;
+									--i54;
 								}
 							}
 						}
 
-						if(var52) {
+						if(z60) {
 							break;
 						}
 					}
@@ -157,27 +157,27 @@
 
 	}
 
-	protected void recursiveGenerate(World var1, int var2, int var3, int var4, int var5, byte[] var6) {
-		int var7 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(40) + 1) + 1);
+	protected void recursiveGenerate(World world, int integer2, int integer3, int integer4, int integer5, byte[] data) {
+		int i7 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(40) + 1) + 1);
 		if(this.rand.nextInt(15) != 0) {
-			var7 = 0;
+			i7 = 0;
 		}
 
-		for(int var8 = 0; var8 < var7; ++var8) {
-			double var9 = (double)(var2 * 16 + this.rand.nextInt(16));
-			double var11 = (double)this.rand.nextInt(this.rand.nextInt(120) + 8);
-			double var13 = (double)(var3 * 16 + this.rand.nextInt(16));
-			int var15 = 1;
+		for(int i8 = 0; i8 < i7; ++i8) {
+			double d9 = (double)(integer2 * 16 + this.rand.nextInt(16));
+			double d11 = (double)this.rand.nextInt(this.rand.nextInt(120) + 8);
+			double d13 = (double)(integer3 * 16 + this.rand.nextInt(16));
+			int i15 = 1;
 			if(this.rand.nextInt(4) == 0) {
-				this.generateLargeCaveNode(var4, var5, var6, var9, var11, var13);
-				var15 += this.rand.nextInt(4);
+				this.generateLargeCaveNode(integer4, integer5, data, d9, d11, d13);
+				i15 += this.rand.nextInt(4);
 			}
 
-			for(int var16 = 0; var16 < var15; ++var16) {
-				float var17 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
-				float var18 = (this.rand.nextFloat() - 0.5F) * 2.0F / 8.0F;
-				float var19 = this.rand.nextFloat() * 2.0F + this.rand.nextFloat();
-				this.generateCaveNode(var4, var5, var6, var9, var11, var13, var19, var17, var18, 0, 0, 1.0D);
+			for(int i16 = 0; i16 < i15; ++i16) {
+				float f17 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
+				float f18 = (this.rand.nextFloat() - 0.5F) * 2.0F / 8.0F;
+				float f19 = this.rand.nextFloat() * 2.0F + this.rand.nextFloat();
+				this.generateCaveNode(integer4, integer5, data, d9, d11, d13, f19, f17, f18, 0, 0, 1.0D);
 			}
 		}
 
--- net/minecraft/src/Packet5PlayerInventory.java
+++ net/minecraft/src/Packet5PlayerInventory.java
@@ -11,53 +11,53 @@
 	public Packet5PlayerInventory() {
 	}
 
-	public Packet5PlayerInventory(int var1, ItemStack[] var2) {
-		this.inventoryType = var1;
-		this.inventory = new ItemStack[var2.length];
+	public Packet5PlayerInventory(int inventoryType, ItemStack[] stacks) {
+		this.inventoryType = inventoryType;
+		this.inventory = new ItemStack[stacks.length];
 
-		for(int var3 = 0; var3 < this.inventory.length; ++var3) {
-			this.inventory[var3] = var2[var3] == null ? null : var2[var3].copy();
+		for(int i3 = 0; i3 < this.inventory.length; ++i3) {
+			this.inventory[i3] = stacks[i3] == null ? null : stacks[i3].copy();
 		}
 
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.inventoryType = var1.readInt();
-		short var2 = var1.readShort();
-		this.inventory = new ItemStack[var2];
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.inventoryType = dataInputStream.readInt();
+		short s2 = dataInputStream.readShort();
+		this.inventory = new ItemStack[s2];
 
-		for(int var3 = 0; var3 < var2; ++var3) {
-			short var4 = var1.readShort();
-			if(var4 >= 0) {
-				byte var5 = var1.readByte();
-				short var6 = var1.readShort();
-				this.inventory[var3] = new ItemStack(var4, var5, var6);
+		for(int i3 = 0; i3 < s2; ++i3) {
+			int i4 = dataInputStream.readInt();
+			if(i4 >= 0) {
+				byte b5 = dataInputStream.readByte();
+				short s6 = dataInputStream.readShort();
+				this.inventory[i3] = new ItemStack(i4, b5, s6);
 			}
 		}
 
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.inventoryType);
-		var1.writeShort(this.inventory.length);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.inventoryType);
+		dataOutputStream.writeShort(this.inventory.length);
 
-		for(int var2 = 0; var2 < this.inventory.length; ++var2) {
-			if(this.inventory[var2] == null) {
-				var1.writeShort(-1);
+		for(int i2 = 0; i2 < this.inventory.length; ++i2) {
+			if(this.inventory[i2] == null) {
+				dataOutputStream.writeInt(-1);
 			} else {
-				var1.writeShort((short)this.inventory[var2].itemID);
-				var1.writeByte((byte)this.inventory[var2].stackSize);
-				var1.writeShort((short)this.inventory[var2].itemDmg);
+				dataOutputStream.writeInt(this.inventory[i2].itemID);
+				dataOutputStream.writeByte((byte)this.inventory[i2].stackSize);
+				dataOutputStream.writeShort((short)this.inventory[i2].itemDmg);
 			}
 		}
 
 	}
 
-	public void processPacket(NetHandler var1) {
-		var1.handlePlayerInventory(this);
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handlePlayerInventory(this);
 	}
 
 	public int getPacketSize() {
-		return 6 + this.inventory.length * 5;
+		return 6 + this.inventory.length * 7;
 	}
 }
--- net/minecraft/src/MetadataChunkBlock.java
+++ net/minecraft/src/MetadataChunkBlock.java
@@ -9,106 +9,106 @@
 	public int maxY;
 	public int maxZ;
 
-	public MetadataChunkBlock(EnumSkyBlock var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		this.skyBlock = var1;
-		this.x = var2;
-		this.y = var3;
-		this.z = var4;
-		this.maxX = var5;
-		this.maxY = var6;
-		this.maxZ = var7;
+	public MetadataChunkBlock(EnumSkyBlock skyBlock, int x, int y, int z, int maxX, int maxY, int maxZ) {
+		this.skyBlock = skyBlock;
+		this.x = x;
+		this.y = y;
+		this.z = z;
+		this.maxX = maxX;
+		this.maxY = maxY;
+		this.maxZ = maxZ;
 	}
 
-	public void updateLight(World var1) {
-		int var2 = this.maxX - this.x;
-		int var3 = this.maxY - this.y;
-		int var4 = this.maxZ - this.z;
-		int var5 = var2 * var3 * var4;
-		if(var5 <= -Short.MIN_VALUE) {
-			for(int var6 = this.x; var6 <= this.maxX; ++var6) {
-				for(int var7 = this.z; var7 <= this.maxZ; ++var7) {
-					if(var1.blockExists(var6, 0, var7)) {
-						for(int var8 = this.y; var8 <= this.maxY; ++var8) {
-							if(var8 >= 0 && var8 < 128) {
-								int var9 = var1.getSavedLightValue(this.skyBlock, var6, var8, var7);
-								boolean var10 = false;
-								int var11 = var1.getBlockId(var6, var8, var7);
-								int var12 = Block.lightOpacity[var11];
-								if(var12 == 0) {
-									var12 = 1;
+	public void updateLight(World world) {
+		int i2 = this.maxX - this.x;
+		int i3 = this.maxY - this.y;
+		int i4 = this.maxZ - this.z;
+		int i5 = i2 * i3 * i4;
+		if(i5 <= 32768) {
+			for(int i6 = this.x; i6 <= this.maxX; ++i6) {
+				for(int i7 = this.z; i7 <= this.maxZ; ++i7) {
+					if(world.blockExists(i6, 0, i7)) {
+						for(int i8 = this.y; i8 <= this.maxY; ++i8) {
+							if(i8 >= 0 && i8 < 128) {
+								int i9 = world.getSavedLightValue(this.skyBlock, i6, i8, i7);
+								boolean z10 = false;
+								int i11 = world.getBlockId(i6, i8, i7);
+								int i12 = Block.lightOpacity[i11];
+								if(i12 == 0) {
+									i12 = 1;
 								}
 
-								int var13 = 0;
+								int i13 = 0;
 								if(this.skyBlock == EnumSkyBlock.Sky) {
-									if(var1.canExistingBlockSeeTheSky(var6, var8, var7)) {
-										var13 = 15;
+									if(world.canExistingBlockSeeTheSky(i6, i8, i7)) {
+										i13 = 15;
 									}
 								} else if(this.skyBlock == EnumSkyBlock.Block) {
-									var13 = Block.lightValue[var11];
+									i13 = Block.lightValue[i11];
 								}
 
-								int var14;
-								int var20;
-								if(var12 >= 15 && var13 == 0) {
-									var20 = 0;
+								int i14;
+								int i15;
+								if(i12 >= 15 && i13 == 0) {
+									i15 = 0;
 								} else {
-									var14 = var1.getSavedLightValue(this.skyBlock, var6 - 1, var8, var7);
-									int var15 = var1.getSavedLightValue(this.skyBlock, var6 + 1, var8, var7);
-									int var16 = var1.getSavedLightValue(this.skyBlock, var6, var8 - 1, var7);
-									int var17 = var1.getSavedLightValue(this.skyBlock, var6, var8 + 1, var7);
-									int var18 = var1.getSavedLightValue(this.skyBlock, var6, var8, var7 - 1);
-									int var19 = var1.getSavedLightValue(this.skyBlock, var6, var8, var7 + 1);
-									var20 = var14;
-									if(var15 > var14) {
-										var20 = var15;
-									}
-
-									if(var16 > var20) {
-										var20 = var16;
-									}
-
-									if(var17 > var20) {
-										var20 = var17;
-									}
-
-									if(var18 > var20) {
-										var20 = var18;
-									}
-
-									if(var19 > var20) {
-										var20 = var19;
-									}
-
-									var20 -= var12;
-									if(var20 < 0) {
-										var20 = 0;
-									}
-
-									if(var13 > var20) {
-										var20 = var13;
+									i14 = world.getSavedLightValue(this.skyBlock, i6 - 1, i8, i7);
+									int i16 = world.getSavedLightValue(this.skyBlock, i6 + 1, i8, i7);
+									int i17 = world.getSavedLightValue(this.skyBlock, i6, i8 - 1, i7);
+									int i18 = world.getSavedLightValue(this.skyBlock, i6, i8 + 1, i7);
+									int i19 = world.getSavedLightValue(this.skyBlock, i6, i8, i7 - 1);
+									int i20 = world.getSavedLightValue(this.skyBlock, i6, i8, i7 + 1);
+									i15 = i14;
+									if(i16 > i14) {
+										i15 = i16;
+									}
+
+									if(i17 > i15) {
+										i15 = i17;
+									}
+
+									if(i18 > i15) {
+										i15 = i18;
+									}
+
+									if(i19 > i15) {
+										i15 = i19;
+									}
+
+									if(i20 > i15) {
+										i15 = i20;
+									}
+
+									i15 -= i12;
+									if(i15 < 0) {
+										i15 = 0;
+									}
+
+									if(i13 > i15) {
+										i15 = i13;
 									}
 								}
 
-								if(var9 != var20) {
-									var1.setLightValue(this.skyBlock, var6, var8, var7, var20);
-									var14 = var20 - 1;
-									if(var14 < 0) {
-										var14 = 0;
-									}
-
-									var1.neighborLightPropagationChanged(this.skyBlock, var6 - 1, var8, var7, var14);
-									var1.neighborLightPropagationChanged(this.skyBlock, var6, var8 - 1, var7, var14);
-									var1.neighborLightPropagationChanged(this.skyBlock, var6, var8, var7 - 1, var14);
-									if(var6 + 1 >= this.maxX) {
-										var1.neighborLightPropagationChanged(this.skyBlock, var6 + 1, var8, var7, var14);
-									}
-
-									if(var8 + 1 >= this.maxY) {
-										var1.neighborLightPropagationChanged(this.skyBlock, var6, var8 + 1, var7, var14);
-									}
-
-									if(var7 + 1 >= this.maxZ) {
-										var1.neighborLightPropagationChanged(this.skyBlock, var6, var8, var7 + 1, var14);
+								if(i9 != i15) {
+									world.setLightValue(this.skyBlock, i6, i8, i7, i15);
+									i14 = i15 - 1;
+									if(i14 < 0) {
+										i14 = 0;
+									}
+
+									world.neighborLightPropagationChanged(this.skyBlock, i6 - 1, i8, i7, i14);
+									world.neighborLightPropagationChanged(this.skyBlock, i6, i8 - 1, i7, i14);
+									world.neighborLightPropagationChanged(this.skyBlock, i6, i8, i7 - 1, i14);
+									if(i6 + 1 >= this.maxX) {
+										world.neighborLightPropagationChanged(this.skyBlock, i6 + 1, i8, i7, i14);
+									}
+
+									if(i8 + 1 >= this.maxY) {
+										world.neighborLightPropagationChanged(this.skyBlock, i6, i8 + 1, i7, i14);
+									}
+
+									if(i7 + 1 >= this.maxZ) {
+										world.neighborLightPropagationChanged(this.skyBlock, i6, i8, i7 + 1, i14);
 									}
 								}
 							}
@@ -116,55 +116,55 @@
 					}
 				}
 			}
-
 		}
+
 	}
 
-	public boolean getLightUpdated(int var1, int var2, int var3, int var4, int var5, int var6) {
-		if(var1 >= this.x && var2 >= this.y && var3 >= this.z && var4 <= this.maxX && var5 <= this.maxY && var6 <= this.maxZ) {
+	public boolean getLightUpdated(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		if(minX >= this.x && minY >= this.y && minZ >= this.z && maxX <= this.maxX && maxY <= this.maxY && maxZ <= this.maxZ) {
 			return true;
 		} else {
-			byte var7 = 1;
-			if(var1 >= this.x - var7 && var2 >= this.y - var7 && var3 >= this.z - var7 && var4 <= this.maxX + var7 && var5 <= this.maxY + var7 && var6 <= this.maxZ + var7) {
-				int var8 = this.maxX - this.x;
-				int var9 = this.maxY - this.y;
-				int var10 = this.maxZ - this.z;
-				if(var1 > this.x) {
-					var1 = this.x;
-				}
-
-				if(var2 > this.y) {
-					var2 = this.y;
-				}
-
-				if(var3 > this.z) {
-					var3 = this.z;
-				}
-
-				if(var4 < this.maxX) {
-					var4 = this.maxX;
-				}
-
-				if(var5 < this.maxY) {
-					var5 = this.maxY;
-				}
-
-				if(var6 < this.maxZ) {
-					var6 = this.maxZ;
-				}
-
-				int var11 = var4 - var1;
-				int var12 = var5 - var2;
-				int var13 = var6 - var3;
-				int var14 = var8 * var9 * var10;
-				int var15 = var11 * var12 * var13;
-				if(var15 - var14 <= 2) {
-					this.x = var1;
-					this.y = var2;
-					this.z = var3;
-					this.maxX = var4;
-					this.maxY = var5;
-					this.maxZ = var6;
+			byte b7 = 1;
+			if(minX >= this.x - b7 && minY >= this.y - b7 && minZ >= this.z - b7 && maxX <= this.maxX + b7 && maxY <= this.maxY + b7 && maxZ <= this.maxZ + b7) {
+				int i8 = this.maxX - this.x;
+				int i9 = this.maxY - this.y;
+				int i10 = this.maxZ - this.z;
+				if(minX > this.x) {
+					minX = this.x;
+				}
+
+				if(minY > this.y) {
+					minY = this.y;
+				}
+
+				if(minZ > this.z) {
+					minZ = this.z;
+				}
+
+				if(maxX < this.maxX) {
+					maxX = this.maxX;
+				}
+
+				if(maxY < this.maxY) {
+					maxY = this.maxY;
+				}
+
+				if(maxZ < this.maxZ) {
+					maxZ = this.maxZ;
+				}
+
+				int i11 = maxX - minX;
+				int i12 = maxY - minY;
+				int i13 = maxZ - minZ;
+				int i14 = i8 * i9 * i10;
+				int i15 = i11 * i12 * i13;
+				if(i15 - i14 <= 2) {
+					this.x = minX;
+					this.y = minY;
+					this.z = minZ;
+					this.maxX = maxX;
+					this.maxY = maxY;
+					this.maxZ = maxZ;
 					return true;
 				}
 			}
--- net/minecraft/src/EntitySheep.java
+++ net/minecraft/src/EntitySheep.java
@@ -3,36 +3,35 @@
 public class EntitySheep extends EntityAnimal {
 	public boolean sheared = false;
 
-	public EntitySheep(World var1) {
-		super(var1);
-		this.texture = "/mob/sheep.png";
+	public EntitySheep(World world) {
+		super(world);
 		this.setSize(0.9F, 1.3F);
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
-		if(!this.sheared && var1 instanceof EntityLiving) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
+		if(!this.sheared && entity instanceof EntityLiving) {
 			this.sheared = true;
-			int var3 = 1 + this.rand.nextInt(3);
+			int i3 = 1 + this.rand.nextInt(3);
 
-			for(int var4 = 0; var4 < var3; ++var4) {
-				EntityItem var5 = this.entityDropItem(Block.cloth.blockID, 1, 1.0F);
-				var5.motionY += (double)(this.rand.nextFloat() * 0.05F);
-				var5.motionX += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
-				var5.motionZ += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+			for(int i4 = 0; i4 < i3; ++i4) {
+				EntityItem entityItem5 = this.entityDropItem(Block.cloth.blockID, 1, 1.0F);
+				entityItem5.motionY += (double)(this.rand.nextFloat() * 0.05F);
+				entityItem5.motionX += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+				entityItem5.motionZ += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
 			}
 		}
 
-		return super.attackEntityFrom(var1, var2);
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setBoolean("Sheared", this.sheared);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.sheared = var1.getBoolean("Sheared");
+		return super.attackEntityFrom(entity, damage);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+		nbttagcompound.setBoolean("Sheared", this.sheared);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+		this.sheared = nbttagcompound.getBoolean("Sheared");
 	}
 
 	protected String getLivingSound() {
--- /dev/null
+++ net/minecraft/src/ItemSpear.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class ItemSpear extends Item {
+	public ItemSpear(int itemID) {
+		super(itemID);
+		this.maxStackSize = 8;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		if(entityPlayer.inventory.consumeInventoryItem(ExtItems.Spear.shiftedIndex)) {
+			worldObj.playSoundAtEntity(entityPlayer, "random.bow", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+			worldObj.spawnEntityInWorld(new EntitySpear(worldObj, entityPlayer));
+		}
+
+		return itemStack;
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenHouseSmall.java
@@ -1,0 +1,363 @@
+package net.minecraft.src;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Random;
+import java.util.Map.Entry;
+
+public class WorldGenHouseSmall extends WorldGenerator {
+	public static int field_7489_9mZ40b5UT5A7wjCM6BWsQ5ZXS10Balan4A2y7HDWECkBl5xNuPga40ikR2U2 = 25;
+	private final Map field_7488_5NLuOxuaPQ8zp2P2730Wc5d0lptL7LmR7qAT7fP8USRDBek7AZAwTxjUhs7d = new HashMap();
+	private final HashMap field_7490_8Ma36x4CFuWYJ56M69X2YdI5uwXL6bQIRAUqfOBiG4Rs9Wr0e1pt9p84Z8YR = new HashMap();
+
+	private WorldGenHouseSmallUnknownClass5 func_7487_6o5VGFo0g1gkdA8peMK87hNO7E9yPq176qNR0CNp461qPUBi4BL3qr57DY8c(World cv, Random random, int integer3, int integer4, int integer5, WorldGenHouseSmallUnknownClass2 hc, int integer7) {
+		return this.func_7485_0Klkg2DTtukztLh1mPKoZ0xXcoHAqrwG2r6356tSd2sflT3g45K81MNQORzx(cv, random, integer3, integer4, integer5, hc, integer7, new WorldUnknownClass3(0));
+	}
+
+	private WorldGenHouseSmallUnknownClass5 func_7485_0Klkg2DTtukztLh1mPKoZ0xXcoHAqrwG2r6356tSd2sflT3g45K81MNQORzx(World cv, Random random, int integer3, int integer4, int integer5, WorldGenHouseSmallUnknownClass2 hc, int integer7, WorldUnknownClass3 is) {
+		if(this.field_7488_5NLuOxuaPQ8zp2P2730Wc5d0lptL7LmR7qAT7fP8USRDBek7AZAwTxjUhs7d.containsKey(hc)) {
+			return null;
+		} else {
+			this.field_7488_5NLuOxuaPQ8zp2P2730Wc5d0lptL7LmR7qAT7fP8USRDBek7AZAwTxjUhs7d.put(hc, (Object)null);
+			if(cv.getBlockId(integer3, integer4, integer5) != 0) {
+				return null;
+			} else {
+				while(cv.getBlockId(integer3, integer4, integer5) == 0) {
+					--integer4;
+					if(integer4 <= 0) {
+						return null;
+					}
+				}
+
+				if(integer4 > 104) {
+					return null;
+				} else {
+					integer4 /= 4;
+					++integer4;
+					integer4 *= 4;
+					int i9 = 3 + random.nextInt(3);
+					int i10 = (116 - integer4) / 4 - 2;
+					if(i10 <= 0) {
+						return null;
+					} else {
+						int i11 = 2 + random.nextInt(i10);
+						WorldGenHouseSmallUnknownClass5 worldGenHouseSmallUnknownClass512 = new WorldGenHouseSmallUnknownClass5(i9, i11, integer3, integer4, integer5);
+
+						int i13;
+						int i14;
+						int i15;
+						for(i13 = -i9 + 1; i13 <= i9 - 1; ++i13) {
+							for(i14 = 1; i14 <= 3; ++i14) {
+								for(i15 = 0; i15 <= i11; ++i15) {
+									cv.setBlock(i13 + integer3, integer4 + 4 * i15 + i14, -i9 + 1 + integer5, ExtBlocks.SlateBricks.blockID);
+									cv.setBlock(i13 + integer3, integer4 + 4 * i15 + i14, i9 - 1 + integer5, ExtBlocks.SlateBricks.blockID);
+									cv.setBlock(-i9 + 1 + integer3, integer4 + 4 * i15 + i14, i13 + integer5, ExtBlocks.SlateBricks.blockID);
+									cv.setBlock(i9 - 1 + integer3, integer4 + 4 * i15 + i14, i13 + integer5, ExtBlocks.SlateBricks.blockID);
+								}
+							}
+						}
+
+						for(i13 = -i9; i13 <= i9; ++i13) {
+							for(i14 = -i9; i14 <= i9; ++i14) {
+								for(i15 = 0; i15 <= i11 + 1; ++i15) {
+									cv.setBlock(i13 + integer3, integer4 + 4 * i15, i14 + integer5, ExtBlocks.SmoothStone.blockID);
+								}
+							}
+						}
+
+						for(i13 = 1; i13 <= 3; ++i13) {
+							for(i14 = 0; i14 <= i11; ++i14) {
+								cv.setBlock(i9 + integer3, integer4 + 4 * i14 + i13, -i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+								cv.setBlock(-i9 + integer3, integer4 + 4 * i14 + i13, i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+								cv.setBlock(-i9 + integer3, integer4 + 4 * i14 + i13, -i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+								cv.setBlock(i9 + integer3, integer4 + 4 * i14 + i13, i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+							}
+						}
+
+						for(i13 = -i9 + 1; i13 <= i9 - 1; ++i13) {
+							for(i14 = -i9 + 1; i14 <= i9 - 1; ++i14) {
+								for(i15 = integer4 - 1; i15 > 0 && cv.getBlockId(i13 + integer3, i15, i14 + integer5) == 0; --i15) {
+									cv.setBlock(i13 + integer3, i15, i14 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+								}
+							}
+						}
+
+						int i16;
+						int i17;
+						int i18;
+						for(i13 = 0; i13 < i11; ++i13) {
+							i14 = integer4 + 1 + 4 * i13;
+							EnumHouseSmall[] enumHouseSmall28 = new EnumHouseSmall[4];
+							worldGenHouseSmallUnknownClass512.field_8016_00S9ETnTDJql3GiE4tTM9T26ojtqC5jUm718I14CFlS94pq1iq83rKQD83TS.add(enumHouseSmall28);
+
+							for(i16 = 0; i16 < 4; ++i16) {
+								enumHouseSmall28[i16] = EnumHouseSmall.NORMAL;
+							}
+
+							for(i16 = 0; i16 < 4; ++i16) {
+								i17 = 0;
+								i18 = (i16 & 2) - 1;
+								if(i16 % 2 == 1) {
+									i17 = i18;
+									i18 = 0;
+								}
+
+								int i19 = i17 * (i9 - 1) + integer3;
+								int i20 = i18 * (i9 - 1) + integer5;
+								switch(random.nextInt(5)) {
+								case 1:
+									cv.setBlock(i19, i14 + 1, i20, ExtBlocks.WireframeBlock.blockID);
+									enumHouseSmall28[i16] = EnumHouseSmall.WINDOW;
+									break;
+								case 2:
+									WorldGenHouseSmallUnknownClass2 worldGenHouseSmallUnknownClass221 = new WorldGenHouseSmallUnknownClass2(hc.func_8067_8RZE0BvtoHwqL73YktylDNPYm3uL81Mee94920Z6o9GUBvF9wp2v0d3G1L3S() + i17, hc.func_8069_27t5YHOBGYS1J2U6L0X4mfU1Vfshr44NEj6oe89zoU0U14gUYpDvHB4HAAS0() + i18);
+									if(!this.field_7488_5NLuOxuaPQ8zp2P2730Wc5d0lptL7LmR7qAT7fP8USRDBek7AZAwTxjUhs7d.containsKey(worldGenHouseSmallUnknownClass221)) {
+										enumHouseSmall28[i16] = EnumHouseSmall.DOOR;
+
+										for(int i22 = 0; i22 <= integer7 / 2 + 1; ++i22) {
+											if(random.nextInt(integer7 + 1) == 0 && ((Integer)is.field_8152_26ZqoVQu43lS16yY8fn958M7NWgD0OxEIby6SV2c2TX00gBZKX2bNgLyQpKb).intValue() < field_7489_9mZ40b5UT5A7wjCM6BWsQ5ZXS10Balan4A2y7HDWECkBl5xNuPga40ikR2U2) {
+												Integer integer24 = (Integer)is.field_8152_26ZqoVQu43lS16yY8fn958M7NWgD0OxEIby6SV2c2TX00gBZKX2bNgLyQpKb;
+												is.field_8152_26ZqoVQu43lS16yY8fn958M7NWgD0OxEIby6SV2c2TX00gBZKX2bNgLyQpKb = ((Integer)is.field_8152_26ZqoVQu43lS16yY8fn958M7NWgD0OxEIby6SV2c2TX00gBZKX2bNgLyQpKb).intValue() + 1;
+												int i23 = i9 + 8 + random.nextInt(3);
+												WorldGenHouseSmallUnknownClass5 worldGenHouseSmallUnknownClass529 = this.func_7485_0Klkg2DTtukztLh1mPKoZ0xXcoHAqrwG2r6356tSd2sflT3g45K81MNQORzx(cv, random, integer3 + i17 * i23, 128, integer5 + i18 * i23, worldGenHouseSmallUnknownClass221, integer7 + 1, is);
+												if(worldGenHouseSmallUnknownClass529 == null || worldGenHouseSmallUnknownClass529.field_8018_439Ebv9ru7MFNvB67DM5CvpM67n9ebUShsh7xoObuxbKXo49i2ZYEKWuiOmA + (worldGenHouseSmallUnknownClass529.field_8019_98sy7L45ouSWLfH1W247dUJ16ffQtU6ZV4q8vk547CKk5Jf3ppQZtrc42RbH + 1) * 4 < i14) {
+													break;
+												}
+
+												cv.setBlock(i19, i14, i20, 0);
+												cv.setBlock(i19, i14 + 1, i20, 0);
+
+												for(int i25 = i9; i25 < i23 - worldGenHouseSmallUnknownClass529.field_8020_66h60M61j67HnpM3qFHNo2GN62MmhApUr2QOW9cTg435X74vh34j6qOJ2tgt + 1; ++i25) {
+													i19 += i17;
+													i20 += i18;
+
+													for(int i26 = -1; i26 <= 1; ++i26) {
+														for(int i27 = -1; i27 <= 1; ++i27) {
+															if(cv.getBlockId(i19 + i26, i14 - 1, i20 + i27) == 0) {
+																cv.setBlock(i19 + i26, i14 - 1, i20 + i27, ExtBlocks.SlatePillar.blockID);
+															}
+														}
+													}
+												}
+
+												i19 += i17;
+												i20 += i18;
+												cv.setBlock(i19, i14, i20, 0);
+												cv.setBlock(i19, i14 + 1, i20, 0);
+												break;
+											}
+										}
+									}
+								}
+							}
+						}
+
+						i13 = integer4 + (i11 + 1) * 4 + 1;
+
+						for(i14 = 0; i14 <= 1; ++i14) {
+							cv.setBlock(i9 + integer3, i13 + i14, -i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+							cv.setBlock(-i9 + integer3, i13 + i14, i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+							cv.setBlock(-i9 + integer3, i13 + i14, -i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+							cv.setBlock(i9 + integer3, i13 + i14, i9 + integer5, ExtBlocks.FlamewoodPillar.blockID);
+						}
+
+						if(random.nextInt(10) == 0) {
+							cv.setBlock(integer3, i13 + i9, integer5, ExtBlocks.essenceFountain.blockID);
+							cv.setBlock(integer3, i13 + i9 - 1, integer5, ExtBlocks.FlamewoodPillar.blockID);
+
+							for(i14 = 0; i14 < i9 - 1; ++i14) {
+								for(i15 = -i9 + 1 + i14; i15 <= i9 - 1 - i14; ++i15) {
+									for(i16 = -i9 + 1 + i14; i16 <= i9 - 1 - i14; ++i16) {
+										cv.setBlock(integer3 + i15, i13 + i14, integer5 + i16, ExtBlocks.SlateBeacon.blockID);
+									}
+								}
+							}
+						} else {
+							for(i14 = 0; i14 <= 1; ++i14) {
+								cv.setBlock(i9 - 1 + integer3, i13 + i14, -i9 + 1 + integer5, ExtBlocks.SlateBricks.blockID);
+								cv.setBlock(-i9 + 1 + integer3, i13 + i14, i9 - 1 + integer5, ExtBlocks.SlateBricks.blockID);
+								cv.setBlock(-i9 + 1 + integer3, i13 + i14, -i9 + 1 + integer5, ExtBlocks.SlateBricks.blockID);
+								cv.setBlock(i9 - 1 + integer3, i13 + i14, i9 - 1 + integer5, ExtBlocks.SlateBricks.blockID);
+							}
+
+							cv.setBlock(i9 - 2 + integer3, i13, -i9 + 1 + integer5, ExtBlocks.SlateBricks.blockID);
+							cv.setBlock(-i9 + 2 + integer3, i13, i9 - 1 + integer5, ExtBlocks.SlateBricks.blockID);
+							cv.setBlock(-i9 + 2 + integer3, i13, -i9 + 1 + integer5, ExtBlocks.SlateBricks.blockID);
+							cv.setBlock(i9 - 2 + integer3, i13, i9 - 1 + integer5, ExtBlocks.SlateBricks.blockID);
+							cv.setBlock(i9 - 1 + integer3, i13, -i9 + 2 + integer5, ExtBlocks.SlateBricks.blockID);
+							cv.setBlock(-i9 + 1 + integer3, i13, i9 - 2 + integer5, ExtBlocks.SlateBricks.blockID);
+							cv.setBlock(-i9 + 1 + integer3, i13, -i9 + 2 + integer5, ExtBlocks.SlateBricks.blockID);
+							cv.setBlock(i9 - 1 + integer3, i13, i9 - 2 + integer5, ExtBlocks.SlateBricks.blockID);
+						}
+
+						for(i13 = 0; i13 <= i11; ++i13) {
+							if(i11 != i13) {
+								i14 = random.nextInt(4);
+								i15 = (1 + random.nextInt(i9 - 2)) * (random.nextInt(2) * 2 - 1);
+								i16 = 0;
+								i17 = 0;
+								switch(i14) {
+								case 0:
+									i16 = integer3 + i15;
+									i17 = integer5 + i9 - 2;
+									break;
+								case 1:
+									i16 = integer3 + i15;
+									i17 = integer5 - i9 + 2;
+									break;
+								case 2:
+									i16 = integer3 + i9 - 2;
+									i17 = integer5 + i15;
+									break;
+								case 3:
+									i16 = integer3 - i9 + 2;
+									i17 = integer5 + i15;
+								}
+
+								for(i18 = 1; i18 <= 4; ++i18) {
+									cv.setBlock(i16, integer4 + i18 + i13 * 4, i17, Block.ladder.blockID);
+									cv.setBlockMetadata(i16, integer4 + i18 + i13 * 4, i17, i14 + 2);
+								}
+							}
+						}
+
+						this.field_7488_5NLuOxuaPQ8zp2P2730Wc5d0lptL7LmR7qAT7fP8USRDBek7AZAwTxjUhs7d.put(hc, worldGenHouseSmallUnknownClass512);
+						return worldGenHouseSmallUnknownClass512;
+					}
+				}
+			}
+		}
+	}
+
+	private void func_7484_82X28rm7gUKCjDjOatFtdEgwQRo0HV9gOmc7F1nzt52xcT9TzC1v1z3OvqR6(World cv, Random random) {
+		Iterator iterator3 = this.field_7488_5NLuOxuaPQ8zp2P2730Wc5d0lptL7LmR7qAT7fP8USRDBek7AZAwTxjUhs7d.entrySet().iterator();
+
+		while(true) {
+			label119:
+			while(true) {
+				Entry map$Entry4;
+				do {
+					do {
+						if(!iterator3.hasNext()) {
+							return;
+						}
+
+						map$Entry4 = (Entry)iterator3.next();
+					} while(map$Entry4.getValue() == null);
+				} while(((WorldGenHouseSmallUnknownClass5)map$Entry4.getValue()).field_8019_98sy7L45ouSWLfH1W247dUJ16ffQtU6ZV4q8vk547CKk5Jf3ppQZtrc42RbH < 8);
+
+				WorldGenHouseSmallUnknownClass5 worldGenHouseSmallUnknownClass55 = (WorldGenHouseSmallUnknownClass5)map$Entry4.getValue();
+
+				for(int i6 = 4; i6 < worldGenHouseSmallUnknownClass55.field_8019_98sy7L45ouSWLfH1W247dUJ16ffQtU6ZV4q8vk547CKk5Jf3ppQZtrc42RbH - 3; ++i6) {
+					label114:
+					for(int i7 = 0; i7 < 4; ++i7) {
+						int i8;
+						for(i8 = 0; i8 < 3; ++i8) {
+							if(((EnumHouseSmall[])worldGenHouseSmallUnknownClass55.field_8016_00S9ETnTDJql3GiE4tTM9T26ojtqC5jUm718I14CFlS94pq1iq83rKQD83TS.get(i6 + i8))[i7] != EnumHouseSmall.NORMAL) {
+								continue label114;
+							}
+						}
+
+						i8 = 0;
+						int i9 = (i7 & 2) - 1;
+						if(i7 % 2 == 1) {
+							i8 = i9;
+							i9 = 0;
+						}
+
+						WorldGenHouseSmallUnknownClass2 worldGenHouseSmallUnknownClass210 = new WorldGenHouseSmallUnknownClass2((WorldGenHouseSmallUnknownClass2)map$Entry4.getKey());
+						worldGenHouseSmallUnknownClass210.func_8068_7bKOHFfIAAjCt0KOA2sQbh9iJY8V43s5475jQOSLx7Qt17LnSf3ryxfV7081(i8, i9);
+						WorldGenHouseSmallUnknownClass5 worldGenHouseSmallUnknownClass511 = (WorldGenHouseSmallUnknownClass5)this.field_7488_5NLuOxuaPQ8zp2P2730Wc5d0lptL7LmR7qAT7fP8USRDBek7AZAwTxjUhs7d.get(worldGenHouseSmallUnknownClass210);
+						int i12;
+						if(worldGenHouseSmallUnknownClass511 != null) {
+							i12 = Math.max(Math.abs(worldGenHouseSmallUnknownClass511.field_8015_5wTB8HwGbAxDeZ1JBLH9G2hdow6R604Z7h6Ejwe1G26jzQmTP5ci8lbx4TbO - worldGenHouseSmallUnknownClass55.field_8015_5wTB8HwGbAxDeZ1JBLH9G2hdow6R604Z7h6Ejwe1G26jzQmTP5ci8lbx4TbO), Math.abs(worldGenHouseSmallUnknownClass511.field_8015_5wTB8HwGbAxDeZ1JBLH9G2hdow6R604Z7h6Ejwe1G26jzQmTP5ci8lbx4TbO - worldGenHouseSmallUnknownClass55.field_8015_5wTB8HwGbAxDeZ1JBLH9G2hdow6R604Z7h6Ejwe1G26jzQmTP5ci8lbx4TbO));
+							if(i12 - worldGenHouseSmallUnknownClass511.field_8020_66h60M61j67HnpM3qFHNo2GN62MmhApUr2QOW9cTg435X74vh34j6qOJ2tgt - worldGenHouseSmallUnknownClass55.field_8020_66h60M61j67HnpM3qFHNo2GN62MmhApUr2QOW9cTg435X74vh34j6qOJ2tgt < 5) {
+								continue;
+							}
+						}
+
+						if(random.nextInt(10) == 0) {
+							int i22 = i8 * worldGenHouseSmallUnknownClass55.field_8020_66h60M61j67HnpM3qFHNo2GN62MmhApUr2QOW9cTg435X74vh34j6qOJ2tgt + worldGenHouseSmallUnknownClass55.field_8015_5wTB8HwGbAxDeZ1JBLH9G2hdow6R604Z7h6Ejwe1G26jzQmTP5ci8lbx4TbO;
+							int i23 = i9 * worldGenHouseSmallUnknownClass55.field_8020_66h60M61j67HnpM3qFHNo2GN62MmhApUr2QOW9cTg435X74vh34j6qOJ2tgt + worldGenHouseSmallUnknownClass55.field_8017_3W4n2bi787BZ73kcxketEq3mErN6M23m069LdrN68Om2V0XQk7AYJKI6J5lf;
+							i12 = i9;
+							int i13 = i8;
+							cv.setBlock(i22, worldGenHouseSmallUnknownClass55.field_8018_439Ebv9ru7MFNvB67DM5CvpM67n9ebUShsh7xoObuxbKXo49i2ZYEKWuiOmA + i6 * 4 + 2, i23, ExtBlocks.ElderPillar.blockID);
+							cv.setBlock(i22, worldGenHouseSmallUnknownClass55.field_8018_439Ebv9ru7MFNvB67DM5CvpM67n9ebUShsh7xoObuxbKXo49i2ZYEKWuiOmA + i6 * 4 + 8, i23, ExtBlocks.ElderPillar.blockID);
+							cv.setBlock(i22 + i8, worldGenHouseSmallUnknownClass55.field_8018_439Ebv9ru7MFNvB67DM5CvpM67n9ebUShsh7xoObuxbKXo49i2ZYEKWuiOmA + i6 * 4 + 2, i23 + i9, ExtBlocks.ElderPillar.blockID);
+							cv.setBlock(i22 + i8, worldGenHouseSmallUnknownClass55.field_8018_439Ebv9ru7MFNvB67DM5CvpM67n9ebUShsh7xoObuxbKXo49i2ZYEKWuiOmA + i6 * 4 + 8, i23 + i9, ExtBlocks.ElderPillar.blockID);
+
+							int[] i14;
+							for(i14 = new int[]{random.nextInt(5) + 1, random.nextInt(5) + 1, random.nextInt(5) + 1, random.nextInt(5) + 1}; Math.abs(i14[0] - i14[2]) == 1; i14[2] = random.nextInt(5) + 1) {
+								i14[0] = random.nextInt(5) + 1;
+							}
+
+							while(Math.abs(i14[1] - i14[3]) == 1) {
+								i14[1] = random.nextInt(5) + 1;
+								i14[3] = random.nextInt(5) + 1;
+							}
+
+							for(int i15 = worldGenHouseSmallUnknownClass55.field_8018_439Ebv9ru7MFNvB67DM5CvpM67n9ebUShsh7xoObuxbKXo49i2ZYEKWuiOmA + i6 * 4 + 1; i15 <= worldGenHouseSmallUnknownClass55.field_8018_439Ebv9ru7MFNvB67DM5CvpM67n9ebUShsh7xoObuxbKXo49i2ZYEKWuiOmA + i6 * 4 + 9; ++i15) {
+								for(int i16 = 0; i16 < 3; ++i16) {
+									boolean z17 = i16 == 1 && i15 != worldGenHouseSmallUnknownClass55.field_8018_439Ebv9ru7MFNvB67DM5CvpM67n9ebUShsh7xoObuxbKXo49i2ZYEKWuiOmA + i6 * 4 + 1 && i15 != worldGenHouseSmallUnknownClass55.field_8018_439Ebv9ru7MFNvB67DM5CvpM67n9ebUShsh7xoObuxbKXo49i2ZYEKWuiOmA + i6 * 4 + 9;
+									cv.setBlock(i22 + i8 * (2 + i16), i15, i23 + i9 * (2 + i16), !z17 ? ExtBlocks.ElderSmoothStone.blockID : ExtBlocks.ElderDecoratedStone.blockID);
+									if(z17) {
+										for(int i18 = -1; i18 <= 1; i18 += 2) {
+											byte b19 = 0;
+											i12 *= i18;
+											i13 *= i18;
+											if(i12 == 1) {
+												b19 = 5;
+											} else if(i12 == -1) {
+												b19 = 4;
+											} else if(i13 == 1) {
+												b19 = 3;
+											} else if(i13 == -1) {
+												b19 = 2;
+											}
+
+											i12 *= i18;
+											i13 *= i18;
+											int i20 = i15 - (worldGenHouseSmallUnknownClass55.field_8018_439Ebv9ru7MFNvB67DM5CvpM67n9ebUShsh7xoObuxbKXo49i2ZYEKWuiOmA + i6 * 4 + 1);
+											if(i20 != i14[i18 + 1] && i20 != i14[i18 + 2]) {
+												int i21 = random.nextBoolean() ? ExtBlocks.SolarPlate.blockID : ExtBlocks.TrinityPlate.blockID;
+												if(i15 > 0 && i15 < 128) {
+													cv.setBlockAndMetadataWithNotify(i22 + i8 * (2 + i16) + i12 * i18, i15, i23 + i9 * (2 + i16) + i13 * i18, i21 + random.nextInt(5), b19);
+												}
+											}
+										}
+									}
+								}
+							}
+							continue label119;
+						}
+					}
+				}
+			}
+		}
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		if(Math.abs(x) < 64 && Math.abs(z) < 64) {
+			return false;
+		} else {
+			this.func_7487_6o5VGFo0g1gkdA8peMK87hNO7E9yPq176qNR0CNp461qPUBi4BL3qr57DY8c(world, rand, x, y, z, new WorldGenHouseSmallUnknownClass2(GuiIngame.func_7857_8ED9sg5AQlLD6Mfxxd60I3K4hLhB2zy0FSJfCv9vgt314wuNc823o2P1rBuW(x, 196), GuiIngame.func_7857_8ED9sg5AQlLD6Mfxxd60I3K4hLhB2zy0FSJfCv9vgt314wuNc823o2P1rBuW(z, 196)), 0);
+			this.func_7484_82X28rm7gUKCjDjOatFtdEgwQRo0HV9gOmc7F1nzt52xcT9TzC1v1z3OvqR6(world, rand);
+			return true;
+		}
+	}
+
+	private WorldGenHouseSmallUnknownClass func_7486_6t88N3RW2k5W3F96v4T3OX09ExcaFZUcEdi25721eFi50u55t2qxU7eay14F(int integer1, int integer2, Random random) {
+		WorldGenHouseSmallUnknownClass2 worldGenHouseSmallUnknownClass24 = new WorldGenHouseSmallUnknownClass2(integer1 / 1000, integer2 / 1000);
+		if(this.field_7490_8Ma36x4CFuWYJ56M69X2YdI5uwXL6bQIRAUqfOBiG4Rs9Wr0e1pt9p84Z8YR.containsKey(worldGenHouseSmallUnknownClass24)) {
+			return (WorldGenHouseSmallUnknownClass)this.field_7490_8Ma36x4CFuWYJ56M69X2YdI5uwXL6bQIRAUqfOBiG4Rs9Wr0e1pt9p84Z8YR.get(worldGenHouseSmallUnknownClass24);
+		} else {
+			WorldGenHouseSmallUnknownClass worldGenHouseSmallUnknownClass5 = new WorldGenHouseSmallUnknownClass(random, worldGenHouseSmallUnknownClass24);
+			this.field_7490_8Ma36x4CFuWYJ56M69X2YdI5uwXL6bQIRAUqfOBiG4Rs9Wr0e1pt9p84Z8YR.put(worldGenHouseSmallUnknownClass24, worldGenHouseSmallUnknownClass5);
+			return worldGenHouseSmallUnknownClass5;
+		}
+	}
+
+	public WorldGenHouseSmall(Random random) {
+	}
+}
--- net/minecraft/src/WorldGenReed.java
+++ net/minecraft/src/WorldGenReed.java
@@ -3,17 +3,17 @@
 import java.util.Random;
 
 public class WorldGenReed extends WorldGenerator {
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		for(int var6 = 0; var6 < 20; ++var6) {
-			int var7 = var3 + var2.nextInt(4) - var2.nextInt(4);
-			int var8 = var4;
-			int var9 = var5 + var2.nextInt(4) - var2.nextInt(4);
-			if(var1.getBlockId(var7, var4, var9) == 0 && (var1.getBlockMaterial(var7 - 1, var4 - 1, var9) == Material.water || var1.getBlockMaterial(var7 + 1, var4 - 1, var9) == Material.water || var1.getBlockMaterial(var7, var4 - 1, var9 - 1) == Material.water || var1.getBlockMaterial(var7, var4 - 1, var9 + 1) == Material.water)) {
-				int var10 = 2 + var2.nextInt(var2.nextInt(3) + 1);
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 20; ++i6) {
+			int i7 = x + rand.nextInt(4) - rand.nextInt(4);
+			int i8 = y;
+			int i9 = z + rand.nextInt(4) - rand.nextInt(4);
+			if(world.getBlockId(i7, y, i9) == 0 && (world.getBlockMaterial(i7 - 1, y - 1, i9) == Material.water || world.getBlockMaterial(i7 + 1, y - 1, i9) == Material.water || world.getBlockMaterial(i7, y - 1, i9 - 1) == Material.water || world.getBlockMaterial(i7, y - 1, i9 + 1) == Material.water)) {
+				int i10 = 2 + rand.nextInt(rand.nextInt(3) + 1);
 
-				for(int var11 = 0; var11 < var10; ++var11) {
-					if(Block.reed.canBlockStay(var1, var7, var8 + var11, var9)) {
-						var1.setBlock(var7, var8 + var11, var9, Block.reed.blockID);
+				for(int i11 = 0; i11 < i10; ++i11) {
+					if(Block.reed.canBlockStay(world, i7, i8 + i11, i9)) {
+						world.setBlock(i7, i8 + i11, i9, Block.reed.blockID);
 					}
 				}
 			}
--- net/minecraft/src/BlockButton.java
+++ net/minecraft/src/BlockButton.java
@@ -3,12 +3,12 @@
 import java.util.Random;
 
 public class BlockButton extends Block {
-	protected BlockButton(int var1, int var2) {
-		super(var1, var2, Material.circuits);
+	protected BlockButton(int id, int blockIndex) {
+		super(id, blockIndex, Material.circuits);
 		this.setTickOnLoad(true);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
@@ -20,173 +20,173 @@
 		return false;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2 - 1, var3, var4) ? true : (var1.isBlockNormalCube(var2 + 1, var3, var4) ? true : (var1.isBlockNormalCube(var2, var3, var4 - 1) ? true : var1.isBlockNormalCube(var2, var3, var4 + 1)));
-	}
-
-	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		int var7 = var6 & 8;
-		var6 &= 7;
-		if(var5 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var6 = 4;
-		}
-
-		if(var5 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var6 = 3;
-		}
-
-		if(var5 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var6 = 2;
-		}
-
-		if(var5 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var6 = 1;
-		}
-
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var6 + var7);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-		} else if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 2);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 3);
-		} else if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, 4);
-		}
-
-		this.checkIfAttachedToBlock(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(this.checkIfAttachedToBlock(var1, var2, var3, var4)) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4) & 7;
-			boolean var7 = false;
-			if(!var1.isBlockNormalCube(var2 - 1, var3, var4) && var6 == 1) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2 + 1, var3, var4) && var6 == 2) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 - 1) && var6 == 3) {
-				var7 = true;
-			}
-
-			if(!var1.isBlockNormalCube(var2, var3, var4 + 1) && var6 == 4) {
-				var7 = true;
-			}
-
-			if(var7) {
-				this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-				var1.setBlockWithNotify(var2, var3, var4, 0);
-			}
-		}
-
-	}
-
-	private boolean checkIfAttachedToBlock(World var1, int var2, int var3, int var4) {
-		if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
-			return false;
-		} else {
-			return true;
-		}
-	}
-
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		int var6 = var5 & 7;
-		boolean var7 = (var5 & 8) > 0;
-		float var8 = 6.0F / 16.0F;
-		float var9 = 10.0F / 16.0F;
-		float var10 = 3.0F / 16.0F;
-		float var11 = 2.0F / 16.0F;
-		if(var7) {
-			var11 = 1.0F / 16.0F;
-		}
-
-		if(var6 == 1) {
-			this.setBlockBounds(0.0F, var8, 0.5F - var10, var11, var9, 0.5F + var10);
-		} else if(var6 == 2) {
-			this.setBlockBounds(1.0F - var11, var8, 0.5F - var10, 1.0F, var9, 0.5F + var10);
-		} else if(var6 == 3) {
-			this.setBlockBounds(0.5F - var10, var8, 0.0F, 0.5F + var10, var9, var11);
-		} else if(var6 == 4) {
-			this.setBlockBounds(0.5F - var10, var8, 1.0F - var11, 0.5F + var10, var9, 1.0F);
-		}
-
-	}
-
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.blockActivated(var1, var2, var3, var4, var5);
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		int var7 = var6 & 7;
-		int var8 = 8 - (var6 & 8);
-		if(var8 == 0) {
-			return true;
-		} else {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + var8);
-			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, 0.6F);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			if(var7 == 1) {
-				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			} else if(var7 == 2) {
-				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			} else if(var7 == 3) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			} else if(var7 == 4) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-			} else {
-				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			}
-
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
-			return true;
-		}
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		if((var5 & 8) > 0) {
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			int var6 = var5 & 7;
-			if(var6 == 1) {
-				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			} else if(var6 == 2) {
-				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			} else if(var6 == 3) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			} else if(var6 == 4) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-			} else {
-				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			}
-		}
-
-		super.onBlockRemoval(var1, var2, var3, var4);
-	}
-
-	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return (var1.getBlockMetadata(var2, var3, var4) & 8) > 0;
-	}
-
-	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if((var6 & 8) == 0) {
-			return false;
-		} else {
-			int var7 = var6 & 7;
-			return var7 == 5 && var5 == 1 ? true : (var7 == 4 && var5 == 2 ? true : (var7 == 3 && var5 == 3 ? true : (var7 == 2 && var5 == 4 ? true : var7 == 1 && var5 == 5)));
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return world.isBlockNormalCube(x - 1, y, z) ? true : (world.isBlockNormalCube(x + 1, y, z) ? true : (world.isBlockNormalCube(x, y, z - 1) ? true : world.isBlockNormalCube(x, y, z + 1)));
+	}
+
+	public void onBlockPlaced(World world, int x, int y, int z, int notifyFlag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		int i7 = i6 & 8;
+		i6 &= 7;
+		if(notifyFlag == 2 && world.isBlockNormalCube(x, y, z + 1)) {
+			i6 = 4;
+		}
+
+		if(notifyFlag == 3 && world.isBlockNormalCube(x, y, z - 1)) {
+			i6 = 3;
+		}
+
+		if(notifyFlag == 4 && world.isBlockNormalCube(x + 1, y, z)) {
+			i6 = 2;
+		}
+
+		if(notifyFlag == 5 && world.isBlockNormalCube(x - 1, y, z)) {
+			i6 = 1;
+		}
+
+		world.setBlockMetadataWithNotify(x, y, z, i6 + i7);
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		if(world.isBlockNormalCube(x - 1, y, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 1);
+		} else if(world.isBlockNormalCube(x + 1, y, z)) {
+			world.setBlockMetadataWithNotify(x, y, z, 2);
+		} else if(world.isBlockNormalCube(x, y, z - 1)) {
+			world.setBlockMetadataWithNotify(x, y, z, 3);
+		} else if(world.isBlockNormalCube(x, y, z + 1)) {
+			world.setBlockMetadataWithNotify(x, y, z, 4);
+		}
+
+		this.checkIfAttachedToBlock(world, x, y, z);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(this.checkIfAttachedToBlock(world, x, y, z)) {
+			int i6 = world.getBlockMetadata(x, y, z) & 7;
+			boolean z7 = false;
+			if(!world.isBlockNormalCube(x - 1, y, z) && i6 == 1) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x + 1, y, z) && i6 == 2) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z - 1) && i6 == 3) {
+				z7 = true;
+			}
+
+			if(!world.isBlockNormalCube(x, y, z + 1) && i6 == 4) {
+				z7 = true;
+			}
+
+			if(z7) {
+				this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+				world.setBlockWithNotify(x, y, z, 0);
+			}
+		}
+
+	}
+
+	private boolean checkIfAttachedToBlock(World world, int x, int y, int z) {
+		if(!this.canPlaceBlockAt(world, x, y, z)) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		int i5 = blockAccess.getBlockMetadata(x, y, z);
+		int i6 = i5 & 7;
+		boolean z7 = (i5 & 8) > 0;
+		float f8 = 0.375F;
+		float f9 = 0.625F;
+		float f10 = 0.1875F;
+		float f11 = 0.125F;
+		if(z7) {
+			f11 = 0.0625F;
+		}
+
+		if(i6 == 1) {
+			this.setBlockBounds(0.0F, f8, 0.5F - f10, f11, f9, 0.5F + f10);
+		} else if(i6 == 2) {
+			this.setBlockBounds(1.0F - f11, f8, 0.5F - f10, 1.0F, f9, 0.5F + f10);
+		} else if(i6 == 3) {
+			this.setBlockBounds(0.5F - f10, f8, 0.0F, 0.5F + f10, f9, f11);
+		} else if(i6 == 4) {
+			this.setBlockBounds(0.5F - f10, f8, 1.0F - f11, 0.5F + f10, f9, 1.0F);
+		}
+
+	}
+
+	public void onBlockClicked(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.blockActivated(world, x, y, z, entityPlayer);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		int i7 = i6 & 7;
+		int i8 = 8 - (i6 & 8);
+		if(i8 == 0) {
+			return true;
+		} else {
+			world.setBlockMetadataWithNotify(x, y, z, i7 + i8);
+			world.markBlocksDirty(x, y, z, x, y, z);
+			world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.click", 0.3F, 0.6F);
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			if(i7 == 1) {
+				world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			} else if(i7 == 2) {
+				world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			} else if(i7 == 3) {
+				world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			} else if(i7 == 4) {
+				world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+			} else {
+				world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			}
+
+			world.scheduleBlockUpdate(x, y, z, this.blockID);
+			return true;
+		}
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		if((i5 & 8) > 0) {
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			int i6 = i5 & 7;
+			if(i6 == 1) {
+				world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			} else if(i6 == 2) {
+				world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			} else if(i6 == 3) {
+				world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			} else if(i6 == 4) {
+				world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
+			} else {
+				world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
+			}
+		}
+
+		super.onBlockRemoval(world, x, y, z);
+	}
+
+	public boolean isPoweringTo(IBlockAccess blockAccess, int x, int y, int z, int unused) {
+		return (blockAccess.getBlockMetadata(x, y, z) & 8) > 0;
+	}
+
+	public boolean isIndirectlyPoweringTo(World world, int x, int y, int z, int flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if((i6 & 8) == 0) {
+			return false;
+		} else {
+			int i7 = i6 & 7;
+			return i7 == 5 && flag == 1 ? true : (i7 == 4 && flag == 2 ? true : (i7 == 3 && flag == 3 ? true : (i7 == 2 && flag == 4 ? true : i7 == 1 && flag == 5)));
 		}
 	}
 
@@ -194,26 +194,27 @@
 		return true;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if((var6 & 8) != 0) {
-			var1.setBlockMetadataWithNotify(var2, var3, var4, var6 & 7);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			int var7 = var6 & 7;
-			if(var7 == 1) {
-				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			} else if(var7 == 2) {
-				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			} else if(var7 == 3) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			} else if(var7 == 4) {
-				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if((i6 & 8) != 0) {
+			world.setBlockMetadataWithNotify(x, y, z, i6 & 7);
+			world.notifyBlocksOfNeighborChange(x, y, z, this.blockID);
+			int i7 = i6 & 7;
+			if(i7 == 1) {
+				world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
+			} else if(i7 == 2) {
+				world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
+			} else if(i7 == 3) {
+				world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
+			} else if(i7 == 4) {
+				world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
 			} else {
-				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+				world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
 			}
 
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, 0.5F);
-			var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
+			world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.click", 0.3F, 0.5F);
+			world.markBlocksDirty(x, y, z, x, y, z);
 		}
+
 	}
 }
--- net/minecraft/src/CompressedStreamTools.java
+++ net/minecraft/src/CompressedStreamTools.java
@@ -13,66 +13,66 @@
 import java.util.zip.GZIPOutputStream;
 
 public class CompressedStreamTools {
-	public static NBTTagCompound readCompressed(InputStream var0) throws IOException {
-		DataInputStream var1 = new DataInputStream(new GZIPInputStream(var0));
-
-		NBTTagCompound var2;
-		try {
-			var2 = read(var1);
-		} finally {
-			var1.close();
-		}
-
-		return var2;
-	}
-
-	public static void writeCompressed(NBTTagCompound var0, OutputStream var1) throws IOException {
-		DataOutputStream var2 = new DataOutputStream(new GZIPOutputStream(var1));
-
-		try {
-			write(var0, var2);
-		} finally {
-			var2.close();
-		}
-
-	}
-
-	public static NBTTagCompound decompress(byte[] var0) throws IOException {
-		DataInputStream var1 = new DataInputStream(new GZIPInputStream(new ByteArrayInputStream(var0)));
-
-		NBTTagCompound var2;
-		try {
-			var2 = read(var1);
-		} finally {
-			var1.close();
-		}
-
-		return var2;
-	}
-
-	public static byte[] compress(NBTTagCompound var0) throws IOException {
-		ByteArrayOutputStream var1 = new ByteArrayOutputStream();
-		DataOutputStream var2 = new DataOutputStream(new GZIPOutputStream(var1));
-
-		try {
-			write(var0, var2);
-		} finally {
-			var2.close();
-		}
-
-		return var1.toByteArray();
-	}
-
-	public static NBTTagCompound read(DataInput var0) throws IOException {
-		NBTBase var1 = NBTBase.readNamedTag(var0);
-		if(var1 instanceof NBTTagCompound) {
-			return (NBTTagCompound)var1;
+	public static NBTTagCompound readCompressed(InputStream inputStream) throws IOException {
+		DataInputStream dataInputStream1 = new DataInputStream(new GZIPInputStream(inputStream));
+
+		NBTTagCompound nBTTagCompound2;
+		try {
+			nBTTagCompound2 = read(dataInputStream1);
+		} finally {
+			dataInputStream1.close();
+		}
+
+		return nBTTagCompound2;
+	}
+
+	public static void writeCompressed(NBTTagCompound nbttagcompound, OutputStream outputStream) throws IOException {
+		DataOutputStream dataOutputStream2 = new DataOutputStream(new GZIPOutputStream(outputStream));
+
+		try {
+			write(nbttagcompound, dataOutputStream2);
+		} finally {
+			dataOutputStream2.close();
+		}
+
+	}
+
+	public static NBTTagCompound decompress(byte[] data) throws IOException {
+		DataInputStream dataInputStream1 = new DataInputStream(new GZIPInputStream(new ByteArrayInputStream(data)));
+
+		NBTTagCompound nBTTagCompound2;
+		try {
+			nBTTagCompound2 = read(dataInputStream1);
+		} finally {
+			dataInputStream1.close();
+		}
+
+		return nBTTagCompound2;
+	}
+
+	public static byte[] compress(NBTTagCompound nbttagcompound) throws IOException {
+		ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
+		DataOutputStream dataOutputStream2 = new DataOutputStream(new GZIPOutputStream(byteArrayOutputStream1));
+
+		try {
+			write(nbttagcompound, dataOutputStream2);
+		} finally {
+			dataOutputStream2.close();
+		}
+
+		return byteArrayOutputStream1.toByteArray();
+	}
+
+	public static NBTTagCompound read(DataInput dataInput) throws IOException {
+		NBTBase nBTBase1 = NBTBase.readNamedTag(dataInput);
+		if(nBTBase1 instanceof NBTTagCompound) {
+			return (NBTTagCompound)nBTBase1;
 		} else {
 			throw new IOException("Root tag must be a named compound tag");
 		}
 	}
 
-	public static void write(NBTTagCompound var0, DataOutput var1) throws IOException {
-		NBTBase.writeNamedTag(var0, var1);
+	public static void write(NBTTagCompound nbttagcompound, DataOutput dataOutput) throws IOException {
+		NBTBase.writeNamedTag(nbttagcompound, dataOutput);
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenMycon.java
@@ -1,0 +1,118 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public final class WorldGenMycon extends WorldGenMyconUnknownClass {
+	private NoiseGeneratorOctaves field_6120_26qSxnx8yn5abv4882z49m1FCA4o08iePYJg7zYE113bGPyweSCPO1sRCk9t = null;
+
+	public WorldGenMycon(double double1, double double2, EnumWorldGenerator _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE) {
+		super(double1, double2, _7lc8a86t8Y1b6ypKTDTI8va9p7I8o6K4b4t270e0EG35PjIAtpdDrafkf51Ip5XXEF92ENrak7mhOSkm2NO1y7jzt8xxpsneiE);
+	}
+
+	private void func_6118_9AX7CAHxGCSFdvS2687Z1K8ccQS5QW8Pt0rM198HhM845P7sx5tTUybzGKXE(World cv, int integer2, int integer3, int integer4) {
+		cv.setBlockWithNotify(integer2, integer3, integer4, ExtBlocks.GlowingMyconCap.blockID);
+		if(cv.getBlockId(integer2 - 1, integer3, integer4) == 0) {
+			cv.setBlockWithNotify(integer2 - 1, integer3, integer4, ExtBlocks.MyconCap.blockID);
+		}
+
+		if(cv.getBlockId(integer2, integer3, integer4 - 1) == 0) {
+			cv.setBlockWithNotify(integer2, integer3, integer4 - 1, ExtBlocks.MyconCap.blockID);
+		}
+
+		if(cv.getBlockId(integer2 + 1, integer3, integer4) == 0) {
+			cv.setBlockWithNotify(integer2 + 1, integer3, integer4, ExtBlocks.MyconCap.blockID);
+		}
+
+		if(cv.getBlockId(integer2, integer3, integer4 + 1) == 0) {
+			cv.setBlockWithNotify(integer2, integer3, integer4 + 1, ExtBlocks.MyconCap.blockID);
+		}
+
+		if(cv.getBlockId(integer2, integer3 + 1, integer4) == 0) {
+			cv.setBlockWithNotify(integer2, integer3 + 1, integer4, ExtBlocks.MyconCap.blockID);
+		}
+
+	}
+
+	private void func_6119_7w274Ii5C6l3mJ5Ml9xPepe4mZ0L3n5N8k3PnrnD80677riwMNL3FrO371PG(Random random, World cv, int integer3, int integer4) {
+		int i5;
+		int i6;
+		int i7;
+		for(i5 = -1; i5 <= 1; ++i5) {
+			for(i6 = -1; i6 <= 1; ++i6) {
+				for(i7 = 0; i7 <= 1; ++i7) {
+					this.func_6118_9AX7CAHxGCSFdvS2687Z1K8ccQS5QW8Pt0rM198HhM845P7sx5tTUybzGKXE(cv, integer3 + i5, 7 + i7, integer4 + i6);
+				}
+			}
+		}
+
+		int i8;
+		for(i5 = 0; i5 < 3; ++i5) {
+			i6 = random.nextInt(2) * 2 - 1;
+			i7 = random.nextInt(2) * 2 - 1;
+			i8 = random.nextInt(2) + 2;
+			int i9 = random.nextInt(2) + 2;
+
+			for(int i10 = 0; i10 < i8; ++i10) {
+				for(int i11 = 0; i11 < i9; ++i11) {
+					this.func_6118_9AX7CAHxGCSFdvS2687Z1K8ccQS5QW8Pt0rM198HhM845P7sx5tTUybzGKXE(cv, integer3 + i10 * i6, 7, integer4 + i11 * i7);
+				}
+			}
+		}
+
+		for(i5 = -2; i5 <= 2; ++i5) {
+			if(cv.getBlockId(integer3 + i5, 7, integer4 + 2) == ExtBlocks.GlowingMyconCap.blockID && random.nextInt(6) == 0) {
+				this.func_6118_9AX7CAHxGCSFdvS2687Z1K8ccQS5QW8Pt0rM198HhM845P7sx5tTUybzGKXE(cv, integer3 + i5, 8, integer4 + 2);
+			}
+
+			if(cv.getBlockId(integer3 + i5, 7, integer4 - 2) == ExtBlocks.GlowingMyconCap.blockID && random.nextInt(6) == 0) {
+				this.func_6118_9AX7CAHxGCSFdvS2687Z1K8ccQS5QW8Pt0rM198HhM845P7sx5tTUybzGKXE(cv, integer3 + i5, 8, integer4 - 2);
+			}
+
+			if(cv.getBlockId(integer3 + 2, 7, integer4 + i5) == ExtBlocks.GlowingMyconCap.blockID && random.nextInt(6) == 0) {
+				this.func_6118_9AX7CAHxGCSFdvS2687Z1K8ccQS5QW8Pt0rM198HhM845P7sx5tTUybzGKXE(cv, integer3 + 2, 8, integer4 + i5);
+			}
+
+			if(cv.getBlockId(integer3 - 2, 7, integer4 + i5) == ExtBlocks.GlowingMyconCap.blockID && random.nextInt(6) == 0) {
+				this.func_6118_9AX7CAHxGCSFdvS2687Z1K8ccQS5QW8Pt0rM198HhM845P7sx5tTUybzGKXE(cv, integer3 - 2, 8, integer4 + i5);
+			}
+		}
+
+		i5 = -random.nextInt(2);
+		i6 = -random.nextInt(2);
+
+		for(i7 = i5; i7 < 2 + i5; ++i7) {
+			for(i8 = i6; i8 < 2 + i6; ++i8) {
+				this.func_6118_9AX7CAHxGCSFdvS2687Z1K8ccQS5QW8Pt0rM198HhM845P7sx5tTUybzGKXE(cv, integer3 + i7, 9, integer4 + i8);
+			}
+		}
+
+		for(i5 = 4; i5 < 10; ++i5) {
+			cv.setBlock(integer3, i5, integer4, ExtBlocks.MyconStem.blockID);
+		}
+
+	}
+
+	public boolean func_6106_89178IPx36Pz8I0tikD07m8tZIpV1sbMp38yAtni7c93aR76eIXb747sm4eZ(Random random, World cv, int integer3, int integer4) {
+		boolean z5 = false;
+
+		for(int i6 = 0; i6 < 16; ++i6) {
+			for(int i7 = 0; i7 < 16; ++i7) {
+				if(this.field_6120_26qSxnx8yn5abv4882z49m1FCA4o08iePYJg7zYE113bGPyweSCPO1sRCk9t.generateNoiseOctaves((double)(integer3 * 16 + i6), (double)(integer4 * 16 + i7)) > 0.1D) {
+					cv.setBlock(integer3 * 16 + i6, 3, integer4 * 16 + i7, ExtBlocks.LowMycon.blockID);
+					if(random.nextInt(400) == 0 && !z5) {
+						this.func_6119_7w274Ii5C6l3mJ5Ml9xPepe4mZ0L3n5N8k3PnrnD80677riwMNL3FrO371PG(random, cv, integer3 * 16 + i6, integer4 * 16 + i7);
+						z5 = true;
+					} else if(random.nextInt(120) == 0 && cv.getBlockId(integer3 * 16 + i6, 4, integer4 * 16 + i7) == 0) {
+						cv.setBlockWithNotify(integer3 * 16 + i6, 4, integer4 * 16 + i7, ExtBlocks.LowGlowingVine.blockID);
+					}
+				}
+			}
+		}
+
+		return false;
+	}
+
+	public void func_6105_81hMTC5FoM6v920z1cx6O635T6Awu9Y40ealKHkVig8X477d9SlXh3yS17Y3(Random random) {
+		this.field_6120_26qSxnx8yn5abv4882z49m1FCA4o08iePYJg7zYE113bGPyweSCPO1sRCk9t = new NoiseGeneratorOctaves(random, 6);
+	}
+}
--- net/minecraft/src/StepSound.java
+++ net/minecraft/src/StepSound.java
@@ -5,10 +5,10 @@
 	public final float stepSoundVolume;
 	public final float stepSoundPitch;
 
-	public StepSound(String var1, float var2, float var3) {
-		this.stepSoundName = var1;
-		this.stepSoundVolume = var2;
-		this.stepSoundPitch = var3;
+	public StepSound(String string, float float2, float float3) {
+		this.stepSoundName = string;
+		this.stepSoundVolume = float2;
+		this.stepSoundPitch = float3;
 	}
 
 	public float getVolume() {
--- net/minecraft/src/BlockTNT.java
+++ net/minecraft/src/BlockTNT.java
@@ -3,35 +3,35 @@
 import java.util.Random;
 
 public class BlockTNT extends Block {
-	public BlockTNT(int var1, int var2) {
-		super(var1, var2, Material.tnt);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 0 ? this.blockIndexInTexture + 2 : (var1 == 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(var5 > 0 && Block.blocksList[var5].canProvidePower() && var1.isBlockIndirectlyGettingPowered(var2, var3, var4)) {
-			this.onBlockDestroyedByPlayer(var1, var2, var3, var4, 0);
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public BlockTNT(int id, int blockIndex) {
+		super(id, blockIndex, Material.tnt);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 0 ? this.blockIndexInTexture + 2 : (side == 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture);
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(flag > 0 && Block.blocksList[flag].canProvidePower() && world.isBlockIndirectlyGettingPowered(x, y, z)) {
+			this.onBlockDestroyedByPlayer(world, x, y, z, 0);
+			world.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 0;
 	}
 
-	public void onBlockDestroyedByExplosion(World var1, int var2, int var3, int var4) {
-		EntityTNTPrimed var5 = new EntityTNTPrimed(var1, (float)var2 + 0.5F, (float)var3 + 0.5F, (float)var4 + 0.5F);
-		var5.fuse = var1.rand.nextInt(var5.fuse / 4) + var5.fuse / 8;
-		var1.spawnEntityInWorld(var5);
+	public void onBlockDestroyedByExplosion(World world, int x, int y, int z) {
+		EntityTNTPrimed entityTNTPrimed5 = new EntityTNTPrimed(world, (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F);
+		entityTNTPrimed5.fuse = world.rand.nextInt(entityTNTPrimed5.fuse / 4) + entityTNTPrimed5.fuse / 8;
+		world.spawnEntityInWorld(entityTNTPrimed5);
 	}
 
-	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-		EntityTNTPrimed var6 = new EntityTNTPrimed(var1, (float)var2 + 0.5F, (float)var3 + 0.5F, (float)var4 + 0.5F);
-		var1.spawnEntityInWorld(var6);
-		var1.playSoundAtEntity(var6, "random.fuse", 1.0F, 1.0F);
+	public void onBlockDestroyedByPlayer(World world, int x, int y, int z, int flag) {
+		EntityTNTPrimed entityTNTPrimed6 = new EntityTNTPrimed(world, (float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F);
+		world.spawnEntityInWorld(entityTNTPrimed6);
+		world.playSoundAtEntity(entityTNTPrimed6, "random.fuse", 1.0F, 1.0F);
 	}
 }
--- net/minecraft/src/NBTTagByte.java
+++ net/minecraft/src/NBTTagByte.java
@@ -10,16 +10,16 @@
 	public NBTTagByte() {
 	}
 
-	public NBTTagByte(byte var1) {
-		this.byteValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeByte(this.byteValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.byteValue = var1.readByte();
+	public NBTTagByte(byte byteValue) {
+		this.byteValue = byteValue;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeByte(this.byteValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.byteValue = dataInput.readByte();
 	}
 
 	public byte getType() {
--- net/minecraft/src/MinecraftException.java
+++ net/minecraft/src/MinecraftException.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class MinecraftException extends RuntimeException {
-	public MinecraftException(String var1) {
-		super(var1);
+	public MinecraftException(String message) {
+		super(message);
 	}
 }
--- net/minecraft/src/WorldGenFlowers.java
+++ net/minecraft/src/WorldGenFlowers.java
@@ -5,17 +5,17 @@
 public class WorldGenFlowers extends WorldGenerator {
 	private int plantBlockId;
 
-	public WorldGenFlowers(int var1) {
-		this.plantBlockId = var1;
+	public WorldGenFlowers(int plantBlockId) {
+		this.plantBlockId = plantBlockId;
 	}
 
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		for(int var6 = 0; var6 < 64; ++var6) {
-			int var7 = var3 + var2.nextInt(8) - var2.nextInt(8);
-			int var8 = var4 + var2.nextInt(4) - var2.nextInt(4);
-			int var9 = var5 + var2.nextInt(8) - var2.nextInt(8);
-			if(var1.getBlockId(var7, var8, var9) == 0 && ((BlockFlower)Block.blocksList[this.plantBlockId]).canBlockStay(var1, var7, var8, var9)) {
-				var1.setBlock(var7, var8, var9, this.plantBlockId);
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 64; ++i6) {
+			int i7 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+			int i9 = z + rand.nextInt(8) - rand.nextInt(8);
+			if(world.getBlockId(i7, i8, i9) == 0 && ((BlockFlower)Block.blocksList[this.plantBlockId]).canBlockStay(world, i7, i8, i9)) {
+				world.setBlock(i7, i8, i9, this.plantBlockId);
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/WorldGenGrass.java
@@ -1,0 +1,18 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenGrass extends WorldGenerator {
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 64; ++i6) {
+			int i7 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+			int i9 = z + rand.nextInt(8) - rand.nextInt(8);
+			if(world.getBlockId(i7, i8, i9) == 0 && ExtBlocks.Grass.canBlockStay(world, i7, i8, i9)) {
+				world.setBlock(i7, i8, i9, 165);
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/EntityTNTPrimed.java
+++ net/minecraft/src/EntityTNTPrimed.java
@@ -3,26 +3,26 @@
 public class EntityTNTPrimed extends Entity {
 	public int fuse;
 
-	public EntityTNTPrimed(World var1) {
-		super(var1);
+	public EntityTNTPrimed(World world) {
+		super(world);
 		this.fuse = 0;
 		this.preventEntitySpawning = true;
 		this.setSize(0.98F, 0.98F);
 		this.yOffset = this.height / 2.0F;
 	}
 
-	public EntityTNTPrimed(World var1, float var2, float var3, float var4) {
-		this(var1);
-		this.setPosition((double)var2, (double)var3, (double)var4);
-		float var5 = (float)(Math.random() * (double)((float)Math.PI) * 2.0D);
-		this.motionX = (double)(-MathHelper.sin(var5 * (float)Math.PI / 180.0F) * 0.02F);
+	public EntityTNTPrimed(World world, float x, float y, float z) {
+		this(world);
+		this.setPosition((double)x, (double)y, (double)z);
+		float f5 = (float)(Math.random() * (double)(float)Math.PI * 2.0D);
+		this.motionX = (double)(-MathHelper.sin(f5 * (float)Math.PI / 180.0F) * 0.02F);
 		this.motionY = (double)0.2F;
-		this.motionZ = (double)(-MathHelper.cos(var5 * (float)Math.PI / 180.0F) * 0.02F);
+		this.motionZ = (double)(-MathHelper.cos(f5 * (float)Math.PI / 180.0F) * 0.02F);
 		this.canTriggerWalking = false;
 		this.fuse = 80;
-		this.prevPosX = (double)var2;
-		this.prevPosY = (double)var3;
-		this.prevPosZ = (double)var4;
+		this.prevPosX = (double)x;
+		this.prevPosY = (double)y;
+		this.prevPosZ = (double)z;
 	}
 
 	public boolean canBeCollidedWith() {
@@ -54,15 +54,15 @@
 	}
 
 	private void explode() {
-		float var1 = 4.0F;
-		this.worldObj.createExplosion((Entity)null, this.posX, this.posY, this.posZ, var1);
-	}
-
-	protected void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setByte("Fuse", (byte)this.fuse);
-	}
-
-	protected void readEntityFromNBT(NBTTagCompound var1) {
-		this.fuse = var1.getByte("Fuse");
+		float f1 = 4.0F;
+		this.worldObj.createExplosion((Entity)null, this.posX, this.posY, this.posZ, f1);
+	}
+
+	protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setByte("Fuse", (byte)this.fuse);
+	}
+
+	protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.fuse = nbttagcompound.getByte("Fuse");
 	}
 }
--- net/minecraft/src/Packet15Place.java
+++ net/minecraft/src/Packet15Place.java
@@ -11,24 +11,24 @@
 	public int zPosition;
 	public int direction;
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.id = var1.readShort();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.read();
-		this.zPosition = var1.readInt();
-		this.direction = var1.read();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeShort(this.id);
-		var1.writeInt(this.xPosition);
-		var1.write(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.write(this.direction);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handlePlace(this);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.id = dataInputStream.readShort();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.read();
+		this.zPosition = dataInputStream.readInt();
+		this.direction = dataInputStream.read();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeShort(this.id);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.write(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.write(this.direction);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handlePlace(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/ICommandListener.java
+++ net/minecraft/src/ICommandListener.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public interface ICommandListener {
-	void addHelpCommandMessage(String var1);
+	void addHelpCommandMessage(String string1);
 
 	String getUsername();
 }
--- /dev/null
+++ net/minecraft/src/EntityAmoung.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+public class EntityAmoung extends EntityAnimal {
+	public boolean unusedBool2 = false;
+
+	public EntityAmoung(World world) {
+		super(world);
+		this.setSize(1.0F, 1.0F);
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+	}
+
+	protected String getHurtSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected String getDeathSound() {
+		return "mob.skeletonhurt";
+	}
+
+	protected float getSoundVolume() {
+		return 0.4F;
+	}
+
+	protected int getDropItemId() {
+		return Item.porkRaw.shiftedIndex;
+	}
+
+	public boolean interact(EntityPlayer entityPlayer) {
+		return false;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockWoodSlab.java
@@ -1,0 +1,61 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockWoodSlab extends Block {
+	private boolean field_6304_18u0PRQi5zv8FZV6iN9cWpOZ1Uud6bFzFlsSMFGe28tYv1l8E5GkBFwC8Wb3;
+
+	public BlockWoodSlab(int integer1, int integer2, boolean boolean3) {
+		super(integer1, integer2, Material.wood);
+		this.field_6304_18u0PRQi5zv8FZV6iN9cWpOZ1Uud6bFzFlsSMFGe28tYv1l8E5GkBFwC8Wb3 = boolean3;
+		if(!boolean3) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
+		}
+
+		this.setLightOpacity(255);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side <= 1 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
+	}
+
+	public boolean isOpaqueCube() {
+		return this.field_6304_18u0PRQi5zv8FZV6iN9cWpOZ1Uud6bFzFlsSMFGe28tYv1l8E5GkBFwC8Wb3;
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(this == ExtBlocks.woodSingle) {
+			;
+		}
+
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		if(this != ExtBlocks.woodSingle) {
+			super.onBlockAdded(world, x, y, z);
+		}
+
+		int i5 = world.getBlockId(x, y - 1, z);
+		if(i5 == ExtBlocks.woodSingle.blockID) {
+			world.setBlockWithNotify(x, y, z, 0);
+			world.setBlockWithNotify(x, y - 1, z, ExtBlocks.woodDouble.blockID);
+		}
+
+	}
+
+	public int idDropped(int count, Random random) {
+		return ExtBlocks.woodSingle.blockID;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return this.field_6304_18u0PRQi5zv8FZV6iN9cWpOZ1Uud6bFzFlsSMFGe28tYv1l8E5GkBFwC8Wb3;
+	}
+
+	public boolean shouldSideBeRendered(IBlockAccess blockAccess, int x, int y, int z, int side) {
+		if(this != ExtBlocks.woodSingle) {
+			super.shouldSideBeRendered(blockAccess, x, y, z, side);
+		}
+
+		return side == 1 ? true : (!super.shouldSideBeRendered(blockAccess, x, y, z, side) ? false : (side == 0 ? true : blockAccess.getBlockId(x, y, z) != this.blockID));
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenFrigidHighwood.java
@@ -1,0 +1,217 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.Random;
+
+public class WorldGenFrigidHighwood extends WorldGenerator {
+	private Boolean field_7530_5OSzrcDfcoelhQeqXc9Gl0B2Y0c5YiKMMl5Q8piH441M90c1E3z2956JF48f = null;
+
+	public WorldGenFrigidHighwood func_7529_91di7Bn6foJ7FVLIz94n9n1coj7EVW2pD495SmmtM3d6x6Rvu0ok0rU7IJNn(boolean boolean1) {
+		this.field_7530_5OSzrcDfcoelhQeqXc9Gl0B2Y0c5YiKMMl5Q8piH441M90c1E3z2956JF48f = boolean1;
+		return this;
+	}
+
+	private boolean func_7528_6U1SX2WqThqu8R93IlQGMN38xN4oV63gHgwWYOG89721sAYIp4o3e741Ak1x(World cv, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.FrigidTrunk.blockID;
+		int i7 = ExtBlocks.FrigidLeaves.blockID;
+		int i8 = random.nextInt(4) + 4;
+		boolean z9 = true;
+		if(integer4 >= 1 && integer4 + i8 + 1 <= 128) {
+			int i10;
+			int i11;
+			int i13;
+			for(i10 = integer4; i10 <= integer4 + 1 + i8; ++i10) {
+				byte b14 = 1;
+				if(i10 == integer4) {
+					b14 = 0;
+				}
+
+				if(i10 >= integer4 + 1 + i8 - 2) {
+					b14 = 2;
+				}
+
+				for(i11 = integer3 - b14; i11 <= integer3 + b14 && z9; ++i11) {
+					for(int i12 = integer5 - b14; i12 <= integer5 + b14 && z9; ++i12) {
+						if(i10 >= 0 && i10 < 128) {
+							i13 = cv.getBlockId(i11, i10, i12);
+							if(i13 != 0 && i13 != i7) {
+								z9 = false;
+							}
+						} else {
+							z9 = false;
+						}
+					}
+				}
+			}
+
+			if(!z9) {
+				return false;
+			} else {
+				i10 = cv.getBlockId(integer3, integer4 - 1, integer5);
+				if((i10 == Block.blockSnow.blockID || i10 == Block.blockSnow.blockID) && integer4 < 128 - i8 - 1) {
+					cv.setBlock(integer3, integer4 - 1, integer5, Block.blockSnow.blockID);
+
+					int i20;
+					for(i20 = integer4 - 1 + i8; i20 <= integer4 + i8; ++i20) {
+						boolean z18 = true;
+						byte b19 = 1;
+
+						for(i13 = integer3 - b19; i13 <= integer3 - b19; ++i13) {
+							int i10000 = i13 - integer3;
+
+							for(int i16 = integer5 - b19; i16 <= integer5 - b19; ++i16) {
+								i10000 = i16 - integer5;
+								if(!Block.opaqueCubeLookup[cv.getBlockId(i13, i20, i16)]) {
+									cv.setBlock(i13 + 1, i20, i16 + 1, i7);
+								}
+							}
+						}
+					}
+
+					for(i20 = 0; i20 < i8; ++i20) {
+						i11 = cv.getBlockId(integer3, integer4 + i20, integer5);
+						if(i11 == 0 || i11 == i7) {
+							cv.setBlock(integer3, integer4 + i20, integer5, i6);
+						}
+					}
+
+					return true;
+				} else {
+					return false;
+				}
+			}
+		} else {
+			return false;
+		}
+	}
+
+	private void func_7527_9XZCka12CPfUMDgV9D8AwhpVl8zxQU8ctKEp04A776u7o7LO1SgqWyA7OiMu(World cv, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientWood.blockID;
+		int i7 = ExtBlocks.AncientLeaves.blockID;
+		float f8 = 0.0F;
+		float f9 = random.nextFloat() * (float)Math.PI * 2.0F;
+		int i10 = random.nextInt(8) + 7;
+		float f11 = (float)integer4;
+
+		float f13;
+		for(int i12 = 0; i12 < i10; ++i12) {
+			f9 = (float)((double)f9 + ((double)random.nextFloat() - 0.5D) * 0.1D);
+			++f8;
+			f13 = f8 / (float)i10;
+			integer3 = (int)((float)integer3 + MathHelper.cos(f9) * (1.0F - f13));
+			f11 += f13;
+			integer5 = (int)((float)integer5 + MathHelper.sin(f9) * (1.0F - f13));
+			integer4 = Math.round(f11);
+			cv.setBlock(integer3, integer4, integer5, i6);
+		}
+
+		integer4 += random.nextInt(2) + 1;
+		int i15 = random.nextInt(2) + 2;
+
+		for(int i16 = 0; i16 < i15; ++i16) {
+			cv.setBlock(integer3, integer4, integer5, i7);
+
+			for(float f17 = 0.0F; (double)f17 < Math.PI * 2D; f17 = (float)((double)f17 + 0.6283185307179586D)) {
+				int i18 = random.nextInt(i16 + 2) + i16 + 2;
+				float f19 = (float)integer3;
+				f13 = (float)integer5;
+
+				for(int i14 = 0; i14 < i18; ++i14) {
+					f13 += MathHelper.sin(f17);
+					f19 += MathHelper.cos(f17);
+					if(!cv.getBlockMaterial(Math.round(f19), integer4 - i16, Math.round(f13)).getIsSolid()) {
+						cv.setBlock(Math.round(f19), integer4 - i16, Math.round(f13), i7);
+					}
+				}
+			}
+		}
+
+	}
+
+	private void func_7525_8B6hHjllLOBT3IjWrLJ0hU0i4Zt1d915QwaMXrfnWpYgU7OJky16BwotGs0c(World cv, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientRoots.blockID;
+		int i7 = random.nextInt(3);
+
+		for(int i8 = 0; i8 < i7; ++i8) {
+			int i9 = random.nextInt(4) + 2;
+			int i10 = integer3;
+			int i11 = integer4;
+			int i12 = integer5;
+
+			for(int i13 = 0; i13 < i9; ++i13) {
+				i10 += random.nextInt(3) - 1;
+				--i11;
+				i12 += random.nextInt(3) - 1;
+				if(cv.getBlockId(i10, i11, i12) != Block.bedrock.blockID) {
+					cv.setBlock(i10, i11, i12, i6);
+				}
+			}
+		}
+
+	}
+
+	private boolean func_7526_4A5LOahX0QA4N6J3gv4sd06Wfy9IE92Q7979r3tIeu9jasoNU12Rq29U1n6u(World cv, Random random, int integer3, int integer4, int integer5) {
+		int i6 = ExtBlocks.AncientWood.blockID;
+		int i7 = ExtBlocks.AncientLeaves.blockID;
+		if(cv.getBlockId(integer3, integer4 - 1, integer5) != Block.grass.blockID && cv.getBlockId(integer3, integer4 - 1, integer5) != Block.dirt.blockID) {
+			return true;
+		} else {
+			Random random8 = new Random(random.nextLong() + (long)integer3 + (long)integer4 + (long)integer5 + cv.randomSeed);
+			ArrayList arrayList9 = new ArrayList();
+			int i10 = 7 + random8.nextInt(10);
+			arrayList9.add(Vec3D.createVector((double)integer3, (double)(integer4 + i10), (double)integer5));
+
+			label71:
+			for(int i11 = 0; arrayList9.size() > 0; ++i11) {
+				Iterator iterator12 = (new ArrayList(arrayList9)).iterator();
+
+				while(true) {
+					while(true) {
+						if(!iterator12.hasNext()) {
+							continue label71;
+						}
+
+						Vec3D vec3D13 = (Vec3D)iterator12.next();
+						int i14 = (int)Math.round(vec3D13.xCoord);
+						int i15 = (int)Math.round(vec3D13.yCoord);
+						int i16 = (int)Math.round(vec3D13.zCoord);
+						if((!cv.getBlockMaterial(i14, i15, i16).getIsSolid() || cv.getBlockId(i14, i15, i16) != i7) && i15 >= 0 && (random8.nextInt(3) != 0 || arrayList9.size() <= 3)) {
+							cv.setBlock(i14, i15, i16, i6);
+							int i17 = 0;
+
+							while(random8.nextInt(arrayList9.size() / 30 + 2) <= 1 && arrayList9.size() <= 10000) {
+								++i17;
+								if(i17 >= 4) {
+									break;
+								}
+
+								Vec3D vec3D18 = vec3D13.addVector((double)(random8.nextInt(3) - 1), -1.0D, (double)(random8.nextInt(3) - 1));
+								arrayList9.add(vec3D18);
+							}
+
+							if(i11 > 2 && random8.nextInt(Math.max(40, 78 - i11)) == 3) {
+								this.func_7527_9XZCka12CPfUMDgV9D8AwhpVl8zxQU8ctKEp04A776u7o7LO1SgqWyA7OiMu(cv, random, i14, i15, i16);
+							}
+
+							arrayList9.remove(vec3D13);
+							arrayList9.add(vec3D13.addVector(0.0D, -1.0D, 0.0D));
+						} else {
+							arrayList9.remove(vec3D13);
+							if(cv.getBlockId(i14, i15, i16) == Block.blockSnow.blockID || cv.getBlockId(i14, i15, i16) == Block.blockSnow.blockID) {
+								this.func_7525_8B6hHjllLOBT3IjWrLJ0hU0i4Zt1d915QwaMXrfnWpYgU7OJky16BwotGs0c(cv, random8, i14, i15, i16);
+							}
+						}
+					}
+				}
+			}
+
+			return true;
+		}
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		Random random6 = new Random(rand.nextLong() + (long)x + (long)y + (long)z + world.randomSeed);
+		return this.field_7530_5OSzrcDfcoelhQeqXc9Gl0B2Y0c5YiKMMl5Q8piH441M90c1E3z2956JF48f == null || random6.nextInt(150) != 0 && !this.field_7530_5OSzrcDfcoelhQeqXc9Gl0B2Y0c5YiKMMl5Q8piH441M90c1E3z2956JF48f.booleanValue() ? this.func_7528_6U1SX2WqThqu8R93IlQGMN38xN4oV63gHgwWYOG89721sAYIp4o3e741Ak1x(world, rand, x, y, z) : this.func_7526_4A5LOahX0QA4N6J3gv4sd06Wfy9IE92Q7979r3tIeu9jasoNU12Rq29U1n6u(world, rand, x, y, z);
+	}
+}
--- /dev/null
+++ net/minecraft/src/ItemSwordFlameberge.java
@@ -1,0 +1,41 @@
+package net.minecraft.src;
+
+public class ItemSwordFlameberge extends ItemSword {
+	int[] v2s = new int[]{3, 0, 3, 1, 2, 2, 1, 3, 0, 3, -1, 3, -2, 2, -3, 1, -3, 0, -3, -1, -2, -2, -1, -3, 0, -3, 1, -3, 2, -2, 3, -1};
+
+	public ItemSwordFlameberge(int itemID) {
+		super(itemID, 2);
+	}
+
+	public boolean BlockIDFirable(int integer) {
+		return integer == 0 || integer == 78;
+	}
+
+	public void SetBlockFire(World cv, int integer2, int integer3, int integer4, int integer5) {
+		if(integer5 != 6) {
+			int i6 = cv.getBlockId(integer2, integer3, integer4);
+			int i7 = cv.getBlockId(integer2, integer3 - 1, integer4);
+			if(this.BlockIDFirable(i6)) {
+				if(this.BlockIDFirable(i7)) {
+					this.SetBlockFire(cv, integer2, integer3 - 1, integer4, integer5 + 1);
+				}
+			} else {
+				this.SetBlockFire(cv, integer2, integer3 + 1, integer4, integer5 + 1);
+			}
+
+		}
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		int i4 = (int)entityPlayer.posX;
+		int i5 = (int)entityPlayer.posY;
+		int i6 = (int)entityPlayer.posZ;
+		worldObj.playSoundEffect((double)((float)entityPlayer.posX), (double)((float)entityPlayer.posY + 0.5F), (double)((float)entityPlayer.posZ), "ext.useflame", 0.4F, rand.nextFloat() * 0.3F + 0.7F);
+
+		for(int i7 = 0; i7 != this.v2s.length / 2; ++i7) {
+			this.SetBlockFire(worldObj, i4 + this.v2s[i7 * 2], i5, i6 + this.v2s[i7 * 2 + 1], 0);
+		}
+
+		return itemStack;
+	}
+}
--- net/minecraft/src/ItemSaddle.java
+++ net/minecraft/src/ItemSaddle.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
 public class ItemSaddle extends Item {
-	public ItemSaddle(int var1) {
-		super(var1);
+	public ItemSaddle(int itemID) {
+		super(itemID);
 		this.maxStackSize = 1;
 		this.maxDamage = 64;
 	}
--- /dev/null
+++ net/minecraft/src/WorldGenHouseSmallUnknownClass4.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public abstract class WorldGenHouseSmallUnknownClass4 {
+	public static final int field_7955_53p4IL94OF8g1r05m4y5Nv387xMGfVa6R148AC9Df7Drs9c9jB7SY2J48Pj4 = 14;
+
+	public abstract WorldGenHouseSmallUnknownClass2 func_7951_6155zZR8t2Cbq0I65w3T2P9frJ393hs90A6vhvVPoxH61BPyWNHJn7M4bf16();
+
+	public abstract WorldGenHouseSmallUnknownClass2 func_7953_2R38M2O6566x2pen53vJb71a4871DZeTgLLz2piGfBjTn4JTalO4b0mdIdRI();
+
+	public abstract boolean func_7952_7Xu3W9Y012Z47lG36iry0n5a339b3Up3MYVi24623ZUogs6SE9LV8t5Xy0cd(World world1, int i2, int i3);
+
+	public static WorldGenHouseSmallUnknownClass4 func_7954_390S8WUEjsUlIk53OF5y7FPChO1pX5dMinddEJMgNJu4ve1K5ZV6OCt2g5T5(Random random, WorldGenHouseSmallUnknownClass2 hc) {
+		return new WorldGenHouseSmallUnknownClass3(hc);
+	}
+}
--- net/minecraft/src/NetworkListenThread.java
+++ net/minecraft/src/NetworkListenThread.java
@@ -6,6 +6,7 @@
 import java.util.ArrayList;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
 import net.minecraft.server.MinecraftServer;
 
 public class NetworkListenThread {
@@ -18,70 +19,70 @@
 	private ArrayList playerList = new ArrayList();
 	public MinecraftServer mcServer;
 
-	public NetworkListenThread(MinecraftServer var1, InetAddress var2, int var3) throws IOException {
-		this.mcServer = var1;
-		this.serverSocket = new ServerSocket(var3, 0, var2);
+	public NetworkListenThread(MinecraftServer minecraftServer, InetAddress address, int port) throws IOException {
+		this.mcServer = minecraftServer;
+		this.serverSocket = new ServerSocket(port, 0, address);
 		this.serverSocket.setPerformancePreferences(0, 2, 1);
 		this.isListening = true;
-		this.listenThread = new NetworkAcceptThread(this, "Listen thread", var1);
+		this.listenThread = new NetworkAcceptThread(this, "Listen thread", minecraftServer);
 		this.listenThread.start();
 	}
 
-	public void addPlayer(NetServerHandler var1) {
-		this.playerList.add(var1);
+	public void addPlayer(NetServerHandler netServerHandler) {
+		this.playerList.add(netServerHandler);
 	}
 
-	private void addPendingConnection(NetLoginHandler var1) {
-		if(var1 == null) {
+	private void addPendingConnection(NetLoginHandler netLoginHandler) {
+		if(netLoginHandler == null) {
 			throw new IllegalArgumentException("Got null pendingconnection!");
 		} else {
-			this.pendingConnections.add(var1);
+			this.pendingConnections.add(netLoginHandler);
 		}
 	}
 
 	public void handleNetworkListenThread() {
-		int var1;
-		for(var1 = 0; var1 < this.pendingConnections.size(); ++var1) {
-			NetLoginHandler var2 = (NetLoginHandler)this.pendingConnections.get(var1);
-
-			try {
-				var2.tryLogin();
-			} catch (Exception var5) {
-				var2.kickUser("Internal server error");
-				logger.log(Level.WARNING, "Failed to handle packet: " + var5, var5);
-			}
-
-			if(var2.finishedProcessing) {
-				this.pendingConnections.remove(var1--);
-			}
-		}
-
-		for(var1 = 0; var1 < this.playerList.size(); ++var1) {
-			NetServerHandler var6 = (NetServerHandler)this.playerList.get(var1);
-
-			try {
-				var6.handlePackets();
-			} catch (Exception var4) {
-				var6.kickPlayer("Internal server error");
-				logger.log(Level.WARNING, "Failed to handle packet: " + var4, var4);
-			}
-
-			if(var6.connectionClosed) {
-				this.playerList.remove(var1--);
-			}
-		}
-
-	}
-
-	static ServerSocket getServerSocket(NetworkListenThread var0) {
-		return var0.serverSocket;
-	}
-
-	static int incrementConnections(NetworkListenThread var0) {
-		return var0.connectionNumber++;
-	}
-
-	static void addPendingConnection(NetworkListenThread var0, NetLoginHandler var1) {
-		var0.addPendingConnection(var1);
+		int i1;
+		for(i1 = 0; i1 < this.pendingConnections.size(); ++i1) {
+			NetLoginHandler netLoginHandler2 = (NetLoginHandler)this.pendingConnections.get(i1);
+
+			try {
+				netLoginHandler2.tryLogin();
+			} catch (Exception exception5) {
+				netLoginHandler2.kickUser("Internal server error");
+				logger.log(Level.WARNING, "Failed to handle packet: " + exception5, exception5);
+			}
+
+			if(netLoginHandler2.finishedProcessing) {
+				this.pendingConnections.remove(i1--);
+			}
+		}
+
+		for(i1 = 0; i1 < this.playerList.size(); ++i1) {
+			NetServerHandler netServerHandler6 = (NetServerHandler)this.playerList.get(i1);
+
+			try {
+				netServerHandler6.handlePackets();
+			} catch (Exception exception4) {
+				netServerHandler6.kickPlayer("Internal server error");
+				logger.log(Level.WARNING, "Failed to handle packet: " + exception4, exception4);
+			}
+
+			if(netServerHandler6.connectionClosed) {
+				this.playerList.remove(i1--);
+			}
+		}
+
+	}
+
+	static ServerSocket func_8610_41voW209yTKO2b18paAuunY1712JgE50rJH442q119F6mz2r253rt2BLXDQb(NetworkListenThread np) {
+		return np.serverSocket;
+	}
+
+	static int func_8609_5g0AFYQNSP3ZbXbuCZ942McJ85ow25hrj0xU8TR8Jouu1a2xN4fNyG6SJF17(NetworkListenThread np) {
+		return np.connectionNumber++;
+	}
+
+	static void func_8607_72ljcJ9BesDuyHMgowJsZ6V440BBEvDu7O4OMlbD41jF0Qz7lEcQB394qO1U(NetworkListenThread np, NetLoginHandler cq) {
+		np.addPendingConnection(cq);
 	}
 }
--- net/minecraft/src/NBTTagInt.java
+++ net/minecraft/src/NBTTagInt.java
@@ -10,16 +10,16 @@
 	public NBTTagInt() {
 	}
 
-	public NBTTagInt(int var1) {
-		this.intValue = var1;
-	}
-
-	void writeTagContents(DataOutput var1) throws IOException {
-		var1.writeInt(this.intValue);
-	}
-
-	void readTagContents(DataInput var1) throws IOException {
-		this.intValue = var1.readInt();
+	public NBTTagInt(int intValue) {
+		this.intValue = intValue;
+	}
+
+	void writeTagContents(DataOutput dataOutput) throws IOException {
+		dataOutput.writeInt(this.intValue);
+	}
+
+	void readTagContents(DataInput dataInput) throws IOException {
+		this.intValue = dataInput.readInt();
 	}
 
 	public byte getType() {
--- net/minecraft/src/ItemSword.java
+++ net/minecraft/src/ItemSword.java
@@ -3,22 +3,22 @@
 public class ItemSword extends Item {
 	private int weaponDamage;
 
-	public ItemSword(int var1, int var2) {
-		super(var1);
+	public ItemSword(int itemID, int maxDamage) {
+		super(itemID);
 		this.maxStackSize = 1;
-		this.maxDamage = 32 << var2;
-		if(var2 == 3) {
+		this.maxDamage = 32 << maxDamage;
+		if(maxDamage == 3) {
 			this.maxDamage *= 4;
 		}
 
-		this.weaponDamage = 4 + var2 * 2;
+		this.weaponDamage = 4 + maxDamage * 2;
 	}
 
-	public float getStrVsBlock(ItemStack var1, Block var2) {
+	public float getStrVsBlock(ItemStack stack, Block block) {
 		return 1.5F;
 	}
 
-	public void onBlockDestroyed(ItemStack var1, int var2, int var3, int var4, int var5) {
-		var1.damageItem(2);
+	public void onBlockDestroyed(ItemStack stack, int x, int y, int z, int z1) {
+		stack.damageItem(2);
 	}
 }
--- net/minecraft/src/Packet17AddToInventory.java
+++ net/minecraft/src/Packet17AddToInventory.java
@@ -12,30 +12,30 @@
 	public Packet17AddToInventory() {
 	}
 
-	public Packet17AddToInventory(ItemStack var1, int var2) {
-		this.itemID = var1.itemID;
-		this.count = var2;
-		this.itemDamage = var1.itemDmg;
-		if(var2 == 0) {
-			boolean var3 = true;
+	public Packet17AddToInventory(ItemStack stack, int count) {
+		this.itemID = stack.itemID;
+		this.count = count;
+		this.itemDamage = stack.itemDmg;
+		if(count == 0) {
+			boolean z3 = true;
 		}
 
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.itemID = var1.readShort();
-		this.count = var1.readByte();
-		this.itemDamage = var1.readShort();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeShort(this.itemID);
-		var1.writeByte(this.count);
-		var1.writeShort(this.itemDamage);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleAddToInventory(this);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.itemID = dataInputStream.readShort() & 65535;
+		this.count = dataInputStream.readByte();
+		this.itemDamage = dataInputStream.readShort();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeShort(this.itemID);
+		dataOutputStream.writeByte(this.count);
+		dataOutputStream.writeShort(this.itemDamage);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleAddToInventory(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/TileEntityChest.java
+++ net/minecraft/src/TileEntityChest.java
@@ -7,48 +7,48 @@
 		return 27;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.chestContents[var1];
+	public ItemStack getStackInSlot(int slot) {
+		return this.chestContents[slot];
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.chestContents[var1] = var2;
-		if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-			var2.stackSize = this.getInventoryStackLimit();
+	public void setInventorySlotContents(int slot, ItemStack stack) {
+		this.chestContents[slot] = stack;
+		if(stack != null && stack.stackSize > this.getInventoryStackLimit()) {
+			stack.stackSize = this.getInventoryStackLimit();
 		}
 
 		this.onInventoryChanged();
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		super.readFromNBT(var1);
-		NBTTagList var2 = var1.getTagList("Items");
+	public void readFromNBT(NBTTagCompound nbttagcompound) {
+		super.readFromNBT(nbttagcompound);
+		NBTTagList nBTTagList2 = nbttagcompound.getTagList("Items");
 		this.chestContents = new ItemStack[this.getSizeInventory()];
 
-		for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-			NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-			int var5 = var4.getByte("Slot") & 255;
-			if(var5 >= 0 && var5 < this.chestContents.length) {
-				this.chestContents[var5] = new ItemStack(var4);
+		for(int i3 = 0; i3 < nBTTagList2.tagCount(); ++i3) {
+			NBTTagCompound nBTTagCompound4 = (NBTTagCompound)nBTTagList2.tagAt(i3);
+			int i5 = nBTTagCompound4.getByte("Slot") & 255;
+			if(i5 >= 0 && i5 < this.chestContents.length) {
+				this.chestContents[i5] = new ItemStack(nBTTagCompound4);
 			}
 		}
 
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		super.writeToNBT(var1);
-		NBTTagList var2 = new NBTTagList();
+	public void writeToNBT(NBTTagCompound nbttagcompound) {
+		super.writeToNBT(nbttagcompound);
+		NBTTagList nBTTagList2 = new NBTTagList();
 
-		for(int var3 = 0; var3 < this.chestContents.length; ++var3) {
-			if(this.chestContents[var3] != null) {
-				NBTTagCompound var4 = new NBTTagCompound();
-				var4.setByte("Slot", (byte)var3);
-				this.chestContents[var3].writeToNBT(var4);
-				var2.setTag(var4);
+		for(int i3 = 0; i3 < this.chestContents.length; ++i3) {
+			if(this.chestContents[i3] != null) {
+				NBTTagCompound nBTTagCompound4 = new NBTTagCompound();
+				nBTTagCompound4.setByte("Slot", (byte)i3);
+				this.chestContents[i3].writeToNBT(nBTTagCompound4);
+				nBTTagList2.setTag(nBTTagCompound4);
 			}
 		}
 
-		var1.setTag("Items", var2);
+		nbttagcompound.setTag("Items", nBTTagList2);
 	}
 
 	public int getInventoryStackLimit() {
--- net/minecraft/src/EntitySlime.java
+++ net/minecraft/src/EntitySlime.java
@@ -6,43 +6,42 @@
 	private int slimeJumpDelay = 0;
 	public int size = 1;
 
-	public EntitySlime(World var1) {
-		super(var1);
-		this.texture = "/mob/slime.png";
+	public EntitySlime(World world) {
+		super(world);
 		this.size = 1 << this.rand.nextInt(3);
 		this.yOffset = 0.0F;
 		this.slimeJumpDelay = this.rand.nextInt(20) + 10;
 		this.setSlimeSize(this.size);
 	}
 
-	public void setSlimeSize(int var1) {
-		this.size = var1;
-		this.setSize(0.6F * (float)var1, 0.6F * (float)var1);
-		this.health = var1 * var1;
+	public void setSlimeSize(int size) {
+		this.size = size;
+		this.setSize(0.6F * (float)size, 0.6F * (float)size);
+		this.health = size * size;
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setInteger("Size", this.size - 1);
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		super.writeEntityToNBT(nbttagcompound);
+		nbttagcompound.setInteger("Size", this.size - 1);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.size = var1.getInteger("Size") + 1;
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		super.readEntityFromNBT(nbttagcompound);
+		this.size = nbttagcompound.getInteger("Size") + 1;
 	}
 
 	public void onUpdate() {
 		this.prevSquishFactor = this.squishFactor;
-		boolean var1 = this.onGround;
+		boolean z1 = this.onGround;
 		super.onUpdate();
-		if(this.onGround && !var1) {
-			for(int var2 = 0; var2 < this.size * 8; ++var2) {
-				float var3 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
-				float var4 = this.rand.nextFloat() * 0.5F + 0.5F;
-				float var5 = MathHelper.sin(var3) * (float)this.size * 0.5F * var4;
-				float var6 = MathHelper.cos(var3) * (float)this.size * 0.5F * var4;
-				this.worldObj.spawnParticle("slime", this.posX + (double)var5, this.boundingBox.minY, this.posZ + (double)var6, 0.0D, 0.0D, 0.0D);
+		if(this.onGround && !z1) {
+			for(int i2 = 0; i2 < this.size * 8; ++i2) {
+				float f3 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
+				float f4 = this.rand.nextFloat() * 0.5F + 0.5F;
+				float f5 = MathHelper.sin(f3) * (float)this.size * 0.5F * f4;
+				float f6 = MathHelper.cos(f3) * (float)this.size * 0.5F * f4;
+				this.worldObj.spawnParticle("slime", this.posX + (double)f5, this.boundingBox.minY, this.posZ + (double)f6, 0.0D, 0.0D, 0.0D);
 			}
 
 			if(this.size > 2) {
@@ -56,14 +55,14 @@
 	}
 
 	protected void updateEntityActionState() {
-		EntityPlayer var1 = this.worldObj.getClosestPlayerToEntity(this, 16.0D);
-		if(var1 != null) {
-			this.faceEntity(var1, 10.0F);
+		EntityPlayer entityPlayer1 = this.worldObj.getClosestPlayerToEntity(this, 16.0D);
+		if(entityPlayer1 != null) {
+			this.faceEntity(entityPlayer1, 10.0F);
 		}
 
 		if(this.onGround && this.slimeJumpDelay-- <= 0) {
 			this.slimeJumpDelay = this.rand.nextInt(20) + 10;
-			if(var1 != null) {
+			if(entityPlayer1 != null) {
 				this.slimeJumpDelay /= 3;
 			}
 
@@ -86,21 +85,21 @@
 
 	public void setEntityDead() {
 		if(this.size > 1 && this.health == 0) {
-			for(int var1 = 0; var1 < 4; ++var1) {
-				float var2 = ((float)(var1 % 2) - 0.5F) * (float)this.size / 4.0F;
-				float var3 = ((float)(var1 / 2) - 0.5F) * (float)this.size / 4.0F;
-				EntitySlime var4 = new EntitySlime(this.worldObj);
-				var4.setSlimeSize(this.size / 2);
-				var4.setLocationAndAngles(this.posX + (double)var2, this.posY + 0.5D, this.posZ + (double)var3, this.rand.nextFloat() * 360.0F, 0.0F);
-				this.worldObj.spawnEntityInWorld(var4);
+			for(int i1 = 0; i1 < 4; ++i1) {
+				float f2 = ((float)(i1 % 2) - 0.5F) * (float)this.size / 4.0F;
+				float f3 = ((float)(i1 / 2) - 0.5F) * (float)this.size / 4.0F;
+				EntitySlime entitySlime4 = new EntitySlime(this.worldObj);
+				entitySlime4.setSlimeSize(this.size / 2);
+				entitySlime4.setLocationAndAngles(this.posX + (double)f2, this.posY + 0.5D, this.posZ + (double)f3, this.rand.nextFloat() * 360.0F, 0.0F);
+				this.worldObj.spawnEntityInWorld(entitySlime4);
 			}
 		}
 
 		super.setEntityDead();
 	}
 
-	public void onCollideWithPlayer(EntityPlayer var1) {
-		if(this.size > 1 && this.canEntityBeSeen(var1) && (double)this.getDistanceToEntity(var1) < 0.6D * (double)this.size && var1.attackEntityFrom(this, this.size)) {
+	public void onCollideWithPlayer(EntityPlayer entityPlayer) {
+		if(this.size > 1 && this.canEntityBeSeen(entityPlayer) && (double)this.getDistanceToEntity(entityPlayer) < 0.6D * (double)this.size && entityPlayer.attackEntityFrom(this, this.size)) {
 			this.worldObj.playSoundAtEntity(this, "mob.slimeattack", 1.0F, (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
 		}
 
@@ -119,8 +118,8 @@
 	}
 
 	public boolean getCanSpawnHere() {
-		Chunk var1 = this.worldObj.getChunkFromBlockCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY));
-		return (this.size == 1 || this.worldObj.difficultySetting > 0) && this.rand.nextInt(10) == 0 && var1.getRandomWithSeed(987234911L).nextInt(10) == 0 && this.posY < 16.0D;
+		Chunk chunk1 = this.worldObj.getChunkFromBlockCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY));
+		return (this.size == 1 || this.worldObj.difficultySetting > 0) && this.rand.nextInt(10) == 0 && chunk1.getRandomWithSeed(987234911L).nextInt(10) == 0 && this.posY < 16.0D;
 	}
 
 	protected float getSoundVolume() {
--- net/minecraft/src/GuiLogOutputHandler.java
+++ net/minecraft/src/GuiLogOutputHandler.java
@@ -11,9 +11,9 @@
 	Formatter formatter = new GuiLogFormatter(this);
 	private JTextArea textArea;
 
-	public GuiLogOutputHandler(JTextArea var1) {
+	public GuiLogOutputHandler(JTextArea textArea) {
 		this.setFormatter(this.formatter);
-		this.textArea = var1;
+		this.textArea = textArea;
 	}
 
 	public void close() {
@@ -22,16 +22,16 @@
 	public void flush() {
 	}
 
-	public void publish(LogRecord var1) {
-		int var2 = this.textArea.getDocument().getLength();
-		this.textArea.append(this.formatter.format(var1));
+	public void publish(LogRecord logRecord) {
+		int i2 = this.textArea.getDocument().getLength();
+		this.textArea.append(this.formatter.format(logRecord));
 		this.textArea.setCaretPosition(this.textArea.getDocument().getLength());
-		int var3 = this.textArea.getDocument().getLength() - var2;
+		int i3 = this.textArea.getDocument().getLength() - i2;
 		if(this.allNums[this.currentNum] != 0) {
 			this.textArea.replaceRange("", 0, this.allNums[this.currentNum]);
 		}
 
-		this.allNums[this.currentNum] = var3;
+		this.allNums[this.currentNum] = i3;
 		this.currentNum = (this.currentNum + 1) % 1024;
 	}
 }
--- net/minecraft/src/BlockGrass.java
+++ net/minecraft/src/BlockGrass.java
@@ -3,31 +3,31 @@
 import java.util.Random;
 
 public class BlockGrass extends Block {
-	protected BlockGrass(int var1) {
-		super(var1, Material.grass);
+	protected BlockGrass(int id) {
+		super(id, Material.grass);
 		this.blockIndexInTexture = 3;
 		this.setTickOnLoad(true);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getBlockLightValue(var2, var3 + 1, var4) < 4 && var1.getBlockMaterial(var2, var3 + 1, var4).getCanBlockGrass()) {
-			if(var5.nextInt(4) != 0) {
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(world.getBlockLightValue(x, y + 1, z) < 4 && world.getBlockMaterial(x, y + 1, z).getCanBlockGrass()) {
+			if(random.nextInt(4) != 0) {
 				return;
 			}
 
-			var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
-		} else if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9) {
-			int var6 = var2 + var5.nextInt(3) - 1;
-			int var7 = var3 + var5.nextInt(5) - 3;
-			int var8 = var4 + var5.nextInt(3) - 1;
-			if(var1.getBlockId(var6, var7, var8) == Block.dirt.blockID && var1.getBlockLightValue(var6, var7 + 1, var8) >= 4 && !var1.getBlockMaterial(var6, var7 + 1, var8).getCanBlockGrass()) {
-				var1.setBlockWithNotify(var6, var7, var8, Block.grass.blockID);
+			world.setBlockWithNotify(x, y, z, Block.dirt.blockID);
+		} else if(world.getBlockLightValue(x, y + 1, z) >= 9) {
+			int i6 = x + random.nextInt(3) - 1;
+			int i7 = y + random.nextInt(5) - 3;
+			int i8 = z + random.nextInt(3) - 1;
+			if(world.getBlockId(i6, i7, i8) == Block.dirt.blockID && world.getBlockLightValue(i6, i7 + 1, i8) >= 4 && !world.getBlockMaterial(i6, i7 + 1, i8).getCanBlockGrass()) {
+				world.setBlockWithNotify(i6, i7, i8, Block.grass.blockID);
 			}
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return Block.dirt.idDropped(0, var2);
+	public int idDropped(int count, Random random) {
+		return Block.dirt.idDropped(0, random);
 	}
 }
--- /dev/null
+++ net/minecraft/src/ItemRokkubitoruTune.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public class ItemRokkubitoruTune extends ItemRecord {
+	public ItemRokkubitoruTune(int itemID, String recordName) {
+		super(itemID, recordName);
+	}
+}
--- net/minecraft/src/Packet29DestroyEntity.java
+++ net/minecraft/src/Packet29DestroyEntity.java
@@ -10,20 +10,20 @@
 	public Packet29DestroyEntity() {
 	}
 
-	public Packet29DestroyEntity(int var1) {
-		this.entityId = var1;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleDestroyEntity(this);
+	public Packet29DestroyEntity(int entityId) {
+		this.entityId = entityId;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleDestroyEntity(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/HandlerSetCheckpointUnknownClass3.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+public class HandlerSetCheckpointUnknownClass3 {
+	public int field_8593_80W25S4Acv750aXcO32R5zvNs096CglN4A7oY405y2p1i7kWoTYl28K51mOt;
+	public int field_8595_5d34pNxUO3wX1jFSwPDsUVur9Zgx6ExYy2UNZz2Pm0l1d4nZC86rsKRwU2qH;
+	public int field_8590_936i82d50GocAKUxFTVwI96g65oCr7LZrk1TnYfO1PnUb4t4z27GJhONfiE4;
+	public int field_8589_8kypw4Daz896SOln8571PLils8Z89ashPAoQAj5vWzeFCrGT0dhZ82W6pRyJ;
+	public int field_8594_9oiTZixM46YAGrXn6xz14B16vAWa3KSp8ETa42rO657x2S76n11oKh60Psw9;
+	public int field_8588_1fs498Mh46HC13LuyfmnQoeW46o612S62WMLlvoPmwyY8gIt6R4J32rcc8Uj;
+	boolean field_8592_5vsu7xqww480fPkZA4FWI3a0sur20HL8k2RTijz9T1F9N3I3Lvn3lH3w2I65 = false;
+	String field_8591_9068d2S4R7AKo0A2FhhPs25SvLOLlIpQmV2y8u5roH6hC5aoz6x4JKq4chw3;
+
+	public HandlerSetCheckpointUnknownClass3(int integer1, int integer2, int integer3, int integer4, int integer5, int integer6, String string) {
+		this.field_8593_80W25S4Acv750aXcO32R5zvNs096CglN4A7oY405y2p1i7kWoTYl28K51mOt = integer1;
+		this.field_8595_5d34pNxUO3wX1jFSwPDsUVur9Zgx6ExYy2UNZz2Pm0l1d4nZC86rsKRwU2qH = integer2;
+		this.field_8590_936i82d50GocAKUxFTVwI96g65oCr7LZrk1TnYfO1PnUb4t4z27GJhONfiE4 = integer3;
+		this.field_8589_8kypw4Daz896SOln8571PLils8Z89ashPAoQAj5vWzeFCrGT0dhZ82W6pRyJ = integer4;
+		this.field_8594_9oiTZixM46YAGrXn6xz14B16vAWa3KSp8ETa42rO657x2S76n11oKh60Psw9 = integer5;
+		this.field_8588_1fs498Mh46HC13LuyfmnQoeW46o612S62WMLlvoPmwyY8gIt6R4J32rcc8Uj = integer6;
+		this.field_8592_5vsu7xqww480fPkZA4FWI3a0sur20HL8k2RTijz9T1F9N3I3Lvn3lH3w2I65 = false;
+		this.field_8591_9068d2S4R7AKo0A2FhhPs25SvLOLlIpQmV2y8u5roH6hC5aoz6x4JKq4chw3 = string;
+	}
+
+	public HandlerSetCheckpointUnknownClass3(int integer1, int integer2, int integer3, String string) {
+		this.field_8593_80W25S4Acv750aXcO32R5zvNs096CglN4A7oY405y2p1i7kWoTYl28K51mOt = integer1;
+		this.field_8595_5d34pNxUO3wX1jFSwPDsUVur9Zgx6ExYy2UNZz2Pm0l1d4nZC86rsKRwU2qH = integer2;
+		this.field_8590_936i82d50GocAKUxFTVwI96g65oCr7LZrk1TnYfO1PnUb4t4z27GJhONfiE4 = integer3;
+		this.field_8589_8kypw4Daz896SOln8571PLils8Z89ashPAoQAj5vWzeFCrGT0dhZ82W6pRyJ = integer1;
+		this.field_8594_9oiTZixM46YAGrXn6xz14B16vAWa3KSp8ETa42rO657x2S76n11oKh60Psw9 = integer2;
+		this.field_8588_1fs498Mh46HC13LuyfmnQoeW46o612S62WMLlvoPmwyY8gIt6R4J32rcc8Uj = integer3;
+		this.field_8592_5vsu7xqww480fPkZA4FWI3a0sur20HL8k2RTijz9T1F9N3I3Lvn3lH3w2I65 = true;
+		this.field_8591_9068d2S4R7AKo0A2FhhPs25SvLOLlIpQmV2y8u5roH6hC5aoz6x4JKq4chw3 = string;
+	}
+
+	public HandlerSetCheckpointUnknownClass2 func_8587_3DB1opJcz9PX3QkUwHZe64YD0Bv8xASqg0qSUF9os8q31sOha3fT3o6vRQA6() {
+		return new HandlerSetCheckpointUnknownClass2((double)this.field_8593_80W25S4Acv750aXcO32R5zvNs096CglN4A7oY405y2p1i7kWoTYl28K51mOt, (double)this.field_8595_5d34pNxUO3wX1jFSwPDsUVur9Zgx6ExYy2UNZz2Pm0l1d4nZC86rsKRwU2qH, (double)this.field_8590_936i82d50GocAKUxFTVwI96g65oCr7LZrk1TnYfO1PnUb4t4z27GJhONfiE4);
+	}
+}
--- /dev/null
+++ net/minecraft/src/Packet211.java
@@ -1,0 +1,40 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet211 extends Packet {
+	public XYZv field_6512_9315SGhK61m01Mvpd7FYfTqtkH86bImmQy9tT4HiT90ZYcZw2p6PWgZmm3C0;
+	public XYZv field_6511_4nb4wJSS8Z7f0yud9HSipXBS325xmtP0UTkmO39gkyDLnT1Rp8MD1m9tigTd;
+	public int field_6510_3x9bFeSTfuLmvIiu27ZXURnxx20g5j8A7vxu9rn52dT97zr07ecExt1l1nA3;
+
+	public Packet211(XYZv bc1, XYZv bc2, int integer) {
+		this.field_6512_9315SGhK61m01Mvpd7FYfTqtkH86bImmQy9tT4HiT90ZYcZw2p6PWgZmm3C0 = bc1;
+		this.field_6511_4nb4wJSS8Z7f0yud9HSipXBS325xmtP0UTkmO39gkyDLnT1Rp8MD1m9tigTd = bc2;
+		this.field_6510_3x9bFeSTfuLmvIiu27ZXURnxx20g5j8A7vxu9rn52dT97zr07ecExt1l1nA3 = integer;
+	}
+
+	public Packet211() {
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.field_6512_9315SGhK61m01Mvpd7FYfTqtkH86bImmQy9tT4HiT90ZYcZw2p6PWgZmm3C0 = XYZv.func_7454_6t7Pa7M0Bc13tc0j1M0opTiT5fh1fX89e84O7Yh37Q99KAQ8G9l1IPW0319z(dataInputStream);
+		this.field_6511_4nb4wJSS8Z7f0yud9HSipXBS325xmtP0UTkmO39gkyDLnT1Rp8MD1m9tigTd = XYZv.func_7454_6t7Pa7M0Bc13tc0j1M0opTiT5fh1fX89e84O7Yh37Q99KAQ8G9l1IPW0319z(dataInputStream);
+		this.field_6510_3x9bFeSTfuLmvIiu27ZXURnxx20g5j8A7vxu9rn52dT97zr07ecExt1l1nA3 = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		this.field_6512_9315SGhK61m01Mvpd7FYfTqtkH86bImmQy9tT4HiT90ZYcZw2p6PWgZmm3C0.func_7453_69TA2MtO216U93nvQ1Qy67b3M4t3rE79JbU3sees7vW4bBe284I23GlxS78I(dataOutputStream);
+		this.field_6511_4nb4wJSS8Z7f0yud9HSipXBS325xmtP0UTkmO39gkyDLnT1Rp8MD1m9tigTd.func_7453_69TA2MtO216U93nvQ1Qy67b3M4t3rE79JbU3sees7vW4bBe284I23GlxS78I(dataOutputStream);
+		dataOutputStream.writeInt(this.field_6510_3x9bFeSTfuLmvIiu27ZXURnxx20g5j8A7vxu9rn52dT97zr07ecExt1l1nA3);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.func_6028_84mzYZR4RZ06rHsfcZ0KP1l2c7K3NAX02a44e8pG40f8j1ymynF1zR45OMVK(this);
+	}
+
+	public int getPacketSize() {
+		return 0;
+	}
+}
--- net/minecraft/src/Packet59ComplexEntity.java
+++ net/minecraft/src/Packet59ComplexEntity.java
@@ -15,42 +15,42 @@
 		this.isChunkDataPacket = true;
 	}
 
-	public Packet59ComplexEntity(int var1, int var2, int var3, TileEntity var4) {
+	public Packet59ComplexEntity(int xCoord, int yCoord, int zCoord, TileEntity tileEntity) {
 		this.isChunkDataPacket = true;
-		this.xCoord = var1;
-		this.yCoord = var2;
-		this.zCoord = var3;
+		this.xCoord = xCoord;
+		this.yCoord = yCoord;
+		this.zCoord = zCoord;
 		this.tileEntityNBT = new NBTTagCompound();
-		var4.writeToNBT(this.tileEntityNBT);
+		tileEntity.writeToNBT(this.tileEntityNBT);
 
 		try {
 			this.compressedNBT = CompressedStreamTools.compress(this.tileEntityNBT);
-		} catch (IOException var6) {
-			var6.printStackTrace();
+		} catch (IOException iOException6) {
+			iOException6.printStackTrace();
 		}
 
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xCoord = var1.readInt();
-		this.yCoord = var1.readShort();
-		this.zCoord = var1.readInt();
-		int var2 = var1.readShort() & '\uffff';
-		this.compressedNBT = new byte[var2];
-		var1.readFully(this.compressedNBT);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xCoord = dataInputStream.readInt();
+		this.yCoord = dataInputStream.readShort();
+		this.zCoord = dataInputStream.readInt();
+		int i2 = dataInputStream.readShort() & 65535;
+		this.compressedNBT = new byte[i2];
+		dataInputStream.readFully(this.compressedNBT);
 		this.tileEntityNBT = CompressedStreamTools.decompress(this.compressedNBT);
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xCoord);
-		var1.writeShort(this.yCoord);
-		var1.writeInt(this.zCoord);
-		var1.writeShort((short)this.compressedNBT.length);
-		var1.write(this.compressedNBT);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xCoord);
+		dataOutputStream.writeShort(this.yCoord);
+		dataOutputStream.writeInt(this.zCoord);
+		dataOutputStream.writeShort((short)this.compressedNBT.length);
+		dataOutputStream.write(this.compressedNBT);
 	}
 
-	public void processPacket(NetHandler var1) {
-		var1.handleComplexEntity(this);
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleComplexEntity(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/ZMWorld.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+import java.io.File;
+
+public class ZMWorld extends World {
+	public ZMWorld(File worldFile, String levelName) {
+		super(worldFile, levelName);
+	}
+}
--- net/minecraft/src/Packet0KeepAlive.java
+++ net/minecraft/src/Packet0KeepAlive.java
@@ -4,13 +4,13 @@
 import java.io.DataOutputStream;
 
 public class Packet0KeepAlive extends Packet {
-	public void processPacket(NetHandler var1) {
-	}
-
-	public void readPacketData(DataInputStream var1) {
-	}
-
-	public void writePacket(DataOutputStream var1) {
+	public void processPacket(NetHandler netHandler) {
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) {
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) {
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/BlockFurnace.java
+++ net/minecraft/src/BlockFurnace.java
@@ -5,67 +5,67 @@
 public class BlockFurnace extends BlockContainer {
 	private final boolean isActive;
 
-	protected BlockFurnace(int var1, boolean var2) {
-		super(var1, Material.rock);
-		this.isActive = var2;
+	protected BlockFurnace(int id, boolean isActive) {
+		super(id, Material.rock);
+		this.isActive = isActive;
 		this.blockIndexInTexture = 45;
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Block.stoneOvenIdle.blockID;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		super.onBlockAdded(var1, var2, var3, var4);
-		this.setDefaultDirection(var1, var2, var3, var4);
-	}
-
-	private void setDefaultDirection(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3, var4 - 1);
-		int var6 = var1.getBlockId(var2, var3, var4 + 1);
-		int var7 = var1.getBlockId(var2 - 1, var3, var4);
-		int var8 = var1.getBlockId(var2 + 1, var3, var4);
-		byte var9 = 3;
-		if(Block.opaqueCubeLookup[var5] && !Block.opaqueCubeLookup[var6]) {
-			var9 = 3;
-		}
-
-		if(Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var5]) {
-			var9 = 2;
-		}
-
-		if(Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var8]) {
-			var9 = 5;
-		}
-
-		if(Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var7]) {
-			var9 = 4;
-		}
-
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var9);
-	}
-
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? Block.stone.blockID : (var1 == 0 ? Block.stone.blockID : (var1 == 3 ? this.blockIndexInTexture - 1 : this.blockIndexInTexture));
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		TileEntityFurnace var6 = (TileEntityFurnace)var1.getBlockTileEntity(var2, var3, var4);
-		var5.displayGUIFurnace(var6);
+	public void onBlockAdded(World world, int x, int y, int z) {
+		super.onBlockAdded(world, x, y, z);
+		this.setDefaultDirection(world, x, y, z);
+	}
+
+	private void setDefaultDirection(World world, int x, int y, int z) {
+		int i5 = world.getBlockId(x, y, z - 1);
+		int i6 = world.getBlockId(x, y, z + 1);
+		int i7 = world.getBlockId(x - 1, y, z);
+		int i8 = world.getBlockId(x + 1, y, z);
+		byte b9 = 3;
+		if(Block.opaqueCubeLookup[i5] && !Block.opaqueCubeLookup[i6]) {
+			b9 = 3;
+		}
+
+		if(Block.opaqueCubeLookup[i6] && !Block.opaqueCubeLookup[i5]) {
+			b9 = 2;
+		}
+
+		if(Block.opaqueCubeLookup[i7] && !Block.opaqueCubeLookup[i8]) {
+			b9 = 5;
+		}
+
+		if(Block.opaqueCubeLookup[i8] && !Block.opaqueCubeLookup[i7]) {
+			b9 = 4;
+		}
+
+		world.setBlockMetadataWithNotify(x, y, z, b9);
+	}
+
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? Block.stone.blockID : (side == 0 ? Block.stone.blockID : (side == 3 ? this.blockIndexInTexture - 1 : this.blockIndexInTexture));
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		TileEntityFurnace tileEntityFurnace6 = (TileEntityFurnace)world.getBlockTileEntity(x, y, z);
+		entityPlayer.displayGUIFurnace(tileEntityFurnace6);
 		return true;
 	}
 
-	public static void updateFurnaceBlockState(boolean var0, World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		TileEntity var6 = var1.getBlockTileEntity(var2, var3, var4);
-		if(var0) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.stoneOvenActive.blockID);
+	public static void updateFurnaceBlockState(boolean isActive, World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		TileEntity tileEntity6 = world.getBlockTileEntity(x, y, z);
+		if(isActive) {
+			world.setBlockWithNotify(x, y, z, Block.stoneOvenActive.blockID);
 		} else {
-			var1.setBlockWithNotify(var2, var3, var4, Block.stoneOvenIdle.blockID);
+			world.setBlockWithNotify(x, y, z, Block.stoneOvenIdle.blockID);
 		}
 
-		var1.setBlockMetadataWithNotify(var2, var3, var4, var5);
-		var1.setBlockTileEntity(var2, var3, var4, var6);
+		world.setBlockMetadataWithNotify(x, y, z, i5);
+		world.setBlockTileEntity(x, y, z, tileEntity6);
 	}
 
 	protected TileEntity getBlockEntity() {
--- net/minecraft/src/Packet22Collect.java
+++ net/minecraft/src/Packet22Collect.java
@@ -6,28 +6,28 @@
 
 public class Packet22Collect extends Packet {
 	public int collectedEntityId;
-	public int collectorEntityId;
+	public int collectorEntityID;
 
 	public Packet22Collect() {
 	}
 
-	public Packet22Collect(int var1, int var2) {
-		this.collectedEntityId = var1;
-		this.collectorEntityId = var2;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.collectedEntityId = var1.readInt();
-		this.collectorEntityId = var1.readInt();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.collectedEntityId);
-		var1.writeInt(this.collectorEntityId);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleCollect(this);
+	public Packet22Collect(int collectedEntityId, int collectorEntityID) {
+		this.collectedEntityId = collectedEntityId;
+		this.collectorEntityID = collectorEntityID;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.collectedEntityId = dataInputStream.readInt();
+		this.collectorEntityID = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.collectedEntityId);
+		dataOutputStream.writeInt(this.collectorEntityID);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleCollect(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/Packet53BlockChange.java
+++ net/minecraft/src/Packet53BlockChange.java
@@ -15,33 +15,34 @@
 		this.isChunkDataPacket = true;
 	}
 
-	public Packet53BlockChange(int var1, int var2, int var3, World var4) {
+	public Packet53BlockChange(int xPosition, int yPosition, int zPosition, World world) {
 		this.isChunkDataPacket = true;
-		this.xPosition = var1;
-		this.yPosition = var2;
-		this.zPosition = var3;
-		this.type = var4.getBlockId(var1, var2, var3);
-		this.metadata = var4.getBlockMetadata(var1, var2, var3);
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.read();
-		this.zPosition = var1.readInt();
-		this.type = var1.read();
-		this.metadata = var1.read();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.write(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.write(this.type);
-		var1.write(this.metadata);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleBlockChange(this);
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.zPosition = zPosition;
+		this.type = world.getBlockId(xPosition, yPosition, zPosition);
+		this.metadata = world.getBlockMetadata(xPosition, yPosition, zPosition);
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.read();
+		this.zPosition = dataInputStream.readInt();
+		this.type = dataInputStream.read();
+		this.metadata = dataInputStream.read();
+		ExtLogger.i("Received packet53, metadata: " + this.metadata);
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.write(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.write(this.type);
+		dataOutputStream.write(this.metadata);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleBlockChange(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/BlockReed.java
+++ net/minecraft/src/BlockReed.java
@@ -3,59 +3,59 @@
 import java.util.Random;
 
 public class BlockReed extends Block {
-	protected BlockReed(int var1, int var2) {
-		super(var1, Material.plants);
-		this.blockIndexInTexture = var2;
-		float var3 = 6.0F / 16.0F;
-		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, 1.0F, 0.5F + var3);
+	protected BlockReed(int id, int blockIndex) {
+		super(id, Material.plants);
+		this.blockIndexInTexture = blockIndex;
+		float f3 = 0.375F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, 1.0F, 0.5F + f3);
 		this.setTickOnLoad(true);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getBlockId(var2, var3 + 1, var4) == 0) {
-			int var6;
-			for(var6 = 1; var1.getBlockId(var2, var3 - var6, var4) == this.blockID; ++var6) {
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(world.getBlockId(x, y + 1, z) == 0) {
+			int i6;
+			for(i6 = 1; world.getBlockId(x, y - i6, z) == this.blockID; ++i6) {
 			}
 
-			if(var6 < 3) {
-				int var7 = var1.getBlockMetadata(var2, var3, var4);
-				if(var7 == 15) {
-					var1.setBlockWithNotify(var2, var3 + 1, var4, this.blockID);
-					var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
+			if(i6 < 3) {
+				int i7 = world.getBlockMetadata(x, y, z);
+				if(i7 == 15) {
+					world.setBlockWithNotify(x, y + 1, z, this.blockID);
+					world.setBlockMetadataWithNotify(x, y, z, 0);
 				} else {
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + 1);
+					world.setBlockMetadataWithNotify(x, y, z, i7 + 1);
 				}
 			}
 		}
 
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3 - 1, var4);
-		return var5 == this.blockID ? true : (var5 != Block.grass.blockID && var5 != Block.dirt.blockID ? false : (var1.getBlockMaterial(var2 - 1, var3 - 1, var4) == Material.water ? true : (var1.getBlockMaterial(var2 + 1, var3 - 1, var4) == Material.water ? true : (var1.getBlockMaterial(var2, var3 - 1, var4 - 1) == Material.water ? true : var1.getBlockMaterial(var2, var3 - 1, var4 + 1) == Material.water))));
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		this.checkBlockCoordValid(var1, var2, var3, var4);
-	}
-
-	protected final void checkBlockCoordValid(World var1, int var2, int var3, int var4) {
-		if(!this.canBlockStay(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		int i5 = world.getBlockId(x, y - 1, z);
+		return i5 == this.blockID ? true : (i5 != Block.grass.blockID && i5 != Block.dirt.blockID ? false : (world.getBlockMaterial(x - 1, y - 1, z) == Material.water ? true : (world.getBlockMaterial(x + 1, y - 1, z) == Material.water ? true : (world.getBlockMaterial(x, y - 1, z - 1) == Material.water ? true : world.getBlockMaterial(x, y - 1, z + 1) == Material.water))));
+	}
+
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		this.checkBlockCoordValid(world, x, y, z);
+	}
+
+	protected final void checkBlockCoordValid(World world, int x, int y, int z) {
+		if(!this.canBlockStay(world, x, y, z)) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
 
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-		return this.canPlaceBlockAt(var1, var2, var3, var4);
+	public boolean canBlockStay(World world, int x, int y, int z) {
+		return this.canPlaceBlockAt(world, x, y, z);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
 		return null;
 	}
 
-	public int idDropped(int var1, Random var2) {
+	public int idDropped(int count, Random random) {
 		return Item.reed.shiftedIndex;
 	}
 
--- /dev/null
+++ net/minecraft/src/BlockGlowingFlower.java
@@ -1,0 +1,64 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockGlowingFlower extends BlockGlowing {
+	int renderMode = 1;
+
+	public BlockGlowingFlower(int integer1, int integer2, int integer3) {
+		super(integer1, integer2, integer3);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		return null;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return true;
+	}
+
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
+		if(entity instanceof EntityPlayer) {
+			EntityPlayer entityPlayer6 = (EntityPlayer)entity;
+			if(entityPlayer6.lastInWater <= 0) {
+				entityPlayer6.lastInWater = 20;
+				entityPlayer6.heal(1);
+			}
+		}
+
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		ItemStack itemStack6 = entityPlayer.inventory.getCurrentItem();
+		if(itemStack6 == null) {
+			return false;
+		} else {
+			if(itemStack6.itemID == ExtBlocks.blueFireIdk.blockID) {
+				world.setBlockWithNotify(x, y, z, 117);
+				entityPlayer.inventory.consumeInventoryItem(ExtBlocks.blueFireIdk.blockID);
+				world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "ext.infuse", 1.0F, 1.0F);
+			} else if(itemStack6.itemID == Item.ingotGold.shiftedIndex) {
+				world.setBlockWithNotify(x, y, z, 118);
+				entityPlayer.inventory.consumeInventoryItem(Item.ingotGold.shiftedIndex);
+				world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "ext.infuse", 1.0F, 0.7F);
+			} else if(itemStack6.itemID == ExtItems.obsidianIngot.shiftedIndex) {
+				world.setBlockWithNotify(x, y, z, 119);
+				entityPlayer.inventory.consumeInventoryItem(ExtItems.obsidianIngot.shiftedIndex);
+				world.playSoundEffect((double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), "ext.infuse", 1.0F, 0.3F);
+			}
+
+			return true;
+		}
+	}
+
+	public void randomDisplayTick(World worldObj, int x, int y, int z, Random rand) {
+	}
+}
--- /dev/null
+++ net/minecraft/src/Encoder.java
@@ -1,0 +1,173 @@
+package net.minecraft.src;
+
+import java.io.OutputStream;
+import java.nio.ByteBuffer;
+import java.util.Arrays;
+import java.util.Objects;
+
+public class Encoder {
+	private final byte[] newline;
+	private final int linemax;
+	private final boolean isURL;
+	private final boolean doPadding;
+	private static final char[] toBase6 = new char[]{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'};
+	private static final char[] toBase64URL = new char[]{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_'};
+	private static final int MIMELINEMAX = 76;
+	private static final byte[] CRLF = new byte[]{(byte)13, (byte)10};
+	static final Encoder RFC4648 = new Encoder(false, (byte[])null, -1, true);
+	static final Encoder RFC4648_URLSAFE = new Encoder(true, (byte[])null, -1, true);
+	static final Encoder RFC2045 = new Encoder(false, CRLF, 76, true);
+
+	public Encoder(boolean boolean1, byte[] arr, int integer, boolean boolean4) {
+		this.isURL = boolean1;
+		this.newline = arr;
+		this.linemax = integer;
+		this.doPadding = boolean4;
+	}
+
+	private final int outLength(int integer) {
+		boolean z2 = false;
+		int i4;
+		if(this.doPadding) {
+			i4 = 4 * ((integer + 2) / 3);
+		} else {
+			int i3 = integer % 3;
+			i4 = 4 * (integer / 3) + (i3 == 0 ? 0 : i3 + 1);
+		}
+
+		if(this.linemax > 0) {
+			i4 += (i4 - 1) / this.linemax * this.newline.length;
+		}
+
+		return i4;
+	}
+
+	public byte[] encode(byte[] arr) {
+		int i2 = this.outLength(arr.length);
+		byte[] b3 = new byte[i2];
+		int i4 = this.encode0(arr, 0, arr.length, b3);
+		return i4 != b3.length ? Arrays.copyOf(b3, i4) : b3;
+	}
+
+	public int encode(byte[] arr1, byte[] arr2) {
+		int i3 = this.outLength(arr1.length);
+		if(arr2.length < i3) {
+			throw new IllegalArgumentException("Output byte array is too small for encoding all input bytes");
+		} else {
+			return this.encode0(arr1, 0, arr1.length, arr2);
+		}
+	}
+
+	public String encodeToString(byte[] arr) {
+		byte[] b2 = this.encode(arr);
+		return new String(b2, 0, 0, b2.length);
+	}
+
+	public ByteBuffer encode(ByteBuffer byteBuffer) {
+		int i2 = this.outLength(byteBuffer.remaining());
+		byte[] b3 = new byte[i2];
+		boolean z4 = false;
+		int i6;
+		if(byteBuffer.hasArray()) {
+			i6 = this.encode0(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.arrayOffset() + byteBuffer.limit(), b3);
+			byteBuffer.position(byteBuffer.limit());
+		} else {
+			byte[] b5 = new byte[byteBuffer.remaining()];
+			byteBuffer.get(b5);
+			i6 = this.encode0(b5, 0, b5.length, b3);
+		}
+
+		if(i6 != b3.length) {
+			b3 = Arrays.copyOf(b3, i6);
+		}
+
+		return ByteBuffer.wrap(b3);
+	}
+
+	public OutputStream wrap(OutputStream outputStream) {
+		Objects.requireNonNull(outputStream);
+		return new EncOutputStream(outputStream, this.isURL ? toBase64URL : toBase6, this.newline, this.linemax, this.doPadding);
+	}
+
+	public Encoder withoutPadding() {
+		return !this.doPadding ? this : new Encoder(this.isURL, this.newline, this.linemax, false);
+	}
+
+	private int encode0(byte[] arr1, int integer2, int integer3, byte[] arr4) {
+		char[] c5 = this.isURL ? toBase64URL : toBase6;
+		int i6 = integer2;
+		int i7 = (integer3 - integer2) / 3 * 3;
+		int i8 = integer2 + i7;
+		if(this.linemax > 0 && i7 > this.linemax / 4 * 3) {
+			i7 = this.linemax / 4 * 3;
+		}
+
+		int i9 = 0;
+
+		while(true) {
+			int i10;
+			int i11;
+			int i13;
+			do {
+				do {
+					if(i6 >= i8) {
+						if(i6 < integer3) {
+							i10 = arr1[i6++] & 255;
+							arr4[i9++] = (byte)c5[i10 >> 2];
+							if(i6 == integer3) {
+								arr4[i9++] = (byte)c5[i10 << 4 & 63];
+								if(this.doPadding) {
+									arr4[i9++] = 61;
+									arr4[i9++] = 61;
+								}
+							} else {
+								i11 = arr1[i6++] & 255;
+								arr4[i9++] = (byte)c5[i10 << 4 & 63 | i11 >> 4];
+								arr4[i9++] = (byte)c5[i11 << 2 & 63];
+								if(this.doPadding) {
+									arr4[i9++] = 61;
+								}
+							}
+						}
+
+						return i9;
+					}
+
+					i10 = Math.min(i6 + i7, i8);
+					i11 = i6;
+
+					for(int i12 = i9; i11 < i10; arr4[i12++] = (byte)c5[i13 & 63]) {
+						i13 = (arr1[i11++] & 255) << 16 | (arr1[i11++] & 255) << 8 | arr1[i11++] & 255;
+						arr4[i12++] = (byte)c5[i13 >>> 18 & 63];
+						arr4[i12++] = (byte)c5[i13 >>> 12 & 63];
+						arr4[i12++] = (byte)c5[i13 >>> 6 & 63];
+					}
+
+					i11 = (i10 - i6) / 3 * 4;
+					i9 += i11;
+					i6 = i10;
+				} while(i11 != this.linemax);
+			} while(i10 >= integer3);
+
+			byte[] b16 = this.newline;
+			i13 = b16.length;
+
+			for(int i14 = 0; i14 < i13; ++i14) {
+				byte b15 = b16[i14];
+				arr4[i9++] = b15;
+			}
+		}
+	}
+
+	Encoder(boolean boolean1, byte[] arr, int integer, boolean boolean4, Object kc) {
+		this(boolean1, arr, integer, boolean4);
+	}
+
+	static char[] func_7602_2PgBV45sFD3sYyDGM1Vco6kkt3ZAWSg0QJ3tM8QONuKowpG8J290t538J9TU() {
+		return toBase6;
+	}
+
+	static char[] func_7600_05cCacq74i1m40SUw69dBv804Ncx8I8328Ne2aEfKyWWg7Xooj43pSgb66FX() {
+		return toBase64URL;
+	}
+}
--- net/minecraft/src/Pathfinder.java
+++ net/minecraft/src/Pathfinder.java
@@ -6,162 +6,158 @@
 	private MCHashTable pointMap = new MCHashTable();
 	private PathPoint[] pathOptions = new PathPoint[32];
 
-	public Pathfinder(IBlockAccess var1) {
-		this.worldMap = var1;
-	}
-
-	public PathEntity createEntityPathTo(Entity var1, Entity var2, float var3) {
-		return this.createEntityPathTo(var1, var2.posX, var2.boundingBox.minY, var2.posZ, var3);
-	}
-
-	public PathEntity createEntityPathTo(Entity var1, int var2, int var3, int var4, float var5) {
-		return this.createEntityPathTo(var1, (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), var5);
-	}
-
-	private PathEntity createEntityPathTo(Entity var1, double var2, double var4, double var6, float var8) {
+	public Pathfinder(IBlockAccess worldMap) {
+		this.worldMap = worldMap;
+	}
+
+	public PathEntity createEntityPathTo(Entity entity1, Entity entity2, float distance) {
+		return this.createEntityPathTo(entity1, entity2.posX, entity2.boundingBox.minY, entity2.posZ, distance);
+	}
+
+	public PathEntity createEntityPathTo(Entity entity, int x, int boundingBoxY, int z, float distance) {
+		return this.createEntityPathTo(entity, (double)((float)x + 0.5F), (double)((float)boundingBoxY + 0.5F), (double)((float)z + 0.5F), distance);
+	}
+
+	private PathEntity createEntityPathTo(Entity entity, double x, double boundingBoxY, double z, float distance) {
 		this.path.clearPath();
 		this.pointMap.clearMap();
-		PathPoint var9 = this.openPoint(MathHelper.floor_double(var1.boundingBox.minX), MathHelper.floor_double(var1.boundingBox.minY), MathHelper.floor_double(var1.boundingBox.minZ));
-		PathPoint var10 = this.openPoint(MathHelper.floor_double(var2 - (double)(var1.width / 2.0F)), MathHelper.floor_double(var4), MathHelper.floor_double(var6 - (double)(var1.width / 2.0F)));
-		PathPoint var11 = new PathPoint(MathHelper.floor_float(var1.width + 1.0F), MathHelper.floor_float(var1.height + 1.0F), MathHelper.floor_float(var1.width + 1.0F));
-		PathEntity var12 = this.addToPath(var1, var9, var10, var11, var8);
-		return var12;
+		PathPoint pathPoint9 = this.openPoint(MathHelper.floor_double(entity.boundingBox.minX), MathHelper.floor_double(entity.boundingBox.minY), MathHelper.floor_double(entity.boundingBox.minZ));
+		PathPoint pathPoint10 = this.openPoint(MathHelper.floor_double(x - (double)(entity.width / 2.0F)), MathHelper.floor_double(boundingBoxY), MathHelper.floor_double(z - (double)(entity.width / 2.0F)));
+		PathPoint pathPoint11 = new PathPoint(MathHelper.floor_float(entity.width + 1.0F), MathHelper.floor_float(entity.height + 1.0F), MathHelper.floor_float(entity.width + 1.0F));
+		PathEntity pathEntity12 = this.addToPath(entity, pathPoint9, pathPoint10, pathPoint11, distance);
+		return pathEntity12;
 	}
 
-	private PathEntity addToPath(Entity var1, PathPoint var2, PathPoint var3, PathPoint var4, float var5) {
-		var2.totalPathDistance = 0.0F;
-		var2.distanceToNext = var2.distanceTo(var3);
-		var2.distanceToTarget = var2.distanceToNext;
+	private PathEntity addToPath(Entity entity, PathPoint pathPoint1, PathPoint pathPoint2, PathPoint pathPoint3, float distance) {
+		pathPoint1.totalPathDistance = 0.0F;
+		pathPoint1.distanceToNext = pathPoint1.distanceTo(pathPoint2);
+		pathPoint1.distanceToTarget = pathPoint1.distanceToNext;
 		this.path.clearPath();
-		this.path.addPoint(var2);
-		PathPoint var6 = var2;
+		this.path.addPoint(pathPoint1);
+		PathPoint pathPoint6 = pathPoint1;
 
 		while(!this.path.isPathEmpty()) {
-			PathPoint var7 = this.path.dequeue();
-			if(var7.hash == var3.hash) {
-				return this.createEntityPath(var2, var3);
-			}
-
-			if(var7.distanceTo(var3) < var6.distanceTo(var3)) {
-				var6 = var7;
-			}
-
-			var7.isFirst = true;
-			int var8 = this.findPathOptions(var1, var7, var4, var3, var5);
-
-			for(int var9 = 0; var9 < var8; ++var9) {
-				PathPoint var10 = this.pathOptions[var9];
-				float var11 = var7.totalPathDistance + var7.distanceTo(var10);
-				if(!var10.isAssigned() || var11 < var10.totalPathDistance) {
-					var10.previous = var7;
-					var10.totalPathDistance = var11;
-					var10.distanceToNext = var10.distanceTo(var3);
-					if(var10.isAssigned()) {
-						this.path.changeDistance(var10, var10.totalPathDistance + var10.distanceToNext);
+			PathPoint pathPoint7 = this.path.dequeue();
+			if(pathPoint7.hash == pathPoint2.hash) {
+				return this.createEntityPath(pathPoint1, pathPoint2);
+			}
+
+			if(pathPoint7.distanceTo(pathPoint2) < pathPoint6.distanceTo(pathPoint2)) {
+				pathPoint6 = pathPoint7;
+			}
+
+			pathPoint7.isFirst = true;
+			int i8 = this.findPathOptions(entity, pathPoint7, pathPoint3, pathPoint2, distance);
+
+			for(int i9 = 0; i9 < i8; ++i9) {
+				PathPoint pathPoint10 = this.pathOptions[i9];
+				float f11 = pathPoint7.totalPathDistance + pathPoint7.distanceTo(pathPoint10);
+				if(!pathPoint10.isAssigned() || f11 < pathPoint10.totalPathDistance) {
+					pathPoint10.previous = pathPoint7;
+					pathPoint10.totalPathDistance = f11;
+					pathPoint10.distanceToNext = pathPoint10.distanceTo(pathPoint2);
+					if(pathPoint10.isAssigned()) {
+						this.path.changeDistance(pathPoint10, pathPoint10.totalPathDistance + pathPoint10.distanceToNext);
 					} else {
-						var10.distanceToTarget = var10.totalPathDistance + var10.distanceToNext;
-						this.path.addPoint(var10);
+						pathPoint10.distanceToTarget = pathPoint10.totalPathDistance + pathPoint10.distanceToNext;
+						this.path.addPoint(pathPoint10);
 					}
 				}
 			}
 		}
 
-		if(var6 == var2) {
+		if(pathPoint6 == pathPoint1) {
 			return null;
 		} else {
-			return this.createEntityPath(var2, var6);
-		}
-	}
-
-	private int findPathOptions(Entity var1, PathPoint var2, PathPoint var3, PathPoint var4, float var5) {
-		int var6 = 0;
-		byte var7 = 0;
-		if(this.getVerticalOffset(var1, var2.xCoord, var2.yCoord + 1, var2.zCoord, var3) > 0) {
-			var7 = 1;
-		}
-
-		PathPoint var8 = this.getSafePoint(var1, var2.xCoord, var2.yCoord, var2.zCoord + 1, var3, var7);
-		PathPoint var9 = this.getSafePoint(var1, var2.xCoord - 1, var2.yCoord, var2.zCoord, var3, var7);
-		PathPoint var10 = this.getSafePoint(var1, var2.xCoord + 1, var2.yCoord, var2.zCoord, var3, var7);
-		PathPoint var11 = this.getSafePoint(var1, var2.xCoord, var2.yCoord, var2.zCoord - 1, var3, var7);
-		if(var8 != null && !var8.isFirst && var8.distanceTo(var4) < var5) {
-			this.pathOptions[var6++] = var8;
-		}
-
-		if(var9 != null && !var9.isFirst && var9.distanceTo(var4) < var5) {
-			this.pathOptions[var6++] = var9;
-		}
-
-		if(var10 != null && !var10.isFirst && var10.distanceTo(var4) < var5) {
-			this.pathOptions[var6++] = var10;
-		}
-
-		if(var11 != null && !var11.isFirst && var11.distanceTo(var4) < var5) {
-			this.pathOptions[var6++] = var11;
-		}
-
-		return var6;
-	}
-
-	private PathPoint getSafePoint(Entity var1, int var2, int var3, int var4, PathPoint var5, int var6) {
-		PathPoint var7 = null;
-		if(this.getVerticalOffset(var1, var2, var3, var4, var5) > 0) {
-			var7 = this.openPoint(var2, var3, var4);
-		}
-
-		if(var7 == null && this.getVerticalOffset(var1, var2, var3 + var6, var4, var5) > 0) {
-			var7 = this.openPoint(var2, var3 + var6, var4);
-			var3 += var6;
-		}
-
-		if(var7 != null) {
-			int var8 = 0;
-
-			for(boolean var9 = false; var3 > 0; --var3) {
-				int var10 = this.getVerticalOffset(var1, var2, var3 - 1, var4, var5);
-				if(var10 <= 0) {
-					break;
-				}
-
-				if(var10 < 0) {
-					return null;
-				}
-
-				++var8;
-				if(var8 >= 4) {
-					return null;
-				}
-			}
-
-			if(var3 > 0) {
-				var7 = this.openPoint(var2, var3, var4);
-			}
-		}
-
-		return var7;
-	}
-
-	private final PathPoint openPoint(int var1, int var2, int var3) {
-		int var4 = var1 | var2 << 10 | var3 << 20;
-		PathPoint var5 = (PathPoint)this.pointMap.lookup(var4);
-		if(var5 == null) {
-			var5 = new PathPoint(var1, var2, var3);
-			this.pointMap.addKey(var4, var5);
-		}
-
-		return var5;
-	}
-
-	private int getVerticalOffset(Entity var1, int var2, int var3, int var4, PathPoint var5) {
-		for(int var6 = var2; var6 < var2 + var5.xCoord; ++var6) {
-			for(int var7 = var3; var7 < var3 + var5.yCoord; ++var7) {
-				for(int var8 = var4; var8 < var4 + var5.zCoord; ++var8) {
-					Material var9 = this.worldMap.getBlockMaterial(var2, var3, var4);
-					if(var9.getIsSolid()) {
+			return this.createEntityPath(pathPoint1, pathPoint6);
+		}
+	}
+
+	private int findPathOptions(Entity entity, PathPoint pathPoint1, PathPoint pathPoint2, PathPoint pathPoint3, float distance) {
+		int i6 = 0;
+		byte b7 = 0;
+		if(this.getVerticalOffset(entity, pathPoint1.xCoord, pathPoint1.yCoord + 1, pathPoint1.zCoord, pathPoint2) > 0) {
+			b7 = 1;
+		}
+
+		PathPoint pathPoint8 = this.getSafePoint(entity, pathPoint1.xCoord, pathPoint1.yCoord, pathPoint1.zCoord + 1, pathPoint2, b7);
+		PathPoint pathPoint9 = this.getSafePoint(entity, pathPoint1.xCoord - 1, pathPoint1.yCoord, pathPoint1.zCoord, pathPoint2, b7);
+		PathPoint pathPoint10 = this.getSafePoint(entity, pathPoint1.xCoord + 1, pathPoint1.yCoord, pathPoint1.zCoord, pathPoint2, b7);
+		PathPoint pathPoint11 = this.getSafePoint(entity, pathPoint1.xCoord, pathPoint1.yCoord, pathPoint1.zCoord - 1, pathPoint2, b7);
+		if(pathPoint8 != null && !pathPoint8.isFirst && pathPoint8.distanceTo(pathPoint3) < distance) {
+			this.pathOptions[i6++] = pathPoint8;
+		}
+
+		if(pathPoint9 != null && !pathPoint9.isFirst && pathPoint9.distanceTo(pathPoint3) < distance) {
+			this.pathOptions[i6++] = pathPoint9;
+		}
+
+		if(pathPoint10 != null && !pathPoint10.isFirst && pathPoint10.distanceTo(pathPoint3) < distance) {
+			this.pathOptions[i6++] = pathPoint10;
+		}
+
+		if(pathPoint11 != null && !pathPoint11.isFirst && pathPoint11.distanceTo(pathPoint3) < distance) {
+			this.pathOptions[i6++] = pathPoint11;
+		}
+
+		return i6;
+	}
+
+	private PathPoint getSafePoint(Entity entity, int integer2, int integer3, int integer4, PathPoint pathPoint, int integer6) {
+		PathPoint pathPoint7 = null;
+		if(this.getVerticalOffset(entity, integer2, integer3, integer4, pathPoint) > 0) {
+			pathPoint7 = this.openPoint(integer2, integer3, integer4);
+		}
+
+		if(pathPoint7 == null && this.getVerticalOffset(entity, integer2, integer3 + integer6, integer4, pathPoint) > 0) {
+			pathPoint7 = this.openPoint(integer2, integer3 + integer6, integer4);
+			integer3 += integer6;
+		}
+
+		if(pathPoint7 != null) {
+			int i8 = 0;
+
+			int i9;
+			for(boolean z10 = false; integer3 > 0 && (i9 = this.getVerticalOffset(entity, integer2, integer3 - 1, integer4, pathPoint)) > 0; --integer3) {
+				if(i9 < 0) {
+					return null;
+				}
+
+				++i8;
+				if(i8 >= 4) {
+					return null;
+				}
+			}
+
+			if(integer3 > 0) {
+				pathPoint7 = this.openPoint(integer2, integer3, integer4);
+			}
+		}
+
+		return pathPoint7;
+	}
+
+	private final PathPoint openPoint(int x, int y, int z) {
+		int i4 = x | y << 10 | z << 20;
+		PathPoint pathPoint5 = (PathPoint)this.pointMap.lookup(i4);
+		if(pathPoint5 == null) {
+			pathPoint5 = new PathPoint(x, y, z);
+			this.pointMap.addKey(i4, pathPoint5);
+		}
+
+		return pathPoint5;
+	}
+
+	private int getVerticalOffset(Entity entity, int x, int y, int z, PathPoint pathPoint) {
+		for(int i6 = x; i6 < x + pathPoint.xCoord; ++i6) {
+			for(int i7 = y; i7 < y + pathPoint.yCoord; ++i7) {
+				for(int i8 = z; i8 < z + pathPoint.zCoord; ++i8) {
+					Material material9 = this.worldMap.getBlockMaterial(x, y, z);
+					if(material9.getIsSolid()) {
 						return 0;
 					}
 
-					if(var9 == Material.water || var9 == Material.lava) {
+					if(material9 == Material.water || material9 == Material.lava) {
 						return -1;
 					}
 				}
@@ -171,23 +167,23 @@
 		return 1;
 	}
 
-	private PathEntity createEntityPath(PathPoint var1, PathPoint var2) {
-		int var3 = 1;
-
-		PathPoint var4;
-		for(var4 = var2; var4.previous != null; var4 = var4.previous) {
-			++var3;
-		}
-
-		PathPoint[] var5 = new PathPoint[var3];
-		var4 = var2;
-		--var3;
-
-		for(var5[var3] = var2; var4.previous != null; var5[var3] = var4) {
-			var4 = var4.previous;
-			--var3;
-		}
-
-		return new PathEntity(var5);
+	private PathEntity createEntityPath(PathPoint pathPoint1, PathPoint pathPoint2) {
+		int i3 = 1;
+
+		PathPoint pathPoint4;
+		for(pathPoint4 = pathPoint2; pathPoint4.previous != null; pathPoint4 = pathPoint4.previous) {
+			++i3;
+		}
+
+		PathPoint[] pathPoint5 = new PathPoint[i3];
+		pathPoint4 = pathPoint2;
+		--i3;
+
+		for(pathPoint5[i3] = pathPoint2; pathPoint4.previous != null; pathPoint5[i3] = pathPoint4) {
+			pathPoint4 = pathPoint4.previous;
+			--i3;
+		}
+
+		return new PathEntity(pathPoint5);
 	}
 }
--- net/minecraft/src/Packet51MapChunk.java
+++ net/minecraft/src/Packet51MapChunk.java
@@ -21,65 +21,65 @@
 		this.isChunkDataPacket = true;
 	}
 
-	public Packet51MapChunk(int var1, int var2, int var3, int var4, int var5, int var6, World var7) {
+	public Packet51MapChunk(int xPosition, int yPosition, int zPosition, int xSize, int ySize, int zSize, World world) {
 		this.isChunkDataPacket = true;
-		this.xPosition = var1;
-		this.yPosition = var2;
-		this.zPosition = var3;
-		this.xSize = var4;
-		this.ySize = var5;
-		this.zSize = var6;
-		byte[] var8 = var7.getChunkData(var1, var2, var3, var4, var5, var6);
-		Deflater var9 = new Deflater(1);
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.zPosition = zPosition;
+		this.xSize = xSize;
+		this.ySize = ySize;
+		this.zSize = zSize;
+		byte[] b8 = world.getChunkData(xPosition, yPosition, zPosition, xSize, ySize, zSize);
+		Deflater deflater9 = new Deflater(1);
 
 		try {
-			var9.setInput(var8);
-			var9.finish();
-			this.chunkData = new byte[var4 * var5 * var6 * 5 / 2];
-			this.tempLength = var9.deflate(this.chunkData);
+			deflater9.setInput(b8);
+			deflater9.finish();
+			this.chunkData = new byte[xSize * ySize * zSize * 5 / 2];
+			this.tempLength = deflater9.deflate(this.chunkData);
 		} finally {
-			var9.end();
+			deflater9.end();
 		}
 
 	}
 
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readShort();
-		this.zPosition = var1.readInt();
-		this.xSize = var1.read() + 1;
-		this.ySize = var1.read() + 1;
-		this.zSize = var1.read() + 1;
-		int var2 = var1.readInt();
-		byte[] var3 = new byte[var2];
-		var1.readFully(var3);
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readShort();
+		this.zPosition = dataInputStream.readInt();
+		this.xSize = dataInputStream.read() + 1;
+		this.ySize = dataInputStream.read() + 1;
+		this.zSize = dataInputStream.read() + 1;
+		int i2 = dataInputStream.readInt();
+		byte[] b3 = new byte[i2];
+		dataInputStream.readFully(b3);
 		this.chunkData = new byte[this.xSize * this.ySize * this.zSize * 5 / 2];
-		Inflater var4 = new Inflater();
-		var4.setInput(var3);
+		Inflater inflater4 = new Inflater();
+		inflater4.setInput(b3);
 
 		try {
-			var4.inflate(this.chunkData);
-		} catch (DataFormatException var9) {
+			inflater4.inflate(this.chunkData);
+		} catch (DataFormatException dataFormatException9) {
 			throw new IOException("Bad compressed data format");
 		} finally {
-			var4.end();
+			inflater4.end();
 		}
 
 	}
 
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.writeShort(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.write(this.xSize - 1);
-		var1.write(this.ySize - 1);
-		var1.write(this.zSize - 1);
-		var1.writeInt(this.tempLength);
-		var1.write(this.chunkData, 0, this.tempLength);
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeShort(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.write(this.xSize - 1);
+		dataOutputStream.write(this.ySize - 1);
+		dataOutputStream.write(this.zSize - 1);
+		dataOutputStream.writeInt(this.tempLength);
+		dataOutputStream.write(this.chunkData, 0, this.tempLength);
 	}
 
-	public void processPacket(NetHandler var1) {
-		var1.handleMapChunk(this);
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleMapChunk(this);
 	}
 
 	public int getPacketSize() {
--- net/minecraft/src/ThreadCommandReader.java
+++ net/minecraft/src/ThreadCommandReader.java
@@ -3,30 +3,26 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
+
 import net.minecraft.server.MinecraftServer;
 
 public class ThreadCommandReader extends Thread {
 	final MinecraftServer mcServer;
 
-	public ThreadCommandReader(MinecraftServer var1) {
-		this.mcServer = var1;
+	public ThreadCommandReader(MinecraftServer minecraftServer) {
+		this.mcServer = minecraftServer;
 	}
 
 	public void run() {
-		BufferedReader var1 = new BufferedReader(new InputStreamReader(System.in));
-		String var2 = null;
+		BufferedReader bufferedReader1 = new BufferedReader(new InputStreamReader(System.in));
+		String string2 = null;
 
 		try {
-			while(!this.mcServer.serverStopped && MinecraftServer.isServerRunning(this.mcServer)) {
-				var2 = var1.readLine();
-				if(var2 == null) {
-					break;
-				}
-
-				this.mcServer.addCommand(var2, this.mcServer);
+			while(!this.mcServer.serverStopped && MinecraftServer.isServerRunning(this.mcServer) && (string2 = bufferedReader1.readLine()) != null) {
+				this.mcServer.addCommand(string2, this.mcServer);
 			}
-		} catch (IOException var4) {
-			var4.printStackTrace();
+		} catch (IOException iOException4) {
+			iOException4.printStackTrace();
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/EntityShadowPlayer.java
@@ -1,0 +1,64 @@
+package net.minecraft.src;
+
+import net.minecraft.server.MinecraftServer;
+
+public class EntityShadowPlayer extends EntityPlayer {
+	public int stareTimer = 0;
+	public boolean getTheFrickOut = false;
+	public boolean spawnedThisCycle = false;
+
+	public EntityShadowPlayer(World world) {
+		super(world);
+		this.yOffset = 1.62F;
+		this.setLocationAndAngles((double)world.spawnX + 0.5D, (double)(world.spawnY + 1), (double)world.spawnZ + 0.5D, 0.0F, 0.0F);
+		this.health = 20;
+		this.entityType = "humanoid";
+		this.unusedRotation = 180.0F;
+		this.fireResistance = 20;
+		this.username = "";
+		ExtLogger.i("inbound connection [\\###.###.###.###]");
+	}
+
+	public void Gone() {
+		this.isDead = true;
+		this.dead = true;
+		this.onDeath(this);
+		ExtLogger.i("[\\###.###.###.###] disconnected");
+		MinecraftServer.field_6098_47T69Px11B2sK2WzDkgABw58BK6Bs11QIk6TmoU8Y89Fs8WTSdr6zO59qDz1.configManager.sendPacketToAllPlayers(new Packet29DestroyEntity(this.entityID));
+	}
+
+	public void onLivingUpdate() {
+		EntityPlayer[] entityPlayer1 = new EntityPlayer[0];
+		this.worldObj.getEntitiesWithinAABB(EntityPlayer.class, AxisAlignedBB.getBoundingBoxFromPool(this.posX - 16.0D, 0.0D, this.posZ - 16.0D, this.posX + 16.0D, 128.0D, this.posZ + 16.0D)).toArray(entityPlayer1);
+		EntityPlayer[] entityPlayer2 = entityPlayer1;
+		int i3 = entityPlayer1.length;
+
+		for(int i4 = 0; i4 < i3; ++i4) {
+			EntityPlayer entityPlayer5 = entityPlayer2[i4];
+			float f6 = this.getDistanceToEntity(entityPlayer5);
+			if(!MinecraftServer.field_6098_47T69Px11B2sK2WzDkgABw58BK6Bs11QIk6TmoU8Y89Fs8WTSdr6zO59qDz1.propertyManagerObj.func_8177_8H2aluO4N7CjTQJsC0FBzS1Ou41e5OvM841oqY8722SzAhw4T50U068yt7d4("enableRecruiterConnections", true) || f6 < 19.0F) {
+				this.Gone();
+			}
+
+			if(entityPlayer5 != null) {
+				double d7 = Math.atan2(this.posX - entityPlayer5.posX, -(this.posZ - entityPlayer5.posZ)) / Math.PI * 180.0D;
+				this.setRotation((float)d7, 0.0F);
+				double d9 = GuiIngame.AngleDistance((double)entityPlayer5.rotationYaw, (double)this.rotationYaw) - 180.0D;
+				boolean z11 = !GuiIngame.RayCastBlock(this.worldObj, 128, this.posX, this.posY + 1.0D, this.posZ, entityPlayer5.posX, entityPlayer5.posY + 1.0D, entityPlayer5.posZ);
+				if(d9 > -10.0D && d9 < 10.0D && z11) {
+					++this.stareTimer;
+					if(this.stareTimer > 70) {
+						this.getTheFrickOut = true;
+						this.Gone();
+					}
+				}
+			}
+		}
+
+		if(!this.spawnedThisCycle) {
+			this.Gone();
+		}
+
+		super.onLivingUpdate();
+	}
+}
--- net/minecraft/src/ConsoleLogFormatter.java
+++ net/minecraft/src/ConsoleLogFormatter.java
@@ -10,35 +10,35 @@
 final class ConsoleLogFormatter extends Formatter {
 	private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
 
-	public String format(LogRecord var1) {
-		StringBuilder var2 = new StringBuilder();
-		var2.append(this.dateFormat.format(Long.valueOf(var1.getMillis())));
-		Level var3 = var1.getLevel();
-		if(var3 == Level.FINEST) {
-			var2.append(" [FINEST] ");
-		} else if(var3 == Level.FINER) {
-			var2.append(" [FINER] ");
-		} else if(var3 == Level.FINE) {
-			var2.append(" [FINE] ");
-		} else if(var3 == Level.INFO) {
-			var2.append(" [INFO] ");
-		} else if(var3 == Level.WARNING) {
-			var2.append(" [WARNING] ");
-		} else if(var3 == Level.SEVERE) {
-			var2.append(" [SEVERE] ");
-		} else if(var3 == Level.SEVERE) {
-			var2.append(" [" + var3.getLocalizedName() + "] ");
-		}
-
-		var2.append(var1.getMessage());
-		var2.append('\n');
-		Throwable var4 = var1.getThrown();
-		if(var4 != null) {
-			StringWriter var5 = new StringWriter();
-			var4.printStackTrace(new PrintWriter(var5));
-			var2.append(var5.toString());
-		}
-
-		return var2.toString();
+	public String format(LogRecord logRecord) {
+		StringBuilder stringBuilder2 = new StringBuilder();
+		stringBuilder2.append(this.dateFormat.format(logRecord.getMillis()));
+		Level level3 = logRecord.getLevel();
+		if(level3 == Level.FINEST) {
+			stringBuilder2.append(" [FINEST] ");
+		} else if(level3 == Level.FINER) {
+			stringBuilder2.append(" [FINER] ");
+		} else if(level3 == Level.FINE) {
+			stringBuilder2.append(" [FINE] ");
+		} else if(level3 == Level.INFO) {
+			stringBuilder2.append(" [INFO] ");
+		} else if(level3 == Level.WARNING) {
+			stringBuilder2.append(" [WARNING] ");
+		} else if(level3 == Level.SEVERE) {
+			stringBuilder2.append(" [SEVERE] ");
+		} else if(level3 == Level.SEVERE) {
+			stringBuilder2.append(" [" + level3.getLocalizedName() + "] ");
+		}
+
+		stringBuilder2.append(logRecord.getMessage());
+		stringBuilder2.append('\n');
+		Throwable throwable4 = logRecord.getThrown();
+		if(throwable4 != null) {
+			StringWriter stringWriter5 = new StringWriter();
+			throwable4.printStackTrace(new PrintWriter(stringWriter5));
+			stringBuilder2.append(stringWriter5.toString());
+		}
+
+		return stringBuilder2.toString();
 	}
 }
--- net/minecraft/src/ItemTool.java
+++ net/minecraft/src/ItemTool.java
@@ -2,27 +2,27 @@
 
 public class ItemTool extends Item {
 	private Block[] blocksEffectiveAgainst;
-	private float efficiencyOnProperMaterial = 4.0F;
+	protected float efficiencyOnProperMaterial = 4.0F;
 	private int damageVsEntity;
 	protected int toolMaterial;
 
-	public ItemTool(int var1, int var2, int var3, Block[] var4) {
-		super(var1);
-		this.toolMaterial = var3;
-		this.blocksEffectiveAgainst = var4;
+	public ItemTool(int itemID, int damage, int toolMaterial, Block[] effectiveBlocks) {
+		super(itemID);
+		this.toolMaterial = toolMaterial;
+		this.blocksEffectiveAgainst = effectiveBlocks;
 		this.maxStackSize = 1;
-		this.maxDamage = 32 << var3;
-		if(var3 == 3) {
+		this.maxDamage = 32 << toolMaterial;
+		if(toolMaterial == 3) {
 			this.maxDamage *= 4;
 		}
 
-		this.efficiencyOnProperMaterial = (float)((var3 + 1) * 2);
-		this.damageVsEntity = var2 + var3;
+		this.efficiencyOnProperMaterial = (float)((toolMaterial + 1) * 2);
+		this.damageVsEntity = damage + toolMaterial;
 	}
 
-	public float getStrVsBlock(ItemStack var1, Block var2) {
-		for(int var3 = 0; var3 < this.blocksEffectiveAgainst.length; ++var3) {
-			if(this.blocksEffectiveAgainst[var3] == var2) {
+	public float getStrVsBlock(ItemStack stack, Block block) {
+		for(int i3 = 0; i3 < this.blocksEffectiveAgainst.length; ++i3) {
+			if(this.blocksEffectiveAgainst[i3] == block) {
 				return this.efficiencyOnProperMaterial;
 			}
 		}
@@ -30,7 +30,7 @@
 		return 1.0F;
 	}
 
-	public void onBlockDestroyed(ItemStack var1, int var2, int var3, int var4, int var5) {
-		var1.damageItem(1);
+	public void onBlockDestroyed(ItemStack stack, int x, int y, int z, int z1) {
+		stack.damageItem(1);
 	}
 }
--- net/minecraft/src/GuiStatsListener.java
+++ net/minecraft/src/GuiStatsListener.java
@@ -6,11 +6,11 @@
 class GuiStatsListener implements ActionListener {
 	final GuiStatsComponent component;
 
-	GuiStatsListener(GuiStatsComponent var1) {
-		this.component = var1;
+	GuiStatsListener(GuiStatsComponent component) {
+		this.component = component;
 	}
 
-	public void actionPerformed(ActionEvent var1) {
-		GuiStatsComponent.update(this.component);
+	public void actionPerformed(ActionEvent actionEvent) {
+		GuiStatsComponent.func_8012_7Vn9PSqf0vcLtc75L59P7r938mcR2Muk507CvdiHHS8fK8i1zVoMbTbUJbQ5(this.component);
 	}
 }
--- net/minecraft/src/EntityLiving.java
+++ net/minecraft/src/EntityLiving.java
@@ -14,8 +14,7 @@
 	protected float rotationUnused;
 	protected float prevRotationUnused;
 	protected boolean unusedBool1 = true;
-	protected String texture = "/char.png";
-	protected boolean unusedBool2 = true;
+	protected boolean texture = true;
 	protected float unusedRotation = 0.0F;
 	protected String entityType = null;
 	protected float unusedFloat1 = 1.0F;
@@ -57,19 +56,19 @@
 	private Entity currentTarget;
 	private int numTicksToChaseTarget = 0;
 
-	public EntityLiving(World var1) {
-		super(var1);
+	public EntityLiving(World world) {
+		super(world);
 		this.preventEntitySpawning = true;
 		this.unusedRotationPitch = (float)(Math.random() + 1.0D) * 0.01F;
 		this.setPosition(this.posX, this.posY, this.posZ);
 		this.unusedRotationPitch2 = (float)Math.random() * 12398.0F;
-		this.rotationYaw = (float)(Math.random() * (double)((float)Math.PI) * 2.0D);
+		this.rotationYaw = (float)(Math.random() * (double)(float)Math.PI * 2.0D);
 		this.unusedFloat = 1.0F;
 		this.stepHeight = 0.5F;
 	}
 
-	protected boolean canEntityBeSeen(Entity var1) {
-		return this.worldObj.rayTraceBlocks(Vec3D.createVector(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ), Vec3D.createVector(var1.posX, var1.posY + (double)var1.getEyeHeight(), var1.posZ)) == null;
+	protected boolean canEntityBeSeen(Entity entity) {
+		return this.worldObj.rayTraceBlocks(Vec3D.createVector(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ), Vec3D.createVector(entity.posX, entity.posY + (double)entity.getEyeHeight(), entity.posZ)) == null;
 	}
 
 	public boolean canBeCollidedWith() {
@@ -93,9 +92,9 @@
 		super.onEntityUpdate();
 		if(this.rand.nextInt(1000) < this.livingSoundTime++) {
 			this.livingSoundTime = -this.getTalkInterval();
-			String var1 = this.getLivingSound();
-			if(var1 != null) {
-				this.worldObj.playSoundAtEntity(this, var1, this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+			String string1 = this.getLivingSound();
+			if(string1 != null) {
+				this.worldObj.playSoundAtEntity(this, string1, this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
 			}
 		}
 
@@ -103,17 +102,17 @@
 			this.attackEntityFrom((Entity)null, 1);
 		}
 
-		int var8;
+		int i8;
 		if(this.isEntityAlive() && this.isInsideOfMaterial(Material.water)) {
 			--this.air;
 			if(this.air == -20) {
 				this.air = 0;
 
-				for(var8 = 0; var8 < 8; ++var8) {
-					float var2 = this.rand.nextFloat() - this.rand.nextFloat();
-					float var3 = this.rand.nextFloat() - this.rand.nextFloat();
-					float var4 = this.rand.nextFloat() - this.rand.nextFloat();
-					this.worldObj.spawnParticle("bubble", this.posX + (double)var2, this.posY + (double)var3, this.posZ + (double)var4, this.motionX, this.motionY, this.motionZ);
+				for(i8 = 0; i8 < 8; ++i8) {
+					float f2 = this.rand.nextFloat() - this.rand.nextFloat();
+					float f3 = this.rand.nextFloat() - this.rand.nextFloat();
+					float f4 = this.rand.nextFloat() - this.rand.nextFloat();
+					this.worldObj.spawnParticle("bubble", this.posX + (double)f2, this.posY + (double)f3, this.posZ + (double)f4, this.motionX, this.motionY, this.motionZ);
 				}
 
 				this.attackEntityFrom((Entity)null, 2);
@@ -143,11 +142,11 @@
 				this.onEntityDeath();
 				this.setEntityDead();
 
-				for(var8 = 0; var8 < 20; ++var8) {
-					double var9 = this.rand.nextGaussian() * 0.02D;
-					double var10 = this.rand.nextGaussian() * 0.02D;
-					double var6 = this.rand.nextGaussian() * 0.02D;
-					this.worldObj.spawnParticle("explode", this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, var9, var10, var6);
+				for(i8 = 0; i8 < 20; ++i8) {
+					double d9 = this.rand.nextGaussian() * 0.02D;
+					double d10 = this.rand.nextGaussian() * 0.02D;
+					double d6 = this.rand.nextGaussian() * 0.02D;
+					this.worldObj.spawnParticle("explode", this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, d9, d10, d6);
 				}
 			}
 		}
@@ -159,12 +158,12 @@
 	}
 
 	public void spawnExplosionParticle() {
-		for(int var1 = 0; var1 < 20; ++var1) {
-			double var2 = this.rand.nextGaussian() * 0.02D;
-			double var4 = this.rand.nextGaussian() * 0.02D;
-			double var6 = this.rand.nextGaussian() * 0.02D;
-			double var8 = 10.0D;
-			this.worldObj.spawnParticle("explode", this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - var2 * var8, this.posY + (double)(this.rand.nextFloat() * this.height) - var4 * var8, this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - var6 * var8, var2, var4, var6);
+		for(int i1 = 0; i1 < 20; ++i1) {
+			double d2 = this.rand.nextGaussian() * 0.02D;
+			double d4 = this.rand.nextGaussian() * 0.02D;
+			double d6 = this.rand.nextGaussian() * 0.02D;
+			double d8 = 10.0D;
+			this.worldObj.spawnParticle("explode", this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - d2 * d8, this.posY + (double)(this.rand.nextFloat() * this.height) - d4 * d8, this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - d6 * d8, d2, d4, d6);
 		}
 
 	}
@@ -178,63 +177,63 @@
 	public void onUpdate() {
 		super.onUpdate();
 		this.onLivingUpdate();
-		double var1 = this.posX - this.prevPosX;
-		double var3 = this.posZ - this.prevPosZ;
-		float var5 = MathHelper.sqrt_double(var1 * var1 + var3 * var3);
-		float var6 = this.renderYawOffset;
-		float var7 = 0.0F;
+		double d1 = this.posX - this.prevPosX;
+		double d3 = this.posZ - this.prevPosZ;
+		float f5 = MathHelper.sqrt_double(d1 * d1 + d3 * d3);
+		float f6 = this.renderYawOffset;
+		float f7 = 0.0F;
 		this.ridingRotUnused = this.prevRidingRotUnused;
-		float var8 = 0.0F;
-		if(var5 > 0.05F) {
-			var8 = 1.0F;
-			var7 = var5 * 3.0F;
-			var6 = (float)Math.atan2(var3, var1) * 180.0F / (float)Math.PI - 90.0F;
+		float f8 = 0.0F;
+		if(f5 > 0.05F) {
+			f8 = 1.0F;
+			f7 = f5 * 3.0F;
+			f6 = (float)Math.atan2(d3, d1) * 180.0F / (float)Math.PI - 90.0F;
 		}
 
 		if(this.swingProgress > 0.0F) {
-			var6 = this.rotationYaw;
+			f6 = this.rotationYaw;
 		}
 
 		if(!this.onGround) {
-			var8 = 0.0F;
-		}
-
-		this.prevRidingRotUnused += (var8 - this.prevRidingRotUnused) * 0.3F;
-
-		float var9;
-		for(var9 = var6 - this.renderYawOffset; var9 < -180.0F; var9 += 360.0F) {
-		}
-
-		while(var9 >= 180.0F) {
-			var9 -= 360.0F;
-		}
-
-		this.renderYawOffset += var9 * 0.3F;
-
-		float var10;
-		for(var10 = this.rotationYaw - this.renderYawOffset; var10 < -180.0F; var10 += 360.0F) {
-		}
-
-		while(var10 >= 180.0F) {
-			var10 -= 360.0F;
-		}
-
-		boolean var11 = var10 < -90.0F || var10 >= 90.0F;
-		if(var10 < -75.0F) {
-			var10 = -75.0F;
-		}
-
-		if(var10 >= 75.0F) {
-			var10 = 75.0F;
-		}
-
-		this.renderYawOffset = this.rotationYaw - var10;
-		if(var10 * var10 > 2500.0F) {
-			this.renderYawOffset += var10 * 0.2F;
-		}
-
-		if(var11) {
-			var7 *= -1.0F;
+			f8 = 0.0F;
+		}
+
+		this.prevRidingRotUnused += (f8 - this.prevRidingRotUnused) * 0.3F;
+
+		float f9;
+		for(f9 = f6 - this.renderYawOffset; f9 < -180.0F; f9 += 360.0F) {
+		}
+
+		while(f9 >= 180.0F) {
+			f9 -= 360.0F;
+		}
+
+		this.renderYawOffset += f9 * 0.3F;
+
+		float f10;
+		for(f10 = this.rotationYaw - this.renderYawOffset; f10 < -180.0F; f10 += 360.0F) {
+		}
+
+		while(f10 >= 180.0F) {
+			f10 -= 360.0F;
+		}
+
+		boolean z11 = f10 < -90.0F || f10 >= 90.0F;
+		if(f10 < -75.0F) {
+			f10 = -75.0F;
+		}
+
+		if(f10 >= 75.0F) {
+			f10 = 75.0F;
+		}
+
+		this.renderYawOffset = this.rotationYaw - f10;
+		if(f10 * f10 > 2500.0F) {
+			this.renderYawOffset += f10 * 0.2F;
+		}
+
+		if(z11) {
+			f7 *= -1.0F;
 		}
 
 		while(this.rotationYaw - this.prevRotationYaw < -180.0F) {
@@ -261,27 +260,28 @@
 			this.prevRotationPitch += 360.0F;
 		}
 
-		this.rotationUnused += var7;
-	}
-
-	protected void setSize(float var1, float var2) {
-		super.setSize(var1, var2);
-	}
-
-	public void heal(int var1) {
+		this.rotationUnused += f7;
+	}
+
+	protected void setSize(float width, float height) {
+		super.setSize(width, height);
+	}
+
+	public void heal(int health) {
 		if(this.health > 0) {
-			this.health += var1;
+			this.health += health;
 			if(this.health > 20) {
 				this.health = 20;
 			}
 
 			this.heartsLife = this.heartsHalvesLife / 2;
 		}
+
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		if(this.worldObj.multiplayerWorld) {
-			var2 = 0;
+			damage = 0;
 		}
 
 		this.entityAge = 0;
@@ -290,36 +290,36 @@
 		} else {
 			this.limbYaw = 1.5F;
 			if((float)this.heartsLife > (float)this.heartsHalvesLife / 2.0F) {
-				if(this.prevHealth - var2 >= this.health) {
+				if(this.prevHealth - damage >= this.health) {
 					return false;
 				}
 
-				this.health = this.prevHealth - var2;
+				this.health = this.prevHealth - damage;
 			} else {
 				this.prevHealth = this.health;
 				this.heartsLife = this.heartsHalvesLife;
-				this.health -= var2;
+				this.health -= damage;
 				this.hurtTime = this.maxHurtTime = 10;
 			}
 
 			this.attackedAtYaw = 0.0F;
-			if(var1 != null) {
-				double var3 = var1.posX - this.posX;
+			if(entity != null) {
+				double d3 = entity.posX - this.posX;
 
-				double var5;
-				for(var5 = var1.posZ - this.posZ; var3 * var3 + var5 * var5 < 1.0E-4D; var5 = (Math.random() - Math.random()) * 0.01D) {
-					var3 = (Math.random() - Math.random()) * 0.01D;
+				double d5;
+				for(d5 = entity.posZ - this.posZ; d3 * d3 + d5 * d5 < 1.0E-4D; d5 = (Math.random() - Math.random()) * 0.01D) {
+					d3 = (Math.random() - Math.random()) * 0.01D;
 				}
 
-				this.attackedAtYaw = (float)(Math.atan2(var5, var3) * 180.0D / (double)((float)Math.PI)) - this.rotationYaw;
-				this.knockBack(var1, var2, var3, var5);
+				this.attackedAtYaw = (float)(Math.atan2(d5, d3) * 180.0D / (double)(float)Math.PI) - this.rotationYaw;
+				this.knockBack(entity, damage, d3, d5);
 			} else {
 				this.attackedAtYaw = (float)((int)(Math.random() * 2.0D) * 180);
 			}
 
 			if(this.health <= 0) {
 				this.worldObj.playSoundAtEntity(this, this.getDeathSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
-				this.onDeath(var1);
+				this.onDeath(entity);
 			} else {
 				this.worldObj.playSoundAtEntity(this, this.getHurtSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
 			}
@@ -344,33 +344,33 @@
 		return "random.hurt";
 	}
 
-	public void knockBack(Entity var1, int var2, double var3, double var5) {
-		float var7 = MathHelper.sqrt_double(var3 * var3 + var5 * var5);
-		float var8 = 0.4F;
+	public void knockBack(Entity entity, int x, double y, double z) {
+		float f7 = MathHelper.sqrt_double(y * y + z * z);
+		float f8 = 0.4F;
 		this.motionX /= 2.0D;
 		this.motionY /= 2.0D;
 		this.motionZ /= 2.0D;
-		this.motionX -= var3 / (double)var7 * (double)var8;
+		this.motionX -= y / (double)f7 * (double)f8;
 		this.motionY += (double)0.4F;
-		this.motionZ -= var5 / (double)var7 * (double)var8;
+		this.motionZ -= z / (double)f7 * (double)f8;
 		if(this.motionY > (double)0.4F) {
 			this.motionY = (double)0.4F;
 		}
 
 	}
 
-	public void onDeath(Entity var1) {
-		if(this.scoreValue > 0 && var1 != null) {
-			var1.addToPlayerScore(this, this.scoreValue);
+	public void onDeath(Entity entity) {
+		if(this.scoreValue > 0 && entity != null) {
+			entity.addToPlayerScore(this, this.scoreValue);
 		}
 
 		this.dead = true;
-		int var2 = this.getDropItemId();
-		if(var2 > 0) {
-			int var3 = this.rand.nextInt(3);
+		int i2 = this.getDropItemId();
+		if(i2 > 0) {
+			int i3 = this.rand.nextInt(3);
 
-			for(int var4 = 0; var4 < var3; ++var4) {
-				this.dropItem(var2, 1);
+			for(int i4 = 0; i4 < i3; ++i4) {
+				this.dropItem(i2, 1);
 			}
 		}
 
@@ -380,61 +380,61 @@
 		return 0;
 	}
 
-	protected void fall(float var1) {
-		int var2 = (int)Math.ceil((double)(var1 - 3.0F));
-		if(var2 > 0) {
-			this.attackEntityFrom((Entity)null, var2);
-			int var3 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset), MathHelper.floor_double(this.posZ));
-			if(var3 > 0) {
-				StepSound var4 = Block.blocksList[var3].stepSound;
-				this.worldObj.playSoundAtEntity(this, var4.getStepSound(), var4.getVolume() * 0.5F, var4.getPitch() * (12.0F / 16.0F));
+	protected void fall(float distance) {
+		int i2 = (int)Math.ceil((double)(distance - 3.0F));
+		if(i2 > 0) {
+			this.attackEntityFrom((Entity)null, i2);
+			int i3 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset), MathHelper.floor_double(this.posZ));
+			if(i3 > 0) {
+				StepSound stepSound4 = Block.blocksList[i3].stepSound;
+				this.worldObj.playSoundAtEntity(this, stepSound4.getStepSound(), stepSound4.getVolume() * 0.5F, stepSound4.getPitch() * 0.75F);
 			}
 		}
 
 	}
 
-	public void moveEntityWithHeading(float var1, float var2) {
-		double var3;
+	public void moveEntityWithHeading(float moveX, float moveZ) {
+		double d3;
 		if(this.handleWaterMovement()) {
-			var3 = this.posY;
-			this.moveFlying(var1, var2, 0.02F);
+			d3 = this.posY;
+			this.moveFlying(moveX, moveZ, 0.02F);
 			this.moveEntity(this.motionX, this.motionY, this.motionZ);
 			this.motionX *= (double)0.8F;
 			this.motionY *= (double)0.8F;
 			this.motionZ *= (double)0.8F;
 			this.motionY -= 0.02D;
-			if(this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + (double)0.6F - this.posY + var3, this.motionZ)) {
+			if(this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + (double)0.6F - this.posY + d3, this.motionZ)) {
 				this.motionY = (double)0.3F;
 			}
 		} else if(this.handleLavaMovement()) {
-			var3 = this.posY;
-			this.moveFlying(var1, var2, 0.02F);
+			d3 = this.posY;
+			this.moveFlying(moveX, moveZ, 0.02F);
 			this.moveEntity(this.motionX, this.motionY, this.motionZ);
 			this.motionX *= 0.5D;
 			this.motionY *= 0.5D;
 			this.motionZ *= 0.5D;
 			this.motionY -= 0.02D;
-			if(this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + (double)0.6F - this.posY + var3, this.motionZ)) {
+			if(this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + (double)0.6F - this.posY + d3, this.motionZ)) {
 				this.motionY = (double)0.3F;
 			}
 		} else {
-			float var8 = 0.91F;
+			float f5 = 0.91F;
 			if(this.onGround) {
-				var8 = 546.0F * 0.1F * 0.1F * 0.1F;
-				int var4 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
-				if(var4 > 0) {
-					var8 = Block.blocksList[var4].slipperiness * 0.91F;
+				f5 = 0.54600006F;
+				int i6 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
+				if(i6 > 0) {
+					f5 = Block.blocksList[i6].slipperiness * 0.91F;
 				}
 			}
 
-			float var9 = 0.16277136F / (var8 * var8 * var8);
-			this.moveFlying(var1, var2, this.onGround ? 0.1F * var9 : 0.02F);
-			var8 = 0.91F;
+			float f8 = 0.16277136F / (f5 * f5 * f5);
+			this.moveFlying(moveX, moveZ, this.onGround ? 0.1F * f8 : 0.02F);
+			f5 = 0.91F;
 			if(this.onGround) {
-				var8 = 546.0F * 0.1F * 0.1F * 0.1F;
-				int var5 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
-				if(var5 > 0) {
-					var8 = Block.blocksList[var5].slipperiness * 0.91F;
+				f5 = 0.54600006F;
+				int i7 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
+				if(i7 > 0) {
+					f5 = Block.blocksList[i7].slipperiness * 0.91F;
 				}
 			}
 
@@ -452,45 +452,45 @@
 
 			this.motionY -= 0.08D;
 			this.motionY *= (double)0.98F;
-			this.motionX *= (double)var8;
-			this.motionZ *= (double)var8;
+			this.motionX *= (double)f5;
+			this.motionZ *= (double)f5;
 		}
 
 		this.prevLimbYaw = this.limbYaw;
-		var3 = this.posX - this.prevPosX;
-		double var10 = this.posZ - this.prevPosZ;
-		float var7 = MathHelper.sqrt_double(var3 * var3 + var10 * var10) * 4.0F;
-		if(var7 > 1.0F) {
-			var7 = 1.0F;
+		d3 = this.posX - this.prevPosX;
+		double d10 = this.posZ - this.prevPosZ;
+		float f9 = MathHelper.sqrt_double(d3 * d3 + d10 * d10) * 4.0F;
+		if(f9 > 1.0F) {
+			f9 = 1.0F;
 		}
 
-		this.limbYaw += (var7 - this.limbYaw) * 0.4F;
+		this.limbYaw += (f9 - this.limbYaw) * 0.4F;
 		this.limbSwing += this.limbYaw;
 	}
 
 	public boolean isOnLadder() {
-		int var1 = MathHelper.floor_double(this.posX);
-		int var2 = MathHelper.floor_double(this.boundingBox.minY);
-		int var3 = MathHelper.floor_double(this.posZ);
-		return this.worldObj.getBlockId(var1, var2, var3) == Block.ladder.blockID || this.worldObj.getBlockId(var1, var2 + 1, var3) == Block.ladder.blockID;
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setShort("Health", (short)this.health);
-		var1.setShort("HurtTime", (short)this.hurtTime);
-		var1.setShort("DeathTime", (short)this.deathTime);
-		var1.setShort("AttackTime", (short)this.attackTime);
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.health = var1.getShort("Health");
-		if(!var1.hasKey("Health")) {
+		int i1 = MathHelper.floor_double(this.posX);
+		int i2 = MathHelper.floor_double(this.boundingBox.minY);
+		int i3 = MathHelper.floor_double(this.posZ);
+		return this.worldObj.getBlockId(i1, i2, i3) == Block.ladder.blockID || this.worldObj.getBlockId(i1, i2 + 1, i3) == Block.ladder.blockID;
+	}
+
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setShort("Health", (short)this.health);
+		nbttagcompound.setShort("HurtTime", (short)this.hurtTime);
+		nbttagcompound.setShort("DeathTime", (short)this.deathTime);
+		nbttagcompound.setShort("AttackTime", (short)this.attackTime);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.health = nbttagcompound.getShort("Health");
+		if(!nbttagcompound.hasKey("Health")) {
 			this.health = 10;
 		}
 
-		this.hurtTime = var1.getShort("HurtTime");
-		this.deathTime = var1.getShort("DeathTime");
-		this.attackTime = var1.getShort("AttackTime");
+		this.hurtTime = nbttagcompound.getShort("HurtTime");
+		this.deathTime = nbttagcompound.getShort("DeathTime");
+		this.attackTime = nbttagcompound.getShort("AttackTime");
 	}
 
 	public boolean isEntityAlive() {
@@ -499,22 +499,22 @@
 
 	public void onLivingUpdate() {
 		if(this.newPosRotationIncrements > 0) {
-			double var1 = this.posX + (this.newPosX - this.posX) / (double)this.newPosRotationIncrements;
-			double var3 = this.posY + (this.newPosY - this.posY) / (double)this.newPosRotationIncrements;
-			double var5 = this.posZ + (this.newPosZ - this.posZ) / (double)this.newPosRotationIncrements;
-
-			double var7;
-			for(var7 = this.newRotationYaw - (double)this.rotationYaw; var7 < -180.0D; var7 += 360.0D) {
-			}
-
-			while(var7 >= 180.0D) {
-				var7 -= 360.0D;
-			}
-
-			this.rotationYaw = (float)((double)this.rotationYaw + var7 / (double)this.newPosRotationIncrements);
+			double d1 = this.posX + (this.newPosX - this.posX) / (double)this.newPosRotationIncrements;
+			double d3 = this.posY + (this.newPosY - this.posY) / (double)this.newPosRotationIncrements;
+			double d5 = this.posZ + (this.newPosZ - this.posZ) / (double)this.newPosRotationIncrements;
+
+			double d7;
+			for(d7 = this.newRotationYaw - (double)this.rotationYaw; d7 < -180.0D; d7 += 360.0D) {
+			}
+
+			while(d7 >= 180.0D) {
+				d7 -= 360.0D;
+			}
+
+			this.rotationYaw = (float)((double)this.rotationYaw + d7 / (double)this.newPosRotationIncrements);
 			this.rotationPitch = (float)((double)this.rotationPitch + (this.newRotationPitch - (double)this.rotationPitch) / (double)this.newPosRotationIncrements);
 			--this.newPosRotationIncrements;
-			this.setPosition(var1, var3, var5);
+			this.setPosition(d1, d3, d5);
 			this.setRotation(this.rotationYaw, this.rotationPitch);
 		}
 
@@ -527,12 +527,12 @@
 			this.updateEntityActionState();
 		}
 
-		boolean var9 = this.handleWaterMovement();
-		boolean var2 = this.handleLavaMovement();
+		boolean z9 = this.handleWaterMovement();
+		boolean z2 = this.handleLavaMovement();
 		if(this.isJumping) {
-			if(var9) {
+			if(z9) {
 				this.motionY += (double)0.04F;
-			} else if(var2) {
+			} else if(z2) {
 				this.motionY += (double)0.04F;
 			} else if(this.onGround) {
 				this.jump();
@@ -543,12 +543,12 @@
 		this.moveForward *= 0.98F;
 		this.randomYawVelocity *= 0.9F;
 		this.moveEntityWithHeading(this.moveStrafing, this.moveForward);
-		List var10 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
-		if(var10 != null && var10.size() > 0) {
-			for(int var4 = 0; var4 < var10.size(); ++var4) {
-				Entity var11 = (Entity)var10.get(var4);
-				if(var11.canBePushed()) {
-					var11.applyEntityCollision(this);
+		List list10 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
+		if(list10 != null && list10.size() > 0) {
+			for(int i4 = 0; i4 < list10.size(); ++i4) {
+				Entity entity11 = (Entity)list10.get(i4);
+				if(entity11.canBePushed()) {
+					entity11.applyEntityCollision(this);
 				}
 			}
 		}
@@ -561,18 +561,18 @@
 
 	protected void updateEntityActionState() {
 		++this.entityAge;
-		EntityPlayer var1 = this.worldObj.getClosestPlayerToEntity(this, -1.0D);
-		if(var1 != null) {
-			double var2 = var1.posX - this.posX;
-			double var4 = var1.posY - this.posY;
-			double var6 = var1.posZ - this.posZ;
-			double var8 = var2 * var2 + var4 * var4 + var6 * var6;
-			if(var8 > 16384.0D) {
+		EntityPlayer entityPlayer1 = this.worldObj.getClosestPlayerToEntity(this, -1.0D);
+		if(entityPlayer1 != null) {
+			double d2 = entityPlayer1.posX - this.posX;
+			double d4 = entityPlayer1.posY - this.posY;
+			double d6 = entityPlayer1.posZ - this.posZ;
+			double d8 = d2 * d2 + d4 * d4 + d6 * d6;
+			if(d8 > 16384.0D) {
 				this.setEntityDead();
 			}
 
 			if(this.entityAge > 600 && this.rand.nextInt(800) == 0) {
-				if(var8 < 1024.0D) {
+				if(d8 < 1024.0D) {
 					this.entityAge = 0;
 				} else {
 					this.setEntityDead();
@@ -582,11 +582,11 @@
 
 		this.moveStrafing = 0.0F;
 		this.moveForward = 0.0F;
-		float var10 = 8.0F;
+		float f10 = 8.0F;
 		if(this.rand.nextFloat() < 0.02F) {
-			var1 = this.worldObj.getClosestPlayerToEntity(this, (double)var10);
-			if(var1 != null) {
-				this.currentTarget = var1;
+			entityPlayer1 = this.worldObj.getClosestPlayerToEntity(this, (double)f10);
+			if(entityPlayer1 != null) {
+				this.currentTarget = entityPlayer1;
 				this.numTicksToChaseTarget = 10 + this.rand.nextInt(20);
 			} else {
 				this.randomYawVelocity = (this.rand.nextFloat() - 0.5F) * 20.0F;
@@ -595,7 +595,7 @@
 
 		if(this.currentTarget != null) {
 			this.faceEntity(this.currentTarget, 10.0F);
-			if(this.numTicksToChaseTarget-- <= 0 || this.currentTarget.isDead || this.currentTarget.getDistanceSqToEntity(this) > (double)(var10 * var10)) {
+			if(this.numTicksToChaseTarget-- <= 0 || this.currentTarget.isDead || this.currentTarget.getDistanceSqToEntity(this) > (double)(f10 * f10)) {
 				this.currentTarget = null;
 			}
 		} else {
@@ -607,50 +607,50 @@
 			this.rotationPitch = this.defaultPitch;
 		}
 
-		boolean var3 = this.handleWaterMovement();
-		boolean var11 = this.handleLavaMovement();
-		if(var3 || var11) {
+		boolean z3 = this.handleWaterMovement();
+		boolean z11 = this.handleLavaMovement();
+		if(z3 || z11) {
 			this.isJumping = this.rand.nextFloat() < 0.8F;
 		}
 
 	}
 
-	public void faceEntity(Entity var1, float var2) {
-		double var3 = var1.posX - this.posX;
-		double var7 = var1.posZ - this.posZ;
-		double var5;
-		if(var1 instanceof EntityLiving) {
-			EntityLiving var9 = (EntityLiving)var1;
-			var5 = var9.posY + (double)var9.getEyeHeight() - (this.posY + (double)this.getEyeHeight());
+	public void faceEntity(Entity entity, float float2) {
+		double d3 = entity.posX - this.posX;
+		double d5 = entity.posZ - this.posZ;
+		double d7;
+		if(entity instanceof EntityLiving) {
+			EntityLiving entityLiving9 = (EntityLiving)entity;
+			d7 = entityLiving9.posY + (double)entityLiving9.getEyeHeight() - (this.posY + (double)this.getEyeHeight());
 		} else {
-			var5 = (var1.boundingBox.minY + var1.boundingBox.maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
+			d7 = (entity.boundingBox.minY + entity.boundingBox.maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
 		}
 
-		double var13 = (double)MathHelper.sqrt_double(var3 * var3 + var7 * var7);
-		float var11 = (float)(Math.atan2(var7, var3) * 180.0D / (double)((float)Math.PI)) - 90.0F;
-		float var12 = (float)(Math.atan2(var5, var13) * 180.0D / (double)((float)Math.PI));
-		this.rotationPitch = this.updateRotation(this.rotationPitch, var12, var2);
-		this.rotationYaw = this.updateRotation(this.rotationYaw, var11, var2);
+		double d13 = (double)MathHelper.sqrt_double(d3 * d3 + d5 * d5);
+		float f11 = (float)(Math.atan2(d5, d3) * 180.0D / (double)(float)Math.PI) - 90.0F;
+		float f12 = (float)(Math.atan2(d7, d13) * 180.0D / (double)(float)Math.PI);
+		this.rotationPitch = this.updateRotation(this.rotationPitch, f12, float2);
+		this.rotationYaw = this.updateRotation(this.rotationYaw, f11, float2);
 	}
 
-	private float updateRotation(float var1, float var2, float var3) {
-		float var4;
-		for(var4 = var2 - var1; var4 < -180.0F; var4 += 360.0F) {
-		}
-
-		while(var4 >= 180.0F) {
-			var4 -= 360.0F;
-		}
-
-		if(var4 > var3) {
-			var4 = var3;
-		}
-
-		if(var4 < -var3) {
-			var4 = -var3;
-		}
-
-		return var1 + var4;
+	private float updateRotation(float float1, float float2, float float3) {
+		float f4;
+		for(f4 = float2 - float1; f4 < -180.0F; f4 += 360.0F) {
+		}
+
+		while(f4 >= 180.0F) {
+			f4 -= 360.0F;
+		}
+
+		if(f4 > float3) {
+			f4 = float3;
+		}
+
+		if(f4 < -float3) {
+			f4 = -float3;
+		}
+
+		return float1 + f4;
 	}
 
 	public void onEntityDeath() {
@@ -664,43 +664,43 @@
 		this.attackEntityFrom((Entity)null, 4);
 	}
 
-	public Vec3D getPosition(float var1) {
-		if(var1 == 1.0F) {
+	public Vec3D getPosition(float renderPartialTick) {
+		if(renderPartialTick == 1.0F) {
 			return Vec3D.createVector(this.posX, this.posY, this.posZ);
 		} else {
-			double var2 = this.prevPosX + (this.posX - this.prevPosX) * (double)var1;
-			double var4 = this.prevPosY + (this.posY - this.prevPosY) * (double)var1;
-			double var6 = this.prevPosZ + (this.posZ - this.prevPosZ) * (double)var1;
-			return Vec3D.createVector(var2, var4, var6);
+			double d2 = this.prevPosX + (this.posX - this.prevPosX) * (double)renderPartialTick;
+			double d4 = this.prevPosY + (this.posY - this.prevPosY) * (double)renderPartialTick;
+			double d6 = this.prevPosZ + (this.posZ - this.prevPosZ) * (double)renderPartialTick;
+			return Vec3D.createVector(d2, d4, d6);
 		}
 	}
 
-	public Vec3D getLook(float var1) {
-		float var2;
-		float var3;
-		float var4;
-		float var5;
-		if(var1 == 1.0F) {
-			var2 = MathHelper.cos(-this.rotationYaw * ((float)Math.PI / 180.0F) - (float)Math.PI);
-			var3 = MathHelper.sin(-this.rotationYaw * ((float)Math.PI / 180.0F) - (float)Math.PI);
-			var4 = -MathHelper.cos(-this.rotationPitch * ((float)Math.PI / 180.0F));
-			var5 = MathHelper.sin(-this.rotationPitch * ((float)Math.PI / 180.0F));
-			return Vec3D.createVector((double)(var3 * var4), (double)var5, (double)(var2 * var4));
+	public Vec3D getLook(float renderPartialTick) {
+		float f2;
+		float f3;
+		float f4;
+		float f5;
+		if(renderPartialTick == 1.0F) {
+			f2 = MathHelper.cos(-this.rotationYaw * 0.017453292F - (float)Math.PI);
+			f3 = MathHelper.sin(-this.rotationYaw * 0.017453292F - (float)Math.PI);
+			f4 = -MathHelper.cos(-this.rotationPitch * 0.017453292F);
+			f5 = MathHelper.sin(-this.rotationPitch * 0.017453292F);
+			return Vec3D.createVector((double)(f3 * f4), (double)f5, (double)(f2 * f4));
 		} else {
-			var2 = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * var1;
-			var3 = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * var1;
-			var4 = MathHelper.cos(-var3 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-			var5 = MathHelper.sin(-var3 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-			float var6 = -MathHelper.cos(-var2 * ((float)Math.PI / 180.0F));
-			float var7 = MathHelper.sin(-var2 * ((float)Math.PI / 180.0F));
-			return Vec3D.createVector((double)(var5 * var6), (double)var7, (double)(var4 * var6));
+			f2 = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * renderPartialTick;
+			f3 = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * renderPartialTick;
+			f4 = MathHelper.cos(-f3 * 0.017453292F - (float)Math.PI);
+			f5 = MathHelper.sin(-f3 * 0.017453292F - (float)Math.PI);
+			float f6 = -MathHelper.cos(-f2 * 0.017453292F);
+			float f7 = MathHelper.sin(-f2 * 0.017453292F);
+			return Vec3D.createVector((double)(f5 * f6), (double)f7, (double)(f4 * f6));
 		}
 	}
 
-	public MovingObjectPosition rayTrace(double var1, float var3) {
-		Vec3D var4 = this.getPosition(var3);
-		Vec3D var5 = this.getLook(var3);
-		Vec3D var6 = var4.addVector(var5.xCoord * var1, var5.yCoord * var1, var5.zCoord * var1);
-		return this.worldObj.rayTraceBlocks(var4, var6);
+	public MovingObjectPosition managedPosY(double double1, float renderPartialTick) {
+		Vec3D vec3D4 = this.getPosition(renderPartialTick);
+		Vec3D vec3D5 = this.getLook(renderPartialTick);
+		Vec3D vec3D6 = vec3D4.addVector(vec3D5.xCoord * double1, vec3D5.yCoord * double1, vec3D5.zCoord * double1);
+		return this.worldObj.rayTraceBlocks(vec3D4, vec3D6);
 	}
 }
--- net/minecraft/src/ItemMinecart.java
+++ net/minecraft/src/ItemMinecart.java
@@ -3,17 +3,17 @@
 public class ItemMinecart extends Item {
 	public int minecartType;
 
-	public ItemMinecart(int var1, int var2) {
-		super(var1);
+	public ItemMinecart(int itemID, int minecartType) {
+		super(itemID);
 		this.maxStackSize = 1;
-		this.minecartType = var2;
+		this.minecartType = minecartType;
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-		int var8 = var3.getBlockId(var4, var5, var6);
-		if(var8 == Block.minecartTrack.blockID) {
-			var3.spawnEntityInWorld(new EntityMinecart(var3, (double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), this.minecartType));
-			--var1.stackSize;
+	public boolean onItemUse(ItemStack stack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
+		int i8 = world.getBlockId(x, y, z);
+		if(i8 == Block.minecartTrack.blockID) {
+			world.spawnEntityInWorld(new EntityMinecart(world, (double)((float)x + 0.5F), (double)((float)y + 0.5F), (double)((float)z + 0.5F), this.minecartType));
+			--stack.stackSize;
 			return true;
 		} else {
 			return false;
--- net/minecraft/src/NetworkReaderThread.java
+++ net/minecraft/src/NetworkReaderThread.java
@@ -3,46 +3,38 @@
 class NetworkReaderThread extends Thread {
 	final NetworkManager netManager;
 
-	NetworkReaderThread(NetworkManager var1, String var2) {
-		super(var2);
-		this.netManager = var1;
+	NetworkReaderThread(NetworkManager netManager, String threadName) {
+		super(threadName);
+		this.netManager = netManager;
 	}
 
 	public void run() {
-		Object var1 = NetworkManager.threadSyncObject;
-		synchronized(var1) {
+		Object object1 = NetworkManager.threadSyncObject;
+		Object object2 = NetworkManager.threadSyncObject;
+		synchronized(NetworkManager.threadSyncObject) {
 			++NetworkManager.numReadThreads;
 		}
 
 		while(true) {
-			boolean var11 = false;
-
-			try {
-				var11 = true;
-				if(NetworkManager.isRunning(this.netManager)) {
-					if(!NetworkManager.isServerTerminating(this.netManager)) {
-						NetworkManager.readNetworkPacket(this.netManager);
-						continue;
-					}
-
-					var11 = false;
-					break;
+			boolean z7 = false;
+			z7 = true;
+			if(NetworkManager.isRunning(this.netManager)) {
+				if(!NetworkManager.isServerTerminating(this.netManager)) {
+					NetworkManager.readPacket(this.netManager);
+					continue;
 				}
 
-				var11 = false;
+				z7 = false;
 				break;
-			} finally {
-				if(var11) {
-					Object var5 = NetworkManager.threadSyncObject;
-					synchronized(var5) {
-						--NetworkManager.numReadThreads;
-					}
-				}
 			}
+
+			z7 = false;
+			break;
 		}
 
-		var1 = NetworkManager.threadSyncObject;
-		synchronized(var1) {
+		object1 = NetworkManager.threadSyncObject;
+		object2 = NetworkManager.threadSyncObject;
+		synchronized(NetworkManager.threadSyncObject) {
 			--NetworkManager.numReadThreads;
 		}
 	}
--- net/minecraft/src/PathPoint.java
+++ net/minecraft/src/PathPoint.java
@@ -12,22 +12,22 @@
 	PathPoint previous;
 	public boolean isFirst = false;
 
-	public PathPoint(int var1, int var2, int var3) {
-		this.xCoord = var1;
-		this.yCoord = var2;
-		this.zCoord = var3;
-		this.hash = var1 | var2 << 10 | var3 << 20;
-	}
-
-	public float distanceTo(PathPoint var1) {
-		float var2 = (float)(var1.xCoord - this.xCoord);
-		float var3 = (float)(var1.yCoord - this.yCoord);
-		float var4 = (float)(var1.zCoord - this.zCoord);
-		return MathHelper.sqrt_float(var2 * var2 + var3 * var3 + var4 * var4);
-	}
-
-	public boolean equals(Object var1) {
-		return ((PathPoint)var1).hash == this.hash;
+	public PathPoint(int xCoord, int yCoord, int zCoord) {
+		this.xCoord = xCoord;
+		this.yCoord = yCoord;
+		this.zCoord = zCoord;
+		this.hash = xCoord | yCoord << 10 | zCoord << 20;
+	}
+
+	public float distanceTo(PathPoint pathPoint) {
+		float f2 = (float)(pathPoint.xCoord - this.xCoord);
+		float f3 = (float)(pathPoint.yCoord - this.yCoord);
+		float f4 = (float)(pathPoint.zCoord - this.zCoord);
+		return MathHelper.sqrt_float(f2 * f2 + f3 * f3 + f4 * f4);
+	}
+
+	public boolean equals(Object object) {
+		return ((PathPoint)object).hash == this.hash;
 	}
 
 	public int hashCode() {
--- net/minecraft/src/StepSoundSand.java
+++ net/minecraft/src/StepSoundSand.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 final class StepSoundSand extends StepSound {
-	StepSoundSand(String var1, float var2, float var3) {
-		super(var1, var2, var3);
+	StepSoundSand(String string, float float2, float float3) {
+		super(string, float2, float3);
 	}
 }
--- net/minecraft/src/PathEntity.java
+++ net/minecraft/src/PathEntity.java
@@ -5,9 +5,9 @@
 	public final int pathLength;
 	private int pathIndex;
 
-	public PathEntity(PathPoint[] var1) {
-		this.points = var1;
-		this.pathLength = var1.length;
+	public PathEntity(PathPoint[] points) {
+		this.points = points;
+		this.pathLength = points.length;
 	}
 
 	public void incrementPathIndex() {
@@ -18,10 +18,10 @@
 		return this.pathIndex >= this.points.length;
 	}
 
-	public Vec3D getPosition(Entity var1) {
-		double var2 = (double)this.points[this.pathIndex].xCoord + (double)((int)(var1.width + 1.0F)) * 0.5D;
-		double var4 = (double)this.points[this.pathIndex].yCoord;
-		double var6 = (double)this.points[this.pathIndex].zCoord + (double)((int)(var1.width + 1.0F)) * 0.5D;
-		return Vec3D.createVector(var2, var4, var6);
+	public Vec3D getPosition(Entity entity) {
+		double d2 = (double)this.points[this.pathIndex].xCoord + (double)((int)(entity.width + 1.0F)) * 0.5D;
+		double d4 = (double)this.points[this.pathIndex].yCoord;
+		double d6 = (double)this.points[this.pathIndex].zCoord + (double)((int)(entity.width + 1.0F)) * 0.5D;
+		return Vec3D.createVector(d2, d4, d6);
 	}
 }
--- net/minecraft/src/BlockOreBlock.java
+++ net/minecraft/src/BlockOreBlock.java
@@ -1,12 +1,12 @@
 package net.minecraft.src;
 
 public class BlockOreBlock extends Block {
-	public BlockOreBlock(int var1, int var2) {
-		super(var1, Material.iron);
-		this.blockIndexInTexture = var2;
+	public BlockOreBlock(int id, int blockIndex) {
+		super(id, Material.iron);
+		this.blockIndexInTexture = blockIndex;
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture - 16 : (var1 == 0 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture);
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.blockIndexInTexture - 16 : (side == 0 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture);
 	}
 }
--- net/minecraft/src/WorldManager.java
+++ net/minecraft/src/WorldManager.java
@@ -5,38 +5,39 @@
 public class WorldManager implements IWorldAccess {
 	private MinecraftServer mcServer;
 
-	public WorldManager(MinecraftServer var1) {
-		this.mcServer = var1;
-	}
-
-	public void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-	}
-
-	public void obtainEntitySkin(Entity var1) {
-		this.mcServer.entityTracker.trackEntity(var1);
-	}
-
-	public void releaseEntitySkin(Entity var1) {
-		this.mcServer.entityTracker.untrackEntity(var1);
-	}
-
-	public void playSound(String var1, double var2, double var4, double var6, float var8, float var9) {
-	}
-
-	public void markBlockRangeNeedsUpdate(int var1, int var2, int var3, int var4, int var5, int var6) {
+	public WorldManager(MinecraftServer minecraftServer) {
+		this.mcServer = minecraftServer;
+	}
+
+	public void spawnParticle(String name, double x, double y, double z, double motionX, double motionY, double motionZ) {
+	}
+
+	public void obtainEntitySkin(Entity entity) {
+		this.mcServer.entityTracker.trackEntity(entity);
+	}
+
+	public void releaseEntitySkin(Entity entity) {
+		this.mcServer.entityTracker.untrackEntity(entity);
+	}
+
+	public void playSound(String name, double x, double y, double z, float volume, float pitch) {
+		this.mcServer.configManager.func_7644_69pl0QQx7RRBVy4UnQ096NE0lKNB0QpE26Og5gn7269TQV76YH9Eoe3ORb8P(new Packet71(name, x, y, z, volume, pitch), x, y, z, 15);
+	}
+
+	public void markBlockRangeNeedsUpdate(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
 	}
 
 	public void updateAllRenderers() {
 	}
 
-	public void markBlockAndNeighborsNeedsUpdate(int var1, int var2, int var3) {
-		this.mcServer.configManager.markBlockNeedsUpdate(var1, var2, var3);
-	}
-
-	public void playRecord(String var1, int var2, int var3, int var4) {
-	}
-
-	public void doNothingWithTileEntity(int var1, int var2, int var3, TileEntity var4) {
-		this.mcServer.configManager.sentTileEntityToPlayer(var1, var2, var3, var4);
+	public void markBlockAndNeighborsNeedsUpdate(int x, int y, int z) {
+		this.mcServer.configManager.markBlockNeedsUpdate(x, y, z);
+	}
+
+	public void playRecord(String name, int x, int y, int z) {
+	}
+
+	public void doNothingWithTileEntity(int x, int y, int z, TileEntity tileEntity) {
+		this.mcServer.configManager.sentTileEntityToPlayer(x, y, z, tileEntity);
 	}
 }
--- net/minecraft/src/EnumArt.java
+++ net/minecraft/src/EnumArt.java
@@ -32,11 +32,29 @@
 	public final int offsetX;
 	public final int offsetY;
 
-	private EnumArt(String var3, int var4, int var5, int var6, int var7) {
-		this.title = var3;
-		this.sizeX = var4;
-		this.sizeY = var5;
-		this.offsetX = var6;
-		this.offsetY = var7;
-	}
+    private static final /* synthetic */ EnumArt[] field_8110_2zf71zqy205U9X0Ck851f9Hnt2HPDPvcgfcSwMSCXytw2H2K86noddBO2xB2;
+    
+	public static EnumArt[] func_8089_4U0CrFc9svgwX0nmFIeeM4Z1eq1xQFlIlv4Hvh3I8vOCR2B4w8od8Uou0cFZ() {
+		return (EnumArt[])field_8110_2zf71zqy205U9X0Ck851f9Hnt2HPDPvcgfcSwMSCXytw2H2K86noddBO2xB2.clone();
+	}
+
+	public static EnumArt func_8091_56731NW59syxKbT8nc87yNvY432YDjUY0472UdS0BuK1WrSrGzx2RGuu51I5(String string) {
+		return (EnumArt)Enum.valueOf(EnumArt.class, string);
+	}
+
+	private EnumArt(String title, int sizeX, int sizeY, int offsetX, int offsetY) {
+		this.title = title;
+		this.sizeX = sizeX;
+		this.sizeY = sizeY;
+		this.offsetX = offsetX;
+		this.offsetY = offsetY;
+	}
+
+	private static EnumArt[] func_8090_3424Ob9OSD43dONV326nFaq2Kx8Y10WwM3sIS20n3MjkB41ju1j1R2lffokh() {
+		return new EnumArt[]{Kebab, Aztec, Alban, Aztec2, Bomb, Plant, Wasteland, Pool, Courbet, Sea, Sunset, Creebet, Wanderer, Graham, Match, Bust, Stage, Void, SkullAndRoses, Fighters, Pointer, Pigscene, Skeleton, DonkeyKong};
+	}
+    
+    static {
+        field_8110_2zf71zqy205U9X0Ck851f9Hnt2HPDPvcgfcSwMSCXytw2H2K86noddBO2xB2 = func_8090_3424Ob9OSD43dONV326nFaq2Kx8Y10WwM3sIS20n3MjkB41ju1j1R2lffokh();
+    }
 }
--- net/minecraft/src/BlockDoor.java
+++ net/minecraft/src/BlockDoor.java
@@ -3,16 +3,16 @@
 import java.util.Random;
 
 public class BlockDoor extends Block {
-	protected BlockDoor(int var1, Material var2) {
-		super(var1, var2);
+	public BlockDoor(int id, Material material) {
+		super(id, material);
 		this.blockIndexInTexture = 97;
-		if(var2 == Material.iron) {
+		if(material == Material.iron) {
 			++this.blockIndexInTexture;
 		}
 
-		float var3 = 0.5F;
-		float var4 = 1.0F;
-		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var4, 0.5F + var3);
+		float f3 = 0.5F;
+		float f4 = 1.0F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, f4, 0.5F + f3);
 	}
 
 	public boolean isOpaqueCube() {
@@ -23,62 +23,62 @@
 		return 7;
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
-	}
-
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		this.setDoorRotation(this.getState(var1.getBlockMetadata(var2, var3, var4)));
-	}
-
-	public void setDoorRotation(int var1) {
-		float var2 = 3.0F / 16.0F;
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		this.setBlockBoundsBasedOnState(world, x, y, z);
+		return super.getCollisionBoundingBoxFromPool(world, x, y, z);
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		this.setDoorRotation(this.getState(blockAccess.getBlockMetadata(x, y, z)));
+	}
+
+	public void setDoorRotation(int metadata) {
+		float f2 = 0.1875F;
 		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F, 1.0F);
-		if(var1 == 0) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var2);
-		}
-
-		if(var1 == 1) {
-			this.setBlockBounds(1.0F - var2, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-		}
-
-		if(var1 == 2) {
-			this.setBlockBounds(0.0F, 0.0F, 1.0F - var2, 1.0F, 1.0F, 1.0F);
-		}
-
-		if(var1 == 3) {
-			this.setBlockBounds(0.0F, 0.0F, 0.0F, var2, 1.0F, 1.0F);
-		}
-
-	}
-
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.blockActivated(var1, var2, var3, var4, var5);
-	}
-
-	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		if(metadata == 0) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f2);
+		}
+
+		if(metadata == 1) {
+			this.setBlockBounds(1.0F - f2, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(metadata == 2) {
+			this.setBlockBounds(0.0F, 0.0F, 1.0F - f2, 1.0F, 1.0F, 1.0F);
+		}
+
+		if(metadata == 3) {
+			this.setBlockBounds(0.0F, 0.0F, 0.0F, f2, 1.0F, 1.0F);
+		}
+
+	}
+
+	public void onBlockClicked(World world, int x, int y, int z, EntityPlayer entityPlayer) {
+		this.blockActivated(world, x, y, z, entityPlayer);
+	}
+
+	public boolean blockActivated(World world, int x, int y, int z, EntityPlayer entityPlayer) {
 		if(this.material == Material.iron) {
 			return true;
 		} else {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if((var6 & 8) != 0) {
-				if(var1.getBlockId(var2, var3 - 1, var4) == this.blockID) {
-					this.blockActivated(var1, var2, var3 - 1, var4, var5);
+			int i6 = world.getBlockMetadata(x, y, z);
+			if((i6 & 8) != 0) {
+				if(world.getBlockId(x, y - 1, z) == this.blockID) {
+					this.blockActivated(world, x, y - 1, z, entityPlayer);
 				}
 
 				return true;
 			} else {
-				if(var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
-					var1.setBlockMetadataWithNotify(var2, var3 + 1, var4, (var6 ^ 4) + 8);
+				if(world.getBlockId(x, y + 1, z) == this.blockID) {
+					world.setBlockMetadataWithNotify(x, y + 1, z, (i6 ^ 4) + 8);
 				}
 
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var6 ^ 4);
-				var1.markBlocksDirty(var2, var3 - 1, var4, var2, var3, var4);
+				world.setBlockMetadataWithNotify(x, y, z, i6 ^ 4);
+				world.markBlocksDirty(x, y - 1, z, x, y, z);
 				if(Math.random() < 0.5D) {
-					var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.door_open", 1.0F, var1.rand.nextFloat() * 0.1F + 0.9F);
+					world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.door_open", 1.0F, world.rand.nextFloat() * 0.1F + 0.9F);
 				} else {
-					var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.door_close", 1.0F, var1.rand.nextFloat() * 0.1F + 0.9F);
+					world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.door_close", 1.0F, world.rand.nextFloat() * 0.1F + 0.9F);
 				}
 
 				return true;
@@ -86,81 +86,80 @@
 		}
 	}
 
-	public void onPoweredBlockChange(World var1, int var2, int var3, int var4, boolean var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if((var6 & 8) != 0) {
-			if(var1.getBlockId(var2, var3 - 1, var4) == this.blockID) {
-				this.onPoweredBlockChange(var1, var2, var3 - 1, var4, var5);
+	public void onPoweredBlockChange(World world, int x, int y, int z, boolean flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if((i6 & 8) != 0) {
+			if(world.getBlockId(x, y - 1, z) == this.blockID) {
+				this.onPoweredBlockChange(world, x, y - 1, z, flag);
 			}
-
 		} else {
-			boolean var7 = (var1.getBlockMetadata(var2, var3, var4) & 4) > 0;
-			if(var7 != var5) {
-				if(var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
-					var1.setBlockMetadataWithNotify(var2, var3 + 1, var4, (var6 ^ 4) + 8);
+			boolean z7 = (world.getBlockMetadata(x, y, z) & 4) > 0;
+			if(z7 != flag) {
+				if(world.getBlockId(x, y + 1, z) == this.blockID) {
+					world.setBlockMetadataWithNotify(x, y + 1, z, (i6 ^ 4) + 8);
 				}
 
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var6 ^ 4);
-				var1.markBlocksDirty(var2, var3 - 1, var4, var2, var3, var4);
+				world.setBlockMetadataWithNotify(x, y, z, i6 ^ 4);
+				world.markBlocksDirty(x, y - 1, z, x, y, z);
 				if(Math.random() < 0.5D) {
-					var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.door_open", 1.0F, var1.rand.nextFloat() * 0.1F + 0.9F);
+					world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.door_open", 1.0F, world.rand.nextFloat() * 0.1F + 0.9F);
 				} else {
-					var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.door_close", 1.0F, var1.rand.nextFloat() * 0.1F + 0.9F);
+					world.playSoundEffect((double)x + 0.5D, (double)y + 0.5D, (double)z + 0.5D, "random.door_close", 1.0F, world.rand.nextFloat() * 0.1F + 0.9F);
 				}
-
 			}
 		}
+
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if((var6 & 8) != 0) {
-			if(var1.getBlockId(var2, var3 - 1, var4) != this.blockID) {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if((i6 & 8) != 0) {
+			if(world.getBlockId(x, y - 1, z) != this.blockID) {
+				world.setBlockWithNotify(x, y, z, 0);
 			}
 
-			if(var5 > 0 && Block.blocksList[var5].canProvidePower()) {
-				this.onNeighborBlockChange(var1, var2, var3 - 1, var4, var5);
+			if(flag > 0 && Block.blocksList[flag].canProvidePower()) {
+				this.onNeighborBlockChange(world, x, y - 1, z, flag);
 			}
 		} else {
-			boolean var7 = false;
-			if(var1.getBlockId(var2, var3 + 1, var4) != this.blockID) {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
-				var7 = true;
+			boolean z7 = false;
+			if(world.getBlockId(x, y + 1, z) != this.blockID) {
+				world.setBlockWithNotify(x, y, z, 0);
+				z7 = true;
 			}
 
-			if(!var1.isBlockNormalCube(var2, var3 - 1, var4)) {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
-				var7 = true;
-				if(var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
-					var1.setBlockWithNotify(var2, var3 + 1, var4, 0);
+			if(!world.isBlockNormalCube(x, y - 1, z)) {
+				world.setBlockWithNotify(x, y, z, 0);
+				z7 = true;
+				if(world.getBlockId(x, y + 1, z) == this.blockID) {
+					world.setBlockWithNotify(x, y + 1, z, 0);
 				}
 			}
 
-			if(var7) {
-				this.dropBlockAsItem(var1, var2, var3, var4, var6);
-			} else if(var5 > 0 && Block.blocksList[var5].canProvidePower()) {
-				boolean var8 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4) || var1.isBlockIndirectlyGettingPowered(var2, var3 + 1, var4);
-				this.onPoweredBlockChange(var1, var2, var3, var4, var8);
+			if(z7) {
+				this.dropBlockAsItem(world, x, y, z, i6);
+			} else if(flag > 0 && Block.blocksList[flag].canProvidePower()) {
+				boolean z8 = world.isBlockIndirectlyGettingPowered(x, y, z) || world.isBlockIndirectlyGettingPowered(x, y + 1, z);
+				this.onPoweredBlockChange(world, x, y, z, z8);
 			}
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return (var1 & 8) != 0 ? 0 : (this.material == Material.iron ? Item.doorSteel.shiftedIndex : Item.doorWood.shiftedIndex);
-	}
-
-	public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3D var5, Vec3D var6) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.collisionRayTrace(var1, var2, var3, var4, var5, var6);
-	}
-
-	public int getState(int var1) {
-		return (var1 & 4) == 0 ? var1 - 1 & 3 : var1 & 3;
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var3 >= 127 ? false : var1.isBlockNormalCube(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : (this.material == Material.iron ? Item.doorSteel.shiftedIndex : Item.doorWood.shiftedIndex);
+	}
+
+	public MovingObjectPosition collisionRayTrace(World world, int x, int y, int z, Vec3D vector1, Vec3D vector2) {
+		this.setBlockBoundsBasedOnState(world, x, y, z);
+		return super.collisionRayTrace(world, x, y, z, vector1, vector2);
+	}
+
+	public int getState(int flag) {
+		return (flag & 4) == 0 ? flag - 1 & 3 : flag & 3;
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return y >= 127 ? false : world.isBlockNormalCube(x, y - 1, z) && super.canPlaceBlockAt(world, x, y, z) && super.canPlaceBlockAt(world, x, y + 1, z);
 	}
 }
--- net/minecraft/src/Packet24MobSpawn.java
+++ net/minecraft/src/Packet24MobSpawn.java
@@ -16,38 +16,38 @@
 	public Packet24MobSpawn() {
 	}
 
-	public Packet24MobSpawn(EntityLiving var1) {
-		this.entityId = var1.entityID;
-		this.type = (byte)EntityList.getEntityID(var1);
-		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-		this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.yaw = (byte)((int)(var1.rotationYaw * 256.0F / 360.0F));
-		this.pitch = (byte)((int)(var1.rotationPitch * 256.0F / 360.0F));
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.type = var1.readByte();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.yaw = var1.readByte();
-		this.pitch = var1.readByte();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeByte(this.type);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.writeByte(this.yaw);
-		var1.writeByte(this.pitch);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleMobSpawn(this);
+	public Packet24MobSpawn(EntityLiving entityLiving) {
+		this.entityId = entityLiving.entityID;
+		this.type = (byte)EntityList.getEntityID(entityLiving);
+		this.xPosition = MathHelper.floor_double(entityLiving.posX * 32.0D);
+		this.yPosition = MathHelper.floor_double(entityLiving.posY * 32.0D);
+		this.zPosition = MathHelper.floor_double(entityLiving.posZ * 32.0D);
+		this.yaw = (byte)((int)(entityLiving.rotationYaw * 256.0F / 360.0F));
+		this.pitch = (byte)((int)(entityLiving.rotationPitch * 256.0F / 360.0F));
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.type = dataInputStream.readByte();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+		this.yaw = dataInputStream.readByte();
+		this.pitch = dataInputStream.readByte();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeByte(this.type);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+		dataOutputStream.writeByte(this.yaw);
+		dataOutputStream.writeByte(this.pitch);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleMobSpawn(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/WorldGenBlockGoldBlockSteel.java
@@ -1,0 +1,22 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenBlockGoldBlockSteel extends WorldGenerator {
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		for(int i6 = 0; i6 < 6; ++i6) {
+			int i7 = x + rand.nextInt(8) - rand.nextInt(8);
+			int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+			int i9 = z + rand.nextInt(8) - rand.nextInt(8);
+			if(world.getBlockId(i7, i8 - 1, i9) != Block.waterStill.blockID && world.getBlockId(i7, i8 - 1, i9) != Block.waterMoving.blockID) {
+				for(int i10 = 0; i10 != 5 && world.getBlockId(i7, i8 + i10, i9) == Block.waterStill.blockID; ++i10) {
+					if(i10 == 4) {
+						world.setBlock(i7, i8, i9, rand.nextInt(20) > 16 ? Block.blockGold.blockID : Block.blockSteel.blockID);
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/BlockStone.java
+++ net/minecraft/src/BlockStone.java
@@ -3,11 +3,18 @@
 import java.util.Random;
 
 public class BlockStone extends Block {
-	public BlockStone(int var1, int var2) {
-		super(var1, var2, Material.rock);
-	}
-
-	public int idDropped(int var1, Random var2) {
-		return Block.cobblestone.blockID;
+	int dropID = -1;
+
+	public BlockStone(int id, int blockIndex, int integer3) {
+		super(id, blockIndex, Material.rock);
+		this.dropID = integer3;
+	}
+
+	public BlockStone(int id, int blockIndex) {
+		super(id, blockIndex, Material.rock);
+	}
+
+	public int idDropped(int count, Random random) {
+		return this.dropID == -1 ? Block.cobblestone.blockID : this.dropID;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockFlameWoodDoor.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockFlameWoodDoor extends BlockDoor {
+	public BlockFlameWoodDoor(int integer1, int integer2) {
+		super(integer1, Material.wood);
+		this.blockIndexInTexture = integer2;
+	}
+
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : ExtItems.fireWoodDoor.shiftedIndex;
+	}
+}
--- /dev/null
+++ net/minecraft/src/Packet72.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet72 extends Packet {
+	public String field_6545_1tQe51BGm2Xp0U4KWl986Un70qX3d2AwM1k36lum5J6spue8ma5b8XrccW8B = "";
+	public int field_6546_66i793hD95eJf0C8Ehst4uhr2W1BWDBzGSNH7JLx766Z3S7497gRS92sa4W1;
+
+	public Packet72(String string, int integer) {
+		this.field_6545_1tQe51BGm2Xp0U4KWl986Un70qX3d2AwM1k36lum5J6spue8ma5b8XrccW8B = string;
+		this.field_6546_66i793hD95eJf0C8Ehst4uhr2W1BWDBzGSNH7JLx766Z3S7497gRS92sa4W1 = integer;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.field_6545_1tQe51BGm2Xp0U4KWl986Un70qX3d2AwM1k36lum5J6spue8ma5b8XrccW8B = dataInputStream.readUTF();
+		this.field_6546_66i793hD95eJf0C8Ehst4uhr2W1BWDBzGSNH7JLx766Z3S7497gRS92sa4W1 = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeUTF(this.field_6545_1tQe51BGm2Xp0U4KWl986Un70qX3d2AwM1k36lum5J6spue8ma5b8XrccW8B);
+		dataOutputStream.writeInt(this.field_6546_66i793hD95eJf0C8Ehst4uhr2W1BWDBzGSNH7JLx766Z3S7497gRS92sa4W1);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		if(netHandler instanceof NetServerHandler) {
+			((NetServerHandler)netHandler).mcServer.configManager.sendPacketToAllPlayers(this);
+		}
+
+	}
+
+	public int getPacketSize() {
+		return this.field_6545_1tQe51BGm2Xp0U4KWl986Un70qX3d2AwM1k36lum5J6spue8ma5b8XrccW8B.getBytes().length;
+	}
+}
--- net/minecraft/src/NextTickListEntry.java
+++ net/minecraft/src/NextTickListEntry.java
@@ -9,19 +9,19 @@
 	public long scheduledTime;
 	private long tickEntryID = nextTickEntryID++;
 
-	public NextTickListEntry(int var1, int var2, int var3, int var4) {
-		this.xCoord = var1;
-		this.yCoord = var2;
-		this.zCoord = var3;
-		this.blockID = var4;
+	public NextTickListEntry(int xCoord, int yCoord, int zCoord, int blockID) {
+		this.xCoord = xCoord;
+		this.yCoord = yCoord;
+		this.zCoord = zCoord;
+		this.blockID = blockID;
 	}
 
-	public boolean equals(Object var1) {
-		if(!(var1 instanceof NextTickListEntry)) {
+	public boolean equals(Object object) {
+		if(!(object instanceof NextTickListEntry)) {
 			return false;
 		} else {
-			NextTickListEntry var2 = (NextTickListEntry)var1;
-			return this.xCoord == var2.xCoord && this.yCoord == var2.yCoord && this.zCoord == var2.zCoord && this.blockID == var2.blockID;
+			NextTickListEntry nextTickListEntry2 = (NextTickListEntry)object;
+			return this.xCoord == nextTickListEntry2.xCoord && this.yCoord == nextTickListEntry2.yCoord && this.zCoord == nextTickListEntry2.zCoord && this.blockID == nextTickListEntry2.blockID;
 		}
 	}
 
@@ -29,16 +29,16 @@
 		return (this.xCoord * 128 * 1024 + this.zCoord * 128 + this.yCoord) * 256 + this.blockID;
 	}
 
-	public NextTickListEntry setScheduledTime(long var1) {
-		this.scheduledTime = var1;
+	public NextTickListEntry setScheduledTime(long scheduledTime) {
+		this.scheduledTime = scheduledTime;
 		return this;
 	}
 
-	public int comparer(NextTickListEntry var1) {
-		return this.scheduledTime < var1.scheduledTime ? -1 : (this.scheduledTime > var1.scheduledTime ? 1 : (this.tickEntryID < var1.tickEntryID ? -1 : (this.tickEntryID > var1.tickEntryID ? 1 : 0)));
+	public int compareTo(NextTickListEntry nextTickListEntry) {
+		return this.scheduledTime < nextTickListEntry.scheduledTime ? -1 : (this.scheduledTime > nextTickListEntry.scheduledTime ? 1 : (this.tickEntryID < nextTickListEntry.tickEntryID ? -1 : (this.tickEntryID > nextTickListEntry.tickEntryID ? 1 : 0)));
 	}
 
-	public int compareTo(Object var1) {
-		return this.comparer((NextTickListEntry)var1);
+	public int compareTo(Object object) {
+		return this.compareTo((NextTickListEntry)object);
 	}
 }
--- net/minecraft/src/EntityMinecart.java
+++ net/minecraft/src/EntityMinecart.java
@@ -20,8 +20,8 @@
 	private double minecartYaw;
 	private double minecartPitch;
 
-	public EntityMinecart(World var1) {
-		super(var1);
+	public EntityMinecart(World world) {
+		super(world);
 		this.cargoItems = new ItemStack[36];
 		this.damageTaken = 0;
 		this.timeSinceHit = 0;
@@ -33,8 +33,8 @@
 		this.canTriggerWalking = false;
 	}
 
-	public AxisAlignedBB getCollisionBox(Entity var1) {
-		return var1.boundingBox;
+	public AxisAlignedBB getCollisionBox(Entity entity) {
+		return entity.boundingBox;
 	}
 
 	public AxisAlignedBB getBoundingBox() {
@@ -45,26 +45,26 @@
 		return true;
 	}
 
-	public EntityMinecart(World var1, double var2, double var4, double var6, int var8) {
-		this(var1);
-		this.setPosition(var2, var4 + (double)this.yOffset, var6);
+	public EntityMinecart(World world, double x, double y, double z, int minecartType) {
+		this(world);
+		this.setPosition(x, y + (double)this.yOffset, z);
 		this.motionX = 0.0D;
 		this.motionY = 0.0D;
 		this.motionZ = 0.0D;
-		this.prevPosX = var2;
-		this.prevPosY = var4;
-		this.prevPosZ = var6;
-		this.minecartType = var8;
+		this.prevPosX = x;
+		this.prevPosY = y;
+		this.prevPosZ = z;
+		this.minecartType = minecartType;
 	}
 
 	public double getMountedYOffset() {
 		return (double)this.height * 0.0D - (double)0.3F;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		this.forwardDirection = -this.forwardDirection;
 		this.timeSinceHit = 10;
-		this.damageTaken += var2 * 10;
+		this.damageTaken += damage * 10;
 		if(this.damageTaken > 40) {
 			this.entityDropItem(Item.minecartEmpty.shiftedIndex, 1, 0.0F);
 			if(this.minecartType == 1) {
@@ -84,26 +84,26 @@
 	}
 
 	public void setEntityDead() {
-		for(int var1 = 0; var1 < this.getSizeInventory(); ++var1) {
-			ItemStack var2 = this.getStackInSlot(var1);
-			if(var2 != null) {
-				float var3 = this.rand.nextFloat() * 0.8F + 0.1F;
-				float var4 = this.rand.nextFloat() * 0.8F + 0.1F;
-				float var5 = this.rand.nextFloat() * 0.8F + 0.1F;
+		for(int i1 = 0; i1 < this.getSizeInventory(); ++i1) {
+			ItemStack itemStack2 = this.getStackInSlot(i1);
+			if(itemStack2 != null) {
+				float f3 = this.rand.nextFloat() * 0.8F + 0.1F;
+				float f4 = this.rand.nextFloat() * 0.8F + 0.1F;
+				float f5 = this.rand.nextFloat() * 0.8F + 0.1F;
 
-				while(var2.stackSize > 0) {
-					int var6 = this.rand.nextInt(21) + 10;
-					if(var6 > var2.stackSize) {
-						var6 = var2.stackSize;
+				while(itemStack2.stackSize > 0) {
+					int i6 = this.rand.nextInt(21) + 10;
+					if(i6 > itemStack2.stackSize) {
+						i6 = itemStack2.stackSize;
 					}
 
-					var2.stackSize -= var6;
-					EntityItem var7 = new EntityItem(this.worldObj, this.posX + (double)var3, this.posY + (double)var4, this.posZ + (double)var5, new ItemStack(var2.itemID, var6, var2.itemDmg));
-					float var8 = 0.05F;
-					var7.motionX = (double)((float)this.rand.nextGaussian() * var8);
-					var7.motionY = (double)((float)this.rand.nextGaussian() * var8 + 0.2F);
-					var7.motionZ = (double)((float)this.rand.nextGaussian() * var8);
-					this.worldObj.spawnEntityInWorld(var7);
+					itemStack2.stackSize -= i6;
+					EntityItem entityItem7 = new EntityItem(this.worldObj, this.posX + (double)f3, this.posY + (double)f4, this.posZ + (double)f5, new ItemStack(itemStack2.itemID, i6, itemStack2.itemDmg));
+					float f8 = 0.05F;
+					entityItem7.motionX = (double)((float)this.rand.nextGaussian() * f8);
+					entityItem7.motionY = (double)((float)this.rand.nextGaussian() * f8 + 0.2F);
+					entityItem7.motionZ = (double)((float)this.rand.nextGaussian() * f8);
+					this.worldObj.spawnEntityInWorld(entityItem7);
 				}
 			}
 		}
@@ -112,30 +112,29 @@
 	}
 
 	public void onUpdate() {
-		double var7;
+		double d1;
 		if(this.worldObj.multiplayerWorld) {
 			if(this.turnProgress > 0) {
-				double var41 = this.posX + (this.minecartX - this.posX) / (double)this.turnProgress;
-				double var42 = this.posY + (this.minecartY - this.posY) / (double)this.turnProgress;
-				double var5 = this.posZ + (this.minecartZ - this.posZ) / (double)this.turnProgress;
-
-				for(var7 = this.minecartYaw - (double)this.rotationYaw; var7 < -180.0D; var7 += 360.0D) {
-				}
-
-				while(var7 >= 180.0D) {
-					var7 -= 360.0D;
-				}
-
-				this.rotationYaw = (float)((double)this.rotationYaw + var7 / (double)this.turnProgress);
+				double d3 = this.posX + (this.minecartX - this.posX) / (double)this.turnProgress;
+				double d5 = this.posY + (this.minecartY - this.posY) / (double)this.turnProgress;
+				double d7 = this.posZ + (this.minecartZ - this.posZ) / (double)this.turnProgress;
+
+				for(d1 = this.minecartYaw - (double)this.rotationYaw; d1 < -180.0D; d1 += 360.0D) {
+				}
+
+				while(d1 >= 180.0D) {
+					d1 -= 360.0D;
+				}
+
+				this.rotationYaw = (float)((double)this.rotationYaw + d1 / (double)this.turnProgress);
 				this.rotationPitch = (float)((double)this.rotationPitch + (this.minecartPitch - (double)this.rotationPitch) / (double)this.turnProgress);
 				--this.turnProgress;
-				this.setPosition(var41, var42, var5);
+				this.setPosition(d3, d5, d7);
 				this.setRotation(this.rotationYaw, this.rotationPitch);
 			} else {
 				this.setPosition(this.posX, this.posY, this.posZ);
 				this.setRotation(this.rotationYaw, this.rotationPitch);
 			}
-
 		} else {
 			if(this.timeSinceHit > 0) {
 				--this.timeSinceHit;
@@ -149,107 +148,107 @@
 			this.prevPosY = this.posY;
 			this.prevPosZ = this.posZ;
 			this.motionY -= (double)0.04F;
-			int var1 = MathHelper.floor_double(this.posX);
-			int var2 = MathHelper.floor_double(this.posY);
-			int var3 = MathHelper.floor_double(this.posZ);
-			if(this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.minecartTrack.blockID) {
-				--var2;
+			int i43 = MathHelper.floor_double(this.posX);
+			int i4 = MathHelper.floor_double(this.posY);
+			int i44 = MathHelper.floor_double(this.posZ);
+			if(this.worldObj.getBlockId(i43, i4 - 1, i44) == Block.minecartTrack.blockID) {
+				--i4;
 			}
 
-			double var4 = 0.4D;
-			boolean var6 = false;
-			var7 = 1.0D / 128.0D;
-			if(this.worldObj.getBlockId(var1, var2, var3) == Block.minecartTrack.blockID) {
-				Vec3D var9 = this.getPos(this.posX, this.posY, this.posZ);
-				int var10 = this.worldObj.getBlockMetadata(var1, var2, var3);
-				this.posY = (double)var2;
-				if(var10 >= 2 && var10 <= 5) {
-					this.posY = (double)(var2 + 1);
-				}
-
-				if(var10 == 2) {
-					this.motionX -= var7;
-				}
-
-				if(var10 == 3) {
-					this.motionX += var7;
-				}
-
-				if(var10 == 4) {
-					this.motionZ += var7;
-				}
-
-				if(var10 == 5) {
-					this.motionZ -= var7;
-				}
-
-				int[][] var11 = matrix[var10];
-				double var12 = (double)(var11[1][0] - var11[0][0]);
-				double var14 = (double)(var11[1][2] - var11[0][2]);
-				double var16 = Math.sqrt(var12 * var12 + var14 * var14);
-				double var18 = this.motionX * var12 + this.motionZ * var14;
-				if(var18 < 0.0D) {
-					var12 = -var12;
-					var14 = -var14;
-				}
-
-				double var20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-				this.motionX = var20 * var12 / var16;
-				this.motionZ = var20 * var14 / var16;
-				double var22 = 0.0D;
-				double var24 = (double)var1 + 0.5D + (double)var11[0][0] * 0.5D;
-				double var26 = (double)var3 + 0.5D + (double)var11[0][2] * 0.5D;
-				double var28 = (double)var1 + 0.5D + (double)var11[1][0] * 0.5D;
-				double var30 = (double)var3 + 0.5D + (double)var11[1][2] * 0.5D;
-				var12 = var28 - var24;
-				var14 = var30 - var26;
-				double var32;
-				double var34;
-				double var36;
-				if(var12 == 0.0D) {
-					this.posX = (double)var1 + 0.5D;
-					var22 = this.posZ - (double)var3;
-				} else if(var14 == 0.0D) {
-					this.posZ = (double)var3 + 0.5D;
-					var22 = this.posX - (double)var1;
+			double d6 = 0.4D;
+			boolean z8 = false;
+			d1 = 2.0D / 256D;
+			if(this.worldObj.getBlockId(i43, i4, i44) == Block.minecartTrack.blockID) {
+				Vec3D vec3D9 = this.getPos(this.posX, this.posY, this.posZ);
+				int i10 = this.worldObj.getBlockMetadata(i43, i4, i44);
+				this.posY = (double)i4;
+				if(i10 >= 2 && i10 <= 5) {
+					this.posY = (double)(i4 + 1);
+				}
+
+				if(i10 == 2) {
+					this.motionX -= d1;
+				}
+
+				if(i10 == 3) {
+					this.motionX += d1;
+				}
+
+				if(i10 == 4) {
+					this.motionZ += d1;
+				}
+
+				if(i10 == 5) {
+					this.motionZ -= d1;
+				}
+
+				int[][] i11 = matrix[i10];
+				double d12 = (double)(i11[1][0] - i11[0][0]);
+				double d14 = (double)(i11[1][2] - i11[0][2]);
+				double d16 = Math.sqrt(d12 * d12 + d14 * d14);
+				double d18 = this.motionX * d12 + this.motionZ * d14;
+				if(d18 < 0.0D) {
+					d12 = -d12;
+					d14 = -d14;
+				}
+
+				double d20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+				this.motionX = d20 * d12 / d16;
+				this.motionZ = d20 * d14 / d16;
+				double d22 = 0.0D;
+				double d24 = (double)i43 + 0.5D + (double)i11[0][0] * 0.5D;
+				double d26 = (double)i44 + 0.5D + (double)i11[0][2] * 0.5D;
+				double d28 = (double)i43 + 0.5D + (double)i11[1][0] * 0.5D;
+				double d30 = (double)i44 + 0.5D + (double)i11[1][2] * 0.5D;
+				d12 = d28 - d24;
+				d14 = d30 - d26;
+				double d32;
+				double d34;
+				double d36;
+				if(d12 == 0.0D) {
+					this.posX = (double)i43 + 0.5D;
+					d22 = this.posZ - (double)i44;
+				} else if(d14 == 0.0D) {
+					this.posZ = (double)i44 + 0.5D;
+					d22 = this.posX - (double)i43;
 				} else {
-					var32 = this.posX - var24;
-					var34 = this.posZ - var26;
-					var36 = (var32 * var12 + var34 * var14) * 2.0D;
-					var22 = var36;
+					d32 = this.posX - d24;
+					d34 = this.posZ - d26;
+					d36 = (d32 * d12 + d34 * d14) * 2.0D;
+					d22 = d36;
 				}
 
-				this.posX = var24 + var12 * var22;
-				this.posZ = var26 + var14 * var22;
+				this.posX = d24 + d12 * d22;
+				this.posZ = d26 + d14 * d22;
 				this.setPosition(this.posX, this.posY + (double)this.yOffset, this.posZ);
-				var32 = this.motionX;
-				var34 = this.motionZ;
+				d32 = this.motionX;
+				d34 = this.motionZ;
 				if(this.riddenByEntity != null) {
-					var32 *= 0.75D;
-					var34 *= 0.75D;
-				}
-
-				if(var32 < -var4) {
-					var32 = -var4;
-				}
-
-				if(var32 > var4) {
-					var32 = var4;
-				}
-
-				if(var34 < -var4) {
-					var34 = -var4;
-				}
-
-				if(var34 > var4) {
-					var34 = var4;
-				}
-
-				this.moveEntity(var32, 0.0D, var34);
-				if(var11[0][1] != 0 && MathHelper.floor_double(this.posX) - var1 == var11[0][0] && MathHelper.floor_double(this.posZ) - var3 == var11[0][2]) {
-					this.setPosition(this.posX, this.posY + (double)var11[0][1], this.posZ);
-				} else if(var11[1][1] != 0 && MathHelper.floor_double(this.posX) - var1 == var11[1][0] && MathHelper.floor_double(this.posZ) - var3 == var11[1][2]) {
-					this.setPosition(this.posX, this.posY + (double)var11[1][1], this.posZ);
+					d32 *= 0.75D;
+					d34 *= 0.75D;
+				}
+
+				if(d32 < -d6) {
+					d32 = -d6;
+				}
+
+				if(d32 > d6) {
+					d32 = d6;
+				}
+
+				if(d34 < -d6) {
+					d34 = -d6;
+				}
+
+				if(d34 > d6) {
+					d34 = d6;
+				}
+
+				this.moveEntity(d32, 0.0D, d34);
+				if(i11[0][1] != 0 && MathHelper.floor_double(this.posX) - i43 == i11[0][0] && MathHelper.floor_double(this.posZ) - i44 == i11[0][2]) {
+					this.setPosition(this.posX, this.posY + (double)i11[0][1], this.posZ);
+				} else if(i11[1][1] != 0 && MathHelper.floor_double(this.posX) - i43 == i11[1][0] && MathHelper.floor_double(this.posZ) - i44 == i11[1][2]) {
+					this.setPosition(this.posX, this.posY + (double)i11[1][1], this.posZ);
 				}
 
 				if(this.riddenByEntity != null) {
@@ -258,17 +257,17 @@
 					this.motionZ *= (double)0.997F;
 				} else {
 					if(this.minecartType == 2) {
-						var36 = (double)MathHelper.sqrt_double(this.pushX * this.pushX + this.pushZ * this.pushZ);
-						if(var36 > 0.01D) {
-							var6 = true;
-							this.pushX /= var36;
-							this.pushZ /= var36;
-							double var38 = 0.04D;
+						d36 = (double)MathHelper.sqrt_double(this.pushX * this.pushX + this.pushZ * this.pushZ);
+						if(d36 > 0.01D) {
+							z8 = true;
+							this.pushX /= d36;
+							this.pushZ /= d36;
+							double d38 = 0.04D;
 							this.motionX *= (double)0.8F;
 							this.motionY *= 0.0D;
 							this.motionZ *= (double)0.8F;
-							this.motionX += this.pushX * var38;
-							this.motionZ += this.pushZ * var38;
+							this.motionX += this.pushX * d38;
+							this.motionZ += this.pushZ * d38;
 						} else {
 							this.motionX *= (double)0.9F;
 							this.motionY *= 0.0D;
@@ -281,31 +280,31 @@
 					this.motionZ *= (double)0.96F;
 				}
 
-				Vec3D var46 = this.getPos(this.posX, this.posY, this.posZ);
-				if(var46 != null && var9 != null) {
-					double var37 = (var9.yCoord - var46.yCoord) * 0.05D;
-					var20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-					if(var20 > 0.0D) {
-						this.motionX = this.motionX / var20 * (var20 + var37);
-						this.motionZ = this.motionZ / var20 * (var20 + var37);
+				Vec3D vec3D48 = this.getPos(this.posX, this.posY, this.posZ);
+				if(vec3D48 != null && vec3D9 != null) {
+					double d39 = (vec3D9.yCoord - vec3D48.yCoord) * 0.05D;
+					d20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+					if(d20 > 0.0D) {
+						this.motionX = this.motionX / d20 * (d20 + d39);
+						this.motionZ = this.motionZ / d20 * (d20 + d39);
 					}
 
-					this.setPosition(this.posX, var46.yCoord, this.posZ);
+					this.setPosition(this.posX, vec3D48.yCoord, this.posZ);
 				}
 
-				int var47 = MathHelper.floor_double(this.posX);
-				int var48 = MathHelper.floor_double(this.posZ);
-				if(var47 != var1 || var48 != var3) {
-					var20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-					this.motionX = var20 * (double)(var47 - var1);
-					this.motionZ = var20 * (double)(var48 - var3);
+				int i49 = MathHelper.floor_double(this.posX);
+				int i40 = MathHelper.floor_double(this.posZ);
+				if(i49 != i43 || i40 != i44) {
+					d20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+					this.motionX = d20 * (double)(i49 - i43);
+					this.motionZ = d20 * (double)(i40 - i44);
 				}
 
 				if(this.minecartType == 2) {
-					double var39 = (double)MathHelper.sqrt_double(this.pushX * this.pushX + this.pushZ * this.pushZ);
-					if(var39 > 0.01D && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.001D) {
-						this.pushX /= var39;
-						this.pushZ /= var39;
+					double d41 = (double)MathHelper.sqrt_double(this.pushX * this.pushX + this.pushZ * this.pushZ);
+					if(d41 > 0.01D && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.001D) {
+						this.pushX /= d41;
+						this.pushZ /= d41;
 						if(this.pushX * this.motionX + this.pushZ * this.motionZ < 0.0D) {
 							this.pushX = 0.0D;
 							this.pushZ = 0.0D;
@@ -316,20 +315,20 @@
 					}
 				}
 			} else {
-				if(this.motionX < -var4) {
-					this.motionX = -var4;
-				}
-
-				if(this.motionX > var4) {
-					this.motionX = var4;
-				}
-
-				if(this.motionZ < -var4) {
-					this.motionZ = -var4;
-				}
-
-				if(this.motionZ > var4) {
-					this.motionZ = var4;
+				if(this.motionX < -d6) {
+					this.motionX = -d6;
+				}
+
+				if(this.motionX > d6) {
+					this.motionX = d6;
+				}
+
+				if(this.motionZ < -d6) {
+					this.motionZ = -d6;
+				}
+
+				if(this.motionZ > d6) {
+					this.motionZ = d6;
 				}
 
 				if(this.onGround) {
@@ -347,35 +346,35 @@
 			}
 
 			this.rotationPitch = 0.0F;
-			double var43 = this.prevPosX - this.posX;
-			double var44 = this.prevPosZ - this.posZ;
-			if(var43 * var43 + var44 * var44 > 0.001D) {
-				this.rotationYaw = (float)(Math.atan2(var44, var43) * 180.0D / Math.PI);
+			double d45 = this.prevPosX - this.posX;
+			double d46 = this.prevPosZ - this.posZ;
+			if(d45 * d45 + d46 * d46 > 0.001D) {
+				this.rotationYaw = (float)(Math.atan2(d46, d45) * 180.0D / Math.PI);
 				if(this.isInReverse) {
 					this.rotationYaw += 180.0F;
 				}
 			}
 
-			double var13;
-			for(var13 = (double)(this.rotationYaw - this.prevRotationYaw); var13 >= 180.0D; var13 -= 360.0D) {
-			}
-
-			while(var13 < -180.0D) {
-				var13 += 360.0D;
-			}
-
-			if(var13 < -170.0D || var13 >= 170.0D) {
+			double d13;
+			for(d13 = (double)(this.rotationYaw - this.prevRotationYaw); d13 >= 180.0D; d13 -= 360.0D) {
+			}
+
+			while(d13 < -180.0D) {
+				d13 += 360.0D;
+			}
+
+			if(d13 < -170.0D || d13 >= 170.0D) {
 				this.rotationYaw += 180.0F;
 				this.isInReverse = !this.isInReverse;
 			}
 
 			this.setRotation(this.rotationYaw, this.rotationPitch);
-			List var15 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
-			if(var15 != null && var15.size() > 0) {
-				for(int var45 = 0; var45 < var15.size(); ++var45) {
-					Entity var17 = (Entity)var15.get(var45);
-					if(var17 != this.riddenByEntity && var17.canBePushed() && var17 instanceof EntityMinecart) {
-						var17.applyEntityCollision(this);
+			List list15 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
+			if(list15 != null && list15.size() > 0) {
+				for(int i47 = 0; i47 < list15.size(); ++i47) {
+					Entity entity17 = (Entity)list15.get(i47);
+					if(entity17 != this.riddenByEntity && entity17.canBePushed() && entity17 instanceof EntityMinecart) {
+						entity17.applyEntityCollision(this);
 					}
 				}
 			}
@@ -384,7 +383,7 @@
 				this.riddenByEntity = null;
 			}
 
-			if(var6 && this.rand.nextInt(4) == 0) {
+			if(z8 && this.rand.nextInt(4) == 0) {
 				--this.fuel;
 				if(this.fuel < 0) {
 					this.pushX = this.pushZ = 0.0D;
@@ -392,175 +391,175 @@
 
 				this.worldObj.spawnParticle("largesmoke", this.posX, this.posY + 0.8D, this.posZ, 0.0D, 0.0D, 0.0D);
 			}
-
 		}
+
 	}
 
-	public Vec3D getPos(double var1, double var3, double var5) {
-		int var7 = MathHelper.floor_double(var1);
-		int var8 = MathHelper.floor_double(var3);
-		int var9 = MathHelper.floor_double(var5);
-		if(this.worldObj.getBlockId(var7, var8 - 1, var9) == Block.minecartTrack.blockID) {
-			--var8;
+	public Vec3D getPos(double x, double y, double z) {
+		int i7 = MathHelper.floor_double(x);
+		int i8 = MathHelper.floor_double(y);
+		int i9 = MathHelper.floor_double(z);
+		if(this.worldObj.getBlockId(i7, i8 - 1, i9) == Block.minecartTrack.blockID) {
+			--i8;
 		}
 
-		if(this.worldObj.getBlockId(var7, var8, var9) == Block.minecartTrack.blockID) {
-			int var10 = this.worldObj.getBlockMetadata(var7, var8, var9);
-			var3 = (double)var8;
-			if(var10 >= 2 && var10 <= 5) {
-				var3 = (double)(var8 + 1);
+		if(this.worldObj.getBlockId(i7, i8, i9) == Block.minecartTrack.blockID) {
+			int i10 = this.worldObj.getBlockMetadata(i7, i8, i9);
+			y = (double)i8;
+			if(i10 >= 2 && i10 <= 5) {
+				y = (double)(i8 + 1);
 			}
 
-			int[][] var11 = matrix[var10];
-			double var12 = 0.0D;
-			double var14 = (double)var7 + 0.5D + (double)var11[0][0] * 0.5D;
-			double var16 = (double)var8 + 0.5D + (double)var11[0][1] * 0.5D;
-			double var18 = (double)var9 + 0.5D + (double)var11[0][2] * 0.5D;
-			double var20 = (double)var7 + 0.5D + (double)var11[1][0] * 0.5D;
-			double var22 = (double)var8 + 0.5D + (double)var11[1][1] * 0.5D;
-			double var24 = (double)var9 + 0.5D + (double)var11[1][2] * 0.5D;
-			double var26 = var20 - var14;
-			double var28 = (var22 - var16) * 2.0D;
-			double var30 = var24 - var18;
-			if(var26 == 0.0D) {
-				var1 = (double)var7 + 0.5D;
-				var12 = var5 - (double)var9;
-			} else if(var30 == 0.0D) {
-				var5 = (double)var9 + 0.5D;
-				var12 = var1 - (double)var7;
+			int[][] i11 = matrix[i10];
+			double d12 = 0.0D;
+			double d14 = (double)i7 + 0.5D + (double)i11[0][0] * 0.5D;
+			double d16 = (double)i8 + 0.5D + (double)i11[0][1] * 0.5D;
+			double d18 = (double)i9 + 0.5D + (double)i11[0][2] * 0.5D;
+			double d20 = (double)i7 + 0.5D + (double)i11[1][0] * 0.5D;
+			double d22 = (double)i8 + 0.5D + (double)i11[1][1] * 0.5D;
+			double d24 = (double)i9 + 0.5D + (double)i11[1][2] * 0.5D;
+			double d26 = d20 - d14;
+			double d28 = (d22 - d16) * 2.0D;
+			double d30 = d24 - d18;
+			if(d26 == 0.0D) {
+				x = (double)i7 + 0.5D;
+				d12 = z - (double)i9;
+			} else if(d30 == 0.0D) {
+				z = (double)i9 + 0.5D;
+				d12 = x - (double)i7;
 			} else {
-				double var32 = var1 - var14;
-				double var34 = var5 - var18;
-				double var36 = (var32 * var26 + var34 * var30) * 2.0D;
-				var12 = var36;
-			}
-
-			var1 = var14 + var26 * var12;
-			var3 = var16 + var28 * var12;
-			var5 = var18 + var30 * var12;
-			if(var28 < 0.0D) {
-				++var3;
-			}
-
-			if(var28 > 0.0D) {
-				var3 += 0.5D;
-			}
-
-			return Vec3D.createVector(var1, var3, var5);
+				double d32 = x - d14;
+				double d34 = z - d18;
+				double d36 = (d32 * d26 + d34 * d30) * 2.0D;
+				d12 = d36;
+			}
+
+			x = d14 + d26 * d12;
+			y = d16 + d28 * d12;
+			z = d18 + d30 * d12;
+			if(d28 < 0.0D) {
+				++y;
+			}
+
+			if(d28 > 0.0D) {
+				y += 0.5D;
+			}
+
+			return Vec3D.createVector(x, y, z);
 		} else {
 			return null;
 		}
 	}
 
-	protected void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setInteger("Type", this.minecartType);
+	protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setInteger("Type", this.minecartType);
 		if(this.minecartType == 2) {
-			var1.setDouble("PushX", this.pushX);
-			var1.setDouble("PushZ", this.pushZ);
-			var1.setShort("Fuel", (short)this.fuel);
+			nbttagcompound.setDouble("PushX", this.pushX);
+			nbttagcompound.setDouble("PushZ", this.pushZ);
+			nbttagcompound.setShort("Fuel", (short)this.fuel);
 		} else if(this.minecartType == 1) {
-			NBTTagList var2 = new NBTTagList();
+			NBTTagList nBTTagList2 = new NBTTagList();
 
-			for(int var3 = 0; var3 < this.cargoItems.length; ++var3) {
-				if(this.cargoItems[var3] != null) {
-					NBTTagCompound var4 = new NBTTagCompound();
-					var4.setByte("Slot", (byte)var3);
-					this.cargoItems[var3].writeToNBT(var4);
-					var2.setTag(var4);
+			for(int i3 = 0; i3 < this.cargoItems.length; ++i3) {
+				if(this.cargoItems[i3] != null) {
+					NBTTagCompound nBTTagCompound4 = new NBTTagCompound();
+					nBTTagCompound4.setByte("Slot", (byte)i3);
+					this.cargoItems[i3].writeToNBT(nBTTagCompound4);
+					nBTTagList2.setTag(nBTTagCompound4);
 				}
 			}
 
-			var1.setTag("Items", var2);
+			nbttagcompound.setTag("Items", nBTTagList2);
 		}
 
 	}
 
-	protected void readEntityFromNBT(NBTTagCompound var1) {
-		this.minecartType = var1.getInteger("Type");
+	protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.minecartType = nbttagcompound.getInteger("Type");
 		if(this.minecartType == 2) {
-			this.pushX = var1.getDouble("PushX");
-			this.pushZ = var1.getDouble("PushZ");
-			this.fuel = var1.getShort("Fuel");
+			this.pushX = nbttagcompound.getDouble("PushX");
+			this.pushZ = nbttagcompound.getDouble("PushZ");
+			this.fuel = nbttagcompound.getShort("Fuel");
 		} else if(this.minecartType == 1) {
-			NBTTagList var2 = var1.getTagList("Items");
+			NBTTagList nBTTagList2 = nbttagcompound.getTagList("Items");
 			this.cargoItems = new ItemStack[this.getSizeInventory()];
 
-			for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-				NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-				int var5 = var4.getByte("Slot") & 255;
-				if(var5 >= 0 && var5 < this.cargoItems.length) {
-					this.cargoItems[var5] = new ItemStack(var4);
+			for(int i3 = 0; i3 < nBTTagList2.tagCount(); ++i3) {
+				NBTTagCompound nBTTagCompound4 = (NBTTagCompound)nBTTagList2.tagAt(i3);
+				int i5 = nBTTagCompound4.getByte("Slot") & 255;
+				if(i5 >= 0 && i5 < this.cargoItems.length) {
+					this.cargoItems[i5] = new ItemStack(nBTTagCompound4);
 				}
 			}
 		}
 
 	}
 
-	public void applyEntityCollision(Entity var1) {
-		if(var1 != this.riddenByEntity) {
-			if(var1 instanceof EntityLiving && !(var1 instanceof EntityPlayer) && this.minecartType == 0 && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.01D && this.riddenByEntity == null && var1.ridingEntity == null) {
-				var1.mountEntity(this);
+	public void applyEntityCollision(Entity entity) {
+		if(entity != this.riddenByEntity) {
+			if(entity instanceof EntityLiving && !(entity instanceof EntityPlayer) && this.minecartType == 0 && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.01D && this.riddenByEntity == null && entity.ridingEntity == null) {
+				entity.mountEntity(this);
 			}
 
-			double var2 = var1.posX - this.posX;
-			double var4 = var1.posZ - this.posZ;
-			double var6 = var2 * var2 + var4 * var4;
-			if(var6 >= (double)1.0E-4F) {
-				var6 = (double)MathHelper.sqrt_double(var6);
-				var2 /= var6;
-				var4 /= var6;
-				double var8 = 1.0D / var6;
-				if(var8 > 1.0D) {
-					var8 = 1.0D;
+			double d2 = entity.posX - this.posX;
+			double d4 = entity.posZ - this.posZ;
+			double d6 = d2 * d2 + d4 * d4;
+			if(d6 >= 9.999999747378752E-5D) {
+				d6 = (double)MathHelper.sqrt_double(d6);
+				d2 /= d6;
+				d4 /= d6;
+				double d8 = 1.0D / d6;
+				if(d8 > 1.0D) {
+					d8 = 1.0D;
 				}
 
-				var2 *= var8;
-				var4 *= var8;
-				var2 *= (double)0.1F;
-				var4 *= (double)0.1F;
-				var2 *= (double)(1.0F - this.entityCollisionReduction);
-				var4 *= (double)(1.0F - this.entityCollisionReduction);
-				var2 *= 0.5D;
-				var4 *= 0.5D;
-				if(var1 instanceof EntityMinecart) {
-					double var10 = var1.motionX + this.motionX;
-					double var12 = var1.motionZ + this.motionZ;
-					if(((EntityMinecart)var1).minecartType == 2 && this.minecartType != 2) {
+				d2 *= d8;
+				d4 *= d8;
+				d2 *= (double)0.1F;
+				d4 *= (double)0.1F;
+				d2 *= (double)(1.0F - this.entityCollisionReduction);
+				d4 *= (double)(1.0F - this.entityCollisionReduction);
+				d2 *= 0.5D;
+				d4 *= 0.5D;
+				if(entity instanceof EntityMinecart) {
+					double d10 = entity.motionX + this.motionX;
+					double d12 = entity.motionZ + this.motionZ;
+					if(((EntityMinecart)entity).minecartType == 2 && this.minecartType != 2) {
 						this.motionX *= (double)0.2F;
 						this.motionZ *= (double)0.2F;
-						this.addVelocity(var1.motionX - var2, 0.0D, var1.motionZ - var4);
-						var1.motionX *= (double)0.7F;
-						var1.motionZ *= (double)0.7F;
-					} else if(((EntityMinecart)var1).minecartType != 2 && this.minecartType == 2) {
-						var1.motionX *= (double)0.2F;
-						var1.motionZ *= (double)0.2F;
-						var1.addVelocity(this.motionX + var2, 0.0D, this.motionZ + var4);
+						this.addVelocity(entity.motionX - d2, 0.0D, entity.motionZ - d4);
+						entity.motionX *= (double)0.7F;
+						entity.motionZ *= (double)0.7F;
+					} else if(((EntityMinecart)entity).minecartType != 2 && this.minecartType == 2) {
+						entity.motionX *= (double)0.2F;
+						entity.motionZ *= (double)0.2F;
+						entity.addVelocity(this.motionX + d2, 0.0D, this.motionZ + d4);
 						this.motionX *= (double)0.7F;
 						this.motionZ *= (double)0.7F;
 					} else {
-						var10 /= 2.0D;
-						var12 /= 2.0D;
+						d10 /= 2.0D;
+						d12 /= 2.0D;
 						this.motionX *= (double)0.2F;
 						this.motionZ *= (double)0.2F;
-						this.addVelocity(var10 - var2, 0.0D, var12 - var4);
-						var1.motionX *= (double)0.2F;
-						var1.motionZ *= (double)0.2F;
-						var1.addVelocity(var10 + var2, 0.0D, var12 + var4);
+						this.addVelocity(d10 - d2, 0.0D, d12 - d4);
+						entity.motionX *= (double)0.2F;
+						entity.motionZ *= (double)0.2F;
+						entity.addVelocity(d10 + d2, 0.0D, d12 + d4);
 					}
 				} else {
-					this.addVelocity(-var2, 0.0D, -var4);
-					var1.addVelocity(var2 / 4.0D, 0.0D, var4 / 4.0D);
+					this.addVelocity(-d2, 0.0D, -d4);
+					entity.addVelocity(d2 / 4.0D, 0.0D, d4 / 4.0D);
 				}
 			}
-
 		}
+
 	}
 
 	public int getSizeInventory() {
 		return 27;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.cargoItems[var1];
+	public ItemStack getStackInSlot(int slot) {
+		return this.cargoItems[slot];
 	}
 }
--- net/minecraft/src/NBTTagEnd.java
+++ net/minecraft/src/NBTTagEnd.java
@@ -5,10 +5,10 @@
 import java.io.IOException;
 
 public class NBTTagEnd extends NBTBase {
-	void readTagContents(DataInput var1) throws IOException {
+	void readTagContents(DataInput dataInput) throws IOException {
 	}
 
-	void writeTagContents(DataOutput var1) throws IOException {
+	void writeTagContents(DataOutput dataOutput) throws IOException {
 	}
 
 	public byte getType() {
--- net/minecraft/src/EntityPainting.java
+++ net/minecraft/src/EntityPainting.java
@@ -11,98 +11,98 @@
 	private int zPosition;
 	public EnumArt art;
 
-	public EntityPainting(World var1) {
-		super(var1);
+	public EntityPainting(World world) {
+		super(world);
 		this.tickCounter = 0;
 		this.direction = 0;
 		this.yOffset = 0.0F;
 		this.setSize(0.5F, 0.5F);
 	}
 
-	public EntityPainting(World var1, int var2, int var3, int var4, int var5) {
-		this(var1);
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.zPosition = var4;
-		ArrayList var6 = new ArrayList();
-		EnumArt[] var7 = EnumArt.values();
-		int var8 = var7.length;
+	public EntityPainting(World world, int xPosition, int yPosition, int zPosition, int direction) {
+		this(world);
+		this.xPosition = xPosition;
+		this.yPosition = yPosition;
+		this.zPosition = zPosition;
+		ArrayList arrayList6 = new ArrayList();
+		EnumArt[] enumArt7 = EnumArt.func_8089_4U0CrFc9svgwX0nmFIeeM4Z1eq1xQFlIlv4Hvh3I8vOCR2B4w8od8Uou0cFZ();
+		int i8 = enumArt7.length;
 
-		for(int var9 = 0; var9 < var8; ++var9) {
-			EnumArt var10 = var7[var9];
-			this.art = var10;
-			this.setDirection(var5);
+		for(int i9 = 0; i9 < i8; ++i9) {
+			EnumArt enumArt10 = enumArt7[i9];
+			this.art = enumArt10;
+			this.setDirection(direction);
 			if(this.onValidSurface()) {
-				var6.add(var10);
+				arrayList6.add(enumArt10);
 			}
 		}
 
-		if(var6.size() > 0) {
-			this.art = (EnumArt)var6.get(this.rand.nextInt(var6.size()));
+		if(arrayList6.size() > 0) {
+			this.art = (EnumArt)arrayList6.get(this.rand.nextInt(arrayList6.size()));
 		}
 
-		this.setDirection(var5);
+		this.setDirection(direction);
 	}
 
-	public void setDirection(int var1) {
-		this.direction = var1;
-		this.prevRotationYaw = this.rotationYaw = (float)(var1 * 90);
-		float var2 = (float)this.art.sizeX;
-		float var3 = (float)this.art.sizeY;
-		float var4 = (float)this.art.sizeX;
-		if(var1 != 0 && var1 != 2) {
-			var2 = 0.5F;
+	public void setDirection(int direction) {
+		this.direction = direction;
+		this.prevRotationYaw = this.rotationYaw = (float)(direction * 90);
+		float f2 = (float)this.art.sizeX;
+		float f3 = (float)this.art.sizeY;
+		float f4 = (float)this.art.sizeX;
+		if(direction != 0 && direction != 2) {
+			f2 = 0.5F;
 		} else {
-			var4 = 0.5F;
-		}
-
-		var2 /= 32.0F;
-		var3 /= 32.0F;
-		var4 /= 32.0F;
-		float var5 = (float)this.xPosition + 0.5F;
-		float var6 = (float)this.yPosition + 0.5F;
-		float var7 = (float)this.zPosition + 0.5F;
-		float var8 = 9.0F / 16.0F;
-		if(var1 == 0) {
-			var7 -= var8;
-		}
-
-		if(var1 == 1) {
-			var5 -= var8;
-		}
-
-		if(var1 == 2) {
-			var7 += var8;
-		}
-
-		if(var1 == 3) {
-			var5 += var8;
-		}
-
-		if(var1 == 0) {
-			var5 -= this.getArtSize(this.art.sizeX);
-		}
-
-		if(var1 == 1) {
-			var7 += this.getArtSize(this.art.sizeX);
-		}
-
-		if(var1 == 2) {
-			var5 += this.getArtSize(this.art.sizeX);
-		}
-
-		if(var1 == 3) {
-			var7 -= this.getArtSize(this.art.sizeX);
-		}
-
-		var6 += this.getArtSize(this.art.sizeY);
-		this.setPosition((double)var5, (double)var6, (double)var7);
-		float var9 = -(0.1F / 16.0F);
-		this.boundingBox.setBounds((double)(var5 - var2 - var9), (double)(var6 - var3 - var9), (double)(var7 - var4 - var9), (double)(var5 + var2 + var9), (double)(var6 + var3 + var9), (double)(var7 + var4 + var9));
+			f4 = 0.5F;
+		}
+
+		f2 /= 32.0F;
+		f3 /= 32.0F;
+		f4 /= 32.0F;
+		float f5 = (float)this.xPosition + 0.5F;
+		float f6 = (float)this.yPosition + 0.5F;
+		float f7 = (float)this.zPosition + 0.5F;
+		float f8 = 0.5625F;
+		if(direction == 0) {
+			f7 -= f8;
+		}
+
+		if(direction == 1) {
+			f5 -= f8;
+		}
+
+		if(direction == 2) {
+			f7 += f8;
+		}
+
+		if(direction == 3) {
+			f5 += f8;
+		}
+
+		if(direction == 0) {
+			f5 -= this.getArtSize(this.art.sizeX);
+		}
+
+		if(direction == 1) {
+			f7 += this.getArtSize(this.art.sizeX);
+		}
+
+		if(direction == 2) {
+			f5 += this.getArtSize(this.art.sizeX);
+		}
+
+		if(direction == 3) {
+			f7 -= this.getArtSize(this.art.sizeX);
+		}
+
+		f6 += this.getArtSize(this.art.sizeY);
+		this.setPosition((double)f5, (double)f6, (double)f7);
+		float f9 = -0.00625F;
+		this.boundingBox.setBounds((double)(f5 - f2 - f9), (double)(f6 - f3 - f9), (double)(f7 - f4 - f9), (double)(f5 + f2 + f9), (double)(f6 + f3 + f9), (double)(f7 + f4 + f9));
 	}
 
-	private float getArtSize(int var1) {
-		return var1 == 32 ? 0.5F : (var1 == 64 ? 0.5F : 0.0F);
+	private float getArtSize(int pixelSize) {
+		return pixelSize == 32 ? 0.5F : (pixelSize == 64 ? 0.5F : 0.0F);
 	}
 
 	public void onUpdate() {
@@ -118,49 +118,49 @@
 		if(this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox).size() > 0) {
 			return false;
 		} else {
-			int var1 = this.art.sizeX / 16;
-			int var2 = this.art.sizeY / 16;
-			int var3 = this.xPosition;
-			int var4 = this.yPosition;
-			int var5 = this.zPosition;
+			int i1 = this.art.sizeX / 16;
+			int i2 = this.art.sizeY / 16;
+			int i3 = this.xPosition;
+			int i4 = this.yPosition;
+			int i5 = this.zPosition;
 			if(this.direction == 0) {
-				var3 = MathHelper.floor_double(this.posX - (double)((float)this.art.sizeX / 32.0F));
+				i3 = MathHelper.floor_double(this.posX - (double)((float)this.art.sizeX / 32.0F));
 			}
 
 			if(this.direction == 1) {
-				var5 = MathHelper.floor_double(this.posZ - (double)((float)this.art.sizeX / 32.0F));
+				i5 = MathHelper.floor_double(this.posZ - (double)((float)this.art.sizeX / 32.0F));
 			}
 
 			if(this.direction == 2) {
-				var3 = MathHelper.floor_double(this.posX - (double)((float)this.art.sizeX / 32.0F));
+				i3 = MathHelper.floor_double(this.posX - (double)((float)this.art.sizeX / 32.0F));
 			}
 
 			if(this.direction == 3) {
-				var5 = MathHelper.floor_double(this.posZ - (double)((float)this.art.sizeX / 32.0F));
+				i5 = MathHelper.floor_double(this.posZ - (double)((float)this.art.sizeX / 32.0F));
 			}
 
-			var4 = MathHelper.floor_double(this.posY - (double)((float)this.art.sizeY / 32.0F));
+			i4 = MathHelper.floor_double(this.posY - (double)((float)this.art.sizeY / 32.0F));
 
-			int var7;
-			for(int var6 = 0; var6 < var1; ++var6) {
-				for(var7 = 0; var7 < var2; ++var7) {
-					Material var8;
+			int i6;
+			for(int i7 = 0; i7 < i1; ++i7) {
+				for(i6 = 0; i6 < i2; ++i6) {
+					Material material8;
 					if(this.direction != 0 && this.direction != 2) {
-						var8 = this.worldObj.getBlockMaterial(this.xPosition, var4 + var7, var5 + var6);
+						material8 = this.worldObj.getBlockMaterial(this.xPosition, i4 + i6, i5 + i7);
 					} else {
-						var8 = this.worldObj.getBlockMaterial(var3 + var6, var4 + var7, this.zPosition);
+						material8 = this.worldObj.getBlockMaterial(i3 + i7, i4 + i6, this.zPosition);
 					}
 
-					if(!var8.isSolid()) {
+					if(!material8.isSolid()) {
 						return false;
 					}
 				}
 			}
 
-			List var9 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox);
+			List list9 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox);
 
-			for(var7 = 0; var7 < var9.size(); ++var7) {
-				if(var9.get(var7) instanceof EntityPainting) {
+			for(i6 = 0; i6 < list9.size(); ++i6) {
+				if(list9.get(i6) instanceof EntityPainting) {
 					return false;
 				}
 			}
@@ -173,33 +173,33 @@
 		return true;
 	}
 
-	public boolean attackEntityFrom(Entity var1, int var2) {
+	public boolean attackEntityFrom(Entity entity, int damage) {
 		this.setEntityDead();
 		this.worldObj.spawnEntityInWorld(new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, new ItemStack(Item.painting)));
 		return true;
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setByte("Dir", (byte)this.direction);
-		var1.setString("Motive", this.art.title);
-		var1.setInteger("TileX", this.xPosition);
-		var1.setInteger("TileY", this.yPosition);
-		var1.setInteger("TileZ", this.zPosition);
+	public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+		nbttagcompound.setByte("Dir", (byte)this.direction);
+		nbttagcompound.setString("Motive", this.art.title);
+		nbttagcompound.setInteger("TileX", this.xPosition);
+		nbttagcompound.setInteger("TileY", this.yPosition);
+		nbttagcompound.setInteger("TileZ", this.zPosition);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.direction = var1.getByte("Dir");
-		this.xPosition = var1.getInteger("TileX");
-		this.yPosition = var1.getInteger("TileY");
-		this.zPosition = var1.getInteger("TileZ");
-		String var2 = var1.getString("Motive");
-		EnumArt[] var3 = EnumArt.values();
-		int var4 = var3.length;
+	public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+		this.direction = nbttagcompound.getByte("Dir");
+		this.xPosition = nbttagcompound.getInteger("TileX");
+		this.yPosition = nbttagcompound.getInteger("TileY");
+		this.zPosition = nbttagcompound.getInteger("TileZ");
+		String string2 = nbttagcompound.getString("Motive");
+		EnumArt[] enumArt3 = EnumArt.func_8089_4U0CrFc9svgwX0nmFIeeM4Z1eq1xQFlIlv4Hvh3I8vOCR2B4w8od8Uou0cFZ();
+		int i4 = enumArt3.length;
 
-		for(int var5 = 0; var5 < var4; ++var5) {
-			EnumArt var6 = var3[var5];
-			if(var6.title.equals(var2)) {
-				this.art = var6;
+		for(int i5 = 0; i5 < i4; ++i5) {
+			EnumArt enumArt6 = enumArt3[i5];
+			if(enumArt6.title.equals(string2)) {
+				this.art = enumArt6;
 			}
 		}
 
--- net/minecraft/src/EntityTrackerEntry.java
+++ net/minecraft/src/EntityTrackerEntry.java
@@ -22,29 +22,29 @@
 	public boolean playerEntitiesUpdated = false;
 	public Set trackedPlayers = new HashSet();
 
-	public EntityTrackerEntry(Entity var1, int var2, int var3) {
-		this.trackedEntity = var1;
-		this.trackingDistanceThreshold = var2;
-		this.updateFrequency = var3;
-		this.encodedPosX = MathHelper.floor_double(var1.posX * 32.0D);
-		this.encodedPosY = MathHelper.floor_double(var1.posY * 32.0D);
-		this.encodedPosZ = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.encodedRotationYaw = MathHelper.floor_float(var1.rotationYaw * 256.0F / 360.0F);
-		this.encodedRotationPitch = MathHelper.floor_float(var1.rotationPitch * 256.0F / 360.0F);
+	public EntityTrackerEntry(Entity hx, int integer2, int integer3) {
+		this.trackedEntity = hx;
+		this.trackingDistanceThreshold = integer2;
+		this.updateFrequency = integer3;
+		this.encodedPosX = MathHelper.floor_double(hx.posX * 32.0D);
+		this.encodedPosY = MathHelper.floor_double(hx.posY * 32.0D);
+		this.encodedPosZ = MathHelper.floor_double(hx.posZ * 32.0D);
+		this.encodedRotationYaw = MathHelper.floor_float(hx.rotationYaw * 256.0F / 360.0F);
+		this.encodedRotationPitch = MathHelper.floor_float(hx.rotationPitch * 256.0F / 360.0F);
 	}
 
-	public boolean equals(Object var1) {
-		return var1 instanceof EntityTrackerEntry ? ((EntityTrackerEntry)var1).trackedEntity.entityID == this.trackedEntity.entityID : false;
+	public boolean equals(Object object) {
+		return object instanceof EntityTrackerEntry ? ((EntityTrackerEntry)object).trackedEntity.entityID == this.trackedEntity.entityID : false;
 	}
 
 	public int hashCode() {
 		return this.trackedEntity.entityID;
 	}
 
-	public void updatePlayerList(List var1) {
+	public void updatePlayerList(List list) {
 		this.playerEntitiesUpdated = false;
 		if(!this.firstUpdateDone || this.trackedEntity.getDistanceSq(this.lastTrackedEntityPosX, this.lastTrackedEntityPosY, this.lastTrackedEntityPosZ) > 16.0D) {
-			this.updatePlayerEntities(var1);
+			this.updatePlayerEntities(list);
 			this.lastTrackedEntityPosX = this.trackedEntity.posX;
 			this.lastTrackedEntityPosY = this.trackedEntity.posY;
 			this.lastTrackedEntityPosZ = this.trackedEntity.posZ;
@@ -53,50 +53,50 @@
 		}
 
 		if(this.updateCounter++ % this.updateFrequency == 0) {
-			int var2 = MathHelper.floor_double(this.trackedEntity.posX * 32.0D);
-			int var3 = MathHelper.floor_double(this.trackedEntity.posY * 32.0D);
-			int var4 = MathHelper.floor_double(this.trackedEntity.posZ * 32.0D);
-			int var5 = MathHelper.floor_float(this.trackedEntity.rotationYaw * 256.0F / 360.0F);
-			int var6 = MathHelper.floor_float(this.trackedEntity.rotationPitch * 256.0F / 360.0F);
-			boolean var7 = var2 != this.encodedPosX || var3 != this.encodedPosY || var4 != this.encodedPosZ;
-			boolean var8 = var5 != this.encodedRotationYaw || var6 != this.encodedRotationPitch;
-			int var9 = var2 - this.encodedPosX;
-			int var10 = var3 - this.encodedPosY;
-			int var11 = var4 - this.encodedPosZ;
-			Object var12 = null;
-			if(var9 >= -128 && var9 < 128 && var10 >= -128 && var10 < 128 && var11 >= -128 && var11 < 128) {
-				if(var7 && var8) {
-					var12 = new Packet33RelEntityMoveLook(this.trackedEntity.entityID, (byte)var9, (byte)var10, (byte)var11, (byte)var5, (byte)var6);
-				} else if(var7) {
-					var12 = new Packet31RelEntityMove(this.trackedEntity.entityID, (byte)var9, (byte)var10, (byte)var11);
-				} else if(var8) {
-					var12 = new Packet32EntityLook(this.trackedEntity.entityID, (byte)var5, (byte)var6);
+			int i2 = MathHelper.floor_double(this.trackedEntity.posX * 32.0D);
+			int i3 = MathHelper.floor_double(this.trackedEntity.posY * 32.0D);
+			int i4 = MathHelper.floor_double(this.trackedEntity.posZ * 32.0D);
+			int i5 = MathHelper.floor_float(this.trackedEntity.rotationYaw * 256.0F / 360.0F);
+			int i6 = MathHelper.floor_float(this.trackedEntity.rotationPitch * 256.0F / 360.0F);
+			boolean z7 = i2 != this.encodedPosX || i3 != this.encodedPosY || i4 != this.encodedPosZ;
+			boolean z8 = i5 != this.encodedRotationYaw || i6 != this.encodedRotationPitch;
+			int i9 = i2 - this.encodedPosX;
+			int i10 = i3 - this.encodedPosY;
+			int i11 = i4 - this.encodedPosZ;
+			Object object12 = null;
+			if(i9 >= -128 && i9 < 128 && i10 >= -128 && i10 < 128 && i11 >= -128 && i11 < 128) {
+				if(z7 && z8) {
+					object12 = new Packet33RelEntityMoveLook(this.trackedEntity.entityID, (byte)i9, (byte)i10, (byte)i11, (byte)i5, (byte)i6);
+				} else if(z7) {
+					object12 = new Packet31RelEntityMove(this.trackedEntity.entityID, (byte)i9, (byte)i10, (byte)i11);
+				} else if(z8) {
+					object12 = new Packet32EntityLook(this.trackedEntity.entityID, (byte)i5, (byte)i6);
 				} else {
-					var12 = new Packet30Entity(this.trackedEntity.entityID);
+					object12 = new Packet30Entity(this.trackedEntity.entityID);
 				}
 			} else {
-				var12 = new Packet34EntityTeleport(this.trackedEntity.entityID, var2, var3, var4, (byte)var5, (byte)var6);
-			}
-
-			if(var12 != null) {
-				this.sendPacketToTrackedPlayers((Packet)var12);
-			}
-
-			this.encodedPosX = var2;
-			this.encodedPosY = var3;
-			this.encodedPosZ = var4;
-			this.encodedRotationYaw = var5;
-			this.encodedRotationPitch = var6;
+				object12 = new Packet34EntityTeleport(this.trackedEntity.entityID, i2, i3, i4, (byte)i5, (byte)i6);
+			}
+
+			if(object12 != null) {
+				this.sendPacketToTrackedPlayers((Packet)object12);
+			}
+
+			this.encodedPosX = i2;
+			this.encodedPosY = i3;
+			this.encodedPosZ = i4;
+			this.encodedRotationYaw = i5;
+			this.encodedRotationPitch = i6;
 		}
 
 	}
 
-	public void sendPacketToTrackedPlayers(Packet var1) {
-		Iterator var2 = this.trackedPlayers.iterator();
+	public void sendPacketToTrackedPlayers(Packet mv) {
+		Iterator iterator2 = this.trackedPlayers.iterator();
 
-		while(var2.hasNext()) {
-			EntityPlayerMP var3 = (EntityPlayerMP)var2.next();
-			var3.playerNetServerHandler.sendPacket(var1);
+		while(iterator2.hasNext()) {
+			EntityPlayerMP entityPlayerMP3 = (EntityPlayerMP)iterator2.next();
+			entityPlayerMP3.playerNetServerHandler.sendPacket(mv);
 		}
 
 	}
@@ -105,66 +105,65 @@
 		this.sendPacketToTrackedPlayers(new Packet29DestroyEntity(this.trackedEntity.entityID));
 	}
 
-	public void updatePlayerEntity(EntityPlayerMP var1) {
-		if(var1 != this.trackedEntity) {
-			double var2 = var1.posX - (double)(this.encodedPosX / 32);
-			double var4 = var1.posZ - (double)(this.encodedPosZ / 32);
-			if(var2 >= (double)(-this.trackingDistanceThreshold) && var2 <= (double)this.trackingDistanceThreshold && var4 >= (double)(-this.trackingDistanceThreshold) && var4 <= (double)this.trackingDistanceThreshold) {
-				if(!this.trackedPlayers.contains(var1)) {
-					this.trackedPlayers.add(var1);
-					var1.playerNetServerHandler.sendPacket(this.getSpawnPacket());
+	public void updatePlayerEntity(EntityPlayerMP kv) {
+		if(kv != this.trackedEntity) {
+			double d2 = kv.posX - (double)(this.encodedPosX / 32);
+			double d4 = kv.posZ - (double)(this.encodedPosZ / 32);
+			if(d2 >= (double)(-this.trackingDistanceThreshold) && d2 <= (double)this.trackingDistanceThreshold && d4 >= (double)(-this.trackingDistanceThreshold) && d4 <= (double)this.trackingDistanceThreshold) {
+				if(!this.trackedPlayers.contains(kv)) {
+					this.trackedPlayers.add(kv);
+					Packet packet6 = this.getSpawnPacket();
+					if(packet6 != null) {
+						kv.playerNetServerHandler.sendPacket(packet6);
+					}
 				}
-			} else if(this.trackedPlayers.contains(var1)) {
-				this.trackedPlayers.remove(var1);
-				var1.playerNetServerHandler.sendPacket(new Packet29DestroyEntity(this.trackedEntity.entityID));
+			} else if(this.trackedPlayers.contains(kv)) {
+				this.trackedPlayers.remove(kv);
+				kv.playerNetServerHandler.sendPacket(new Packet29DestroyEntity(this.trackedEntity.entityID));
 			}
-
 		}
+
 	}
 
-	public void updatePlayerEntities(List var1) {
-		for(int var2 = 0; var2 < var1.size(); ++var2) {
-			this.updatePlayerEntity((EntityPlayerMP)var1.get(var2));
+	public void updatePlayerEntities(List list) {
+		for(int i2 = 0; i2 < list.size(); ++i2) {
+			if(list.get(i2) instanceof EntityPlayerMP) {
+				this.updatePlayerEntity((EntityPlayerMP)list.get(i2));
+			}
 		}
 
 	}
 
 	private Packet getSpawnPacket() {
 		if(this.trackedEntity instanceof EntityItem) {
-			EntityItem var3 = (EntityItem)this.trackedEntity;
-			Packet21PickupSpawn var2 = new Packet21PickupSpawn(var3);
-			var3.posX = (double)var2.xPosition / 32.0D;
-			var3.posY = (double)var2.yPosition / 32.0D;
-			var3.posZ = (double)var2.zPosition / 32.0D;
-			var3.motionX = (double)var2.rotation / 128.0D;
-			var3.motionY = (double)var2.pitch / 128.0D;
-			var3.motionZ = (double)var2.roll / 128.0D;
-			return var2;
+			EntityItem entityItem3 = (EntityItem)this.trackedEntity;
+			Packet21PickupSpawn packet21PickupSpawn2 = new Packet21PickupSpawn(entityItem3);
+			entityItem3.posX = (double)packet21PickupSpawn2.xPosition / 32.0D;
+			entityItem3.posY = (double)packet21PickupSpawn2.yPosition / 32.0D;
+			entityItem3.posZ = (double)packet21PickupSpawn2.zPosition / 32.0D;
+			entityItem3.motionX = (double)packet21PickupSpawn2.rotation / 128.0D;
+			entityItem3.motionY = (double)packet21PickupSpawn2.pitch / 128.0D;
+			entityItem3.motionZ = (double)packet21PickupSpawn2.roll / 128.0D;
+			return packet21PickupSpawn2;
 		} else if(this.trackedEntity instanceof EntityPlayerMP) {
 			return new Packet20NamedEntitySpawn((EntityPlayer)this.trackedEntity);
 		} else {
 			if(this.trackedEntity instanceof EntityMinecart) {
-				EntityMinecart var1 = (EntityMinecart)this.trackedEntity;
-				if(var1.minecartType == 0) {
+				EntityMinecart entityMinecart1 = (EntityMinecart)this.trackedEntity;
+				if(entityMinecart1.minecartType == 0) {
 					return new Packet23VehicleSpawn(this.trackedEntity, 10);
 				}
 
-				if(var1.minecartType == 1) {
+				if(entityMinecart1.minecartType == 1) {
 					return new Packet23VehicleSpawn(this.trackedEntity, 11);
 				}
 
-				if(var1.minecartType == 2) {
+				if(entityMinecart1.minecartType == 2) {
 					return new Packet23VehicleSpawn(this.trackedEntity, 12);
 				}
 			}
 
-			if(this.trackedEntity instanceof EntityBoat) {
-				return new Packet23VehicleSpawn(this.trackedEntity, 1);
-			} else if(this.trackedEntity instanceof IAnimals) {
-				return new Packet24MobSpawn((EntityLiving)this.trackedEntity);
-			} else {
-				throw new IllegalArgumentException("Don\'t know how to add " + this.trackedEntity.getClass() + "!");
-			}
+			return (Packet)(this.trackedEntity instanceof EntityBoat ? new Packet23VehicleSpawn(this.trackedEntity, 1) : (this.trackedEntity instanceof EntityAnimal ? new Packet24MobSpawn((EntityLiving)this.trackedEntity) : null));
 		}
 	}
 }
--- /dev/null
+++ net/minecraft/src/GenStonePlatform.java
@@ -1,0 +1,54 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class GenStonePlatform extends WorldGenerator {
+	public void buildSphere(World cv, int integer2, int integer3, int integer4, int integer5, int integer6) {
+		byte b7 = 2;
+
+		for(int i8 = -integer5; i8 <= integer5; ++i8) {
+			for(int i9 = -b7; i9 <= b7; ++i9) {
+				for(int i10 = -integer6; i10 <= integer6; ++i10) {
+					if(i8 * i8 + i9 * i9 + i10 * i10 <= integer5 * integer5 && (cv.getBlockId(integer2 + i8, integer3 + i9, integer4 + i10) == Block.waterMoving.blockID || cv.getBlockId(integer2 + i8, integer3 + i9, integer4 + i10) == Block.waterStill.blockID)) {
+						cv.setBlock(integer2 + i8, integer3 + i9, integer4 + i10, ExtBlocks.Limestone.blockID);
+					}
+				}
+			}
+		}
+
+	}
+
+	public static boolean isChunkWaterOnly(World cv, int integer2, int integer3) {
+		for(int i3 = 0; i3 != 16; ++i3) {
+			for(int i4 = 0; i4 != 16; ++i4) {
+				if(cv.getBlockId(integer2 + i3, 63, integer3 + i4) != Block.waterStill.blockID || cv.getBlockId(integer2 + i3, 62, integer3 + i4) != Block.waterStill.blockID) {
+					return false;
+				}
+			}
+		}
+
+		return true;
+	}
+
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		if(y >= 62 && y <= 64) {
+			for(int i6 = 0; i6 < 2; ++i6) {
+				int i7 = z + rand.nextInt(8) - rand.nextInt(8);
+				int i8 = y + rand.nextInt(4) - rand.nextInt(4);
+				int i9 = x + rand.nextInt(8) - rand.nextInt(8);
+				if(world.getBlockId(i9, i8, i7) == Block.waterStill.blockID) {
+					for(int i10 = i8; (world.getBlockId(i7, i10, i9) == Block.waterStill.blockID || world.getBlockId(i7, i10, i9) == Block.waterMoving.blockID) && i10 > 10; --i10) {
+						world.setBlock(i9, i10, i7, ExtBlocks.Limestone.blockID);
+					}
+
+					boolean z11 = rand.nextInt(100) <= 50;
+					this.buildSphere(world, i9, i8, i7, 2 + rand.nextInt(z11 ? 6 : 2), 2 + rand.nextInt(!z11 ? 6 : 2));
+				}
+			}
+
+			return true;
+		} else {
+			return false;
+		}
+	}
+}
--- net/minecraft/src/BlockMushroom.java
+++ net/minecraft/src/BlockMushroom.java
@@ -1,17 +1,17 @@
 package net.minecraft.src;
 
 public class BlockMushroom extends BlockFlower {
-	protected BlockMushroom(int var1, int var2) {
-		super(var1, var2);
-		float var3 = 0.2F;
-		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var3 * 2.0F, 0.5F + var3);
-	}
-
-	protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-		return Block.opaqueCubeLookup[var1];
-	}
-
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-		return var1.getBlockLightValue(var2, var3, var4) <= 13 && this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
+	protected BlockMushroom(int id, int blockIndex) {
+		super(id, blockIndex);
+		float f3 = 0.2F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, f3 * 2.0F, 0.5F + f3);
+	}
+
+	protected boolean canThisPlantGrowOnThisBlockID(int id) {
+		return Block.opaqueCubeLookup[id];
+	}
+
+	public boolean canBlockStay(World world, int x, int y, int z) {
+		return world.getBlockLightValue(x, y, z) <= 13 && this.canThisPlantGrowOnThisBlockID(world.getBlockId(x, y - 1, z));
 	}
 }
--- net/minecraft/src/BlockFarmland.java
+++ net/minecraft/src/BlockFarmland.java
@@ -3,51 +3,51 @@
 import java.util.Random;
 
 public class BlockFarmland extends Block {
-	protected BlockFarmland(int var1) {
-		super(var1, Material.grass);
+	protected BlockFarmland(int id) {
+		super(id, Material.grass);
 		this.blockIndexInTexture = 87;
 		this.setTickOnLoad(true);
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 15.0F / 16.0F, 1.0F);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.9375F, 1.0F);
 		this.setLightOpacity(255);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		return AxisAlignedBB.getBoundingBoxFromPool((double)(var2 + 0), (double)(var3 + 0), (double)(var4 + 0), (double)(var2 + 1), (double)(var3 + 1), (double)(var4 + 1));
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		return AxisAlignedBB.getBoundingBoxFromPool((double)(x + 0), (double)(y + 0), (double)(z + 0), (double)(x + 1), (double)(y + 1), (double)(z + 1));
 	}
 
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var5.nextInt(5) == 0) {
-			if(this.isWaterNearby(var1, var2, var3, var4)) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, 7);
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(random.nextInt(5) == 0) {
+			if(this.isWaterNearby(world, x, y, z)) {
+				world.setBlockMetadataWithNotify(x, y, z, 7);
 			} else {
-				int var6 = var1.getBlockMetadata(var2, var3, var4);
-				if(var6 > 0) {
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var6 - 1);
-				} else if(!this.isCropsNearby(var1, var2, var3, var4)) {
-					var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
+				int i6 = world.getBlockMetadata(x, y, z);
+				if(i6 > 0) {
+					world.setBlockMetadataWithNotify(x, y, z, i6 - 1);
+				} else if(!this.isCropsNearby(world, x, y, z)) {
+					world.setBlockWithNotify(x, y, z, Block.dirt.blockID);
 				}
 			}
 		}
 
 	}
 
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-		if(var1.rand.nextInt(4) == 0) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
+	public void onEntityWalking(World world, int x, int y, int z, Entity entity) {
+		if(world.rand.nextInt(4) == 0) {
+			world.setBlockWithNotify(x, y, z, Block.dirt.blockID);
 		}
 
 	}
 
-	private boolean isCropsNearby(World var1, int var2, int var3, int var4) {
-		byte var5 = 0;
+	private boolean isCropsNearby(World world, int x, int y, int z) {
+		byte b5 = 0;
 
-		for(int var6 = var2 - var5; var6 <= var2 + var5; ++var6) {
-			for(int var7 = var4 - var5; var7 <= var4 + var5; ++var7) {
-				if(var1.getBlockId(var6, var3 + 1, var7) == Block.crops.blockID) {
+		for(int i6 = x - b5; i6 <= x + b5; ++i6) {
+			for(int i7 = z - b5; i7 <= z + b5; ++i7) {
+				if(world.getBlockId(i6, y + 1, i7) == Block.crops.blockID) {
 					return true;
 				}
 			}
@@ -56,11 +56,11 @@
 		return false;
 	}
 
-	private boolean isWaterNearby(World var1, int var2, int var3, int var4) {
-		for(int var5 = var2 - 4; var5 <= var2 + 4; ++var5) {
-			for(int var6 = var3; var6 <= var3 + 1; ++var6) {
-				for(int var7 = var4 - 4; var7 <= var4 + 4; ++var7) {
-					if(var1.getBlockMaterial(var5, var6, var7) == Material.water) {
+	private boolean isWaterNearby(World world, int x, int y, int z) {
+		for(int i5 = x - 4; i5 <= x + 4; ++i5) {
+			for(int i6 = y; i6 <= y + 1; ++i6) {
+				for(int i7 = z - 4; i7 <= z + 4; ++i7) {
+					if(world.getBlockMaterial(i5, i6, i7) == Material.water) {
 						return true;
 					}
 				}
@@ -70,16 +70,16 @@
 		return false;
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		Material var6 = var1.getBlockMaterial(var2, var3 + 1, var4);
-		if(var6.isSolid()) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		super.onNeighborBlockChange(world, x, y, z, flag);
+		Material material6 = world.getBlockMaterial(x, y + 1, z);
+		if(material6.isSolid()) {
+			world.setBlockWithNotify(x, y, z, Block.dirt.blockID);
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
-		return Block.dirt.idDropped(0, var2);
+	public int idDropped(int count, Random random) {
+		return Block.dirt.idDropped(0, random);
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenHouseSmallUnknownClass.java
@@ -1,0 +1,98 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Random;
+
+public class WorldGenHouseSmallUnknownClass {
+	public static final int field_8026_8d2lLtfkFyz39PPPRx2P5X8j7mUVezi5Z7D26Cm3S9DKv04jPLP34h2o4a3O = 30;
+	private final WorldGenHouseSmallUnknownClass2 field_8025_1AB1jhtV2UoKcyDiulLlb6608Syg20hb8Eh01R0tBrT5xsgBmloygh8450wV;
+	private final List field_8024_3XfqRXiIhVO6Zn1ixCN16oXaxse30CqIKrdMm50QB8p72QffL7X4JJGFEkhn;
+
+	public static int func_8021_9hcUf1GjYFE1n5h3C7d8SBi5q87cLRLfP557HX30ui129KXy0HvQUt5q2d9h(int integer) {
+		return integer >= 0 ? integer * 16 : integer * 16 + 1;
+	}
+
+	public static boolean func_8022_15MX9kjWH3ipxdHdEowh7oQEbvfI8y92M5CDCXn03Q264Vkw0R6a96O7Ot49(int integer1, int integer2, int integer3, int integer4) {
+		int i4 = func_8021_9hcUf1GjYFE1n5h3C7d8SBi5q87cLRLfP557HX30ui129KXy0HvQUt5q2d9h(integer1);
+		int i5 = func_8021_9hcUf1GjYFE1n5h3C7d8SBi5q87cLRLfP557HX30ui129KXy0HvQUt5q2d9h(integer2);
+		return integer3 <= i4 && integer4 <= i5 && integer3 > i4 - 16 && integer4 > i5 - 16;
+	}
+
+	public WorldGenHouseSmallUnknownClass(Random random, WorldGenHouseSmallUnknownClass2 hc) {
+		long j3 = System.currentTimeMillis();
+		this.field_8024_3XfqRXiIhVO6Zn1ixCN16oXaxse30CqIKrdMm50QB8p72QffL7X4JJGFEkhn = new ArrayList();
+		this.field_8025_1AB1jhtV2UoKcyDiulLlb6608Syg20hb8Eh01R0tBrT5xsgBmloygh8450wV = hc;
+		int[] i5 = new int[900];
+		Arrays.fill(i5, 0);
+		int i6 = 0;
+
+		boolean z7;
+		do {
+			z7 = false;
+
+			for(int i8 = 0; i8 < i5.length; ++i8) {
+				if(i5[i8] == 0) {
+					int i9 = i8 % 30;
+					int i10 = i8 / 30;
+					WorldGenHouseSmallUnknownClass2 worldGenHouseSmallUnknownClass211 = (new WorldGenHouseSmallUnknownClass2(func_8021_9hcUf1GjYFE1n5h3C7d8SBi5q87cLRLfP557HX30ui129KXy0HvQUt5q2d9h(hc.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79), func_8021_9hcUf1GjYFE1n5h3C7d8SBi5q87cLRLfP557HX30ui129KXy0HvQUt5q2d9h(hc.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr))).func_8070_6h5SgVf4d2b0P7V64CX9XppbjHD2KCR03VLMdMVOPuKOUJCgZ0nxH8Q0G8kR((i9 - 15) * 14, (i10 - 15) * 14);
+					WorldGenHouseSmallUnknownClass4 worldGenHouseSmallUnknownClass412 = WorldGenHouseSmallUnknownClass4.func_7954_390S8WUEjsUlIk53OF5y7FPChO1pX5dMinddEJMgNJu4ve1K5ZV6OCt2g5T5(random, worldGenHouseSmallUnknownClass211);
+					WorldGenHouseSmallUnknownClass2 worldGenHouseSmallUnknownClass213 = worldGenHouseSmallUnknownClass412.func_7951_6155zZR8t2Cbq0I65w3T2P9frJ393hs90A6vhvVPoxH61BPyWNHJn7M4bf16();
+					boolean z14 = true;
+
+					int i15;
+					int i16;
+					label65:
+					for(i15 = 0; i15 < worldGenHouseSmallUnknownClass213.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79; ++i15) {
+						for(i16 = 0; i16 < worldGenHouseSmallUnknownClass213.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr; ++i16) {
+							if(i9 + i15 >= 30 || i10 + i16 >= 30 || i5[i9 + i15 + (i10 + i16) * 30] != 0) {
+								z14 = false;
+								break label65;
+							}
+						}
+					}
+
+					if(!z14) {
+						z7 = true;
+					} else {
+						++i6;
+						this.field_8024_3XfqRXiIhVO6Zn1ixCN16oXaxse30CqIKrdMm50QB8p72QffL7X4JJGFEkhn.add(worldGenHouseSmallUnknownClass412);
+
+						for(i15 = 0; i15 < worldGenHouseSmallUnknownClass213.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79; ++i15) {
+							for(i16 = 0; i16 < worldGenHouseSmallUnknownClass213.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr; ++i16) {
+								i5[i9 + i15 + (i10 + i16) * 30] = i6;
+							}
+						}
+					}
+				}
+			}
+		} while(z7);
+
+	}
+
+	public void func_8023_560wZaREu6n7E4b4FqPW1aurTbd0EH8Cg8jkemWoRmA0jU1hNDeix6f1XFmP(World cv, int integer2, int integer3) {
+		ArrayList arrayList4 = new ArrayList();
+		Iterator iterator5 = this.field_8024_3XfqRXiIhVO6Zn1ixCN16oXaxse30CqIKrdMm50QB8p72QffL7X4JJGFEkhn.iterator();
+
+		WorldGenHouseSmallUnknownClass4 worldGenHouseSmallUnknownClass46;
+		while(iterator5.hasNext()) {
+			worldGenHouseSmallUnknownClass46 = (WorldGenHouseSmallUnknownClass4)iterator5.next();
+			WorldGenHouseSmallUnknownClass2 worldGenHouseSmallUnknownClass27 = worldGenHouseSmallUnknownClass46.func_7953_2R38M2O6566x2pen53vJb71a4871DZeTgLLz2piGfBjTn4JTalO4b0mdIdRI();
+			int i8 = worldGenHouseSmallUnknownClass27.field_8073_1D8m5U4GB4arPZ7684Hb9CP8F458GRgW52CH7KZ90VYC8IWzRz99xA26eD79 - func_8021_9hcUf1GjYFE1n5h3C7d8SBi5q87cLRLfP557HX30ui129KXy0HvQUt5q2d9h(integer2);
+			int i9 = worldGenHouseSmallUnknownClass27.field_8072_32JU2hh89MNsO4JlDTayzXSS4478EYm4xoxn215WA3dTx34UhYR5myk8cpzr - func_8021_9hcUf1GjYFE1n5h3C7d8SBi5q87cLRLfP557HX30ui129KXy0HvQUt5q2d9h(integer3);
+			if(i8 <= 0 && i9 <= 0 && i8 >= -29 && i9 >= -29 && worldGenHouseSmallUnknownClass46.func_7952_7Xu3W9Y012Z47lG36iry0n5a339b3Up3MYVi24623ZUogs6SE9LV8t5Xy0cd(cv, integer2, integer3)) {
+				arrayList4.add(worldGenHouseSmallUnknownClass46);
+			}
+		}
+
+		iterator5 = arrayList4.iterator();
+
+		while(iterator5.hasNext()) {
+			worldGenHouseSmallUnknownClass46 = (WorldGenHouseSmallUnknownClass4)iterator5.next();
+			this.field_8024_3XfqRXiIhVO6Zn1ixCN16oXaxse30CqIKrdMm50QB8p72QffL7X4JJGFEkhn.remove(worldGenHouseSmallUnknownClass46);
+		}
+
+	}
+}
--- net/minecraft/server/MinecraftServer.java
+++ net/minecraft/server/MinecraftServer.java
@@ -11,6 +11,7 @@
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
 import net.minecraft.src.AxisAlignedBB;
 import net.minecraft.src.ConsoleLogManager;
 import net.minecraft.src.EntityPlayerMP;
@@ -23,6 +24,8 @@
 import net.minecraft.src.NetworkListenThread;
 import net.minecraft.src.Packet3Chat;
 import net.minecraft.src.Packet4UpdateTime;
+import net.minecraft.src.Packet70PlayGlobalMusic;
+import net.minecraft.src.Packet72;
 import net.minecraft.src.PropertyManager;
 import net.minecraft.src.ServerCommand;
 import net.minecraft.src.ServerConfigurationManager;
@@ -31,6 +34,7 @@
 import net.minecraft.src.ThreadServerApplication;
 import net.minecraft.src.ThreadSleepForeverServer;
 import net.minecraft.src.Vec3D;
+import net.minecraft.src.WorldGenMyconUnknownClass;
 import net.minecraft.src.WorldManager;
 import net.minecraft.src.WorldServer;
 
@@ -50,17 +54,18 @@
 	private List commands = Collections.synchronizedList(new ArrayList());
 	public EntityTracker entityTracker;
 	public boolean onlineMode;
+	public static MinecraftServer field_6098_47T69Px11B2sK2WzDkgABw58BK6Bs11QIk6TmoU8Y89Fs8WTSdr6zO59qDz1;
 
 	public MinecraftServer() {
 		new ThreadSleepForeverServer(this);
 	}
 
 	private boolean startServer() throws IOException {
-		ThreadCommandReader var1 = new ThreadCommandReader(this);
-		var1.setDaemon(true);
-		var1.start();
+		ThreadCommandReader threadCommandReader1 = new ThreadCommandReader(this);
+		threadCommandReader1.setDaemon(true);
+		threadCommandReader1.start();
 		ConsoleLogManager.init();
-		logger.info("Starting minecraft server version 0.2.1");
+		logger.info("Starting minecraft server version 0.2.1-16.05-R4");
 		if(Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
 			logger.warning("**** NOT ENOUGH RAM!");
 			logger.warning("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
@@ -68,21 +73,21 @@
 
 		logger.info("Loading properties");
 		this.propertyManagerObj = new PropertyManager(new File("server.properties"));
-		String var2 = this.propertyManagerObj.getStringProperty("server-ip", "");
-		this.onlineMode = this.propertyManagerObj.getBooleanProperty("online-mode", true);
-		InetAddress var3 = null;
-		if(var2.length() > 0) {
-			var3 = InetAddress.getByName(var2);
+		String string2 = this.propertyManagerObj.getStringProperty("server-ip", "");
+		this.onlineMode = this.propertyManagerObj.getBooleanProperty("online-mode", false);
+		InetAddress inetAddress3 = null;
+		if(string2.length() > 0) {
+			inetAddress3 = InetAddress.getByName(string2);
 		}
 
-		int var4 = this.propertyManagerObj.getIntProperty("server-port", 25565);
-		logger.info("Starting Minecraft server on " + (var2.length() == 0 ? "*" : var2) + ":" + var4);
+		int i4 = this.propertyManagerObj.getIntProperty("server-port", 25565);
+		logger.info("Starting Minecraft server on " + (string2.length() == 0 ? "*" : string2) + ":" + i4);
 
 		try {
-			this.networkServer = new NetworkListenThread(this, var3, var4);
-		} catch (IOException var6) {
+			this.networkServer = new NetworkListenThread(this, inetAddress3, i4);
+		} catch (IOException iOException6) {
 			logger.warning("**** FAILED TO BIND TO PORT!");
-			logger.log(Level.WARNING, "The exception was: " + var6.toString());
+			logger.log(Level.WARNING, "The exception was: " + iOException6.toString());
 			logger.warning("Perhaps a server is already running on that port?");
 			return false;
 		}
@@ -94,42 +99,43 @@
 			logger.warning("To change this, set \"online-mode\" to \"true\" in the server.settings file.");
 		}
 
+		WorldGenMyconUnknownClass.func_6104_44K26W59q4v74lhIsoUv4V87rs4U03so6Z4wQ0Coy41en87E4nn2743n5PU1();
 		this.configManager = new ServerConfigurationManager(this);
 		this.entityTracker = new EntityTracker(this);
-		String var5 = this.propertyManagerObj.getStringProperty("level-name", "world");
-		logger.info("Preparing level \"" + var5 + "\"");
-		this.initWorld(var5);
+		String string5 = this.propertyManagerObj.getStringProperty("level-name", "world");
+		logger.info("Preparing level \"" + string5 + "\"");
+		this.initWorld(string5);
 		logger.info("Done! For help, type \"help\" or \"?\"");
 		return true;
 	}
 
-	private void initWorld(String var1) {
+	private void initWorld(String worldName) {
 		logger.info("Preparing start region");
-		this.worldMngr = new WorldServer(new File("."), var1, this.propertyManagerObj.getBooleanProperty("monsters", false));
+		this.worldMngr = new WorldServer(new File("."), worldName, this.propertyManagerObj.getBooleanProperty("monsters", false));
 		this.worldMngr.addWorldAccess(new WorldManager(this));
 		this.worldMngr.difficultySetting = 1;
 		this.configManager.setPlayerManager(this.worldMngr);
-		byte var2 = 10;
-
-		for(int var3 = -var2; var3 <= var2; ++var3) {
-			this.outputPercentRemaining("Preparing spawn area", (var3 + var2) * 100 / (var2 + var2 + 1));
-
-			for(int var4 = -var2; var4 <= var2; ++var4) {
+		byte b2 = 10;
+
+		for(int i3 = -b2; i3 <= b2; ++i3) {
+			this.outputPercentRemaining("Preparing spawn area", (i3 + b2) * 100 / (b2 + b2 + 1));
+
+			for(int i4 = -b2; i4 <= b2; ++i4) {
 				if(!this.serverRunning) {
 					return;
 				}
 
-				this.worldMngr.chunkProviderServer.loadChunk((this.worldMngr.spawnX >> 4) + var3, (this.worldMngr.spawnZ >> 4) + var4);
+				this.worldMngr.chunkProviderServer.loadChunk((this.worldMngr.spawnX >> 4) + i3, (this.worldMngr.spawnZ >> 4) + i4);
 			}
 		}
 
 		this.clearCurrentTask();
 	}
 
-	private void outputPercentRemaining(String var1, int var2) {
-		this.currentTask = var1;
-		this.percentDone = var2;
-		System.out.println(var1 + ": " + var2 + "%");
+	private void outputPercentRemaining(String currentTask, int percent) {
+		this.currentTask = currentTask;
+		this.percentDone = percent;
+		System.out.println(currentTask + ": " + percent + "%");
 	}
 
 	private void clearCurrentTask() {
@@ -143,6 +149,8 @@
 	}
 
 	private void stop() {
+		logger.info("Stop from");
+		(new Exception()).printStackTrace();
 		logger.info("Stopping server");
 		if(this.configManager != null) {
 			this.configManager.savePlayerStates();
@@ -160,28 +168,29 @@
 
 	public void run() {
 		try {
+			this.serverRunning = true;
 			if(this.startServer()) {
-				long var1 = System.currentTimeMillis();
-				long var3 = 0L;
+				long j1 = System.currentTimeMillis();
+				long j3 = 0L;
 
 				while(this.serverRunning) {
-					long var5 = System.currentTimeMillis();
-					long var7 = var5 - var1;
-					if(var7 > 2000L) {
+					long j5 = System.currentTimeMillis();
+					long j7 = j5 - j1;
+					if(j7 > 2000L) {
 						logger.warning("Can\'t keep up! Did the system time change, or is the server overloaded?");
-						var7 = 2000L;
+						j7 = 2000L;
 					}
 
-					if(var7 < 0L) {
+					if(j7 < 0L) {
 						logger.warning("Time ran backwards! Did the system time change?");
-						var7 = 0L;
+						j7 = 0L;
 					}
 
-					var3 += var7;
-					var1 = var5;
+					j3 += j7;
+					j1 = j5;
 
-					while(var3 > 50L) {
-						var3 -= 50L;
+					while(j3 > 50L) {
+						j3 -= 50L;
 						this.doTick();
 					}
 
@@ -193,49 +202,49 @@
 
 					try {
 						Thread.sleep(10L);
-					} catch (InterruptedException var15) {
-						var15.printStackTrace();
+					} catch (InterruptedException interruptedException10) {
+						interruptedException10.printStackTrace();
 					}
 				}
 			}
-		} catch (Exception var16) {
-			var16.printStackTrace();
-			logger.log(Level.SEVERE, "Unexpected exception", var16);
+		} catch (Exception exception11) {
+			exception11.printStackTrace();
+			logger.log(Level.SEVERE, "Unexpected exception", exception11);
 
 			while(this.serverRunning) {
 				this.commandLineParser();
 
 				try {
 					Thread.sleep(10L);
-				} catch (InterruptedException var14) {
-					var14.printStackTrace();
+				} catch (InterruptedException interruptedException9) {
+					interruptedException9.printStackTrace();
 				}
 			}
-		} finally {
-			this.stop();
-			this.serverStopped = true;
-			System.exit(0);
 		}
 
+		logger.info(this.serverRunning + ", " + this.serverStopped);
+		this.stop();
+		this.serverStopped = true;
+		System.exit(2);
 	}
 
 	private void doTick() throws IOException {
-		ArrayList var1 = new ArrayList();
-		Iterator var2 = playerList.keySet().iterator();
+		ArrayList arrayList1 = new ArrayList();
+		Iterator iterator2 = playerList.keySet().iterator();
 
-		while(var2.hasNext()) {
-			String var3 = (String)var2.next();
-			int var4 = ((Integer)playerList.get(var3)).intValue();
-			if(var4 > 0) {
-				playerList.put(var3, Integer.valueOf(var4 - 1));
+		while(iterator2.hasNext()) {
+			String string3 = (String)iterator2.next();
+			int i4 = ((Integer)playerList.get(string3)).intValue();
+			if(i4 > 0) {
+				playerList.put(string3, i4 - 1);
 			} else {
-				var1.add(var3);
+				arrayList1.add(string3);
 			}
 		}
 
-		int var6;
-		for(var6 = 0; var6 < var1.size(); ++var6) {
-			playerList.remove(var1.get(var6));
+		int i6;
+		for(i6 = 0; i6 < arrayList1.size(); ++i6) {
+			playerList.remove(arrayList1.get(i6));
 		}
 
 		AxisAlignedBB.clearBoundingBoxPool();
@@ -255,244 +264,267 @@
 		this.configManager.onTick();
 		this.entityTracker.updateTrackedEntities();
 
-		for(var6 = 0; var6 < this.playersOnline.size(); ++var6) {
-			((IUpdatePlayerListBox)this.playersOnline.get(var6)).addAllPlayers();
+		for(i6 = 0; i6 < this.playersOnline.size(); ++i6) {
+			((IUpdatePlayerListBox)this.playersOnline.get(i6)).addAllPlayers();
 		}
 
 		try {
 			this.commandLineParser();
-		} catch (Exception var5) {
-			logger.log(Level.WARNING, "Unexpected exception while parsing console command", var5);
+		} catch (Exception exception5) {
+			logger.log(Level.WARNING, "Unexpected exception while parsing console command", exception5);
 		}
 
 	}
 
-	public void addCommand(String var1, ICommandListener var2) {
-		this.commands.add(new ServerCommand(var1, var2));
+	public void addCommand(String command, ICommandListener commandListener) {
+		this.commands.add(new ServerCommand(command, commandListener));
 	}
 
 	public void commandLineParser() {
 		while(this.commands.size() > 0) {
-			ServerCommand var1 = (ServerCommand)this.commands.remove(0);
-			String var2 = var1.command;
-			ICommandListener var3 = var1.commandListener;
-			String var4 = var3.getUsername();
-			if(!var2.toLowerCase().startsWith("help") && !var2.toLowerCase().startsWith("?")) {
-				if(var2.toLowerCase().startsWith("list")) {
-					var3.addHelpCommandMessage("Connected players: " + this.configManager.getPlayerList());
-				} else if(var2.toLowerCase().startsWith("stop")) {
-					this.print(var4, "Stopping the server..");
+			ServerCommand serverCommand1 = (ServerCommand)this.commands.remove(0);
+			String string2 = serverCommand1.command;
+			ICommandListener iCommandListener3 = serverCommand1.commandListener;
+			String string4 = iCommandListener3.getUsername();
+			if(!string2.toLowerCase().startsWith("help") && !string2.toLowerCase().startsWith("?")) {
+				if(string2.toLowerCase().startsWith("list")) {
+					iCommandListener3.addHelpCommandMessage("Connected players: " + this.configManager.getPlayerList());
+				} else if(string2.toLowerCase().startsWith("stop")) {
+					this.print(string4, "Stopping the server..");
 					this.serverRunning = false;
-				} else if(var2.toLowerCase().startsWith("save-all")) {
-					this.print(var4, "Forcing save..");
+				} else if(string2.toLowerCase().startsWith("save-all")) {
+					this.print(string4, "Forcing save..");
 					this.worldMngr.saveWorld(true, (IProgressUpdate)null);
-					this.print(var4, "Save complete.");
-				} else if(var2.toLowerCase().startsWith("save-off")) {
-					this.print(var4, "Disabling level saving..");
+					this.print(string4, "Save complete.");
+				} else if(string2.toLowerCase().startsWith("save-off")) {
+					this.print(string4, "Disabling level saving..");
 					this.worldMngr.levelSaving = true;
-				} else if(var2.toLowerCase().startsWith("save-on")) {
-					this.print(var4, "Enabling level saving..");
+				} else if(string2.toLowerCase().startsWith("save-on")) {
+					this.print(string4, "Enabling level saving..");
 					this.worldMngr.levelSaving = false;
+				} else if(string2.toLowerCase().startsWith("time ")) {
+					try {
+						this.worldMngr.worldTime = Long.parseLong(string2.substring(5));
+						this.print(string4, "Setting time to " + this.worldMngr.worldTime);
+					} catch (Exception exception12) {
+						this.print(string4, "Invalid time value");
+					}
 				} else {
-					String var11;
-					if(var2.toLowerCase().startsWith("op ")) {
-						var11 = var2.substring(var2.indexOf(" ")).trim();
-						this.configManager.opPlayer(var11);
-						this.print(var4, "Opping " + var11);
-						this.configManager.sendChatMessageToPlayer(var11, "\u00a7eYou are now op!");
-					} else if(var2.toLowerCase().startsWith("deop ")) {
-						var11 = var2.substring(var2.indexOf(" ")).trim();
-						this.configManager.deopPlayer(var11);
-						this.configManager.sendChatMessageToPlayer(var11, "\u00a7eYou are no longer op!");
-						this.print(var4, "De-opping " + var11);
-					} else if(var2.toLowerCase().startsWith("ban-ip ")) {
-						var11 = var2.substring(var2.indexOf(" ")).trim();
-						this.configManager.banIP(var11);
-						this.print(var4, "Banning ip " + var11);
-					} else if(var2.toLowerCase().startsWith("pardon-ip ")) {
-						var11 = var2.substring(var2.indexOf(" ")).trim();
-						this.configManager.pardonIP(var11);
-						this.print(var4, "Pardoning ip " + var11);
+					String string5;
+					if(string2.toLowerCase().startsWith("playmus ")) {
+						string5 = string2.substring(8);
+						this.configManager.sendPacketToAllPlayers(new Packet70PlayGlobalMusic(string5));
+						this.print(string4, "Playing music for all players: " + string5);
+					} else if(string2.toLowerCase().startsWith("sysmsg ")) {
+						string5 = string2.substring(7);
+						this.configManager.sendPacketToAllPlayers(new Packet72(string5, 10000));
+					} else if(string2.toLowerCase().startsWith("amoung")) {
+						this.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7d" + string4 + " HAS AN IMPORTANT ANNOUNCEMENT TO MAKE"));
+						this.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7d<" + string4 + ">   ####"));
+						this.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7d<" + string4 + "> ###   #"));
+						this.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7d<" + string4 + "> ######"));
+						this.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7d<" + string4 + ">  ## ##"));
+						this.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7dTHANK YOU FOR YOUR ATTENTION"));
+					} else if(string2.toLowerCase().startsWith("op ")) {
+						string5 = string2.substring(string2.indexOf(" ")).trim();
+						this.configManager.opPlayer(string5);
+						this.print(string4, "Opping " + string5);
+						this.configManager.sendChatMessageToPlayer(string5, "\u00a7eYou are now op!");
+					} else if(string2.toLowerCase().startsWith("deop ")) {
+						string5 = string2.substring(string2.indexOf(" ")).trim();
+						this.configManager.deopPlayer(string5);
+						this.configManager.sendChatMessageToPlayer(string5, "\u00a7eYou are no longer op!");
+						this.print(string4, "De-opping " + string5);
+					} else if(string2.toLowerCase().startsWith("ban-ip ")) {
+						string5 = string2.substring(string2.indexOf(" ")).trim();
+						this.configManager.banIP(string5);
+						this.print(string4, "Banning ip " + string5);
+					} else if(string2.toLowerCase().startsWith("pardon-ip ")) {
+						string5 = string2.substring(string2.indexOf(" ")).trim();
+						this.configManager.pardonIP(string5);
+						this.print(string4, "Pardoning ip " + string5);
 					} else {
-						EntityPlayerMP var12;
-						if(var2.toLowerCase().startsWith("ban ")) {
-							var11 = var2.substring(var2.indexOf(" ")).trim();
-							this.configManager.banPlayer(var11);
-							this.print(var4, "Banning " + var11);
-							var12 = this.configManager.getPlayerEntity(var11);
-							if(var12 != null) {
-								var12.playerNetServerHandler.kickPlayer("Banned by admin");
-							}
-						} else if(var2.toLowerCase().startsWith("pardon ")) {
-							var11 = var2.substring(var2.indexOf(" ")).trim();
-							this.configManager.pardonPlayer(var11);
-							this.print(var4, "Pardoning " + var11);
-						} else if(var2.toLowerCase().startsWith("kick ")) {
-							var11 = var2.substring(var2.indexOf(" ")).trim();
-							var12 = null;
-
-							for(int var13 = 0; var13 < this.configManager.playerEntities.size(); ++var13) {
-								EntityPlayerMP var14 = (EntityPlayerMP)this.configManager.playerEntities.get(var13);
-								if(var14.username.equalsIgnoreCase(var11)) {
-									var12 = var14;
-								}
-							}
-
-							if(var12 != null) {
-								var12.playerNetServerHandler.kickPlayer("Kicked by admin");
-								this.print(var4, "Kicking " + var12.username);
-							} else {
-								var3.addHelpCommandMessage("Can\'t find user " + var11 + ". No kick.");
-							}
+						EntityPlayerMP entityPlayerMP6;
+						if(string2.toLowerCase().startsWith("ban ")) {
+							string5 = string2.substring(string2.indexOf(" ")).trim();
+							this.configManager.banPlayer(string5);
+							this.print(string4, "Banning " + string5);
+							entityPlayerMP6 = this.configManager.getPlayerEntity(string5);
+							if(entityPlayerMP6 != null) {
+								entityPlayerMP6.playerNetServerHandler.kickPlayer("Banned by admin");
+							}
+						} else if(string2.toLowerCase().startsWith("pardon ")) {
+							string5 = string2.substring(string2.indexOf(" ")).trim();
+							this.configManager.pardonPlayer(string5);
+							this.print(string4, "Pardoning " + string5);
 						} else {
-							String[] var5;
-							EntityPlayerMP var7;
-							if(var2.toLowerCase().startsWith("tp ")) {
-								var5 = var2.split(" ");
-								if(var5.length == 3) {
-									var12 = this.configManager.getPlayerEntity(var5[1]);
-									var7 = this.configManager.getPlayerEntity(var5[2]);
-									if(var12 == null) {
-										var3.addHelpCommandMessage("Can\'t find user " + var5[1] + ". No tp.");
-									} else if(var7 == null) {
-										var3.addHelpCommandMessage("Can\'t find user " + var5[2] + ". No tp.");
-									} else {
-										var12.playerNetServerHandler.teleportTo(var7.posX, var7.posY, var7.posZ, var7.rotationYaw, var7.rotationPitch);
-										this.print(var4, "Teleporting " + var5[1] + " to " + var5[2] + ".");
+							EntityPlayerMP entityPlayerMP8;
+							if(string2.toLowerCase().startsWith("kick ")) {
+								string5 = string2.substring(string2.indexOf(" ")).trim();
+								entityPlayerMP6 = null;
+
+								for(int i14 = 0; i14 < this.configManager.playerEntities.size(); ++i14) {
+									entityPlayerMP8 = (EntityPlayerMP)this.configManager.playerEntities.get(i14);
+									if(entityPlayerMP8.username.equalsIgnoreCase(string5)) {
+										entityPlayerMP6 = entityPlayerMP8;
 									}
+								}
+
+								if(entityPlayerMP6 != null) {
+									entityPlayerMP6.playerNetServerHandler.kickPlayer("Kicked by admin");
+									this.print(string4, "Kicking " + entityPlayerMP6.username);
 								} else {
-									var3.addHelpCommandMessage("Syntax error, please provice a source and a target.");
-								}
-							} else if(var2.toLowerCase().startsWith("give ")) {
-								var5 = var2.split(" ");
-								if(var5.length != 3 && var5.length != 4) {
-									return;
-								}
-
-								String var6 = var5[1];
-								var7 = this.configManager.getPlayerEntity(var6);
-								if(var7 != null) {
-									try {
-										int var8 = Integer.parseInt(var5[2]);
-										if(Item.itemsList[var8] != null) {
-											this.print(var4, "Giving " + var7.username + " some " + var8);
-											int var9 = 1;
-											if(var5.length > 3) {
-												var9 = this.parseInt(var5[3], 1);
-											}
-
-											if(var9 < 1) {
-												var9 = 1;
-											}
-
-											if(var9 > 64) {
-												var9 = 64;
-											}
-
-											var7.dropPlayerItem(new ItemStack(var8, var9));
+									iCommandListener3.addHelpCommandMessage("Can\'t find user " + string5 + ". No kick.");
+								}
+							} else {
+								String[] string7;
+								if(string2.toLowerCase().startsWith("tp ")) {
+									string7 = string2.split(" ");
+									if(string7.length == 3) {
+										entityPlayerMP6 = this.configManager.getPlayerEntity(string7[1]);
+										entityPlayerMP8 = this.configManager.getPlayerEntity(string7[2]);
+										if(entityPlayerMP6 == null) {
+											iCommandListener3.addHelpCommandMessage("Can\'t find user " + string7[1] + ". No tp.");
+										} else if(entityPlayerMP8 == null) {
+											iCommandListener3.addHelpCommandMessage("Can\'t find user " + string7[2] + ". No tp.");
 										} else {
-											var3.addHelpCommandMessage("There\'s no item with id " + var8);
-										}
-									} catch (NumberFormatException var10) {
-										var3.addHelpCommandMessage("There\'s no item with id " + var5[2]);
+											entityPlayerMP6.playerNetServerHandler.teleportTo(entityPlayerMP8.posX, entityPlayerMP8.posY, entityPlayerMP8.posZ, entityPlayerMP8.rotationYaw, entityPlayerMP8.rotationPitch);
+											this.print(string4, "Teleporting " + string7[1] + " to " + string7[2] + ".");
+										}
+									} else {
+										iCommandListener3.addHelpCommandMessage("Syntax error, please provice a source and a target.");
+									}
+								} else if(string2.toLowerCase().startsWith("give ")) {
+									string7 = string2.split(" ");
+									if(string7.length != 3 && string7.length != 4) {
+										return;
+									}
+
+									String string9 = string7[1];
+									entityPlayerMP8 = this.configManager.getPlayerEntity(string9);
+									if(entityPlayerMP8 != null) {
+										try {
+											int i10 = Integer.parseInt(string7[2]);
+											if(Item.itemsList[i10] != null) {
+												this.print(string4, "Giving " + entityPlayerMP8.username + " some " + i10);
+												int i11 = 1;
+												if(string7.length > 3) {
+													i11 = this.parseInt(string7[3], 1);
+												}
+
+												if(i11 < 1) {
+													i11 = 1;
+												}
+
+												if(i11 > 64) {
+													i11 = 64;
+												}
+
+												entityPlayerMP8.dropPlayerItem(new ItemStack(i10, i11));
+											} else {
+												iCommandListener3.addHelpCommandMessage("There\'s no item with id " + i10);
+											}
+										} catch (NumberFormatException numberFormatException13) {
+											iCommandListener3.addHelpCommandMessage("There\'s no item with id " + string7[2]);
+										}
+									} else {
+										iCommandListener3.addHelpCommandMessage("Can\'t find user " + string9);
+									}
+								} else if(string2.toLowerCase().startsWith("say ")) {
+									string2 = string2.substring(string2.indexOf(" ")).trim();
+									logger.info("[" + string4 + "] " + string2);
+									this.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7d[Server] " + string2));
+								} else if(string2.toLowerCase().startsWith("tell ")) {
+									string7 = string2.split(" ");
+									if(string7.length >= 3) {
+										string2 = string2.substring(string2.indexOf(" ")).trim();
+										string2 = string2.substring(string2.indexOf(" ")).trim();
+										logger.info("[" + string4 + "->" + string7[1] + "] " + string2);
+										this.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7d[Server] " + string2));
+										string2 = "\u00a77" + string4 + " whispers " + string2;
+										logger.info(string2);
+										if(!this.configManager.sendPacketToPlayer(string7[1], new Packet3Chat(string2))) {
+											iCommandListener3.addHelpCommandMessage("There\'s no player by that name online.");
+										}
 									}
 								} else {
-									var3.addHelpCommandMessage("Can\'t find user " + var6);
-								}
-							} else if(var2.toLowerCase().startsWith("say ")) {
-								var2 = var2.substring(var2.indexOf(" ")).trim();
-								logger.info("[" + var4 + "] " + var2);
-								this.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7d[Server] " + var2));
-							} else if(var2.toLowerCase().startsWith("tell ")) {
-								var5 = var2.split(" ");
-								if(var5.length >= 3) {
-									var2 = var2.substring(var2.indexOf(" ")).trim();
-									var2 = var2.substring(var2.indexOf(" ")).trim();
-									logger.info("[" + var4 + "->" + var5[1] + "] " + var2);
-									this.configManager.sendPacketToAllPlayers(new Packet3Chat("\u00a7d[Server] " + var2));
-									var2 = "\u00a77" + var4 + " whispers " + var2;
-									logger.info(var2);
-									if(!this.configManager.sendPacketToPlayer(var5[1], new Packet3Chat(var2))) {
-										var3.addHelpCommandMessage("There\'s no player by that name online.");
-									}
-								}
-							} else {
-								logger.info("Unknown console command. Type \"help\" for help.");
+									logger.info("Unknown console command. Type \"help\" for help.");
+								}
 							}
 						}
 					}
 				}
 			} else {
-				var3.addHelpCommandMessage("To run the server without a gui, start it like this:");
-				var3.addHelpCommandMessage("   java -Xmx1024M -Xms1024M -jar minecraft_server.jar nogui");
-				var3.addHelpCommandMessage("Console commands:");
-				var3.addHelpCommandMessage("   help  or  ?               shows this message");
-				var3.addHelpCommandMessage("   kick <player>             removes a player from the server");
-				var3.addHelpCommandMessage("   ban <player>              bans a player from the server");
-				var3.addHelpCommandMessage("   pardon <player>           pardons a banned player so that they can connect again");
-				var3.addHelpCommandMessage("   ban-ip <ip>               bans an IP address from the server");
-				var3.addHelpCommandMessage("   pardon-ip <ip>            pardons a banned IP address so that they can connect again");
-				var3.addHelpCommandMessage("   op <player>               turns a player into an op");
-				var3.addHelpCommandMessage("   deop <player>             removes op status from a player");
-				var3.addHelpCommandMessage("   tp <player1> <player2>    moves one player to the same location as another player");
-				var3.addHelpCommandMessage("   give <player> <id> [num]  gives a player a resource");
-				var3.addHelpCommandMessage("   tell <player> <message>   sends a private message to a player");
-				var3.addHelpCommandMessage("   stop                      gracefully stops the server");
-				var3.addHelpCommandMessage("   save-all                  forces a server-wide level save");
-				var3.addHelpCommandMessage("   save-off                  disables terrain saving (useful for backup scripts)");
-				var3.addHelpCommandMessage("   save-on                   re-enables terrain saving");
-				var3.addHelpCommandMessage("   list                      lists all currently connected players");
-				var3.addHelpCommandMessage("   say <message>             broadcasts a message to all players");
-			}
-		}
-
-	}
-
-	private void print(String var1, String var2) {
-		String var3 = var1 + ": " + var2;
-		this.configManager.sendChatMessageToAllOps("\u00a77(" + var3 + ")");
-		logger.info(var3);
-	}
-
-	private int parseInt(String var1, int var2) {
-		try {
-			return Integer.parseInt(var1);
-		} catch (NumberFormatException var4) {
-			return var2;
-		}
-	}
-
-	public void addToOnlinePlayerList(IUpdatePlayerListBox var1) {
-		this.playersOnline.add(var1);
-	}
-
-	public static void main(String[] var0) {
-		try {
-			MinecraftServer var1 = new MinecraftServer();
-			if(!GraphicsEnvironment.isHeadless() && (var0.length <= 0 || !var0[0].equals("nogui"))) {
-				ServerGUI.initGui(var1);
-			}
-
-			(new ThreadServerApplication("Server thread", var1)).start();
-		} catch (Exception var2) {
-			logger.log(Level.SEVERE, "Failed to start the minecraft server", var2);
-		}
-
-	}
-
-	public File getFile(String var1) {
-		return new File(var1);
-	}
-
-	public void addHelpCommandMessage(String var1) {
-		logger.info(var1);
+				iCommandListener3.addHelpCommandMessage("To run the server without a gui, start it like this:");
+				iCommandListener3.addHelpCommandMessage("   java -Xmx1024M -Xms1024M -jar minecraft_server.jar nogui");
+				iCommandListener3.addHelpCommandMessage("Console commands:");
+				iCommandListener3.addHelpCommandMessage("   help  or  ?               shows this message");
+				iCommandListener3.addHelpCommandMessage("   kick <player>             removes a player from the server");
+				iCommandListener3.addHelpCommandMessage("   ban <player>              bans a player from the server");
+				iCommandListener3.addHelpCommandMessage("   pardon <player>           pardons a banned player so that they can connect again");
+				iCommandListener3.addHelpCommandMessage("   ban-ip <ip>               bans an IP address from the server");
+				iCommandListener3.addHelpCommandMessage("   pardon-ip <ip>            pardons a banned IP address so that they can connect again");
+				iCommandListener3.addHelpCommandMessage("   op <player>               turns a player into an op");
+				iCommandListener3.addHelpCommandMessage("   deop <player>             removes op status from a player");
+				iCommandListener3.addHelpCommandMessage("   tp <player1> <player2>    moves one player to the same location as another player");
+				iCommandListener3.addHelpCommandMessage("   give <player> <id> [num]  gives a player a resource");
+				iCommandListener3.addHelpCommandMessage("   tell <player> <message>   sends a private message to a player");
+				iCommandListener3.addHelpCommandMessage("   stop                      gracefully stops the server");
+				iCommandListener3.addHelpCommandMessage("   save-all                  forces a server-wide level save");
+				iCommandListener3.addHelpCommandMessage("   save-off                  disables terrain saving (useful for backup scripts)");
+				iCommandListener3.addHelpCommandMessage("   save-on                   re-enables terrain saving");
+				iCommandListener3.addHelpCommandMessage("   list                      lists all currently connected players");
+				iCommandListener3.addHelpCommandMessage("   say <message>             broadcasts a message to all players");
+			}
+		}
+
+	}
+
+	private void print(String string1, String string2) {
+		String string3 = string1 + ": " + string2;
+		this.configManager.sendChatMessageToAllOps("\u00a77(" + string3 + ")");
+		logger.info(string3);
+	}
+
+	private int parseInt(String string, int defaultValue) {
+		try {
+			return Integer.parseInt(string);
+		} catch (NumberFormatException numberFormatException4) {
+			return defaultValue;
+		}
+	}
+
+	public void addToOnlinePlayerList(IUpdatePlayerListBox playerListBox) {
+		this.playersOnline.add(playerListBox);
+	}
+
+	public static void main(String[] args) {
+		try {
+			field_6098_47T69Px11B2sK2WzDkgABw58BK6Bs11QIk6TmoU8Y89Fs8WTSdr6zO59qDz1 = new MinecraftServer();
+			if(!GraphicsEnvironment.isHeadless() && (args.length <= 0 || !args[0].equals("nogui"))) {
+				ServerGUI.initGui(field_6098_47T69Px11B2sK2WzDkgABw58BK6Bs11QIk6TmoU8Y89Fs8WTSdr6zO59qDz1);
+			}
+
+			(new ThreadServerApplication("Server thread", field_6098_47T69Px11B2sK2WzDkgABw58BK6Bs11QIk6TmoU8Y89Fs8WTSdr6zO59qDz1)).start();
+		} catch (Exception exception2) {
+			logger.log(Level.SEVERE, "Failed to start the minecraft server", exception2);
+		}
+
+	}
+
+	public File getFile(String fileName) {
+		return new File(fileName);
+	}
+
+	public void addHelpCommandMessage(String helpCommandMessage) {
+		logger.info(helpCommandMessage);
 	}
 
 	public String getUsername() {
 		return "CONSOLE";
 	}
 
-	public static boolean isServerRunning(MinecraftServer var0) {
-		return var0.serverRunning;
+	public static boolean isServerRunning(MinecraftServer minecraftServer) {
+		return minecraftServer.serverRunning;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockIceDoor.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockIceDoor extends BlockDoor {
+	public BlockIceDoor(int integer1, int integer2) {
+		super(integer1, Material.wood);
+		this.blockIndexInTexture = integer2;
+	}
+
+	public int idDropped(int count, Random random) {
+		return (count & 8) != 0 ? 0 : ExtItems.IceDoor.shiftedIndex;
+	}
+}
--- net/minecraft/src/BlockCactus.java
+++ net/minecraft/src/BlockCactus.java
@@ -3,37 +3,37 @@
 import java.util.Random;
 
 public class BlockCactus extends Block {
-	protected BlockCactus(int var1, int var2) {
-		super(var1, var2, Material.cactus);
+	protected BlockCactus(int id, int blockIndex) {
+		super(id, blockIndex, Material.cactus);
 		this.setTickOnLoad(true);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getBlockId(var2, var3 + 1, var4) == 0) {
-			int var6;
-			for(var6 = 1; var1.getBlockId(var2, var3 - var6, var4) == this.blockID; ++var6) {
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		if(world.getBlockId(x, y + 1, z) == 0) {
+			int i6;
+			for(i6 = 1; world.getBlockId(x, y - i6, z) == this.blockID; ++i6) {
 			}
 
-			if(var6 < 3) {
-				int var7 = var1.getBlockMetadata(var2, var3, var4);
-				if(var7 == 15) {
-					var1.setBlockWithNotify(var2, var3 + 1, var4, this.blockID);
-					var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
+			if(i6 < 3) {
+				int i7 = world.getBlockMetadata(x, y, z);
+				if(i7 == 15) {
+					world.setBlockWithNotify(x, y + 1, z, this.blockID);
+					world.setBlockMetadataWithNotify(x, y, z, 0);
 				} else {
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + 1);
+					world.setBlockMetadataWithNotify(x, y, z, i7 + 1);
 				}
 			}
 		}
 
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		float var5 = 1.0F / 16.0F;
-		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + var5), (double)var3, (double)((float)var4 + var5), (double)((float)(var2 + 1) - var5), (double)((float)(var3 + 1) - var5), (double)((float)(var4 + 1) - var5));
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		float f5 = 0.0625F;
+		return AxisAlignedBB.getBoundingBoxFromPool((double)((float)x + f5), (double)y, (double)((float)z + f5), (double)((float)(x + 1) - f5), (double)((float)(y + 1) - f5), (double)((float)(z + 1) - f5));
 	}
 
-	public int getBlockTextureFromSide(int var1) {
-		return var1 == 1 ? this.blockIndexInTexture - 1 : (var1 == 0 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture);
+	public int getBlockTextureFromSide(int side) {
+		return side == 1 ? this.blockIndexInTexture - 1 : (side == 0 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture);
 	}
 
 	public boolean isOpaqueCube() {
@@ -44,34 +44,34 @@
 		return 13;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return !super.canPlaceBlockAt(var1, var2, var3, var4) ? false : this.canBlockStay(var1, var2, var3, var4);
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return !super.canPlaceBlockAt(world, x, y, z) ? false : this.canBlockStay(world, x, y, z);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!this.canBlockStay(var1, var2, var3, var4)) {
-			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-			var1.setBlockWithNotify(var2, var3, var4, 0);
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		if(!this.canBlockStay(world, x, y, z)) {
+			this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+			world.setBlockWithNotify(x, y, z, 0);
 		}
 
 	}
 
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockMaterial(var2 - 1, var3, var4).isSolid()) {
-			return false;
-		} else if(var1.getBlockMaterial(var2 + 1, var3, var4).isSolid()) {
-			return false;
-		} else if(var1.getBlockMaterial(var2, var3, var4 - 1).isSolid()) {
-			return false;
-		} else if(var1.getBlockMaterial(var2, var3, var4 + 1).isSolid()) {
+	public boolean canBlockStay(World world, int x, int y, int z) {
+		if(world.getBlockMaterial(x - 1, y, z).isSolid()) {
+			return false;
+		} else if(world.getBlockMaterial(x + 1, y, z).isSolid()) {
+			return false;
+		} else if(world.getBlockMaterial(x, y, z - 1).isSolid()) {
+			return false;
+		} else if(world.getBlockMaterial(x, y, z + 1).isSolid()) {
 			return false;
 		} else {
-			int var5 = var1.getBlockId(var2, var3 - 1, var4);
-			return var5 == Block.cactus.blockID || var5 == Block.sand.blockID;
+			int i5 = world.getBlockId(x, y - 1, z);
+			return i5 == Block.cactus.blockID || i5 == Block.sand.blockID;
 		}
 	}
 
-	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-		var5.attackEntityFrom((Entity)null, 1);
+	public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) {
+		entity.attackEntityFrom((Entity)null, 1);
 	}
 }
--- net/minecraft/src/ServerWindowAdapter.java
+++ net/minecraft/src/ServerWindowAdapter.java
@@ -2,23 +2,24 @@
 
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
+
 import net.minecraft.server.MinecraftServer;
 
 final class ServerWindowAdapter extends WindowAdapter {
 	final MinecraftServer mcServer;
 
-	ServerWindowAdapter(MinecraftServer var1) {
-		this.mcServer = var1;
+	ServerWindowAdapter(MinecraftServer minecraftServer) {
+		this.mcServer = minecraftServer;
 	}
 
-	public void windowClosing(WindowEvent var1) {
+	public void windowClosing(WindowEvent windowEvent) {
 		this.mcServer.stopRunning();
 
 		while(!this.mcServer.serverStopped) {
 			try {
 				Thread.sleep(100L);
-			} catch (InterruptedException var3) {
-				var3.printStackTrace();
+			} catch (InterruptedException interruptedException3) {
+				interruptedException3.printStackTrace();
 			}
 		}
 
--- net/minecraft/src/BlockStationary.java
+++ net/minecraft/src/BlockStationary.java
@@ -3,47 +3,47 @@
 import java.util.Random;
 
 public class BlockStationary extends BlockFluid {
-	protected BlockStationary(int var1, Material var2) {
-		super(var1, var2);
+	protected BlockStationary(int id, Material material) {
+		super(id, material);
 		this.setTickOnLoad(false);
-		if(var2 == Material.lava) {
+		if(material == Material.lava) {
 			this.setTickOnLoad(true);
 		}
 
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			this.setNotStationary(var1, var2, var3, var4);
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
+		super.onNeighborBlockChange(world, x, y, z, flag);
+		if(world.getBlockId(x, y, z) == this.blockID) {
+			this.setNotStationary(world, x, y, z);
 		}
 
 	}
 
-	private void setNotStationary(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		var1.editingBlocks = true;
-		var1.setBlockAndMetadata(var2, var3, var4, this.blockID - 1, var5);
-		var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID - 1);
-		var1.editingBlocks = false;
+	private void setNotStationary(World world, int x, int y, int z) {
+		int i5 = world.getBlockMetadata(x, y, z);
+		world.editingBlocks = true;
+		world.setBlockAndMetadata(x, y, z, this.blockID - 1, i5);
+		world.markBlocksDirty(x, y, z, x, y, z);
+		world.scheduleBlockUpdate(x, y, z, this.blockID - 1);
+		world.editingBlocks = false;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
+	public void updateTick(World world, int x, int y, int z, Random random) {
 		if(this.material == Material.lava) {
-			int var6 = var5.nextInt(3);
+			int i6 = random.nextInt(3);
 
-			for(int var7 = 0; var7 < var6; ++var7) {
-				var2 += var5.nextInt(3) - 1;
-				++var3;
-				var4 += var5.nextInt(3) - 1;
-				int var8 = var1.getBlockId(var2, var3, var4);
-				if(var8 == 0) {
-					if(this.isFlammable(var1, var2 - 1, var3, var4) || this.isFlammable(var1, var2 + 1, var3, var4) || this.isFlammable(var1, var2, var3, var4 - 1) || this.isFlammable(var1, var2, var3, var4 + 1) || this.isFlammable(var1, var2, var3 - 1, var4) || this.isFlammable(var1, var2, var3 + 1, var4)) {
-						var1.setBlockWithNotify(var2, var3, var4, Block.fire.blockID);
+			for(int i7 = 0; i7 < i6; ++i7) {
+				x += random.nextInt(3) - 1;
+				++y;
+				z += random.nextInt(3) - 1;
+				int i8 = world.getBlockId(x, y, z);
+				if(i8 == 0) {
+					if(this.isFlammable(world, x - 1, y, z) || this.isFlammable(world, x + 1, y, z) || this.isFlammable(world, x, y, z - 1) || this.isFlammable(world, x, y, z + 1) || this.isFlammable(world, x, y - 1, z) || this.isFlammable(world, x, y + 1, z)) {
+						world.setBlockWithNotify(x, y, z, Block.fire.blockID);
 						return;
 					}
-				} else if(Block.blocksList[var8].material.getIsSolid()) {
+				} else if(Block.blocksList[i8].material.getIsSolid()) {
 					return;
 				}
 			}
@@ -51,7 +51,7 @@
 
 	}
 
-	private boolean isFlammable(World var1, int var2, int var3, int var4) {
-		return var1.getBlockMaterial(var2, var3, var4).getCanBurn();
+	private boolean isFlammable(World world, int x, int y, int z) {
+		return world.getBlockMaterial(x, y, z).getCanBurn();
 	}
 }
--- net/minecraft/src/BlockContainer.java
+++ net/minecraft/src/BlockContainer.java
@@ -1,23 +1,23 @@
 package net.minecraft.src;
 
 public abstract class BlockContainer extends Block {
-	protected BlockContainer(int var1, Material var2) {
-		super(var1, var2);
-		isBlockContainer[var1] = true;
-	}
-
-	protected BlockContainer(int var1, int var2, Material var3) {
-		super(var1, var2, var3);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		super.onBlockAdded(var1, var2, var3, var4);
-		var1.setBlockTileEntity(var2, var3, var4, this.getBlockEntity());
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		super.onBlockRemoval(var1, var2, var3, var4);
-		var1.removeBlockTileEntity(var2, var3, var4);
+	protected BlockContainer(int id, Material material) {
+		super(id, material);
+		isBlockContainer[id] = true;
+	}
+
+	protected BlockContainer(int id, int blockIndex, Material material) {
+		super(id, blockIndex, material);
+	}
+
+	public void onBlockAdded(World world, int x, int y, int z) {
+		super.onBlockAdded(world, x, y, z);
+		world.setBlockTileEntity(x, y, z, this.getBlockEntity());
+	}
+
+	public void onBlockRemoval(World world, int x, int y, int z) {
+		super.onBlockRemoval(world, x, y, z);
+		world.removeBlockTileEntity(x, y, z);
 	}
 
 	protected abstract TileEntity getBlockEntity();
--- net/minecraft/src/BlockCrops.java
+++ net/minecraft/src/BlockCrops.java
@@ -3,100 +3,100 @@
 import java.util.Random;
 
 public class BlockCrops extends BlockFlower {
-	protected BlockCrops(int var1, int var2) {
-		super(var1, var2);
-		this.blockIndexInTexture = var2;
+	protected BlockCrops(int id, int blockIndex) {
+		super(id, blockIndex);
+		this.blockIndexInTexture = blockIndex;
 		this.setTickOnLoad(true);
-		float var3 = 0.5F;
-		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, 0.25F, 0.5F + var3);
-	}
-
-	protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-		return var1 == Block.tilledField.blockID;
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		super.updateTick(var1, var2, var3, var4, var5);
-		if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 < 7) {
-				float var7 = this.getGrowthRate(var1, var2, var3, var4);
-				if(var5.nextInt((int)(100.0F / var7)) == 0) {
-					++var6;
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
+		float f3 = 0.5F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, 0.25F, 0.5F + f3);
+	}
+
+	protected boolean canThisPlantGrowOnThisBlockID(int id) {
+		return id == Block.tilledField.blockID;
+	}
+
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		super.updateTick(world, x, y, z, random);
+		if(world.getBlockLightValue(x, y + 1, z) >= 9) {
+			int i6 = world.getBlockMetadata(x, y, z);
+			if(i6 < 7) {
+				float f7 = this.getGrowthRate(world, x, y, z);
+				if(random.nextInt((int)(100.0F / f7)) == 0) {
+					++i6;
+					world.setBlockMetadataWithNotify(x, y, z, i6);
 				}
 			}
 		}
 
 	}
 
-	private float getGrowthRate(World var1, int var2, int var3, int var4) {
-		float var5 = 1.0F;
-		int var6 = var1.getBlockId(var2, var3, var4 - 1);
-		int var7 = var1.getBlockId(var2, var3, var4 + 1);
-		int var8 = var1.getBlockId(var2 - 1, var3, var4);
-		int var9 = var1.getBlockId(var2 + 1, var3, var4);
-		int var10 = var1.getBlockId(var2 - 1, var3, var4 - 1);
-		int var11 = var1.getBlockId(var2 + 1, var3, var4 - 1);
-		int var12 = var1.getBlockId(var2 + 1, var3, var4 + 1);
-		int var13 = var1.getBlockId(var2 - 1, var3, var4 + 1);
-		boolean var14 = var8 == this.blockID || var9 == this.blockID;
-		boolean var15 = var6 == this.blockID || var7 == this.blockID;
-		boolean var16 = var10 == this.blockID || var11 == this.blockID || var12 == this.blockID || var13 == this.blockID;
+	private float getGrowthRate(World world, int x, int y, int z) {
+		float f5 = 1.0F;
+		int i6 = world.getBlockId(x, y, z - 1);
+		int i7 = world.getBlockId(x, y, z + 1);
+		int i8 = world.getBlockId(x - 1, y, z);
+		int i9 = world.getBlockId(x + 1, y, z);
+		int i10 = world.getBlockId(x - 1, y, z - 1);
+		int i11 = world.getBlockId(x + 1, y, z - 1);
+		int i12 = world.getBlockId(x + 1, y, z + 1);
+		int i13 = world.getBlockId(x - 1, y, z + 1);
+		boolean z14 = i8 == this.blockID || i9 == this.blockID;
+		boolean z15 = i6 == this.blockID || i7 == this.blockID;
+		boolean z16 = i10 == this.blockID || i11 == this.blockID || i12 == this.blockID || i13 == this.blockID;
 
-		for(int var17 = var2 - 1; var17 <= var2 + 1; ++var17) {
-			for(int var18 = var4 - 1; var18 <= var4 + 1; ++var18) {
-				int var19 = var1.getBlockId(var17, var3 - 1, var18);
-				float var20 = 0.0F;
-				if(var19 == Block.tilledField.blockID) {
-					var20 = 1.0F;
-					if(var1.getBlockMetadata(var17, var3 - 1, var18) > 0) {
-						var20 = 3.0F;
+		for(int i17 = x - 1; i17 <= x + 1; ++i17) {
+			for(int i18 = z - 1; i18 <= z + 1; ++i18) {
+				int i19 = world.getBlockId(i17, y - 1, i18);
+				float f20 = 0.0F;
+				if(i19 == Block.tilledField.blockID) {
+					f20 = 1.0F;
+					if(world.getBlockMetadata(i17, y - 1, i18) > 0) {
+						f20 = 3.0F;
 					}
 				}
 
-				if(var17 != var2 || var18 != var4) {
-					var20 /= 4.0F;
+				if(i17 != x || i18 != z) {
+					f20 /= 4.0F;
 				}
 
-				var5 += var20;
+				f5 += f20;
 			}
 		}
 
-		if(var16 || var14 && var15) {
-			var5 /= 2.0F;
+		if(z16 || z14 && z15) {
+			f5 /= 2.0F;
 		}
 
-		return var5;
+		return f5;
 	}
 
 	public int getRenderType() {
 		return 6;
 	}
 
-	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-		super.onBlockDestroyedByPlayer(var1, var2, var3, var4, var5);
+	public void onBlockDestroyedByPlayer(World world, int x, int y, int z, int flag) {
+		super.onBlockDestroyedByPlayer(world, x, y, z, flag);
 
-		for(int var6 = 0; var6 < 3; ++var6) {
-			if(var1.rand.nextInt(15) <= var5) {
-				float var7 = 0.7F;
-				float var8 = var1.rand.nextFloat() * var7 + (1.0F - var7) * 0.5F;
-				float var9 = var1.rand.nextFloat() * var7 + (1.0F - var7) * 0.5F;
-				float var10 = var1.rand.nextFloat() * var7 + (1.0F - var7) * 0.5F;
-				EntityItem var11 = new EntityItem(var1, (double)((float)var2 + var8), (double)((float)var3 + var9), (double)((float)var4 + var10), new ItemStack(Item.seeds));
-				var11.delayBeforeCanPickup = 10;
-				var1.spawnEntityInWorld(var11);
+		for(int i6 = 0; i6 < 3; ++i6) {
+			if(world.rand.nextInt(15) <= flag) {
+				float f7 = 0.7F;
+				float f8 = world.rand.nextFloat() * f7 + (1.0F - f7) * 0.5F;
+				float f9 = world.rand.nextFloat() * f7 + (1.0F - f7) * 0.5F;
+				float f10 = world.rand.nextFloat() * f7 + (1.0F - f7) * 0.5F;
+				EntityItem entityItem11 = new EntityItem(world, (double)((float)x + f8), (double)((float)y + f9), (double)((float)z + f10), new ItemStack(Item.seeds));
+				entityItem11.delayBeforeCanPickup = 10;
+				world.spawnEntityInWorld(entityItem11);
 			}
 		}
 
 	}
 
-	public int idDropped(int var1, Random var2) {
-		System.out.println("Get resource: " + var1);
-		return var1 == 7 ? Item.wheat.shiftedIndex : -1;
+	public int idDropped(int count, Random random) {
+		System.out.println("Get resource: " + count);
+		return count == 7 ? Item.wheat.shiftedIndex : -1;
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 1;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockFrigidTrunk.java
@@ -1,0 +1,35 @@
+package net.minecraft.src;
+
+public class BlockFrigidTrunk extends Block {
+	public BlockFrigidTrunk(int integer1, int integer2) {
+		super(integer1, Material.wood);
+		this.blockIndexInTexture = integer2;
+		this.setTickOnLoad(true);
+		float f3 = 0.2F;
+		this.setBlockBounds(0.5F - f3, 0.0F, 0.5F - f3, 0.5F + f3, f3 * 3.0F, 0.5F + f3);
+	}
+
+	public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		return this.func_6400_6KR87aSdZ3fr4Ne75tt1Rnti2smDD1X89RMGTSyUgwzJpxZ68PhjL2zh91Dg(world.getBlockId(x, y - 1, z));
+	}
+
+	protected boolean func_6400_6KR87aSdZ3fr4Ne75tt1Rnti2smDD1X89RMGTSyUgwzJpxZ68PhjL2zh91Dg(int integer) {
+		return integer == Block.blockSnow.blockID || integer == Block.blockSnow.blockID || integer == Block.blockSnow.blockID;
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		return null;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 1;
+	}
+}
--- /dev/null
+++ net/minecraft/src/ItemGrayGun.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class ItemGrayGun extends Item {
+	public ItemGrayGun(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		if(entityPlayer.inventory.consumeInventoryItem(ExtItems.essence.shiftedIndex)) {
+			worldObj.playSoundAtEntity(entityPlayer, "ext1605.neutralspecial", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+			worldObj.spawnEntityInWorld(new EntityEssenceProjectileUnknownClass(worldObj, entityPlayer));
+		}
+
+		return itemStack;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EnumVendingMachineUnknownClass.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+class EnumVendingMachineUnknownClass {
+    static final /* synthetic */ int[] field_7686_0L7OUMe0cBTxO9eQEB22KfMZ2nRWzMx4Dh94mb77xkFU3T3299p1qk5HmAFl;
+
+    static {
+        field_7686_0L7OUMe0cBTxO9eQEB22KfMZ2nRWzMx4Dh94mb77xkFU3T3299p1qk5HmAFl = new int[EnumVendingMachine.func_7400_8o2trEa6X3hW2BkH660o0y75qMYzm4uk15zNL6vb17e56xNLfa79FJ4cylHs().length];
+        try {
+            EnumVendingMachineUnknownClass.field_7686_0L7OUMe0cBTxO9eQEB22KfMZ2nRWzMx4Dh94mb77xkFU3T3299p1qk5HmAFl[EnumVendingMachine.Armor.ordinal()] = 1;
+        }
+        catch (final NoSuchFieldError noSuchFieldError) {}
+        try {
+            EnumVendingMachineUnknownClass.field_7686_0L7OUMe0cBTxO9eQEB22KfMZ2nRWzMx4Dh94mb77xkFU3T3299p1qk5HmAFl[EnumVendingMachine.Dash.ordinal()] = 2;
+        }
+        catch (final NoSuchFieldError noSuchFieldError2) {}
+        try {
+            EnumVendingMachineUnknownClass.field_7686_0L7OUMe0cBTxO9eQEB22KfMZ2nRWzMx4Dh94mb77xkFU3T3299p1qk5HmAFl[EnumVendingMachine.HealthBoost.ordinal()] = 3;
+        }
+        catch (final NoSuchFieldError noSuchFieldError3) {}
+        try {
+            EnumVendingMachineUnknownClass.field_7686_0L7OUMe0cBTxO9eQEB22KfMZ2nRWzMx4Dh94mb77xkFU3T3299p1qk5HmAFl[EnumVendingMachine.QuickRevive.ordinal()] = 4;
+        }
+        catch (final NoSuchFieldError noSuchFieldError4) {}
+    }
+}
--- net/minecraft/src/Packet23VehicleSpawn.java
+++ net/minecraft/src/Packet23VehicleSpawn.java
@@ -14,32 +14,32 @@
 	public Packet23VehicleSpawn() {
 	}
 
-	public Packet23VehicleSpawn(Entity var1, int var2) {
-		this.entityId = var1.entityID;
-		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-		this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.type = var2;
-	}
-
-	public void readPacketData(DataInputStream var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.type = var1.readByte();
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-	}
-
-	public void writePacket(DataOutputStream var1) throws IOException {
-		var1.writeInt(this.entityId);
-		var1.writeByte(this.type);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleVehicleSpawn(this);
+	public Packet23VehicleSpawn(Entity entity, int type) {
+		this.entityId = entity.entityID;
+		this.xPosition = MathHelper.floor_double(entity.posX * 32.0D);
+		this.yPosition = MathHelper.floor_double(entity.posY * 32.0D);
+		this.zPosition = MathHelper.floor_double(entity.posZ * 32.0D);
+		this.type = type;
+	}
+
+	public void readPacketData(DataInputStream dataInputStream) throws IOException {
+		this.entityId = dataInputStream.readInt();
+		this.type = dataInputStream.readByte();
+		this.xPosition = dataInputStream.readInt();
+		this.yPosition = dataInputStream.readInt();
+		this.zPosition = dataInputStream.readInt();
+	}
+
+	public void writePacket(DataOutputStream dataOutputStream) throws IOException {
+		dataOutputStream.writeInt(this.entityId);
+		dataOutputStream.writeByte(this.type);
+		dataOutputStream.writeInt(this.xPosition);
+		dataOutputStream.writeInt(this.yPosition);
+		dataOutputStream.writeInt(this.zPosition);
+	}
+
+	public void processPacket(NetHandler netHandler) {
+		netHandler.handleVehicleSpawn(this);
 	}
 
 	public int getPacketSize() {
--- /dev/null
+++ net/minecraft/src/UnknownClass.java
@@ -1,0 +1,4 @@
+package net.minecraft.src;
+
+class UnknownClass {
+}
--- /dev/null
+++ net/minecraft/src/EncOutputStream.java
@@ -1,0 +1,115 @@
+package net.minecraft.src;
+
+import java.io.FilterOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+
+class EncOutputStream extends FilterOutputStream {
+	private int leftover = 0;
+	private int b0;
+	private int b1;
+	private int b2;
+	private boolean closed = false;
+	private final char[] base64;
+	private final byte[] newline;
+	private final int linemax;
+	private final boolean doPadding;
+	private int linepos = 0;
+
+	EncOutputStream(OutputStream outputStream, char[] arr, byte[] arr1, int integer, boolean boolean5) {
+		super(outputStream);
+		this.base64 = arr;
+		this.newline = arr1;
+		this.linemax = integer;
+		this.doPadding = boolean5;
+	}
+
+	public void write(int integer) throws IOException {
+		byte[] b2x = new byte[]{(byte)(integer & 255)};
+		this.write(b2x, 0, 1);
+	}
+
+	private void checkNewline() throws IOException {
+		if(this.linepos == this.linemax) {
+			this.out.write(this.newline);
+			this.linepos = 0;
+		}
+
+	}
+
+	public void write(byte[] arr, int integer2, int integer3) throws IOException {
+		if(this.closed) {
+			throw new IOException("Stream is closed");
+		} else if(integer2 >= 0 && integer3 >= 0 && integer3 <= arr.length - integer2) {
+			if(integer3 != 0) {
+				if(this.leftover != 0) {
+					if(this.leftover == 1) {
+						this.b1 = arr[integer2++] & 255;
+						--integer3;
+						if(integer3 == 0) {
+							++this.leftover;
+							return;
+						}
+					}
+
+					this.b2 = arr[integer2++] & 255;
+					--integer3;
+					this.checkNewline();
+					this.out.write(this.base64[this.b0 >> 2]);
+					this.out.write(this.base64[this.b0 << 4 & 63 | this.b1 >> 4]);
+					this.out.write(this.base64[this.b1 << 2 & 63 | this.b2 >> 6]);
+					this.out.write(this.base64[this.b2 & 63]);
+					this.linepos += 4;
+				}
+
+				int i4 = integer3 / 3;
+
+				for(this.leftover = integer3 - i4 * 3; i4-- > 0; this.linepos += 4) {
+					this.checkNewline();
+					int i5 = (arr[integer2++] & 255) << 16 | (arr[integer2++] & 255) << 8 | arr[integer2++] & 255;
+					this.out.write(this.base64[i5 >>> 18 & 63]);
+					this.out.write(this.base64[i5 >>> 12 & 63]);
+					this.out.write(this.base64[i5 >>> 6 & 63]);
+					this.out.write(this.base64[i5 & 63]);
+				}
+
+				if(this.leftover == 1) {
+					this.b0 = arr[integer2++] & 255;
+				} else if(this.leftover == 2) {
+					this.b0 = arr[integer2++] & 255;
+					this.b1 = arr[integer2++] & 255;
+				}
+
+			}
+		} else {
+			throw new ArrayIndexOutOfBoundsException();
+		}
+	}
+
+	public void close() throws IOException {
+		if(!this.closed) {
+			this.closed = true;
+			if(this.leftover == 1) {
+				this.checkNewline();
+				this.out.write(this.base64[this.b0 >> 2]);
+				this.out.write(this.base64[this.b0 << 4 & 63]);
+				if(this.doPadding) {
+					this.out.write(61);
+					this.out.write(61);
+				}
+			} else if(this.leftover == 2) {
+				this.checkNewline();
+				this.out.write(this.base64[this.b0 >> 2]);
+				this.out.write(this.base64[this.b0 << 4 & 63 | this.b1 >> 4]);
+				this.out.write(this.base64[this.b1 << 2 & 63]);
+				if(this.doPadding) {
+					this.out.write(61);
+				}
+			}
+
+			this.leftover = 0;
+			this.out.close();
+		}
+
+	}
+}
--- net/minecraft/src/ItemInWorldManager.java
+++ net/minecraft/src/ItemInWorldManager.java
@@ -11,18 +11,18 @@
 	private int posY;
 	private int posZ;
 
-	public ItemInWorldManager(World var1) {
-		this.worldObj = var1;
+	public ItemInWorldManager(World world) {
+		this.worldObj = world;
 	}
 
-	public void onBlockClicked(int var1, int var2, int var3) {
-		int var4 = this.worldObj.getBlockId(var1, var2, var3);
-		if(var4 > 0 && this.removeProgress == 0.0F) {
-			Block.blocksList[var4].onBlockClicked(this.worldObj, var1, var2, var3, this.thisPlayer);
+	public void onBlockClicked(int integer1, int integer2, int integer3) {
+		int i4 = this.worldObj.getBlockId(integer1, integer2, integer3);
+		if(i4 > 0 && this.removeProgress == 0.0F) {
+			Block.blocksList[i4].onBlockClicked(this.worldObj, integer1, integer2, integer3, this.thisPlayer);
 		}
 
-		if(var4 > 0 && Block.blocksList[var4].blockStrength(this.thisPlayer) >= 1.0F) {
-			this.tryHarvestBlock(var1, var2, var3);
+		if(i4 > 0 && Block.blocksList[i4].blockStrength(this.thisPlayer) >= 1.0F) {
+			this.tryHarvestBlock(integer1, integer2, integer3);
 		}
 
 	}
@@ -32,71 +32,69 @@
 		this.curBlockDurability = 0;
 	}
 
-	public void updateBlockRemoving(int var1, int var2, int var3, int var4) {
+	public void updateBlockRemoving(int integer1, int integer2, int integer3, int integer4) {
 		if(this.curBlockDurability > 0) {
 			--this.curBlockDurability;
-		} else {
-			if(var1 == this.posX && var2 == this.posY && var3 == this.posZ) {
-				int var5 = this.worldObj.getBlockId(var1, var2, var3);
-				if(var5 == 0) {
-					return;
-				}
+		} else if(integer1 == this.posX && integer2 == this.posY && integer3 == this.posZ) {
+			int i5 = this.worldObj.getBlockId(integer1, integer2, integer3);
+			if(i5 == 0) {
+				return;
+			}
 
-				Block var6 = Block.blocksList[var5];
-				this.removeProgress += var6.blockStrength(this.thisPlayer);
-				++this.curblockDamage;
-				if(this.removeProgress >= 1.0F) {
-					this.tryHarvestBlock(var1, var2, var3);
-					this.removeProgress = 0.0F;
-					this.removeProgressUnused = 0.0F;
-					this.curblockDamage = 0.0F;
-					this.curBlockDurability = 5;
-				}
-			} else {
+			Block block6 = Block.blocksList[i5];
+			this.removeProgress += block6.blockStrength(this.thisPlayer);
+			++this.curblockDamage;
+			if(this.removeProgress >= 1.0F) {
+				this.tryHarvestBlock(integer1, integer2, integer3);
 				this.removeProgress = 0.0F;
 				this.removeProgressUnused = 0.0F;
 				this.curblockDamage = 0.0F;
-				this.posX = var1;
-				this.posY = var2;
-				this.posZ = var3;
+				this.curBlockDurability = 5;
 			}
-
-		}
-	}
-
-	public boolean removeBlock(int var1, int var2, int var3) {
-		Block var4 = Block.blocksList[this.worldObj.getBlockId(var1, var2, var3)];
-		int var5 = this.worldObj.getBlockMetadata(var1, var2, var3);
-		boolean var6 = this.worldObj.setBlockWithNotify(var1, var2, var3, 0);
-		if(var4 != null && var6) {
-			var4.onBlockDestroyedByPlayer(this.worldObj, var1, var2, var3, var5);
-		}
-
-		return var6;
-	}
-
-	public boolean tryHarvestBlock(int var1, int var2, int var3) {
-		int var4 = this.worldObj.getBlockId(var1, var2, var3);
-		int var5 = this.worldObj.getBlockMetadata(var1, var2, var3);
-		boolean var6 = this.removeBlock(var1, var2, var3);
-		ItemStack var7 = this.thisPlayer.getCurrentEquippedItem();
-		if(var7 != null) {
-			var7.onDestroyBlock(var4, var1, var2, var3);
-			if(var7.stackSize == 0) {
-				var7.onItemDestroyedByUse(this.thisPlayer);
+		} else {
+			this.removeProgress = 0.0F;
+			this.removeProgressUnused = 0.0F;
+			this.curblockDamage = 0.0F;
+			this.posX = integer1;
+			this.posY = integer2;
+			this.posZ = integer3;
+		}
+
+	}
+
+	public boolean removeBlock(int integer1, int integer2, int integer3) {
+		Block block4 = Block.blocksList[this.worldObj.getBlockId(integer1, integer2, integer3)];
+		int i5 = this.worldObj.getBlockMetadata(integer1, integer2, integer3);
+		boolean z6 = this.worldObj.setBlockWithNotify(integer1, integer2, integer3, 0);
+		if(block4 != null && z6) {
+			block4.onBlockDestroyedByPlayer(this.worldObj, integer1, integer2, integer3, i5);
+		}
+
+		return z6;
+	}
+
+	public boolean tryHarvestBlock(int integer1, int integer2, int integer3) {
+		int i4 = this.worldObj.getBlockId(integer1, integer2, integer3);
+		int i5 = this.worldObj.getBlockMetadata(integer1, integer2, integer3);
+		boolean z6 = this.removeBlock(integer1, integer2, integer3);
+		ItemStack itemStack7 = this.thisPlayer.getCurrentEquippedItem();
+		if(itemStack7 != null) {
+			itemStack7.onDestroyBlock(i4, integer1, integer2, integer3);
+			if(itemStack7.stackSize == 0) {
+				itemStack7.onItemDestroyedByUse(this.thisPlayer);
 				this.thisPlayer.destroyCurrentEquippedItem();
 			}
 		}
 
-		if(var6 && this.thisPlayer.canHarvestBlock(Block.blocksList[var4])) {
-			Block.blocksList[var4].dropBlockAsItem(this.worldObj, var1, var2, var3, var5);
+		if(z6 && this.thisPlayer.canHarvestBlock(Block.blocksList[i4])) {
+			Block.blocksList[i4].dropBlockAsItem(this.worldObj, integer1, integer2, integer3, i5);
 		}
 
-		return var6;
+		return z6;
 	}
 
-	public boolean activeBlockOrUseItem(EntityPlayer var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7) {
-		int var8 = var2.getBlockId(var4, var5, var6);
-		return var8 > 0 && Block.blocksList[var8].blockActivated(var2, var4, var5, var6, var1) ? true : (var3 == null ? false : var3.useItem(var1, var2, var4, var5, var6, var7));
+	public boolean activeBlockOrUseItem(EntityPlayer nh, World cv, ItemStack mc, int integer4, int integer5, int integer6, int integer7) {
+		int i8 = cv.getBlockId(integer4, integer5, integer6);
+		return i8 > 0 && Block.blocksList[i8].blockActivated(cv, integer4, integer5, integer6, nh) ? true : (mc == null ? false : mc.useItem(nh, cv, integer4, integer5, integer6, integer7));
 	}
 }
--- net/minecraft/src/BlockGlass.java
+++ net/minecraft/src/BlockGlass.java
@@ -3,11 +3,11 @@
 import java.util.Random;
 
 public class BlockGlass extends BlockBreakable {
-	public BlockGlass(int var1, int var2, Material var3, boolean var4) {
-		super(var1, var2, var3, var4);
+	public BlockGlass(int id, int blockIndex, Material material, boolean localFlag) {
+		super(id, blockIndex, material, localFlag);
 	}
 
-	public int quantityDropped(Random var1) {
+	public int quantityDropped(Random random) {
 		return 0;
 	}
 }
--- /dev/null
+++ net/minecraft/src/ItemHoursLongPastI.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class ItemHoursLongPastI extends Item {
+	private int field_6735_612v9ewyvgKN4438BO86x4fBOIAn082Mzry91cF0Q8955Zd0sfgOhv7la5rN = 801;
+
+	public ItemHoursLongPastI(int itemID) {
+		super(itemID);
+		this.maxStackSize = 1;
+	}
+
+	public ItemStack onItemRightClick(ItemStack itemStack, World worldObj, EntityPlayer entityPlayer) {
+		worldObj.playSoundAtEntity(entityPlayer, "ext.notif", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
+		return itemStack;
+	}
+}
--- net/minecraft/src/ChunkCoordinates.java
+++ net/minecraft/src/ChunkCoordinates.java
@@ -4,17 +4,17 @@
 	public final int posX;
 	public final int posZ;
 
-	public ChunkCoordinates(int var1, int var2) {
-		this.posX = var1;
-		this.posZ = var2;
+	public ChunkCoordinates(int posX, int posZ) {
+		this.posX = posX;
+		this.posZ = posZ;
 	}
 
-	public boolean equals(Object var1) {
-		if(!(var1 instanceof ChunkCoordinates)) {
+	public boolean equals(Object object) {
+		if(!(object instanceof ChunkCoordinates)) {
 			return false;
 		} else {
-			ChunkCoordinates var2 = (ChunkCoordinates)var1;
-			return this.posX == var2.posX && this.posZ == var2.posZ;
+			ChunkCoordinates chunkCoordinates2 = (ChunkCoordinates)object;
+			return this.posX == chunkCoordinates2.posX && this.posZ == chunkCoordinates2.posZ;
 		}
 	}
 
